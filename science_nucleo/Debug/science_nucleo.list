
science_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800592c  0800592c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800592c  0800592c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000009c  080059d0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080059d0  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f853  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021ec  00000000  00000000  0002f91f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  00031b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  000325f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001dccf  00000000  00000000  00032fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae2f  00000000  00000000  00050c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a8519  00000000  00000000  0005bab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00103fcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb8  00000000  00000000  0010404c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080058d4 	.word	0x080058d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a0 	.word	0x200000a0
 80001d0:	080058d4 	.word	0x080058d4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f000 fcdd 	bl	8000ba8 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* spectral code */
  i2cBus = new_smbus(&hi2c1, &huart2);
 80001ee:	4924      	ldr	r1, [pc, #144]	; (8000280 <main+0x9c>)
 80001f0:	4824      	ldr	r0, [pc, #144]	; (8000284 <main+0xa0>)
 80001f2:	f000 f9b2 	bl	800055a <new_smbus>
 80001f6:	4602      	mov	r2, r0
 80001f8:	4b23      	ldr	r3, [pc, #140]	; (8000288 <main+0xa4>)
 80001fa:	601a      	str	r2, [r3, #0]
  mux = new_mux(i2cBus);
 80001fc:	4b22      	ldr	r3, [pc, #136]	; (8000288 <main+0xa4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f956 	bl	80004b2 <new_mux>
 8000206:	4602      	mov	r2, r0
 8000208:	4b20      	ldr	r3, [pc, #128]	; (800028c <main+0xa8>)
 800020a:	601a      	str	r2, [r3, #0]
  spectral = new_spectral(i2cBus);
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <main+0xa4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4618      	mov	r0, r3
 8000212:	f000 faa5 	bl	8000760 <new_spectral>
 8000216:	4602      	mov	r2, r0
 8000218:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <main+0xac>)
 800021a:	601a      	str	r2, [r3, #0]
   *
   */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f83c 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f91c 	bl	800045c <MX_GPIO_Init>
  MX_DMA_Init();
 8000224:	f000 f8fc 	bl	8000420 <MX_DMA_Init>
  MX_I2C1_Init();
 8000228:	f000 f88a 	bl	8000340 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800022c:	f000 f8c8 	bl	80003c0 <MX_USART2_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* spectral code */
	  // adds all the spectral channels
	  for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 8000230:	2300      	movs	r3, #0
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	e00b      	b.n	800024e <main+0x6a>
		add_channel(mux, spectral_channels[i]);
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <main+0xa8>)
 8000238:	6818      	ldr	r0, [r3, #0]
 800023a:	4a16      	ldr	r2, [pc, #88]	; (8000294 <main+0xb0>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000242:	4619      	mov	r1, r3
 8000244:	f000 f958 	bl	80004f8 <add_channel>
	  for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3301      	adds	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2b02      	cmp	r3, #2
 8000252:	ddf0      	ble.n	8000236 <main+0x52>
	  }

	  // opens all channels on the mux to listen
	  channel_select(mux, mux->channel_list[SPECTRAL_0_CHANNEL] +
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <main+0xa8>)
 8000256:	6818      	ldr	r0, [r3, #0]
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <main+0xa8>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	685a      	ldr	r2, [r3, #4]
				  mux->channel_list[SPECTRAL_1_CHANNEL] +
 800025e:	4b0b      	ldr	r3, [pc, #44]	; (800028c <main+0xa8>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	689b      	ldr	r3, [r3, #8]
	  channel_select(mux, mux->channel_list[SPECTRAL_0_CHANNEL] +
 8000264:	441a      	add	r2, r3
				  mux->channel_list[SPECTRAL_2_CHANNEL]);
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <main+0xa8>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	68db      	ldr	r3, [r3, #12]
	  channel_select(mux, mux->channel_list[SPECTRAL_0_CHANNEL] +
 800026c:	4413      	add	r3, r2
 800026e:	4619      	mov	r1, r3
 8000270:	f000 f962 	bl	8000538 <channel_select>
	  enable(spectral);
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <main+0xac>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4618      	mov	r0, r3
 800027a:	f000 faa4 	bl	80007c6 <enable>
	  for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 800027e:	e7d7      	b.n	8000230 <main+0x4c>
 8000280:	2000015c 	.word	0x2000015c
 8000284:	200000c4 	.word	0x200000c4
 8000288:	20000110 	.word	0x20000110
 800028c:	200001dc 	.word	0x200001dc
 8000290:	20000158 	.word	0x20000158
 8000294:	20000000 	.word	0x20000000

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b0a6      	sub	sp, #152	; 0x98
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002a2:	2228      	movs	r2, #40	; 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f005 faa0 	bl	80057ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2258      	movs	r2, #88	; 0x58
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f005 fa92 	bl	80057ec <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	2302      	movs	r3, #2
 80002ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	2310      	movs	r3, #16
 80002d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002e0:	4618      	mov	r0, r3
 80002e2:	f003 fa89 	bl	80037f8 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ec:	f000 f8da 	bl	80004a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f4:	2300      	movs	r3, #0
 80002f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000304:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f004 f98a 	bl	8004624 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000316:	f000 f8c5 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800031a:	2322      	movs	r3, #34	; 0x22
 800031c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000322:	2300      	movs	r3, #0
 8000324:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f004 fbb1 	bl	8004a90 <HAL_RCCEx_PeriphCLKConfig>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000334:	f000 f8b6 	bl	80004a4 <Error_Handler>
  }
}
 8000338:	bf00      	nop
 800033a:	3798      	adds	r7, #152	; 0x98
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <MX_I2C1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_I2C1_Init+0x74>)
 800034c:	4a1b      	ldr	r2, [pc, #108]	; (80003bc <MX_I2C1_Init+0x7c>)
 800034e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000358:	2201      	movs	r2, #1
 800035a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037a:	480e      	ldr	r0, [pc, #56]	; (80003b4 <MX_I2C1_Init+0x74>)
 800037c:	f001 f936 	bl	80015ec <HAL_I2C_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000386:	f000 f88d 	bl	80004a4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038a:	2100      	movs	r1, #0
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <MX_I2C1_Init+0x74>)
 800038e:	f003 f99b 	bl	80036c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000398:	f000 f884 	bl	80004a4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800039c:	2100      	movs	r1, #0
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_I2C1_Init+0x74>)
 80003a0:	f003 f9dd 	bl	800375e <HAL_I2CEx_ConfigDigitalFilter>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003aa:	f000 f87b 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200000c4 	.word	0x200000c4
 80003b8:	40005400 	.word	0x40005400
 80003bc:	2000090e 	.word	0x2000090e

080003c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <MX_USART2_UART_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ca:	4b13      	ldr	r3, [pc, #76]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <MX_USART2_UART_Init+0x58>)
 8000404:	f004 fd62 	bl	8004ecc <HAL_UART_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f849 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	2000015c 	.word	0x2000015c
 800041c:	40004400 	.word	0x40004400

08000420 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_DMA_Init+0x38>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <MX_DMA_Init+0x38>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_DMA_Init+0x38>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	2011      	movs	r0, #17
 8000444:	f000 fd13 	bl	8000e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000448:	2011      	movs	r0, #17
 800044a:	f000 fd2c 	bl	8000ea6 <HAL_NVIC_EnableIRQ>

}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a0e      	ldr	r2, [pc, #56]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_GPIO_Init+0x44>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_GPIO_Init+0x44>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <new_mux>:
#include "mux.h"
#include "smbus.h"

int channel_map[8] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };

Mux *new_mux(SMBus *i2cBus) {
 80004b2:	b580      	push	{r7, lr}
 80004b4:	b084      	sub	sp, #16
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
    Mux *mux = malloc(sizeof(Mux));
 80004ba:	2028      	movs	r0, #40	; 0x28
 80004bc:	f005 f98e 	bl	80057dc <malloc>
 80004c0:	4603      	mov	r3, r0
 80004c2:	60bb      	str	r3, [r7, #8]
    mux->i2cBus = i2cBus;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	e008      	b.n	80004e2 <new_mux+0x30>
        mux->channel_list[i] = 0x00;
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	4413      	add	r3, r2
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < 8; ++i) {
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	3301      	adds	r3, #1
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	2b07      	cmp	r3, #7
 80004e6:	ddf3      	ble.n	80004d0 <new_mux+0x1e>
    }
    mux->channels_active = 0;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2200      	movs	r2, #0
 80004ec:	625a      	str	r2, [r3, #36]	; 0x24

    return mux;
 80004ee:	68bb      	ldr	r3, [r7, #8]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <add_channel>:

void add_channel(Mux *mux, int channel) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
    if (channel > 7) {
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	2b07      	cmp	r3, #7
 8000506:	dc0e      	bgt.n	8000526 <add_channel+0x2e>
        return;
    }
    mux->channel_list[channel] = channel_map[channel];
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <add_channel+0x3c>)
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000510:	6879      	ldr	r1, [r7, #4]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	440b      	add	r3, r1
 8000518:	605a      	str	r2, [r3, #4]
    mux->channels_active += 1;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	625a      	str	r2, [r3, #36]	; 0x24
 8000524:	e000      	b.n	8000528 <add_channel+0x30>
        return;
 8000526:	bf00      	nop
}
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	2000000c 	.word	0x2000000c

08000538 <channel_select>:

void channel_select(Mux *mux, int channel){
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
    write_byte_data(mux->i2cBus, I2C_MUX_ADDRESS, MUX_CMD, channel);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	22cc      	movs	r2, #204	; 0xcc
 800054c:	2170      	movs	r1, #112	; 0x70
 800054e:	f000 f893 	bl	8000678 <write_byte_data>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
    SMBus *smbus = malloc(sizeof(SMBus));
 8000564:	2028      	movs	r0, #40	; 0x28
 8000566:	f005 f939 	bl	80057dc <malloc>
 800056a:	4603      	mov	r3, r0
 800056c:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	601a      	str	r2, [r3, #0]
    smbus->uart = huart;
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	683a      	ldr	r2, [r7, #0]
 8000578:	605a      	str	r2, [r3, #4]
    smbus->DMA = TRUE;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2201      	movs	r2, #1
 800057e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    memset(smbus->buf, 0, sizeof smbus->buf);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3309      	adds	r3, #9
 8000586:	221e      	movs	r2, #30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 f92e 	bl	80057ec <memset>

    return smbus;
 8000590:	68fb      	ldr	r3, [r7, #12]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <read_byte_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
    }
    _check_error(smbus);
}

long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af02      	add	r7, sp, #8
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	460b      	mov	r3, r1
 80005a4:	70fb      	strb	r3, [r7, #3]
 80005a6:	4613      	mov	r3, r2
 80005a8:	70bb      	strb	r3, [r7, #2]
    //transmits the address to read from
    smbus->buf[0] = cmd;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	78ba      	ldrb	r2, [r7, #2]
 80005ae:	725a      	strb	r2, [r3, #9]
    if (!smbus->DMA) {
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d113      	bne.n	80005e2 <read_byte_data+0x48>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, HAL_MAX_DELAY);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6818      	ldr	r0, [r3, #0]
 80005be:	78fb      	ldrb	r3, [r7, #3]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b299      	uxth	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f103 0209 	add.w	r2, r3, #9
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	f001 f89a 	bl	800170c <HAL_I2C_Master_Transmit>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	721a      	strb	r2, [r3, #8]
 80005e0:	e00f      	b.n	8000602 <read_byte_data+0x68>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	b299      	uxth	r1, r3
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f103 0209 	add.w	r2, r3, #9
 80005f4:	2301      	movs	r3, #1
 80005f6:	f001 fa73 	bl	8001ae0 <HAL_I2C_Master_Transmit_DMA>
 80005fa:	4603      	mov	r3, r0
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f87c 	bl	8000700 <_check_error>
    
    //reads from address sent above
    if (!smbus->DMA) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800060e:	2b00      	cmp	r3, #0
 8000610:	d116      	bne.n	8000640 <read_byte_data+0xa6>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, HAL_MAX_DELAY);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	b21b      	sxth	r3, r3
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	b21b      	sxth	r3, r3
 8000622:	b299      	uxth	r1, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f103 0209 	add.w	r2, r3, #9
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2301      	movs	r3, #1
 8000632:	f001 f95f 	bl	80018f4 <HAL_I2C_Master_Receive>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	721a      	strb	r2, [r3, #8]
 800063e:	e012      	b.n	8000666 <read_byte_data+0xcc>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 1);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	78fb      	ldrb	r3, [r7, #3]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	b21b      	sxth	r3, r3
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	b21b      	sxth	r3, r3
 8000650:	b299      	uxth	r1, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f103 0209 	add.w	r2, r3, #9
 8000658:	2301      	movs	r3, #1
 800065a:	f001 fb31 	bl	8001cc0 <HAL_I2C_Master_Receive_DMA>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 8000666:	6878      	ldr	r0, [r7, #4]
 8000668:	f000 f84a 	bl	8000700 <_check_error>
    return smbus->buf[0];
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7a5b      	ldrb	r3, [r3, #9]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <write_byte_data>:

void write_byte_data(SMBus *smbus, uint8_t addr, char cmd, uint8_t data) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	4608      	mov	r0, r1
 8000682:	4611      	mov	r1, r2
 8000684:	461a      	mov	r2, r3
 8000686:	4603      	mov	r3, r0
 8000688:	70fb      	strb	r3, [r7, #3]
 800068a:	460b      	mov	r3, r1
 800068c:	70bb      	strb	r3, [r7, #2]
 800068e:	4613      	mov	r3, r2
 8000690:	707b      	strb	r3, [r7, #1]
    smbus->buf[0] = cmd;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	78ba      	ldrb	r2, [r7, #2]
 8000696:	725a      	strb	r2, [r3, #9]
    smbus->buf[1] = data;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	787a      	ldrb	r2, [r7, #1]
 800069c:	729a      	strb	r2, [r3, #10]

    //SMBUS docs first byte is cmd to write, second is data
    if (!smbus->DMA) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d113      	bne.n	80006d0 <write_byte_data+0x58>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 2, HAL_MAX_DELAY);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	b299      	uxth	r1, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f103 0209 	add.w	r2, r3, #9
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2302      	movs	r3, #2
 80006c2:	f001 f823 	bl	800170c <HAL_I2C_Master_Transmit>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	721a      	strb	r2, [r3, #8]
 80006ce:	e00f      	b.n	80006f0 <write_byte_data+0x78>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6818      	ldr	r0, [r3, #0]
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	b299      	uxth	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f103 0209 	add.w	r2, r3, #9
 80006e2:	2302      	movs	r3, #2
 80006e4:	f001 f9fc 	bl	8001ae0 <HAL_I2C_Master_Transmit_DMA>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	721a      	strb	r2, [r3, #8]
    }
    _check_error(smbus);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 f805 	bl	8000700 <_check_error>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <_check_error>:
    }
    
    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	7a1b      	ldrb	r3, [r3, #8]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01f      	beq.n	8000750 <_check_error+0x50>
        strcpy((char*)smbus->buf, "Err \r\n");
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3309      	adds	r3, #9
 8000714:	4a11      	ldr	r2, [pc, #68]	; (800075c <_check_error+0x5c>)
 8000716:	6810      	ldr	r0, [r2, #0]
 8000718:	6018      	str	r0, [r3, #0]
 800071a:	8891      	ldrh	r1, [r2, #4]
 800071c:	7992      	ldrb	r2, [r2, #6]
 800071e:	8099      	strh	r1, [r3, #4]
 8000720:	719a      	strb	r2, [r3, #6]

        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), HAL_MAX_DELAY);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	685c      	ldr	r4, [r3, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 0509 	add.w	r5, r3, #9
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3309      	adds	r3, #9
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd4f 	bl	80001d4 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	4629      	mov	r1, r5
 8000740:	4620      	mov	r0, r4
 8000742:	f004 fc11 	bl	8004f68 <HAL_UART_Transmit>
        HAL_Delay(10);
 8000746:	200a      	movs	r0, #10
 8000748:	f000 fa94 	bl	8000c74 <HAL_Delay>
        return FALSE;
 800074c:	2300      	movs	r3, #0
 800074e:	e000      	b.n	8000752 <_check_error+0x52>
    }
    return TRUE;
 8000750:	2301      	movs	r3, #1
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bdb0      	pop	{r4, r5, r7, pc}
 800075a:	bf00      	nop
 800075c:	080058ec 	.word	0x080058ec

08000760 <new_spectral>:
#include "smbus.h"
#include "spectral.h"

// initalizes spectral object, adds bus to it
Spectral *new_spectral(SMBus *i2cBus) {
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
    Spectral *spectral = malloc(sizeof(Spectral));
 8000768:	201c      	movs	r0, #28
 800076a:	f005 f837 	bl	80057dc <malloc>
 800076e:	4603      	mov	r3, r0
 8000770:	613b      	str	r3, [r7, #16]
    spectral->i2cBus = i2cBus;
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	601a      	str	r2, [r3, #0]

	uint8_t START_REG = 0x08; //RAW_VALUE_RGA_LOW;
 8000778:	2308      	movs	r3, #8
 800077a:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < CHANNELS; ++i) {
 800077c:	2300      	movs	r3, #0
 800077e:	75fb      	strb	r3, [r7, #23]
 8000780:	e019      	b.n	80007b6 <new_spectral+0x56>
		spectral->channels[i] = new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 8000782:	7dfb      	ldrb	r3, [r7, #23]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	b2da      	uxtb	r2, r3
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	4413      	add	r3, r2
 800078c:	b2d8      	uxtb	r0, r3
 800078e:	7dfb      	ldrb	r3, [r7, #23]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	4413      	add	r3, r2
 8000798:	b2db      	uxtb	r3, r3
 800079a:	3301      	adds	r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	7dfc      	ldrb	r4, [r7, #23]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f000 f86d 	bl	8000880 <new_channel>
 80007a6:	4601      	mov	r1, r0
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	00a3      	lsls	r3, r4, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	6059      	str	r1, [r3, #4]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	3301      	adds	r3, #1
 80007b4:	75fb      	strb	r3, [r7, #23]
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	2b05      	cmp	r3, #5
 80007ba:	d9e2      	bls.n	8000782 <new_spectral+0x22>
	}
	return spectral;
 80007bc:	693b      	ldr	r3, [r7, #16]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	371c      	adds	r7, #28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd90      	pop	{r4, r7, pc}

080007c6 <enable>:

// sets enable bits in devices
void enable(Spectral *spectral) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
    virtual_write(spectral, CONTROL_SET_UP, 0x28);  // runs twice to account for status miss
 80007ce:	2228      	movs	r2, #40	; 0x28
 80007d0:	2104      	movs	r1, #4
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 f811 	bl	80007fa <virtual_write>
    HAL_Delay(5);
 80007d8:	2005      	movs	r0, #5
 80007da:	f000 fa4b 	bl	8000c74 <HAL_Delay>
    virtual_write(spectral, CONTROL_SET_UP, 0x28);  // converts data bank to 2
 80007de:	2228      	movs	r2, #40	; 0x28
 80007e0:	2104      	movs	r1, #4
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f809 	bl	80007fa <virtual_write>
    virtual_write(spectral, INT_TIME, 0xFF);  // increases integration time
 80007e8:	22ff      	movs	r2, #255	; 0xff
 80007ea:	2105      	movs	r1, #5
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 f804 	bl	80007fa <virtual_write>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <virtual_write>:


/*private interface*/

// functionallly like write_byte  
void virtual_write(Spectral *spectral, uint8_t v_reg, uint8_t data) {
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b084      	sub	sp, #16
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	460b      	mov	r3, r1
 8000804:	70fb      	strb	r3, [r7, #3]
 8000806:	4613      	mov	r3, r2
 8000808:	70bb      	strb	r3, [r7, #2]
    uint8_t status;

	while(1) {
		status = read_byte_data(spectral->i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2200      	movs	r2, #0
 8000810:	2149      	movs	r1, #73	; 0x49
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fec1 	bl	800059a <read_byte_data>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <virtual_write+0x34>
			break;
		}
		HAL_Delay(5);
 8000826:	2005      	movs	r0, #5
 8000828:	f000 fa24 	bl	8000c74 <HAL_Delay>
		status = read_byte_data(spectral->i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800082c:	e7ed      	b.n	800080a <virtual_write+0x10>
			break;
 800082e:	bf00      	nop
	}
	write_byte_data(spectral->i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2201      	movs	r2, #1
 800083e:	2149      	movs	r1, #73	; 0x49
 8000840:	f7ff ff1a 	bl	8000678 <write_byte_data>

	while(1) {
		status = read_byte_data(spectral->i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	2149      	movs	r1, #73	; 0x49
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fea4 	bl	800059a <read_byte_data>
 8000852:	4603      	mov	r3, r0
 8000854:	73fb      	strb	r3, [r7, #15]
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	2b00      	cmp	r3, #0
 800085e:	d003      	beq.n	8000868 <virtual_write+0x6e>
			break;
		}
		HAL_Delay(5);
 8000860:	2005      	movs	r0, #5
 8000862:	f000 fa07 	bl	8000c74 <HAL_Delay>
		status = read_byte_data(spectral->i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8000866:	e7ed      	b.n	8000844 <virtual_write+0x4a>
			break;
 8000868:	bf00      	nop
	}
	write_byte_data(spectral->i2cBus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, data);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	78bb      	ldrb	r3, [r7, #2]
 8000870:	2201      	movs	r2, #1
 8000872:	2149      	movs	r1, #73	; 0x49
 8000874:	f7ff ff00 	bl	8000678 <write_byte_data>
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <new_channel>:
        HAL_Delay(10);
    }
}

// creates a channel
Channel* new_channel(uint8_t lsb_r, uint8_t msb_r) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
    Channel* ch = malloc(sizeof(Channel));
 8000890:	2004      	movs	r0, #4
 8000892:	f004 ffa3 	bl	80057dc <malloc>
 8000896:	4603      	mov	r3, r0
 8000898:	60fb      	str	r3, [r7, #12]
	ch->color_data = 0;
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	2200      	movs	r2, #0
 800089e:	805a      	strh	r2, [r3, #2]
	ch->lsb_register = lsb_r;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	701a      	strb	r2, [r3, #0]
	ch->msb_register = msb_r;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	79ba      	ldrb	r2, [r7, #6]
 80008aa:	705a      	strb	r2, [r3, #1]
	return ch;
 80008ac:	68fb      	ldr	r3, [r7, #12]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <HAL_MspInit+0x44>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_MspInit+0x44>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6193      	str	r3, [r2, #24]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_MspInit+0x44>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x44>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x44>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x44>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000

08000900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a2a      	ldr	r2, [pc, #168]	; (80009c8 <HAL_I2C_MspInit+0xc8>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d14e      	bne.n	80009c0 <HAL_I2C_MspInit+0xc0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <HAL_I2C_MspInit+0xcc>)
 8000924:	695b      	ldr	r3, [r3, #20]
 8000926:	4a29      	ldr	r2, [pc, #164]	; (80009cc <HAL_I2C_MspInit+0xcc>)
 8000928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800092c:	6153      	str	r3, [r2, #20]
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <HAL_I2C_MspInit+0xcc>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800093a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800093e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	2312      	movs	r3, #18
 8000942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	2301      	movs	r3, #1
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	481e      	ldr	r0, [pc, #120]	; (80009d0 <HAL_I2C_MspInit+0xd0>)
 8000958:	f000 fcbe 	bl	80012d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_I2C_MspInit+0xcc>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	4a1a      	ldr	r2, [pc, #104]	; (80009cc <HAL_I2C_MspInit+0xcc>)
 8000962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000966:	61d3      	str	r3, [r2, #28]
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_I2C_MspInit+0xcc>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <HAL_I2C_MspInit+0xd8>)
 8000978:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000992:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 8000994:	2200      	movs	r2, #0
 8000996:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 800099a:	2200      	movs	r2, #0
 800099c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 80009a6:	f000 fa98 	bl	8000eda <HAL_DMA_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_I2C_MspInit+0xb4>
    {
      Error_Handler();
 80009b0:	f7ff fd78 	bl	80004a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 80009b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ba:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_I2C_MspInit+0xd4>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005400 	.word	0x40005400
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000400 	.word	0x48000400
 80009d4:	20000114 	.word	0x20000114
 80009d8:	40020080 	.word	0x40020080

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <HAL_UART_MspInit+0x7c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d128      	bne.n	8000a50 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0x80>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <HAL_UART_MspInit+0x80>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	61d3      	str	r3, [r2, #28]
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_UART_MspInit+0x80>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x80>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0x80>)
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	6153      	str	r3, [r2, #20]
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_UART_MspInit+0x80>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f000 fc44 	bl	80012d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40021000 	.word	0x40021000

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <HardFault_Handler+0x4>

08000a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <MemManage_Handler+0x4>

08000a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr

08000aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f8be 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}

08000abc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <DMA1_Channel7_IRQHandler+0x10>)
 8000ac2:	f000 faee 	bl	80010a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000114 	.word	0x20000114

08000ad0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <_sbrk+0x50>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x16>
		heap_end = &end;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <_sbrk+0x50>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <_sbrk+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <_sbrk+0x50>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <_sbrk+0x50>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4413      	add	r3, r2
 8000af4:	466a      	mov	r2, sp
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d907      	bls.n	8000b0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000afa:	f004 fe45 	bl	8005788 <__errno>
 8000afe:	4602      	mov	r2, r0
 8000b00:	230c      	movs	r3, #12
 8000b02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	e006      	b.n	8000b18 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <_sbrk+0x50>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <_sbrk+0x50>)
 8000b14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3710      	adds	r7, #16
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200000b8 	.word	0x200000b8
 8000b24:	200001e8 	.word	0x200001e8

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <SystemInit+0x28>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <SystemInit+0x28>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SystemInit+0x28>)
 8000b3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b42:	609a      	str	r2, [r3, #8]
#endif
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b5a:	e003      	b.n	8000b64 <LoopCopyDataInit>

08000b5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b62:	3104      	adds	r1, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b6c:	d3f6      	bcc.n	8000b5c <CopyDataInit>
	ldr	r2, =_sbss
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b70:	e002      	b.n	8000b78 <LoopFillZerobss>

08000b72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b74:	f842 3b04 	str.w	r3, [r2], #4

08000b78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <LoopForever+0x16>)
	cmp	r2, r3
 8000b7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b7c:	d3f9      	bcc.n	8000b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b7e:	f7ff ffd3 	bl	8000b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f004 fe07 	bl	8005794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b86:	f7ff fb2d 	bl	80001e4 <main>

08000b8a <LoopForever>:

LoopForever:
    b LoopForever
 8000b8a:	e7fe      	b.n	8000b8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b8c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b90:	08005934 	.word	0x08005934
	ldr	r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b98:	2000009c 	.word	0x2000009c
	ldr	r2, =_sbss
 8000b9c:	2000009c 	.word	0x2000009c
	ldr	r3, = _ebss
 8000ba0:	200001e8 	.word	0x200001e8

08000ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f94d 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fe78 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f965 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f92d 	bl	8000e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000002c 	.word	0x2000002c
 8000c2c:	20000034 	.word	0x20000034
 8000c30:	20000030 	.word	0x20000030

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000034 	.word	0x20000034
 8000c58:	200001e0 	.word	0x200001e0

08000c5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	200001e0 	.word	0x200001e0

08000c74 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_Delay+0x40>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000034 	.word	0x20000034

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff8e 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff29 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff3e 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff8e 	bl	8000dac <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff31 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa2 	bl	8000e14 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e037      	b.n	8000f60 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f98c 	bl	8001260 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}  
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_DMA_Start_IT+0x20>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e04a      	b.n	800101e <HAL_DMA_Start_IT+0xb6>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d13a      	bne.n	8001010 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0201 	bic.w	r2, r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f000 f91f 	bl	8001202 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d008      	beq.n	8000fde <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 020e 	orr.w	r2, r2, #14
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e00f      	b.n	8000ffe <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 020a 	orr.w	r2, r2, #10
 8000fec:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0204 	bic.w	r2, r2, #4
 8000ffc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e005      	b.n	800101c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001018:	2302      	movs	r3, #2
 800101a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800101c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001038:	2b02      	cmp	r3, #2
 800103a:	d005      	beq.n	8001048 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2204      	movs	r2, #4
 8001040:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e027      	b.n	8001098 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020e 	bic.w	r2, r2, #14
 8001056:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0201 	bic.w	r2, r2, #1
 8001066:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	4798      	blx	r3
    } 
  }
  return status;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	2204      	movs	r2, #4
 80010c0:	409a      	lsls	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4013      	ands	r3, r2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d024      	beq.n	8001114 <HAL_DMA_IRQHandler+0x72>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01f      	beq.n	8001114 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d107      	bne.n	80010f2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 0204 	bic.w	r2, r2, #4
 80010f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010fa:	2104      	movs	r1, #4
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	2b00      	cmp	r3, #0
 8001108:	d06a      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001112:	e065      	b.n	80011e0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	2202      	movs	r2, #2
 800111a:	409a      	lsls	r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4013      	ands	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d02c      	beq.n	800117e <HAL_DMA_IRQHandler+0xdc>
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d027      	beq.n	800117e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10b      	bne.n	8001154 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 020a 	bic.w	r2, r2, #10
 800114a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800115c:	2102      	movs	r1, #2
 800115e:	fa01 f202 	lsl.w	r2, r1, r2
 8001162:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	2b00      	cmp	r3, #0
 8001172:	d035      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800117c:	e030      	b.n	80011e0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	2208      	movs	r2, #8
 8001184:	409a      	lsls	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d028      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x13e>
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	f003 0308 	and.w	r3, r3, #8
 8001194:	2b00      	cmp	r3, #0
 8001196:	d023      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 020e 	bic.w	r2, r2, #14
 80011a6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f202 	lsl.w	r2, r1, r2
 80011b6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	4798      	blx	r3
    }
  }
}  
 80011de:	e7ff      	b.n	80011e0 <HAL_DMA_IRQHandler+0x13e>
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001202:	b480      	push	{r7}
 8001204:	b085      	sub	sp, #20
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b10      	cmp	r3, #16
 800122e:	d108      	bne.n	8001242 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001240:	e007      	b.n	8001252 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	60da      	str	r2, [r3, #12]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <DMA_CalcBaseAndBitshift+0x60>)
 8001270:	429a      	cmp	r2, r3
 8001272:	d80f      	bhi.n	8001294 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <DMA_CalcBaseAndBitshift+0x64>)
 800127c:	4413      	add	r3, r2
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <DMA_CalcBaseAndBitshift+0x68>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	009a      	lsls	r2, r3, #2
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <DMA_CalcBaseAndBitshift+0x6c>)
 8001290:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001292:	e00e      	b.n	80012b2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <DMA_CalcBaseAndBitshift+0x70>)
 800129c:	4413      	add	r3, r2
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <DMA_CalcBaseAndBitshift+0x68>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	009a      	lsls	r2, r3, #2
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <DMA_CalcBaseAndBitshift+0x74>)
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40020407 	.word	0x40020407
 80012c4:	bffdfff8 	.word	0xbffdfff8
 80012c8:	cccccccd 	.word	0xcccccccd
 80012cc:	40020000 	.word	0x40020000
 80012d0:	bffdfbf8 	.word	0xbffdfbf8
 80012d4:	40020400 	.word	0x40020400

080012d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d8:	b480      	push	{r7}
 80012da:	b087      	sub	sp, #28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e6:	e160      	b.n	80015aa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2101      	movs	r1, #1
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8152 	beq.w	80015a4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d00b      	beq.n	8001320 <HAL_GPIO_Init+0x48>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d007      	beq.n	8001320 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001314:	2b11      	cmp	r3, #17
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b12      	cmp	r3, #18
 800131e:	d130      	bne.n	8001382 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001356:	2201      	movs	r2, #1
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43db      	mvns	r3, r3
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4013      	ands	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	091b      	lsrs	r3, r3, #4
 800136c:	f003 0201 	and.w	r2, r3, #1
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0xea>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b12      	cmp	r3, #18
 80013c0:	d123      	bne.n	800140a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4013      	ands	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	691a      	ldr	r2, [r3, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	08da      	lsrs	r2, r3, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3208      	adds	r2, #8
 8001404:	6939      	ldr	r1, [r7, #16]
 8001406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f003 0203 	and.w	r2, r3, #3
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80ac 	beq.w	80015a4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144c:	4b5e      	ldr	r3, [pc, #376]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a5d      	ldr	r2, [pc, #372]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <HAL_GPIO_Init+0x2f0>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001464:	4a59      	ldr	r2, [pc, #356]	; (80015cc <HAL_GPIO_Init+0x2f4>)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	089b      	lsrs	r3, r3, #2
 800146a:	3302      	adds	r3, #2
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f003 0303 	and.w	r3, r3, #3
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	220f      	movs	r2, #15
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800148e:	d025      	beq.n	80014dc <HAL_GPIO_Init+0x204>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a4f      	ldr	r2, [pc, #316]	; (80015d0 <HAL_GPIO_Init+0x2f8>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d01f      	beq.n	80014d8 <HAL_GPIO_Init+0x200>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a4e      	ldr	r2, [pc, #312]	; (80015d4 <HAL_GPIO_Init+0x2fc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d019      	beq.n	80014d4 <HAL_GPIO_Init+0x1fc>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a4d      	ldr	r2, [pc, #308]	; (80015d8 <HAL_GPIO_Init+0x300>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d013      	beq.n	80014d0 <HAL_GPIO_Init+0x1f8>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_GPIO_Init+0x304>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00d      	beq.n	80014cc <HAL_GPIO_Init+0x1f4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a4b      	ldr	r2, [pc, #300]	; (80015e0 <HAL_GPIO_Init+0x308>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d007      	beq.n	80014c8 <HAL_GPIO_Init+0x1f0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a4a      	ldr	r2, [pc, #296]	; (80015e4 <HAL_GPIO_Init+0x30c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d101      	bne.n	80014c4 <HAL_GPIO_Init+0x1ec>
 80014c0:	2306      	movs	r3, #6
 80014c2:	e00c      	b.n	80014de <HAL_GPIO_Init+0x206>
 80014c4:	2307      	movs	r3, #7
 80014c6:	e00a      	b.n	80014de <HAL_GPIO_Init+0x206>
 80014c8:	2305      	movs	r3, #5
 80014ca:	e008      	b.n	80014de <HAL_GPIO_Init+0x206>
 80014cc:	2304      	movs	r3, #4
 80014ce:	e006      	b.n	80014de <HAL_GPIO_Init+0x206>
 80014d0:	2303      	movs	r3, #3
 80014d2:	e004      	b.n	80014de <HAL_GPIO_Init+0x206>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x206>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_GPIO_Init+0x206>
 80014dc:	2300      	movs	r3, #0
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	f002 0203 	and.w	r2, r2, #3
 80014e4:	0092      	lsls	r2, r2, #2
 80014e6:	4093      	lsls	r3, r2
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014ee:	4937      	ldr	r1, [pc, #220]	; (80015cc <HAL_GPIO_Init+0x2f4>)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014fc:	4b3a      	ldr	r3, [pc, #232]	; (80015e8 <HAL_GPIO_Init+0x310>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001520:	4a31      	ldr	r2, [pc, #196]	; (80015e8 <HAL_GPIO_Init+0x310>)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001526:	4b30      	ldr	r3, [pc, #192]	; (80015e8 <HAL_GPIO_Init+0x310>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800154a:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_GPIO_Init+0x310>)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <HAL_GPIO_Init+0x310>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001574:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <HAL_GPIO_Init+0x310>)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_GPIO_Init+0x310>)
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_GPIO_Init+0x310>)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f47f ae97 	bne.w	80012e8 <HAL_GPIO_Init+0x10>
  }
}
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000
 80015d0:	48000400 	.word	0x48000400
 80015d4:	48000800 	.word	0x48000800
 80015d8:	48000c00 	.word	0x48000c00
 80015dc:	48001000 	.word	0x48001000
 80015e0:	48001400 	.word	0x48001400
 80015e4:	48001800 	.word	0x48001800
 80015e8:	40010400 	.word	0x40010400

080015ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e081      	b.n	8001702 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff f974 	bl	8000900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2224      	movs	r2, #36	; 0x24
 800161c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0201 	bic.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800163c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800164c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d107      	bne.n	8001666 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	e006      	b.n	8001674 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001672:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d104      	bne.n	8001686 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	ea42 0103 	orr.w	r1, r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	021a      	lsls	r2, r3, #8
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69d9      	ldr	r1, [r3, #28]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1a      	ldr	r2, [r3, #32]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0201 	orr.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af02      	add	r7, sp, #8
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	461a      	mov	r2, r3
 8001718:	460b      	mov	r3, r1
 800171a:	817b      	strh	r3, [r7, #10]
 800171c:	4613      	mov	r3, r2
 800171e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b20      	cmp	r3, #32
 800172a:	f040 80da 	bne.w	80018e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001734:	2b01      	cmp	r3, #1
 8001736:	d101      	bne.n	800173c <HAL_I2C_Master_Transmit+0x30>
 8001738:	2302      	movs	r3, #2
 800173a:	e0d3      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x1d8>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001744:	f7ff fa8a 	bl	8000c5c <HAL_GetTick>
 8001748:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2319      	movs	r3, #25
 8001750:	2201      	movs	r2, #1
 8001752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f001 fd38 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0be      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2221      	movs	r2, #33	; 0x21
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2210      	movs	r2, #16
 8001772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	893a      	ldrh	r2, [r7, #8]
 8001786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001792:	b29b      	uxth	r3, r3
 8001794:	2bff      	cmp	r3, #255	; 0xff
 8001796:	d90e      	bls.n	80017b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	22ff      	movs	r2, #255	; 0xff
 800179c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	8979      	ldrh	r1, [r7, #10]
 80017a6:	4b51      	ldr	r3, [pc, #324]	; (80018ec <HAL_I2C_Master_Transmit+0x1e0>)
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f001 fe9a 	bl	80034e8 <I2C_TransferConfig>
 80017b4:	e06c      	b.n	8001890 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	8979      	ldrh	r1, [r7, #10]
 80017c8:	4b48      	ldr	r3, [pc, #288]	; (80018ec <HAL_I2C_Master_Transmit+0x1e0>)
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f001 fe89 	bl	80034e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80017d6:	e05b      	b.n	8001890 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	6a39      	ldr	r1, [r7, #32]
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f001 fd35 	bl	800324c <I2C_WaitOnTXISFlagUntilTimeout>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e07b      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001814:	3b01      	subs	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d034      	beq.n	8001890 <HAL_I2C_Master_Transmit+0x184>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	d130      	bne.n	8001890 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	2200      	movs	r2, #0
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f001 fcc7 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e04d      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d90e      	bls.n	8001870 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	22ff      	movs	r2, #255	; 0xff
 8001856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	b2da      	uxtb	r2, r3
 800185e:	8979      	ldrh	r1, [r7, #10]
 8001860:	2300      	movs	r3, #0
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f001 fe3d 	bl	80034e8 <I2C_TransferConfig>
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187e:	b2da      	uxtb	r2, r3
 8001880:	8979      	ldrh	r1, [r7, #10]
 8001882:	2300      	movs	r3, #0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f001 fe2c 	bl	80034e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d19e      	bne.n	80017d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	6a39      	ldr	r1, [r7, #32]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f001 fd14 	bl	80032cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e01a      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2220      	movs	r2, #32
 80018b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80018c2:	400b      	ands	r3, r1
 80018c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2220      	movs	r2, #32
 80018ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
  }
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	80002000 	.word	0x80002000
 80018f0:	fe00e800 	.word	0xfe00e800

080018f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	461a      	mov	r2, r3
 8001900:	460b      	mov	r3, r1
 8001902:	817b      	strh	r3, [r7, #10]
 8001904:	4613      	mov	r3, r2
 8001906:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b20      	cmp	r3, #32
 8001912:	f040 80db 	bne.w	8001acc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_I2C_Master_Receive+0x30>
 8001920:	2302      	movs	r3, #2
 8001922:	e0d4      	b.n	8001ace <HAL_I2C_Master_Receive+0x1da>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800192c:	f7ff f996 	bl	8000c5c <HAL_GetTick>
 8001930:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2319      	movs	r3, #25
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f001 fc44 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0bf      	b.n	8001ace <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2222      	movs	r2, #34	; 0x22
 8001952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2210      	movs	r2, #16
 800195a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	893a      	ldrh	r2, [r7, #8]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29b      	uxth	r3, r3
 800197c:	2bff      	cmp	r3, #255	; 0xff
 800197e:	d90e      	bls.n	800199e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	22ff      	movs	r2, #255	; 0xff
 8001984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198a:	b2da      	uxtb	r2, r3
 800198c:	8979      	ldrh	r1, [r7, #10]
 800198e:	4b52      	ldr	r3, [pc, #328]	; (8001ad8 <HAL_I2C_Master_Receive+0x1e4>)
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f001 fda6 	bl	80034e8 <I2C_TransferConfig>
 800199c:	e06d      	b.n	8001a7a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	8979      	ldrh	r1, [r7, #10]
 80019b0:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_I2C_Master_Receive+0x1e4>)
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f001 fd95 	bl	80034e8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80019be:	e05c      	b.n	8001a7a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	6a39      	ldr	r1, [r7, #32]
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f001 fcbd 	bl	8003344 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e07c      	b.n	8001ace <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d034      	beq.n	8001a7a <HAL_I2C_Master_Receive+0x186>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d130      	bne.n	8001a7a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2180      	movs	r1, #128	; 0x80
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f001 fbd2 	bl	80031cc <I2C_WaitOnFlagUntilTimeout>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e04d      	b.n	8001ace <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2bff      	cmp	r3, #255	; 0xff
 8001a3a:	d90e      	bls.n	8001a5a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	22ff      	movs	r2, #255	; 0xff
 8001a40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	8979      	ldrh	r1, [r7, #10]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f001 fd48 	bl	80034e8 <I2C_TransferConfig>
 8001a58:	e00f      	b.n	8001a7a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	8979      	ldrh	r1, [r7, #10]
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f001 fd37 	bl	80034e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d19d      	bne.n	80019c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	6a39      	ldr	r1, [r7, #32]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f001 fc1f 	bl	80032cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e01a      	b.n	8001ace <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_I2C_Master_Receive+0x1e8>)
 8001aac:	400b      	ands	r3, r1
 8001aae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e000      	b.n	8001ace <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	80002400 	.word	0x80002400
 8001adc:	fe00e800 	.word	0xfe00e800

08001ae0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	461a      	mov	r2, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	817b      	strh	r3, [r7, #10]
 8001af0:	4613      	mov	r3, r2
 8001af2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	f040 80cd 	bne.w	8001c9c <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b10:	d101      	bne.n	8001b16 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
 8001b14:	e0c3      	b.n	8001c9e <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2C_Master_Transmit_DMA+0x44>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0bc      	b.n	8001c9e <HAL_I2C_Master_Transmit_DMA+0x1be>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2221      	movs	r2, #33	; 0x21
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2210      	movs	r2, #16
 8001b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	893a      	ldrh	r2, [r7, #8]
 8001b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a55      	ldr	r2, [pc, #340]	; (8001ca8 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4a55      	ldr	r2, [pc, #340]	; (8001cac <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8001b58:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2bff      	cmp	r3, #255	; 0xff
 8001b62:	d906      	bls.n	8001b72 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	22ff      	movs	r2, #255	; 0xff
 8001b68:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001b6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	e007      	b.n	8001b82 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b80:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d070      	beq.n	8001c6c <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d020      	beq.n	8001bd4 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	4a46      	ldr	r2, [pc, #280]	; (8001cb0 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bae:	2200      	movs	r2, #0
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3328      	adds	r3, #40	; 0x28
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	f7ff f9d0 	bl	8000f68 <HAL_DMA_Start_IT>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d138      	bne.n	8001c44 <HAL_I2C_Master_Transmit_DMA+0x164>
 8001bd2:	e013      	b.n	8001bfc <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e050      	b.n	8001c9e <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	8979      	ldrh	r1, [r7, #10]
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f001 fc6c 	bl	80034e8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001c2a:	2110      	movs	r1, #16
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f001 fc89 	bl	8003544 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e029      	b.n	8001c98 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f043 0210 	orr.w	r2, r3, #16
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e018      	b.n	8001c9e <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f001 fc30 	bl	80034e8 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c90:	2101      	movs	r1, #1
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f001 fc56 	bl	8003544 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	e000      	b.n	8001c9e <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8001c9c:	2302      	movs	r3, #2
  }
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	ffff0000 	.word	0xffff0000
 8001cac:	080023c9 	.word	0x080023c9
 8001cb0:	08003037 	.word	0x08003037
 8001cb4:	08003163 	.word	0x08003163
 8001cb8:	80002000 	.word	0x80002000
 8001cbc:	08001f71 	.word	0x08001f71

08001cc0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	460b      	mov	r3, r1
 8001cce:	817b      	strh	r3, [r7, #10]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	f040 80cd 	bne.w	8001e7c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e0c3      	b.n	8001e7e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_I2C_Master_Receive_DMA+0x44>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e0bc      	b.n	8001e7e <HAL_I2C_Master_Receive_DMA+0x1be>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2222      	movs	r2, #34	; 0x22
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2210      	movs	r2, #16
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	893a      	ldrh	r2, [r7, #8]
 8001d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a55      	ldr	r2, [pc, #340]	; (8001e88 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8001d38:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	2bff      	cmp	r3, #255	; 0xff
 8001d42:	d906      	bls.n	8001d52 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	22ff      	movs	r2, #255	; 0xff
 8001d48:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d4a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e007      	b.n	8001d62 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d60:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d070      	beq.n	8001e4c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d020      	beq.n	8001db4 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	4a46      	ldr	r2, [pc, #280]	; (8001e90 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	4a45      	ldr	r2, [pc, #276]	; (8001e94 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	2200      	movs	r2, #0
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8e:	2200      	movs	r2, #0
 8001d90:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3324      	adds	r3, #36	; 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	f7ff f8e0 	bl	8000f68 <HAL_DMA_Start_IT>
 8001da8:	4603      	mov	r3, r0
 8001daa:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d138      	bne.n	8001e24 <HAL_I2C_Master_Receive_DMA+0x164>
 8001db2:	e013      	b.n	8001ddc <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e050      	b.n	8001e7e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	8979      	ldrh	r1, [r7, #10]
 8001de4:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f001 fb7c 	bl	80034e8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f001 fb99 	bl	8003544 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	e029      	b.n	8001e78 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	f043 0210 	orr.w	r2, r3, #16
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e018      	b.n	8001e7e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4a13      	ldr	r2, [pc, #76]	; (8001e9c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	8979      	ldrh	r1, [r7, #10]
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f001 fb40 	bl	80034e8 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e70:	2101      	movs	r1, #1
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f001 fb66 	bl	8003544 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e000      	b.n	8001e7e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8001e7c:	2302      	movs	r3, #2
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	ffff0000 	.word	0xffff0000
 8001e8c:	080023c9 	.word	0x080023c9
 8001e90:	080030cd 	.word	0x080030cd
 8001e94:	08003163 	.word	0x08003163
 8001e98:	80002400 	.word	0x80002400
 8001e9c:	08001f71 	.word	0x08001f71

08001ea0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
 8001efc:	4613      	mov	r3, r2
 8001efe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af02      	add	r7, sp, #8
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <I2C_Master_ISR_IT+0x1e>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e115      	b.n	80021ba <I2C_Master_ISR_IT+0x24a>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d013      	beq.n	8001fca <I2C_Master_ISR_IT+0x5a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2210      	movs	r2, #16
 8001fb4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f043 0204 	orr.w	r2, r3, #4
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f001 f813 	bl	8002fee <I2C_Flush_TXDR>
 8001fc8:	e0e2      	b.n	8002190 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d023      	beq.n	800201e <I2C_Master_ISR_IT+0xae>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01d      	beq.n	800201e <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f023 0304 	bic.w	r3, r3, #4
 8001fe8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800201c:	e0b8      	b.n	8002190 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01e      	beq.n	8002068 <I2C_Master_ISR_IT+0xf8>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	085b      	lsrs	r3, r3, #1
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d018      	beq.n	8002068 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205c:	b29b      	uxth	r3, r3
 800205e:	3b01      	subs	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002066:	e093      	b.n	8002190 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	09db      	lsrs	r3, r3, #7
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d05e      	beq.n	8002132 <I2C_Master_ISR_IT+0x1c2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d058      	beq.n	8002132 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d041      	beq.n	800210e <I2C_Master_ISR_IT+0x19e>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	2b00      	cmp	r3, #0
 8002090:	d13d      	bne.n	800210e <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	b29b      	uxth	r3, r3
 800209a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800209e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	2bff      	cmp	r3, #255	; 0xff
 80020a8:	d90e      	bls.n	80020c8 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	22ff      	movs	r2, #255	; 0xff
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	8a79      	ldrh	r1, [r7, #18]
 80020b8:	2300      	movs	r3, #0
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f001 fa11 	bl	80034e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c6:	e033      	b.n	8002130 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020da:	d00c      	beq.n	80020f6 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80020e6:	8a79      	ldrh	r1, [r7, #18]
 80020e8:	2300      	movs	r3, #0
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4603      	mov	r3, r0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f001 f9fa 	bl	80034e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f4:	e01c      	b.n	8002130 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	8a79      	ldrh	r1, [r7, #18]
 80020fe:	2300      	movs	r3, #0
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f001 f9ee 	bl	80034e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800210c:	e010      	b.n	8002130 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800211c:	d003      	beq.n	8002126 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f000 fba9 	bl	8002876 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002124:	e034      	b.n	8002190 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002126:	2140      	movs	r1, #64	; 0x40
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fe69 	bl	8002e00 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800212e:	e02f      	b.n	8002190 <I2C_Master_ISR_IT+0x220>
 8002130:	e02e      	b.n	8002190 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	099b      	lsrs	r3, r3, #6
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d028      	beq.n	8002190 <I2C_Master_ISR_IT+0x220>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d022      	beq.n	8002190 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d119      	bne.n	8002188 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002162:	d015      	beq.n	8002190 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800216c:	d108      	bne.n	8002180 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	e007      	b.n	8002190 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fb78 	bl	8002876 <I2C_ITMasterSeqCplt>
 8002186:	e003      	b.n	8002190 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fe38 	bl	8002e00 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d009      	beq.n	80021b0 <I2C_Master_ISR_IT+0x240>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80021a8:	6979      	ldr	r1, [r7, #20]
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 fbfe 	bl	80029ac <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <I2C_Slave_ISR_IT+0x24>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e0ec      	b.n	80023c0 <I2C_Slave_ISR_IT+0x1fe>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <I2C_Slave_ISR_IT+0x4c>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002206:	6939      	ldr	r1, [r7, #16]
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fc99 	bl	8002b40 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d04d      	beq.n	80022b6 <I2C_Slave_ISR_IT+0xf4>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d047      	beq.n	80022b6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d128      	bne.n	8002282 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b28      	cmp	r3, #40	; 0x28
 800223a:	d108      	bne.n	800224e <I2C_Slave_ISR_IT+0x8c>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002242:	d104      	bne.n	800224e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002244:	6939      	ldr	r1, [r7, #16]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fd84 	bl	8002d54 <I2C_ITListenCplt>
 800224c:	e032      	b.n	80022b4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b29      	cmp	r3, #41	; 0x29
 8002258:	d10e      	bne.n	8002278 <I2C_Slave_ISR_IT+0xb6>
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002260:	d00a      	beq.n	8002278 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2210      	movs	r2, #16
 8002268:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 febf 	bl	8002fee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fb3d 	bl	80028f0 <I2C_ITSlaveSeqCplt>
 8002276:	e01d      	b.n	80022b4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2210      	movs	r2, #16
 800227e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002280:	e096      	b.n	80023b0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2210      	movs	r2, #16
 8002288:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f043 0204 	orr.w	r2, r3, #4
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d004      	beq.n	80022a6 <I2C_Slave_ISR_IT+0xe4>
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a2:	f040 8085 	bne.w	80023b0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	4619      	mov	r1, r3
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fda7 	bl	8002e00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022b2:	e07d      	b.n	80023b0 <I2C_Slave_ISR_IT+0x1ee>
 80022b4:	e07c      	b.n	80023b0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d030      	beq.n	8002324 <I2C_Slave_ISR_IT+0x162>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d02a      	beq.n	8002324 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d018      	beq.n	800230a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d14f      	bne.n	80023b4 <I2C_Slave_ISR_IT+0x1f2>
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800231a:	d04b      	beq.n	80023b4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f000 fae7 	bl	80028f0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002322:	e047      	b.n	80023b4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	08db      	lsrs	r3, r3, #3
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	08db      	lsrs	r3, r3, #3
 8002334:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002338:	2b00      	cmp	r3, #0
 800233a:	d004      	beq.n	8002346 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fa15 	bl	800276e <I2C_ITAddrCplt>
 8002344:	e037      	b.n	80023b6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d031      	beq.n	80023b6 <I2C_Slave_ISR_IT+0x1f4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	085b      	lsrs	r3, r3, #1
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d02b      	beq.n	80023b6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d018      	beq.n	800239a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b01      	subs	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	851a      	strh	r2, [r3, #40]	; 0x28
 8002398:	e00d      	b.n	80023b6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023a0:	d002      	beq.n	80023a8 <I2C_Slave_ISR_IT+0x1e6>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 faa1 	bl	80028f0 <I2C_ITSlaveSeqCplt>
 80023ae:	e002      	b.n	80023b6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80023b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af02      	add	r7, sp, #8
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <I2C_Master_ISR_DMA+0x1a>
 80023de:	2302      	movs	r3, #2
 80023e0:	e0e1      	b.n	80025a6 <I2C_Master_ISR_DMA+0x1de>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d017      	beq.n	8002426 <I2C_Master_ISR_DMA+0x5e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	091b      	lsrs	r3, r3, #4
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d011      	beq.n	8002426 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2210      	movs	r2, #16
 8002408:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f043 0204 	orr.w	r2, r3, #4
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002416:	2120      	movs	r1, #32
 8002418:	68f8      	ldr	r0, [r7, #12]
 800241a:	f001 f893 	bl	8003544 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fde5 	bl	8002fee <I2C_Flush_TXDR>
 8002424:	e0ba      	b.n	800259c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	09db      	lsrs	r3, r3, #7
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d072      	beq.n	8002518 <I2C_Master_ISR_DMA+0x150>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d06c      	beq.n	8002518 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800244c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d04e      	beq.n	80024f6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002464:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	2bff      	cmp	r3, #255	; 0xff
 800246e:	d906      	bls.n	800247e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	22ff      	movs	r2, #255	; 0xff
 8002474:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	e010      	b.n	80024a0 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002490:	d003      	beq.n	800249a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e002      	b.n	80024a0 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800249a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	8a79      	ldrh	r1, [r7, #18]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f001 f81a 	bl	80034e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b22      	cmp	r3, #34	; 0x22
 80024d0:	d108      	bne.n	80024e4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80024e2:	e05b      	b.n	800259c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024f2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80024f4:	e052      	b.n	800259c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002504:	d003      	beq.n	800250e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f9b5 	bl	8002876 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800250c:	e046      	b.n	800259c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800250e:	2140      	movs	r1, #64	; 0x40
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fc75 	bl	8002e00 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002516:	e041      	b.n	800259c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	099b      	lsrs	r3, r3, #6
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d029      	beq.n	8002578 <I2C_Master_ISR_DMA+0x1b0>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	099b      	lsrs	r3, r3, #6
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d119      	bne.n	800256e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002548:	d027      	beq.n	800259a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002552:	d108      	bne.n	8002566 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002562:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002564:	e019      	b.n	800259a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 f985 	bl	8002876 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800256c:	e015      	b.n	800259a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 fc45 	bl	8002e00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002576:	e010      	b.n	800259a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <I2C_Master_ISR_DMA+0x1d4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fa0a 	bl	80029ac <I2C_ITMasterCplt>
 8002598:	e000      	b.n	800259c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800259a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b088      	sub	sp, #32
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <I2C_Slave_ISR_DMA+0x24>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0c9      	b.n	8002766 <I2C_Slave_ISR_DMA+0x1b8>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <I2C_Slave_ISR_DMA+0x4c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 faa3 	bl	8002b40 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 809a 	beq.w	800273c <I2C_Slave_ISR_DMA+0x18e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 8093 	beq.w	800273c <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	0b9b      	lsrs	r3, r3, #14
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	0bdb      	lsrs	r3, r3, #15
 8002626:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800262a:	2b00      	cmp	r3, #0
 800262c:	d07f      	beq.n	800272e <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0bdb      	lsrs	r3, r3, #15
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0b9b      	lsrs	r3, r3, #14
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002672:	2301      	movs	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d128      	bne.n	80026ce <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b28      	cmp	r3, #40	; 0x28
 8002686:	d108      	bne.n	800269a <I2C_Slave_ISR_DMA+0xec>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800268e:	d104      	bne.n	800269a <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002690:	68b9      	ldr	r1, [r7, #8]
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 fb5e 	bl	8002d54 <I2C_ITListenCplt>
 8002698:	e048      	b.n	800272c <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b29      	cmp	r3, #41	; 0x29
 80026a4:	d10e      	bne.n	80026c4 <I2C_Slave_ISR_DMA+0x116>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026ac:	d00a      	beq.n	80026c4 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2210      	movs	r2, #16
 80026b4:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fc99 	bl	8002fee <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f917 	bl	80028f0 <I2C_ITSlaveSeqCplt>
 80026c2:	e033      	b.n	800272c <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2210      	movs	r2, #16
 80026ca:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80026cc:	e034      	b.n	8002738 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2210      	movs	r2, #16
 80026d4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <I2C_Slave_ISR_DMA+0x14a>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f6:	d11f      	bne.n	8002738 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	2b21      	cmp	r3, #33	; 0x21
 80026fc:	d002      	beq.n	8002704 <I2C_Slave_ISR_DMA+0x156>
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
 8002700:	2b29      	cmp	r3, #41	; 0x29
 8002702:	d103      	bne.n	800270c <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2221      	movs	r2, #33	; 0x21
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
 800270a:	e008      	b.n	800271e <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	2b22      	cmp	r3, #34	; 0x22
 8002710:	d002      	beq.n	8002718 <I2C_Slave_ISR_DMA+0x16a>
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	2b2a      	cmp	r3, #42	; 0x2a
 8002716:	d102      	bne.n	800271e <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2222      	movs	r2, #34	; 0x22
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	4619      	mov	r1, r3
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fb6b 	bl	8002e00 <I2C_ITError>
      if (treatdmanack == 1U)
 800272a:	e005      	b.n	8002738 <I2C_Slave_ISR_DMA+0x18a>
 800272c:	e004      	b.n	8002738 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2210      	movs	r2, #16
 8002734:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002736:	e011      	b.n	800275c <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002738:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800273a:	e00f      	b.n	800275c <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	08db      	lsrs	r3, r3, #3
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <I2C_Slave_ISR_DMA+0x1ae>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	08db      	lsrs	r3, r3, #3
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f809 	bl	800276e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3720      	adds	r7, #32
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002784:	2b28      	cmp	r3, #40	; 0x28
 8002786:	d16a      	bne.n	800285e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	0c1b      	lsrs	r3, r3, #16
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80027a6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027b4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80027c2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d138      	bne.n	800283e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80027cc:	897b      	ldrh	r3, [r7, #10]
 80027ce:	09db      	lsrs	r3, r3, #7
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	89bb      	ldrh	r3, [r7, #12]
 80027d4:	4053      	eors	r3, r2
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f003 0306 	and.w	r3, r3, #6
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11c      	bne.n	800281a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80027e0:	897b      	ldrh	r3, [r7, #10]
 80027e2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d13b      	bne.n	800286e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2208      	movs	r2, #8
 8002802:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800280c:	89ba      	ldrh	r2, [r7, #12]
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff fb6c 	bl	8001ef0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002818:	e029      	b.n	800286e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800281a:	893b      	ldrh	r3, [r7, #8]
 800281c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800281e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fef2 	bl	800360c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002830:	89ba      	ldrh	r2, [r7, #12]
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	4619      	mov	r1, r3
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fb5a 	bl	8001ef0 <HAL_I2C_AddrCallback>
}
 800283c:	e017      	b.n	800286e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800283e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 fee2 	bl	800360c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002850:	89ba      	ldrh	r2, [r7, #12]
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fb4a 	bl	8001ef0 <HAL_I2C_AddrCallback>
}
 800285c:	e007      	b.n	800286e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2208      	movs	r2, #8
 8002864:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b21      	cmp	r3, #33	; 0x21
 8002890:	d115      	bne.n	80028be <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2211      	movs	r2, #17
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028a6:	2101      	movs	r1, #1
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 feaf 	bl	800360c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff faf2 	bl	8001ea0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028bc:	e014      	b.n	80028e8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2212      	movs	r2, #18
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028d2:	2102      	movs	r1, #2
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fe99 	bl	800360c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fae6 	bl	8001eb4 <HAL_I2C_MasterRxCpltCallback>
}
 80028e8:	bf00      	nop
 80028ea:	3708      	adds	r7, #8
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0b9b      	lsrs	r3, r3, #14
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e00d      	b.n	8002942 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	0bdb      	lsrs	r3, r3, #15
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002940:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b29      	cmp	r3, #41	; 0x29
 800294c:	d112      	bne.n	8002974 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2228      	movs	r2, #40	; 0x28
 8002952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2221      	movs	r2, #33	; 0x21
 800295a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800295c:	2101      	movs	r1, #1
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fe54 	bl	800360c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff faab 	bl	8001ec8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002972:	e017      	b.n	80029a4 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b2a      	cmp	r3, #42	; 0x2a
 800297e:	d111      	bne.n	80029a4 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2228      	movs	r2, #40	; 0x28
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2222      	movs	r2, #34	; 0x22
 800298c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800298e:	2102      	movs	r1, #2
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fe3b 	bl	800360c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fa9c 	bl	8001edc <HAL_I2C_SlaveRxCpltCallback>
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2220      	movs	r2, #32
 80029c0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b21      	cmp	r3, #33	; 0x21
 80029cc:	d107      	bne.n	80029de <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80029ce:	2101      	movs	r1, #1
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fe1b 	bl	800360c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2211      	movs	r2, #17
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
 80029dc:	e00c      	b.n	80029f8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b22      	cmp	r3, #34	; 0x22
 80029e8:	d106      	bne.n	80029f8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029ea:	2102      	movs	r1, #2
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fe0d 	bl	800360c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2212      	movs	r2, #18
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b4d      	ldr	r3, [pc, #308]	; (8002b38 <I2C_ITMasterCplt+0x18c>)
 8002a04:	400b      	ands	r3, r1
 8002a06:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <I2C_ITMasterCplt+0x190>)
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d009      	beq.n	8002a34 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2210      	movs	r2, #16
 8002a26:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f043 0204 	orr.w	r2, r3, #4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b60      	cmp	r3, #96	; 0x60
 8002a3e:	d10b      	bne.n	8002a58 <I2C_ITMasterCplt+0xac>
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002a56:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fac8 	bl	8002fee <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b60      	cmp	r3, #96	; 0x60
 8002a6e:	d002      	beq.n	8002a76 <I2C_ITMasterCplt+0xca>
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f9bf 	bl	8002e00 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a82:	e054      	b.n	8002b2e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b21      	cmp	r3, #33	; 0x21
 8002a8e:	d124      	bne.n	8002ada <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b40      	cmp	r3, #64	; 0x40
 8002aa8:	d10b      	bne.n	8002ac2 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff fa30 	bl	8001f20 <HAL_I2C_MemTxCpltCallback>
}
 8002ac0:	e035      	b.n	8002b2e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff f9e4 	bl	8001ea0 <HAL_I2C_MasterTxCpltCallback>
}
 8002ad8:	e029      	b.n	8002b2e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b22      	cmp	r3, #34	; 0x22
 8002ae4:	d123      	bne.n	8002b2e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d10b      	bne.n	8002b18 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff fa0f 	bl	8001f34 <HAL_I2C_MemRxCpltCallback>
}
 8002b16:	e00a      	b.n	8002b2e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff f9c3 	bl	8001eb4 <HAL_I2C_MasterRxCpltCallback>
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	fe00e800 	.word	0xfe00e800
 8002b3c:	ffff0000 	.word	0xffff0000

08002b40 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2220      	movs	r2, #32
 8002b64:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b21      	cmp	r3, #33	; 0x21
 8002b6a:	d002      	beq.n	8002b72 <I2C_ITSlaveCplt+0x32>
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b29      	cmp	r3, #41	; 0x29
 8002b70:	d108      	bne.n	8002b84 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b72:	f248 0101 	movw	r1, #32769	; 0x8001
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fd48 	bl	800360c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2221      	movs	r2, #33	; 0x21
 8002b80:	631a      	str	r2, [r3, #48]	; 0x30
 8002b82:	e00d      	b.n	8002ba0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b22      	cmp	r3, #34	; 0x22
 8002b88:	d002      	beq.n	8002b90 <I2C_ITSlaveCplt+0x50>
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b8e:	d107      	bne.n	8002ba0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002b90:	f248 0102 	movw	r1, #32770	; 0x8002
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fd39 	bl	800360c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2222      	movs	r2, #34	; 0x22
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4b64      	ldr	r3, [pc, #400]	; (8002d4c <I2C_ITSlaveCplt+0x20c>)
 8002bbc:	400b      	ands	r3, r1
 8002bbe:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fa14 	bl	8002fee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	0b9b      	lsrs	r3, r3, #14
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d013      	beq.n	8002bfa <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002be0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d020      	beq.n	8002c2c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bf8:	e018      	b.n	8002c2c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	0bdb      	lsrs	r3, r3, #15
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d012      	beq.n	8002c2c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c14:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d020      	beq.n	8002c7a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00c      	beq.n	8002c7a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c88:	f043 0204 	orr.w	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d010      	beq.n	8002cc8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	4619      	mov	r1, r3
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f8a7 	bl	8002e00 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b28      	cmp	r3, #40	; 0x28
 8002cbc:	d141      	bne.n	8002d42 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002cbe:	6979      	ldr	r1, [r7, #20]
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f847 	bl	8002d54 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cc6:	e03c      	b.n	8002d42 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cd0:	d014      	beq.n	8002cfc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fe0c 	bl	80028f0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <I2C_ITSlaveCplt+0x210>)
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff f909 	bl	8001f0c <HAL_I2C_ListenCpltCallback>
}
 8002cfa:	e022      	b.n	8002d42 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b22      	cmp	r3, #34	; 0x22
 8002d06:	d10e      	bne.n	8002d26 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff f8dc 	bl	8001edc <HAL_I2C_SlaveRxCpltCallback>
}
 8002d24:	e00d      	b.n	8002d42 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff f8c3 	bl	8001ec8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	fe00e800 	.word	0xfe00e800
 8002d50:	ffff0000 	.word	0xffff0000

08002d54 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <I2C_ITListenCplt+0xa8>)
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d022      	beq.n	8002dd2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d012      	beq.n	8002dd2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f043 0204 	orr.w	r2, r3, #4
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dd2:	f248 0103 	movw	r1, #32771	; 0x8003
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fc18 	bl	800360c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2210      	movs	r2, #16
 8002de2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff f88d 	bl	8001f0c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	ffff0000 	.word	0xffff0000

08002e00 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a5d      	ldr	r2, [pc, #372]	; (8002f94 <I2C_ITError+0x194>)
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b28      	cmp	r3, #40	; 0x28
 8002e36:	d005      	beq.n	8002e44 <I2C_ITError+0x44>
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b29      	cmp	r3, #41	; 0x29
 8002e3c:	d002      	beq.n	8002e44 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	2b2a      	cmp	r3, #42	; 0x2a
 8002e42:	d10b      	bne.n	8002e5c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e44:	2103      	movs	r1, #3
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fbe0 	bl	800360c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2228      	movs	r2, #40	; 0x28
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a50      	ldr	r2, [pc, #320]	; (8002f98 <I2C_ITError+0x198>)
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5a:	e011      	b.n	8002e80 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e5c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fbd3 	bl	800360c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b60      	cmp	r3, #96	; 0x60
 8002e70:	d003      	beq.n	8002e7a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d039      	beq.n	8002f02 <I2C_ITError+0x102>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b11      	cmp	r3, #17
 8002e92:	d002      	beq.n	8002e9a <I2C_ITError+0x9a>
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b21      	cmp	r3, #33	; 0x21
 8002e98:	d133      	bne.n	8002f02 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea8:	d107      	bne.n	8002eba <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eb8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe f992 	bl	80011e8 <HAL_DMA_GetState>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d017      	beq.n	8002efa <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	4a33      	ldr	r2, [pc, #204]	; (8002f9c <I2C_ITError+0x19c>)
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe f8a1 	bl	8001026 <HAL_DMA_Abort_IT>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04d      	beq.n	8002f86 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ef8:	e045      	b.n	8002f86 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f850 	bl	8002fa0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f00:	e041      	b.n	8002f86 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d039      	beq.n	8002f7e <I2C_ITError+0x17e>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b12      	cmp	r3, #18
 8002f0e:	d002      	beq.n	8002f16 <I2C_ITError+0x116>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b22      	cmp	r3, #34	; 0x22
 8002f14:	d133      	bne.n	8002f7e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f24:	d107      	bne.n	8002f36 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f34:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe f954 	bl	80011e8 <HAL_DMA_GetState>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d017      	beq.n	8002f76 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	4a14      	ldr	r2, [pc, #80]	; (8002f9c <I2C_ITError+0x19c>)
 8002f4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fe f863 	bl	8001026 <HAL_DMA_Abort_IT>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d011      	beq.n	8002f8a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f70:	4610      	mov	r0, r2
 8002f72:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f74:	e009      	b.n	8002f8a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f812 	bl	8002fa0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f7c:	e005      	b.n	8002f8a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f80e 	bl	8002fa0 <I2C_TreatErrorCallback>
  }
}
 8002f84:	e002      	b.n	8002f8c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f8a:	bf00      	nop
}
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	ffff0000 	.word	0xffff0000
 8002f98:	080021c3 	.word	0x080021c3
 8002f9c:	08003191 	.word	0x08003191

08002fa0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b60      	cmp	r3, #96	; 0x60
 8002fb2:	d10e      	bne.n	8002fd2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fe ffc6 	bl	8001f5c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fd0:	e009      	b.n	8002fe6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe ffb1 	bl	8001f48 <HAL_I2C_ErrorCallback>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d103      	bne.n	800300c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2200      	movs	r2, #0
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b01      	cmp	r3, #1
 8003018:	d007      	beq.n	800302a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0201 	orr.w	r2, r2, #1
 8003028:	619a      	str	r2, [r3, #24]
  }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003042:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003052:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d104      	bne.n	8003068 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800305e:	2120      	movs	r1, #32
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fa6f 	bl	8003544 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8003066:	e02d      	b.n	80030c4 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003070:	441a      	add	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	2bff      	cmp	r3, #255	; 0xff
 800307e:	d903      	bls.n	8003088 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	22ff      	movs	r2, #255	; 0xff
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
 8003086:	e004      	b.n	8003092 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize) != HAL_OK)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	4619      	mov	r1, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3328      	adds	r3, #40	; 0x28
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	f7fd ff5e 	bl	8000f68 <HAL_DMA_Start_IT>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80030b2:	2110      	movs	r1, #16
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fea3 	bl	8002e00 <I2C_ITError>
}
 80030ba:	e003      	b.n	80030c4 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80030bc:	2140      	movs	r1, #64	; 0x40
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 fa40 	bl	8003544 <I2C_Enable_IRQ>
}
 80030c4:	bf00      	nop
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80030f4:	2120      	movs	r1, #32
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fa24 	bl	8003544 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80030fc:	e02d      	b.n	800315a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8003106:	441a      	add	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2bff      	cmp	r3, #255	; 0xff
 8003114:	d903      	bls.n	800311e <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	22ff      	movs	r2, #255	; 0xff
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
 800311c:	e004      	b.n	8003128 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	3324      	adds	r3, #36	; 0x24
 8003132:	4619      	mov	r1, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	461a      	mov	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	f7fd ff13 	bl	8000f68 <HAL_DMA_Start_IT>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003148:	2110      	movs	r1, #16
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f7ff fe58 	bl	8002e00 <I2C_ITError>
}
 8003150:	e003      	b.n	800315a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8003152:	2140      	movs	r1, #64	; 0x40
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f9f5 	bl	8003544 <I2C_Enable_IRQ>
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003180:	2110      	movs	r1, #16
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff fe3c 	bl	8002e00 <I2C_ITError>
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031aa:	2200      	movs	r2, #0
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ba:	2200      	movs	r2, #0
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff feee 	bl	8002fa0 <I2C_TreatErrorCallback>
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	4613      	mov	r3, r2
 80031da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031dc:	e022      	b.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d01e      	beq.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7fd fd39 	bl	8000c5c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d113      	bne.n	8003224 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e00f      	b.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	429a      	cmp	r2, r3
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	429a      	cmp	r2, r3
 8003240:	d0cd      	beq.n	80031de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003258:	e02c      	b.n	80032b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f8dc 	bl	800341c <I2C_IsAcknowledgeFailed>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e02a      	b.n	80032c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d01e      	beq.n	80032b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7fd fcf1 	bl	8000c5c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d113      	bne.n	80032b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e007      	b.n	80032c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d1cb      	bne.n	800325a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d8:	e028      	b.n	800332c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 f89c 	bl	800341c <I2C_IsAcknowledgeFailed>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e026      	b.n	800333c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fd fcb5 	bl	8000c5c <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d113      	bne.n	800332c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003308:	f043 0220 	orr.w	r2, r3, #32
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e007      	b.n	800333c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b20      	cmp	r3, #32
 8003338:	d1cf      	bne.n	80032da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003350:	e055      	b.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f860 	bl	800341c <I2C_IsAcknowledgeFailed>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e053      	b.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b20      	cmp	r3, #32
 8003372:	d129      	bne.n	80033c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d105      	bne.n	800338e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e03f      	b.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2220      	movs	r2, #32
 8003394:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80033a2:	400b      	ands	r3, r1
 80033a4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e022      	b.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c8:	f7fd fc48 	bl	8000c5c <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d302      	bcc.n	80033de <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10f      	bne.n	80033fe <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f043 0220 	orr.w	r2, r3, #32
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e007      	b.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b04      	cmp	r3, #4
 800340a:	d1a2      	bne.n	8003352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	fe00e800 	.word	0xfe00e800

0800341c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b10      	cmp	r3, #16
 8003434:	d151      	bne.n	80034da <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003436:	e022      	b.n	800347e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d01e      	beq.n	800347e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fd fc0c 	bl	8000c5c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <I2C_IsAcknowledgeFailed+0x3a>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d113      	bne.n	800347e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e02e      	b.n	80034dc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b20      	cmp	r3, #32
 800348a:	d1d5      	bne.n	8003438 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2210      	movs	r2, #16
 8003492:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2220      	movs	r2, #32
 800349a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff fda6 	bl	8002fee <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <I2C_IsAcknowledgeFailed+0xc8>)
 80034ae:	400b      	ands	r3, r1
 80034b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f043 0204 	orr.w	r2, r3, #4
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	fe00e800 	.word	0xfe00e800

080034e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	817b      	strh	r3, [r7, #10]
 80034f6:	4613      	mov	r3, r2
 80034f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	0d5b      	lsrs	r3, r3, #21
 8003504:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003508:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <I2C_TransferConfig+0x58>)
 800350a:	430b      	orrs	r3, r1
 800350c:	43db      	mvns	r3, r3
 800350e:	ea02 0103 	and.w	r1, r2, r3
 8003512:	897b      	ldrh	r3, [r7, #10]
 8003514:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003518:	7a7b      	ldrb	r3, [r7, #9]
 800351a:	041b      	lsls	r3, r3, #16
 800351c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003520:	431a      	orrs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	431a      	orrs	r2, r3
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	431a      	orrs	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	03ff63ff 	.word	0x03ff63ff

08003544 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	4a2a      	ldr	r2, [pc, #168]	; (8003604 <I2C_Enable_IRQ+0xc0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003562:	4a29      	ldr	r2, [pc, #164]	; (8003608 <I2C_Enable_IRQ+0xc4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d11d      	bne.n	80035a4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003568:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800356c:	2b00      	cmp	r3, #0
 800356e:	da03      	bge.n	8003578 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003576:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003578:	887b      	ldrh	r3, [r7, #2]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d103      	bne.n	8003586 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003584:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003586:	887b      	ldrh	r3, [r7, #2]
 8003588:	2b20      	cmp	r3, #32
 800358a:	d103      	bne.n	8003594 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003592:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d125      	bne.n	80035e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80035a2:	e020      	b.n	80035e6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da03      	bge.n	80035b4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80035b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80035b4:	887b      	ldrh	r3, [r7, #2]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80035c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80035d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80035d8:	887b      	ldrh	r3, [r7, #2]
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d103      	bne.n	80035e6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f043 0320 	orr.w	r3, r3, #32
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6819      	ldr	r1, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	080023c9 	.word	0x080023c9
 8003608:	080025af 	.word	0x080025af

0800360c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800361c:	887b      	ldrh	r3, [r7, #2]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00f      	beq.n	8003646 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800362c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800363a:	2b28      	cmp	r3, #40	; 0x28
 800363c:	d003      	beq.n	8003646 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003644:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003646:	887b      	ldrh	r3, [r7, #2]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00f      	beq.n	8003670 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003656:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003664:	2b28      	cmp	r3, #40	; 0x28
 8003666:	d003      	beq.n	8003670 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800366e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003670:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003674:	2b00      	cmp	r3, #0
 8003676:	da03      	bge.n	8003680 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800367e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	2b10      	cmp	r3, #16
 8003684:	d103      	bne.n	800368e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800368c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	2b20      	cmp	r3, #32
 8003692:	d103      	bne.n	800369c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f043 0320 	orr.w	r3, r3, #32
 800369a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d103      	bne.n	80036aa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	43da      	mvns	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d138      	bne.n	8003750 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e032      	b.n	8003752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	; 0x24
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800371a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
  }
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800375e:	b480      	push	{r7}
 8003760:	b085      	sub	sp, #20
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	d139      	bne.n	80037e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800377e:	2302      	movs	r3, #2
 8003780:	e033      	b.n	80037ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2224      	movs	r2, #36	; 0x24
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	e000      	b.n	80037ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037e8:	2302      	movs	r3, #2
  }
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80037fe:	af00      	add	r7, sp, #0
 8003800:	1d3b      	adds	r3, r7, #4
 8003802:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	f000 bf01 	b.w	8004614 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8160 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003822:	4bae      	ldr	r3, [pc, #696]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b04      	cmp	r3, #4
 800382c:	d00c      	beq.n	8003848 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800382e:	4bab      	ldr	r3, [pc, #684]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b08      	cmp	r3, #8
 8003838:	d159      	bne.n	80038ee <HAL_RCC_OscConfig+0xf6>
 800383a:	4ba8      	ldr	r3, [pc, #672]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003846:	d152      	bne.n	80038ee <HAL_RCC_OscConfig+0xf6>
 8003848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800385c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d102      	bne.n	800387a <HAL_RCC_OscConfig+0x82>
 8003874:	4b99      	ldr	r3, [pc, #612]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	e015      	b.n	80038a6 <HAL_RCC_OscConfig+0xae>
 800387a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003886:	fa93 f3a3 	rbit	r3, r3
 800388a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800388e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003892:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003896:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80038a2:	4b8e      	ldr	r3, [pc, #568]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038aa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80038ae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80038b2:	fa92 f2a2 	rbit	r2, r2
 80038b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80038ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80038be:	fab2 f282 	clz	r2, r2
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	f002 021f 	and.w	r2, r2, #31
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f202 	lsl.w	r2, r1, r2
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 8102 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x2e8>
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f040 80fc 	bne.w	8003ae0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f000 be93 	b.w	8004614 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ee:	1d3b      	adds	r3, r7, #4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x110>
 80038fa:	4b78      	ldr	r3, [pc, #480]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a77      	ldr	r2, [pc, #476]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e030      	b.n	800396a <HAL_RCC_OscConfig+0x172>
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10c      	bne.n	800392c <HAL_RCC_OscConfig+0x134>
 8003912:	4b72      	ldr	r3, [pc, #456]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a71      	ldr	r2, [pc, #452]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	4b6f      	ldr	r3, [pc, #444]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a6e      	ldr	r2, [pc, #440]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	e01e      	b.n	800396a <HAL_RCC_OscConfig+0x172>
 800392c:	1d3b      	adds	r3, r7, #4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003936:	d10c      	bne.n	8003952 <HAL_RCC_OscConfig+0x15a>
 8003938:	4b68      	ldr	r3, [pc, #416]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a67      	ldr	r2, [pc, #412]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 800393e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b65      	ldr	r3, [pc, #404]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a64      	ldr	r2, [pc, #400]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 800394a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	e00b      	b.n	800396a <HAL_RCC_OscConfig+0x172>
 8003952:	4b62      	ldr	r3, [pc, #392]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a61      	ldr	r2, [pc, #388]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b5f      	ldr	r3, [pc, #380]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a5e      	ldr	r2, [pc, #376]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003964:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003968:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d059      	beq.n	8003a28 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd f972 	bl	8000c5c <HAL_GetTick>
 8003978:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800397e:	f7fd f96d 	bl	8000c5c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b64      	cmp	r3, #100	; 0x64
 800398c:	d902      	bls.n	8003994 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	f000 be40 	b.w	8004614 <HAL_RCC_OscConfig+0xe1c>
 8003994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003998:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80039a0:	fa93 f3a3 	rbit	r3, r3
 80039a4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80039a8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ac:	fab3 f383 	clz	r3, r3
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	095b      	lsrs	r3, r3, #5
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d102      	bne.n	80039c6 <HAL_RCC_OscConfig+0x1ce>
 80039c0:	4b46      	ldr	r3, [pc, #280]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	e015      	b.n	80039f2 <HAL_RCC_OscConfig+0x1fa>
 80039c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80039d2:	fa93 f3a3 	rbit	r3, r3
 80039d6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80039da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80039e2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80039ee:	4b3b      	ldr	r3, [pc, #236]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039f6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80039fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80039fe:	fa92 f2a2 	rbit	r2, r2
 8003a02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003a06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003a0a:	fab2 f282 	clz	r2, r2
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	f042 0220 	orr.w	r2, r2, #32
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	f002 021f 	and.w	r2, r2, #31
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0ab      	beq.n	800397e <HAL_RCC_OscConfig+0x186>
 8003a26:	e05c      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fd f918 	bl	8000c5c <HAL_GetTick>
 8003a2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a30:	e00a      	b.n	8003a48 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a32:	f7fd f913 	bl	8000c5c <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d902      	bls.n	8003a48 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	f000 bde6 	b.w	8004614 <HAL_RCC_OscConfig+0xe1c>
 8003a48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a4c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003a54:	fa93 f3a3 	rbit	r3, r3
 8003a58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003a5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d102      	bne.n	8003a7a <HAL_RCC_OscConfig+0x282>
 8003a74:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	e015      	b.n	8003aa6 <HAL_RCC_OscConfig+0x2ae>
 8003a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003a8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003a96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a9a:	fa93 f3a3 	rbit	r3, r3
 8003a9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_RCC_OscConfig+0x2e4>)
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aaa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003aae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003ab2:	fa92 f2a2 	rbit	r2, r2
 8003ab6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003aba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003abe:	fab2 f282 	clz	r2, r2
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	f042 0220 	orr.w	r2, r2, #32
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	f002 021f 	and.w	r2, r2, #31
 8003ace:	2101      	movs	r1, #1
 8003ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1ab      	bne.n	8003a32 <HAL_RCC_OscConfig+0x23a>
 8003ada:	e002      	b.n	8003ae2 <HAL_RCC_OscConfig+0x2ea>
 8003adc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8170 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003af2:	4bd0      	ldr	r3, [pc, #832]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003afe:	4bcd      	ldr	r3, [pc, #820]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 030c 	and.w	r3, r3, #12
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d16d      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3ee>
 8003b0a:	4bca      	ldr	r3, [pc, #808]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b16:	d166      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3ee>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003b22:	fa93 f3a3 	rbit	r3, r3
 8003b26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003b2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <HAL_RCC_OscConfig+0x350>
 8003b42:	4bbc      	ldr	r3, [pc, #752]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	e013      	b.n	8003b70 <HAL_RCC_OscConfig+0x378>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003b60:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003b6c:	4bb1      	ldr	r3, [pc, #708]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	2202      	movs	r2, #2
 8003b72:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003b76:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003b7a:	fa92 f2a2 	rbit	r2, r2
 8003b7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003b82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003b86:	fab2 f282 	clz	r2, r2
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	f042 0220 	orr.w	r2, r2, #32
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f002 021f 	and.w	r2, r2, #31
 8003b96:	2101      	movs	r1, #1
 8003b98:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x3ba>
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d002      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f000 bd31 	b.w	8004614 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb2:	4ba0      	ldr	r3, [pc, #640]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	21f8      	movs	r1, #248	; 0xf8
 8003bc2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003bca:	fa91 f1a1 	rbit	r1, r1
 8003bce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003bd2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003bd6:	fab1 f181 	clz	r1, r1
 8003bda:	b2c9      	uxtb	r1, r1
 8003bdc:	408b      	lsls	r3, r1
 8003bde:	4995      	ldr	r1, [pc, #596]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be4:	e0f5      	b.n	8003dd2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 8085 	beq.w	8003cfc <HAL_RCC_OscConfig+0x504>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003c04:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c08:	fab3 f383 	clz	r3, r3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fd f81d 	bl	8000c5c <HAL_GetTick>
 8003c22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fd f818 	bl	8000c5c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d902      	bls.n	8003c3e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	f000 bceb 	b.w	8004614 <HAL_RCC_OscConfig+0xe1c>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003c48:	fa93 f3a3 	rbit	r3, r3
 8003c4c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003c50:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	fab3 f383 	clz	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f043 0301 	orr.w	r3, r3, #1
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <HAL_RCC_OscConfig+0x476>
 8003c68:	4b72      	ldr	r3, [pc, #456]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	e013      	b.n	8003c96 <HAL_RCC_OscConfig+0x49e>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c74:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003c80:	2302      	movs	r3, #2
 8003c82:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003c86:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003c92:	4b68      	ldr	r3, [pc, #416]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	2202      	movs	r2, #2
 8003c98:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003c9c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003ca0:	fa92 f2a2 	rbit	r2, r2
 8003ca4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003ca8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003cac:	fab2 f282 	clz	r2, r2
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f042 0220 	orr.w	r2, r2, #32
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	f002 021f 	and.w	r2, r2, #31
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0af      	beq.n	8003c28 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b5a      	ldr	r3, [pc, #360]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	21f8      	movs	r1, #248	; 0xf8
 8003cd8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cdc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003ce0:	fa91 f1a1 	rbit	r1, r1
 8003ce4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003ce8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003cec:	fab1 f181 	clz	r1, r1
 8003cf0:	b2c9      	uxtb	r1, r1
 8003cf2:	408b      	lsls	r3, r1
 8003cf4:	494f      	ldr	r1, [pc, #316]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
 8003cfa:	e06a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x5da>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003d0e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d12:	fab3 f383 	clz	r3, r3
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	461a      	mov	r2, r3
 8003d24:	2300      	movs	r3, #0
 8003d26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fc ff98 	bl	8000c5c <HAL_GetTick>
 8003d2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fc ff93 	bl	8000c5c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d902      	bls.n	8003d48 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	f000 bc66 	b.w	8004614 <HAL_RCC_OscConfig+0xe1c>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003d5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d102      	bne.n	8003d78 <HAL_RCC_OscConfig+0x580>
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	e013      	b.n	8003da0 <HAL_RCC_OscConfig+0x5a8>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d82:	fa93 f3a3 	rbit	r3, r3
 8003d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_RCC_OscConfig+0x63c>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2202      	movs	r2, #2
 8003da2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003da6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003daa:	fa92 f2a2 	rbit	r2, r2
 8003dae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003db2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003db6:	fab2 f282 	clz	r2, r2
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	f042 0220 	orr.w	r2, r2, #32
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f002 021f 	and.w	r2, r2, #31
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1af      	bne.n	8003d32 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80da 	beq.w	8003f96 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d069      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x6c8>
 8003dec:	2301      	movs	r3, #1
 8003dee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003dfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_OscConfig+0x640>)
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	461a      	mov	r2, r3
 8003e12:	2301      	movs	r3, #1
 8003e14:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e16:	f7fc ff21 	bl	8000c5c <HAL_GetTick>
 8003e1a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1e:	e00d      	b.n	8003e3c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e20:	f7fc ff1c 	bl	8000c5c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d905      	bls.n	8003e3c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e3ef      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
 8003e34:	40021000 	.word	0x40021000
 8003e38:	10908120 	.word	0x10908120
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e46:	fa93 f2a3 	rbit	r2, r3
 8003e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003e54:	2202      	movs	r2, #2
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	fa93 f2a3 	rbit	r2, r3
 8003e62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	fa93 f2a3 	rbit	r2, r3
 8003e7a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003e7e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e80:	4ba4      	ldr	r3, [pc, #656]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8003e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e84:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e88:	2102      	movs	r1, #2
 8003e8a:	6019      	str	r1, [r3, #0]
 8003e8c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	fa93 f1a3 	rbit	r1, r3
 8003e96:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003e9a:	6019      	str	r1, [r3, #0]
  return result;
 8003e9c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0b0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x628>
 8003ebe:	e06a      	b.n	8003f96 <HAL_RCC_OscConfig+0x79e>
 8003ec0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	fa93 f2a3 	rbit	r2, r3
 8003ed2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003ed6:	601a      	str	r2, [r3, #0]
  return result;
 8003ed8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003edc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ede:	fab3 f383 	clz	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4b8c      	ldr	r3, [pc, #560]	; (8004118 <HAL_RCC_OscConfig+0x920>)
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	461a      	mov	r2, r3
 8003eee:	2300      	movs	r3, #0
 8003ef0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fc feb3 	bl	8000c5c <HAL_GetTick>
 8003ef6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003efa:	e009      	b.n	8003f10 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003efc:	f7fc feae 	bl	8000c5c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e381      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
 8003f10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f14:	2202      	movs	r2, #2
 8003f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	fa93 f2a3 	rbit	r2, r3
 8003f3a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f44:	2202      	movs	r2, #2
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	fa93 f2a3 	rbit	r2, r3
 8003f52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003f56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b6e      	ldr	r3, [pc, #440]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8003f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f60:	2102      	movs	r1, #2
 8003f62:	6019      	str	r1, [r3, #0]
 8003f64:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	fa93 f1a3 	rbit	r1, r3
 8003f6e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f72:	6019      	str	r1, [r3, #0]
  return result;
 8003f74:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1b2      	bne.n	8003efc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8157 	beq.w	8004254 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fac:	4b59      	ldr	r3, [pc, #356]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8003fae:	69db      	ldr	r3, [r3, #28]
 8003fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d112      	bne.n	8003fde <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fb8:	4b56      	ldr	r3, [pc, #344]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	4a55      	ldr	r2, [pc, #340]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8003fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	61d3      	str	r3, [r2, #28]
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003fcc:	f107 030c 	add.w	r3, r7, #12
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	f107 030c 	add.w	r3, r7, #12
 8003fd6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b4f      	ldr	r3, [pc, #316]	; (800411c <HAL_RCC_OscConfig+0x924>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d11a      	bne.n	8004020 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fea:	4b4c      	ldr	r3, [pc, #304]	; (800411c <HAL_RCC_OscConfig+0x924>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a4b      	ldr	r2, [pc, #300]	; (800411c <HAL_RCC_OscConfig+0x924>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff6:	f7fc fe31 	bl	8000c5c <HAL_GetTick>
 8003ffa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffe:	e009      	b.n	8004014 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fc fe2c 	bl	8000c5c <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b64      	cmp	r3, #100	; 0x64
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e2ff      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCC_OscConfig+0x924>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0ef      	beq.n	8004000 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d106      	bne.n	8004038 <HAL_RCC_OscConfig+0x840>
 800402a:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4a39      	ldr	r2, [pc, #228]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004030:	f043 0301 	orr.w	r3, r3, #1
 8004034:	6213      	str	r3, [r2, #32]
 8004036:	e02f      	b.n	8004098 <HAL_RCC_OscConfig+0x8a0>
 8004038:	1d3b      	adds	r3, r7, #4
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10c      	bne.n	800405c <HAL_RCC_OscConfig+0x864>
 8004042:	4b34      	ldr	r3, [pc, #208]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	4a33      	ldr	r2, [pc, #204]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	6213      	str	r3, [r2, #32]
 800404e:	4b31      	ldr	r3, [pc, #196]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4a30      	ldr	r2, [pc, #192]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004054:	f023 0304 	bic.w	r3, r3, #4
 8004058:	6213      	str	r3, [r2, #32]
 800405a:	e01d      	b.n	8004098 <HAL_RCC_OscConfig+0x8a0>
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b05      	cmp	r3, #5
 8004064:	d10c      	bne.n	8004080 <HAL_RCC_OscConfig+0x888>
 8004066:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	4a2a      	ldr	r2, [pc, #168]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 800406c:	f043 0304 	orr.w	r3, r3, #4
 8004070:	6213      	str	r3, [r2, #32]
 8004072:	4b28      	ldr	r3, [pc, #160]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4a27      	ldr	r2, [pc, #156]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6213      	str	r3, [r2, #32]
 800407e:	e00b      	b.n	8004098 <HAL_RCC_OscConfig+0x8a0>
 8004080:	4b24      	ldr	r3, [pc, #144]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	6213      	str	r3, [r2, #32]
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004092:	f023 0304 	bic.w	r3, r3, #4
 8004096:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d06a      	beq.n	8004178 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a2:	f7fc fddb 	bl	8000c5c <HAL_GetTick>
 80040a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ac:	f7fc fdd6 	bl	8000c5c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e2a7      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
 80040c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040c8:	2202      	movs	r2, #2
 80040ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	fa93 f2a3 	rbit	r2, r3
 80040d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80040e0:	2202      	movs	r2, #2
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	fa93 f2a3 	rbit	r2, r3
 80040ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80040f2:	601a      	str	r2, [r3, #0]
  return result;
 80040f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80040f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	fab3 f383 	clz	r3, r3
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f043 0302 	orr.w	r3, r3, #2
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d108      	bne.n	8004120 <HAL_RCC_OscConfig+0x928>
 800410e:	4b01      	ldr	r3, [pc, #4]	; (8004114 <HAL_RCC_OscConfig+0x91c>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	e013      	b.n	800413c <HAL_RCC_OscConfig+0x944>
 8004114:	40021000 	.word	0x40021000
 8004118:	10908120 	.word	0x10908120
 800411c:	40007000 	.word	0x40007000
 8004120:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004124:	2202      	movs	r2, #2
 8004126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	fa93 f2a3 	rbit	r2, r3
 8004132:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	4bc0      	ldr	r3, [pc, #768]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004140:	2102      	movs	r1, #2
 8004142:	6011      	str	r1, [r2, #0]
 8004144:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	fa92 f1a2 	rbit	r1, r2
 800414e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004152:	6011      	str	r1, [r2, #0]
  return result;
 8004154:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	fab2 f282 	clz	r2, r2
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	f002 021f 	and.w	r2, r2, #31
 800416a:	2101      	movs	r1, #1
 800416c:	fa01 f202 	lsl.w	r2, r1, r2
 8004170:	4013      	ands	r3, r2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d09a      	beq.n	80040ac <HAL_RCC_OscConfig+0x8b4>
 8004176:	e063      	b.n	8004240 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004178:	f7fc fd70 	bl	8000c5c <HAL_GetTick>
 800417c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004180:	e00b      	b.n	800419a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fc fd6b 	bl	8000c5c <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e23c      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
 800419a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800419e:	2202      	movs	r2, #2
 80041a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f2a3 	rbit	r2, r3
 80041ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80041b6:	2202      	movs	r2, #2
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	fa93 f2a3 	rbit	r2, r3
 80041c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80041c8:	601a      	str	r2, [r3, #0]
  return result;
 80041ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80041ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041d0:	fab3 f383 	clz	r3, r3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f043 0302 	orr.w	r3, r3, #2
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d102      	bne.n	80041ea <HAL_RCC_OscConfig+0x9f2>
 80041e4:	4b95      	ldr	r3, [pc, #596]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	e00d      	b.n	8004206 <HAL_RCC_OscConfig+0xa0e>
 80041ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80041ee:	2202      	movs	r2, #2
 80041f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	fa93 f2a3 	rbit	r2, r3
 80041fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	4b8e      	ldr	r3, [pc, #568]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800420a:	2102      	movs	r1, #2
 800420c:	6011      	str	r1, [r2, #0]
 800420e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	fa92 f1a2 	rbit	r1, r2
 8004218:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800421c:	6011      	str	r1, [r2, #0]
  return result;
 800421e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	fab2 f282 	clz	r2, r2
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	f002 021f 	and.w	r2, r2, #31
 8004234:	2101      	movs	r1, #1
 8004236:	fa01 f202 	lsl.w	r2, r1, r2
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1a0      	bne.n	8004182 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004240:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004248:	4b7c      	ldr	r3, [pc, #496]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	4a7b      	ldr	r2, [pc, #492]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 800424e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004252:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004254:	1d3b      	adds	r3, r7, #4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 81d9 	beq.w	8004612 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004260:	4b76      	ldr	r3, [pc, #472]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b08      	cmp	r3, #8
 800426a:	f000 81a6 	beq.w	80045ba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b02      	cmp	r3, #2
 8004276:	f040 811e 	bne.w	80044b6 <HAL_RCC_OscConfig+0xcbe>
 800427a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800427e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004284:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	fa93 f2a3 	rbit	r2, r3
 800428e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004292:	601a      	str	r2, [r3, #0]
  return result;
 8004294:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004298:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	461a      	mov	r2, r3
 80042ac:	2300      	movs	r3, #0
 80042ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b0:	f7fc fcd4 	bl	8000c5c <HAL_GetTick>
 80042b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b8:	e009      	b.n	80042ce <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fc fccf 	bl	8000c5c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e1a2      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
 80042ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	fa93 f2a3 	rbit	r2, r3
 80042e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80042e6:	601a      	str	r2, [r3, #0]
  return result;
 80042e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80042ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ee:	fab3 f383 	clz	r3, r3
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	095b      	lsrs	r3, r3, #5
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_RCC_OscConfig+0xb10>
 8004302:	4b4e      	ldr	r3, [pc, #312]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	e01b      	b.n	8004340 <HAL_RCC_OscConfig+0xb48>
 8004308:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800430c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004310:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	fa93 f2a3 	rbit	r2, r3
 800431c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	fa93 f2a3 	rbit	r2, r3
 8004336:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	4b3f      	ldr	r3, [pc, #252]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004344:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004348:	6011      	str	r1, [r2, #0]
 800434a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	fa92 f1a2 	rbit	r1, r2
 8004354:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004358:	6011      	str	r1, [r2, #0]
  return result;
 800435a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	fab2 f282 	clz	r2, r2
 8004364:	b2d2      	uxtb	r2, r2
 8004366:	f042 0220 	orr.w	r2, r2, #32
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	f002 021f 	and.w	r2, r2, #31
 8004370:	2101      	movs	r1, #1
 8004372:	fa01 f202 	lsl.w	r2, r1, r2
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d19e      	bne.n	80042ba <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437c:	4b2f      	ldr	r3, [pc, #188]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	f023 020f 	bic.w	r2, r3, #15
 8004384:	1d3b      	adds	r3, r7, #4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	492c      	ldr	r1, [pc, #176]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 800438c:	4313      	orrs	r3, r2
 800438e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a19      	ldr	r1, [r3, #32]
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	4925      	ldr	r1, [pc, #148]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80043b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	fa93 f2a3 	rbit	r2, r3
 80043c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043c4:	601a      	str	r2, [r3, #0]
  return result;
 80043c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80043ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043cc:	fab3 f383 	clz	r3, r3
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	461a      	mov	r2, r3
 80043de:	2301      	movs	r3, #1
 80043e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e2:	f7fc fc3b 	bl	8000c5c <HAL_GetTick>
 80043e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043ea:	e009      	b.n	8004400 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fc fc36 	bl	8000c5c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e109      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
 8004400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	fa93 f2a3 	rbit	r2, r3
 8004414:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004418:	601a      	str	r2, [r3, #0]
  return result;
 800441a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800441e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004420:	fab3 f383 	clz	r3, r3
 8004424:	b2db      	uxtb	r3, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	b2db      	uxtb	r3, r3
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	d105      	bne.n	8004440 <HAL_RCC_OscConfig+0xc48>
 8004434:	4b01      	ldr	r3, [pc, #4]	; (800443c <HAL_RCC_OscConfig+0xc44>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	e01e      	b.n	8004478 <HAL_RCC_OscConfig+0xc80>
 800443a:	bf00      	nop
 800443c:	40021000 	.word	0x40021000
 8004440:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004444:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004448:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	fa93 f2a3 	rbit	r2, r3
 8004454:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800445e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	fa93 f2a3 	rbit	r2, r3
 800446e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <HAL_RCC_OscConfig+0xe28>)
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800447c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004480:	6011      	str	r1, [r2, #0]
 8004482:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	fa92 f1a2 	rbit	r1, r2
 800448c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004490:	6011      	str	r1, [r2, #0]
  return result;
 8004492:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	fab2 f282 	clz	r2, r2
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	f042 0220 	orr.w	r2, r2, #32
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	f002 021f 	and.w	r2, r2, #31
 80044a8:	2101      	movs	r1, #1
 80044aa:	fa01 f202 	lsl.w	r2, r1, r2
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d09b      	beq.n	80043ec <HAL_RCC_OscConfig+0xbf4>
 80044b4:	e0ad      	b.n	8004612 <HAL_RCC_OscConfig+0xe1a>
 80044b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	fa93 f2a3 	rbit	r2, r3
 80044ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044ce:	601a      	str	r2, [r3, #0]
  return result;
 80044d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	461a      	mov	r2, r3
 80044e8:	2300      	movs	r3, #0
 80044ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fc fbb6 	bl	8000c5c <HAL_GetTick>
 80044f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f4:	e009      	b.n	800450a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f6:	f7fc fbb1 	bl	8000c5c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e084      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
 800450a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800450e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	fa93 f2a3 	rbit	r2, r3
 800451e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004522:	601a      	str	r2, [r3, #0]
  return result;
 8004524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004528:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b01      	cmp	r3, #1
 800453c:	d102      	bne.n	8004544 <HAL_RCC_OscConfig+0xd4c>
 800453e:	4b38      	ldr	r3, [pc, #224]	; (8004620 <HAL_RCC_OscConfig+0xe28>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	e01b      	b.n	800457c <HAL_RCC_OscConfig+0xd84>
 8004544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800454c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	fa93 f2a3 	rbit	r2, r3
 8004558:	f107 0320 	add.w	r3, r7, #32
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	f107 031c 	add.w	r3, r7, #28
 8004562:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f107 031c 	add.w	r3, r7, #28
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	fa93 f2a3 	rbit	r2, r3
 8004572:	f107 0318 	add.w	r3, r7, #24
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_RCC_OscConfig+0xe28>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f107 0214 	add.w	r2, r7, #20
 8004580:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004584:	6011      	str	r1, [r2, #0]
 8004586:	f107 0214 	add.w	r2, r7, #20
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	fa92 f1a2 	rbit	r1, r2
 8004590:	f107 0210 	add.w	r2, r7, #16
 8004594:	6011      	str	r1, [r2, #0]
  return result;
 8004596:	f107 0210 	add.w	r2, r7, #16
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	fab2 f282 	clz	r2, r2
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	f042 0220 	orr.w	r2, r2, #32
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	f002 021f 	and.w	r2, r2, #31
 80045ac:	2101      	movs	r1, #1
 80045ae:	fa01 f202 	lsl.w	r2, r1, r2
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d19e      	bne.n	80044f6 <HAL_RCC_OscConfig+0xcfe>
 80045b8:	e02b      	b.n	8004612 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e025      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045c8:	4b15      	ldr	r3, [pc, #84]	; (8004620 <HAL_RCC_OscConfig+0xe28>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80045d0:	4b13      	ldr	r3, [pc, #76]	; (8004620 <HAL_RCC_OscConfig+0xe28>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045dc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80045e0:	1d3b      	adds	r3, r7, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d111      	bne.n	800460e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80045ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d108      	bne.n	800460e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80045fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40021000 	.word	0x40021000

08004624 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b09e      	sub	sp, #120	; 0x78
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e162      	b.n	8004902 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800463c:	4b90      	ldr	r3, [pc, #576]	; (8004880 <HAL_RCC_ClockConfig+0x25c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d910      	bls.n	800466c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b8d      	ldr	r3, [pc, #564]	; (8004880 <HAL_RCC_ClockConfig+0x25c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 0207 	bic.w	r2, r3, #7
 8004652:	498b      	ldr	r1, [pc, #556]	; (8004880 <HAL_RCC_ClockConfig+0x25c>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b89      	ldr	r3, [pc, #548]	; (8004880 <HAL_RCC_ClockConfig+0x25c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e14a      	b.n	8004902 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004678:	4b82      	ldr	r3, [pc, #520]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	497f      	ldr	r1, [pc, #508]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 80dc 	beq.w	8004850 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d13c      	bne.n	800471a <HAL_RCC_ClockConfig+0xf6>
 80046a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80046ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b0:	fab3 f383 	clz	r3, r3
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_ClockConfig+0xa6>
 80046c4:	4b6f      	ldr	r3, [pc, #444]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	e00f      	b.n	80046ea <HAL_RCC_ClockConfig+0xc6>
 80046ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	667b      	str	r3, [r7, #100]	; 0x64
 80046d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046dc:	663b      	str	r3, [r7, #96]	; 0x60
 80046de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046e0:	fa93 f3a3 	rbit	r3, r3
 80046e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e6:	4b67      	ldr	r3, [pc, #412]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80046f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046f2:	fa92 f2a2 	rbit	r2, r2
 80046f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80046f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046fa:	fab2 f282 	clz	r2, r2
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	f042 0220 	orr.w	r2, r2, #32
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	f002 021f 	and.w	r2, r2, #31
 800470a:	2101      	movs	r1, #1
 800470c:	fa01 f202 	lsl.w	r2, r1, r2
 8004710:	4013      	ands	r3, r2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d17b      	bne.n	800480e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0f3      	b.n	8004902 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b02      	cmp	r3, #2
 8004720:	d13c      	bne.n	800479c <HAL_RCC_ClockConfig+0x178>
 8004722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004726:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	b2db      	uxtb	r3, r3
 800473c:	f043 0301 	orr.w	r3, r3, #1
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d102      	bne.n	800474c <HAL_RCC_ClockConfig+0x128>
 8004746:	4b4f      	ldr	r3, [pc, #316]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	e00f      	b.n	800476c <HAL_RCC_ClockConfig+0x148>
 800474c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004750:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	647b      	str	r3, [r7, #68]	; 0x44
 800475a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800475e:	643b      	str	r3, [r7, #64]	; 0x40
 8004760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004768:	4b46      	ldr	r3, [pc, #280]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004770:	63ba      	str	r2, [r7, #56]	; 0x38
 8004772:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004774:	fa92 f2a2 	rbit	r2, r2
 8004778:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800477a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477c:	fab2 f282 	clz	r2, r2
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	f042 0220 	orr.w	r2, r2, #32
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	f002 021f 	and.w	r2, r2, #31
 800478c:	2101      	movs	r1, #1
 800478e:	fa01 f202 	lsl.w	r2, r1, r2
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d13a      	bne.n	800480e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0b2      	b.n	8004902 <HAL_RCC_ClockConfig+0x2de>
 800479c:	2302      	movs	r3, #2
 800479e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	fa93 f3a3 	rbit	r3, r3
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d102      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x1a0>
 80047be:	4b31      	ldr	r3, [pc, #196]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	e00d      	b.n	80047e0 <HAL_RCC_ClockConfig+0x1bc>
 80047c4:	2302      	movs	r3, #2
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	fa93 f3a3 	rbit	r3, r3
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
 80047d0:	2302      	movs	r3, #2
 80047d2:	623b      	str	r3, [r7, #32]
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	fa93 f3a3 	rbit	r3, r3
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2202      	movs	r2, #2
 80047e2:	61ba      	str	r2, [r7, #24]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	fa92 f2a2 	rbit	r2, r2
 80047ea:	617a      	str	r2, [r7, #20]
  return result;
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	fab2 f282 	clz	r2, r2
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	f042 0220 	orr.w	r2, r2, #32
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	f002 021f 	and.w	r2, r2, #31
 80047fe:	2101      	movs	r1, #1
 8004800:	fa01 f202 	lsl.w	r2, r1, r2
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e079      	b.n	8004902 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f023 0203 	bic.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	491a      	ldr	r1, [pc, #104]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004820:	f7fc fa1c 	bl	8000c5c <HAL_GetTick>
 8004824:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	e00a      	b.n	800483e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fc fa18 	bl	8000c5c <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e061      	b.n	8004902 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	4b11      	ldr	r3, [pc, #68]	; (8004884 <HAL_RCC_ClockConfig+0x260>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f003 020c 	and.w	r2, r3, #12
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	429a      	cmp	r2, r3
 800484e:	d1eb      	bne.n	8004828 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_ClockConfig+0x25c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d214      	bcs.n	8004888 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <HAL_RCC_ClockConfig+0x25c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 0207 	bic.w	r2, r3, #7
 8004866:	4906      	ldr	r1, [pc, #24]	; (8004880 <HAL_RCC_ClockConfig+0x25c>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b04      	ldr	r3, [pc, #16]	; (8004880 <HAL_RCC_ClockConfig+0x25c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e040      	b.n	8004902 <HAL_RCC_ClockConfig+0x2de>
 8004880:	40022000 	.word	0x40022000
 8004884:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004894:	4b1d      	ldr	r3, [pc, #116]	; (800490c <HAL_RCC_ClockConfig+0x2e8>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	491a      	ldr	r1, [pc, #104]	; (800490c <HAL_RCC_ClockConfig+0x2e8>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048b2:	4b16      	ldr	r3, [pc, #88]	; (800490c <HAL_RCC_ClockConfig+0x2e8>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	4912      	ldr	r1, [pc, #72]	; (800490c <HAL_RCC_ClockConfig+0x2e8>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80048c6:	f000 f829 	bl	800491c <HAL_RCC_GetSysClockFreq>
 80048ca:	4601      	mov	r1, r0
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <HAL_RCC_ClockConfig+0x2e8>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d4:	22f0      	movs	r2, #240	; 0xf0
 80048d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	fa92 f2a2 	rbit	r2, r2
 80048de:	60fa      	str	r2, [r7, #12]
  return result;
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	fab2 f282 	clz	r2, r2
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	40d3      	lsrs	r3, r2
 80048ea:	4a09      	ldr	r2, [pc, #36]	; (8004910 <HAL_RCC_ClockConfig+0x2ec>)
 80048ec:	5cd3      	ldrb	r3, [r2, r3]
 80048ee:	fa21 f303 	lsr.w	r3, r1, r3
 80048f2:	4a08      	ldr	r2, [pc, #32]	; (8004914 <HAL_RCC_ClockConfig+0x2f0>)
 80048f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_RCC_ClockConfig+0x2f4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fc f96a 	bl	8000bd4 <HAL_InitTick>
  
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3778      	adds	r7, #120	; 0x78
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	080058f4 	.word	0x080058f4
 8004914:	2000002c 	.word	0x2000002c
 8004918:	20000030 	.word	0x20000030

0800491c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800491c:	b480      	push	{r7}
 800491e:	b08b      	sub	sp, #44	; 0x2c
 8004920:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	2300      	movs	r3, #0
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004936:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	2b04      	cmp	r3, #4
 8004944:	d002      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x30>
 8004946:	2b08      	cmp	r3, #8
 8004948:	d003      	beq.n	8004952 <HAL_RCC_GetSysClockFreq+0x36>
 800494a:	e03f      	b.n	80049cc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800494c:	4b25      	ldr	r3, [pc, #148]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800494e:	623b      	str	r3, [r7, #32]
      break;
 8004950:	e03f      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004958:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800495c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	fa92 f2a2 	rbit	r2, r2
 8004964:	607a      	str	r2, [r7, #4]
  return result;
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	fab2 f282 	clz	r2, r2
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	40d3      	lsrs	r3, r2
 8004970:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004972:	5cd3      	ldrb	r3, [r2, r3]
 8004974:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	220f      	movs	r2, #15
 8004980:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	fa92 f2a2 	rbit	r2, r2
 8004988:	60fa      	str	r2, [r7, #12]
  return result;
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	fab2 f282 	clz	r2, r2
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	40d3      	lsrs	r3, r2
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049a4:	4a0f      	ldr	r2, [pc, #60]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
 80049b4:	e007      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049b6:	4a0b      	ldr	r2, [pc, #44]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	fb02 f303 	mul.w	r3, r2, r3
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	623b      	str	r3, [r7, #32]
      break;
 80049ca:	e002      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80049ce:	623b      	str	r3, [r7, #32]
      break;
 80049d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d2:	6a3b      	ldr	r3, [r7, #32]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	372c      	adds	r7, #44	; 0x2c
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40021000 	.word	0x40021000
 80049e4:	007a1200 	.word	0x007a1200
 80049e8:	0800590c 	.word	0x0800590c
 80049ec:	0800591c 	.word	0x0800591c

080049f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80049f6:	681b      	ldr	r3, [r3, #0]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	2000002c 	.word	0x2000002c

08004a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004a0e:	f7ff ffef 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a12:	4601      	mov	r1, r0
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	fa92 f2a2 	rbit	r2, r2
 8004a28:	603a      	str	r2, [r7, #0]
  return result;
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	fab2 f282 	clz	r2, r2
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	40d3      	lsrs	r3, r2
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004a36:	5cd3      	ldrb	r3, [r2, r3]
 8004a38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40021000 	.word	0x40021000
 8004a48:	08005904 	.word	0x08005904

08004a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004a52:	f7ff ffcd 	bl	80049f0 <HAL_RCC_GetHCLKFreq>
 8004a56:	4601      	mov	r1, r0
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004a60:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004a64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	fa92 f2a2 	rbit	r2, r2
 8004a6c:	603a      	str	r2, [r7, #0]
  return result;
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	fab2 f282 	clz	r2, r2
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	40d3      	lsrs	r3, r2
 8004a78:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	08005904 	.word	0x08005904

08004a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b092      	sub	sp, #72	; 0x48
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	f000 80d7 	beq.w	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ab4:	4b4e      	ldr	r3, [pc, #312]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10e      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ac0:	4b4b      	ldr	r3, [pc, #300]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	4a4a      	ldr	r2, [pc, #296]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aca:	61d3      	str	r3, [r2, #28]
 8004acc:	4b48      	ldr	r3, [pc, #288]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ade:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d118      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aea:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a41      	ldr	r2, [pc, #260]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004af4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af6:	f7fc f8b1 	bl	8000c5c <HAL_GetTick>
 8004afa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afe:	f7fc f8ad 	bl	8000c5c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b64      	cmp	r3, #100	; 0x64
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e1d6      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b10:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b1c:	4b34      	ldr	r3, [pc, #208]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8084 	beq.w	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d07c      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b3c:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	fa93 f3a3 	rbit	r3, r3
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	4b26      	ldr	r3, [pc, #152]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	461a      	mov	r2, r3
 8004b66:	2301      	movs	r3, #1
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b72:	fa93 f3a3 	rbit	r3, r3
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b7a:	fab3 f383 	clz	r3, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	4b1d      	ldr	r3, [pc, #116]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b92:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d04b      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fc f85d 	bl	8000c5c <HAL_GetTick>
 8004ba2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fc f859 	bl	8000c5c <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e180      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	fa93 f3a3 	rbit	r3, r3
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc8:	2302      	movs	r3, #2
 8004bca:	623b      	str	r3, [r7, #32]
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	61fb      	str	r3, [r7, #28]
  return result;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d108      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004bea:	4b01      	ldr	r3, [pc, #4]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	e00d      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40007000 	.word	0x40007000
 8004bf8:	10908100 	.word	0x10908100
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	4ba0      	ldr	r3, [pc, #640]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	613a      	str	r2, [r7, #16]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	fa92 f2a2 	rbit	r2, r2
 8004c16:	60fa      	str	r2, [r7, #12]
  return result;
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	fab2 f282 	clz	r2, r2
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	f002 021f 	and.w	r2, r2, #31
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0b7      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c36:	4b95      	ldr	r3, [pc, #596]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4992      	ldr	r1, [pc, #584]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c50:	4b8e      	ldr	r3, [pc, #568]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4a8d      	ldr	r2, [pc, #564]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d008      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c68:	4b88      	ldr	r3, [pc, #544]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	f023 0203 	bic.w	r2, r3, #3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4985      	ldr	r1, [pc, #532]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d008      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c86:	4b81      	ldr	r3, [pc, #516]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	497e      	ldr	r1, [pc, #504]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d008      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ca4:	4b79      	ldr	r3, [pc, #484]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	4976      	ldr	r1, [pc, #472]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d008      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cc2:	4b72      	ldr	r3, [pc, #456]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	f023 0210 	bic.w	r2, r3, #16
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	496f      	ldr	r1, [pc, #444]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004ce0:	4b6a      	ldr	r3, [pc, #424]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	4967      	ldr	r1, [pc, #412]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d008      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cfe:	4b63      	ldr	r3, [pc, #396]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	f023 0220 	bic.w	r2, r3, #32
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4960      	ldr	r1, [pc, #384]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d1c:	4b5b      	ldr	r3, [pc, #364]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	4958      	ldr	r1, [pc, #352]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d008      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d3a:	4b54      	ldr	r3, [pc, #336]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	4951      	ldr	r1, [pc, #324]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d008      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d58:	4b4c      	ldr	r3, [pc, #304]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	4949      	ldr	r1, [pc, #292]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d76:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	4942      	ldr	r1, [pc, #264]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d94:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	493a      	ldr	r1, [pc, #232]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004db2:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	4933      	ldr	r1, [pc, #204]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004dd0:	4b2e      	ldr	r3, [pc, #184]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ddc:	492b      	ldr	r1, [pc, #172]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004dee:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	4924      	ldr	r1, [pc, #144]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004e0c:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	491c      	ldr	r1, [pc, #112]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d008      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004e2a:	4b18      	ldr	r3, [pc, #96]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	4915      	ldr	r1, [pc, #84]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	490d      	ldr	r1, [pc, #52]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e72:	4906      	ldr	r1, [pc, #24]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00c      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004e84:	4b01      	ldr	r3, [pc, #4]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	e002      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e98:	490b      	ldr	r1, [pc, #44]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	4904      	ldr	r1, [pc, #16]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3748      	adds	r7, #72	; 0x48
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40021000 	.word	0x40021000

08004ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e040      	b.n	8004f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fb fd74 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2224      	movs	r2, #36	; 0x24
 8004ef8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8c0 	bl	8005090 <UART_SetConfig>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e022      	b.n	8004f60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 face 	bl	80054c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fb55 	bl	8005608 <UART_CheckIdleState>
 8004f5e:	4603      	mov	r3, r0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7c:	2b20      	cmp	r3, #32
 8004f7e:	f040 8081 	bne.w	8005084 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_UART_Transmit+0x26>
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e079      	b.n	8005086 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UART_Transmit+0x38>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e072      	b.n	8005086 <HAL_UART_Transmit+0x11e>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2221      	movs	r2, #33	; 0x21
 8004fb2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004fb4:	f7fb fe52 	bl	8000c5c <HAL_GetTick>
 8004fb8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	88fa      	ldrh	r2, [r7, #6]
 8004fc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd2:	d108      	bne.n	8004fe6 <HAL_UART_Transmit+0x7e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d104      	bne.n	8004fe6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e003      	b.n	8004fee <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fee:	e02d      	b.n	800504c <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2180      	movs	r1, #128	; 0x80
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fb49 	bl	8005692 <UART_WaitOnFlagUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e03d      	b.n	8005086 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	881a      	ldrh	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800501c:	b292      	uxth	r2, r2
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	3302      	adds	r3, #2
 8005024:	61bb      	str	r3, [r7, #24]
 8005026:	e008      	b.n	800503a <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	b292      	uxth	r2, r2
 8005032:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	3301      	adds	r3, #1
 8005038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1cb      	bne.n	8004ff0 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2200      	movs	r2, #0
 8005060:	2140      	movs	r1, #64	; 0x40
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 fb15 	bl	8005692 <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e009      	b.n	8005086 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	e000      	b.n	8005086 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005084:	2302      	movs	r3, #2
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	431a      	orrs	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4bac      	ldr	r3, [pc, #688]	; (8005370 <UART_SetConfig+0x2e0>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	6939      	ldr	r1, [r7, #16]
 80050c8:	430b      	orrs	r3, r1
 80050ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	430a      	orrs	r2, r1
 8005104:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a9a      	ldr	r2, [pc, #616]	; (8005374 <UART_SetConfig+0x2e4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d121      	bne.n	8005154 <UART_SetConfig+0xc4>
 8005110:	4b99      	ldr	r3, [pc, #612]	; (8005378 <UART_SetConfig+0x2e8>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	f003 0303 	and.w	r3, r3, #3
 8005118:	2b03      	cmp	r3, #3
 800511a:	d817      	bhi.n	800514c <UART_SetConfig+0xbc>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x94>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005135 	.word	0x08005135
 8005128:	08005141 	.word	0x08005141
 800512c:	08005147 	.word	0x08005147
 8005130:	0800513b 	.word	0x0800513b
 8005134:	2301      	movs	r3, #1
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e0b2      	b.n	80052a0 <UART_SetConfig+0x210>
 800513a:	2302      	movs	r3, #2
 800513c:	77fb      	strb	r3, [r7, #31]
 800513e:	e0af      	b.n	80052a0 <UART_SetConfig+0x210>
 8005140:	2304      	movs	r3, #4
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e0ac      	b.n	80052a0 <UART_SetConfig+0x210>
 8005146:	2308      	movs	r3, #8
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e0a9      	b.n	80052a0 <UART_SetConfig+0x210>
 800514c:	2310      	movs	r3, #16
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	bf00      	nop
 8005152:	e0a5      	b.n	80052a0 <UART_SetConfig+0x210>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a88      	ldr	r2, [pc, #544]	; (800537c <UART_SetConfig+0x2ec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d123      	bne.n	80051a6 <UART_SetConfig+0x116>
 800515e:	4b86      	ldr	r3, [pc, #536]	; (8005378 <UART_SetConfig+0x2e8>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516a:	d012      	beq.n	8005192 <UART_SetConfig+0x102>
 800516c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005170:	d802      	bhi.n	8005178 <UART_SetConfig+0xe8>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <UART_SetConfig+0xf6>
 8005176:	e012      	b.n	800519e <UART_SetConfig+0x10e>
 8005178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800517c:	d00c      	beq.n	8005198 <UART_SetConfig+0x108>
 800517e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005182:	d003      	beq.n	800518c <UART_SetConfig+0xfc>
 8005184:	e00b      	b.n	800519e <UART_SetConfig+0x10e>
 8005186:	2300      	movs	r3, #0
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e089      	b.n	80052a0 <UART_SetConfig+0x210>
 800518c:	2302      	movs	r3, #2
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e086      	b.n	80052a0 <UART_SetConfig+0x210>
 8005192:	2304      	movs	r3, #4
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e083      	b.n	80052a0 <UART_SetConfig+0x210>
 8005198:	2308      	movs	r3, #8
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e080      	b.n	80052a0 <UART_SetConfig+0x210>
 800519e:	2310      	movs	r3, #16
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	bf00      	nop
 80051a4:	e07c      	b.n	80052a0 <UART_SetConfig+0x210>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a75      	ldr	r2, [pc, #468]	; (8005380 <UART_SetConfig+0x2f0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d123      	bne.n	80051f8 <UART_SetConfig+0x168>
 80051b0:	4b71      	ldr	r3, [pc, #452]	; (8005378 <UART_SetConfig+0x2e8>)
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80051b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051bc:	d012      	beq.n	80051e4 <UART_SetConfig+0x154>
 80051be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051c2:	d802      	bhi.n	80051ca <UART_SetConfig+0x13a>
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <UART_SetConfig+0x148>
 80051c8:	e012      	b.n	80051f0 <UART_SetConfig+0x160>
 80051ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051ce:	d00c      	beq.n	80051ea <UART_SetConfig+0x15a>
 80051d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80051d4:	d003      	beq.n	80051de <UART_SetConfig+0x14e>
 80051d6:	e00b      	b.n	80051f0 <UART_SetConfig+0x160>
 80051d8:	2300      	movs	r3, #0
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e060      	b.n	80052a0 <UART_SetConfig+0x210>
 80051de:	2302      	movs	r3, #2
 80051e0:	77fb      	strb	r3, [r7, #31]
 80051e2:	e05d      	b.n	80052a0 <UART_SetConfig+0x210>
 80051e4:	2304      	movs	r3, #4
 80051e6:	77fb      	strb	r3, [r7, #31]
 80051e8:	e05a      	b.n	80052a0 <UART_SetConfig+0x210>
 80051ea:	2308      	movs	r3, #8
 80051ec:	77fb      	strb	r3, [r7, #31]
 80051ee:	e057      	b.n	80052a0 <UART_SetConfig+0x210>
 80051f0:	2310      	movs	r3, #16
 80051f2:	77fb      	strb	r3, [r7, #31]
 80051f4:	bf00      	nop
 80051f6:	e053      	b.n	80052a0 <UART_SetConfig+0x210>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a61      	ldr	r2, [pc, #388]	; (8005384 <UART_SetConfig+0x2f4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d123      	bne.n	800524a <UART_SetConfig+0x1ba>
 8005202:	4b5d      	ldr	r3, [pc, #372]	; (8005378 <UART_SetConfig+0x2e8>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800520a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800520e:	d012      	beq.n	8005236 <UART_SetConfig+0x1a6>
 8005210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005214:	d802      	bhi.n	800521c <UART_SetConfig+0x18c>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <UART_SetConfig+0x19a>
 800521a:	e012      	b.n	8005242 <UART_SetConfig+0x1b2>
 800521c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005220:	d00c      	beq.n	800523c <UART_SetConfig+0x1ac>
 8005222:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005226:	d003      	beq.n	8005230 <UART_SetConfig+0x1a0>
 8005228:	e00b      	b.n	8005242 <UART_SetConfig+0x1b2>
 800522a:	2300      	movs	r3, #0
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e037      	b.n	80052a0 <UART_SetConfig+0x210>
 8005230:	2302      	movs	r3, #2
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e034      	b.n	80052a0 <UART_SetConfig+0x210>
 8005236:	2304      	movs	r3, #4
 8005238:	77fb      	strb	r3, [r7, #31]
 800523a:	e031      	b.n	80052a0 <UART_SetConfig+0x210>
 800523c:	2308      	movs	r3, #8
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e02e      	b.n	80052a0 <UART_SetConfig+0x210>
 8005242:	2310      	movs	r3, #16
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	bf00      	nop
 8005248:	e02a      	b.n	80052a0 <UART_SetConfig+0x210>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a4e      	ldr	r2, [pc, #312]	; (8005388 <UART_SetConfig+0x2f8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d123      	bne.n	800529c <UART_SetConfig+0x20c>
 8005254:	4b48      	ldr	r3, [pc, #288]	; (8005378 <UART_SetConfig+0x2e8>)
 8005256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005258:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800525c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005260:	d012      	beq.n	8005288 <UART_SetConfig+0x1f8>
 8005262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005266:	d802      	bhi.n	800526e <UART_SetConfig+0x1de>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <UART_SetConfig+0x1ec>
 800526c:	e012      	b.n	8005294 <UART_SetConfig+0x204>
 800526e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005272:	d00c      	beq.n	800528e <UART_SetConfig+0x1fe>
 8005274:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005278:	d003      	beq.n	8005282 <UART_SetConfig+0x1f2>
 800527a:	e00b      	b.n	8005294 <UART_SetConfig+0x204>
 800527c:	2300      	movs	r3, #0
 800527e:	77fb      	strb	r3, [r7, #31]
 8005280:	e00e      	b.n	80052a0 <UART_SetConfig+0x210>
 8005282:	2302      	movs	r3, #2
 8005284:	77fb      	strb	r3, [r7, #31]
 8005286:	e00b      	b.n	80052a0 <UART_SetConfig+0x210>
 8005288:	2304      	movs	r3, #4
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e008      	b.n	80052a0 <UART_SetConfig+0x210>
 800528e:	2308      	movs	r3, #8
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e005      	b.n	80052a0 <UART_SetConfig+0x210>
 8005294:	2310      	movs	r3, #16
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	bf00      	nop
 800529a:	e001      	b.n	80052a0 <UART_SetConfig+0x210>
 800529c:	2310      	movs	r3, #16
 800529e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	f040 8090 	bne.w	80053cc <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80052ac:	7ffb      	ldrb	r3, [r7, #31]
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d86c      	bhi.n	800538c <UART_SetConfig+0x2fc>
 80052b2:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <UART_SetConfig+0x228>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052dd 	.word	0x080052dd
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	0800531d 	.word	0x0800531d
 80052c4:	0800538d 	.word	0x0800538d
 80052c8:	08005339 	.word	0x08005339
 80052cc:	0800538d 	.word	0x0800538d
 80052d0:	0800538d 	.word	0x0800538d
 80052d4:	0800538d 	.word	0x0800538d
 80052d8:	08005359 	.word	0x08005359
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052dc:	f7ff fb94 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 80052e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	005a      	lsls	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	085b      	lsrs	r3, r3, #1
 80052ec:	441a      	add	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	61bb      	str	r3, [r7, #24]
        break;
 80052fa:	e04a      	b.n	8005392 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052fc:	f7ff fba6 	bl	8004a4c <HAL_RCC_GetPCLK2Freq>
 8005300:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	005a      	lsls	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	441a      	add	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	fbb2 f3f3 	udiv	r3, r2, r3
 8005316:	b29b      	uxth	r3, r3
 8005318:	61bb      	str	r3, [r7, #24]
        break;
 800531a:	e03a      	b.n	8005392 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005326:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6852      	ldr	r2, [r2, #4]
 800532e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	61bb      	str	r3, [r7, #24]
        break;
 8005336:	e02c      	b.n	8005392 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005338:	f7ff faf0 	bl	800491c <HAL_RCC_GetSysClockFreq>
 800533c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	005a      	lsls	r2, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	441a      	add	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005352:	b29b      	uxth	r3, r3
 8005354:	61bb      	str	r3, [r7, #24]
        break;
 8005356:	e01c      	b.n	8005392 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	085b      	lsrs	r3, r3, #1
 800535e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	b29b      	uxth	r3, r3
 800536c:	61bb      	str	r3, [r7, #24]
        break;
 800536e:	e010      	b.n	8005392 <UART_SetConfig+0x302>
 8005370:	efff69f3 	.word	0xefff69f3
 8005374:	40013800 	.word	0x40013800
 8005378:	40021000 	.word	0x40021000
 800537c:	40004400 	.word	0x40004400
 8005380:	40004800 	.word	0x40004800
 8005384:	40004c00 	.word	0x40004c00
 8005388:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	75fb      	strb	r3, [r7, #23]
        break;
 8005390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b0f      	cmp	r3, #15
 8005396:	d916      	bls.n	80053c6 <UART_SetConfig+0x336>
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539e:	d212      	bcs.n	80053c6 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	f023 030f 	bic.w	r3, r3, #15
 80053a8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	897b      	ldrh	r3, [r7, #10]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	897a      	ldrh	r2, [r7, #10]
 80053c2:	60da      	str	r2, [r3, #12]
 80053c4:	e072      	b.n	80054ac <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	75fb      	strb	r3, [r7, #23]
 80053ca:	e06f      	b.n	80054ac <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 80053cc:	7ffb      	ldrb	r3, [r7, #31]
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d85b      	bhi.n	800548a <UART_SetConfig+0x3fa>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x348>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053fd 	.word	0x080053fd
 80053dc:	0800541b 	.word	0x0800541b
 80053e0:	08005439 	.word	0x08005439
 80053e4:	0800548b 	.word	0x0800548b
 80053e8:	08005455 	.word	0x08005455
 80053ec:	0800548b 	.word	0x0800548b
 80053f0:	0800548b 	.word	0x0800548b
 80053f4:	0800548b 	.word	0x0800548b
 80053f8:	08005473 	.word	0x08005473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053fc:	f7ff fb04 	bl	8004a08 <HAL_RCC_GetPCLK1Freq>
 8005400:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	085a      	lsrs	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	441a      	add	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	b29b      	uxth	r3, r3
 8005416:	61bb      	str	r3, [r7, #24]
        break;
 8005418:	e03a      	b.n	8005490 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800541a:	f7ff fb17 	bl	8004a4c <HAL_RCC_GetPCLK2Freq>
 800541e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	085a      	lsrs	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	441a      	add	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	b29b      	uxth	r3, r3
 8005434:	61bb      	str	r3, [r7, #24]
        break;
 8005436:	e02b      	b.n	8005490 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	085b      	lsrs	r3, r3, #1
 800543e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005442:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6852      	ldr	r2, [r2, #4]
 800544a:	fbb3 f3f2 	udiv	r3, r3, r2
 800544e:	b29b      	uxth	r3, r3
 8005450:	61bb      	str	r3, [r7, #24]
        break;
 8005452:	e01d      	b.n	8005490 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005454:	f7ff fa62 	bl	800491c <HAL_RCC_GetSysClockFreq>
 8005458:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	085a      	lsrs	r2, r3, #1
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	441a      	add	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	b29b      	uxth	r3, r3
 800546e:	61bb      	str	r3, [r7, #24]
        break;
 8005470:	e00e      	b.n	8005490 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	b29b      	uxth	r3, r3
 8005486:	61bb      	str	r3, [r7, #24]
        break;
 8005488:	e002      	b.n	8005490 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	75fb      	strb	r3, [r7, #23]
        break;
 800548e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b0f      	cmp	r3, #15
 8005494:	d908      	bls.n	80054a8 <UART_SetConfig+0x418>
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549c:	d204      	bcs.n	80054a8 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	60da      	str	r2, [r3, #12]
 80054a6:	e001      	b.n	80054ac <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop

080054c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01a      	beq.n	80055da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c2:	d10a      	bne.n	80055da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005616:	f7fb fb21 	bl	8000c5c <HAL_GetTick>
 800561a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d10e      	bne.n	8005648 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f82a 	bl	8005692 <UART_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e020      	b.n	800568a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b04      	cmp	r3, #4
 8005654:	d10e      	bne.n	8005674 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005656:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f814 	bl	8005692 <UART_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e00a      	b.n	800568a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	4613      	mov	r3, r2
 80056a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a2:	e05d      	b.n	8005760 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d059      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ac:	f7fb fad6 	bl	8000c5c <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d302      	bcc.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11b      	bne.n	80056fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e042      	b.n	8005780 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d02b      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005716:	d123      	bne.n	8005760 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005720:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005730:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2220      	movs	r2, #32
 8005752:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e00f      	b.n	8005780 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	4013      	ands	r3, r2
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	bf0c      	ite	eq
 8005770:	2301      	moveq	r3, #1
 8005772:	2300      	movne	r3, #0
 8005774:	b2db      	uxtb	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	79fb      	ldrb	r3, [r7, #7]
 800577a:	429a      	cmp	r2, r3
 800577c:	d092      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <__errno>:
 8005788:	4b01      	ldr	r3, [pc, #4]	; (8005790 <__errno+0x8>)
 800578a:	6818      	ldr	r0, [r3, #0]
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20000038 	.word	0x20000038

08005794 <__libc_init_array>:
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	4e0d      	ldr	r6, [pc, #52]	; (80057cc <__libc_init_array+0x38>)
 8005798:	4c0d      	ldr	r4, [pc, #52]	; (80057d0 <__libc_init_array+0x3c>)
 800579a:	1ba4      	subs	r4, r4, r6
 800579c:	10a4      	asrs	r4, r4, #2
 800579e:	2500      	movs	r5, #0
 80057a0:	42a5      	cmp	r5, r4
 80057a2:	d109      	bne.n	80057b8 <__libc_init_array+0x24>
 80057a4:	4e0b      	ldr	r6, [pc, #44]	; (80057d4 <__libc_init_array+0x40>)
 80057a6:	4c0c      	ldr	r4, [pc, #48]	; (80057d8 <__libc_init_array+0x44>)
 80057a8:	f000 f894 	bl	80058d4 <_init>
 80057ac:	1ba4      	subs	r4, r4, r6
 80057ae:	10a4      	asrs	r4, r4, #2
 80057b0:	2500      	movs	r5, #0
 80057b2:	42a5      	cmp	r5, r4
 80057b4:	d105      	bne.n	80057c2 <__libc_init_array+0x2e>
 80057b6:	bd70      	pop	{r4, r5, r6, pc}
 80057b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057bc:	4798      	blx	r3
 80057be:	3501      	adds	r5, #1
 80057c0:	e7ee      	b.n	80057a0 <__libc_init_array+0xc>
 80057c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057c6:	4798      	blx	r3
 80057c8:	3501      	adds	r5, #1
 80057ca:	e7f2      	b.n	80057b2 <__libc_init_array+0x1e>
 80057cc:	0800592c 	.word	0x0800592c
 80057d0:	0800592c 	.word	0x0800592c
 80057d4:	0800592c 	.word	0x0800592c
 80057d8:	08005930 	.word	0x08005930

080057dc <malloc>:
 80057dc:	4b02      	ldr	r3, [pc, #8]	; (80057e8 <malloc+0xc>)
 80057de:	4601      	mov	r1, r0
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	f000 b80b 	b.w	80057fc <_malloc_r>
 80057e6:	bf00      	nop
 80057e8:	20000038 	.word	0x20000038

080057ec <memset>:
 80057ec:	4402      	add	r2, r0
 80057ee:	4603      	mov	r3, r0
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d100      	bne.n	80057f6 <memset+0xa>
 80057f4:	4770      	bx	lr
 80057f6:	f803 1b01 	strb.w	r1, [r3], #1
 80057fa:	e7f9      	b.n	80057f0 <memset+0x4>

080057fc <_malloc_r>:
 80057fc:	b570      	push	{r4, r5, r6, lr}
 80057fe:	1ccd      	adds	r5, r1, #3
 8005800:	f025 0503 	bic.w	r5, r5, #3
 8005804:	3508      	adds	r5, #8
 8005806:	2d0c      	cmp	r5, #12
 8005808:	bf38      	it	cc
 800580a:	250c      	movcc	r5, #12
 800580c:	2d00      	cmp	r5, #0
 800580e:	4606      	mov	r6, r0
 8005810:	db01      	blt.n	8005816 <_malloc_r+0x1a>
 8005812:	42a9      	cmp	r1, r5
 8005814:	d903      	bls.n	800581e <_malloc_r+0x22>
 8005816:	230c      	movs	r3, #12
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	2000      	movs	r0, #0
 800581c:	bd70      	pop	{r4, r5, r6, pc}
 800581e:	f000 f857 	bl	80058d0 <__malloc_lock>
 8005822:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <_malloc_r+0xac>)
 8005824:	6814      	ldr	r4, [r2, #0]
 8005826:	4621      	mov	r1, r4
 8005828:	b991      	cbnz	r1, 8005850 <_malloc_r+0x54>
 800582a:	4c20      	ldr	r4, [pc, #128]	; (80058ac <_malloc_r+0xb0>)
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	b91b      	cbnz	r3, 8005838 <_malloc_r+0x3c>
 8005830:	4630      	mov	r0, r6
 8005832:	f000 f83d 	bl	80058b0 <_sbrk_r>
 8005836:	6020      	str	r0, [r4, #0]
 8005838:	4629      	mov	r1, r5
 800583a:	4630      	mov	r0, r6
 800583c:	f000 f838 	bl	80058b0 <_sbrk_r>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d124      	bne.n	800588e <_malloc_r+0x92>
 8005844:	230c      	movs	r3, #12
 8005846:	6033      	str	r3, [r6, #0]
 8005848:	4630      	mov	r0, r6
 800584a:	f000 f842 	bl	80058d2 <__malloc_unlock>
 800584e:	e7e4      	b.n	800581a <_malloc_r+0x1e>
 8005850:	680b      	ldr	r3, [r1, #0]
 8005852:	1b5b      	subs	r3, r3, r5
 8005854:	d418      	bmi.n	8005888 <_malloc_r+0x8c>
 8005856:	2b0b      	cmp	r3, #11
 8005858:	d90f      	bls.n	800587a <_malloc_r+0x7e>
 800585a:	600b      	str	r3, [r1, #0]
 800585c:	50cd      	str	r5, [r1, r3]
 800585e:	18cc      	adds	r4, r1, r3
 8005860:	4630      	mov	r0, r6
 8005862:	f000 f836 	bl	80058d2 <__malloc_unlock>
 8005866:	f104 000b 	add.w	r0, r4, #11
 800586a:	1d23      	adds	r3, r4, #4
 800586c:	f020 0007 	bic.w	r0, r0, #7
 8005870:	1ac3      	subs	r3, r0, r3
 8005872:	d0d3      	beq.n	800581c <_malloc_r+0x20>
 8005874:	425a      	negs	r2, r3
 8005876:	50e2      	str	r2, [r4, r3]
 8005878:	e7d0      	b.n	800581c <_malloc_r+0x20>
 800587a:	428c      	cmp	r4, r1
 800587c:	684b      	ldr	r3, [r1, #4]
 800587e:	bf16      	itet	ne
 8005880:	6063      	strne	r3, [r4, #4]
 8005882:	6013      	streq	r3, [r2, #0]
 8005884:	460c      	movne	r4, r1
 8005886:	e7eb      	b.n	8005860 <_malloc_r+0x64>
 8005888:	460c      	mov	r4, r1
 800588a:	6849      	ldr	r1, [r1, #4]
 800588c:	e7cc      	b.n	8005828 <_malloc_r+0x2c>
 800588e:	1cc4      	adds	r4, r0, #3
 8005890:	f024 0403 	bic.w	r4, r4, #3
 8005894:	42a0      	cmp	r0, r4
 8005896:	d005      	beq.n	80058a4 <_malloc_r+0xa8>
 8005898:	1a21      	subs	r1, r4, r0
 800589a:	4630      	mov	r0, r6
 800589c:	f000 f808 	bl	80058b0 <_sbrk_r>
 80058a0:	3001      	adds	r0, #1
 80058a2:	d0cf      	beq.n	8005844 <_malloc_r+0x48>
 80058a4:	6025      	str	r5, [r4, #0]
 80058a6:	e7db      	b.n	8005860 <_malloc_r+0x64>
 80058a8:	200000bc 	.word	0x200000bc
 80058ac:	200000c0 	.word	0x200000c0

080058b0 <_sbrk_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4c06      	ldr	r4, [pc, #24]	; (80058cc <_sbrk_r+0x1c>)
 80058b4:	2300      	movs	r3, #0
 80058b6:	4605      	mov	r5, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	6023      	str	r3, [r4, #0]
 80058bc:	f7fb f908 	bl	8000ad0 <_sbrk>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_sbrk_r+0x1a>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_sbrk_r+0x1a>
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	200001e4 	.word	0x200001e4

080058d0 <__malloc_lock>:
 80058d0:	4770      	bx	lr

080058d2 <__malloc_unlock>:
 80058d2:	4770      	bx	lr

080058d4 <_init>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	bf00      	nop
 80058d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	469e      	mov	lr, r3
 80058de:	4770      	bx	lr

080058e0 <_fini>:
 80058e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058e2:	bf00      	nop
 80058e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e6:	bc08      	pop	{r3}
 80058e8:	469e      	mov	lr, r3
 80058ea:	4770      	bx	lr
