
PDBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0f8  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800b1b0  0800b1b0  0001b1b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b75c  0800b75c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b75c  0800b75c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b75c  0800b75c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b75c  0800b75c  0001b75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b760  0800b760  0001b760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001dc  0800b940  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800b940  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c7e  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a3  00000000  00000000  00030e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00033728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  00034318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001790c  00000000  00000000  00034dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f57d  00000000  00000000  0004c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008adb2  00000000  00000000  0005bc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6a0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd0  00000000  00000000  000e6a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	200001dc 	.word	0x200001dc
 80000d4:	00000000 	.word	0x00000000
 80000d8:	0800b194 	.word	0x0800b194

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	200001e0 	.word	0x200001e0
 80000f8:	0800b194 	.word	0x0800b194

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_uqi>:
 800010c:	b402      	push	{r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	5c09      	ldrb	r1, [r1, r0]
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	448e      	add	lr, r1
 800011a:	bc02      	pop	{r1}
 800011c:	4770      	bx	lr
 800011e:	46c0      	nop			; (mov r8, r8)

08000120 <__gnu_thumb1_case_shi>:
 8000120:	b403      	push	{r0, r1}
 8000122:	4671      	mov	r1, lr
 8000124:	0849      	lsrs	r1, r1, #1
 8000126:	0040      	lsls	r0, r0, #1
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	5e09      	ldrsh	r1, [r1, r0]
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	448e      	add	lr, r1
 8000130:	bc03      	pop	{r0, r1}
 8000132:	4770      	bx	lr

08000134 <__udivsi3>:
 8000134:	2200      	movs	r2, #0
 8000136:	0843      	lsrs	r3, r0, #1
 8000138:	428b      	cmp	r3, r1
 800013a:	d374      	bcc.n	8000226 <__udivsi3+0xf2>
 800013c:	0903      	lsrs	r3, r0, #4
 800013e:	428b      	cmp	r3, r1
 8000140:	d35f      	bcc.n	8000202 <__udivsi3+0xce>
 8000142:	0a03      	lsrs	r3, r0, #8
 8000144:	428b      	cmp	r3, r1
 8000146:	d344      	bcc.n	80001d2 <__udivsi3+0x9e>
 8000148:	0b03      	lsrs	r3, r0, #12
 800014a:	428b      	cmp	r3, r1
 800014c:	d328      	bcc.n	80001a0 <__udivsi3+0x6c>
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d30d      	bcc.n	8000170 <__udivsi3+0x3c>
 8000154:	22ff      	movs	r2, #255	; 0xff
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	ba12      	rev	r2, r2
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d302      	bcc.n	8000166 <__udivsi3+0x32>
 8000160:	1212      	asrs	r2, r2, #8
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	d065      	beq.n	8000232 <__udivsi3+0xfe>
 8000166:	0b03      	lsrs	r3, r0, #12
 8000168:	428b      	cmp	r3, r1
 800016a:	d319      	bcc.n	80001a0 <__udivsi3+0x6c>
 800016c:	e000      	b.n	8000170 <__udivsi3+0x3c>
 800016e:	0a09      	lsrs	r1, r1, #8
 8000170:	0bc3      	lsrs	r3, r0, #15
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x46>
 8000176:	03cb      	lsls	r3, r1, #15
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b83      	lsrs	r3, r0, #14
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x52>
 8000182:	038b      	lsls	r3, r1, #14
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b43      	lsrs	r3, r0, #13
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x5e>
 800018e:	034b      	lsls	r3, r1, #13
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b03      	lsrs	r3, r0, #12
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x6a>
 800019a:	030b      	lsls	r3, r1, #12
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0ac3      	lsrs	r3, r0, #11
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x76>
 80001a6:	02cb      	lsls	r3, r1, #11
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a83      	lsrs	r3, r0, #10
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x82>
 80001b2:	028b      	lsls	r3, r1, #10
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a43      	lsrs	r3, r0, #9
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x8e>
 80001be:	024b      	lsls	r3, r1, #9
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a03      	lsrs	r3, r0, #8
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x9a>
 80001ca:	020b      	lsls	r3, r1, #8
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	d2cd      	bcs.n	800016e <__udivsi3+0x3a>
 80001d2:	09c3      	lsrs	r3, r0, #7
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xa8>
 80001d8:	01cb      	lsls	r3, r1, #7
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0983      	lsrs	r3, r0, #6
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xb4>
 80001e4:	018b      	lsls	r3, r1, #6
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0943      	lsrs	r3, r0, #5
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xc0>
 80001f0:	014b      	lsls	r3, r1, #5
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0903      	lsrs	r3, r0, #4
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xcc>
 80001fc:	010b      	lsls	r3, r1, #4
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	08c3      	lsrs	r3, r0, #3
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xd8>
 8000208:	00cb      	lsls	r3, r1, #3
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0883      	lsrs	r3, r0, #2
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xe4>
 8000214:	008b      	lsls	r3, r1, #2
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0843      	lsrs	r3, r0, #1
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xf0>
 8000220:	004b      	lsls	r3, r1, #1
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	1a41      	subs	r1, r0, r1
 8000228:	d200      	bcs.n	800022c <__udivsi3+0xf8>
 800022a:	4601      	mov	r1, r0
 800022c:	4152      	adcs	r2, r2
 800022e:	4610      	mov	r0, r2
 8000230:	4770      	bx	lr
 8000232:	e7ff      	b.n	8000234 <__udivsi3+0x100>
 8000234:	b501      	push	{r0, lr}
 8000236:	2000      	movs	r0, #0
 8000238:	f000 f8f0 	bl	800041c <__aeabi_idiv0>
 800023c:	bd02      	pop	{r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_uidivmod>:
 8000240:	2900      	cmp	r1, #0
 8000242:	d0f7      	beq.n	8000234 <__udivsi3+0x100>
 8000244:	e776      	b.n	8000134 <__udivsi3>
 8000246:	4770      	bx	lr

08000248 <__divsi3>:
 8000248:	4603      	mov	r3, r0
 800024a:	430b      	orrs	r3, r1
 800024c:	d47f      	bmi.n	800034e <__divsi3+0x106>
 800024e:	2200      	movs	r2, #0
 8000250:	0843      	lsrs	r3, r0, #1
 8000252:	428b      	cmp	r3, r1
 8000254:	d374      	bcc.n	8000340 <__divsi3+0xf8>
 8000256:	0903      	lsrs	r3, r0, #4
 8000258:	428b      	cmp	r3, r1
 800025a:	d35f      	bcc.n	800031c <__divsi3+0xd4>
 800025c:	0a03      	lsrs	r3, r0, #8
 800025e:	428b      	cmp	r3, r1
 8000260:	d344      	bcc.n	80002ec <__divsi3+0xa4>
 8000262:	0b03      	lsrs	r3, r0, #12
 8000264:	428b      	cmp	r3, r1
 8000266:	d328      	bcc.n	80002ba <__divsi3+0x72>
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d30d      	bcc.n	800028a <__divsi3+0x42>
 800026e:	22ff      	movs	r2, #255	; 0xff
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	ba12      	rev	r2, r2
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__divsi3+0x38>
 800027a:	1212      	asrs	r2, r2, #8
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	d065      	beq.n	800034c <__divsi3+0x104>
 8000280:	0b03      	lsrs	r3, r0, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d319      	bcc.n	80002ba <__divsi3+0x72>
 8000286:	e000      	b.n	800028a <__divsi3+0x42>
 8000288:	0a09      	lsrs	r1, r1, #8
 800028a:	0bc3      	lsrs	r3, r0, #15
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x4c>
 8000290:	03cb      	lsls	r3, r1, #15
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b83      	lsrs	r3, r0, #14
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x58>
 800029c:	038b      	lsls	r3, r1, #14
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b43      	lsrs	r3, r0, #13
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x64>
 80002a8:	034b      	lsls	r3, r1, #13
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b03      	lsrs	r3, r0, #12
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x70>
 80002b4:	030b      	lsls	r3, r1, #12
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0ac3      	lsrs	r3, r0, #11
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x7c>
 80002c0:	02cb      	lsls	r3, r1, #11
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a83      	lsrs	r3, r0, #10
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x88>
 80002cc:	028b      	lsls	r3, r1, #10
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a43      	lsrs	r3, r0, #9
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x94>
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a03      	lsrs	r3, r0, #8
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0xa0>
 80002e4:	020b      	lsls	r3, r1, #8
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	d2cd      	bcs.n	8000288 <__divsi3+0x40>
 80002ec:	09c3      	lsrs	r3, r0, #7
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xae>
 80002f2:	01cb      	lsls	r3, r1, #7
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0983      	lsrs	r3, r0, #6
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xba>
 80002fe:	018b      	lsls	r3, r1, #6
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0943      	lsrs	r3, r0, #5
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xc6>
 800030a:	014b      	lsls	r3, r1, #5
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0903      	lsrs	r3, r0, #4
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xd2>
 8000316:	010b      	lsls	r3, r1, #4
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	08c3      	lsrs	r3, r0, #3
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xde>
 8000322:	00cb      	lsls	r3, r1, #3
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0883      	lsrs	r3, r0, #2
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xea>
 800032e:	008b      	lsls	r3, r1, #2
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0843      	lsrs	r3, r0, #1
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xf6>
 800033a:	004b      	lsls	r3, r1, #1
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	1a41      	subs	r1, r0, r1
 8000342:	d200      	bcs.n	8000346 <__divsi3+0xfe>
 8000344:	4601      	mov	r1, r0
 8000346:	4152      	adcs	r2, r2
 8000348:	4610      	mov	r0, r2
 800034a:	4770      	bx	lr
 800034c:	e05d      	b.n	800040a <__divsi3+0x1c2>
 800034e:	0fca      	lsrs	r2, r1, #31
 8000350:	d000      	beq.n	8000354 <__divsi3+0x10c>
 8000352:	4249      	negs	r1, r1
 8000354:	1003      	asrs	r3, r0, #32
 8000356:	d300      	bcc.n	800035a <__divsi3+0x112>
 8000358:	4240      	negs	r0, r0
 800035a:	4053      	eors	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	469c      	mov	ip, r3
 8000360:	0903      	lsrs	r3, r0, #4
 8000362:	428b      	cmp	r3, r1
 8000364:	d32d      	bcc.n	80003c2 <__divsi3+0x17a>
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d312      	bcc.n	8000392 <__divsi3+0x14a>
 800036c:	22fc      	movs	r2, #252	; 0xfc
 800036e:	0189      	lsls	r1, r1, #6
 8000370:	ba12      	rev	r2, r2
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d30c      	bcc.n	8000392 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d308      	bcc.n	8000392 <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d304      	bcc.n	8000392 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	d03a      	beq.n	8000402 <__divsi3+0x1ba>
 800038c:	1192      	asrs	r2, r2, #6
 800038e:	e000      	b.n	8000392 <__divsi3+0x14a>
 8000390:	0989      	lsrs	r1, r1, #6
 8000392:	09c3      	lsrs	r3, r0, #7
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x154>
 8000398:	01cb      	lsls	r3, r1, #7
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0983      	lsrs	r3, r0, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x160>
 80003a4:	018b      	lsls	r3, r1, #6
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0943      	lsrs	r3, r0, #5
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x16c>
 80003b0:	014b      	lsls	r3, r1, #5
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0903      	lsrs	r3, r0, #4
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x178>
 80003bc:	010b      	lsls	r3, r1, #4
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	08c3      	lsrs	r3, r0, #3
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x184>
 80003c8:	00cb      	lsls	r3, r1, #3
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0883      	lsrs	r3, r0, #2
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x190>
 80003d4:	008b      	lsls	r3, r1, #2
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	d2d9      	bcs.n	8000390 <__divsi3+0x148>
 80003dc:	0843      	lsrs	r3, r0, #1
 80003de:	428b      	cmp	r3, r1
 80003e0:	d301      	bcc.n	80003e6 <__divsi3+0x19e>
 80003e2:	004b      	lsls	r3, r1, #1
 80003e4:	1ac0      	subs	r0, r0, r3
 80003e6:	4152      	adcs	r2, r2
 80003e8:	1a41      	subs	r1, r0, r1
 80003ea:	d200      	bcs.n	80003ee <__divsi3+0x1a6>
 80003ec:	4601      	mov	r1, r0
 80003ee:	4663      	mov	r3, ip
 80003f0:	4152      	adcs	r2, r2
 80003f2:	105b      	asrs	r3, r3, #1
 80003f4:	4610      	mov	r0, r2
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x1b4>
 80003f8:	4240      	negs	r0, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d500      	bpl.n	8000400 <__divsi3+0x1b8>
 80003fe:	4249      	negs	r1, r1
 8000400:	4770      	bx	lr
 8000402:	4663      	mov	r3, ip
 8000404:	105b      	asrs	r3, r3, #1
 8000406:	d300      	bcc.n	800040a <__divsi3+0x1c2>
 8000408:	4240      	negs	r0, r0
 800040a:	b501      	push	{r0, lr}
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f805 	bl	800041c <__aeabi_idiv0>
 8000412:	bd02      	pop	{r1, pc}

08000414 <__aeabi_idivmod>:
 8000414:	2900      	cmp	r1, #0
 8000416:	d0f8      	beq.n	800040a <__divsi3+0x1c2>
 8000418:	e716      	b.n	8000248 <__divsi3>
 800041a:	4770      	bx	lr

0800041c <__aeabi_idiv0>:
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_cdrcmple>:
 8000420:	4684      	mov	ip, r0
 8000422:	1c10      	adds	r0, r2, #0
 8000424:	4662      	mov	r2, ip
 8000426:	468c      	mov	ip, r1
 8000428:	1c19      	adds	r1, r3, #0
 800042a:	4663      	mov	r3, ip
 800042c:	e000      	b.n	8000430 <__aeabi_cdcmpeq>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdcmpeq>:
 8000430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000432:	f001 f9bf 	bl	80017b4 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	d401      	bmi.n	800043e <__aeabi_cdcmpeq+0xe>
 800043a:	2100      	movs	r1, #0
 800043c:	42c8      	cmn	r0, r1
 800043e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000440 <__aeabi_dcmpeq>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f909 	bl	8001658 <__eqdf2>
 8000446:	4240      	negs	r0, r0
 8000448:	3001      	adds	r0, #1
 800044a:	bd10      	pop	{r4, pc}

0800044c <__aeabi_dcmplt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9b1 	bl	80017b4 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	db01      	blt.n	800045a <__aeabi_dcmplt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_dcmple>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f9a7 	bl	80017b4 <__ledf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dd01      	ble.n	800046e <__aeabi_dcmple+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_dcmpgt>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 f92b 	bl	80016d0 <__gedf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	dc01      	bgt.n	8000482 <__aeabi_dcmpgt+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_dcmpge>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f001 f921 	bl	80016d0 <__gedf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	da01      	bge.n	8000496 <__aeabi_dcmpge+0xe>
 8000492:	2000      	movs	r0, #0
 8000494:	bd10      	pop	{r4, pc}
 8000496:	2001      	movs	r0, #1
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_fdiv>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	464f      	mov	r7, r9
 80004a0:	4646      	mov	r6, r8
 80004a2:	46d6      	mov	lr, sl
 80004a4:	0245      	lsls	r5, r0, #9
 80004a6:	b5c0      	push	{r6, r7, lr}
 80004a8:	0047      	lsls	r7, r0, #1
 80004aa:	1c0c      	adds	r4, r1, #0
 80004ac:	0a6d      	lsrs	r5, r5, #9
 80004ae:	0e3f      	lsrs	r7, r7, #24
 80004b0:	0fc6      	lsrs	r6, r0, #31
 80004b2:	2f00      	cmp	r7, #0
 80004b4:	d066      	beq.n	8000584 <__aeabi_fdiv+0xe8>
 80004b6:	2fff      	cmp	r7, #255	; 0xff
 80004b8:	d06c      	beq.n	8000594 <__aeabi_fdiv+0xf8>
 80004ba:	2300      	movs	r3, #0
 80004bc:	00ea      	lsls	r2, r5, #3
 80004be:	2580      	movs	r5, #128	; 0x80
 80004c0:	4699      	mov	r9, r3
 80004c2:	469a      	mov	sl, r3
 80004c4:	04ed      	lsls	r5, r5, #19
 80004c6:	4315      	orrs	r5, r2
 80004c8:	3f7f      	subs	r7, #127	; 0x7f
 80004ca:	0260      	lsls	r0, r4, #9
 80004cc:	0061      	lsls	r1, r4, #1
 80004ce:	0a43      	lsrs	r3, r0, #9
 80004d0:	4698      	mov	r8, r3
 80004d2:	0e09      	lsrs	r1, r1, #24
 80004d4:	0fe4      	lsrs	r4, r4, #31
 80004d6:	2900      	cmp	r1, #0
 80004d8:	d048      	beq.n	800056c <__aeabi_fdiv+0xd0>
 80004da:	29ff      	cmp	r1, #255	; 0xff
 80004dc:	d010      	beq.n	8000500 <__aeabi_fdiv+0x64>
 80004de:	2280      	movs	r2, #128	; 0x80
 80004e0:	00d8      	lsls	r0, r3, #3
 80004e2:	04d2      	lsls	r2, r2, #19
 80004e4:	4302      	orrs	r2, r0
 80004e6:	4690      	mov	r8, r2
 80004e8:	2000      	movs	r0, #0
 80004ea:	397f      	subs	r1, #127	; 0x7f
 80004ec:	464a      	mov	r2, r9
 80004ee:	0033      	movs	r3, r6
 80004f0:	1a7f      	subs	r7, r7, r1
 80004f2:	4302      	orrs	r2, r0
 80004f4:	496c      	ldr	r1, [pc, #432]	; (80006a8 <__aeabi_fdiv+0x20c>)
 80004f6:	0092      	lsls	r2, r2, #2
 80004f8:	588a      	ldr	r2, [r1, r2]
 80004fa:	4063      	eors	r3, r4
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	4697      	mov	pc, r2
 8000500:	2b00      	cmp	r3, #0
 8000502:	d16d      	bne.n	80005e0 <__aeabi_fdiv+0x144>
 8000504:	2002      	movs	r0, #2
 8000506:	3fff      	subs	r7, #255	; 0xff
 8000508:	e033      	b.n	8000572 <__aeabi_fdiv+0xd6>
 800050a:	2300      	movs	r3, #0
 800050c:	4698      	mov	r8, r3
 800050e:	0026      	movs	r6, r4
 8000510:	4645      	mov	r5, r8
 8000512:	4682      	mov	sl, r0
 8000514:	4653      	mov	r3, sl
 8000516:	2b02      	cmp	r3, #2
 8000518:	d100      	bne.n	800051c <__aeabi_fdiv+0x80>
 800051a:	e07f      	b.n	800061c <__aeabi_fdiv+0x180>
 800051c:	2b03      	cmp	r3, #3
 800051e:	d100      	bne.n	8000522 <__aeabi_fdiv+0x86>
 8000520:	e094      	b.n	800064c <__aeabi_fdiv+0x1b0>
 8000522:	2b01      	cmp	r3, #1
 8000524:	d017      	beq.n	8000556 <__aeabi_fdiv+0xba>
 8000526:	0038      	movs	r0, r7
 8000528:	307f      	adds	r0, #127	; 0x7f
 800052a:	2800      	cmp	r0, #0
 800052c:	dd5f      	ble.n	80005ee <__aeabi_fdiv+0x152>
 800052e:	076b      	lsls	r3, r5, #29
 8000530:	d004      	beq.n	800053c <__aeabi_fdiv+0xa0>
 8000532:	230f      	movs	r3, #15
 8000534:	402b      	ands	r3, r5
 8000536:	2b04      	cmp	r3, #4
 8000538:	d000      	beq.n	800053c <__aeabi_fdiv+0xa0>
 800053a:	3504      	adds	r5, #4
 800053c:	012b      	lsls	r3, r5, #4
 800053e:	d503      	bpl.n	8000548 <__aeabi_fdiv+0xac>
 8000540:	0038      	movs	r0, r7
 8000542:	4b5a      	ldr	r3, [pc, #360]	; (80006ac <__aeabi_fdiv+0x210>)
 8000544:	3080      	adds	r0, #128	; 0x80
 8000546:	401d      	ands	r5, r3
 8000548:	28fe      	cmp	r0, #254	; 0xfe
 800054a:	dc67      	bgt.n	800061c <__aeabi_fdiv+0x180>
 800054c:	01ad      	lsls	r5, r5, #6
 800054e:	0a6d      	lsrs	r5, r5, #9
 8000550:	b2c0      	uxtb	r0, r0
 8000552:	e002      	b.n	800055a <__aeabi_fdiv+0xbe>
 8000554:	001e      	movs	r6, r3
 8000556:	2000      	movs	r0, #0
 8000558:	2500      	movs	r5, #0
 800055a:	05c0      	lsls	r0, r0, #23
 800055c:	4328      	orrs	r0, r5
 800055e:	07f6      	lsls	r6, r6, #31
 8000560:	4330      	orrs	r0, r6
 8000562:	bce0      	pop	{r5, r6, r7}
 8000564:	46ba      	mov	sl, r7
 8000566:	46b1      	mov	r9, r6
 8000568:	46a8      	mov	r8, r5
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	2b00      	cmp	r3, #0
 800056e:	d12b      	bne.n	80005c8 <__aeabi_fdiv+0x12c>
 8000570:	2001      	movs	r0, #1
 8000572:	464a      	mov	r2, r9
 8000574:	0033      	movs	r3, r6
 8000576:	494e      	ldr	r1, [pc, #312]	; (80006b0 <__aeabi_fdiv+0x214>)
 8000578:	4302      	orrs	r2, r0
 800057a:	0092      	lsls	r2, r2, #2
 800057c:	588a      	ldr	r2, [r1, r2]
 800057e:	4063      	eors	r3, r4
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4697      	mov	pc, r2
 8000584:	2d00      	cmp	r5, #0
 8000586:	d113      	bne.n	80005b0 <__aeabi_fdiv+0x114>
 8000588:	2304      	movs	r3, #4
 800058a:	4699      	mov	r9, r3
 800058c:	3b03      	subs	r3, #3
 800058e:	2700      	movs	r7, #0
 8000590:	469a      	mov	sl, r3
 8000592:	e79a      	b.n	80004ca <__aeabi_fdiv+0x2e>
 8000594:	2d00      	cmp	r5, #0
 8000596:	d105      	bne.n	80005a4 <__aeabi_fdiv+0x108>
 8000598:	2308      	movs	r3, #8
 800059a:	4699      	mov	r9, r3
 800059c:	3b06      	subs	r3, #6
 800059e:	27ff      	movs	r7, #255	; 0xff
 80005a0:	469a      	mov	sl, r3
 80005a2:	e792      	b.n	80004ca <__aeabi_fdiv+0x2e>
 80005a4:	230c      	movs	r3, #12
 80005a6:	4699      	mov	r9, r3
 80005a8:	3b09      	subs	r3, #9
 80005aa:	27ff      	movs	r7, #255	; 0xff
 80005ac:	469a      	mov	sl, r3
 80005ae:	e78c      	b.n	80004ca <__aeabi_fdiv+0x2e>
 80005b0:	0028      	movs	r0, r5
 80005b2:	f002 f8e7 	bl	8002784 <__clzsi2>
 80005b6:	2776      	movs	r7, #118	; 0x76
 80005b8:	1f43      	subs	r3, r0, #5
 80005ba:	409d      	lsls	r5, r3
 80005bc:	2300      	movs	r3, #0
 80005be:	427f      	negs	r7, r7
 80005c0:	4699      	mov	r9, r3
 80005c2:	469a      	mov	sl, r3
 80005c4:	1a3f      	subs	r7, r7, r0
 80005c6:	e780      	b.n	80004ca <__aeabi_fdiv+0x2e>
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 f8db 	bl	8002784 <__clzsi2>
 80005ce:	4642      	mov	r2, r8
 80005d0:	1f43      	subs	r3, r0, #5
 80005d2:	2176      	movs	r1, #118	; 0x76
 80005d4:	409a      	lsls	r2, r3
 80005d6:	4249      	negs	r1, r1
 80005d8:	1a09      	subs	r1, r1, r0
 80005da:	4690      	mov	r8, r2
 80005dc:	2000      	movs	r0, #0
 80005de:	e785      	b.n	80004ec <__aeabi_fdiv+0x50>
 80005e0:	21ff      	movs	r1, #255	; 0xff
 80005e2:	2003      	movs	r0, #3
 80005e4:	e782      	b.n	80004ec <__aeabi_fdiv+0x50>
 80005e6:	001e      	movs	r6, r3
 80005e8:	20ff      	movs	r0, #255	; 0xff
 80005ea:	2500      	movs	r5, #0
 80005ec:	e7b5      	b.n	800055a <__aeabi_fdiv+0xbe>
 80005ee:	2301      	movs	r3, #1
 80005f0:	1a1b      	subs	r3, r3, r0
 80005f2:	2b1b      	cmp	r3, #27
 80005f4:	dcaf      	bgt.n	8000556 <__aeabi_fdiv+0xba>
 80005f6:	379e      	adds	r7, #158	; 0x9e
 80005f8:	0029      	movs	r1, r5
 80005fa:	40bd      	lsls	r5, r7
 80005fc:	40d9      	lsrs	r1, r3
 80005fe:	1e6a      	subs	r2, r5, #1
 8000600:	4195      	sbcs	r5, r2
 8000602:	430d      	orrs	r5, r1
 8000604:	076b      	lsls	r3, r5, #29
 8000606:	d004      	beq.n	8000612 <__aeabi_fdiv+0x176>
 8000608:	230f      	movs	r3, #15
 800060a:	402b      	ands	r3, r5
 800060c:	2b04      	cmp	r3, #4
 800060e:	d000      	beq.n	8000612 <__aeabi_fdiv+0x176>
 8000610:	3504      	adds	r5, #4
 8000612:	016b      	lsls	r3, r5, #5
 8000614:	d544      	bpl.n	80006a0 <__aeabi_fdiv+0x204>
 8000616:	2001      	movs	r0, #1
 8000618:	2500      	movs	r5, #0
 800061a:	e79e      	b.n	800055a <__aeabi_fdiv+0xbe>
 800061c:	20ff      	movs	r0, #255	; 0xff
 800061e:	2500      	movs	r5, #0
 8000620:	e79b      	b.n	800055a <__aeabi_fdiv+0xbe>
 8000622:	2580      	movs	r5, #128	; 0x80
 8000624:	2600      	movs	r6, #0
 8000626:	20ff      	movs	r0, #255	; 0xff
 8000628:	03ed      	lsls	r5, r5, #15
 800062a:	e796      	b.n	800055a <__aeabi_fdiv+0xbe>
 800062c:	2300      	movs	r3, #0
 800062e:	4698      	mov	r8, r3
 8000630:	2080      	movs	r0, #128	; 0x80
 8000632:	03c0      	lsls	r0, r0, #15
 8000634:	4205      	tst	r5, r0
 8000636:	d009      	beq.n	800064c <__aeabi_fdiv+0x1b0>
 8000638:	4643      	mov	r3, r8
 800063a:	4203      	tst	r3, r0
 800063c:	d106      	bne.n	800064c <__aeabi_fdiv+0x1b0>
 800063e:	4645      	mov	r5, r8
 8000640:	4305      	orrs	r5, r0
 8000642:	026d      	lsls	r5, r5, #9
 8000644:	0026      	movs	r6, r4
 8000646:	20ff      	movs	r0, #255	; 0xff
 8000648:	0a6d      	lsrs	r5, r5, #9
 800064a:	e786      	b.n	800055a <__aeabi_fdiv+0xbe>
 800064c:	2080      	movs	r0, #128	; 0x80
 800064e:	03c0      	lsls	r0, r0, #15
 8000650:	4305      	orrs	r5, r0
 8000652:	026d      	lsls	r5, r5, #9
 8000654:	20ff      	movs	r0, #255	; 0xff
 8000656:	0a6d      	lsrs	r5, r5, #9
 8000658:	e77f      	b.n	800055a <__aeabi_fdiv+0xbe>
 800065a:	4641      	mov	r1, r8
 800065c:	016a      	lsls	r2, r5, #5
 800065e:	0148      	lsls	r0, r1, #5
 8000660:	4282      	cmp	r2, r0
 8000662:	d219      	bcs.n	8000698 <__aeabi_fdiv+0x1fc>
 8000664:	211b      	movs	r1, #27
 8000666:	2500      	movs	r5, #0
 8000668:	3f01      	subs	r7, #1
 800066a:	2601      	movs	r6, #1
 800066c:	0014      	movs	r4, r2
 800066e:	006d      	lsls	r5, r5, #1
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	2c00      	cmp	r4, #0
 8000674:	db01      	blt.n	800067a <__aeabi_fdiv+0x1de>
 8000676:	4290      	cmp	r0, r2
 8000678:	d801      	bhi.n	800067e <__aeabi_fdiv+0x1e2>
 800067a:	1a12      	subs	r2, r2, r0
 800067c:	4335      	orrs	r5, r6
 800067e:	3901      	subs	r1, #1
 8000680:	2900      	cmp	r1, #0
 8000682:	d1f3      	bne.n	800066c <__aeabi_fdiv+0x1d0>
 8000684:	1e50      	subs	r0, r2, #1
 8000686:	4182      	sbcs	r2, r0
 8000688:	0038      	movs	r0, r7
 800068a:	307f      	adds	r0, #127	; 0x7f
 800068c:	001e      	movs	r6, r3
 800068e:	4315      	orrs	r5, r2
 8000690:	2800      	cmp	r0, #0
 8000692:	dd00      	ble.n	8000696 <__aeabi_fdiv+0x1fa>
 8000694:	e74b      	b.n	800052e <__aeabi_fdiv+0x92>
 8000696:	e7aa      	b.n	80005ee <__aeabi_fdiv+0x152>
 8000698:	211a      	movs	r1, #26
 800069a:	2501      	movs	r5, #1
 800069c:	1a12      	subs	r2, r2, r0
 800069e:	e7e4      	b.n	800066a <__aeabi_fdiv+0x1ce>
 80006a0:	01ad      	lsls	r5, r5, #6
 80006a2:	2000      	movs	r0, #0
 80006a4:	0a6d      	lsrs	r5, r5, #9
 80006a6:	e758      	b.n	800055a <__aeabi_fdiv+0xbe>
 80006a8:	0800b1f8 	.word	0x0800b1f8
 80006ac:	f7ffffff 	.word	0xf7ffffff
 80006b0:	0800b238 	.word	0x0800b238

080006b4 <__aeabi_fmul>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	4657      	mov	r7, sl
 80006b8:	464e      	mov	r6, r9
 80006ba:	4645      	mov	r5, r8
 80006bc:	46de      	mov	lr, fp
 80006be:	0244      	lsls	r4, r0, #9
 80006c0:	b5e0      	push	{r5, r6, r7, lr}
 80006c2:	0045      	lsls	r5, r0, #1
 80006c4:	1c0f      	adds	r7, r1, #0
 80006c6:	0a64      	lsrs	r4, r4, #9
 80006c8:	0e2d      	lsrs	r5, r5, #24
 80006ca:	0fc6      	lsrs	r6, r0, #31
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d047      	beq.n	8000760 <__aeabi_fmul+0xac>
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d04d      	beq.n	8000770 <__aeabi_fmul+0xbc>
 80006d4:	2300      	movs	r3, #0
 80006d6:	2080      	movs	r0, #128	; 0x80
 80006d8:	469a      	mov	sl, r3
 80006da:	469b      	mov	fp, r3
 80006dc:	00e4      	lsls	r4, r4, #3
 80006de:	04c0      	lsls	r0, r0, #19
 80006e0:	4304      	orrs	r4, r0
 80006e2:	3d7f      	subs	r5, #127	; 0x7f
 80006e4:	0278      	lsls	r0, r7, #9
 80006e6:	0a43      	lsrs	r3, r0, #9
 80006e8:	4699      	mov	r9, r3
 80006ea:	007a      	lsls	r2, r7, #1
 80006ec:	0ffb      	lsrs	r3, r7, #31
 80006ee:	4698      	mov	r8, r3
 80006f0:	0e12      	lsrs	r2, r2, #24
 80006f2:	464b      	mov	r3, r9
 80006f4:	d044      	beq.n	8000780 <__aeabi_fmul+0xcc>
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d011      	beq.n	800071e <__aeabi_fmul+0x6a>
 80006fa:	00d8      	lsls	r0, r3, #3
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	04db      	lsls	r3, r3, #19
 8000700:	4303      	orrs	r3, r0
 8000702:	4699      	mov	r9, r3
 8000704:	2000      	movs	r0, #0
 8000706:	3a7f      	subs	r2, #127	; 0x7f
 8000708:	18ad      	adds	r5, r5, r2
 800070a:	4647      	mov	r7, r8
 800070c:	4653      	mov	r3, sl
 800070e:	4077      	eors	r7, r6
 8000710:	1c69      	adds	r1, r5, #1
 8000712:	2b0f      	cmp	r3, #15
 8000714:	d83f      	bhi.n	8000796 <__aeabi_fmul+0xe2>
 8000716:	4a72      	ldr	r2, [pc, #456]	; (80008e0 <__aeabi_fmul+0x22c>)
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	58d3      	ldr	r3, [r2, r3]
 800071c:	469f      	mov	pc, r3
 800071e:	35ff      	adds	r5, #255	; 0xff
 8000720:	2b00      	cmp	r3, #0
 8000722:	d000      	beq.n	8000726 <__aeabi_fmul+0x72>
 8000724:	e079      	b.n	800081a <__aeabi_fmul+0x166>
 8000726:	4652      	mov	r2, sl
 8000728:	2302      	movs	r3, #2
 800072a:	431a      	orrs	r2, r3
 800072c:	4692      	mov	sl, r2
 800072e:	2002      	movs	r0, #2
 8000730:	e7eb      	b.n	800070a <__aeabi_fmul+0x56>
 8000732:	4647      	mov	r7, r8
 8000734:	464c      	mov	r4, r9
 8000736:	4683      	mov	fp, r0
 8000738:	465b      	mov	r3, fp
 800073a:	2b02      	cmp	r3, #2
 800073c:	d028      	beq.n	8000790 <__aeabi_fmul+0xdc>
 800073e:	2b03      	cmp	r3, #3
 8000740:	d100      	bne.n	8000744 <__aeabi_fmul+0x90>
 8000742:	e0c6      	b.n	80008d2 <__aeabi_fmul+0x21e>
 8000744:	2b01      	cmp	r3, #1
 8000746:	d14f      	bne.n	80007e8 <__aeabi_fmul+0x134>
 8000748:	2000      	movs	r0, #0
 800074a:	2400      	movs	r4, #0
 800074c:	05c0      	lsls	r0, r0, #23
 800074e:	07ff      	lsls	r7, r7, #31
 8000750:	4320      	orrs	r0, r4
 8000752:	4338      	orrs	r0, r7
 8000754:	bcf0      	pop	{r4, r5, r6, r7}
 8000756:	46bb      	mov	fp, r7
 8000758:	46b2      	mov	sl, r6
 800075a:	46a9      	mov	r9, r5
 800075c:	46a0      	mov	r8, r4
 800075e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000760:	2c00      	cmp	r4, #0
 8000762:	d171      	bne.n	8000848 <__aeabi_fmul+0x194>
 8000764:	2304      	movs	r3, #4
 8000766:	469a      	mov	sl, r3
 8000768:	3b03      	subs	r3, #3
 800076a:	2500      	movs	r5, #0
 800076c:	469b      	mov	fp, r3
 800076e:	e7b9      	b.n	80006e4 <__aeabi_fmul+0x30>
 8000770:	2c00      	cmp	r4, #0
 8000772:	d163      	bne.n	800083c <__aeabi_fmul+0x188>
 8000774:	2308      	movs	r3, #8
 8000776:	469a      	mov	sl, r3
 8000778:	3b06      	subs	r3, #6
 800077a:	25ff      	movs	r5, #255	; 0xff
 800077c:	469b      	mov	fp, r3
 800077e:	e7b1      	b.n	80006e4 <__aeabi_fmul+0x30>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d150      	bne.n	8000826 <__aeabi_fmul+0x172>
 8000784:	4652      	mov	r2, sl
 8000786:	3301      	adds	r3, #1
 8000788:	431a      	orrs	r2, r3
 800078a:	4692      	mov	sl, r2
 800078c:	2001      	movs	r0, #1
 800078e:	e7bc      	b.n	800070a <__aeabi_fmul+0x56>
 8000790:	20ff      	movs	r0, #255	; 0xff
 8000792:	2400      	movs	r4, #0
 8000794:	e7da      	b.n	800074c <__aeabi_fmul+0x98>
 8000796:	4648      	mov	r0, r9
 8000798:	0c26      	lsrs	r6, r4, #16
 800079a:	0424      	lsls	r4, r4, #16
 800079c:	0c22      	lsrs	r2, r4, #16
 800079e:	0404      	lsls	r4, r0, #16
 80007a0:	0c24      	lsrs	r4, r4, #16
 80007a2:	464b      	mov	r3, r9
 80007a4:	0020      	movs	r0, r4
 80007a6:	0c1b      	lsrs	r3, r3, #16
 80007a8:	4350      	muls	r0, r2
 80007aa:	4374      	muls	r4, r6
 80007ac:	435a      	muls	r2, r3
 80007ae:	435e      	muls	r6, r3
 80007b0:	1912      	adds	r2, r2, r4
 80007b2:	0c03      	lsrs	r3, r0, #16
 80007b4:	189b      	adds	r3, r3, r2
 80007b6:	429c      	cmp	r4, r3
 80007b8:	d903      	bls.n	80007c2 <__aeabi_fmul+0x10e>
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	0252      	lsls	r2, r2, #9
 80007be:	4694      	mov	ip, r2
 80007c0:	4466      	add	r6, ip
 80007c2:	0400      	lsls	r0, r0, #16
 80007c4:	041a      	lsls	r2, r3, #16
 80007c6:	0c00      	lsrs	r0, r0, #16
 80007c8:	1812      	adds	r2, r2, r0
 80007ca:	0194      	lsls	r4, r2, #6
 80007cc:	1e60      	subs	r0, r4, #1
 80007ce:	4184      	sbcs	r4, r0
 80007d0:	0c1b      	lsrs	r3, r3, #16
 80007d2:	0e92      	lsrs	r2, r2, #26
 80007d4:	199b      	adds	r3, r3, r6
 80007d6:	4314      	orrs	r4, r2
 80007d8:	019b      	lsls	r3, r3, #6
 80007da:	431c      	orrs	r4, r3
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	d572      	bpl.n	80008c6 <__aeabi_fmul+0x212>
 80007e0:	2001      	movs	r0, #1
 80007e2:	0863      	lsrs	r3, r4, #1
 80007e4:	4004      	ands	r4, r0
 80007e6:	431c      	orrs	r4, r3
 80007e8:	0008      	movs	r0, r1
 80007ea:	307f      	adds	r0, #127	; 0x7f
 80007ec:	2800      	cmp	r0, #0
 80007ee:	dd3c      	ble.n	800086a <__aeabi_fmul+0x1b6>
 80007f0:	0763      	lsls	r3, r4, #29
 80007f2:	d004      	beq.n	80007fe <__aeabi_fmul+0x14a>
 80007f4:	230f      	movs	r3, #15
 80007f6:	4023      	ands	r3, r4
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d000      	beq.n	80007fe <__aeabi_fmul+0x14a>
 80007fc:	3404      	adds	r4, #4
 80007fe:	0123      	lsls	r3, r4, #4
 8000800:	d503      	bpl.n	800080a <__aeabi_fmul+0x156>
 8000802:	3180      	adds	r1, #128	; 0x80
 8000804:	0008      	movs	r0, r1
 8000806:	4b37      	ldr	r3, [pc, #220]	; (80008e4 <__aeabi_fmul+0x230>)
 8000808:	401c      	ands	r4, r3
 800080a:	28fe      	cmp	r0, #254	; 0xfe
 800080c:	dcc0      	bgt.n	8000790 <__aeabi_fmul+0xdc>
 800080e:	01a4      	lsls	r4, r4, #6
 8000810:	0a64      	lsrs	r4, r4, #9
 8000812:	b2c0      	uxtb	r0, r0
 8000814:	e79a      	b.n	800074c <__aeabi_fmul+0x98>
 8000816:	0037      	movs	r7, r6
 8000818:	e78e      	b.n	8000738 <__aeabi_fmul+0x84>
 800081a:	4652      	mov	r2, sl
 800081c:	2303      	movs	r3, #3
 800081e:	431a      	orrs	r2, r3
 8000820:	4692      	mov	sl, r2
 8000822:	2003      	movs	r0, #3
 8000824:	e771      	b.n	800070a <__aeabi_fmul+0x56>
 8000826:	4648      	mov	r0, r9
 8000828:	f001 ffac 	bl	8002784 <__clzsi2>
 800082c:	464a      	mov	r2, r9
 800082e:	1f43      	subs	r3, r0, #5
 8000830:	409a      	lsls	r2, r3
 8000832:	1a2d      	subs	r5, r5, r0
 8000834:	4691      	mov	r9, r2
 8000836:	2000      	movs	r0, #0
 8000838:	3d76      	subs	r5, #118	; 0x76
 800083a:	e766      	b.n	800070a <__aeabi_fmul+0x56>
 800083c:	230c      	movs	r3, #12
 800083e:	469a      	mov	sl, r3
 8000840:	3b09      	subs	r3, #9
 8000842:	25ff      	movs	r5, #255	; 0xff
 8000844:	469b      	mov	fp, r3
 8000846:	e74d      	b.n	80006e4 <__aeabi_fmul+0x30>
 8000848:	0020      	movs	r0, r4
 800084a:	f001 ff9b 	bl	8002784 <__clzsi2>
 800084e:	2576      	movs	r5, #118	; 0x76
 8000850:	1f43      	subs	r3, r0, #5
 8000852:	409c      	lsls	r4, r3
 8000854:	2300      	movs	r3, #0
 8000856:	426d      	negs	r5, r5
 8000858:	469a      	mov	sl, r3
 800085a:	469b      	mov	fp, r3
 800085c:	1a2d      	subs	r5, r5, r0
 800085e:	e741      	b.n	80006e4 <__aeabi_fmul+0x30>
 8000860:	2480      	movs	r4, #128	; 0x80
 8000862:	2700      	movs	r7, #0
 8000864:	20ff      	movs	r0, #255	; 0xff
 8000866:	03e4      	lsls	r4, r4, #15
 8000868:	e770      	b.n	800074c <__aeabi_fmul+0x98>
 800086a:	2301      	movs	r3, #1
 800086c:	1a1b      	subs	r3, r3, r0
 800086e:	2b1b      	cmp	r3, #27
 8000870:	dd00      	ble.n	8000874 <__aeabi_fmul+0x1c0>
 8000872:	e769      	b.n	8000748 <__aeabi_fmul+0x94>
 8000874:	319e      	adds	r1, #158	; 0x9e
 8000876:	0020      	movs	r0, r4
 8000878:	408c      	lsls	r4, r1
 800087a:	40d8      	lsrs	r0, r3
 800087c:	1e63      	subs	r3, r4, #1
 800087e:	419c      	sbcs	r4, r3
 8000880:	4304      	orrs	r4, r0
 8000882:	0763      	lsls	r3, r4, #29
 8000884:	d004      	beq.n	8000890 <__aeabi_fmul+0x1dc>
 8000886:	230f      	movs	r3, #15
 8000888:	4023      	ands	r3, r4
 800088a:	2b04      	cmp	r3, #4
 800088c:	d000      	beq.n	8000890 <__aeabi_fmul+0x1dc>
 800088e:	3404      	adds	r4, #4
 8000890:	0163      	lsls	r3, r4, #5
 8000892:	d51a      	bpl.n	80008ca <__aeabi_fmul+0x216>
 8000894:	2001      	movs	r0, #1
 8000896:	2400      	movs	r4, #0
 8000898:	e758      	b.n	800074c <__aeabi_fmul+0x98>
 800089a:	2080      	movs	r0, #128	; 0x80
 800089c:	03c0      	lsls	r0, r0, #15
 800089e:	4204      	tst	r4, r0
 80008a0:	d009      	beq.n	80008b6 <__aeabi_fmul+0x202>
 80008a2:	464b      	mov	r3, r9
 80008a4:	4203      	tst	r3, r0
 80008a6:	d106      	bne.n	80008b6 <__aeabi_fmul+0x202>
 80008a8:	464c      	mov	r4, r9
 80008aa:	4304      	orrs	r4, r0
 80008ac:	0264      	lsls	r4, r4, #9
 80008ae:	4647      	mov	r7, r8
 80008b0:	20ff      	movs	r0, #255	; 0xff
 80008b2:	0a64      	lsrs	r4, r4, #9
 80008b4:	e74a      	b.n	800074c <__aeabi_fmul+0x98>
 80008b6:	2080      	movs	r0, #128	; 0x80
 80008b8:	03c0      	lsls	r0, r0, #15
 80008ba:	4304      	orrs	r4, r0
 80008bc:	0264      	lsls	r4, r4, #9
 80008be:	0037      	movs	r7, r6
 80008c0:	20ff      	movs	r0, #255	; 0xff
 80008c2:	0a64      	lsrs	r4, r4, #9
 80008c4:	e742      	b.n	800074c <__aeabi_fmul+0x98>
 80008c6:	0029      	movs	r1, r5
 80008c8:	e78e      	b.n	80007e8 <__aeabi_fmul+0x134>
 80008ca:	01a4      	lsls	r4, r4, #6
 80008cc:	2000      	movs	r0, #0
 80008ce:	0a64      	lsrs	r4, r4, #9
 80008d0:	e73c      	b.n	800074c <__aeabi_fmul+0x98>
 80008d2:	2080      	movs	r0, #128	; 0x80
 80008d4:	03c0      	lsls	r0, r0, #15
 80008d6:	4304      	orrs	r4, r0
 80008d8:	0264      	lsls	r4, r4, #9
 80008da:	20ff      	movs	r0, #255	; 0xff
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	e735      	b.n	800074c <__aeabi_fmul+0x98>
 80008e0:	0800b278 	.word	0x0800b278
 80008e4:	f7ffffff 	.word	0xf7ffffff

080008e8 <__aeabi_f2iz>:
 80008e8:	0241      	lsls	r1, r0, #9
 80008ea:	0042      	lsls	r2, r0, #1
 80008ec:	0fc3      	lsrs	r3, r0, #31
 80008ee:	0a49      	lsrs	r1, r1, #9
 80008f0:	2000      	movs	r0, #0
 80008f2:	0e12      	lsrs	r2, r2, #24
 80008f4:	2a7e      	cmp	r2, #126	; 0x7e
 80008f6:	d903      	bls.n	8000900 <__aeabi_f2iz+0x18>
 80008f8:	2a9d      	cmp	r2, #157	; 0x9d
 80008fa:	d902      	bls.n	8000902 <__aeabi_f2iz+0x1a>
 80008fc:	4a09      	ldr	r2, [pc, #36]	; (8000924 <__aeabi_f2iz+0x3c>)
 80008fe:	1898      	adds	r0, r3, r2
 8000900:	4770      	bx	lr
 8000902:	2080      	movs	r0, #128	; 0x80
 8000904:	0400      	lsls	r0, r0, #16
 8000906:	4301      	orrs	r1, r0
 8000908:	2a95      	cmp	r2, #149	; 0x95
 800090a:	dc07      	bgt.n	800091c <__aeabi_f2iz+0x34>
 800090c:	2096      	movs	r0, #150	; 0x96
 800090e:	1a82      	subs	r2, r0, r2
 8000910:	40d1      	lsrs	r1, r2
 8000912:	4248      	negs	r0, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1f3      	bne.n	8000900 <__aeabi_f2iz+0x18>
 8000918:	0008      	movs	r0, r1
 800091a:	e7f1      	b.n	8000900 <__aeabi_f2iz+0x18>
 800091c:	3a96      	subs	r2, #150	; 0x96
 800091e:	4091      	lsls	r1, r2
 8000920:	e7f7      	b.n	8000912 <__aeabi_f2iz+0x2a>
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	7fffffff 	.word	0x7fffffff

08000928 <__aeabi_i2f>:
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	2800      	cmp	r0, #0
 800092c:	d013      	beq.n	8000956 <__aeabi_i2f+0x2e>
 800092e:	17c3      	asrs	r3, r0, #31
 8000930:	18c5      	adds	r5, r0, r3
 8000932:	405d      	eors	r5, r3
 8000934:	0fc4      	lsrs	r4, r0, #31
 8000936:	0028      	movs	r0, r5
 8000938:	f001 ff24 	bl	8002784 <__clzsi2>
 800093c:	239e      	movs	r3, #158	; 0x9e
 800093e:	0001      	movs	r1, r0
 8000940:	1a1b      	subs	r3, r3, r0
 8000942:	2b96      	cmp	r3, #150	; 0x96
 8000944:	dc0f      	bgt.n	8000966 <__aeabi_i2f+0x3e>
 8000946:	2808      	cmp	r0, #8
 8000948:	dd01      	ble.n	800094e <__aeabi_i2f+0x26>
 800094a:	3908      	subs	r1, #8
 800094c:	408d      	lsls	r5, r1
 800094e:	026d      	lsls	r5, r5, #9
 8000950:	0a6d      	lsrs	r5, r5, #9
 8000952:	b2d8      	uxtb	r0, r3
 8000954:	e002      	b.n	800095c <__aeabi_i2f+0x34>
 8000956:	2400      	movs	r4, #0
 8000958:	2000      	movs	r0, #0
 800095a:	2500      	movs	r5, #0
 800095c:	05c0      	lsls	r0, r0, #23
 800095e:	4328      	orrs	r0, r5
 8000960:	07e4      	lsls	r4, r4, #31
 8000962:	4320      	orrs	r0, r4
 8000964:	bd70      	pop	{r4, r5, r6, pc}
 8000966:	2b99      	cmp	r3, #153	; 0x99
 8000968:	dd0b      	ble.n	8000982 <__aeabi_i2f+0x5a>
 800096a:	2205      	movs	r2, #5
 800096c:	002e      	movs	r6, r5
 800096e:	1a12      	subs	r2, r2, r0
 8000970:	40d6      	lsrs	r6, r2
 8000972:	0002      	movs	r2, r0
 8000974:	321b      	adds	r2, #27
 8000976:	4095      	lsls	r5, r2
 8000978:	0028      	movs	r0, r5
 800097a:	1e45      	subs	r5, r0, #1
 800097c:	41a8      	sbcs	r0, r5
 800097e:	0035      	movs	r5, r6
 8000980:	4305      	orrs	r5, r0
 8000982:	2905      	cmp	r1, #5
 8000984:	dd01      	ble.n	800098a <__aeabi_i2f+0x62>
 8000986:	1f4a      	subs	r2, r1, #5
 8000988:	4095      	lsls	r5, r2
 800098a:	002a      	movs	r2, r5
 800098c:	4e08      	ldr	r6, [pc, #32]	; (80009b0 <__aeabi_i2f+0x88>)
 800098e:	4032      	ands	r2, r6
 8000990:	0768      	lsls	r0, r5, #29
 8000992:	d009      	beq.n	80009a8 <__aeabi_i2f+0x80>
 8000994:	200f      	movs	r0, #15
 8000996:	4028      	ands	r0, r5
 8000998:	2804      	cmp	r0, #4
 800099a:	d005      	beq.n	80009a8 <__aeabi_i2f+0x80>
 800099c:	3204      	adds	r2, #4
 800099e:	0150      	lsls	r0, r2, #5
 80009a0:	d502      	bpl.n	80009a8 <__aeabi_i2f+0x80>
 80009a2:	239f      	movs	r3, #159	; 0x9f
 80009a4:	4032      	ands	r2, r6
 80009a6:	1a5b      	subs	r3, r3, r1
 80009a8:	0192      	lsls	r2, r2, #6
 80009aa:	0a55      	lsrs	r5, r2, #9
 80009ac:	b2d8      	uxtb	r0, r3
 80009ae:	e7d5      	b.n	800095c <__aeabi_i2f+0x34>
 80009b0:	fbffffff 	.word	0xfbffffff

080009b4 <__aeabi_dadd>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	464f      	mov	r7, r9
 80009b8:	46d6      	mov	lr, sl
 80009ba:	4646      	mov	r6, r8
 80009bc:	000d      	movs	r5, r1
 80009be:	0001      	movs	r1, r0
 80009c0:	0018      	movs	r0, r3
 80009c2:	b5c0      	push	{r6, r7, lr}
 80009c4:	0017      	movs	r7, r2
 80009c6:	032b      	lsls	r3, r5, #12
 80009c8:	0a5a      	lsrs	r2, r3, #9
 80009ca:	0f4b      	lsrs	r3, r1, #29
 80009cc:	4313      	orrs	r3, r2
 80009ce:	00ca      	lsls	r2, r1, #3
 80009d0:	4691      	mov	r9, r2
 80009d2:	0302      	lsls	r2, r0, #12
 80009d4:	006e      	lsls	r6, r5, #1
 80009d6:	0041      	lsls	r1, r0, #1
 80009d8:	0a52      	lsrs	r2, r2, #9
 80009da:	0fec      	lsrs	r4, r5, #31
 80009dc:	0f7d      	lsrs	r5, r7, #29
 80009de:	4315      	orrs	r5, r2
 80009e0:	0d76      	lsrs	r6, r6, #21
 80009e2:	0d49      	lsrs	r1, r1, #21
 80009e4:	0fc0      	lsrs	r0, r0, #31
 80009e6:	4682      	mov	sl, r0
 80009e8:	46ac      	mov	ip, r5
 80009ea:	00ff      	lsls	r7, r7, #3
 80009ec:	1a72      	subs	r2, r6, r1
 80009ee:	4284      	cmp	r4, r0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x40>
 80009f2:	e098      	b.n	8000b26 <__aeabi_dadd+0x172>
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_dadd+0x46>
 80009f8:	e081      	b.n	8000afe <__aeabi_dadd+0x14a>
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d100      	bne.n	8000a00 <__aeabi_dadd+0x4c>
 80009fe:	e0b6      	b.n	8000b6e <__aeabi_dadd+0x1ba>
 8000a00:	49c9      	ldr	r1, [pc, #804]	; (8000d28 <__aeabi_dadd+0x374>)
 8000a02:	428e      	cmp	r6, r1
 8000a04:	d100      	bne.n	8000a08 <__aeabi_dadd+0x54>
 8000a06:	e172      	b.n	8000cee <__aeabi_dadd+0x33a>
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0028      	movs	r0, r5
 8000a0c:	0409      	lsls	r1, r1, #16
 8000a0e:	4308      	orrs	r0, r1
 8000a10:	4684      	mov	ip, r0
 8000a12:	2a38      	cmp	r2, #56	; 0x38
 8000a14:	dd00      	ble.n	8000a18 <__aeabi_dadd+0x64>
 8000a16:	e15e      	b.n	8000cd6 <__aeabi_dadd+0x322>
 8000a18:	2a1f      	cmp	r2, #31
 8000a1a:	dd00      	ble.n	8000a1e <__aeabi_dadd+0x6a>
 8000a1c:	e1ee      	b.n	8000dfc <__aeabi_dadd+0x448>
 8000a1e:	2020      	movs	r0, #32
 8000a20:	0039      	movs	r1, r7
 8000a22:	4665      	mov	r5, ip
 8000a24:	1a80      	subs	r0, r0, r2
 8000a26:	4087      	lsls	r7, r0
 8000a28:	40d1      	lsrs	r1, r2
 8000a2a:	4085      	lsls	r5, r0
 8000a2c:	430d      	orrs	r5, r1
 8000a2e:	0039      	movs	r1, r7
 8000a30:	1e4f      	subs	r7, r1, #1
 8000a32:	41b9      	sbcs	r1, r7
 8000a34:	4667      	mov	r7, ip
 8000a36:	40d7      	lsrs	r7, r2
 8000a38:	4329      	orrs	r1, r5
 8000a3a:	1bdb      	subs	r3, r3, r7
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	1a55      	subs	r5, r2, r1
 8000a40:	45a9      	cmp	r9, r5
 8000a42:	4189      	sbcs	r1, r1
 8000a44:	4249      	negs	r1, r1
 8000a46:	1a5b      	subs	r3, r3, r1
 8000a48:	4698      	mov	r8, r3
 8000a4a:	4643      	mov	r3, r8
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	d400      	bmi.n	8000a52 <__aeabi_dadd+0x9e>
 8000a50:	e0cc      	b.n	8000bec <__aeabi_dadd+0x238>
 8000a52:	4643      	mov	r3, r8
 8000a54:	025b      	lsls	r3, r3, #9
 8000a56:	0a5b      	lsrs	r3, r3, #9
 8000a58:	4698      	mov	r8, r3
 8000a5a:	4643      	mov	r3, r8
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_dadd+0xae>
 8000a60:	e12c      	b.n	8000cbc <__aeabi_dadd+0x308>
 8000a62:	4640      	mov	r0, r8
 8000a64:	f001 fe8e 	bl	8002784 <__clzsi2>
 8000a68:	0001      	movs	r1, r0
 8000a6a:	3908      	subs	r1, #8
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	0028      	movs	r0, r5
 8000a70:	4643      	mov	r3, r8
 8000a72:	1a52      	subs	r2, r2, r1
 8000a74:	408b      	lsls	r3, r1
 8000a76:	40d0      	lsrs	r0, r2
 8000a78:	408d      	lsls	r5, r1
 8000a7a:	4303      	orrs	r3, r0
 8000a7c:	428e      	cmp	r6, r1
 8000a7e:	dd00      	ble.n	8000a82 <__aeabi_dadd+0xce>
 8000a80:	e117      	b.n	8000cb2 <__aeabi_dadd+0x2fe>
 8000a82:	1b8e      	subs	r6, r1, r6
 8000a84:	1c72      	adds	r2, r6, #1
 8000a86:	2a1f      	cmp	r2, #31
 8000a88:	dd00      	ble.n	8000a8c <__aeabi_dadd+0xd8>
 8000a8a:	e1a7      	b.n	8000ddc <__aeabi_dadd+0x428>
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	0018      	movs	r0, r3
 8000a90:	002e      	movs	r6, r5
 8000a92:	1a89      	subs	r1, r1, r2
 8000a94:	408d      	lsls	r5, r1
 8000a96:	4088      	lsls	r0, r1
 8000a98:	40d6      	lsrs	r6, r2
 8000a9a:	40d3      	lsrs	r3, r2
 8000a9c:	1e69      	subs	r1, r5, #1
 8000a9e:	418d      	sbcs	r5, r1
 8000aa0:	4330      	orrs	r0, r6
 8000aa2:	4698      	mov	r8, r3
 8000aa4:	2600      	movs	r6, #0
 8000aa6:	4305      	orrs	r5, r0
 8000aa8:	076b      	lsls	r3, r5, #29
 8000aaa:	d009      	beq.n	8000ac0 <__aeabi_dadd+0x10c>
 8000aac:	230f      	movs	r3, #15
 8000aae:	402b      	ands	r3, r5
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	d005      	beq.n	8000ac0 <__aeabi_dadd+0x10c>
 8000ab4:	1d2b      	adds	r3, r5, #4
 8000ab6:	42ab      	cmp	r3, r5
 8000ab8:	41ad      	sbcs	r5, r5
 8000aba:	426d      	negs	r5, r5
 8000abc:	44a8      	add	r8, r5
 8000abe:	001d      	movs	r5, r3
 8000ac0:	4643      	mov	r3, r8
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	d400      	bmi.n	8000ac8 <__aeabi_dadd+0x114>
 8000ac6:	e094      	b.n	8000bf2 <__aeabi_dadd+0x23e>
 8000ac8:	4b97      	ldr	r3, [pc, #604]	; (8000d28 <__aeabi_dadd+0x374>)
 8000aca:	1c72      	adds	r2, r6, #1
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d100      	bne.n	8000ad2 <__aeabi_dadd+0x11e>
 8000ad0:	e09d      	b.n	8000c0e <__aeabi_dadd+0x25a>
 8000ad2:	4641      	mov	r1, r8
 8000ad4:	4b95      	ldr	r3, [pc, #596]	; (8000d2c <__aeabi_dadd+0x378>)
 8000ad6:	08ed      	lsrs	r5, r5, #3
 8000ad8:	4019      	ands	r1, r3
 8000ada:	000b      	movs	r3, r1
 8000adc:	0552      	lsls	r2, r2, #21
 8000ade:	0749      	lsls	r1, r1, #29
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	4329      	orrs	r1, r5
 8000ae4:	0b1b      	lsrs	r3, r3, #12
 8000ae6:	0d52      	lsrs	r2, r2, #21
 8000ae8:	0512      	lsls	r2, r2, #20
 8000aea:	4313      	orrs	r3, r2
 8000aec:	07e4      	lsls	r4, r4, #31
 8000aee:	4323      	orrs	r3, r4
 8000af0:	0008      	movs	r0, r1
 8000af2:	0019      	movs	r1, r3
 8000af4:	bce0      	pop	{r5, r6, r7}
 8000af6:	46ba      	mov	sl, r7
 8000af8:	46b1      	mov	r9, r6
 8000afa:	46a8      	mov	r8, r5
 8000afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d043      	beq.n	8000b8a <__aeabi_dadd+0x1d6>
 8000b02:	1b8a      	subs	r2, r1, r6
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x156>
 8000b08:	e12a      	b.n	8000d60 <__aeabi_dadd+0x3ac>
 8000b0a:	464c      	mov	r4, r9
 8000b0c:	431c      	orrs	r4, r3
 8000b0e:	d100      	bne.n	8000b12 <__aeabi_dadd+0x15e>
 8000b10:	e1d1      	b.n	8000eb6 <__aeabi_dadd+0x502>
 8000b12:	1e54      	subs	r4, r2, #1
 8000b14:	2a01      	cmp	r2, #1
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x166>
 8000b18:	e21f      	b.n	8000f5a <__aeabi_dadd+0x5a6>
 8000b1a:	4d83      	ldr	r5, [pc, #524]	; (8000d28 <__aeabi_dadd+0x374>)
 8000b1c:	42aa      	cmp	r2, r5
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x16e>
 8000b20:	e272      	b.n	8001008 <__aeabi_dadd+0x654>
 8000b22:	0022      	movs	r2, r4
 8000b24:	e123      	b.n	8000d6e <__aeabi_dadd+0x3ba>
 8000b26:	2a00      	cmp	r2, #0
 8000b28:	dc00      	bgt.n	8000b2c <__aeabi_dadd+0x178>
 8000b2a:	e098      	b.n	8000c5e <__aeabi_dadd+0x2aa>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	d042      	beq.n	8000bb6 <__aeabi_dadd+0x202>
 8000b30:	497d      	ldr	r1, [pc, #500]	; (8000d28 <__aeabi_dadd+0x374>)
 8000b32:	428e      	cmp	r6, r1
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x184>
 8000b36:	e0da      	b.n	8000cee <__aeabi_dadd+0x33a>
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	0028      	movs	r0, r5
 8000b3c:	0409      	lsls	r1, r1, #16
 8000b3e:	4308      	orrs	r0, r1
 8000b40:	4684      	mov	ip, r0
 8000b42:	2a38      	cmp	r2, #56	; 0x38
 8000b44:	dd00      	ble.n	8000b48 <__aeabi_dadd+0x194>
 8000b46:	e129      	b.n	8000d9c <__aeabi_dadd+0x3e8>
 8000b48:	2a1f      	cmp	r2, #31
 8000b4a:	dc00      	bgt.n	8000b4e <__aeabi_dadd+0x19a>
 8000b4c:	e187      	b.n	8000e5e <__aeabi_dadd+0x4aa>
 8000b4e:	0011      	movs	r1, r2
 8000b50:	4665      	mov	r5, ip
 8000b52:	3920      	subs	r1, #32
 8000b54:	40cd      	lsrs	r5, r1
 8000b56:	2a20      	cmp	r2, #32
 8000b58:	d004      	beq.n	8000b64 <__aeabi_dadd+0x1b0>
 8000b5a:	2040      	movs	r0, #64	; 0x40
 8000b5c:	4661      	mov	r1, ip
 8000b5e:	1a82      	subs	r2, r0, r2
 8000b60:	4091      	lsls	r1, r2
 8000b62:	430f      	orrs	r7, r1
 8000b64:	0039      	movs	r1, r7
 8000b66:	1e4f      	subs	r7, r1, #1
 8000b68:	41b9      	sbcs	r1, r7
 8000b6a:	430d      	orrs	r5, r1
 8000b6c:	e11b      	b.n	8000da6 <__aeabi_dadd+0x3f2>
 8000b6e:	0029      	movs	r1, r5
 8000b70:	4339      	orrs	r1, r7
 8000b72:	d100      	bne.n	8000b76 <__aeabi_dadd+0x1c2>
 8000b74:	e0b5      	b.n	8000ce2 <__aeabi_dadd+0x32e>
 8000b76:	1e51      	subs	r1, r2, #1
 8000b78:	2a01      	cmp	r2, #1
 8000b7a:	d100      	bne.n	8000b7e <__aeabi_dadd+0x1ca>
 8000b7c:	e1ab      	b.n	8000ed6 <__aeabi_dadd+0x522>
 8000b7e:	486a      	ldr	r0, [pc, #424]	; (8000d28 <__aeabi_dadd+0x374>)
 8000b80:	4282      	cmp	r2, r0
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x1d2>
 8000b84:	e1b2      	b.n	8000eec <__aeabi_dadd+0x538>
 8000b86:	000a      	movs	r2, r1
 8000b88:	e743      	b.n	8000a12 <__aeabi_dadd+0x5e>
 8000b8a:	4969      	ldr	r1, [pc, #420]	; (8000d30 <__aeabi_dadd+0x37c>)
 8000b8c:	1c75      	adds	r5, r6, #1
 8000b8e:	420d      	tst	r5, r1
 8000b90:	d000      	beq.n	8000b94 <__aeabi_dadd+0x1e0>
 8000b92:	e0cf      	b.n	8000d34 <__aeabi_dadd+0x380>
 8000b94:	2e00      	cmp	r6, #0
 8000b96:	d000      	beq.n	8000b9a <__aeabi_dadd+0x1e6>
 8000b98:	e193      	b.n	8000ec2 <__aeabi_dadd+0x50e>
 8000b9a:	4649      	mov	r1, r9
 8000b9c:	4319      	orrs	r1, r3
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x1ee>
 8000ba0:	e1d1      	b.n	8000f46 <__aeabi_dadd+0x592>
 8000ba2:	4661      	mov	r1, ip
 8000ba4:	4339      	orrs	r1, r7
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dadd+0x1f6>
 8000ba8:	e1e3      	b.n	8000f72 <__aeabi_dadd+0x5be>
 8000baa:	4649      	mov	r1, r9
 8000bac:	0758      	lsls	r0, r3, #29
 8000bae:	08c9      	lsrs	r1, r1, #3
 8000bb0:	4301      	orrs	r1, r0
 8000bb2:	08db      	lsrs	r3, r3, #3
 8000bb4:	e026      	b.n	8000c04 <__aeabi_dadd+0x250>
 8000bb6:	0029      	movs	r1, r5
 8000bb8:	4339      	orrs	r1, r7
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x20a>
 8000bbc:	e091      	b.n	8000ce2 <__aeabi_dadd+0x32e>
 8000bbe:	1e51      	subs	r1, r2, #1
 8000bc0:	2a01      	cmp	r2, #1
 8000bc2:	d005      	beq.n	8000bd0 <__aeabi_dadd+0x21c>
 8000bc4:	4858      	ldr	r0, [pc, #352]	; (8000d28 <__aeabi_dadd+0x374>)
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_dadd+0x218>
 8000bca:	e18f      	b.n	8000eec <__aeabi_dadd+0x538>
 8000bcc:	000a      	movs	r2, r1
 8000bce:	e7b8      	b.n	8000b42 <__aeabi_dadd+0x18e>
 8000bd0:	003d      	movs	r5, r7
 8000bd2:	444d      	add	r5, r9
 8000bd4:	454d      	cmp	r5, r9
 8000bd6:	4189      	sbcs	r1, r1
 8000bd8:	4463      	add	r3, ip
 8000bda:	4698      	mov	r8, r3
 8000bdc:	4249      	negs	r1, r1
 8000bde:	4488      	add	r8, r1
 8000be0:	4643      	mov	r3, r8
 8000be2:	2602      	movs	r6, #2
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	d500      	bpl.n	8000bea <__aeabi_dadd+0x236>
 8000be8:	e0eb      	b.n	8000dc2 <__aeabi_dadd+0x40e>
 8000bea:	3e01      	subs	r6, #1
 8000bec:	076b      	lsls	r3, r5, #29
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_dadd+0x23e>
 8000bf0:	e75c      	b.n	8000aac <__aeabi_dadd+0xf8>
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	08e9      	lsrs	r1, r5, #3
 8000bf6:	075a      	lsls	r2, r3, #29
 8000bf8:	4311      	orrs	r1, r2
 8000bfa:	0032      	movs	r2, r6
 8000bfc:	08db      	lsrs	r3, r3, #3
 8000bfe:	484a      	ldr	r0, [pc, #296]	; (8000d28 <__aeabi_dadd+0x374>)
 8000c00:	4282      	cmp	r2, r0
 8000c02:	d021      	beq.n	8000c48 <__aeabi_dadd+0x294>
 8000c04:	031b      	lsls	r3, r3, #12
 8000c06:	0552      	lsls	r2, r2, #21
 8000c08:	0b1b      	lsrs	r3, r3, #12
 8000c0a:	0d52      	lsrs	r2, r2, #21
 8000c0c:	e76c      	b.n	8000ae8 <__aeabi_dadd+0x134>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	e769      	b.n	8000ae8 <__aeabi_dadd+0x134>
 8000c14:	002a      	movs	r2, r5
 8000c16:	433a      	orrs	r2, r7
 8000c18:	d069      	beq.n	8000cee <__aeabi_dadd+0x33a>
 8000c1a:	464a      	mov	r2, r9
 8000c1c:	0758      	lsls	r0, r3, #29
 8000c1e:	08d1      	lsrs	r1, r2, #3
 8000c20:	08da      	lsrs	r2, r3, #3
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	031b      	lsls	r3, r3, #12
 8000c26:	4308      	orrs	r0, r1
 8000c28:	421a      	tst	r2, r3
 8000c2a:	d007      	beq.n	8000c3c <__aeabi_dadd+0x288>
 8000c2c:	0029      	movs	r1, r5
 8000c2e:	08ed      	lsrs	r5, r5, #3
 8000c30:	421d      	tst	r5, r3
 8000c32:	d103      	bne.n	8000c3c <__aeabi_dadd+0x288>
 8000c34:	002a      	movs	r2, r5
 8000c36:	08ff      	lsrs	r7, r7, #3
 8000c38:	0748      	lsls	r0, r1, #29
 8000c3a:	4338      	orrs	r0, r7
 8000c3c:	0f43      	lsrs	r3, r0, #29
 8000c3e:	00c1      	lsls	r1, r0, #3
 8000c40:	075b      	lsls	r3, r3, #29
 8000c42:	08c9      	lsrs	r1, r1, #3
 8000c44:	4319      	orrs	r1, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	000a      	movs	r2, r1
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_dadd+0x29c>
 8000c4e:	e213      	b.n	8001078 <__aeabi_dadd+0x6c4>
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	0312      	lsls	r2, r2, #12
 8000c54:	4313      	orrs	r3, r2
 8000c56:	031b      	lsls	r3, r3, #12
 8000c58:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <__aeabi_dadd+0x374>)
 8000c5a:	0b1b      	lsrs	r3, r3, #12
 8000c5c:	e744      	b.n	8000ae8 <__aeabi_dadd+0x134>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d04b      	beq.n	8000cfa <__aeabi_dadd+0x346>
 8000c62:	1b8a      	subs	r2, r1, r6
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x2b6>
 8000c68:	e0e7      	b.n	8000e3a <__aeabi_dadd+0x486>
 8000c6a:	482f      	ldr	r0, [pc, #188]	; (8000d28 <__aeabi_dadd+0x374>)
 8000c6c:	4281      	cmp	r1, r0
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x2be>
 8000c70:	e195      	b.n	8000f9e <__aeabi_dadd+0x5ea>
 8000c72:	2080      	movs	r0, #128	; 0x80
 8000c74:	0400      	lsls	r0, r0, #16
 8000c76:	4303      	orrs	r3, r0
 8000c78:	2a38      	cmp	r2, #56	; 0x38
 8000c7a:	dd00      	ble.n	8000c7e <__aeabi_dadd+0x2ca>
 8000c7c:	e143      	b.n	8000f06 <__aeabi_dadd+0x552>
 8000c7e:	2a1f      	cmp	r2, #31
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_dadd+0x2d0>
 8000c82:	e1db      	b.n	800103c <__aeabi_dadd+0x688>
 8000c84:	2020      	movs	r0, #32
 8000c86:	001d      	movs	r5, r3
 8000c88:	464e      	mov	r6, r9
 8000c8a:	1a80      	subs	r0, r0, r2
 8000c8c:	4085      	lsls	r5, r0
 8000c8e:	40d6      	lsrs	r6, r2
 8000c90:	4335      	orrs	r5, r6
 8000c92:	464e      	mov	r6, r9
 8000c94:	4086      	lsls	r6, r0
 8000c96:	0030      	movs	r0, r6
 8000c98:	40d3      	lsrs	r3, r2
 8000c9a:	1e46      	subs	r6, r0, #1
 8000c9c:	41b0      	sbcs	r0, r6
 8000c9e:	449c      	add	ip, r3
 8000ca0:	4305      	orrs	r5, r0
 8000ca2:	19ed      	adds	r5, r5, r7
 8000ca4:	42bd      	cmp	r5, r7
 8000ca6:	419b      	sbcs	r3, r3
 8000ca8:	425b      	negs	r3, r3
 8000caa:	4463      	add	r3, ip
 8000cac:	4698      	mov	r8, r3
 8000cae:	000e      	movs	r6, r1
 8000cb0:	e07f      	b.n	8000db2 <__aeabi_dadd+0x3fe>
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <__aeabi_dadd+0x378>)
 8000cb4:	1a76      	subs	r6, r6, r1
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	4698      	mov	r8, r3
 8000cba:	e6f5      	b.n	8000aa8 <__aeabi_dadd+0xf4>
 8000cbc:	0028      	movs	r0, r5
 8000cbe:	f001 fd61 	bl	8002784 <__clzsi2>
 8000cc2:	0001      	movs	r1, r0
 8000cc4:	3118      	adds	r1, #24
 8000cc6:	291f      	cmp	r1, #31
 8000cc8:	dc00      	bgt.n	8000ccc <__aeabi_dadd+0x318>
 8000cca:	e6cf      	b.n	8000a6c <__aeabi_dadd+0xb8>
 8000ccc:	002b      	movs	r3, r5
 8000cce:	3808      	subs	r0, #8
 8000cd0:	4083      	lsls	r3, r0
 8000cd2:	2500      	movs	r5, #0
 8000cd4:	e6d2      	b.n	8000a7c <__aeabi_dadd+0xc8>
 8000cd6:	4662      	mov	r2, ip
 8000cd8:	433a      	orrs	r2, r7
 8000cda:	0011      	movs	r1, r2
 8000cdc:	1e4f      	subs	r7, r1, #1
 8000cde:	41b9      	sbcs	r1, r7
 8000ce0:	e6ac      	b.n	8000a3c <__aeabi_dadd+0x88>
 8000ce2:	4649      	mov	r1, r9
 8000ce4:	0758      	lsls	r0, r3, #29
 8000ce6:	08c9      	lsrs	r1, r1, #3
 8000ce8:	4301      	orrs	r1, r0
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	e787      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8000cee:	4649      	mov	r1, r9
 8000cf0:	075a      	lsls	r2, r3, #29
 8000cf2:	08c9      	lsrs	r1, r1, #3
 8000cf4:	4311      	orrs	r1, r2
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	e7a6      	b.n	8000c48 <__aeabi_dadd+0x294>
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <__aeabi_dadd+0x37c>)
 8000cfc:	1c70      	adds	r0, r6, #1
 8000cfe:	4208      	tst	r0, r1
 8000d00:	d000      	beq.n	8000d04 <__aeabi_dadd+0x350>
 8000d02:	e0bb      	b.n	8000e7c <__aeabi_dadd+0x4c8>
 8000d04:	2e00      	cmp	r6, #0
 8000d06:	d000      	beq.n	8000d0a <__aeabi_dadd+0x356>
 8000d08:	e114      	b.n	8000f34 <__aeabi_dadd+0x580>
 8000d0a:	4649      	mov	r1, r9
 8000d0c:	4319      	orrs	r1, r3
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_dadd+0x35e>
 8000d10:	e175      	b.n	8000ffe <__aeabi_dadd+0x64a>
 8000d12:	0029      	movs	r1, r5
 8000d14:	4339      	orrs	r1, r7
 8000d16:	d000      	beq.n	8000d1a <__aeabi_dadd+0x366>
 8000d18:	e17e      	b.n	8001018 <__aeabi_dadd+0x664>
 8000d1a:	4649      	mov	r1, r9
 8000d1c:	0758      	lsls	r0, r3, #29
 8000d1e:	08c9      	lsrs	r1, r1, #3
 8000d20:	4301      	orrs	r1, r0
 8000d22:	08db      	lsrs	r3, r3, #3
 8000d24:	e76e      	b.n	8000c04 <__aeabi_dadd+0x250>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	000007ff 	.word	0x000007ff
 8000d2c:	ff7fffff 	.word	0xff7fffff
 8000d30:	000007fe 	.word	0x000007fe
 8000d34:	4649      	mov	r1, r9
 8000d36:	1bcd      	subs	r5, r1, r7
 8000d38:	4661      	mov	r1, ip
 8000d3a:	1a58      	subs	r0, r3, r1
 8000d3c:	45a9      	cmp	r9, r5
 8000d3e:	4189      	sbcs	r1, r1
 8000d40:	4249      	negs	r1, r1
 8000d42:	4688      	mov	r8, r1
 8000d44:	0001      	movs	r1, r0
 8000d46:	4640      	mov	r0, r8
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	4688      	mov	r8, r1
 8000d4c:	0209      	lsls	r1, r1, #8
 8000d4e:	d500      	bpl.n	8000d52 <__aeabi_dadd+0x39e>
 8000d50:	e0a6      	b.n	8000ea0 <__aeabi_dadd+0x4ec>
 8000d52:	4641      	mov	r1, r8
 8000d54:	4329      	orrs	r1, r5
 8000d56:	d000      	beq.n	8000d5a <__aeabi_dadd+0x3a6>
 8000d58:	e67f      	b.n	8000a5a <__aeabi_dadd+0xa6>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2400      	movs	r4, #0
 8000d5e:	e751      	b.n	8000c04 <__aeabi_dadd+0x250>
 8000d60:	4cc7      	ldr	r4, [pc, #796]	; (8001080 <__aeabi_dadd+0x6cc>)
 8000d62:	42a1      	cmp	r1, r4
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x3b4>
 8000d66:	e0c7      	b.n	8000ef8 <__aeabi_dadd+0x544>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	0424      	lsls	r4, r4, #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	2a38      	cmp	r2, #56	; 0x38
 8000d70:	dc54      	bgt.n	8000e1c <__aeabi_dadd+0x468>
 8000d72:	2a1f      	cmp	r2, #31
 8000d74:	dd00      	ble.n	8000d78 <__aeabi_dadd+0x3c4>
 8000d76:	e0cc      	b.n	8000f12 <__aeabi_dadd+0x55e>
 8000d78:	2420      	movs	r4, #32
 8000d7a:	4648      	mov	r0, r9
 8000d7c:	1aa4      	subs	r4, r4, r2
 8000d7e:	001d      	movs	r5, r3
 8000d80:	464e      	mov	r6, r9
 8000d82:	40a0      	lsls	r0, r4
 8000d84:	40d6      	lsrs	r6, r2
 8000d86:	40a5      	lsls	r5, r4
 8000d88:	0004      	movs	r4, r0
 8000d8a:	40d3      	lsrs	r3, r2
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	4335      	orrs	r5, r6
 8000d90:	1e66      	subs	r6, r4, #1
 8000d92:	41b4      	sbcs	r4, r6
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	469c      	mov	ip, r3
 8000d98:	4325      	orrs	r5, r4
 8000d9a:	e044      	b.n	8000e26 <__aeabi_dadd+0x472>
 8000d9c:	4662      	mov	r2, ip
 8000d9e:	433a      	orrs	r2, r7
 8000da0:	0015      	movs	r5, r2
 8000da2:	1e6f      	subs	r7, r5, #1
 8000da4:	41bd      	sbcs	r5, r7
 8000da6:	444d      	add	r5, r9
 8000da8:	454d      	cmp	r5, r9
 8000daa:	4189      	sbcs	r1, r1
 8000dac:	4249      	negs	r1, r1
 8000dae:	4688      	mov	r8, r1
 8000db0:	4498      	add	r8, r3
 8000db2:	4643      	mov	r3, r8
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	d400      	bmi.n	8000dba <__aeabi_dadd+0x406>
 8000db8:	e718      	b.n	8000bec <__aeabi_dadd+0x238>
 8000dba:	4bb1      	ldr	r3, [pc, #708]	; (8001080 <__aeabi_dadd+0x6cc>)
 8000dbc:	3601      	adds	r6, #1
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d049      	beq.n	8000e56 <__aeabi_dadd+0x4a2>
 8000dc2:	4642      	mov	r2, r8
 8000dc4:	4baf      	ldr	r3, [pc, #700]	; (8001084 <__aeabi_dadd+0x6d0>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	401a      	ands	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	086a      	lsrs	r2, r5, #1
 8000dce:	400d      	ands	r5, r1
 8000dd0:	4315      	orrs	r5, r2
 8000dd2:	07d9      	lsls	r1, r3, #31
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	4698      	mov	r8, r3
 8000dd8:	430d      	orrs	r5, r1
 8000dda:	e665      	b.n	8000aa8 <__aeabi_dadd+0xf4>
 8000ddc:	0018      	movs	r0, r3
 8000dde:	3e1f      	subs	r6, #31
 8000de0:	40f0      	lsrs	r0, r6
 8000de2:	2a20      	cmp	r2, #32
 8000de4:	d003      	beq.n	8000dee <__aeabi_dadd+0x43a>
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	4093      	lsls	r3, r2
 8000dec:	431d      	orrs	r5, r3
 8000dee:	1e69      	subs	r1, r5, #1
 8000df0:	418d      	sbcs	r5, r1
 8000df2:	2300      	movs	r3, #0
 8000df4:	2600      	movs	r6, #0
 8000df6:	4698      	mov	r8, r3
 8000df8:	4305      	orrs	r5, r0
 8000dfa:	e6f7      	b.n	8000bec <__aeabi_dadd+0x238>
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	4665      	mov	r5, ip
 8000e00:	3920      	subs	r1, #32
 8000e02:	40cd      	lsrs	r5, r1
 8000e04:	2a20      	cmp	r2, #32
 8000e06:	d004      	beq.n	8000e12 <__aeabi_dadd+0x45e>
 8000e08:	2040      	movs	r0, #64	; 0x40
 8000e0a:	4661      	mov	r1, ip
 8000e0c:	1a82      	subs	r2, r0, r2
 8000e0e:	4091      	lsls	r1, r2
 8000e10:	430f      	orrs	r7, r1
 8000e12:	0039      	movs	r1, r7
 8000e14:	1e4f      	subs	r7, r1, #1
 8000e16:	41b9      	sbcs	r1, r7
 8000e18:	4329      	orrs	r1, r5
 8000e1a:	e60f      	b.n	8000a3c <__aeabi_dadd+0x88>
 8000e1c:	464a      	mov	r2, r9
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	001d      	movs	r5, r3
 8000e22:	1e6b      	subs	r3, r5, #1
 8000e24:	419d      	sbcs	r5, r3
 8000e26:	1b7d      	subs	r5, r7, r5
 8000e28:	42af      	cmp	r7, r5
 8000e2a:	419b      	sbcs	r3, r3
 8000e2c:	4662      	mov	r2, ip
 8000e2e:	425b      	negs	r3, r3
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	4698      	mov	r8, r3
 8000e34:	4654      	mov	r4, sl
 8000e36:	000e      	movs	r6, r1
 8000e38:	e607      	b.n	8000a4a <__aeabi_dadd+0x96>
 8000e3a:	4648      	mov	r0, r9
 8000e3c:	4318      	orrs	r0, r3
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dadd+0x48e>
 8000e40:	e0b3      	b.n	8000faa <__aeabi_dadd+0x5f6>
 8000e42:	1e50      	subs	r0, r2, #1
 8000e44:	2a01      	cmp	r2, #1
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dadd+0x496>
 8000e48:	e10d      	b.n	8001066 <__aeabi_dadd+0x6b2>
 8000e4a:	4d8d      	ldr	r5, [pc, #564]	; (8001080 <__aeabi_dadd+0x6cc>)
 8000e4c:	42aa      	cmp	r2, r5
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dadd+0x49e>
 8000e50:	e0a5      	b.n	8000f9e <__aeabi_dadd+0x5ea>
 8000e52:	0002      	movs	r2, r0
 8000e54:	e710      	b.n	8000c78 <__aeabi_dadd+0x2c4>
 8000e56:	0032      	movs	r2, r6
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	e644      	b.n	8000ae8 <__aeabi_dadd+0x134>
 8000e5e:	2120      	movs	r1, #32
 8000e60:	0038      	movs	r0, r7
 8000e62:	1a89      	subs	r1, r1, r2
 8000e64:	4665      	mov	r5, ip
 8000e66:	408f      	lsls	r7, r1
 8000e68:	408d      	lsls	r5, r1
 8000e6a:	40d0      	lsrs	r0, r2
 8000e6c:	1e79      	subs	r1, r7, #1
 8000e6e:	418f      	sbcs	r7, r1
 8000e70:	4305      	orrs	r5, r0
 8000e72:	433d      	orrs	r5, r7
 8000e74:	4667      	mov	r7, ip
 8000e76:	40d7      	lsrs	r7, r2
 8000e78:	19db      	adds	r3, r3, r7
 8000e7a:	e794      	b.n	8000da6 <__aeabi_dadd+0x3f2>
 8000e7c:	4a80      	ldr	r2, [pc, #512]	; (8001080 <__aeabi_dadd+0x6cc>)
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dadd+0x4d0>
 8000e82:	e0ec      	b.n	800105e <__aeabi_dadd+0x6aa>
 8000e84:	0039      	movs	r1, r7
 8000e86:	4449      	add	r1, r9
 8000e88:	4549      	cmp	r1, r9
 8000e8a:	4192      	sbcs	r2, r2
 8000e8c:	4463      	add	r3, ip
 8000e8e:	4252      	negs	r2, r2
 8000e90:	189b      	adds	r3, r3, r2
 8000e92:	07dd      	lsls	r5, r3, #31
 8000e94:	0849      	lsrs	r1, r1, #1
 8000e96:	085b      	lsrs	r3, r3, #1
 8000e98:	4698      	mov	r8, r3
 8000e9a:	0006      	movs	r6, r0
 8000e9c:	430d      	orrs	r5, r1
 8000e9e:	e6a5      	b.n	8000bec <__aeabi_dadd+0x238>
 8000ea0:	464a      	mov	r2, r9
 8000ea2:	1abd      	subs	r5, r7, r2
 8000ea4:	42af      	cmp	r7, r5
 8000ea6:	4189      	sbcs	r1, r1
 8000ea8:	4662      	mov	r2, ip
 8000eaa:	4249      	negs	r1, r1
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	1a5b      	subs	r3, r3, r1
 8000eb0:	4698      	mov	r8, r3
 8000eb2:	4654      	mov	r4, sl
 8000eb4:	e5d1      	b.n	8000a5a <__aeabi_dadd+0xa6>
 8000eb6:	076c      	lsls	r4, r5, #29
 8000eb8:	08f9      	lsrs	r1, r7, #3
 8000eba:	4321      	orrs	r1, r4
 8000ebc:	08eb      	lsrs	r3, r5, #3
 8000ebe:	0004      	movs	r4, r0
 8000ec0:	e69d      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8000ec2:	464a      	mov	r2, r9
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	d175      	bne.n	8000fb4 <__aeabi_dadd+0x600>
 8000ec8:	4661      	mov	r1, ip
 8000eca:	4339      	orrs	r1, r7
 8000ecc:	d114      	bne.n	8000ef8 <__aeabi_dadd+0x544>
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	031b      	lsls	r3, r3, #12
 8000ed4:	e6bc      	b.n	8000c50 <__aeabi_dadd+0x29c>
 8000ed6:	464a      	mov	r2, r9
 8000ed8:	1bd5      	subs	r5, r2, r7
 8000eda:	45a9      	cmp	r9, r5
 8000edc:	4189      	sbcs	r1, r1
 8000ede:	4662      	mov	r2, ip
 8000ee0:	4249      	negs	r1, r1
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	4698      	mov	r8, r3
 8000ee8:	2601      	movs	r6, #1
 8000eea:	e5ae      	b.n	8000a4a <__aeabi_dadd+0x96>
 8000eec:	464a      	mov	r2, r9
 8000eee:	08d1      	lsrs	r1, r2, #3
 8000ef0:	075a      	lsls	r2, r3, #29
 8000ef2:	4311      	orrs	r1, r2
 8000ef4:	08db      	lsrs	r3, r3, #3
 8000ef6:	e6a7      	b.n	8000c48 <__aeabi_dadd+0x294>
 8000ef8:	4663      	mov	r3, ip
 8000efa:	08f9      	lsrs	r1, r7, #3
 8000efc:	075a      	lsls	r2, r3, #29
 8000efe:	4654      	mov	r4, sl
 8000f00:	4311      	orrs	r1, r2
 8000f02:	08db      	lsrs	r3, r3, #3
 8000f04:	e6a0      	b.n	8000c48 <__aeabi_dadd+0x294>
 8000f06:	464a      	mov	r2, r9
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	001d      	movs	r5, r3
 8000f0c:	1e6b      	subs	r3, r5, #1
 8000f0e:	419d      	sbcs	r5, r3
 8000f10:	e6c7      	b.n	8000ca2 <__aeabi_dadd+0x2ee>
 8000f12:	0014      	movs	r4, r2
 8000f14:	001e      	movs	r6, r3
 8000f16:	3c20      	subs	r4, #32
 8000f18:	40e6      	lsrs	r6, r4
 8000f1a:	2a20      	cmp	r2, #32
 8000f1c:	d005      	beq.n	8000f2a <__aeabi_dadd+0x576>
 8000f1e:	2440      	movs	r4, #64	; 0x40
 8000f20:	1aa2      	subs	r2, r4, r2
 8000f22:	4093      	lsls	r3, r2
 8000f24:	464a      	mov	r2, r9
 8000f26:	431a      	orrs	r2, r3
 8000f28:	4691      	mov	r9, r2
 8000f2a:	464d      	mov	r5, r9
 8000f2c:	1e6b      	subs	r3, r5, #1
 8000f2e:	419d      	sbcs	r5, r3
 8000f30:	4335      	orrs	r5, r6
 8000f32:	e778      	b.n	8000e26 <__aeabi_dadd+0x472>
 8000f34:	464a      	mov	r2, r9
 8000f36:	431a      	orrs	r2, r3
 8000f38:	d000      	beq.n	8000f3c <__aeabi_dadd+0x588>
 8000f3a:	e66b      	b.n	8000c14 <__aeabi_dadd+0x260>
 8000f3c:	076b      	lsls	r3, r5, #29
 8000f3e:	08f9      	lsrs	r1, r7, #3
 8000f40:	4319      	orrs	r1, r3
 8000f42:	08eb      	lsrs	r3, r5, #3
 8000f44:	e680      	b.n	8000c48 <__aeabi_dadd+0x294>
 8000f46:	4661      	mov	r1, ip
 8000f48:	4339      	orrs	r1, r7
 8000f4a:	d054      	beq.n	8000ff6 <__aeabi_dadd+0x642>
 8000f4c:	4663      	mov	r3, ip
 8000f4e:	08f9      	lsrs	r1, r7, #3
 8000f50:	075c      	lsls	r4, r3, #29
 8000f52:	4321      	orrs	r1, r4
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	0004      	movs	r4, r0
 8000f58:	e654      	b.n	8000c04 <__aeabi_dadd+0x250>
 8000f5a:	464a      	mov	r2, r9
 8000f5c:	1abd      	subs	r5, r7, r2
 8000f5e:	42af      	cmp	r7, r5
 8000f60:	4189      	sbcs	r1, r1
 8000f62:	4662      	mov	r2, ip
 8000f64:	4249      	negs	r1, r1
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	1a5b      	subs	r3, r3, r1
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	0004      	movs	r4, r0
 8000f6e:	2601      	movs	r6, #1
 8000f70:	e56b      	b.n	8000a4a <__aeabi_dadd+0x96>
 8000f72:	464a      	mov	r2, r9
 8000f74:	1bd5      	subs	r5, r2, r7
 8000f76:	45a9      	cmp	r9, r5
 8000f78:	4189      	sbcs	r1, r1
 8000f7a:	4662      	mov	r2, ip
 8000f7c:	4249      	negs	r1, r1
 8000f7e:	1a9a      	subs	r2, r3, r2
 8000f80:	1a52      	subs	r2, r2, r1
 8000f82:	4690      	mov	r8, r2
 8000f84:	0212      	lsls	r2, r2, #8
 8000f86:	d532      	bpl.n	8000fee <__aeabi_dadd+0x63a>
 8000f88:	464a      	mov	r2, r9
 8000f8a:	1abd      	subs	r5, r7, r2
 8000f8c:	42af      	cmp	r7, r5
 8000f8e:	4189      	sbcs	r1, r1
 8000f90:	4662      	mov	r2, ip
 8000f92:	4249      	negs	r1, r1
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	1a5b      	subs	r3, r3, r1
 8000f98:	4698      	mov	r8, r3
 8000f9a:	0004      	movs	r4, r0
 8000f9c:	e584      	b.n	8000aa8 <__aeabi_dadd+0xf4>
 8000f9e:	4663      	mov	r3, ip
 8000fa0:	08f9      	lsrs	r1, r7, #3
 8000fa2:	075a      	lsls	r2, r3, #29
 8000fa4:	4311      	orrs	r1, r2
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	e64e      	b.n	8000c48 <__aeabi_dadd+0x294>
 8000faa:	08f9      	lsrs	r1, r7, #3
 8000fac:	0768      	lsls	r0, r5, #29
 8000fae:	4301      	orrs	r1, r0
 8000fb0:	08eb      	lsrs	r3, r5, #3
 8000fb2:	e624      	b.n	8000bfe <__aeabi_dadd+0x24a>
 8000fb4:	4662      	mov	r2, ip
 8000fb6:	433a      	orrs	r2, r7
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_dadd+0x608>
 8000fba:	e698      	b.n	8000cee <__aeabi_dadd+0x33a>
 8000fbc:	464a      	mov	r2, r9
 8000fbe:	08d1      	lsrs	r1, r2, #3
 8000fc0:	075a      	lsls	r2, r3, #29
 8000fc2:	4311      	orrs	r1, r2
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	031b      	lsls	r3, r3, #12
 8000fca:	421a      	tst	r2, r3
 8000fcc:	d008      	beq.n	8000fe0 <__aeabi_dadd+0x62c>
 8000fce:	4660      	mov	r0, ip
 8000fd0:	08c5      	lsrs	r5, r0, #3
 8000fd2:	421d      	tst	r5, r3
 8000fd4:	d104      	bne.n	8000fe0 <__aeabi_dadd+0x62c>
 8000fd6:	4654      	mov	r4, sl
 8000fd8:	002a      	movs	r2, r5
 8000fda:	08f9      	lsrs	r1, r7, #3
 8000fdc:	0743      	lsls	r3, r0, #29
 8000fde:	4319      	orrs	r1, r3
 8000fe0:	0f4b      	lsrs	r3, r1, #29
 8000fe2:	00c9      	lsls	r1, r1, #3
 8000fe4:	075b      	lsls	r3, r3, #29
 8000fe6:	08c9      	lsrs	r1, r1, #3
 8000fe8:	4319      	orrs	r1, r3
 8000fea:	0013      	movs	r3, r2
 8000fec:	e62c      	b.n	8000c48 <__aeabi_dadd+0x294>
 8000fee:	4641      	mov	r1, r8
 8000ff0:	4329      	orrs	r1, r5
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_dadd+0x642>
 8000ff4:	e5fa      	b.n	8000bec <__aeabi_dadd+0x238>
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	000a      	movs	r2, r1
 8000ffa:	2400      	movs	r4, #0
 8000ffc:	e602      	b.n	8000c04 <__aeabi_dadd+0x250>
 8000ffe:	076b      	lsls	r3, r5, #29
 8001000:	08f9      	lsrs	r1, r7, #3
 8001002:	4319      	orrs	r1, r3
 8001004:	08eb      	lsrs	r3, r5, #3
 8001006:	e5fd      	b.n	8000c04 <__aeabi_dadd+0x250>
 8001008:	4663      	mov	r3, ip
 800100a:	08f9      	lsrs	r1, r7, #3
 800100c:	075b      	lsls	r3, r3, #29
 800100e:	4319      	orrs	r1, r3
 8001010:	4663      	mov	r3, ip
 8001012:	0004      	movs	r4, r0
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	e617      	b.n	8000c48 <__aeabi_dadd+0x294>
 8001018:	003d      	movs	r5, r7
 800101a:	444d      	add	r5, r9
 800101c:	4463      	add	r3, ip
 800101e:	454d      	cmp	r5, r9
 8001020:	4189      	sbcs	r1, r1
 8001022:	4698      	mov	r8, r3
 8001024:	4249      	negs	r1, r1
 8001026:	4488      	add	r8, r1
 8001028:	4643      	mov	r3, r8
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	d400      	bmi.n	8001030 <__aeabi_dadd+0x67c>
 800102e:	e5dd      	b.n	8000bec <__aeabi_dadd+0x238>
 8001030:	4642      	mov	r2, r8
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <__aeabi_dadd+0x6d0>)
 8001034:	2601      	movs	r6, #1
 8001036:	401a      	ands	r2, r3
 8001038:	4690      	mov	r8, r2
 800103a:	e5d7      	b.n	8000bec <__aeabi_dadd+0x238>
 800103c:	0010      	movs	r0, r2
 800103e:	001e      	movs	r6, r3
 8001040:	3820      	subs	r0, #32
 8001042:	40c6      	lsrs	r6, r0
 8001044:	2a20      	cmp	r2, #32
 8001046:	d005      	beq.n	8001054 <__aeabi_dadd+0x6a0>
 8001048:	2040      	movs	r0, #64	; 0x40
 800104a:	1a82      	subs	r2, r0, r2
 800104c:	4093      	lsls	r3, r2
 800104e:	464a      	mov	r2, r9
 8001050:	431a      	orrs	r2, r3
 8001052:	4691      	mov	r9, r2
 8001054:	464d      	mov	r5, r9
 8001056:	1e6b      	subs	r3, r5, #1
 8001058:	419d      	sbcs	r5, r3
 800105a:	4335      	orrs	r5, r6
 800105c:	e621      	b.n	8000ca2 <__aeabi_dadd+0x2ee>
 800105e:	0002      	movs	r2, r0
 8001060:	2300      	movs	r3, #0
 8001062:	2100      	movs	r1, #0
 8001064:	e540      	b.n	8000ae8 <__aeabi_dadd+0x134>
 8001066:	464a      	mov	r2, r9
 8001068:	19d5      	adds	r5, r2, r7
 800106a:	42bd      	cmp	r5, r7
 800106c:	4189      	sbcs	r1, r1
 800106e:	4463      	add	r3, ip
 8001070:	4698      	mov	r8, r3
 8001072:	4249      	negs	r1, r1
 8001074:	4488      	add	r8, r1
 8001076:	e5b3      	b.n	8000be0 <__aeabi_dadd+0x22c>
 8001078:	2100      	movs	r1, #0
 800107a:	4a01      	ldr	r2, [pc, #4]	; (8001080 <__aeabi_dadd+0x6cc>)
 800107c:	000b      	movs	r3, r1
 800107e:	e533      	b.n	8000ae8 <__aeabi_dadd+0x134>
 8001080:	000007ff 	.word	0x000007ff
 8001084:	ff7fffff 	.word	0xff7fffff

08001088 <__aeabi_ddiv>:
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	4657      	mov	r7, sl
 800108c:	464e      	mov	r6, r9
 800108e:	4645      	mov	r5, r8
 8001090:	46de      	mov	lr, fp
 8001092:	b5e0      	push	{r5, r6, r7, lr}
 8001094:	4681      	mov	r9, r0
 8001096:	0005      	movs	r5, r0
 8001098:	030c      	lsls	r4, r1, #12
 800109a:	0048      	lsls	r0, r1, #1
 800109c:	4692      	mov	sl, r2
 800109e:	001f      	movs	r7, r3
 80010a0:	b085      	sub	sp, #20
 80010a2:	0b24      	lsrs	r4, r4, #12
 80010a4:	0d40      	lsrs	r0, r0, #21
 80010a6:	0fce      	lsrs	r6, r1, #31
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d059      	beq.n	8001160 <__aeabi_ddiv+0xd8>
 80010ac:	4b87      	ldr	r3, [pc, #540]	; (80012cc <__aeabi_ddiv+0x244>)
 80010ae:	4298      	cmp	r0, r3
 80010b0:	d100      	bne.n	80010b4 <__aeabi_ddiv+0x2c>
 80010b2:	e098      	b.n	80011e6 <__aeabi_ddiv+0x15e>
 80010b4:	0f6b      	lsrs	r3, r5, #29
 80010b6:	00e4      	lsls	r4, r4, #3
 80010b8:	431c      	orrs	r4, r3
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	041b      	lsls	r3, r3, #16
 80010be:	4323      	orrs	r3, r4
 80010c0:	4698      	mov	r8, r3
 80010c2:	4b83      	ldr	r3, [pc, #524]	; (80012d0 <__aeabi_ddiv+0x248>)
 80010c4:	00ed      	lsls	r5, r5, #3
 80010c6:	469b      	mov	fp, r3
 80010c8:	2300      	movs	r3, #0
 80010ca:	4699      	mov	r9, r3
 80010cc:	4483      	add	fp, r0
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	033c      	lsls	r4, r7, #12
 80010d2:	007b      	lsls	r3, r7, #1
 80010d4:	4650      	mov	r0, sl
 80010d6:	0b24      	lsrs	r4, r4, #12
 80010d8:	0d5b      	lsrs	r3, r3, #21
 80010da:	0fff      	lsrs	r7, r7, #31
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d067      	beq.n	80011b0 <__aeabi_ddiv+0x128>
 80010e0:	4a7a      	ldr	r2, [pc, #488]	; (80012cc <__aeabi_ddiv+0x244>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d018      	beq.n	8001118 <__aeabi_ddiv+0x90>
 80010e6:	497a      	ldr	r1, [pc, #488]	; (80012d0 <__aeabi_ddiv+0x248>)
 80010e8:	0f42      	lsrs	r2, r0, #29
 80010ea:	468c      	mov	ip, r1
 80010ec:	00e4      	lsls	r4, r4, #3
 80010ee:	4659      	mov	r1, fp
 80010f0:	4314      	orrs	r4, r2
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	4463      	add	r3, ip
 80010f6:	0412      	lsls	r2, r2, #16
 80010f8:	1acb      	subs	r3, r1, r3
 80010fa:	4314      	orrs	r4, r2
 80010fc:	469b      	mov	fp, r3
 80010fe:	00c2      	lsls	r2, r0, #3
 8001100:	2000      	movs	r0, #0
 8001102:	0033      	movs	r3, r6
 8001104:	407b      	eors	r3, r7
 8001106:	469a      	mov	sl, r3
 8001108:	464b      	mov	r3, r9
 800110a:	2b0f      	cmp	r3, #15
 800110c:	d900      	bls.n	8001110 <__aeabi_ddiv+0x88>
 800110e:	e0ef      	b.n	80012f0 <__aeabi_ddiv+0x268>
 8001110:	4970      	ldr	r1, [pc, #448]	; (80012d4 <__aeabi_ddiv+0x24c>)
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	58cb      	ldr	r3, [r1, r3]
 8001116:	469f      	mov	pc, r3
 8001118:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <__aeabi_ddiv+0x250>)
 800111a:	4652      	mov	r2, sl
 800111c:	469c      	mov	ip, r3
 800111e:	4322      	orrs	r2, r4
 8001120:	44e3      	add	fp, ip
 8001122:	2a00      	cmp	r2, #0
 8001124:	d000      	beq.n	8001128 <__aeabi_ddiv+0xa0>
 8001126:	e095      	b.n	8001254 <__aeabi_ddiv+0x1cc>
 8001128:	4649      	mov	r1, r9
 800112a:	2302      	movs	r3, #2
 800112c:	4319      	orrs	r1, r3
 800112e:	4689      	mov	r9, r1
 8001130:	2400      	movs	r4, #0
 8001132:	2002      	movs	r0, #2
 8001134:	e7e5      	b.n	8001102 <__aeabi_ddiv+0x7a>
 8001136:	2300      	movs	r3, #0
 8001138:	2400      	movs	r4, #0
 800113a:	2500      	movs	r5, #0
 800113c:	4652      	mov	r2, sl
 800113e:	051b      	lsls	r3, r3, #20
 8001140:	4323      	orrs	r3, r4
 8001142:	07d2      	lsls	r2, r2, #31
 8001144:	4313      	orrs	r3, r2
 8001146:	0028      	movs	r0, r5
 8001148:	0019      	movs	r1, r3
 800114a:	b005      	add	sp, #20
 800114c:	bcf0      	pop	{r4, r5, r6, r7}
 800114e:	46bb      	mov	fp, r7
 8001150:	46b2      	mov	sl, r6
 8001152:	46a9      	mov	r9, r5
 8001154:	46a0      	mov	r8, r4
 8001156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001158:	2400      	movs	r4, #0
 800115a:	2500      	movs	r5, #0
 800115c:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <__aeabi_ddiv+0x244>)
 800115e:	e7ed      	b.n	800113c <__aeabi_ddiv+0xb4>
 8001160:	464b      	mov	r3, r9
 8001162:	4323      	orrs	r3, r4
 8001164:	4698      	mov	r8, r3
 8001166:	d100      	bne.n	800116a <__aeabi_ddiv+0xe2>
 8001168:	e089      	b.n	800127e <__aeabi_ddiv+0x1f6>
 800116a:	2c00      	cmp	r4, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_ddiv+0xe8>
 800116e:	e1e0      	b.n	8001532 <__aeabi_ddiv+0x4aa>
 8001170:	0020      	movs	r0, r4
 8001172:	f001 fb07 	bl	8002784 <__clzsi2>
 8001176:	0001      	movs	r1, r0
 8001178:	0002      	movs	r2, r0
 800117a:	390b      	subs	r1, #11
 800117c:	231d      	movs	r3, #29
 800117e:	1a5b      	subs	r3, r3, r1
 8001180:	4649      	mov	r1, r9
 8001182:	0010      	movs	r0, r2
 8001184:	40d9      	lsrs	r1, r3
 8001186:	3808      	subs	r0, #8
 8001188:	4084      	lsls	r4, r0
 800118a:	000b      	movs	r3, r1
 800118c:	464d      	mov	r5, r9
 800118e:	4323      	orrs	r3, r4
 8001190:	4698      	mov	r8, r3
 8001192:	4085      	lsls	r5, r0
 8001194:	4851      	ldr	r0, [pc, #324]	; (80012dc <__aeabi_ddiv+0x254>)
 8001196:	033c      	lsls	r4, r7, #12
 8001198:	1a83      	subs	r3, r0, r2
 800119a:	469b      	mov	fp, r3
 800119c:	2300      	movs	r3, #0
 800119e:	4699      	mov	r9, r3
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	007b      	lsls	r3, r7, #1
 80011a4:	4650      	mov	r0, sl
 80011a6:	0b24      	lsrs	r4, r4, #12
 80011a8:	0d5b      	lsrs	r3, r3, #21
 80011aa:	0fff      	lsrs	r7, r7, #31
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d197      	bne.n	80010e0 <__aeabi_ddiv+0x58>
 80011b0:	4652      	mov	r2, sl
 80011b2:	4322      	orrs	r2, r4
 80011b4:	d055      	beq.n	8001262 <__aeabi_ddiv+0x1da>
 80011b6:	2c00      	cmp	r4, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_ddiv+0x134>
 80011ba:	e1ca      	b.n	8001552 <__aeabi_ddiv+0x4ca>
 80011bc:	0020      	movs	r0, r4
 80011be:	f001 fae1 	bl	8002784 <__clzsi2>
 80011c2:	0002      	movs	r2, r0
 80011c4:	3a0b      	subs	r2, #11
 80011c6:	231d      	movs	r3, #29
 80011c8:	0001      	movs	r1, r0
 80011ca:	1a9b      	subs	r3, r3, r2
 80011cc:	4652      	mov	r2, sl
 80011ce:	3908      	subs	r1, #8
 80011d0:	40da      	lsrs	r2, r3
 80011d2:	408c      	lsls	r4, r1
 80011d4:	4314      	orrs	r4, r2
 80011d6:	4652      	mov	r2, sl
 80011d8:	408a      	lsls	r2, r1
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <__aeabi_ddiv+0x258>)
 80011dc:	4458      	add	r0, fp
 80011de:	469b      	mov	fp, r3
 80011e0:	4483      	add	fp, r0
 80011e2:	2000      	movs	r0, #0
 80011e4:	e78d      	b.n	8001102 <__aeabi_ddiv+0x7a>
 80011e6:	464b      	mov	r3, r9
 80011e8:	4323      	orrs	r3, r4
 80011ea:	4698      	mov	r8, r3
 80011ec:	d140      	bne.n	8001270 <__aeabi_ddiv+0x1e8>
 80011ee:	2308      	movs	r3, #8
 80011f0:	4699      	mov	r9, r3
 80011f2:	3b06      	subs	r3, #6
 80011f4:	2500      	movs	r5, #0
 80011f6:	4683      	mov	fp, r0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	e769      	b.n	80010d0 <__aeabi_ddiv+0x48>
 80011fc:	46b2      	mov	sl, r6
 80011fe:	9b00      	ldr	r3, [sp, #0]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d0a9      	beq.n	8001158 <__aeabi_ddiv+0xd0>
 8001204:	2b03      	cmp	r3, #3
 8001206:	d100      	bne.n	800120a <__aeabi_ddiv+0x182>
 8001208:	e211      	b.n	800162e <__aeabi_ddiv+0x5a6>
 800120a:	2b01      	cmp	r3, #1
 800120c:	d093      	beq.n	8001136 <__aeabi_ddiv+0xae>
 800120e:	4a35      	ldr	r2, [pc, #212]	; (80012e4 <__aeabi_ddiv+0x25c>)
 8001210:	445a      	add	r2, fp
 8001212:	2a00      	cmp	r2, #0
 8001214:	dc00      	bgt.n	8001218 <__aeabi_ddiv+0x190>
 8001216:	e13c      	b.n	8001492 <__aeabi_ddiv+0x40a>
 8001218:	076b      	lsls	r3, r5, #29
 800121a:	d000      	beq.n	800121e <__aeabi_ddiv+0x196>
 800121c:	e1a7      	b.n	800156e <__aeabi_ddiv+0x4e6>
 800121e:	08ed      	lsrs	r5, r5, #3
 8001220:	4643      	mov	r3, r8
 8001222:	01db      	lsls	r3, r3, #7
 8001224:	d506      	bpl.n	8001234 <__aeabi_ddiv+0x1ac>
 8001226:	4642      	mov	r2, r8
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <__aeabi_ddiv+0x260>)
 800122a:	401a      	ands	r2, r3
 800122c:	4690      	mov	r8, r2
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	00d2      	lsls	r2, r2, #3
 8001232:	445a      	add	r2, fp
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <__aeabi_ddiv+0x264>)
 8001236:	429a      	cmp	r2, r3
 8001238:	dc8e      	bgt.n	8001158 <__aeabi_ddiv+0xd0>
 800123a:	4643      	mov	r3, r8
 800123c:	0552      	lsls	r2, r2, #21
 800123e:	0758      	lsls	r0, r3, #29
 8001240:	025c      	lsls	r4, r3, #9
 8001242:	4305      	orrs	r5, r0
 8001244:	0b24      	lsrs	r4, r4, #12
 8001246:	0d53      	lsrs	r3, r2, #21
 8001248:	e778      	b.n	800113c <__aeabi_ddiv+0xb4>
 800124a:	46ba      	mov	sl, r7
 800124c:	46a0      	mov	r8, r4
 800124e:	0015      	movs	r5, r2
 8001250:	9000      	str	r0, [sp, #0]
 8001252:	e7d4      	b.n	80011fe <__aeabi_ddiv+0x176>
 8001254:	464a      	mov	r2, r9
 8001256:	2303      	movs	r3, #3
 8001258:	431a      	orrs	r2, r3
 800125a:	4691      	mov	r9, r2
 800125c:	2003      	movs	r0, #3
 800125e:	4652      	mov	r2, sl
 8001260:	e74f      	b.n	8001102 <__aeabi_ddiv+0x7a>
 8001262:	4649      	mov	r1, r9
 8001264:	2301      	movs	r3, #1
 8001266:	4319      	orrs	r1, r3
 8001268:	4689      	mov	r9, r1
 800126a:	2400      	movs	r4, #0
 800126c:	2001      	movs	r0, #1
 800126e:	e748      	b.n	8001102 <__aeabi_ddiv+0x7a>
 8001270:	230c      	movs	r3, #12
 8001272:	4699      	mov	r9, r3
 8001274:	3b09      	subs	r3, #9
 8001276:	46a0      	mov	r8, r4
 8001278:	4683      	mov	fp, r0
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	e728      	b.n	80010d0 <__aeabi_ddiv+0x48>
 800127e:	2304      	movs	r3, #4
 8001280:	4699      	mov	r9, r3
 8001282:	2300      	movs	r3, #0
 8001284:	469b      	mov	fp, r3
 8001286:	3301      	adds	r3, #1
 8001288:	2500      	movs	r5, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	e720      	b.n	80010d0 <__aeabi_ddiv+0x48>
 800128e:	2300      	movs	r3, #0
 8001290:	2480      	movs	r4, #128	; 0x80
 8001292:	469a      	mov	sl, r3
 8001294:	2500      	movs	r5, #0
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <__aeabi_ddiv+0x244>)
 8001298:	0324      	lsls	r4, r4, #12
 800129a:	e74f      	b.n	800113c <__aeabi_ddiv+0xb4>
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	4641      	mov	r1, r8
 80012a0:	031b      	lsls	r3, r3, #12
 80012a2:	4219      	tst	r1, r3
 80012a4:	d008      	beq.n	80012b8 <__aeabi_ddiv+0x230>
 80012a6:	421c      	tst	r4, r3
 80012a8:	d106      	bne.n	80012b8 <__aeabi_ddiv+0x230>
 80012aa:	431c      	orrs	r4, r3
 80012ac:	0324      	lsls	r4, r4, #12
 80012ae:	46ba      	mov	sl, r7
 80012b0:	0015      	movs	r5, r2
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <__aeabi_ddiv+0x244>)
 80012b4:	0b24      	lsrs	r4, r4, #12
 80012b6:	e741      	b.n	800113c <__aeabi_ddiv+0xb4>
 80012b8:	2480      	movs	r4, #128	; 0x80
 80012ba:	4643      	mov	r3, r8
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	431c      	orrs	r4, r3
 80012c0:	0324      	lsls	r4, r4, #12
 80012c2:	46b2      	mov	sl, r6
 80012c4:	4b01      	ldr	r3, [pc, #4]	; (80012cc <__aeabi_ddiv+0x244>)
 80012c6:	0b24      	lsrs	r4, r4, #12
 80012c8:	e738      	b.n	800113c <__aeabi_ddiv+0xb4>
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	000007ff 	.word	0x000007ff
 80012d0:	fffffc01 	.word	0xfffffc01
 80012d4:	0800b2b8 	.word	0x0800b2b8
 80012d8:	fffff801 	.word	0xfffff801
 80012dc:	fffffc0d 	.word	0xfffffc0d
 80012e0:	000003f3 	.word	0x000003f3
 80012e4:	000003ff 	.word	0x000003ff
 80012e8:	feffffff 	.word	0xfeffffff
 80012ec:	000007fe 	.word	0x000007fe
 80012f0:	4544      	cmp	r4, r8
 80012f2:	d200      	bcs.n	80012f6 <__aeabi_ddiv+0x26e>
 80012f4:	e116      	b.n	8001524 <__aeabi_ddiv+0x49c>
 80012f6:	d100      	bne.n	80012fa <__aeabi_ddiv+0x272>
 80012f8:	e111      	b.n	800151e <__aeabi_ddiv+0x496>
 80012fa:	2301      	movs	r3, #1
 80012fc:	425b      	negs	r3, r3
 80012fe:	469c      	mov	ip, r3
 8001300:	002e      	movs	r6, r5
 8001302:	4640      	mov	r0, r8
 8001304:	2500      	movs	r5, #0
 8001306:	44e3      	add	fp, ip
 8001308:	0223      	lsls	r3, r4, #8
 800130a:	0e14      	lsrs	r4, r2, #24
 800130c:	431c      	orrs	r4, r3
 800130e:	0c1b      	lsrs	r3, r3, #16
 8001310:	4699      	mov	r9, r3
 8001312:	0423      	lsls	r3, r4, #16
 8001314:	0c1f      	lsrs	r7, r3, #16
 8001316:	0212      	lsls	r2, r2, #8
 8001318:	4649      	mov	r1, r9
 800131a:	9200      	str	r2, [sp, #0]
 800131c:	9701      	str	r7, [sp, #4]
 800131e:	f7fe ff8f 	bl	8000240 <__aeabi_uidivmod>
 8001322:	0002      	movs	r2, r0
 8001324:	437a      	muls	r2, r7
 8001326:	040b      	lsls	r3, r1, #16
 8001328:	0c31      	lsrs	r1, r6, #16
 800132a:	4680      	mov	r8, r0
 800132c:	4319      	orrs	r1, r3
 800132e:	428a      	cmp	r2, r1
 8001330:	d90b      	bls.n	800134a <__aeabi_ddiv+0x2c2>
 8001332:	2301      	movs	r3, #1
 8001334:	425b      	negs	r3, r3
 8001336:	469c      	mov	ip, r3
 8001338:	1909      	adds	r1, r1, r4
 800133a:	44e0      	add	r8, ip
 800133c:	428c      	cmp	r4, r1
 800133e:	d804      	bhi.n	800134a <__aeabi_ddiv+0x2c2>
 8001340:	428a      	cmp	r2, r1
 8001342:	d902      	bls.n	800134a <__aeabi_ddiv+0x2c2>
 8001344:	1e83      	subs	r3, r0, #2
 8001346:	4698      	mov	r8, r3
 8001348:	1909      	adds	r1, r1, r4
 800134a:	1a88      	subs	r0, r1, r2
 800134c:	4649      	mov	r1, r9
 800134e:	f7fe ff77 	bl	8000240 <__aeabi_uidivmod>
 8001352:	0409      	lsls	r1, r1, #16
 8001354:	468c      	mov	ip, r1
 8001356:	0431      	lsls	r1, r6, #16
 8001358:	4666      	mov	r6, ip
 800135a:	9a01      	ldr	r2, [sp, #4]
 800135c:	0c09      	lsrs	r1, r1, #16
 800135e:	4342      	muls	r2, r0
 8001360:	0003      	movs	r3, r0
 8001362:	4331      	orrs	r1, r6
 8001364:	428a      	cmp	r2, r1
 8001366:	d904      	bls.n	8001372 <__aeabi_ddiv+0x2ea>
 8001368:	1909      	adds	r1, r1, r4
 800136a:	3b01      	subs	r3, #1
 800136c:	428c      	cmp	r4, r1
 800136e:	d800      	bhi.n	8001372 <__aeabi_ddiv+0x2ea>
 8001370:	e111      	b.n	8001596 <__aeabi_ddiv+0x50e>
 8001372:	1a89      	subs	r1, r1, r2
 8001374:	4642      	mov	r2, r8
 8001376:	9e00      	ldr	r6, [sp, #0]
 8001378:	0412      	lsls	r2, r2, #16
 800137a:	431a      	orrs	r2, r3
 800137c:	0c33      	lsrs	r3, r6, #16
 800137e:	001f      	movs	r7, r3
 8001380:	0c10      	lsrs	r0, r2, #16
 8001382:	4690      	mov	r8, r2
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	0413      	lsls	r3, r2, #16
 8001388:	0432      	lsls	r2, r6, #16
 800138a:	0c16      	lsrs	r6, r2, #16
 800138c:	0032      	movs	r2, r6
 800138e:	0c1b      	lsrs	r3, r3, #16
 8001390:	435a      	muls	r2, r3
 8001392:	9603      	str	r6, [sp, #12]
 8001394:	437b      	muls	r3, r7
 8001396:	4346      	muls	r6, r0
 8001398:	4378      	muls	r0, r7
 800139a:	0c17      	lsrs	r7, r2, #16
 800139c:	46bc      	mov	ip, r7
 800139e:	199b      	adds	r3, r3, r6
 80013a0:	4463      	add	r3, ip
 80013a2:	429e      	cmp	r6, r3
 80013a4:	d903      	bls.n	80013ae <__aeabi_ddiv+0x326>
 80013a6:	2680      	movs	r6, #128	; 0x80
 80013a8:	0276      	lsls	r6, r6, #9
 80013aa:	46b4      	mov	ip, r6
 80013ac:	4460      	add	r0, ip
 80013ae:	0c1e      	lsrs	r6, r3, #16
 80013b0:	1830      	adds	r0, r6, r0
 80013b2:	0416      	lsls	r6, r2, #16
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	0c36      	lsrs	r6, r6, #16
 80013b8:	199e      	adds	r6, r3, r6
 80013ba:	4281      	cmp	r1, r0
 80013bc:	d200      	bcs.n	80013c0 <__aeabi_ddiv+0x338>
 80013be:	e09c      	b.n	80014fa <__aeabi_ddiv+0x472>
 80013c0:	d100      	bne.n	80013c4 <__aeabi_ddiv+0x33c>
 80013c2:	e097      	b.n	80014f4 <__aeabi_ddiv+0x46c>
 80013c4:	1bae      	subs	r6, r5, r6
 80013c6:	1a09      	subs	r1, r1, r0
 80013c8:	42b5      	cmp	r5, r6
 80013ca:	4180      	sbcs	r0, r0
 80013cc:	4240      	negs	r0, r0
 80013ce:	1a08      	subs	r0, r1, r0
 80013d0:	4284      	cmp	r4, r0
 80013d2:	d100      	bne.n	80013d6 <__aeabi_ddiv+0x34e>
 80013d4:	e111      	b.n	80015fa <__aeabi_ddiv+0x572>
 80013d6:	4649      	mov	r1, r9
 80013d8:	f7fe ff32 	bl	8000240 <__aeabi_uidivmod>
 80013dc:	9a01      	ldr	r2, [sp, #4]
 80013de:	040b      	lsls	r3, r1, #16
 80013e0:	4342      	muls	r2, r0
 80013e2:	0c31      	lsrs	r1, r6, #16
 80013e4:	0005      	movs	r5, r0
 80013e6:	4319      	orrs	r1, r3
 80013e8:	428a      	cmp	r2, r1
 80013ea:	d907      	bls.n	80013fc <__aeabi_ddiv+0x374>
 80013ec:	1909      	adds	r1, r1, r4
 80013ee:	3d01      	subs	r5, #1
 80013f0:	428c      	cmp	r4, r1
 80013f2:	d803      	bhi.n	80013fc <__aeabi_ddiv+0x374>
 80013f4:	428a      	cmp	r2, r1
 80013f6:	d901      	bls.n	80013fc <__aeabi_ddiv+0x374>
 80013f8:	1e85      	subs	r5, r0, #2
 80013fa:	1909      	adds	r1, r1, r4
 80013fc:	1a88      	subs	r0, r1, r2
 80013fe:	4649      	mov	r1, r9
 8001400:	f7fe ff1e 	bl	8000240 <__aeabi_uidivmod>
 8001404:	0409      	lsls	r1, r1, #16
 8001406:	468c      	mov	ip, r1
 8001408:	0431      	lsls	r1, r6, #16
 800140a:	4666      	mov	r6, ip
 800140c:	9a01      	ldr	r2, [sp, #4]
 800140e:	0c09      	lsrs	r1, r1, #16
 8001410:	4342      	muls	r2, r0
 8001412:	0003      	movs	r3, r0
 8001414:	4331      	orrs	r1, r6
 8001416:	428a      	cmp	r2, r1
 8001418:	d907      	bls.n	800142a <__aeabi_ddiv+0x3a2>
 800141a:	1909      	adds	r1, r1, r4
 800141c:	3b01      	subs	r3, #1
 800141e:	428c      	cmp	r4, r1
 8001420:	d803      	bhi.n	800142a <__aeabi_ddiv+0x3a2>
 8001422:	428a      	cmp	r2, r1
 8001424:	d901      	bls.n	800142a <__aeabi_ddiv+0x3a2>
 8001426:	1e83      	subs	r3, r0, #2
 8001428:	1909      	adds	r1, r1, r4
 800142a:	9e03      	ldr	r6, [sp, #12]
 800142c:	1a89      	subs	r1, r1, r2
 800142e:	0032      	movs	r2, r6
 8001430:	042d      	lsls	r5, r5, #16
 8001432:	431d      	orrs	r5, r3
 8001434:	9f02      	ldr	r7, [sp, #8]
 8001436:	042b      	lsls	r3, r5, #16
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	435a      	muls	r2, r3
 800143c:	437b      	muls	r3, r7
 800143e:	469c      	mov	ip, r3
 8001440:	0c28      	lsrs	r0, r5, #16
 8001442:	4346      	muls	r6, r0
 8001444:	0c13      	lsrs	r3, r2, #16
 8001446:	44b4      	add	ip, r6
 8001448:	4463      	add	r3, ip
 800144a:	4378      	muls	r0, r7
 800144c:	429e      	cmp	r6, r3
 800144e:	d903      	bls.n	8001458 <__aeabi_ddiv+0x3d0>
 8001450:	2680      	movs	r6, #128	; 0x80
 8001452:	0276      	lsls	r6, r6, #9
 8001454:	46b4      	mov	ip, r6
 8001456:	4460      	add	r0, ip
 8001458:	0c1e      	lsrs	r6, r3, #16
 800145a:	0412      	lsls	r2, r2, #16
 800145c:	041b      	lsls	r3, r3, #16
 800145e:	0c12      	lsrs	r2, r2, #16
 8001460:	1830      	adds	r0, r6, r0
 8001462:	189b      	adds	r3, r3, r2
 8001464:	4281      	cmp	r1, r0
 8001466:	d306      	bcc.n	8001476 <__aeabi_ddiv+0x3ee>
 8001468:	d002      	beq.n	8001470 <__aeabi_ddiv+0x3e8>
 800146a:	2301      	movs	r3, #1
 800146c:	431d      	orrs	r5, r3
 800146e:	e6ce      	b.n	800120e <__aeabi_ddiv+0x186>
 8001470:	2b00      	cmp	r3, #0
 8001472:	d100      	bne.n	8001476 <__aeabi_ddiv+0x3ee>
 8001474:	e6cb      	b.n	800120e <__aeabi_ddiv+0x186>
 8001476:	1861      	adds	r1, r4, r1
 8001478:	1e6e      	subs	r6, r5, #1
 800147a:	42a1      	cmp	r1, r4
 800147c:	d200      	bcs.n	8001480 <__aeabi_ddiv+0x3f8>
 800147e:	e0a4      	b.n	80015ca <__aeabi_ddiv+0x542>
 8001480:	4281      	cmp	r1, r0
 8001482:	d200      	bcs.n	8001486 <__aeabi_ddiv+0x3fe>
 8001484:	e0c9      	b.n	800161a <__aeabi_ddiv+0x592>
 8001486:	d100      	bne.n	800148a <__aeabi_ddiv+0x402>
 8001488:	e0d9      	b.n	800163e <__aeabi_ddiv+0x5b6>
 800148a:	0035      	movs	r5, r6
 800148c:	e7ed      	b.n	800146a <__aeabi_ddiv+0x3e2>
 800148e:	2501      	movs	r5, #1
 8001490:	426d      	negs	r5, r5
 8001492:	2101      	movs	r1, #1
 8001494:	1a89      	subs	r1, r1, r2
 8001496:	2938      	cmp	r1, #56	; 0x38
 8001498:	dd00      	ble.n	800149c <__aeabi_ddiv+0x414>
 800149a:	e64c      	b.n	8001136 <__aeabi_ddiv+0xae>
 800149c:	291f      	cmp	r1, #31
 800149e:	dc00      	bgt.n	80014a2 <__aeabi_ddiv+0x41a>
 80014a0:	e07f      	b.n	80015a2 <__aeabi_ddiv+0x51a>
 80014a2:	231f      	movs	r3, #31
 80014a4:	425b      	negs	r3, r3
 80014a6:	1a9a      	subs	r2, r3, r2
 80014a8:	4643      	mov	r3, r8
 80014aa:	40d3      	lsrs	r3, r2
 80014ac:	2920      	cmp	r1, #32
 80014ae:	d004      	beq.n	80014ba <__aeabi_ddiv+0x432>
 80014b0:	4644      	mov	r4, r8
 80014b2:	4a65      	ldr	r2, [pc, #404]	; (8001648 <__aeabi_ddiv+0x5c0>)
 80014b4:	445a      	add	r2, fp
 80014b6:	4094      	lsls	r4, r2
 80014b8:	4325      	orrs	r5, r4
 80014ba:	1e6a      	subs	r2, r5, #1
 80014bc:	4195      	sbcs	r5, r2
 80014be:	2207      	movs	r2, #7
 80014c0:	432b      	orrs	r3, r5
 80014c2:	0015      	movs	r5, r2
 80014c4:	2400      	movs	r4, #0
 80014c6:	401d      	ands	r5, r3
 80014c8:	421a      	tst	r2, r3
 80014ca:	d100      	bne.n	80014ce <__aeabi_ddiv+0x446>
 80014cc:	e0a1      	b.n	8001612 <__aeabi_ddiv+0x58a>
 80014ce:	220f      	movs	r2, #15
 80014d0:	2400      	movs	r4, #0
 80014d2:	401a      	ands	r2, r3
 80014d4:	2a04      	cmp	r2, #4
 80014d6:	d100      	bne.n	80014da <__aeabi_ddiv+0x452>
 80014d8:	e098      	b.n	800160c <__aeabi_ddiv+0x584>
 80014da:	1d1a      	adds	r2, r3, #4
 80014dc:	429a      	cmp	r2, r3
 80014de:	419b      	sbcs	r3, r3
 80014e0:	425b      	negs	r3, r3
 80014e2:	18e4      	adds	r4, r4, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	0222      	lsls	r2, r4, #8
 80014e8:	d400      	bmi.n	80014ec <__aeabi_ddiv+0x464>
 80014ea:	e08f      	b.n	800160c <__aeabi_ddiv+0x584>
 80014ec:	2301      	movs	r3, #1
 80014ee:	2400      	movs	r4, #0
 80014f0:	2500      	movs	r5, #0
 80014f2:	e623      	b.n	800113c <__aeabi_ddiv+0xb4>
 80014f4:	42b5      	cmp	r5, r6
 80014f6:	d300      	bcc.n	80014fa <__aeabi_ddiv+0x472>
 80014f8:	e764      	b.n	80013c4 <__aeabi_ddiv+0x33c>
 80014fa:	4643      	mov	r3, r8
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	9b00      	ldr	r3, [sp, #0]
 8001500:	469c      	mov	ip, r3
 8001502:	4465      	add	r5, ip
 8001504:	001f      	movs	r7, r3
 8001506:	429d      	cmp	r5, r3
 8001508:	419b      	sbcs	r3, r3
 800150a:	425b      	negs	r3, r3
 800150c:	191b      	adds	r3, r3, r4
 800150e:	18c9      	adds	r1, r1, r3
 8001510:	428c      	cmp	r4, r1
 8001512:	d23a      	bcs.n	800158a <__aeabi_ddiv+0x502>
 8001514:	4288      	cmp	r0, r1
 8001516:	d863      	bhi.n	80015e0 <__aeabi_ddiv+0x558>
 8001518:	d060      	beq.n	80015dc <__aeabi_ddiv+0x554>
 800151a:	4690      	mov	r8, r2
 800151c:	e752      	b.n	80013c4 <__aeabi_ddiv+0x33c>
 800151e:	42aa      	cmp	r2, r5
 8001520:	d900      	bls.n	8001524 <__aeabi_ddiv+0x49c>
 8001522:	e6ea      	b.n	80012fa <__aeabi_ddiv+0x272>
 8001524:	4643      	mov	r3, r8
 8001526:	07de      	lsls	r6, r3, #31
 8001528:	0858      	lsrs	r0, r3, #1
 800152a:	086b      	lsrs	r3, r5, #1
 800152c:	431e      	orrs	r6, r3
 800152e:	07ed      	lsls	r5, r5, #31
 8001530:	e6ea      	b.n	8001308 <__aeabi_ddiv+0x280>
 8001532:	4648      	mov	r0, r9
 8001534:	f001 f926 	bl	8002784 <__clzsi2>
 8001538:	0001      	movs	r1, r0
 800153a:	0002      	movs	r2, r0
 800153c:	3115      	adds	r1, #21
 800153e:	3220      	adds	r2, #32
 8001540:	291c      	cmp	r1, #28
 8001542:	dc00      	bgt.n	8001546 <__aeabi_ddiv+0x4be>
 8001544:	e61a      	b.n	800117c <__aeabi_ddiv+0xf4>
 8001546:	464b      	mov	r3, r9
 8001548:	3808      	subs	r0, #8
 800154a:	4083      	lsls	r3, r0
 800154c:	2500      	movs	r5, #0
 800154e:	4698      	mov	r8, r3
 8001550:	e620      	b.n	8001194 <__aeabi_ddiv+0x10c>
 8001552:	f001 f917 	bl	8002784 <__clzsi2>
 8001556:	0003      	movs	r3, r0
 8001558:	001a      	movs	r2, r3
 800155a:	3215      	adds	r2, #21
 800155c:	3020      	adds	r0, #32
 800155e:	2a1c      	cmp	r2, #28
 8001560:	dc00      	bgt.n	8001564 <__aeabi_ddiv+0x4dc>
 8001562:	e630      	b.n	80011c6 <__aeabi_ddiv+0x13e>
 8001564:	4654      	mov	r4, sl
 8001566:	3b08      	subs	r3, #8
 8001568:	2200      	movs	r2, #0
 800156a:	409c      	lsls	r4, r3
 800156c:	e635      	b.n	80011da <__aeabi_ddiv+0x152>
 800156e:	230f      	movs	r3, #15
 8001570:	402b      	ands	r3, r5
 8001572:	2b04      	cmp	r3, #4
 8001574:	d100      	bne.n	8001578 <__aeabi_ddiv+0x4f0>
 8001576:	e652      	b.n	800121e <__aeabi_ddiv+0x196>
 8001578:	2305      	movs	r3, #5
 800157a:	425b      	negs	r3, r3
 800157c:	42ab      	cmp	r3, r5
 800157e:	419b      	sbcs	r3, r3
 8001580:	3504      	adds	r5, #4
 8001582:	425b      	negs	r3, r3
 8001584:	08ed      	lsrs	r5, r5, #3
 8001586:	4498      	add	r8, r3
 8001588:	e64a      	b.n	8001220 <__aeabi_ddiv+0x198>
 800158a:	428c      	cmp	r4, r1
 800158c:	d1c5      	bne.n	800151a <__aeabi_ddiv+0x492>
 800158e:	42af      	cmp	r7, r5
 8001590:	d9c0      	bls.n	8001514 <__aeabi_ddiv+0x48c>
 8001592:	4690      	mov	r8, r2
 8001594:	e716      	b.n	80013c4 <__aeabi_ddiv+0x33c>
 8001596:	428a      	cmp	r2, r1
 8001598:	d800      	bhi.n	800159c <__aeabi_ddiv+0x514>
 800159a:	e6ea      	b.n	8001372 <__aeabi_ddiv+0x2ea>
 800159c:	1e83      	subs	r3, r0, #2
 800159e:	1909      	adds	r1, r1, r4
 80015a0:	e6e7      	b.n	8001372 <__aeabi_ddiv+0x2ea>
 80015a2:	4a2a      	ldr	r2, [pc, #168]	; (800164c <__aeabi_ddiv+0x5c4>)
 80015a4:	0028      	movs	r0, r5
 80015a6:	445a      	add	r2, fp
 80015a8:	4643      	mov	r3, r8
 80015aa:	4095      	lsls	r5, r2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	40c8      	lsrs	r0, r1
 80015b0:	1e6a      	subs	r2, r5, #1
 80015b2:	4195      	sbcs	r5, r2
 80015b4:	4644      	mov	r4, r8
 80015b6:	4303      	orrs	r3, r0
 80015b8:	432b      	orrs	r3, r5
 80015ba:	40cc      	lsrs	r4, r1
 80015bc:	075a      	lsls	r2, r3, #29
 80015be:	d092      	beq.n	80014e6 <__aeabi_ddiv+0x45e>
 80015c0:	220f      	movs	r2, #15
 80015c2:	401a      	ands	r2, r3
 80015c4:	2a04      	cmp	r2, #4
 80015c6:	d188      	bne.n	80014da <__aeabi_ddiv+0x452>
 80015c8:	e78d      	b.n	80014e6 <__aeabi_ddiv+0x45e>
 80015ca:	0035      	movs	r5, r6
 80015cc:	4281      	cmp	r1, r0
 80015ce:	d000      	beq.n	80015d2 <__aeabi_ddiv+0x54a>
 80015d0:	e74b      	b.n	800146a <__aeabi_ddiv+0x3e2>
 80015d2:	9a00      	ldr	r2, [sp, #0]
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d000      	beq.n	80015da <__aeabi_ddiv+0x552>
 80015d8:	e747      	b.n	800146a <__aeabi_ddiv+0x3e2>
 80015da:	e618      	b.n	800120e <__aeabi_ddiv+0x186>
 80015dc:	42ae      	cmp	r6, r5
 80015de:	d99c      	bls.n	800151a <__aeabi_ddiv+0x492>
 80015e0:	2302      	movs	r3, #2
 80015e2:	425b      	negs	r3, r3
 80015e4:	469c      	mov	ip, r3
 80015e6:	9b00      	ldr	r3, [sp, #0]
 80015e8:	44e0      	add	r8, ip
 80015ea:	469c      	mov	ip, r3
 80015ec:	4465      	add	r5, ip
 80015ee:	429d      	cmp	r5, r3
 80015f0:	419b      	sbcs	r3, r3
 80015f2:	425b      	negs	r3, r3
 80015f4:	191b      	adds	r3, r3, r4
 80015f6:	18c9      	adds	r1, r1, r3
 80015f8:	e6e4      	b.n	80013c4 <__aeabi_ddiv+0x33c>
 80015fa:	4a15      	ldr	r2, [pc, #84]	; (8001650 <__aeabi_ddiv+0x5c8>)
 80015fc:	445a      	add	r2, fp
 80015fe:	2a00      	cmp	r2, #0
 8001600:	dc00      	bgt.n	8001604 <__aeabi_ddiv+0x57c>
 8001602:	e744      	b.n	800148e <__aeabi_ddiv+0x406>
 8001604:	2301      	movs	r3, #1
 8001606:	2500      	movs	r5, #0
 8001608:	4498      	add	r8, r3
 800160a:	e609      	b.n	8001220 <__aeabi_ddiv+0x198>
 800160c:	0765      	lsls	r5, r4, #29
 800160e:	0264      	lsls	r4, r4, #9
 8001610:	0b24      	lsrs	r4, r4, #12
 8001612:	08db      	lsrs	r3, r3, #3
 8001614:	431d      	orrs	r5, r3
 8001616:	2300      	movs	r3, #0
 8001618:	e590      	b.n	800113c <__aeabi_ddiv+0xb4>
 800161a:	9e00      	ldr	r6, [sp, #0]
 800161c:	3d02      	subs	r5, #2
 800161e:	0072      	lsls	r2, r6, #1
 8001620:	42b2      	cmp	r2, r6
 8001622:	41bf      	sbcs	r7, r7
 8001624:	427f      	negs	r7, r7
 8001626:	193c      	adds	r4, r7, r4
 8001628:	1909      	adds	r1, r1, r4
 800162a:	9200      	str	r2, [sp, #0]
 800162c:	e7ce      	b.n	80015cc <__aeabi_ddiv+0x544>
 800162e:	2480      	movs	r4, #128	; 0x80
 8001630:	4643      	mov	r3, r8
 8001632:	0324      	lsls	r4, r4, #12
 8001634:	431c      	orrs	r4, r3
 8001636:	0324      	lsls	r4, r4, #12
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <__aeabi_ddiv+0x5cc>)
 800163a:	0b24      	lsrs	r4, r4, #12
 800163c:	e57e      	b.n	800113c <__aeabi_ddiv+0xb4>
 800163e:	9a00      	ldr	r2, [sp, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3ea      	bcc.n	800161a <__aeabi_ddiv+0x592>
 8001644:	0035      	movs	r5, r6
 8001646:	e7c4      	b.n	80015d2 <__aeabi_ddiv+0x54a>
 8001648:	0000043e 	.word	0x0000043e
 800164c:	0000041e 	.word	0x0000041e
 8001650:	000003ff 	.word	0x000003ff
 8001654:	000007ff 	.word	0x000007ff

08001658 <__eqdf2>:
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	464f      	mov	r7, r9
 800165c:	4646      	mov	r6, r8
 800165e:	46d6      	mov	lr, sl
 8001660:	4694      	mov	ip, r2
 8001662:	4691      	mov	r9, r2
 8001664:	031a      	lsls	r2, r3, #12
 8001666:	0b12      	lsrs	r2, r2, #12
 8001668:	4d18      	ldr	r5, [pc, #96]	; (80016cc <__eqdf2+0x74>)
 800166a:	b5c0      	push	{r6, r7, lr}
 800166c:	004c      	lsls	r4, r1, #1
 800166e:	030f      	lsls	r7, r1, #12
 8001670:	4692      	mov	sl, r2
 8001672:	005a      	lsls	r2, r3, #1
 8001674:	0006      	movs	r6, r0
 8001676:	4680      	mov	r8, r0
 8001678:	0b3f      	lsrs	r7, r7, #12
 800167a:	2001      	movs	r0, #1
 800167c:	0d64      	lsrs	r4, r4, #21
 800167e:	0fc9      	lsrs	r1, r1, #31
 8001680:	0d52      	lsrs	r2, r2, #21
 8001682:	0fdb      	lsrs	r3, r3, #31
 8001684:	42ac      	cmp	r4, r5
 8001686:	d00a      	beq.n	800169e <__eqdf2+0x46>
 8001688:	42aa      	cmp	r2, r5
 800168a:	d003      	beq.n	8001694 <__eqdf2+0x3c>
 800168c:	4294      	cmp	r4, r2
 800168e:	d101      	bne.n	8001694 <__eqdf2+0x3c>
 8001690:	4557      	cmp	r7, sl
 8001692:	d00d      	beq.n	80016b0 <__eqdf2+0x58>
 8001694:	bce0      	pop	{r5, r6, r7}
 8001696:	46ba      	mov	sl, r7
 8001698:	46b1      	mov	r9, r6
 800169a:	46a8      	mov	r8, r5
 800169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169e:	003d      	movs	r5, r7
 80016a0:	4335      	orrs	r5, r6
 80016a2:	d1f7      	bne.n	8001694 <__eqdf2+0x3c>
 80016a4:	42a2      	cmp	r2, r4
 80016a6:	d1f5      	bne.n	8001694 <__eqdf2+0x3c>
 80016a8:	4652      	mov	r2, sl
 80016aa:	4665      	mov	r5, ip
 80016ac:	432a      	orrs	r2, r5
 80016ae:	d1f1      	bne.n	8001694 <__eqdf2+0x3c>
 80016b0:	2001      	movs	r0, #1
 80016b2:	45c8      	cmp	r8, r9
 80016b4:	d1ee      	bne.n	8001694 <__eqdf2+0x3c>
 80016b6:	4299      	cmp	r1, r3
 80016b8:	d006      	beq.n	80016c8 <__eqdf2+0x70>
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d1ea      	bne.n	8001694 <__eqdf2+0x3c>
 80016be:	433e      	orrs	r6, r7
 80016c0:	0030      	movs	r0, r6
 80016c2:	1e46      	subs	r6, r0, #1
 80016c4:	41b0      	sbcs	r0, r6
 80016c6:	e7e5      	b.n	8001694 <__eqdf2+0x3c>
 80016c8:	2000      	movs	r0, #0
 80016ca:	e7e3      	b.n	8001694 <__eqdf2+0x3c>
 80016cc:	000007ff 	.word	0x000007ff

080016d0 <__gedf2>:
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	464e      	mov	r6, r9
 80016d4:	4645      	mov	r5, r8
 80016d6:	4657      	mov	r7, sl
 80016d8:	46de      	mov	lr, fp
 80016da:	0004      	movs	r4, r0
 80016dc:	0018      	movs	r0, r3
 80016de:	b5e0      	push	{r5, r6, r7, lr}
 80016e0:	0016      	movs	r6, r2
 80016e2:	031b      	lsls	r3, r3, #12
 80016e4:	0b1b      	lsrs	r3, r3, #12
 80016e6:	4d32      	ldr	r5, [pc, #200]	; (80017b0 <__gedf2+0xe0>)
 80016e8:	030f      	lsls	r7, r1, #12
 80016ea:	004a      	lsls	r2, r1, #1
 80016ec:	4699      	mov	r9, r3
 80016ee:	0043      	lsls	r3, r0, #1
 80016f0:	46a4      	mov	ip, r4
 80016f2:	46b0      	mov	r8, r6
 80016f4:	0b3f      	lsrs	r7, r7, #12
 80016f6:	0d52      	lsrs	r2, r2, #21
 80016f8:	0fc9      	lsrs	r1, r1, #31
 80016fa:	0d5b      	lsrs	r3, r3, #21
 80016fc:	0fc0      	lsrs	r0, r0, #31
 80016fe:	42aa      	cmp	r2, r5
 8001700:	d029      	beq.n	8001756 <__gedf2+0x86>
 8001702:	42ab      	cmp	r3, r5
 8001704:	d018      	beq.n	8001738 <__gedf2+0x68>
 8001706:	2a00      	cmp	r2, #0
 8001708:	d12a      	bne.n	8001760 <__gedf2+0x90>
 800170a:	433c      	orrs	r4, r7
 800170c:	46a3      	mov	fp, r4
 800170e:	4265      	negs	r5, r4
 8001710:	4165      	adcs	r5, r4
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <__gedf2+0x4c>
 8001716:	464c      	mov	r4, r9
 8001718:	4326      	orrs	r6, r4
 800171a:	d027      	beq.n	800176c <__gedf2+0x9c>
 800171c:	2d00      	cmp	r5, #0
 800171e:	d115      	bne.n	800174c <__gedf2+0x7c>
 8001720:	4281      	cmp	r1, r0
 8001722:	d028      	beq.n	8001776 <__gedf2+0xa6>
 8001724:	2002      	movs	r0, #2
 8001726:	3901      	subs	r1, #1
 8001728:	4008      	ands	r0, r1
 800172a:	3801      	subs	r0, #1
 800172c:	bcf0      	pop	{r4, r5, r6, r7}
 800172e:	46bb      	mov	fp, r7
 8001730:	46b2      	mov	sl, r6
 8001732:	46a9      	mov	r9, r5
 8001734:	46a0      	mov	r8, r4
 8001736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001738:	464d      	mov	r5, r9
 800173a:	432e      	orrs	r6, r5
 800173c:	d12f      	bne.n	800179e <__gedf2+0xce>
 800173e:	2a00      	cmp	r2, #0
 8001740:	d1ee      	bne.n	8001720 <__gedf2+0x50>
 8001742:	433c      	orrs	r4, r7
 8001744:	4265      	negs	r5, r4
 8001746:	4165      	adcs	r5, r4
 8001748:	2d00      	cmp	r5, #0
 800174a:	d0e9      	beq.n	8001720 <__gedf2+0x50>
 800174c:	2800      	cmp	r0, #0
 800174e:	d1ed      	bne.n	800172c <__gedf2+0x5c>
 8001750:	2001      	movs	r0, #1
 8001752:	4240      	negs	r0, r0
 8001754:	e7ea      	b.n	800172c <__gedf2+0x5c>
 8001756:	003d      	movs	r5, r7
 8001758:	4325      	orrs	r5, r4
 800175a:	d120      	bne.n	800179e <__gedf2+0xce>
 800175c:	4293      	cmp	r3, r2
 800175e:	d0eb      	beq.n	8001738 <__gedf2+0x68>
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1dd      	bne.n	8001720 <__gedf2+0x50>
 8001764:	464c      	mov	r4, r9
 8001766:	4326      	orrs	r6, r4
 8001768:	d1da      	bne.n	8001720 <__gedf2+0x50>
 800176a:	e7db      	b.n	8001724 <__gedf2+0x54>
 800176c:	465b      	mov	r3, fp
 800176e:	2000      	movs	r0, #0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0db      	beq.n	800172c <__gedf2+0x5c>
 8001774:	e7d6      	b.n	8001724 <__gedf2+0x54>
 8001776:	429a      	cmp	r2, r3
 8001778:	dc0a      	bgt.n	8001790 <__gedf2+0xc0>
 800177a:	dbe7      	blt.n	800174c <__gedf2+0x7c>
 800177c:	454f      	cmp	r7, r9
 800177e:	d8d1      	bhi.n	8001724 <__gedf2+0x54>
 8001780:	d010      	beq.n	80017a4 <__gedf2+0xd4>
 8001782:	2000      	movs	r0, #0
 8001784:	454f      	cmp	r7, r9
 8001786:	d2d1      	bcs.n	800172c <__gedf2+0x5c>
 8001788:	2900      	cmp	r1, #0
 800178a:	d0e1      	beq.n	8001750 <__gedf2+0x80>
 800178c:	0008      	movs	r0, r1
 800178e:	e7cd      	b.n	800172c <__gedf2+0x5c>
 8001790:	4243      	negs	r3, r0
 8001792:	4158      	adcs	r0, r3
 8001794:	2302      	movs	r3, #2
 8001796:	4240      	negs	r0, r0
 8001798:	4018      	ands	r0, r3
 800179a:	3801      	subs	r0, #1
 800179c:	e7c6      	b.n	800172c <__gedf2+0x5c>
 800179e:	2002      	movs	r0, #2
 80017a0:	4240      	negs	r0, r0
 80017a2:	e7c3      	b.n	800172c <__gedf2+0x5c>
 80017a4:	45c4      	cmp	ip, r8
 80017a6:	d8bd      	bhi.n	8001724 <__gedf2+0x54>
 80017a8:	2000      	movs	r0, #0
 80017aa:	45c4      	cmp	ip, r8
 80017ac:	d2be      	bcs.n	800172c <__gedf2+0x5c>
 80017ae:	e7eb      	b.n	8001788 <__gedf2+0xb8>
 80017b0:	000007ff 	.word	0x000007ff

080017b4 <__ledf2>:
 80017b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b6:	464e      	mov	r6, r9
 80017b8:	4645      	mov	r5, r8
 80017ba:	4657      	mov	r7, sl
 80017bc:	46de      	mov	lr, fp
 80017be:	0004      	movs	r4, r0
 80017c0:	0018      	movs	r0, r3
 80017c2:	b5e0      	push	{r5, r6, r7, lr}
 80017c4:	0016      	movs	r6, r2
 80017c6:	031b      	lsls	r3, r3, #12
 80017c8:	0b1b      	lsrs	r3, r3, #12
 80017ca:	4d31      	ldr	r5, [pc, #196]	; (8001890 <__ledf2+0xdc>)
 80017cc:	030f      	lsls	r7, r1, #12
 80017ce:	004a      	lsls	r2, r1, #1
 80017d0:	4699      	mov	r9, r3
 80017d2:	0043      	lsls	r3, r0, #1
 80017d4:	46a4      	mov	ip, r4
 80017d6:	46b0      	mov	r8, r6
 80017d8:	0b3f      	lsrs	r7, r7, #12
 80017da:	0d52      	lsrs	r2, r2, #21
 80017dc:	0fc9      	lsrs	r1, r1, #31
 80017de:	0d5b      	lsrs	r3, r3, #21
 80017e0:	0fc0      	lsrs	r0, r0, #31
 80017e2:	42aa      	cmp	r2, r5
 80017e4:	d011      	beq.n	800180a <__ledf2+0x56>
 80017e6:	42ab      	cmp	r3, r5
 80017e8:	d014      	beq.n	8001814 <__ledf2+0x60>
 80017ea:	2a00      	cmp	r2, #0
 80017ec:	d12f      	bne.n	800184e <__ledf2+0x9a>
 80017ee:	433c      	orrs	r4, r7
 80017f0:	46a3      	mov	fp, r4
 80017f2:	4265      	negs	r5, r4
 80017f4:	4165      	adcs	r5, r4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d114      	bne.n	8001824 <__ledf2+0x70>
 80017fa:	464c      	mov	r4, r9
 80017fc:	4326      	orrs	r6, r4
 80017fe:	d111      	bne.n	8001824 <__ledf2+0x70>
 8001800:	465b      	mov	r3, fp
 8001802:	2000      	movs	r0, #0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d017      	beq.n	8001838 <__ledf2+0x84>
 8001808:	e010      	b.n	800182c <__ledf2+0x78>
 800180a:	003d      	movs	r5, r7
 800180c:	4325      	orrs	r5, r4
 800180e:	d112      	bne.n	8001836 <__ledf2+0x82>
 8001810:	4293      	cmp	r3, r2
 8001812:	d11c      	bne.n	800184e <__ledf2+0x9a>
 8001814:	464d      	mov	r5, r9
 8001816:	432e      	orrs	r6, r5
 8001818:	d10d      	bne.n	8001836 <__ledf2+0x82>
 800181a:	2a00      	cmp	r2, #0
 800181c:	d104      	bne.n	8001828 <__ledf2+0x74>
 800181e:	433c      	orrs	r4, r7
 8001820:	4265      	negs	r5, r4
 8001822:	4165      	adcs	r5, r4
 8001824:	2d00      	cmp	r5, #0
 8001826:	d10d      	bne.n	8001844 <__ledf2+0x90>
 8001828:	4281      	cmp	r1, r0
 800182a:	d016      	beq.n	800185a <__ledf2+0xa6>
 800182c:	2002      	movs	r0, #2
 800182e:	3901      	subs	r1, #1
 8001830:	4008      	ands	r0, r1
 8001832:	3801      	subs	r0, #1
 8001834:	e000      	b.n	8001838 <__ledf2+0x84>
 8001836:	2002      	movs	r0, #2
 8001838:	bcf0      	pop	{r4, r5, r6, r7}
 800183a:	46bb      	mov	fp, r7
 800183c:	46b2      	mov	sl, r6
 800183e:	46a9      	mov	r9, r5
 8001840:	46a0      	mov	r8, r4
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001844:	2800      	cmp	r0, #0
 8001846:	d1f7      	bne.n	8001838 <__ledf2+0x84>
 8001848:	2001      	movs	r0, #1
 800184a:	4240      	negs	r0, r0
 800184c:	e7f4      	b.n	8001838 <__ledf2+0x84>
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ea      	bne.n	8001828 <__ledf2+0x74>
 8001852:	464c      	mov	r4, r9
 8001854:	4326      	orrs	r6, r4
 8001856:	d1e7      	bne.n	8001828 <__ledf2+0x74>
 8001858:	e7e8      	b.n	800182c <__ledf2+0x78>
 800185a:	429a      	cmp	r2, r3
 800185c:	dd06      	ble.n	800186c <__ledf2+0xb8>
 800185e:	4243      	negs	r3, r0
 8001860:	4158      	adcs	r0, r3
 8001862:	2302      	movs	r3, #2
 8001864:	4240      	negs	r0, r0
 8001866:	4018      	ands	r0, r3
 8001868:	3801      	subs	r0, #1
 800186a:	e7e5      	b.n	8001838 <__ledf2+0x84>
 800186c:	429a      	cmp	r2, r3
 800186e:	dbe9      	blt.n	8001844 <__ledf2+0x90>
 8001870:	454f      	cmp	r7, r9
 8001872:	d8db      	bhi.n	800182c <__ledf2+0x78>
 8001874:	d006      	beq.n	8001884 <__ledf2+0xd0>
 8001876:	2000      	movs	r0, #0
 8001878:	454f      	cmp	r7, r9
 800187a:	d2dd      	bcs.n	8001838 <__ledf2+0x84>
 800187c:	2900      	cmp	r1, #0
 800187e:	d0e3      	beq.n	8001848 <__ledf2+0x94>
 8001880:	0008      	movs	r0, r1
 8001882:	e7d9      	b.n	8001838 <__ledf2+0x84>
 8001884:	45c4      	cmp	ip, r8
 8001886:	d8d1      	bhi.n	800182c <__ledf2+0x78>
 8001888:	2000      	movs	r0, #0
 800188a:	45c4      	cmp	ip, r8
 800188c:	d2d4      	bcs.n	8001838 <__ledf2+0x84>
 800188e:	e7f5      	b.n	800187c <__ledf2+0xc8>
 8001890:	000007ff 	.word	0x000007ff

08001894 <__aeabi_dmul>:
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	4657      	mov	r7, sl
 8001898:	464e      	mov	r6, r9
 800189a:	4645      	mov	r5, r8
 800189c:	46de      	mov	lr, fp
 800189e:	b5e0      	push	{r5, r6, r7, lr}
 80018a0:	4698      	mov	r8, r3
 80018a2:	030c      	lsls	r4, r1, #12
 80018a4:	004b      	lsls	r3, r1, #1
 80018a6:	0006      	movs	r6, r0
 80018a8:	4692      	mov	sl, r2
 80018aa:	b087      	sub	sp, #28
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	0d5b      	lsrs	r3, r3, #21
 80018b0:	0fcf      	lsrs	r7, r1, #31
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d06c      	beq.n	8001990 <__aeabi_dmul+0xfc>
 80018b6:	4add      	ldr	r2, [pc, #884]	; (8001c2c <__aeabi_dmul+0x398>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d100      	bne.n	80018be <__aeabi_dmul+0x2a>
 80018bc:	e086      	b.n	80019cc <__aeabi_dmul+0x138>
 80018be:	0f42      	lsrs	r2, r0, #29
 80018c0:	00e4      	lsls	r4, r4, #3
 80018c2:	4314      	orrs	r4, r2
 80018c4:	2280      	movs	r2, #128	; 0x80
 80018c6:	0412      	lsls	r2, r2, #16
 80018c8:	4314      	orrs	r4, r2
 80018ca:	4ad9      	ldr	r2, [pc, #868]	; (8001c30 <__aeabi_dmul+0x39c>)
 80018cc:	00c5      	lsls	r5, r0, #3
 80018ce:	4694      	mov	ip, r2
 80018d0:	4463      	add	r3, ip
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	4699      	mov	r9, r3
 80018d8:	469b      	mov	fp, r3
 80018da:	4643      	mov	r3, r8
 80018dc:	4642      	mov	r2, r8
 80018de:	031e      	lsls	r6, r3, #12
 80018e0:	0fd2      	lsrs	r2, r2, #31
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4650      	mov	r0, sl
 80018e6:	4690      	mov	r8, r2
 80018e8:	0b36      	lsrs	r6, r6, #12
 80018ea:	0d5b      	lsrs	r3, r3, #21
 80018ec:	d100      	bne.n	80018f0 <__aeabi_dmul+0x5c>
 80018ee:	e078      	b.n	80019e2 <__aeabi_dmul+0x14e>
 80018f0:	4ace      	ldr	r2, [pc, #824]	; (8001c2c <__aeabi_dmul+0x398>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01d      	beq.n	8001932 <__aeabi_dmul+0x9e>
 80018f6:	49ce      	ldr	r1, [pc, #824]	; (8001c30 <__aeabi_dmul+0x39c>)
 80018f8:	0f42      	lsrs	r2, r0, #29
 80018fa:	468c      	mov	ip, r1
 80018fc:	9900      	ldr	r1, [sp, #0]
 80018fe:	4463      	add	r3, ip
 8001900:	00f6      	lsls	r6, r6, #3
 8001902:	468c      	mov	ip, r1
 8001904:	4316      	orrs	r6, r2
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	449c      	add	ip, r3
 800190a:	0412      	lsls	r2, r2, #16
 800190c:	4663      	mov	r3, ip
 800190e:	4316      	orrs	r6, r2
 8001910:	00c2      	lsls	r2, r0, #3
 8001912:	2000      	movs	r0, #0
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	9900      	ldr	r1, [sp, #0]
 8001918:	4643      	mov	r3, r8
 800191a:	3101      	adds	r1, #1
 800191c:	468c      	mov	ip, r1
 800191e:	4649      	mov	r1, r9
 8001920:	407b      	eors	r3, r7
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	290f      	cmp	r1, #15
 8001926:	d900      	bls.n	800192a <__aeabi_dmul+0x96>
 8001928:	e07e      	b.n	8001a28 <__aeabi_dmul+0x194>
 800192a:	4bc2      	ldr	r3, [pc, #776]	; (8001c34 <__aeabi_dmul+0x3a0>)
 800192c:	0089      	lsls	r1, r1, #2
 800192e:	5859      	ldr	r1, [r3, r1]
 8001930:	468f      	mov	pc, r1
 8001932:	4652      	mov	r2, sl
 8001934:	9b00      	ldr	r3, [sp, #0]
 8001936:	4332      	orrs	r2, r6
 8001938:	d000      	beq.n	800193c <__aeabi_dmul+0xa8>
 800193a:	e156      	b.n	8001bea <__aeabi_dmul+0x356>
 800193c:	49bb      	ldr	r1, [pc, #748]	; (8001c2c <__aeabi_dmul+0x398>)
 800193e:	2600      	movs	r6, #0
 8001940:	468c      	mov	ip, r1
 8001942:	4463      	add	r3, ip
 8001944:	4649      	mov	r1, r9
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2302      	movs	r3, #2
 800194a:	4319      	orrs	r1, r3
 800194c:	4689      	mov	r9, r1
 800194e:	2002      	movs	r0, #2
 8001950:	e7e1      	b.n	8001916 <__aeabi_dmul+0x82>
 8001952:	4643      	mov	r3, r8
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	0034      	movs	r4, r6
 8001958:	0015      	movs	r5, r2
 800195a:	4683      	mov	fp, r0
 800195c:	465b      	mov	r3, fp
 800195e:	2b02      	cmp	r3, #2
 8001960:	d05e      	beq.n	8001a20 <__aeabi_dmul+0x18c>
 8001962:	2b03      	cmp	r3, #3
 8001964:	d100      	bne.n	8001968 <__aeabi_dmul+0xd4>
 8001966:	e1f3      	b.n	8001d50 <__aeabi_dmul+0x4bc>
 8001968:	2b01      	cmp	r3, #1
 800196a:	d000      	beq.n	800196e <__aeabi_dmul+0xda>
 800196c:	e118      	b.n	8001ba0 <__aeabi_dmul+0x30c>
 800196e:	2200      	movs	r2, #0
 8001970:	2400      	movs	r4, #0
 8001972:	2500      	movs	r5, #0
 8001974:	9b01      	ldr	r3, [sp, #4]
 8001976:	0512      	lsls	r2, r2, #20
 8001978:	4322      	orrs	r2, r4
 800197a:	07db      	lsls	r3, r3, #31
 800197c:	431a      	orrs	r2, r3
 800197e:	0028      	movs	r0, r5
 8001980:	0011      	movs	r1, r2
 8001982:	b007      	add	sp, #28
 8001984:	bcf0      	pop	{r4, r5, r6, r7}
 8001986:	46bb      	mov	fp, r7
 8001988:	46b2      	mov	sl, r6
 800198a:	46a9      	mov	r9, r5
 800198c:	46a0      	mov	r8, r4
 800198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001990:	0025      	movs	r5, r4
 8001992:	4305      	orrs	r5, r0
 8001994:	d100      	bne.n	8001998 <__aeabi_dmul+0x104>
 8001996:	e141      	b.n	8001c1c <__aeabi_dmul+0x388>
 8001998:	2c00      	cmp	r4, #0
 800199a:	d100      	bne.n	800199e <__aeabi_dmul+0x10a>
 800199c:	e1ad      	b.n	8001cfa <__aeabi_dmul+0x466>
 800199e:	0020      	movs	r0, r4
 80019a0:	f000 fef0 	bl	8002784 <__clzsi2>
 80019a4:	0001      	movs	r1, r0
 80019a6:	0002      	movs	r2, r0
 80019a8:	390b      	subs	r1, #11
 80019aa:	231d      	movs	r3, #29
 80019ac:	0010      	movs	r0, r2
 80019ae:	1a5b      	subs	r3, r3, r1
 80019b0:	0031      	movs	r1, r6
 80019b2:	0035      	movs	r5, r6
 80019b4:	3808      	subs	r0, #8
 80019b6:	4084      	lsls	r4, r0
 80019b8:	40d9      	lsrs	r1, r3
 80019ba:	4085      	lsls	r5, r0
 80019bc:	430c      	orrs	r4, r1
 80019be:	489e      	ldr	r0, [pc, #632]	; (8001c38 <__aeabi_dmul+0x3a4>)
 80019c0:	1a83      	subs	r3, r0, r2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2300      	movs	r3, #0
 80019c6:	4699      	mov	r9, r3
 80019c8:	469b      	mov	fp, r3
 80019ca:	e786      	b.n	80018da <__aeabi_dmul+0x46>
 80019cc:	0005      	movs	r5, r0
 80019ce:	4325      	orrs	r5, r4
 80019d0:	d000      	beq.n	80019d4 <__aeabi_dmul+0x140>
 80019d2:	e11c      	b.n	8001c0e <__aeabi_dmul+0x37a>
 80019d4:	2208      	movs	r2, #8
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2302      	movs	r3, #2
 80019da:	2400      	movs	r4, #0
 80019dc:	4691      	mov	r9, r2
 80019de:	469b      	mov	fp, r3
 80019e0:	e77b      	b.n	80018da <__aeabi_dmul+0x46>
 80019e2:	4652      	mov	r2, sl
 80019e4:	4332      	orrs	r2, r6
 80019e6:	d100      	bne.n	80019ea <__aeabi_dmul+0x156>
 80019e8:	e10a      	b.n	8001c00 <__aeabi_dmul+0x36c>
 80019ea:	2e00      	cmp	r6, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_dmul+0x15c>
 80019ee:	e176      	b.n	8001cde <__aeabi_dmul+0x44a>
 80019f0:	0030      	movs	r0, r6
 80019f2:	f000 fec7 	bl	8002784 <__clzsi2>
 80019f6:	0002      	movs	r2, r0
 80019f8:	3a0b      	subs	r2, #11
 80019fa:	231d      	movs	r3, #29
 80019fc:	0001      	movs	r1, r0
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	4652      	mov	r2, sl
 8001a02:	3908      	subs	r1, #8
 8001a04:	40da      	lsrs	r2, r3
 8001a06:	408e      	lsls	r6, r1
 8001a08:	4316      	orrs	r6, r2
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	408a      	lsls	r2, r1
 8001a0e:	9b00      	ldr	r3, [sp, #0]
 8001a10:	4989      	ldr	r1, [pc, #548]	; (8001c38 <__aeabi_dmul+0x3a4>)
 8001a12:	1a18      	subs	r0, r3, r0
 8001a14:	0003      	movs	r3, r0
 8001a16:	468c      	mov	ip, r1
 8001a18:	4463      	add	r3, ip
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	e77a      	b.n	8001916 <__aeabi_dmul+0x82>
 8001a20:	2400      	movs	r4, #0
 8001a22:	2500      	movs	r5, #0
 8001a24:	4a81      	ldr	r2, [pc, #516]	; (8001c2c <__aeabi_dmul+0x398>)
 8001a26:	e7a5      	b.n	8001974 <__aeabi_dmul+0xe0>
 8001a28:	0c2f      	lsrs	r7, r5, #16
 8001a2a:	042d      	lsls	r5, r5, #16
 8001a2c:	0c2d      	lsrs	r5, r5, #16
 8001a2e:	002b      	movs	r3, r5
 8001a30:	0c11      	lsrs	r1, r2, #16
 8001a32:	0412      	lsls	r2, r2, #16
 8001a34:	0c12      	lsrs	r2, r2, #16
 8001a36:	4353      	muls	r3, r2
 8001a38:	4698      	mov	r8, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	0028      	movs	r0, r5
 8001a3e:	437b      	muls	r3, r7
 8001a40:	4699      	mov	r9, r3
 8001a42:	4348      	muls	r0, r1
 8001a44:	4448      	add	r0, r9
 8001a46:	4683      	mov	fp, r0
 8001a48:	4640      	mov	r0, r8
 8001a4a:	000b      	movs	r3, r1
 8001a4c:	0c00      	lsrs	r0, r0, #16
 8001a4e:	4682      	mov	sl, r0
 8001a50:	4658      	mov	r0, fp
 8001a52:	437b      	muls	r3, r7
 8001a54:	4450      	add	r0, sl
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	4581      	cmp	r9, r0
 8001a5a:	d906      	bls.n	8001a6a <__aeabi_dmul+0x1d6>
 8001a5c:	469a      	mov	sl, r3
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	025b      	lsls	r3, r3, #9
 8001a62:	4699      	mov	r9, r3
 8001a64:	44ca      	add	sl, r9
 8001a66:	4653      	mov	r3, sl
 8001a68:	9302      	str	r3, [sp, #8]
 8001a6a:	0c03      	lsrs	r3, r0, #16
 8001a6c:	469b      	mov	fp, r3
 8001a6e:	4643      	mov	r3, r8
 8001a70:	041b      	lsls	r3, r3, #16
 8001a72:	0400      	lsls	r0, r0, #16
 8001a74:	0c1b      	lsrs	r3, r3, #16
 8001a76:	4698      	mov	r8, r3
 8001a78:	0003      	movs	r3, r0
 8001a7a:	4443      	add	r3, r8
 8001a7c:	9304      	str	r3, [sp, #16]
 8001a7e:	0c33      	lsrs	r3, r6, #16
 8001a80:	4699      	mov	r9, r3
 8001a82:	002b      	movs	r3, r5
 8001a84:	0436      	lsls	r6, r6, #16
 8001a86:	0c36      	lsrs	r6, r6, #16
 8001a88:	4373      	muls	r3, r6
 8001a8a:	4698      	mov	r8, r3
 8001a8c:	0033      	movs	r3, r6
 8001a8e:	437b      	muls	r3, r7
 8001a90:	469a      	mov	sl, r3
 8001a92:	464b      	mov	r3, r9
 8001a94:	435d      	muls	r5, r3
 8001a96:	435f      	muls	r7, r3
 8001a98:	4643      	mov	r3, r8
 8001a9a:	4455      	add	r5, sl
 8001a9c:	0c18      	lsrs	r0, r3, #16
 8001a9e:	1940      	adds	r0, r0, r5
 8001aa0:	4582      	cmp	sl, r0
 8001aa2:	d903      	bls.n	8001aac <__aeabi_dmul+0x218>
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	025b      	lsls	r3, r3, #9
 8001aa8:	469a      	mov	sl, r3
 8001aaa:	4457      	add	r7, sl
 8001aac:	0c05      	lsrs	r5, r0, #16
 8001aae:	19eb      	adds	r3, r5, r7
 8001ab0:	9305      	str	r3, [sp, #20]
 8001ab2:	4643      	mov	r3, r8
 8001ab4:	041d      	lsls	r5, r3, #16
 8001ab6:	0c2d      	lsrs	r5, r5, #16
 8001ab8:	0400      	lsls	r0, r0, #16
 8001aba:	1940      	adds	r0, r0, r5
 8001abc:	0c25      	lsrs	r5, r4, #16
 8001abe:	0424      	lsls	r4, r4, #16
 8001ac0:	0c24      	lsrs	r4, r4, #16
 8001ac2:	0027      	movs	r7, r4
 8001ac4:	4357      	muls	r7, r2
 8001ac6:	436a      	muls	r2, r5
 8001ac8:	4690      	mov	r8, r2
 8001aca:	002a      	movs	r2, r5
 8001acc:	0c3b      	lsrs	r3, r7, #16
 8001ace:	469a      	mov	sl, r3
 8001ad0:	434a      	muls	r2, r1
 8001ad2:	4361      	muls	r1, r4
 8001ad4:	4441      	add	r1, r8
 8001ad6:	4451      	add	r1, sl
 8001ad8:	4483      	add	fp, r0
 8001ada:	4588      	cmp	r8, r1
 8001adc:	d903      	bls.n	8001ae6 <__aeabi_dmul+0x252>
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	025b      	lsls	r3, r3, #9
 8001ae2:	4698      	mov	r8, r3
 8001ae4:	4442      	add	r2, r8
 8001ae6:	043f      	lsls	r7, r7, #16
 8001ae8:	0c0b      	lsrs	r3, r1, #16
 8001aea:	0c3f      	lsrs	r7, r7, #16
 8001aec:	0409      	lsls	r1, r1, #16
 8001aee:	19c9      	adds	r1, r1, r7
 8001af0:	0027      	movs	r7, r4
 8001af2:	4698      	mov	r8, r3
 8001af4:	464b      	mov	r3, r9
 8001af6:	4377      	muls	r7, r6
 8001af8:	435c      	muls	r4, r3
 8001afa:	436e      	muls	r6, r5
 8001afc:	435d      	muls	r5, r3
 8001afe:	0c3b      	lsrs	r3, r7, #16
 8001b00:	4699      	mov	r9, r3
 8001b02:	19a4      	adds	r4, r4, r6
 8001b04:	444c      	add	r4, r9
 8001b06:	4442      	add	r2, r8
 8001b08:	9503      	str	r5, [sp, #12]
 8001b0a:	42a6      	cmp	r6, r4
 8001b0c:	d904      	bls.n	8001b18 <__aeabi_dmul+0x284>
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	4698      	mov	r8, r3
 8001b14:	4445      	add	r5, r8
 8001b16:	9503      	str	r5, [sp, #12]
 8001b18:	9b02      	ldr	r3, [sp, #8]
 8001b1a:	043f      	lsls	r7, r7, #16
 8001b1c:	445b      	add	r3, fp
 8001b1e:	001e      	movs	r6, r3
 8001b20:	4283      	cmp	r3, r0
 8001b22:	4180      	sbcs	r0, r0
 8001b24:	0423      	lsls	r3, r4, #16
 8001b26:	4698      	mov	r8, r3
 8001b28:	9b05      	ldr	r3, [sp, #20]
 8001b2a:	0c3f      	lsrs	r7, r7, #16
 8001b2c:	4447      	add	r7, r8
 8001b2e:	4698      	mov	r8, r3
 8001b30:	1876      	adds	r6, r6, r1
 8001b32:	428e      	cmp	r6, r1
 8001b34:	4189      	sbcs	r1, r1
 8001b36:	4447      	add	r7, r8
 8001b38:	4240      	negs	r0, r0
 8001b3a:	183d      	adds	r5, r7, r0
 8001b3c:	46a8      	mov	r8, r5
 8001b3e:	4693      	mov	fp, r2
 8001b40:	4249      	negs	r1, r1
 8001b42:	468a      	mov	sl, r1
 8001b44:	44c3      	add	fp, r8
 8001b46:	429f      	cmp	r7, r3
 8001b48:	41bf      	sbcs	r7, r7
 8001b4a:	4580      	cmp	r8, r0
 8001b4c:	4180      	sbcs	r0, r0
 8001b4e:	9b03      	ldr	r3, [sp, #12]
 8001b50:	44da      	add	sl, fp
 8001b52:	4698      	mov	r8, r3
 8001b54:	4653      	mov	r3, sl
 8001b56:	4240      	negs	r0, r0
 8001b58:	427f      	negs	r7, r7
 8001b5a:	4307      	orrs	r7, r0
 8001b5c:	0c24      	lsrs	r4, r4, #16
 8001b5e:	4593      	cmp	fp, r2
 8001b60:	4192      	sbcs	r2, r2
 8001b62:	458a      	cmp	sl, r1
 8001b64:	4189      	sbcs	r1, r1
 8001b66:	193f      	adds	r7, r7, r4
 8001b68:	0ddc      	lsrs	r4, r3, #23
 8001b6a:	9b04      	ldr	r3, [sp, #16]
 8001b6c:	0275      	lsls	r5, r6, #9
 8001b6e:	431d      	orrs	r5, r3
 8001b70:	1e68      	subs	r0, r5, #1
 8001b72:	4185      	sbcs	r5, r0
 8001b74:	4653      	mov	r3, sl
 8001b76:	4252      	negs	r2, r2
 8001b78:	4249      	negs	r1, r1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	18bf      	adds	r7, r7, r2
 8001b7e:	4447      	add	r7, r8
 8001b80:	0df6      	lsrs	r6, r6, #23
 8001b82:	027f      	lsls	r7, r7, #9
 8001b84:	4335      	orrs	r5, r6
 8001b86:	025a      	lsls	r2, r3, #9
 8001b88:	433c      	orrs	r4, r7
 8001b8a:	4315      	orrs	r5, r2
 8001b8c:	01fb      	lsls	r3, r7, #7
 8001b8e:	d400      	bmi.n	8001b92 <__aeabi_dmul+0x2fe>
 8001b90:	e0c1      	b.n	8001d16 <__aeabi_dmul+0x482>
 8001b92:	2101      	movs	r1, #1
 8001b94:	086a      	lsrs	r2, r5, #1
 8001b96:	400d      	ands	r5, r1
 8001b98:	4315      	orrs	r5, r2
 8001b9a:	07e2      	lsls	r2, r4, #31
 8001b9c:	4315      	orrs	r5, r2
 8001b9e:	0864      	lsrs	r4, r4, #1
 8001ba0:	4926      	ldr	r1, [pc, #152]	; (8001c3c <__aeabi_dmul+0x3a8>)
 8001ba2:	4461      	add	r1, ip
 8001ba4:	2900      	cmp	r1, #0
 8001ba6:	dd56      	ble.n	8001c56 <__aeabi_dmul+0x3c2>
 8001ba8:	076b      	lsls	r3, r5, #29
 8001baa:	d009      	beq.n	8001bc0 <__aeabi_dmul+0x32c>
 8001bac:	220f      	movs	r2, #15
 8001bae:	402a      	ands	r2, r5
 8001bb0:	2a04      	cmp	r2, #4
 8001bb2:	d005      	beq.n	8001bc0 <__aeabi_dmul+0x32c>
 8001bb4:	1d2a      	adds	r2, r5, #4
 8001bb6:	42aa      	cmp	r2, r5
 8001bb8:	41ad      	sbcs	r5, r5
 8001bba:	426d      	negs	r5, r5
 8001bbc:	1964      	adds	r4, r4, r5
 8001bbe:	0015      	movs	r5, r2
 8001bc0:	01e3      	lsls	r3, r4, #7
 8001bc2:	d504      	bpl.n	8001bce <__aeabi_dmul+0x33a>
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <__aeabi_dmul+0x3ac>)
 8001bc8:	00c9      	lsls	r1, r1, #3
 8001bca:	4014      	ands	r4, r2
 8001bcc:	4461      	add	r1, ip
 8001bce:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <__aeabi_dmul+0x3b0>)
 8001bd0:	4291      	cmp	r1, r2
 8001bd2:	dd00      	ble.n	8001bd6 <__aeabi_dmul+0x342>
 8001bd4:	e724      	b.n	8001a20 <__aeabi_dmul+0x18c>
 8001bd6:	0762      	lsls	r2, r4, #29
 8001bd8:	08ed      	lsrs	r5, r5, #3
 8001bda:	0264      	lsls	r4, r4, #9
 8001bdc:	0549      	lsls	r1, r1, #21
 8001bde:	4315      	orrs	r5, r2
 8001be0:	0b24      	lsrs	r4, r4, #12
 8001be2:	0d4a      	lsrs	r2, r1, #21
 8001be4:	e6c6      	b.n	8001974 <__aeabi_dmul+0xe0>
 8001be6:	9701      	str	r7, [sp, #4]
 8001be8:	e6b8      	b.n	800195c <__aeabi_dmul+0xc8>
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <__aeabi_dmul+0x398>)
 8001bec:	2003      	movs	r0, #3
 8001bee:	4694      	mov	ip, r2
 8001bf0:	4463      	add	r3, ip
 8001bf2:	464a      	mov	r2, r9
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	4691      	mov	r9, r2
 8001bfc:	4652      	mov	r2, sl
 8001bfe:	e68a      	b.n	8001916 <__aeabi_dmul+0x82>
 8001c00:	4649      	mov	r1, r9
 8001c02:	2301      	movs	r3, #1
 8001c04:	4319      	orrs	r1, r3
 8001c06:	4689      	mov	r9, r1
 8001c08:	2600      	movs	r6, #0
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	e683      	b.n	8001916 <__aeabi_dmul+0x82>
 8001c0e:	220c      	movs	r2, #12
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2303      	movs	r3, #3
 8001c14:	0005      	movs	r5, r0
 8001c16:	4691      	mov	r9, r2
 8001c18:	469b      	mov	fp, r3
 8001c1a:	e65e      	b.n	80018da <__aeabi_dmul+0x46>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	4699      	mov	r9, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	2400      	movs	r4, #0
 8001c28:	469b      	mov	fp, r3
 8001c2a:	e656      	b.n	80018da <__aeabi_dmul+0x46>
 8001c2c:	000007ff 	.word	0x000007ff
 8001c30:	fffffc01 	.word	0xfffffc01
 8001c34:	0800b2f8 	.word	0x0800b2f8
 8001c38:	fffffc0d 	.word	0xfffffc0d
 8001c3c:	000003ff 	.word	0x000003ff
 8001c40:	feffffff 	.word	0xfeffffff
 8001c44:	000007fe 	.word	0x000007fe
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2480      	movs	r4, #128	; 0x80
 8001c4c:	2500      	movs	r5, #0
 8001c4e:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <__aeabi_dmul+0x4cc>)
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	0324      	lsls	r4, r4, #12
 8001c54:	e68e      	b.n	8001974 <__aeabi_dmul+0xe0>
 8001c56:	2001      	movs	r0, #1
 8001c58:	1a40      	subs	r0, r0, r1
 8001c5a:	2838      	cmp	r0, #56	; 0x38
 8001c5c:	dd00      	ble.n	8001c60 <__aeabi_dmul+0x3cc>
 8001c5e:	e686      	b.n	800196e <__aeabi_dmul+0xda>
 8001c60:	281f      	cmp	r0, #31
 8001c62:	dd5b      	ble.n	8001d1c <__aeabi_dmul+0x488>
 8001c64:	221f      	movs	r2, #31
 8001c66:	0023      	movs	r3, r4
 8001c68:	4252      	negs	r2, r2
 8001c6a:	1a51      	subs	r1, r2, r1
 8001c6c:	40cb      	lsrs	r3, r1
 8001c6e:	0019      	movs	r1, r3
 8001c70:	2820      	cmp	r0, #32
 8001c72:	d003      	beq.n	8001c7c <__aeabi_dmul+0x3e8>
 8001c74:	4a3b      	ldr	r2, [pc, #236]	; (8001d64 <__aeabi_dmul+0x4d0>)
 8001c76:	4462      	add	r2, ip
 8001c78:	4094      	lsls	r4, r2
 8001c7a:	4325      	orrs	r5, r4
 8001c7c:	1e6a      	subs	r2, r5, #1
 8001c7e:	4195      	sbcs	r5, r2
 8001c80:	002a      	movs	r2, r5
 8001c82:	430a      	orrs	r2, r1
 8001c84:	2107      	movs	r1, #7
 8001c86:	000d      	movs	r5, r1
 8001c88:	2400      	movs	r4, #0
 8001c8a:	4015      	ands	r5, r2
 8001c8c:	4211      	tst	r1, r2
 8001c8e:	d05b      	beq.n	8001d48 <__aeabi_dmul+0x4b4>
 8001c90:	210f      	movs	r1, #15
 8001c92:	2400      	movs	r4, #0
 8001c94:	4011      	ands	r1, r2
 8001c96:	2904      	cmp	r1, #4
 8001c98:	d053      	beq.n	8001d42 <__aeabi_dmul+0x4ae>
 8001c9a:	1d11      	adds	r1, r2, #4
 8001c9c:	4291      	cmp	r1, r2
 8001c9e:	4192      	sbcs	r2, r2
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	18a4      	adds	r4, r4, r2
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	0223      	lsls	r3, r4, #8
 8001ca8:	d54b      	bpl.n	8001d42 <__aeabi_dmul+0x4ae>
 8001caa:	2201      	movs	r2, #1
 8001cac:	2400      	movs	r4, #0
 8001cae:	2500      	movs	r5, #0
 8001cb0:	e660      	b.n	8001974 <__aeabi_dmul+0xe0>
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	031b      	lsls	r3, r3, #12
 8001cb6:	421c      	tst	r4, r3
 8001cb8:	d009      	beq.n	8001cce <__aeabi_dmul+0x43a>
 8001cba:	421e      	tst	r6, r3
 8001cbc:	d107      	bne.n	8001cce <__aeabi_dmul+0x43a>
 8001cbe:	4333      	orrs	r3, r6
 8001cc0:	031c      	lsls	r4, r3, #12
 8001cc2:	4643      	mov	r3, r8
 8001cc4:	0015      	movs	r5, r2
 8001cc6:	0b24      	lsrs	r4, r4, #12
 8001cc8:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <__aeabi_dmul+0x4cc>)
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	e652      	b.n	8001974 <__aeabi_dmul+0xe0>
 8001cce:	2280      	movs	r2, #128	; 0x80
 8001cd0:	0312      	lsls	r2, r2, #12
 8001cd2:	4314      	orrs	r4, r2
 8001cd4:	0324      	lsls	r4, r4, #12
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <__aeabi_dmul+0x4cc>)
 8001cd8:	0b24      	lsrs	r4, r4, #12
 8001cda:	9701      	str	r7, [sp, #4]
 8001cdc:	e64a      	b.n	8001974 <__aeabi_dmul+0xe0>
 8001cde:	f000 fd51 	bl	8002784 <__clzsi2>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	3215      	adds	r2, #21
 8001ce8:	3020      	adds	r0, #32
 8001cea:	2a1c      	cmp	r2, #28
 8001cec:	dc00      	bgt.n	8001cf0 <__aeabi_dmul+0x45c>
 8001cee:	e684      	b.n	80019fa <__aeabi_dmul+0x166>
 8001cf0:	4656      	mov	r6, sl
 8001cf2:	3b08      	subs	r3, #8
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	409e      	lsls	r6, r3
 8001cf8:	e689      	b.n	8001a0e <__aeabi_dmul+0x17a>
 8001cfa:	f000 fd43 	bl	8002784 <__clzsi2>
 8001cfe:	0001      	movs	r1, r0
 8001d00:	0002      	movs	r2, r0
 8001d02:	3115      	adds	r1, #21
 8001d04:	3220      	adds	r2, #32
 8001d06:	291c      	cmp	r1, #28
 8001d08:	dc00      	bgt.n	8001d0c <__aeabi_dmul+0x478>
 8001d0a:	e64e      	b.n	80019aa <__aeabi_dmul+0x116>
 8001d0c:	0034      	movs	r4, r6
 8001d0e:	3808      	subs	r0, #8
 8001d10:	2500      	movs	r5, #0
 8001d12:	4084      	lsls	r4, r0
 8001d14:	e653      	b.n	80019be <__aeabi_dmul+0x12a>
 8001d16:	9b00      	ldr	r3, [sp, #0]
 8001d18:	469c      	mov	ip, r3
 8001d1a:	e741      	b.n	8001ba0 <__aeabi_dmul+0x30c>
 8001d1c:	4912      	ldr	r1, [pc, #72]	; (8001d68 <__aeabi_dmul+0x4d4>)
 8001d1e:	0022      	movs	r2, r4
 8001d20:	4461      	add	r1, ip
 8001d22:	002e      	movs	r6, r5
 8001d24:	408d      	lsls	r5, r1
 8001d26:	408a      	lsls	r2, r1
 8001d28:	40c6      	lsrs	r6, r0
 8001d2a:	1e69      	subs	r1, r5, #1
 8001d2c:	418d      	sbcs	r5, r1
 8001d2e:	4332      	orrs	r2, r6
 8001d30:	432a      	orrs	r2, r5
 8001d32:	40c4      	lsrs	r4, r0
 8001d34:	0753      	lsls	r3, r2, #29
 8001d36:	d0b6      	beq.n	8001ca6 <__aeabi_dmul+0x412>
 8001d38:	210f      	movs	r1, #15
 8001d3a:	4011      	ands	r1, r2
 8001d3c:	2904      	cmp	r1, #4
 8001d3e:	d1ac      	bne.n	8001c9a <__aeabi_dmul+0x406>
 8001d40:	e7b1      	b.n	8001ca6 <__aeabi_dmul+0x412>
 8001d42:	0765      	lsls	r5, r4, #29
 8001d44:	0264      	lsls	r4, r4, #9
 8001d46:	0b24      	lsrs	r4, r4, #12
 8001d48:	08d2      	lsrs	r2, r2, #3
 8001d4a:	4315      	orrs	r5, r2
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	e611      	b.n	8001974 <__aeabi_dmul+0xe0>
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	0312      	lsls	r2, r2, #12
 8001d54:	4314      	orrs	r4, r2
 8001d56:	0324      	lsls	r4, r4, #12
 8001d58:	4a01      	ldr	r2, [pc, #4]	; (8001d60 <__aeabi_dmul+0x4cc>)
 8001d5a:	0b24      	lsrs	r4, r4, #12
 8001d5c:	e60a      	b.n	8001974 <__aeabi_dmul+0xe0>
 8001d5e:	46c0      	nop			; (mov r8, r8)
 8001d60:	000007ff 	.word	0x000007ff
 8001d64:	0000043e 	.word	0x0000043e
 8001d68:	0000041e 	.word	0x0000041e

08001d6c <__aeabi_dsub>:
 8001d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6e:	4657      	mov	r7, sl
 8001d70:	464e      	mov	r6, r9
 8001d72:	4645      	mov	r5, r8
 8001d74:	46de      	mov	lr, fp
 8001d76:	0004      	movs	r4, r0
 8001d78:	b5e0      	push	{r5, r6, r7, lr}
 8001d7a:	001f      	movs	r7, r3
 8001d7c:	0010      	movs	r0, r2
 8001d7e:	030b      	lsls	r3, r1, #12
 8001d80:	0f62      	lsrs	r2, r4, #29
 8001d82:	004e      	lsls	r6, r1, #1
 8001d84:	0fcd      	lsrs	r5, r1, #31
 8001d86:	0a5b      	lsrs	r3, r3, #9
 8001d88:	0339      	lsls	r1, r7, #12
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	0a49      	lsrs	r1, r1, #9
 8001d8e:	00e2      	lsls	r2, r4, #3
 8001d90:	0f44      	lsrs	r4, r0, #29
 8001d92:	4321      	orrs	r1, r4
 8001d94:	4cc2      	ldr	r4, [pc, #776]	; (80020a0 <__aeabi_dsub+0x334>)
 8001d96:	4691      	mov	r9, r2
 8001d98:	4692      	mov	sl, r2
 8001d9a:	00c0      	lsls	r0, r0, #3
 8001d9c:	007a      	lsls	r2, r7, #1
 8001d9e:	4680      	mov	r8, r0
 8001da0:	0d76      	lsrs	r6, r6, #21
 8001da2:	0d52      	lsrs	r2, r2, #21
 8001da4:	0fff      	lsrs	r7, r7, #31
 8001da6:	42a2      	cmp	r2, r4
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x40>
 8001daa:	e0b4      	b.n	8001f16 <__aeabi_dsub+0x1aa>
 8001dac:	2401      	movs	r4, #1
 8001dae:	4067      	eors	r7, r4
 8001db0:	46bb      	mov	fp, r7
 8001db2:	42bd      	cmp	r5, r7
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x4c>
 8001db6:	e088      	b.n	8001eca <__aeabi_dsub+0x15e>
 8001db8:	1ab4      	subs	r4, r6, r2
 8001dba:	46a4      	mov	ip, r4
 8001dbc:	2c00      	cmp	r4, #0
 8001dbe:	dc00      	bgt.n	8001dc2 <__aeabi_dsub+0x56>
 8001dc0:	e0b2      	b.n	8001f28 <__aeabi_dsub+0x1bc>
 8001dc2:	2a00      	cmp	r2, #0
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_dsub+0x5c>
 8001dc6:	e0c5      	b.n	8001f54 <__aeabi_dsub+0x1e8>
 8001dc8:	4ab5      	ldr	r2, [pc, #724]	; (80020a0 <__aeabi_dsub+0x334>)
 8001dca:	4296      	cmp	r6, r2
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x64>
 8001dce:	e28b      	b.n	80022e8 <__aeabi_dsub+0x57c>
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	0412      	lsls	r2, r2, #16
 8001dd4:	4311      	orrs	r1, r2
 8001dd6:	4662      	mov	r2, ip
 8001dd8:	2a38      	cmp	r2, #56	; 0x38
 8001dda:	dd00      	ble.n	8001dde <__aeabi_dsub+0x72>
 8001ddc:	e1a1      	b.n	8002122 <__aeabi_dsub+0x3b6>
 8001dde:	2a1f      	cmp	r2, #31
 8001de0:	dd00      	ble.n	8001de4 <__aeabi_dsub+0x78>
 8001de2:	e216      	b.n	8002212 <__aeabi_dsub+0x4a6>
 8001de4:	2720      	movs	r7, #32
 8001de6:	000c      	movs	r4, r1
 8001de8:	1abf      	subs	r7, r7, r2
 8001dea:	40bc      	lsls	r4, r7
 8001dec:	0002      	movs	r2, r0
 8001dee:	46a0      	mov	r8, r4
 8001df0:	4664      	mov	r4, ip
 8001df2:	40b8      	lsls	r0, r7
 8001df4:	40e2      	lsrs	r2, r4
 8001df6:	4644      	mov	r4, r8
 8001df8:	4314      	orrs	r4, r2
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	1e50      	subs	r0, r2, #1
 8001dfe:	4182      	sbcs	r2, r0
 8001e00:	4660      	mov	r0, ip
 8001e02:	40c1      	lsrs	r1, r0
 8001e04:	4322      	orrs	r2, r4
 8001e06:	1a5b      	subs	r3, r3, r1
 8001e08:	4649      	mov	r1, r9
 8001e0a:	1a8c      	subs	r4, r1, r2
 8001e0c:	45a1      	cmp	r9, r4
 8001e0e:	4192      	sbcs	r2, r2
 8001e10:	4252      	negs	r2, r2
 8001e12:	1a9b      	subs	r3, r3, r2
 8001e14:	4698      	mov	r8, r3
 8001e16:	4643      	mov	r3, r8
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	d400      	bmi.n	8001e1e <__aeabi_dsub+0xb2>
 8001e1c:	e117      	b.n	800204e <__aeabi_dsub+0x2e2>
 8001e1e:	4643      	mov	r3, r8
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	0a5b      	lsrs	r3, r3, #9
 8001e24:	4698      	mov	r8, r3
 8001e26:	4643      	mov	r3, r8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0xc2>
 8001e2c:	e16c      	b.n	8002108 <__aeabi_dsub+0x39c>
 8001e2e:	4640      	mov	r0, r8
 8001e30:	f000 fca8 	bl	8002784 <__clzsi2>
 8001e34:	0002      	movs	r2, r0
 8001e36:	3a08      	subs	r2, #8
 8001e38:	2120      	movs	r1, #32
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	4643      	mov	r3, r8
 8001e3e:	1a89      	subs	r1, r1, r2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	40c8      	lsrs	r0, r1
 8001e44:	4094      	lsls	r4, r2
 8001e46:	4303      	orrs	r3, r0
 8001e48:	4296      	cmp	r6, r2
 8001e4a:	dd00      	ble.n	8001e4e <__aeabi_dsub+0xe2>
 8001e4c:	e157      	b.n	80020fe <__aeabi_dsub+0x392>
 8001e4e:	1b96      	subs	r6, r2, r6
 8001e50:	1c71      	adds	r1, r6, #1
 8001e52:	291f      	cmp	r1, #31
 8001e54:	dd00      	ble.n	8001e58 <__aeabi_dsub+0xec>
 8001e56:	e1cb      	b.n	80021f0 <__aeabi_dsub+0x484>
 8001e58:	2220      	movs	r2, #32
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	0026      	movs	r6, r4
 8001e5e:	1a52      	subs	r2, r2, r1
 8001e60:	4094      	lsls	r4, r2
 8001e62:	4090      	lsls	r0, r2
 8001e64:	40ce      	lsrs	r6, r1
 8001e66:	40cb      	lsrs	r3, r1
 8001e68:	1e62      	subs	r2, r4, #1
 8001e6a:	4194      	sbcs	r4, r2
 8001e6c:	4330      	orrs	r0, r6
 8001e6e:	4698      	mov	r8, r3
 8001e70:	2600      	movs	r6, #0
 8001e72:	4304      	orrs	r4, r0
 8001e74:	0763      	lsls	r3, r4, #29
 8001e76:	d009      	beq.n	8001e8c <__aeabi_dsub+0x120>
 8001e78:	230f      	movs	r3, #15
 8001e7a:	4023      	ands	r3, r4
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d005      	beq.n	8001e8c <__aeabi_dsub+0x120>
 8001e80:	1d23      	adds	r3, r4, #4
 8001e82:	42a3      	cmp	r3, r4
 8001e84:	41a4      	sbcs	r4, r4
 8001e86:	4264      	negs	r4, r4
 8001e88:	44a0      	add	r8, r4
 8001e8a:	001c      	movs	r4, r3
 8001e8c:	4643      	mov	r3, r8
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	d400      	bmi.n	8001e94 <__aeabi_dsub+0x128>
 8001e92:	e0df      	b.n	8002054 <__aeabi_dsub+0x2e8>
 8001e94:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <__aeabi_dsub+0x334>)
 8001e96:	3601      	adds	r6, #1
 8001e98:	429e      	cmp	r6, r3
 8001e9a:	d100      	bne.n	8001e9e <__aeabi_dsub+0x132>
 8001e9c:	e0fb      	b.n	8002096 <__aeabi_dsub+0x32a>
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	4b80      	ldr	r3, [pc, #512]	; (80020a4 <__aeabi_dsub+0x338>)
 8001ea2:	08e4      	lsrs	r4, r4, #3
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	0571      	lsls	r1, r6, #21
 8001eaa:	0752      	lsls	r2, r2, #29
 8001eac:	025b      	lsls	r3, r3, #9
 8001eae:	4322      	orrs	r2, r4
 8001eb0:	0b1b      	lsrs	r3, r3, #12
 8001eb2:	0d49      	lsrs	r1, r1, #21
 8001eb4:	0509      	lsls	r1, r1, #20
 8001eb6:	07ed      	lsls	r5, r5, #31
 8001eb8:	4319      	orrs	r1, r3
 8001eba:	4329      	orrs	r1, r5
 8001ebc:	0010      	movs	r0, r2
 8001ebe:	bcf0      	pop	{r4, r5, r6, r7}
 8001ec0:	46bb      	mov	fp, r7
 8001ec2:	46b2      	mov	sl, r6
 8001ec4:	46a9      	mov	r9, r5
 8001ec6:	46a0      	mov	r8, r4
 8001ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001eca:	1ab4      	subs	r4, r6, r2
 8001ecc:	46a4      	mov	ip, r4
 8001ece:	2c00      	cmp	r4, #0
 8001ed0:	dd58      	ble.n	8001f84 <__aeabi_dsub+0x218>
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d100      	bne.n	8001ed8 <__aeabi_dsub+0x16c>
 8001ed6:	e09e      	b.n	8002016 <__aeabi_dsub+0x2aa>
 8001ed8:	4a71      	ldr	r2, [pc, #452]	; (80020a0 <__aeabi_dsub+0x334>)
 8001eda:	4296      	cmp	r6, r2
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x174>
 8001ede:	e13b      	b.n	8002158 <__aeabi_dsub+0x3ec>
 8001ee0:	2280      	movs	r2, #128	; 0x80
 8001ee2:	0412      	lsls	r2, r2, #16
 8001ee4:	4311      	orrs	r1, r2
 8001ee6:	4662      	mov	r2, ip
 8001ee8:	2a38      	cmp	r2, #56	; 0x38
 8001eea:	dd00      	ble.n	8001eee <__aeabi_dsub+0x182>
 8001eec:	e0c1      	b.n	8002072 <__aeabi_dsub+0x306>
 8001eee:	2a1f      	cmp	r2, #31
 8001ef0:	dc00      	bgt.n	8001ef4 <__aeabi_dsub+0x188>
 8001ef2:	e1bb      	b.n	800226c <__aeabi_dsub+0x500>
 8001ef4:	000c      	movs	r4, r1
 8001ef6:	3a20      	subs	r2, #32
 8001ef8:	40d4      	lsrs	r4, r2
 8001efa:	0022      	movs	r2, r4
 8001efc:	4664      	mov	r4, ip
 8001efe:	2c20      	cmp	r4, #32
 8001f00:	d004      	beq.n	8001f0c <__aeabi_dsub+0x1a0>
 8001f02:	2740      	movs	r7, #64	; 0x40
 8001f04:	1b3f      	subs	r7, r7, r4
 8001f06:	40b9      	lsls	r1, r7
 8001f08:	4308      	orrs	r0, r1
 8001f0a:	4680      	mov	r8, r0
 8001f0c:	4644      	mov	r4, r8
 8001f0e:	1e61      	subs	r1, r4, #1
 8001f10:	418c      	sbcs	r4, r1
 8001f12:	4314      	orrs	r4, r2
 8001f14:	e0b1      	b.n	800207a <__aeabi_dsub+0x30e>
 8001f16:	000c      	movs	r4, r1
 8001f18:	4304      	orrs	r4, r0
 8001f1a:	d02a      	beq.n	8001f72 <__aeabi_dsub+0x206>
 8001f1c:	46bb      	mov	fp, r7
 8001f1e:	42bd      	cmp	r5, r7
 8001f20:	d02d      	beq.n	8001f7e <__aeabi_dsub+0x212>
 8001f22:	4c61      	ldr	r4, [pc, #388]	; (80020a8 <__aeabi_dsub+0x33c>)
 8001f24:	46a4      	mov	ip, r4
 8001f26:	44b4      	add	ip, r6
 8001f28:	4664      	mov	r4, ip
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	d05c      	beq.n	8001fe8 <__aeabi_dsub+0x27c>
 8001f2e:	1b94      	subs	r4, r2, r6
 8001f30:	46a4      	mov	ip, r4
 8001f32:	2e00      	cmp	r6, #0
 8001f34:	d000      	beq.n	8001f38 <__aeabi_dsub+0x1cc>
 8001f36:	e115      	b.n	8002164 <__aeabi_dsub+0x3f8>
 8001f38:	464d      	mov	r5, r9
 8001f3a:	431d      	orrs	r5, r3
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x1d4>
 8001f3e:	e1c3      	b.n	80022c8 <__aeabi_dsub+0x55c>
 8001f40:	1e65      	subs	r5, r4, #1
 8001f42:	2c01      	cmp	r4, #1
 8001f44:	d100      	bne.n	8001f48 <__aeabi_dsub+0x1dc>
 8001f46:	e20c      	b.n	8002362 <__aeabi_dsub+0x5f6>
 8001f48:	4e55      	ldr	r6, [pc, #340]	; (80020a0 <__aeabi_dsub+0x334>)
 8001f4a:	42b4      	cmp	r4, r6
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x1e4>
 8001f4e:	e1f8      	b.n	8002342 <__aeabi_dsub+0x5d6>
 8001f50:	46ac      	mov	ip, r5
 8001f52:	e10e      	b.n	8002172 <__aeabi_dsub+0x406>
 8001f54:	000a      	movs	r2, r1
 8001f56:	4302      	orrs	r2, r0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x1f0>
 8001f5a:	e136      	b.n	80021ca <__aeabi_dsub+0x45e>
 8001f5c:	0022      	movs	r2, r4
 8001f5e:	3a01      	subs	r2, #1
 8001f60:	2c01      	cmp	r4, #1
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x1fa>
 8001f64:	e1c6      	b.n	80022f4 <__aeabi_dsub+0x588>
 8001f66:	4c4e      	ldr	r4, [pc, #312]	; (80020a0 <__aeabi_dsub+0x334>)
 8001f68:	45a4      	cmp	ip, r4
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dsub+0x202>
 8001f6c:	e0f4      	b.n	8002158 <__aeabi_dsub+0x3ec>
 8001f6e:	4694      	mov	ip, r2
 8001f70:	e731      	b.n	8001dd6 <__aeabi_dsub+0x6a>
 8001f72:	2401      	movs	r4, #1
 8001f74:	4067      	eors	r7, r4
 8001f76:	46bb      	mov	fp, r7
 8001f78:	42bd      	cmp	r5, r7
 8001f7a:	d000      	beq.n	8001f7e <__aeabi_dsub+0x212>
 8001f7c:	e71c      	b.n	8001db8 <__aeabi_dsub+0x4c>
 8001f7e:	4c4a      	ldr	r4, [pc, #296]	; (80020a8 <__aeabi_dsub+0x33c>)
 8001f80:	46a4      	mov	ip, r4
 8001f82:	44b4      	add	ip, r6
 8001f84:	4664      	mov	r4, ip
 8001f86:	2c00      	cmp	r4, #0
 8001f88:	d100      	bne.n	8001f8c <__aeabi_dsub+0x220>
 8001f8a:	e0cf      	b.n	800212c <__aeabi_dsub+0x3c0>
 8001f8c:	1b94      	subs	r4, r2, r6
 8001f8e:	46a4      	mov	ip, r4
 8001f90:	2e00      	cmp	r6, #0
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x22a>
 8001f94:	e15c      	b.n	8002250 <__aeabi_dsub+0x4e4>
 8001f96:	4e42      	ldr	r6, [pc, #264]	; (80020a0 <__aeabi_dsub+0x334>)
 8001f98:	42b2      	cmp	r2, r6
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x232>
 8001f9c:	e1ec      	b.n	8002378 <__aeabi_dsub+0x60c>
 8001f9e:	2680      	movs	r6, #128	; 0x80
 8001fa0:	0436      	lsls	r6, r6, #16
 8001fa2:	4333      	orrs	r3, r6
 8001fa4:	4664      	mov	r4, ip
 8001fa6:	2c38      	cmp	r4, #56	; 0x38
 8001fa8:	dd00      	ble.n	8001fac <__aeabi_dsub+0x240>
 8001faa:	e1b3      	b.n	8002314 <__aeabi_dsub+0x5a8>
 8001fac:	2c1f      	cmp	r4, #31
 8001fae:	dd00      	ble.n	8001fb2 <__aeabi_dsub+0x246>
 8001fb0:	e238      	b.n	8002424 <__aeabi_dsub+0x6b8>
 8001fb2:	2620      	movs	r6, #32
 8001fb4:	1b36      	subs	r6, r6, r4
 8001fb6:	001c      	movs	r4, r3
 8001fb8:	40b4      	lsls	r4, r6
 8001fba:	464f      	mov	r7, r9
 8001fbc:	46a0      	mov	r8, r4
 8001fbe:	4664      	mov	r4, ip
 8001fc0:	40e7      	lsrs	r7, r4
 8001fc2:	4644      	mov	r4, r8
 8001fc4:	433c      	orrs	r4, r7
 8001fc6:	464f      	mov	r7, r9
 8001fc8:	40b7      	lsls	r7, r6
 8001fca:	003e      	movs	r6, r7
 8001fcc:	1e77      	subs	r7, r6, #1
 8001fce:	41be      	sbcs	r6, r7
 8001fd0:	4334      	orrs	r4, r6
 8001fd2:	4666      	mov	r6, ip
 8001fd4:	40f3      	lsrs	r3, r6
 8001fd6:	18c9      	adds	r1, r1, r3
 8001fd8:	1824      	adds	r4, r4, r0
 8001fda:	4284      	cmp	r4, r0
 8001fdc:	419b      	sbcs	r3, r3
 8001fde:	425b      	negs	r3, r3
 8001fe0:	4698      	mov	r8, r3
 8001fe2:	0016      	movs	r6, r2
 8001fe4:	4488      	add	r8, r1
 8001fe6:	e04e      	b.n	8002086 <__aeabi_dsub+0x31a>
 8001fe8:	4a30      	ldr	r2, [pc, #192]	; (80020ac <__aeabi_dsub+0x340>)
 8001fea:	1c74      	adds	r4, r6, #1
 8001fec:	4214      	tst	r4, r2
 8001fee:	d000      	beq.n	8001ff2 <__aeabi_dsub+0x286>
 8001ff0:	e0d6      	b.n	80021a0 <__aeabi_dsub+0x434>
 8001ff2:	464a      	mov	r2, r9
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	2e00      	cmp	r6, #0
 8001ff8:	d000      	beq.n	8001ffc <__aeabi_dsub+0x290>
 8001ffa:	e15b      	b.n	80022b4 <__aeabi_dsub+0x548>
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d100      	bne.n	8002002 <__aeabi_dsub+0x296>
 8002000:	e1a5      	b.n	800234e <__aeabi_dsub+0x5e2>
 8002002:	000a      	movs	r2, r1
 8002004:	4302      	orrs	r2, r0
 8002006:	d000      	beq.n	800200a <__aeabi_dsub+0x29e>
 8002008:	e1bb      	b.n	8002382 <__aeabi_dsub+0x616>
 800200a:	464a      	mov	r2, r9
 800200c:	0759      	lsls	r1, r3, #29
 800200e:	08d2      	lsrs	r2, r2, #3
 8002010:	430a      	orrs	r2, r1
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	e027      	b.n	8002066 <__aeabi_dsub+0x2fa>
 8002016:	000a      	movs	r2, r1
 8002018:	4302      	orrs	r2, r0
 800201a:	d100      	bne.n	800201e <__aeabi_dsub+0x2b2>
 800201c:	e174      	b.n	8002308 <__aeabi_dsub+0x59c>
 800201e:	0022      	movs	r2, r4
 8002020:	3a01      	subs	r2, #1
 8002022:	2c01      	cmp	r4, #1
 8002024:	d005      	beq.n	8002032 <__aeabi_dsub+0x2c6>
 8002026:	4c1e      	ldr	r4, [pc, #120]	; (80020a0 <__aeabi_dsub+0x334>)
 8002028:	45a4      	cmp	ip, r4
 800202a:	d100      	bne.n	800202e <__aeabi_dsub+0x2c2>
 800202c:	e094      	b.n	8002158 <__aeabi_dsub+0x3ec>
 800202e:	4694      	mov	ip, r2
 8002030:	e759      	b.n	8001ee6 <__aeabi_dsub+0x17a>
 8002032:	4448      	add	r0, r9
 8002034:	4548      	cmp	r0, r9
 8002036:	4192      	sbcs	r2, r2
 8002038:	185b      	adds	r3, r3, r1
 800203a:	4698      	mov	r8, r3
 800203c:	0004      	movs	r4, r0
 800203e:	4252      	negs	r2, r2
 8002040:	4490      	add	r8, r2
 8002042:	4643      	mov	r3, r8
 8002044:	2602      	movs	r6, #2
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	d500      	bpl.n	800204c <__aeabi_dsub+0x2e0>
 800204a:	e0c4      	b.n	80021d6 <__aeabi_dsub+0x46a>
 800204c:	3e01      	subs	r6, #1
 800204e:	0763      	lsls	r3, r4, #29
 8002050:	d000      	beq.n	8002054 <__aeabi_dsub+0x2e8>
 8002052:	e711      	b.n	8001e78 <__aeabi_dsub+0x10c>
 8002054:	4643      	mov	r3, r8
 8002056:	46b4      	mov	ip, r6
 8002058:	0759      	lsls	r1, r3, #29
 800205a:	08e2      	lsrs	r2, r4, #3
 800205c:	430a      	orrs	r2, r1
 800205e:	08db      	lsrs	r3, r3, #3
 8002060:	490f      	ldr	r1, [pc, #60]	; (80020a0 <__aeabi_dsub+0x334>)
 8002062:	458c      	cmp	ip, r1
 8002064:	d040      	beq.n	80020e8 <__aeabi_dsub+0x37c>
 8002066:	4661      	mov	r1, ip
 8002068:	031b      	lsls	r3, r3, #12
 800206a:	0549      	lsls	r1, r1, #21
 800206c:	0b1b      	lsrs	r3, r3, #12
 800206e:	0d49      	lsrs	r1, r1, #21
 8002070:	e720      	b.n	8001eb4 <__aeabi_dsub+0x148>
 8002072:	4301      	orrs	r1, r0
 8002074:	000c      	movs	r4, r1
 8002076:	1e61      	subs	r1, r4, #1
 8002078:	418c      	sbcs	r4, r1
 800207a:	444c      	add	r4, r9
 800207c:	454c      	cmp	r4, r9
 800207e:	4192      	sbcs	r2, r2
 8002080:	4252      	negs	r2, r2
 8002082:	4690      	mov	r8, r2
 8002084:	4498      	add	r8, r3
 8002086:	4643      	mov	r3, r8
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	d5e0      	bpl.n	800204e <__aeabi_dsub+0x2e2>
 800208c:	4b04      	ldr	r3, [pc, #16]	; (80020a0 <__aeabi_dsub+0x334>)
 800208e:	3601      	adds	r6, #1
 8002090:	429e      	cmp	r6, r3
 8002092:	d000      	beq.n	8002096 <__aeabi_dsub+0x32a>
 8002094:	e09f      	b.n	80021d6 <__aeabi_dsub+0x46a>
 8002096:	0031      	movs	r1, r6
 8002098:	2300      	movs	r3, #0
 800209a:	2200      	movs	r2, #0
 800209c:	e70a      	b.n	8001eb4 <__aeabi_dsub+0x148>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	000007ff 	.word	0x000007ff
 80020a4:	ff7fffff 	.word	0xff7fffff
 80020a8:	fffff801 	.word	0xfffff801
 80020ac:	000007fe 	.word	0x000007fe
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	d100      	bne.n	80020b6 <__aeabi_dsub+0x34a>
 80020b4:	e160      	b.n	8002378 <__aeabi_dsub+0x60c>
 80020b6:	000a      	movs	r2, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	d04d      	beq.n	8002158 <__aeabi_dsub+0x3ec>
 80020bc:	464a      	mov	r2, r9
 80020be:	075c      	lsls	r4, r3, #29
 80020c0:	08d2      	lsrs	r2, r2, #3
 80020c2:	4322      	orrs	r2, r4
 80020c4:	2480      	movs	r4, #128	; 0x80
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	0324      	lsls	r4, r4, #12
 80020ca:	4223      	tst	r3, r4
 80020cc:	d007      	beq.n	80020de <__aeabi_dsub+0x372>
 80020ce:	08ce      	lsrs	r6, r1, #3
 80020d0:	4226      	tst	r6, r4
 80020d2:	d104      	bne.n	80020de <__aeabi_dsub+0x372>
 80020d4:	465d      	mov	r5, fp
 80020d6:	0033      	movs	r3, r6
 80020d8:	08c2      	lsrs	r2, r0, #3
 80020da:	0749      	lsls	r1, r1, #29
 80020dc:	430a      	orrs	r2, r1
 80020de:	0f51      	lsrs	r1, r2, #29
 80020e0:	00d2      	lsls	r2, r2, #3
 80020e2:	08d2      	lsrs	r2, r2, #3
 80020e4:	0749      	lsls	r1, r1, #29
 80020e6:	430a      	orrs	r2, r1
 80020e8:	0011      	movs	r1, r2
 80020ea:	4319      	orrs	r1, r3
 80020ec:	d100      	bne.n	80020f0 <__aeabi_dsub+0x384>
 80020ee:	e1c8      	b.n	8002482 <__aeabi_dsub+0x716>
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	0309      	lsls	r1, r1, #12
 80020f4:	430b      	orrs	r3, r1
 80020f6:	031b      	lsls	r3, r3, #12
 80020f8:	49d5      	ldr	r1, [pc, #852]	; (8002450 <__aeabi_dsub+0x6e4>)
 80020fa:	0b1b      	lsrs	r3, r3, #12
 80020fc:	e6da      	b.n	8001eb4 <__aeabi_dsub+0x148>
 80020fe:	49d5      	ldr	r1, [pc, #852]	; (8002454 <__aeabi_dsub+0x6e8>)
 8002100:	1ab6      	subs	r6, r6, r2
 8002102:	400b      	ands	r3, r1
 8002104:	4698      	mov	r8, r3
 8002106:	e6b5      	b.n	8001e74 <__aeabi_dsub+0x108>
 8002108:	0020      	movs	r0, r4
 800210a:	f000 fb3b 	bl	8002784 <__clzsi2>
 800210e:	0002      	movs	r2, r0
 8002110:	3218      	adds	r2, #24
 8002112:	2a1f      	cmp	r2, #31
 8002114:	dc00      	bgt.n	8002118 <__aeabi_dsub+0x3ac>
 8002116:	e68f      	b.n	8001e38 <__aeabi_dsub+0xcc>
 8002118:	0023      	movs	r3, r4
 800211a:	3808      	subs	r0, #8
 800211c:	4083      	lsls	r3, r0
 800211e:	2400      	movs	r4, #0
 8002120:	e692      	b.n	8001e48 <__aeabi_dsub+0xdc>
 8002122:	4308      	orrs	r0, r1
 8002124:	0002      	movs	r2, r0
 8002126:	1e50      	subs	r0, r2, #1
 8002128:	4182      	sbcs	r2, r0
 800212a:	e66d      	b.n	8001e08 <__aeabi_dsub+0x9c>
 800212c:	4cca      	ldr	r4, [pc, #808]	; (8002458 <__aeabi_dsub+0x6ec>)
 800212e:	1c72      	adds	r2, r6, #1
 8002130:	4222      	tst	r2, r4
 8002132:	d000      	beq.n	8002136 <__aeabi_dsub+0x3ca>
 8002134:	e0ad      	b.n	8002292 <__aeabi_dsub+0x526>
 8002136:	464a      	mov	r2, r9
 8002138:	431a      	orrs	r2, r3
 800213a:	2e00      	cmp	r6, #0
 800213c:	d1b8      	bne.n	80020b0 <__aeabi_dsub+0x344>
 800213e:	2a00      	cmp	r2, #0
 8002140:	d100      	bne.n	8002144 <__aeabi_dsub+0x3d8>
 8002142:	e158      	b.n	80023f6 <__aeabi_dsub+0x68a>
 8002144:	000a      	movs	r2, r1
 8002146:	4302      	orrs	r2, r0
 8002148:	d000      	beq.n	800214c <__aeabi_dsub+0x3e0>
 800214a:	e159      	b.n	8002400 <__aeabi_dsub+0x694>
 800214c:	464a      	mov	r2, r9
 800214e:	0759      	lsls	r1, r3, #29
 8002150:	08d2      	lsrs	r2, r2, #3
 8002152:	430a      	orrs	r2, r1
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	e786      	b.n	8002066 <__aeabi_dsub+0x2fa>
 8002158:	464a      	mov	r2, r9
 800215a:	0759      	lsls	r1, r3, #29
 800215c:	08d2      	lsrs	r2, r2, #3
 800215e:	430a      	orrs	r2, r1
 8002160:	08db      	lsrs	r3, r3, #3
 8002162:	e7c1      	b.n	80020e8 <__aeabi_dsub+0x37c>
 8002164:	4dba      	ldr	r5, [pc, #744]	; (8002450 <__aeabi_dsub+0x6e4>)
 8002166:	42aa      	cmp	r2, r5
 8002168:	d100      	bne.n	800216c <__aeabi_dsub+0x400>
 800216a:	e11e      	b.n	80023aa <__aeabi_dsub+0x63e>
 800216c:	2580      	movs	r5, #128	; 0x80
 800216e:	042d      	lsls	r5, r5, #16
 8002170:	432b      	orrs	r3, r5
 8002172:	4664      	mov	r4, ip
 8002174:	2c38      	cmp	r4, #56	; 0x38
 8002176:	dc5d      	bgt.n	8002234 <__aeabi_dsub+0x4c8>
 8002178:	2c1f      	cmp	r4, #31
 800217a:	dd00      	ble.n	800217e <__aeabi_dsub+0x412>
 800217c:	e0d0      	b.n	8002320 <__aeabi_dsub+0x5b4>
 800217e:	2520      	movs	r5, #32
 8002180:	4667      	mov	r7, ip
 8002182:	1b2d      	subs	r5, r5, r4
 8002184:	464e      	mov	r6, r9
 8002186:	001c      	movs	r4, r3
 8002188:	40fe      	lsrs	r6, r7
 800218a:	40ac      	lsls	r4, r5
 800218c:	4334      	orrs	r4, r6
 800218e:	464e      	mov	r6, r9
 8002190:	40ae      	lsls	r6, r5
 8002192:	0035      	movs	r5, r6
 8002194:	40fb      	lsrs	r3, r7
 8002196:	1e6e      	subs	r6, r5, #1
 8002198:	41b5      	sbcs	r5, r6
 800219a:	1ac9      	subs	r1, r1, r3
 800219c:	432c      	orrs	r4, r5
 800219e:	e04e      	b.n	800223e <__aeabi_dsub+0x4d2>
 80021a0:	464a      	mov	r2, r9
 80021a2:	1a14      	subs	r4, r2, r0
 80021a4:	45a1      	cmp	r9, r4
 80021a6:	4192      	sbcs	r2, r2
 80021a8:	4252      	negs	r2, r2
 80021aa:	4690      	mov	r8, r2
 80021ac:	1a5f      	subs	r7, r3, r1
 80021ae:	003a      	movs	r2, r7
 80021b0:	4647      	mov	r7, r8
 80021b2:	1bd2      	subs	r2, r2, r7
 80021b4:	4690      	mov	r8, r2
 80021b6:	0212      	lsls	r2, r2, #8
 80021b8:	d500      	bpl.n	80021bc <__aeabi_dsub+0x450>
 80021ba:	e08b      	b.n	80022d4 <__aeabi_dsub+0x568>
 80021bc:	4642      	mov	r2, r8
 80021be:	4322      	orrs	r2, r4
 80021c0:	d000      	beq.n	80021c4 <__aeabi_dsub+0x458>
 80021c2:	e630      	b.n	8001e26 <__aeabi_dsub+0xba>
 80021c4:	2300      	movs	r3, #0
 80021c6:	2500      	movs	r5, #0
 80021c8:	e74d      	b.n	8002066 <__aeabi_dsub+0x2fa>
 80021ca:	464a      	mov	r2, r9
 80021cc:	0759      	lsls	r1, r3, #29
 80021ce:	08d2      	lsrs	r2, r2, #3
 80021d0:	430a      	orrs	r2, r1
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	e744      	b.n	8002060 <__aeabi_dsub+0x2f4>
 80021d6:	4642      	mov	r2, r8
 80021d8:	4b9e      	ldr	r3, [pc, #632]	; (8002454 <__aeabi_dsub+0x6e8>)
 80021da:	0861      	lsrs	r1, r4, #1
 80021dc:	401a      	ands	r2, r3
 80021de:	0013      	movs	r3, r2
 80021e0:	2201      	movs	r2, #1
 80021e2:	4014      	ands	r4, r2
 80021e4:	430c      	orrs	r4, r1
 80021e6:	07da      	lsls	r2, r3, #31
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	4698      	mov	r8, r3
 80021ec:	4314      	orrs	r4, r2
 80021ee:	e641      	b.n	8001e74 <__aeabi_dsub+0x108>
 80021f0:	001a      	movs	r2, r3
 80021f2:	3e1f      	subs	r6, #31
 80021f4:	40f2      	lsrs	r2, r6
 80021f6:	0016      	movs	r6, r2
 80021f8:	2920      	cmp	r1, #32
 80021fa:	d003      	beq.n	8002204 <__aeabi_dsub+0x498>
 80021fc:	2240      	movs	r2, #64	; 0x40
 80021fe:	1a51      	subs	r1, r2, r1
 8002200:	408b      	lsls	r3, r1
 8002202:	431c      	orrs	r4, r3
 8002204:	1e62      	subs	r2, r4, #1
 8002206:	4194      	sbcs	r4, r2
 8002208:	2300      	movs	r3, #0
 800220a:	4334      	orrs	r4, r6
 800220c:	4698      	mov	r8, r3
 800220e:	2600      	movs	r6, #0
 8002210:	e71d      	b.n	800204e <__aeabi_dsub+0x2e2>
 8002212:	000c      	movs	r4, r1
 8002214:	3a20      	subs	r2, #32
 8002216:	40d4      	lsrs	r4, r2
 8002218:	0022      	movs	r2, r4
 800221a:	4664      	mov	r4, ip
 800221c:	2c20      	cmp	r4, #32
 800221e:	d004      	beq.n	800222a <__aeabi_dsub+0x4be>
 8002220:	2740      	movs	r7, #64	; 0x40
 8002222:	1b3f      	subs	r7, r7, r4
 8002224:	40b9      	lsls	r1, r7
 8002226:	4308      	orrs	r0, r1
 8002228:	4680      	mov	r8, r0
 800222a:	4644      	mov	r4, r8
 800222c:	1e61      	subs	r1, r4, #1
 800222e:	418c      	sbcs	r4, r1
 8002230:	4322      	orrs	r2, r4
 8002232:	e5e9      	b.n	8001e08 <__aeabi_dsub+0x9c>
 8002234:	464c      	mov	r4, r9
 8002236:	4323      	orrs	r3, r4
 8002238:	001c      	movs	r4, r3
 800223a:	1e63      	subs	r3, r4, #1
 800223c:	419c      	sbcs	r4, r3
 800223e:	1b04      	subs	r4, r0, r4
 8002240:	42a0      	cmp	r0, r4
 8002242:	419b      	sbcs	r3, r3
 8002244:	425b      	negs	r3, r3
 8002246:	1acb      	subs	r3, r1, r3
 8002248:	4698      	mov	r8, r3
 800224a:	465d      	mov	r5, fp
 800224c:	0016      	movs	r6, r2
 800224e:	e5e2      	b.n	8001e16 <__aeabi_dsub+0xaa>
 8002250:	464e      	mov	r6, r9
 8002252:	431e      	orrs	r6, r3
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x4ec>
 8002256:	e0ae      	b.n	80023b6 <__aeabi_dsub+0x64a>
 8002258:	1e66      	subs	r6, r4, #1
 800225a:	2c01      	cmp	r4, #1
 800225c:	d100      	bne.n	8002260 <__aeabi_dsub+0x4f4>
 800225e:	e0fd      	b.n	800245c <__aeabi_dsub+0x6f0>
 8002260:	4f7b      	ldr	r7, [pc, #492]	; (8002450 <__aeabi_dsub+0x6e4>)
 8002262:	42bc      	cmp	r4, r7
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x4fc>
 8002266:	e107      	b.n	8002478 <__aeabi_dsub+0x70c>
 8002268:	46b4      	mov	ip, r6
 800226a:	e69b      	b.n	8001fa4 <__aeabi_dsub+0x238>
 800226c:	4664      	mov	r4, ip
 800226e:	2220      	movs	r2, #32
 8002270:	1b12      	subs	r2, r2, r4
 8002272:	000c      	movs	r4, r1
 8002274:	4094      	lsls	r4, r2
 8002276:	0007      	movs	r7, r0
 8002278:	4090      	lsls	r0, r2
 800227a:	46a0      	mov	r8, r4
 800227c:	4664      	mov	r4, ip
 800227e:	1e42      	subs	r2, r0, #1
 8002280:	4190      	sbcs	r0, r2
 8002282:	4662      	mov	r2, ip
 8002284:	40e7      	lsrs	r7, r4
 8002286:	4644      	mov	r4, r8
 8002288:	40d1      	lsrs	r1, r2
 800228a:	433c      	orrs	r4, r7
 800228c:	4304      	orrs	r4, r0
 800228e:	185b      	adds	r3, r3, r1
 8002290:	e6f3      	b.n	800207a <__aeabi_dsub+0x30e>
 8002292:	4c6f      	ldr	r4, [pc, #444]	; (8002450 <__aeabi_dsub+0x6e4>)
 8002294:	42a2      	cmp	r2, r4
 8002296:	d100      	bne.n	800229a <__aeabi_dsub+0x52e>
 8002298:	e0d5      	b.n	8002446 <__aeabi_dsub+0x6da>
 800229a:	4448      	add	r0, r9
 800229c:	185b      	adds	r3, r3, r1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	4249      	negs	r1, r1
 80022a4:	185b      	adds	r3, r3, r1
 80022a6:	07dc      	lsls	r4, r3, #31
 80022a8:	0840      	lsrs	r0, r0, #1
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	4698      	mov	r8, r3
 80022ae:	0016      	movs	r6, r2
 80022b0:	4304      	orrs	r4, r0
 80022b2:	e6cc      	b.n	800204e <__aeabi_dsub+0x2e2>
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	d000      	beq.n	80022ba <__aeabi_dsub+0x54e>
 80022b8:	e082      	b.n	80023c0 <__aeabi_dsub+0x654>
 80022ba:	000a      	movs	r2, r1
 80022bc:	4302      	orrs	r2, r0
 80022be:	d140      	bne.n	8002342 <__aeabi_dsub+0x5d6>
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	2500      	movs	r5, #0
 80022c4:	031b      	lsls	r3, r3, #12
 80022c6:	e713      	b.n	80020f0 <__aeabi_dsub+0x384>
 80022c8:	074b      	lsls	r3, r1, #29
 80022ca:	08c2      	lsrs	r2, r0, #3
 80022cc:	431a      	orrs	r2, r3
 80022ce:	465d      	mov	r5, fp
 80022d0:	08cb      	lsrs	r3, r1, #3
 80022d2:	e6c5      	b.n	8002060 <__aeabi_dsub+0x2f4>
 80022d4:	464a      	mov	r2, r9
 80022d6:	1a84      	subs	r4, r0, r2
 80022d8:	42a0      	cmp	r0, r4
 80022da:	4192      	sbcs	r2, r2
 80022dc:	1acb      	subs	r3, r1, r3
 80022de:	4252      	negs	r2, r2
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	4698      	mov	r8, r3
 80022e4:	465d      	mov	r5, fp
 80022e6:	e59e      	b.n	8001e26 <__aeabi_dsub+0xba>
 80022e8:	464a      	mov	r2, r9
 80022ea:	0759      	lsls	r1, r3, #29
 80022ec:	08d2      	lsrs	r2, r2, #3
 80022ee:	430a      	orrs	r2, r1
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	e6f9      	b.n	80020e8 <__aeabi_dsub+0x37c>
 80022f4:	464a      	mov	r2, r9
 80022f6:	1a14      	subs	r4, r2, r0
 80022f8:	45a1      	cmp	r9, r4
 80022fa:	4192      	sbcs	r2, r2
 80022fc:	1a5b      	subs	r3, r3, r1
 80022fe:	4252      	negs	r2, r2
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	4698      	mov	r8, r3
 8002304:	2601      	movs	r6, #1
 8002306:	e586      	b.n	8001e16 <__aeabi_dsub+0xaa>
 8002308:	464a      	mov	r2, r9
 800230a:	0759      	lsls	r1, r3, #29
 800230c:	08d2      	lsrs	r2, r2, #3
 800230e:	430a      	orrs	r2, r1
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	e6a5      	b.n	8002060 <__aeabi_dsub+0x2f4>
 8002314:	464c      	mov	r4, r9
 8002316:	4323      	orrs	r3, r4
 8002318:	001c      	movs	r4, r3
 800231a:	1e63      	subs	r3, r4, #1
 800231c:	419c      	sbcs	r4, r3
 800231e:	e65b      	b.n	8001fd8 <__aeabi_dsub+0x26c>
 8002320:	4665      	mov	r5, ip
 8002322:	001e      	movs	r6, r3
 8002324:	3d20      	subs	r5, #32
 8002326:	40ee      	lsrs	r6, r5
 8002328:	2c20      	cmp	r4, #32
 800232a:	d005      	beq.n	8002338 <__aeabi_dsub+0x5cc>
 800232c:	2540      	movs	r5, #64	; 0x40
 800232e:	1b2d      	subs	r5, r5, r4
 8002330:	40ab      	lsls	r3, r5
 8002332:	464c      	mov	r4, r9
 8002334:	431c      	orrs	r4, r3
 8002336:	46a2      	mov	sl, r4
 8002338:	4654      	mov	r4, sl
 800233a:	1e63      	subs	r3, r4, #1
 800233c:	419c      	sbcs	r4, r3
 800233e:	4334      	orrs	r4, r6
 8002340:	e77d      	b.n	800223e <__aeabi_dsub+0x4d2>
 8002342:	074b      	lsls	r3, r1, #29
 8002344:	08c2      	lsrs	r2, r0, #3
 8002346:	431a      	orrs	r2, r3
 8002348:	465d      	mov	r5, fp
 800234a:	08cb      	lsrs	r3, r1, #3
 800234c:	e6cc      	b.n	80020e8 <__aeabi_dsub+0x37c>
 800234e:	000a      	movs	r2, r1
 8002350:	4302      	orrs	r2, r0
 8002352:	d100      	bne.n	8002356 <__aeabi_dsub+0x5ea>
 8002354:	e736      	b.n	80021c4 <__aeabi_dsub+0x458>
 8002356:	074b      	lsls	r3, r1, #29
 8002358:	08c2      	lsrs	r2, r0, #3
 800235a:	431a      	orrs	r2, r3
 800235c:	465d      	mov	r5, fp
 800235e:	08cb      	lsrs	r3, r1, #3
 8002360:	e681      	b.n	8002066 <__aeabi_dsub+0x2fa>
 8002362:	464a      	mov	r2, r9
 8002364:	1a84      	subs	r4, r0, r2
 8002366:	42a0      	cmp	r0, r4
 8002368:	4192      	sbcs	r2, r2
 800236a:	1acb      	subs	r3, r1, r3
 800236c:	4252      	negs	r2, r2
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	4698      	mov	r8, r3
 8002372:	465d      	mov	r5, fp
 8002374:	2601      	movs	r6, #1
 8002376:	e54e      	b.n	8001e16 <__aeabi_dsub+0xaa>
 8002378:	074b      	lsls	r3, r1, #29
 800237a:	08c2      	lsrs	r2, r0, #3
 800237c:	431a      	orrs	r2, r3
 800237e:	08cb      	lsrs	r3, r1, #3
 8002380:	e6b2      	b.n	80020e8 <__aeabi_dsub+0x37c>
 8002382:	464a      	mov	r2, r9
 8002384:	1a14      	subs	r4, r2, r0
 8002386:	45a1      	cmp	r9, r4
 8002388:	4192      	sbcs	r2, r2
 800238a:	1a5f      	subs	r7, r3, r1
 800238c:	4252      	negs	r2, r2
 800238e:	1aba      	subs	r2, r7, r2
 8002390:	4690      	mov	r8, r2
 8002392:	0212      	lsls	r2, r2, #8
 8002394:	d56b      	bpl.n	800246e <__aeabi_dsub+0x702>
 8002396:	464a      	mov	r2, r9
 8002398:	1a84      	subs	r4, r0, r2
 800239a:	42a0      	cmp	r0, r4
 800239c:	4192      	sbcs	r2, r2
 800239e:	1acb      	subs	r3, r1, r3
 80023a0:	4252      	negs	r2, r2
 80023a2:	1a9b      	subs	r3, r3, r2
 80023a4:	4698      	mov	r8, r3
 80023a6:	465d      	mov	r5, fp
 80023a8:	e564      	b.n	8001e74 <__aeabi_dsub+0x108>
 80023aa:	074b      	lsls	r3, r1, #29
 80023ac:	08c2      	lsrs	r2, r0, #3
 80023ae:	431a      	orrs	r2, r3
 80023b0:	465d      	mov	r5, fp
 80023b2:	08cb      	lsrs	r3, r1, #3
 80023b4:	e698      	b.n	80020e8 <__aeabi_dsub+0x37c>
 80023b6:	074b      	lsls	r3, r1, #29
 80023b8:	08c2      	lsrs	r2, r0, #3
 80023ba:	431a      	orrs	r2, r3
 80023bc:	08cb      	lsrs	r3, r1, #3
 80023be:	e64f      	b.n	8002060 <__aeabi_dsub+0x2f4>
 80023c0:	000a      	movs	r2, r1
 80023c2:	4302      	orrs	r2, r0
 80023c4:	d090      	beq.n	80022e8 <__aeabi_dsub+0x57c>
 80023c6:	464a      	mov	r2, r9
 80023c8:	075c      	lsls	r4, r3, #29
 80023ca:	08d2      	lsrs	r2, r2, #3
 80023cc:	4314      	orrs	r4, r2
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	08db      	lsrs	r3, r3, #3
 80023d2:	0312      	lsls	r2, r2, #12
 80023d4:	4213      	tst	r3, r2
 80023d6:	d008      	beq.n	80023ea <__aeabi_dsub+0x67e>
 80023d8:	08ce      	lsrs	r6, r1, #3
 80023da:	4216      	tst	r6, r2
 80023dc:	d105      	bne.n	80023ea <__aeabi_dsub+0x67e>
 80023de:	08c0      	lsrs	r0, r0, #3
 80023e0:	0749      	lsls	r1, r1, #29
 80023e2:	4308      	orrs	r0, r1
 80023e4:	0004      	movs	r4, r0
 80023e6:	465d      	mov	r5, fp
 80023e8:	0033      	movs	r3, r6
 80023ea:	0f61      	lsrs	r1, r4, #29
 80023ec:	00e2      	lsls	r2, r4, #3
 80023ee:	0749      	lsls	r1, r1, #29
 80023f0:	08d2      	lsrs	r2, r2, #3
 80023f2:	430a      	orrs	r2, r1
 80023f4:	e678      	b.n	80020e8 <__aeabi_dsub+0x37c>
 80023f6:	074b      	lsls	r3, r1, #29
 80023f8:	08c2      	lsrs	r2, r0, #3
 80023fa:	431a      	orrs	r2, r3
 80023fc:	08cb      	lsrs	r3, r1, #3
 80023fe:	e632      	b.n	8002066 <__aeabi_dsub+0x2fa>
 8002400:	4448      	add	r0, r9
 8002402:	185b      	adds	r3, r3, r1
 8002404:	4548      	cmp	r0, r9
 8002406:	4192      	sbcs	r2, r2
 8002408:	4698      	mov	r8, r3
 800240a:	4252      	negs	r2, r2
 800240c:	4490      	add	r8, r2
 800240e:	4643      	mov	r3, r8
 8002410:	0004      	movs	r4, r0
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	d400      	bmi.n	8002418 <__aeabi_dsub+0x6ac>
 8002416:	e61a      	b.n	800204e <__aeabi_dsub+0x2e2>
 8002418:	4642      	mov	r2, r8
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <__aeabi_dsub+0x6e8>)
 800241c:	2601      	movs	r6, #1
 800241e:	401a      	ands	r2, r3
 8002420:	4690      	mov	r8, r2
 8002422:	e614      	b.n	800204e <__aeabi_dsub+0x2e2>
 8002424:	4666      	mov	r6, ip
 8002426:	001f      	movs	r7, r3
 8002428:	3e20      	subs	r6, #32
 800242a:	40f7      	lsrs	r7, r6
 800242c:	2c20      	cmp	r4, #32
 800242e:	d005      	beq.n	800243c <__aeabi_dsub+0x6d0>
 8002430:	2640      	movs	r6, #64	; 0x40
 8002432:	1b36      	subs	r6, r6, r4
 8002434:	40b3      	lsls	r3, r6
 8002436:	464c      	mov	r4, r9
 8002438:	431c      	orrs	r4, r3
 800243a:	46a2      	mov	sl, r4
 800243c:	4654      	mov	r4, sl
 800243e:	1e63      	subs	r3, r4, #1
 8002440:	419c      	sbcs	r4, r3
 8002442:	433c      	orrs	r4, r7
 8002444:	e5c8      	b.n	8001fd8 <__aeabi_dsub+0x26c>
 8002446:	0011      	movs	r1, r2
 8002448:	2300      	movs	r3, #0
 800244a:	2200      	movs	r2, #0
 800244c:	e532      	b.n	8001eb4 <__aeabi_dsub+0x148>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff
 8002454:	ff7fffff 	.word	0xff7fffff
 8002458:	000007fe 	.word	0x000007fe
 800245c:	464a      	mov	r2, r9
 800245e:	1814      	adds	r4, r2, r0
 8002460:	4284      	cmp	r4, r0
 8002462:	4192      	sbcs	r2, r2
 8002464:	185b      	adds	r3, r3, r1
 8002466:	4698      	mov	r8, r3
 8002468:	4252      	negs	r2, r2
 800246a:	4490      	add	r8, r2
 800246c:	e5e9      	b.n	8002042 <__aeabi_dsub+0x2d6>
 800246e:	4642      	mov	r2, r8
 8002470:	4322      	orrs	r2, r4
 8002472:	d100      	bne.n	8002476 <__aeabi_dsub+0x70a>
 8002474:	e6a6      	b.n	80021c4 <__aeabi_dsub+0x458>
 8002476:	e5ea      	b.n	800204e <__aeabi_dsub+0x2e2>
 8002478:	074b      	lsls	r3, r1, #29
 800247a:	08c2      	lsrs	r2, r0, #3
 800247c:	431a      	orrs	r2, r3
 800247e:	08cb      	lsrs	r3, r1, #3
 8002480:	e632      	b.n	80020e8 <__aeabi_dsub+0x37c>
 8002482:	2200      	movs	r2, #0
 8002484:	4901      	ldr	r1, [pc, #4]	; (800248c <__aeabi_dsub+0x720>)
 8002486:	0013      	movs	r3, r2
 8002488:	e514      	b.n	8001eb4 <__aeabi_dsub+0x148>
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	000007ff 	.word	0x000007ff

08002490 <__aeabi_dcmpun>:
 8002490:	b570      	push	{r4, r5, r6, lr}
 8002492:	0005      	movs	r5, r0
 8002494:	480c      	ldr	r0, [pc, #48]	; (80024c8 <__aeabi_dcmpun+0x38>)
 8002496:	030c      	lsls	r4, r1, #12
 8002498:	0016      	movs	r6, r2
 800249a:	0049      	lsls	r1, r1, #1
 800249c:	031a      	lsls	r2, r3, #12
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	0b24      	lsrs	r4, r4, #12
 80024a2:	0d49      	lsrs	r1, r1, #21
 80024a4:	0b12      	lsrs	r2, r2, #12
 80024a6:	0d5b      	lsrs	r3, r3, #21
 80024a8:	4281      	cmp	r1, r0
 80024aa:	d008      	beq.n	80024be <__aeabi_dcmpun+0x2e>
 80024ac:	4906      	ldr	r1, [pc, #24]	; (80024c8 <__aeabi_dcmpun+0x38>)
 80024ae:	2000      	movs	r0, #0
 80024b0:	428b      	cmp	r3, r1
 80024b2:	d103      	bne.n	80024bc <__aeabi_dcmpun+0x2c>
 80024b4:	4332      	orrs	r2, r6
 80024b6:	0010      	movs	r0, r2
 80024b8:	1e42      	subs	r2, r0, #1
 80024ba:	4190      	sbcs	r0, r2
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
 80024be:	2001      	movs	r0, #1
 80024c0:	432c      	orrs	r4, r5
 80024c2:	d1fb      	bne.n	80024bc <__aeabi_dcmpun+0x2c>
 80024c4:	e7f2      	b.n	80024ac <__aeabi_dcmpun+0x1c>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	000007ff 	.word	0x000007ff

080024cc <__aeabi_d2iz>:
 80024cc:	000a      	movs	r2, r1
 80024ce:	b530      	push	{r4, r5, lr}
 80024d0:	4c13      	ldr	r4, [pc, #76]	; (8002520 <__aeabi_d2iz+0x54>)
 80024d2:	0053      	lsls	r3, r2, #1
 80024d4:	0309      	lsls	r1, r1, #12
 80024d6:	0005      	movs	r5, r0
 80024d8:	0b09      	lsrs	r1, r1, #12
 80024da:	2000      	movs	r0, #0
 80024dc:	0d5b      	lsrs	r3, r3, #21
 80024de:	0fd2      	lsrs	r2, r2, #31
 80024e0:	42a3      	cmp	r3, r4
 80024e2:	dd04      	ble.n	80024ee <__aeabi_d2iz+0x22>
 80024e4:	480f      	ldr	r0, [pc, #60]	; (8002524 <__aeabi_d2iz+0x58>)
 80024e6:	4283      	cmp	r3, r0
 80024e8:	dd02      	ble.n	80024f0 <__aeabi_d2iz+0x24>
 80024ea:	4b0f      	ldr	r3, [pc, #60]	; (8002528 <__aeabi_d2iz+0x5c>)
 80024ec:	18d0      	adds	r0, r2, r3
 80024ee:	bd30      	pop	{r4, r5, pc}
 80024f0:	2080      	movs	r0, #128	; 0x80
 80024f2:	0340      	lsls	r0, r0, #13
 80024f4:	4301      	orrs	r1, r0
 80024f6:	480d      	ldr	r0, [pc, #52]	; (800252c <__aeabi_d2iz+0x60>)
 80024f8:	1ac0      	subs	r0, r0, r3
 80024fa:	281f      	cmp	r0, #31
 80024fc:	dd08      	ble.n	8002510 <__aeabi_d2iz+0x44>
 80024fe:	480c      	ldr	r0, [pc, #48]	; (8002530 <__aeabi_d2iz+0x64>)
 8002500:	1ac3      	subs	r3, r0, r3
 8002502:	40d9      	lsrs	r1, r3
 8002504:	000b      	movs	r3, r1
 8002506:	4258      	negs	r0, r3
 8002508:	2a00      	cmp	r2, #0
 800250a:	d1f0      	bne.n	80024ee <__aeabi_d2iz+0x22>
 800250c:	0018      	movs	r0, r3
 800250e:	e7ee      	b.n	80024ee <__aeabi_d2iz+0x22>
 8002510:	4c08      	ldr	r4, [pc, #32]	; (8002534 <__aeabi_d2iz+0x68>)
 8002512:	40c5      	lsrs	r5, r0
 8002514:	46a4      	mov	ip, r4
 8002516:	4463      	add	r3, ip
 8002518:	4099      	lsls	r1, r3
 800251a:	000b      	movs	r3, r1
 800251c:	432b      	orrs	r3, r5
 800251e:	e7f2      	b.n	8002506 <__aeabi_d2iz+0x3a>
 8002520:	000003fe 	.word	0x000003fe
 8002524:	0000041d 	.word	0x0000041d
 8002528:	7fffffff 	.word	0x7fffffff
 800252c:	00000433 	.word	0x00000433
 8002530:	00000413 	.word	0x00000413
 8002534:	fffffbed 	.word	0xfffffbed

08002538 <__aeabi_i2d>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	2800      	cmp	r0, #0
 800253c:	d016      	beq.n	800256c <__aeabi_i2d+0x34>
 800253e:	17c3      	asrs	r3, r0, #31
 8002540:	18c5      	adds	r5, r0, r3
 8002542:	405d      	eors	r5, r3
 8002544:	0fc4      	lsrs	r4, r0, #31
 8002546:	0028      	movs	r0, r5
 8002548:	f000 f91c 	bl	8002784 <__clzsi2>
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <__aeabi_i2d+0x5c>)
 800254e:	1a12      	subs	r2, r2, r0
 8002550:	280a      	cmp	r0, #10
 8002552:	dc16      	bgt.n	8002582 <__aeabi_i2d+0x4a>
 8002554:	0003      	movs	r3, r0
 8002556:	002e      	movs	r6, r5
 8002558:	3315      	adds	r3, #21
 800255a:	409e      	lsls	r6, r3
 800255c:	230b      	movs	r3, #11
 800255e:	1a18      	subs	r0, r3, r0
 8002560:	40c5      	lsrs	r5, r0
 8002562:	0553      	lsls	r3, r2, #21
 8002564:	032d      	lsls	r5, r5, #12
 8002566:	0b2d      	lsrs	r5, r5, #12
 8002568:	0d5b      	lsrs	r3, r3, #21
 800256a:	e003      	b.n	8002574 <__aeabi_i2d+0x3c>
 800256c:	2400      	movs	r4, #0
 800256e:	2300      	movs	r3, #0
 8002570:	2500      	movs	r5, #0
 8002572:	2600      	movs	r6, #0
 8002574:	051b      	lsls	r3, r3, #20
 8002576:	432b      	orrs	r3, r5
 8002578:	07e4      	lsls	r4, r4, #31
 800257a:	4323      	orrs	r3, r4
 800257c:	0030      	movs	r0, r6
 800257e:	0019      	movs	r1, r3
 8002580:	bd70      	pop	{r4, r5, r6, pc}
 8002582:	380b      	subs	r0, #11
 8002584:	4085      	lsls	r5, r0
 8002586:	0553      	lsls	r3, r2, #21
 8002588:	032d      	lsls	r5, r5, #12
 800258a:	2600      	movs	r6, #0
 800258c:	0b2d      	lsrs	r5, r5, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	e7f0      	b.n	8002574 <__aeabi_i2d+0x3c>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	0000041e 	.word	0x0000041e

08002598 <__aeabi_ui2d>:
 8002598:	b510      	push	{r4, lr}
 800259a:	1e04      	subs	r4, r0, #0
 800259c:	d010      	beq.n	80025c0 <__aeabi_ui2d+0x28>
 800259e:	f000 f8f1 	bl	8002784 <__clzsi2>
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <__aeabi_ui2d+0x48>)
 80025a4:	1a1b      	subs	r3, r3, r0
 80025a6:	280a      	cmp	r0, #10
 80025a8:	dc11      	bgt.n	80025ce <__aeabi_ui2d+0x36>
 80025aa:	220b      	movs	r2, #11
 80025ac:	0021      	movs	r1, r4
 80025ae:	1a12      	subs	r2, r2, r0
 80025b0:	40d1      	lsrs	r1, r2
 80025b2:	3015      	adds	r0, #21
 80025b4:	030a      	lsls	r2, r1, #12
 80025b6:	055b      	lsls	r3, r3, #21
 80025b8:	4084      	lsls	r4, r0
 80025ba:	0b12      	lsrs	r2, r2, #12
 80025bc:	0d5b      	lsrs	r3, r3, #21
 80025be:	e001      	b.n	80025c4 <__aeabi_ui2d+0x2c>
 80025c0:	2300      	movs	r3, #0
 80025c2:	2200      	movs	r2, #0
 80025c4:	051b      	lsls	r3, r3, #20
 80025c6:	4313      	orrs	r3, r2
 80025c8:	0020      	movs	r0, r4
 80025ca:	0019      	movs	r1, r3
 80025cc:	bd10      	pop	{r4, pc}
 80025ce:	0022      	movs	r2, r4
 80025d0:	380b      	subs	r0, #11
 80025d2:	4082      	lsls	r2, r0
 80025d4:	055b      	lsls	r3, r3, #21
 80025d6:	0312      	lsls	r2, r2, #12
 80025d8:	2400      	movs	r4, #0
 80025da:	0b12      	lsrs	r2, r2, #12
 80025dc:	0d5b      	lsrs	r3, r3, #21
 80025de:	e7f1      	b.n	80025c4 <__aeabi_ui2d+0x2c>
 80025e0:	0000041e 	.word	0x0000041e

080025e4 <__aeabi_f2d>:
 80025e4:	b570      	push	{r4, r5, r6, lr}
 80025e6:	0043      	lsls	r3, r0, #1
 80025e8:	0246      	lsls	r6, r0, #9
 80025ea:	0fc4      	lsrs	r4, r0, #31
 80025ec:	20fe      	movs	r0, #254	; 0xfe
 80025ee:	0e1b      	lsrs	r3, r3, #24
 80025f0:	1c59      	adds	r1, r3, #1
 80025f2:	0a75      	lsrs	r5, r6, #9
 80025f4:	4208      	tst	r0, r1
 80025f6:	d00c      	beq.n	8002612 <__aeabi_f2d+0x2e>
 80025f8:	22e0      	movs	r2, #224	; 0xe0
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	4694      	mov	ip, r2
 80025fe:	076d      	lsls	r5, r5, #29
 8002600:	0b36      	lsrs	r6, r6, #12
 8002602:	4463      	add	r3, ip
 8002604:	051b      	lsls	r3, r3, #20
 8002606:	4333      	orrs	r3, r6
 8002608:	07e4      	lsls	r4, r4, #31
 800260a:	4323      	orrs	r3, r4
 800260c:	0028      	movs	r0, r5
 800260e:	0019      	movs	r1, r3
 8002610:	bd70      	pop	{r4, r5, r6, pc}
 8002612:	2b00      	cmp	r3, #0
 8002614:	d114      	bne.n	8002640 <__aeabi_f2d+0x5c>
 8002616:	2d00      	cmp	r5, #0
 8002618:	d01b      	beq.n	8002652 <__aeabi_f2d+0x6e>
 800261a:	0028      	movs	r0, r5
 800261c:	f000 f8b2 	bl	8002784 <__clzsi2>
 8002620:	280a      	cmp	r0, #10
 8002622:	dc1c      	bgt.n	800265e <__aeabi_f2d+0x7a>
 8002624:	230b      	movs	r3, #11
 8002626:	002a      	movs	r2, r5
 8002628:	1a1b      	subs	r3, r3, r0
 800262a:	40da      	lsrs	r2, r3
 800262c:	0003      	movs	r3, r0
 800262e:	3315      	adds	r3, #21
 8002630:	409d      	lsls	r5, r3
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <__aeabi_f2d+0x88>)
 8002634:	0312      	lsls	r2, r2, #12
 8002636:	1a1b      	subs	r3, r3, r0
 8002638:	055b      	lsls	r3, r3, #21
 800263a:	0b16      	lsrs	r6, r2, #12
 800263c:	0d5b      	lsrs	r3, r3, #21
 800263e:	e7e1      	b.n	8002604 <__aeabi_f2d+0x20>
 8002640:	2d00      	cmp	r5, #0
 8002642:	d009      	beq.n	8002658 <__aeabi_f2d+0x74>
 8002644:	0b32      	lsrs	r2, r6, #12
 8002646:	2680      	movs	r6, #128	; 0x80
 8002648:	0336      	lsls	r6, r6, #12
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <__aeabi_f2d+0x8c>)
 800264c:	076d      	lsls	r5, r5, #29
 800264e:	4316      	orrs	r6, r2
 8002650:	e7d8      	b.n	8002604 <__aeabi_f2d+0x20>
 8002652:	2300      	movs	r3, #0
 8002654:	2600      	movs	r6, #0
 8002656:	e7d5      	b.n	8002604 <__aeabi_f2d+0x20>
 8002658:	2600      	movs	r6, #0
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <__aeabi_f2d+0x8c>)
 800265c:	e7d2      	b.n	8002604 <__aeabi_f2d+0x20>
 800265e:	0003      	movs	r3, r0
 8002660:	002a      	movs	r2, r5
 8002662:	3b0b      	subs	r3, #11
 8002664:	409a      	lsls	r2, r3
 8002666:	2500      	movs	r5, #0
 8002668:	e7e3      	b.n	8002632 <__aeabi_f2d+0x4e>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	00000389 	.word	0x00000389
 8002670:	000007ff 	.word	0x000007ff

08002674 <__aeabi_d2f>:
 8002674:	0002      	movs	r2, r0
 8002676:	004b      	lsls	r3, r1, #1
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267a:	0308      	lsls	r0, r1, #12
 800267c:	0d5b      	lsrs	r3, r3, #21
 800267e:	4e3d      	ldr	r6, [pc, #244]	; (8002774 <__aeabi_d2f+0x100>)
 8002680:	0fcc      	lsrs	r4, r1, #31
 8002682:	0a40      	lsrs	r0, r0, #9
 8002684:	0f51      	lsrs	r1, r2, #29
 8002686:	1c5f      	adds	r7, r3, #1
 8002688:	4308      	orrs	r0, r1
 800268a:	00d5      	lsls	r5, r2, #3
 800268c:	4237      	tst	r7, r6
 800268e:	d00a      	beq.n	80026a6 <__aeabi_d2f+0x32>
 8002690:	4939      	ldr	r1, [pc, #228]	; (8002778 <__aeabi_d2f+0x104>)
 8002692:	185e      	adds	r6, r3, r1
 8002694:	2efe      	cmp	r6, #254	; 0xfe
 8002696:	dd16      	ble.n	80026c6 <__aeabi_d2f+0x52>
 8002698:	23ff      	movs	r3, #255	; 0xff
 800269a:	2100      	movs	r1, #0
 800269c:	05db      	lsls	r3, r3, #23
 800269e:	430b      	orrs	r3, r1
 80026a0:	07e0      	lsls	r0, r4, #31
 80026a2:	4318      	orrs	r0, r3
 80026a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <__aeabi_d2f+0x44>
 80026aa:	4328      	orrs	r0, r5
 80026ac:	d027      	beq.n	80026fe <__aeabi_d2f+0x8a>
 80026ae:	2105      	movs	r1, #5
 80026b0:	0189      	lsls	r1, r1, #6
 80026b2:	0a49      	lsrs	r1, r1, #9
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	e7f1      	b.n	800269c <__aeabi_d2f+0x28>
 80026b8:	4305      	orrs	r5, r0
 80026ba:	d0ed      	beq.n	8002698 <__aeabi_d2f+0x24>
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	03c9      	lsls	r1, r1, #15
 80026c0:	23ff      	movs	r3, #255	; 0xff
 80026c2:	4301      	orrs	r1, r0
 80026c4:	e7ea      	b.n	800269c <__aeabi_d2f+0x28>
 80026c6:	2e00      	cmp	r6, #0
 80026c8:	dd1c      	ble.n	8002704 <__aeabi_d2f+0x90>
 80026ca:	0192      	lsls	r2, r2, #6
 80026cc:	0011      	movs	r1, r2
 80026ce:	1e4a      	subs	r2, r1, #1
 80026d0:	4191      	sbcs	r1, r2
 80026d2:	00c0      	lsls	r0, r0, #3
 80026d4:	0f6d      	lsrs	r5, r5, #29
 80026d6:	4301      	orrs	r1, r0
 80026d8:	4329      	orrs	r1, r5
 80026da:	074b      	lsls	r3, r1, #29
 80026dc:	d048      	beq.n	8002770 <__aeabi_d2f+0xfc>
 80026de:	230f      	movs	r3, #15
 80026e0:	400b      	ands	r3, r1
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d000      	beq.n	80026e8 <__aeabi_d2f+0x74>
 80026e6:	3104      	adds	r1, #4
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	04db      	lsls	r3, r3, #19
 80026ec:	400b      	ands	r3, r1
 80026ee:	d03f      	beq.n	8002770 <__aeabi_d2f+0xfc>
 80026f0:	1c72      	adds	r2, r6, #1
 80026f2:	2efe      	cmp	r6, #254	; 0xfe
 80026f4:	d0d0      	beq.n	8002698 <__aeabi_d2f+0x24>
 80026f6:	0189      	lsls	r1, r1, #6
 80026f8:	0a49      	lsrs	r1, r1, #9
 80026fa:	b2d3      	uxtb	r3, r2
 80026fc:	e7ce      	b.n	800269c <__aeabi_d2f+0x28>
 80026fe:	2300      	movs	r3, #0
 8002700:	2100      	movs	r1, #0
 8002702:	e7cb      	b.n	800269c <__aeabi_d2f+0x28>
 8002704:	0032      	movs	r2, r6
 8002706:	3217      	adds	r2, #23
 8002708:	db22      	blt.n	8002750 <__aeabi_d2f+0xdc>
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	221e      	movs	r2, #30
 800270e:	0409      	lsls	r1, r1, #16
 8002710:	4308      	orrs	r0, r1
 8002712:	1b92      	subs	r2, r2, r6
 8002714:	2a1f      	cmp	r2, #31
 8002716:	dd1d      	ble.n	8002754 <__aeabi_d2f+0xe0>
 8002718:	2102      	movs	r1, #2
 800271a:	4249      	negs	r1, r1
 800271c:	1b8e      	subs	r6, r1, r6
 800271e:	0001      	movs	r1, r0
 8002720:	40f1      	lsrs	r1, r6
 8002722:	000e      	movs	r6, r1
 8002724:	2a20      	cmp	r2, #32
 8002726:	d004      	beq.n	8002732 <__aeabi_d2f+0xbe>
 8002728:	4a14      	ldr	r2, [pc, #80]	; (800277c <__aeabi_d2f+0x108>)
 800272a:	4694      	mov	ip, r2
 800272c:	4463      	add	r3, ip
 800272e:	4098      	lsls	r0, r3
 8002730:	4305      	orrs	r5, r0
 8002732:	0029      	movs	r1, r5
 8002734:	1e4d      	subs	r5, r1, #1
 8002736:	41a9      	sbcs	r1, r5
 8002738:	4331      	orrs	r1, r6
 800273a:	2600      	movs	r6, #0
 800273c:	074b      	lsls	r3, r1, #29
 800273e:	d1ce      	bne.n	80026de <__aeabi_d2f+0x6a>
 8002740:	2080      	movs	r0, #128	; 0x80
 8002742:	000b      	movs	r3, r1
 8002744:	04c0      	lsls	r0, r0, #19
 8002746:	2201      	movs	r2, #1
 8002748:	4003      	ands	r3, r0
 800274a:	4201      	tst	r1, r0
 800274c:	d1d3      	bne.n	80026f6 <__aeabi_d2f+0x82>
 800274e:	e7af      	b.n	80026b0 <__aeabi_d2f+0x3c>
 8002750:	2300      	movs	r3, #0
 8002752:	e7ac      	b.n	80026ae <__aeabi_d2f+0x3a>
 8002754:	490a      	ldr	r1, [pc, #40]	; (8002780 <__aeabi_d2f+0x10c>)
 8002756:	468c      	mov	ip, r1
 8002758:	0029      	movs	r1, r5
 800275a:	4463      	add	r3, ip
 800275c:	40d1      	lsrs	r1, r2
 800275e:	409d      	lsls	r5, r3
 8002760:	000a      	movs	r2, r1
 8002762:	0029      	movs	r1, r5
 8002764:	4098      	lsls	r0, r3
 8002766:	1e4d      	subs	r5, r1, #1
 8002768:	41a9      	sbcs	r1, r5
 800276a:	4301      	orrs	r1, r0
 800276c:	4311      	orrs	r1, r2
 800276e:	e7e4      	b.n	800273a <__aeabi_d2f+0xc6>
 8002770:	0033      	movs	r3, r6
 8002772:	e79d      	b.n	80026b0 <__aeabi_d2f+0x3c>
 8002774:	000007fe 	.word	0x000007fe
 8002778:	fffffc80 	.word	0xfffffc80
 800277c:	fffffca2 	.word	0xfffffca2
 8002780:	fffffc82 	.word	0xfffffc82

08002784 <__clzsi2>:
 8002784:	211c      	movs	r1, #28
 8002786:	2301      	movs	r3, #1
 8002788:	041b      	lsls	r3, r3, #16
 800278a:	4298      	cmp	r0, r3
 800278c:	d301      	bcc.n	8002792 <__clzsi2+0xe>
 800278e:	0c00      	lsrs	r0, r0, #16
 8002790:	3910      	subs	r1, #16
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	4298      	cmp	r0, r3
 8002796:	d301      	bcc.n	800279c <__clzsi2+0x18>
 8002798:	0a00      	lsrs	r0, r0, #8
 800279a:	3908      	subs	r1, #8
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	4298      	cmp	r0, r3
 80027a0:	d301      	bcc.n	80027a6 <__clzsi2+0x22>
 80027a2:	0900      	lsrs	r0, r0, #4
 80027a4:	3904      	subs	r1, #4
 80027a6:	a202      	add	r2, pc, #8	; (adr r2, 80027b0 <__clzsi2+0x2c>)
 80027a8:	5c10      	ldrb	r0, [r2, r0]
 80027aa:	1840      	adds	r0, r0, r1
 80027ac:	4770      	bx	lr
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	02020304 	.word	0x02020304
 80027b4:	01010101 	.word	0x01010101
	...

080027c0 <new_analog>:
//
//
// All Public Functions

// EFFECTS: Create a new Analog struct and returns pointer to struct.
Analog* new_analog(ADC_HandleTypeDef* _adc_pin, uint8_t S0, uint8_t S1, uint8_t S2, uint8_t S3){
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	000c      	movs	r4, r1
 80027ca:	0010      	movs	r0, r2
 80027cc:	0019      	movs	r1, r3
 80027ce:	1cfb      	adds	r3, r7, #3
 80027d0:	1c22      	adds	r2, r4, #0
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	1cbb      	adds	r3, r7, #2
 80027d6:	1c02      	adds	r2, r0, #0
 80027d8:	701a      	strb	r2, [r3, #0]
 80027da:	1c7b      	adds	r3, r7, #1
 80027dc:	1c0a      	adds	r2, r1, #0
 80027de:	701a      	strb	r2, [r3, #0]

	// Create a new struct
	Analog* Analog_object = (Analog*) malloc(sizeof(Analog));
 80027e0:	2008      	movs	r0, #8
 80027e2:	f005 fd83 	bl	80082ec <malloc>
 80027e6:	0003      	movs	r3, r0
 80027e8:	60fb      	str	r3, [r7, #12]

	Analog_object->adc_pin = _adc_pin;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	601a      	str	r2, [r3, #0]
	Analog_object->select_pins[0] = S0;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1cfa      	adds	r2, r7, #3
 80027f4:	7812      	ldrb	r2, [r2, #0]
 80027f6:	711a      	strb	r2, [r3, #4]
	Analog_object->select_pins[1] = S1;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1cba      	adds	r2, r7, #2
 80027fc:	7812      	ldrb	r2, [r2, #0]
 80027fe:	715a      	strb	r2, [r3, #5]
	Analog_object->select_pins[2] = S2;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1c7a      	adds	r2, r7, #1
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	719a      	strb	r2, [r3, #6]
	Analog_object->select_pins[3] = S3;
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	2320      	movs	r3, #32
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	71d3      	strb	r3, [r2, #7]

	return Analog_object;
 8002812:	68fb      	ldr	r3, [r7, #12]

}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b005      	add	sp, #20
 800281a:	bd90      	pop	{r4, r7, pc}

0800281c <get_voltage_data>:

// EFFECTS: Get voltage data from a specific voltage sensor in Volts
float get_voltage_data(const Analog* _Analog){
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	// Read data from ADC, raw_ADC_data is a number in [0, 4095]
	uint32_t raw_ADC_data = read_from_ADC(_Analog->adc_pin);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 f85b 	bl	80028e4 <read_from_ADC>
 800282e:	0003      	movs	r3, r0
 8002830:	60fb      	str	r3, [r7, #12]
	// Convert from [0, 4095] to [0, 1] to [0, 3.3]
	float steppedDownVoltage = (raw_ADC_data / 4095.0) * 3.3;
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f7ff feb0 	bl	8002598 <__aeabi_ui2d>
 8002838:	2200      	movs	r2, #0
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <get_voltage_data+0x58>)
 800283c:	f7fe fc24 	bl	8001088 <__aeabi_ddiv>
 8002840:	0002      	movs	r2, r0
 8002842:	000b      	movs	r3, r1
 8002844:	0010      	movs	r0, r2
 8002846:	0019      	movs	r1, r3
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <get_voltage_data+0x5c>)
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <get_voltage_data+0x60>)
 800284c:	f7ff f822 	bl	8001894 <__aeabi_dmul>
 8002850:	0002      	movs	r2, r0
 8002852:	000b      	movs	r3, r1
 8002854:	0010      	movs	r0, r2
 8002856:	0019      	movs	r1, r3
 8002858:	f7ff ff0c 	bl	8002674 <__aeabi_d2f>
 800285c:	1c03      	adds	r3, r0, #0
 800285e:	60bb      	str	r3, [r7, #8]
	// Convert steppedDownVoltage to actual output voltage (multiplier of 14)
	return steppedDownVoltage * 14.0;
 8002860:	4907      	ldr	r1, [pc, #28]	; (8002880 <get_voltage_data+0x64>)
 8002862:	68b8      	ldr	r0, [r7, #8]
 8002864:	f7fd ff26 	bl	80006b4 <__aeabi_fmul>
 8002868:	1c03      	adds	r3, r0, #0
}
 800286a:	1c18      	adds	r0, r3, #0
 800286c:	46bd      	mov	sp, r7
 800286e:	b004      	add	sp, #16
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	40affe00 	.word	0x40affe00
 8002878:	66666666 	.word	0x66666666
 800287c:	400a6666 	.word	0x400a6666
 8002880:	41600000 	.word	0x41600000

08002884 <get_current_data>:

// EFFECTS: Get current data from a specific current sensor in Amps
float get_current_data(const Analog* _Analog){
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	// Get offset voltage
	float offsetVolts = get_voltage_data(_Analog);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff ffc4 	bl	800281c <get_voltage_data>
 8002894:	1c03      	adds	r3, r0, #0
 8002896:	617b      	str	r3, [r7, #20]
	// Account for offset which is zero current output voltage (3.3 * 0.1)
	float volts = offsetVolts - 3.3 * 0.1;
 8002898:	6978      	ldr	r0, [r7, #20]
 800289a:	f7ff fea3 	bl	80025e4 <__aeabi_f2d>
 800289e:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <get_current_data+0x50>)
 80028a0:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <get_current_data+0x54>)
 80028a2:	f7ff fa63 	bl	8001d6c <__aeabi_dsub>
 80028a6:	0002      	movs	r2, r0
 80028a8:	000b      	movs	r3, r1
 80028aa:	0010      	movs	r0, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	f7ff fee1 	bl	8002674 <__aeabi_d2f>
 80028b2:	1c03      	adds	r3, r0, #0
 80028b4:	613b      	str	r3, [r7, #16]
	// Convert from volts to millivolts
	float millivolts = (volts) * 1000.0;
 80028b6:	4909      	ldr	r1, [pc, #36]	; (80028dc <get_current_data+0x58>)
 80028b8:	6938      	ldr	r0, [r7, #16]
 80028ba:	f7fd fefb 	bl	80006b4 <__aeabi_fmul>
 80028be:	1c03      	adds	r3, r0, #0
 80028c0:	60fb      	str	r3, [r7, #12]
	// Convert based on sensitivity, which is 264 mV/A
	return millivolts / 264.0;
 80028c2:	4907      	ldr	r1, [pc, #28]	; (80028e0 <get_current_data+0x5c>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f7fd fde9 	bl	800049c <__aeabi_fdiv>
 80028ca:	1c03      	adds	r3, r0, #0
}
 80028cc:	1c18      	adds	r0, r3, #0
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b006      	add	sp, #24
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	51eb851f 	.word	0x51eb851f
 80028d8:	3fd51eb8 	.word	0x3fd51eb8
 80028dc:	447a0000 	.word	0x447a0000
 80028e0:	43840000 	.word	0x43840000

080028e4 <read_from_ADC>:
//
// All Private Functions

// EFFECTS: Read from ADC object
// Returns a number between 0 and 4095
uint32_t read_from_ADC(ADC_HandleTypeDef* adc_object){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	uint32_t value[3];
	HAL_ADC_Start_DMA(adc_object,value,3);
 80028ec:	2308      	movs	r3, #8
 80028ee:	18f9      	adds	r1, r7, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2203      	movs	r2, #3
 80028f4:	0018      	movs	r0, r3
 80028f6:	f001 fc2b 	bl	8004150 <HAL_ADC_Start_DMA>
	HAL_ADC_PollForConversion(adc_object, HAL_MAX_DELAY);
 80028fa:	2301      	movs	r3, #1
 80028fc:	425a      	negs	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	0011      	movs	r1, r2
 8002902:	0018      	movs	r0, r3
 8002904:	f001 fb90 	bl	8004028 <HAL_ADC_PollForConversion>
    uint32_t raw = HAL_ADC_GetValue(adc_object);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	0018      	movs	r0, r3
 800290c:	f001 fcae 	bl	800426c <HAL_ADC_GetValue>
 8002910:	0003      	movs	r3, r0
 8002912:	617b      	str	r3, [r7, #20]
    HAL_ADC_Stop(adc_object);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f001 fb4a 	bl	8003fb0 <HAL_ADC_Stop>
    return raw;
 800291c:	697b      	ldr	r3, [r7, #20]
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b006      	add	sp, #24
 8002924:	bd80      	pop	{r7, pc}
	...

08002928 <send_temperature_data>:

#ifdef TEMPERATURE_ENABLE

// EFFECTS: sends temperature data in the following format
// FORMAT: $TEMPERATURE,<t0>,<t1>,<t2>
void send_temperature_data() {
 8002928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292a:	b095      	sub	sp, #84	; 0x54
 800292c:	af04      	add	r7, sp, #16

	// TODO

	// Total length of output of string $TEMPERATURE,x,x,x
	uint8_t buffer[50] = "";
 800292e:	260c      	movs	r6, #12
 8002930:	19bb      	adds	r3, r7, r6
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	3304      	adds	r3, #4
 8002938:	222e      	movs	r2, #46	; 0x2e
 800293a:	2100      	movs	r1, #0
 800293c:	0018      	movs	r0, r3
 800293e:	f005 fce8 	bl	8008312 <memset>

	sprintf((char *)buffer, "$TEMPERATURE,%f,%f,%f\r\n",\
			temperature_data[0], temperature_data[1], temperature_data[2]);
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <send_temperature_data+0x70>)
 8002944:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)buffer, "$TEMPERATURE,%f,%f,%f\r\n",\
 8002946:	1c18      	adds	r0, r3, #0
 8002948:	f7ff fe4c 	bl	80025e4 <__aeabi_f2d>
 800294c:	6038      	str	r0, [r7, #0]
 800294e:	6079      	str	r1, [r7, #4]
			temperature_data[0], temperature_data[1], temperature_data[2]);
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <send_temperature_data+0x70>)
 8002952:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)buffer, "$TEMPERATURE,%f,%f,%f\r\n",\
 8002954:	1c18      	adds	r0, r3, #0
 8002956:	f7ff fe45 	bl	80025e4 <__aeabi_f2d>
 800295a:	0004      	movs	r4, r0
 800295c:	000d      	movs	r5, r1
			temperature_data[0], temperature_data[1], temperature_data[2]);
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <send_temperature_data+0x70>)
 8002960:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)buffer, "$TEMPERATURE,%f,%f,%f\r\n",\
 8002962:	1c18      	adds	r0, r3, #0
 8002964:	f7ff fe3e 	bl	80025e4 <__aeabi_f2d>
 8002968:	0002      	movs	r2, r0
 800296a:	000b      	movs	r3, r1
 800296c:	490b      	ldr	r1, [pc, #44]	; (800299c <send_temperature_data+0x74>)
 800296e:	19b8      	adds	r0, r7, r6
 8002970:	9202      	str	r2, [sp, #8]
 8002972:	9303      	str	r3, [sp, #12]
 8002974:	9400      	str	r4, [sp, #0]
 8002976:	9501      	str	r5, [sp, #4]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f006 fa06 	bl	8008d8c <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	049b      	lsls	r3, r3, #18
 8002984:	19b9      	adds	r1, r7, r6
 8002986:	4806      	ldr	r0, [pc, #24]	; (80029a0 <send_temperature_data+0x78>)
 8002988:	2232      	movs	r2, #50	; 0x32
 800298a:	f003 f843 	bl	8005a14 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b011      	add	sp, #68	; 0x44
 8002994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	20000204 	.word	0x20000204
 800299c:	0800b1b0 	.word	0x0800b1b0
 80029a0:	20000274 	.word	0x20000274

080029a4 <select_analog_channel>:
#endif

#ifdef ANALOG_ENABLE

// EFFECTS: select analog channel
void select_analog_channel(const Analog* analog_device) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, analog_device->select_pins[0]); //S0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	791a      	ldrb	r2, [r3, #4]
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	0059      	lsls	r1, r3, #1
 80029b4:	23a0      	movs	r3, #160	; 0xa0
 80029b6:	05db      	lsls	r3, r3, #23
 80029b8:	0018      	movs	r0, r3
 80029ba:	f002 fb5b 	bl	8005074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, analog_device->select_pins[1]); //S1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	795a      	ldrb	r2, [r3, #5]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	0099      	lsls	r1, r3, #2
 80029c6:	23a0      	movs	r3, #160	; 0xa0
 80029c8:	05db      	lsls	r3, r3, #23
 80029ca:	0018      	movs	r0, r3
 80029cc:	f002 fb52 	bl	8005074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, analog_device->select_pins[2]); //S2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	799b      	ldrb	r3, [r3, #6]
 80029d4:	480b      	ldr	r0, [pc, #44]	; (8002a04 <select_analog_channel+0x60>)
 80029d6:	001a      	movs	r2, r3
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	f002 fb4b 	bl	8005074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, analog_device->select_pins[3]); //S3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	79db      	ldrb	r3, [r3, #7]
 80029e2:	4808      	ldr	r0, [pc, #32]	; (8002a04 <select_analog_channel+0x60>)
 80029e4:	001a      	movs	r2, r3
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	f002 fb44 	bl	8005074 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,  1); //ENABLE
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	4805      	ldr	r0, [pc, #20]	; (8002a08 <select_analog_channel+0x64>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	0019      	movs	r1, r3
 80029f6:	f002 fb3d 	bl	8005074 <HAL_GPIO_WritePin>
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b002      	add	sp, #8
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	50000800 	.word	0x50000800
 8002a08:	50000400 	.word	0x50000400

08002a0c <get_analog_data>:

// EFFECTS: get analog data in the following format
// FORMAT: $CURRENT,<c0>,<c1>,<c2> and $VOLTAGE,<v0>,<v1>,<v2>
void get_analog_data() {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0

    for (int i = 0; i < CURRENT_DEVICES; ++i) {
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e014      	b.n	8002a42 <get_analog_data+0x36>
    	const Analog* analog_device = current_channels[i];
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <get_analog_data+0x7c>)
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	0092      	lsls	r2, r2, #2
 8002a1e:	58d3      	ldr	r3, [r2, r3]
 8002a20:	603b      	str	r3, [r7, #0]
    	select_analog_channel(analog_device);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7ff ffbd 	bl	80029a4 <select_analog_channel>
    	current_data[i] = get_current_data(analog_device);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f7ff ff29 	bl	8002884 <get_current_data>
 8002a32:	1c01      	adds	r1, r0, #0
 8002a34:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <get_analog_data+0x80>)
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < CURRENT_DEVICES; ++i) {
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	dde7      	ble.n	8002a18 <get_analog_data+0xc>
    }

    for (int i = 0; i < VOLTAGE_DEVICES; ++i) {
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	e014      	b.n	8002a78 <get_analog_data+0x6c>
    	const Analog* analog_device = voltage_channels[i];
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <get_analog_data+0x84>)
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	0092      	lsls	r2, r2, #2
 8002a54:	58d3      	ldr	r3, [r2, r3]
 8002a56:	607b      	str	r3, [r7, #4]
    	select_analog_channel(analog_device);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff ffa2 	bl	80029a4 <select_analog_channel>
    	voltage_data[i] = get_voltage_data(analog_device);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7ff feda 	bl	800281c <get_voltage_data>
 8002a68:	1c01      	adds	r1, r0, #0
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <get_analog_data+0x88>)
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < VOLTAGE_DEVICES; ++i) {
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3301      	adds	r3, #1
 8002a76:	60bb      	str	r3, [r7, #8]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	dde7      	ble.n	8002a4e <get_analog_data+0x42>
	}
}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000334 	.word	0x20000334
 8002a8c:	20000210 	.word	0x20000210
 8002a90:	20000340 	.word	0x20000340
 8002a94:	2000021c 	.word	0x2000021c

08002a98 <send_current_data>:

// EFFECTS: send current data in the following format
// FORMAT: $CURRENT,<c0>,<c1>,<c2>
void send_current_data() {
 8002a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9a:	b095      	sub	sp, #84	; 0x54
 8002a9c:	af04      	add	r7, sp, #16

	// TODO - verify that we are sending i2c messages properly
	// Total length of output of string $CURRENT,x,x,x
	uint8_t buffer[50] = "";
 8002a9e:	260c      	movs	r6, #12
 8002aa0:	19bb      	adds	r3, r7, r6
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	222e      	movs	r2, #46	; 0x2e
 8002aaa:	2100      	movs	r1, #0
 8002aac:	0018      	movs	r0, r3
 8002aae:	f005 fc30 	bl	8008312 <memset>

	sprintf((char *)buffer, "$CURRENT,%f,%f,%f\r\n",\
			current_data[0], current_data[1], current_data[2]);
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <send_current_data+0x70>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)buffer, "$CURRENT,%f,%f,%f\r\n",\
 8002ab6:	1c18      	adds	r0, r3, #0
 8002ab8:	f7ff fd94 	bl	80025e4 <__aeabi_f2d>
 8002abc:	6038      	str	r0, [r7, #0]
 8002abe:	6079      	str	r1, [r7, #4]
			current_data[0], current_data[1], current_data[2]);
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <send_current_data+0x70>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)buffer, "$CURRENT,%f,%f,%f\r\n",\
 8002ac4:	1c18      	adds	r0, r3, #0
 8002ac6:	f7ff fd8d 	bl	80025e4 <__aeabi_f2d>
 8002aca:	0004      	movs	r4, r0
 8002acc:	000d      	movs	r5, r1
			current_data[0], current_data[1], current_data[2]);
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <send_current_data+0x70>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)buffer, "$CURRENT,%f,%f,%f\r\n",\
 8002ad2:	1c18      	adds	r0, r3, #0
 8002ad4:	f7ff fd86 	bl	80025e4 <__aeabi_f2d>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	000b      	movs	r3, r1
 8002adc:	490b      	ldr	r1, [pc, #44]	; (8002b0c <send_current_data+0x74>)
 8002ade:	19b8      	adds	r0, r7, r6
 8002ae0:	9202      	str	r2, [sp, #8]
 8002ae2:	9303      	str	r3, [sp, #12]
 8002ae4:	9400      	str	r4, [sp, #0]
 8002ae6:	9501      	str	r5, [sp, #4]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f006 f94e 	bl	8008d8c <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	049b      	lsls	r3, r3, #18
 8002af4:	19b9      	adds	r1, r7, r6
 8002af6:	4806      	ldr	r0, [pc, #24]	; (8002b10 <send_current_data+0x78>)
 8002af8:	2232      	movs	r2, #50	; 0x32
 8002afa:	f002 ff8b 	bl	8005a14 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b011      	add	sp, #68	; 0x44
 8002b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	20000210 	.word	0x20000210
 8002b0c:	0800b1c8 	.word	0x0800b1c8
 8002b10:	20000274 	.word	0x20000274

08002b14 <send_voltage_data>:

// EFFECTS: send analog data in the following format
// FORMAT: $VOLTAGE,<v0>,<v1>,<v2>
void send_voltage_data() {
 8002b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b16:	b095      	sub	sp, #84	; 0x54
 8002b18:	af04      	add	r7, sp, #16
  
	// TODO - verify that we are sending i2c messages properly
	// Total length of output of string $VOLTAGE,x,x,x
	uint8_t buffer[50] = "";
 8002b1a:	260c      	movs	r6, #12
 8002b1c:	19bb      	adds	r3, r7, r6
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	3304      	adds	r3, #4
 8002b24:	222e      	movs	r2, #46	; 0x2e
 8002b26:	2100      	movs	r1, #0
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f005 fbf2 	bl	8008312 <memset>

	sprintf((char *)buffer, "$VOLTAGE,%f,%f,%f\r\n",\
			voltage_data[0], voltage_data[1], voltage_data[2]);
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <send_voltage_data+0x70>)
 8002b30:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)buffer, "$VOLTAGE,%f,%f,%f\r\n",\
 8002b32:	1c18      	adds	r0, r3, #0
 8002b34:	f7ff fd56 	bl	80025e4 <__aeabi_f2d>
 8002b38:	6038      	str	r0, [r7, #0]
 8002b3a:	6079      	str	r1, [r7, #4]
			voltage_data[0], voltage_data[1], voltage_data[2]);
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <send_voltage_data+0x70>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)buffer, "$VOLTAGE,%f,%f,%f\r\n",\
 8002b40:	1c18      	adds	r0, r3, #0
 8002b42:	f7ff fd4f 	bl	80025e4 <__aeabi_f2d>
 8002b46:	0004      	movs	r4, r0
 8002b48:	000d      	movs	r5, r1
			voltage_data[0], voltage_data[1], voltage_data[2]);
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <send_voltage_data+0x70>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)buffer, "$VOLTAGE,%f,%f,%f\r\n",\
 8002b4e:	1c18      	adds	r0, r3, #0
 8002b50:	f7ff fd48 	bl	80025e4 <__aeabi_f2d>
 8002b54:	0002      	movs	r2, r0
 8002b56:	000b      	movs	r3, r1
 8002b58:	490b      	ldr	r1, [pc, #44]	; (8002b88 <send_voltage_data+0x74>)
 8002b5a:	19b8      	adds	r0, r7, r6
 8002b5c:	9202      	str	r2, [sp, #8]
 8002b5e:	9303      	str	r3, [sp, #12]
 8002b60:	9400      	str	r4, [sp, #0]
 8002b62:	9501      	str	r5, [sp, #4]
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f006 f910 	bl	8008d8c <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	049b      	lsls	r3, r3, #18
 8002b70:	19b9      	adds	r1, r7, r6
 8002b72:	4806      	ldr	r0, [pc, #24]	; (8002b8c <send_voltage_data+0x78>)
 8002b74:	2232      	movs	r2, #50	; 0x32
 8002b76:	f002 ff4d 	bl	8005a14 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b011      	add	sp, #68	; 0x44
 8002b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	2000021c 	.word	0x2000021c
 8002b88:	0800b1dc 	.word	0x0800b1dc
 8002b8c:	20000274 	.word	0x20000274

08002b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b96:	f000 fe31 	bl	80037fc <HAL_Init>

  /* USER CODE BEGIN Init */

#ifdef TEMPERATURE_ENABLE

i2cBus = new_smbus(&hi2c1);
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <main+0x138>)
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 fa7c 	bl	800309a <new_smbus>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <main+0x13c>)
 8002ba6:	601a      	str	r2, [r3, #0]
disable_DMA(i2cBus);
 8002ba8:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <main+0x13c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f000 fa90 	bl	80030d2 <disable_DMA>

temperature_channels[TEMPERATURE_3_3_V_CHANNEL] = new_temperature_sensor(i2cBus, 0, 0, 0);
 8002bb2:	4b46      	ldr	r3, [pc, #280]	; (8002ccc <main+0x13c>)
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2100      	movs	r1, #0
 8002bbc:	f000 fd15 	bl	80035ea <new_temperature_sensor>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <main+0x140>)
 8002bc4:	601a      	str	r2, [r3, #0]
temperature_channels[TEMPERATURE_5_V_CHANNEL] = new_temperature_sensor(i2cBus, 1, 0, 0);
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <main+0x13c>)
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2101      	movs	r1, #1
 8002bd0:	f000 fd0b 	bl	80035ea <new_temperature_sensor>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <main+0x140>)
 8002bd8:	605a      	str	r2, [r3, #4]
temperature_channels[TEMPERATURE_12_V_CHANNEL] = new_temperature_sensor(i2cBus, 0, 1, 0);
 8002bda:	4b3c      	ldr	r3, [pc, #240]	; (8002ccc <main+0x13c>)
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	2201      	movs	r2, #1
 8002be2:	2100      	movs	r1, #0
 8002be4:	f000 fd01 	bl	80035ea <new_temperature_sensor>
 8002be8:	0002      	movs	r2, r0
 8002bea:	4b39      	ldr	r3, [pc, #228]	; (8002cd0 <main+0x140>)
 8002bec:	609a      	str	r2, [r3, #8]

#endif

#ifdef ANALOG_ENABLE

current_channels[CS3_3_3_V] = new_analog(&hadc1, 0, 0, 1, 0);
 8002bee:	4839      	ldr	r0, [pc, #228]	; (8002cd4 <main+0x144>)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f7ff fde1 	bl	80027c0 <new_analog>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <main+0x148>)
 8002c02:	601a      	str	r2, [r3, #0]
current_channels[CS2_5_V] = new_analog(&hadc1, 0, 1, 0, 0);
 8002c04:	4833      	ldr	r0, [pc, #204]	; (8002cd4 <main+0x144>)
 8002c06:	2300      	movs	r3, #0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f7ff fdd6 	bl	80027c0 <new_analog>
 8002c14:	0002      	movs	r2, r0
 8002c16:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <main+0x148>)
 8002c18:	605a      	str	r2, [r3, #4]
current_channels[CS1_12_V] = new_analog(&hadc1, 0, 0, 0, 0);
 8002c1a:	482e      	ldr	r0, [pc, #184]	; (8002cd4 <main+0x144>)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2300      	movs	r3, #0
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	f7ff fdcb 	bl	80027c0 <new_analog>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <main+0x148>)
 8002c2e:	609a      	str	r2, [r3, #8]

voltage_channels[VOLTAGE_DIVIDER_3_3_V] = new_analog(&hadc1, 1, 0, 1, 0);
 8002c30:	4828      	ldr	r0, [pc, #160]	; (8002cd4 <main+0x144>)
 8002c32:	2300      	movs	r3, #0
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2301      	movs	r3, #1
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	f7ff fdc0 	bl	80027c0 <new_analog>
 8002c40:	0002      	movs	r2, r0
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <main+0x14c>)
 8002c44:	601a      	str	r2, [r3, #0]
voltage_channels[VOLTAGE_DIVIDER_5_V] = new_analog(&hadc1, 1, 1, 0, 0);
 8002c46:	4823      	ldr	r0, [pc, #140]	; (8002cd4 <main+0x144>)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2201      	movs	r2, #1
 8002c50:	2101      	movs	r1, #1
 8002c52:	f7ff fdb5 	bl	80027c0 <new_analog>
 8002c56:	0002      	movs	r2, r0
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <main+0x14c>)
 8002c5a:	605a      	str	r2, [r3, #4]
voltage_channels[VOLTAGE_DIVIDER_12_V] = new_analog(&hadc1, 1, 0, 0, 0);
 8002c5c:	481d      	ldr	r0, [pc, #116]	; (8002cd4 <main+0x144>)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2300      	movs	r3, #0
 8002c64:	2200      	movs	r2, #0
 8002c66:	2101      	movs	r1, #1
 8002c68:	f7ff fdaa 	bl	80027c0 <new_analog>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <main+0x14c>)
 8002c70:	609a      	str	r2, [r3, #8]
#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c72:	f000 f837 	bl	8002ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c76:	f000 f981 	bl	8002f7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8002c7a:	f000 f893 	bl	8002da4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c7e:	f000 f8fd 	bl	8002e7c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002c82:	f000 f93b 	bl	8002efc <MX_I2C2_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef TEMPERATURE_ENABLE

      for (int i = 0; i < TEMPERATURE_DEVICES; ++i) {
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
 8002c8a:	e00e      	b.n	8002caa <main+0x11a>
          temperature_data[i] = get_temperature_data(temperature_channels[i]);
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <main+0x140>)
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	0092      	lsls	r2, r2, #2
 8002c92:	58d3      	ldr	r3, [r2, r3]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f000 fce7 	bl	8003668 <get_temperature_data>
 8002c9a:	1c01      	adds	r1, r0, #0
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <main+0x150>)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	50d1      	str	r1, [r2, r3]
      for (int i = 0; i < TEMPERATURE_DEVICES; ++i) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	dded      	ble.n	8002c8c <main+0xfc>
      }

      send_temperature_data(temperature_data);
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <main+0x150>)
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f7ff fe38 	bl	8002928 <send_temperature_data>

#endif

#ifdef ANALOG_ENABLE
      get_analog_data();
 8002cb8:	f7ff fea8 	bl	8002a0c <get_analog_data>
      send_current_data();
 8002cbc:	f7ff feec 	bl	8002a98 <send_current_data>
      send_voltage_data();
 8002cc0:	f7ff ff28 	bl	8002b14 <send_voltage_data>
      for (int i = 0; i < TEMPERATURE_DEVICES; ++i) {
 8002cc4:	e7df      	b.n	8002c86 <main+0xf6>
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	20000228 	.word	0x20000228
 8002ccc:	200002c0 	.word	0x200002c0
 8002cd0:	20000328 	.word	0x20000328
 8002cd4:	200002c4 	.word	0x200002c4
 8002cd8:	20000334 	.word	0x20000334
 8002cdc:	20000340 	.word	0x20000340
 8002ce0:	20000204 	.word	0x20000204

08002ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b099      	sub	sp, #100	; 0x64
 8002ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cea:	242c      	movs	r4, #44	; 0x2c
 8002cec:	193b      	adds	r3, r7, r4
 8002cee:	0018      	movs	r0, r3
 8002cf0:	2334      	movs	r3, #52	; 0x34
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	f005 fb0c 	bl	8008312 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cfa:	231c      	movs	r3, #28
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	0018      	movs	r0, r3
 8002d00:	2310      	movs	r3, #16
 8002d02:	001a      	movs	r2, r3
 8002d04:	2100      	movs	r1, #0
 8002d06:	f005 fb04 	bl	8008312 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	2318      	movs	r3, #24
 8002d10:	001a      	movs	r2, r3
 8002d12:	2100      	movs	r1, #0
 8002d14:	f005 fafd 	bl	8008312 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f004 fcb5 	bl	800768c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d22:	193b      	adds	r3, r7, r4
 8002d24:	2202      	movs	r2, #2
 8002d26:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d28:	193b      	adds	r3, r7, r4
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0052      	lsls	r2, r2, #1
 8002d2e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	0018      	movs	r0, r3
 8002d46:	f004 fce1 	bl	800770c <HAL_RCC_OscConfig>
 8002d4a:	1e03      	subs	r3, r0, #0
 8002d4c:	d001      	beq.n	8002d52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002d4e:	f000 f99f 	bl	8003090 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d52:	211c      	movs	r1, #28
 8002d54:	187b      	adds	r3, r7, r1
 8002d56:	2207      	movs	r2, #7
 8002d58:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	2200      	movs	r2, #0
 8002d64:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d66:	187b      	adds	r3, r7, r1
 8002d68:	2200      	movs	r2, #0
 8002d6a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	2100      	movs	r1, #0
 8002d70:	0018      	movs	r0, r3
 8002d72:	f004 ffe1 	bl	8007d38 <HAL_RCC_ClockConfig>
 8002d76:	1e03      	subs	r3, r0, #0
 8002d78:	d001      	beq.n	8002d7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d7a:	f000 f989 	bl	8003090 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	2220      	movs	r2, #32
 8002d82:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d84:	1d3b      	adds	r3, r7, #4
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f005 f95d 	bl	800804c <HAL_RCCEx_PeriphCLKConfig>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d001      	beq.n	8002d9a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002d96:	f000 f97b 	bl	8003090 <Error_Handler>
  }
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b019      	add	sp, #100	; 0x64
 8002da0:	bd90      	pop	{r4, r7, pc}
	...

08002da4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	0018      	movs	r0, r3
 8002dae:	230c      	movs	r3, #12
 8002db0:	001a      	movs	r2, r3
 8002db2:	2100      	movs	r1, #0
 8002db4:	f005 faad 	bl	8008312 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002dba:	4a2e      	ldr	r2, [pc, #184]	; (8002e74 <MX_ADC1_Init+0xd0>)
 8002dbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	05d2      	lsls	r2, r2, #23
 8002dc4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002dd2:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002dda:	2204      	movs	r2, #4
 8002ddc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002de4:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dea:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002df8:	2220      	movs	r2, #32
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e0c:	222c      	movs	r2, #44	; 0x2c
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e26:	223c      	movs	r2, #60	; 0x3c
 8002e28:	2100      	movs	r1, #0
 8002e2a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002e2c:	4b10      	ldr	r3, [pc, #64]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fedd 	bl	8003bf4 <HAL_ADC_Init>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002e3e:	f000 f927 	bl	8003090 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	4a0c      	ldr	r2, [pc, #48]	; (8002e78 <MX_ADC1_Init+0xd4>)
 8002e46:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e54:	1d3a      	adds	r2, r7, #4
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <MX_ADC1_Init+0xcc>)
 8002e58:	0011      	movs	r1, r2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f001 fa2a 	bl	80042b4 <HAL_ADC_ConfigChannel>
 8002e60:	1e03      	subs	r3, r0, #0
 8002e62:	d001      	beq.n	8002e68 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002e64:	f000 f914 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200002c4 	.word	0x200002c4
 8002e74:	40012400 	.word	0x40012400
 8002e78:	04000002 	.word	0x04000002

08002e7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <MX_I2C1_Init+0x78>)
 8002e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <MX_I2C1_Init+0x7c>)
 8002e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002eb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f002 f8f9 	bl	80050b0 <HAL_I2C_Init>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ec2:	f000 f8e5 	bl	8003090 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ec8:	2100      	movs	r1, #0
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f004 fb46 	bl	800755c <HAL_I2CEx_ConfigAnalogFilter>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ed4:	f000 f8dc 	bl	8003090 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ed8:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eda:	2100      	movs	r1, #0
 8002edc:	0018      	movs	r0, r3
 8002ede:	f004 fb89 	bl	80075f4 <HAL_I2CEx_ConfigDigitalFilter>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d001      	beq.n	8002eea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ee6:	f000 f8d3 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000228 	.word	0x20000228
 8002ef4:	40005400 	.word	0x40005400
 8002ef8:	00303d5b 	.word	0x00303d5b

08002efc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <MX_I2C2_Init+0x78>)
 8002f04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <MX_I2C2_Init+0x7c>)
 8002f0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f002 f8b9 	bl	80050b0 <HAL_I2C_Init>
 8002f3e:	1e03      	subs	r3, r0, #0
 8002f40:	d001      	beq.n	8002f46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002f42:	f000 f8a5 	bl	8003090 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f48:	2100      	movs	r1, #0
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f004 fb06 	bl	800755c <HAL_I2CEx_ConfigAnalogFilter>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002f54:	f000 f89c 	bl	8003090 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f004 fb49 	bl	80075f4 <HAL_I2CEx_ConfigDigitalFilter>
 8002f62:	1e03      	subs	r3, r0, #0
 8002f64:	d001      	beq.n	8002f6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002f66:	f000 f893 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	20000274 	.word	0x20000274
 8002f74:	40005800 	.word	0x40005800
 8002f78:	00303d5b 	.word	0x00303d5b

08002f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b089      	sub	sp, #36	; 0x24
 8002f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f82:	240c      	movs	r4, #12
 8002f84:	193b      	adds	r3, r7, r4
 8002f86:	0018      	movs	r0, r3
 8002f88:	2314      	movs	r3, #20
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	f005 f9c0 	bl	8008312 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <MX_GPIO_Init+0x108>)
 8002f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <MX_GPIO_Init+0x108>)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <MX_GPIO_Init+0x108>)
 8002fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002faa:	4b36      	ldr	r3, [pc, #216]	; (8003084 <MX_GPIO_Init+0x108>)
 8002fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fae:	4b35      	ldr	r3, [pc, #212]	; (8003084 <MX_GPIO_Init+0x108>)
 8002fb0:	2102      	movs	r1, #2
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb6:	4b33      	ldr	r3, [pc, #204]	; (8003084 <MX_GPIO_Init+0x108>)
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	2202      	movs	r2, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	607b      	str	r3, [r7, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <MX_GPIO_Init+0x108>)
 8002fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc6:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <MX_GPIO_Init+0x108>)
 8002fc8:	2104      	movs	r1, #4
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fce:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <MX_GPIO_Init+0x108>)
 8002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|Analog_Enable_Pin, GPIO_PIN_RESET);
 8002fda:	2390      	movs	r3, #144	; 0x90
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	482a      	ldr	r0, [pc, #168]	; (8003088 <MX_GPIO_Init+0x10c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	f002 f846 	bl	8005074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Analog_Select_Pin|Analog_SelectA9_Pin, GPIO_PIN_RESET);
 8002fe8:	23c0      	movs	r3, #192	; 0xc0
 8002fea:	0099      	lsls	r1, r3, #2
 8002fec:	23a0      	movs	r3, #160	; 0xa0
 8002fee:	05db      	lsls	r3, r3, #23
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f002 f83e 	bl	8005074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Analog_SelectC6_Pin|Analog_SelectC7_Pin, GPIO_PIN_RESET);
 8002ff8:	4b24      	ldr	r3, [pc, #144]	; (800308c <MX_GPIO_Init+0x110>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	21c0      	movs	r1, #192	; 0xc0
 8002ffe:	0018      	movs	r0, r3
 8003000:	f002 f838 	bl	8005074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 Analog_Enable_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|Analog_Enable_Pin;
 8003004:	193b      	adds	r3, r7, r4
 8003006:	2290      	movs	r2, #144	; 0x90
 8003008:	0212      	lsls	r2, r2, #8
 800300a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300c:	193b      	adds	r3, r7, r4
 800300e:	2201      	movs	r2, #1
 8003010:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	193b      	adds	r3, r7, r4
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	193b      	adds	r3, r7, r4
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301e:	193b      	adds	r3, r7, r4
 8003020:	4a19      	ldr	r2, [pc, #100]	; (8003088 <MX_GPIO_Init+0x10c>)
 8003022:	0019      	movs	r1, r3
 8003024:	0010      	movs	r0, r2
 8003026:	f001 fec1 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pins : Analog_Select_Pin Analog_SelectA9_Pin */
  GPIO_InitStruct.Pin = Analog_Select_Pin|Analog_SelectA9_Pin;
 800302a:	0021      	movs	r1, r4
 800302c:	187b      	adds	r3, r7, r1
 800302e:	22c0      	movs	r2, #192	; 0xc0
 8003030:	0092      	lsls	r2, r2, #2
 8003032:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003034:	000c      	movs	r4, r1
 8003036:	193b      	adds	r3, r7, r4
 8003038:	2201      	movs	r2, #1
 800303a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	193b      	adds	r3, r7, r4
 800303e:	2200      	movs	r2, #0
 8003040:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2200      	movs	r2, #0
 8003046:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003048:	193a      	adds	r2, r7, r4
 800304a:	23a0      	movs	r3, #160	; 0xa0
 800304c:	05db      	lsls	r3, r3, #23
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f001 feab 	bl	8004dac <HAL_GPIO_Init>

  /*Configure GPIO pins : Analog_SelectC6_Pin Analog_SelectC7_Pin */
  GPIO_InitStruct.Pin = Analog_SelectC6_Pin|Analog_SelectC7_Pin;
 8003056:	0021      	movs	r1, r4
 8003058:	187b      	adds	r3, r7, r1
 800305a:	22c0      	movs	r2, #192	; 0xc0
 800305c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305e:	187b      	adds	r3, r7, r1
 8003060:	2201      	movs	r2, #1
 8003062:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	187b      	adds	r3, r7, r1
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306a:	187b      	adds	r3, r7, r1
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003070:	187b      	adds	r3, r7, r1
 8003072:	4a06      	ldr	r2, [pc, #24]	; (800308c <MX_GPIO_Init+0x110>)
 8003074:	0019      	movs	r1, r3
 8003076:	0010      	movs	r0, r2
 8003078:	f001 fe98 	bl	8004dac <HAL_GPIO_Init>

}
 800307c:	46c0      	nop			; (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b009      	add	sp, #36	; 0x24
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	50000400 	.word	0x50000400
 800308c:	50000800 	.word	0x50000800

08003090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003094:	b672      	cpsid	i
}
 8003096:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003098:	e7fe      	b.n	8003098 <Error_Handler+0x8>

0800309a <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c) {
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
    SMBus *smbus = malloc(sizeof(SMBus));
 80030a2:	2024      	movs	r0, #36	; 0x24
 80030a4:	f005 f922 	bl	80082ec <malloc>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	601a      	str	r2, [r3, #0]
    smbus->DMA = TRUE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2223      	movs	r2, #35	; 0x23
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	3305      	adds	r3, #5
 80030be:	221e      	movs	r2, #30
 80030c0:	2100      	movs	r1, #0
 80030c2:	0018      	movs	r0, r3
 80030c4:	f005 f925 	bl	8008312 <memset>

    return smbus;
 80030c8:	68fb      	ldr	r3, [r7, #12]
}
 80030ca:	0018      	movs	r0, r3
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b004      	add	sp, #16
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <disable_DMA>:

void disable_DMA(SMBus *smbus) {
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
    smbus->DMA = FALSE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2223      	movs	r2, #35	; 0x23
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]
}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b002      	add	sp, #8
 80030e8:	bd80      	pop	{r7, pc}

080030ea <read_word_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
    }
    _check_error(smbus);
}

long read_word_data(SMBus *smbus, uint8_t addr, char cmd) {
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af02      	add	r7, sp, #8
 80030f0:	6078      	str	r0, [r7, #4]
 80030f2:	0008      	movs	r0, r1
 80030f4:	0011      	movs	r1, r2
 80030f6:	1cfb      	adds	r3, r7, #3
 80030f8:	1c02      	adds	r2, r0, #0
 80030fa:	701a      	strb	r2, [r3, #0]
 80030fc:	1cbb      	adds	r3, r7, #2
 80030fe:	1c0a      	adds	r2, r1, #0
 8003100:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	1cba      	adds	r2, r7, #2
 8003106:	7812      	ldrb	r2, [r2, #0]
 8003108:	715a      	strb	r2, [r3, #5]
    if (!smbus->DMA) {
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2223      	movs	r2, #35	; 0x23
 800310e:	5c9b      	ldrb	r3, [r3, r2]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d113      	bne.n	800313c <read_word_data+0x52>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, HAL_MAX_DELAY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	1cfb      	adds	r3, r7, #3
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b29b      	uxth	r3, r3
 800311e:	18db      	adds	r3, r3, r3
 8003120:	b299      	uxth	r1, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	1d5a      	adds	r2, r3, #5
 8003126:	2301      	movs	r3, #1
 8003128:	425b      	negs	r3, r3
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2301      	movs	r3, #1
 800312e:	f002 f855 	bl	80051dc <HAL_I2C_Master_Transmit>
 8003132:	0003      	movs	r3, r0
 8003134:	001a      	movs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	711a      	strb	r2, [r3, #4]
 800313a:	e00f      	b.n	800315c <read_word_data+0x72>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6818      	ldr	r0, [r3, #0]
 8003140:	1cfb      	adds	r3, r7, #3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	18db      	adds	r3, r3, r3
 8003148:	b299      	uxth	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	1d5a      	adds	r2, r3, #5
 800314e:	2301      	movs	r3, #1
 8003150:	f002 fa54 	bl	80055fc <HAL_I2C_Master_Transmit_DMA>
 8003154:	0003      	movs	r3, r0
 8003156:	001a      	movs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	711a      	strb	r2, [r3, #4]
    }
    _check_error(smbus);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	0018      	movs	r0, r3
 8003160:	f000 f840 	bl	80031e4 <_check_error>

    //reads from address sent above
    if (!smbus->DMA){
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2223      	movs	r2, #35	; 0x23
 8003168:	5c9b      	ldrb	r3, [r3, r2]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d116      	bne.n	800319c <read_word_data+0xb2>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 2, HAL_MAX_DELAY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	1cfb      	adds	r3, r7, #3
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	b21b      	sxth	r3, r3
 800317a:	2201      	movs	r2, #1
 800317c:	4313      	orrs	r3, r2
 800317e:	b21b      	sxth	r3, r3
 8003180:	b299      	uxth	r1, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1d5a      	adds	r2, r3, #5
 8003186:	2301      	movs	r3, #1
 8003188:	425b      	negs	r3, r3
 800318a:	9300      	str	r3, [sp, #0]
 800318c:	2302      	movs	r3, #2
 800318e:	f002 f92d 	bl	80053ec <HAL_I2C_Master_Receive>
 8003192:	0003      	movs	r3, r0
 8003194:	001a      	movs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	711a      	strb	r2, [r3, #4]
 800319a:	e012      	b.n	80031c2 <read_word_data+0xd8>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	1cfb      	adds	r3, r7, #3
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	b21b      	sxth	r3, r3
 80031a8:	2201      	movs	r2, #1
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	b299      	uxth	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	1d5a      	adds	r2, r3, #5
 80031b4:	2302      	movs	r3, #2
 80031b6:	f002 fb27 	bl	8005808 <HAL_I2C_Master_Receive_DMA>
 80031ba:	0003      	movs	r3, r0
 80031bc:	001a      	movs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	711a      	strb	r2, [r3, #4]
    }
    _check_error(smbus);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f000 f80d 	bl	80031e4 <_check_error>

    long data = smbus->buf[0] | (smbus->buf[1] << 8);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	795b      	ldrb	r3, [r3, #5]
 80031ce:	001a      	movs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	799b      	ldrb	r3, [r3, #6]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
    return data;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b004      	add	sp, #16
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <_check_error>:
    }

    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	791b      	ldrb	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <_check_error+0x2c>
        strcpy((char*)smbus->buf, "Err \r\n");
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1d5a      	adds	r2, r3, #5
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <_check_error+0x38>)
 80031fa:	0010      	movs	r0, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	2307      	movs	r3, #7
 8003200:	001a      	movs	r2, r3
 8003202:	f005 f87d 	bl	8008300 <memcpy>

//        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), HAL_MAX_DELAY);
        HAL_Delay(10);
 8003206:	200a      	movs	r0, #10
 8003208:	f000 fb7e 	bl	8003908 <HAL_Delay>
        return FALSE;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <_check_error+0x2e>
    }
    return TRUE;
 8003210:	2301      	movs	r3, #1
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	0800b1f0 	.word	0x0800b1f0

08003220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_MspInit+0x44>)
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <HAL_MspInit+0x44>)
 800322c:	2101      	movs	r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
 8003232:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <HAL_MspInit+0x44>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2201      	movs	r2, #1
 8003238:	4013      	ands	r3, r2
 800323a:	607b      	str	r3, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <HAL_MspInit+0x44>)
 8003240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_MspInit+0x44>)
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	0549      	lsls	r1, r1, #21
 8003248:	430a      	orrs	r2, r1
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_MspInit+0x44>)
 800324e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	055b      	lsls	r3, r3, #21
 8003254:	4013      	ands	r3, r2
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	b002      	add	sp, #8
 8003260:	bd80      	pop	{r7, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	40021000 	.word	0x40021000

08003268 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003268:	b590      	push	{r4, r7, lr}
 800326a:	b08b      	sub	sp, #44	; 0x2c
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003270:	2414      	movs	r4, #20
 8003272:	193b      	adds	r3, r7, r4
 8003274:	0018      	movs	r0, r3
 8003276:	2314      	movs	r3, #20
 8003278:	001a      	movs	r2, r3
 800327a:	2100      	movs	r1, #0
 800327c:	f005 f849 	bl	8008312 <memset>
  if(hadc->Instance==ADC1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <HAL_ADC_MspInit+0x80>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d129      	bne.n	80032de <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800328a:	4b18      	ldr	r3, [pc, #96]	; (80032ec <HAL_ADC_MspInit+0x84>)
 800328c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_ADC_MspInit+0x84>)
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0349      	lsls	r1, r1, #13
 8003294:	430a      	orrs	r2, r1
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <HAL_ADC_MspInit+0x84>)
 800329a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329c:	2380      	movs	r3, #128	; 0x80
 800329e:	035b      	lsls	r3, r3, #13
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a6:	4b11      	ldr	r3, [pc, #68]	; (80032ec <HAL_ADC_MspInit+0x84>)
 80032a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_ADC_MspInit+0x84>)
 80032ac:	2101      	movs	r1, #1
 80032ae:	430a      	orrs	r2, r1
 80032b0:	635a      	str	r2, [r3, #52]	; 0x34
 80032b2:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <HAL_ADC_MspInit+0x84>)
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	2201      	movs	r2, #1
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032be:	193b      	adds	r3, r7, r4
 80032c0:	2202      	movs	r2, #2
 80032c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	2203      	movs	r2, #3
 80032c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d0:	193a      	adds	r2, r7, r4
 80032d2:	23a0      	movs	r3, #160	; 0xa0
 80032d4:	05db      	lsls	r3, r3, #23
 80032d6:	0011      	movs	r1, r2
 80032d8:	0018      	movs	r0, r3
 80032da:	f001 fd67 	bl	8004dac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b00b      	add	sp, #44	; 0x2c
 80032e4:	bd90      	pop	{r4, r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	40012400 	.word	0x40012400
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b08d      	sub	sp, #52	; 0x34
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	241c      	movs	r4, #28
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	0018      	movs	r0, r3
 80032fe:	2314      	movs	r3, #20
 8003300:	001a      	movs	r2, r3
 8003302:	2100      	movs	r1, #0
 8003304:	f005 f805 	bl	8008312 <memset>
  if(hi2c->Instance==I2C1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a46      	ldr	r2, [pc, #280]	; (8003428 <HAL_I2C_MspInit+0x138>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d150      	bne.n	80033b4 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003312:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_I2C_MspInit+0x13c>)
 8003314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003316:	4b45      	ldr	r3, [pc, #276]	; (800342c <HAL_I2C_MspInit+0x13c>)
 8003318:	2101      	movs	r1, #1
 800331a:	430a      	orrs	r2, r1
 800331c:	635a      	str	r2, [r3, #52]	; 0x34
 800331e:	4b43      	ldr	r3, [pc, #268]	; (800342c <HAL_I2C_MspInit+0x13c>)
 8003320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003322:	2201      	movs	r2, #1
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332a:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_I2C_MspInit+0x13c>)
 800332c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800332e:	4b3f      	ldr	r3, [pc, #252]	; (800342c <HAL_I2C_MspInit+0x13c>)
 8003330:	2102      	movs	r1, #2
 8003332:	430a      	orrs	r2, r1
 8003334:	635a      	str	r2, [r3, #52]	; 0x34
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <HAL_I2C_MspInit+0x13c>)
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = TEMP_SDA_Pin;
 8003342:	193b      	adds	r3, r7, r4
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	00d2      	lsls	r2, r2, #3
 8003348:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800334a:	193b      	adds	r3, r7, r4
 800334c:	2212      	movs	r2, #18
 800334e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	193b      	adds	r3, r7, r4
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003356:	193b      	adds	r3, r7, r4
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(TEMP_SDA_GPIO_Port, &GPIO_InitStruct);
 800335c:	193a      	adds	r2, r7, r4
 800335e:	23a0      	movs	r3, #160	; 0xa0
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	0011      	movs	r1, r2
 8003364:	0018      	movs	r0, r3
 8003366:	f001 fd21 	bl	8004dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP_SCL_Pin;
 800336a:	0021      	movs	r1, r4
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2240      	movs	r2, #64	; 0x40
 8003370:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2212      	movs	r2, #18
 8003376:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	187b      	adds	r3, r7, r1
 8003380:	2200      	movs	r2, #0
 8003382:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003384:	187b      	adds	r3, r7, r1
 8003386:	2206      	movs	r2, #6
 8003388:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TEMP_SCL_GPIO_Port, &GPIO_InitStruct);
 800338a:	187b      	adds	r3, r7, r1
 800338c:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_I2C_MspInit+0x140>)
 800338e:	0019      	movs	r1, r3
 8003390:	0010      	movs	r0, r2
 8003392:	f001 fd0b 	bl	8004dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003396:	4b25      	ldr	r3, [pc, #148]	; (800342c <HAL_I2C_MspInit+0x13c>)
 8003398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_I2C_MspInit+0x13c>)
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	0389      	lsls	r1, r1, #14
 80033a0:	430a      	orrs	r2, r1
 80033a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033a4:	4b21      	ldr	r3, [pc, #132]	; (800342c <HAL_I2C_MspInit+0x13c>)
 80033a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	039b      	lsls	r3, r3, #14
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80033b2:	e035      	b.n	8003420 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a1e      	ldr	r2, [pc, #120]	; (8003434 <HAL_I2C_MspInit+0x144>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d130      	bne.n	8003420 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	4b1b      	ldr	r3, [pc, #108]	; (800342c <HAL_I2C_MspInit+0x13c>)
 80033c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c2:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_I2C_MspInit+0x13c>)
 80033c4:	2102      	movs	r1, #2
 80033c6:	430a      	orrs	r2, r1
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34
 80033ca:	4b18      	ldr	r3, [pc, #96]	; (800342c <HAL_I2C_MspInit+0x13c>)
 80033cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ce:	2202      	movs	r2, #2
 80033d0:	4013      	ands	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JETSON_SCL_Pin|JETSON_SDA_Pin;
 80033d6:	211c      	movs	r1, #28
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	22c0      	movs	r2, #192	; 0xc0
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	2212      	movs	r2, #18
 80033e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	187b      	adds	r3, r7, r1
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	2206      	movs	r2, #6
 80033f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <HAL_I2C_MspInit+0x140>)
 80033fc:	0019      	movs	r1, r3
 80033fe:	0010      	movs	r0, r2
 8003400:	f001 fcd4 	bl	8004dac <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <HAL_I2C_MspInit+0x13c>)
 8003406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <HAL_I2C_MspInit+0x13c>)
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	03c9      	lsls	r1, r1, #15
 800340e:	430a      	orrs	r2, r1
 8003410:	63da      	str	r2, [r3, #60]	; 0x3c
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_I2C_MspInit+0x13c>)
 8003414:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	03db      	lsls	r3, r3, #15
 800341a:	4013      	ands	r3, r2
 800341c:	60bb      	str	r3, [r7, #8]
 800341e:	68bb      	ldr	r3, [r7, #8]
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b00d      	add	sp, #52	; 0x34
 8003426:	bd90      	pop	{r4, r7, pc}
 8003428:	40005400 	.word	0x40005400
 800342c:	40021000 	.word	0x40021000
 8003430:	50000400 	.word	0x50000400
 8003434:	40005800 	.word	0x40005800

08003438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800343c:	e7fe      	b.n	800343c <NMI_Handler+0x4>

0800343e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003442:	e7fe      	b.n	8003442 <HardFault_Handler+0x4>

08003444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003448:	46c0      	nop			; (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800345c:	f000 fa38 	bl	80038d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <_getpid>:
 8003466:	b580      	push	{r7, lr}
 8003468:	af00      	add	r7, sp, #0
 800346a:	2301      	movs	r3, #1
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_kill>:
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
 800347c:	f004 ff0c 	bl	8008298 <__errno>
 8003480:	0003      	movs	r3, r0
 8003482:	2216      	movs	r2, #22
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	2301      	movs	r3, #1
 8003488:	425b      	negs	r3, r3
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}

08003492 <_exit>:
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	2301      	movs	r3, #1
 800349c:	425a      	negs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0011      	movs	r1, r2
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7ff ffe5 	bl	8003472 <_kill>
 80034a8:	e7fe      	b.n	80034a8 <_exit+0x16>

080034aa <_read>:
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e00a      	b.n	80034d2 <_read+0x28>
 80034bc:	e000      	b.n	80034c0 <_read+0x16>
 80034be:	bf00      	nop
 80034c0:	0001      	movs	r1, r0
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	60ba      	str	r2, [r7, #8]
 80034c8:	b2ca      	uxtb	r2, r1
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	dbf0      	blt.n	80034bc <_read+0x12>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b006      	add	sp, #24
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <_write>:
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	2300      	movs	r3, #0
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	e009      	b.n	800350a <_write+0x26>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1c5a      	adds	r2, r3, #1
 80034fa:	60ba      	str	r2, [r7, #8]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	0018      	movs	r0, r3
 8003500:	e000      	b.n	8003504 <_write+0x20>
 8003502:	bf00      	nop
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	3301      	adds	r3, #1
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	429a      	cmp	r2, r3
 8003510:	dbf1      	blt.n	80034f6 <_write+0x12>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	b006      	add	sp, #24
 800351a:	bd80      	pop	{r7, pc}

0800351c <_close>:
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	2301      	movs	r3, #1
 8003526:	425b      	negs	r3, r3
 8003528:	0018      	movs	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}

08003530 <_fstat>:
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	0192      	lsls	r2, r2, #6
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	2300      	movs	r3, #0
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <_isatty>:
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	2301      	movs	r3, #1
 8003556:	0018      	movs	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	b002      	add	sp, #8
 800355c:	bd80      	pop	{r7, pc}

0800355e <_lseek>:
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	2300      	movs	r3, #0
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b004      	add	sp, #16
 8003572:	bd80      	pop	{r7, pc}

08003574 <_sbrk>:
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <_sbrk+0x5c>)
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <_sbrk+0x60>)
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <_sbrk+0x64>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <_sbrk+0x22>
 8003590:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <_sbrk+0x64>)
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <_sbrk+0x68>)
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <_sbrk+0x64>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	18d3      	adds	r3, r2, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d207      	bcs.n	80035b4 <_sbrk+0x40>
 80035a4:	f004 fe78 	bl	8008298 <__errno>
 80035a8:	0003      	movs	r3, r0
 80035aa:	220c      	movs	r2, #12
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	2301      	movs	r3, #1
 80035b0:	425b      	negs	r3, r3
 80035b2:	e009      	b.n	80035c8 <_sbrk+0x54>
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <_sbrk+0x64>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	18d2      	adds	r2, r2, r3
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <_sbrk+0x64>)
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b006      	add	sp, #24
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20004800 	.word	0x20004800
 80035d4:	00000400 	.word	0x00000400
 80035d8:	200001f8 	.word	0x200001f8
 80035dc:	20000360 	.word	0x20000360

080035e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <new_temperature_sensor>:
//
//
// All Public Functions

// EFFECTS: Create a new TemperatureSensor struct and returns pointer to struct.
TemperatureSensor* new_temperature_sensor(SMBus* _i2cBus, uint8_t A0, uint8_t A1, uint8_t A2){
 80035ea:	b590      	push	{r4, r7, lr}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	000c      	movs	r4, r1
 80035f4:	0010      	movs	r0, r2
 80035f6:	0019      	movs	r1, r3
 80035f8:	1cfb      	adds	r3, r7, #3
 80035fa:	1c22      	adds	r2, r4, #0
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	1cbb      	adds	r3, r7, #2
 8003600:	1c02      	adds	r2, r0, #0
 8003602:	701a      	strb	r2, [r3, #0]
 8003604:	1c7b      	adds	r3, r7, #1
 8003606:	1c0a      	adds	r2, r1, #0
 8003608:	701a      	strb	r2, [r3, #0]

	// Create a new struct
	TemperatureSensor* _temperature_sensor = (TemperatureSensor*) malloc(sizeof(TemperatureSensor));
 800360a:	2008      	movs	r0, #8
 800360c:	f004 fe6e 	bl	80082ec <malloc>
 8003610:	0003      	movs	r3, r0
 8003612:	60fb      	str	r3, [r7, #12]

	// Initialize the struct
	_temperature_sensor->address = 0b0011000;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2218      	movs	r2, #24
 8003618:	601a      	str	r2, [r3, #0]
	if (A0) _temperature_sensor->address |= 0b001;
 800361a:	1cfb      	adds	r3, r7, #3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <new_temperature_sensor+0x44>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]
	if (A1) _temperature_sensor->address |= 0b010;
 800362e:	1cbb      	adds	r3, r7, #2
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <new_temperature_sensor+0x58>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2202      	movs	r2, #2
 800363c:	431a      	orrs	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	601a      	str	r2, [r3, #0]
	if (A2) _temperature_sensor->address |= 0b100;
 8003642:	1c7b      	adds	r3, r7, #1
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <new_temperature_sensor+0x6c>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2204      	movs	r2, #4
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]

	_temperature_sensor->i2cBus = _i2cBus;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	605a      	str	r2, [r3, #4]

	return _temperature_sensor;
 800365c:	68fb      	ldr	r3, [r7, #12]
}
 800365e:	0018      	movs	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	b005      	add	sp, #20
 8003664:	bd90      	pop	{r4, r7, pc}
	...

08003668 <get_temperature_data>:

// EFFECTS: Get temperature data from a temperature sensor in Celsius
float get_temperature_data(const TemperatureSensor* _temperature_sensor){
 8003668:	b5b0      	push	{r4, r5, r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]

	int specific_address = _temperature_sensor->address;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]

	// rawData is the data for the ambient
	// 0b000000101 is 0x05
	float rawData = read_word_data(_temperature_sensor->i2cBus, specific_address, 0b000000101);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	b2d1      	uxtb	r1, r2
 800367e:	2205      	movs	r2, #5
 8003680:	0018      	movs	r0, r3
 8003682:	f7ff fd32 	bl	80030ea <read_word_data>
 8003686:	0003      	movs	r3, r0
 8003688:	0018      	movs	r0, r3
 800368a:	f7fd f94d 	bl	8000928 <__aeabi_i2f>
 800368e:	1c03      	adds	r3, r0, #0
 8003690:	617b      	str	r3, [r7, #20]

	float lower_byte = (int)rawData & 0xFF;; // original && 0000000...111111111
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7fd f928 	bl	80008e8 <__aeabi_f2iz>
 8003698:	0003      	movs	r3, r0
 800369a:	22ff      	movs	r2, #255	; 0xff
 800369c:	4013      	ands	r3, r2
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fd f942 	bl	8000928 <__aeabi_i2f>
 80036a4:	1c03      	adds	r3, r0, #0
 80036a6:	613b      	str	r3, [r7, #16]
	float upper_byte = ((int)rawData & 0xFF00) >> 8;; // original bit shifted
 80036a8:	6978      	ldr	r0, [r7, #20]
 80036aa:	f7fd f91d 	bl	80008e8 <__aeabi_f2iz>
 80036ae:	0003      	movs	r3, r0
 80036b0:	121b      	asrs	r3, r3, #8
 80036b2:	22ff      	movs	r2, #255	; 0xff
 80036b4:	4013      	ands	r3, r2
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fd f936 	bl	8000928 <__aeabi_i2f>
 80036bc:	1c03      	adds	r3, r0, #0
 80036be:	60fb      	str	r3, [r7, #12]

	// Clear flag bits
	upper_byte = (int)upper_byte & 0x1F;
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7fd f911 	bl	80008e8 <__aeabi_f2iz>
 80036c6:	0003      	movs	r3, r0
 80036c8:	221f      	movs	r2, #31
 80036ca:	4013      	ands	r3, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fd f92b 	bl	8000928 <__aeabi_i2f>
 80036d2:	1c03      	adds	r3, r0, #0
 80036d4:	60fb      	str	r3, [r7, #12]

	// If the sign bit is zero,
	// then the ambient temperature is greater than 0 celsius.
	// If the sign bit is one,
	// then the ambient temperature is less than 0 celsius.
	int sign_bit = ((int)upper_byte & 0x10) >> 4;
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f7fd f906 	bl	80008e8 <__aeabi_f2iz>
 80036dc:	0003      	movs	r3, r0
 80036de:	111b      	asrs	r3, r3, #4
 80036e0:	2201      	movs	r2, #1
 80036e2:	4013      	ands	r3, r2
 80036e4:	60bb      	str	r3, [r7, #8]
	
	float actual_temperature = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
	if (sign_bit) {
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d031      	beq.n	8003754 <get_temperature_data+0xec>
		upper_byte = (int)upper_byte & 0x0F;
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7fd f8f9 	bl	80008e8 <__aeabi_f2iz>
 80036f6:	0003      	movs	r3, r0
 80036f8:	220f      	movs	r2, #15
 80036fa:	4013      	ands	r3, r2
 80036fc:	0018      	movs	r0, r3
 80036fe:	f7fd f913 	bl	8000928 <__aeabi_i2f>
 8003702:	1c03      	adds	r3, r0, #0
 8003704:	60fb      	str	r3, [r7, #12]
		actual_temperature = (float)256 - ((float)upper_byte * (float)16 + (1.0 / 16.0) * (float)lower_byte);
 8003706:	2183      	movs	r1, #131	; 0x83
 8003708:	05c9      	lsls	r1, r1, #23
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7fc ffd2 	bl	80006b4 <__aeabi_fmul>
 8003710:	1c03      	adds	r3, r0, #0
 8003712:	1c18      	adds	r0, r3, #0
 8003714:	f7fe ff66 	bl	80025e4 <__aeabi_f2d>
 8003718:	0004      	movs	r4, r0
 800371a:	000d      	movs	r5, r1
 800371c:	6938      	ldr	r0, [r7, #16]
 800371e:	f7fe ff61 	bl	80025e4 <__aeabi_f2d>
 8003722:	2200      	movs	r2, #0
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <get_temperature_data+0x138>)
 8003726:	f7fe f8b5 	bl	8001894 <__aeabi_dmul>
 800372a:	0002      	movs	r2, r0
 800372c:	000b      	movs	r3, r1
 800372e:	0020      	movs	r0, r4
 8003730:	0029      	movs	r1, r5
 8003732:	f7fd f93f 	bl	80009b4 <__aeabi_dadd>
 8003736:	0002      	movs	r2, r0
 8003738:	000b      	movs	r3, r1
 800373a:	2000      	movs	r0, #0
 800373c:	4919      	ldr	r1, [pc, #100]	; (80037a4 <get_temperature_data+0x13c>)
 800373e:	f7fe fb15 	bl	8001d6c <__aeabi_dsub>
 8003742:	0002      	movs	r2, r0
 8003744:	000b      	movs	r3, r1
 8003746:	0010      	movs	r0, r2
 8003748:	0019      	movs	r1, r3
 800374a:	f7fe ff93 	bl	8002674 <__aeabi_d2f>
 800374e:	1c03      	adds	r3, r0, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e01f      	b.n	8003794 <get_temperature_data+0x12c>
	}
	else {
		actual_temperature = (float)upper_byte * (float)16 + (1.0 / 16.0) * (float)lower_byte;
 8003754:	2183      	movs	r1, #131	; 0x83
 8003756:	05c9      	lsls	r1, r1, #23
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7fc ffab 	bl	80006b4 <__aeabi_fmul>
 800375e:	1c03      	adds	r3, r0, #0
 8003760:	1c18      	adds	r0, r3, #0
 8003762:	f7fe ff3f 	bl	80025e4 <__aeabi_f2d>
 8003766:	0004      	movs	r4, r0
 8003768:	000d      	movs	r5, r1
 800376a:	6938      	ldr	r0, [r7, #16]
 800376c:	f7fe ff3a 	bl	80025e4 <__aeabi_f2d>
 8003770:	2200      	movs	r2, #0
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <get_temperature_data+0x138>)
 8003774:	f7fe f88e 	bl	8001894 <__aeabi_dmul>
 8003778:	0002      	movs	r2, r0
 800377a:	000b      	movs	r3, r1
 800377c:	0020      	movs	r0, r4
 800377e:	0029      	movs	r1, r5
 8003780:	f7fd f918 	bl	80009b4 <__aeabi_dadd>
 8003784:	0002      	movs	r2, r0
 8003786:	000b      	movs	r3, r1
 8003788:	0010      	movs	r0, r2
 800378a:	0019      	movs	r1, r3
 800378c:	f7fe ff72 	bl	8002674 <__aeabi_d2f>
 8003790:	1c03      	adds	r3, r0, #0
 8003792:	61fb      	str	r3, [r7, #28]
	}
	return actual_temperature;
 8003794:	69fb      	ldr	r3, [r7, #28]
}
 8003796:	1c18      	adds	r0, r3, #0
 8003798:	46bd      	mov	sp, r7
 800379a:	b008      	add	sp, #32
 800379c:	bdb0      	pop	{r4, r5, r7, pc}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	3fb00000 	.word	0x3fb00000
 80037a4:	40700000 	.word	0x40700000

080037a8 <Reset_Handler>:
 80037a8:	480d      	ldr	r0, [pc, #52]	; (80037e0 <LoopForever+0x2>)
 80037aa:	4685      	mov	sp, r0
 80037ac:	f7ff ff18 	bl	80035e0 <SystemInit>
 80037b0:	480c      	ldr	r0, [pc, #48]	; (80037e4 <LoopForever+0x6>)
 80037b2:	490d      	ldr	r1, [pc, #52]	; (80037e8 <LoopForever+0xa>)
 80037b4:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <LoopForever+0xe>)
 80037b6:	2300      	movs	r3, #0
 80037b8:	e002      	b.n	80037c0 <LoopCopyDataInit>

080037ba <CopyDataInit>:
 80037ba:	58d4      	ldr	r4, [r2, r3]
 80037bc:	50c4      	str	r4, [r0, r3]
 80037be:	3304      	adds	r3, #4

080037c0 <LoopCopyDataInit>:
 80037c0:	18c4      	adds	r4, r0, r3
 80037c2:	428c      	cmp	r4, r1
 80037c4:	d3f9      	bcc.n	80037ba <CopyDataInit>
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <LoopForever+0x12>)
 80037c8:	4c0a      	ldr	r4, [pc, #40]	; (80037f4 <LoopForever+0x16>)
 80037ca:	2300      	movs	r3, #0
 80037cc:	e001      	b.n	80037d2 <LoopFillZerobss>

080037ce <FillZerobss>:
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	3204      	adds	r2, #4

080037d2 <LoopFillZerobss>:
 80037d2:	42a2      	cmp	r2, r4
 80037d4:	d3fb      	bcc.n	80037ce <FillZerobss>
 80037d6:	f004 fd65 	bl	80082a4 <__libc_init_array>
 80037da:	f7ff f9d9 	bl	8002b90 <main>

080037de <LoopForever>:
 80037de:	e7fe      	b.n	80037de <LoopForever>
 80037e0:	20004800 	.word	0x20004800
 80037e4:	20000000 	.word	0x20000000
 80037e8:	200001dc 	.word	0x200001dc
 80037ec:	0800b764 	.word	0x0800b764
 80037f0:	200001dc 	.word	0x200001dc
 80037f4:	20000360 	.word	0x20000360

080037f8 <ADC1_IRQHandler>:
 80037f8:	e7fe      	b.n	80037f8 <ADC1_IRQHandler>
	...

080037fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003802:	1dfb      	adds	r3, r7, #7
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_Init+0x3c>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_Init+0x3c>)
 800380e:	2180      	movs	r1, #128	; 0x80
 8003810:	0049      	lsls	r1, r1, #1
 8003812:	430a      	orrs	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003816:	2003      	movs	r0, #3
 8003818:	f000 f810 	bl	800383c <HAL_InitTick>
 800381c:	1e03      	subs	r3, r0, #0
 800381e:	d003      	beq.n	8003828 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	2201      	movs	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e001      	b.n	800382c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003828:	f7ff fcfa 	bl	8003220 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800382c:	1dfb      	adds	r3, r7, #7
 800382e:	781b      	ldrb	r3, [r3, #0]
}
 8003830:	0018      	movs	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	b002      	add	sp, #8
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40022000 	.word	0x40022000

0800383c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003844:	230f      	movs	r3, #15
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <HAL_InitTick+0x88>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02b      	beq.n	80038ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <HAL_InitTick+0x8c>)
 8003856:	681c      	ldr	r4, [r3, #0]
 8003858:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <HAL_InitTick+0x88>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	0019      	movs	r1, r3
 800385e:	23fa      	movs	r3, #250	; 0xfa
 8003860:	0098      	lsls	r0, r3, #2
 8003862:	f7fc fc67 	bl	8000134 <__udivsi3>
 8003866:	0003      	movs	r3, r0
 8003868:	0019      	movs	r1, r3
 800386a:	0020      	movs	r0, r4
 800386c:	f7fc fc62 	bl	8000134 <__udivsi3>
 8003870:	0003      	movs	r3, r0
 8003872:	0018      	movs	r0, r3
 8003874:	f001 f951 	bl	8004b1a <HAL_SYSTICK_Config>
 8003878:	1e03      	subs	r3, r0, #0
 800387a:	d112      	bne.n	80038a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b03      	cmp	r3, #3
 8003880:	d80a      	bhi.n	8003898 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	2301      	movs	r3, #1
 8003886:	425b      	negs	r3, r3
 8003888:	2200      	movs	r2, #0
 800388a:	0018      	movs	r0, r3
 800388c:	f001 f930 	bl	8004af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003890:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <HAL_InitTick+0x90>)
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e00d      	b.n	80038b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003898:	230f      	movs	r3, #15
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e008      	b.n	80038b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038a2:	230f      	movs	r3, #15
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e003      	b.n	80038b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038ac:	230f      	movs	r3, #15
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	2201      	movs	r2, #1
 80038b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80038b4:	230f      	movs	r3, #15
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b005      	add	sp, #20
 80038c0:	bd90      	pop	{r4, r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	20000008 	.word	0x20000008
 80038c8:	20000000 	.word	0x20000000
 80038cc:	20000004 	.word	0x20000004

080038d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_IncTick+0x1c>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	001a      	movs	r2, r3
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_IncTick+0x20>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	18d2      	adds	r2, r2, r3
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_IncTick+0x20>)
 80038e2:	601a      	str	r2, [r3, #0]
}
 80038e4:	46c0      	nop			; (mov r8, r8)
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	20000008 	.word	0x20000008
 80038f0:	2000034c 	.word	0x2000034c

080038f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  return uwTick;
 80038f8:	4b02      	ldr	r3, [pc, #8]	; (8003904 <HAL_GetTick+0x10>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	2000034c 	.word	0x2000034c

08003908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7ff fff0 	bl	80038f4 <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3301      	adds	r3, #1
 8003920:	d005      	beq.n	800392e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003922:	4b0a      	ldr	r3, [pc, #40]	; (800394c <HAL_Delay+0x44>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	001a      	movs	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	189b      	adds	r3, r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	f7ff ffe0 	bl	80038f4 <HAL_GetTick>
 8003934:	0002      	movs	r2, r0
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	429a      	cmp	r2, r3
 800393e:	d8f7      	bhi.n	8003930 <HAL_Delay+0x28>
  {
  }
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b004      	add	sp, #16
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	20000008 	.word	0x20000008

08003950 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a05      	ldr	r2, [pc, #20]	; (8003974 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003960:	401a      	ands	r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	46c0      	nop			; (mov r8, r8)
 800396c:	46bd      	mov	sp, r7
 800396e:	b002      	add	sp, #8
 8003970:	bd80      	pop	{r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	fe3fffff 	.word	0xfe3fffff

08003978 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	23e0      	movs	r3, #224	; 0xe0
 8003986:	045b      	lsls	r3, r3, #17
 8003988:	4013      	ands	r3, r2
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}

08003992 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	2104      	movs	r1, #4
 80039a6:	400a      	ands	r2, r1
 80039a8:	2107      	movs	r1, #7
 80039aa:	4091      	lsls	r1, r2
 80039ac:	000a      	movs	r2, r1
 80039ae:	43d2      	mvns	r2, r2
 80039b0:	401a      	ands	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2104      	movs	r1, #4
 80039b6:	400b      	ands	r3, r1
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4099      	lsls	r1, r3
 80039bc:	000b      	movs	r3, r1
 80039be:	431a      	orrs	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b004      	add	sp, #16
 80039ca:	bd80      	pop	{r7, pc}

080039cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	23c0      	movs	r3, #192	; 0xc0
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	4013      	ands	r3, r2
 80039de:	d101      	bne.n	80039e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b002      	add	sp, #8
 80039ec:	bd80      	pop	{r7, pc}

080039ee <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	211f      	movs	r1, #31
 8003a02:	400a      	ands	r2, r1
 8003a04:	210f      	movs	r1, #15
 8003a06:	4091      	lsls	r1, r2
 8003a08:	000a      	movs	r2, r1
 8003a0a:	43d2      	mvns	r2, r2
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	210f      	movs	r1, #15
 8003a14:	4019      	ands	r1, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	201f      	movs	r0, #31
 8003a1a:	4003      	ands	r3, r0
 8003a1c:	4099      	lsls	r1, r3
 8003a1e:	000b      	movs	r3, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	035b      	lsls	r3, r3, #13
 8003a40:	0b5b      	lsrs	r3, r3, #13
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	0352      	lsls	r2, r2, #13
 8003a62:	0b52      	lsrs	r2, r2, #13
 8003a64:	43d2      	mvns	r2, r2
 8003a66:	401a      	ands	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b002      	add	sp, #8
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	0212      	lsls	r2, r2, #8
 8003a88:	43d2      	mvns	r2, r2
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	400b      	ands	r3, r1
 8003a94:	4904      	ldr	r1, [pc, #16]	; (8003aa8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003a96:	400b      	ands	r3, r1
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	07ffff00 	.word	0x07ffff00

08003aac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	0552      	lsls	r2, r2, #21
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b002      	add	sp, #8
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	6fffffe8 	.word	0x6fffffe8

08003ad4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	055b      	lsls	r3, r3, #21
 8003ae4:	401a      	ands	r2, r3
 8003ae6:	2380      	movs	r3, #128	; 0x80
 8003ae8:	055b      	lsls	r3, r3, #21
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d101      	bne.n	8003af2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b002      	add	sp, #8
 8003afa:	bd80      	pop	{r7, pc}

08003afc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <LL_ADC_Enable+0x20>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b002      	add	sp, #8
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	7fffffe8 	.word	0x7fffffe8

08003b20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <LL_ADC_Disable+0x20>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	2202      	movs	r2, #2
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	7fffffe8 	.word	0x7fffffe8

08003b44 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2201      	movs	r2, #1
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <LL_ADC_IsEnabled+0x18>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <LL_ADC_IsEnabled+0x1a>
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2202      	movs	r2, #2
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d101      	bne.n	8003b7e <LL_ADC_IsDisableOngoing+0x18>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <LL_ADC_IsDisableOngoing+0x1a>
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <LL_ADC_REG_StartConversion+0x20>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	2204      	movs	r2, #4
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ba0:	46c0      	nop			; (mov r8, r8)
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	7fffffe8 	.word	0x7fffffe8

08003bac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a04      	ldr	r2, [pc, #16]	; (8003bcc <LL_ADC_REG_StopConversion+0x20>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	7fffffe8 	.word	0x7fffffe8

08003bd0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2204      	movs	r2, #4
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d101      	bne.n	8003be8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003be4:	2301      	movs	r3, #1
 8003be6:	e000      	b.n	8003bea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b002      	add	sp, #8
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bfc:	231f      	movs	r3, #31
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e1b1      	b.n	8003f7e <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7ff fb1f 	bl	8003268 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2254      	movs	r2, #84	; 0x54
 8003c34:	2100      	movs	r1, #0
 8003c36:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7ff ff49 	bl	8003ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8003c42:	1e03      	subs	r3, r0, #0
 8003c44:	d115      	bne.n	8003c72 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7ff ff2e 	bl	8003aac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c50:	4bcd      	ldr	r3, [pc, #820]	; (8003f88 <HAL_ADC_Init+0x394>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	49cd      	ldr	r1, [pc, #820]	; (8003f8c <HAL_ADC_Init+0x398>)
 8003c56:	0018      	movs	r0, r3
 8003c58:	f7fc fa6c 	bl	8000134 <__udivsi3>
 8003c5c:	0003      	movs	r3, r0
 8003c5e:	3301      	adds	r3, #1
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c64:	e002      	b.n	8003c6c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f9      	bne.n	8003c66 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7ff ff2c 	bl	8003ad4 <LL_ADC_IsInternalRegulatorEnabled>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	2210      	movs	r2, #16
 8003c86:	431a      	orrs	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c90:	2201      	movs	r2, #1
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c98:	231f      	movs	r3, #31
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7ff ff93 	bl	8003bd0 <LL_ADC_REG_IsConversionOngoing>
 8003caa:	0003      	movs	r3, r0
 8003cac:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	2210      	movs	r2, #16
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d000      	beq.n	8003cba <HAL_ADC_Init+0xc6>
 8003cb8:	e154      	b.n	8003f64 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d000      	beq.n	8003cc2 <HAL_ADC_Init+0xce>
 8003cc0:	e150      	b.n	8003f64 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	4ab2      	ldr	r2, [pc, #712]	; (8003f90 <HAL_ADC_Init+0x39c>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	2202      	movs	r2, #2
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7ff ff34 	bl	8003b44 <LL_ADC_IsEnabled>
 8003cdc:	1e03      	subs	r3, r0, #0
 8003cde:	d156      	bne.n	8003d8e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2218      	movs	r2, #24
 8003ce8:	4393      	bics	r3, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	0f9b      	lsrs	r3, r3, #30
 8003cfe:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d04:	4313      	orrs	r3, r2
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	223c      	movs	r2, #60	; 0x3c
 8003d10:	5c9b      	ldrb	r3, [r3, r2]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d111      	bne.n	8003d3a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	0f9b      	lsrs	r3, r3, #30
 8003d1c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003d22:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003d28:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003d2e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	2201      	movs	r2, #1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	4a94      	ldr	r2, [pc, #592]	; (8003f94 <HAL_ADC_Init+0x3a0>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	23c0      	movs	r3, #192	; 0xc0
 8003d56:	061b      	lsls	r3, r3, #24
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d018      	beq.n	8003d8e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	05db      	lsls	r3, r3, #23
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d012      	beq.n	8003d8e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d00c      	beq.n	8003d8e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <HAL_ADC_Init+0x3a4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a88      	ldr	r2, [pc, #544]	; (8003f9c <HAL_ADC_Init+0x3a8>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	0019      	movs	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	23f0      	movs	r3, #240	; 0xf0
 8003d84:	039b      	lsls	r3, r3, #14
 8003d86:	401a      	ands	r2, r3
 8003d88:	4b83      	ldr	r3, [pc, #524]	; (8003f98 <HAL_ADC_Init+0x3a4>)
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7e1b      	ldrb	r3, [r3, #24]
 8003d92:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7e5b      	ldrb	r3, [r3, #25]
 8003d98:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d9a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7e9b      	ldrb	r3, [r3, #26]
 8003da0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003da2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_ADC_Init+0x1be>
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	015b      	lsls	r3, r3, #5
 8003db0:	e000      	b.n	8003db4 <HAL_ADC_Init+0x1c0>
 8003db2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003db4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003dba:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da04      	bge.n	8003dce <HAL_ADC_Init+0x1da>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	e001      	b.n	8003dd2 <HAL_ADC_Init+0x1de>
 8003dce:	2380      	movs	r3, #128	; 0x80
 8003dd0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003dd2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	212c      	movs	r1, #44	; 0x2c
 8003dd8:	5c5b      	ldrb	r3, [r3, r1]
 8003dda:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003ddc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	5c9b      	ldrb	r3, [r3, r2]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d115      	bne.n	8003e1a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	7e9b      	ldrb	r3, [r3, #26]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d105      	bne.n	8003e02 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2280      	movs	r2, #128	; 0x80
 8003dfa:	0252      	lsls	r2, r2, #9
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
 8003e00:	e00b      	b.n	8003e1a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e06:	2220      	movs	r2, #32
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	2201      	movs	r2, #1
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e26:	23e0      	movs	r3, #224	; 0xe0
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e30:	4313      	orrs	r3, r2
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <HAL_ADC_Init+0x3ac>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	4a53      	ldr	r2, [pc, #332]	; (8003fa4 <HAL_ADC_Init+0x3b0>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	001a      	movs	r2, r3
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f7ff fd8f 	bl	8003992 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7c:	494a      	ldr	r1, [pc, #296]	; (8003fa8 <HAL_ADC_Init+0x3b4>)
 8003e7e:	001a      	movs	r2, r3
 8003e80:	f7ff fd87 	bl	8003992 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2110      	movs	r1, #16
 8003e98:	4249      	negs	r1, r1
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8003e9e:	e03a      	b.n	8003f16 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	039b      	lsls	r3, r3, #14
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d134      	bne.n	8003f16 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e00c      	b.n	8003ecc <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	40da      	lsrs	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b0f      	cmp	r3, #15
 8003ec4:	d006      	beq.n	8003ed4 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b07      	cmp	r3, #7
 8003ed0:	d9ef      	bls.n	8003eb2 <HAL_ADC_Init+0x2be>
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003ed4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d109      	bne.n	8003ef0 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2110      	movs	r1, #16
 8003ee8:	4249      	negs	r1, r1
 8003eea:	430a      	orrs	r2, r1
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28
 8003eee:	e012      	b.n	8003f16 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	221c      	movs	r2, #28
 8003f00:	4013      	ands	r3, r2
 8003f02:	2210      	movs	r2, #16
 8003f04:	4252      	negs	r2, r2
 8003f06:	409a      	lsls	r2, r3
 8003f08:	0011      	movs	r1, r2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <HAL_ADC_Init+0x3b8>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d10b      	bne.n	8003f3e <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	2203      	movs	r2, #3
 8003f32:	4393      	bics	r3, r2
 8003f34:	2201      	movs	r2, #1
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f3c:	e01c      	b.n	8003f78 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	2212      	movs	r2, #18
 8003f44:	4393      	bics	r3, r2
 8003f46:	2210      	movs	r2, #16
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f52:	2201      	movs	r2, #1
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003f5a:	231f      	movs	r3, #31
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f62:	e009      	b.n	8003f78 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	2210      	movs	r2, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f70:	231f      	movs	r3, #31
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003f78:	231f      	movs	r3, #31
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	781b      	ldrb	r3, [r3, #0]
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b008      	add	sp, #32
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	20000000 	.word	0x20000000
 8003f8c:	00030d40 	.word	0x00030d40
 8003f90:	fffffefd 	.word	0xfffffefd
 8003f94:	1ffffc02 	.word	0x1ffffc02
 8003f98:	40012708 	.word	0x40012708
 8003f9c:	ffc3ffff 	.word	0xffc3ffff
 8003fa0:	fffe0219 	.word	0xfffe0219
 8003fa4:	dffffc02 	.word	0xdffffc02
 8003fa8:	07ffff04 	.word	0x07ffff04
 8003fac:	833fffe7 	.word	0x833fffe7

08003fb0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003fb0:	b5b0      	push	{r4, r5, r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2254      	movs	r2, #84	; 0x54
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_Stop+0x16>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e029      	b.n	800401a <HAL_ADC_Stop+0x6a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2254      	movs	r2, #84	; 0x54
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003fce:	250f      	movs	r5, #15
 8003fd0:	197c      	adds	r4, r7, r5
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 fb45 	bl	8004664 <ADC_ConversionStop>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003fde:	197b      	adds	r3, r7, r5
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d112      	bne.n	800400c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003fe6:	197c      	adds	r4, r7, r5
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 fc02 	bl	80047f4 <ADC_Disable>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003ff4:	197b      	adds	r3, r7, r5
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d107      	bne.n	800400c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	4a08      	ldr	r2, [pc, #32]	; (8004024 <HAL_ADC_Stop+0x74>)
 8004002:	4013      	ands	r3, r2
 8004004:	2201      	movs	r2, #1
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2254      	movs	r2, #84	; 0x54
 8004010:	2100      	movs	r1, #0
 8004012:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004014:	230f      	movs	r3, #15
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	781b      	ldrb	r3, [r3, #0]
}
 800401a:	0018      	movs	r0, r3
 800401c:	46bd      	mov	sp, r7
 800401e:	b004      	add	sp, #16
 8004020:	bdb0      	pop	{r4, r5, r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	fffffefe 	.word	0xfffffefe

08004028 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b08      	cmp	r3, #8
 8004038:	d102      	bne.n	8004040 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800403a:	2308      	movs	r3, #8
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e00f      	b.n	8004060 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	4013      	ands	r3, r2
 800404a:	d007      	beq.n	800405c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004050:	2220      	movs	r2, #32
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e072      	b.n	8004142 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800405c:	2304      	movs	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004060:	f7ff fc48 	bl	80038f4 <HAL_GetTick>
 8004064:	0003      	movs	r3, r0
 8004066:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004068:	e01f      	b.n	80040aa <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	d01c      	beq.n	80040aa <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004070:	f7ff fc40 	bl	80038f4 <HAL_GetTick>
 8004074:	0002      	movs	r2, r0
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d302      	bcc.n	8004086 <HAL_ADC_PollForConversion+0x5e>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d111      	bne.n	80040aa <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4013      	ands	r3, r2
 8004090:	d10b      	bne.n	80040aa <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	2204      	movs	r2, #4
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2254      	movs	r2, #84	; 0x54
 80040a2:	2100      	movs	r1, #0
 80040a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e04b      	b.n	8004142 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4013      	ands	r3, r2
 80040b4:	d0d9      	beq.n	800406a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	0092      	lsls	r2, r2, #2
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7ff fc7f 	bl	80039cc <LL_ADC_REG_IsTriggerSourceSWStart>
 80040ce:	1e03      	subs	r3, r0, #0
 80040d0:	d02e      	beq.n	8004130 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7e9b      	ldrb	r3, [r3, #26]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d12a      	bne.n	8004130 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2208      	movs	r2, #8
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d123      	bne.n	8004130 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7ff fd6f 	bl	8003bd0 <LL_ADC_REG_IsConversionOngoing>
 80040f2:	1e03      	subs	r3, r0, #0
 80040f4:	d110      	bne.n	8004118 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	210c      	movs	r1, #12
 8004102:	438a      	bics	r2, r1
 8004104:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	4a10      	ldr	r2, [pc, #64]	; (800414c <HAL_ADC_PollForConversion+0x124>)
 800410c:	4013      	ands	r3, r2
 800410e:	2201      	movs	r2, #1
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	659a      	str	r2, [r3, #88]	; 0x58
 8004116:	e00b      	b.n	8004130 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	2220      	movs	r2, #32
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	2201      	movs	r2, #1
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7e1b      	ldrb	r3, [r3, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	220c      	movs	r2, #12
 800413e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	0018      	movs	r0, r3
 8004144:	46bd      	mov	sp, r7
 8004146:	b004      	add	sp, #16
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	fffffefe 	.word	0xfffffefe

08004150 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0018      	movs	r0, r3
 8004162:	f7ff fd35 	bl	8003bd0 <LL_ADC_REG_IsConversionOngoing>
 8004166:	1e03      	subs	r3, r0, #0
 8004168:	d16c      	bne.n	8004244 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2254      	movs	r2, #84	; 0x54
 800416e:	5c9b      	ldrb	r3, [r3, r2]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_ADC_Start_DMA+0x28>
 8004174:	2302      	movs	r3, #2
 8004176:	e06c      	b.n	8004252 <HAL_ADC_Start_DMA+0x102>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2254      	movs	r2, #84	; 0x54
 800417c:	2101      	movs	r1, #1
 800417e:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2201      	movs	r2, #1
 8004188:	4013      	ands	r3, r2
 800418a:	d113      	bne.n	80041b4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0018      	movs	r0, r3
 8004192:	f7ff fcd7 	bl	8003b44 <LL_ADC_IsEnabled>
 8004196:	1e03      	subs	r3, r0, #0
 8004198:	d004      	beq.n	80041a4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	0018      	movs	r0, r3
 80041a0:	f7ff fcbe 	bl	8003b20 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2101      	movs	r1, #1
 80041b0:	430a      	orrs	r2, r1
 80041b2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80041b4:	2517      	movs	r5, #23
 80041b6:	197c      	adds	r4, r7, r5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 fa94 	bl	80046e8 <ADC_Enable>
 80041c0:	0003      	movs	r3, r0
 80041c2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80041c4:	002c      	movs	r4, r5
 80041c6:	193b      	adds	r3, r7, r4
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d13e      	bne.n	800424c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	4a22      	ldr	r2, [pc, #136]	; (800425c <HAL_ADC_Start_DMA+0x10c>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	2280      	movs	r2, #128	; 0x80
 80041d8:	0052      	lsls	r2, r2, #1
 80041da:	431a      	orrs	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ea:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <HAL_ADC_Start_DMA+0x110>)
 80041ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f2:	4a1c      	ldr	r2, [pc, #112]	; (8004264 <HAL_ADC_Start_DMA+0x114>)
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fa:	4a1b      	ldr	r2, [pc, #108]	; (8004268 <HAL_ADC_Start_DMA+0x118>)
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	221c      	movs	r2, #28
 8004204:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2254      	movs	r2, #84	; 0x54
 800420a:	2100      	movs	r1, #0
 800420c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2110      	movs	r1, #16
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3340      	adds	r3, #64	; 0x40
 8004228:	0019      	movs	r1, r3
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	193c      	adds	r4, r7, r4
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f000 fc80 	bl	8004b34 <HAL_DMA_Start_IT>
 8004234:	0003      	movs	r3, r0
 8004236:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff fca3 	bl	8003b88 <LL_ADC_REG_StartConversion>
 8004242:	e003      	b.n	800424c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004244:	2317      	movs	r3, #23
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	2202      	movs	r2, #2
 800424a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800424c:	2317      	movs	r3, #23
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	781b      	ldrb	r3, [r3, #0]
}
 8004252:	0018      	movs	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	b006      	add	sp, #24
 8004258:	bdb0      	pop	{r4, r5, r7, pc}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	fffff0fe 	.word	0xfffff0fe
 8004260:	080048b1 	.word	0x080048b1
 8004264:	08004979 	.word	0x08004979
 8004268:	08004997 	.word	0x08004997

0800426c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b002      	add	sp, #8
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	b002      	add	sp, #8
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	46bd      	mov	sp, r7
 800429e:	b002      	add	sp, #8
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b082      	sub	sp, #8
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042be:	2317      	movs	r3, #23
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2254      	movs	r2, #84	; 0x54
 80042ce:	5c9b      	ldrb	r3, [r3, r2]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_ADC_ConfigChannel+0x24>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e1c0      	b.n	800465a <HAL_ADC_ConfigChannel+0x3a6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2254      	movs	r2, #84	; 0x54
 80042dc:	2101      	movs	r1, #1
 80042de:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff fc73 	bl	8003bd0 <LL_ADC_REG_IsConversionOngoing>
 80042ea:	1e03      	subs	r3, r0, #0
 80042ec:	d000      	beq.n	80042f0 <HAL_ADC_ConfigChannel+0x3c>
 80042ee:	e1a3      	b.n	8004638 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d100      	bne.n	80042fa <HAL_ADC_ConfigChannel+0x46>
 80042f8:	e143      	b.n	8004582 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	061b      	lsls	r3, r3, #24
 8004302:	429a      	cmp	r2, r3
 8004304:	d004      	beq.n	8004310 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800430a:	4ac1      	ldr	r2, [pc, #772]	; (8004610 <HAL_ADC_ConfigChannel+0x35c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0019      	movs	r1, r3
 800431a:	0010      	movs	r0, r2
 800431c:	f7ff fb87 	bl	8003a2e <LL_ADC_REG_SetSequencerChAdd>
 8004320:	e0c9      	b.n	80044b6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	211f      	movs	r1, #31
 800432c:	400b      	ands	r3, r1
 800432e:	210f      	movs	r1, #15
 8004330:	4099      	lsls	r1, r3
 8004332:	000b      	movs	r3, r1
 8004334:	43db      	mvns	r3, r3
 8004336:	4013      	ands	r3, r2
 8004338:	0019      	movs	r1, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	035b      	lsls	r3, r3, #13
 8004340:	0b5b      	lsrs	r3, r3, #13
 8004342:	d105      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x9c>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	0e9b      	lsrs	r3, r3, #26
 800434a:	221f      	movs	r2, #31
 800434c:	4013      	ands	r3, r2
 800434e:	e098      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2201      	movs	r2, #1
 8004356:	4013      	ands	r3, r2
 8004358:	d000      	beq.n	800435c <HAL_ADC_ConfigChannel+0xa8>
 800435a:	e091      	b.n	8004480 <HAL_ADC_ConfigChannel+0x1cc>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2202      	movs	r2, #2
 8004362:	4013      	ands	r3, r2
 8004364:	d000      	beq.n	8004368 <HAL_ADC_ConfigChannel+0xb4>
 8004366:	e089      	b.n	800447c <HAL_ADC_ConfigChannel+0x1c8>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2204      	movs	r2, #4
 800436e:	4013      	ands	r3, r2
 8004370:	d000      	beq.n	8004374 <HAL_ADC_ConfigChannel+0xc0>
 8004372:	e081      	b.n	8004478 <HAL_ADC_ConfigChannel+0x1c4>
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2208      	movs	r2, #8
 800437a:	4013      	ands	r3, r2
 800437c:	d000      	beq.n	8004380 <HAL_ADC_ConfigChannel+0xcc>
 800437e:	e079      	b.n	8004474 <HAL_ADC_ConfigChannel+0x1c0>
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2210      	movs	r2, #16
 8004386:	4013      	ands	r3, r2
 8004388:	d000      	beq.n	800438c <HAL_ADC_ConfigChannel+0xd8>
 800438a:	e071      	b.n	8004470 <HAL_ADC_ConfigChannel+0x1bc>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2220      	movs	r2, #32
 8004392:	4013      	ands	r3, r2
 8004394:	d000      	beq.n	8004398 <HAL_ADC_ConfigChannel+0xe4>
 8004396:	e069      	b.n	800446c <HAL_ADC_ConfigChannel+0x1b8>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2240      	movs	r2, #64	; 0x40
 800439e:	4013      	ands	r3, r2
 80043a0:	d000      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0xf0>
 80043a2:	e061      	b.n	8004468 <HAL_ADC_ConfigChannel+0x1b4>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	4013      	ands	r3, r2
 80043ac:	d000      	beq.n	80043b0 <HAL_ADC_ConfigChannel+0xfc>
 80043ae:	e059      	b.n	8004464 <HAL_ADC_ConfigChannel+0x1b0>
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4013      	ands	r3, r2
 80043ba:	d151      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x1ac>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	2380      	movs	r3, #128	; 0x80
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4013      	ands	r3, r2
 80043c6:	d149      	bne.n	800445c <HAL_ADC_ConfigChannel+0x1a8>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4013      	ands	r3, r2
 80043d2:	d141      	bne.n	8004458 <HAL_ADC_ConfigChannel+0x1a4>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	4013      	ands	r3, r2
 80043de:	d139      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x1a0>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	015b      	lsls	r3, r3, #5
 80043e8:	4013      	ands	r3, r2
 80043ea:	d131      	bne.n	8004450 <HAL_ADC_ConfigChannel+0x19c>
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	2380      	movs	r3, #128	; 0x80
 80043f2:	019b      	lsls	r3, r3, #6
 80043f4:	4013      	ands	r3, r2
 80043f6:	d129      	bne.n	800444c <HAL_ADC_ConfigChannel+0x198>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	2380      	movs	r3, #128	; 0x80
 80043fe:	01db      	lsls	r3, r3, #7
 8004400:	4013      	ands	r3, r2
 8004402:	d121      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x194>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	2380      	movs	r3, #128	; 0x80
 800440a:	021b      	lsls	r3, r3, #8
 800440c:	4013      	ands	r3, r2
 800440e:	d119      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x190>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	025b      	lsls	r3, r3, #9
 8004418:	4013      	ands	r3, r2
 800441a:	d111      	bne.n	8004440 <HAL_ADC_ConfigChannel+0x18c>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	2380      	movs	r3, #128	; 0x80
 8004422:	029b      	lsls	r3, r3, #10
 8004424:	4013      	ands	r3, r2
 8004426:	d109      	bne.n	800443c <HAL_ADC_ConfigChannel+0x188>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	02db      	lsls	r3, r3, #11
 8004430:	4013      	ands	r3, r2
 8004432:	d001      	beq.n	8004438 <HAL_ADC_ConfigChannel+0x184>
 8004434:	2312      	movs	r3, #18
 8004436:	e024      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004438:	2300      	movs	r3, #0
 800443a:	e022      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 800443c:	2311      	movs	r3, #17
 800443e:	e020      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004440:	2310      	movs	r3, #16
 8004442:	e01e      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004444:	230f      	movs	r3, #15
 8004446:	e01c      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004448:	230e      	movs	r3, #14
 800444a:	e01a      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 800444c:	230d      	movs	r3, #13
 800444e:	e018      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004450:	230c      	movs	r3, #12
 8004452:	e016      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004454:	230b      	movs	r3, #11
 8004456:	e014      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004458:	230a      	movs	r3, #10
 800445a:	e012      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 800445c:	2309      	movs	r3, #9
 800445e:	e010      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004460:	2308      	movs	r3, #8
 8004462:	e00e      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004464:	2307      	movs	r3, #7
 8004466:	e00c      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004468:	2306      	movs	r3, #6
 800446a:	e00a      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 800446c:	2305      	movs	r3, #5
 800446e:	e008      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004470:	2304      	movs	r3, #4
 8004472:	e006      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004474:	2303      	movs	r3, #3
 8004476:	e004      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004478:	2302      	movs	r3, #2
 800447a:	e002      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_ADC_ConfigChannel+0x1ce>
 8004480:	2300      	movs	r3, #0
 8004482:	683a      	ldr	r2, [r7, #0]
 8004484:	6852      	ldr	r2, [r2, #4]
 8004486:	201f      	movs	r0, #31
 8004488:	4002      	ands	r2, r0
 800448a:	4093      	lsls	r3, r2
 800448c:	000a      	movs	r2, r1
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	089b      	lsrs	r3, r3, #2
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d808      	bhi.n	80044b6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	6859      	ldr	r1, [r3, #4]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	001a      	movs	r2, r3
 80044b2:	f7ff fa9c 	bl	80039ee <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	001a      	movs	r2, r3
 80044c4:	f7ff fad6 	bl	8003a74 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	db00      	blt.n	80044d2 <HAL_ADC_ConfigChannel+0x21e>
 80044d0:	e0bc      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d2:	4b50      	ldr	r3, [pc, #320]	; (8004614 <HAL_ADC_ConfigChannel+0x360>)
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff fa4f 	bl	8003978 <LL_ADC_GetCommonPathInternalCh>
 80044da:	0003      	movs	r3, r0
 80044dc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a4d      	ldr	r2, [pc, #308]	; (8004618 <HAL_ADC_ConfigChannel+0x364>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d122      	bne.n	800452e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80044f0:	d11d      	bne.n	800452e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	2280      	movs	r2, #128	; 0x80
 80044f6:	0412      	lsls	r2, r2, #16
 80044f8:	4313      	orrs	r3, r2
 80044fa:	4a46      	ldr	r2, [pc, #280]	; (8004614 <HAL_ADC_ConfigChannel+0x360>)
 80044fc:	0019      	movs	r1, r3
 80044fe:	0010      	movs	r0, r2
 8004500:	f7ff fa26 	bl	8003950 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004504:	4b45      	ldr	r3, [pc, #276]	; (800461c <HAL_ADC_ConfigChannel+0x368>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4945      	ldr	r1, [pc, #276]	; (8004620 <HAL_ADC_ConfigChannel+0x36c>)
 800450a:	0018      	movs	r0, r3
 800450c:	f7fb fe12 	bl	8000134 <__udivsi3>
 8004510:	0003      	movs	r3, r0
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	0013      	movs	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	189b      	adds	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800451e:	e002      	b.n	8004526 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3b01      	subs	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f9      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800452c:	e08e      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a3c      	ldr	r2, [pc, #240]	; (8004624 <HAL_ADC_ConfigChannel+0x370>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d10e      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x2a2>
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	045b      	lsls	r3, r3, #17
 800453e:	4013      	ands	r3, r2
 8004540:	d109      	bne.n	8004556 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	0452      	lsls	r2, r2, #17
 8004548:	4313      	orrs	r3, r2
 800454a:	4a32      	ldr	r2, [pc, #200]	; (8004614 <HAL_ADC_ConfigChannel+0x360>)
 800454c:	0019      	movs	r1, r3
 800454e:	0010      	movs	r0, r2
 8004550:	f7ff f9fe 	bl	8003950 <LL_ADC_SetCommonPathInternalCh>
 8004554:	e07a      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a33      	ldr	r2, [pc, #204]	; (8004628 <HAL_ADC_ConfigChannel+0x374>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d000      	beq.n	8004562 <HAL_ADC_ConfigChannel+0x2ae>
 8004560:	e074      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	2380      	movs	r3, #128	; 0x80
 8004566:	03db      	lsls	r3, r3, #15
 8004568:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800456a:	d000      	beq.n	800456e <HAL_ADC_ConfigChannel+0x2ba>
 800456c:	e06e      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2280      	movs	r2, #128	; 0x80
 8004572:	03d2      	lsls	r2, r2, #15
 8004574:	4313      	orrs	r3, r2
 8004576:	4a27      	ldr	r2, [pc, #156]	; (8004614 <HAL_ADC_ConfigChannel+0x360>)
 8004578:	0019      	movs	r1, r3
 800457a:	0010      	movs	r0, r2
 800457c:	f7ff f9e8 	bl	8003950 <LL_ADC_SetCommonPathInternalCh>
 8004580:	e064      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	429a      	cmp	r2, r3
 800458c:	d004      	beq.n	8004598 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004592:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <HAL_ADC_ConfigChannel+0x35c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d107      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0019      	movs	r1, r3
 80045a2:	0010      	movs	r0, r2
 80045a4:	f7ff fa54 	bl	8003a50 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	da4d      	bge.n	800464c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045b0:	4b18      	ldr	r3, [pc, #96]	; (8004614 <HAL_ADC_ConfigChannel+0x360>)
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7ff f9e0 	bl	8003978 <LL_ADC_GetCommonPathInternalCh>
 80045b8:	0003      	movs	r3, r0
 80045ba:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a15      	ldr	r2, [pc, #84]	; (8004618 <HAL_ADC_ConfigChannel+0x364>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_ADC_ConfigChannel+0x378>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	4a11      	ldr	r2, [pc, #68]	; (8004614 <HAL_ADC_ConfigChannel+0x360>)
 80045ce:	0019      	movs	r1, r3
 80045d0:	0010      	movs	r0, r2
 80045d2:	f7ff f9bd 	bl	8003950 <LL_ADC_SetCommonPathInternalCh>
 80045d6:	e039      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a11      	ldr	r2, [pc, #68]	; (8004624 <HAL_ADC_ConfigChannel+0x370>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d108      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4a12      	ldr	r2, [pc, #72]	; (8004630 <HAL_ADC_ConfigChannel+0x37c>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	4a0a      	ldr	r2, [pc, #40]	; (8004614 <HAL_ADC_ConfigChannel+0x360>)
 80045ea:	0019      	movs	r1, r3
 80045ec:	0010      	movs	r0, r2
 80045ee:	f7ff f9af 	bl	8003950 <LL_ADC_SetCommonPathInternalCh>
 80045f2:	e02b      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a0b      	ldr	r2, [pc, #44]	; (8004628 <HAL_ADC_ConfigChannel+0x374>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d126      	bne.n	800464c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4a0c      	ldr	r2, [pc, #48]	; (8004634 <HAL_ADC_ConfigChannel+0x380>)
 8004602:	4013      	ands	r3, r2
 8004604:	4a03      	ldr	r2, [pc, #12]	; (8004614 <HAL_ADC_ConfigChannel+0x360>)
 8004606:	0019      	movs	r1, r3
 8004608:	0010      	movs	r0, r2
 800460a:	f7ff f9a1 	bl	8003950 <LL_ADC_SetCommonPathInternalCh>
 800460e:	e01d      	b.n	800464c <HAL_ADC_ConfigChannel+0x398>
 8004610:	80000004 	.word	0x80000004
 8004614:	40012708 	.word	0x40012708
 8004618:	b0001000 	.word	0xb0001000
 800461c:	20000000 	.word	0x20000000
 8004620:	00030d40 	.word	0x00030d40
 8004624:	b8004000 	.word	0xb8004000
 8004628:	b4002000 	.word	0xb4002000
 800462c:	ff7fffff 	.word	0xff7fffff
 8004630:	feffffff 	.word	0xfeffffff
 8004634:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463c:	2220      	movs	r2, #32
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004644:	2317      	movs	r3, #23
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2254      	movs	r2, #84	; 0x54
 8004650:	2100      	movs	r1, #0
 8004652:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004654:	2317      	movs	r3, #23
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	781b      	ldrb	r3, [r3, #0]
}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b006      	add	sp, #24
 8004660:	bd80      	pop	{r7, pc}
 8004662:	46c0      	nop			; (mov r8, r8)

08004664 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0018      	movs	r0, r3
 8004672:	f7ff faad 	bl	8003bd0 <LL_ADC_REG_IsConversionOngoing>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d031      	beq.n	80046de <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	0018      	movs	r0, r3
 8004680:	f7ff fa71 	bl	8003b66 <LL_ADC_IsDisableOngoing>
 8004684:	1e03      	subs	r3, r0, #0
 8004686:	d104      	bne.n	8004692 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	0018      	movs	r0, r3
 800468e:	f7ff fa8d 	bl	8003bac <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004692:	f7ff f92f 	bl	80038f4 <HAL_GetTick>
 8004696:	0003      	movs	r3, r0
 8004698:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800469a:	e01a      	b.n	80046d2 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800469c:	f7ff f92a 	bl	80038f4 <HAL_GetTick>
 80046a0:	0002      	movs	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d913      	bls.n	80046d2 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2204      	movs	r2, #4
 80046b2:	4013      	ands	r3, r2
 80046b4:	d00d      	beq.n	80046d2 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ba:	2210      	movs	r2, #16
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	2201      	movs	r2, #1
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e006      	b.n	80046e0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2204      	movs	r2, #4
 80046da:	4013      	ands	r3, r2
 80046dc:	d1de      	bne.n	800469c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b004      	add	sp, #16
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff fa23 	bl	8003b44 <LL_ADC_IsEnabled>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d000      	beq.n	8004704 <ADC_Enable+0x1c>
 8004702:	e069      	b.n	80047d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	4a36      	ldr	r2, [pc, #216]	; (80047e4 <ADC_Enable+0xfc>)
 800470c:	4013      	ands	r3, r2
 800470e:	d00d      	beq.n	800472c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004714:	2210      	movs	r2, #16
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004720:	2201      	movs	r2, #1
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e056      	b.n	80047da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0018      	movs	r0, r3
 8004732:	f7ff f9e3 	bl	8003afc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004736:	4b2c      	ldr	r3, [pc, #176]	; (80047e8 <ADC_Enable+0x100>)
 8004738:	0018      	movs	r0, r3
 800473a:	f7ff f91d 	bl	8003978 <LL_ADC_GetCommonPathInternalCh>
 800473e:	0002      	movs	r2, r0
 8004740:	2380      	movs	r3, #128	; 0x80
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	4013      	ands	r3, r2
 8004746:	d00f      	beq.n	8004768 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004748:	4b28      	ldr	r3, [pc, #160]	; (80047ec <ADC_Enable+0x104>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4928      	ldr	r1, [pc, #160]	; (80047f0 <ADC_Enable+0x108>)
 800474e:	0018      	movs	r0, r3
 8004750:	f7fb fcf0 	bl	8000134 <__udivsi3>
 8004754:	0003      	movs	r3, r0
 8004756:	3301      	adds	r3, #1
 8004758:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800475a:	e002      	b.n	8004762 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3b01      	subs	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1f9      	bne.n	800475c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	7e5b      	ldrb	r3, [r3, #25]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d033      	beq.n	80047d8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004770:	f7ff f8c0 	bl	80038f4 <HAL_GetTick>
 8004774:	0003      	movs	r3, r0
 8004776:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004778:	e027      	b.n	80047ca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff f9e0 	bl	8003b44 <LL_ADC_IsEnabled>
 8004784:	1e03      	subs	r3, r0, #0
 8004786:	d104      	bne.n	8004792 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0018      	movs	r0, r3
 800478e:	f7ff f9b5 	bl	8003afc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004792:	f7ff f8af 	bl	80038f4 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d914      	bls.n	80047ca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2201      	movs	r2, #1
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d00d      	beq.n	80047ca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	2210      	movs	r2, #16
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	2201      	movs	r2, #1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e007      	b.n	80047da <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2201      	movs	r2, #1
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d1d0      	bne.n	800477a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b004      	add	sp, #16
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	80000017 	.word	0x80000017
 80047e8:	40012708 	.word	0x40012708
 80047ec:	20000000 	.word	0x20000000
 80047f0:	00030d40 	.word	0x00030d40

080047f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	0018      	movs	r0, r3
 8004802:	f7ff f9b0 	bl	8003b66 <LL_ADC_IsDisableOngoing>
 8004806:	0003      	movs	r3, r0
 8004808:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff f998 	bl	8003b44 <LL_ADC_IsEnabled>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d046      	beq.n	80048a6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d143      	bne.n	80048a6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2205      	movs	r2, #5
 8004826:	4013      	ands	r3, r2
 8004828:	2b01      	cmp	r3, #1
 800482a:	d10d      	bne.n	8004848 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff f975 	bl	8003b20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2203      	movs	r2, #3
 800483c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800483e:	f7ff f859 	bl	80038f4 <HAL_GetTick>
 8004842:	0003      	movs	r3, r0
 8004844:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004846:	e028      	b.n	800489a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	2210      	movs	r2, #16
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004858:	2201      	movs	r2, #1
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e021      	b.n	80048a8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004864:	f7ff f846 	bl	80038f4 <HAL_GetTick>
 8004868:	0002      	movs	r2, r0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d913      	bls.n	800489a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2201      	movs	r2, #1
 800487a:	4013      	ands	r3, r2
 800487c:	d00d      	beq.n	800489a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	2210      	movs	r2, #16
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	2201      	movs	r2, #1
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e006      	b.n	80048a8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2201      	movs	r2, #1
 80048a2:	4013      	ands	r3, r2
 80048a4:	d1de      	bne.n	8004864 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b004      	add	sp, #16
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	2250      	movs	r2, #80	; 0x50
 80048c4:	4013      	ands	r3, r2
 80048c6:	d141      	bne.n	800494c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	2280      	movs	r2, #128	; 0x80
 80048ce:	0092      	lsls	r2, r2, #2
 80048d0:	431a      	orrs	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	0018      	movs	r0, r3
 80048dc:	f7ff f876 	bl	80039cc <LL_ADC_REG_IsTriggerSourceSWStart>
 80048e0:	1e03      	subs	r3, r0, #0
 80048e2:	d02e      	beq.n	8004942 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	7e9b      	ldrb	r3, [r3, #26]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d12a      	bne.n	8004942 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2208      	movs	r2, #8
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d123      	bne.n	8004942 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	0018      	movs	r0, r3
 8004900:	f7ff f966 	bl	8003bd0 <LL_ADC_REG_IsConversionOngoing>
 8004904:	1e03      	subs	r3, r0, #0
 8004906:	d110      	bne.n	800492a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	210c      	movs	r1, #12
 8004914:	438a      	bics	r2, r1
 8004916:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <ADC_DMAConvCplt+0xc4>)
 800491e:	4013      	ands	r3, r2
 8004920:	2201      	movs	r2, #1
 8004922:	431a      	orrs	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	659a      	str	r2, [r3, #88]	; 0x58
 8004928:	e00b      	b.n	8004942 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	2220      	movs	r2, #32
 8004930:	431a      	orrs	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	2201      	movs	r2, #1
 800493c:	431a      	orrs	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	0018      	movs	r0, r3
 8004946:	f7ff fc9c 	bl	8004282 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800494a:	e00f      	b.n	800496c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004950:	2210      	movs	r2, #16
 8004952:	4013      	ands	r3, r2
 8004954:	d004      	beq.n	8004960 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	0018      	movs	r0, r3
 800495a:	f7ff fca2 	bl	80042a2 <HAL_ADC_ErrorCallback>
}
 800495e:	e005      	b.n	800496c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	0010      	movs	r0, r2
 800496a:	4798      	blx	r3
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b004      	add	sp, #16
 8004972:	bd80      	pop	{r7, pc}
 8004974:	fffffefe 	.word	0xfffffefe

08004978 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004984:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	0018      	movs	r0, r3
 800498a:	f7ff fc82 	bl	8004292 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	b004      	add	sp, #16
 8004994:	bd80      	pop	{r7, pc}

08004996 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	2240      	movs	r2, #64	; 0x40
 80049aa:	431a      	orrs	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b4:	2204      	movs	r2, #4
 80049b6:	431a      	orrs	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	0018      	movs	r0, r3
 80049c0:	f7ff fc6f 	bl	80042a2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b004      	add	sp, #16
 80049ca:	bd80      	pop	{r7, pc}

080049cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	0002      	movs	r2, r0
 80049d4:	6039      	str	r1, [r7, #0]
 80049d6:	1dfb      	adds	r3, r7, #7
 80049d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049da:	1dfb      	adds	r3, r7, #7
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b7f      	cmp	r3, #127	; 0x7f
 80049e0:	d828      	bhi.n	8004a34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049e2:	4a2f      	ldr	r2, [pc, #188]	; (8004aa0 <__NVIC_SetPriority+0xd4>)
 80049e4:	1dfb      	adds	r3, r7, #7
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	b25b      	sxtb	r3, r3
 80049ea:	089b      	lsrs	r3, r3, #2
 80049ec:	33c0      	adds	r3, #192	; 0xc0
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	589b      	ldr	r3, [r3, r2]
 80049f2:	1dfa      	adds	r2, r7, #7
 80049f4:	7812      	ldrb	r2, [r2, #0]
 80049f6:	0011      	movs	r1, r2
 80049f8:	2203      	movs	r2, #3
 80049fa:	400a      	ands	r2, r1
 80049fc:	00d2      	lsls	r2, r2, #3
 80049fe:	21ff      	movs	r1, #255	; 0xff
 8004a00:	4091      	lsls	r1, r2
 8004a02:	000a      	movs	r2, r1
 8004a04:	43d2      	mvns	r2, r2
 8004a06:	401a      	ands	r2, r3
 8004a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	019b      	lsls	r3, r3, #6
 8004a0e:	22ff      	movs	r2, #255	; 0xff
 8004a10:	401a      	ands	r2, r3
 8004a12:	1dfb      	adds	r3, r7, #7
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	0018      	movs	r0, r3
 8004a18:	2303      	movs	r3, #3
 8004a1a:	4003      	ands	r3, r0
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a20:	481f      	ldr	r0, [pc, #124]	; (8004aa0 <__NVIC_SetPriority+0xd4>)
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	b25b      	sxtb	r3, r3
 8004a28:	089b      	lsrs	r3, r3, #2
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	33c0      	adds	r3, #192	; 0xc0
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a32:	e031      	b.n	8004a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <__NVIC_SetPriority+0xd8>)
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	230f      	movs	r3, #15
 8004a3e:	400b      	ands	r3, r1
 8004a40:	3b08      	subs	r3, #8
 8004a42:	089b      	lsrs	r3, r3, #2
 8004a44:	3306      	adds	r3, #6
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	18d3      	adds	r3, r2, r3
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1dfa      	adds	r2, r7, #7
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	0011      	movs	r1, r2
 8004a54:	2203      	movs	r2, #3
 8004a56:	400a      	ands	r2, r1
 8004a58:	00d2      	lsls	r2, r2, #3
 8004a5a:	21ff      	movs	r1, #255	; 0xff
 8004a5c:	4091      	lsls	r1, r2
 8004a5e:	000a      	movs	r2, r1
 8004a60:	43d2      	mvns	r2, r2
 8004a62:	401a      	ands	r2, r3
 8004a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	019b      	lsls	r3, r3, #6
 8004a6a:	22ff      	movs	r2, #255	; 0xff
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	1dfb      	adds	r3, r7, #7
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	0018      	movs	r0, r3
 8004a74:	2303      	movs	r3, #3
 8004a76:	4003      	ands	r3, r0
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a7c:	4809      	ldr	r0, [pc, #36]	; (8004aa4 <__NVIC_SetPriority+0xd8>)
 8004a7e:	1dfb      	adds	r3, r7, #7
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	001c      	movs	r4, r3
 8004a84:	230f      	movs	r3, #15
 8004a86:	4023      	ands	r3, r4
 8004a88:	3b08      	subs	r3, #8
 8004a8a:	089b      	lsrs	r3, r3, #2
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	3306      	adds	r3, #6
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	18c3      	adds	r3, r0, r3
 8004a94:	3304      	adds	r3, #4
 8004a96:	601a      	str	r2, [r3, #0]
}
 8004a98:	46c0      	nop			; (mov r8, r8)
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b003      	add	sp, #12
 8004a9e:	bd90      	pop	{r4, r7, pc}
 8004aa0:	e000e100 	.word	0xe000e100
 8004aa4:	e000ed00 	.word	0xe000ed00

08004aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1e5a      	subs	r2, r3, #1
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	045b      	lsls	r3, r3, #17
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d301      	bcc.n	8004ac0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004abc:	2301      	movs	r3, #1
 8004abe:	e010      	b.n	8004ae2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <SysTick_Config+0x44>)
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	3a01      	subs	r2, #1
 8004ac6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ac8:	2301      	movs	r3, #1
 8004aca:	425b      	negs	r3, r3
 8004acc:	2103      	movs	r1, #3
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f7ff ff7c 	bl	80049cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <SysTick_Config+0x44>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ada:	4b04      	ldr	r3, [pc, #16]	; (8004aec <SysTick_Config+0x44>)
 8004adc:	2207      	movs	r2, #7
 8004ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b002      	add	sp, #8
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	e000e010 	.word	0xe000e010

08004af0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	210f      	movs	r1, #15
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	1c02      	adds	r2, r0, #0
 8004b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	b25b      	sxtb	r3, r3
 8004b0a:	0011      	movs	r1, r2
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7ff ff5d 	bl	80049cc <__NVIC_SetPriority>
}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b082      	sub	sp, #8
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f7ff ffbf 	bl	8004aa8 <SysTick_Config>
 8004b2a:	0003      	movs	r3, r0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b42:	2317      	movs	r3, #23
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2224      	movs	r2, #36	; 0x24
 8004b4e:	5c9b      	ldrb	r3, [r3, r2]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_DMA_Start_IT+0x24>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e06f      	b.n	8004c38 <HAL_DMA_Start_IT+0x104>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2225      	movs	r2, #37	; 0x25
 8004b64:	5c9b      	ldrb	r3, [r3, r2]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d157      	bne.n	8004c1c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2225      	movs	r2, #37	; 0x25
 8004b70:	2102      	movs	r1, #2
 8004b72:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2101      	movs	r1, #1
 8004b86:	438a      	bics	r2, r1
 8004b88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 f8cb 	bl	8004d2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d008      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	210e      	movs	r1, #14
 8004baa:	430a      	orrs	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e00f      	b.n	8004bd0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2104      	movs	r1, #4
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	210a      	movs	r1, #10
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	025b      	lsls	r3, r3, #9
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d008      	beq.n	8004bf0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be8:	2180      	movs	r1, #128	; 0x80
 8004bea:	0049      	lsls	r1, r1, #1
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	0049      	lsls	r1, r1, #1
 8004c06:	430a      	orrs	r2, r1
 8004c08:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2101      	movs	r1, #1
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e00a      	b.n	8004c32 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2280      	movs	r2, #128	; 0x80
 8004c20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2224      	movs	r2, #36	; 0x24
 8004c26:	2100      	movs	r1, #0
 8004c28:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004c2a:	2317      	movs	r3, #23
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004c32:	2317      	movs	r3, #23
 8004c34:	18fb      	adds	r3, r7, r3
 8004c36:	781b      	ldrb	r3, [r3, #0]
}
 8004c38:	0018      	movs	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b006      	add	sp, #24
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c48:	210f      	movs	r1, #15
 8004c4a:	187b      	adds	r3, r7, r1
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2225      	movs	r2, #37	; 0x25
 8004c54:	5c9b      	ldrb	r3, [r3, r2]
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d006      	beq.n	8004c6a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2204      	movs	r2, #4
 8004c60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004c62:	187b      	adds	r3, r7, r1
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e049      	b.n	8004cfe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	210e      	movs	r1, #14
 8004c76:	438a      	bics	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2101      	movs	r1, #1
 8004c86:	438a      	bics	r2, r1
 8004c88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c94:	491d      	ldr	r1, [pc, #116]	; (8004d0c <HAL_DMA_Abort_IT+0xcc>)
 8004c96:	400a      	ands	r2, r1
 8004c98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <HAL_DMA_Abort_IT+0xd0>)
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	221c      	movs	r2, #28
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	409a      	lsls	r2, r3
 8004caa:	4b19      	ldr	r3, [pc, #100]	; (8004d10 <HAL_DMA_Abort_IT+0xd0>)
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004cb8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	490f      	ldr	r1, [pc, #60]	; (8004d0c <HAL_DMA_Abort_IT+0xcc>)
 8004cce:	400a      	ands	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004cda:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2225      	movs	r2, #37	; 0x25
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2224      	movs	r2, #36	; 0x24
 8004ce8:	2100      	movs	r1, #0
 8004cea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	0010      	movs	r0, r2
 8004cfc:	4798      	blx	r3
    }
  }
  return status;
 8004cfe:	230f      	movs	r3, #15
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	781b      	ldrb	r3, [r3, #0]
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b004      	add	sp, #16
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	fffffeff 	.word	0xfffffeff
 8004d10:	40020000 	.word	0x40020000

08004d14 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2225      	movs	r2, #37	; 0x25
 8004d20:	5c9b      	ldrb	r3, [r3, r2]
 8004d22:	b2db      	uxtb	r3, r3
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004d42:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d004      	beq.n	8004d56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d54:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004d56:	4b14      	ldr	r3, [pc, #80]	; (8004da8 <DMA_SetConfig+0x7c>)
 8004d58:	6859      	ldr	r1, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	221c      	movs	r2, #28
 8004d60:	4013      	ands	r3, r2
 8004d62:	2201      	movs	r2, #1
 8004d64:	409a      	lsls	r2, r3
 8004d66:	4b10      	ldr	r3, [pc, #64]	; (8004da8 <DMA_SetConfig+0x7c>)
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d108      	bne.n	8004d8e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d8c:	e007      	b.n	8004d9e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	60da      	str	r2, [r3, #12]
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b004      	add	sp, #16
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	40020000 	.word	0x40020000

08004dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dba:	e147      	b.n	800504c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4091      	lsls	r1, r2
 8004dc6:	000a      	movs	r2, r1
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d100      	bne.n	8004dd4 <HAL_GPIO_Init+0x28>
 8004dd2:	e138      	b.n	8005046 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2203      	movs	r2, #3
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d005      	beq.n	8004dec <HAL_GPIO_Init+0x40>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2203      	movs	r2, #3
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d130      	bne.n	8004e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	2203      	movs	r2, #3
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	0013      	movs	r3, r2
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	0013      	movs	r3, r2
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e22:	2201      	movs	r2, #1
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	409a      	lsls	r2, r3
 8004e28:	0013      	movs	r3, r2
 8004e2a:	43da      	mvns	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	091b      	lsrs	r3, r3, #4
 8004e38:	2201      	movs	r2, #1
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	0013      	movs	r3, r2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2203      	movs	r2, #3
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d017      	beq.n	8004e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	2203      	movs	r2, #3
 8004e66:	409a      	lsls	r2, r3
 8004e68:	0013      	movs	r3, r2
 8004e6a:	43da      	mvns	r2, r3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	0013      	movs	r3, r2
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2203      	movs	r2, #3
 8004e90:	4013      	ands	r3, r2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d123      	bne.n	8004ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	08da      	lsrs	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3208      	adds	r2, #8
 8004e9e:	0092      	lsls	r2, r2, #2
 8004ea0:	58d3      	ldr	r3, [r2, r3]
 8004ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2207      	movs	r2, #7
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	220f      	movs	r2, #15
 8004eae:	409a      	lsls	r2, r3
 8004eb0:	0013      	movs	r3, r2
 8004eb2:	43da      	mvns	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2107      	movs	r1, #7
 8004ec2:	400b      	ands	r3, r1
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	0013      	movs	r3, r2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	08da      	lsrs	r2, r3, #3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3208      	adds	r2, #8
 8004ed8:	0092      	lsls	r2, r2, #2
 8004eda:	6939      	ldr	r1, [r7, #16]
 8004edc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	2203      	movs	r2, #3
 8004eea:	409a      	lsls	r2, r3
 8004eec:	0013      	movs	r3, r2
 8004eee:	43da      	mvns	r2, r3
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2203      	movs	r2, #3
 8004efc:	401a      	ands	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	409a      	lsls	r2, r3
 8004f04:	0013      	movs	r3, r2
 8004f06:	693a      	ldr	r2, [r7, #16]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	23c0      	movs	r3, #192	; 0xc0
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d100      	bne.n	8004f20 <HAL_GPIO_Init+0x174>
 8004f1e:	e092      	b.n	8005046 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004f20:	4a50      	ldr	r2, [pc, #320]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	3318      	adds	r3, #24
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	589b      	ldr	r3, [r3, r2]
 8004f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2203      	movs	r2, #3
 8004f32:	4013      	ands	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	220f      	movs	r2, #15
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	0013      	movs	r3, r2
 8004f3c:	43da      	mvns	r2, r3
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	23a0      	movs	r3, #160	; 0xa0
 8004f48:	05db      	lsls	r3, r3, #23
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d013      	beq.n	8004f76 <HAL_GPIO_Init+0x1ca>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a45      	ldr	r2, [pc, #276]	; (8005068 <HAL_GPIO_Init+0x2bc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00d      	beq.n	8004f72 <HAL_GPIO_Init+0x1c6>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a44      	ldr	r2, [pc, #272]	; (800506c <HAL_GPIO_Init+0x2c0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d007      	beq.n	8004f6e <HAL_GPIO_Init+0x1c2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a43      	ldr	r2, [pc, #268]	; (8005070 <HAL_GPIO_Init+0x2c4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d101      	bne.n	8004f6a <HAL_GPIO_Init+0x1be>
 8004f66:	2303      	movs	r3, #3
 8004f68:	e006      	b.n	8004f78 <HAL_GPIO_Init+0x1cc>
 8004f6a:	2305      	movs	r3, #5
 8004f6c:	e004      	b.n	8004f78 <HAL_GPIO_Init+0x1cc>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e002      	b.n	8004f78 <HAL_GPIO_Init+0x1cc>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_GPIO_Init+0x1cc>
 8004f76:	2300      	movs	r3, #0
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	2103      	movs	r1, #3
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	00d2      	lsls	r2, r2, #3
 8004f80:	4093      	lsls	r3, r2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004f88:	4936      	ldr	r1, [pc, #216]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	3318      	adds	r3, #24
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f96:	4a33      	ldr	r2, [pc, #204]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	58d3      	ldr	r3, [r2, r3]
 8004f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	43da      	mvns	r2, r3
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	025b      	lsls	r3, r3, #9
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fbc:	4929      	ldr	r1, [pc, #164]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8004fbe:	2280      	movs	r2, #128	; 0x80
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004fc4:	4a27      	ldr	r2, [pc, #156]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8004fc6:	2384      	movs	r3, #132	; 0x84
 8004fc8:	58d3      	ldr	r3, [r2, r3]
 8004fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	43da      	mvns	r2, r3
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	029b      	lsls	r3, r3, #10
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004fea:	491e      	ldr	r1, [pc, #120]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8004fec:	2284      	movs	r2, #132	; 0x84
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	43da      	mvns	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	035b      	lsls	r3, r3, #13
 800500a:	4013      	ands	r3, r2
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005016:	4b13      	ldr	r3, [pc, #76]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800501c:	4b11      	ldr	r3, [pc, #68]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	43da      	mvns	r2, r3
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4013      	ands	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	039b      	lsls	r3, r3, #14
 8005034:	4013      	ands	r3, r2
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <HAL_GPIO_Init+0x2b8>)
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	3301      	adds	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	40da      	lsrs	r2, r3
 8005054:	1e13      	subs	r3, r2, #0
 8005056:	d000      	beq.n	800505a <HAL_GPIO_Init+0x2ae>
 8005058:	e6b0      	b.n	8004dbc <HAL_GPIO_Init+0x10>
  }
}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	46c0      	nop			; (mov r8, r8)
 800505e:	46bd      	mov	sp, r7
 8005060:	b006      	add	sp, #24
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021800 	.word	0x40021800
 8005068:	50000400 	.word	0x50000400
 800506c:	50000800 	.word	0x50000800
 8005070:	50000c00 	.word	0x50000c00

08005074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	0008      	movs	r0, r1
 800507e:	0011      	movs	r1, r2
 8005080:	1cbb      	adds	r3, r7, #2
 8005082:	1c02      	adds	r2, r0, #0
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	1c7b      	adds	r3, r7, #1
 8005088:	1c0a      	adds	r2, r1, #0
 800508a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800508c:	1c7b      	adds	r3, r7, #1
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d004      	beq.n	800509e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005094:	1cbb      	adds	r3, r7, #2
 8005096:	881a      	ldrh	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800509c:	e003      	b.n	80050a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800509e:	1cbb      	adds	r3, r7, #2
 80050a0:	881a      	ldrh	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050a6:	46c0      	nop			; (mov r8, r8)
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b002      	add	sp, #8
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e082      	b.n	80051c8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2241      	movs	r2, #65	; 0x41
 80050c6:	5c9b      	ldrb	r3, [r3, r2]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2240      	movs	r2, #64	; 0x40
 80050d2:	2100      	movs	r1, #0
 80050d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0018      	movs	r0, r3
 80050da:	f7fe f909 	bl	80032f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2241      	movs	r2, #65	; 0x41
 80050e2:	2124      	movs	r1, #36	; 0x24
 80050e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2101      	movs	r1, #1
 80050f2:	438a      	bics	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4934      	ldr	r1, [pc, #208]	; (80051d0 <HAL_I2C_Init+0x120>)
 8005100:	400a      	ands	r2, r1
 8005102:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4931      	ldr	r1, [pc, #196]	; (80051d4 <HAL_I2C_Init+0x124>)
 8005110:	400a      	ands	r2, r1
 8005112:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d108      	bne.n	800512e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2180      	movs	r1, #128	; 0x80
 8005126:	0209      	lsls	r1, r1, #8
 8005128:	430a      	orrs	r2, r1
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	e007      	b.n	800513e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2184      	movs	r1, #132	; 0x84
 8005138:	0209      	lsls	r1, r1, #8
 800513a:	430a      	orrs	r2, r1
 800513c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d104      	bne.n	8005150 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2280      	movs	r2, #128	; 0x80
 800514c:	0112      	lsls	r2, r2, #4
 800514e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	491f      	ldr	r1, [pc, #124]	; (80051d8 <HAL_I2C_Init+0x128>)
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	491a      	ldr	r1, [pc, #104]	; (80051d4 <HAL_I2C_Init+0x124>)
 800516c:	400a      	ands	r2, r1
 800516e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	431a      	orrs	r2, r3
 800517a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69d9      	ldr	r1, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1a      	ldr	r2, [r3, #32]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2101      	movs	r1, #1
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2241      	movs	r2, #65	; 0x41
 80051b4:	2120      	movs	r1, #32
 80051b6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2242      	movs	r2, #66	; 0x42
 80051c2:	2100      	movs	r1, #0
 80051c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b002      	add	sp, #8
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	f0ffffff 	.word	0xf0ffffff
 80051d4:	ffff7fff 	.word	0xffff7fff
 80051d8:	02008000 	.word	0x02008000

080051dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 80051dc:	b590      	push	{r4, r7, lr}
 80051de:	b089      	sub	sp, #36	; 0x24
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	0008      	movs	r0, r1
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	0019      	movs	r1, r3
 80051ea:	230a      	movs	r3, #10
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	1c02      	adds	r2, r0, #0
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	2308      	movs	r3, #8
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	1c0a      	adds	r2, r1, #0
 80051f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2241      	movs	r2, #65	; 0x41
 80051fe:	5c9b      	ldrb	r3, [r3, r2]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b20      	cmp	r3, #32
 8005204:	d000      	beq.n	8005208 <HAL_I2C_Master_Transmit+0x2c>
 8005206:	e0e7      	b.n	80053d8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2240      	movs	r2, #64	; 0x40
 800520c:	5c9b      	ldrb	r3, [r3, r2]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d101      	bne.n	8005216 <HAL_I2C_Master_Transmit+0x3a>
 8005212:	2302      	movs	r3, #2
 8005214:	e0e1      	b.n	80053da <HAL_I2C_Master_Transmit+0x1fe>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2240      	movs	r2, #64	; 0x40
 800521a:	2101      	movs	r1, #1
 800521c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800521e:	f7fe fb69 	bl	80038f4 <HAL_GetTick>
 8005222:	0003      	movs	r3, r0
 8005224:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005226:	2380      	movs	r3, #128	; 0x80
 8005228:	0219      	lsls	r1, r3, #8
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	2319      	movs	r3, #25
 8005232:	2201      	movs	r2, #1
 8005234:	f001 fef0 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 8005238:	1e03      	subs	r3, r0, #0
 800523a:	d001      	beq.n	8005240 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0cc      	b.n	80053da <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2241      	movs	r2, #65	; 0x41
 8005244:	2121      	movs	r1, #33	; 0x21
 8005246:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2242      	movs	r2, #66	; 0x42
 800524c:	2110      	movs	r1, #16
 800524e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2208      	movs	r2, #8
 8005260:	18ba      	adds	r2, r7, r2
 8005262:	8812      	ldrh	r2, [r2, #0]
 8005264:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	2bff      	cmp	r3, #255	; 0xff
 8005274:	d911      	bls.n	800529a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	22ff      	movs	r2, #255	; 0xff
 800527a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	b2da      	uxtb	r2, r3
 8005282:	2380      	movs	r3, #128	; 0x80
 8005284:	045c      	lsls	r4, r3, #17
 8005286:	230a      	movs	r3, #10
 8005288:	18fb      	adds	r3, r7, r3
 800528a:	8819      	ldrh	r1, [r3, #0]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	4b55      	ldr	r3, [pc, #340]	; (80053e4 <HAL_I2C_Master_Transmit+0x208>)
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	0023      	movs	r3, r4
 8005294:	f002 f860 	bl	8007358 <I2C_TransferConfig>
 8005298:	e075      	b.n	8005386 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	2380      	movs	r3, #128	; 0x80
 80052ac:	049c      	lsls	r4, r3, #18
 80052ae:	230a      	movs	r3, #10
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	8819      	ldrh	r1, [r3, #0]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	4b4b      	ldr	r3, [pc, #300]	; (80053e4 <HAL_I2C_Master_Transmit+0x208>)
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	0023      	movs	r3, r4
 80052bc:	f002 f84c 	bl	8007358 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80052c0:	e061      	b.n	8005386 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	0018      	movs	r0, r3
 80052ca:	f001 fee4 	bl	8007096 <I2C_WaitOnTXISFlagUntilTimeout>
 80052ce:	1e03      	subs	r3, r0, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e081      	b.n	80053da <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	781a      	ldrb	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d03a      	beq.n	8005386 <HAL_I2C_Master_Transmit+0x1aa>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d136      	bne.n	8005386 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	0013      	movs	r3, r2
 8005322:	2200      	movs	r2, #0
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	f001 fe77 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d001      	beq.n	8005332 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e053      	b.n	80053da <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	2bff      	cmp	r3, #255	; 0xff
 800533a:	d911      	bls.n	8005360 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	22ff      	movs	r2, #255	; 0xff
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005346:	b2da      	uxtb	r2, r3
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	045c      	lsls	r4, r3, #17
 800534c:	230a      	movs	r3, #10
 800534e:	18fb      	adds	r3, r7, r3
 8005350:	8819      	ldrh	r1, [r3, #0]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	2300      	movs	r3, #0
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	0023      	movs	r3, r4
 800535a:	f001 fffd 	bl	8007358 <I2C_TransferConfig>
 800535e:	e012      	b.n	8005386 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800536e:	b2da      	uxtb	r2, r3
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	049c      	lsls	r4, r3, #18
 8005374:	230a      	movs	r3, #10
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	8819      	ldrh	r1, [r3, #0]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	2300      	movs	r3, #0
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	0023      	movs	r3, r4
 8005382:	f001 ffe9 	bl	8007358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d198      	bne.n	80052c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	0018      	movs	r0, r3
 8005398:	f001 febc 	bl	8007114 <I2C_WaitOnSTOPFlagUntilTimeout>
 800539c:	1e03      	subs	r3, r0, #0
 800539e:	d001      	beq.n	80053a4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e01a      	b.n	80053da <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2220      	movs	r2, #32
 80053aa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	490c      	ldr	r1, [pc, #48]	; (80053e8 <HAL_I2C_Master_Transmit+0x20c>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2241      	movs	r2, #65	; 0x41
 80053c0:	2120      	movs	r1, #32
 80053c2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2242      	movs	r2, #66	; 0x42
 80053c8:	2100      	movs	r1, #0
 80053ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	0018      	movs	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	b007      	add	sp, #28
 80053e0:	bd90      	pop	{r4, r7, pc}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	80002000 	.word	0x80002000
 80053e8:	fe00e800 	.word	0xfe00e800

080053ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 80053ec:	b590      	push	{r4, r7, lr}
 80053ee:	b089      	sub	sp, #36	; 0x24
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	0008      	movs	r0, r1
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	0019      	movs	r1, r3
 80053fa:	230a      	movs	r3, #10
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	1c02      	adds	r2, r0, #0
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	2308      	movs	r3, #8
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	1c0a      	adds	r2, r1, #0
 8005408:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2241      	movs	r2, #65	; 0x41
 800540e:	5c9b      	ldrb	r3, [r3, r2]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b20      	cmp	r3, #32
 8005414:	d000      	beq.n	8005418 <HAL_I2C_Master_Receive+0x2c>
 8005416:	e0e8      	b.n	80055ea <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2240      	movs	r2, #64	; 0x40
 800541c:	5c9b      	ldrb	r3, [r3, r2]
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_I2C_Master_Receive+0x3a>
 8005422:	2302      	movs	r3, #2
 8005424:	e0e2      	b.n	80055ec <HAL_I2C_Master_Receive+0x200>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2240      	movs	r2, #64	; 0x40
 800542a:	2101      	movs	r1, #1
 800542c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800542e:	f7fe fa61 	bl	80038f4 <HAL_GetTick>
 8005432:	0003      	movs	r3, r0
 8005434:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	0219      	lsls	r1, r3, #8
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	2319      	movs	r3, #25
 8005442:	2201      	movs	r2, #1
 8005444:	f001 fde8 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 8005448:	1e03      	subs	r3, r0, #0
 800544a:	d001      	beq.n	8005450 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0cd      	b.n	80055ec <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2241      	movs	r2, #65	; 0x41
 8005454:	2122      	movs	r1, #34	; 0x22
 8005456:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2242      	movs	r2, #66	; 0x42
 800545c:	2110      	movs	r1, #16
 800545e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2208      	movs	r2, #8
 8005470:	18ba      	adds	r2, r7, r2
 8005472:	8812      	ldrh	r2, [r2, #0]
 8005474:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	2bff      	cmp	r3, #255	; 0xff
 8005484:	d911      	bls.n	80054aa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	22ff      	movs	r2, #255	; 0xff
 800548a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005490:	b2da      	uxtb	r2, r3
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	045c      	lsls	r4, r3, #17
 8005496:	230a      	movs	r3, #10
 8005498:	18fb      	adds	r3, r7, r3
 800549a:	8819      	ldrh	r1, [r3, #0]
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	4b55      	ldr	r3, [pc, #340]	; (80055f4 <HAL_I2C_Master_Receive+0x208>)
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	0023      	movs	r3, r4
 80054a4:	f001 ff58 	bl	8007358 <I2C_TransferConfig>
 80054a8:	e076      	b.n	8005598 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b8:	b2da      	uxtb	r2, r3
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	049c      	lsls	r4, r3, #18
 80054be:	230a      	movs	r3, #10
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	8819      	ldrh	r1, [r3, #0]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	4b4b      	ldr	r3, [pc, #300]	; (80055f4 <HAL_I2C_Master_Receive+0x208>)
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	0023      	movs	r3, r4
 80054cc:	f001 ff44 	bl	8007358 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80054d0:	e062      	b.n	8005598 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	0018      	movs	r0, r3
 80054da:	f001 fe57 	bl	800718c <I2C_WaitOnRXNEFlagUntilTimeout>
 80054de:	1e03      	subs	r3, r0, #0
 80054e0:	d001      	beq.n	80054e6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e082      	b.n	80055ec <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551c:	b29b      	uxth	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d03a      	beq.n	8005598 <HAL_I2C_Master_Receive+0x1ac>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	d136      	bne.n	8005598 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800552a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	0013      	movs	r3, r2
 8005534:	2200      	movs	r2, #0
 8005536:	2180      	movs	r1, #128	; 0x80
 8005538:	f001 fd6e 	bl	8007018 <I2C_WaitOnFlagUntilTimeout>
 800553c:	1e03      	subs	r3, r0, #0
 800553e:	d001      	beq.n	8005544 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e053      	b.n	80055ec <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	2bff      	cmp	r3, #255	; 0xff
 800554c:	d911      	bls.n	8005572 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	22ff      	movs	r2, #255	; 0xff
 8005552:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005558:	b2da      	uxtb	r2, r3
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	045c      	lsls	r4, r3, #17
 800555e:	230a      	movs	r3, #10
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	8819      	ldrh	r1, [r3, #0]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	2300      	movs	r3, #0
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	0023      	movs	r3, r4
 800556c:	f001 fef4 	bl	8007358 <I2C_TransferConfig>
 8005570:	e012      	b.n	8005598 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	b2da      	uxtb	r2, r3
 8005582:	2380      	movs	r3, #128	; 0x80
 8005584:	049c      	lsls	r4, r3, #18
 8005586:	230a      	movs	r3, #10
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	8819      	ldrh	r1, [r3, #0]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	2300      	movs	r3, #0
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	0023      	movs	r3, r4
 8005594:	f001 fee0 	bl	8007358 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d197      	bne.n	80054d2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	0018      	movs	r0, r3
 80055aa:	f001 fdb3 	bl	8007114 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055ae:	1e03      	subs	r3, r0, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e01a      	b.n	80055ec <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2220      	movs	r2, #32
 80055bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	490b      	ldr	r1, [pc, #44]	; (80055f8 <HAL_I2C_Master_Receive+0x20c>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2241      	movs	r2, #65	; 0x41
 80055d2:	2120      	movs	r1, #32
 80055d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2242      	movs	r2, #66	; 0x42
 80055da:	2100      	movs	r1, #0
 80055dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2240      	movs	r2, #64	; 0x40
 80055e2:	2100      	movs	r1, #0
 80055e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e000      	b.n	80055ec <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
  }
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b007      	add	sp, #28
 80055f2:	bd90      	pop	{r4, r7, pc}
 80055f4:	80002400 	.word	0x80002400
 80055f8:	fe00e800 	.word	0xfe00e800

080055fc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80055fc:	b5b0      	push	{r4, r5, r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	0008      	movs	r0, r1
 8005606:	607a      	str	r2, [r7, #4]
 8005608:	0019      	movs	r1, r3
 800560a:	230a      	movs	r3, #10
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	1c02      	adds	r2, r0, #0
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	2308      	movs	r3, #8
 8005614:	18fb      	adds	r3, r7, r3
 8005616:	1c0a      	adds	r2, r1, #0
 8005618:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2241      	movs	r2, #65	; 0x41
 800561e:	5c9b      	ldrb	r3, [r3, r2]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b20      	cmp	r3, #32
 8005624:	d000      	beq.n	8005628 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8005626:	e0dd      	b.n	80057e4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	2380      	movs	r3, #128	; 0x80
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	401a      	ands	r2, r3
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	429a      	cmp	r2, r3
 800563a:	d101      	bne.n	8005640 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
 800563e:	e0d2      	b.n	80057e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2240      	movs	r2, #64	; 0x40
 8005644:	5c9b      	ldrb	r3, [r3, r2]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_I2C_Master_Transmit_DMA+0x52>
 800564a:	2302      	movs	r3, #2
 800564c:	e0cb      	b.n	80057e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2240      	movs	r2, #64	; 0x40
 8005652:	2101      	movs	r1, #1
 8005654:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2241      	movs	r2, #65	; 0x41
 800565a:	2121      	movs	r1, #33	; 0x21
 800565c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2242      	movs	r2, #66	; 0x42
 8005662:	2110      	movs	r1, #16
 8005664:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2208      	movs	r2, #8
 8005676:	18ba      	adds	r2, r7, r2
 8005678:	8812      	ldrh	r2, [r2, #0]
 800567a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a5c      	ldr	r2, [pc, #368]	; (80057f0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8005680:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a5b      	ldr	r2, [pc, #364]	; (80057f4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8005686:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	2bff      	cmp	r3, #255	; 0xff
 8005690:	d906      	bls.n	80056a0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	22ff      	movs	r2, #255	; 0xff
 8005696:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	045b      	lsls	r3, r3, #17
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	e007      	b.n	80056b0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	049b      	lsls	r3, r3, #18
 80056ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d100      	bne.n	80056ba <HAL_I2C_Master_Transmit_DMA+0xbe>
 80056b8:	e078      	b.n	80057ac <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d023      	beq.n	800570a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	4a4c      	ldr	r2, [pc, #304]	; (80057f8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80056c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	4a4b      	ldr	r2, [pc, #300]	; (80057fc <HAL_I2C_Master_Transmit_DMA+0x200>)
 80056d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	2200      	movs	r2, #0
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3328      	adds	r3, #40	; 0x28
 80056ee:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80056f4:	2513      	movs	r5, #19
 80056f6:	197c      	adds	r4, r7, r5
 80056f8:	f7ff fa1c 	bl	8004b34 <HAL_DMA_Start_IT>
 80056fc:	0003      	movs	r3, r0
 80056fe:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005700:	197b      	adds	r3, r7, r5
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d13d      	bne.n	8005784 <HAL_I2C_Master_Transmit_DMA+0x188>
 8005708:	e013      	b.n	8005732 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2241      	movs	r2, #65	; 0x41
 800570e:	2120      	movs	r1, #32
 8005710:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2242      	movs	r2, #66	; 0x42
 8005716:	2100      	movs	r1, #0
 8005718:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571e:	2280      	movs	r2, #128	; 0x80
 8005720:	431a      	orrs	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2240      	movs	r2, #64	; 0x40
 800572a:	2100      	movs	r1, #0
 800572c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e059      	b.n	80057e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005736:	b2da      	uxtb	r2, r3
 8005738:	697c      	ldr	r4, [r7, #20]
 800573a:	230a      	movs	r3, #10
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	8819      	ldrh	r1, [r3, #0]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	4b2f      	ldr	r3, [pc, #188]	; (8005800 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	0023      	movs	r3, r4
 8005748:	f001 fe06 	bl	8007358 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2240      	movs	r2, #64	; 0x40
 8005762:	2100      	movs	r1, #0
 8005764:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2110      	movs	r1, #16
 800576a:	0018      	movs	r0, r3
 800576c:	f001 fe2a 	bl	80073c4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2180      	movs	r1, #128	; 0x80
 800577c:	01c9      	lsls	r1, r1, #7
 800577e:	430a      	orrs	r2, r1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e02d      	b.n	80057e0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2241      	movs	r2, #65	; 0x41
 8005788:	2120      	movs	r1, #32
 800578a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2242      	movs	r2, #66	; 0x42
 8005790:	2100      	movs	r1, #0
 8005792:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005798:	2210      	movs	r2, #16
 800579a:	431a      	orrs	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2240      	movs	r2, #64	; 0x40
 80057a4:	2100      	movs	r1, #0
 80057a6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e01c      	b.n	80057e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4a15      	ldr	r2, [pc, #84]	; (8005804 <HAL_I2C_Master_Transmit_DMA+0x208>)
 80057b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	049c      	lsls	r4, r3, #18
 80057bc:	230a      	movs	r3, #10
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	8819      	ldrh	r1, [r3, #0]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	0023      	movs	r3, r4
 80057ca:	f001 fdc5 	bl	8007358 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2240      	movs	r2, #64	; 0x40
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2101      	movs	r1, #1
 80057da:	0018      	movs	r0, r3
 80057dc:	f001 fdf2 	bl	80073c4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e000      	b.n	80057e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057e4:	2302      	movs	r3, #2
  }
}
 80057e6:	0018      	movs	r0, r3
 80057e8:	46bd      	mov	sp, r7
 80057ea:	b006      	add	sp, #24
 80057ec:	bdb0      	pop	{r4, r5, r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	ffff0000 	.word	0xffff0000
 80057f4:	080060d1 	.word	0x080060d1
 80057f8:	08006e69 	.word	0x08006e69
 80057fc:	08006fa9 	.word	0x08006fa9
 8005800:	80002000 	.word	0x80002000
 8005804:	08005c25 	.word	0x08005c25

08005808 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005808:	b5b0      	push	{r4, r5, r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	0008      	movs	r0, r1
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	0019      	movs	r1, r3
 8005816:	230a      	movs	r3, #10
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	1c02      	adds	r2, r0, #0
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	2308      	movs	r3, #8
 8005820:	18fb      	adds	r3, r7, r3
 8005822:	1c0a      	adds	r2, r1, #0
 8005824:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2241      	movs	r2, #65	; 0x41
 800582a:	5c9b      	ldrb	r3, [r3, r2]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b20      	cmp	r3, #32
 8005830:	d000      	beq.n	8005834 <HAL_I2C_Master_Receive_DMA+0x2c>
 8005832:	e0dd      	b.n	80059f0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	401a      	ands	r2, r3
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	429a      	cmp	r2, r3
 8005846:	d101      	bne.n	800584c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
 800584a:	e0d2      	b.n	80059f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2240      	movs	r2, #64	; 0x40
 8005850:	5c9b      	ldrb	r3, [r3, r2]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_I2C_Master_Receive_DMA+0x52>
 8005856:	2302      	movs	r3, #2
 8005858:	e0cb      	b.n	80059f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2240      	movs	r2, #64	; 0x40
 800585e:	2101      	movs	r1, #1
 8005860:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2241      	movs	r2, #65	; 0x41
 8005866:	2122      	movs	r1, #34	; 0x22
 8005868:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2242      	movs	r2, #66	; 0x42
 800586e:	2110      	movs	r1, #16
 8005870:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2208      	movs	r2, #8
 8005882:	18ba      	adds	r2, r7, r2
 8005884:	8812      	ldrh	r2, [r2, #0]
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4a5c      	ldr	r2, [pc, #368]	; (80059fc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800588c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4a5b      	ldr	r2, [pc, #364]	; (8005a00 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8005892:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005898:	b29b      	uxth	r3, r3
 800589a:	2bff      	cmp	r3, #255	; 0xff
 800589c:	d906      	bls.n	80058ac <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	045b      	lsls	r3, r3, #17
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	e007      	b.n	80058bc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80058b6:	2380      	movs	r3, #128	; 0x80
 80058b8:	049b      	lsls	r3, r3, #18
 80058ba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d100      	bne.n	80058c6 <HAL_I2C_Master_Receive_DMA+0xbe>
 80058c4:	e078      	b.n	80059b8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d023      	beq.n	8005916 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	4a4c      	ldr	r2, [pc, #304]	; (8005a04 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80058d4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058da:	4a4b      	ldr	r2, [pc, #300]	; (8005a08 <HAL_I2C_Master_Receive_DMA+0x200>)
 80058dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e2:	2200      	movs	r2, #0
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	2200      	movs	r2, #0
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3324      	adds	r3, #36	; 0x24
 80058f8:	0019      	movs	r1, r3
 80058fa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005900:	2513      	movs	r5, #19
 8005902:	197c      	adds	r4, r7, r5
 8005904:	f7ff f916 	bl	8004b34 <HAL_DMA_Start_IT>
 8005908:	0003      	movs	r3, r0
 800590a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800590c:	197b      	adds	r3, r7, r5
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d13d      	bne.n	8005990 <HAL_I2C_Master_Receive_DMA+0x188>
 8005914:	e013      	b.n	800593e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2241      	movs	r2, #65	; 0x41
 800591a:	2120      	movs	r1, #32
 800591c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2242      	movs	r2, #66	; 0x42
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800592a:	2280      	movs	r2, #128	; 0x80
 800592c:	431a      	orrs	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2240      	movs	r2, #64	; 0x40
 8005936:	2100      	movs	r1, #0
 8005938:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e059      	b.n	80059f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	b2da      	uxtb	r2, r3
 8005944:	697c      	ldr	r4, [r7, #20]
 8005946:	230a      	movs	r3, #10
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	8819      	ldrh	r1, [r3, #0]
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	4b2f      	ldr	r3, [pc, #188]	; (8005a0c <HAL_I2C_Master_Receive_DMA+0x204>)
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	0023      	movs	r3, r4
 8005954:	f001 fd00 	bl	8007358 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2240      	movs	r2, #64	; 0x40
 800596e:	2100      	movs	r1, #0
 8005970:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2110      	movs	r1, #16
 8005976:	0018      	movs	r0, r3
 8005978:	f001 fd24 	bl	80073c4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	0209      	lsls	r1, r1, #8
 800598a:	430a      	orrs	r2, r1
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e02d      	b.n	80059ec <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2241      	movs	r2, #65	; 0x41
 8005994:	2120      	movs	r1, #32
 8005996:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2242      	movs	r2, #66	; 0x42
 800599c:	2100      	movs	r1, #0
 800599e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a4:	2210      	movs	r2, #16
 80059a6:	431a      	orrs	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2240      	movs	r2, #64	; 0x40
 80059b0:	2100      	movs	r1, #0
 80059b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e01c      	b.n	80059f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_I2C_Master_Receive_DMA+0x208>)
 80059bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	2380      	movs	r3, #128	; 0x80
 80059c6:	049c      	lsls	r4, r3, #18
 80059c8:	230a      	movs	r3, #10
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	8819      	ldrh	r1, [r3, #0]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	4b0e      	ldr	r3, [pc, #56]	; (8005a0c <HAL_I2C_Master_Receive_DMA+0x204>)
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	0023      	movs	r3, r4
 80059d6:	f001 fcbf 	bl	8007358 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2240      	movs	r2, #64	; 0x40
 80059de:	2100      	movs	r1, #0
 80059e0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2101      	movs	r1, #1
 80059e6:	0018      	movs	r0, r3
 80059e8:	f001 fcec 	bl	80073c4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80059ec:	2300      	movs	r3, #0
 80059ee:	e000      	b.n	80059f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059f0:	2302      	movs	r3, #2
  }
}
 80059f2:	0018      	movs	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	b006      	add	sp, #24
 80059f8:	bdb0      	pop	{r4, r5, r7, pc}
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	ffff0000 	.word	0xffff0000
 8005a00:	080060d1 	.word	0x080060d1
 8005a04:	08006f09 	.word	0x08006f09
 8005a08:	08006fa9 	.word	0x08006fa9
 8005a0c:	80002400 	.word	0x80002400
 8005a10:	08005c25 	.word	0x08005c25

08005a14 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	1dbb      	adds	r3, r7, #6
 8005a22:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2241      	movs	r2, #65	; 0x41
 8005a28:	5c9b      	ldrb	r3, [r3, r2]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	001a      	movs	r2, r3
 8005a2e:	2328      	movs	r3, #40	; 0x28
 8005a30:	4013      	ands	r3, r2
 8005a32:	2b28      	cmp	r3, #40	; 0x28
 8005a34:	d000      	beq.n	8005a38 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8005a36:	e08f      	b.n	8005b58 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8005a3e:	1dbb      	adds	r3, r7, #6
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d105      	bne.n	8005a52 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2280      	movs	r2, #128	; 0x80
 8005a4a:	0092      	lsls	r2, r2, #2
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e083      	b.n	8005b5a <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005a52:	4a44      	ldr	r2, [pc, #272]	; (8005b64 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	0011      	movs	r1, r2
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f001 fd1b 	bl	8007494 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2240      	movs	r2, #64	; 0x40
 8005a62:	5c9b      	ldrb	r3, [r3, r2]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e076      	b.n	8005b5a <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2240      	movs	r2, #64	; 0x40
 8005a70:	2101      	movs	r1, #1
 8005a72:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2241      	movs	r2, #65	; 0x41
 8005a78:	5c9b      	ldrb	r3, [r3, r2]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7e:	d12c      	bne.n	8005ada <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2102      	movs	r1, #2
 8005a84:	0018      	movs	r0, r3
 8005a86:	f001 fd05 	bl	8007494 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	401a      	ands	r2, r3
 8005a96:	2380      	movs	r3, #128	; 0x80
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d11d      	bne.n	8005ada <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	492f      	ldr	r1, [pc, #188]	; (8005b68 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8005aaa:	400a      	ands	r2, r1
 8005aac:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d011      	beq.n	8005ada <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aba:	4a2c      	ldr	r2, [pc, #176]	; (8005b6c <HAL_I2C_Slave_Seq_Transmit_IT+0x158>)
 8005abc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f7ff f8bc 	bl	8004c40 <HAL_DMA_Abort_IT>
 8005ac8:	1e03      	subs	r3, r0, #0
 8005aca:	d006      	beq.n	8005ada <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2241      	movs	r2, #65	; 0x41
 8005ade:	2129      	movs	r1, #41	; 0x29
 8005ae0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2242      	movs	r2, #66	; 0x42
 8005ae6:	2120      	movs	r1, #32
 8005ae8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	491b      	ldr	r1, [pc, #108]	; (8005b68 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8005afc:	400a      	ands	r2, r1
 8005afe:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1dba      	adds	r2, r7, #6
 8005b0a:	8812      	ldrh	r2, [r2, #0]
 8005b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8005b22:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	0c1b      	lsrs	r3, r3, #16
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2201      	movs	r2, #1
 8005b30:	4013      	ands	r3, r2
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d103      	bne.n	8005b40 <HAL_I2C_Slave_Seq_Transmit_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2240      	movs	r2, #64	; 0x40
 8005b44:	2100      	movs	r1, #0
 8005b46:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005b48:	4a06      	ldr	r2, [pc, #24]	; (8005b64 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	0011      	movs	r1, r2
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f001 fc38 	bl	80073c4 <I2C_Enable_IRQ>

    return HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e000      	b.n	8005b5a <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
  }
}
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b004      	add	sp, #16
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	00008001 	.word	0x00008001
 8005b68:	ffff7fff 	.word	0xffff7fff
 8005b6c:	08006fdb 	.word	0x08006fdb
 8005b70:	08005ea9 	.word	0x08005ea9

08005b74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005bac:	46c0      	nop			; (mov r8, r8)
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b002      	add	sp, #8
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	0008      	movs	r0, r1
 8005bbe:	0011      	movs	r1, r2
 8005bc0:	1cfb      	adds	r3, r7, #3
 8005bc2:	1c02      	adds	r2, r0, #0
 8005bc4:	701a      	strb	r2, [r3, #0]
 8005bc6:	003b      	movs	r3, r7
 8005bc8:	1c0a      	adds	r2, r1, #0
 8005bca:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005bcc:	46c0      	nop			; (mov r8, r8)
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005bdc:	46c0      	nop			; (mov r8, r8)
 8005bde:	46bd      	mov	sp, r7
 8005be0:	b002      	add	sp, #8
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005bec:	46c0      	nop			; (mov r8, r8)
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b002      	add	sp, #8
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005bfc:	46c0      	nop			; (mov r8, r8)
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	b002      	add	sp, #8
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c0c:	46c0      	nop			; (mov r8, r8)
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	b002      	add	sp, #8
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c1c:	46c0      	nop			; (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b089      	sub	sp, #36	; 0x24
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2240      	movs	r2, #64	; 0x40
 8005c38:	5c9b      	ldrb	r3, [r3, r2]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <I2C_Master_ISR_IT+0x1e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e12b      	b.n	8005e9a <I2C_Master_ISR_IT+0x276>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2240      	movs	r2, #64	; 0x40
 8005c46:	2101      	movs	r1, #1
 8005c48:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	001a      	movs	r2, r3
 8005c50:	2301      	movs	r3, #1
 8005c52:	4013      	ands	r3, r2
 8005c54:	d014      	beq.n	8005c80 <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	091b      	lsrs	r3, r3, #4
 8005c5a:	001a      	movs	r2, r3
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c60:	d00e      	beq.n	8005c80 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2210      	movs	r2, #16
 8005c68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	2204      	movs	r2, #4
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f001 f8d2 	bl	8006e22 <I2C_Flush_TXDR>
 8005c7e:	e0f5      	b.n	8005e6c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	089b      	lsrs	r3, r3, #2
 8005c84:	001a      	movs	r2, r3
 8005c86:	2301      	movs	r3, #1
 8005c88:	4013      	ands	r3, r2
 8005c8a:	d023      	beq.n	8005cd4 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	089b      	lsrs	r3, r3, #2
 8005c90:	001a      	movs	r2, r3
 8005c92:	2301      	movs	r3, #1
 8005c94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c96:	d01d      	beq.n	8005cd4 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	4393      	bics	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cd2:	e0cb      	b.n	8005e6c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	001a      	movs	r2, r3
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d01e      	beq.n	8005d1e <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cea:	d018      	beq.n	8005d1e <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	781a      	ldrb	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d1c:	e0a6      	b.n	8005e6c <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	09db      	lsrs	r3, r3, #7
 8005d22:	001a      	movs	r2, r3
 8005d24:	2301      	movs	r3, #1
 8005d26:	4013      	ands	r3, r2
 8005d28:	d100      	bne.n	8005d2c <I2C_Master_ISR_IT+0x108>
 8005d2a:	e06b      	b.n	8005e04 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	099b      	lsrs	r3, r3, #6
 8005d30:	001a      	movs	r2, r3
 8005d32:	2301      	movs	r3, #1
 8005d34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005d36:	d065      	beq.n	8005e04 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d04a      	beq.n	8005dd8 <I2C_Master_ISR_IT+0x1b4>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d146      	bne.n	8005dd8 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	2112      	movs	r1, #18
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	0592      	lsls	r2, r2, #22
 8005d58:	0d92      	lsrs	r2, r2, #22
 8005d5a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2bff      	cmp	r3, #255	; 0xff
 8005d64:	d910      	bls.n	8005d88 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	22ff      	movs	r2, #255	; 0xff
 8005d6a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	2380      	movs	r3, #128	; 0x80
 8005d74:	045c      	lsls	r4, r3, #17
 8005d76:	187b      	adds	r3, r7, r1
 8005d78:	8819      	ldrh	r1, [r3, #0]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	0023      	movs	r3, r4
 8005d82:	f001 fae9 	bl	8007358 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d86:	e03c      	b.n	8005e02 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d96:	4a43      	ldr	r2, [pc, #268]	; (8005ea4 <I2C_Master_ISR_IT+0x280>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005da6:	2312      	movs	r3, #18
 8005da8:	18fb      	adds	r3, r7, r3
 8005daa:	8819      	ldrh	r1, [r3, #0]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	2300      	movs	r3, #0
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	0023      	movs	r3, r4
 8005db4:	f001 fad0 	bl	8007358 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005db8:	e023      	b.n	8005e02 <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	2380      	movs	r3, #128	; 0x80
 8005dc2:	049c      	lsls	r4, r3, #18
 8005dc4:	2312      	movs	r3, #18
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	8819      	ldrh	r1, [r3, #0]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	0023      	movs	r3, r4
 8005dd2:	f001 fac1 	bl	8007358 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dd6:	e014      	b.n	8005e02 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	049b      	lsls	r3, r3, #18
 8005de2:	401a      	ands	r2, r3
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	049b      	lsls	r3, r3, #18
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d004      	beq.n	8005df6 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	0018      	movs	r0, r3
 8005df0:	f000 fc14 	bl	800661c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005df4:	e03a      	b.n	8005e6c <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2140      	movs	r1, #64	; 0x40
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f000 ff06 	bl	8006c0c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e00:	e034      	b.n	8005e6c <I2C_Master_ISR_IT+0x248>
 8005e02:	e033      	b.n	8005e6c <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	099b      	lsrs	r3, r3, #6
 8005e08:	001a      	movs	r2, r3
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	d02d      	beq.n	8005e6c <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	099b      	lsrs	r3, r3, #6
 8005e14:	001a      	movs	r2, r3
 8005e16:	2301      	movs	r3, #1
 8005e18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005e1a:	d027      	beq.n	8005e6c <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d11d      	bne.n	8005e62 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	049b      	lsls	r3, r3, #18
 8005e30:	401a      	ands	r2, r3
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	049b      	lsls	r3, r3, #18
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d018      	beq.n	8005e6c <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	4a19      	ldr	r2, [pc, #100]	; (8005ea4 <I2C_Master_ISR_IT+0x280>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d109      	bne.n	8005e58 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	01c9      	lsls	r1, r1, #7
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
 8005e56:	e009      	b.n	8005e6c <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	0018      	movs	r0, r3
 8005e5c:	f000 fbde 	bl	800661c <I2C_ITMasterSeqCplt>
 8005e60:	e004      	b.n	8005e6c <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2140      	movs	r1, #64	; 0x40
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 fed0 	bl	8006c0c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	095b      	lsrs	r3, r3, #5
 8005e70:	001a      	movs	r2, r3
 8005e72:	2301      	movs	r3, #1
 8005e74:	4013      	ands	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	001a      	movs	r2, r3
 8005e7e:	2301      	movs	r3, #1
 8005e80:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005e82:	d005      	beq.n	8005e90 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	0011      	movs	r1, r2
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 fc6e 	bl	800676c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2240      	movs	r2, #64	; 0x40
 8005e94:	2100      	movs	r1, #0
 8005e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	b007      	add	sp, #28
 8005ea0:	bd90      	pop	{r4, r7, pc}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	ffff0000 	.word	0xffff0000

08005ea8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2240      	movs	r2, #64	; 0x40
 8005ec2:	5c9b      	ldrb	r3, [r3, r2]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <I2C_Slave_ISR_IT+0x24>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e0fa      	b.n	80060c2 <I2C_Slave_ISR_IT+0x21a>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2240      	movs	r2, #64	; 0x40
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	001a      	movs	r2, r3
 8005eda:	2301      	movs	r3, #1
 8005edc:	4013      	ands	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	001a      	movs	r2, r3
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005eea:	d005      	beq.n	8005ef8 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f000 fd0c 	bl	8006910 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	091b      	lsrs	r3, r3, #4
 8005efc:	001a      	movs	r2, r3
 8005efe:	2301      	movs	r3, #1
 8005f00:	4013      	ands	r3, r2
 8005f02:	d054      	beq.n	8005fae <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	001a      	movs	r2, r3
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005f0e:	d04e      	beq.n	8005fae <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d12d      	bne.n	8005f76 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2241      	movs	r2, #65	; 0x41
 8005f1e:	5c9b      	ldrb	r3, [r3, r2]
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b28      	cmp	r3, #40	; 0x28
 8005f24:	d10b      	bne.n	8005f3e <I2C_Slave_ISR_IT+0x96>
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	2380      	movs	r3, #128	; 0x80
 8005f2a:	049b      	lsls	r3, r3, #18
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d106      	bne.n	8005f3e <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	0011      	movs	r1, r2
 8005f36:	0018      	movs	r0, r3
 8005f38:	f000 fe0e 	bl	8006b58 <I2C_ITListenCplt>
 8005f3c:	e036      	b.n	8005fac <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2241      	movs	r2, #65	; 0x41
 8005f42:	5c9b      	ldrb	r3, [r3, r2]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b29      	cmp	r3, #41	; 0x29
 8005f48:	d110      	bne.n	8005f6c <I2C_Slave_ISR_IT+0xc4>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4a5f      	ldr	r2, [pc, #380]	; (80060cc <I2C_Slave_ISR_IT+0x224>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00c      	beq.n	8005f6c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2210      	movs	r2, #16
 8005f58:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f000 ff60 	bl	8006e22 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 fb9b 	bl	80066a0 <I2C_ITSlaveSeqCplt>
 8005f6a:	e01f      	b.n	8005fac <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2210      	movs	r2, #16
 8005f72:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005f74:	e09d      	b.n	80060b2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2210      	movs	r2, #16
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	2204      	movs	r2, #4
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <I2C_Slave_ISR_IT+0xf4>
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	045b      	lsls	r3, r3, #17
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d000      	beq.n	8005f9c <I2C_Slave_ISR_IT+0xf4>
 8005f9a:	e08a      	b.n	80060b2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	0011      	movs	r1, r2
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 fe31 	bl	8006c0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005faa:	e082      	b.n	80060b2 <I2C_Slave_ISR_IT+0x20a>
 8005fac:	e081      	b.n	80060b2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	089b      	lsrs	r3, r3, #2
 8005fb2:	001a      	movs	r2, r3
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d031      	beq.n	800601e <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	089b      	lsrs	r3, r3, #2
 8005fbe:	001a      	movs	r2, r3
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005fc4:	d02b      	beq.n	800601e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d018      	beq.n	8006002 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d154      	bne.n	80060b6 <I2C_Slave_ISR_IT+0x20e>
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	4a2f      	ldr	r2, [pc, #188]	; (80060cc <I2C_Slave_ISR_IT+0x224>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d050      	beq.n	80060b6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	0018      	movs	r0, r3
 8006018:	f000 fb42 	bl	80066a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800601c:	e04b      	b.n	80060b6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	08db      	lsrs	r3, r3, #3
 8006022:	001a      	movs	r2, r3
 8006024:	2301      	movs	r3, #1
 8006026:	4013      	ands	r3, r2
 8006028:	d00c      	beq.n	8006044 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	08db      	lsrs	r3, r3, #3
 800602e:	001a      	movs	r2, r3
 8006030:	2301      	movs	r3, #1
 8006032:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006034:	d006      	beq.n	8006044 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	0011      	movs	r1, r2
 800603c:	0018      	movs	r0, r3
 800603e:	f000 fa49 	bl	80064d4 <I2C_ITAddrCplt>
 8006042:	e039      	b.n	80060b8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	001a      	movs	r2, r3
 800604a:	2301      	movs	r3, #1
 800604c:	4013      	ands	r3, r2
 800604e:	d033      	beq.n	80060b8 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	085b      	lsrs	r3, r3, #1
 8006054:	001a      	movs	r2, r3
 8006056:	2301      	movs	r3, #1
 8006058:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800605a:	d02d      	beq.n	80060b8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d018      	beq.n	8006098 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	781a      	ldrb	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	851a      	strh	r2, [r3, #40]	; 0x28
 8006096:	e00f      	b.n	80060b8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	045b      	lsls	r3, r3, #17
 800609e:	429a      	cmp	r2, r3
 80060a0:	d002      	beq.n	80060a8 <I2C_Slave_ISR_IT+0x200>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d107      	bne.n	80060b8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	0018      	movs	r0, r3
 80060ac:	f000 faf8 	bl	80066a0 <I2C_ITSlaveSeqCplt>
 80060b0:	e002      	b.n	80060b8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	e000      	b.n	80060b8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80060b6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2240      	movs	r2, #64	; 0x40
 80060bc:	2100      	movs	r1, #0
 80060be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	0018      	movs	r0, r3
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b006      	add	sp, #24
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	ffff0000 	.word	0xffff0000

080060d0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 80060d0:	b590      	push	{r4, r7, lr}
 80060d2:	b089      	sub	sp, #36	; 0x24
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	5c9b      	ldrb	r3, [r3, r2]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <I2C_Master_ISR_DMA+0x1a>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0f7      	b.n	80062da <I2C_Master_ISR_DMA+0x20a>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2240      	movs	r2, #64	; 0x40
 80060ee:	2101      	movs	r1, #1
 80060f0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	091b      	lsrs	r3, r3, #4
 80060f6:	001a      	movs	r2, r3
 80060f8:	2301      	movs	r3, #1
 80060fa:	4013      	ands	r3, r2
 80060fc:	d019      	beq.n	8006132 <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	001a      	movs	r2, r3
 8006104:	2301      	movs	r3, #1
 8006106:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006108:	d013      	beq.n	8006132 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2210      	movs	r2, #16
 8006110:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006116:	2204      	movs	r2, #4
 8006118:	431a      	orrs	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2120      	movs	r1, #32
 8006122:	0018      	movs	r0, r3
 8006124:	f001 f94e 	bl	80073c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	0018      	movs	r0, r3
 800612c:	f000 fe79 	bl	8006e22 <I2C_Flush_TXDR>
 8006130:	e0ce      	b.n	80062d0 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	09db      	lsrs	r3, r3, #7
 8006136:	001a      	movs	r2, r3
 8006138:	2301      	movs	r3, #1
 800613a:	4013      	ands	r3, r2
 800613c:	d100      	bne.n	8006140 <I2C_Master_ISR_DMA+0x70>
 800613e:	e07e      	b.n	800623e <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	099b      	lsrs	r3, r3, #6
 8006144:	001a      	movs	r2, r3
 8006146:	2301      	movs	r3, #1
 8006148:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800614a:	d100      	bne.n	800614e <I2C_Master_ISR_DMA+0x7e>
 800614c:	e077      	b.n	800623e <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2140      	movs	r1, #64	; 0x40
 800615a:	438a      	bics	r2, r1
 800615c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d055      	beq.n	8006214 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	b29a      	uxth	r2, r3
 8006170:	2312      	movs	r3, #18
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	0592      	lsls	r2, r2, #22
 8006176:	0d92      	lsrs	r2, r2, #22
 8006178:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	2bff      	cmp	r3, #255	; 0xff
 8006182:	d906      	bls.n	8006192 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	22ff      	movs	r2, #255	; 0xff
 8006188:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800618a:	2380      	movs	r3, #128	; 0x80
 800618c:	045b      	lsls	r3, r3, #17
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	e010      	b.n	80061b4 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006196:	b29a      	uxth	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	4a50      	ldr	r2, [pc, #320]	; (80062e4 <I2C_Master_ISR_DMA+0x214>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d003      	beq.n	80061ae <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	e002      	b.n	80061b4 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80061ae:	2380      	movs	r3, #128	; 0x80
 80061b0:	049b      	lsls	r3, r3, #18
 80061b2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	697c      	ldr	r4, [r7, #20]
 80061bc:	2312      	movs	r3, #18
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	8819      	ldrh	r1, [r3, #0]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	2300      	movs	r3, #0
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	0023      	movs	r3, r4
 80061ca:	f001 f8c5 	bl	8007358 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2241      	movs	r2, #65	; 0x41
 80061e4:	5c9b      	ldrb	r3, [r3, r2]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b22      	cmp	r3, #34	; 0x22
 80061ea:	d109      	bne.n	8006200 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2180      	movs	r1, #128	; 0x80
 80061f8:	0209      	lsls	r1, r1, #8
 80061fa:	430a      	orrs	r2, r1
 80061fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80061fe:	e067      	b.n	80062d0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2180      	movs	r1, #128	; 0x80
 800620c:	01c9      	lsls	r1, r1, #7
 800620e:	430a      	orrs	r2, r1
 8006210:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006212:	e05d      	b.n	80062d0 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	049b      	lsls	r3, r3, #18
 800621e:	401a      	ands	r2, r3
 8006220:	2380      	movs	r3, #128	; 0x80
 8006222:	049b      	lsls	r3, r3, #18
 8006224:	429a      	cmp	r2, r3
 8006226:	d004      	beq.n	8006232 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	0018      	movs	r0, r3
 800622c:	f000 f9f6 	bl	800661c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006230:	e04e      	b.n	80062d0 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2140      	movs	r1, #64	; 0x40
 8006236:	0018      	movs	r0, r3
 8006238:	f000 fce8 	bl	8006c0c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800623c:	e048      	b.n	80062d0 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	099b      	lsrs	r3, r3, #6
 8006242:	001a      	movs	r2, r3
 8006244:	2301      	movs	r3, #1
 8006246:	4013      	ands	r3, r2
 8006248:	d02e      	beq.n	80062a8 <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	099b      	lsrs	r3, r3, #6
 800624e:	001a      	movs	r2, r3
 8006250:	2301      	movs	r3, #1
 8006252:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006254:	d028      	beq.n	80062a8 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d11d      	bne.n	800629c <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	2380      	movs	r3, #128	; 0x80
 8006268:	049b      	lsls	r3, r3, #18
 800626a:	401a      	ands	r2, r3
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	049b      	lsls	r3, r3, #18
 8006270:	429a      	cmp	r2, r3
 8006272:	d02c      	beq.n	80062ce <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	4a1a      	ldr	r2, [pc, #104]	; (80062e4 <I2C_Master_ISR_DMA+0x214>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d109      	bne.n	8006292 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2180      	movs	r1, #128	; 0x80
 800628a:	01c9      	lsls	r1, r1, #7
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006290:	e01d      	b.n	80062ce <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	0018      	movs	r0, r3
 8006296:	f000 f9c1 	bl	800661c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800629a:	e018      	b.n	80062ce <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2140      	movs	r1, #64	; 0x40
 80062a0:	0018      	movs	r0, r3
 80062a2:	f000 fcb3 	bl	8006c0c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80062a6:	e012      	b.n	80062ce <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	001a      	movs	r2, r3
 80062ae:	2301      	movs	r3, #1
 80062b0:	4013      	ands	r3, r2
 80062b2:	d00d      	beq.n	80062d0 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	001a      	movs	r2, r3
 80062ba:	2301      	movs	r3, #1
 80062bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062be:	d007      	beq.n	80062d0 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	0011      	movs	r1, r2
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 fa50 	bl	800676c <I2C_ITMasterCplt>
 80062cc:	e000      	b.n	80062d0 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80062ce:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2240      	movs	r2, #64	; 0x40
 80062d4:	2100      	movs	r1, #0
 80062d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	0018      	movs	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	b007      	add	sp, #28
 80062e0:	bd90      	pop	{r4, r7, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	ffff0000 	.word	0xffff0000

080062e8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2240      	movs	r2, #64	; 0x40
 8006302:	5c9b      	ldrb	r3, [r3, r2]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <I2C_Slave_ISR_DMA+0x24>
 8006308:	2302      	movs	r3, #2
 800630a:	e0dd      	b.n	80064c8 <I2C_Slave_ISR_DMA+0x1e0>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2240      	movs	r2, #64	; 0x40
 8006310:	2101      	movs	r1, #1
 8006312:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	001a      	movs	r2, r3
 800631a:	2301      	movs	r3, #1
 800631c:	4013      	ands	r3, r2
 800631e:	d00b      	beq.n	8006338 <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	001a      	movs	r2, r3
 8006326:	2301      	movs	r3, #1
 8006328:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800632a:	d005      	beq.n	8006338 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	0011      	movs	r1, r2
 8006332:	0018      	movs	r0, r3
 8006334:	f000 faec 	bl	8006910 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	091b      	lsrs	r3, r3, #4
 800633c:	001a      	movs	r2, r3
 800633e:	2301      	movs	r3, #1
 8006340:	4013      	ands	r3, r2
 8006342:	d100      	bne.n	8006346 <I2C_Slave_ISR_DMA+0x5e>
 8006344:	e0a9      	b.n	800649a <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	001a      	movs	r2, r3
 800634c:	2301      	movs	r3, #1
 800634e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006350:	d100      	bne.n	8006354 <I2C_Slave_ISR_DMA+0x6c>
 8006352:	e0a2      	b.n	800649a <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	0b9b      	lsrs	r3, r3, #14
 8006358:	001a      	movs	r2, r3
 800635a:	2301      	movs	r3, #1
 800635c:	4013      	ands	r3, r2
 800635e:	d106      	bne.n	800636e <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	0bdb      	lsrs	r3, r3, #15
 8006364:	001a      	movs	r2, r3
 8006366:	2301      	movs	r3, #1
 8006368:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800636a:	d100      	bne.n	800636e <I2C_Slave_ISR_DMA+0x86>
 800636c:	e08e      	b.n	800648c <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0bdb      	lsrs	r3, r3, #15
 800637a:	001a      	movs	r2, r3
 800637c:	2301      	movs	r3, #1
 800637e:	4013      	ands	r3, r2
 8006380:	d007      	beq.n	8006392 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 800638e:	2301      	movs	r3, #1
 8006390:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00d      	beq.n	80063b6 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	0b9b      	lsrs	r3, r3, #14
 800639e:	001a      	movs	r2, r3
 80063a0:	2301      	movs	r3, #1
 80063a2:	4013      	ands	r3, r2
 80063a4:	d007      	beq.n	80063b6 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80063b2:	2301      	movs	r3, #1
 80063b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d12d      	bne.n	8006418 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2241      	movs	r2, #65	; 0x41
 80063c0:	5c9b      	ldrb	r3, [r3, r2]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b28      	cmp	r3, #40	; 0x28
 80063c6:	d10b      	bne.n	80063e0 <I2C_Slave_ISR_DMA+0xf8>
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	2380      	movs	r3, #128	; 0x80
 80063cc:	049b      	lsls	r3, r3, #18
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d106      	bne.n	80063e0 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	0011      	movs	r1, r2
 80063d8:	0018      	movs	r0, r3
 80063da:	f000 fbbd 	bl	8006b58 <I2C_ITListenCplt>
 80063de:	e054      	b.n	800648a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2241      	movs	r2, #65	; 0x41
 80063e4:	5c9b      	ldrb	r3, [r3, r2]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b29      	cmp	r3, #41	; 0x29
 80063ea:	d110      	bne.n	800640e <I2C_Slave_ISR_DMA+0x126>
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	4a38      	ldr	r2, [pc, #224]	; (80064d0 <I2C_Slave_ISR_DMA+0x1e8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d00c      	beq.n	800640e <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2210      	movs	r2, #16
 80063fa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	0018      	movs	r0, r3
 8006400:	f000 fd0f 	bl	8006e22 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	0018      	movs	r0, r3
 8006408:	f000 f94a 	bl	80066a0 <I2C_ITSlaveSeqCplt>
 800640c:	e03d      	b.n	800648a <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2210      	movs	r2, #16
 8006414:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006416:	e03e      	b.n	8006496 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2210      	movs	r2, #16
 800641e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	2204      	movs	r2, #4
 8006426:	431a      	orrs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800642c:	2317      	movs	r3, #23
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	2141      	movs	r1, #65	; 0x41
 8006434:	5c52      	ldrb	r2, [r2, r1]
 8006436:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d004      	beq.n	8006448 <I2C_Slave_ISR_DMA+0x160>
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	2380      	movs	r3, #128	; 0x80
 8006442:	045b      	lsls	r3, r3, #17
 8006444:	429a      	cmp	r2, r3
 8006446:	d126      	bne.n	8006496 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006448:	2217      	movs	r2, #23
 800644a:	18bb      	adds	r3, r7, r2
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b21      	cmp	r3, #33	; 0x21
 8006450:	d003      	beq.n	800645a <I2C_Slave_ISR_DMA+0x172>
 8006452:	18bb      	adds	r3, r7, r2
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b29      	cmp	r3, #41	; 0x29
 8006458:	d103      	bne.n	8006462 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2221      	movs	r2, #33	; 0x21
 800645e:	631a      	str	r2, [r3, #48]	; 0x30
 8006460:	e00b      	b.n	800647a <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006462:	2217      	movs	r2, #23
 8006464:	18bb      	adds	r3, r7, r2
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b22      	cmp	r3, #34	; 0x22
 800646a:	d003      	beq.n	8006474 <I2C_Slave_ISR_DMA+0x18c>
 800646c:	18bb      	adds	r3, r7, r2
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b2a      	cmp	r3, #42	; 0x2a
 8006472:	d102      	bne.n	800647a <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2222      	movs	r2, #34	; 0x22
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	0011      	movs	r1, r2
 8006482:	0018      	movs	r0, r3
 8006484:	f000 fbc2 	bl	8006c0c <I2C_ITError>
      if (treatdmanack == 1U)
 8006488:	e005      	b.n	8006496 <I2C_Slave_ISR_DMA+0x1ae>
 800648a:	e004      	b.n	8006496 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2210      	movs	r2, #16
 8006492:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006494:	e013      	b.n	80064be <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8006496:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006498:	e011      	b.n	80064be <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	08db      	lsrs	r3, r3, #3
 800649e:	001a      	movs	r2, r3
 80064a0:	2301      	movs	r3, #1
 80064a2:	4013      	ands	r3, r2
 80064a4:	d00b      	beq.n	80064be <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	08db      	lsrs	r3, r3, #3
 80064aa:	001a      	movs	r2, r3
 80064ac:	2301      	movs	r3, #1
 80064ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064b0:	d005      	beq.n	80064be <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	0011      	movs	r1, r2
 80064b8:	0018      	movs	r0, r3
 80064ba:	f000 f80b 	bl	80064d4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2240      	movs	r2, #64	; 0x40
 80064c2:	2100      	movs	r1, #0
 80064c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b008      	add	sp, #32
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	ffff0000 	.word	0xffff0000

080064d4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80064d4:	b5b0      	push	{r4, r5, r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2241      	movs	r2, #65	; 0x41
 80064e2:	5c9b      	ldrb	r3, [r3, r2]
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	001a      	movs	r2, r3
 80064e8:	2328      	movs	r3, #40	; 0x28
 80064ea:	4013      	ands	r3, r2
 80064ec:	2b28      	cmp	r3, #40	; 0x28
 80064ee:	d000      	beq.n	80064f2 <I2C_ITAddrCplt+0x1e>
 80064f0:	e088      	b.n	8006604 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	0c1b      	lsrs	r3, r3, #16
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	250f      	movs	r5, #15
 80064fe:	197b      	adds	r3, r7, r5
 8006500:	2101      	movs	r1, #1
 8006502:	400a      	ands	r2, r1
 8006504:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	b29a      	uxth	r2, r3
 8006510:	200c      	movs	r0, #12
 8006512:	183b      	adds	r3, r7, r0
 8006514:	21fe      	movs	r1, #254	; 0xfe
 8006516:	400a      	ands	r2, r1
 8006518:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	b29a      	uxth	r2, r3
 8006522:	240a      	movs	r4, #10
 8006524:	193b      	adds	r3, r7, r4
 8006526:	0592      	lsls	r2, r2, #22
 8006528:	0d92      	lsrs	r2, r2, #22
 800652a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	b29a      	uxth	r2, r3
 8006534:	2308      	movs	r3, #8
 8006536:	18fb      	adds	r3, r7, r3
 8006538:	21fe      	movs	r1, #254	; 0xfe
 800653a:	400a      	ands	r2, r1
 800653c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b02      	cmp	r3, #2
 8006544:	d148      	bne.n	80065d8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006546:	0021      	movs	r1, r4
 8006548:	187b      	adds	r3, r7, r1
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	09db      	lsrs	r3, r3, #7
 800654e:	b29a      	uxth	r2, r3
 8006550:	183b      	adds	r3, r7, r0
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	4053      	eors	r3, r2
 8006556:	b29b      	uxth	r3, r3
 8006558:	001a      	movs	r2, r3
 800655a:	2306      	movs	r3, #6
 800655c:	4013      	ands	r3, r2
 800655e:	d120      	bne.n	80065a2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006560:	183b      	adds	r3, r7, r0
 8006562:	187a      	adds	r2, r7, r1
 8006564:	8812      	ldrh	r2, [r2, #0]
 8006566:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006576:	2b02      	cmp	r3, #2
 8006578:	d14c      	bne.n	8006614 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2208      	movs	r2, #8
 8006586:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2240      	movs	r2, #64	; 0x40
 800658c:	2100      	movs	r1, #0
 800658e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006590:	183b      	adds	r3, r7, r0
 8006592:	881a      	ldrh	r2, [r3, #0]
 8006594:	197b      	adds	r3, r7, r5
 8006596:	7819      	ldrb	r1, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	0018      	movs	r0, r3
 800659c:	f7ff fb0a 	bl	8005bb4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80065a0:	e038      	b.n	8006614 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80065a2:	240c      	movs	r4, #12
 80065a4:	193b      	adds	r3, r7, r4
 80065a6:	2208      	movs	r2, #8
 80065a8:	18ba      	adds	r2, r7, r2
 80065aa:	8812      	ldrh	r2, [r2, #0]
 80065ac:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	021a      	lsls	r2, r3, #8
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0011      	movs	r1, r2
 80065b6:	0018      	movs	r0, r3
 80065b8:	f000 ff6c 	bl	8007494 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2240      	movs	r2, #64	; 0x40
 80065c0:	2100      	movs	r1, #0
 80065c2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065c4:	193b      	adds	r3, r7, r4
 80065c6:	881a      	ldrh	r2, [r3, #0]
 80065c8:	230f      	movs	r3, #15
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	7819      	ldrb	r1, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7ff faef 	bl	8005bb4 <HAL_I2C_AddrCallback>
}
 80065d6:	e01d      	b.n	8006614 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	021a      	lsls	r2, r3, #8
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	0011      	movs	r1, r2
 80065e0:	0018      	movs	r0, r3
 80065e2:	f000 ff57 	bl	8007494 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2240      	movs	r2, #64	; 0x40
 80065ea:	2100      	movs	r1, #0
 80065ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80065ee:	230c      	movs	r3, #12
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	881a      	ldrh	r2, [r3, #0]
 80065f4:	230f      	movs	r3, #15
 80065f6:	18fb      	adds	r3, r7, r3
 80065f8:	7819      	ldrb	r1, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f7ff fad9 	bl	8005bb4 <HAL_I2C_AddrCallback>
}
 8006602:	e007      	b.n	8006614 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2208      	movs	r2, #8
 800660a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2240      	movs	r2, #64	; 0x40
 8006610:	2100      	movs	r1, #0
 8006612:	5499      	strb	r1, [r3, r2]
}
 8006614:	46c0      	nop			; (mov r8, r8)
 8006616:	46bd      	mov	sp, r7
 8006618:	b004      	add	sp, #16
 800661a:	bdb0      	pop	{r4, r5, r7, pc}

0800661c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2242      	movs	r2, #66	; 0x42
 8006628:	2100      	movs	r1, #0
 800662a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2241      	movs	r2, #65	; 0x41
 8006630:	5c9b      	ldrb	r3, [r3, r2]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b21      	cmp	r3, #33	; 0x21
 8006636:	d117      	bne.n	8006668 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2241      	movs	r2, #65	; 0x41
 800663c:	2120      	movs	r1, #32
 800663e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2211      	movs	r2, #17
 8006644:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2101      	movs	r1, #1
 8006650:	0018      	movs	r0, r3
 8006652:	f000 ff1f 	bl	8007494 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2240      	movs	r2, #64	; 0x40
 800665a:	2100      	movs	r1, #0
 800665c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	0018      	movs	r0, r3
 8006662:	f7ff fa87 	bl	8005b74 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006666:	e016      	b.n	8006696 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2241      	movs	r2, #65	; 0x41
 800666c:	2120      	movs	r1, #32
 800666e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2212      	movs	r2, #18
 8006674:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2102      	movs	r1, #2
 8006680:	0018      	movs	r0, r3
 8006682:	f000 ff07 	bl	8007494 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2240      	movs	r2, #64	; 0x40
 800668a:	2100      	movs	r1, #0
 800668c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	0018      	movs	r0, r3
 8006692:	f7ff fa77 	bl	8005b84 <HAL_I2C_MasterRxCpltCallback>
}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	46bd      	mov	sp, r7
 800669a:	b002      	add	sp, #8
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2242      	movs	r2, #66	; 0x42
 80066b4:	2100      	movs	r1, #0
 80066b6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	0b9b      	lsrs	r3, r3, #14
 80066bc:	001a      	movs	r2, r3
 80066be:	2301      	movs	r3, #1
 80066c0:	4013      	ands	r3, r2
 80066c2:	d008      	beq.n	80066d6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4925      	ldr	r1, [pc, #148]	; (8006764 <I2C_ITSlaveSeqCplt+0xc4>)
 80066d0:	400a      	ands	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e00d      	b.n	80066f2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	0bdb      	lsrs	r3, r3, #15
 80066da:	001a      	movs	r2, r3
 80066dc:	2301      	movs	r3, #1
 80066de:	4013      	ands	r3, r2
 80066e0:	d007      	beq.n	80066f2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	491e      	ldr	r1, [pc, #120]	; (8006768 <I2C_ITSlaveSeqCplt+0xc8>)
 80066ee:	400a      	ands	r2, r1
 80066f0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2241      	movs	r2, #65	; 0x41
 80066f6:	5c9b      	ldrb	r3, [r3, r2]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b29      	cmp	r3, #41	; 0x29
 80066fc:	d114      	bne.n	8006728 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2241      	movs	r2, #65	; 0x41
 8006702:	2128      	movs	r1, #40	; 0x28
 8006704:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2221      	movs	r2, #33	; 0x21
 800670a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2101      	movs	r1, #1
 8006710:	0018      	movs	r0, r3
 8006712:	f000 febf 	bl	8007494 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2240      	movs	r2, #64	; 0x40
 800671a:	2100      	movs	r1, #0
 800671c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	0018      	movs	r0, r3
 8006722:	f7ff fa37 	bl	8005b94 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006726:	e019      	b.n	800675c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2241      	movs	r2, #65	; 0x41
 800672c:	5c9b      	ldrb	r3, [r3, r2]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b2a      	cmp	r3, #42	; 0x2a
 8006732:	d113      	bne.n	800675c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2241      	movs	r2, #65	; 0x41
 8006738:	2128      	movs	r1, #40	; 0x28
 800673a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2222      	movs	r2, #34	; 0x22
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2102      	movs	r1, #2
 8006746:	0018      	movs	r0, r3
 8006748:	f000 fea4 	bl	8007494 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2240      	movs	r2, #64	; 0x40
 8006750:	2100      	movs	r1, #0
 8006752:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	0018      	movs	r0, r3
 8006758:	f7ff fa24 	bl	8005ba4 <HAL_I2C_SlaveRxCpltCallback>
}
 800675c:	46c0      	nop			; (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	b004      	add	sp, #16
 8006762:	bd80      	pop	{r7, pc}
 8006764:	ffffbfff 	.word	0xffffbfff
 8006768:	ffff7fff 	.word	0xffff7fff

0800676c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b086      	sub	sp, #24
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2220      	movs	r2, #32
 8006780:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2241      	movs	r2, #65	; 0x41
 8006786:	5c9b      	ldrb	r3, [r3, r2]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b21      	cmp	r3, #33	; 0x21
 800678c:	d108      	bne.n	80067a0 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2101      	movs	r1, #1
 8006792:	0018      	movs	r0, r3
 8006794:	f000 fe7e 	bl	8007494 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2211      	movs	r2, #17
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
 800679e:	e00d      	b.n	80067bc <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2241      	movs	r2, #65	; 0x41
 80067a4:	5c9b      	ldrb	r3, [r3, r2]
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b22      	cmp	r3, #34	; 0x22
 80067aa:	d107      	bne.n	80067bc <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2102      	movs	r1, #2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f000 fe6f 	bl	8007494 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2212      	movs	r2, #18
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4950      	ldr	r1, [pc, #320]	; (8006908 <I2C_ITMasterCplt+0x19c>)
 80067c8:	400a      	ands	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a4d      	ldr	r2, [pc, #308]	; (800690c <I2C_ITMasterCplt+0x1a0>)
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	091b      	lsrs	r3, r3, #4
 80067dc:	001a      	movs	r2, r3
 80067de:	2301      	movs	r3, #1
 80067e0:	4013      	ands	r3, r2
 80067e2:	d009      	beq.n	80067f8 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2210      	movs	r2, #16
 80067ea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f0:	2204      	movs	r2, #4
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2241      	movs	r2, #65	; 0x41
 80067fc:	5c9b      	ldrb	r3, [r3, r2]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b60      	cmp	r3, #96	; 0x60
 8006802:	d10b      	bne.n	800681c <I2C_ITMasterCplt+0xb0>
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	089b      	lsrs	r3, r3, #2
 8006808:	001a      	movs	r2, r3
 800680a:	2301      	movs	r3, #1
 800680c:	4013      	ands	r3, r2
 800680e:	d005      	beq.n	800681c <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	b2db      	uxtb	r3, r3
 8006818:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800681a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	0018      	movs	r0, r3
 8006820:	f000 faff 	bl	8006e22 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2241      	movs	r2, #65	; 0x41
 800682e:	5c9b      	ldrb	r3, [r3, r2]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b60      	cmp	r3, #96	; 0x60
 8006834:	d002      	beq.n	800683c <I2C_ITMasterCplt+0xd0>
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	0011      	movs	r1, r2
 8006844:	0018      	movs	r0, r3
 8006846:	f000 f9e1 	bl	8006c0c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800684a:	e058      	b.n	80068fe <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2241      	movs	r2, #65	; 0x41
 8006850:	5c9b      	ldrb	r3, [r3, r2]
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b21      	cmp	r3, #33	; 0x21
 8006856:	d126      	bne.n	80068a6 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2241      	movs	r2, #65	; 0x41
 800685c:	2120      	movs	r1, #32
 800685e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2242      	movs	r2, #66	; 0x42
 800686a:	5c9b      	ldrb	r3, [r3, r2]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d10c      	bne.n	800688c <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2242      	movs	r2, #66	; 0x42
 8006876:	2100      	movs	r1, #0
 8006878:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2240      	movs	r2, #64	; 0x40
 800687e:	2100      	movs	r1, #0
 8006880:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	0018      	movs	r0, r3
 8006886:	f7ff f9ad 	bl	8005be4 <HAL_I2C_MemTxCpltCallback>
}
 800688a:	e038      	b.n	80068fe <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2242      	movs	r2, #66	; 0x42
 8006890:	2100      	movs	r1, #0
 8006892:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2240      	movs	r2, #64	; 0x40
 8006898:	2100      	movs	r1, #0
 800689a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	0018      	movs	r0, r3
 80068a0:	f7ff f968 	bl	8005b74 <HAL_I2C_MasterTxCpltCallback>
}
 80068a4:	e02b      	b.n	80068fe <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2241      	movs	r2, #65	; 0x41
 80068aa:	5c9b      	ldrb	r3, [r3, r2]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b22      	cmp	r3, #34	; 0x22
 80068b0:	d125      	bne.n	80068fe <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2241      	movs	r2, #65	; 0x41
 80068b6:	2120      	movs	r1, #32
 80068b8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2242      	movs	r2, #66	; 0x42
 80068c4:	5c9b      	ldrb	r3, [r3, r2]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d10c      	bne.n	80068e6 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2242      	movs	r2, #66	; 0x42
 80068d0:	2100      	movs	r1, #0
 80068d2:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2240      	movs	r2, #64	; 0x40
 80068d8:	2100      	movs	r1, #0
 80068da:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	0018      	movs	r0, r3
 80068e0:	f7ff f988 	bl	8005bf4 <HAL_I2C_MemRxCpltCallback>
}
 80068e4:	e00b      	b.n	80068fe <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2242      	movs	r2, #66	; 0x42
 80068ea:	2100      	movs	r1, #0
 80068ec:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2240      	movs	r2, #64	; 0x40
 80068f2:	2100      	movs	r1, #0
 80068f4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0018      	movs	r0, r3
 80068fa:	f7ff f943 	bl	8005b84 <HAL_I2C_MasterRxCpltCallback>
}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	46bd      	mov	sp, r7
 8006902:	b006      	add	sp, #24
 8006904:	bd80      	pop	{r7, pc}
 8006906:	46c0      	nop			; (mov r8, r8)
 8006908:	fe00e800 	.word	0xfe00e800
 800690c:	ffff0000 	.word	0xffff0000

08006910 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006926:	200f      	movs	r0, #15
 8006928:	183b      	adds	r3, r7, r0
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	2141      	movs	r1, #65	; 0x41
 800692e:	5c52      	ldrb	r2, [r2, r1]
 8006930:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2220      	movs	r2, #32
 8006938:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800693a:	183b      	adds	r3, r7, r0
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b21      	cmp	r3, #33	; 0x21
 8006940:	d003      	beq.n	800694a <I2C_ITSlaveCplt+0x3a>
 8006942:	183b      	adds	r3, r7, r0
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b29      	cmp	r3, #41	; 0x29
 8006948:	d109      	bne.n	800695e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800694a:	4a7d      	ldr	r2, [pc, #500]	; (8006b40 <I2C_ITSlaveCplt+0x230>)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fd9f 	bl	8007494 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2221      	movs	r2, #33	; 0x21
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
 800695c:	e011      	b.n	8006982 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800695e:	220f      	movs	r2, #15
 8006960:	18bb      	adds	r3, r7, r2
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b22      	cmp	r3, #34	; 0x22
 8006966:	d003      	beq.n	8006970 <I2C_ITSlaveCplt+0x60>
 8006968:	18bb      	adds	r3, r7, r2
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b2a      	cmp	r3, #42	; 0x2a
 800696e:	d108      	bne.n	8006982 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006970:	4a74      	ldr	r2, [pc, #464]	; (8006b44 <I2C_ITSlaveCplt+0x234>)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	0011      	movs	r1, r2
 8006976:	0018      	movs	r0, r3
 8006978:	f000 fd8c 	bl	8007494 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2222      	movs	r2, #34	; 0x22
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	0209      	lsls	r1, r1, #8
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	496a      	ldr	r1, [pc, #424]	; (8006b48 <I2C_ITSlaveCplt+0x238>)
 80069a0:	400a      	ands	r2, r1
 80069a2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	0018      	movs	r0, r3
 80069a8:	f000 fa3b 	bl	8006e22 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	0b9b      	lsrs	r3, r3, #14
 80069b0:	001a      	movs	r2, r3
 80069b2:	2301      	movs	r3, #1
 80069b4:	4013      	ands	r3, r2
 80069b6:	d013      	beq.n	80069e0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4962      	ldr	r1, [pc, #392]	; (8006b4c <I2C_ITSlaveCplt+0x23c>)
 80069c4:	400a      	ands	r2, r1
 80069c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d020      	beq.n	8006a12 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	b29a      	uxth	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80069de:	e018      	b.n	8006a12 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	0bdb      	lsrs	r3, r3, #15
 80069e4:	001a      	movs	r2, r3
 80069e6:	2301      	movs	r3, #1
 80069e8:	4013      	ands	r3, r2
 80069ea:	d012      	beq.n	8006a12 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4956      	ldr	r1, [pc, #344]	; (8006b50 <I2C_ITSlaveCplt+0x240>)
 80069f8:	400a      	ands	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	089b      	lsrs	r3, r3, #2
 8006a16:	001a      	movs	r2, r3
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	d020      	beq.n	8006a60 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2204      	movs	r2, #4
 8006a22:	4393      	bics	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00c      	beq.n	8006a60 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	2204      	movs	r2, #4
 8006a70:	431a      	orrs	r2, r3
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2242      	movs	r2, #66	; 0x42
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	0011      	movs	r1, r2
 8006a94:	0018      	movs	r0, r3
 8006a96:	f000 f8b9 	bl	8006c0c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2241      	movs	r2, #65	; 0x41
 8006a9e:	5c9b      	ldrb	r3, [r3, r2]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b28      	cmp	r3, #40	; 0x28
 8006aa4:	d147      	bne.n	8006b36 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0011      	movs	r1, r2
 8006aac:	0018      	movs	r0, r3
 8006aae:	f000 f853 	bl	8006b58 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ab2:	e040      	b.n	8006b36 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	4a26      	ldr	r2, [pc, #152]	; (8006b54 <I2C_ITSlaveCplt+0x244>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d016      	beq.n	8006aec <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f7ff fded 	bl	80066a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <I2C_ITSlaveCplt+0x244>)
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2241      	movs	r2, #65	; 0x41
 8006ad0:	2120      	movs	r1, #32
 8006ad2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2240      	movs	r2, #64	; 0x40
 8006ade:	2100      	movs	r1, #0
 8006ae0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f7ff f875 	bl	8005bd4 <HAL_I2C_ListenCpltCallback>
}
 8006aea:	e024      	b.n	8006b36 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2241      	movs	r2, #65	; 0x41
 8006af0:	5c9b      	ldrb	r3, [r3, r2]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b22      	cmp	r3, #34	; 0x22
 8006af6:	d10f      	bne.n	8006b18 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2241      	movs	r2, #65	; 0x41
 8006afc:	2120      	movs	r1, #32
 8006afe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2240      	movs	r2, #64	; 0x40
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7ff f847 	bl	8005ba4 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b16:	e00e      	b.n	8006b36 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2241      	movs	r2, #65	; 0x41
 8006b1c:	2120      	movs	r1, #32
 8006b1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2240      	movs	r2, #64	; 0x40
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7ff f82f 	bl	8005b94 <HAL_I2C_SlaveTxCpltCallback>
}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b006      	add	sp, #24
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	00008001 	.word	0x00008001
 8006b44:	00008002 	.word	0x00008002
 8006b48:	fe00e800 	.word	0xfe00e800
 8006b4c:	ffffbfff 	.word	0xffffbfff
 8006b50:	ffff7fff 	.word	0xffff7fff
 8006b54:	ffff0000 	.word	0xffff0000

08006b58 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a27      	ldr	r2, [pc, #156]	; (8006c04 <I2C_ITListenCplt+0xac>)
 8006b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2241      	movs	r2, #65	; 0x41
 8006b72:	2120      	movs	r1, #32
 8006b74:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2242      	movs	r2, #66	; 0x42
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	089b      	lsrs	r3, r3, #2
 8006b88:	001a      	movs	r2, r3
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	d022      	beq.n	8006bd6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d012      	beq.n	8006bd6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	2204      	movs	r2, #4
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006bd6:	4a0c      	ldr	r2, [pc, #48]	; (8006c08 <I2C_ITListenCplt+0xb0>)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	0011      	movs	r1, r2
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 fc59 	bl	8007494 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2210      	movs	r2, #16
 8006be8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2240      	movs	r2, #64	; 0x40
 8006bee:	2100      	movs	r1, #0
 8006bf0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f7fe ffed 	bl	8005bd4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	46c0      	nop			; (mov r8, r8)
 8006c04:	ffff0000 	.word	0xffff0000
 8006c08:	00008003 	.word	0x00008003

08006c0c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c16:	200f      	movs	r0, #15
 8006c18:	183b      	adds	r3, r7, r0
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	2141      	movs	r1, #65	; 0x41
 8006c1e:	5c52      	ldrb	r2, [r2, r1]
 8006c20:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2242      	movs	r2, #66	; 0x42
 8006c26:	2100      	movs	r1, #0
 8006c28:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a62      	ldr	r2, [pc, #392]	; (8006db8 <I2C_ITError+0x1ac>)
 8006c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c42:	183b      	adds	r3, r7, r0
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b28      	cmp	r3, #40	; 0x28
 8006c48:	d007      	beq.n	8006c5a <I2C_ITError+0x4e>
 8006c4a:	183b      	adds	r3, r7, r0
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b29      	cmp	r3, #41	; 0x29
 8006c50:	d003      	beq.n	8006c5a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c52:	183b      	adds	r3, r7, r0
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b2a      	cmp	r3, #42	; 0x2a
 8006c58:	d10c      	bne.n	8006c74 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2103      	movs	r1, #3
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f000 fc18 	bl	8007494 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2241      	movs	r2, #65	; 0x41
 8006c68:	2128      	movs	r1, #40	; 0x28
 8006c6a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a53      	ldr	r2, [pc, #332]	; (8006dbc <I2C_ITError+0x1b0>)
 8006c70:	635a      	str	r2, [r3, #52]	; 0x34
 8006c72:	e012      	b.n	8006c9a <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c74:	4a52      	ldr	r2, [pc, #328]	; (8006dc0 <I2C_ITError+0x1b4>)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	0011      	movs	r1, r2
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 fc0a 	bl	8007494 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2241      	movs	r2, #65	; 0x41
 8006c84:	5c9b      	ldrb	r3, [r3, r2]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b60      	cmp	r3, #96	; 0x60
 8006c8a:	d003      	beq.n	8006c94 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2241      	movs	r2, #65	; 0x41
 8006c90:	2120      	movs	r1, #32
 8006c92:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d03b      	beq.n	8006d20 <I2C_ITError+0x114>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2b11      	cmp	r3, #17
 8006cac:	d002      	beq.n	8006cb4 <I2C_ITError+0xa8>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b21      	cmp	r3, #33	; 0x21
 8006cb2:	d135      	bne.n	8006d20 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	2380      	movs	r3, #128	; 0x80
 8006cbc:	01db      	lsls	r3, r3, #7
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	2380      	movs	r3, #128	; 0x80
 8006cc2:	01db      	lsls	r3, r3, #7
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d107      	bne.n	8006cd8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	493c      	ldr	r1, [pc, #240]	; (8006dc4 <I2C_ITError+0x1b8>)
 8006cd4:	400a      	ands	r2, r1
 8006cd6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f7fe f819 	bl	8004d14 <HAL_DMA_GetState>
 8006ce2:	0003      	movs	r3, r0
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d016      	beq.n	8006d16 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	4a36      	ldr	r2, [pc, #216]	; (8006dc8 <I2C_ITError+0x1bc>)
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2240      	movs	r2, #64	; 0x40
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f7fd ff9f 	bl	8004c40 <HAL_DMA_Abort_IT>
 8006d02:	1e03      	subs	r3, r0, #0
 8006d04:	d051      	beq.n	8006daa <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d10:	0018      	movs	r0, r3
 8006d12:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d14:	e049      	b.n	8006daa <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f000 f859 	bl	8006dd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d1e:	e044      	b.n	8006daa <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d03b      	beq.n	8006da0 <I2C_ITError+0x194>
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b12      	cmp	r3, #18
 8006d2c:	d002      	beq.n	8006d34 <I2C_ITError+0x128>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b22      	cmp	r3, #34	; 0x22
 8006d32:	d135      	bne.n	8006da0 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	2380      	movs	r3, #128	; 0x80
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	401a      	ands	r2, r3
 8006d40:	2380      	movs	r3, #128	; 0x80
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d107      	bne.n	8006d58 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	491e      	ldr	r1, [pc, #120]	; (8006dcc <I2C_ITError+0x1c0>)
 8006d54:	400a      	ands	r2, r1
 8006d56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f7fd ffd9 	bl	8004d14 <HAL_DMA_GetState>
 8006d62:	0003      	movs	r3, r0
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d016      	beq.n	8006d96 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6c:	4a16      	ldr	r2, [pc, #88]	; (8006dc8 <I2C_ITError+0x1bc>)
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2240      	movs	r2, #64	; 0x40
 8006d74:	2100      	movs	r1, #0
 8006d76:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7fd ff5f 	bl	8004c40 <HAL_DMA_Abort_IT>
 8006d82:	1e03      	subs	r3, r0, #0
 8006d84:	d013      	beq.n	8006dae <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d90:	0018      	movs	r0, r3
 8006d92:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d94:	e00b      	b.n	8006dae <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 f819 	bl	8006dd0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d9e:	e006      	b.n	8006dae <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	0018      	movs	r0, r3
 8006da4:	f000 f814 	bl	8006dd0 <I2C_TreatErrorCallback>
  }
}
 8006da8:	e002      	b.n	8006db0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	e000      	b.n	8006db0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dae:	46c0      	nop			; (mov r8, r8)
}
 8006db0:	46c0      	nop			; (mov r8, r8)
 8006db2:	46bd      	mov	sp, r7
 8006db4:	b004      	add	sp, #16
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	ffff0000 	.word	0xffff0000
 8006dbc:	08005ea9 	.word	0x08005ea9
 8006dc0:	00008003 	.word	0x00008003
 8006dc4:	ffffbfff 	.word	0xffffbfff
 8006dc8:	08006fdb 	.word	0x08006fdb
 8006dcc:	ffff7fff 	.word	0xffff7fff

08006dd0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2241      	movs	r2, #65	; 0x41
 8006ddc:	5c9b      	ldrb	r3, [r3, r2]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b60      	cmp	r3, #96	; 0x60
 8006de2:	d10f      	bne.n	8006e04 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2241      	movs	r2, #65	; 0x41
 8006de8:	2120      	movs	r1, #32
 8006dea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2240      	movs	r2, #64	; 0x40
 8006df6:	2100      	movs	r1, #0
 8006df8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f7fe ff09 	bl	8005c14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e02:	e00a      	b.n	8006e1a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2240      	movs	r2, #64	; 0x40
 8006e0e:	2100      	movs	r1, #0
 8006e10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7fe fef5 	bl	8005c04 <HAL_I2C_ErrorCallback>
}
 8006e1a:	46c0      	nop			; (mov r8, r8)
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b082      	sub	sp, #8
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	2202      	movs	r2, #2
 8006e32:	4013      	ands	r3, r2
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d103      	bne.n	8006e40 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2201      	movs	r2, #1
 8006e48:	4013      	ands	r3, r2
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d007      	beq.n	8006e5e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699a      	ldr	r2, [r3, #24]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	619a      	str	r2, [r3, #24]
  }
}
 8006e5e:	46c0      	nop			; (mov r8, r8)
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b002      	add	sp, #8
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4920      	ldr	r1, [pc, #128]	; (8006f04 <I2C_DMAMasterTransmitCplt+0x9c>)
 8006e82:	400a      	ands	r2, r1
 8006e84:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2120      	movs	r1, #32
 8006e94:	0018      	movs	r0, r3
 8006e96:	f000 fa95 	bl	80073c4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006e9a:	e02e      	b.n	8006efa <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006ea4:	189a      	adds	r2, r3, r2
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2bff      	cmp	r3, #255	; 0xff
 8006eb2:	d903      	bls.n	8006ebc <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	22ff      	movs	r2, #255	; 0xff
 8006eb8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006eba:	e004      	b.n	8006ec6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ece:	0019      	movs	r1, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3328      	adds	r3, #40	; 0x28
 8006ed6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006edc:	f7fd fe2a 	bl	8004b34 <HAL_DMA_Start_IT>
 8006ee0:	1e03      	subs	r3, r0, #0
 8006ee2:	d005      	beq.n	8006ef0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2110      	movs	r1, #16
 8006ee8:	0018      	movs	r0, r3
 8006eea:	f7ff fe8f 	bl	8006c0c <I2C_ITError>
}
 8006eee:	e004      	b.n	8006efa <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2140      	movs	r1, #64	; 0x40
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 fa65 	bl	80073c4 <I2C_Enable_IRQ>
}
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b004      	add	sp, #16
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	ffffbfff 	.word	0xffffbfff

08006f08 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4920      	ldr	r1, [pc, #128]	; (8006fa4 <I2C_DMAMasterReceiveCplt+0x9c>)
 8006f22:	400a      	ands	r2, r1
 8006f24:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d105      	bne.n	8006f3c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2120      	movs	r1, #32
 8006f34:	0018      	movs	r0, r3
 8006f36:	f000 fa45 	bl	80073c4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006f3a:	e02e      	b.n	8006f9a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006f44:	189a      	adds	r2, r3, r2
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	2bff      	cmp	r3, #255	; 0xff
 8006f52:	d903      	bls.n	8006f5c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	22ff      	movs	r2, #255	; 0xff
 8006f58:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f5a:	e004      	b.n	8006f66 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	3324      	adds	r3, #36	; 0x24
 8006f70:	0019      	movs	r1, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006f7c:	f7fd fdda 	bl	8004b34 <HAL_DMA_Start_IT>
 8006f80:	1e03      	subs	r3, r0, #0
 8006f82:	d005      	beq.n	8006f90 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2110      	movs	r1, #16
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7ff fe3f 	bl	8006c0c <I2C_ITError>
}
 8006f8e:	e004      	b.n	8006f9a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2140      	movs	r1, #64	; 0x40
 8006f94:	0018      	movs	r0, r3
 8006f96:	f000 fa15 	bl	80073c4 <I2C_Enable_IRQ>
}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	b004      	add	sp, #16
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	ffff7fff 	.word	0xffff7fff

08006fa8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2180      	movs	r1, #128	; 0x80
 8006fc2:	0209      	lsls	r1, r1, #8
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2110      	movs	r1, #16
 8006fcc:	0018      	movs	r0, r3
 8006fce:	f7ff fe1d 	bl	8006c0c <I2C_ITError>
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	b004      	add	sp, #16
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007004:	2200      	movs	r2, #0
 8007006:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	0018      	movs	r0, r3
 800700c:	f7ff fee0 	bl	8006dd0 <I2C_TreatErrorCallback>
}
 8007010:	46c0      	nop			; (mov r8, r8)
 8007012:	46bd      	mov	sp, r7
 8007014:	b004      	add	sp, #16
 8007016:	bd80      	pop	{r7, pc}

08007018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	1dfb      	adds	r3, r7, #7
 8007026:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007028:	e021      	b.n	800706e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	3301      	adds	r3, #1
 800702e:	d01e      	beq.n	800706e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007030:	f7fc fc60 	bl	80038f4 <HAL_GetTick>
 8007034:	0002      	movs	r2, r0
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d302      	bcc.n	8007046 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d113      	bne.n	800706e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	2220      	movs	r2, #32
 800704c:	431a      	orrs	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2241      	movs	r2, #65	; 0x41
 8007056:	2120      	movs	r1, #32
 8007058:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2242      	movs	r2, #66	; 0x42
 800705e:	2100      	movs	r1, #0
 8007060:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2240      	movs	r2, #64	; 0x40
 8007066:	2100      	movs	r1, #0
 8007068:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e00f      	b.n	800708e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	4013      	ands	r3, r2
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	425a      	negs	r2, r3
 800707e:	4153      	adcs	r3, r2
 8007080:	b2db      	uxtb	r3, r3
 8007082:	001a      	movs	r2, r3
 8007084:	1dfb      	adds	r3, r7, #7
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d0ce      	beq.n	800702a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	0018      	movs	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	b004      	add	sp, #16
 8007094:	bd80      	pop	{r7, pc}

08007096 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b084      	sub	sp, #16
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070a2:	e02b      	b.n	80070fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	68b9      	ldr	r1, [r7, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	0018      	movs	r0, r3
 80070ac:	f000 f8da 	bl	8007264 <I2C_IsAcknowledgeFailed>
 80070b0:	1e03      	subs	r3, r0, #0
 80070b2:	d001      	beq.n	80070b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e029      	b.n	800710c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	3301      	adds	r3, #1
 80070bc:	d01e      	beq.n	80070fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070be:	f7fc fc19 	bl	80038f4 <HAL_GetTick>
 80070c2:	0002      	movs	r2, r0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d302      	bcc.n	80070d4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d113      	bne.n	80070fc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d8:	2220      	movs	r2, #32
 80070da:	431a      	orrs	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2241      	movs	r2, #65	; 0x41
 80070e4:	2120      	movs	r1, #32
 80070e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2242      	movs	r2, #66	; 0x42
 80070ec:	2100      	movs	r1, #0
 80070ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2240      	movs	r2, #64	; 0x40
 80070f4:	2100      	movs	r1, #0
 80070f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e007      	b.n	800710c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	2202      	movs	r2, #2
 8007104:	4013      	ands	r3, r2
 8007106:	2b02      	cmp	r3, #2
 8007108:	d1cc      	bne.n	80070a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	0018      	movs	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	b004      	add	sp, #16
 8007112:	bd80      	pop	{r7, pc}

08007114 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007120:	e028      	b.n	8007174 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	0018      	movs	r0, r3
 800712a:	f000 f89b 	bl	8007264 <I2C_IsAcknowledgeFailed>
 800712e:	1e03      	subs	r3, r0, #0
 8007130:	d001      	beq.n	8007136 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e026      	b.n	8007184 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007136:	f7fc fbdd 	bl	80038f4 <HAL_GetTick>
 800713a:	0002      	movs	r2, r0
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	429a      	cmp	r2, r3
 8007144:	d302      	bcc.n	800714c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d113      	bne.n	8007174 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007150:	2220      	movs	r2, #32
 8007152:	431a      	orrs	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2241      	movs	r2, #65	; 0x41
 800715c:	2120      	movs	r1, #32
 800715e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2242      	movs	r2, #66	; 0x42
 8007164:	2100      	movs	r1, #0
 8007166:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2240      	movs	r2, #64	; 0x40
 800716c:	2100      	movs	r1, #0
 800716e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e007      	b.n	8007184 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2220      	movs	r2, #32
 800717c:	4013      	ands	r3, r2
 800717e:	2b20      	cmp	r3, #32
 8007180:	d1cf      	bne.n	8007122 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	0018      	movs	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	b004      	add	sp, #16
 800718a:	bd80      	pop	{r7, pc}

0800718c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007198:	e055      	b.n	8007246 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	0018      	movs	r0, r3
 80071a2:	f000 f85f 	bl	8007264 <I2C_IsAcknowledgeFailed>
 80071a6:	1e03      	subs	r3, r0, #0
 80071a8:	d001      	beq.n	80071ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e053      	b.n	8007256 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	2220      	movs	r2, #32
 80071b6:	4013      	ands	r3, r2
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d129      	bne.n	8007210 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	2204      	movs	r2, #4
 80071c4:	4013      	ands	r3, r2
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d105      	bne.n	80071d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	e03f      	b.n	8007256 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2220      	movs	r2, #32
 80071dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	491d      	ldr	r1, [pc, #116]	; (8007260 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80071ea:	400a      	ands	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2241      	movs	r2, #65	; 0x41
 80071f8:	2120      	movs	r1, #32
 80071fa:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2242      	movs	r2, #66	; 0x42
 8007200:	2100      	movs	r1, #0
 8007202:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2240      	movs	r2, #64	; 0x40
 8007208:	2100      	movs	r1, #0
 800720a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e022      	b.n	8007256 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007210:	f7fc fb70 	bl	80038f4 <HAL_GetTick>
 8007214:	0002      	movs	r2, r0
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	429a      	cmp	r2, r3
 800721e:	d302      	bcc.n	8007226 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10f      	bne.n	8007246 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	2220      	movs	r2, #32
 800722c:	431a      	orrs	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2241      	movs	r2, #65	; 0x41
 8007236:	2120      	movs	r1, #32
 8007238:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2240      	movs	r2, #64	; 0x40
 800723e:	2100      	movs	r1, #0
 8007240:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e007      	b.n	8007256 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	2204      	movs	r2, #4
 800724e:	4013      	ands	r3, r2
 8007250:	2b04      	cmp	r3, #4
 8007252:	d1a2      	bne.n	800719a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	0018      	movs	r0, r3
 8007258:	46bd      	mov	sp, r7
 800725a:	b004      	add	sp, #16
 800725c:	bd80      	pop	{r7, pc}
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	fe00e800 	.word	0xfe00e800

08007264 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	2210      	movs	r2, #16
 8007278:	4013      	ands	r3, r2
 800727a:	2b10      	cmp	r3, #16
 800727c:	d164      	bne.n	8007348 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	2380      	movs	r3, #128	; 0x80
 8007286:	049b      	lsls	r3, r3, #18
 8007288:	401a      	ands	r2, r3
 800728a:	2380      	movs	r3, #128	; 0x80
 800728c:	049b      	lsls	r3, r3, #18
 800728e:	429a      	cmp	r2, r3
 8007290:	d02b      	beq.n	80072ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2180      	movs	r1, #128	; 0x80
 800729e:	01c9      	lsls	r1, r1, #7
 80072a0:	430a      	orrs	r2, r1
 80072a2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072a4:	e021      	b.n	80072ea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3301      	adds	r3, #1
 80072aa:	d01e      	beq.n	80072ea <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ac:	f7fc fb22 	bl	80038f4 <HAL_GetTick>
 80072b0:	0002      	movs	r2, r0
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <I2C_IsAcknowledgeFailed+0x5e>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d113      	bne.n	80072ea <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	2220      	movs	r2, #32
 80072c8:	431a      	orrs	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2241      	movs	r2, #65	; 0x41
 80072d2:	2120      	movs	r1, #32
 80072d4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2242      	movs	r2, #66	; 0x42
 80072da:	2100      	movs	r1, #0
 80072dc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2240      	movs	r2, #64	; 0x40
 80072e2:	2100      	movs	r1, #0
 80072e4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e02f      	b.n	800734a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2220      	movs	r2, #32
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d1d6      	bne.n	80072a6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2210      	movs	r2, #16
 80072fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2220      	movs	r2, #32
 8007306:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0018      	movs	r0, r3
 800730c:	f7ff fd89 	bl	8006e22 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	490e      	ldr	r1, [pc, #56]	; (8007354 <I2C_IsAcknowledgeFailed+0xf0>)
 800731c:	400a      	ands	r2, r1
 800731e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007324:	2204      	movs	r2, #4
 8007326:	431a      	orrs	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2241      	movs	r2, #65	; 0x41
 8007330:	2120      	movs	r1, #32
 8007332:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2242      	movs	r2, #66	; 0x42
 8007338:	2100      	movs	r1, #0
 800733a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2240      	movs	r2, #64	; 0x40
 8007340:	2100      	movs	r1, #0
 8007342:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	0018      	movs	r0, r3
 800734c:	46bd      	mov	sp, r7
 800734e:	b004      	add	sp, #16
 8007350:	bd80      	pop	{r7, pc}
 8007352:	46c0      	nop			; (mov r8, r8)
 8007354:	fe00e800 	.word	0xfe00e800

08007358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007358:	b590      	push	{r4, r7, lr}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	0008      	movs	r0, r1
 8007362:	0011      	movs	r1, r2
 8007364:	607b      	str	r3, [r7, #4]
 8007366:	240a      	movs	r4, #10
 8007368:	193b      	adds	r3, r7, r4
 800736a:	1c02      	adds	r2, r0, #0
 800736c:	801a      	strh	r2, [r3, #0]
 800736e:	2009      	movs	r0, #9
 8007370:	183b      	adds	r3, r7, r0
 8007372:	1c0a      	adds	r2, r1, #0
 8007374:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	6a3a      	ldr	r2, [r7, #32]
 800737e:	0d51      	lsrs	r1, r2, #21
 8007380:	2280      	movs	r2, #128	; 0x80
 8007382:	00d2      	lsls	r2, r2, #3
 8007384:	400a      	ands	r2, r1
 8007386:	490e      	ldr	r1, [pc, #56]	; (80073c0 <I2C_TransferConfig+0x68>)
 8007388:	430a      	orrs	r2, r1
 800738a:	43d2      	mvns	r2, r2
 800738c:	401a      	ands	r2, r3
 800738e:	0011      	movs	r1, r2
 8007390:	193b      	adds	r3, r7, r4
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	059b      	lsls	r3, r3, #22
 8007396:	0d9a      	lsrs	r2, r3, #22
 8007398:	183b      	adds	r3, r7, r0
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	0418      	lsls	r0, r3, #16
 800739e:	23ff      	movs	r3, #255	; 0xff
 80073a0:	041b      	lsls	r3, r3, #16
 80073a2:	4003      	ands	r3, r0
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	431a      	orrs	r2, r3
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	431a      	orrs	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80073b6:	46c0      	nop			; (mov r8, r8)
 80073b8:	46bd      	mov	sp, r7
 80073ba:	b005      	add	sp, #20
 80073bc:	bd90      	pop	{r4, r7, pc}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	03ff63ff 	.word	0x03ff63ff

080073c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	000a      	movs	r2, r1
 80073ce:	1cbb      	adds	r3, r7, #2
 80073d0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073da:	4b2c      	ldr	r3, [pc, #176]	; (800748c <I2C_Enable_IRQ+0xc8>)
 80073dc:	429a      	cmp	r2, r3
 80073de:	d004      	beq.n	80073ea <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80073e4:	4b2a      	ldr	r3, [pc, #168]	; (8007490 <I2C_Enable_IRQ+0xcc>)
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d121      	bne.n	800742e <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073ea:	1cbb      	adds	r3, r7, #2
 80073ec:	2200      	movs	r2, #0
 80073ee:	5e9b      	ldrsh	r3, [r3, r2]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	da03      	bge.n	80073fc <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	22b8      	movs	r2, #184	; 0xb8
 80073f8:	4313      	orrs	r3, r2
 80073fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80073fc:	1cbb      	adds	r3, r7, #2
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	2b10      	cmp	r3, #16
 8007402:	d103      	bne.n	800740c <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2290      	movs	r2, #144	; 0x90
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800740c:	1cbb      	adds	r3, r7, #2
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	2b20      	cmp	r3, #32
 8007412:	d103      	bne.n	800741c <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2260      	movs	r2, #96	; 0x60
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800741c:	1cbb      	adds	r3, r7, #2
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	2b40      	cmp	r3, #64	; 0x40
 8007422:	d127      	bne.n	8007474 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2240      	movs	r2, #64	; 0x40
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800742c:	e022      	b.n	8007474 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800742e:	1cbb      	adds	r3, r7, #2
 8007430:	2200      	movs	r2, #0
 8007432:	5e9b      	ldrsh	r3, [r3, r2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	da03      	bge.n	8007440 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	22b8      	movs	r2, #184	; 0xb8
 800743c:	4313      	orrs	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007440:	1cbb      	adds	r3, r7, #2
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	2201      	movs	r2, #1
 8007446:	4013      	ands	r3, r2
 8007448:	d003      	beq.n	8007452 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	22f2      	movs	r2, #242	; 0xf2
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007452:	1cbb      	adds	r3, r7, #2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	2202      	movs	r2, #2
 8007458:	4013      	ands	r3, r2
 800745a:	d003      	beq.n	8007464 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	22f4      	movs	r2, #244	; 0xf4
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007464:	1cbb      	adds	r3, r7, #2
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	2b20      	cmp	r3, #32
 800746a:	d103      	bne.n	8007474 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6819      	ldr	r1, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	430a      	orrs	r2, r1
 8007482:	601a      	str	r2, [r3, #0]
}
 8007484:	46c0      	nop			; (mov r8, r8)
 8007486:	46bd      	mov	sp, r7
 8007488:	b004      	add	sp, #16
 800748a:	bd80      	pop	{r7, pc}
 800748c:	080060d1 	.word	0x080060d1
 8007490:	080062e9 	.word	0x080062e9

08007494 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	000a      	movs	r2, r1
 800749e:	1cbb      	adds	r3, r7, #2
 80074a0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80074a6:	1cbb      	adds	r3, r7, #2
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	2201      	movs	r2, #1
 80074ac:	4013      	ands	r3, r2
 80074ae:	d010      	beq.n	80074d2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2242      	movs	r2, #66	; 0x42
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2241      	movs	r2, #65	; 0x41
 80074bc:	5c9b      	ldrb	r3, [r3, r2]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	001a      	movs	r2, r3
 80074c2:	2328      	movs	r3, #40	; 0x28
 80074c4:	4013      	ands	r3, r2
 80074c6:	2b28      	cmp	r3, #40	; 0x28
 80074c8:	d003      	beq.n	80074d2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	22b0      	movs	r2, #176	; 0xb0
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80074d2:	1cbb      	adds	r3, r7, #2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	2202      	movs	r2, #2
 80074d8:	4013      	ands	r3, r2
 80074da:	d010      	beq.n	80074fe <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2244      	movs	r2, #68	; 0x44
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2241      	movs	r2, #65	; 0x41
 80074e8:	5c9b      	ldrb	r3, [r3, r2]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	001a      	movs	r2, r3
 80074ee:	2328      	movs	r3, #40	; 0x28
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b28      	cmp	r3, #40	; 0x28
 80074f4:	d003      	beq.n	80074fe <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	22b0      	movs	r2, #176	; 0xb0
 80074fa:	4313      	orrs	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80074fe:	1cbb      	adds	r3, r7, #2
 8007500:	2200      	movs	r2, #0
 8007502:	5e9b      	ldrsh	r3, [r3, r2]
 8007504:	2b00      	cmp	r3, #0
 8007506:	da03      	bge.n	8007510 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	22b8      	movs	r2, #184	; 0xb8
 800750c:	4313      	orrs	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007510:	1cbb      	adds	r3, r7, #2
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	2b10      	cmp	r3, #16
 8007516:	d103      	bne.n	8007520 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2290      	movs	r2, #144	; 0x90
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007520:	1cbb      	adds	r3, r7, #2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	2b20      	cmp	r3, #32
 8007526:	d103      	bne.n	8007530 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2220      	movs	r2, #32
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007530:	1cbb      	adds	r3, r7, #2
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	d103      	bne.n	8007540 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	; 0x40
 800753c:	4313      	orrs	r3, r2
 800753e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681a      	ldr	r2, [r3, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	43d9      	mvns	r1, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	400a      	ands	r2, r1
 8007550:	601a      	str	r2, [r3, #0]
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b004      	add	sp, #16
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2241      	movs	r2, #65	; 0x41
 800756a:	5c9b      	ldrb	r3, [r3, r2]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b20      	cmp	r3, #32
 8007570:	d138      	bne.n	80075e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2240      	movs	r2, #64	; 0x40
 8007576:	5c9b      	ldrb	r3, [r3, r2]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800757c:	2302      	movs	r3, #2
 800757e:	e032      	b.n	80075e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2240      	movs	r2, #64	; 0x40
 8007584:	2101      	movs	r1, #1
 8007586:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2241      	movs	r2, #65	; 0x41
 800758c:	2124      	movs	r1, #36	; 0x24
 800758e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2101      	movs	r1, #1
 800759c:	438a      	bics	r2, r1
 800759e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4911      	ldr	r1, [pc, #68]	; (80075f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80075ac:	400a      	ands	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2101      	movs	r1, #1
 80075cc:	430a      	orrs	r2, r1
 80075ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2241      	movs	r2, #65	; 0x41
 80075d4:	2120      	movs	r1, #32
 80075d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2240      	movs	r2, #64	; 0x40
 80075dc:	2100      	movs	r1, #0
 80075de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	e000      	b.n	80075e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075e4:	2302      	movs	r3, #2
  }
}
 80075e6:	0018      	movs	r0, r3
 80075e8:	46bd      	mov	sp, r7
 80075ea:	b002      	add	sp, #8
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	ffffefff 	.word	0xffffefff

080075f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2241      	movs	r2, #65	; 0x41
 8007602:	5c9b      	ldrb	r3, [r3, r2]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b20      	cmp	r3, #32
 8007608:	d139      	bne.n	800767e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2240      	movs	r2, #64	; 0x40
 800760e:	5c9b      	ldrb	r3, [r3, r2]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007614:	2302      	movs	r3, #2
 8007616:	e033      	b.n	8007680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2240      	movs	r2, #64	; 0x40
 800761c:	2101      	movs	r1, #1
 800761e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2241      	movs	r2, #65	; 0x41
 8007624:	2124      	movs	r1, #36	; 0x24
 8007626:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2101      	movs	r1, #1
 8007634:	438a      	bics	r2, r1
 8007636:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a11      	ldr	r2, [pc, #68]	; (8007688 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007644:	4013      	ands	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2101      	movs	r1, #1
 8007666:	430a      	orrs	r2, r1
 8007668:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2241      	movs	r2, #65	; 0x41
 800766e:	2120      	movs	r1, #32
 8007670:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2240      	movs	r2, #64	; 0x40
 8007676:	2100      	movs	r1, #0
 8007678:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e000      	b.n	8007680 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800767e:	2302      	movs	r3, #2
  }
}
 8007680:	0018      	movs	r0, r3
 8007682:	46bd      	mov	sp, r7
 8007684:	b004      	add	sp, #16
 8007686:	bd80      	pop	{r7, pc}
 8007688:	fffff0ff 	.word	0xfffff0ff

0800768c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007694:	4b19      	ldr	r3, [pc, #100]	; (80076fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a19      	ldr	r2, [pc, #100]	; (8007700 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800769a:	4013      	ands	r3, r2
 800769c:	0019      	movs	r1, r3
 800769e:	4b17      	ldr	r3, [pc, #92]	; (80076fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	2380      	movs	r3, #128	; 0x80
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d11f      	bne.n	80076f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80076b0:	4b14      	ldr	r3, [pc, #80]	; (8007704 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	0013      	movs	r3, r2
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	189b      	adds	r3, r3, r2
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	4912      	ldr	r1, [pc, #72]	; (8007708 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80076be:	0018      	movs	r0, r3
 80076c0:	f7f8 fd38 	bl	8000134 <__udivsi3>
 80076c4:	0003      	movs	r3, r0
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076ca:	e008      	b.n	80076de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	e001      	b.n	80076de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e009      	b.n	80076f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80076de:	4b07      	ldr	r3, [pc, #28]	; (80076fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80076e0:	695a      	ldr	r2, [r3, #20]
 80076e2:	2380      	movs	r3, #128	; 0x80
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	401a      	ands	r2, r3
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d0ed      	beq.n	80076cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	0018      	movs	r0, r3
 80076f4:	46bd      	mov	sp, r7
 80076f6:	b004      	add	sp, #16
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	46c0      	nop			; (mov r8, r8)
 80076fc:	40007000 	.word	0x40007000
 8007700:	fffff9ff 	.word	0xfffff9ff
 8007704:	20000000 	.word	0x20000000
 8007708:	000f4240 	.word	0x000f4240

0800770c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b088      	sub	sp, #32
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d101      	bne.n	800771e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e2f9      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2201      	movs	r2, #1
 8007724:	4013      	ands	r3, r2
 8007726:	d100      	bne.n	800772a <HAL_RCC_OscConfig+0x1e>
 8007728:	e07c      	b.n	8007824 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800772a:	4bc3      	ldr	r3, [pc, #780]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	2238      	movs	r2, #56	; 0x38
 8007730:	4013      	ands	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007734:	4bc0      	ldr	r3, [pc, #768]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2203      	movs	r2, #3
 800773a:	4013      	ands	r3, r2
 800773c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	2b10      	cmp	r3, #16
 8007742:	d102      	bne.n	800774a <HAL_RCC_OscConfig+0x3e>
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b03      	cmp	r3, #3
 8007748:	d002      	beq.n	8007750 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b08      	cmp	r3, #8
 800774e:	d10b      	bne.n	8007768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007750:	4bb9      	ldr	r3, [pc, #740]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2380      	movs	r3, #128	; 0x80
 8007756:	029b      	lsls	r3, r3, #10
 8007758:	4013      	ands	r3, r2
 800775a:	d062      	beq.n	8007822 <HAL_RCC_OscConfig+0x116>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d15e      	bne.n	8007822 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e2d4      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	2380      	movs	r3, #128	; 0x80
 800776e:	025b      	lsls	r3, r3, #9
 8007770:	429a      	cmp	r2, r3
 8007772:	d107      	bne.n	8007784 <HAL_RCC_OscConfig+0x78>
 8007774:	4bb0      	ldr	r3, [pc, #704]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	4baf      	ldr	r3, [pc, #700]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800777a:	2180      	movs	r1, #128	; 0x80
 800777c:	0249      	lsls	r1, r1, #9
 800777e:	430a      	orrs	r2, r1
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e020      	b.n	80077c6 <HAL_RCC_OscConfig+0xba>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	23a0      	movs	r3, #160	; 0xa0
 800778a:	02db      	lsls	r3, r3, #11
 800778c:	429a      	cmp	r2, r3
 800778e:	d10e      	bne.n	80077ae <HAL_RCC_OscConfig+0xa2>
 8007790:	4ba9      	ldr	r3, [pc, #676]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	4ba8      	ldr	r3, [pc, #672]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007796:	2180      	movs	r1, #128	; 0x80
 8007798:	02c9      	lsls	r1, r1, #11
 800779a:	430a      	orrs	r2, r1
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	4ba6      	ldr	r3, [pc, #664]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	4ba5      	ldr	r3, [pc, #660]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80077a4:	2180      	movs	r1, #128	; 0x80
 80077a6:	0249      	lsls	r1, r1, #9
 80077a8:	430a      	orrs	r2, r1
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e00b      	b.n	80077c6 <HAL_RCC_OscConfig+0xba>
 80077ae:	4ba2      	ldr	r3, [pc, #648]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	4ba1      	ldr	r3, [pc, #644]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80077b4:	49a1      	ldr	r1, [pc, #644]	; (8007a3c <HAL_RCC_OscConfig+0x330>)
 80077b6:	400a      	ands	r2, r1
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	4b9f      	ldr	r3, [pc, #636]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b9e      	ldr	r3, [pc, #632]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80077c0:	499f      	ldr	r1, [pc, #636]	; (8007a40 <HAL_RCC_OscConfig+0x334>)
 80077c2:	400a      	ands	r2, r1
 80077c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d014      	beq.n	80077f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ce:	f7fc f891 	bl	80038f4 <HAL_GetTick>
 80077d2:	0003      	movs	r3, r0
 80077d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077d8:	f7fc f88c 	bl	80038f4 <HAL_GetTick>
 80077dc:	0002      	movs	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b64      	cmp	r3, #100	; 0x64
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e293      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ea:	4b93      	ldr	r3, [pc, #588]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	029b      	lsls	r3, r3, #10
 80077f2:	4013      	ands	r3, r2
 80077f4:	d0f0      	beq.n	80077d8 <HAL_RCC_OscConfig+0xcc>
 80077f6:	e015      	b.n	8007824 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f8:	f7fc f87c 	bl	80038f4 <HAL_GetTick>
 80077fc:	0003      	movs	r3, r0
 80077fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007800:	e008      	b.n	8007814 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007802:	f7fc f877 	bl	80038f4 <HAL_GetTick>
 8007806:	0002      	movs	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b64      	cmp	r3, #100	; 0x64
 800780e:	d901      	bls.n	8007814 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e27e      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007814:	4b88      	ldr	r3, [pc, #544]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	2380      	movs	r3, #128	; 0x80
 800781a:	029b      	lsls	r3, r3, #10
 800781c:	4013      	ands	r3, r2
 800781e:	d1f0      	bne.n	8007802 <HAL_RCC_OscConfig+0xf6>
 8007820:	e000      	b.n	8007824 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007822:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2202      	movs	r2, #2
 800782a:	4013      	ands	r3, r2
 800782c:	d100      	bne.n	8007830 <HAL_RCC_OscConfig+0x124>
 800782e:	e099      	b.n	8007964 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007830:	4b81      	ldr	r3, [pc, #516]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2238      	movs	r2, #56	; 0x38
 8007836:	4013      	ands	r3, r2
 8007838:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800783a:	4b7f      	ldr	r3, [pc, #508]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	2203      	movs	r2, #3
 8007840:	4013      	ands	r3, r2
 8007842:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	2b10      	cmp	r3, #16
 8007848:	d102      	bne.n	8007850 <HAL_RCC_OscConfig+0x144>
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d002      	beq.n	8007856 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d135      	bne.n	80078c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007856:	4b78      	ldr	r3, [pc, #480]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	2380      	movs	r3, #128	; 0x80
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	4013      	ands	r3, r2
 8007860:	d005      	beq.n	800786e <HAL_RCC_OscConfig+0x162>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e251      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800786e:	4b72      	ldr	r3, [pc, #456]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	4a74      	ldr	r2, [pc, #464]	; (8007a44 <HAL_RCC_OscConfig+0x338>)
 8007874:	4013      	ands	r3, r2
 8007876:	0019      	movs	r1, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	021a      	lsls	r2, r3, #8
 800787e:	4b6e      	ldr	r3, [pc, #440]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007880:	430a      	orrs	r2, r1
 8007882:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d112      	bne.n	80078b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800788a:	4b6b      	ldr	r3, [pc, #428]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a6e      	ldr	r2, [pc, #440]	; (8007a48 <HAL_RCC_OscConfig+0x33c>)
 8007890:	4013      	ands	r3, r2
 8007892:	0019      	movs	r1, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	4b67      	ldr	r3, [pc, #412]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800789a:	430a      	orrs	r2, r1
 800789c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800789e:	4b66      	ldr	r3, [pc, #408]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	0adb      	lsrs	r3, r3, #11
 80078a4:	2207      	movs	r2, #7
 80078a6:	4013      	ands	r3, r2
 80078a8:	4a68      	ldr	r2, [pc, #416]	; (8007a4c <HAL_RCC_OscConfig+0x340>)
 80078aa:	40da      	lsrs	r2, r3
 80078ac:	4b68      	ldr	r3, [pc, #416]	; (8007a50 <HAL_RCC_OscConfig+0x344>)
 80078ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80078b0:	4b68      	ldr	r3, [pc, #416]	; (8007a54 <HAL_RCC_OscConfig+0x348>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	0018      	movs	r0, r3
 80078b6:	f7fb ffc1 	bl	800383c <HAL_InitTick>
 80078ba:	1e03      	subs	r3, r0, #0
 80078bc:	d051      	beq.n	8007962 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e227      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d030      	beq.n	800792c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80078ca:	4b5b      	ldr	r3, [pc, #364]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a5e      	ldr	r2, [pc, #376]	; (8007a48 <HAL_RCC_OscConfig+0x33c>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	0019      	movs	r1, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691a      	ldr	r2, [r3, #16]
 80078d8:	4b57      	ldr	r3, [pc, #348]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80078da:	430a      	orrs	r2, r1
 80078dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80078de:	4b56      	ldr	r3, [pc, #344]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	4b55      	ldr	r3, [pc, #340]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	0049      	lsls	r1, r1, #1
 80078e8:	430a      	orrs	r2, r1
 80078ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ec:	f7fc f802 	bl	80038f4 <HAL_GetTick>
 80078f0:	0003      	movs	r3, r0
 80078f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078f4:	e008      	b.n	8007908 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078f6:	f7fb fffd 	bl	80038f4 <HAL_GetTick>
 80078fa:	0002      	movs	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	2b02      	cmp	r3, #2
 8007902:	d901      	bls.n	8007908 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e204      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007908:	4b4b      	ldr	r3, [pc, #300]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	2380      	movs	r3, #128	; 0x80
 800790e:	00db      	lsls	r3, r3, #3
 8007910:	4013      	ands	r3, r2
 8007912:	d0f0      	beq.n	80078f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007914:	4b48      	ldr	r3, [pc, #288]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	4a4a      	ldr	r2, [pc, #296]	; (8007a44 <HAL_RCC_OscConfig+0x338>)
 800791a:	4013      	ands	r3, r2
 800791c:	0019      	movs	r1, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	021a      	lsls	r2, r3, #8
 8007924:	4b44      	ldr	r3, [pc, #272]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	e01b      	b.n	8007964 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800792c:	4b42      	ldr	r3, [pc, #264]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	4b41      	ldr	r3, [pc, #260]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007932:	4949      	ldr	r1, [pc, #292]	; (8007a58 <HAL_RCC_OscConfig+0x34c>)
 8007934:	400a      	ands	r2, r1
 8007936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fb ffdc 	bl	80038f4 <HAL_GetTick>
 800793c:	0003      	movs	r3, r0
 800793e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007942:	f7fb ffd7 	bl	80038f4 <HAL_GetTick>
 8007946:	0002      	movs	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e1de      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007954:	4b38      	ldr	r3, [pc, #224]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	2380      	movs	r3, #128	; 0x80
 800795a:	00db      	lsls	r3, r3, #3
 800795c:	4013      	ands	r3, r2
 800795e:	d1f0      	bne.n	8007942 <HAL_RCC_OscConfig+0x236>
 8007960:	e000      	b.n	8007964 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007962:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2208      	movs	r2, #8
 800796a:	4013      	ands	r3, r2
 800796c:	d047      	beq.n	80079fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800796e:	4b32      	ldr	r3, [pc, #200]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2238      	movs	r2, #56	; 0x38
 8007974:	4013      	ands	r3, r2
 8007976:	2b18      	cmp	r3, #24
 8007978:	d10a      	bne.n	8007990 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800797a:	4b2f      	ldr	r3, [pc, #188]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800797c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797e:	2202      	movs	r2, #2
 8007980:	4013      	ands	r3, r2
 8007982:	d03c      	beq.n	80079fe <HAL_RCC_OscConfig+0x2f2>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d138      	bne.n	80079fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e1c0      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d019      	beq.n	80079cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007998:	4b27      	ldr	r3, [pc, #156]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800799a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800799c:	4b26      	ldr	r3, [pc, #152]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 800799e:	2101      	movs	r1, #1
 80079a0:	430a      	orrs	r2, r1
 80079a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7fb ffa6 	bl	80038f4 <HAL_GetTick>
 80079a8:	0003      	movs	r3, r0
 80079aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079ac:	e008      	b.n	80079c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079ae:	f7fb ffa1 	bl	80038f4 <HAL_GetTick>
 80079b2:	0002      	movs	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e1a8      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80079c0:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80079c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c4:	2202      	movs	r2, #2
 80079c6:	4013      	ands	r3, r2
 80079c8:	d0f1      	beq.n	80079ae <HAL_RCC_OscConfig+0x2a2>
 80079ca:	e018      	b.n	80079fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80079cc:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80079ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80079d0:	4b19      	ldr	r3, [pc, #100]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80079d2:	2101      	movs	r1, #1
 80079d4:	438a      	bics	r2, r1
 80079d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fb ff8c 	bl	80038f4 <HAL_GetTick>
 80079dc:	0003      	movs	r3, r0
 80079de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079e0:	e008      	b.n	80079f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079e2:	f7fb ff87 	bl	80038f4 <HAL_GetTick>
 80079e6:	0002      	movs	r2, r0
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d901      	bls.n	80079f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e18e      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80079f4:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 80079f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f8:	2202      	movs	r2, #2
 80079fa:	4013      	ands	r3, r2
 80079fc:	d1f1      	bne.n	80079e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2204      	movs	r2, #4
 8007a04:	4013      	ands	r3, r2
 8007a06:	d100      	bne.n	8007a0a <HAL_RCC_OscConfig+0x2fe>
 8007a08:	e0c6      	b.n	8007b98 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a0a:	231f      	movs	r3, #31
 8007a0c:	18fb      	adds	r3, r7, r3
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007a12:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2238      	movs	r2, #56	; 0x38
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	d11e      	bne.n	8007a5c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007a1e:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <HAL_RCC_OscConfig+0x32c>)
 8007a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a22:	2202      	movs	r2, #2
 8007a24:	4013      	ands	r3, r2
 8007a26:	d100      	bne.n	8007a2a <HAL_RCC_OscConfig+0x31e>
 8007a28:	e0b6      	b.n	8007b98 <HAL_RCC_OscConfig+0x48c>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d000      	beq.n	8007a34 <HAL_RCC_OscConfig+0x328>
 8007a32:	e0b1      	b.n	8007b98 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e16c      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	fffeffff 	.word	0xfffeffff
 8007a40:	fffbffff 	.word	0xfffbffff
 8007a44:	ffff80ff 	.word	0xffff80ff
 8007a48:	ffffc7ff 	.word	0xffffc7ff
 8007a4c:	00f42400 	.word	0x00f42400
 8007a50:	20000000 	.word	0x20000000
 8007a54:	20000004 	.word	0x20000004
 8007a58:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a5c:	4baf      	ldr	r3, [pc, #700]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a60:	2380      	movs	r3, #128	; 0x80
 8007a62:	055b      	lsls	r3, r3, #21
 8007a64:	4013      	ands	r3, r2
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_OscConfig+0x360>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <HAL_RCC_OscConfig+0x362>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d011      	beq.n	8007a96 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007a72:	4baa      	ldr	r3, [pc, #680]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007a74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a76:	4ba9      	ldr	r3, [pc, #676]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007a78:	2180      	movs	r1, #128	; 0x80
 8007a7a:	0549      	lsls	r1, r1, #21
 8007a7c:	430a      	orrs	r2, r1
 8007a7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007a80:	4ba6      	ldr	r3, [pc, #664]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007a82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a84:	2380      	movs	r3, #128	; 0x80
 8007a86:	055b      	lsls	r3, r3, #21
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007a8e:	231f      	movs	r3, #31
 8007a90:	18fb      	adds	r3, r7, r3
 8007a92:	2201      	movs	r2, #1
 8007a94:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a96:	4ba2      	ldr	r3, [pc, #648]	; (8007d20 <HAL_RCC_OscConfig+0x614>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	2380      	movs	r3, #128	; 0x80
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	d11a      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aa2:	4b9f      	ldr	r3, [pc, #636]	; (8007d20 <HAL_RCC_OscConfig+0x614>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b9e      	ldr	r3, [pc, #632]	; (8007d20 <HAL_RCC_OscConfig+0x614>)
 8007aa8:	2180      	movs	r1, #128	; 0x80
 8007aaa:	0049      	lsls	r1, r1, #1
 8007aac:	430a      	orrs	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007ab0:	f7fb ff20 	bl	80038f4 <HAL_GetTick>
 8007ab4:	0003      	movs	r3, r0
 8007ab6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ab8:	e008      	b.n	8007acc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aba:	f7fb ff1b 	bl	80038f4 <HAL_GetTick>
 8007abe:	0002      	movs	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e122      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007acc:	4b94      	ldr	r3, [pc, #592]	; (8007d20 <HAL_RCC_OscConfig+0x614>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	2380      	movs	r3, #128	; 0x80
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	d0f0      	beq.n	8007aba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d106      	bne.n	8007aee <HAL_RCC_OscConfig+0x3e2>
 8007ae0:	4b8e      	ldr	r3, [pc, #568]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007ae2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ae4:	4b8d      	ldr	r3, [pc, #564]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	65da      	str	r2, [r3, #92]	; 0x5c
 8007aec:	e01c      	b.n	8007b28 <HAL_RCC_OscConfig+0x41c>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	2b05      	cmp	r3, #5
 8007af4:	d10c      	bne.n	8007b10 <HAL_RCC_OscConfig+0x404>
 8007af6:	4b89      	ldr	r3, [pc, #548]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007afa:	4b88      	ldr	r3, [pc, #544]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007afc:	2104      	movs	r1, #4
 8007afe:	430a      	orrs	r2, r1
 8007b00:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b02:	4b86      	ldr	r3, [pc, #536]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b06:	4b85      	ldr	r3, [pc, #532]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b08:	2101      	movs	r1, #1
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b0e:	e00b      	b.n	8007b28 <HAL_RCC_OscConfig+0x41c>
 8007b10:	4b82      	ldr	r3, [pc, #520]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b14:	4b81      	ldr	r3, [pc, #516]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b16:	2101      	movs	r1, #1
 8007b18:	438a      	bics	r2, r1
 8007b1a:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b1c:	4b7f      	ldr	r3, [pc, #508]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b20:	4b7e      	ldr	r3, [pc, #504]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b22:	2104      	movs	r1, #4
 8007b24:	438a      	bics	r2, r1
 8007b26:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d014      	beq.n	8007b5a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fb fee0 	bl	80038f4 <HAL_GetTick>
 8007b34:	0003      	movs	r3, r0
 8007b36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b38:	e009      	b.n	8007b4e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b3a:	f7fb fedb 	bl	80038f4 <HAL_GetTick>
 8007b3e:	0002      	movs	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	4a77      	ldr	r2, [pc, #476]	; (8007d24 <HAL_RCC_OscConfig+0x618>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e0e1      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b4e:	4b73      	ldr	r3, [pc, #460]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b52:	2202      	movs	r2, #2
 8007b54:	4013      	ands	r3, r2
 8007b56:	d0f0      	beq.n	8007b3a <HAL_RCC_OscConfig+0x42e>
 8007b58:	e013      	b.n	8007b82 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5a:	f7fb fecb 	bl	80038f4 <HAL_GetTick>
 8007b5e:	0003      	movs	r3, r0
 8007b60:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b62:	e009      	b.n	8007b78 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b64:	f7fb fec6 	bl	80038f4 <HAL_GetTick>
 8007b68:	0002      	movs	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	4a6d      	ldr	r2, [pc, #436]	; (8007d24 <HAL_RCC_OscConfig+0x618>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e0cc      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b78:	4b68      	ldr	r3, [pc, #416]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	4013      	ands	r3, r2
 8007b80:	d1f0      	bne.n	8007b64 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007b82:	231f      	movs	r3, #31
 8007b84:	18fb      	adds	r3, r7, r3
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d105      	bne.n	8007b98 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007b8c:	4b63      	ldr	r3, [pc, #396]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b90:	4b62      	ldr	r3, [pc, #392]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007b92:	4965      	ldr	r1, [pc, #404]	; (8007d28 <HAL_RCC_OscConfig+0x61c>)
 8007b94:	400a      	ands	r2, r1
 8007b96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	69db      	ldr	r3, [r3, #28]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d100      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x496>
 8007ba0:	e0b6      	b.n	8007d10 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ba2:	4b5e      	ldr	r3, [pc, #376]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	2238      	movs	r2, #56	; 0x38
 8007ba8:	4013      	ands	r3, r2
 8007baa:	2b10      	cmp	r3, #16
 8007bac:	d100      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x4a4>
 8007bae:	e07e      	b.n	8007cae <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d153      	bne.n	8007c60 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bb8:	4b58      	ldr	r3, [pc, #352]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	4b57      	ldr	r3, [pc, #348]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007bbe:	495b      	ldr	r1, [pc, #364]	; (8007d2c <HAL_RCC_OscConfig+0x620>)
 8007bc0:	400a      	ands	r2, r1
 8007bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc4:	f7fb fe96 	bl	80038f4 <HAL_GetTick>
 8007bc8:	0003      	movs	r3, r0
 8007bca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bcc:	e008      	b.n	8007be0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bce:	f7fb fe91 	bl	80038f4 <HAL_GetTick>
 8007bd2:	0002      	movs	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d901      	bls.n	8007be0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e098      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007be0:	4b4e      	ldr	r3, [pc, #312]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	2380      	movs	r3, #128	; 0x80
 8007be6:	049b      	lsls	r3, r3, #18
 8007be8:	4013      	ands	r3, r2
 8007bea:	d1f0      	bne.n	8007bce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bec:	4b4b      	ldr	r3, [pc, #300]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	4a4f      	ldr	r2, [pc, #316]	; (8007d30 <HAL_RCC_OscConfig+0x624>)
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	0019      	movs	r1, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1a      	ldr	r2, [r3, #32]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	021b      	lsls	r3, r3, #8
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	431a      	orrs	r2, r3
 8007c14:	4b41      	ldr	r3, [pc, #260]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c16:	430a      	orrs	r2, r1
 8007c18:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c1a:	4b40      	ldr	r3, [pc, #256]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	4b3f      	ldr	r3, [pc, #252]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c20:	2180      	movs	r1, #128	; 0x80
 8007c22:	0449      	lsls	r1, r1, #17
 8007c24:	430a      	orrs	r2, r1
 8007c26:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007c28:	4b3c      	ldr	r3, [pc, #240]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	4b3b      	ldr	r3, [pc, #236]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c2e:	2180      	movs	r1, #128	; 0x80
 8007c30:	0549      	lsls	r1, r1, #21
 8007c32:	430a      	orrs	r2, r1
 8007c34:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c36:	f7fb fe5d 	bl	80038f4 <HAL_GetTick>
 8007c3a:	0003      	movs	r3, r0
 8007c3c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c40:	f7fb fe58 	bl	80038f4 <HAL_GetTick>
 8007c44:	0002      	movs	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e05f      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c52:	4b32      	ldr	r3, [pc, #200]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	2380      	movs	r3, #128	; 0x80
 8007c58:	049b      	lsls	r3, r3, #18
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	d0f0      	beq.n	8007c40 <HAL_RCC_OscConfig+0x534>
 8007c5e:	e057      	b.n	8007d10 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c60:	4b2e      	ldr	r3, [pc, #184]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b2d      	ldr	r3, [pc, #180]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c66:	4931      	ldr	r1, [pc, #196]	; (8007d2c <HAL_RCC_OscConfig+0x620>)
 8007c68:	400a      	ands	r2, r1
 8007c6a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007c6c:	4b2b      	ldr	r3, [pc, #172]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	4b2a      	ldr	r3, [pc, #168]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c72:	2103      	movs	r1, #3
 8007c74:	438a      	bics	r2, r1
 8007c76:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007c78:	4b28      	ldr	r3, [pc, #160]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c7a:	68da      	ldr	r2, [r3, #12]
 8007c7c:	4b27      	ldr	r3, [pc, #156]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007c7e:	492d      	ldr	r1, [pc, #180]	; (8007d34 <HAL_RCC_OscConfig+0x628>)
 8007c80:	400a      	ands	r2, r1
 8007c82:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c84:	f7fb fe36 	bl	80038f4 <HAL_GetTick>
 8007c88:	0003      	movs	r3, r0
 8007c8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c8c:	e008      	b.n	8007ca0 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c8e:	f7fb fe31 	bl	80038f4 <HAL_GetTick>
 8007c92:	0002      	movs	r2, r0
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e038      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ca0:	4b1e      	ldr	r3, [pc, #120]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	2380      	movs	r3, #128	; 0x80
 8007ca6:	049b      	lsls	r3, r3, #18
 8007ca8:	4013      	ands	r3, r2
 8007caa:	d1f0      	bne.n	8007c8e <HAL_RCC_OscConfig+0x582>
 8007cac:	e030      	b.n	8007d10 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d101      	bne.n	8007cba <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e02b      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007cba:	4b18      	ldr	r3, [pc, #96]	; (8007d1c <HAL_RCC_OscConfig+0x610>)
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	401a      	ands	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d11e      	bne.n	8007d0c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	2270      	movs	r2, #112	; 0x70
 8007cd2:	401a      	ands	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d117      	bne.n	8007d0c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	23fe      	movs	r3, #254	; 0xfe
 8007ce0:	01db      	lsls	r3, r3, #7
 8007ce2:	401a      	ands	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d10e      	bne.n	8007d0c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	23f8      	movs	r3, #248	; 0xf8
 8007cf2:	039b      	lsls	r3, r3, #14
 8007cf4:	401a      	ands	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d106      	bne.n	8007d0c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	0f5b      	lsrs	r3, r3, #29
 8007d02:	075a      	lsls	r2, r3, #29
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d001      	beq.n	8007d10 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	0018      	movs	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	b008      	add	sp, #32
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	40021000 	.word	0x40021000
 8007d20:	40007000 	.word	0x40007000
 8007d24:	00001388 	.word	0x00001388
 8007d28:	efffffff 	.word	0xefffffff
 8007d2c:	feffffff 	.word	0xfeffffff
 8007d30:	1fc1808c 	.word	0x1fc1808c
 8007d34:	effeffff 	.word	0xeffeffff

08007d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e0e9      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d4c:	4b76      	ldr	r3, [pc, #472]	; (8007f28 <HAL_RCC_ClockConfig+0x1f0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2207      	movs	r2, #7
 8007d52:	4013      	ands	r3, r2
 8007d54:	683a      	ldr	r2, [r7, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d91e      	bls.n	8007d98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d5a:	4b73      	ldr	r3, [pc, #460]	; (8007f28 <HAL_RCC_ClockConfig+0x1f0>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2207      	movs	r2, #7
 8007d60:	4393      	bics	r3, r2
 8007d62:	0019      	movs	r1, r3
 8007d64:	4b70      	ldr	r3, [pc, #448]	; (8007f28 <HAL_RCC_ClockConfig+0x1f0>)
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007d6c:	f7fb fdc2 	bl	80038f4 <HAL_GetTick>
 8007d70:	0003      	movs	r3, r0
 8007d72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007d74:	e009      	b.n	8007d8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d76:	f7fb fdbd 	bl	80038f4 <HAL_GetTick>
 8007d7a:	0002      	movs	r2, r0
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	4a6a      	ldr	r2, [pc, #424]	; (8007f2c <HAL_RCC_ClockConfig+0x1f4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e0ca      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007d8a:	4b67      	ldr	r3, [pc, #412]	; (8007f28 <HAL_RCC_ClockConfig+0x1f0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2207      	movs	r2, #7
 8007d90:	4013      	ands	r3, r2
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d1ee      	bne.n	8007d76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	4013      	ands	r3, r2
 8007da0:	d015      	beq.n	8007dce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2204      	movs	r2, #4
 8007da8:	4013      	ands	r3, r2
 8007daa:	d006      	beq.n	8007dba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007dac:	4b60      	ldr	r3, [pc, #384]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	4b5f      	ldr	r3, [pc, #380]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007db2:	21e0      	movs	r1, #224	; 0xe0
 8007db4:	01c9      	lsls	r1, r1, #7
 8007db6:	430a      	orrs	r2, r1
 8007db8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dba:	4b5d      	ldr	r3, [pc, #372]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	4a5d      	ldr	r2, [pc, #372]	; (8007f34 <HAL_RCC_ClockConfig+0x1fc>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	0019      	movs	r1, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	4b59      	ldr	r3, [pc, #356]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	d057      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d107      	bne.n	8007df0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007de0:	4b53      	ldr	r3, [pc, #332]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	2380      	movs	r3, #128	; 0x80
 8007de6:	029b      	lsls	r3, r3, #10
 8007de8:	4013      	ands	r3, r2
 8007dea:	d12b      	bne.n	8007e44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e097      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d107      	bne.n	8007e08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007df8:	4b4d      	ldr	r3, [pc, #308]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	2380      	movs	r3, #128	; 0x80
 8007dfe:	049b      	lsls	r3, r3, #18
 8007e00:	4013      	ands	r3, r2
 8007e02:	d11f      	bne.n	8007e44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e08b      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d107      	bne.n	8007e20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e10:	4b47      	ldr	r3, [pc, #284]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	2380      	movs	r3, #128	; 0x80
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	4013      	ands	r3, r2
 8007e1a:	d113      	bne.n	8007e44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e07f      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d106      	bne.n	8007e36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e28:	4b41      	ldr	r3, [pc, #260]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	4013      	ands	r3, r2
 8007e30:	d108      	bne.n	8007e44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e074      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e36:	4b3e      	ldr	r3, [pc, #248]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	d101      	bne.n	8007e44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e06d      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007e44:	4b3a      	ldr	r3, [pc, #232]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2207      	movs	r2, #7
 8007e4a:	4393      	bics	r3, r2
 8007e4c:	0019      	movs	r1, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	4b37      	ldr	r3, [pc, #220]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007e54:	430a      	orrs	r2, r1
 8007e56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e58:	f7fb fd4c 	bl	80038f4 <HAL_GetTick>
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e60:	e009      	b.n	8007e76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e62:	f7fb fd47 	bl	80038f4 <HAL_GetTick>
 8007e66:	0002      	movs	r2, r0
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	4a2f      	ldr	r2, [pc, #188]	; (8007f2c <HAL_RCC_ClockConfig+0x1f4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e054      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e76:	4b2e      	ldr	r3, [pc, #184]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	2238      	movs	r2, #56	; 0x38
 8007e7c:	401a      	ands	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d1ec      	bne.n	8007e62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e88:	4b27      	ldr	r3, [pc, #156]	; (8007f28 <HAL_RCC_ClockConfig+0x1f0>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2207      	movs	r2, #7
 8007e8e:	4013      	ands	r3, r2
 8007e90:	683a      	ldr	r2, [r7, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d21e      	bcs.n	8007ed4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e96:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <HAL_RCC_ClockConfig+0x1f0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2207      	movs	r2, #7
 8007e9c:	4393      	bics	r3, r2
 8007e9e:	0019      	movs	r1, r3
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <HAL_RCC_ClockConfig+0x1f0>)
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007ea8:	f7fb fd24 	bl	80038f4 <HAL_GetTick>
 8007eac:	0003      	movs	r3, r0
 8007eae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007eb0:	e009      	b.n	8007ec6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eb2:	f7fb fd1f 	bl	80038f4 <HAL_GetTick>
 8007eb6:	0002      	movs	r2, r0
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	4a1b      	ldr	r2, [pc, #108]	; (8007f2c <HAL_RCC_ClockConfig+0x1f4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e02c      	b.n	8007f20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007ec6:	4b18      	ldr	r3, [pc, #96]	; (8007f28 <HAL_RCC_ClockConfig+0x1f0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2207      	movs	r2, #7
 8007ecc:	4013      	ands	r3, r2
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d1ee      	bne.n	8007eb2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2204      	movs	r2, #4
 8007eda:	4013      	ands	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007ede:	4b14      	ldr	r3, [pc, #80]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <HAL_RCC_ClockConfig+0x200>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	0019      	movs	r1, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	4b10      	ldr	r3, [pc, #64]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007ef2:	f000 f829 	bl	8007f48 <HAL_RCC_GetSysClockFreq>
 8007ef6:	0001      	movs	r1, r0
 8007ef8:	4b0d      	ldr	r3, [pc, #52]	; (8007f30 <HAL_RCC_ClockConfig+0x1f8>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	0a1b      	lsrs	r3, r3, #8
 8007efe:	220f      	movs	r2, #15
 8007f00:	401a      	ands	r2, r3
 8007f02:	4b0e      	ldr	r3, [pc, #56]	; (8007f3c <HAL_RCC_ClockConfig+0x204>)
 8007f04:	0092      	lsls	r2, r2, #2
 8007f06:	58d3      	ldr	r3, [r2, r3]
 8007f08:	221f      	movs	r2, #31
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	000a      	movs	r2, r1
 8007f0e:	40da      	lsrs	r2, r3
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <HAL_RCC_ClockConfig+0x208>)
 8007f12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007f14:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <HAL_RCC_ClockConfig+0x20c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f7fb fc8f 	bl	800383c <HAL_InitTick>
 8007f1e:	0003      	movs	r3, r0
}
 8007f20:	0018      	movs	r0, r3
 8007f22:	46bd      	mov	sp, r7
 8007f24:	b004      	add	sp, #16
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	40022000 	.word	0x40022000
 8007f2c:	00001388 	.word	0x00001388
 8007f30:	40021000 	.word	0x40021000
 8007f34:	fffff0ff 	.word	0xfffff0ff
 8007f38:	ffff8fff 	.word	0xffff8fff
 8007f3c:	0800b338 	.word	0x0800b338
 8007f40:	20000000 	.word	0x20000000
 8007f44:	20000004 	.word	0x20000004

08007f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007f4e:	4b3c      	ldr	r3, [pc, #240]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	2238      	movs	r2, #56	; 0x38
 8007f54:	4013      	ands	r3, r2
 8007f56:	d10f      	bne.n	8007f78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007f58:	4b39      	ldr	r3, [pc, #228]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	0adb      	lsrs	r3, r3, #11
 8007f5e:	2207      	movs	r2, #7
 8007f60:	4013      	ands	r3, r2
 8007f62:	2201      	movs	r2, #1
 8007f64:	409a      	lsls	r2, r3
 8007f66:	0013      	movs	r3, r2
 8007f68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	4835      	ldr	r0, [pc, #212]	; (8008044 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007f6e:	f7f8 f8e1 	bl	8000134 <__udivsi3>
 8007f72:	0003      	movs	r3, r0
 8007f74:	613b      	str	r3, [r7, #16]
 8007f76:	e05d      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f78:	4b31      	ldr	r3, [pc, #196]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	2238      	movs	r2, #56	; 0x38
 8007f7e:	4013      	ands	r3, r2
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d102      	bne.n	8007f8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f84:	4b30      	ldr	r3, [pc, #192]	; (8008048 <HAL_RCC_GetSysClockFreq+0x100>)
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	e054      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f8a:	4b2d      	ldr	r3, [pc, #180]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	2238      	movs	r2, #56	; 0x38
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b10      	cmp	r3, #16
 8007f94:	d138      	bne.n	8008008 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007f96:	4b2a      	ldr	r3, [pc, #168]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007fa0:	4b27      	ldr	r3, [pc, #156]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	091b      	lsrs	r3, r3, #4
 8007fa6:	2207      	movs	r2, #7
 8007fa8:	4013      	ands	r3, r2
 8007faa:	3301      	adds	r3, #1
 8007fac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d10d      	bne.n	8007fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	4824      	ldr	r0, [pc, #144]	; (8008048 <HAL_RCC_GetSysClockFreq+0x100>)
 8007fb8:	f7f8 f8bc 	bl	8000134 <__udivsi3>
 8007fbc:	0003      	movs	r3, r0
 8007fbe:	0019      	movs	r1, r3
 8007fc0:	4b1f      	ldr	r3, [pc, #124]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	0a1b      	lsrs	r3, r3, #8
 8007fc6:	227f      	movs	r2, #127	; 0x7f
 8007fc8:	4013      	ands	r3, r2
 8007fca:	434b      	muls	r3, r1
 8007fcc:	617b      	str	r3, [r7, #20]
        break;
 8007fce:	e00d      	b.n	8007fec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	481c      	ldr	r0, [pc, #112]	; (8008044 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007fd4:	f7f8 f8ae 	bl	8000134 <__udivsi3>
 8007fd8:	0003      	movs	r3, r0
 8007fda:	0019      	movs	r1, r3
 8007fdc:	4b18      	ldr	r3, [pc, #96]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	0a1b      	lsrs	r3, r3, #8
 8007fe2:	227f      	movs	r2, #127	; 0x7f
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	434b      	muls	r3, r1
 8007fe8:	617b      	str	r3, [r7, #20]
        break;
 8007fea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007fec:	4b14      	ldr	r3, [pc, #80]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	0f5b      	lsrs	r3, r3, #29
 8007ff2:	2207      	movs	r2, #7
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	6978      	ldr	r0, [r7, #20]
 8007ffe:	f7f8 f899 	bl	8000134 <__udivsi3>
 8008002:	0003      	movs	r3, r0
 8008004:	613b      	str	r3, [r7, #16]
 8008006:	e015      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008008:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	2238      	movs	r2, #56	; 0x38
 800800e:	4013      	ands	r3, r2
 8008010:	2b20      	cmp	r3, #32
 8008012:	d103      	bne.n	800801c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	021b      	lsls	r3, r3, #8
 8008018:	613b      	str	r3, [r7, #16]
 800801a:	e00b      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800801c:	4b08      	ldr	r3, [pc, #32]	; (8008040 <HAL_RCC_GetSysClockFreq+0xf8>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	2238      	movs	r2, #56	; 0x38
 8008022:	4013      	ands	r3, r2
 8008024:	2b18      	cmp	r3, #24
 8008026:	d103      	bne.n	8008030 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008028:	23fa      	movs	r3, #250	; 0xfa
 800802a:	01db      	lsls	r3, r3, #7
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	e001      	b.n	8008034 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008034:	693b      	ldr	r3, [r7, #16]
}
 8008036:	0018      	movs	r0, r3
 8008038:	46bd      	mov	sp, r7
 800803a:	b006      	add	sp, #24
 800803c:	bd80      	pop	{r7, pc}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	40021000 	.word	0x40021000
 8008044:	00f42400 	.word	0x00f42400
 8008048:	007a1200 	.word	0x007a1200

0800804c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008054:	2313      	movs	r3, #19
 8008056:	18fb      	adds	r3, r7, r3
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800805c:	2312      	movs	r3, #18
 800805e:	18fb      	adds	r3, r7, r3
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	029b      	lsls	r3, r3, #10
 800806c:	4013      	ands	r3, r2
 800806e:	d100      	bne.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008070:	e0a3      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008072:	2011      	movs	r0, #17
 8008074:	183b      	adds	r3, r7, r0
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800807a:	4b7f      	ldr	r3, [pc, #508]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800807c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800807e:	2380      	movs	r3, #128	; 0x80
 8008080:	055b      	lsls	r3, r3, #21
 8008082:	4013      	ands	r3, r2
 8008084:	d110      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008086:	4b7c      	ldr	r3, [pc, #496]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800808a:	4b7b      	ldr	r3, [pc, #492]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800808c:	2180      	movs	r1, #128	; 0x80
 800808e:	0549      	lsls	r1, r1, #21
 8008090:	430a      	orrs	r2, r1
 8008092:	63da      	str	r2, [r3, #60]	; 0x3c
 8008094:	4b78      	ldr	r3, [pc, #480]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008098:	2380      	movs	r3, #128	; 0x80
 800809a:	055b      	lsls	r3, r3, #21
 800809c:	4013      	ands	r3, r2
 800809e:	60bb      	str	r3, [r7, #8]
 80080a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080a2:	183b      	adds	r3, r7, r0
 80080a4:	2201      	movs	r2, #1
 80080a6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080a8:	4b74      	ldr	r3, [pc, #464]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	4b73      	ldr	r3, [pc, #460]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	0049      	lsls	r1, r1, #1
 80080b2:	430a      	orrs	r2, r1
 80080b4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080b6:	f7fb fc1d 	bl	80038f4 <HAL_GetTick>
 80080ba:	0003      	movs	r3, r0
 80080bc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080be:	e00b      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080c0:	f7fb fc18 	bl	80038f4 <HAL_GetTick>
 80080c4:	0002      	movs	r2, r0
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d904      	bls.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80080ce:	2313      	movs	r3, #19
 80080d0:	18fb      	adds	r3, r7, r3
 80080d2:	2203      	movs	r2, #3
 80080d4:	701a      	strb	r2, [r3, #0]
        break;
 80080d6:	e005      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080d8:	4b68      	ldr	r3, [pc, #416]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	4013      	ands	r3, r2
 80080e2:	d0ed      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80080e4:	2313      	movs	r3, #19
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d154      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80080ee:	4b62      	ldr	r3, [pc, #392]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80080f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080f2:	23c0      	movs	r3, #192	; 0xc0
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4013      	ands	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d019      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	429a      	cmp	r2, r3
 8008108:	d014      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800810a:	4b5b      	ldr	r3, [pc, #364]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800810c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810e:	4a5c      	ldr	r2, [pc, #368]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8008110:	4013      	ands	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008114:	4b58      	ldr	r3, [pc, #352]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008118:	4b57      	ldr	r3, [pc, #348]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800811a:	2180      	movs	r1, #128	; 0x80
 800811c:	0249      	lsls	r1, r1, #9
 800811e:	430a      	orrs	r2, r1
 8008120:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008122:	4b55      	ldr	r3, [pc, #340]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008124:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008126:	4b54      	ldr	r3, [pc, #336]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008128:	4956      	ldr	r1, [pc, #344]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800812a:	400a      	ands	r2, r1
 800812c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800812e:	4b52      	ldr	r3, [pc, #328]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2201      	movs	r2, #1
 8008138:	4013      	ands	r3, r2
 800813a:	d016      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800813c:	f7fb fbda 	bl	80038f4 <HAL_GetTick>
 8008140:	0003      	movs	r3, r0
 8008142:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008144:	e00c      	b.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008146:	f7fb fbd5 	bl	80038f4 <HAL_GetTick>
 800814a:	0002      	movs	r2, r0
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	4a4d      	ldr	r2, [pc, #308]	; (8008288 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d904      	bls.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008156:	2313      	movs	r3, #19
 8008158:	18fb      	adds	r3, r7, r3
 800815a:	2203      	movs	r2, #3
 800815c:	701a      	strb	r2, [r3, #0]
            break;
 800815e:	e004      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008160:	4b45      	ldr	r3, [pc, #276]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	2202      	movs	r2, #2
 8008166:	4013      	ands	r3, r2
 8008168:	d0ed      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800816a:	2313      	movs	r3, #19
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10a      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008174:	4b40      	ldr	r3, [pc, #256]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008178:	4a41      	ldr	r2, [pc, #260]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800817a:	4013      	ands	r3, r2
 800817c:	0019      	movs	r1, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	4b3d      	ldr	r3, [pc, #244]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008184:	430a      	orrs	r2, r1
 8008186:	65da      	str	r2, [r3, #92]	; 0x5c
 8008188:	e00c      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800818a:	2312      	movs	r3, #18
 800818c:	18fb      	adds	r3, r7, r3
 800818e:	2213      	movs	r2, #19
 8008190:	18ba      	adds	r2, r7, r2
 8008192:	7812      	ldrb	r2, [r2, #0]
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e005      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008198:	2312      	movs	r3, #18
 800819a:	18fb      	adds	r3, r7, r3
 800819c:	2213      	movs	r2, #19
 800819e:	18ba      	adds	r2, r7, r2
 80081a0:	7812      	ldrb	r2, [r2, #0]
 80081a2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081a4:	2311      	movs	r3, #17
 80081a6:	18fb      	adds	r3, r7, r3
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d105      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081ae:	4b32      	ldr	r3, [pc, #200]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80081b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081b2:	4b31      	ldr	r3, [pc, #196]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80081b4:	4935      	ldr	r1, [pc, #212]	; (800828c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80081b6:	400a      	ands	r2, r1
 80081b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2201      	movs	r2, #1
 80081c0:	4013      	ands	r3, r2
 80081c2:	d009      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081c4:	4b2c      	ldr	r3, [pc, #176]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80081c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c8:	2203      	movs	r2, #3
 80081ca:	4393      	bics	r3, r2
 80081cc:	0019      	movs	r1, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	4b29      	ldr	r3, [pc, #164]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80081d4:	430a      	orrs	r2, r1
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2220      	movs	r2, #32
 80081de:	4013      	ands	r3, r2
 80081e0:	d009      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081e2:	4b25      	ldr	r3, [pc, #148]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80081e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e6:	4a2a      	ldr	r2, [pc, #168]	; (8008290 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	0019      	movs	r1, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	4b21      	ldr	r3, [pc, #132]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80081f2:	430a      	orrs	r2, r1
 80081f4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	2380      	movs	r3, #128	; 0x80
 80081fc:	01db      	lsls	r3, r3, #7
 80081fe:	4013      	ands	r3, r2
 8008200:	d015      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008202:	4b1d      	ldr	r3, [pc, #116]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	0899      	lsrs	r1, r3, #2
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691a      	ldr	r2, [r3, #16]
 800820e:	4b1a      	ldr	r3, [pc, #104]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008210:	430a      	orrs	r2, r1
 8008212:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691a      	ldr	r2, [r3, #16]
 8008218:	2380      	movs	r3, #128	; 0x80
 800821a:	05db      	lsls	r3, r3, #23
 800821c:	429a      	cmp	r2, r3
 800821e:	d106      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008220:	4b15      	ldr	r3, [pc, #84]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	4b14      	ldr	r3, [pc, #80]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008226:	2180      	movs	r1, #128	; 0x80
 8008228:	0249      	lsls	r1, r1, #9
 800822a:	430a      	orrs	r2, r1
 800822c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	2380      	movs	r3, #128	; 0x80
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	4013      	ands	r3, r2
 8008238:	d016      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800823a:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800823c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800823e:	4a15      	ldr	r2, [pc, #84]	; (8008294 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008240:	4013      	ands	r3, r2
 8008242:	0019      	movs	r1, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	4b0b      	ldr	r3, [pc, #44]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800824a:	430a      	orrs	r2, r1
 800824c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	2380      	movs	r3, #128	; 0x80
 8008254:	01db      	lsls	r3, r3, #7
 8008256:	429a      	cmp	r2, r3
 8008258:	d106      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800825a:	4b07      	ldr	r3, [pc, #28]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	4b06      	ldr	r3, [pc, #24]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008260:	2180      	movs	r1, #128	; 0x80
 8008262:	0249      	lsls	r1, r1, #9
 8008264:	430a      	orrs	r2, r1
 8008266:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008268:	2312      	movs	r3, #18
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	781b      	ldrb	r3, [r3, #0]
}
 800826e:	0018      	movs	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	b006      	add	sp, #24
 8008274:	bd80      	pop	{r7, pc}
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	40021000 	.word	0x40021000
 800827c:	40007000 	.word	0x40007000
 8008280:	fffffcff 	.word	0xfffffcff
 8008284:	fffeffff 	.word	0xfffeffff
 8008288:	00001388 	.word	0x00001388
 800828c:	efffffff 	.word	0xefffffff
 8008290:	ffffcfff 	.word	0xffffcfff
 8008294:	ffff3fff 	.word	0xffff3fff

08008298 <__errno>:
 8008298:	4b01      	ldr	r3, [pc, #4]	; (80082a0 <__errno+0x8>)
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	4770      	bx	lr
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	2000000c 	.word	0x2000000c

080082a4 <__libc_init_array>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	2600      	movs	r6, #0
 80082a8:	4d0c      	ldr	r5, [pc, #48]	; (80082dc <__libc_init_array+0x38>)
 80082aa:	4c0d      	ldr	r4, [pc, #52]	; (80082e0 <__libc_init_array+0x3c>)
 80082ac:	1b64      	subs	r4, r4, r5
 80082ae:	10a4      	asrs	r4, r4, #2
 80082b0:	42a6      	cmp	r6, r4
 80082b2:	d109      	bne.n	80082c8 <__libc_init_array+0x24>
 80082b4:	2600      	movs	r6, #0
 80082b6:	f002 ff6d 	bl	800b194 <_init>
 80082ba:	4d0a      	ldr	r5, [pc, #40]	; (80082e4 <__libc_init_array+0x40>)
 80082bc:	4c0a      	ldr	r4, [pc, #40]	; (80082e8 <__libc_init_array+0x44>)
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	10a4      	asrs	r4, r4, #2
 80082c2:	42a6      	cmp	r6, r4
 80082c4:	d105      	bne.n	80082d2 <__libc_init_array+0x2e>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	00b3      	lsls	r3, r6, #2
 80082ca:	58eb      	ldr	r3, [r5, r3]
 80082cc:	4798      	blx	r3
 80082ce:	3601      	adds	r6, #1
 80082d0:	e7ee      	b.n	80082b0 <__libc_init_array+0xc>
 80082d2:	00b3      	lsls	r3, r6, #2
 80082d4:	58eb      	ldr	r3, [r5, r3]
 80082d6:	4798      	blx	r3
 80082d8:	3601      	adds	r6, #1
 80082da:	e7f2      	b.n	80082c2 <__libc_init_array+0x1e>
 80082dc:	0800b75c 	.word	0x0800b75c
 80082e0:	0800b75c 	.word	0x0800b75c
 80082e4:	0800b75c 	.word	0x0800b75c
 80082e8:	0800b760 	.word	0x0800b760

080082ec <malloc>:
 80082ec:	b510      	push	{r4, lr}
 80082ee:	4b03      	ldr	r3, [pc, #12]	; (80082fc <malloc+0x10>)
 80082f0:	0001      	movs	r1, r0
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	f000 f860 	bl	80083b8 <_malloc_r>
 80082f8:	bd10      	pop	{r4, pc}
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	2000000c 	.word	0x2000000c

08008300 <memcpy>:
 8008300:	2300      	movs	r3, #0
 8008302:	b510      	push	{r4, lr}
 8008304:	429a      	cmp	r2, r3
 8008306:	d100      	bne.n	800830a <memcpy+0xa>
 8008308:	bd10      	pop	{r4, pc}
 800830a:	5ccc      	ldrb	r4, [r1, r3]
 800830c:	54c4      	strb	r4, [r0, r3]
 800830e:	3301      	adds	r3, #1
 8008310:	e7f8      	b.n	8008304 <memcpy+0x4>

08008312 <memset>:
 8008312:	0003      	movs	r3, r0
 8008314:	1882      	adds	r2, r0, r2
 8008316:	4293      	cmp	r3, r2
 8008318:	d100      	bne.n	800831c <memset+0xa>
 800831a:	4770      	bx	lr
 800831c:	7019      	strb	r1, [r3, #0]
 800831e:	3301      	adds	r3, #1
 8008320:	e7f9      	b.n	8008316 <memset+0x4>
	...

08008324 <_free_r>:
 8008324:	b570      	push	{r4, r5, r6, lr}
 8008326:	0005      	movs	r5, r0
 8008328:	2900      	cmp	r1, #0
 800832a:	d010      	beq.n	800834e <_free_r+0x2a>
 800832c:	1f0c      	subs	r4, r1, #4
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	da00      	bge.n	8008336 <_free_r+0x12>
 8008334:	18e4      	adds	r4, r4, r3
 8008336:	0028      	movs	r0, r5
 8008338:	f001 fc02 	bl	8009b40 <__malloc_lock>
 800833c:	4a1d      	ldr	r2, [pc, #116]	; (80083b4 <_free_r+0x90>)
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d105      	bne.n	8008350 <_free_r+0x2c>
 8008344:	6063      	str	r3, [r4, #4]
 8008346:	6014      	str	r4, [r2, #0]
 8008348:	0028      	movs	r0, r5
 800834a:	f001 fc01 	bl	8009b50 <__malloc_unlock>
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	42a3      	cmp	r3, r4
 8008352:	d908      	bls.n	8008366 <_free_r+0x42>
 8008354:	6821      	ldr	r1, [r4, #0]
 8008356:	1860      	adds	r0, r4, r1
 8008358:	4283      	cmp	r3, r0
 800835a:	d1f3      	bne.n	8008344 <_free_r+0x20>
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	1841      	adds	r1, r0, r1
 8008362:	6021      	str	r1, [r4, #0]
 8008364:	e7ee      	b.n	8008344 <_free_r+0x20>
 8008366:	001a      	movs	r2, r3
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <_free_r+0x4e>
 800836e:	42a3      	cmp	r3, r4
 8008370:	d9f9      	bls.n	8008366 <_free_r+0x42>
 8008372:	6811      	ldr	r1, [r2, #0]
 8008374:	1850      	adds	r0, r2, r1
 8008376:	42a0      	cmp	r0, r4
 8008378:	d10b      	bne.n	8008392 <_free_r+0x6e>
 800837a:	6820      	ldr	r0, [r4, #0]
 800837c:	1809      	adds	r1, r1, r0
 800837e:	1850      	adds	r0, r2, r1
 8008380:	6011      	str	r1, [r2, #0]
 8008382:	4283      	cmp	r3, r0
 8008384:	d1e0      	bne.n	8008348 <_free_r+0x24>
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	1841      	adds	r1, r0, r1
 800838c:	6011      	str	r1, [r2, #0]
 800838e:	6053      	str	r3, [r2, #4]
 8008390:	e7da      	b.n	8008348 <_free_r+0x24>
 8008392:	42a0      	cmp	r0, r4
 8008394:	d902      	bls.n	800839c <_free_r+0x78>
 8008396:	230c      	movs	r3, #12
 8008398:	602b      	str	r3, [r5, #0]
 800839a:	e7d5      	b.n	8008348 <_free_r+0x24>
 800839c:	6821      	ldr	r1, [r4, #0]
 800839e:	1860      	adds	r0, r4, r1
 80083a0:	4283      	cmp	r3, r0
 80083a2:	d103      	bne.n	80083ac <_free_r+0x88>
 80083a4:	6818      	ldr	r0, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	1841      	adds	r1, r0, r1
 80083aa:	6021      	str	r1, [r4, #0]
 80083ac:	6063      	str	r3, [r4, #4]
 80083ae:	6054      	str	r4, [r2, #4]
 80083b0:	e7ca      	b.n	8008348 <_free_r+0x24>
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	200001fc 	.word	0x200001fc

080083b8 <_malloc_r>:
 80083b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ba:	2303      	movs	r3, #3
 80083bc:	1ccd      	adds	r5, r1, #3
 80083be:	439d      	bics	r5, r3
 80083c0:	3508      	adds	r5, #8
 80083c2:	0006      	movs	r6, r0
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	d21f      	bcs.n	8008408 <_malloc_r+0x50>
 80083c8:	250c      	movs	r5, #12
 80083ca:	42a9      	cmp	r1, r5
 80083cc:	d81e      	bhi.n	800840c <_malloc_r+0x54>
 80083ce:	0030      	movs	r0, r6
 80083d0:	f001 fbb6 	bl	8009b40 <__malloc_lock>
 80083d4:	4925      	ldr	r1, [pc, #148]	; (800846c <_malloc_r+0xb4>)
 80083d6:	680a      	ldr	r2, [r1, #0]
 80083d8:	0014      	movs	r4, r2
 80083da:	2c00      	cmp	r4, #0
 80083dc:	d11a      	bne.n	8008414 <_malloc_r+0x5c>
 80083de:	4f24      	ldr	r7, [pc, #144]	; (8008470 <_malloc_r+0xb8>)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <_malloc_r+0x38>
 80083e6:	0021      	movs	r1, r4
 80083e8:	0030      	movs	r0, r6
 80083ea:	f000 fcbd 	bl	8008d68 <_sbrk_r>
 80083ee:	6038      	str	r0, [r7, #0]
 80083f0:	0029      	movs	r1, r5
 80083f2:	0030      	movs	r0, r6
 80083f4:	f000 fcb8 	bl	8008d68 <_sbrk_r>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d12b      	bne.n	8008454 <_malloc_r+0x9c>
 80083fc:	230c      	movs	r3, #12
 80083fe:	0030      	movs	r0, r6
 8008400:	6033      	str	r3, [r6, #0]
 8008402:	f001 fba5 	bl	8009b50 <__malloc_unlock>
 8008406:	e003      	b.n	8008410 <_malloc_r+0x58>
 8008408:	2d00      	cmp	r5, #0
 800840a:	dade      	bge.n	80083ca <_malloc_r+0x12>
 800840c:	230c      	movs	r3, #12
 800840e:	6033      	str	r3, [r6, #0]
 8008410:	2000      	movs	r0, #0
 8008412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	1b5b      	subs	r3, r3, r5
 8008418:	d419      	bmi.n	800844e <_malloc_r+0x96>
 800841a:	2b0b      	cmp	r3, #11
 800841c:	d903      	bls.n	8008426 <_malloc_r+0x6e>
 800841e:	6023      	str	r3, [r4, #0]
 8008420:	18e4      	adds	r4, r4, r3
 8008422:	6025      	str	r5, [r4, #0]
 8008424:	e003      	b.n	800842e <_malloc_r+0x76>
 8008426:	6863      	ldr	r3, [r4, #4]
 8008428:	42a2      	cmp	r2, r4
 800842a:	d10e      	bne.n	800844a <_malloc_r+0x92>
 800842c:	600b      	str	r3, [r1, #0]
 800842e:	0030      	movs	r0, r6
 8008430:	f001 fb8e 	bl	8009b50 <__malloc_unlock>
 8008434:	0020      	movs	r0, r4
 8008436:	2207      	movs	r2, #7
 8008438:	300b      	adds	r0, #11
 800843a:	1d23      	adds	r3, r4, #4
 800843c:	4390      	bics	r0, r2
 800843e:	1ac2      	subs	r2, r0, r3
 8008440:	4298      	cmp	r0, r3
 8008442:	d0e6      	beq.n	8008412 <_malloc_r+0x5a>
 8008444:	1a1b      	subs	r3, r3, r0
 8008446:	50a3      	str	r3, [r4, r2]
 8008448:	e7e3      	b.n	8008412 <_malloc_r+0x5a>
 800844a:	6053      	str	r3, [r2, #4]
 800844c:	e7ef      	b.n	800842e <_malloc_r+0x76>
 800844e:	0022      	movs	r2, r4
 8008450:	6864      	ldr	r4, [r4, #4]
 8008452:	e7c2      	b.n	80083da <_malloc_r+0x22>
 8008454:	2303      	movs	r3, #3
 8008456:	1cc4      	adds	r4, r0, #3
 8008458:	439c      	bics	r4, r3
 800845a:	42a0      	cmp	r0, r4
 800845c:	d0e1      	beq.n	8008422 <_malloc_r+0x6a>
 800845e:	1a21      	subs	r1, r4, r0
 8008460:	0030      	movs	r0, r6
 8008462:	f000 fc81 	bl	8008d68 <_sbrk_r>
 8008466:	1c43      	adds	r3, r0, #1
 8008468:	d1db      	bne.n	8008422 <_malloc_r+0x6a>
 800846a:	e7c7      	b.n	80083fc <_malloc_r+0x44>
 800846c:	200001fc 	.word	0x200001fc
 8008470:	20000200 	.word	0x20000200

08008474 <__cvt>:
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008476:	001e      	movs	r6, r3
 8008478:	2300      	movs	r3, #0
 800847a:	0014      	movs	r4, r2
 800847c:	b08b      	sub	sp, #44	; 0x2c
 800847e:	429e      	cmp	r6, r3
 8008480:	da04      	bge.n	800848c <__cvt+0x18>
 8008482:	2180      	movs	r1, #128	; 0x80
 8008484:	0609      	lsls	r1, r1, #24
 8008486:	1873      	adds	r3, r6, r1
 8008488:	001e      	movs	r6, r3
 800848a:	232d      	movs	r3, #45	; 0x2d
 800848c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800848e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008490:	7013      	strb	r3, [r2, #0]
 8008492:	2320      	movs	r3, #32
 8008494:	2203      	movs	r2, #3
 8008496:	439f      	bics	r7, r3
 8008498:	2f46      	cmp	r7, #70	; 0x46
 800849a:	d007      	beq.n	80084ac <__cvt+0x38>
 800849c:	003b      	movs	r3, r7
 800849e:	3b45      	subs	r3, #69	; 0x45
 80084a0:	4259      	negs	r1, r3
 80084a2:	414b      	adcs	r3, r1
 80084a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80084a6:	3a01      	subs	r2, #1
 80084a8:	18cb      	adds	r3, r1, r3
 80084aa:	9310      	str	r3, [sp, #64]	; 0x40
 80084ac:	ab09      	add	r3, sp, #36	; 0x24
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	ab08      	add	r3, sp, #32
 80084b2:	9303      	str	r3, [sp, #12]
 80084b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084b6:	9200      	str	r2, [sp, #0]
 80084b8:	9302      	str	r3, [sp, #8]
 80084ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084bc:	0022      	movs	r2, r4
 80084be:	9301      	str	r3, [sp, #4]
 80084c0:	0033      	movs	r3, r6
 80084c2:	f000 fd0f 	bl	8008ee4 <_dtoa_r>
 80084c6:	0005      	movs	r5, r0
 80084c8:	2f47      	cmp	r7, #71	; 0x47
 80084ca:	d102      	bne.n	80084d2 <__cvt+0x5e>
 80084cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084ce:	07db      	lsls	r3, r3, #31
 80084d0:	d528      	bpl.n	8008524 <__cvt+0xb0>
 80084d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084d4:	18eb      	adds	r3, r5, r3
 80084d6:	9307      	str	r3, [sp, #28]
 80084d8:	2f46      	cmp	r7, #70	; 0x46
 80084da:	d114      	bne.n	8008506 <__cvt+0x92>
 80084dc:	782b      	ldrb	r3, [r5, #0]
 80084de:	2b30      	cmp	r3, #48	; 0x30
 80084e0:	d10c      	bne.n	80084fc <__cvt+0x88>
 80084e2:	2200      	movs	r2, #0
 80084e4:	2300      	movs	r3, #0
 80084e6:	0020      	movs	r0, r4
 80084e8:	0031      	movs	r1, r6
 80084ea:	f7f7 ffa9 	bl	8000440 <__aeabi_dcmpeq>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d104      	bne.n	80084fc <__cvt+0x88>
 80084f2:	2301      	movs	r3, #1
 80084f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084f6:	1a9b      	subs	r3, r3, r2
 80084f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084fe:	9a07      	ldr	r2, [sp, #28]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	18d3      	adds	r3, r2, r3
 8008504:	9307      	str	r3, [sp, #28]
 8008506:	2200      	movs	r2, #0
 8008508:	2300      	movs	r3, #0
 800850a:	0020      	movs	r0, r4
 800850c:	0031      	movs	r1, r6
 800850e:	f7f7 ff97 	bl	8000440 <__aeabi_dcmpeq>
 8008512:	2800      	cmp	r0, #0
 8008514:	d001      	beq.n	800851a <__cvt+0xa6>
 8008516:	9b07      	ldr	r3, [sp, #28]
 8008518:	9309      	str	r3, [sp, #36]	; 0x24
 800851a:	2230      	movs	r2, #48	; 0x30
 800851c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800851e:	9907      	ldr	r1, [sp, #28]
 8008520:	428b      	cmp	r3, r1
 8008522:	d306      	bcc.n	8008532 <__cvt+0xbe>
 8008524:	0028      	movs	r0, r5
 8008526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008528:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800852a:	1b5b      	subs	r3, r3, r5
 800852c:	6013      	str	r3, [r2, #0]
 800852e:	b00b      	add	sp, #44	; 0x2c
 8008530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008532:	1c59      	adds	r1, r3, #1
 8008534:	9109      	str	r1, [sp, #36]	; 0x24
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	e7f0      	b.n	800851c <__cvt+0xa8>

0800853a <__exponent>:
 800853a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800853c:	1c83      	adds	r3, r0, #2
 800853e:	b087      	sub	sp, #28
 8008540:	9303      	str	r3, [sp, #12]
 8008542:	0005      	movs	r5, r0
 8008544:	000c      	movs	r4, r1
 8008546:	232b      	movs	r3, #43	; 0x2b
 8008548:	7002      	strb	r2, [r0, #0]
 800854a:	2900      	cmp	r1, #0
 800854c:	da01      	bge.n	8008552 <__exponent+0x18>
 800854e:	424c      	negs	r4, r1
 8008550:	3302      	adds	r3, #2
 8008552:	706b      	strb	r3, [r5, #1]
 8008554:	2c09      	cmp	r4, #9
 8008556:	dd31      	ble.n	80085bc <__exponent+0x82>
 8008558:	270a      	movs	r7, #10
 800855a:	ab04      	add	r3, sp, #16
 800855c:	1dde      	adds	r6, r3, #7
 800855e:	0020      	movs	r0, r4
 8008560:	0039      	movs	r1, r7
 8008562:	9601      	str	r6, [sp, #4]
 8008564:	f7f7 ff56 	bl	8000414 <__aeabi_idivmod>
 8008568:	3e01      	subs	r6, #1
 800856a:	3130      	adds	r1, #48	; 0x30
 800856c:	0020      	movs	r0, r4
 800856e:	7031      	strb	r1, [r6, #0]
 8008570:	0039      	movs	r1, r7
 8008572:	9402      	str	r4, [sp, #8]
 8008574:	f7f7 fe68 	bl	8000248 <__divsi3>
 8008578:	9b02      	ldr	r3, [sp, #8]
 800857a:	0004      	movs	r4, r0
 800857c:	2b63      	cmp	r3, #99	; 0x63
 800857e:	dcee      	bgt.n	800855e <__exponent+0x24>
 8008580:	9b01      	ldr	r3, [sp, #4]
 8008582:	3430      	adds	r4, #48	; 0x30
 8008584:	1e9a      	subs	r2, r3, #2
 8008586:	0013      	movs	r3, r2
 8008588:	9903      	ldr	r1, [sp, #12]
 800858a:	7014      	strb	r4, [r2, #0]
 800858c:	a804      	add	r0, sp, #16
 800858e:	3007      	adds	r0, #7
 8008590:	4298      	cmp	r0, r3
 8008592:	d80e      	bhi.n	80085b2 <__exponent+0x78>
 8008594:	ab04      	add	r3, sp, #16
 8008596:	3307      	adds	r3, #7
 8008598:	2000      	movs	r0, #0
 800859a:	429a      	cmp	r2, r3
 800859c:	d804      	bhi.n	80085a8 <__exponent+0x6e>
 800859e:	ab04      	add	r3, sp, #16
 80085a0:	3009      	adds	r0, #9
 80085a2:	18c0      	adds	r0, r0, r3
 80085a4:	9b01      	ldr	r3, [sp, #4]
 80085a6:	1ac0      	subs	r0, r0, r3
 80085a8:	9b03      	ldr	r3, [sp, #12]
 80085aa:	1818      	adds	r0, r3, r0
 80085ac:	1b40      	subs	r0, r0, r5
 80085ae:	b007      	add	sp, #28
 80085b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085b2:	7818      	ldrb	r0, [r3, #0]
 80085b4:	3301      	adds	r3, #1
 80085b6:	7008      	strb	r0, [r1, #0]
 80085b8:	3101      	adds	r1, #1
 80085ba:	e7e7      	b.n	800858c <__exponent+0x52>
 80085bc:	2330      	movs	r3, #48	; 0x30
 80085be:	18e4      	adds	r4, r4, r3
 80085c0:	70ab      	strb	r3, [r5, #2]
 80085c2:	1d28      	adds	r0, r5, #4
 80085c4:	70ec      	strb	r4, [r5, #3]
 80085c6:	e7f1      	b.n	80085ac <__exponent+0x72>

080085c8 <_printf_float>:
 80085c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ca:	b095      	sub	sp, #84	; 0x54
 80085cc:	000c      	movs	r4, r1
 80085ce:	9208      	str	r2, [sp, #32]
 80085d0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80085d2:	9309      	str	r3, [sp, #36]	; 0x24
 80085d4:	0007      	movs	r7, r0
 80085d6:	f001 faa3 	bl	8009b20 <_localeconv_r>
 80085da:	6803      	ldr	r3, [r0, #0]
 80085dc:	0018      	movs	r0, r3
 80085de:	930b      	str	r3, [sp, #44]	; 0x2c
 80085e0:	f7f7 fd8c 	bl	80000fc <strlen>
 80085e4:	2300      	movs	r3, #0
 80085e6:	9312      	str	r3, [sp, #72]	; 0x48
 80085e8:	7e23      	ldrb	r3, [r4, #24]
 80085ea:	2207      	movs	r2, #7
 80085ec:	001e      	movs	r6, r3
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	900d      	str	r0, [sp, #52]	; 0x34
 80085f2:	930c      	str	r3, [sp, #48]	; 0x30
 80085f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	05c9      	lsls	r1, r1, #23
 80085fa:	d547      	bpl.n	800868c <_printf_float+0xc4>
 80085fc:	189b      	adds	r3, r3, r2
 80085fe:	4393      	bics	r3, r2
 8008600:	001a      	movs	r2, r3
 8008602:	3208      	adds	r2, #8
 8008604:	602a      	str	r2, [r5, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	64a2      	str	r2, [r4, #72]	; 0x48
 800860c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800860e:	2201      	movs	r2, #1
 8008610:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008612:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008614:	930a      	str	r3, [sp, #40]	; 0x28
 8008616:	006b      	lsls	r3, r5, #1
 8008618:	085b      	lsrs	r3, r3, #1
 800861a:	930e      	str	r3, [sp, #56]	; 0x38
 800861c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800861e:	4ba8      	ldr	r3, [pc, #672]	; (80088c0 <_printf_float+0x2f8>)
 8008620:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008622:	4252      	negs	r2, r2
 8008624:	f7f9 ff34 	bl	8002490 <__aeabi_dcmpun>
 8008628:	2800      	cmp	r0, #0
 800862a:	d131      	bne.n	8008690 <_printf_float+0xc8>
 800862c:	2201      	movs	r2, #1
 800862e:	4ba4      	ldr	r3, [pc, #656]	; (80088c0 <_printf_float+0x2f8>)
 8008630:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008632:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008634:	4252      	negs	r2, r2
 8008636:	f7f7 ff13 	bl	8000460 <__aeabi_dcmple>
 800863a:	2800      	cmp	r0, #0
 800863c:	d128      	bne.n	8008690 <_printf_float+0xc8>
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	0029      	movs	r1, r5
 8008644:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008646:	f7f7 ff01 	bl	800044c <__aeabi_dcmplt>
 800864a:	2800      	cmp	r0, #0
 800864c:	d003      	beq.n	8008656 <_printf_float+0x8e>
 800864e:	0023      	movs	r3, r4
 8008650:	222d      	movs	r2, #45	; 0x2d
 8008652:	3343      	adds	r3, #67	; 0x43
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	4d9b      	ldr	r5, [pc, #620]	; (80088c4 <_printf_float+0x2fc>)
 8008658:	2e47      	cmp	r6, #71	; 0x47
 800865a:	d900      	bls.n	800865e <_printf_float+0x96>
 800865c:	4d9a      	ldr	r5, [pc, #616]	; (80088c8 <_printf_float+0x300>)
 800865e:	2303      	movs	r3, #3
 8008660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008662:	6123      	str	r3, [r4, #16]
 8008664:	3301      	adds	r3, #1
 8008666:	439a      	bics	r2, r3
 8008668:	2300      	movs	r3, #0
 800866a:	6022      	str	r2, [r4, #0]
 800866c:	930a      	str	r3, [sp, #40]	; 0x28
 800866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008670:	0021      	movs	r1, r4
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	0038      	movs	r0, r7
 8008676:	9b08      	ldr	r3, [sp, #32]
 8008678:	aa13      	add	r2, sp, #76	; 0x4c
 800867a:	f000 f9f3 	bl	8008a64 <_printf_common>
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	d000      	beq.n	8008684 <_printf_float+0xbc>
 8008682:	e09e      	b.n	80087c2 <_printf_float+0x1fa>
 8008684:	2001      	movs	r0, #1
 8008686:	4240      	negs	r0, r0
 8008688:	b015      	add	sp, #84	; 0x54
 800868a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800868c:	3307      	adds	r3, #7
 800868e:	e7b6      	b.n	80085fe <_printf_float+0x36>
 8008690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008692:	002b      	movs	r3, r5
 8008694:	0010      	movs	r0, r2
 8008696:	0029      	movs	r1, r5
 8008698:	f7f9 fefa 	bl	8002490 <__aeabi_dcmpun>
 800869c:	2800      	cmp	r0, #0
 800869e:	d00a      	beq.n	80086b6 <_printf_float+0xee>
 80086a0:	2d00      	cmp	r5, #0
 80086a2:	da03      	bge.n	80086ac <_printf_float+0xe4>
 80086a4:	0023      	movs	r3, r4
 80086a6:	222d      	movs	r2, #45	; 0x2d
 80086a8:	3343      	adds	r3, #67	; 0x43
 80086aa:	701a      	strb	r2, [r3, #0]
 80086ac:	4d87      	ldr	r5, [pc, #540]	; (80088cc <_printf_float+0x304>)
 80086ae:	2e47      	cmp	r6, #71	; 0x47
 80086b0:	d9d5      	bls.n	800865e <_printf_float+0x96>
 80086b2:	4d87      	ldr	r5, [pc, #540]	; (80088d0 <_printf_float+0x308>)
 80086b4:	e7d3      	b.n	800865e <_printf_float+0x96>
 80086b6:	2220      	movs	r2, #32
 80086b8:	0031      	movs	r1, r6
 80086ba:	6863      	ldr	r3, [r4, #4]
 80086bc:	4391      	bics	r1, r2
 80086be:	910e      	str	r1, [sp, #56]	; 0x38
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	d147      	bne.n	8008754 <_printf_float+0x18c>
 80086c4:	3307      	adds	r3, #7
 80086c6:	6063      	str	r3, [r4, #4]
 80086c8:	2380      	movs	r3, #128	; 0x80
 80086ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	4313      	orrs	r3, r2
 80086d0:	2200      	movs	r2, #0
 80086d2:	9206      	str	r2, [sp, #24]
 80086d4:	aa12      	add	r2, sp, #72	; 0x48
 80086d6:	9205      	str	r2, [sp, #20]
 80086d8:	aa11      	add	r2, sp, #68	; 0x44
 80086da:	9203      	str	r2, [sp, #12]
 80086dc:	2223      	movs	r2, #35	; 0x23
 80086de:	a908      	add	r1, sp, #32
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	6863      	ldr	r3, [r4, #4]
 80086e6:	1852      	adds	r2, r2, r1
 80086e8:	9202      	str	r2, [sp, #8]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	0038      	movs	r0, r7
 80086ee:	002b      	movs	r3, r5
 80086f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086f2:	9604      	str	r6, [sp, #16]
 80086f4:	f7ff febe 	bl	8008474 <__cvt>
 80086f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086fa:	0005      	movs	r5, r0
 80086fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086fe:	2b47      	cmp	r3, #71	; 0x47
 8008700:	d108      	bne.n	8008714 <_printf_float+0x14c>
 8008702:	1ccb      	adds	r3, r1, #3
 8008704:	db02      	blt.n	800870c <_printf_float+0x144>
 8008706:	6863      	ldr	r3, [r4, #4]
 8008708:	4299      	cmp	r1, r3
 800870a:	dd46      	ble.n	800879a <_printf_float+0x1d2>
 800870c:	0033      	movs	r3, r6
 800870e:	3b02      	subs	r3, #2
 8008710:	b2db      	uxtb	r3, r3
 8008712:	001e      	movs	r6, r3
 8008714:	2e65      	cmp	r6, #101	; 0x65
 8008716:	d824      	bhi.n	8008762 <_printf_float+0x19a>
 8008718:	0020      	movs	r0, r4
 800871a:	0032      	movs	r2, r6
 800871c:	3901      	subs	r1, #1
 800871e:	3050      	adds	r0, #80	; 0x50
 8008720:	9111      	str	r1, [sp, #68]	; 0x44
 8008722:	f7ff ff0a 	bl	800853a <__exponent>
 8008726:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008728:	900a      	str	r0, [sp, #40]	; 0x28
 800872a:	1813      	adds	r3, r2, r0
 800872c:	6123      	str	r3, [r4, #16]
 800872e:	2a01      	cmp	r2, #1
 8008730:	dc02      	bgt.n	8008738 <_printf_float+0x170>
 8008732:	6822      	ldr	r2, [r4, #0]
 8008734:	07d2      	lsls	r2, r2, #31
 8008736:	d501      	bpl.n	800873c <_printf_float+0x174>
 8008738:	3301      	adds	r3, #1
 800873a:	6123      	str	r3, [r4, #16]
 800873c:	2323      	movs	r3, #35	; 0x23
 800873e:	aa08      	add	r2, sp, #32
 8008740:	189b      	adds	r3, r3, r2
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d100      	bne.n	800874a <_printf_float+0x182>
 8008748:	e791      	b.n	800866e <_printf_float+0xa6>
 800874a:	0023      	movs	r3, r4
 800874c:	222d      	movs	r2, #45	; 0x2d
 800874e:	3343      	adds	r3, #67	; 0x43
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	e78c      	b.n	800866e <_printf_float+0xa6>
 8008754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008756:	2a47      	cmp	r2, #71	; 0x47
 8008758:	d1b6      	bne.n	80086c8 <_printf_float+0x100>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1b4      	bne.n	80086c8 <_printf_float+0x100>
 800875e:	3301      	adds	r3, #1
 8008760:	e7b1      	b.n	80086c6 <_printf_float+0xfe>
 8008762:	2e66      	cmp	r6, #102	; 0x66
 8008764:	d11b      	bne.n	800879e <_printf_float+0x1d6>
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	2900      	cmp	r1, #0
 800876a:	dd0d      	ble.n	8008788 <_printf_float+0x1c0>
 800876c:	6121      	str	r1, [r4, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <_printf_float+0x1b0>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	07d2      	lsls	r2, r2, #31
 8008776:	d502      	bpl.n	800877e <_printf_float+0x1b6>
 8008778:	3301      	adds	r3, #1
 800877a:	1859      	adds	r1, r3, r1
 800877c:	6121      	str	r1, [r4, #16]
 800877e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008780:	65a3      	str	r3, [r4, #88]	; 0x58
 8008782:	2300      	movs	r3, #0
 8008784:	930a      	str	r3, [sp, #40]	; 0x28
 8008786:	e7d9      	b.n	800873c <_printf_float+0x174>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <_printf_float+0x1cc>
 800878c:	2201      	movs	r2, #1
 800878e:	6821      	ldr	r1, [r4, #0]
 8008790:	4211      	tst	r1, r2
 8008792:	d000      	beq.n	8008796 <_printf_float+0x1ce>
 8008794:	1c9a      	adds	r2, r3, #2
 8008796:	6122      	str	r2, [r4, #16]
 8008798:	e7f1      	b.n	800877e <_printf_float+0x1b6>
 800879a:	2367      	movs	r3, #103	; 0x67
 800879c:	001e      	movs	r6, r3
 800879e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087a2:	4293      	cmp	r3, r2
 80087a4:	db06      	blt.n	80087b4 <_printf_float+0x1ec>
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	07d2      	lsls	r2, r2, #31
 80087ac:	d5e7      	bpl.n	800877e <_printf_float+0x1b6>
 80087ae:	3301      	adds	r3, #1
 80087b0:	6123      	str	r3, [r4, #16]
 80087b2:	e7e4      	b.n	800877e <_printf_float+0x1b6>
 80087b4:	2101      	movs	r1, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	dc01      	bgt.n	80087be <_printf_float+0x1f6>
 80087ba:	1849      	adds	r1, r1, r1
 80087bc:	1ac9      	subs	r1, r1, r3
 80087be:	1852      	adds	r2, r2, r1
 80087c0:	e7e9      	b.n	8008796 <_printf_float+0x1ce>
 80087c2:	6822      	ldr	r2, [r4, #0]
 80087c4:	0553      	lsls	r3, r2, #21
 80087c6:	d408      	bmi.n	80087da <_printf_float+0x212>
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	002a      	movs	r2, r5
 80087cc:	0038      	movs	r0, r7
 80087ce:	9908      	ldr	r1, [sp, #32]
 80087d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087d2:	47a8      	blx	r5
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d129      	bne.n	800882c <_printf_float+0x264>
 80087d8:	e754      	b.n	8008684 <_printf_float+0xbc>
 80087da:	2e65      	cmp	r6, #101	; 0x65
 80087dc:	d800      	bhi.n	80087e0 <_printf_float+0x218>
 80087de:	e0ec      	b.n	80089ba <_printf_float+0x3f2>
 80087e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80087e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80087e4:	2200      	movs	r2, #0
 80087e6:	2300      	movs	r3, #0
 80087e8:	f7f7 fe2a 	bl	8000440 <__aeabi_dcmpeq>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	d034      	beq.n	800885a <_printf_float+0x292>
 80087f0:	2301      	movs	r3, #1
 80087f2:	0038      	movs	r0, r7
 80087f4:	4a37      	ldr	r2, [pc, #220]	; (80088d4 <_printf_float+0x30c>)
 80087f6:	9908      	ldr	r1, [sp, #32]
 80087f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80087fa:	47a8      	blx	r5
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d100      	bne.n	8008802 <_printf_float+0x23a>
 8008800:	e740      	b.n	8008684 <_printf_float+0xbc>
 8008802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008804:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008806:	4293      	cmp	r3, r2
 8008808:	db02      	blt.n	8008810 <_printf_float+0x248>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	07db      	lsls	r3, r3, #31
 800880e:	d50d      	bpl.n	800882c <_printf_float+0x264>
 8008810:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008812:	0038      	movs	r0, r7
 8008814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008818:	9908      	ldr	r1, [sp, #32]
 800881a:	47a8      	blx	r5
 800881c:	2500      	movs	r5, #0
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	d100      	bne.n	8008824 <_printf_float+0x25c>
 8008822:	e72f      	b.n	8008684 <_printf_float+0xbc>
 8008824:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008826:	3b01      	subs	r3, #1
 8008828:	42ab      	cmp	r3, r5
 800882a:	dc0a      	bgt.n	8008842 <_printf_float+0x27a>
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	079b      	lsls	r3, r3, #30
 8008830:	d500      	bpl.n	8008834 <_printf_float+0x26c>
 8008832:	e114      	b.n	8008a5e <_printf_float+0x496>
 8008834:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008836:	68e0      	ldr	r0, [r4, #12]
 8008838:	4298      	cmp	r0, r3
 800883a:	db00      	blt.n	800883e <_printf_float+0x276>
 800883c:	e724      	b.n	8008688 <_printf_float+0xc0>
 800883e:	0018      	movs	r0, r3
 8008840:	e722      	b.n	8008688 <_printf_float+0xc0>
 8008842:	0022      	movs	r2, r4
 8008844:	2301      	movs	r3, #1
 8008846:	0038      	movs	r0, r7
 8008848:	9908      	ldr	r1, [sp, #32]
 800884a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800884c:	321a      	adds	r2, #26
 800884e:	47b0      	blx	r6
 8008850:	1c43      	adds	r3, r0, #1
 8008852:	d100      	bne.n	8008856 <_printf_float+0x28e>
 8008854:	e716      	b.n	8008684 <_printf_float+0xbc>
 8008856:	3501      	adds	r5, #1
 8008858:	e7e4      	b.n	8008824 <_printf_float+0x25c>
 800885a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800885c:	2b00      	cmp	r3, #0
 800885e:	dc3b      	bgt.n	80088d8 <_printf_float+0x310>
 8008860:	2301      	movs	r3, #1
 8008862:	0038      	movs	r0, r7
 8008864:	4a1b      	ldr	r2, [pc, #108]	; (80088d4 <_printf_float+0x30c>)
 8008866:	9908      	ldr	r1, [sp, #32]
 8008868:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800886a:	47b0      	blx	r6
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d100      	bne.n	8008872 <_printf_float+0x2aa>
 8008870:	e708      	b.n	8008684 <_printf_float+0xbc>
 8008872:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008876:	4313      	orrs	r3, r2
 8008878:	d102      	bne.n	8008880 <_printf_float+0x2b8>
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	07db      	lsls	r3, r3, #31
 800887e:	d5d5      	bpl.n	800882c <_printf_float+0x264>
 8008880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008882:	0038      	movs	r0, r7
 8008884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008886:	9908      	ldr	r1, [sp, #32]
 8008888:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800888a:	47b0      	blx	r6
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d100      	bne.n	8008892 <_printf_float+0x2ca>
 8008890:	e6f8      	b.n	8008684 <_printf_float+0xbc>
 8008892:	2300      	movs	r3, #0
 8008894:	930a      	str	r3, [sp, #40]	; 0x28
 8008896:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008898:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800889a:	425b      	negs	r3, r3
 800889c:	4293      	cmp	r3, r2
 800889e:	dc01      	bgt.n	80088a4 <_printf_float+0x2dc>
 80088a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088a2:	e792      	b.n	80087ca <_printf_float+0x202>
 80088a4:	0022      	movs	r2, r4
 80088a6:	2301      	movs	r3, #1
 80088a8:	0038      	movs	r0, r7
 80088aa:	9908      	ldr	r1, [sp, #32]
 80088ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80088ae:	321a      	adds	r2, #26
 80088b0:	47b0      	blx	r6
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d100      	bne.n	80088b8 <_printf_float+0x2f0>
 80088b6:	e6e5      	b.n	8008684 <_printf_float+0xbc>
 80088b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ba:	3301      	adds	r3, #1
 80088bc:	e7ea      	b.n	8008894 <_printf_float+0x2cc>
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	7fefffff 	.word	0x7fefffff
 80088c4:	0800b37c 	.word	0x0800b37c
 80088c8:	0800b380 	.word	0x0800b380
 80088cc:	0800b384 	.word	0x0800b384
 80088d0:	0800b388 	.word	0x0800b388
 80088d4:	0800b38c 	.word	0x0800b38c
 80088d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088dc:	920a      	str	r2, [sp, #40]	; 0x28
 80088de:	429a      	cmp	r2, r3
 80088e0:	dd00      	ble.n	80088e4 <_printf_float+0x31c>
 80088e2:	930a      	str	r3, [sp, #40]	; 0x28
 80088e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	dc3d      	bgt.n	8008966 <_printf_float+0x39e>
 80088ea:	2300      	movs	r3, #0
 80088ec:	930e      	str	r3, [sp, #56]	; 0x38
 80088ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f0:	43db      	mvns	r3, r3
 80088f2:	17db      	asrs	r3, r3, #31
 80088f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088fa:	930c      	str	r3, [sp, #48]	; 0x30
 80088fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fe:	4013      	ands	r3, r2
 8008900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008906:	4293      	cmp	r3, r2
 8008908:	dc36      	bgt.n	8008978 <_printf_float+0x3b0>
 800890a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800890c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800890e:	4293      	cmp	r3, r2
 8008910:	db40      	blt.n	8008994 <_printf_float+0x3cc>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	07db      	lsls	r3, r3, #31
 8008916:	d43d      	bmi.n	8008994 <_printf_float+0x3cc>
 8008918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800891a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800891c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	1a52      	subs	r2, r2, r1
 8008922:	920a      	str	r2, [sp, #40]	; 0x28
 8008924:	429a      	cmp	r2, r3
 8008926:	dd00      	ble.n	800892a <_printf_float+0x362>
 8008928:	930a      	str	r3, [sp, #40]	; 0x28
 800892a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892c:	2b00      	cmp	r3, #0
 800892e:	dc3a      	bgt.n	80089a6 <_printf_float+0x3de>
 8008930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008932:	2500      	movs	r5, #0
 8008934:	43db      	mvns	r3, r3
 8008936:	17db      	asrs	r3, r3, #31
 8008938:	930b      	str	r3, [sp, #44]	; 0x2c
 800893a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800893c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800893e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008940:	1a9b      	subs	r3, r3, r2
 8008942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008944:	400a      	ands	r2, r1
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	42ab      	cmp	r3, r5
 800894a:	dc00      	bgt.n	800894e <_printf_float+0x386>
 800894c:	e76e      	b.n	800882c <_printf_float+0x264>
 800894e:	0022      	movs	r2, r4
 8008950:	2301      	movs	r3, #1
 8008952:	0038      	movs	r0, r7
 8008954:	9908      	ldr	r1, [sp, #32]
 8008956:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008958:	321a      	adds	r2, #26
 800895a:	47b0      	blx	r6
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d100      	bne.n	8008962 <_printf_float+0x39a>
 8008960:	e690      	b.n	8008684 <_printf_float+0xbc>
 8008962:	3501      	adds	r5, #1
 8008964:	e7e9      	b.n	800893a <_printf_float+0x372>
 8008966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008968:	002a      	movs	r2, r5
 800896a:	0038      	movs	r0, r7
 800896c:	9908      	ldr	r1, [sp, #32]
 800896e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008970:	47b0      	blx	r6
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d1b9      	bne.n	80088ea <_printf_float+0x322>
 8008976:	e685      	b.n	8008684 <_printf_float+0xbc>
 8008978:	0022      	movs	r2, r4
 800897a:	2301      	movs	r3, #1
 800897c:	0038      	movs	r0, r7
 800897e:	9908      	ldr	r1, [sp, #32]
 8008980:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008982:	321a      	adds	r2, #26
 8008984:	47b0      	blx	r6
 8008986:	1c43      	adds	r3, r0, #1
 8008988:	d100      	bne.n	800898c <_printf_float+0x3c4>
 800898a:	e67b      	b.n	8008684 <_printf_float+0xbc>
 800898c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800898e:	3301      	adds	r3, #1
 8008990:	930e      	str	r3, [sp, #56]	; 0x38
 8008992:	e7b0      	b.n	80088f6 <_printf_float+0x32e>
 8008994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008996:	0038      	movs	r0, r7
 8008998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800899a:	9908      	ldr	r1, [sp, #32]
 800899c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800899e:	47b0      	blx	r6
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d1b9      	bne.n	8008918 <_printf_float+0x350>
 80089a4:	e66e      	b.n	8008684 <_printf_float+0xbc>
 80089a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a8:	0038      	movs	r0, r7
 80089aa:	18ea      	adds	r2, r5, r3
 80089ac:	9908      	ldr	r1, [sp, #32]
 80089ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089b2:	47a8      	blx	r5
 80089b4:	1c43      	adds	r3, r0, #1
 80089b6:	d1bb      	bne.n	8008930 <_printf_float+0x368>
 80089b8:	e664      	b.n	8008684 <_printf_float+0xbc>
 80089ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089bc:	2b01      	cmp	r3, #1
 80089be:	dc02      	bgt.n	80089c6 <_printf_float+0x3fe>
 80089c0:	2301      	movs	r3, #1
 80089c2:	421a      	tst	r2, r3
 80089c4:	d038      	beq.n	8008a38 <_printf_float+0x470>
 80089c6:	2301      	movs	r3, #1
 80089c8:	002a      	movs	r2, r5
 80089ca:	0038      	movs	r0, r7
 80089cc:	9908      	ldr	r1, [sp, #32]
 80089ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089d0:	47b0      	blx	r6
 80089d2:	1c43      	adds	r3, r0, #1
 80089d4:	d100      	bne.n	80089d8 <_printf_float+0x410>
 80089d6:	e655      	b.n	8008684 <_printf_float+0xbc>
 80089d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089da:	0038      	movs	r0, r7
 80089dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089de:	9908      	ldr	r1, [sp, #32]
 80089e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089e2:	47b0      	blx	r6
 80089e4:	1c43      	adds	r3, r0, #1
 80089e6:	d100      	bne.n	80089ea <_printf_float+0x422>
 80089e8:	e64c      	b.n	8008684 <_printf_float+0xbc>
 80089ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80089ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80089ee:	2200      	movs	r2, #0
 80089f0:	2300      	movs	r3, #0
 80089f2:	f7f7 fd25 	bl	8000440 <__aeabi_dcmpeq>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d11c      	bne.n	8008a34 <_printf_float+0x46c>
 80089fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089fc:	1c6a      	adds	r2, r5, #1
 80089fe:	3b01      	subs	r3, #1
 8008a00:	0038      	movs	r0, r7
 8008a02:	9908      	ldr	r1, [sp, #32]
 8008a04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a06:	47a8      	blx	r5
 8008a08:	1c43      	adds	r3, r0, #1
 8008a0a:	d10f      	bne.n	8008a2c <_printf_float+0x464>
 8008a0c:	e63a      	b.n	8008684 <_printf_float+0xbc>
 8008a0e:	0022      	movs	r2, r4
 8008a10:	2301      	movs	r3, #1
 8008a12:	0038      	movs	r0, r7
 8008a14:	9908      	ldr	r1, [sp, #32]
 8008a16:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a18:	321a      	adds	r2, #26
 8008a1a:	47b0      	blx	r6
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	d100      	bne.n	8008a22 <_printf_float+0x45a>
 8008a20:	e630      	b.n	8008684 <_printf_float+0xbc>
 8008a22:	3501      	adds	r5, #1
 8008a24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a26:	3b01      	subs	r3, #1
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	dcf0      	bgt.n	8008a0e <_printf_float+0x446>
 8008a2c:	0022      	movs	r2, r4
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a30:	3250      	adds	r2, #80	; 0x50
 8008a32:	e6cb      	b.n	80087cc <_printf_float+0x204>
 8008a34:	2500      	movs	r5, #0
 8008a36:	e7f5      	b.n	8008a24 <_printf_float+0x45c>
 8008a38:	002a      	movs	r2, r5
 8008a3a:	e7e1      	b.n	8008a00 <_printf_float+0x438>
 8008a3c:	0022      	movs	r2, r4
 8008a3e:	2301      	movs	r3, #1
 8008a40:	0038      	movs	r0, r7
 8008a42:	9908      	ldr	r1, [sp, #32]
 8008a44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a46:	3219      	adds	r2, #25
 8008a48:	47b0      	blx	r6
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	d100      	bne.n	8008a50 <_printf_float+0x488>
 8008a4e:	e619      	b.n	8008684 <_printf_float+0xbc>
 8008a50:	3501      	adds	r5, #1
 8008a52:	68e3      	ldr	r3, [r4, #12]
 8008a54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	42ab      	cmp	r3, r5
 8008a5a:	dcef      	bgt.n	8008a3c <_printf_float+0x474>
 8008a5c:	e6ea      	b.n	8008834 <_printf_float+0x26c>
 8008a5e:	2500      	movs	r5, #0
 8008a60:	e7f7      	b.n	8008a52 <_printf_float+0x48a>
 8008a62:	46c0      	nop			; (mov r8, r8)

08008a64 <_printf_common>:
 8008a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a66:	0015      	movs	r5, r2
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	688a      	ldr	r2, [r1, #8]
 8008a6c:	690b      	ldr	r3, [r1, #16]
 8008a6e:	000c      	movs	r4, r1
 8008a70:	9000      	str	r0, [sp, #0]
 8008a72:	4293      	cmp	r3, r2
 8008a74:	da00      	bge.n	8008a78 <_printf_common+0x14>
 8008a76:	0013      	movs	r3, r2
 8008a78:	0022      	movs	r2, r4
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	3243      	adds	r2, #67	; 0x43
 8008a7e:	7812      	ldrb	r2, [r2, #0]
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d001      	beq.n	8008a88 <_printf_common+0x24>
 8008a84:	3301      	adds	r3, #1
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	069b      	lsls	r3, r3, #26
 8008a8c:	d502      	bpl.n	8008a94 <_printf_common+0x30>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	3302      	adds	r3, #2
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	6822      	ldr	r2, [r4, #0]
 8008a96:	2306      	movs	r3, #6
 8008a98:	0017      	movs	r7, r2
 8008a9a:	401f      	ands	r7, r3
 8008a9c:	421a      	tst	r2, r3
 8008a9e:	d027      	beq.n	8008af0 <_printf_common+0x8c>
 8008aa0:	0023      	movs	r3, r4
 8008aa2:	3343      	adds	r3, #67	; 0x43
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	1e5a      	subs	r2, r3, #1
 8008aa8:	4193      	sbcs	r3, r2
 8008aaa:	6822      	ldr	r2, [r4, #0]
 8008aac:	0692      	lsls	r2, r2, #26
 8008aae:	d430      	bmi.n	8008b12 <_printf_common+0xae>
 8008ab0:	0022      	movs	r2, r4
 8008ab2:	9901      	ldr	r1, [sp, #4]
 8008ab4:	9800      	ldr	r0, [sp, #0]
 8008ab6:	9e08      	ldr	r6, [sp, #32]
 8008ab8:	3243      	adds	r2, #67	; 0x43
 8008aba:	47b0      	blx	r6
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d025      	beq.n	8008b0c <_printf_common+0xa8>
 8008ac0:	2306      	movs	r3, #6
 8008ac2:	6820      	ldr	r0, [r4, #0]
 8008ac4:	682a      	ldr	r2, [r5, #0]
 8008ac6:	68e1      	ldr	r1, [r4, #12]
 8008ac8:	2500      	movs	r5, #0
 8008aca:	4003      	ands	r3, r0
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d103      	bne.n	8008ad8 <_printf_common+0x74>
 8008ad0:	1a8d      	subs	r5, r1, r2
 8008ad2:	43eb      	mvns	r3, r5
 8008ad4:	17db      	asrs	r3, r3, #31
 8008ad6:	401d      	ands	r5, r3
 8008ad8:	68a3      	ldr	r3, [r4, #8]
 8008ada:	6922      	ldr	r2, [r4, #16]
 8008adc:	4293      	cmp	r3, r2
 8008ade:	dd01      	ble.n	8008ae4 <_printf_common+0x80>
 8008ae0:	1a9b      	subs	r3, r3, r2
 8008ae2:	18ed      	adds	r5, r5, r3
 8008ae4:	2700      	movs	r7, #0
 8008ae6:	42bd      	cmp	r5, r7
 8008ae8:	d120      	bne.n	8008b2c <_printf_common+0xc8>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e010      	b.n	8008b10 <_printf_common+0xac>
 8008aee:	3701      	adds	r7, #1
 8008af0:	68e3      	ldr	r3, [r4, #12]
 8008af2:	682a      	ldr	r2, [r5, #0]
 8008af4:	1a9b      	subs	r3, r3, r2
 8008af6:	42bb      	cmp	r3, r7
 8008af8:	ddd2      	ble.n	8008aa0 <_printf_common+0x3c>
 8008afa:	0022      	movs	r2, r4
 8008afc:	2301      	movs	r3, #1
 8008afe:	9901      	ldr	r1, [sp, #4]
 8008b00:	9800      	ldr	r0, [sp, #0]
 8008b02:	9e08      	ldr	r6, [sp, #32]
 8008b04:	3219      	adds	r2, #25
 8008b06:	47b0      	blx	r6
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d1f0      	bne.n	8008aee <_printf_common+0x8a>
 8008b0c:	2001      	movs	r0, #1
 8008b0e:	4240      	negs	r0, r0
 8008b10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b12:	2030      	movs	r0, #48	; 0x30
 8008b14:	18e1      	adds	r1, r4, r3
 8008b16:	3143      	adds	r1, #67	; 0x43
 8008b18:	7008      	strb	r0, [r1, #0]
 8008b1a:	0021      	movs	r1, r4
 8008b1c:	1c5a      	adds	r2, r3, #1
 8008b1e:	3145      	adds	r1, #69	; 0x45
 8008b20:	7809      	ldrb	r1, [r1, #0]
 8008b22:	18a2      	adds	r2, r4, r2
 8008b24:	3243      	adds	r2, #67	; 0x43
 8008b26:	3302      	adds	r3, #2
 8008b28:	7011      	strb	r1, [r2, #0]
 8008b2a:	e7c1      	b.n	8008ab0 <_printf_common+0x4c>
 8008b2c:	0022      	movs	r2, r4
 8008b2e:	2301      	movs	r3, #1
 8008b30:	9901      	ldr	r1, [sp, #4]
 8008b32:	9800      	ldr	r0, [sp, #0]
 8008b34:	9e08      	ldr	r6, [sp, #32]
 8008b36:	321a      	adds	r2, #26
 8008b38:	47b0      	blx	r6
 8008b3a:	1c43      	adds	r3, r0, #1
 8008b3c:	d0e6      	beq.n	8008b0c <_printf_common+0xa8>
 8008b3e:	3701      	adds	r7, #1
 8008b40:	e7d1      	b.n	8008ae6 <_printf_common+0x82>
	...

08008b44 <_printf_i>:
 8008b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b46:	b08b      	sub	sp, #44	; 0x2c
 8008b48:	9206      	str	r2, [sp, #24]
 8008b4a:	000a      	movs	r2, r1
 8008b4c:	3243      	adds	r2, #67	; 0x43
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	9005      	str	r0, [sp, #20]
 8008b52:	9204      	str	r2, [sp, #16]
 8008b54:	7e0a      	ldrb	r2, [r1, #24]
 8008b56:	000c      	movs	r4, r1
 8008b58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b5a:	2a78      	cmp	r2, #120	; 0x78
 8008b5c:	d806      	bhi.n	8008b6c <_printf_i+0x28>
 8008b5e:	2a62      	cmp	r2, #98	; 0x62
 8008b60:	d808      	bhi.n	8008b74 <_printf_i+0x30>
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	d100      	bne.n	8008b68 <_printf_i+0x24>
 8008b66:	e0c0      	b.n	8008cea <_printf_i+0x1a6>
 8008b68:	2a58      	cmp	r2, #88	; 0x58
 8008b6a:	d052      	beq.n	8008c12 <_printf_i+0xce>
 8008b6c:	0026      	movs	r6, r4
 8008b6e:	3642      	adds	r6, #66	; 0x42
 8008b70:	7032      	strb	r2, [r6, #0]
 8008b72:	e022      	b.n	8008bba <_printf_i+0x76>
 8008b74:	0010      	movs	r0, r2
 8008b76:	3863      	subs	r0, #99	; 0x63
 8008b78:	2815      	cmp	r0, #21
 8008b7a:	d8f7      	bhi.n	8008b6c <_printf_i+0x28>
 8008b7c:	f7f7 fad0 	bl	8000120 <__gnu_thumb1_case_shi>
 8008b80:	001f0016 	.word	0x001f0016
 8008b84:	fff6fff6 	.word	0xfff6fff6
 8008b88:	fff6fff6 	.word	0xfff6fff6
 8008b8c:	fff6001f 	.word	0xfff6001f
 8008b90:	fff6fff6 	.word	0xfff6fff6
 8008b94:	00a8fff6 	.word	0x00a8fff6
 8008b98:	009a0036 	.word	0x009a0036
 8008b9c:	fff6fff6 	.word	0xfff6fff6
 8008ba0:	fff600b9 	.word	0xfff600b9
 8008ba4:	fff60036 	.word	0xfff60036
 8008ba8:	009efff6 	.word	0x009efff6
 8008bac:	0026      	movs	r6, r4
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	3642      	adds	r6, #66	; 0x42
 8008bb2:	1d11      	adds	r1, r2, #4
 8008bb4:	6019      	str	r1, [r3, #0]
 8008bb6:	6813      	ldr	r3, [r2, #0]
 8008bb8:	7033      	strb	r3, [r6, #0]
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e0a7      	b.n	8008d0e <_printf_i+0x1ca>
 8008bbe:	6808      	ldr	r0, [r1, #0]
 8008bc0:	6819      	ldr	r1, [r3, #0]
 8008bc2:	1d0a      	adds	r2, r1, #4
 8008bc4:	0605      	lsls	r5, r0, #24
 8008bc6:	d50b      	bpl.n	8008be0 <_printf_i+0x9c>
 8008bc8:	680d      	ldr	r5, [r1, #0]
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	2d00      	cmp	r5, #0
 8008bce:	da03      	bge.n	8008bd8 <_printf_i+0x94>
 8008bd0:	232d      	movs	r3, #45	; 0x2d
 8008bd2:	9a04      	ldr	r2, [sp, #16]
 8008bd4:	426d      	negs	r5, r5
 8008bd6:	7013      	strb	r3, [r2, #0]
 8008bd8:	4b61      	ldr	r3, [pc, #388]	; (8008d60 <_printf_i+0x21c>)
 8008bda:	270a      	movs	r7, #10
 8008bdc:	9303      	str	r3, [sp, #12]
 8008bde:	e032      	b.n	8008c46 <_printf_i+0x102>
 8008be0:	680d      	ldr	r5, [r1, #0]
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	0641      	lsls	r1, r0, #25
 8008be6:	d5f1      	bpl.n	8008bcc <_printf_i+0x88>
 8008be8:	b22d      	sxth	r5, r5
 8008bea:	e7ef      	b.n	8008bcc <_printf_i+0x88>
 8008bec:	680d      	ldr	r5, [r1, #0]
 8008bee:	6819      	ldr	r1, [r3, #0]
 8008bf0:	1d08      	adds	r0, r1, #4
 8008bf2:	6018      	str	r0, [r3, #0]
 8008bf4:	062e      	lsls	r6, r5, #24
 8008bf6:	d501      	bpl.n	8008bfc <_printf_i+0xb8>
 8008bf8:	680d      	ldr	r5, [r1, #0]
 8008bfa:	e003      	b.n	8008c04 <_printf_i+0xc0>
 8008bfc:	066d      	lsls	r5, r5, #25
 8008bfe:	d5fb      	bpl.n	8008bf8 <_printf_i+0xb4>
 8008c00:	680d      	ldr	r5, [r1, #0]
 8008c02:	b2ad      	uxth	r5, r5
 8008c04:	4b56      	ldr	r3, [pc, #344]	; (8008d60 <_printf_i+0x21c>)
 8008c06:	270a      	movs	r7, #10
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	2a6f      	cmp	r2, #111	; 0x6f
 8008c0c:	d117      	bne.n	8008c3e <_printf_i+0xfa>
 8008c0e:	2708      	movs	r7, #8
 8008c10:	e015      	b.n	8008c3e <_printf_i+0xfa>
 8008c12:	3145      	adds	r1, #69	; 0x45
 8008c14:	700a      	strb	r2, [r1, #0]
 8008c16:	4a52      	ldr	r2, [pc, #328]	; (8008d60 <_printf_i+0x21c>)
 8008c18:	9203      	str	r2, [sp, #12]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	6821      	ldr	r1, [r4, #0]
 8008c1e:	ca20      	ldmia	r2!, {r5}
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	0608      	lsls	r0, r1, #24
 8008c24:	d550      	bpl.n	8008cc8 <_printf_i+0x184>
 8008c26:	07cb      	lsls	r3, r1, #31
 8008c28:	d502      	bpl.n	8008c30 <_printf_i+0xec>
 8008c2a:	2320      	movs	r3, #32
 8008c2c:	4319      	orrs	r1, r3
 8008c2e:	6021      	str	r1, [r4, #0]
 8008c30:	2710      	movs	r7, #16
 8008c32:	2d00      	cmp	r5, #0
 8008c34:	d103      	bne.n	8008c3e <_printf_i+0xfa>
 8008c36:	2320      	movs	r3, #32
 8008c38:	6822      	ldr	r2, [r4, #0]
 8008c3a:	439a      	bics	r2, r3
 8008c3c:	6022      	str	r2, [r4, #0]
 8008c3e:	0023      	movs	r3, r4
 8008c40:	2200      	movs	r2, #0
 8008c42:	3343      	adds	r3, #67	; 0x43
 8008c44:	701a      	strb	r2, [r3, #0]
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	60a3      	str	r3, [r4, #8]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	db03      	blt.n	8008c56 <_printf_i+0x112>
 8008c4e:	2204      	movs	r2, #4
 8008c50:	6821      	ldr	r1, [r4, #0]
 8008c52:	4391      	bics	r1, r2
 8008c54:	6021      	str	r1, [r4, #0]
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	d102      	bne.n	8008c60 <_printf_i+0x11c>
 8008c5a:	9e04      	ldr	r6, [sp, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00c      	beq.n	8008c7a <_printf_i+0x136>
 8008c60:	9e04      	ldr	r6, [sp, #16]
 8008c62:	0028      	movs	r0, r5
 8008c64:	0039      	movs	r1, r7
 8008c66:	f7f7 faeb 	bl	8000240 <__aeabi_uidivmod>
 8008c6a:	9b03      	ldr	r3, [sp, #12]
 8008c6c:	3e01      	subs	r6, #1
 8008c6e:	5c5b      	ldrb	r3, [r3, r1]
 8008c70:	7033      	strb	r3, [r6, #0]
 8008c72:	002b      	movs	r3, r5
 8008c74:	0005      	movs	r5, r0
 8008c76:	429f      	cmp	r7, r3
 8008c78:	d9f3      	bls.n	8008c62 <_printf_i+0x11e>
 8008c7a:	2f08      	cmp	r7, #8
 8008c7c:	d109      	bne.n	8008c92 <_printf_i+0x14e>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	07db      	lsls	r3, r3, #31
 8008c82:	d506      	bpl.n	8008c92 <_printf_i+0x14e>
 8008c84:	6863      	ldr	r3, [r4, #4]
 8008c86:	6922      	ldr	r2, [r4, #16]
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	dc02      	bgt.n	8008c92 <_printf_i+0x14e>
 8008c8c:	2330      	movs	r3, #48	; 0x30
 8008c8e:	3e01      	subs	r6, #1
 8008c90:	7033      	strb	r3, [r6, #0]
 8008c92:	9b04      	ldr	r3, [sp, #16]
 8008c94:	1b9b      	subs	r3, r3, r6
 8008c96:	6123      	str	r3, [r4, #16]
 8008c98:	9b07      	ldr	r3, [sp, #28]
 8008c9a:	0021      	movs	r1, r4
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	9805      	ldr	r0, [sp, #20]
 8008ca0:	9b06      	ldr	r3, [sp, #24]
 8008ca2:	aa09      	add	r2, sp, #36	; 0x24
 8008ca4:	f7ff fede 	bl	8008a64 <_printf_common>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	d135      	bne.n	8008d18 <_printf_i+0x1d4>
 8008cac:	2001      	movs	r0, #1
 8008cae:	4240      	negs	r0, r0
 8008cb0:	b00b      	add	sp, #44	; 0x2c
 8008cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	6809      	ldr	r1, [r1, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	6022      	str	r2, [r4, #0]
 8008cbc:	0022      	movs	r2, r4
 8008cbe:	2178      	movs	r1, #120	; 0x78
 8008cc0:	3245      	adds	r2, #69	; 0x45
 8008cc2:	7011      	strb	r1, [r2, #0]
 8008cc4:	4a27      	ldr	r2, [pc, #156]	; (8008d64 <_printf_i+0x220>)
 8008cc6:	e7a7      	b.n	8008c18 <_printf_i+0xd4>
 8008cc8:	0648      	lsls	r0, r1, #25
 8008cca:	d5ac      	bpl.n	8008c26 <_printf_i+0xe2>
 8008ccc:	b2ad      	uxth	r5, r5
 8008cce:	e7aa      	b.n	8008c26 <_printf_i+0xe2>
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	680d      	ldr	r5, [r1, #0]
 8008cd4:	1d10      	adds	r0, r2, #4
 8008cd6:	6949      	ldr	r1, [r1, #20]
 8008cd8:	6018      	str	r0, [r3, #0]
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	062e      	lsls	r6, r5, #24
 8008cde:	d501      	bpl.n	8008ce4 <_printf_i+0x1a0>
 8008ce0:	6019      	str	r1, [r3, #0]
 8008ce2:	e002      	b.n	8008cea <_printf_i+0x1a6>
 8008ce4:	066d      	lsls	r5, r5, #25
 8008ce6:	d5fb      	bpl.n	8008ce0 <_printf_i+0x19c>
 8008ce8:	8019      	strh	r1, [r3, #0]
 8008cea:	2300      	movs	r3, #0
 8008cec:	9e04      	ldr	r6, [sp, #16]
 8008cee:	6123      	str	r3, [r4, #16]
 8008cf0:	e7d2      	b.n	8008c98 <_printf_i+0x154>
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	1d11      	adds	r1, r2, #4
 8008cf6:	6019      	str	r1, [r3, #0]
 8008cf8:	6816      	ldr	r6, [r2, #0]
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	0030      	movs	r0, r6
 8008cfe:	6862      	ldr	r2, [r4, #4]
 8008d00:	f000 ff12 	bl	8009b28 <memchr>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d001      	beq.n	8008d0c <_printf_i+0x1c8>
 8008d08:	1b80      	subs	r0, r0, r6
 8008d0a:	6060      	str	r0, [r4, #4]
 8008d0c:	6863      	ldr	r3, [r4, #4]
 8008d0e:	6123      	str	r3, [r4, #16]
 8008d10:	2300      	movs	r3, #0
 8008d12:	9a04      	ldr	r2, [sp, #16]
 8008d14:	7013      	strb	r3, [r2, #0]
 8008d16:	e7bf      	b.n	8008c98 <_printf_i+0x154>
 8008d18:	6923      	ldr	r3, [r4, #16]
 8008d1a:	0032      	movs	r2, r6
 8008d1c:	9906      	ldr	r1, [sp, #24]
 8008d1e:	9805      	ldr	r0, [sp, #20]
 8008d20:	9d07      	ldr	r5, [sp, #28]
 8008d22:	47a8      	blx	r5
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d0c1      	beq.n	8008cac <_printf_i+0x168>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	079b      	lsls	r3, r3, #30
 8008d2c:	d415      	bmi.n	8008d5a <_printf_i+0x216>
 8008d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d30:	68e0      	ldr	r0, [r4, #12]
 8008d32:	4298      	cmp	r0, r3
 8008d34:	dabc      	bge.n	8008cb0 <_printf_i+0x16c>
 8008d36:	0018      	movs	r0, r3
 8008d38:	e7ba      	b.n	8008cb0 <_printf_i+0x16c>
 8008d3a:	0022      	movs	r2, r4
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	9906      	ldr	r1, [sp, #24]
 8008d40:	9805      	ldr	r0, [sp, #20]
 8008d42:	9e07      	ldr	r6, [sp, #28]
 8008d44:	3219      	adds	r2, #25
 8008d46:	47b0      	blx	r6
 8008d48:	1c43      	adds	r3, r0, #1
 8008d4a:	d0af      	beq.n	8008cac <_printf_i+0x168>
 8008d4c:	3501      	adds	r5, #1
 8008d4e:	68e3      	ldr	r3, [r4, #12]
 8008d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	42ab      	cmp	r3, r5
 8008d56:	dcf0      	bgt.n	8008d3a <_printf_i+0x1f6>
 8008d58:	e7e9      	b.n	8008d2e <_printf_i+0x1ea>
 8008d5a:	2500      	movs	r5, #0
 8008d5c:	e7f7      	b.n	8008d4e <_printf_i+0x20a>
 8008d5e:	46c0      	nop			; (mov r8, r8)
 8008d60:	0800b38e 	.word	0x0800b38e
 8008d64:	0800b39f 	.word	0x0800b39f

08008d68 <_sbrk_r>:
 8008d68:	2300      	movs	r3, #0
 8008d6a:	b570      	push	{r4, r5, r6, lr}
 8008d6c:	4d06      	ldr	r5, [pc, #24]	; (8008d88 <_sbrk_r+0x20>)
 8008d6e:	0004      	movs	r4, r0
 8008d70:	0008      	movs	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7fa fbfe 	bl	8003574 <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d103      	bne.n	8008d84 <_sbrk_r+0x1c>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d000      	beq.n	8008d84 <_sbrk_r+0x1c>
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	bd70      	pop	{r4, r5, r6, pc}
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	20000350 	.word	0x20000350

08008d8c <siprintf>:
 8008d8c:	b40e      	push	{r1, r2, r3}
 8008d8e:	b500      	push	{lr}
 8008d90:	490b      	ldr	r1, [pc, #44]	; (8008dc0 <siprintf+0x34>)
 8008d92:	b09c      	sub	sp, #112	; 0x70
 8008d94:	ab1d      	add	r3, sp, #116	; 0x74
 8008d96:	9002      	str	r0, [sp, #8]
 8008d98:	9006      	str	r0, [sp, #24]
 8008d9a:	9107      	str	r1, [sp, #28]
 8008d9c:	9104      	str	r1, [sp, #16]
 8008d9e:	4809      	ldr	r0, [pc, #36]	; (8008dc4 <siprintf+0x38>)
 8008da0:	4909      	ldr	r1, [pc, #36]	; (8008dc8 <siprintf+0x3c>)
 8008da2:	cb04      	ldmia	r3!, {r2}
 8008da4:	9105      	str	r1, [sp, #20]
 8008da6:	6800      	ldr	r0, [r0, #0]
 8008da8:	a902      	add	r1, sp, #8
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	f001 fae6 	bl	800a37c <_svfiprintf_r>
 8008db0:	2300      	movs	r3, #0
 8008db2:	9a02      	ldr	r2, [sp, #8]
 8008db4:	7013      	strb	r3, [r2, #0]
 8008db6:	b01c      	add	sp, #112	; 0x70
 8008db8:	bc08      	pop	{r3}
 8008dba:	b003      	add	sp, #12
 8008dbc:	4718      	bx	r3
 8008dbe:	46c0      	nop			; (mov r8, r8)
 8008dc0:	7fffffff 	.word	0x7fffffff
 8008dc4:	2000000c 	.word	0x2000000c
 8008dc8:	ffff0208 	.word	0xffff0208

08008dcc <quorem>:
 8008dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dce:	0006      	movs	r6, r0
 8008dd0:	690d      	ldr	r5, [r1, #16]
 8008dd2:	6933      	ldr	r3, [r6, #16]
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	9102      	str	r1, [sp, #8]
 8008dda:	42ab      	cmp	r3, r5
 8008ddc:	db6b      	blt.n	8008eb6 <quorem+0xea>
 8008dde:	000b      	movs	r3, r1
 8008de0:	3d01      	subs	r5, #1
 8008de2:	00ac      	lsls	r4, r5, #2
 8008de4:	3314      	adds	r3, #20
 8008de6:	9305      	str	r3, [sp, #20]
 8008de8:	191b      	adds	r3, r3, r4
 8008dea:	9303      	str	r3, [sp, #12]
 8008dec:	0033      	movs	r3, r6
 8008dee:	3314      	adds	r3, #20
 8008df0:	9301      	str	r3, [sp, #4]
 8008df2:	191c      	adds	r4, r3, r4
 8008df4:	9b03      	ldr	r3, [sp, #12]
 8008df6:	6827      	ldr	r7, [r4, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	0038      	movs	r0, r7
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	0019      	movs	r1, r3
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	f7f7 f996 	bl	8000134 <__udivsi3>
 8008e08:	9b04      	ldr	r3, [sp, #16]
 8008e0a:	9000      	str	r0, [sp, #0]
 8008e0c:	429f      	cmp	r7, r3
 8008e0e:	d329      	bcc.n	8008e64 <quorem+0x98>
 8008e10:	2300      	movs	r3, #0
 8008e12:	469c      	mov	ip, r3
 8008e14:	9801      	ldr	r0, [sp, #4]
 8008e16:	9f05      	ldr	r7, [sp, #20]
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	cf08      	ldmia	r7!, {r3}
 8008e1c:	9a00      	ldr	r2, [sp, #0]
 8008e1e:	b299      	uxth	r1, r3
 8008e20:	4351      	muls	r1, r2
 8008e22:	0c1b      	lsrs	r3, r3, #16
 8008e24:	4353      	muls	r3, r2
 8008e26:	4461      	add	r1, ip
 8008e28:	0c0a      	lsrs	r2, r1, #16
 8008e2a:	189b      	adds	r3, r3, r2
 8008e2c:	0c1a      	lsrs	r2, r3, #16
 8008e2e:	9305      	str	r3, [sp, #20]
 8008e30:	6803      	ldr	r3, [r0, #0]
 8008e32:	4694      	mov	ip, r2
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	b289      	uxth	r1, r1
 8008e3a:	18d2      	adds	r2, r2, r3
 8008e3c:	6803      	ldr	r3, [r0, #0]
 8008e3e:	1a52      	subs	r2, r2, r1
 8008e40:	0c19      	lsrs	r1, r3, #16
 8008e42:	466b      	mov	r3, sp
 8008e44:	8a9b      	ldrh	r3, [r3, #20]
 8008e46:	1acb      	subs	r3, r1, r3
 8008e48:	1411      	asrs	r1, r2, #16
 8008e4a:	185b      	adds	r3, r3, r1
 8008e4c:	1419      	asrs	r1, r3, #16
 8008e4e:	b292      	uxth	r2, r2
 8008e50:	041b      	lsls	r3, r3, #16
 8008e52:	431a      	orrs	r2, r3
 8008e54:	9b03      	ldr	r3, [sp, #12]
 8008e56:	9104      	str	r1, [sp, #16]
 8008e58:	c004      	stmia	r0!, {r2}
 8008e5a:	42bb      	cmp	r3, r7
 8008e5c:	d2dd      	bcs.n	8008e1a <quorem+0x4e>
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d02e      	beq.n	8008ec2 <quorem+0xf6>
 8008e64:	0030      	movs	r0, r6
 8008e66:	9902      	ldr	r1, [sp, #8]
 8008e68:	f001 f900 	bl	800a06c <__mcmp>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	db21      	blt.n	8008eb4 <quorem+0xe8>
 8008e70:	0030      	movs	r0, r6
 8008e72:	2400      	movs	r4, #0
 8008e74:	9b00      	ldr	r3, [sp, #0]
 8008e76:	9902      	ldr	r1, [sp, #8]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	3014      	adds	r0, #20
 8008e7e:	3114      	adds	r1, #20
 8008e80:	6802      	ldr	r2, [r0, #0]
 8008e82:	c908      	ldmia	r1!, {r3}
 8008e84:	b292      	uxth	r2, r2
 8008e86:	1914      	adds	r4, r2, r4
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	1aa2      	subs	r2, r4, r2
 8008e8c:	6804      	ldr	r4, [r0, #0]
 8008e8e:	0c1b      	lsrs	r3, r3, #16
 8008e90:	0c24      	lsrs	r4, r4, #16
 8008e92:	1ae3      	subs	r3, r4, r3
 8008e94:	1414      	asrs	r4, r2, #16
 8008e96:	191b      	adds	r3, r3, r4
 8008e98:	141c      	asrs	r4, r3, #16
 8008e9a:	b292      	uxth	r2, r2
 8008e9c:	041b      	lsls	r3, r3, #16
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	c008      	stmia	r0!, {r3}
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	d2eb      	bcs.n	8008e80 <quorem+0xb4>
 8008ea8:	9a01      	ldr	r2, [sp, #4]
 8008eaa:	00ab      	lsls	r3, r5, #2
 8008eac:	18d3      	adds	r3, r2, r3
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	2a00      	cmp	r2, #0
 8008eb2:	d010      	beq.n	8008ed6 <quorem+0x10a>
 8008eb4:	9800      	ldr	r0, [sp, #0]
 8008eb6:	b007      	add	sp, #28
 8008eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <quorem+0xfe>
 8008ec0:	3d01      	subs	r5, #1
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	3c04      	subs	r4, #4
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	d3f7      	bcc.n	8008eba <quorem+0xee>
 8008eca:	6135      	str	r5, [r6, #16]
 8008ecc:	e7ca      	b.n	8008e64 <quorem+0x98>
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	2a00      	cmp	r2, #0
 8008ed2:	d104      	bne.n	8008ede <quorem+0x112>
 8008ed4:	3d01      	subs	r5, #1
 8008ed6:	9a01      	ldr	r2, [sp, #4]
 8008ed8:	3b04      	subs	r3, #4
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d3f7      	bcc.n	8008ece <quorem+0x102>
 8008ede:	6135      	str	r5, [r6, #16]
 8008ee0:	e7e8      	b.n	8008eb4 <quorem+0xe8>
	...

08008ee4 <_dtoa_r>:
 8008ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee6:	b09d      	sub	sp, #116	; 0x74
 8008ee8:	9202      	str	r2, [sp, #8]
 8008eea:	9303      	str	r3, [sp, #12]
 8008eec:	9b02      	ldr	r3, [sp, #8]
 8008eee:	9c03      	ldr	r4, [sp, #12]
 8008ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef2:	940b      	str	r4, [sp, #44]	; 0x2c
 8008ef4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008ef6:	0007      	movs	r7, r0
 8008ef8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008efa:	2c00      	cmp	r4, #0
 8008efc:	d10e      	bne.n	8008f1c <_dtoa_r+0x38>
 8008efe:	2010      	movs	r0, #16
 8008f00:	f7ff f9f4 	bl	80082ec <malloc>
 8008f04:	1e02      	subs	r2, r0, #0
 8008f06:	6278      	str	r0, [r7, #36]	; 0x24
 8008f08:	d104      	bne.n	8008f14 <_dtoa_r+0x30>
 8008f0a:	21ea      	movs	r1, #234	; 0xea
 8008f0c:	4bc0      	ldr	r3, [pc, #768]	; (8009210 <_dtoa_r+0x32c>)
 8008f0e:	48c1      	ldr	r0, [pc, #772]	; (8009214 <_dtoa_r+0x330>)
 8008f10:	f001 fb34 	bl	800a57c <__assert_func>
 8008f14:	6044      	str	r4, [r0, #4]
 8008f16:	6084      	str	r4, [r0, #8]
 8008f18:	6004      	str	r4, [r0, #0]
 8008f1a:	60c4      	str	r4, [r0, #12]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	6819      	ldr	r1, [r3, #0]
 8008f20:	2900      	cmp	r1, #0
 8008f22:	d00a      	beq.n	8008f3a <_dtoa_r+0x56>
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	2301      	movs	r3, #1
 8008f28:	4093      	lsls	r3, r2
 8008f2a:	604a      	str	r2, [r1, #4]
 8008f2c:	608b      	str	r3, [r1, #8]
 8008f2e:	0038      	movs	r0, r7
 8008f30:	f000 fe5a 	bl	8009be8 <_Bfree>
 8008f34:	2200      	movs	r2, #0
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	da21      	bge.n	8008f84 <_dtoa_r+0xa0>
 8008f40:	2301      	movs	r3, #1
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	9b03      	ldr	r3, [sp, #12]
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008f4e:	4bb2      	ldr	r3, [pc, #712]	; (8009218 <_dtoa_r+0x334>)
 8008f50:	002a      	movs	r2, r5
 8008f52:	9318      	str	r3, [sp, #96]	; 0x60
 8008f54:	401a      	ands	r2, r3
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d117      	bne.n	8008f8a <_dtoa_r+0xa6>
 8008f5a:	4bb0      	ldr	r3, [pc, #704]	; (800921c <_dtoa_r+0x338>)
 8008f5c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f5e:	0328      	lsls	r0, r5, #12
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	9b02      	ldr	r3, [sp, #8]
 8008f64:	0b00      	lsrs	r0, r0, #12
 8008f66:	4318      	orrs	r0, r3
 8008f68:	d101      	bne.n	8008f6e <_dtoa_r+0x8a>
 8008f6a:	f000 fdc3 	bl	8009af4 <_dtoa_r+0xc10>
 8008f6e:	48ac      	ldr	r0, [pc, #688]	; (8009220 <_dtoa_r+0x33c>)
 8008f70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f72:	9005      	str	r0, [sp, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <_dtoa_r+0x9a>
 8008f78:	4baa      	ldr	r3, [pc, #680]	; (8009224 <_dtoa_r+0x340>)
 8008f7a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	9805      	ldr	r0, [sp, #20]
 8008f80:	b01d      	add	sp, #116	; 0x74
 8008f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f84:	2300      	movs	r3, #0
 8008f86:	602b      	str	r3, [r5, #0]
 8008f88:	e7e0      	b.n	8008f4c <_dtoa_r+0x68>
 8008f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f8c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008f8e:	9312      	str	r3, [sp, #72]	; 0x48
 8008f90:	9413      	str	r4, [sp, #76]	; 0x4c
 8008f92:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008f94:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008f96:	2200      	movs	r2, #0
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f7f7 fa51 	bl	8000440 <__aeabi_dcmpeq>
 8008f9e:	1e04      	subs	r4, r0, #0
 8008fa0:	d00b      	beq.n	8008fba <_dtoa_r+0xd6>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008fa6:	6013      	str	r3, [r2, #0]
 8008fa8:	4b9f      	ldr	r3, [pc, #636]	; (8009228 <_dtoa_r+0x344>)
 8008faa:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008fac:	9305      	str	r3, [sp, #20]
 8008fae:	2a00      	cmp	r2, #0
 8008fb0:	d0e5      	beq.n	8008f7e <_dtoa_r+0x9a>
 8008fb2:	4a9e      	ldr	r2, [pc, #632]	; (800922c <_dtoa_r+0x348>)
 8008fb4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008fb6:	600a      	str	r2, [r1, #0]
 8008fb8:	e7e1      	b.n	8008f7e <_dtoa_r+0x9a>
 8008fba:	ab1a      	add	r3, sp, #104	; 0x68
 8008fbc:	9301      	str	r3, [sp, #4]
 8008fbe:	ab1b      	add	r3, sp, #108	; 0x6c
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	0038      	movs	r0, r7
 8008fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008fc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fc8:	f001 f904 	bl	800a1d4 <__d2b>
 8008fcc:	006e      	lsls	r6, r5, #1
 8008fce:	9004      	str	r0, [sp, #16]
 8008fd0:	0d76      	lsrs	r6, r6, #21
 8008fd2:	d100      	bne.n	8008fd6 <_dtoa_r+0xf2>
 8008fd4:	e07c      	b.n	80090d0 <_dtoa_r+0x1ec>
 8008fd6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008fd8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008fda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008fdc:	4a94      	ldr	r2, [pc, #592]	; (8009230 <_dtoa_r+0x34c>)
 8008fde:	031b      	lsls	r3, r3, #12
 8008fe0:	0b1b      	lsrs	r3, r3, #12
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	0011      	movs	r1, r2
 8008fe6:	4b93      	ldr	r3, [pc, #588]	; (8009234 <_dtoa_r+0x350>)
 8008fe8:	9416      	str	r4, [sp, #88]	; 0x58
 8008fea:	18f6      	adds	r6, r6, r3
 8008fec:	2200      	movs	r2, #0
 8008fee:	4b92      	ldr	r3, [pc, #584]	; (8009238 <_dtoa_r+0x354>)
 8008ff0:	f7f8 febc 	bl	8001d6c <__aeabi_dsub>
 8008ff4:	4a91      	ldr	r2, [pc, #580]	; (800923c <_dtoa_r+0x358>)
 8008ff6:	4b92      	ldr	r3, [pc, #584]	; (8009240 <_dtoa_r+0x35c>)
 8008ff8:	f7f8 fc4c 	bl	8001894 <__aeabi_dmul>
 8008ffc:	4a91      	ldr	r2, [pc, #580]	; (8009244 <_dtoa_r+0x360>)
 8008ffe:	4b92      	ldr	r3, [pc, #584]	; (8009248 <_dtoa_r+0x364>)
 8009000:	f7f7 fcd8 	bl	80009b4 <__aeabi_dadd>
 8009004:	0004      	movs	r4, r0
 8009006:	0030      	movs	r0, r6
 8009008:	000d      	movs	r5, r1
 800900a:	f7f9 fa95 	bl	8002538 <__aeabi_i2d>
 800900e:	4a8f      	ldr	r2, [pc, #572]	; (800924c <_dtoa_r+0x368>)
 8009010:	4b8f      	ldr	r3, [pc, #572]	; (8009250 <_dtoa_r+0x36c>)
 8009012:	f7f8 fc3f 	bl	8001894 <__aeabi_dmul>
 8009016:	0002      	movs	r2, r0
 8009018:	000b      	movs	r3, r1
 800901a:	0020      	movs	r0, r4
 800901c:	0029      	movs	r1, r5
 800901e:	f7f7 fcc9 	bl	80009b4 <__aeabi_dadd>
 8009022:	0004      	movs	r4, r0
 8009024:	000d      	movs	r5, r1
 8009026:	f7f9 fa51 	bl	80024cc <__aeabi_d2iz>
 800902a:	2200      	movs	r2, #0
 800902c:	9002      	str	r0, [sp, #8]
 800902e:	2300      	movs	r3, #0
 8009030:	0020      	movs	r0, r4
 8009032:	0029      	movs	r1, r5
 8009034:	f7f7 fa0a 	bl	800044c <__aeabi_dcmplt>
 8009038:	2800      	cmp	r0, #0
 800903a:	d00b      	beq.n	8009054 <_dtoa_r+0x170>
 800903c:	9802      	ldr	r0, [sp, #8]
 800903e:	f7f9 fa7b 	bl	8002538 <__aeabi_i2d>
 8009042:	002b      	movs	r3, r5
 8009044:	0022      	movs	r2, r4
 8009046:	f7f7 f9fb 	bl	8000440 <__aeabi_dcmpeq>
 800904a:	4243      	negs	r3, r0
 800904c:	4158      	adcs	r0, r3
 800904e:	9b02      	ldr	r3, [sp, #8]
 8009050:	1a1b      	subs	r3, r3, r0
 8009052:	9302      	str	r3, [sp, #8]
 8009054:	2301      	movs	r3, #1
 8009056:	9315      	str	r3, [sp, #84]	; 0x54
 8009058:	9b02      	ldr	r3, [sp, #8]
 800905a:	2b16      	cmp	r3, #22
 800905c:	d80f      	bhi.n	800907e <_dtoa_r+0x19a>
 800905e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009060:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009062:	00da      	lsls	r2, r3, #3
 8009064:	4b7b      	ldr	r3, [pc, #492]	; (8009254 <_dtoa_r+0x370>)
 8009066:	189b      	adds	r3, r3, r2
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f7f7 f9ee 	bl	800044c <__aeabi_dcmplt>
 8009070:	2800      	cmp	r0, #0
 8009072:	d049      	beq.n	8009108 <_dtoa_r+0x224>
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	3b01      	subs	r3, #1
 8009078:	9302      	str	r3, [sp, #8]
 800907a:	2300      	movs	r3, #0
 800907c:	9315      	str	r3, [sp, #84]	; 0x54
 800907e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009080:	1b9e      	subs	r6, r3, r6
 8009082:	2300      	movs	r3, #0
 8009084:	9308      	str	r3, [sp, #32]
 8009086:	0033      	movs	r3, r6
 8009088:	3b01      	subs	r3, #1
 800908a:	930d      	str	r3, [sp, #52]	; 0x34
 800908c:	d504      	bpl.n	8009098 <_dtoa_r+0x1b4>
 800908e:	2301      	movs	r3, #1
 8009090:	1b9b      	subs	r3, r3, r6
 8009092:	9308      	str	r3, [sp, #32]
 8009094:	2300      	movs	r3, #0
 8009096:	930d      	str	r3, [sp, #52]	; 0x34
 8009098:	9b02      	ldr	r3, [sp, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	db36      	blt.n	800910c <_dtoa_r+0x228>
 800909e:	9a02      	ldr	r2, [sp, #8]
 80090a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090a2:	4694      	mov	ip, r2
 80090a4:	4463      	add	r3, ip
 80090a6:	930d      	str	r3, [sp, #52]	; 0x34
 80090a8:	2300      	movs	r3, #0
 80090aa:	9214      	str	r2, [sp, #80]	; 0x50
 80090ac:	930e      	str	r3, [sp, #56]	; 0x38
 80090ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090b0:	2401      	movs	r4, #1
 80090b2:	2b09      	cmp	r3, #9
 80090b4:	d862      	bhi.n	800917c <_dtoa_r+0x298>
 80090b6:	2b05      	cmp	r3, #5
 80090b8:	dd02      	ble.n	80090c0 <_dtoa_r+0x1dc>
 80090ba:	2400      	movs	r4, #0
 80090bc:	3b04      	subs	r3, #4
 80090be:	9322      	str	r3, [sp, #136]	; 0x88
 80090c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090c2:	1e98      	subs	r0, r3, #2
 80090c4:	2803      	cmp	r0, #3
 80090c6:	d862      	bhi.n	800918e <_dtoa_r+0x2aa>
 80090c8:	f7f7 f820 	bl	800010c <__gnu_thumb1_case_uqi>
 80090cc:	56343629 	.word	0x56343629
 80090d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80090d2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80090d4:	189e      	adds	r6, r3, r2
 80090d6:	4b60      	ldr	r3, [pc, #384]	; (8009258 <_dtoa_r+0x374>)
 80090d8:	18f2      	adds	r2, r6, r3
 80090da:	2a20      	cmp	r2, #32
 80090dc:	dd0f      	ble.n	80090fe <_dtoa_r+0x21a>
 80090de:	2340      	movs	r3, #64	; 0x40
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	409d      	lsls	r5, r3
 80090e4:	4b5d      	ldr	r3, [pc, #372]	; (800925c <_dtoa_r+0x378>)
 80090e6:	9802      	ldr	r0, [sp, #8]
 80090e8:	18f3      	adds	r3, r6, r3
 80090ea:	40d8      	lsrs	r0, r3
 80090ec:	4328      	orrs	r0, r5
 80090ee:	f7f9 fa53 	bl	8002598 <__aeabi_ui2d>
 80090f2:	2301      	movs	r3, #1
 80090f4:	4c5a      	ldr	r4, [pc, #360]	; (8009260 <_dtoa_r+0x37c>)
 80090f6:	3e01      	subs	r6, #1
 80090f8:	1909      	adds	r1, r1, r4
 80090fa:	9316      	str	r3, [sp, #88]	; 0x58
 80090fc:	e776      	b.n	8008fec <_dtoa_r+0x108>
 80090fe:	2320      	movs	r3, #32
 8009100:	9802      	ldr	r0, [sp, #8]
 8009102:	1a9b      	subs	r3, r3, r2
 8009104:	4098      	lsls	r0, r3
 8009106:	e7f2      	b.n	80090ee <_dtoa_r+0x20a>
 8009108:	9015      	str	r0, [sp, #84]	; 0x54
 800910a:	e7b8      	b.n	800907e <_dtoa_r+0x19a>
 800910c:	9b08      	ldr	r3, [sp, #32]
 800910e:	9a02      	ldr	r2, [sp, #8]
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	9308      	str	r3, [sp, #32]
 8009114:	4253      	negs	r3, r2
 8009116:	930e      	str	r3, [sp, #56]	; 0x38
 8009118:	2300      	movs	r3, #0
 800911a:	9314      	str	r3, [sp, #80]	; 0x50
 800911c:	e7c7      	b.n	80090ae <_dtoa_r+0x1ca>
 800911e:	2300      	movs	r3, #0
 8009120:	930f      	str	r3, [sp, #60]	; 0x3c
 8009122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009124:	2b00      	cmp	r3, #0
 8009126:	dc36      	bgt.n	8009196 <_dtoa_r+0x2b2>
 8009128:	2301      	movs	r3, #1
 800912a:	001a      	movs	r2, r3
 800912c:	930c      	str	r3, [sp, #48]	; 0x30
 800912e:	9306      	str	r3, [sp, #24]
 8009130:	9223      	str	r2, [sp, #140]	; 0x8c
 8009132:	e00d      	b.n	8009150 <_dtoa_r+0x26c>
 8009134:	2301      	movs	r3, #1
 8009136:	e7f3      	b.n	8009120 <_dtoa_r+0x23c>
 8009138:	2300      	movs	r3, #0
 800913a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800913c:	930f      	str	r3, [sp, #60]	; 0x3c
 800913e:	4694      	mov	ip, r2
 8009140:	9b02      	ldr	r3, [sp, #8]
 8009142:	4463      	add	r3, ip
 8009144:	930c      	str	r3, [sp, #48]	; 0x30
 8009146:	3301      	adds	r3, #1
 8009148:	9306      	str	r3, [sp, #24]
 800914a:	2b00      	cmp	r3, #0
 800914c:	dc00      	bgt.n	8009150 <_dtoa_r+0x26c>
 800914e:	2301      	movs	r3, #1
 8009150:	2200      	movs	r2, #0
 8009152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009154:	6042      	str	r2, [r0, #4]
 8009156:	3204      	adds	r2, #4
 8009158:	0015      	movs	r5, r2
 800915a:	3514      	adds	r5, #20
 800915c:	6841      	ldr	r1, [r0, #4]
 800915e:	429d      	cmp	r5, r3
 8009160:	d91d      	bls.n	800919e <_dtoa_r+0x2ba>
 8009162:	0038      	movs	r0, r7
 8009164:	f000 fcfc 	bl	8009b60 <_Balloc>
 8009168:	9005      	str	r0, [sp, #20]
 800916a:	2800      	cmp	r0, #0
 800916c:	d11b      	bne.n	80091a6 <_dtoa_r+0x2c2>
 800916e:	21d5      	movs	r1, #213	; 0xd5
 8009170:	0002      	movs	r2, r0
 8009172:	4b3c      	ldr	r3, [pc, #240]	; (8009264 <_dtoa_r+0x380>)
 8009174:	0049      	lsls	r1, r1, #1
 8009176:	e6ca      	b.n	8008f0e <_dtoa_r+0x2a>
 8009178:	2301      	movs	r3, #1
 800917a:	e7de      	b.n	800913a <_dtoa_r+0x256>
 800917c:	2300      	movs	r3, #0
 800917e:	940f      	str	r4, [sp, #60]	; 0x3c
 8009180:	9322      	str	r3, [sp, #136]	; 0x88
 8009182:	3b01      	subs	r3, #1
 8009184:	930c      	str	r3, [sp, #48]	; 0x30
 8009186:	9306      	str	r3, [sp, #24]
 8009188:	2200      	movs	r2, #0
 800918a:	3313      	adds	r3, #19
 800918c:	e7d0      	b.n	8009130 <_dtoa_r+0x24c>
 800918e:	2301      	movs	r3, #1
 8009190:	930f      	str	r3, [sp, #60]	; 0x3c
 8009192:	3b02      	subs	r3, #2
 8009194:	e7f6      	b.n	8009184 <_dtoa_r+0x2a0>
 8009196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009198:	930c      	str	r3, [sp, #48]	; 0x30
 800919a:	9306      	str	r3, [sp, #24]
 800919c:	e7d8      	b.n	8009150 <_dtoa_r+0x26c>
 800919e:	3101      	adds	r1, #1
 80091a0:	6041      	str	r1, [r0, #4]
 80091a2:	0052      	lsls	r2, r2, #1
 80091a4:	e7d8      	b.n	8009158 <_dtoa_r+0x274>
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	9a05      	ldr	r2, [sp, #20]
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	2b0e      	cmp	r3, #14
 80091b0:	d900      	bls.n	80091b4 <_dtoa_r+0x2d0>
 80091b2:	e0eb      	b.n	800938c <_dtoa_r+0x4a8>
 80091b4:	2c00      	cmp	r4, #0
 80091b6:	d100      	bne.n	80091ba <_dtoa_r+0x2d6>
 80091b8:	e0e8      	b.n	800938c <_dtoa_r+0x4a8>
 80091ba:	9b02      	ldr	r3, [sp, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	dd68      	ble.n	8009292 <_dtoa_r+0x3ae>
 80091c0:	001a      	movs	r2, r3
 80091c2:	210f      	movs	r1, #15
 80091c4:	4b23      	ldr	r3, [pc, #140]	; (8009254 <_dtoa_r+0x370>)
 80091c6:	400a      	ands	r2, r1
 80091c8:	00d2      	lsls	r2, r2, #3
 80091ca:	189b      	adds	r3, r3, r2
 80091cc:	681d      	ldr	r5, [r3, #0]
 80091ce:	685e      	ldr	r6, [r3, #4]
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	111c      	asrs	r4, r3, #4
 80091d4:	2302      	movs	r3, #2
 80091d6:	9310      	str	r3, [sp, #64]	; 0x40
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	05db      	lsls	r3, r3, #23
 80091dc:	d50b      	bpl.n	80091f6 <_dtoa_r+0x312>
 80091de:	4b22      	ldr	r3, [pc, #136]	; (8009268 <_dtoa_r+0x384>)
 80091e0:	400c      	ands	r4, r1
 80091e2:	6a1a      	ldr	r2, [r3, #32]
 80091e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80091e8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80091ea:	f7f7 ff4d 	bl	8001088 <__aeabi_ddiv>
 80091ee:	2303      	movs	r3, #3
 80091f0:	900a      	str	r0, [sp, #40]	; 0x28
 80091f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80091f4:	9310      	str	r3, [sp, #64]	; 0x40
 80091f6:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <_dtoa_r+0x384>)
 80091f8:	9307      	str	r3, [sp, #28]
 80091fa:	2c00      	cmp	r4, #0
 80091fc:	d136      	bne.n	800926c <_dtoa_r+0x388>
 80091fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009202:	002a      	movs	r2, r5
 8009204:	0033      	movs	r3, r6
 8009206:	f7f7 ff3f 	bl	8001088 <__aeabi_ddiv>
 800920a:	900a      	str	r0, [sp, #40]	; 0x28
 800920c:	910b      	str	r1, [sp, #44]	; 0x2c
 800920e:	e05c      	b.n	80092ca <_dtoa_r+0x3e6>
 8009210:	0800b3bd 	.word	0x0800b3bd
 8009214:	0800b3d4 	.word	0x0800b3d4
 8009218:	7ff00000 	.word	0x7ff00000
 800921c:	0000270f 	.word	0x0000270f
 8009220:	0800b3b9 	.word	0x0800b3b9
 8009224:	0800b3bc 	.word	0x0800b3bc
 8009228:	0800b38c 	.word	0x0800b38c
 800922c:	0800b38d 	.word	0x0800b38d
 8009230:	3ff00000 	.word	0x3ff00000
 8009234:	fffffc01 	.word	0xfffffc01
 8009238:	3ff80000 	.word	0x3ff80000
 800923c:	636f4361 	.word	0x636f4361
 8009240:	3fd287a7 	.word	0x3fd287a7
 8009244:	8b60c8b3 	.word	0x8b60c8b3
 8009248:	3fc68a28 	.word	0x3fc68a28
 800924c:	509f79fb 	.word	0x509f79fb
 8009250:	3fd34413 	.word	0x3fd34413
 8009254:	0800b4d0 	.word	0x0800b4d0
 8009258:	00000432 	.word	0x00000432
 800925c:	00000412 	.word	0x00000412
 8009260:	fe100000 	.word	0xfe100000
 8009264:	0800b433 	.word	0x0800b433
 8009268:	0800b4a8 	.word	0x0800b4a8
 800926c:	2301      	movs	r3, #1
 800926e:	421c      	tst	r4, r3
 8009270:	d00b      	beq.n	800928a <_dtoa_r+0x3a6>
 8009272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009274:	0028      	movs	r0, r5
 8009276:	3301      	adds	r3, #1
 8009278:	9310      	str	r3, [sp, #64]	; 0x40
 800927a:	9b07      	ldr	r3, [sp, #28]
 800927c:	0031      	movs	r1, r6
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f7f8 fb07 	bl	8001894 <__aeabi_dmul>
 8009286:	0005      	movs	r5, r0
 8009288:	000e      	movs	r6, r1
 800928a:	9b07      	ldr	r3, [sp, #28]
 800928c:	1064      	asrs	r4, r4, #1
 800928e:	3308      	adds	r3, #8
 8009290:	e7b2      	b.n	80091f8 <_dtoa_r+0x314>
 8009292:	2302      	movs	r3, #2
 8009294:	9310      	str	r3, [sp, #64]	; 0x40
 8009296:	9b02      	ldr	r3, [sp, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d016      	beq.n	80092ca <_dtoa_r+0x3e6>
 800929c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800929e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80092a0:	425c      	negs	r4, r3
 80092a2:	230f      	movs	r3, #15
 80092a4:	4ab5      	ldr	r2, [pc, #724]	; (800957c <_dtoa_r+0x698>)
 80092a6:	4023      	ands	r3, r4
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	18d3      	adds	r3, r2, r3
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f7f8 faf0 	bl	8001894 <__aeabi_dmul>
 80092b4:	2601      	movs	r6, #1
 80092b6:	2300      	movs	r3, #0
 80092b8:	900a      	str	r0, [sp, #40]	; 0x28
 80092ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80092bc:	4db0      	ldr	r5, [pc, #704]	; (8009580 <_dtoa_r+0x69c>)
 80092be:	1124      	asrs	r4, r4, #4
 80092c0:	2c00      	cmp	r4, #0
 80092c2:	d000      	beq.n	80092c6 <_dtoa_r+0x3e2>
 80092c4:	e094      	b.n	80093f0 <_dtoa_r+0x50c>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d19f      	bne.n	800920a <_dtoa_r+0x326>
 80092ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d100      	bne.n	80092d2 <_dtoa_r+0x3ee>
 80092d0:	e09b      	b.n	800940a <_dtoa_r+0x526>
 80092d2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80092d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80092d6:	2200      	movs	r2, #0
 80092d8:	0020      	movs	r0, r4
 80092da:	0029      	movs	r1, r5
 80092dc:	4ba9      	ldr	r3, [pc, #676]	; (8009584 <_dtoa_r+0x6a0>)
 80092de:	f7f7 f8b5 	bl	800044c <__aeabi_dcmplt>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d100      	bne.n	80092e8 <_dtoa_r+0x404>
 80092e6:	e090      	b.n	800940a <_dtoa_r+0x526>
 80092e8:	9b06      	ldr	r3, [sp, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d100      	bne.n	80092f0 <_dtoa_r+0x40c>
 80092ee:	e08c      	b.n	800940a <_dtoa_r+0x526>
 80092f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd46      	ble.n	8009384 <_dtoa_r+0x4a0>
 80092f6:	9b02      	ldr	r3, [sp, #8]
 80092f8:	2200      	movs	r2, #0
 80092fa:	0020      	movs	r0, r4
 80092fc:	0029      	movs	r1, r5
 80092fe:	1e5e      	subs	r6, r3, #1
 8009300:	4ba1      	ldr	r3, [pc, #644]	; (8009588 <_dtoa_r+0x6a4>)
 8009302:	f7f8 fac7 	bl	8001894 <__aeabi_dmul>
 8009306:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009308:	900a      	str	r0, [sp, #40]	; 0x28
 800930a:	910b      	str	r1, [sp, #44]	; 0x2c
 800930c:	3301      	adds	r3, #1
 800930e:	9310      	str	r3, [sp, #64]	; 0x40
 8009310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009312:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009314:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009316:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009318:	9307      	str	r3, [sp, #28]
 800931a:	f7f9 f90d 	bl	8002538 <__aeabi_i2d>
 800931e:	0022      	movs	r2, r4
 8009320:	002b      	movs	r3, r5
 8009322:	f7f8 fab7 	bl	8001894 <__aeabi_dmul>
 8009326:	2200      	movs	r2, #0
 8009328:	4b98      	ldr	r3, [pc, #608]	; (800958c <_dtoa_r+0x6a8>)
 800932a:	f7f7 fb43 	bl	80009b4 <__aeabi_dadd>
 800932e:	9010      	str	r0, [sp, #64]	; 0x40
 8009330:	9111      	str	r1, [sp, #68]	; 0x44
 8009332:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009334:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009336:	920a      	str	r2, [sp, #40]	; 0x28
 8009338:	930b      	str	r3, [sp, #44]	; 0x2c
 800933a:	4a95      	ldr	r2, [pc, #596]	; (8009590 <_dtoa_r+0x6ac>)
 800933c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800933e:	4694      	mov	ip, r2
 8009340:	4463      	add	r3, ip
 8009342:	9317      	str	r3, [sp, #92]	; 0x5c
 8009344:	930b      	str	r3, [sp, #44]	; 0x2c
 8009346:	9b07      	ldr	r3, [sp, #28]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d161      	bne.n	8009410 <_dtoa_r+0x52c>
 800934c:	2200      	movs	r2, #0
 800934e:	0020      	movs	r0, r4
 8009350:	0029      	movs	r1, r5
 8009352:	4b90      	ldr	r3, [pc, #576]	; (8009594 <_dtoa_r+0x6b0>)
 8009354:	f7f8 fd0a 	bl	8001d6c <__aeabi_dsub>
 8009358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800935a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800935c:	0004      	movs	r4, r0
 800935e:	000d      	movs	r5, r1
 8009360:	f7f7 f888 	bl	8000474 <__aeabi_dcmpgt>
 8009364:	2800      	cmp	r0, #0
 8009366:	d000      	beq.n	800936a <_dtoa_r+0x486>
 8009368:	e2b5      	b.n	80098d6 <_dtoa_r+0x9f2>
 800936a:	488b      	ldr	r0, [pc, #556]	; (8009598 <_dtoa_r+0x6b4>)
 800936c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800936e:	4684      	mov	ip, r0
 8009370:	4461      	add	r1, ip
 8009372:	000b      	movs	r3, r1
 8009374:	0020      	movs	r0, r4
 8009376:	0029      	movs	r1, r5
 8009378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800937a:	f7f7 f867 	bl	800044c <__aeabi_dcmplt>
 800937e:	2800      	cmp	r0, #0
 8009380:	d000      	beq.n	8009384 <_dtoa_r+0x4a0>
 8009382:	e2a5      	b.n	80098d0 <_dtoa_r+0x9ec>
 8009384:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009386:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8009388:	930a      	str	r3, [sp, #40]	; 0x28
 800938a:	940b      	str	r4, [sp, #44]	; 0x2c
 800938c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800938e:	2b00      	cmp	r3, #0
 8009390:	da00      	bge.n	8009394 <_dtoa_r+0x4b0>
 8009392:	e171      	b.n	8009678 <_dtoa_r+0x794>
 8009394:	9a02      	ldr	r2, [sp, #8]
 8009396:	2a0e      	cmp	r2, #14
 8009398:	dd00      	ble.n	800939c <_dtoa_r+0x4b8>
 800939a:	e16d      	b.n	8009678 <_dtoa_r+0x794>
 800939c:	4b77      	ldr	r3, [pc, #476]	; (800957c <_dtoa_r+0x698>)
 800939e:	00d2      	lsls	r2, r2, #3
 80093a0:	189b      	adds	r3, r3, r2
 80093a2:	685c      	ldr	r4, [r3, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	9308      	str	r3, [sp, #32]
 80093a8:	9409      	str	r4, [sp, #36]	; 0x24
 80093aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	db00      	blt.n	80093b2 <_dtoa_r+0x4ce>
 80093b0:	e0f6      	b.n	80095a0 <_dtoa_r+0x6bc>
 80093b2:	9b06      	ldr	r3, [sp, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dd00      	ble.n	80093ba <_dtoa_r+0x4d6>
 80093b8:	e0f2      	b.n	80095a0 <_dtoa_r+0x6bc>
 80093ba:	d000      	beq.n	80093be <_dtoa_r+0x4da>
 80093bc:	e288      	b.n	80098d0 <_dtoa_r+0x9ec>
 80093be:	9808      	ldr	r0, [sp, #32]
 80093c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093c2:	2200      	movs	r2, #0
 80093c4:	4b73      	ldr	r3, [pc, #460]	; (8009594 <_dtoa_r+0x6b0>)
 80093c6:	f7f8 fa65 	bl	8001894 <__aeabi_dmul>
 80093ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ce:	f7f7 f85b 	bl	8000488 <__aeabi_dcmpge>
 80093d2:	9e06      	ldr	r6, [sp, #24]
 80093d4:	0035      	movs	r5, r6
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d000      	beq.n	80093dc <_dtoa_r+0x4f8>
 80093da:	e25f      	b.n	800989c <_dtoa_r+0x9b8>
 80093dc:	9b05      	ldr	r3, [sp, #20]
 80093de:	9a05      	ldr	r2, [sp, #20]
 80093e0:	3301      	adds	r3, #1
 80093e2:	9307      	str	r3, [sp, #28]
 80093e4:	2331      	movs	r3, #49	; 0x31
 80093e6:	7013      	strb	r3, [r2, #0]
 80093e8:	9b02      	ldr	r3, [sp, #8]
 80093ea:	3301      	adds	r3, #1
 80093ec:	9302      	str	r3, [sp, #8]
 80093ee:	e25a      	b.n	80098a6 <_dtoa_r+0x9c2>
 80093f0:	4234      	tst	r4, r6
 80093f2:	d007      	beq.n	8009404 <_dtoa_r+0x520>
 80093f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093f6:	3301      	adds	r3, #1
 80093f8:	9310      	str	r3, [sp, #64]	; 0x40
 80093fa:	682a      	ldr	r2, [r5, #0]
 80093fc:	686b      	ldr	r3, [r5, #4]
 80093fe:	f7f8 fa49 	bl	8001894 <__aeabi_dmul>
 8009402:	0033      	movs	r3, r6
 8009404:	1064      	asrs	r4, r4, #1
 8009406:	3508      	adds	r5, #8
 8009408:	e75a      	b.n	80092c0 <_dtoa_r+0x3dc>
 800940a:	9e02      	ldr	r6, [sp, #8]
 800940c:	9b06      	ldr	r3, [sp, #24]
 800940e:	e780      	b.n	8009312 <_dtoa_r+0x42e>
 8009410:	9b07      	ldr	r3, [sp, #28]
 8009412:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009414:	1e5a      	subs	r2, r3, #1
 8009416:	4b59      	ldr	r3, [pc, #356]	; (800957c <_dtoa_r+0x698>)
 8009418:	00d2      	lsls	r2, r2, #3
 800941a:	189b      	adds	r3, r3, r2
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	2900      	cmp	r1, #0
 8009422:	d051      	beq.n	80094c8 <_dtoa_r+0x5e4>
 8009424:	2000      	movs	r0, #0
 8009426:	495d      	ldr	r1, [pc, #372]	; (800959c <_dtoa_r+0x6b8>)
 8009428:	f7f7 fe2e 	bl	8001088 <__aeabi_ddiv>
 800942c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800942e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009430:	f7f8 fc9c 	bl	8001d6c <__aeabi_dsub>
 8009434:	9a05      	ldr	r2, [sp, #20]
 8009436:	9b05      	ldr	r3, [sp, #20]
 8009438:	4694      	mov	ip, r2
 800943a:	9310      	str	r3, [sp, #64]	; 0x40
 800943c:	9b07      	ldr	r3, [sp, #28]
 800943e:	900a      	str	r0, [sp, #40]	; 0x28
 8009440:	910b      	str	r1, [sp, #44]	; 0x2c
 8009442:	4463      	add	r3, ip
 8009444:	9319      	str	r3, [sp, #100]	; 0x64
 8009446:	0029      	movs	r1, r5
 8009448:	0020      	movs	r0, r4
 800944a:	f7f9 f83f 	bl	80024cc <__aeabi_d2iz>
 800944e:	9017      	str	r0, [sp, #92]	; 0x5c
 8009450:	f7f9 f872 	bl	8002538 <__aeabi_i2d>
 8009454:	0002      	movs	r2, r0
 8009456:	000b      	movs	r3, r1
 8009458:	0020      	movs	r0, r4
 800945a:	0029      	movs	r1, r5
 800945c:	f7f8 fc86 	bl	8001d6c <__aeabi_dsub>
 8009460:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009462:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009464:	3301      	adds	r3, #1
 8009466:	9307      	str	r3, [sp, #28]
 8009468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800946a:	0004      	movs	r4, r0
 800946c:	3330      	adds	r3, #48	; 0x30
 800946e:	7013      	strb	r3, [r2, #0]
 8009470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009474:	000d      	movs	r5, r1
 8009476:	f7f6 ffe9 	bl	800044c <__aeabi_dcmplt>
 800947a:	2800      	cmp	r0, #0
 800947c:	d175      	bne.n	800956a <_dtoa_r+0x686>
 800947e:	0022      	movs	r2, r4
 8009480:	002b      	movs	r3, r5
 8009482:	2000      	movs	r0, #0
 8009484:	493f      	ldr	r1, [pc, #252]	; (8009584 <_dtoa_r+0x6a0>)
 8009486:	f7f8 fc71 	bl	8001d6c <__aeabi_dsub>
 800948a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800948c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800948e:	f7f6 ffdd 	bl	800044c <__aeabi_dcmplt>
 8009492:	2800      	cmp	r0, #0
 8009494:	d000      	beq.n	8009498 <_dtoa_r+0x5b4>
 8009496:	e0d1      	b.n	800963c <_dtoa_r+0x758>
 8009498:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800949a:	9a07      	ldr	r2, [sp, #28]
 800949c:	4293      	cmp	r3, r2
 800949e:	d100      	bne.n	80094a2 <_dtoa_r+0x5be>
 80094a0:	e770      	b.n	8009384 <_dtoa_r+0x4a0>
 80094a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094a6:	2200      	movs	r2, #0
 80094a8:	4b37      	ldr	r3, [pc, #220]	; (8009588 <_dtoa_r+0x6a4>)
 80094aa:	f7f8 f9f3 	bl	8001894 <__aeabi_dmul>
 80094ae:	4b36      	ldr	r3, [pc, #216]	; (8009588 <_dtoa_r+0x6a4>)
 80094b0:	900a      	str	r0, [sp, #40]	; 0x28
 80094b2:	910b      	str	r1, [sp, #44]	; 0x2c
 80094b4:	2200      	movs	r2, #0
 80094b6:	0020      	movs	r0, r4
 80094b8:	0029      	movs	r1, r5
 80094ba:	f7f8 f9eb 	bl	8001894 <__aeabi_dmul>
 80094be:	9b07      	ldr	r3, [sp, #28]
 80094c0:	0004      	movs	r4, r0
 80094c2:	000d      	movs	r5, r1
 80094c4:	9310      	str	r3, [sp, #64]	; 0x40
 80094c6:	e7be      	b.n	8009446 <_dtoa_r+0x562>
 80094c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80094ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094cc:	f7f8 f9e2 	bl	8001894 <__aeabi_dmul>
 80094d0:	9a05      	ldr	r2, [sp, #20]
 80094d2:	9b05      	ldr	r3, [sp, #20]
 80094d4:	4694      	mov	ip, r2
 80094d6:	930a      	str	r3, [sp, #40]	; 0x28
 80094d8:	9b07      	ldr	r3, [sp, #28]
 80094da:	9010      	str	r0, [sp, #64]	; 0x40
 80094dc:	9111      	str	r1, [sp, #68]	; 0x44
 80094de:	4463      	add	r3, ip
 80094e0:	9319      	str	r3, [sp, #100]	; 0x64
 80094e2:	0029      	movs	r1, r5
 80094e4:	0020      	movs	r0, r4
 80094e6:	f7f8 fff1 	bl	80024cc <__aeabi_d2iz>
 80094ea:	9017      	str	r0, [sp, #92]	; 0x5c
 80094ec:	f7f9 f824 	bl	8002538 <__aeabi_i2d>
 80094f0:	0002      	movs	r2, r0
 80094f2:	000b      	movs	r3, r1
 80094f4:	0020      	movs	r0, r4
 80094f6:	0029      	movs	r1, r5
 80094f8:	f7f8 fc38 	bl	8001d6c <__aeabi_dsub>
 80094fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009500:	3330      	adds	r3, #48	; 0x30
 8009502:	7013      	strb	r3, [r2, #0]
 8009504:	0013      	movs	r3, r2
 8009506:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009508:	3301      	adds	r3, #1
 800950a:	0004      	movs	r4, r0
 800950c:	000d      	movs	r5, r1
 800950e:	930a      	str	r3, [sp, #40]	; 0x28
 8009510:	4293      	cmp	r3, r2
 8009512:	d12c      	bne.n	800956e <_dtoa_r+0x68a>
 8009514:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009516:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009518:	9a05      	ldr	r2, [sp, #20]
 800951a:	9b07      	ldr	r3, [sp, #28]
 800951c:	4694      	mov	ip, r2
 800951e:	4463      	add	r3, ip
 8009520:	2200      	movs	r2, #0
 8009522:	9307      	str	r3, [sp, #28]
 8009524:	4b1d      	ldr	r3, [pc, #116]	; (800959c <_dtoa_r+0x6b8>)
 8009526:	f7f7 fa45 	bl	80009b4 <__aeabi_dadd>
 800952a:	0002      	movs	r2, r0
 800952c:	000b      	movs	r3, r1
 800952e:	0020      	movs	r0, r4
 8009530:	0029      	movs	r1, r5
 8009532:	f7f6 ff9f 	bl	8000474 <__aeabi_dcmpgt>
 8009536:	2800      	cmp	r0, #0
 8009538:	d000      	beq.n	800953c <_dtoa_r+0x658>
 800953a:	e07f      	b.n	800963c <_dtoa_r+0x758>
 800953c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800953e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009540:	2000      	movs	r0, #0
 8009542:	4916      	ldr	r1, [pc, #88]	; (800959c <_dtoa_r+0x6b8>)
 8009544:	f7f8 fc12 	bl	8001d6c <__aeabi_dsub>
 8009548:	0002      	movs	r2, r0
 800954a:	000b      	movs	r3, r1
 800954c:	0020      	movs	r0, r4
 800954e:	0029      	movs	r1, r5
 8009550:	f7f6 ff7c 	bl	800044c <__aeabi_dcmplt>
 8009554:	2800      	cmp	r0, #0
 8009556:	d100      	bne.n	800955a <_dtoa_r+0x676>
 8009558:	e714      	b.n	8009384 <_dtoa_r+0x4a0>
 800955a:	9b07      	ldr	r3, [sp, #28]
 800955c:	001a      	movs	r2, r3
 800955e:	3a01      	subs	r2, #1
 8009560:	9207      	str	r2, [sp, #28]
 8009562:	7812      	ldrb	r2, [r2, #0]
 8009564:	2a30      	cmp	r2, #48	; 0x30
 8009566:	d0f8      	beq.n	800955a <_dtoa_r+0x676>
 8009568:	9307      	str	r3, [sp, #28]
 800956a:	9602      	str	r6, [sp, #8]
 800956c:	e054      	b.n	8009618 <_dtoa_r+0x734>
 800956e:	2200      	movs	r2, #0
 8009570:	4b05      	ldr	r3, [pc, #20]	; (8009588 <_dtoa_r+0x6a4>)
 8009572:	f7f8 f98f 	bl	8001894 <__aeabi_dmul>
 8009576:	0004      	movs	r4, r0
 8009578:	000d      	movs	r5, r1
 800957a:	e7b2      	b.n	80094e2 <_dtoa_r+0x5fe>
 800957c:	0800b4d0 	.word	0x0800b4d0
 8009580:	0800b4a8 	.word	0x0800b4a8
 8009584:	3ff00000 	.word	0x3ff00000
 8009588:	40240000 	.word	0x40240000
 800958c:	401c0000 	.word	0x401c0000
 8009590:	fcc00000 	.word	0xfcc00000
 8009594:	40140000 	.word	0x40140000
 8009598:	7cc00000 	.word	0x7cc00000
 800959c:	3fe00000 	.word	0x3fe00000
 80095a0:	9b06      	ldr	r3, [sp, #24]
 80095a2:	9e05      	ldr	r6, [sp, #20]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	199b      	adds	r3, r3, r6
 80095a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80095ac:	930a      	str	r3, [sp, #40]	; 0x28
 80095ae:	9a08      	ldr	r2, [sp, #32]
 80095b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b2:	0020      	movs	r0, r4
 80095b4:	0029      	movs	r1, r5
 80095b6:	f7f7 fd67 	bl	8001088 <__aeabi_ddiv>
 80095ba:	f7f8 ff87 	bl	80024cc <__aeabi_d2iz>
 80095be:	9006      	str	r0, [sp, #24]
 80095c0:	f7f8 ffba 	bl	8002538 <__aeabi_i2d>
 80095c4:	9a08      	ldr	r2, [sp, #32]
 80095c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c8:	f7f8 f964 	bl	8001894 <__aeabi_dmul>
 80095cc:	0002      	movs	r2, r0
 80095ce:	000b      	movs	r3, r1
 80095d0:	0020      	movs	r0, r4
 80095d2:	0029      	movs	r1, r5
 80095d4:	f7f8 fbca 	bl	8001d6c <__aeabi_dsub>
 80095d8:	0033      	movs	r3, r6
 80095da:	9a06      	ldr	r2, [sp, #24]
 80095dc:	3601      	adds	r6, #1
 80095de:	3230      	adds	r2, #48	; 0x30
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e4:	9607      	str	r6, [sp, #28]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d139      	bne.n	800965e <_dtoa_r+0x77a>
 80095ea:	0002      	movs	r2, r0
 80095ec:	000b      	movs	r3, r1
 80095ee:	f7f7 f9e1 	bl	80009b4 <__aeabi_dadd>
 80095f2:	9a08      	ldr	r2, [sp, #32]
 80095f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f6:	0004      	movs	r4, r0
 80095f8:	000d      	movs	r5, r1
 80095fa:	f7f6 ff3b 	bl	8000474 <__aeabi_dcmpgt>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d11b      	bne.n	800963a <_dtoa_r+0x756>
 8009602:	9a08      	ldr	r2, [sp, #32]
 8009604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009606:	0020      	movs	r0, r4
 8009608:	0029      	movs	r1, r5
 800960a:	f7f6 ff19 	bl	8000440 <__aeabi_dcmpeq>
 800960e:	2800      	cmp	r0, #0
 8009610:	d002      	beq.n	8009618 <_dtoa_r+0x734>
 8009612:	9b06      	ldr	r3, [sp, #24]
 8009614:	07db      	lsls	r3, r3, #31
 8009616:	d410      	bmi.n	800963a <_dtoa_r+0x756>
 8009618:	0038      	movs	r0, r7
 800961a:	9904      	ldr	r1, [sp, #16]
 800961c:	f000 fae4 	bl	8009be8 <_Bfree>
 8009620:	2300      	movs	r3, #0
 8009622:	9a07      	ldr	r2, [sp, #28]
 8009624:	9802      	ldr	r0, [sp, #8]
 8009626:	7013      	strb	r3, [r2, #0]
 8009628:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800962a:	3001      	adds	r0, #1
 800962c:	6018      	str	r0, [r3, #0]
 800962e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009630:	2b00      	cmp	r3, #0
 8009632:	d100      	bne.n	8009636 <_dtoa_r+0x752>
 8009634:	e4a3      	b.n	8008f7e <_dtoa_r+0x9a>
 8009636:	601a      	str	r2, [r3, #0]
 8009638:	e4a1      	b.n	8008f7e <_dtoa_r+0x9a>
 800963a:	9e02      	ldr	r6, [sp, #8]
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	9307      	str	r3, [sp, #28]
 8009640:	3b01      	subs	r3, #1
 8009642:	781a      	ldrb	r2, [r3, #0]
 8009644:	2a39      	cmp	r2, #57	; 0x39
 8009646:	d106      	bne.n	8009656 <_dtoa_r+0x772>
 8009648:	9a05      	ldr	r2, [sp, #20]
 800964a:	429a      	cmp	r2, r3
 800964c:	d1f7      	bne.n	800963e <_dtoa_r+0x75a>
 800964e:	2230      	movs	r2, #48	; 0x30
 8009650:	9905      	ldr	r1, [sp, #20]
 8009652:	3601      	adds	r6, #1
 8009654:	700a      	strb	r2, [r1, #0]
 8009656:	781a      	ldrb	r2, [r3, #0]
 8009658:	3201      	adds	r2, #1
 800965a:	701a      	strb	r2, [r3, #0]
 800965c:	e785      	b.n	800956a <_dtoa_r+0x686>
 800965e:	2200      	movs	r2, #0
 8009660:	4bad      	ldr	r3, [pc, #692]	; (8009918 <_dtoa_r+0xa34>)
 8009662:	f7f8 f917 	bl	8001894 <__aeabi_dmul>
 8009666:	2200      	movs	r2, #0
 8009668:	2300      	movs	r3, #0
 800966a:	0004      	movs	r4, r0
 800966c:	000d      	movs	r5, r1
 800966e:	f7f6 fee7 	bl	8000440 <__aeabi_dcmpeq>
 8009672:	2800      	cmp	r0, #0
 8009674:	d09b      	beq.n	80095ae <_dtoa_r+0x6ca>
 8009676:	e7cf      	b.n	8009618 <_dtoa_r+0x734>
 8009678:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800967a:	2a00      	cmp	r2, #0
 800967c:	d100      	bne.n	8009680 <_dtoa_r+0x79c>
 800967e:	e082      	b.n	8009786 <_dtoa_r+0x8a2>
 8009680:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009682:	2a01      	cmp	r2, #1
 8009684:	dc66      	bgt.n	8009754 <_dtoa_r+0x870>
 8009686:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009688:	2a00      	cmp	r2, #0
 800968a:	d05f      	beq.n	800974c <_dtoa_r+0x868>
 800968c:	4aa3      	ldr	r2, [pc, #652]	; (800991c <_dtoa_r+0xa38>)
 800968e:	189b      	adds	r3, r3, r2
 8009690:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009692:	9c08      	ldr	r4, [sp, #32]
 8009694:	9a08      	ldr	r2, [sp, #32]
 8009696:	2101      	movs	r1, #1
 8009698:	18d2      	adds	r2, r2, r3
 800969a:	9208      	str	r2, [sp, #32]
 800969c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800969e:	0038      	movs	r0, r7
 80096a0:	18d3      	adds	r3, r2, r3
 80096a2:	930d      	str	r3, [sp, #52]	; 0x34
 80096a4:	f000 fb50 	bl	8009d48 <__i2b>
 80096a8:	0005      	movs	r5, r0
 80096aa:	2c00      	cmp	r4, #0
 80096ac:	dd0e      	ble.n	80096cc <_dtoa_r+0x7e8>
 80096ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dd0b      	ble.n	80096cc <_dtoa_r+0x7e8>
 80096b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096b6:	0023      	movs	r3, r4
 80096b8:	4294      	cmp	r4, r2
 80096ba:	dd00      	ble.n	80096be <_dtoa_r+0x7da>
 80096bc:	0013      	movs	r3, r2
 80096be:	9a08      	ldr	r2, [sp, #32]
 80096c0:	1ae4      	subs	r4, r4, r3
 80096c2:	1ad2      	subs	r2, r2, r3
 80096c4:	9208      	str	r2, [sp, #32]
 80096c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096c8:	1ad3      	subs	r3, r2, r3
 80096ca:	930d      	str	r3, [sp, #52]	; 0x34
 80096cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d01f      	beq.n	8009712 <_dtoa_r+0x82e>
 80096d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d05a      	beq.n	800978e <_dtoa_r+0x8aa>
 80096d8:	2e00      	cmp	r6, #0
 80096da:	dd11      	ble.n	8009700 <_dtoa_r+0x81c>
 80096dc:	0029      	movs	r1, r5
 80096de:	0032      	movs	r2, r6
 80096e0:	0038      	movs	r0, r7
 80096e2:	f000 fbf7 	bl	8009ed4 <__pow5mult>
 80096e6:	9a04      	ldr	r2, [sp, #16]
 80096e8:	0001      	movs	r1, r0
 80096ea:	0005      	movs	r5, r0
 80096ec:	0038      	movs	r0, r7
 80096ee:	f000 fb41 	bl	8009d74 <__multiply>
 80096f2:	9904      	ldr	r1, [sp, #16]
 80096f4:	9007      	str	r0, [sp, #28]
 80096f6:	0038      	movs	r0, r7
 80096f8:	f000 fa76 	bl	8009be8 <_Bfree>
 80096fc:	9b07      	ldr	r3, [sp, #28]
 80096fe:	9304      	str	r3, [sp, #16]
 8009700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009702:	1b9a      	subs	r2, r3, r6
 8009704:	42b3      	cmp	r3, r6
 8009706:	d004      	beq.n	8009712 <_dtoa_r+0x82e>
 8009708:	0038      	movs	r0, r7
 800970a:	9904      	ldr	r1, [sp, #16]
 800970c:	f000 fbe2 	bl	8009ed4 <__pow5mult>
 8009710:	9004      	str	r0, [sp, #16]
 8009712:	2101      	movs	r1, #1
 8009714:	0038      	movs	r0, r7
 8009716:	f000 fb17 	bl	8009d48 <__i2b>
 800971a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800971c:	0006      	movs	r6, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	dd37      	ble.n	8009792 <_dtoa_r+0x8ae>
 8009722:	001a      	movs	r2, r3
 8009724:	0001      	movs	r1, r0
 8009726:	0038      	movs	r0, r7
 8009728:	f000 fbd4 	bl	8009ed4 <__pow5mult>
 800972c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800972e:	0006      	movs	r6, r0
 8009730:	2b01      	cmp	r3, #1
 8009732:	dd33      	ble.n	800979c <_dtoa_r+0x8b8>
 8009734:	2300      	movs	r3, #0
 8009736:	9307      	str	r3, [sp, #28]
 8009738:	6933      	ldr	r3, [r6, #16]
 800973a:	3303      	adds	r3, #3
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	18f3      	adds	r3, r6, r3
 8009740:	6858      	ldr	r0, [r3, #4]
 8009742:	f000 fab9 	bl	8009cb8 <__hi0bits>
 8009746:	2320      	movs	r3, #32
 8009748:	1a18      	subs	r0, r3, r0
 800974a:	e03f      	b.n	80097cc <_dtoa_r+0x8e8>
 800974c:	2336      	movs	r3, #54	; 0x36
 800974e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009750:	1a9b      	subs	r3, r3, r2
 8009752:	e79d      	b.n	8009690 <_dtoa_r+0x7ac>
 8009754:	9b06      	ldr	r3, [sp, #24]
 8009756:	1e5e      	subs	r6, r3, #1
 8009758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800975a:	42b3      	cmp	r3, r6
 800975c:	db08      	blt.n	8009770 <_dtoa_r+0x88c>
 800975e:	1b9e      	subs	r6, r3, r6
 8009760:	9b06      	ldr	r3, [sp, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	da0c      	bge.n	8009780 <_dtoa_r+0x89c>
 8009766:	9b08      	ldr	r3, [sp, #32]
 8009768:	9a06      	ldr	r2, [sp, #24]
 800976a:	1a9c      	subs	r4, r3, r2
 800976c:	2300      	movs	r3, #0
 800976e:	e791      	b.n	8009694 <_dtoa_r+0x7b0>
 8009770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009772:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009774:	1af3      	subs	r3, r6, r3
 8009776:	18d3      	adds	r3, r2, r3
 8009778:	960e      	str	r6, [sp, #56]	; 0x38
 800977a:	9314      	str	r3, [sp, #80]	; 0x50
 800977c:	2600      	movs	r6, #0
 800977e:	e7ef      	b.n	8009760 <_dtoa_r+0x87c>
 8009780:	9c08      	ldr	r4, [sp, #32]
 8009782:	9b06      	ldr	r3, [sp, #24]
 8009784:	e786      	b.n	8009694 <_dtoa_r+0x7b0>
 8009786:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009788:	9c08      	ldr	r4, [sp, #32]
 800978a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800978c:	e78d      	b.n	80096aa <_dtoa_r+0x7c6>
 800978e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009790:	e7ba      	b.n	8009708 <_dtoa_r+0x824>
 8009792:	2300      	movs	r3, #0
 8009794:	9307      	str	r3, [sp, #28]
 8009796:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009798:	2b01      	cmp	r3, #1
 800979a:	dc13      	bgt.n	80097c4 <_dtoa_r+0x8e0>
 800979c:	2300      	movs	r3, #0
 800979e:	9307      	str	r3, [sp, #28]
 80097a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10e      	bne.n	80097c4 <_dtoa_r+0x8e0>
 80097a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097a8:	031b      	lsls	r3, r3, #12
 80097aa:	d10b      	bne.n	80097c4 <_dtoa_r+0x8e0>
 80097ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80097ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097b0:	4213      	tst	r3, r2
 80097b2:	d007      	beq.n	80097c4 <_dtoa_r+0x8e0>
 80097b4:	9b08      	ldr	r3, [sp, #32]
 80097b6:	3301      	adds	r3, #1
 80097b8:	9308      	str	r3, [sp, #32]
 80097ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097bc:	3301      	adds	r3, #1
 80097be:	930d      	str	r3, [sp, #52]	; 0x34
 80097c0:	2301      	movs	r3, #1
 80097c2:	9307      	str	r3, [sp, #28]
 80097c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097c6:	2001      	movs	r0, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1b5      	bne.n	8009738 <_dtoa_r+0x854>
 80097cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ce:	221f      	movs	r2, #31
 80097d0:	1818      	adds	r0, r3, r0
 80097d2:	0003      	movs	r3, r0
 80097d4:	4013      	ands	r3, r2
 80097d6:	4210      	tst	r0, r2
 80097d8:	d046      	beq.n	8009868 <_dtoa_r+0x984>
 80097da:	3201      	adds	r2, #1
 80097dc:	1ad2      	subs	r2, r2, r3
 80097de:	2a04      	cmp	r2, #4
 80097e0:	dd3f      	ble.n	8009862 <_dtoa_r+0x97e>
 80097e2:	221c      	movs	r2, #28
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	9a08      	ldr	r2, [sp, #32]
 80097e8:	18e4      	adds	r4, r4, r3
 80097ea:	18d2      	adds	r2, r2, r3
 80097ec:	9208      	str	r2, [sp, #32]
 80097ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097f0:	18d3      	adds	r3, r2, r3
 80097f2:	930d      	str	r3, [sp, #52]	; 0x34
 80097f4:	9b08      	ldr	r3, [sp, #32]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	dd05      	ble.n	8009806 <_dtoa_r+0x922>
 80097fa:	001a      	movs	r2, r3
 80097fc:	0038      	movs	r0, r7
 80097fe:	9904      	ldr	r1, [sp, #16]
 8009800:	f000 fbc4 	bl	8009f8c <__lshift>
 8009804:	9004      	str	r0, [sp, #16]
 8009806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009808:	2b00      	cmp	r3, #0
 800980a:	dd05      	ble.n	8009818 <_dtoa_r+0x934>
 800980c:	0031      	movs	r1, r6
 800980e:	001a      	movs	r2, r3
 8009810:	0038      	movs	r0, r7
 8009812:	f000 fbbb 	bl	8009f8c <__lshift>
 8009816:	0006      	movs	r6, r0
 8009818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800981a:	2b00      	cmp	r3, #0
 800981c:	d026      	beq.n	800986c <_dtoa_r+0x988>
 800981e:	0031      	movs	r1, r6
 8009820:	9804      	ldr	r0, [sp, #16]
 8009822:	f000 fc23 	bl	800a06c <__mcmp>
 8009826:	2800      	cmp	r0, #0
 8009828:	da20      	bge.n	800986c <_dtoa_r+0x988>
 800982a:	9b02      	ldr	r3, [sp, #8]
 800982c:	220a      	movs	r2, #10
 800982e:	3b01      	subs	r3, #1
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	0038      	movs	r0, r7
 8009834:	2300      	movs	r3, #0
 8009836:	9904      	ldr	r1, [sp, #16]
 8009838:	f000 f9fa 	bl	8009c30 <__multadd>
 800983c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800983e:	9004      	str	r0, [sp, #16]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d100      	bne.n	8009846 <_dtoa_r+0x962>
 8009844:	e160      	b.n	8009b08 <_dtoa_r+0xc24>
 8009846:	2300      	movs	r3, #0
 8009848:	0029      	movs	r1, r5
 800984a:	220a      	movs	r2, #10
 800984c:	0038      	movs	r0, r7
 800984e:	f000 f9ef 	bl	8009c30 <__multadd>
 8009852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009854:	0005      	movs	r5, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	dc47      	bgt.n	80098ea <_dtoa_r+0xa06>
 800985a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800985c:	2b02      	cmp	r3, #2
 800985e:	dc0d      	bgt.n	800987c <_dtoa_r+0x998>
 8009860:	e043      	b.n	80098ea <_dtoa_r+0xa06>
 8009862:	2a04      	cmp	r2, #4
 8009864:	d0c6      	beq.n	80097f4 <_dtoa_r+0x910>
 8009866:	0013      	movs	r3, r2
 8009868:	331c      	adds	r3, #28
 800986a:	e7bc      	b.n	80097e6 <_dtoa_r+0x902>
 800986c:	9b06      	ldr	r3, [sp, #24]
 800986e:	2b00      	cmp	r3, #0
 8009870:	dc35      	bgt.n	80098de <_dtoa_r+0x9fa>
 8009872:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009874:	2b02      	cmp	r3, #2
 8009876:	dd32      	ble.n	80098de <_dtoa_r+0x9fa>
 8009878:	9b06      	ldr	r3, [sp, #24]
 800987a:	930c      	str	r3, [sp, #48]	; 0x30
 800987c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10c      	bne.n	800989c <_dtoa_r+0x9b8>
 8009882:	0031      	movs	r1, r6
 8009884:	2205      	movs	r2, #5
 8009886:	0038      	movs	r0, r7
 8009888:	f000 f9d2 	bl	8009c30 <__multadd>
 800988c:	0006      	movs	r6, r0
 800988e:	0001      	movs	r1, r0
 8009890:	9804      	ldr	r0, [sp, #16]
 8009892:	f000 fbeb 	bl	800a06c <__mcmp>
 8009896:	2800      	cmp	r0, #0
 8009898:	dd00      	ble.n	800989c <_dtoa_r+0x9b8>
 800989a:	e59f      	b.n	80093dc <_dtoa_r+0x4f8>
 800989c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800989e:	43db      	mvns	r3, r3
 80098a0:	9302      	str	r3, [sp, #8]
 80098a2:	9b05      	ldr	r3, [sp, #20]
 80098a4:	9307      	str	r3, [sp, #28]
 80098a6:	2400      	movs	r4, #0
 80098a8:	0031      	movs	r1, r6
 80098aa:	0038      	movs	r0, r7
 80098ac:	f000 f99c 	bl	8009be8 <_Bfree>
 80098b0:	2d00      	cmp	r5, #0
 80098b2:	d100      	bne.n	80098b6 <_dtoa_r+0x9d2>
 80098b4:	e6b0      	b.n	8009618 <_dtoa_r+0x734>
 80098b6:	2c00      	cmp	r4, #0
 80098b8:	d005      	beq.n	80098c6 <_dtoa_r+0x9e2>
 80098ba:	42ac      	cmp	r4, r5
 80098bc:	d003      	beq.n	80098c6 <_dtoa_r+0x9e2>
 80098be:	0021      	movs	r1, r4
 80098c0:	0038      	movs	r0, r7
 80098c2:	f000 f991 	bl	8009be8 <_Bfree>
 80098c6:	0029      	movs	r1, r5
 80098c8:	0038      	movs	r0, r7
 80098ca:	f000 f98d 	bl	8009be8 <_Bfree>
 80098ce:	e6a3      	b.n	8009618 <_dtoa_r+0x734>
 80098d0:	2600      	movs	r6, #0
 80098d2:	0035      	movs	r5, r6
 80098d4:	e7e2      	b.n	800989c <_dtoa_r+0x9b8>
 80098d6:	9602      	str	r6, [sp, #8]
 80098d8:	9e07      	ldr	r6, [sp, #28]
 80098da:	0035      	movs	r5, r6
 80098dc:	e57e      	b.n	80093dc <_dtoa_r+0x4f8>
 80098de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d100      	bne.n	80098e6 <_dtoa_r+0xa02>
 80098e4:	e0c8      	b.n	8009a78 <_dtoa_r+0xb94>
 80098e6:	9b06      	ldr	r3, [sp, #24]
 80098e8:	930c      	str	r3, [sp, #48]	; 0x30
 80098ea:	2c00      	cmp	r4, #0
 80098ec:	dd05      	ble.n	80098fa <_dtoa_r+0xa16>
 80098ee:	0029      	movs	r1, r5
 80098f0:	0022      	movs	r2, r4
 80098f2:	0038      	movs	r0, r7
 80098f4:	f000 fb4a 	bl	8009f8c <__lshift>
 80098f8:	0005      	movs	r5, r0
 80098fa:	9b07      	ldr	r3, [sp, #28]
 80098fc:	0028      	movs	r0, r5
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d01f      	beq.n	8009942 <_dtoa_r+0xa5e>
 8009902:	0038      	movs	r0, r7
 8009904:	6869      	ldr	r1, [r5, #4]
 8009906:	f000 f92b 	bl	8009b60 <_Balloc>
 800990a:	1e04      	subs	r4, r0, #0
 800990c:	d10c      	bne.n	8009928 <_dtoa_r+0xa44>
 800990e:	0002      	movs	r2, r0
 8009910:	4b03      	ldr	r3, [pc, #12]	; (8009920 <_dtoa_r+0xa3c>)
 8009912:	4904      	ldr	r1, [pc, #16]	; (8009924 <_dtoa_r+0xa40>)
 8009914:	f7ff fafb 	bl	8008f0e <_dtoa_r+0x2a>
 8009918:	40240000 	.word	0x40240000
 800991c:	00000433 	.word	0x00000433
 8009920:	0800b433 	.word	0x0800b433
 8009924:	000002ea 	.word	0x000002ea
 8009928:	0029      	movs	r1, r5
 800992a:	692b      	ldr	r3, [r5, #16]
 800992c:	310c      	adds	r1, #12
 800992e:	1c9a      	adds	r2, r3, #2
 8009930:	0092      	lsls	r2, r2, #2
 8009932:	300c      	adds	r0, #12
 8009934:	f7fe fce4 	bl	8008300 <memcpy>
 8009938:	2201      	movs	r2, #1
 800993a:	0021      	movs	r1, r4
 800993c:	0038      	movs	r0, r7
 800993e:	f000 fb25 	bl	8009f8c <__lshift>
 8009942:	002c      	movs	r4, r5
 8009944:	0005      	movs	r5, r0
 8009946:	9b05      	ldr	r3, [sp, #20]
 8009948:	9308      	str	r3, [sp, #32]
 800994a:	0031      	movs	r1, r6
 800994c:	9804      	ldr	r0, [sp, #16]
 800994e:	f7ff fa3d 	bl	8008dcc <quorem>
 8009952:	0003      	movs	r3, r0
 8009954:	0021      	movs	r1, r4
 8009956:	3330      	adds	r3, #48	; 0x30
 8009958:	900e      	str	r0, [sp, #56]	; 0x38
 800995a:	9804      	ldr	r0, [sp, #16]
 800995c:	9306      	str	r3, [sp, #24]
 800995e:	f000 fb85 	bl	800a06c <__mcmp>
 8009962:	002a      	movs	r2, r5
 8009964:	900f      	str	r0, [sp, #60]	; 0x3c
 8009966:	0031      	movs	r1, r6
 8009968:	0038      	movs	r0, r7
 800996a:	f000 fb9b 	bl	800a0a4 <__mdiff>
 800996e:	68c3      	ldr	r3, [r0, #12]
 8009970:	9007      	str	r0, [sp, #28]
 8009972:	9310      	str	r3, [sp, #64]	; 0x40
 8009974:	2301      	movs	r3, #1
 8009976:	930d      	str	r3, [sp, #52]	; 0x34
 8009978:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	d104      	bne.n	8009988 <_dtoa_r+0xaa4>
 800997e:	0001      	movs	r1, r0
 8009980:	9804      	ldr	r0, [sp, #16]
 8009982:	f000 fb73 	bl	800a06c <__mcmp>
 8009986:	900d      	str	r0, [sp, #52]	; 0x34
 8009988:	0038      	movs	r0, r7
 800998a:	9907      	ldr	r1, [sp, #28]
 800998c:	f000 f92c 	bl	8009be8 <_Bfree>
 8009990:	2301      	movs	r3, #1
 8009992:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009994:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009996:	4018      	ands	r0, r3
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	3301      	adds	r3, #1
 800999c:	9307      	str	r3, [sp, #28]
 800999e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80099a0:	4313      	orrs	r3, r2
 80099a2:	4303      	orrs	r3, r0
 80099a4:	d10c      	bne.n	80099c0 <_dtoa_r+0xadc>
 80099a6:	9b06      	ldr	r3, [sp, #24]
 80099a8:	2b39      	cmp	r3, #57	; 0x39
 80099aa:	d025      	beq.n	80099f8 <_dtoa_r+0xb14>
 80099ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	dd02      	ble.n	80099b8 <_dtoa_r+0xad4>
 80099b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099b4:	3331      	adds	r3, #49	; 0x31
 80099b6:	9306      	str	r3, [sp, #24]
 80099b8:	9b08      	ldr	r3, [sp, #32]
 80099ba:	9a06      	ldr	r2, [sp, #24]
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	e773      	b.n	80098a8 <_dtoa_r+0x9c4>
 80099c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	db03      	blt.n	80099ce <_dtoa_r+0xaea>
 80099c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80099c8:	4313      	orrs	r3, r2
 80099ca:	4303      	orrs	r3, r0
 80099cc:	d11f      	bne.n	8009a0e <_dtoa_r+0xb2a>
 80099ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	ddf1      	ble.n	80099b8 <_dtoa_r+0xad4>
 80099d4:	9904      	ldr	r1, [sp, #16]
 80099d6:	2201      	movs	r2, #1
 80099d8:	0038      	movs	r0, r7
 80099da:	f000 fad7 	bl	8009f8c <__lshift>
 80099de:	0031      	movs	r1, r6
 80099e0:	9004      	str	r0, [sp, #16]
 80099e2:	f000 fb43 	bl	800a06c <__mcmp>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	dc03      	bgt.n	80099f2 <_dtoa_r+0xb0e>
 80099ea:	d1e5      	bne.n	80099b8 <_dtoa_r+0xad4>
 80099ec:	9b06      	ldr	r3, [sp, #24]
 80099ee:	07db      	lsls	r3, r3, #31
 80099f0:	d5e2      	bpl.n	80099b8 <_dtoa_r+0xad4>
 80099f2:	9b06      	ldr	r3, [sp, #24]
 80099f4:	2b39      	cmp	r3, #57	; 0x39
 80099f6:	d1dc      	bne.n	80099b2 <_dtoa_r+0xace>
 80099f8:	2339      	movs	r3, #57	; 0x39
 80099fa:	9a08      	ldr	r2, [sp, #32]
 80099fc:	7013      	strb	r3, [r2, #0]
 80099fe:	9b07      	ldr	r3, [sp, #28]
 8009a00:	9307      	str	r3, [sp, #28]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	781a      	ldrb	r2, [r3, #0]
 8009a06:	2a39      	cmp	r2, #57	; 0x39
 8009a08:	d06c      	beq.n	8009ae4 <_dtoa_r+0xc00>
 8009a0a:	3201      	adds	r2, #1
 8009a0c:	e7d6      	b.n	80099bc <_dtoa_r+0xad8>
 8009a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	dd07      	ble.n	8009a24 <_dtoa_r+0xb40>
 8009a14:	9b06      	ldr	r3, [sp, #24]
 8009a16:	2b39      	cmp	r3, #57	; 0x39
 8009a18:	d0ee      	beq.n	80099f8 <_dtoa_r+0xb14>
 8009a1a:	9b06      	ldr	r3, [sp, #24]
 8009a1c:	9a08      	ldr	r2, [sp, #32]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	7013      	strb	r3, [r2, #0]
 8009a22:	e741      	b.n	80098a8 <_dtoa_r+0x9c4>
 8009a24:	9b08      	ldr	r3, [sp, #32]
 8009a26:	9a06      	ldr	r2, [sp, #24]
 8009a28:	701a      	strb	r2, [r3, #0]
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	9a05      	ldr	r2, [sp, #20]
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	9a08      	ldr	r2, [sp, #32]
 8009a32:	189b      	adds	r3, r3, r2
 8009a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d03e      	beq.n	8009ab8 <_dtoa_r+0xbd4>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	220a      	movs	r2, #10
 8009a3e:	9904      	ldr	r1, [sp, #16]
 8009a40:	0038      	movs	r0, r7
 8009a42:	f000 f8f5 	bl	8009c30 <__multadd>
 8009a46:	2300      	movs	r3, #0
 8009a48:	9004      	str	r0, [sp, #16]
 8009a4a:	220a      	movs	r2, #10
 8009a4c:	0021      	movs	r1, r4
 8009a4e:	0038      	movs	r0, r7
 8009a50:	42ac      	cmp	r4, r5
 8009a52:	d106      	bne.n	8009a62 <_dtoa_r+0xb7e>
 8009a54:	f000 f8ec 	bl	8009c30 <__multadd>
 8009a58:	0004      	movs	r4, r0
 8009a5a:	0005      	movs	r5, r0
 8009a5c:	9b07      	ldr	r3, [sp, #28]
 8009a5e:	9308      	str	r3, [sp, #32]
 8009a60:	e773      	b.n	800994a <_dtoa_r+0xa66>
 8009a62:	f000 f8e5 	bl	8009c30 <__multadd>
 8009a66:	0029      	movs	r1, r5
 8009a68:	0004      	movs	r4, r0
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	220a      	movs	r2, #10
 8009a6e:	0038      	movs	r0, r7
 8009a70:	f000 f8de 	bl	8009c30 <__multadd>
 8009a74:	0005      	movs	r5, r0
 8009a76:	e7f1      	b.n	8009a5c <_dtoa_r+0xb78>
 8009a78:	9b06      	ldr	r3, [sp, #24]
 8009a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8009a7c:	2400      	movs	r4, #0
 8009a7e:	0031      	movs	r1, r6
 8009a80:	9804      	ldr	r0, [sp, #16]
 8009a82:	f7ff f9a3 	bl	8008dcc <quorem>
 8009a86:	9b05      	ldr	r3, [sp, #20]
 8009a88:	3030      	adds	r0, #48	; 0x30
 8009a8a:	5518      	strb	r0, [r3, r4]
 8009a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a8e:	3401      	adds	r4, #1
 8009a90:	9006      	str	r0, [sp, #24]
 8009a92:	42a3      	cmp	r3, r4
 8009a94:	dd07      	ble.n	8009aa6 <_dtoa_r+0xbc2>
 8009a96:	2300      	movs	r3, #0
 8009a98:	220a      	movs	r2, #10
 8009a9a:	0038      	movs	r0, r7
 8009a9c:	9904      	ldr	r1, [sp, #16]
 8009a9e:	f000 f8c7 	bl	8009c30 <__multadd>
 8009aa2:	9004      	str	r0, [sp, #16]
 8009aa4:	e7eb      	b.n	8009a7e <_dtoa_r+0xb9a>
 8009aa6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	dd00      	ble.n	8009ab0 <_dtoa_r+0xbcc>
 8009aae:	0018      	movs	r0, r3
 8009ab0:	2400      	movs	r4, #0
 8009ab2:	9b05      	ldr	r3, [sp, #20]
 8009ab4:	181b      	adds	r3, r3, r0
 8009ab6:	9307      	str	r3, [sp, #28]
 8009ab8:	9904      	ldr	r1, [sp, #16]
 8009aba:	2201      	movs	r2, #1
 8009abc:	0038      	movs	r0, r7
 8009abe:	f000 fa65 	bl	8009f8c <__lshift>
 8009ac2:	0031      	movs	r1, r6
 8009ac4:	9004      	str	r0, [sp, #16]
 8009ac6:	f000 fad1 	bl	800a06c <__mcmp>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	dc97      	bgt.n	80099fe <_dtoa_r+0xb1a>
 8009ace:	d102      	bne.n	8009ad6 <_dtoa_r+0xbf2>
 8009ad0:	9b06      	ldr	r3, [sp, #24]
 8009ad2:	07db      	lsls	r3, r3, #31
 8009ad4:	d493      	bmi.n	80099fe <_dtoa_r+0xb1a>
 8009ad6:	9b07      	ldr	r3, [sp, #28]
 8009ad8:	9307      	str	r3, [sp, #28]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	2a30      	cmp	r2, #48	; 0x30
 8009ae0:	d0fa      	beq.n	8009ad8 <_dtoa_r+0xbf4>
 8009ae2:	e6e1      	b.n	80098a8 <_dtoa_r+0x9c4>
 8009ae4:	9a05      	ldr	r2, [sp, #20]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d18a      	bne.n	8009a00 <_dtoa_r+0xb1c>
 8009aea:	9b02      	ldr	r3, [sp, #8]
 8009aec:	3301      	adds	r3, #1
 8009aee:	9302      	str	r3, [sp, #8]
 8009af0:	2331      	movs	r3, #49	; 0x31
 8009af2:	e795      	b.n	8009a20 <_dtoa_r+0xb3c>
 8009af4:	4b08      	ldr	r3, [pc, #32]	; (8009b18 <_dtoa_r+0xc34>)
 8009af6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009af8:	9305      	str	r3, [sp, #20]
 8009afa:	4b08      	ldr	r3, [pc, #32]	; (8009b1c <_dtoa_r+0xc38>)
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	d001      	beq.n	8009b04 <_dtoa_r+0xc20>
 8009b00:	f7ff fa3b 	bl	8008f7a <_dtoa_r+0x96>
 8009b04:	f7ff fa3b 	bl	8008f7e <_dtoa_r+0x9a>
 8009b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dcb6      	bgt.n	8009a7c <_dtoa_r+0xb98>
 8009b0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	dd00      	ble.n	8009b16 <_dtoa_r+0xc32>
 8009b14:	e6b2      	b.n	800987c <_dtoa_r+0x998>
 8009b16:	e7b1      	b.n	8009a7c <_dtoa_r+0xb98>
 8009b18:	0800b3b0 	.word	0x0800b3b0
 8009b1c:	0800b3b8 	.word	0x0800b3b8

08009b20 <_localeconv_r>:
 8009b20:	4800      	ldr	r0, [pc, #0]	; (8009b24 <_localeconv_r+0x4>)
 8009b22:	4770      	bx	lr
 8009b24:	20000160 	.word	0x20000160

08009b28 <memchr>:
 8009b28:	b2c9      	uxtb	r1, r1
 8009b2a:	1882      	adds	r2, r0, r2
 8009b2c:	4290      	cmp	r0, r2
 8009b2e:	d101      	bne.n	8009b34 <memchr+0xc>
 8009b30:	2000      	movs	r0, #0
 8009b32:	4770      	bx	lr
 8009b34:	7803      	ldrb	r3, [r0, #0]
 8009b36:	428b      	cmp	r3, r1
 8009b38:	d0fb      	beq.n	8009b32 <memchr+0xa>
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	e7f6      	b.n	8009b2c <memchr+0x4>
	...

08009b40 <__malloc_lock>:
 8009b40:	b510      	push	{r4, lr}
 8009b42:	4802      	ldr	r0, [pc, #8]	; (8009b4c <__malloc_lock+0xc>)
 8009b44:	f000 fd49 	bl	800a5da <__retarget_lock_acquire_recursive>
 8009b48:	bd10      	pop	{r4, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	20000358 	.word	0x20000358

08009b50 <__malloc_unlock>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	4802      	ldr	r0, [pc, #8]	; (8009b5c <__malloc_unlock+0xc>)
 8009b54:	f000 fd42 	bl	800a5dc <__retarget_lock_release_recursive>
 8009b58:	bd10      	pop	{r4, pc}
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	20000358 	.word	0x20000358

08009b60 <_Balloc>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b64:	0006      	movs	r6, r0
 8009b66:	000c      	movs	r4, r1
 8009b68:	2d00      	cmp	r5, #0
 8009b6a:	d10e      	bne.n	8009b8a <_Balloc+0x2a>
 8009b6c:	2010      	movs	r0, #16
 8009b6e:	f7fe fbbd 	bl	80082ec <malloc>
 8009b72:	1e02      	subs	r2, r0, #0
 8009b74:	6270      	str	r0, [r6, #36]	; 0x24
 8009b76:	d104      	bne.n	8009b82 <_Balloc+0x22>
 8009b78:	2166      	movs	r1, #102	; 0x66
 8009b7a:	4b19      	ldr	r3, [pc, #100]	; (8009be0 <_Balloc+0x80>)
 8009b7c:	4819      	ldr	r0, [pc, #100]	; (8009be4 <_Balloc+0x84>)
 8009b7e:	f000 fcfd 	bl	800a57c <__assert_func>
 8009b82:	6045      	str	r5, [r0, #4]
 8009b84:	6085      	str	r5, [r0, #8]
 8009b86:	6005      	str	r5, [r0, #0]
 8009b88:	60c5      	str	r5, [r0, #12]
 8009b8a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009b8c:	68eb      	ldr	r3, [r5, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d013      	beq.n	8009bba <_Balloc+0x5a>
 8009b92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009b94:	00a2      	lsls	r2, r4, #2
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	189b      	adds	r3, r3, r2
 8009b9a:	6818      	ldr	r0, [r3, #0]
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d118      	bne.n	8009bd2 <_Balloc+0x72>
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	000d      	movs	r5, r1
 8009ba4:	40a5      	lsls	r5, r4
 8009ba6:	1d6a      	adds	r2, r5, #5
 8009ba8:	0030      	movs	r0, r6
 8009baa:	0092      	lsls	r2, r2, #2
 8009bac:	f000 fb76 	bl	800a29c <_calloc_r>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d00c      	beq.n	8009bce <_Balloc+0x6e>
 8009bb4:	6044      	str	r4, [r0, #4]
 8009bb6:	6085      	str	r5, [r0, #8]
 8009bb8:	e00d      	b.n	8009bd6 <_Balloc+0x76>
 8009bba:	2221      	movs	r2, #33	; 0x21
 8009bbc:	2104      	movs	r1, #4
 8009bbe:	0030      	movs	r0, r6
 8009bc0:	f000 fb6c 	bl	800a29c <_calloc_r>
 8009bc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009bc6:	60e8      	str	r0, [r5, #12]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e1      	bne.n	8009b92 <_Balloc+0x32>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
 8009bd2:	6802      	ldr	r2, [r0, #0]
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	6103      	str	r3, [r0, #16]
 8009bda:	60c3      	str	r3, [r0, #12]
 8009bdc:	e7f8      	b.n	8009bd0 <_Balloc+0x70>
 8009bde:	46c0      	nop			; (mov r8, r8)
 8009be0:	0800b3bd 	.word	0x0800b3bd
 8009be4:	0800b444 	.word	0x0800b444

08009be8 <_Bfree>:
 8009be8:	b570      	push	{r4, r5, r6, lr}
 8009bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bec:	0005      	movs	r5, r0
 8009bee:	000c      	movs	r4, r1
 8009bf0:	2e00      	cmp	r6, #0
 8009bf2:	d10e      	bne.n	8009c12 <_Bfree+0x2a>
 8009bf4:	2010      	movs	r0, #16
 8009bf6:	f7fe fb79 	bl	80082ec <malloc>
 8009bfa:	1e02      	subs	r2, r0, #0
 8009bfc:	6268      	str	r0, [r5, #36]	; 0x24
 8009bfe:	d104      	bne.n	8009c0a <_Bfree+0x22>
 8009c00:	218a      	movs	r1, #138	; 0x8a
 8009c02:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <_Bfree+0x40>)
 8009c04:	4809      	ldr	r0, [pc, #36]	; (8009c2c <_Bfree+0x44>)
 8009c06:	f000 fcb9 	bl	800a57c <__assert_func>
 8009c0a:	6046      	str	r6, [r0, #4]
 8009c0c:	6086      	str	r6, [r0, #8]
 8009c0e:	6006      	str	r6, [r0, #0]
 8009c10:	60c6      	str	r6, [r0, #12]
 8009c12:	2c00      	cmp	r4, #0
 8009c14:	d007      	beq.n	8009c26 <_Bfree+0x3e>
 8009c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c18:	6862      	ldr	r2, [r4, #4]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	0092      	lsls	r2, r2, #2
 8009c1e:	189b      	adds	r3, r3, r2
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	6022      	str	r2, [r4, #0]
 8009c24:	601c      	str	r4, [r3, #0]
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	0800b3bd 	.word	0x0800b3bd
 8009c2c:	0800b444 	.word	0x0800b444

08009c30 <__multadd>:
 8009c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c32:	000e      	movs	r6, r1
 8009c34:	9001      	str	r0, [sp, #4]
 8009c36:	000c      	movs	r4, r1
 8009c38:	001d      	movs	r5, r3
 8009c3a:	2000      	movs	r0, #0
 8009c3c:	690f      	ldr	r7, [r1, #16]
 8009c3e:	3614      	adds	r6, #20
 8009c40:	6833      	ldr	r3, [r6, #0]
 8009c42:	3001      	adds	r0, #1
 8009c44:	b299      	uxth	r1, r3
 8009c46:	4351      	muls	r1, r2
 8009c48:	0c1b      	lsrs	r3, r3, #16
 8009c4a:	4353      	muls	r3, r2
 8009c4c:	1949      	adds	r1, r1, r5
 8009c4e:	0c0d      	lsrs	r5, r1, #16
 8009c50:	195b      	adds	r3, r3, r5
 8009c52:	0c1d      	lsrs	r5, r3, #16
 8009c54:	b289      	uxth	r1, r1
 8009c56:	041b      	lsls	r3, r3, #16
 8009c58:	185b      	adds	r3, r3, r1
 8009c5a:	c608      	stmia	r6!, {r3}
 8009c5c:	4287      	cmp	r7, r0
 8009c5e:	dcef      	bgt.n	8009c40 <__multadd+0x10>
 8009c60:	2d00      	cmp	r5, #0
 8009c62:	d022      	beq.n	8009caa <__multadd+0x7a>
 8009c64:	68a3      	ldr	r3, [r4, #8]
 8009c66:	42bb      	cmp	r3, r7
 8009c68:	dc19      	bgt.n	8009c9e <__multadd+0x6e>
 8009c6a:	6863      	ldr	r3, [r4, #4]
 8009c6c:	9801      	ldr	r0, [sp, #4]
 8009c6e:	1c59      	adds	r1, r3, #1
 8009c70:	f7ff ff76 	bl	8009b60 <_Balloc>
 8009c74:	1e06      	subs	r6, r0, #0
 8009c76:	d105      	bne.n	8009c84 <__multadd+0x54>
 8009c78:	0002      	movs	r2, r0
 8009c7a:	21b5      	movs	r1, #181	; 0xb5
 8009c7c:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <__multadd+0x80>)
 8009c7e:	480d      	ldr	r0, [pc, #52]	; (8009cb4 <__multadd+0x84>)
 8009c80:	f000 fc7c 	bl	800a57c <__assert_func>
 8009c84:	0021      	movs	r1, r4
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	310c      	adds	r1, #12
 8009c8a:	1c9a      	adds	r2, r3, #2
 8009c8c:	0092      	lsls	r2, r2, #2
 8009c8e:	300c      	adds	r0, #12
 8009c90:	f7fe fb36 	bl	8008300 <memcpy>
 8009c94:	0021      	movs	r1, r4
 8009c96:	9801      	ldr	r0, [sp, #4]
 8009c98:	f7ff ffa6 	bl	8009be8 <_Bfree>
 8009c9c:	0034      	movs	r4, r6
 8009c9e:	1d3b      	adds	r3, r7, #4
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	18e3      	adds	r3, r4, r3
 8009ca4:	605d      	str	r5, [r3, #4]
 8009ca6:	1c7b      	adds	r3, r7, #1
 8009ca8:	6123      	str	r3, [r4, #16]
 8009caa:	0020      	movs	r0, r4
 8009cac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009cae:	46c0      	nop			; (mov r8, r8)
 8009cb0:	0800b433 	.word	0x0800b433
 8009cb4:	0800b444 	.word	0x0800b444

08009cb8 <__hi0bits>:
 8009cb8:	0003      	movs	r3, r0
 8009cba:	0c02      	lsrs	r2, r0, #16
 8009cbc:	2000      	movs	r0, #0
 8009cbe:	4282      	cmp	r2, r0
 8009cc0:	d101      	bne.n	8009cc6 <__hi0bits+0xe>
 8009cc2:	041b      	lsls	r3, r3, #16
 8009cc4:	3010      	adds	r0, #16
 8009cc6:	0e1a      	lsrs	r2, r3, #24
 8009cc8:	d101      	bne.n	8009cce <__hi0bits+0x16>
 8009cca:	3008      	adds	r0, #8
 8009ccc:	021b      	lsls	r3, r3, #8
 8009cce:	0f1a      	lsrs	r2, r3, #28
 8009cd0:	d101      	bne.n	8009cd6 <__hi0bits+0x1e>
 8009cd2:	3004      	adds	r0, #4
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	0f9a      	lsrs	r2, r3, #30
 8009cd8:	d101      	bne.n	8009cde <__hi0bits+0x26>
 8009cda:	3002      	adds	r0, #2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	db03      	blt.n	8009cea <__hi0bits+0x32>
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	d400      	bmi.n	8009cea <__hi0bits+0x32>
 8009ce8:	2020      	movs	r0, #32
 8009cea:	4770      	bx	lr

08009cec <__lo0bits>:
 8009cec:	6803      	ldr	r3, [r0, #0]
 8009cee:	0002      	movs	r2, r0
 8009cf0:	2107      	movs	r1, #7
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	4008      	ands	r0, r1
 8009cf6:	420b      	tst	r3, r1
 8009cf8:	d00d      	beq.n	8009d16 <__lo0bits+0x2a>
 8009cfa:	3906      	subs	r1, #6
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	420b      	tst	r3, r1
 8009d00:	d105      	bne.n	8009d0e <__lo0bits+0x22>
 8009d02:	3002      	adds	r0, #2
 8009d04:	4203      	tst	r3, r0
 8009d06:	d003      	beq.n	8009d10 <__lo0bits+0x24>
 8009d08:	40cb      	lsrs	r3, r1
 8009d0a:	0008      	movs	r0, r1
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	4770      	bx	lr
 8009d10:	089b      	lsrs	r3, r3, #2
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	e7fb      	b.n	8009d0e <__lo0bits+0x22>
 8009d16:	b299      	uxth	r1, r3
 8009d18:	2900      	cmp	r1, #0
 8009d1a:	d101      	bne.n	8009d20 <__lo0bits+0x34>
 8009d1c:	2010      	movs	r0, #16
 8009d1e:	0c1b      	lsrs	r3, r3, #16
 8009d20:	b2d9      	uxtb	r1, r3
 8009d22:	2900      	cmp	r1, #0
 8009d24:	d101      	bne.n	8009d2a <__lo0bits+0x3e>
 8009d26:	3008      	adds	r0, #8
 8009d28:	0a1b      	lsrs	r3, r3, #8
 8009d2a:	0719      	lsls	r1, r3, #28
 8009d2c:	d101      	bne.n	8009d32 <__lo0bits+0x46>
 8009d2e:	3004      	adds	r0, #4
 8009d30:	091b      	lsrs	r3, r3, #4
 8009d32:	0799      	lsls	r1, r3, #30
 8009d34:	d101      	bne.n	8009d3a <__lo0bits+0x4e>
 8009d36:	3002      	adds	r0, #2
 8009d38:	089b      	lsrs	r3, r3, #2
 8009d3a:	07d9      	lsls	r1, r3, #31
 8009d3c:	d4e9      	bmi.n	8009d12 <__lo0bits+0x26>
 8009d3e:	3001      	adds	r0, #1
 8009d40:	085b      	lsrs	r3, r3, #1
 8009d42:	d1e6      	bne.n	8009d12 <__lo0bits+0x26>
 8009d44:	2020      	movs	r0, #32
 8009d46:	e7e2      	b.n	8009d0e <__lo0bits+0x22>

08009d48 <__i2b>:
 8009d48:	b510      	push	{r4, lr}
 8009d4a:	000c      	movs	r4, r1
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	f7ff ff07 	bl	8009b60 <_Balloc>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d106      	bne.n	8009d64 <__i2b+0x1c>
 8009d56:	21a0      	movs	r1, #160	; 0xa0
 8009d58:	0002      	movs	r2, r0
 8009d5a:	4b04      	ldr	r3, [pc, #16]	; (8009d6c <__i2b+0x24>)
 8009d5c:	4804      	ldr	r0, [pc, #16]	; (8009d70 <__i2b+0x28>)
 8009d5e:	0049      	lsls	r1, r1, #1
 8009d60:	f000 fc0c 	bl	800a57c <__assert_func>
 8009d64:	2301      	movs	r3, #1
 8009d66:	6144      	str	r4, [r0, #20]
 8009d68:	6103      	str	r3, [r0, #16]
 8009d6a:	bd10      	pop	{r4, pc}
 8009d6c:	0800b433 	.word	0x0800b433
 8009d70:	0800b444 	.word	0x0800b444

08009d74 <__multiply>:
 8009d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d76:	690b      	ldr	r3, [r1, #16]
 8009d78:	0014      	movs	r4, r2
 8009d7a:	6912      	ldr	r2, [r2, #16]
 8009d7c:	000d      	movs	r5, r1
 8009d7e:	b089      	sub	sp, #36	; 0x24
 8009d80:	4293      	cmp	r3, r2
 8009d82:	da01      	bge.n	8009d88 <__multiply+0x14>
 8009d84:	0025      	movs	r5, r4
 8009d86:	000c      	movs	r4, r1
 8009d88:	692f      	ldr	r7, [r5, #16]
 8009d8a:	6926      	ldr	r6, [r4, #16]
 8009d8c:	6869      	ldr	r1, [r5, #4]
 8009d8e:	19bb      	adds	r3, r7, r6
 8009d90:	9302      	str	r3, [sp, #8]
 8009d92:	68ab      	ldr	r3, [r5, #8]
 8009d94:	19ba      	adds	r2, r7, r6
 8009d96:	4293      	cmp	r3, r2
 8009d98:	da00      	bge.n	8009d9c <__multiply+0x28>
 8009d9a:	3101      	adds	r1, #1
 8009d9c:	f7ff fee0 	bl	8009b60 <_Balloc>
 8009da0:	9001      	str	r0, [sp, #4]
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d106      	bne.n	8009db4 <__multiply+0x40>
 8009da6:	215e      	movs	r1, #94	; 0x5e
 8009da8:	0002      	movs	r2, r0
 8009daa:	4b48      	ldr	r3, [pc, #288]	; (8009ecc <__multiply+0x158>)
 8009dac:	4848      	ldr	r0, [pc, #288]	; (8009ed0 <__multiply+0x15c>)
 8009dae:	31ff      	adds	r1, #255	; 0xff
 8009db0:	f000 fbe4 	bl	800a57c <__assert_func>
 8009db4:	9b01      	ldr	r3, [sp, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	3314      	adds	r3, #20
 8009dba:	469c      	mov	ip, r3
 8009dbc:	19bb      	adds	r3, r7, r6
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4463      	add	r3, ip
 8009dc2:	9303      	str	r3, [sp, #12]
 8009dc4:	4663      	mov	r3, ip
 8009dc6:	9903      	ldr	r1, [sp, #12]
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	d32c      	bcc.n	8009e26 <__multiply+0xb2>
 8009dcc:	002b      	movs	r3, r5
 8009dce:	0022      	movs	r2, r4
 8009dd0:	3314      	adds	r3, #20
 8009dd2:	00bf      	lsls	r7, r7, #2
 8009dd4:	3214      	adds	r2, #20
 8009dd6:	9306      	str	r3, [sp, #24]
 8009dd8:	00b6      	lsls	r6, r6, #2
 8009dda:	19db      	adds	r3, r3, r7
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	1993      	adds	r3, r2, r6
 8009de0:	9307      	str	r3, [sp, #28]
 8009de2:	2304      	movs	r3, #4
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	002b      	movs	r3, r5
 8009de8:	9904      	ldr	r1, [sp, #16]
 8009dea:	3315      	adds	r3, #21
 8009dec:	9200      	str	r2, [sp, #0]
 8009dee:	4299      	cmp	r1, r3
 8009df0:	d305      	bcc.n	8009dfe <__multiply+0x8a>
 8009df2:	1b4b      	subs	r3, r1, r5
 8009df4:	3b15      	subs	r3, #21
 8009df6:	089b      	lsrs	r3, r3, #2
 8009df8:	3301      	adds	r3, #1
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	9305      	str	r3, [sp, #20]
 8009dfe:	9b07      	ldr	r3, [sp, #28]
 8009e00:	9a00      	ldr	r2, [sp, #0]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d311      	bcc.n	8009e2a <__multiply+0xb6>
 8009e06:	9b02      	ldr	r3, [sp, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	dd06      	ble.n	8009e1a <__multiply+0xa6>
 8009e0c:	9b03      	ldr	r3, [sp, #12]
 8009e0e:	3b04      	subs	r3, #4
 8009e10:	9303      	str	r3, [sp, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d054      	beq.n	8009ec4 <__multiply+0x150>
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	9a02      	ldr	r2, [sp, #8]
 8009e1e:	0018      	movs	r0, r3
 8009e20:	611a      	str	r2, [r3, #16]
 8009e22:	b009      	add	sp, #36	; 0x24
 8009e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e26:	c304      	stmia	r3!, {r2}
 8009e28:	e7cd      	b.n	8009dc6 <__multiply+0x52>
 8009e2a:	9b00      	ldr	r3, [sp, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	b298      	uxth	r0, r3
 8009e30:	2800      	cmp	r0, #0
 8009e32:	d01c      	beq.n	8009e6e <__multiply+0xfa>
 8009e34:	4667      	mov	r7, ip
 8009e36:	2400      	movs	r4, #0
 8009e38:	9e06      	ldr	r6, [sp, #24]
 8009e3a:	ce02      	ldmia	r6!, {r1}
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	b28b      	uxth	r3, r1
 8009e40:	4343      	muls	r3, r0
 8009e42:	0c09      	lsrs	r1, r1, #16
 8009e44:	4341      	muls	r1, r0
 8009e46:	b292      	uxth	r2, r2
 8009e48:	189b      	adds	r3, r3, r2
 8009e4a:	191b      	adds	r3, r3, r4
 8009e4c:	000c      	movs	r4, r1
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	0c11      	lsrs	r1, r2, #16
 8009e52:	1861      	adds	r1, r4, r1
 8009e54:	0c1c      	lsrs	r4, r3, #16
 8009e56:	1909      	adds	r1, r1, r4
 8009e58:	0c0c      	lsrs	r4, r1, #16
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	0409      	lsls	r1, r1, #16
 8009e5e:	430b      	orrs	r3, r1
 8009e60:	c708      	stmia	r7!, {r3}
 8009e62:	9b04      	ldr	r3, [sp, #16]
 8009e64:	42b3      	cmp	r3, r6
 8009e66:	d8e8      	bhi.n	8009e3a <__multiply+0xc6>
 8009e68:	4663      	mov	r3, ip
 8009e6a:	9a05      	ldr	r2, [sp, #20]
 8009e6c:	509c      	str	r4, [r3, r2]
 8009e6e:	9b00      	ldr	r3, [sp, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	0c1e      	lsrs	r6, r3, #16
 8009e74:	d020      	beq.n	8009eb8 <__multiply+0x144>
 8009e76:	4663      	mov	r3, ip
 8009e78:	002c      	movs	r4, r5
 8009e7a:	4660      	mov	r0, ip
 8009e7c:	2700      	movs	r7, #0
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3414      	adds	r4, #20
 8009e82:	6822      	ldr	r2, [r4, #0]
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	b291      	uxth	r1, r2
 8009e88:	4371      	muls	r1, r6
 8009e8a:	6802      	ldr	r2, [r0, #0]
 8009e8c:	0c12      	lsrs	r2, r2, #16
 8009e8e:	1889      	adds	r1, r1, r2
 8009e90:	19cf      	adds	r7, r1, r7
 8009e92:	0439      	lsls	r1, r7, #16
 8009e94:	430b      	orrs	r3, r1
 8009e96:	6003      	str	r3, [r0, #0]
 8009e98:	cc02      	ldmia	r4!, {r1}
 8009e9a:	6843      	ldr	r3, [r0, #4]
 8009e9c:	0c09      	lsrs	r1, r1, #16
 8009e9e:	4371      	muls	r1, r6
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	0c3f      	lsrs	r7, r7, #16
 8009ea4:	18cb      	adds	r3, r1, r3
 8009ea6:	9a04      	ldr	r2, [sp, #16]
 8009ea8:	19db      	adds	r3, r3, r7
 8009eaa:	0c1f      	lsrs	r7, r3, #16
 8009eac:	3004      	adds	r0, #4
 8009eae:	42a2      	cmp	r2, r4
 8009eb0:	d8e7      	bhi.n	8009e82 <__multiply+0x10e>
 8009eb2:	4662      	mov	r2, ip
 8009eb4:	9905      	ldr	r1, [sp, #20]
 8009eb6:	5053      	str	r3, [r2, r1]
 8009eb8:	9b00      	ldr	r3, [sp, #0]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	2304      	movs	r3, #4
 8009ec0:	449c      	add	ip, r3
 8009ec2:	e79c      	b.n	8009dfe <__multiply+0x8a>
 8009ec4:	9b02      	ldr	r3, [sp, #8]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	9302      	str	r3, [sp, #8]
 8009eca:	e79c      	b.n	8009e06 <__multiply+0x92>
 8009ecc:	0800b433 	.word	0x0800b433
 8009ed0:	0800b444 	.word	0x0800b444

08009ed4 <__pow5mult>:
 8009ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ed6:	2303      	movs	r3, #3
 8009ed8:	0015      	movs	r5, r2
 8009eda:	0007      	movs	r7, r0
 8009edc:	000e      	movs	r6, r1
 8009ede:	401a      	ands	r2, r3
 8009ee0:	421d      	tst	r5, r3
 8009ee2:	d008      	beq.n	8009ef6 <__pow5mult+0x22>
 8009ee4:	4925      	ldr	r1, [pc, #148]	; (8009f7c <__pow5mult+0xa8>)
 8009ee6:	3a01      	subs	r2, #1
 8009ee8:	0092      	lsls	r2, r2, #2
 8009eea:	5852      	ldr	r2, [r2, r1]
 8009eec:	2300      	movs	r3, #0
 8009eee:	0031      	movs	r1, r6
 8009ef0:	f7ff fe9e 	bl	8009c30 <__multadd>
 8009ef4:	0006      	movs	r6, r0
 8009ef6:	10ad      	asrs	r5, r5, #2
 8009ef8:	d03d      	beq.n	8009f76 <__pow5mult+0xa2>
 8009efa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009efc:	2c00      	cmp	r4, #0
 8009efe:	d10f      	bne.n	8009f20 <__pow5mult+0x4c>
 8009f00:	2010      	movs	r0, #16
 8009f02:	f7fe f9f3 	bl	80082ec <malloc>
 8009f06:	1e02      	subs	r2, r0, #0
 8009f08:	6278      	str	r0, [r7, #36]	; 0x24
 8009f0a:	d105      	bne.n	8009f18 <__pow5mult+0x44>
 8009f0c:	21d7      	movs	r1, #215	; 0xd7
 8009f0e:	4b1c      	ldr	r3, [pc, #112]	; (8009f80 <__pow5mult+0xac>)
 8009f10:	481c      	ldr	r0, [pc, #112]	; (8009f84 <__pow5mult+0xb0>)
 8009f12:	0049      	lsls	r1, r1, #1
 8009f14:	f000 fb32 	bl	800a57c <__assert_func>
 8009f18:	6044      	str	r4, [r0, #4]
 8009f1a:	6084      	str	r4, [r0, #8]
 8009f1c:	6004      	str	r4, [r0, #0]
 8009f1e:	60c4      	str	r4, [r0, #12]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	689c      	ldr	r4, [r3, #8]
 8009f24:	9301      	str	r3, [sp, #4]
 8009f26:	2c00      	cmp	r4, #0
 8009f28:	d108      	bne.n	8009f3c <__pow5mult+0x68>
 8009f2a:	0038      	movs	r0, r7
 8009f2c:	4916      	ldr	r1, [pc, #88]	; (8009f88 <__pow5mult+0xb4>)
 8009f2e:	f7ff ff0b 	bl	8009d48 <__i2b>
 8009f32:	9b01      	ldr	r3, [sp, #4]
 8009f34:	0004      	movs	r4, r0
 8009f36:	6098      	str	r0, [r3, #8]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	6003      	str	r3, [r0, #0]
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	421d      	tst	r5, r3
 8009f40:	d00a      	beq.n	8009f58 <__pow5mult+0x84>
 8009f42:	0031      	movs	r1, r6
 8009f44:	0022      	movs	r2, r4
 8009f46:	0038      	movs	r0, r7
 8009f48:	f7ff ff14 	bl	8009d74 <__multiply>
 8009f4c:	0031      	movs	r1, r6
 8009f4e:	9001      	str	r0, [sp, #4]
 8009f50:	0038      	movs	r0, r7
 8009f52:	f7ff fe49 	bl	8009be8 <_Bfree>
 8009f56:	9e01      	ldr	r6, [sp, #4]
 8009f58:	106d      	asrs	r5, r5, #1
 8009f5a:	d00c      	beq.n	8009f76 <__pow5mult+0xa2>
 8009f5c:	6820      	ldr	r0, [r4, #0]
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d107      	bne.n	8009f72 <__pow5mult+0x9e>
 8009f62:	0022      	movs	r2, r4
 8009f64:	0021      	movs	r1, r4
 8009f66:	0038      	movs	r0, r7
 8009f68:	f7ff ff04 	bl	8009d74 <__multiply>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	6020      	str	r0, [r4, #0]
 8009f70:	6003      	str	r3, [r0, #0]
 8009f72:	0004      	movs	r4, r0
 8009f74:	e7e2      	b.n	8009f3c <__pow5mult+0x68>
 8009f76:	0030      	movs	r0, r6
 8009f78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f7a:	46c0      	nop			; (mov r8, r8)
 8009f7c:	0800b598 	.word	0x0800b598
 8009f80:	0800b3bd 	.word	0x0800b3bd
 8009f84:	0800b444 	.word	0x0800b444
 8009f88:	00000271 	.word	0x00000271

08009f8c <__lshift>:
 8009f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8e:	000c      	movs	r4, r1
 8009f90:	0017      	movs	r7, r2
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	1155      	asrs	r5, r2, #5
 8009f96:	b087      	sub	sp, #28
 8009f98:	18eb      	adds	r3, r5, r3
 8009f9a:	9302      	str	r3, [sp, #8]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	6849      	ldr	r1, [r1, #4]
 8009fa2:	68a3      	ldr	r3, [r4, #8]
 8009fa4:	9004      	str	r0, [sp, #16]
 8009fa6:	9a01      	ldr	r2, [sp, #4]
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	db11      	blt.n	8009fd0 <__lshift+0x44>
 8009fac:	9804      	ldr	r0, [sp, #16]
 8009fae:	f7ff fdd7 	bl	8009b60 <_Balloc>
 8009fb2:	0002      	movs	r2, r0
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	3214      	adds	r2, #20
 8009fb8:	0006      	movs	r6, r0
 8009fba:	0011      	movs	r1, r2
 8009fbc:	9203      	str	r2, [sp, #12]
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	d10d      	bne.n	8009fde <__lshift+0x52>
 8009fc2:	21da      	movs	r1, #218	; 0xda
 8009fc4:	0002      	movs	r2, r0
 8009fc6:	4b27      	ldr	r3, [pc, #156]	; (800a064 <__lshift+0xd8>)
 8009fc8:	4827      	ldr	r0, [pc, #156]	; (800a068 <__lshift+0xdc>)
 8009fca:	31ff      	adds	r1, #255	; 0xff
 8009fcc:	f000 fad6 	bl	800a57c <__assert_func>
 8009fd0:	3101      	adds	r1, #1
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	e7e7      	b.n	8009fa6 <__lshift+0x1a>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	0098      	lsls	r0, r3, #2
 8009fda:	500a      	str	r2, [r1, r0]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	42ab      	cmp	r3, r5
 8009fe0:	dbf9      	blt.n	8009fd6 <__lshift+0x4a>
 8009fe2:	43eb      	mvns	r3, r5
 8009fe4:	17db      	asrs	r3, r3, #31
 8009fe6:	401d      	ands	r5, r3
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	00ad      	lsls	r5, r5, #2
 8009fec:	211f      	movs	r1, #31
 8009fee:	0038      	movs	r0, r7
 8009ff0:	195d      	adds	r5, r3, r5
 8009ff2:	0023      	movs	r3, r4
 8009ff4:	6922      	ldr	r2, [r4, #16]
 8009ff6:	3314      	adds	r3, #20
 8009ff8:	0092      	lsls	r2, r2, #2
 8009ffa:	4008      	ands	r0, r1
 8009ffc:	4684      	mov	ip, r0
 8009ffe:	189a      	adds	r2, r3, r2
 800a000:	420f      	tst	r7, r1
 800a002:	d02a      	beq.n	800a05a <__lshift+0xce>
 800a004:	3101      	adds	r1, #1
 800a006:	1a09      	subs	r1, r1, r0
 800a008:	9105      	str	r1, [sp, #20]
 800a00a:	2100      	movs	r1, #0
 800a00c:	9503      	str	r5, [sp, #12]
 800a00e:	4667      	mov	r7, ip
 800a010:	6818      	ldr	r0, [r3, #0]
 800a012:	40b8      	lsls	r0, r7
 800a014:	4301      	orrs	r1, r0
 800a016:	9803      	ldr	r0, [sp, #12]
 800a018:	c002      	stmia	r0!, {r1}
 800a01a:	cb02      	ldmia	r3!, {r1}
 800a01c:	9003      	str	r0, [sp, #12]
 800a01e:	9805      	ldr	r0, [sp, #20]
 800a020:	40c1      	lsrs	r1, r0
 800a022:	429a      	cmp	r2, r3
 800a024:	d8f3      	bhi.n	800a00e <__lshift+0x82>
 800a026:	0020      	movs	r0, r4
 800a028:	3015      	adds	r0, #21
 800a02a:	2304      	movs	r3, #4
 800a02c:	4282      	cmp	r2, r0
 800a02e:	d304      	bcc.n	800a03a <__lshift+0xae>
 800a030:	1b13      	subs	r3, r2, r4
 800a032:	3b15      	subs	r3, #21
 800a034:	089b      	lsrs	r3, r3, #2
 800a036:	3301      	adds	r3, #1
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	50e9      	str	r1, [r5, r3]
 800a03c:	2900      	cmp	r1, #0
 800a03e:	d002      	beq.n	800a046 <__lshift+0xba>
 800a040:	9b02      	ldr	r3, [sp, #8]
 800a042:	3302      	adds	r3, #2
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	9804      	ldr	r0, [sp, #16]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	0021      	movs	r1, r4
 800a04e:	6133      	str	r3, [r6, #16]
 800a050:	f7ff fdca 	bl	8009be8 <_Bfree>
 800a054:	0030      	movs	r0, r6
 800a056:	b007      	add	sp, #28
 800a058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05a:	cb02      	ldmia	r3!, {r1}
 800a05c:	c502      	stmia	r5!, {r1}
 800a05e:	429a      	cmp	r2, r3
 800a060:	d8fb      	bhi.n	800a05a <__lshift+0xce>
 800a062:	e7f0      	b.n	800a046 <__lshift+0xba>
 800a064:	0800b433 	.word	0x0800b433
 800a068:	0800b444 	.word	0x0800b444

0800a06c <__mcmp>:
 800a06c:	6902      	ldr	r2, [r0, #16]
 800a06e:	690b      	ldr	r3, [r1, #16]
 800a070:	b530      	push	{r4, r5, lr}
 800a072:	0004      	movs	r4, r0
 800a074:	1ad0      	subs	r0, r2, r3
 800a076:	429a      	cmp	r2, r3
 800a078:	d10d      	bne.n	800a096 <__mcmp+0x2a>
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	3414      	adds	r4, #20
 800a07e:	3114      	adds	r1, #20
 800a080:	18e2      	adds	r2, r4, r3
 800a082:	18c9      	adds	r1, r1, r3
 800a084:	3a04      	subs	r2, #4
 800a086:	3904      	subs	r1, #4
 800a088:	6815      	ldr	r5, [r2, #0]
 800a08a:	680b      	ldr	r3, [r1, #0]
 800a08c:	429d      	cmp	r5, r3
 800a08e:	d003      	beq.n	800a098 <__mcmp+0x2c>
 800a090:	2001      	movs	r0, #1
 800a092:	429d      	cmp	r5, r3
 800a094:	d303      	bcc.n	800a09e <__mcmp+0x32>
 800a096:	bd30      	pop	{r4, r5, pc}
 800a098:	4294      	cmp	r4, r2
 800a09a:	d3f3      	bcc.n	800a084 <__mcmp+0x18>
 800a09c:	e7fb      	b.n	800a096 <__mcmp+0x2a>
 800a09e:	4240      	negs	r0, r0
 800a0a0:	e7f9      	b.n	800a096 <__mcmp+0x2a>
	...

0800a0a4 <__mdiff>:
 800a0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0a6:	000e      	movs	r6, r1
 800a0a8:	0007      	movs	r7, r0
 800a0aa:	0011      	movs	r1, r2
 800a0ac:	0030      	movs	r0, r6
 800a0ae:	b087      	sub	sp, #28
 800a0b0:	0014      	movs	r4, r2
 800a0b2:	f7ff ffdb 	bl	800a06c <__mcmp>
 800a0b6:	1e05      	subs	r5, r0, #0
 800a0b8:	d110      	bne.n	800a0dc <__mdiff+0x38>
 800a0ba:	0001      	movs	r1, r0
 800a0bc:	0038      	movs	r0, r7
 800a0be:	f7ff fd4f 	bl	8009b60 <_Balloc>
 800a0c2:	1e02      	subs	r2, r0, #0
 800a0c4:	d104      	bne.n	800a0d0 <__mdiff+0x2c>
 800a0c6:	4b40      	ldr	r3, [pc, #256]	; (800a1c8 <__mdiff+0x124>)
 800a0c8:	4940      	ldr	r1, [pc, #256]	; (800a1cc <__mdiff+0x128>)
 800a0ca:	4841      	ldr	r0, [pc, #260]	; (800a1d0 <__mdiff+0x12c>)
 800a0cc:	f000 fa56 	bl	800a57c <__assert_func>
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	6145      	str	r5, [r0, #20]
 800a0d4:	6103      	str	r3, [r0, #16]
 800a0d6:	0010      	movs	r0, r2
 800a0d8:	b007      	add	sp, #28
 800a0da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0dc:	2301      	movs	r3, #1
 800a0de:	9301      	str	r3, [sp, #4]
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	db04      	blt.n	800a0ee <__mdiff+0x4a>
 800a0e4:	0023      	movs	r3, r4
 800a0e6:	0034      	movs	r4, r6
 800a0e8:	001e      	movs	r6, r3
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	0038      	movs	r0, r7
 800a0f0:	6861      	ldr	r1, [r4, #4]
 800a0f2:	f7ff fd35 	bl	8009b60 <_Balloc>
 800a0f6:	1e02      	subs	r2, r0, #0
 800a0f8:	d103      	bne.n	800a102 <__mdiff+0x5e>
 800a0fa:	2190      	movs	r1, #144	; 0x90
 800a0fc:	4b32      	ldr	r3, [pc, #200]	; (800a1c8 <__mdiff+0x124>)
 800a0fe:	0089      	lsls	r1, r1, #2
 800a100:	e7e3      	b.n	800a0ca <__mdiff+0x26>
 800a102:	9b01      	ldr	r3, [sp, #4]
 800a104:	2700      	movs	r7, #0
 800a106:	60c3      	str	r3, [r0, #12]
 800a108:	6920      	ldr	r0, [r4, #16]
 800a10a:	3414      	adds	r4, #20
 800a10c:	9401      	str	r4, [sp, #4]
 800a10e:	9b01      	ldr	r3, [sp, #4]
 800a110:	0084      	lsls	r4, r0, #2
 800a112:	191b      	adds	r3, r3, r4
 800a114:	0034      	movs	r4, r6
 800a116:	9302      	str	r3, [sp, #8]
 800a118:	6933      	ldr	r3, [r6, #16]
 800a11a:	3414      	adds	r4, #20
 800a11c:	0099      	lsls	r1, r3, #2
 800a11e:	1863      	adds	r3, r4, r1
 800a120:	9303      	str	r3, [sp, #12]
 800a122:	0013      	movs	r3, r2
 800a124:	3314      	adds	r3, #20
 800a126:	469c      	mov	ip, r3
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	9b01      	ldr	r3, [sp, #4]
 800a12c:	9304      	str	r3, [sp, #16]
 800a12e:	9b04      	ldr	r3, [sp, #16]
 800a130:	cc02      	ldmia	r4!, {r1}
 800a132:	cb20      	ldmia	r3!, {r5}
 800a134:	9304      	str	r3, [sp, #16]
 800a136:	b2ab      	uxth	r3, r5
 800a138:	19df      	adds	r7, r3, r7
 800a13a:	b28b      	uxth	r3, r1
 800a13c:	1afb      	subs	r3, r7, r3
 800a13e:	0c2d      	lsrs	r5, r5, #16
 800a140:	0c09      	lsrs	r1, r1, #16
 800a142:	1a69      	subs	r1, r5, r1
 800a144:	141d      	asrs	r5, r3, #16
 800a146:	1949      	adds	r1, r1, r5
 800a148:	140f      	asrs	r7, r1, #16
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	0409      	lsls	r1, r1, #16
 800a14e:	430b      	orrs	r3, r1
 800a150:	4661      	mov	r1, ip
 800a152:	c108      	stmia	r1!, {r3}
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	468c      	mov	ip, r1
 800a158:	42a3      	cmp	r3, r4
 800a15a:	d8e8      	bhi.n	800a12e <__mdiff+0x8a>
 800a15c:	0031      	movs	r1, r6
 800a15e:	9c03      	ldr	r4, [sp, #12]
 800a160:	3115      	adds	r1, #21
 800a162:	2304      	movs	r3, #4
 800a164:	428c      	cmp	r4, r1
 800a166:	d304      	bcc.n	800a172 <__mdiff+0xce>
 800a168:	1ba3      	subs	r3, r4, r6
 800a16a:	3b15      	subs	r3, #21
 800a16c:	089b      	lsrs	r3, r3, #2
 800a16e:	3301      	adds	r3, #1
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	9901      	ldr	r1, [sp, #4]
 800a174:	18cc      	adds	r4, r1, r3
 800a176:	9905      	ldr	r1, [sp, #20]
 800a178:	0026      	movs	r6, r4
 800a17a:	18cb      	adds	r3, r1, r3
 800a17c:	469c      	mov	ip, r3
 800a17e:	9902      	ldr	r1, [sp, #8]
 800a180:	428e      	cmp	r6, r1
 800a182:	d310      	bcc.n	800a1a6 <__mdiff+0x102>
 800a184:	9e02      	ldr	r6, [sp, #8]
 800a186:	1ee5      	subs	r5, r4, #3
 800a188:	2100      	movs	r1, #0
 800a18a:	42ae      	cmp	r6, r5
 800a18c:	d304      	bcc.n	800a198 <__mdiff+0xf4>
 800a18e:	0031      	movs	r1, r6
 800a190:	3103      	adds	r1, #3
 800a192:	1b09      	subs	r1, r1, r4
 800a194:	0889      	lsrs	r1, r1, #2
 800a196:	0089      	lsls	r1, r1, #2
 800a198:	185b      	adds	r3, r3, r1
 800a19a:	3b04      	subs	r3, #4
 800a19c:	6819      	ldr	r1, [r3, #0]
 800a19e:	2900      	cmp	r1, #0
 800a1a0:	d00f      	beq.n	800a1c2 <__mdiff+0x11e>
 800a1a2:	6110      	str	r0, [r2, #16]
 800a1a4:	e797      	b.n	800a0d6 <__mdiff+0x32>
 800a1a6:	ce02      	ldmia	r6!, {r1}
 800a1a8:	b28d      	uxth	r5, r1
 800a1aa:	19ed      	adds	r5, r5, r7
 800a1ac:	0c0f      	lsrs	r7, r1, #16
 800a1ae:	1429      	asrs	r1, r5, #16
 800a1b0:	1879      	adds	r1, r7, r1
 800a1b2:	140f      	asrs	r7, r1, #16
 800a1b4:	b2ad      	uxth	r5, r5
 800a1b6:	0409      	lsls	r1, r1, #16
 800a1b8:	430d      	orrs	r5, r1
 800a1ba:	4661      	mov	r1, ip
 800a1bc:	c120      	stmia	r1!, {r5}
 800a1be:	468c      	mov	ip, r1
 800a1c0:	e7dd      	b.n	800a17e <__mdiff+0xda>
 800a1c2:	3801      	subs	r0, #1
 800a1c4:	e7e9      	b.n	800a19a <__mdiff+0xf6>
 800a1c6:	46c0      	nop			; (mov r8, r8)
 800a1c8:	0800b433 	.word	0x0800b433
 800a1cc:	00000232 	.word	0x00000232
 800a1d0:	0800b444 	.word	0x0800b444

0800a1d4 <__d2b>:
 800a1d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	0014      	movs	r4, r2
 800a1da:	001e      	movs	r6, r3
 800a1dc:	9f08      	ldr	r7, [sp, #32]
 800a1de:	f7ff fcbf 	bl	8009b60 <_Balloc>
 800a1e2:	1e05      	subs	r5, r0, #0
 800a1e4:	d105      	bne.n	800a1f2 <__d2b+0x1e>
 800a1e6:	0002      	movs	r2, r0
 800a1e8:	4b26      	ldr	r3, [pc, #152]	; (800a284 <__d2b+0xb0>)
 800a1ea:	4927      	ldr	r1, [pc, #156]	; (800a288 <__d2b+0xb4>)
 800a1ec:	4827      	ldr	r0, [pc, #156]	; (800a28c <__d2b+0xb8>)
 800a1ee:	f000 f9c5 	bl	800a57c <__assert_func>
 800a1f2:	0333      	lsls	r3, r6, #12
 800a1f4:	0076      	lsls	r6, r6, #1
 800a1f6:	0b1b      	lsrs	r3, r3, #12
 800a1f8:	0d76      	lsrs	r6, r6, #21
 800a1fa:	d124      	bne.n	800a246 <__d2b+0x72>
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	2c00      	cmp	r4, #0
 800a200:	d027      	beq.n	800a252 <__d2b+0x7e>
 800a202:	4668      	mov	r0, sp
 800a204:	9400      	str	r4, [sp, #0]
 800a206:	f7ff fd71 	bl	8009cec <__lo0bits>
 800a20a:	9c00      	ldr	r4, [sp, #0]
 800a20c:	2800      	cmp	r0, #0
 800a20e:	d01e      	beq.n	800a24e <__d2b+0x7a>
 800a210:	9b01      	ldr	r3, [sp, #4]
 800a212:	2120      	movs	r1, #32
 800a214:	001a      	movs	r2, r3
 800a216:	1a09      	subs	r1, r1, r0
 800a218:	408a      	lsls	r2, r1
 800a21a:	40c3      	lsrs	r3, r0
 800a21c:	4322      	orrs	r2, r4
 800a21e:	616a      	str	r2, [r5, #20]
 800a220:	9301      	str	r3, [sp, #4]
 800a222:	9c01      	ldr	r4, [sp, #4]
 800a224:	61ac      	str	r4, [r5, #24]
 800a226:	1e63      	subs	r3, r4, #1
 800a228:	419c      	sbcs	r4, r3
 800a22a:	3401      	adds	r4, #1
 800a22c:	612c      	str	r4, [r5, #16]
 800a22e:	2e00      	cmp	r6, #0
 800a230:	d018      	beq.n	800a264 <__d2b+0x90>
 800a232:	4b17      	ldr	r3, [pc, #92]	; (800a290 <__d2b+0xbc>)
 800a234:	18f6      	adds	r6, r6, r3
 800a236:	2335      	movs	r3, #53	; 0x35
 800a238:	1836      	adds	r6, r6, r0
 800a23a:	1a18      	subs	r0, r3, r0
 800a23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23e:	603e      	str	r6, [r7, #0]
 800a240:	6018      	str	r0, [r3, #0]
 800a242:	0028      	movs	r0, r5
 800a244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a246:	2280      	movs	r2, #128	; 0x80
 800a248:	0352      	lsls	r2, r2, #13
 800a24a:	4313      	orrs	r3, r2
 800a24c:	e7d6      	b.n	800a1fc <__d2b+0x28>
 800a24e:	616c      	str	r4, [r5, #20]
 800a250:	e7e7      	b.n	800a222 <__d2b+0x4e>
 800a252:	a801      	add	r0, sp, #4
 800a254:	f7ff fd4a 	bl	8009cec <__lo0bits>
 800a258:	2401      	movs	r4, #1
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	612c      	str	r4, [r5, #16]
 800a25e:	616b      	str	r3, [r5, #20]
 800a260:	3020      	adds	r0, #32
 800a262:	e7e4      	b.n	800a22e <__d2b+0x5a>
 800a264:	4b0b      	ldr	r3, [pc, #44]	; (800a294 <__d2b+0xc0>)
 800a266:	18c0      	adds	r0, r0, r3
 800a268:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <__d2b+0xc4>)
 800a26a:	6038      	str	r0, [r7, #0]
 800a26c:	18e3      	adds	r3, r4, r3
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	18eb      	adds	r3, r5, r3
 800a272:	6958      	ldr	r0, [r3, #20]
 800a274:	f7ff fd20 	bl	8009cb8 <__hi0bits>
 800a278:	0164      	lsls	r4, r4, #5
 800a27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27c:	1a24      	subs	r4, r4, r0
 800a27e:	601c      	str	r4, [r3, #0]
 800a280:	e7df      	b.n	800a242 <__d2b+0x6e>
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	0800b433 	.word	0x0800b433
 800a288:	0000030a 	.word	0x0000030a
 800a28c:	0800b444 	.word	0x0800b444
 800a290:	fffffbcd 	.word	0xfffffbcd
 800a294:	fffffbce 	.word	0xfffffbce
 800a298:	3fffffff 	.word	0x3fffffff

0800a29c <_calloc_r>:
 800a29c:	434a      	muls	r2, r1
 800a29e:	b570      	push	{r4, r5, r6, lr}
 800a2a0:	0011      	movs	r1, r2
 800a2a2:	0015      	movs	r5, r2
 800a2a4:	f7fe f888 	bl	80083b8 <_malloc_r>
 800a2a8:	1e04      	subs	r4, r0, #0
 800a2aa:	d003      	beq.n	800a2b4 <_calloc_r+0x18>
 800a2ac:	002a      	movs	r2, r5
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	f7fe f82f 	bl	8008312 <memset>
 800a2b4:	0020      	movs	r0, r4
 800a2b6:	bd70      	pop	{r4, r5, r6, pc}

0800a2b8 <__ssputs_r>:
 800a2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ba:	688e      	ldr	r6, [r1, #8]
 800a2bc:	b085      	sub	sp, #20
 800a2be:	0007      	movs	r7, r0
 800a2c0:	000c      	movs	r4, r1
 800a2c2:	9203      	str	r2, [sp, #12]
 800a2c4:	9301      	str	r3, [sp, #4]
 800a2c6:	429e      	cmp	r6, r3
 800a2c8:	d83c      	bhi.n	800a344 <__ssputs_r+0x8c>
 800a2ca:	2390      	movs	r3, #144	; 0x90
 800a2cc:	898a      	ldrh	r2, [r1, #12]
 800a2ce:	00db      	lsls	r3, r3, #3
 800a2d0:	421a      	tst	r2, r3
 800a2d2:	d034      	beq.n	800a33e <__ssputs_r+0x86>
 800a2d4:	2503      	movs	r5, #3
 800a2d6:	6909      	ldr	r1, [r1, #16]
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	1a5b      	subs	r3, r3, r1
 800a2dc:	9302      	str	r3, [sp, #8]
 800a2de:	6963      	ldr	r3, [r4, #20]
 800a2e0:	9802      	ldr	r0, [sp, #8]
 800a2e2:	435d      	muls	r5, r3
 800a2e4:	0feb      	lsrs	r3, r5, #31
 800a2e6:	195d      	adds	r5, r3, r5
 800a2e8:	9b01      	ldr	r3, [sp, #4]
 800a2ea:	106d      	asrs	r5, r5, #1
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	181b      	adds	r3, r3, r0
 800a2f0:	42ab      	cmp	r3, r5
 800a2f2:	d900      	bls.n	800a2f6 <__ssputs_r+0x3e>
 800a2f4:	001d      	movs	r5, r3
 800a2f6:	0553      	lsls	r3, r2, #21
 800a2f8:	d532      	bpl.n	800a360 <__ssputs_r+0xa8>
 800a2fa:	0029      	movs	r1, r5
 800a2fc:	0038      	movs	r0, r7
 800a2fe:	f7fe f85b 	bl	80083b8 <_malloc_r>
 800a302:	1e06      	subs	r6, r0, #0
 800a304:	d109      	bne.n	800a31a <__ssputs_r+0x62>
 800a306:	230c      	movs	r3, #12
 800a308:	603b      	str	r3, [r7, #0]
 800a30a:	2340      	movs	r3, #64	; 0x40
 800a30c:	2001      	movs	r0, #1
 800a30e:	89a2      	ldrh	r2, [r4, #12]
 800a310:	4240      	negs	r0, r0
 800a312:	4313      	orrs	r3, r2
 800a314:	81a3      	strh	r3, [r4, #12]
 800a316:	b005      	add	sp, #20
 800a318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a31a:	9a02      	ldr	r2, [sp, #8]
 800a31c:	6921      	ldr	r1, [r4, #16]
 800a31e:	f7fd ffef 	bl	8008300 <memcpy>
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	4a14      	ldr	r2, [pc, #80]	; (800a378 <__ssputs_r+0xc0>)
 800a326:	401a      	ands	r2, r3
 800a328:	2380      	movs	r3, #128	; 0x80
 800a32a:	4313      	orrs	r3, r2
 800a32c:	81a3      	strh	r3, [r4, #12]
 800a32e:	9b02      	ldr	r3, [sp, #8]
 800a330:	6126      	str	r6, [r4, #16]
 800a332:	18f6      	adds	r6, r6, r3
 800a334:	6026      	str	r6, [r4, #0]
 800a336:	6165      	str	r5, [r4, #20]
 800a338:	9e01      	ldr	r6, [sp, #4]
 800a33a:	1aed      	subs	r5, r5, r3
 800a33c:	60a5      	str	r5, [r4, #8]
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	429e      	cmp	r6, r3
 800a342:	d900      	bls.n	800a346 <__ssputs_r+0x8e>
 800a344:	9e01      	ldr	r6, [sp, #4]
 800a346:	0032      	movs	r2, r6
 800a348:	9903      	ldr	r1, [sp, #12]
 800a34a:	6820      	ldr	r0, [r4, #0]
 800a34c:	f000 f959 	bl	800a602 <memmove>
 800a350:	68a3      	ldr	r3, [r4, #8]
 800a352:	2000      	movs	r0, #0
 800a354:	1b9b      	subs	r3, r3, r6
 800a356:	60a3      	str	r3, [r4, #8]
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	199e      	adds	r6, r3, r6
 800a35c:	6026      	str	r6, [r4, #0]
 800a35e:	e7da      	b.n	800a316 <__ssputs_r+0x5e>
 800a360:	002a      	movs	r2, r5
 800a362:	0038      	movs	r0, r7
 800a364:	f000 f960 	bl	800a628 <_realloc_r>
 800a368:	1e06      	subs	r6, r0, #0
 800a36a:	d1e0      	bne.n	800a32e <__ssputs_r+0x76>
 800a36c:	0038      	movs	r0, r7
 800a36e:	6921      	ldr	r1, [r4, #16]
 800a370:	f7fd ffd8 	bl	8008324 <_free_r>
 800a374:	e7c7      	b.n	800a306 <__ssputs_r+0x4e>
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	fffffb7f 	.word	0xfffffb7f

0800a37c <_svfiprintf_r>:
 800a37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a37e:	b0a1      	sub	sp, #132	; 0x84
 800a380:	9003      	str	r0, [sp, #12]
 800a382:	001d      	movs	r5, r3
 800a384:	898b      	ldrh	r3, [r1, #12]
 800a386:	000f      	movs	r7, r1
 800a388:	0016      	movs	r6, r2
 800a38a:	061b      	lsls	r3, r3, #24
 800a38c:	d511      	bpl.n	800a3b2 <_svfiprintf_r+0x36>
 800a38e:	690b      	ldr	r3, [r1, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10e      	bne.n	800a3b2 <_svfiprintf_r+0x36>
 800a394:	2140      	movs	r1, #64	; 0x40
 800a396:	f7fe f80f 	bl	80083b8 <_malloc_r>
 800a39a:	6038      	str	r0, [r7, #0]
 800a39c:	6138      	str	r0, [r7, #16]
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d105      	bne.n	800a3ae <_svfiprintf_r+0x32>
 800a3a2:	230c      	movs	r3, #12
 800a3a4:	9a03      	ldr	r2, [sp, #12]
 800a3a6:	3801      	subs	r0, #1
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	b021      	add	sp, #132	; 0x84
 800a3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	617b      	str	r3, [r7, #20]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	ac08      	add	r4, sp, #32
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	3320      	adds	r3, #32
 800a3ba:	7663      	strb	r3, [r4, #25]
 800a3bc:	3310      	adds	r3, #16
 800a3be:	76a3      	strb	r3, [r4, #26]
 800a3c0:	9507      	str	r5, [sp, #28]
 800a3c2:	0035      	movs	r5, r6
 800a3c4:	782b      	ldrb	r3, [r5, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <_svfiprintf_r+0x52>
 800a3ca:	2b25      	cmp	r3, #37	; 0x25
 800a3cc:	d147      	bne.n	800a45e <_svfiprintf_r+0xe2>
 800a3ce:	1bab      	subs	r3, r5, r6
 800a3d0:	9305      	str	r3, [sp, #20]
 800a3d2:	42b5      	cmp	r5, r6
 800a3d4:	d00c      	beq.n	800a3f0 <_svfiprintf_r+0x74>
 800a3d6:	0032      	movs	r2, r6
 800a3d8:	0039      	movs	r1, r7
 800a3da:	9803      	ldr	r0, [sp, #12]
 800a3dc:	f7ff ff6c 	bl	800a2b8 <__ssputs_r>
 800a3e0:	1c43      	adds	r3, r0, #1
 800a3e2:	d100      	bne.n	800a3e6 <_svfiprintf_r+0x6a>
 800a3e4:	e0ae      	b.n	800a544 <_svfiprintf_r+0x1c8>
 800a3e6:	6962      	ldr	r2, [r4, #20]
 800a3e8:	9b05      	ldr	r3, [sp, #20]
 800a3ea:	4694      	mov	ip, r2
 800a3ec:	4463      	add	r3, ip
 800a3ee:	6163      	str	r3, [r4, #20]
 800a3f0:	782b      	ldrb	r3, [r5, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d100      	bne.n	800a3f8 <_svfiprintf_r+0x7c>
 800a3f6:	e0a5      	b.n	800a544 <_svfiprintf_r+0x1c8>
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	4252      	negs	r2, r2
 800a3fe:	6062      	str	r2, [r4, #4]
 800a400:	a904      	add	r1, sp, #16
 800a402:	3254      	adds	r2, #84	; 0x54
 800a404:	1852      	adds	r2, r2, r1
 800a406:	1c6e      	adds	r6, r5, #1
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	60e3      	str	r3, [r4, #12]
 800a40c:	60a3      	str	r3, [r4, #8]
 800a40e:	7013      	strb	r3, [r2, #0]
 800a410:	65a3      	str	r3, [r4, #88]	; 0x58
 800a412:	2205      	movs	r2, #5
 800a414:	7831      	ldrb	r1, [r6, #0]
 800a416:	4854      	ldr	r0, [pc, #336]	; (800a568 <_svfiprintf_r+0x1ec>)
 800a418:	f7ff fb86 	bl	8009b28 <memchr>
 800a41c:	1c75      	adds	r5, r6, #1
 800a41e:	2800      	cmp	r0, #0
 800a420:	d11f      	bne.n	800a462 <_svfiprintf_r+0xe6>
 800a422:	6822      	ldr	r2, [r4, #0]
 800a424:	06d3      	lsls	r3, r2, #27
 800a426:	d504      	bpl.n	800a432 <_svfiprintf_r+0xb6>
 800a428:	2353      	movs	r3, #83	; 0x53
 800a42a:	a904      	add	r1, sp, #16
 800a42c:	185b      	adds	r3, r3, r1
 800a42e:	2120      	movs	r1, #32
 800a430:	7019      	strb	r1, [r3, #0]
 800a432:	0713      	lsls	r3, r2, #28
 800a434:	d504      	bpl.n	800a440 <_svfiprintf_r+0xc4>
 800a436:	2353      	movs	r3, #83	; 0x53
 800a438:	a904      	add	r1, sp, #16
 800a43a:	185b      	adds	r3, r3, r1
 800a43c:	212b      	movs	r1, #43	; 0x2b
 800a43e:	7019      	strb	r1, [r3, #0]
 800a440:	7833      	ldrb	r3, [r6, #0]
 800a442:	2b2a      	cmp	r3, #42	; 0x2a
 800a444:	d016      	beq.n	800a474 <_svfiprintf_r+0xf8>
 800a446:	0035      	movs	r5, r6
 800a448:	2100      	movs	r1, #0
 800a44a:	200a      	movs	r0, #10
 800a44c:	68e3      	ldr	r3, [r4, #12]
 800a44e:	782a      	ldrb	r2, [r5, #0]
 800a450:	1c6e      	adds	r6, r5, #1
 800a452:	3a30      	subs	r2, #48	; 0x30
 800a454:	2a09      	cmp	r2, #9
 800a456:	d94e      	bls.n	800a4f6 <_svfiprintf_r+0x17a>
 800a458:	2900      	cmp	r1, #0
 800a45a:	d111      	bne.n	800a480 <_svfiprintf_r+0x104>
 800a45c:	e017      	b.n	800a48e <_svfiprintf_r+0x112>
 800a45e:	3501      	adds	r5, #1
 800a460:	e7b0      	b.n	800a3c4 <_svfiprintf_r+0x48>
 800a462:	4b41      	ldr	r3, [pc, #260]	; (800a568 <_svfiprintf_r+0x1ec>)
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	1ac0      	subs	r0, r0, r3
 800a468:	2301      	movs	r3, #1
 800a46a:	4083      	lsls	r3, r0
 800a46c:	4313      	orrs	r3, r2
 800a46e:	002e      	movs	r6, r5
 800a470:	6023      	str	r3, [r4, #0]
 800a472:	e7ce      	b.n	800a412 <_svfiprintf_r+0x96>
 800a474:	9b07      	ldr	r3, [sp, #28]
 800a476:	1d19      	adds	r1, r3, #4
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	9107      	str	r1, [sp, #28]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	db01      	blt.n	800a484 <_svfiprintf_r+0x108>
 800a480:	930b      	str	r3, [sp, #44]	; 0x2c
 800a482:	e004      	b.n	800a48e <_svfiprintf_r+0x112>
 800a484:	425b      	negs	r3, r3
 800a486:	60e3      	str	r3, [r4, #12]
 800a488:	2302      	movs	r3, #2
 800a48a:	4313      	orrs	r3, r2
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	782b      	ldrb	r3, [r5, #0]
 800a490:	2b2e      	cmp	r3, #46	; 0x2e
 800a492:	d10a      	bne.n	800a4aa <_svfiprintf_r+0x12e>
 800a494:	786b      	ldrb	r3, [r5, #1]
 800a496:	2b2a      	cmp	r3, #42	; 0x2a
 800a498:	d135      	bne.n	800a506 <_svfiprintf_r+0x18a>
 800a49a:	9b07      	ldr	r3, [sp, #28]
 800a49c:	3502      	adds	r5, #2
 800a49e:	1d1a      	adds	r2, r3, #4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	9207      	str	r2, [sp, #28]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	db2b      	blt.n	800a500 <_svfiprintf_r+0x184>
 800a4a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4aa:	4e30      	ldr	r6, [pc, #192]	; (800a56c <_svfiprintf_r+0x1f0>)
 800a4ac:	2203      	movs	r2, #3
 800a4ae:	0030      	movs	r0, r6
 800a4b0:	7829      	ldrb	r1, [r5, #0]
 800a4b2:	f7ff fb39 	bl	8009b28 <memchr>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d006      	beq.n	800a4c8 <_svfiprintf_r+0x14c>
 800a4ba:	2340      	movs	r3, #64	; 0x40
 800a4bc:	1b80      	subs	r0, r0, r6
 800a4be:	4083      	lsls	r3, r0
 800a4c0:	6822      	ldr	r2, [r4, #0]
 800a4c2:	3501      	adds	r5, #1
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	6023      	str	r3, [r4, #0]
 800a4c8:	7829      	ldrb	r1, [r5, #0]
 800a4ca:	2206      	movs	r2, #6
 800a4cc:	4828      	ldr	r0, [pc, #160]	; (800a570 <_svfiprintf_r+0x1f4>)
 800a4ce:	1c6e      	adds	r6, r5, #1
 800a4d0:	7621      	strb	r1, [r4, #24]
 800a4d2:	f7ff fb29 	bl	8009b28 <memchr>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d03c      	beq.n	800a554 <_svfiprintf_r+0x1d8>
 800a4da:	4b26      	ldr	r3, [pc, #152]	; (800a574 <_svfiprintf_r+0x1f8>)
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d125      	bne.n	800a52c <_svfiprintf_r+0x1b0>
 800a4e0:	2207      	movs	r2, #7
 800a4e2:	9b07      	ldr	r3, [sp, #28]
 800a4e4:	3307      	adds	r3, #7
 800a4e6:	4393      	bics	r3, r2
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	9307      	str	r3, [sp, #28]
 800a4ec:	6963      	ldr	r3, [r4, #20]
 800a4ee:	9a04      	ldr	r2, [sp, #16]
 800a4f0:	189b      	adds	r3, r3, r2
 800a4f2:	6163      	str	r3, [r4, #20]
 800a4f4:	e765      	b.n	800a3c2 <_svfiprintf_r+0x46>
 800a4f6:	4343      	muls	r3, r0
 800a4f8:	0035      	movs	r5, r6
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	189b      	adds	r3, r3, r2
 800a4fe:	e7a6      	b.n	800a44e <_svfiprintf_r+0xd2>
 800a500:	2301      	movs	r3, #1
 800a502:	425b      	negs	r3, r3
 800a504:	e7d0      	b.n	800a4a8 <_svfiprintf_r+0x12c>
 800a506:	2300      	movs	r3, #0
 800a508:	200a      	movs	r0, #10
 800a50a:	001a      	movs	r2, r3
 800a50c:	3501      	adds	r5, #1
 800a50e:	6063      	str	r3, [r4, #4]
 800a510:	7829      	ldrb	r1, [r5, #0]
 800a512:	1c6e      	adds	r6, r5, #1
 800a514:	3930      	subs	r1, #48	; 0x30
 800a516:	2909      	cmp	r1, #9
 800a518:	d903      	bls.n	800a522 <_svfiprintf_r+0x1a6>
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d0c5      	beq.n	800a4aa <_svfiprintf_r+0x12e>
 800a51e:	9209      	str	r2, [sp, #36]	; 0x24
 800a520:	e7c3      	b.n	800a4aa <_svfiprintf_r+0x12e>
 800a522:	4342      	muls	r2, r0
 800a524:	0035      	movs	r5, r6
 800a526:	2301      	movs	r3, #1
 800a528:	1852      	adds	r2, r2, r1
 800a52a:	e7f1      	b.n	800a510 <_svfiprintf_r+0x194>
 800a52c:	ab07      	add	r3, sp, #28
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	003a      	movs	r2, r7
 800a532:	0021      	movs	r1, r4
 800a534:	4b10      	ldr	r3, [pc, #64]	; (800a578 <_svfiprintf_r+0x1fc>)
 800a536:	9803      	ldr	r0, [sp, #12]
 800a538:	f7fe f846 	bl	80085c8 <_printf_float>
 800a53c:	9004      	str	r0, [sp, #16]
 800a53e:	9b04      	ldr	r3, [sp, #16]
 800a540:	3301      	adds	r3, #1
 800a542:	d1d3      	bne.n	800a4ec <_svfiprintf_r+0x170>
 800a544:	89bb      	ldrh	r3, [r7, #12]
 800a546:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a548:	065b      	lsls	r3, r3, #25
 800a54a:	d400      	bmi.n	800a54e <_svfiprintf_r+0x1d2>
 800a54c:	e72d      	b.n	800a3aa <_svfiprintf_r+0x2e>
 800a54e:	2001      	movs	r0, #1
 800a550:	4240      	negs	r0, r0
 800a552:	e72a      	b.n	800a3aa <_svfiprintf_r+0x2e>
 800a554:	ab07      	add	r3, sp, #28
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	003a      	movs	r2, r7
 800a55a:	0021      	movs	r1, r4
 800a55c:	4b06      	ldr	r3, [pc, #24]	; (800a578 <_svfiprintf_r+0x1fc>)
 800a55e:	9803      	ldr	r0, [sp, #12]
 800a560:	f7fe faf0 	bl	8008b44 <_printf_i>
 800a564:	e7ea      	b.n	800a53c <_svfiprintf_r+0x1c0>
 800a566:	46c0      	nop			; (mov r8, r8)
 800a568:	0800b5a4 	.word	0x0800b5a4
 800a56c:	0800b5aa 	.word	0x0800b5aa
 800a570:	0800b5ae 	.word	0x0800b5ae
 800a574:	080085c9 	.word	0x080085c9
 800a578:	0800a2b9 	.word	0x0800a2b9

0800a57c <__assert_func>:
 800a57c:	b530      	push	{r4, r5, lr}
 800a57e:	0014      	movs	r4, r2
 800a580:	001a      	movs	r2, r3
 800a582:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <__assert_func+0x2c>)
 800a584:	0005      	movs	r5, r0
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	b085      	sub	sp, #20
 800a58a:	68d8      	ldr	r0, [r3, #12]
 800a58c:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <__assert_func+0x30>)
 800a58e:	2c00      	cmp	r4, #0
 800a590:	d101      	bne.n	800a596 <__assert_func+0x1a>
 800a592:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <__assert_func+0x34>)
 800a594:	001c      	movs	r4, r3
 800a596:	9301      	str	r3, [sp, #4]
 800a598:	9100      	str	r1, [sp, #0]
 800a59a:	002b      	movs	r3, r5
 800a59c:	4905      	ldr	r1, [pc, #20]	; (800a5b4 <__assert_func+0x38>)
 800a59e:	9402      	str	r4, [sp, #8]
 800a5a0:	f000 f80a 	bl	800a5b8 <fiprintf>
 800a5a4:	f000 faa4 	bl	800aaf0 <abort>
 800a5a8:	2000000c 	.word	0x2000000c
 800a5ac:	0800b5b5 	.word	0x0800b5b5
 800a5b0:	0800b5f0 	.word	0x0800b5f0
 800a5b4:	0800b5c2 	.word	0x0800b5c2

0800a5b8 <fiprintf>:
 800a5b8:	b40e      	push	{r1, r2, r3}
 800a5ba:	b503      	push	{r0, r1, lr}
 800a5bc:	0001      	movs	r1, r0
 800a5be:	ab03      	add	r3, sp, #12
 800a5c0:	4804      	ldr	r0, [pc, #16]	; (800a5d4 <fiprintf+0x1c>)
 800a5c2:	cb04      	ldmia	r3!, {r2}
 800a5c4:	6800      	ldr	r0, [r0, #0]
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	f000 f87c 	bl	800a6c4 <_vfiprintf_r>
 800a5cc:	b002      	add	sp, #8
 800a5ce:	bc08      	pop	{r3}
 800a5d0:	b003      	add	sp, #12
 800a5d2:	4718      	bx	r3
 800a5d4:	2000000c 	.word	0x2000000c

0800a5d8 <__retarget_lock_init_recursive>:
 800a5d8:	4770      	bx	lr

0800a5da <__retarget_lock_acquire_recursive>:
 800a5da:	4770      	bx	lr

0800a5dc <__retarget_lock_release_recursive>:
 800a5dc:	4770      	bx	lr

0800a5de <__ascii_mbtowc>:
 800a5de:	b082      	sub	sp, #8
 800a5e0:	2900      	cmp	r1, #0
 800a5e2:	d100      	bne.n	800a5e6 <__ascii_mbtowc+0x8>
 800a5e4:	a901      	add	r1, sp, #4
 800a5e6:	1e10      	subs	r0, r2, #0
 800a5e8:	d006      	beq.n	800a5f8 <__ascii_mbtowc+0x1a>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d006      	beq.n	800a5fc <__ascii_mbtowc+0x1e>
 800a5ee:	7813      	ldrb	r3, [r2, #0]
 800a5f0:	600b      	str	r3, [r1, #0]
 800a5f2:	7810      	ldrb	r0, [r2, #0]
 800a5f4:	1e43      	subs	r3, r0, #1
 800a5f6:	4198      	sbcs	r0, r3
 800a5f8:	b002      	add	sp, #8
 800a5fa:	4770      	bx	lr
 800a5fc:	2002      	movs	r0, #2
 800a5fe:	4240      	negs	r0, r0
 800a600:	e7fa      	b.n	800a5f8 <__ascii_mbtowc+0x1a>

0800a602 <memmove>:
 800a602:	b510      	push	{r4, lr}
 800a604:	4288      	cmp	r0, r1
 800a606:	d902      	bls.n	800a60e <memmove+0xc>
 800a608:	188b      	adds	r3, r1, r2
 800a60a:	4298      	cmp	r0, r3
 800a60c:	d303      	bcc.n	800a616 <memmove+0x14>
 800a60e:	2300      	movs	r3, #0
 800a610:	e007      	b.n	800a622 <memmove+0x20>
 800a612:	5c8b      	ldrb	r3, [r1, r2]
 800a614:	5483      	strb	r3, [r0, r2]
 800a616:	3a01      	subs	r2, #1
 800a618:	d2fb      	bcs.n	800a612 <memmove+0x10>
 800a61a:	bd10      	pop	{r4, pc}
 800a61c:	5ccc      	ldrb	r4, [r1, r3]
 800a61e:	54c4      	strb	r4, [r0, r3]
 800a620:	3301      	adds	r3, #1
 800a622:	429a      	cmp	r2, r3
 800a624:	d1fa      	bne.n	800a61c <memmove+0x1a>
 800a626:	e7f8      	b.n	800a61a <memmove+0x18>

0800a628 <_realloc_r>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	0007      	movs	r7, r0
 800a62c:	000d      	movs	r5, r1
 800a62e:	0016      	movs	r6, r2
 800a630:	2900      	cmp	r1, #0
 800a632:	d105      	bne.n	800a640 <_realloc_r+0x18>
 800a634:	0011      	movs	r1, r2
 800a636:	f7fd febf 	bl	80083b8 <_malloc_r>
 800a63a:	0004      	movs	r4, r0
 800a63c:	0020      	movs	r0, r4
 800a63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a640:	2a00      	cmp	r2, #0
 800a642:	d103      	bne.n	800a64c <_realloc_r+0x24>
 800a644:	f7fd fe6e 	bl	8008324 <_free_r>
 800a648:	0034      	movs	r4, r6
 800a64a:	e7f7      	b.n	800a63c <_realloc_r+0x14>
 800a64c:	f000 fc92 	bl	800af74 <_malloc_usable_size_r>
 800a650:	002c      	movs	r4, r5
 800a652:	42b0      	cmp	r0, r6
 800a654:	d2f2      	bcs.n	800a63c <_realloc_r+0x14>
 800a656:	0031      	movs	r1, r6
 800a658:	0038      	movs	r0, r7
 800a65a:	f7fd fead 	bl	80083b8 <_malloc_r>
 800a65e:	1e04      	subs	r4, r0, #0
 800a660:	d0ec      	beq.n	800a63c <_realloc_r+0x14>
 800a662:	0029      	movs	r1, r5
 800a664:	0032      	movs	r2, r6
 800a666:	f7fd fe4b 	bl	8008300 <memcpy>
 800a66a:	0029      	movs	r1, r5
 800a66c:	0038      	movs	r0, r7
 800a66e:	f7fd fe59 	bl	8008324 <_free_r>
 800a672:	e7e3      	b.n	800a63c <_realloc_r+0x14>

0800a674 <__sfputc_r>:
 800a674:	6893      	ldr	r3, [r2, #8]
 800a676:	b510      	push	{r4, lr}
 800a678:	3b01      	subs	r3, #1
 800a67a:	6093      	str	r3, [r2, #8]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	da04      	bge.n	800a68a <__sfputc_r+0x16>
 800a680:	6994      	ldr	r4, [r2, #24]
 800a682:	42a3      	cmp	r3, r4
 800a684:	db07      	blt.n	800a696 <__sfputc_r+0x22>
 800a686:	290a      	cmp	r1, #10
 800a688:	d005      	beq.n	800a696 <__sfputc_r+0x22>
 800a68a:	6813      	ldr	r3, [r2, #0]
 800a68c:	1c58      	adds	r0, r3, #1
 800a68e:	6010      	str	r0, [r2, #0]
 800a690:	7019      	strb	r1, [r3, #0]
 800a692:	0008      	movs	r0, r1
 800a694:	bd10      	pop	{r4, pc}
 800a696:	f000 f94f 	bl	800a938 <__swbuf_r>
 800a69a:	0001      	movs	r1, r0
 800a69c:	e7f9      	b.n	800a692 <__sfputc_r+0x1e>

0800a69e <__sfputs_r>:
 800a69e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a0:	0006      	movs	r6, r0
 800a6a2:	000f      	movs	r7, r1
 800a6a4:	0014      	movs	r4, r2
 800a6a6:	18d5      	adds	r5, r2, r3
 800a6a8:	42ac      	cmp	r4, r5
 800a6aa:	d101      	bne.n	800a6b0 <__sfputs_r+0x12>
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	e007      	b.n	800a6c0 <__sfputs_r+0x22>
 800a6b0:	7821      	ldrb	r1, [r4, #0]
 800a6b2:	003a      	movs	r2, r7
 800a6b4:	0030      	movs	r0, r6
 800a6b6:	f7ff ffdd 	bl	800a674 <__sfputc_r>
 800a6ba:	3401      	adds	r4, #1
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	d1f3      	bne.n	800a6a8 <__sfputs_r+0xa>
 800a6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6c4 <_vfiprintf_r>:
 800a6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6c6:	b0a1      	sub	sp, #132	; 0x84
 800a6c8:	0006      	movs	r6, r0
 800a6ca:	000c      	movs	r4, r1
 800a6cc:	001f      	movs	r7, r3
 800a6ce:	9203      	str	r2, [sp, #12]
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	d004      	beq.n	800a6de <_vfiprintf_r+0x1a>
 800a6d4:	6983      	ldr	r3, [r0, #24]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <_vfiprintf_r+0x1a>
 800a6da:	f000 fb3f 	bl	800ad5c <__sinit>
 800a6de:	4b8e      	ldr	r3, [pc, #568]	; (800a918 <_vfiprintf_r+0x254>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d11c      	bne.n	800a71e <_vfiprintf_r+0x5a>
 800a6e4:	6874      	ldr	r4, [r6, #4]
 800a6e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6e8:	07db      	lsls	r3, r3, #31
 800a6ea:	d405      	bmi.n	800a6f8 <_vfiprintf_r+0x34>
 800a6ec:	89a3      	ldrh	r3, [r4, #12]
 800a6ee:	059b      	lsls	r3, r3, #22
 800a6f0:	d402      	bmi.n	800a6f8 <_vfiprintf_r+0x34>
 800a6f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f4:	f7ff ff71 	bl	800a5da <__retarget_lock_acquire_recursive>
 800a6f8:	89a3      	ldrh	r3, [r4, #12]
 800a6fa:	071b      	lsls	r3, r3, #28
 800a6fc:	d502      	bpl.n	800a704 <_vfiprintf_r+0x40>
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d11d      	bne.n	800a740 <_vfiprintf_r+0x7c>
 800a704:	0021      	movs	r1, r4
 800a706:	0030      	movs	r0, r6
 800a708:	f000 f97a 	bl	800aa00 <__swsetup_r>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d017      	beq.n	800a740 <_vfiprintf_r+0x7c>
 800a710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a712:	07db      	lsls	r3, r3, #31
 800a714:	d50d      	bpl.n	800a732 <_vfiprintf_r+0x6e>
 800a716:	2001      	movs	r0, #1
 800a718:	4240      	negs	r0, r0
 800a71a:	b021      	add	sp, #132	; 0x84
 800a71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a71e:	4b7f      	ldr	r3, [pc, #508]	; (800a91c <_vfiprintf_r+0x258>)
 800a720:	429c      	cmp	r4, r3
 800a722:	d101      	bne.n	800a728 <_vfiprintf_r+0x64>
 800a724:	68b4      	ldr	r4, [r6, #8]
 800a726:	e7de      	b.n	800a6e6 <_vfiprintf_r+0x22>
 800a728:	4b7d      	ldr	r3, [pc, #500]	; (800a920 <_vfiprintf_r+0x25c>)
 800a72a:	429c      	cmp	r4, r3
 800a72c:	d1db      	bne.n	800a6e6 <_vfiprintf_r+0x22>
 800a72e:	68f4      	ldr	r4, [r6, #12]
 800a730:	e7d9      	b.n	800a6e6 <_vfiprintf_r+0x22>
 800a732:	89a3      	ldrh	r3, [r4, #12]
 800a734:	059b      	lsls	r3, r3, #22
 800a736:	d4ee      	bmi.n	800a716 <_vfiprintf_r+0x52>
 800a738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a73a:	f7ff ff4f 	bl	800a5dc <__retarget_lock_release_recursive>
 800a73e:	e7ea      	b.n	800a716 <_vfiprintf_r+0x52>
 800a740:	2300      	movs	r3, #0
 800a742:	ad08      	add	r5, sp, #32
 800a744:	616b      	str	r3, [r5, #20]
 800a746:	3320      	adds	r3, #32
 800a748:	766b      	strb	r3, [r5, #25]
 800a74a:	3310      	adds	r3, #16
 800a74c:	76ab      	strb	r3, [r5, #26]
 800a74e:	9707      	str	r7, [sp, #28]
 800a750:	9f03      	ldr	r7, [sp, #12]
 800a752:	783b      	ldrb	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <_vfiprintf_r+0x98>
 800a758:	2b25      	cmp	r3, #37	; 0x25
 800a75a:	d14e      	bne.n	800a7fa <_vfiprintf_r+0x136>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	1afb      	subs	r3, r7, r3
 800a760:	9305      	str	r3, [sp, #20]
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	429f      	cmp	r7, r3
 800a766:	d00d      	beq.n	800a784 <_vfiprintf_r+0xc0>
 800a768:	9b05      	ldr	r3, [sp, #20]
 800a76a:	0021      	movs	r1, r4
 800a76c:	0030      	movs	r0, r6
 800a76e:	9a03      	ldr	r2, [sp, #12]
 800a770:	f7ff ff95 	bl	800a69e <__sfputs_r>
 800a774:	1c43      	adds	r3, r0, #1
 800a776:	d100      	bne.n	800a77a <_vfiprintf_r+0xb6>
 800a778:	e0b5      	b.n	800a8e6 <_vfiprintf_r+0x222>
 800a77a:	696a      	ldr	r2, [r5, #20]
 800a77c:	9b05      	ldr	r3, [sp, #20]
 800a77e:	4694      	mov	ip, r2
 800a780:	4463      	add	r3, ip
 800a782:	616b      	str	r3, [r5, #20]
 800a784:	783b      	ldrb	r3, [r7, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d100      	bne.n	800a78c <_vfiprintf_r+0xc8>
 800a78a:	e0ac      	b.n	800a8e6 <_vfiprintf_r+0x222>
 800a78c:	2201      	movs	r2, #1
 800a78e:	1c7b      	adds	r3, r7, #1
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	2300      	movs	r3, #0
 800a794:	4252      	negs	r2, r2
 800a796:	606a      	str	r2, [r5, #4]
 800a798:	a904      	add	r1, sp, #16
 800a79a:	3254      	adds	r2, #84	; 0x54
 800a79c:	1852      	adds	r2, r2, r1
 800a79e:	602b      	str	r3, [r5, #0]
 800a7a0:	60eb      	str	r3, [r5, #12]
 800a7a2:	60ab      	str	r3, [r5, #8]
 800a7a4:	7013      	strb	r3, [r2, #0]
 800a7a6:	65ab      	str	r3, [r5, #88]	; 0x58
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	2205      	movs	r2, #5
 800a7ac:	7819      	ldrb	r1, [r3, #0]
 800a7ae:	485d      	ldr	r0, [pc, #372]	; (800a924 <_vfiprintf_r+0x260>)
 800a7b0:	f7ff f9ba 	bl	8009b28 <memchr>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	1c5f      	adds	r7, r3, #1
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d120      	bne.n	800a7fe <_vfiprintf_r+0x13a>
 800a7bc:	682a      	ldr	r2, [r5, #0]
 800a7be:	06d3      	lsls	r3, r2, #27
 800a7c0:	d504      	bpl.n	800a7cc <_vfiprintf_r+0x108>
 800a7c2:	2353      	movs	r3, #83	; 0x53
 800a7c4:	a904      	add	r1, sp, #16
 800a7c6:	185b      	adds	r3, r3, r1
 800a7c8:	2120      	movs	r1, #32
 800a7ca:	7019      	strb	r1, [r3, #0]
 800a7cc:	0713      	lsls	r3, r2, #28
 800a7ce:	d504      	bpl.n	800a7da <_vfiprintf_r+0x116>
 800a7d0:	2353      	movs	r3, #83	; 0x53
 800a7d2:	a904      	add	r1, sp, #16
 800a7d4:	185b      	adds	r3, r3, r1
 800a7d6:	212b      	movs	r1, #43	; 0x2b
 800a7d8:	7019      	strb	r1, [r3, #0]
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e0:	d016      	beq.n	800a810 <_vfiprintf_r+0x14c>
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	68eb      	ldr	r3, [r5, #12]
 800a7e6:	9f03      	ldr	r7, [sp, #12]
 800a7e8:	783a      	ldrb	r2, [r7, #0]
 800a7ea:	1c78      	adds	r0, r7, #1
 800a7ec:	3a30      	subs	r2, #48	; 0x30
 800a7ee:	4684      	mov	ip, r0
 800a7f0:	2a09      	cmp	r2, #9
 800a7f2:	d94f      	bls.n	800a894 <_vfiprintf_r+0x1d0>
 800a7f4:	2900      	cmp	r1, #0
 800a7f6:	d111      	bne.n	800a81c <_vfiprintf_r+0x158>
 800a7f8:	e017      	b.n	800a82a <_vfiprintf_r+0x166>
 800a7fa:	3701      	adds	r7, #1
 800a7fc:	e7a9      	b.n	800a752 <_vfiprintf_r+0x8e>
 800a7fe:	4b49      	ldr	r3, [pc, #292]	; (800a924 <_vfiprintf_r+0x260>)
 800a800:	682a      	ldr	r2, [r5, #0]
 800a802:	1ac0      	subs	r0, r0, r3
 800a804:	2301      	movs	r3, #1
 800a806:	4083      	lsls	r3, r0
 800a808:	4313      	orrs	r3, r2
 800a80a:	602b      	str	r3, [r5, #0]
 800a80c:	9703      	str	r7, [sp, #12]
 800a80e:	e7cb      	b.n	800a7a8 <_vfiprintf_r+0xe4>
 800a810:	9b07      	ldr	r3, [sp, #28]
 800a812:	1d19      	adds	r1, r3, #4
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	9107      	str	r1, [sp, #28]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	db01      	blt.n	800a820 <_vfiprintf_r+0x15c>
 800a81c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a81e:	e004      	b.n	800a82a <_vfiprintf_r+0x166>
 800a820:	425b      	negs	r3, r3
 800a822:	60eb      	str	r3, [r5, #12]
 800a824:	2302      	movs	r3, #2
 800a826:	4313      	orrs	r3, r2
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	783b      	ldrb	r3, [r7, #0]
 800a82c:	2b2e      	cmp	r3, #46	; 0x2e
 800a82e:	d10a      	bne.n	800a846 <_vfiprintf_r+0x182>
 800a830:	787b      	ldrb	r3, [r7, #1]
 800a832:	2b2a      	cmp	r3, #42	; 0x2a
 800a834:	d137      	bne.n	800a8a6 <_vfiprintf_r+0x1e2>
 800a836:	9b07      	ldr	r3, [sp, #28]
 800a838:	3702      	adds	r7, #2
 800a83a:	1d1a      	adds	r2, r3, #4
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	9207      	str	r2, [sp, #28]
 800a840:	2b00      	cmp	r3, #0
 800a842:	db2d      	blt.n	800a8a0 <_vfiprintf_r+0x1dc>
 800a844:	9309      	str	r3, [sp, #36]	; 0x24
 800a846:	2203      	movs	r2, #3
 800a848:	7839      	ldrb	r1, [r7, #0]
 800a84a:	4837      	ldr	r0, [pc, #220]	; (800a928 <_vfiprintf_r+0x264>)
 800a84c:	f7ff f96c 	bl	8009b28 <memchr>
 800a850:	2800      	cmp	r0, #0
 800a852:	d007      	beq.n	800a864 <_vfiprintf_r+0x1a0>
 800a854:	4b34      	ldr	r3, [pc, #208]	; (800a928 <_vfiprintf_r+0x264>)
 800a856:	682a      	ldr	r2, [r5, #0]
 800a858:	1ac0      	subs	r0, r0, r3
 800a85a:	2340      	movs	r3, #64	; 0x40
 800a85c:	4083      	lsls	r3, r0
 800a85e:	4313      	orrs	r3, r2
 800a860:	3701      	adds	r7, #1
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	7839      	ldrb	r1, [r7, #0]
 800a866:	1c7b      	adds	r3, r7, #1
 800a868:	2206      	movs	r2, #6
 800a86a:	4830      	ldr	r0, [pc, #192]	; (800a92c <_vfiprintf_r+0x268>)
 800a86c:	9303      	str	r3, [sp, #12]
 800a86e:	7629      	strb	r1, [r5, #24]
 800a870:	f7ff f95a 	bl	8009b28 <memchr>
 800a874:	2800      	cmp	r0, #0
 800a876:	d045      	beq.n	800a904 <_vfiprintf_r+0x240>
 800a878:	4b2d      	ldr	r3, [pc, #180]	; (800a930 <_vfiprintf_r+0x26c>)
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d127      	bne.n	800a8ce <_vfiprintf_r+0x20a>
 800a87e:	2207      	movs	r2, #7
 800a880:	9b07      	ldr	r3, [sp, #28]
 800a882:	3307      	adds	r3, #7
 800a884:	4393      	bics	r3, r2
 800a886:	3308      	adds	r3, #8
 800a888:	9307      	str	r3, [sp, #28]
 800a88a:	696b      	ldr	r3, [r5, #20]
 800a88c:	9a04      	ldr	r2, [sp, #16]
 800a88e:	189b      	adds	r3, r3, r2
 800a890:	616b      	str	r3, [r5, #20]
 800a892:	e75d      	b.n	800a750 <_vfiprintf_r+0x8c>
 800a894:	210a      	movs	r1, #10
 800a896:	434b      	muls	r3, r1
 800a898:	4667      	mov	r7, ip
 800a89a:	189b      	adds	r3, r3, r2
 800a89c:	3909      	subs	r1, #9
 800a89e:	e7a3      	b.n	800a7e8 <_vfiprintf_r+0x124>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	425b      	negs	r3, r3
 800a8a4:	e7ce      	b.n	800a844 <_vfiprintf_r+0x180>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	001a      	movs	r2, r3
 800a8aa:	3701      	adds	r7, #1
 800a8ac:	606b      	str	r3, [r5, #4]
 800a8ae:	7839      	ldrb	r1, [r7, #0]
 800a8b0:	1c78      	adds	r0, r7, #1
 800a8b2:	3930      	subs	r1, #48	; 0x30
 800a8b4:	4684      	mov	ip, r0
 800a8b6:	2909      	cmp	r1, #9
 800a8b8:	d903      	bls.n	800a8c2 <_vfiprintf_r+0x1fe>
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0c3      	beq.n	800a846 <_vfiprintf_r+0x182>
 800a8be:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c0:	e7c1      	b.n	800a846 <_vfiprintf_r+0x182>
 800a8c2:	230a      	movs	r3, #10
 800a8c4:	435a      	muls	r2, r3
 800a8c6:	4667      	mov	r7, ip
 800a8c8:	1852      	adds	r2, r2, r1
 800a8ca:	3b09      	subs	r3, #9
 800a8cc:	e7ef      	b.n	800a8ae <_vfiprintf_r+0x1ea>
 800a8ce:	ab07      	add	r3, sp, #28
 800a8d0:	9300      	str	r3, [sp, #0]
 800a8d2:	0022      	movs	r2, r4
 800a8d4:	0029      	movs	r1, r5
 800a8d6:	0030      	movs	r0, r6
 800a8d8:	4b16      	ldr	r3, [pc, #88]	; (800a934 <_vfiprintf_r+0x270>)
 800a8da:	f7fd fe75 	bl	80085c8 <_printf_float>
 800a8de:	9004      	str	r0, [sp, #16]
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	d1d1      	bne.n	800a88a <_vfiprintf_r+0x1c6>
 800a8e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8e8:	07db      	lsls	r3, r3, #31
 800a8ea:	d405      	bmi.n	800a8f8 <_vfiprintf_r+0x234>
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	059b      	lsls	r3, r3, #22
 800a8f0:	d402      	bmi.n	800a8f8 <_vfiprintf_r+0x234>
 800a8f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8f4:	f7ff fe72 	bl	800a5dc <__retarget_lock_release_recursive>
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	065b      	lsls	r3, r3, #25
 800a8fc:	d500      	bpl.n	800a900 <_vfiprintf_r+0x23c>
 800a8fe:	e70a      	b.n	800a716 <_vfiprintf_r+0x52>
 800a900:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a902:	e70a      	b.n	800a71a <_vfiprintf_r+0x56>
 800a904:	ab07      	add	r3, sp, #28
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	0022      	movs	r2, r4
 800a90a:	0029      	movs	r1, r5
 800a90c:	0030      	movs	r0, r6
 800a90e:	4b09      	ldr	r3, [pc, #36]	; (800a934 <_vfiprintf_r+0x270>)
 800a910:	f7fe f918 	bl	8008b44 <_printf_i>
 800a914:	e7e3      	b.n	800a8de <_vfiprintf_r+0x21a>
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	0800b71c 	.word	0x0800b71c
 800a91c:	0800b73c 	.word	0x0800b73c
 800a920:	0800b6fc 	.word	0x0800b6fc
 800a924:	0800b5a4 	.word	0x0800b5a4
 800a928:	0800b5aa 	.word	0x0800b5aa
 800a92c:	0800b5ae 	.word	0x0800b5ae
 800a930:	080085c9 	.word	0x080085c9
 800a934:	0800a69f 	.word	0x0800a69f

0800a938 <__swbuf_r>:
 800a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93a:	0005      	movs	r5, r0
 800a93c:	000e      	movs	r6, r1
 800a93e:	0014      	movs	r4, r2
 800a940:	2800      	cmp	r0, #0
 800a942:	d004      	beq.n	800a94e <__swbuf_r+0x16>
 800a944:	6983      	ldr	r3, [r0, #24]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d101      	bne.n	800a94e <__swbuf_r+0x16>
 800a94a:	f000 fa07 	bl	800ad5c <__sinit>
 800a94e:	4b22      	ldr	r3, [pc, #136]	; (800a9d8 <__swbuf_r+0xa0>)
 800a950:	429c      	cmp	r4, r3
 800a952:	d12e      	bne.n	800a9b2 <__swbuf_r+0x7a>
 800a954:	686c      	ldr	r4, [r5, #4]
 800a956:	69a3      	ldr	r3, [r4, #24]
 800a958:	60a3      	str	r3, [r4, #8]
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	071b      	lsls	r3, r3, #28
 800a95e:	d532      	bpl.n	800a9c6 <__swbuf_r+0x8e>
 800a960:	6923      	ldr	r3, [r4, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d02f      	beq.n	800a9c6 <__swbuf_r+0x8e>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	6922      	ldr	r2, [r4, #16]
 800a96a:	b2f7      	uxtb	r7, r6
 800a96c:	1a98      	subs	r0, r3, r2
 800a96e:	6963      	ldr	r3, [r4, #20]
 800a970:	b2f6      	uxtb	r6, r6
 800a972:	4283      	cmp	r3, r0
 800a974:	dc05      	bgt.n	800a982 <__swbuf_r+0x4a>
 800a976:	0021      	movs	r1, r4
 800a978:	0028      	movs	r0, r5
 800a97a:	f000 f94d 	bl	800ac18 <_fflush_r>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d127      	bne.n	800a9d2 <__swbuf_r+0x9a>
 800a982:	68a3      	ldr	r3, [r4, #8]
 800a984:	3001      	adds	r0, #1
 800a986:	3b01      	subs	r3, #1
 800a988:	60a3      	str	r3, [r4, #8]
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	1c5a      	adds	r2, r3, #1
 800a98e:	6022      	str	r2, [r4, #0]
 800a990:	701f      	strb	r7, [r3, #0]
 800a992:	6963      	ldr	r3, [r4, #20]
 800a994:	4283      	cmp	r3, r0
 800a996:	d004      	beq.n	800a9a2 <__swbuf_r+0x6a>
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	07db      	lsls	r3, r3, #31
 800a99c:	d507      	bpl.n	800a9ae <__swbuf_r+0x76>
 800a99e:	2e0a      	cmp	r6, #10
 800a9a0:	d105      	bne.n	800a9ae <__swbuf_r+0x76>
 800a9a2:	0021      	movs	r1, r4
 800a9a4:	0028      	movs	r0, r5
 800a9a6:	f000 f937 	bl	800ac18 <_fflush_r>
 800a9aa:	2800      	cmp	r0, #0
 800a9ac:	d111      	bne.n	800a9d2 <__swbuf_r+0x9a>
 800a9ae:	0030      	movs	r0, r6
 800a9b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9b2:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <__swbuf_r+0xa4>)
 800a9b4:	429c      	cmp	r4, r3
 800a9b6:	d101      	bne.n	800a9bc <__swbuf_r+0x84>
 800a9b8:	68ac      	ldr	r4, [r5, #8]
 800a9ba:	e7cc      	b.n	800a956 <__swbuf_r+0x1e>
 800a9bc:	4b08      	ldr	r3, [pc, #32]	; (800a9e0 <__swbuf_r+0xa8>)
 800a9be:	429c      	cmp	r4, r3
 800a9c0:	d1c9      	bne.n	800a956 <__swbuf_r+0x1e>
 800a9c2:	68ec      	ldr	r4, [r5, #12]
 800a9c4:	e7c7      	b.n	800a956 <__swbuf_r+0x1e>
 800a9c6:	0021      	movs	r1, r4
 800a9c8:	0028      	movs	r0, r5
 800a9ca:	f000 f819 	bl	800aa00 <__swsetup_r>
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d0c9      	beq.n	800a966 <__swbuf_r+0x2e>
 800a9d2:	2601      	movs	r6, #1
 800a9d4:	4276      	negs	r6, r6
 800a9d6:	e7ea      	b.n	800a9ae <__swbuf_r+0x76>
 800a9d8:	0800b71c 	.word	0x0800b71c
 800a9dc:	0800b73c 	.word	0x0800b73c
 800a9e0:	0800b6fc 	.word	0x0800b6fc

0800a9e4 <__ascii_wctomb>:
 800a9e4:	0003      	movs	r3, r0
 800a9e6:	1e08      	subs	r0, r1, #0
 800a9e8:	d005      	beq.n	800a9f6 <__ascii_wctomb+0x12>
 800a9ea:	2aff      	cmp	r2, #255	; 0xff
 800a9ec:	d904      	bls.n	800a9f8 <__ascii_wctomb+0x14>
 800a9ee:	228a      	movs	r2, #138	; 0x8a
 800a9f0:	2001      	movs	r0, #1
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	4240      	negs	r0, r0
 800a9f6:	4770      	bx	lr
 800a9f8:	2001      	movs	r0, #1
 800a9fa:	700a      	strb	r2, [r1, #0]
 800a9fc:	e7fb      	b.n	800a9f6 <__ascii_wctomb+0x12>
	...

0800aa00 <__swsetup_r>:
 800aa00:	4b37      	ldr	r3, [pc, #220]	; (800aae0 <__swsetup_r+0xe0>)
 800aa02:	b570      	push	{r4, r5, r6, lr}
 800aa04:	681d      	ldr	r5, [r3, #0]
 800aa06:	0006      	movs	r6, r0
 800aa08:	000c      	movs	r4, r1
 800aa0a:	2d00      	cmp	r5, #0
 800aa0c:	d005      	beq.n	800aa1a <__swsetup_r+0x1a>
 800aa0e:	69ab      	ldr	r3, [r5, #24]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <__swsetup_r+0x1a>
 800aa14:	0028      	movs	r0, r5
 800aa16:	f000 f9a1 	bl	800ad5c <__sinit>
 800aa1a:	4b32      	ldr	r3, [pc, #200]	; (800aae4 <__swsetup_r+0xe4>)
 800aa1c:	429c      	cmp	r4, r3
 800aa1e:	d10f      	bne.n	800aa40 <__swsetup_r+0x40>
 800aa20:	686c      	ldr	r4, [r5, #4]
 800aa22:	230c      	movs	r3, #12
 800aa24:	5ee2      	ldrsh	r2, [r4, r3]
 800aa26:	b293      	uxth	r3, r2
 800aa28:	0711      	lsls	r1, r2, #28
 800aa2a:	d42d      	bmi.n	800aa88 <__swsetup_r+0x88>
 800aa2c:	06d9      	lsls	r1, r3, #27
 800aa2e:	d411      	bmi.n	800aa54 <__swsetup_r+0x54>
 800aa30:	2309      	movs	r3, #9
 800aa32:	2001      	movs	r0, #1
 800aa34:	6033      	str	r3, [r6, #0]
 800aa36:	3337      	adds	r3, #55	; 0x37
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	81a3      	strh	r3, [r4, #12]
 800aa3c:	4240      	negs	r0, r0
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	4b29      	ldr	r3, [pc, #164]	; (800aae8 <__swsetup_r+0xe8>)
 800aa42:	429c      	cmp	r4, r3
 800aa44:	d101      	bne.n	800aa4a <__swsetup_r+0x4a>
 800aa46:	68ac      	ldr	r4, [r5, #8]
 800aa48:	e7eb      	b.n	800aa22 <__swsetup_r+0x22>
 800aa4a:	4b28      	ldr	r3, [pc, #160]	; (800aaec <__swsetup_r+0xec>)
 800aa4c:	429c      	cmp	r4, r3
 800aa4e:	d1e8      	bne.n	800aa22 <__swsetup_r+0x22>
 800aa50:	68ec      	ldr	r4, [r5, #12]
 800aa52:	e7e6      	b.n	800aa22 <__swsetup_r+0x22>
 800aa54:	075b      	lsls	r3, r3, #29
 800aa56:	d513      	bpl.n	800aa80 <__swsetup_r+0x80>
 800aa58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	d008      	beq.n	800aa70 <__swsetup_r+0x70>
 800aa5e:	0023      	movs	r3, r4
 800aa60:	3344      	adds	r3, #68	; 0x44
 800aa62:	4299      	cmp	r1, r3
 800aa64:	d002      	beq.n	800aa6c <__swsetup_r+0x6c>
 800aa66:	0030      	movs	r0, r6
 800aa68:	f7fd fc5c 	bl	8008324 <_free_r>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	6363      	str	r3, [r4, #52]	; 0x34
 800aa70:	2224      	movs	r2, #36	; 0x24
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	4393      	bics	r3, r2
 800aa76:	81a3      	strh	r3, [r4, #12]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	6063      	str	r3, [r4, #4]
 800aa7c:	6923      	ldr	r3, [r4, #16]
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	2308      	movs	r3, #8
 800aa82:	89a2      	ldrh	r2, [r4, #12]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	81a3      	strh	r3, [r4, #12]
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10b      	bne.n	800aaa6 <__swsetup_r+0xa6>
 800aa8e:	21a0      	movs	r1, #160	; 0xa0
 800aa90:	2280      	movs	r2, #128	; 0x80
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	0089      	lsls	r1, r1, #2
 800aa96:	0092      	lsls	r2, r2, #2
 800aa98:	400b      	ands	r3, r1
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d003      	beq.n	800aaa6 <__swsetup_r+0xa6>
 800aa9e:	0021      	movs	r1, r4
 800aaa0:	0030      	movs	r0, r6
 800aaa2:	f000 fa23 	bl	800aeec <__smakebuf_r>
 800aaa6:	220c      	movs	r2, #12
 800aaa8:	5ea3      	ldrsh	r3, [r4, r2]
 800aaaa:	2001      	movs	r0, #1
 800aaac:	001a      	movs	r2, r3
 800aaae:	b299      	uxth	r1, r3
 800aab0:	4002      	ands	r2, r0
 800aab2:	4203      	tst	r3, r0
 800aab4:	d00f      	beq.n	800aad6 <__swsetup_r+0xd6>
 800aab6:	2200      	movs	r2, #0
 800aab8:	60a2      	str	r2, [r4, #8]
 800aaba:	6962      	ldr	r2, [r4, #20]
 800aabc:	4252      	negs	r2, r2
 800aabe:	61a2      	str	r2, [r4, #24]
 800aac0:	2000      	movs	r0, #0
 800aac2:	6922      	ldr	r2, [r4, #16]
 800aac4:	4282      	cmp	r2, r0
 800aac6:	d1ba      	bne.n	800aa3e <__swsetup_r+0x3e>
 800aac8:	060a      	lsls	r2, r1, #24
 800aaca:	d5b8      	bpl.n	800aa3e <__swsetup_r+0x3e>
 800aacc:	2240      	movs	r2, #64	; 0x40
 800aace:	4313      	orrs	r3, r2
 800aad0:	81a3      	strh	r3, [r4, #12]
 800aad2:	3801      	subs	r0, #1
 800aad4:	e7b3      	b.n	800aa3e <__swsetup_r+0x3e>
 800aad6:	0788      	lsls	r0, r1, #30
 800aad8:	d400      	bmi.n	800aadc <__swsetup_r+0xdc>
 800aada:	6962      	ldr	r2, [r4, #20]
 800aadc:	60a2      	str	r2, [r4, #8]
 800aade:	e7ef      	b.n	800aac0 <__swsetup_r+0xc0>
 800aae0:	2000000c 	.word	0x2000000c
 800aae4:	0800b71c 	.word	0x0800b71c
 800aae8:	0800b73c 	.word	0x0800b73c
 800aaec:	0800b6fc 	.word	0x0800b6fc

0800aaf0 <abort>:
 800aaf0:	2006      	movs	r0, #6
 800aaf2:	b510      	push	{r4, lr}
 800aaf4:	f000 fa70 	bl	800afd8 <raise>
 800aaf8:	2001      	movs	r0, #1
 800aafa:	f7f8 fcca 	bl	8003492 <_exit>
	...

0800ab00 <__sflush_r>:
 800ab00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab02:	898b      	ldrh	r3, [r1, #12]
 800ab04:	0005      	movs	r5, r0
 800ab06:	000c      	movs	r4, r1
 800ab08:	071a      	lsls	r2, r3, #28
 800ab0a:	d45f      	bmi.n	800abcc <__sflush_r+0xcc>
 800ab0c:	684a      	ldr	r2, [r1, #4]
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	dc04      	bgt.n	800ab1c <__sflush_r+0x1c>
 800ab12:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ab14:	2a00      	cmp	r2, #0
 800ab16:	dc01      	bgt.n	800ab1c <__sflush_r+0x1c>
 800ab18:	2000      	movs	r0, #0
 800ab1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab1c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ab1e:	2f00      	cmp	r7, #0
 800ab20:	d0fa      	beq.n	800ab18 <__sflush_r+0x18>
 800ab22:	2200      	movs	r2, #0
 800ab24:	2180      	movs	r1, #128	; 0x80
 800ab26:	682e      	ldr	r6, [r5, #0]
 800ab28:	602a      	str	r2, [r5, #0]
 800ab2a:	001a      	movs	r2, r3
 800ab2c:	0149      	lsls	r1, r1, #5
 800ab2e:	400a      	ands	r2, r1
 800ab30:	420b      	tst	r3, r1
 800ab32:	d034      	beq.n	800ab9e <__sflush_r+0x9e>
 800ab34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab36:	89a3      	ldrh	r3, [r4, #12]
 800ab38:	075b      	lsls	r3, r3, #29
 800ab3a:	d506      	bpl.n	800ab4a <__sflush_r+0x4a>
 800ab3c:	6863      	ldr	r3, [r4, #4]
 800ab3e:	1ac0      	subs	r0, r0, r3
 800ab40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <__sflush_r+0x4a>
 800ab46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab48:	1ac0      	subs	r0, r0, r3
 800ab4a:	0002      	movs	r2, r0
 800ab4c:	6a21      	ldr	r1, [r4, #32]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	0028      	movs	r0, r5
 800ab52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ab54:	47b8      	blx	r7
 800ab56:	89a1      	ldrh	r1, [r4, #12]
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d106      	bne.n	800ab6a <__sflush_r+0x6a>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	2b1d      	cmp	r3, #29
 800ab60:	d831      	bhi.n	800abc6 <__sflush_r+0xc6>
 800ab62:	4a2c      	ldr	r2, [pc, #176]	; (800ac14 <__sflush_r+0x114>)
 800ab64:	40da      	lsrs	r2, r3
 800ab66:	07d3      	lsls	r3, r2, #31
 800ab68:	d52d      	bpl.n	800abc6 <__sflush_r+0xc6>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	6063      	str	r3, [r4, #4]
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	04cb      	lsls	r3, r1, #19
 800ab74:	d505      	bpl.n	800ab82 <__sflush_r+0x82>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	d102      	bne.n	800ab80 <__sflush_r+0x80>
 800ab7a:	682b      	ldr	r3, [r5, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d100      	bne.n	800ab82 <__sflush_r+0x82>
 800ab80:	6560      	str	r0, [r4, #84]	; 0x54
 800ab82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab84:	602e      	str	r6, [r5, #0]
 800ab86:	2900      	cmp	r1, #0
 800ab88:	d0c6      	beq.n	800ab18 <__sflush_r+0x18>
 800ab8a:	0023      	movs	r3, r4
 800ab8c:	3344      	adds	r3, #68	; 0x44
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	d002      	beq.n	800ab98 <__sflush_r+0x98>
 800ab92:	0028      	movs	r0, r5
 800ab94:	f7fd fbc6 	bl	8008324 <_free_r>
 800ab98:	2000      	movs	r0, #0
 800ab9a:	6360      	str	r0, [r4, #52]	; 0x34
 800ab9c:	e7bd      	b.n	800ab1a <__sflush_r+0x1a>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	0028      	movs	r0, r5
 800aba2:	6a21      	ldr	r1, [r4, #32]
 800aba4:	47b8      	blx	r7
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	d1c5      	bne.n	800ab36 <__sflush_r+0x36>
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0c2      	beq.n	800ab36 <__sflush_r+0x36>
 800abb0:	2b1d      	cmp	r3, #29
 800abb2:	d001      	beq.n	800abb8 <__sflush_r+0xb8>
 800abb4:	2b16      	cmp	r3, #22
 800abb6:	d101      	bne.n	800abbc <__sflush_r+0xbc>
 800abb8:	602e      	str	r6, [r5, #0]
 800abba:	e7ad      	b.n	800ab18 <__sflush_r+0x18>
 800abbc:	2340      	movs	r3, #64	; 0x40
 800abbe:	89a2      	ldrh	r2, [r4, #12]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	81a3      	strh	r3, [r4, #12]
 800abc4:	e7a9      	b.n	800ab1a <__sflush_r+0x1a>
 800abc6:	2340      	movs	r3, #64	; 0x40
 800abc8:	430b      	orrs	r3, r1
 800abca:	e7fa      	b.n	800abc2 <__sflush_r+0xc2>
 800abcc:	690f      	ldr	r7, [r1, #16]
 800abce:	2f00      	cmp	r7, #0
 800abd0:	d0a2      	beq.n	800ab18 <__sflush_r+0x18>
 800abd2:	680a      	ldr	r2, [r1, #0]
 800abd4:	600f      	str	r7, [r1, #0]
 800abd6:	1bd2      	subs	r2, r2, r7
 800abd8:	9201      	str	r2, [sp, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	079b      	lsls	r3, r3, #30
 800abde:	d100      	bne.n	800abe2 <__sflush_r+0xe2>
 800abe0:	694a      	ldr	r2, [r1, #20]
 800abe2:	60a2      	str	r2, [r4, #8]
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	dc00      	bgt.n	800abec <__sflush_r+0xec>
 800abea:	e795      	b.n	800ab18 <__sflush_r+0x18>
 800abec:	003a      	movs	r2, r7
 800abee:	0028      	movs	r0, r5
 800abf0:	9b01      	ldr	r3, [sp, #4]
 800abf2:	6a21      	ldr	r1, [r4, #32]
 800abf4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abf6:	47b0      	blx	r6
 800abf8:	2800      	cmp	r0, #0
 800abfa:	dc06      	bgt.n	800ac0a <__sflush_r+0x10a>
 800abfc:	2340      	movs	r3, #64	; 0x40
 800abfe:	2001      	movs	r0, #1
 800ac00:	89a2      	ldrh	r2, [r4, #12]
 800ac02:	4240      	negs	r0, r0
 800ac04:	4313      	orrs	r3, r2
 800ac06:	81a3      	strh	r3, [r4, #12]
 800ac08:	e787      	b.n	800ab1a <__sflush_r+0x1a>
 800ac0a:	9b01      	ldr	r3, [sp, #4]
 800ac0c:	183f      	adds	r7, r7, r0
 800ac0e:	1a1b      	subs	r3, r3, r0
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	e7e7      	b.n	800abe4 <__sflush_r+0xe4>
 800ac14:	20400001 	.word	0x20400001

0800ac18 <_fflush_r>:
 800ac18:	690b      	ldr	r3, [r1, #16]
 800ac1a:	b570      	push	{r4, r5, r6, lr}
 800ac1c:	0005      	movs	r5, r0
 800ac1e:	000c      	movs	r4, r1
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d102      	bne.n	800ac2a <_fflush_r+0x12>
 800ac24:	2500      	movs	r5, #0
 800ac26:	0028      	movs	r0, r5
 800ac28:	bd70      	pop	{r4, r5, r6, pc}
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d004      	beq.n	800ac38 <_fflush_r+0x20>
 800ac2e:	6983      	ldr	r3, [r0, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <_fflush_r+0x20>
 800ac34:	f000 f892 	bl	800ad5c <__sinit>
 800ac38:	4b14      	ldr	r3, [pc, #80]	; (800ac8c <_fflush_r+0x74>)
 800ac3a:	429c      	cmp	r4, r3
 800ac3c:	d11b      	bne.n	800ac76 <_fflush_r+0x5e>
 800ac3e:	686c      	ldr	r4, [r5, #4]
 800ac40:	220c      	movs	r2, #12
 800ac42:	5ea3      	ldrsh	r3, [r4, r2]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d0ed      	beq.n	800ac24 <_fflush_r+0xc>
 800ac48:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac4a:	07d2      	lsls	r2, r2, #31
 800ac4c:	d404      	bmi.n	800ac58 <_fflush_r+0x40>
 800ac4e:	059b      	lsls	r3, r3, #22
 800ac50:	d402      	bmi.n	800ac58 <_fflush_r+0x40>
 800ac52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac54:	f7ff fcc1 	bl	800a5da <__retarget_lock_acquire_recursive>
 800ac58:	0028      	movs	r0, r5
 800ac5a:	0021      	movs	r1, r4
 800ac5c:	f7ff ff50 	bl	800ab00 <__sflush_r>
 800ac60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac62:	0005      	movs	r5, r0
 800ac64:	07db      	lsls	r3, r3, #31
 800ac66:	d4de      	bmi.n	800ac26 <_fflush_r+0xe>
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	059b      	lsls	r3, r3, #22
 800ac6c:	d4db      	bmi.n	800ac26 <_fflush_r+0xe>
 800ac6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac70:	f7ff fcb4 	bl	800a5dc <__retarget_lock_release_recursive>
 800ac74:	e7d7      	b.n	800ac26 <_fflush_r+0xe>
 800ac76:	4b06      	ldr	r3, [pc, #24]	; (800ac90 <_fflush_r+0x78>)
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	d101      	bne.n	800ac80 <_fflush_r+0x68>
 800ac7c:	68ac      	ldr	r4, [r5, #8]
 800ac7e:	e7df      	b.n	800ac40 <_fflush_r+0x28>
 800ac80:	4b04      	ldr	r3, [pc, #16]	; (800ac94 <_fflush_r+0x7c>)
 800ac82:	429c      	cmp	r4, r3
 800ac84:	d1dc      	bne.n	800ac40 <_fflush_r+0x28>
 800ac86:	68ec      	ldr	r4, [r5, #12]
 800ac88:	e7da      	b.n	800ac40 <_fflush_r+0x28>
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	0800b71c 	.word	0x0800b71c
 800ac90:	0800b73c 	.word	0x0800b73c
 800ac94:	0800b6fc 	.word	0x0800b6fc

0800ac98 <std>:
 800ac98:	2300      	movs	r3, #0
 800ac9a:	b510      	push	{r4, lr}
 800ac9c:	0004      	movs	r4, r0
 800ac9e:	6003      	str	r3, [r0, #0]
 800aca0:	6043      	str	r3, [r0, #4]
 800aca2:	6083      	str	r3, [r0, #8]
 800aca4:	8181      	strh	r1, [r0, #12]
 800aca6:	6643      	str	r3, [r0, #100]	; 0x64
 800aca8:	0019      	movs	r1, r3
 800acaa:	81c2      	strh	r2, [r0, #14]
 800acac:	6103      	str	r3, [r0, #16]
 800acae:	6143      	str	r3, [r0, #20]
 800acb0:	6183      	str	r3, [r0, #24]
 800acb2:	2208      	movs	r2, #8
 800acb4:	305c      	adds	r0, #92	; 0x5c
 800acb6:	f7fd fb2c 	bl	8008312 <memset>
 800acba:	4b05      	ldr	r3, [pc, #20]	; (800acd0 <std+0x38>)
 800acbc:	6263      	str	r3, [r4, #36]	; 0x24
 800acbe:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <std+0x3c>)
 800acc0:	6224      	str	r4, [r4, #32]
 800acc2:	62a3      	str	r3, [r4, #40]	; 0x28
 800acc4:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <std+0x40>)
 800acc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <std+0x44>)
 800acca:	6323      	str	r3, [r4, #48]	; 0x30
 800accc:	bd10      	pop	{r4, pc}
 800acce:	46c0      	nop			; (mov r8, r8)
 800acd0:	0800b019 	.word	0x0800b019
 800acd4:	0800b041 	.word	0x0800b041
 800acd8:	0800b079 	.word	0x0800b079
 800acdc:	0800b0a5 	.word	0x0800b0a5

0800ace0 <_cleanup_r>:
 800ace0:	b510      	push	{r4, lr}
 800ace2:	4902      	ldr	r1, [pc, #8]	; (800acec <_cleanup_r+0xc>)
 800ace4:	f000 f8ba 	bl	800ae5c <_fwalk_reent>
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	46c0      	nop			; (mov r8, r8)
 800acec:	0800ac19 	.word	0x0800ac19

0800acf0 <__sfmoreglue>:
 800acf0:	b570      	push	{r4, r5, r6, lr}
 800acf2:	2568      	movs	r5, #104	; 0x68
 800acf4:	1e4a      	subs	r2, r1, #1
 800acf6:	4355      	muls	r5, r2
 800acf8:	000e      	movs	r6, r1
 800acfa:	0029      	movs	r1, r5
 800acfc:	3174      	adds	r1, #116	; 0x74
 800acfe:	f7fd fb5b 	bl	80083b8 <_malloc_r>
 800ad02:	1e04      	subs	r4, r0, #0
 800ad04:	d008      	beq.n	800ad18 <__sfmoreglue+0x28>
 800ad06:	2100      	movs	r1, #0
 800ad08:	002a      	movs	r2, r5
 800ad0a:	6001      	str	r1, [r0, #0]
 800ad0c:	6046      	str	r6, [r0, #4]
 800ad0e:	300c      	adds	r0, #12
 800ad10:	60a0      	str	r0, [r4, #8]
 800ad12:	3268      	adds	r2, #104	; 0x68
 800ad14:	f7fd fafd 	bl	8008312 <memset>
 800ad18:	0020      	movs	r0, r4
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}

0800ad1c <__sfp_lock_acquire>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4802      	ldr	r0, [pc, #8]	; (800ad28 <__sfp_lock_acquire+0xc>)
 800ad20:	f7ff fc5b 	bl	800a5da <__retarget_lock_acquire_recursive>
 800ad24:	bd10      	pop	{r4, pc}
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	2000035c 	.word	0x2000035c

0800ad2c <__sfp_lock_release>:
 800ad2c:	b510      	push	{r4, lr}
 800ad2e:	4802      	ldr	r0, [pc, #8]	; (800ad38 <__sfp_lock_release+0xc>)
 800ad30:	f7ff fc54 	bl	800a5dc <__retarget_lock_release_recursive>
 800ad34:	bd10      	pop	{r4, pc}
 800ad36:	46c0      	nop			; (mov r8, r8)
 800ad38:	2000035c 	.word	0x2000035c

0800ad3c <__sinit_lock_acquire>:
 800ad3c:	b510      	push	{r4, lr}
 800ad3e:	4802      	ldr	r0, [pc, #8]	; (800ad48 <__sinit_lock_acquire+0xc>)
 800ad40:	f7ff fc4b 	bl	800a5da <__retarget_lock_acquire_recursive>
 800ad44:	bd10      	pop	{r4, pc}
 800ad46:	46c0      	nop			; (mov r8, r8)
 800ad48:	20000357 	.word	0x20000357

0800ad4c <__sinit_lock_release>:
 800ad4c:	b510      	push	{r4, lr}
 800ad4e:	4802      	ldr	r0, [pc, #8]	; (800ad58 <__sinit_lock_release+0xc>)
 800ad50:	f7ff fc44 	bl	800a5dc <__retarget_lock_release_recursive>
 800ad54:	bd10      	pop	{r4, pc}
 800ad56:	46c0      	nop			; (mov r8, r8)
 800ad58:	20000357 	.word	0x20000357

0800ad5c <__sinit>:
 800ad5c:	b513      	push	{r0, r1, r4, lr}
 800ad5e:	0004      	movs	r4, r0
 800ad60:	f7ff ffec 	bl	800ad3c <__sinit_lock_acquire>
 800ad64:	69a3      	ldr	r3, [r4, #24]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <__sinit+0x14>
 800ad6a:	f7ff ffef 	bl	800ad4c <__sinit_lock_release>
 800ad6e:	bd13      	pop	{r0, r1, r4, pc}
 800ad70:	64a3      	str	r3, [r4, #72]	; 0x48
 800ad72:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ad74:	6523      	str	r3, [r4, #80]	; 0x50
 800ad76:	4b13      	ldr	r3, [pc, #76]	; (800adc4 <__sinit+0x68>)
 800ad78:	4a13      	ldr	r2, [pc, #76]	; (800adc8 <__sinit+0x6c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d101      	bne.n	800ad88 <__sinit+0x2c>
 800ad84:	2301      	movs	r3, #1
 800ad86:	61a3      	str	r3, [r4, #24]
 800ad88:	0020      	movs	r0, r4
 800ad8a:	f000 f81f 	bl	800adcc <__sfp>
 800ad8e:	6060      	str	r0, [r4, #4]
 800ad90:	0020      	movs	r0, r4
 800ad92:	f000 f81b 	bl	800adcc <__sfp>
 800ad96:	60a0      	str	r0, [r4, #8]
 800ad98:	0020      	movs	r0, r4
 800ad9a:	f000 f817 	bl	800adcc <__sfp>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2104      	movs	r1, #4
 800ada2:	60e0      	str	r0, [r4, #12]
 800ada4:	6860      	ldr	r0, [r4, #4]
 800ada6:	f7ff ff77 	bl	800ac98 <std>
 800adaa:	2201      	movs	r2, #1
 800adac:	2109      	movs	r1, #9
 800adae:	68a0      	ldr	r0, [r4, #8]
 800adb0:	f7ff ff72 	bl	800ac98 <std>
 800adb4:	2202      	movs	r2, #2
 800adb6:	2112      	movs	r1, #18
 800adb8:	68e0      	ldr	r0, [r4, #12]
 800adba:	f7ff ff6d 	bl	800ac98 <std>
 800adbe:	2301      	movs	r3, #1
 800adc0:	61a3      	str	r3, [r4, #24]
 800adc2:	e7d2      	b.n	800ad6a <__sinit+0xe>
 800adc4:	0800b378 	.word	0x0800b378
 800adc8:	0800ace1 	.word	0x0800ace1

0800adcc <__sfp>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	0007      	movs	r7, r0
 800add0:	f7ff ffa4 	bl	800ad1c <__sfp_lock_acquire>
 800add4:	4b1f      	ldr	r3, [pc, #124]	; (800ae54 <__sfp+0x88>)
 800add6:	681e      	ldr	r6, [r3, #0]
 800add8:	69b3      	ldr	r3, [r6, #24]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <__sfp+0x18>
 800adde:	0030      	movs	r0, r6
 800ade0:	f7ff ffbc 	bl	800ad5c <__sinit>
 800ade4:	3648      	adds	r6, #72	; 0x48
 800ade6:	68b4      	ldr	r4, [r6, #8]
 800ade8:	6873      	ldr	r3, [r6, #4]
 800adea:	3b01      	subs	r3, #1
 800adec:	d504      	bpl.n	800adf8 <__sfp+0x2c>
 800adee:	6833      	ldr	r3, [r6, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d022      	beq.n	800ae3a <__sfp+0x6e>
 800adf4:	6836      	ldr	r6, [r6, #0]
 800adf6:	e7f6      	b.n	800ade6 <__sfp+0x1a>
 800adf8:	220c      	movs	r2, #12
 800adfa:	5ea5      	ldrsh	r5, [r4, r2]
 800adfc:	2d00      	cmp	r5, #0
 800adfe:	d11a      	bne.n	800ae36 <__sfp+0x6a>
 800ae00:	0020      	movs	r0, r4
 800ae02:	4b15      	ldr	r3, [pc, #84]	; (800ae58 <__sfp+0x8c>)
 800ae04:	3058      	adds	r0, #88	; 0x58
 800ae06:	60e3      	str	r3, [r4, #12]
 800ae08:	6665      	str	r5, [r4, #100]	; 0x64
 800ae0a:	f7ff fbe5 	bl	800a5d8 <__retarget_lock_init_recursive>
 800ae0e:	f7ff ff8d 	bl	800ad2c <__sfp_lock_release>
 800ae12:	0020      	movs	r0, r4
 800ae14:	2208      	movs	r2, #8
 800ae16:	0029      	movs	r1, r5
 800ae18:	6025      	str	r5, [r4, #0]
 800ae1a:	60a5      	str	r5, [r4, #8]
 800ae1c:	6065      	str	r5, [r4, #4]
 800ae1e:	6125      	str	r5, [r4, #16]
 800ae20:	6165      	str	r5, [r4, #20]
 800ae22:	61a5      	str	r5, [r4, #24]
 800ae24:	305c      	adds	r0, #92	; 0x5c
 800ae26:	f7fd fa74 	bl	8008312 <memset>
 800ae2a:	6365      	str	r5, [r4, #52]	; 0x34
 800ae2c:	63a5      	str	r5, [r4, #56]	; 0x38
 800ae2e:	64a5      	str	r5, [r4, #72]	; 0x48
 800ae30:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ae32:	0020      	movs	r0, r4
 800ae34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae36:	3468      	adds	r4, #104	; 0x68
 800ae38:	e7d7      	b.n	800adea <__sfp+0x1e>
 800ae3a:	2104      	movs	r1, #4
 800ae3c:	0038      	movs	r0, r7
 800ae3e:	f7ff ff57 	bl	800acf0 <__sfmoreglue>
 800ae42:	1e04      	subs	r4, r0, #0
 800ae44:	6030      	str	r0, [r6, #0]
 800ae46:	d1d5      	bne.n	800adf4 <__sfp+0x28>
 800ae48:	f7ff ff70 	bl	800ad2c <__sfp_lock_release>
 800ae4c:	230c      	movs	r3, #12
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	e7ef      	b.n	800ae32 <__sfp+0x66>
 800ae52:	46c0      	nop			; (mov r8, r8)
 800ae54:	0800b378 	.word	0x0800b378
 800ae58:	ffff0001 	.word	0xffff0001

0800ae5c <_fwalk_reent>:
 800ae5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae5e:	0004      	movs	r4, r0
 800ae60:	0006      	movs	r6, r0
 800ae62:	2700      	movs	r7, #0
 800ae64:	9101      	str	r1, [sp, #4]
 800ae66:	3448      	adds	r4, #72	; 0x48
 800ae68:	6863      	ldr	r3, [r4, #4]
 800ae6a:	68a5      	ldr	r5, [r4, #8]
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	9b00      	ldr	r3, [sp, #0]
 800ae70:	3b01      	subs	r3, #1
 800ae72:	9300      	str	r3, [sp, #0]
 800ae74:	d504      	bpl.n	800ae80 <_fwalk_reent+0x24>
 800ae76:	6824      	ldr	r4, [r4, #0]
 800ae78:	2c00      	cmp	r4, #0
 800ae7a:	d1f5      	bne.n	800ae68 <_fwalk_reent+0xc>
 800ae7c:	0038      	movs	r0, r7
 800ae7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae80:	89ab      	ldrh	r3, [r5, #12]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d908      	bls.n	800ae98 <_fwalk_reent+0x3c>
 800ae86:	220e      	movs	r2, #14
 800ae88:	5eab      	ldrsh	r3, [r5, r2]
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	d004      	beq.n	800ae98 <_fwalk_reent+0x3c>
 800ae8e:	0029      	movs	r1, r5
 800ae90:	0030      	movs	r0, r6
 800ae92:	9b01      	ldr	r3, [sp, #4]
 800ae94:	4798      	blx	r3
 800ae96:	4307      	orrs	r7, r0
 800ae98:	3568      	adds	r5, #104	; 0x68
 800ae9a:	e7e8      	b.n	800ae6e <_fwalk_reent+0x12>

0800ae9c <__swhatbuf_r>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	000e      	movs	r6, r1
 800aea0:	001d      	movs	r5, r3
 800aea2:	230e      	movs	r3, #14
 800aea4:	5ec9      	ldrsh	r1, [r1, r3]
 800aea6:	0014      	movs	r4, r2
 800aea8:	b096      	sub	sp, #88	; 0x58
 800aeaa:	2900      	cmp	r1, #0
 800aeac:	da07      	bge.n	800aebe <__swhatbuf_r+0x22>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	602b      	str	r3, [r5, #0]
 800aeb2:	89b3      	ldrh	r3, [r6, #12]
 800aeb4:	061b      	lsls	r3, r3, #24
 800aeb6:	d411      	bmi.n	800aedc <__swhatbuf_r+0x40>
 800aeb8:	2380      	movs	r3, #128	; 0x80
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	e00f      	b.n	800aede <__swhatbuf_r+0x42>
 800aebe:	466a      	mov	r2, sp
 800aec0:	f000 f91c 	bl	800b0fc <_fstat_r>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	dbf2      	blt.n	800aeae <__swhatbuf_r+0x12>
 800aec8:	23f0      	movs	r3, #240	; 0xf0
 800aeca:	9901      	ldr	r1, [sp, #4]
 800aecc:	021b      	lsls	r3, r3, #8
 800aece:	4019      	ands	r1, r3
 800aed0:	4b05      	ldr	r3, [pc, #20]	; (800aee8 <__swhatbuf_r+0x4c>)
 800aed2:	18c9      	adds	r1, r1, r3
 800aed4:	424b      	negs	r3, r1
 800aed6:	4159      	adcs	r1, r3
 800aed8:	6029      	str	r1, [r5, #0]
 800aeda:	e7ed      	b.n	800aeb8 <__swhatbuf_r+0x1c>
 800aedc:	2340      	movs	r3, #64	; 0x40
 800aede:	2000      	movs	r0, #0
 800aee0:	6023      	str	r3, [r4, #0]
 800aee2:	b016      	add	sp, #88	; 0x58
 800aee4:	bd70      	pop	{r4, r5, r6, pc}
 800aee6:	46c0      	nop			; (mov r8, r8)
 800aee8:	ffffe000 	.word	0xffffe000

0800aeec <__smakebuf_r>:
 800aeec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeee:	2602      	movs	r6, #2
 800aef0:	898b      	ldrh	r3, [r1, #12]
 800aef2:	0005      	movs	r5, r0
 800aef4:	000c      	movs	r4, r1
 800aef6:	4233      	tst	r3, r6
 800aef8:	d006      	beq.n	800af08 <__smakebuf_r+0x1c>
 800aefa:	0023      	movs	r3, r4
 800aefc:	3347      	adds	r3, #71	; 0x47
 800aefe:	6023      	str	r3, [r4, #0]
 800af00:	6123      	str	r3, [r4, #16]
 800af02:	2301      	movs	r3, #1
 800af04:	6163      	str	r3, [r4, #20]
 800af06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800af08:	466a      	mov	r2, sp
 800af0a:	ab01      	add	r3, sp, #4
 800af0c:	f7ff ffc6 	bl	800ae9c <__swhatbuf_r>
 800af10:	9900      	ldr	r1, [sp, #0]
 800af12:	0007      	movs	r7, r0
 800af14:	0028      	movs	r0, r5
 800af16:	f7fd fa4f 	bl	80083b8 <_malloc_r>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d108      	bne.n	800af30 <__smakebuf_r+0x44>
 800af1e:	220c      	movs	r2, #12
 800af20:	5ea3      	ldrsh	r3, [r4, r2]
 800af22:	059a      	lsls	r2, r3, #22
 800af24:	d4ef      	bmi.n	800af06 <__smakebuf_r+0x1a>
 800af26:	2203      	movs	r2, #3
 800af28:	4393      	bics	r3, r2
 800af2a:	431e      	orrs	r6, r3
 800af2c:	81a6      	strh	r6, [r4, #12]
 800af2e:	e7e4      	b.n	800aefa <__smakebuf_r+0xe>
 800af30:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <__smakebuf_r+0x84>)
 800af32:	62ab      	str	r3, [r5, #40]	; 0x28
 800af34:	2380      	movs	r3, #128	; 0x80
 800af36:	89a2      	ldrh	r2, [r4, #12]
 800af38:	6020      	str	r0, [r4, #0]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	81a3      	strh	r3, [r4, #12]
 800af3e:	9b00      	ldr	r3, [sp, #0]
 800af40:	6120      	str	r0, [r4, #16]
 800af42:	6163      	str	r3, [r4, #20]
 800af44:	9b01      	ldr	r3, [sp, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00d      	beq.n	800af66 <__smakebuf_r+0x7a>
 800af4a:	0028      	movs	r0, r5
 800af4c:	230e      	movs	r3, #14
 800af4e:	5ee1      	ldrsh	r1, [r4, r3]
 800af50:	f000 f8e6 	bl	800b120 <_isatty_r>
 800af54:	2800      	cmp	r0, #0
 800af56:	d006      	beq.n	800af66 <__smakebuf_r+0x7a>
 800af58:	2203      	movs	r2, #3
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	4393      	bics	r3, r2
 800af5e:	001a      	movs	r2, r3
 800af60:	2301      	movs	r3, #1
 800af62:	4313      	orrs	r3, r2
 800af64:	81a3      	strh	r3, [r4, #12]
 800af66:	89a0      	ldrh	r0, [r4, #12]
 800af68:	4307      	orrs	r7, r0
 800af6a:	81a7      	strh	r7, [r4, #12]
 800af6c:	e7cb      	b.n	800af06 <__smakebuf_r+0x1a>
 800af6e:	46c0      	nop			; (mov r8, r8)
 800af70:	0800ace1 	.word	0x0800ace1

0800af74 <_malloc_usable_size_r>:
 800af74:	1f0b      	subs	r3, r1, #4
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	1f18      	subs	r0, r3, #4
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	da01      	bge.n	800af82 <_malloc_usable_size_r+0xe>
 800af7e:	580b      	ldr	r3, [r1, r0]
 800af80:	18c0      	adds	r0, r0, r3
 800af82:	4770      	bx	lr

0800af84 <_raise_r>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	0004      	movs	r4, r0
 800af88:	000d      	movs	r5, r1
 800af8a:	291f      	cmp	r1, #31
 800af8c:	d904      	bls.n	800af98 <_raise_r+0x14>
 800af8e:	2316      	movs	r3, #22
 800af90:	6003      	str	r3, [r0, #0]
 800af92:	2001      	movs	r0, #1
 800af94:	4240      	negs	r0, r0
 800af96:	bd70      	pop	{r4, r5, r6, pc}
 800af98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d004      	beq.n	800afa8 <_raise_r+0x24>
 800af9e:	008a      	lsls	r2, r1, #2
 800afa0:	189b      	adds	r3, r3, r2
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	2a00      	cmp	r2, #0
 800afa6:	d108      	bne.n	800afba <_raise_r+0x36>
 800afa8:	0020      	movs	r0, r4
 800afaa:	f000 f831 	bl	800b010 <_getpid_r>
 800afae:	002a      	movs	r2, r5
 800afb0:	0001      	movs	r1, r0
 800afb2:	0020      	movs	r0, r4
 800afb4:	f000 f81a 	bl	800afec <_kill_r>
 800afb8:	e7ed      	b.n	800af96 <_raise_r+0x12>
 800afba:	2000      	movs	r0, #0
 800afbc:	2a01      	cmp	r2, #1
 800afbe:	d0ea      	beq.n	800af96 <_raise_r+0x12>
 800afc0:	1c51      	adds	r1, r2, #1
 800afc2:	d103      	bne.n	800afcc <_raise_r+0x48>
 800afc4:	2316      	movs	r3, #22
 800afc6:	3001      	adds	r0, #1
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	e7e4      	b.n	800af96 <_raise_r+0x12>
 800afcc:	2400      	movs	r4, #0
 800afce:	0028      	movs	r0, r5
 800afd0:	601c      	str	r4, [r3, #0]
 800afd2:	4790      	blx	r2
 800afd4:	0020      	movs	r0, r4
 800afd6:	e7de      	b.n	800af96 <_raise_r+0x12>

0800afd8 <raise>:
 800afd8:	b510      	push	{r4, lr}
 800afda:	4b03      	ldr	r3, [pc, #12]	; (800afe8 <raise+0x10>)
 800afdc:	0001      	movs	r1, r0
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	f7ff ffd0 	bl	800af84 <_raise_r>
 800afe4:	bd10      	pop	{r4, pc}
 800afe6:	46c0      	nop			; (mov r8, r8)
 800afe8:	2000000c 	.word	0x2000000c

0800afec <_kill_r>:
 800afec:	2300      	movs	r3, #0
 800afee:	b570      	push	{r4, r5, r6, lr}
 800aff0:	4d06      	ldr	r5, [pc, #24]	; (800b00c <_kill_r+0x20>)
 800aff2:	0004      	movs	r4, r0
 800aff4:	0008      	movs	r0, r1
 800aff6:	0011      	movs	r1, r2
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	f7f8 fa3a 	bl	8003472 <_kill>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d103      	bne.n	800b00a <_kill_r+0x1e>
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d000      	beq.n	800b00a <_kill_r+0x1e>
 800b008:	6023      	str	r3, [r4, #0]
 800b00a:	bd70      	pop	{r4, r5, r6, pc}
 800b00c:	20000350 	.word	0x20000350

0800b010 <_getpid_r>:
 800b010:	b510      	push	{r4, lr}
 800b012:	f7f8 fa28 	bl	8003466 <_getpid>
 800b016:	bd10      	pop	{r4, pc}

0800b018 <__sread>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	000c      	movs	r4, r1
 800b01c:	250e      	movs	r5, #14
 800b01e:	5f49      	ldrsh	r1, [r1, r5]
 800b020:	f000 f8a4 	bl	800b16c <_read_r>
 800b024:	2800      	cmp	r0, #0
 800b026:	db03      	blt.n	800b030 <__sread+0x18>
 800b028:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b02a:	181b      	adds	r3, r3, r0
 800b02c:	6563      	str	r3, [r4, #84]	; 0x54
 800b02e:	bd70      	pop	{r4, r5, r6, pc}
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	4a02      	ldr	r2, [pc, #8]	; (800b03c <__sread+0x24>)
 800b034:	4013      	ands	r3, r2
 800b036:	81a3      	strh	r3, [r4, #12]
 800b038:	e7f9      	b.n	800b02e <__sread+0x16>
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	ffffefff 	.word	0xffffefff

0800b040 <__swrite>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	001f      	movs	r7, r3
 800b044:	898b      	ldrh	r3, [r1, #12]
 800b046:	0005      	movs	r5, r0
 800b048:	000c      	movs	r4, r1
 800b04a:	0016      	movs	r6, r2
 800b04c:	05db      	lsls	r3, r3, #23
 800b04e:	d505      	bpl.n	800b05c <__swrite+0x1c>
 800b050:	230e      	movs	r3, #14
 800b052:	5ec9      	ldrsh	r1, [r1, r3]
 800b054:	2200      	movs	r2, #0
 800b056:	2302      	movs	r3, #2
 800b058:	f000 f874 	bl	800b144 <_lseek_r>
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	4a05      	ldr	r2, [pc, #20]	; (800b074 <__swrite+0x34>)
 800b060:	0028      	movs	r0, r5
 800b062:	4013      	ands	r3, r2
 800b064:	81a3      	strh	r3, [r4, #12]
 800b066:	0032      	movs	r2, r6
 800b068:	230e      	movs	r3, #14
 800b06a:	5ee1      	ldrsh	r1, [r4, r3]
 800b06c:	003b      	movs	r3, r7
 800b06e:	f000 f81f 	bl	800b0b0 <_write_r>
 800b072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b074:	ffffefff 	.word	0xffffefff

0800b078 <__sseek>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	000c      	movs	r4, r1
 800b07c:	250e      	movs	r5, #14
 800b07e:	5f49      	ldrsh	r1, [r1, r5]
 800b080:	f000 f860 	bl	800b144 <_lseek_r>
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	1c42      	adds	r2, r0, #1
 800b088:	d103      	bne.n	800b092 <__sseek+0x1a>
 800b08a:	4a05      	ldr	r2, [pc, #20]	; (800b0a0 <__sseek+0x28>)
 800b08c:	4013      	ands	r3, r2
 800b08e:	81a3      	strh	r3, [r4, #12]
 800b090:	bd70      	pop	{r4, r5, r6, pc}
 800b092:	2280      	movs	r2, #128	; 0x80
 800b094:	0152      	lsls	r2, r2, #5
 800b096:	4313      	orrs	r3, r2
 800b098:	81a3      	strh	r3, [r4, #12]
 800b09a:	6560      	str	r0, [r4, #84]	; 0x54
 800b09c:	e7f8      	b.n	800b090 <__sseek+0x18>
 800b09e:	46c0      	nop			; (mov r8, r8)
 800b0a0:	ffffefff 	.word	0xffffefff

0800b0a4 <__sclose>:
 800b0a4:	b510      	push	{r4, lr}
 800b0a6:	230e      	movs	r3, #14
 800b0a8:	5ec9      	ldrsh	r1, [r1, r3]
 800b0aa:	f000 f815 	bl	800b0d8 <_close_r>
 800b0ae:	bd10      	pop	{r4, pc}

0800b0b0 <_write_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	0004      	movs	r4, r0
 800b0b4:	0008      	movs	r0, r1
 800b0b6:	0011      	movs	r1, r2
 800b0b8:	001a      	movs	r2, r3
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	4d05      	ldr	r5, [pc, #20]	; (800b0d4 <_write_r+0x24>)
 800b0be:	602b      	str	r3, [r5, #0]
 800b0c0:	f7f8 fa10 	bl	80034e4 <_write>
 800b0c4:	1c43      	adds	r3, r0, #1
 800b0c6:	d103      	bne.n	800b0d0 <_write_r+0x20>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d000      	beq.n	800b0d0 <_write_r+0x20>
 800b0ce:	6023      	str	r3, [r4, #0]
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}
 800b0d2:	46c0      	nop			; (mov r8, r8)
 800b0d4:	20000350 	.word	0x20000350

0800b0d8 <_close_r>:
 800b0d8:	2300      	movs	r3, #0
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	4d06      	ldr	r5, [pc, #24]	; (800b0f8 <_close_r+0x20>)
 800b0de:	0004      	movs	r4, r0
 800b0e0:	0008      	movs	r0, r1
 800b0e2:	602b      	str	r3, [r5, #0]
 800b0e4:	f7f8 fa1a 	bl	800351c <_close>
 800b0e8:	1c43      	adds	r3, r0, #1
 800b0ea:	d103      	bne.n	800b0f4 <_close_r+0x1c>
 800b0ec:	682b      	ldr	r3, [r5, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d000      	beq.n	800b0f4 <_close_r+0x1c>
 800b0f2:	6023      	str	r3, [r4, #0]
 800b0f4:	bd70      	pop	{r4, r5, r6, pc}
 800b0f6:	46c0      	nop			; (mov r8, r8)
 800b0f8:	20000350 	.word	0x20000350

0800b0fc <_fstat_r>:
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	b570      	push	{r4, r5, r6, lr}
 800b100:	4d06      	ldr	r5, [pc, #24]	; (800b11c <_fstat_r+0x20>)
 800b102:	0004      	movs	r4, r0
 800b104:	0008      	movs	r0, r1
 800b106:	0011      	movs	r1, r2
 800b108:	602b      	str	r3, [r5, #0]
 800b10a:	f7f8 fa11 	bl	8003530 <_fstat>
 800b10e:	1c43      	adds	r3, r0, #1
 800b110:	d103      	bne.n	800b11a <_fstat_r+0x1e>
 800b112:	682b      	ldr	r3, [r5, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d000      	beq.n	800b11a <_fstat_r+0x1e>
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	20000350 	.word	0x20000350

0800b120 <_isatty_r>:
 800b120:	2300      	movs	r3, #0
 800b122:	b570      	push	{r4, r5, r6, lr}
 800b124:	4d06      	ldr	r5, [pc, #24]	; (800b140 <_isatty_r+0x20>)
 800b126:	0004      	movs	r4, r0
 800b128:	0008      	movs	r0, r1
 800b12a:	602b      	str	r3, [r5, #0]
 800b12c:	f7f8 fa0e 	bl	800354c <_isatty>
 800b130:	1c43      	adds	r3, r0, #1
 800b132:	d103      	bne.n	800b13c <_isatty_r+0x1c>
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d000      	beq.n	800b13c <_isatty_r+0x1c>
 800b13a:	6023      	str	r3, [r4, #0]
 800b13c:	bd70      	pop	{r4, r5, r6, pc}
 800b13e:	46c0      	nop			; (mov r8, r8)
 800b140:	20000350 	.word	0x20000350

0800b144 <_lseek_r>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	0004      	movs	r4, r0
 800b148:	0008      	movs	r0, r1
 800b14a:	0011      	movs	r1, r2
 800b14c:	001a      	movs	r2, r3
 800b14e:	2300      	movs	r3, #0
 800b150:	4d05      	ldr	r5, [pc, #20]	; (800b168 <_lseek_r+0x24>)
 800b152:	602b      	str	r3, [r5, #0]
 800b154:	f7f8 fa03 	bl	800355e <_lseek>
 800b158:	1c43      	adds	r3, r0, #1
 800b15a:	d103      	bne.n	800b164 <_lseek_r+0x20>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d000      	beq.n	800b164 <_lseek_r+0x20>
 800b162:	6023      	str	r3, [r4, #0]
 800b164:	bd70      	pop	{r4, r5, r6, pc}
 800b166:	46c0      	nop			; (mov r8, r8)
 800b168:	20000350 	.word	0x20000350

0800b16c <_read_r>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	0004      	movs	r4, r0
 800b170:	0008      	movs	r0, r1
 800b172:	0011      	movs	r1, r2
 800b174:	001a      	movs	r2, r3
 800b176:	2300      	movs	r3, #0
 800b178:	4d05      	ldr	r5, [pc, #20]	; (800b190 <_read_r+0x24>)
 800b17a:	602b      	str	r3, [r5, #0]
 800b17c:	f7f8 f995 	bl	80034aa <_read>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d103      	bne.n	800b18c <_read_r+0x20>
 800b184:	682b      	ldr	r3, [r5, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d000      	beq.n	800b18c <_read_r+0x20>
 800b18a:	6023      	str	r3, [r4, #0]
 800b18c:	bd70      	pop	{r4, r5, r6, pc}
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	20000350 	.word	0x20000350

0800b194 <_init>:
 800b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b196:	46c0      	nop			; (mov r8, r8)
 800b198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19a:	bc08      	pop	{r3}
 800b19c:	469e      	mov	lr, r3
 800b19e:	4770      	bx	lr

0800b1a0 <_fini>:
 800b1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a2:	46c0      	nop			; (mov r8, r8)
 800b1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1a6:	bc08      	pop	{r3}
 800b1a8:	469e      	mov	lr, r3
 800b1aa:	4770      	bx	lr
