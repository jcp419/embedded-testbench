
PDBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a78  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb4  08007cb4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb4  08007cb4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb4  08007cb4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08007d2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08007d2c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcf7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002603  00000000  00000000  0002fd8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00032398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  00032ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017025  00000000  00000000  000338e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edaa  00000000  00000000  0004a905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a6d  00000000  00000000  000596af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e311c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aec  00000000  00000000  000e3170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000070 	.word	0x20000070
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08007b14 	.word	0x08007b14

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000074 	.word	0x20000074
 80000f8:	08007b14 	.word	0x08007b14

080000fc <__udivsi3>:
 80000fc:	2200      	movs	r2, #0
 80000fe:	0843      	lsrs	r3, r0, #1
 8000100:	428b      	cmp	r3, r1
 8000102:	d374      	bcc.n	80001ee <__udivsi3+0xf2>
 8000104:	0903      	lsrs	r3, r0, #4
 8000106:	428b      	cmp	r3, r1
 8000108:	d35f      	bcc.n	80001ca <__udivsi3+0xce>
 800010a:	0a03      	lsrs	r3, r0, #8
 800010c:	428b      	cmp	r3, r1
 800010e:	d344      	bcc.n	800019a <__udivsi3+0x9e>
 8000110:	0b03      	lsrs	r3, r0, #12
 8000112:	428b      	cmp	r3, r1
 8000114:	d328      	bcc.n	8000168 <__udivsi3+0x6c>
 8000116:	0c03      	lsrs	r3, r0, #16
 8000118:	428b      	cmp	r3, r1
 800011a:	d30d      	bcc.n	8000138 <__udivsi3+0x3c>
 800011c:	22ff      	movs	r2, #255	; 0xff
 800011e:	0209      	lsls	r1, r1, #8
 8000120:	ba12      	rev	r2, r2
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d302      	bcc.n	800012e <__udivsi3+0x32>
 8000128:	1212      	asrs	r2, r2, #8
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	d065      	beq.n	80001fa <__udivsi3+0xfe>
 800012e:	0b03      	lsrs	r3, r0, #12
 8000130:	428b      	cmp	r3, r1
 8000132:	d319      	bcc.n	8000168 <__udivsi3+0x6c>
 8000134:	e000      	b.n	8000138 <__udivsi3+0x3c>
 8000136:	0a09      	lsrs	r1, r1, #8
 8000138:	0bc3      	lsrs	r3, r0, #15
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x46>
 800013e:	03cb      	lsls	r3, r1, #15
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0b83      	lsrs	r3, r0, #14
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x52>
 800014a:	038b      	lsls	r3, r1, #14
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b43      	lsrs	r3, r0, #13
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x5e>
 8000156:	034b      	lsls	r3, r1, #13
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b03      	lsrs	r3, r0, #12
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x6a>
 8000162:	030b      	lsls	r3, r1, #12
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0ac3      	lsrs	r3, r0, #11
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x76>
 800016e:	02cb      	lsls	r3, r1, #11
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0a83      	lsrs	r3, r0, #10
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x82>
 800017a:	028b      	lsls	r3, r1, #10
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a43      	lsrs	r3, r0, #9
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x8e>
 8000186:	024b      	lsls	r3, r1, #9
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a03      	lsrs	r3, r0, #8
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x9a>
 8000192:	020b      	lsls	r3, r1, #8
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	d2cd      	bcs.n	8000136 <__udivsi3+0x3a>
 800019a:	09c3      	lsrs	r3, r0, #7
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xa8>
 80001a0:	01cb      	lsls	r3, r1, #7
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0983      	lsrs	r3, r0, #6
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xb4>
 80001ac:	018b      	lsls	r3, r1, #6
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0943      	lsrs	r3, r0, #5
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xc0>
 80001b8:	014b      	lsls	r3, r1, #5
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0903      	lsrs	r3, r0, #4
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xcc>
 80001c4:	010b      	lsls	r3, r1, #4
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	08c3      	lsrs	r3, r0, #3
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xd8>
 80001d0:	00cb      	lsls	r3, r1, #3
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0883      	lsrs	r3, r0, #2
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xe4>
 80001dc:	008b      	lsls	r3, r1, #2
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0843      	lsrs	r3, r0, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xf0>
 80001e8:	004b      	lsls	r3, r1, #1
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	1a41      	subs	r1, r0, r1
 80001f0:	d200      	bcs.n	80001f4 <__udivsi3+0xf8>
 80001f2:	4601      	mov	r1, r0
 80001f4:	4152      	adcs	r2, r2
 80001f6:	4610      	mov	r0, r2
 80001f8:	4770      	bx	lr
 80001fa:	e7ff      	b.n	80001fc <__udivsi3+0x100>
 80001fc:	b501      	push	{r0, lr}
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 f806 	bl	8000210 <__aeabi_idiv0>
 8000204:	bd02      	pop	{r1, pc}
 8000206:	46c0      	nop			; (mov r8, r8)

08000208 <__aeabi_uidivmod>:
 8000208:	2900      	cmp	r1, #0
 800020a:	d0f7      	beq.n	80001fc <__udivsi3+0x100>
 800020c:	e776      	b.n	80000fc <__udivsi3>
 800020e:	4770      	bx	lr

08000210 <__aeabi_idiv0>:
 8000210:	4770      	bx	lr
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_fdiv>:
 8000214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000216:	464f      	mov	r7, r9
 8000218:	4646      	mov	r6, r8
 800021a:	46d6      	mov	lr, sl
 800021c:	0245      	lsls	r5, r0, #9
 800021e:	b5c0      	push	{r6, r7, lr}
 8000220:	0047      	lsls	r7, r0, #1
 8000222:	1c0c      	adds	r4, r1, #0
 8000224:	0a6d      	lsrs	r5, r5, #9
 8000226:	0e3f      	lsrs	r7, r7, #24
 8000228:	0fc6      	lsrs	r6, r0, #31
 800022a:	2f00      	cmp	r7, #0
 800022c:	d066      	beq.n	80002fc <__aeabi_fdiv+0xe8>
 800022e:	2fff      	cmp	r7, #255	; 0xff
 8000230:	d06c      	beq.n	800030c <__aeabi_fdiv+0xf8>
 8000232:	2300      	movs	r3, #0
 8000234:	00ea      	lsls	r2, r5, #3
 8000236:	2580      	movs	r5, #128	; 0x80
 8000238:	4699      	mov	r9, r3
 800023a:	469a      	mov	sl, r3
 800023c:	04ed      	lsls	r5, r5, #19
 800023e:	4315      	orrs	r5, r2
 8000240:	3f7f      	subs	r7, #127	; 0x7f
 8000242:	0260      	lsls	r0, r4, #9
 8000244:	0061      	lsls	r1, r4, #1
 8000246:	0a43      	lsrs	r3, r0, #9
 8000248:	4698      	mov	r8, r3
 800024a:	0e09      	lsrs	r1, r1, #24
 800024c:	0fe4      	lsrs	r4, r4, #31
 800024e:	2900      	cmp	r1, #0
 8000250:	d048      	beq.n	80002e4 <__aeabi_fdiv+0xd0>
 8000252:	29ff      	cmp	r1, #255	; 0xff
 8000254:	d010      	beq.n	8000278 <__aeabi_fdiv+0x64>
 8000256:	2280      	movs	r2, #128	; 0x80
 8000258:	00d8      	lsls	r0, r3, #3
 800025a:	04d2      	lsls	r2, r2, #19
 800025c:	4302      	orrs	r2, r0
 800025e:	4690      	mov	r8, r2
 8000260:	2000      	movs	r0, #0
 8000262:	397f      	subs	r1, #127	; 0x7f
 8000264:	464a      	mov	r2, r9
 8000266:	0033      	movs	r3, r6
 8000268:	1a7f      	subs	r7, r7, r1
 800026a:	4302      	orrs	r2, r0
 800026c:	496c      	ldr	r1, [pc, #432]	; (8000420 <__aeabi_fdiv+0x20c>)
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	588a      	ldr	r2, [r1, r2]
 8000272:	4063      	eors	r3, r4
 8000274:	b2db      	uxtb	r3, r3
 8000276:	4697      	mov	pc, r2
 8000278:	2b00      	cmp	r3, #0
 800027a:	d16d      	bne.n	8000358 <__aeabi_fdiv+0x144>
 800027c:	2002      	movs	r0, #2
 800027e:	3fff      	subs	r7, #255	; 0xff
 8000280:	e033      	b.n	80002ea <__aeabi_fdiv+0xd6>
 8000282:	2300      	movs	r3, #0
 8000284:	4698      	mov	r8, r3
 8000286:	0026      	movs	r6, r4
 8000288:	4645      	mov	r5, r8
 800028a:	4682      	mov	sl, r0
 800028c:	4653      	mov	r3, sl
 800028e:	2b02      	cmp	r3, #2
 8000290:	d100      	bne.n	8000294 <__aeabi_fdiv+0x80>
 8000292:	e07f      	b.n	8000394 <__aeabi_fdiv+0x180>
 8000294:	2b03      	cmp	r3, #3
 8000296:	d100      	bne.n	800029a <__aeabi_fdiv+0x86>
 8000298:	e094      	b.n	80003c4 <__aeabi_fdiv+0x1b0>
 800029a:	2b01      	cmp	r3, #1
 800029c:	d017      	beq.n	80002ce <__aeabi_fdiv+0xba>
 800029e:	0038      	movs	r0, r7
 80002a0:	307f      	adds	r0, #127	; 0x7f
 80002a2:	2800      	cmp	r0, #0
 80002a4:	dd5f      	ble.n	8000366 <__aeabi_fdiv+0x152>
 80002a6:	076b      	lsls	r3, r5, #29
 80002a8:	d004      	beq.n	80002b4 <__aeabi_fdiv+0xa0>
 80002aa:	230f      	movs	r3, #15
 80002ac:	402b      	ands	r3, r5
 80002ae:	2b04      	cmp	r3, #4
 80002b0:	d000      	beq.n	80002b4 <__aeabi_fdiv+0xa0>
 80002b2:	3504      	adds	r5, #4
 80002b4:	012b      	lsls	r3, r5, #4
 80002b6:	d503      	bpl.n	80002c0 <__aeabi_fdiv+0xac>
 80002b8:	0038      	movs	r0, r7
 80002ba:	4b5a      	ldr	r3, [pc, #360]	; (8000424 <__aeabi_fdiv+0x210>)
 80002bc:	3080      	adds	r0, #128	; 0x80
 80002be:	401d      	ands	r5, r3
 80002c0:	28fe      	cmp	r0, #254	; 0xfe
 80002c2:	dc67      	bgt.n	8000394 <__aeabi_fdiv+0x180>
 80002c4:	01ad      	lsls	r5, r5, #6
 80002c6:	0a6d      	lsrs	r5, r5, #9
 80002c8:	b2c0      	uxtb	r0, r0
 80002ca:	e002      	b.n	80002d2 <__aeabi_fdiv+0xbe>
 80002cc:	001e      	movs	r6, r3
 80002ce:	2000      	movs	r0, #0
 80002d0:	2500      	movs	r5, #0
 80002d2:	05c0      	lsls	r0, r0, #23
 80002d4:	4328      	orrs	r0, r5
 80002d6:	07f6      	lsls	r6, r6, #31
 80002d8:	4330      	orrs	r0, r6
 80002da:	bce0      	pop	{r5, r6, r7}
 80002dc:	46ba      	mov	sl, r7
 80002de:	46b1      	mov	r9, r6
 80002e0:	46a8      	mov	r8, r5
 80002e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d12b      	bne.n	8000340 <__aeabi_fdiv+0x12c>
 80002e8:	2001      	movs	r0, #1
 80002ea:	464a      	mov	r2, r9
 80002ec:	0033      	movs	r3, r6
 80002ee:	494e      	ldr	r1, [pc, #312]	; (8000428 <__aeabi_fdiv+0x214>)
 80002f0:	4302      	orrs	r2, r0
 80002f2:	0092      	lsls	r2, r2, #2
 80002f4:	588a      	ldr	r2, [r1, r2]
 80002f6:	4063      	eors	r3, r4
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	4697      	mov	pc, r2
 80002fc:	2d00      	cmp	r5, #0
 80002fe:	d113      	bne.n	8000328 <__aeabi_fdiv+0x114>
 8000300:	2304      	movs	r3, #4
 8000302:	4699      	mov	r9, r3
 8000304:	3b03      	subs	r3, #3
 8000306:	2700      	movs	r7, #0
 8000308:	469a      	mov	sl, r3
 800030a:	e79a      	b.n	8000242 <__aeabi_fdiv+0x2e>
 800030c:	2d00      	cmp	r5, #0
 800030e:	d105      	bne.n	800031c <__aeabi_fdiv+0x108>
 8000310:	2308      	movs	r3, #8
 8000312:	4699      	mov	r9, r3
 8000314:	3b06      	subs	r3, #6
 8000316:	27ff      	movs	r7, #255	; 0xff
 8000318:	469a      	mov	sl, r3
 800031a:	e792      	b.n	8000242 <__aeabi_fdiv+0x2e>
 800031c:	230c      	movs	r3, #12
 800031e:	4699      	mov	r9, r3
 8000320:	3b09      	subs	r3, #9
 8000322:	27ff      	movs	r7, #255	; 0xff
 8000324:	469a      	mov	sl, r3
 8000326:	e78c      	b.n	8000242 <__aeabi_fdiv+0x2e>
 8000328:	0028      	movs	r0, r5
 800032a:	f001 ff45 	bl	80021b8 <__clzsi2>
 800032e:	2776      	movs	r7, #118	; 0x76
 8000330:	1f43      	subs	r3, r0, #5
 8000332:	409d      	lsls	r5, r3
 8000334:	2300      	movs	r3, #0
 8000336:	427f      	negs	r7, r7
 8000338:	4699      	mov	r9, r3
 800033a:	469a      	mov	sl, r3
 800033c:	1a3f      	subs	r7, r7, r0
 800033e:	e780      	b.n	8000242 <__aeabi_fdiv+0x2e>
 8000340:	0018      	movs	r0, r3
 8000342:	f001 ff39 	bl	80021b8 <__clzsi2>
 8000346:	4642      	mov	r2, r8
 8000348:	1f43      	subs	r3, r0, #5
 800034a:	2176      	movs	r1, #118	; 0x76
 800034c:	409a      	lsls	r2, r3
 800034e:	4249      	negs	r1, r1
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	4690      	mov	r8, r2
 8000354:	2000      	movs	r0, #0
 8000356:	e785      	b.n	8000264 <__aeabi_fdiv+0x50>
 8000358:	21ff      	movs	r1, #255	; 0xff
 800035a:	2003      	movs	r0, #3
 800035c:	e782      	b.n	8000264 <__aeabi_fdiv+0x50>
 800035e:	001e      	movs	r6, r3
 8000360:	20ff      	movs	r0, #255	; 0xff
 8000362:	2500      	movs	r5, #0
 8000364:	e7b5      	b.n	80002d2 <__aeabi_fdiv+0xbe>
 8000366:	2301      	movs	r3, #1
 8000368:	1a1b      	subs	r3, r3, r0
 800036a:	2b1b      	cmp	r3, #27
 800036c:	dcaf      	bgt.n	80002ce <__aeabi_fdiv+0xba>
 800036e:	379e      	adds	r7, #158	; 0x9e
 8000370:	0029      	movs	r1, r5
 8000372:	40bd      	lsls	r5, r7
 8000374:	40d9      	lsrs	r1, r3
 8000376:	1e6a      	subs	r2, r5, #1
 8000378:	4195      	sbcs	r5, r2
 800037a:	430d      	orrs	r5, r1
 800037c:	076b      	lsls	r3, r5, #29
 800037e:	d004      	beq.n	800038a <__aeabi_fdiv+0x176>
 8000380:	230f      	movs	r3, #15
 8000382:	402b      	ands	r3, r5
 8000384:	2b04      	cmp	r3, #4
 8000386:	d000      	beq.n	800038a <__aeabi_fdiv+0x176>
 8000388:	3504      	adds	r5, #4
 800038a:	016b      	lsls	r3, r5, #5
 800038c:	d544      	bpl.n	8000418 <__aeabi_fdiv+0x204>
 800038e:	2001      	movs	r0, #1
 8000390:	2500      	movs	r5, #0
 8000392:	e79e      	b.n	80002d2 <__aeabi_fdiv+0xbe>
 8000394:	20ff      	movs	r0, #255	; 0xff
 8000396:	2500      	movs	r5, #0
 8000398:	e79b      	b.n	80002d2 <__aeabi_fdiv+0xbe>
 800039a:	2580      	movs	r5, #128	; 0x80
 800039c:	2600      	movs	r6, #0
 800039e:	20ff      	movs	r0, #255	; 0xff
 80003a0:	03ed      	lsls	r5, r5, #15
 80003a2:	e796      	b.n	80002d2 <__aeabi_fdiv+0xbe>
 80003a4:	2300      	movs	r3, #0
 80003a6:	4698      	mov	r8, r3
 80003a8:	2080      	movs	r0, #128	; 0x80
 80003aa:	03c0      	lsls	r0, r0, #15
 80003ac:	4205      	tst	r5, r0
 80003ae:	d009      	beq.n	80003c4 <__aeabi_fdiv+0x1b0>
 80003b0:	4643      	mov	r3, r8
 80003b2:	4203      	tst	r3, r0
 80003b4:	d106      	bne.n	80003c4 <__aeabi_fdiv+0x1b0>
 80003b6:	4645      	mov	r5, r8
 80003b8:	4305      	orrs	r5, r0
 80003ba:	026d      	lsls	r5, r5, #9
 80003bc:	0026      	movs	r6, r4
 80003be:	20ff      	movs	r0, #255	; 0xff
 80003c0:	0a6d      	lsrs	r5, r5, #9
 80003c2:	e786      	b.n	80002d2 <__aeabi_fdiv+0xbe>
 80003c4:	2080      	movs	r0, #128	; 0x80
 80003c6:	03c0      	lsls	r0, r0, #15
 80003c8:	4305      	orrs	r5, r0
 80003ca:	026d      	lsls	r5, r5, #9
 80003cc:	20ff      	movs	r0, #255	; 0xff
 80003ce:	0a6d      	lsrs	r5, r5, #9
 80003d0:	e77f      	b.n	80002d2 <__aeabi_fdiv+0xbe>
 80003d2:	4641      	mov	r1, r8
 80003d4:	016a      	lsls	r2, r5, #5
 80003d6:	0148      	lsls	r0, r1, #5
 80003d8:	4282      	cmp	r2, r0
 80003da:	d219      	bcs.n	8000410 <__aeabi_fdiv+0x1fc>
 80003dc:	211b      	movs	r1, #27
 80003de:	2500      	movs	r5, #0
 80003e0:	3f01      	subs	r7, #1
 80003e2:	2601      	movs	r6, #1
 80003e4:	0014      	movs	r4, r2
 80003e6:	006d      	lsls	r5, r5, #1
 80003e8:	0052      	lsls	r2, r2, #1
 80003ea:	2c00      	cmp	r4, #0
 80003ec:	db01      	blt.n	80003f2 <__aeabi_fdiv+0x1de>
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d801      	bhi.n	80003f6 <__aeabi_fdiv+0x1e2>
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	4335      	orrs	r5, r6
 80003f6:	3901      	subs	r1, #1
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d1f3      	bne.n	80003e4 <__aeabi_fdiv+0x1d0>
 80003fc:	1e50      	subs	r0, r2, #1
 80003fe:	4182      	sbcs	r2, r0
 8000400:	0038      	movs	r0, r7
 8000402:	307f      	adds	r0, #127	; 0x7f
 8000404:	001e      	movs	r6, r3
 8000406:	4315      	orrs	r5, r2
 8000408:	2800      	cmp	r0, #0
 800040a:	dd00      	ble.n	800040e <__aeabi_fdiv+0x1fa>
 800040c:	e74b      	b.n	80002a6 <__aeabi_fdiv+0x92>
 800040e:	e7aa      	b.n	8000366 <__aeabi_fdiv+0x152>
 8000410:	211a      	movs	r1, #26
 8000412:	2501      	movs	r5, #1
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	e7e4      	b.n	80003e2 <__aeabi_fdiv+0x1ce>
 8000418:	01ad      	lsls	r5, r5, #6
 800041a:	2000      	movs	r0, #0
 800041c:	0a6d      	lsrs	r5, r5, #9
 800041e:	e758      	b.n	80002d2 <__aeabi_fdiv+0xbe>
 8000420:	08007b34 	.word	0x08007b34
 8000424:	f7ffffff 	.word	0xf7ffffff
 8000428:	08007b74 	.word	0x08007b74

0800042c <__aeabi_fmul>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	4657      	mov	r7, sl
 8000430:	464e      	mov	r6, r9
 8000432:	4645      	mov	r5, r8
 8000434:	46de      	mov	lr, fp
 8000436:	0244      	lsls	r4, r0, #9
 8000438:	b5e0      	push	{r5, r6, r7, lr}
 800043a:	0045      	lsls	r5, r0, #1
 800043c:	1c0f      	adds	r7, r1, #0
 800043e:	0a64      	lsrs	r4, r4, #9
 8000440:	0e2d      	lsrs	r5, r5, #24
 8000442:	0fc6      	lsrs	r6, r0, #31
 8000444:	2d00      	cmp	r5, #0
 8000446:	d047      	beq.n	80004d8 <__aeabi_fmul+0xac>
 8000448:	2dff      	cmp	r5, #255	; 0xff
 800044a:	d04d      	beq.n	80004e8 <__aeabi_fmul+0xbc>
 800044c:	2300      	movs	r3, #0
 800044e:	2080      	movs	r0, #128	; 0x80
 8000450:	469a      	mov	sl, r3
 8000452:	469b      	mov	fp, r3
 8000454:	00e4      	lsls	r4, r4, #3
 8000456:	04c0      	lsls	r0, r0, #19
 8000458:	4304      	orrs	r4, r0
 800045a:	3d7f      	subs	r5, #127	; 0x7f
 800045c:	0278      	lsls	r0, r7, #9
 800045e:	0a43      	lsrs	r3, r0, #9
 8000460:	4699      	mov	r9, r3
 8000462:	007a      	lsls	r2, r7, #1
 8000464:	0ffb      	lsrs	r3, r7, #31
 8000466:	4698      	mov	r8, r3
 8000468:	0e12      	lsrs	r2, r2, #24
 800046a:	464b      	mov	r3, r9
 800046c:	d044      	beq.n	80004f8 <__aeabi_fmul+0xcc>
 800046e:	2aff      	cmp	r2, #255	; 0xff
 8000470:	d011      	beq.n	8000496 <__aeabi_fmul+0x6a>
 8000472:	00d8      	lsls	r0, r3, #3
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	04db      	lsls	r3, r3, #19
 8000478:	4303      	orrs	r3, r0
 800047a:	4699      	mov	r9, r3
 800047c:	2000      	movs	r0, #0
 800047e:	3a7f      	subs	r2, #127	; 0x7f
 8000480:	18ad      	adds	r5, r5, r2
 8000482:	4647      	mov	r7, r8
 8000484:	4653      	mov	r3, sl
 8000486:	4077      	eors	r7, r6
 8000488:	1c69      	adds	r1, r5, #1
 800048a:	2b0f      	cmp	r3, #15
 800048c:	d83f      	bhi.n	800050e <__aeabi_fmul+0xe2>
 800048e:	4a72      	ldr	r2, [pc, #456]	; (8000658 <__aeabi_fmul+0x22c>)
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	58d3      	ldr	r3, [r2, r3]
 8000494:	469f      	mov	pc, r3
 8000496:	35ff      	adds	r5, #255	; 0xff
 8000498:	2b00      	cmp	r3, #0
 800049a:	d000      	beq.n	800049e <__aeabi_fmul+0x72>
 800049c:	e079      	b.n	8000592 <__aeabi_fmul+0x166>
 800049e:	4652      	mov	r2, sl
 80004a0:	2302      	movs	r3, #2
 80004a2:	431a      	orrs	r2, r3
 80004a4:	4692      	mov	sl, r2
 80004a6:	2002      	movs	r0, #2
 80004a8:	e7eb      	b.n	8000482 <__aeabi_fmul+0x56>
 80004aa:	4647      	mov	r7, r8
 80004ac:	464c      	mov	r4, r9
 80004ae:	4683      	mov	fp, r0
 80004b0:	465b      	mov	r3, fp
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d028      	beq.n	8000508 <__aeabi_fmul+0xdc>
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	d100      	bne.n	80004bc <__aeabi_fmul+0x90>
 80004ba:	e0c6      	b.n	800064a <__aeabi_fmul+0x21e>
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d14f      	bne.n	8000560 <__aeabi_fmul+0x134>
 80004c0:	2000      	movs	r0, #0
 80004c2:	2400      	movs	r4, #0
 80004c4:	05c0      	lsls	r0, r0, #23
 80004c6:	07ff      	lsls	r7, r7, #31
 80004c8:	4320      	orrs	r0, r4
 80004ca:	4338      	orrs	r0, r7
 80004cc:	bcf0      	pop	{r4, r5, r6, r7}
 80004ce:	46bb      	mov	fp, r7
 80004d0:	46b2      	mov	sl, r6
 80004d2:	46a9      	mov	r9, r5
 80004d4:	46a0      	mov	r8, r4
 80004d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004d8:	2c00      	cmp	r4, #0
 80004da:	d171      	bne.n	80005c0 <__aeabi_fmul+0x194>
 80004dc:	2304      	movs	r3, #4
 80004de:	469a      	mov	sl, r3
 80004e0:	3b03      	subs	r3, #3
 80004e2:	2500      	movs	r5, #0
 80004e4:	469b      	mov	fp, r3
 80004e6:	e7b9      	b.n	800045c <__aeabi_fmul+0x30>
 80004e8:	2c00      	cmp	r4, #0
 80004ea:	d163      	bne.n	80005b4 <__aeabi_fmul+0x188>
 80004ec:	2308      	movs	r3, #8
 80004ee:	469a      	mov	sl, r3
 80004f0:	3b06      	subs	r3, #6
 80004f2:	25ff      	movs	r5, #255	; 0xff
 80004f4:	469b      	mov	fp, r3
 80004f6:	e7b1      	b.n	800045c <__aeabi_fmul+0x30>
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d150      	bne.n	800059e <__aeabi_fmul+0x172>
 80004fc:	4652      	mov	r2, sl
 80004fe:	3301      	adds	r3, #1
 8000500:	431a      	orrs	r2, r3
 8000502:	4692      	mov	sl, r2
 8000504:	2001      	movs	r0, #1
 8000506:	e7bc      	b.n	8000482 <__aeabi_fmul+0x56>
 8000508:	20ff      	movs	r0, #255	; 0xff
 800050a:	2400      	movs	r4, #0
 800050c:	e7da      	b.n	80004c4 <__aeabi_fmul+0x98>
 800050e:	4648      	mov	r0, r9
 8000510:	0c26      	lsrs	r6, r4, #16
 8000512:	0424      	lsls	r4, r4, #16
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	0404      	lsls	r4, r0, #16
 8000518:	0c24      	lsrs	r4, r4, #16
 800051a:	464b      	mov	r3, r9
 800051c:	0020      	movs	r0, r4
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	4350      	muls	r0, r2
 8000522:	4374      	muls	r4, r6
 8000524:	435a      	muls	r2, r3
 8000526:	435e      	muls	r6, r3
 8000528:	1912      	adds	r2, r2, r4
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	189b      	adds	r3, r3, r2
 800052e:	429c      	cmp	r4, r3
 8000530:	d903      	bls.n	800053a <__aeabi_fmul+0x10e>
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	0252      	lsls	r2, r2, #9
 8000536:	4694      	mov	ip, r2
 8000538:	4466      	add	r6, ip
 800053a:	0400      	lsls	r0, r0, #16
 800053c:	041a      	lsls	r2, r3, #16
 800053e:	0c00      	lsrs	r0, r0, #16
 8000540:	1812      	adds	r2, r2, r0
 8000542:	0194      	lsls	r4, r2, #6
 8000544:	1e60      	subs	r0, r4, #1
 8000546:	4184      	sbcs	r4, r0
 8000548:	0c1b      	lsrs	r3, r3, #16
 800054a:	0e92      	lsrs	r2, r2, #26
 800054c:	199b      	adds	r3, r3, r6
 800054e:	4314      	orrs	r4, r2
 8000550:	019b      	lsls	r3, r3, #6
 8000552:	431c      	orrs	r4, r3
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	d572      	bpl.n	800063e <__aeabi_fmul+0x212>
 8000558:	2001      	movs	r0, #1
 800055a:	0863      	lsrs	r3, r4, #1
 800055c:	4004      	ands	r4, r0
 800055e:	431c      	orrs	r4, r3
 8000560:	0008      	movs	r0, r1
 8000562:	307f      	adds	r0, #127	; 0x7f
 8000564:	2800      	cmp	r0, #0
 8000566:	dd3c      	ble.n	80005e2 <__aeabi_fmul+0x1b6>
 8000568:	0763      	lsls	r3, r4, #29
 800056a:	d004      	beq.n	8000576 <__aeabi_fmul+0x14a>
 800056c:	230f      	movs	r3, #15
 800056e:	4023      	ands	r3, r4
 8000570:	2b04      	cmp	r3, #4
 8000572:	d000      	beq.n	8000576 <__aeabi_fmul+0x14a>
 8000574:	3404      	adds	r4, #4
 8000576:	0123      	lsls	r3, r4, #4
 8000578:	d503      	bpl.n	8000582 <__aeabi_fmul+0x156>
 800057a:	3180      	adds	r1, #128	; 0x80
 800057c:	0008      	movs	r0, r1
 800057e:	4b37      	ldr	r3, [pc, #220]	; (800065c <__aeabi_fmul+0x230>)
 8000580:	401c      	ands	r4, r3
 8000582:	28fe      	cmp	r0, #254	; 0xfe
 8000584:	dcc0      	bgt.n	8000508 <__aeabi_fmul+0xdc>
 8000586:	01a4      	lsls	r4, r4, #6
 8000588:	0a64      	lsrs	r4, r4, #9
 800058a:	b2c0      	uxtb	r0, r0
 800058c:	e79a      	b.n	80004c4 <__aeabi_fmul+0x98>
 800058e:	0037      	movs	r7, r6
 8000590:	e78e      	b.n	80004b0 <__aeabi_fmul+0x84>
 8000592:	4652      	mov	r2, sl
 8000594:	2303      	movs	r3, #3
 8000596:	431a      	orrs	r2, r3
 8000598:	4692      	mov	sl, r2
 800059a:	2003      	movs	r0, #3
 800059c:	e771      	b.n	8000482 <__aeabi_fmul+0x56>
 800059e:	4648      	mov	r0, r9
 80005a0:	f001 fe0a 	bl	80021b8 <__clzsi2>
 80005a4:	464a      	mov	r2, r9
 80005a6:	1f43      	subs	r3, r0, #5
 80005a8:	409a      	lsls	r2, r3
 80005aa:	1a2d      	subs	r5, r5, r0
 80005ac:	4691      	mov	r9, r2
 80005ae:	2000      	movs	r0, #0
 80005b0:	3d76      	subs	r5, #118	; 0x76
 80005b2:	e766      	b.n	8000482 <__aeabi_fmul+0x56>
 80005b4:	230c      	movs	r3, #12
 80005b6:	469a      	mov	sl, r3
 80005b8:	3b09      	subs	r3, #9
 80005ba:	25ff      	movs	r5, #255	; 0xff
 80005bc:	469b      	mov	fp, r3
 80005be:	e74d      	b.n	800045c <__aeabi_fmul+0x30>
 80005c0:	0020      	movs	r0, r4
 80005c2:	f001 fdf9 	bl	80021b8 <__clzsi2>
 80005c6:	2576      	movs	r5, #118	; 0x76
 80005c8:	1f43      	subs	r3, r0, #5
 80005ca:	409c      	lsls	r4, r3
 80005cc:	2300      	movs	r3, #0
 80005ce:	426d      	negs	r5, r5
 80005d0:	469a      	mov	sl, r3
 80005d2:	469b      	mov	fp, r3
 80005d4:	1a2d      	subs	r5, r5, r0
 80005d6:	e741      	b.n	800045c <__aeabi_fmul+0x30>
 80005d8:	2480      	movs	r4, #128	; 0x80
 80005da:	2700      	movs	r7, #0
 80005dc:	20ff      	movs	r0, #255	; 0xff
 80005de:	03e4      	lsls	r4, r4, #15
 80005e0:	e770      	b.n	80004c4 <__aeabi_fmul+0x98>
 80005e2:	2301      	movs	r3, #1
 80005e4:	1a1b      	subs	r3, r3, r0
 80005e6:	2b1b      	cmp	r3, #27
 80005e8:	dd00      	ble.n	80005ec <__aeabi_fmul+0x1c0>
 80005ea:	e769      	b.n	80004c0 <__aeabi_fmul+0x94>
 80005ec:	319e      	adds	r1, #158	; 0x9e
 80005ee:	0020      	movs	r0, r4
 80005f0:	408c      	lsls	r4, r1
 80005f2:	40d8      	lsrs	r0, r3
 80005f4:	1e63      	subs	r3, r4, #1
 80005f6:	419c      	sbcs	r4, r3
 80005f8:	4304      	orrs	r4, r0
 80005fa:	0763      	lsls	r3, r4, #29
 80005fc:	d004      	beq.n	8000608 <__aeabi_fmul+0x1dc>
 80005fe:	230f      	movs	r3, #15
 8000600:	4023      	ands	r3, r4
 8000602:	2b04      	cmp	r3, #4
 8000604:	d000      	beq.n	8000608 <__aeabi_fmul+0x1dc>
 8000606:	3404      	adds	r4, #4
 8000608:	0163      	lsls	r3, r4, #5
 800060a:	d51a      	bpl.n	8000642 <__aeabi_fmul+0x216>
 800060c:	2001      	movs	r0, #1
 800060e:	2400      	movs	r4, #0
 8000610:	e758      	b.n	80004c4 <__aeabi_fmul+0x98>
 8000612:	2080      	movs	r0, #128	; 0x80
 8000614:	03c0      	lsls	r0, r0, #15
 8000616:	4204      	tst	r4, r0
 8000618:	d009      	beq.n	800062e <__aeabi_fmul+0x202>
 800061a:	464b      	mov	r3, r9
 800061c:	4203      	tst	r3, r0
 800061e:	d106      	bne.n	800062e <__aeabi_fmul+0x202>
 8000620:	464c      	mov	r4, r9
 8000622:	4304      	orrs	r4, r0
 8000624:	0264      	lsls	r4, r4, #9
 8000626:	4647      	mov	r7, r8
 8000628:	20ff      	movs	r0, #255	; 0xff
 800062a:	0a64      	lsrs	r4, r4, #9
 800062c:	e74a      	b.n	80004c4 <__aeabi_fmul+0x98>
 800062e:	2080      	movs	r0, #128	; 0x80
 8000630:	03c0      	lsls	r0, r0, #15
 8000632:	4304      	orrs	r4, r0
 8000634:	0264      	lsls	r4, r4, #9
 8000636:	0037      	movs	r7, r6
 8000638:	20ff      	movs	r0, #255	; 0xff
 800063a:	0a64      	lsrs	r4, r4, #9
 800063c:	e742      	b.n	80004c4 <__aeabi_fmul+0x98>
 800063e:	0029      	movs	r1, r5
 8000640:	e78e      	b.n	8000560 <__aeabi_fmul+0x134>
 8000642:	01a4      	lsls	r4, r4, #6
 8000644:	2000      	movs	r0, #0
 8000646:	0a64      	lsrs	r4, r4, #9
 8000648:	e73c      	b.n	80004c4 <__aeabi_fmul+0x98>
 800064a:	2080      	movs	r0, #128	; 0x80
 800064c:	03c0      	lsls	r0, r0, #15
 800064e:	4304      	orrs	r4, r0
 8000650:	0264      	lsls	r4, r4, #9
 8000652:	20ff      	movs	r0, #255	; 0xff
 8000654:	0a64      	lsrs	r4, r4, #9
 8000656:	e735      	b.n	80004c4 <__aeabi_fmul+0x98>
 8000658:	08007bb4 	.word	0x08007bb4
 800065c:	f7ffffff 	.word	0xf7ffffff

08000660 <__aeabi_f2iz>:
 8000660:	0241      	lsls	r1, r0, #9
 8000662:	0042      	lsls	r2, r0, #1
 8000664:	0fc3      	lsrs	r3, r0, #31
 8000666:	0a49      	lsrs	r1, r1, #9
 8000668:	2000      	movs	r0, #0
 800066a:	0e12      	lsrs	r2, r2, #24
 800066c:	2a7e      	cmp	r2, #126	; 0x7e
 800066e:	d903      	bls.n	8000678 <__aeabi_f2iz+0x18>
 8000670:	2a9d      	cmp	r2, #157	; 0x9d
 8000672:	d902      	bls.n	800067a <__aeabi_f2iz+0x1a>
 8000674:	4a09      	ldr	r2, [pc, #36]	; (800069c <__aeabi_f2iz+0x3c>)
 8000676:	1898      	adds	r0, r3, r2
 8000678:	4770      	bx	lr
 800067a:	2080      	movs	r0, #128	; 0x80
 800067c:	0400      	lsls	r0, r0, #16
 800067e:	4301      	orrs	r1, r0
 8000680:	2a95      	cmp	r2, #149	; 0x95
 8000682:	dc07      	bgt.n	8000694 <__aeabi_f2iz+0x34>
 8000684:	2096      	movs	r0, #150	; 0x96
 8000686:	1a82      	subs	r2, r0, r2
 8000688:	40d1      	lsrs	r1, r2
 800068a:	4248      	negs	r0, r1
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f3      	bne.n	8000678 <__aeabi_f2iz+0x18>
 8000690:	0008      	movs	r0, r1
 8000692:	e7f1      	b.n	8000678 <__aeabi_f2iz+0x18>
 8000694:	3a96      	subs	r2, #150	; 0x96
 8000696:	4091      	lsls	r1, r2
 8000698:	e7f7      	b.n	800068a <__aeabi_f2iz+0x2a>
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	7fffffff 	.word	0x7fffffff

080006a0 <__aeabi_i2f>:
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	2800      	cmp	r0, #0
 80006a4:	d013      	beq.n	80006ce <__aeabi_i2f+0x2e>
 80006a6:	17c3      	asrs	r3, r0, #31
 80006a8:	18c5      	adds	r5, r0, r3
 80006aa:	405d      	eors	r5, r3
 80006ac:	0fc4      	lsrs	r4, r0, #31
 80006ae:	0028      	movs	r0, r5
 80006b0:	f001 fd82 	bl	80021b8 <__clzsi2>
 80006b4:	239e      	movs	r3, #158	; 0x9e
 80006b6:	0001      	movs	r1, r0
 80006b8:	1a1b      	subs	r3, r3, r0
 80006ba:	2b96      	cmp	r3, #150	; 0x96
 80006bc:	dc0f      	bgt.n	80006de <__aeabi_i2f+0x3e>
 80006be:	2808      	cmp	r0, #8
 80006c0:	dd01      	ble.n	80006c6 <__aeabi_i2f+0x26>
 80006c2:	3908      	subs	r1, #8
 80006c4:	408d      	lsls	r5, r1
 80006c6:	026d      	lsls	r5, r5, #9
 80006c8:	0a6d      	lsrs	r5, r5, #9
 80006ca:	b2d8      	uxtb	r0, r3
 80006cc:	e002      	b.n	80006d4 <__aeabi_i2f+0x34>
 80006ce:	2400      	movs	r4, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	2500      	movs	r5, #0
 80006d4:	05c0      	lsls	r0, r0, #23
 80006d6:	4328      	orrs	r0, r5
 80006d8:	07e4      	lsls	r4, r4, #31
 80006da:	4320      	orrs	r0, r4
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	2b99      	cmp	r3, #153	; 0x99
 80006e0:	dd0b      	ble.n	80006fa <__aeabi_i2f+0x5a>
 80006e2:	2205      	movs	r2, #5
 80006e4:	002e      	movs	r6, r5
 80006e6:	1a12      	subs	r2, r2, r0
 80006e8:	40d6      	lsrs	r6, r2
 80006ea:	0002      	movs	r2, r0
 80006ec:	321b      	adds	r2, #27
 80006ee:	4095      	lsls	r5, r2
 80006f0:	0028      	movs	r0, r5
 80006f2:	1e45      	subs	r5, r0, #1
 80006f4:	41a8      	sbcs	r0, r5
 80006f6:	0035      	movs	r5, r6
 80006f8:	4305      	orrs	r5, r0
 80006fa:	2905      	cmp	r1, #5
 80006fc:	dd01      	ble.n	8000702 <__aeabi_i2f+0x62>
 80006fe:	1f4a      	subs	r2, r1, #5
 8000700:	4095      	lsls	r5, r2
 8000702:	002a      	movs	r2, r5
 8000704:	4e08      	ldr	r6, [pc, #32]	; (8000728 <__aeabi_i2f+0x88>)
 8000706:	4032      	ands	r2, r6
 8000708:	0768      	lsls	r0, r5, #29
 800070a:	d009      	beq.n	8000720 <__aeabi_i2f+0x80>
 800070c:	200f      	movs	r0, #15
 800070e:	4028      	ands	r0, r5
 8000710:	2804      	cmp	r0, #4
 8000712:	d005      	beq.n	8000720 <__aeabi_i2f+0x80>
 8000714:	3204      	adds	r2, #4
 8000716:	0150      	lsls	r0, r2, #5
 8000718:	d502      	bpl.n	8000720 <__aeabi_i2f+0x80>
 800071a:	239f      	movs	r3, #159	; 0x9f
 800071c:	4032      	ands	r2, r6
 800071e:	1a5b      	subs	r3, r3, r1
 8000720:	0192      	lsls	r2, r2, #6
 8000722:	0a55      	lsrs	r5, r2, #9
 8000724:	b2d8      	uxtb	r0, r3
 8000726:	e7d5      	b.n	80006d4 <__aeabi_i2f+0x34>
 8000728:	fbffffff 	.word	0xfbffffff

0800072c <__aeabi_dadd>:
 800072c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072e:	464f      	mov	r7, r9
 8000730:	46d6      	mov	lr, sl
 8000732:	4646      	mov	r6, r8
 8000734:	000d      	movs	r5, r1
 8000736:	0001      	movs	r1, r0
 8000738:	0018      	movs	r0, r3
 800073a:	b5c0      	push	{r6, r7, lr}
 800073c:	0017      	movs	r7, r2
 800073e:	032b      	lsls	r3, r5, #12
 8000740:	0a5a      	lsrs	r2, r3, #9
 8000742:	0f4b      	lsrs	r3, r1, #29
 8000744:	4313      	orrs	r3, r2
 8000746:	00ca      	lsls	r2, r1, #3
 8000748:	4691      	mov	r9, r2
 800074a:	0302      	lsls	r2, r0, #12
 800074c:	006e      	lsls	r6, r5, #1
 800074e:	0041      	lsls	r1, r0, #1
 8000750:	0a52      	lsrs	r2, r2, #9
 8000752:	0fec      	lsrs	r4, r5, #31
 8000754:	0f7d      	lsrs	r5, r7, #29
 8000756:	4315      	orrs	r5, r2
 8000758:	0d76      	lsrs	r6, r6, #21
 800075a:	0d49      	lsrs	r1, r1, #21
 800075c:	0fc0      	lsrs	r0, r0, #31
 800075e:	4682      	mov	sl, r0
 8000760:	46ac      	mov	ip, r5
 8000762:	00ff      	lsls	r7, r7, #3
 8000764:	1a72      	subs	r2, r6, r1
 8000766:	4284      	cmp	r4, r0
 8000768:	d100      	bne.n	800076c <__aeabi_dadd+0x40>
 800076a:	e098      	b.n	800089e <__aeabi_dadd+0x172>
 800076c:	2a00      	cmp	r2, #0
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dadd+0x46>
 8000770:	e081      	b.n	8000876 <__aeabi_dadd+0x14a>
 8000772:	2900      	cmp	r1, #0
 8000774:	d100      	bne.n	8000778 <__aeabi_dadd+0x4c>
 8000776:	e0b6      	b.n	80008e6 <__aeabi_dadd+0x1ba>
 8000778:	49c9      	ldr	r1, [pc, #804]	; (8000aa0 <__aeabi_dadd+0x374>)
 800077a:	428e      	cmp	r6, r1
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x54>
 800077e:	e172      	b.n	8000a66 <__aeabi_dadd+0x33a>
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0028      	movs	r0, r5
 8000784:	0409      	lsls	r1, r1, #16
 8000786:	4308      	orrs	r0, r1
 8000788:	4684      	mov	ip, r0
 800078a:	2a38      	cmp	r2, #56	; 0x38
 800078c:	dd00      	ble.n	8000790 <__aeabi_dadd+0x64>
 800078e:	e15e      	b.n	8000a4e <__aeabi_dadd+0x322>
 8000790:	2a1f      	cmp	r2, #31
 8000792:	dd00      	ble.n	8000796 <__aeabi_dadd+0x6a>
 8000794:	e1ee      	b.n	8000b74 <__aeabi_dadd+0x448>
 8000796:	2020      	movs	r0, #32
 8000798:	0039      	movs	r1, r7
 800079a:	4665      	mov	r5, ip
 800079c:	1a80      	subs	r0, r0, r2
 800079e:	4087      	lsls	r7, r0
 80007a0:	40d1      	lsrs	r1, r2
 80007a2:	4085      	lsls	r5, r0
 80007a4:	430d      	orrs	r5, r1
 80007a6:	0039      	movs	r1, r7
 80007a8:	1e4f      	subs	r7, r1, #1
 80007aa:	41b9      	sbcs	r1, r7
 80007ac:	4667      	mov	r7, ip
 80007ae:	40d7      	lsrs	r7, r2
 80007b0:	4329      	orrs	r1, r5
 80007b2:	1bdb      	subs	r3, r3, r7
 80007b4:	464a      	mov	r2, r9
 80007b6:	1a55      	subs	r5, r2, r1
 80007b8:	45a9      	cmp	r9, r5
 80007ba:	4189      	sbcs	r1, r1
 80007bc:	4249      	negs	r1, r1
 80007be:	1a5b      	subs	r3, r3, r1
 80007c0:	4698      	mov	r8, r3
 80007c2:	4643      	mov	r3, r8
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	d400      	bmi.n	80007ca <__aeabi_dadd+0x9e>
 80007c8:	e0cc      	b.n	8000964 <__aeabi_dadd+0x238>
 80007ca:	4643      	mov	r3, r8
 80007cc:	025b      	lsls	r3, r3, #9
 80007ce:	0a5b      	lsrs	r3, r3, #9
 80007d0:	4698      	mov	r8, r3
 80007d2:	4643      	mov	r3, r8
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0xae>
 80007d8:	e12c      	b.n	8000a34 <__aeabi_dadd+0x308>
 80007da:	4640      	mov	r0, r8
 80007dc:	f001 fcec 	bl	80021b8 <__clzsi2>
 80007e0:	0001      	movs	r1, r0
 80007e2:	3908      	subs	r1, #8
 80007e4:	2220      	movs	r2, #32
 80007e6:	0028      	movs	r0, r5
 80007e8:	4643      	mov	r3, r8
 80007ea:	1a52      	subs	r2, r2, r1
 80007ec:	408b      	lsls	r3, r1
 80007ee:	40d0      	lsrs	r0, r2
 80007f0:	408d      	lsls	r5, r1
 80007f2:	4303      	orrs	r3, r0
 80007f4:	428e      	cmp	r6, r1
 80007f6:	dd00      	ble.n	80007fa <__aeabi_dadd+0xce>
 80007f8:	e117      	b.n	8000a2a <__aeabi_dadd+0x2fe>
 80007fa:	1b8e      	subs	r6, r1, r6
 80007fc:	1c72      	adds	r2, r6, #1
 80007fe:	2a1f      	cmp	r2, #31
 8000800:	dd00      	ble.n	8000804 <__aeabi_dadd+0xd8>
 8000802:	e1a7      	b.n	8000b54 <__aeabi_dadd+0x428>
 8000804:	2120      	movs	r1, #32
 8000806:	0018      	movs	r0, r3
 8000808:	002e      	movs	r6, r5
 800080a:	1a89      	subs	r1, r1, r2
 800080c:	408d      	lsls	r5, r1
 800080e:	4088      	lsls	r0, r1
 8000810:	40d6      	lsrs	r6, r2
 8000812:	40d3      	lsrs	r3, r2
 8000814:	1e69      	subs	r1, r5, #1
 8000816:	418d      	sbcs	r5, r1
 8000818:	4330      	orrs	r0, r6
 800081a:	4698      	mov	r8, r3
 800081c:	2600      	movs	r6, #0
 800081e:	4305      	orrs	r5, r0
 8000820:	076b      	lsls	r3, r5, #29
 8000822:	d009      	beq.n	8000838 <__aeabi_dadd+0x10c>
 8000824:	230f      	movs	r3, #15
 8000826:	402b      	ands	r3, r5
 8000828:	2b04      	cmp	r3, #4
 800082a:	d005      	beq.n	8000838 <__aeabi_dadd+0x10c>
 800082c:	1d2b      	adds	r3, r5, #4
 800082e:	42ab      	cmp	r3, r5
 8000830:	41ad      	sbcs	r5, r5
 8000832:	426d      	negs	r5, r5
 8000834:	44a8      	add	r8, r5
 8000836:	001d      	movs	r5, r3
 8000838:	4643      	mov	r3, r8
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	d400      	bmi.n	8000840 <__aeabi_dadd+0x114>
 800083e:	e094      	b.n	800096a <__aeabi_dadd+0x23e>
 8000840:	4b97      	ldr	r3, [pc, #604]	; (8000aa0 <__aeabi_dadd+0x374>)
 8000842:	1c72      	adds	r2, r6, #1
 8000844:	429a      	cmp	r2, r3
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x11e>
 8000848:	e09d      	b.n	8000986 <__aeabi_dadd+0x25a>
 800084a:	4641      	mov	r1, r8
 800084c:	4b95      	ldr	r3, [pc, #596]	; (8000aa4 <__aeabi_dadd+0x378>)
 800084e:	08ed      	lsrs	r5, r5, #3
 8000850:	4019      	ands	r1, r3
 8000852:	000b      	movs	r3, r1
 8000854:	0552      	lsls	r2, r2, #21
 8000856:	0749      	lsls	r1, r1, #29
 8000858:	025b      	lsls	r3, r3, #9
 800085a:	4329      	orrs	r1, r5
 800085c:	0b1b      	lsrs	r3, r3, #12
 800085e:	0d52      	lsrs	r2, r2, #21
 8000860:	0512      	lsls	r2, r2, #20
 8000862:	4313      	orrs	r3, r2
 8000864:	07e4      	lsls	r4, r4, #31
 8000866:	4323      	orrs	r3, r4
 8000868:	0008      	movs	r0, r1
 800086a:	0019      	movs	r1, r3
 800086c:	bce0      	pop	{r5, r6, r7}
 800086e:	46ba      	mov	sl, r7
 8000870:	46b1      	mov	r9, r6
 8000872:	46a8      	mov	r8, r5
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	2a00      	cmp	r2, #0
 8000878:	d043      	beq.n	8000902 <__aeabi_dadd+0x1d6>
 800087a:	1b8a      	subs	r2, r1, r6
 800087c:	2e00      	cmp	r6, #0
 800087e:	d000      	beq.n	8000882 <__aeabi_dadd+0x156>
 8000880:	e12a      	b.n	8000ad8 <__aeabi_dadd+0x3ac>
 8000882:	464c      	mov	r4, r9
 8000884:	431c      	orrs	r4, r3
 8000886:	d100      	bne.n	800088a <__aeabi_dadd+0x15e>
 8000888:	e1d1      	b.n	8000c2e <__aeabi_dadd+0x502>
 800088a:	1e54      	subs	r4, r2, #1
 800088c:	2a01      	cmp	r2, #1
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x166>
 8000890:	e21f      	b.n	8000cd2 <__aeabi_dadd+0x5a6>
 8000892:	4d83      	ldr	r5, [pc, #524]	; (8000aa0 <__aeabi_dadd+0x374>)
 8000894:	42aa      	cmp	r2, r5
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x16e>
 8000898:	e272      	b.n	8000d80 <__aeabi_dadd+0x654>
 800089a:	0022      	movs	r2, r4
 800089c:	e123      	b.n	8000ae6 <__aeabi_dadd+0x3ba>
 800089e:	2a00      	cmp	r2, #0
 80008a0:	dc00      	bgt.n	80008a4 <__aeabi_dadd+0x178>
 80008a2:	e098      	b.n	80009d6 <__aeabi_dadd+0x2aa>
 80008a4:	2900      	cmp	r1, #0
 80008a6:	d042      	beq.n	800092e <__aeabi_dadd+0x202>
 80008a8:	497d      	ldr	r1, [pc, #500]	; (8000aa0 <__aeabi_dadd+0x374>)
 80008aa:	428e      	cmp	r6, r1
 80008ac:	d100      	bne.n	80008b0 <__aeabi_dadd+0x184>
 80008ae:	e0da      	b.n	8000a66 <__aeabi_dadd+0x33a>
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0028      	movs	r0, r5
 80008b4:	0409      	lsls	r1, r1, #16
 80008b6:	4308      	orrs	r0, r1
 80008b8:	4684      	mov	ip, r0
 80008ba:	2a38      	cmp	r2, #56	; 0x38
 80008bc:	dd00      	ble.n	80008c0 <__aeabi_dadd+0x194>
 80008be:	e129      	b.n	8000b14 <__aeabi_dadd+0x3e8>
 80008c0:	2a1f      	cmp	r2, #31
 80008c2:	dc00      	bgt.n	80008c6 <__aeabi_dadd+0x19a>
 80008c4:	e187      	b.n	8000bd6 <__aeabi_dadd+0x4aa>
 80008c6:	0011      	movs	r1, r2
 80008c8:	4665      	mov	r5, ip
 80008ca:	3920      	subs	r1, #32
 80008cc:	40cd      	lsrs	r5, r1
 80008ce:	2a20      	cmp	r2, #32
 80008d0:	d004      	beq.n	80008dc <__aeabi_dadd+0x1b0>
 80008d2:	2040      	movs	r0, #64	; 0x40
 80008d4:	4661      	mov	r1, ip
 80008d6:	1a82      	subs	r2, r0, r2
 80008d8:	4091      	lsls	r1, r2
 80008da:	430f      	orrs	r7, r1
 80008dc:	0039      	movs	r1, r7
 80008de:	1e4f      	subs	r7, r1, #1
 80008e0:	41b9      	sbcs	r1, r7
 80008e2:	430d      	orrs	r5, r1
 80008e4:	e11b      	b.n	8000b1e <__aeabi_dadd+0x3f2>
 80008e6:	0029      	movs	r1, r5
 80008e8:	4339      	orrs	r1, r7
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x1c2>
 80008ec:	e0b5      	b.n	8000a5a <__aeabi_dadd+0x32e>
 80008ee:	1e51      	subs	r1, r2, #1
 80008f0:	2a01      	cmp	r2, #1
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x1ca>
 80008f4:	e1ab      	b.n	8000c4e <__aeabi_dadd+0x522>
 80008f6:	486a      	ldr	r0, [pc, #424]	; (8000aa0 <__aeabi_dadd+0x374>)
 80008f8:	4282      	cmp	r2, r0
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x1d2>
 80008fc:	e1b2      	b.n	8000c64 <__aeabi_dadd+0x538>
 80008fe:	000a      	movs	r2, r1
 8000900:	e743      	b.n	800078a <__aeabi_dadd+0x5e>
 8000902:	4969      	ldr	r1, [pc, #420]	; (8000aa8 <__aeabi_dadd+0x37c>)
 8000904:	1c75      	adds	r5, r6, #1
 8000906:	420d      	tst	r5, r1
 8000908:	d000      	beq.n	800090c <__aeabi_dadd+0x1e0>
 800090a:	e0cf      	b.n	8000aac <__aeabi_dadd+0x380>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x1e6>
 8000910:	e193      	b.n	8000c3a <__aeabi_dadd+0x50e>
 8000912:	4649      	mov	r1, r9
 8000914:	4319      	orrs	r1, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x1ee>
 8000918:	e1d1      	b.n	8000cbe <__aeabi_dadd+0x592>
 800091a:	4661      	mov	r1, ip
 800091c:	4339      	orrs	r1, r7
 800091e:	d000      	beq.n	8000922 <__aeabi_dadd+0x1f6>
 8000920:	e1e3      	b.n	8000cea <__aeabi_dadd+0x5be>
 8000922:	4649      	mov	r1, r9
 8000924:	0758      	lsls	r0, r3, #29
 8000926:	08c9      	lsrs	r1, r1, #3
 8000928:	4301      	orrs	r1, r0
 800092a:	08db      	lsrs	r3, r3, #3
 800092c:	e026      	b.n	800097c <__aeabi_dadd+0x250>
 800092e:	0029      	movs	r1, r5
 8000930:	4339      	orrs	r1, r7
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x20a>
 8000934:	e091      	b.n	8000a5a <__aeabi_dadd+0x32e>
 8000936:	1e51      	subs	r1, r2, #1
 8000938:	2a01      	cmp	r2, #1
 800093a:	d005      	beq.n	8000948 <__aeabi_dadd+0x21c>
 800093c:	4858      	ldr	r0, [pc, #352]	; (8000aa0 <__aeabi_dadd+0x374>)
 800093e:	4282      	cmp	r2, r0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x218>
 8000942:	e18f      	b.n	8000c64 <__aeabi_dadd+0x538>
 8000944:	000a      	movs	r2, r1
 8000946:	e7b8      	b.n	80008ba <__aeabi_dadd+0x18e>
 8000948:	003d      	movs	r5, r7
 800094a:	444d      	add	r5, r9
 800094c:	454d      	cmp	r5, r9
 800094e:	4189      	sbcs	r1, r1
 8000950:	4463      	add	r3, ip
 8000952:	4698      	mov	r8, r3
 8000954:	4249      	negs	r1, r1
 8000956:	4488      	add	r8, r1
 8000958:	4643      	mov	r3, r8
 800095a:	2602      	movs	r6, #2
 800095c:	021b      	lsls	r3, r3, #8
 800095e:	d500      	bpl.n	8000962 <__aeabi_dadd+0x236>
 8000960:	e0eb      	b.n	8000b3a <__aeabi_dadd+0x40e>
 8000962:	3e01      	subs	r6, #1
 8000964:	076b      	lsls	r3, r5, #29
 8000966:	d000      	beq.n	800096a <__aeabi_dadd+0x23e>
 8000968:	e75c      	b.n	8000824 <__aeabi_dadd+0xf8>
 800096a:	4643      	mov	r3, r8
 800096c:	08e9      	lsrs	r1, r5, #3
 800096e:	075a      	lsls	r2, r3, #29
 8000970:	4311      	orrs	r1, r2
 8000972:	0032      	movs	r2, r6
 8000974:	08db      	lsrs	r3, r3, #3
 8000976:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <__aeabi_dadd+0x374>)
 8000978:	4282      	cmp	r2, r0
 800097a:	d021      	beq.n	80009c0 <__aeabi_dadd+0x294>
 800097c:	031b      	lsls	r3, r3, #12
 800097e:	0552      	lsls	r2, r2, #21
 8000980:	0b1b      	lsrs	r3, r3, #12
 8000982:	0d52      	lsrs	r2, r2, #21
 8000984:	e76c      	b.n	8000860 <__aeabi_dadd+0x134>
 8000986:	2300      	movs	r3, #0
 8000988:	2100      	movs	r1, #0
 800098a:	e769      	b.n	8000860 <__aeabi_dadd+0x134>
 800098c:	002a      	movs	r2, r5
 800098e:	433a      	orrs	r2, r7
 8000990:	d069      	beq.n	8000a66 <__aeabi_dadd+0x33a>
 8000992:	464a      	mov	r2, r9
 8000994:	0758      	lsls	r0, r3, #29
 8000996:	08d1      	lsrs	r1, r2, #3
 8000998:	08da      	lsrs	r2, r3, #3
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	031b      	lsls	r3, r3, #12
 800099e:	4308      	orrs	r0, r1
 80009a0:	421a      	tst	r2, r3
 80009a2:	d007      	beq.n	80009b4 <__aeabi_dadd+0x288>
 80009a4:	0029      	movs	r1, r5
 80009a6:	08ed      	lsrs	r5, r5, #3
 80009a8:	421d      	tst	r5, r3
 80009aa:	d103      	bne.n	80009b4 <__aeabi_dadd+0x288>
 80009ac:	002a      	movs	r2, r5
 80009ae:	08ff      	lsrs	r7, r7, #3
 80009b0:	0748      	lsls	r0, r1, #29
 80009b2:	4338      	orrs	r0, r7
 80009b4:	0f43      	lsrs	r3, r0, #29
 80009b6:	00c1      	lsls	r1, r0, #3
 80009b8:	075b      	lsls	r3, r3, #29
 80009ba:	08c9      	lsrs	r1, r1, #3
 80009bc:	4319      	orrs	r1, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	000a      	movs	r2, r1
 80009c2:	431a      	orrs	r2, r3
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x29c>
 80009c6:	e213      	b.n	8000df0 <__aeabi_dadd+0x6c4>
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	0312      	lsls	r2, r2, #12
 80009cc:	4313      	orrs	r3, r2
 80009ce:	031b      	lsls	r3, r3, #12
 80009d0:	4a33      	ldr	r2, [pc, #204]	; (8000aa0 <__aeabi_dadd+0x374>)
 80009d2:	0b1b      	lsrs	r3, r3, #12
 80009d4:	e744      	b.n	8000860 <__aeabi_dadd+0x134>
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d04b      	beq.n	8000a72 <__aeabi_dadd+0x346>
 80009da:	1b8a      	subs	r2, r1, r6
 80009dc:	2e00      	cmp	r6, #0
 80009de:	d100      	bne.n	80009e2 <__aeabi_dadd+0x2b6>
 80009e0:	e0e7      	b.n	8000bb2 <__aeabi_dadd+0x486>
 80009e2:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <__aeabi_dadd+0x374>)
 80009e4:	4281      	cmp	r1, r0
 80009e6:	d100      	bne.n	80009ea <__aeabi_dadd+0x2be>
 80009e8:	e195      	b.n	8000d16 <__aeabi_dadd+0x5ea>
 80009ea:	2080      	movs	r0, #128	; 0x80
 80009ec:	0400      	lsls	r0, r0, #16
 80009ee:	4303      	orrs	r3, r0
 80009f0:	2a38      	cmp	r2, #56	; 0x38
 80009f2:	dd00      	ble.n	80009f6 <__aeabi_dadd+0x2ca>
 80009f4:	e143      	b.n	8000c7e <__aeabi_dadd+0x552>
 80009f6:	2a1f      	cmp	r2, #31
 80009f8:	dd00      	ble.n	80009fc <__aeabi_dadd+0x2d0>
 80009fa:	e1db      	b.n	8000db4 <__aeabi_dadd+0x688>
 80009fc:	2020      	movs	r0, #32
 80009fe:	001d      	movs	r5, r3
 8000a00:	464e      	mov	r6, r9
 8000a02:	1a80      	subs	r0, r0, r2
 8000a04:	4085      	lsls	r5, r0
 8000a06:	40d6      	lsrs	r6, r2
 8000a08:	4335      	orrs	r5, r6
 8000a0a:	464e      	mov	r6, r9
 8000a0c:	4086      	lsls	r6, r0
 8000a0e:	0030      	movs	r0, r6
 8000a10:	40d3      	lsrs	r3, r2
 8000a12:	1e46      	subs	r6, r0, #1
 8000a14:	41b0      	sbcs	r0, r6
 8000a16:	449c      	add	ip, r3
 8000a18:	4305      	orrs	r5, r0
 8000a1a:	19ed      	adds	r5, r5, r7
 8000a1c:	42bd      	cmp	r5, r7
 8000a1e:	419b      	sbcs	r3, r3
 8000a20:	425b      	negs	r3, r3
 8000a22:	4463      	add	r3, ip
 8000a24:	4698      	mov	r8, r3
 8000a26:	000e      	movs	r6, r1
 8000a28:	e07f      	b.n	8000b2a <__aeabi_dadd+0x3fe>
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <__aeabi_dadd+0x378>)
 8000a2c:	1a76      	subs	r6, r6, r1
 8000a2e:	4013      	ands	r3, r2
 8000a30:	4698      	mov	r8, r3
 8000a32:	e6f5      	b.n	8000820 <__aeabi_dadd+0xf4>
 8000a34:	0028      	movs	r0, r5
 8000a36:	f001 fbbf 	bl	80021b8 <__clzsi2>
 8000a3a:	0001      	movs	r1, r0
 8000a3c:	3118      	adds	r1, #24
 8000a3e:	291f      	cmp	r1, #31
 8000a40:	dc00      	bgt.n	8000a44 <__aeabi_dadd+0x318>
 8000a42:	e6cf      	b.n	80007e4 <__aeabi_dadd+0xb8>
 8000a44:	002b      	movs	r3, r5
 8000a46:	3808      	subs	r0, #8
 8000a48:	4083      	lsls	r3, r0
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	e6d2      	b.n	80007f4 <__aeabi_dadd+0xc8>
 8000a4e:	4662      	mov	r2, ip
 8000a50:	433a      	orrs	r2, r7
 8000a52:	0011      	movs	r1, r2
 8000a54:	1e4f      	subs	r7, r1, #1
 8000a56:	41b9      	sbcs	r1, r7
 8000a58:	e6ac      	b.n	80007b4 <__aeabi_dadd+0x88>
 8000a5a:	4649      	mov	r1, r9
 8000a5c:	0758      	lsls	r0, r3, #29
 8000a5e:	08c9      	lsrs	r1, r1, #3
 8000a60:	4301      	orrs	r1, r0
 8000a62:	08db      	lsrs	r3, r3, #3
 8000a64:	e787      	b.n	8000976 <__aeabi_dadd+0x24a>
 8000a66:	4649      	mov	r1, r9
 8000a68:	075a      	lsls	r2, r3, #29
 8000a6a:	08c9      	lsrs	r1, r1, #3
 8000a6c:	4311      	orrs	r1, r2
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e7a6      	b.n	80009c0 <__aeabi_dadd+0x294>
 8000a72:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <__aeabi_dadd+0x37c>)
 8000a74:	1c70      	adds	r0, r6, #1
 8000a76:	4208      	tst	r0, r1
 8000a78:	d000      	beq.n	8000a7c <__aeabi_dadd+0x350>
 8000a7a:	e0bb      	b.n	8000bf4 <__aeabi_dadd+0x4c8>
 8000a7c:	2e00      	cmp	r6, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_dadd+0x356>
 8000a80:	e114      	b.n	8000cac <__aeabi_dadd+0x580>
 8000a82:	4649      	mov	r1, r9
 8000a84:	4319      	orrs	r1, r3
 8000a86:	d100      	bne.n	8000a8a <__aeabi_dadd+0x35e>
 8000a88:	e175      	b.n	8000d76 <__aeabi_dadd+0x64a>
 8000a8a:	0029      	movs	r1, r5
 8000a8c:	4339      	orrs	r1, r7
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_dadd+0x366>
 8000a90:	e17e      	b.n	8000d90 <__aeabi_dadd+0x664>
 8000a92:	4649      	mov	r1, r9
 8000a94:	0758      	lsls	r0, r3, #29
 8000a96:	08c9      	lsrs	r1, r1, #3
 8000a98:	4301      	orrs	r1, r0
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	e76e      	b.n	800097c <__aeabi_dadd+0x250>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	ff7fffff 	.word	0xff7fffff
 8000aa8:	000007fe 	.word	0x000007fe
 8000aac:	4649      	mov	r1, r9
 8000aae:	1bcd      	subs	r5, r1, r7
 8000ab0:	4661      	mov	r1, ip
 8000ab2:	1a58      	subs	r0, r3, r1
 8000ab4:	45a9      	cmp	r9, r5
 8000ab6:	4189      	sbcs	r1, r1
 8000ab8:	4249      	negs	r1, r1
 8000aba:	4688      	mov	r8, r1
 8000abc:	0001      	movs	r1, r0
 8000abe:	4640      	mov	r0, r8
 8000ac0:	1a09      	subs	r1, r1, r0
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	0209      	lsls	r1, r1, #8
 8000ac6:	d500      	bpl.n	8000aca <__aeabi_dadd+0x39e>
 8000ac8:	e0a6      	b.n	8000c18 <__aeabi_dadd+0x4ec>
 8000aca:	4641      	mov	r1, r8
 8000acc:	4329      	orrs	r1, r5
 8000ace:	d000      	beq.n	8000ad2 <__aeabi_dadd+0x3a6>
 8000ad0:	e67f      	b.n	80007d2 <__aeabi_dadd+0xa6>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2400      	movs	r4, #0
 8000ad6:	e751      	b.n	800097c <__aeabi_dadd+0x250>
 8000ad8:	4cc7      	ldr	r4, [pc, #796]	; (8000df8 <__aeabi_dadd+0x6cc>)
 8000ada:	42a1      	cmp	r1, r4
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_dadd+0x3b4>
 8000ade:	e0c7      	b.n	8000c70 <__aeabi_dadd+0x544>
 8000ae0:	2480      	movs	r4, #128	; 0x80
 8000ae2:	0424      	lsls	r4, r4, #16
 8000ae4:	4323      	orrs	r3, r4
 8000ae6:	2a38      	cmp	r2, #56	; 0x38
 8000ae8:	dc54      	bgt.n	8000b94 <__aeabi_dadd+0x468>
 8000aea:	2a1f      	cmp	r2, #31
 8000aec:	dd00      	ble.n	8000af0 <__aeabi_dadd+0x3c4>
 8000aee:	e0cc      	b.n	8000c8a <__aeabi_dadd+0x55e>
 8000af0:	2420      	movs	r4, #32
 8000af2:	4648      	mov	r0, r9
 8000af4:	1aa4      	subs	r4, r4, r2
 8000af6:	001d      	movs	r5, r3
 8000af8:	464e      	mov	r6, r9
 8000afa:	40a0      	lsls	r0, r4
 8000afc:	40d6      	lsrs	r6, r2
 8000afe:	40a5      	lsls	r5, r4
 8000b00:	0004      	movs	r4, r0
 8000b02:	40d3      	lsrs	r3, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	4335      	orrs	r5, r6
 8000b08:	1e66      	subs	r6, r4, #1
 8000b0a:	41b4      	sbcs	r4, r6
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	469c      	mov	ip, r3
 8000b10:	4325      	orrs	r5, r4
 8000b12:	e044      	b.n	8000b9e <__aeabi_dadd+0x472>
 8000b14:	4662      	mov	r2, ip
 8000b16:	433a      	orrs	r2, r7
 8000b18:	0015      	movs	r5, r2
 8000b1a:	1e6f      	subs	r7, r5, #1
 8000b1c:	41bd      	sbcs	r5, r7
 8000b1e:	444d      	add	r5, r9
 8000b20:	454d      	cmp	r5, r9
 8000b22:	4189      	sbcs	r1, r1
 8000b24:	4249      	negs	r1, r1
 8000b26:	4688      	mov	r8, r1
 8000b28:	4498      	add	r8, r3
 8000b2a:	4643      	mov	r3, r8
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	d400      	bmi.n	8000b32 <__aeabi_dadd+0x406>
 8000b30:	e718      	b.n	8000964 <__aeabi_dadd+0x238>
 8000b32:	4bb1      	ldr	r3, [pc, #708]	; (8000df8 <__aeabi_dadd+0x6cc>)
 8000b34:	3601      	adds	r6, #1
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d049      	beq.n	8000bce <__aeabi_dadd+0x4a2>
 8000b3a:	4642      	mov	r2, r8
 8000b3c:	4baf      	ldr	r3, [pc, #700]	; (8000dfc <__aeabi_dadd+0x6d0>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	401a      	ands	r2, r3
 8000b42:	0013      	movs	r3, r2
 8000b44:	086a      	lsrs	r2, r5, #1
 8000b46:	400d      	ands	r5, r1
 8000b48:	4315      	orrs	r5, r2
 8000b4a:	07d9      	lsls	r1, r3, #31
 8000b4c:	085b      	lsrs	r3, r3, #1
 8000b4e:	4698      	mov	r8, r3
 8000b50:	430d      	orrs	r5, r1
 8000b52:	e665      	b.n	8000820 <__aeabi_dadd+0xf4>
 8000b54:	0018      	movs	r0, r3
 8000b56:	3e1f      	subs	r6, #31
 8000b58:	40f0      	lsrs	r0, r6
 8000b5a:	2a20      	cmp	r2, #32
 8000b5c:	d003      	beq.n	8000b66 <__aeabi_dadd+0x43a>
 8000b5e:	2140      	movs	r1, #64	; 0x40
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	4093      	lsls	r3, r2
 8000b64:	431d      	orrs	r5, r3
 8000b66:	1e69      	subs	r1, r5, #1
 8000b68:	418d      	sbcs	r5, r1
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	4698      	mov	r8, r3
 8000b70:	4305      	orrs	r5, r0
 8000b72:	e6f7      	b.n	8000964 <__aeabi_dadd+0x238>
 8000b74:	0011      	movs	r1, r2
 8000b76:	4665      	mov	r5, ip
 8000b78:	3920      	subs	r1, #32
 8000b7a:	40cd      	lsrs	r5, r1
 8000b7c:	2a20      	cmp	r2, #32
 8000b7e:	d004      	beq.n	8000b8a <__aeabi_dadd+0x45e>
 8000b80:	2040      	movs	r0, #64	; 0x40
 8000b82:	4661      	mov	r1, ip
 8000b84:	1a82      	subs	r2, r0, r2
 8000b86:	4091      	lsls	r1, r2
 8000b88:	430f      	orrs	r7, r1
 8000b8a:	0039      	movs	r1, r7
 8000b8c:	1e4f      	subs	r7, r1, #1
 8000b8e:	41b9      	sbcs	r1, r7
 8000b90:	4329      	orrs	r1, r5
 8000b92:	e60f      	b.n	80007b4 <__aeabi_dadd+0x88>
 8000b94:	464a      	mov	r2, r9
 8000b96:	4313      	orrs	r3, r2
 8000b98:	001d      	movs	r5, r3
 8000b9a:	1e6b      	subs	r3, r5, #1
 8000b9c:	419d      	sbcs	r5, r3
 8000b9e:	1b7d      	subs	r5, r7, r5
 8000ba0:	42af      	cmp	r7, r5
 8000ba2:	419b      	sbcs	r3, r3
 8000ba4:	4662      	mov	r2, ip
 8000ba6:	425b      	negs	r3, r3
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	4698      	mov	r8, r3
 8000bac:	4654      	mov	r4, sl
 8000bae:	000e      	movs	r6, r1
 8000bb0:	e607      	b.n	80007c2 <__aeabi_dadd+0x96>
 8000bb2:	4648      	mov	r0, r9
 8000bb4:	4318      	orrs	r0, r3
 8000bb6:	d100      	bne.n	8000bba <__aeabi_dadd+0x48e>
 8000bb8:	e0b3      	b.n	8000d22 <__aeabi_dadd+0x5f6>
 8000bba:	1e50      	subs	r0, r2, #1
 8000bbc:	2a01      	cmp	r2, #1
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x496>
 8000bc0:	e10d      	b.n	8000dde <__aeabi_dadd+0x6b2>
 8000bc2:	4d8d      	ldr	r5, [pc, #564]	; (8000df8 <__aeabi_dadd+0x6cc>)
 8000bc4:	42aa      	cmp	r2, r5
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dadd+0x49e>
 8000bc8:	e0a5      	b.n	8000d16 <__aeabi_dadd+0x5ea>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	e710      	b.n	80009f0 <__aeabi_dadd+0x2c4>
 8000bce:	0032      	movs	r2, r6
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	e644      	b.n	8000860 <__aeabi_dadd+0x134>
 8000bd6:	2120      	movs	r1, #32
 8000bd8:	0038      	movs	r0, r7
 8000bda:	1a89      	subs	r1, r1, r2
 8000bdc:	4665      	mov	r5, ip
 8000bde:	408f      	lsls	r7, r1
 8000be0:	408d      	lsls	r5, r1
 8000be2:	40d0      	lsrs	r0, r2
 8000be4:	1e79      	subs	r1, r7, #1
 8000be6:	418f      	sbcs	r7, r1
 8000be8:	4305      	orrs	r5, r0
 8000bea:	433d      	orrs	r5, r7
 8000bec:	4667      	mov	r7, ip
 8000bee:	40d7      	lsrs	r7, r2
 8000bf0:	19db      	adds	r3, r3, r7
 8000bf2:	e794      	b.n	8000b1e <__aeabi_dadd+0x3f2>
 8000bf4:	4a80      	ldr	r2, [pc, #512]	; (8000df8 <__aeabi_dadd+0x6cc>)
 8000bf6:	4290      	cmp	r0, r2
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0x4d0>
 8000bfa:	e0ec      	b.n	8000dd6 <__aeabi_dadd+0x6aa>
 8000bfc:	0039      	movs	r1, r7
 8000bfe:	4449      	add	r1, r9
 8000c00:	4549      	cmp	r1, r9
 8000c02:	4192      	sbcs	r2, r2
 8000c04:	4463      	add	r3, ip
 8000c06:	4252      	negs	r2, r2
 8000c08:	189b      	adds	r3, r3, r2
 8000c0a:	07dd      	lsls	r5, r3, #31
 8000c0c:	0849      	lsrs	r1, r1, #1
 8000c0e:	085b      	lsrs	r3, r3, #1
 8000c10:	4698      	mov	r8, r3
 8000c12:	0006      	movs	r6, r0
 8000c14:	430d      	orrs	r5, r1
 8000c16:	e6a5      	b.n	8000964 <__aeabi_dadd+0x238>
 8000c18:	464a      	mov	r2, r9
 8000c1a:	1abd      	subs	r5, r7, r2
 8000c1c:	42af      	cmp	r7, r5
 8000c1e:	4189      	sbcs	r1, r1
 8000c20:	4662      	mov	r2, ip
 8000c22:	4249      	negs	r1, r1
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	1a5b      	subs	r3, r3, r1
 8000c28:	4698      	mov	r8, r3
 8000c2a:	4654      	mov	r4, sl
 8000c2c:	e5d1      	b.n	80007d2 <__aeabi_dadd+0xa6>
 8000c2e:	076c      	lsls	r4, r5, #29
 8000c30:	08f9      	lsrs	r1, r7, #3
 8000c32:	4321      	orrs	r1, r4
 8000c34:	08eb      	lsrs	r3, r5, #3
 8000c36:	0004      	movs	r4, r0
 8000c38:	e69d      	b.n	8000976 <__aeabi_dadd+0x24a>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	d175      	bne.n	8000d2c <__aeabi_dadd+0x600>
 8000c40:	4661      	mov	r1, ip
 8000c42:	4339      	orrs	r1, r7
 8000c44:	d114      	bne.n	8000c70 <__aeabi_dadd+0x544>
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	2400      	movs	r4, #0
 8000c4a:	031b      	lsls	r3, r3, #12
 8000c4c:	e6bc      	b.n	80009c8 <__aeabi_dadd+0x29c>
 8000c4e:	464a      	mov	r2, r9
 8000c50:	1bd5      	subs	r5, r2, r7
 8000c52:	45a9      	cmp	r9, r5
 8000c54:	4189      	sbcs	r1, r1
 8000c56:	4662      	mov	r2, ip
 8000c58:	4249      	negs	r1, r1
 8000c5a:	1a9b      	subs	r3, r3, r2
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	4698      	mov	r8, r3
 8000c60:	2601      	movs	r6, #1
 8000c62:	e5ae      	b.n	80007c2 <__aeabi_dadd+0x96>
 8000c64:	464a      	mov	r2, r9
 8000c66:	08d1      	lsrs	r1, r2, #3
 8000c68:	075a      	lsls	r2, r3, #29
 8000c6a:	4311      	orrs	r1, r2
 8000c6c:	08db      	lsrs	r3, r3, #3
 8000c6e:	e6a7      	b.n	80009c0 <__aeabi_dadd+0x294>
 8000c70:	4663      	mov	r3, ip
 8000c72:	08f9      	lsrs	r1, r7, #3
 8000c74:	075a      	lsls	r2, r3, #29
 8000c76:	4654      	mov	r4, sl
 8000c78:	4311      	orrs	r1, r2
 8000c7a:	08db      	lsrs	r3, r3, #3
 8000c7c:	e6a0      	b.n	80009c0 <__aeabi_dadd+0x294>
 8000c7e:	464a      	mov	r2, r9
 8000c80:	4313      	orrs	r3, r2
 8000c82:	001d      	movs	r5, r3
 8000c84:	1e6b      	subs	r3, r5, #1
 8000c86:	419d      	sbcs	r5, r3
 8000c88:	e6c7      	b.n	8000a1a <__aeabi_dadd+0x2ee>
 8000c8a:	0014      	movs	r4, r2
 8000c8c:	001e      	movs	r6, r3
 8000c8e:	3c20      	subs	r4, #32
 8000c90:	40e6      	lsrs	r6, r4
 8000c92:	2a20      	cmp	r2, #32
 8000c94:	d005      	beq.n	8000ca2 <__aeabi_dadd+0x576>
 8000c96:	2440      	movs	r4, #64	; 0x40
 8000c98:	1aa2      	subs	r2, r4, r2
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	4691      	mov	r9, r2
 8000ca2:	464d      	mov	r5, r9
 8000ca4:	1e6b      	subs	r3, r5, #1
 8000ca6:	419d      	sbcs	r5, r3
 8000ca8:	4335      	orrs	r5, r6
 8000caa:	e778      	b.n	8000b9e <__aeabi_dadd+0x472>
 8000cac:	464a      	mov	r2, r9
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	d000      	beq.n	8000cb4 <__aeabi_dadd+0x588>
 8000cb2:	e66b      	b.n	800098c <__aeabi_dadd+0x260>
 8000cb4:	076b      	lsls	r3, r5, #29
 8000cb6:	08f9      	lsrs	r1, r7, #3
 8000cb8:	4319      	orrs	r1, r3
 8000cba:	08eb      	lsrs	r3, r5, #3
 8000cbc:	e680      	b.n	80009c0 <__aeabi_dadd+0x294>
 8000cbe:	4661      	mov	r1, ip
 8000cc0:	4339      	orrs	r1, r7
 8000cc2:	d054      	beq.n	8000d6e <__aeabi_dadd+0x642>
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	08f9      	lsrs	r1, r7, #3
 8000cc8:	075c      	lsls	r4, r3, #29
 8000cca:	4321      	orrs	r1, r4
 8000ccc:	08db      	lsrs	r3, r3, #3
 8000cce:	0004      	movs	r4, r0
 8000cd0:	e654      	b.n	800097c <__aeabi_dadd+0x250>
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	1abd      	subs	r5, r7, r2
 8000cd6:	42af      	cmp	r7, r5
 8000cd8:	4189      	sbcs	r1, r1
 8000cda:	4662      	mov	r2, ip
 8000cdc:	4249      	negs	r1, r1
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	4698      	mov	r8, r3
 8000ce4:	0004      	movs	r4, r0
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	e56b      	b.n	80007c2 <__aeabi_dadd+0x96>
 8000cea:	464a      	mov	r2, r9
 8000cec:	1bd5      	subs	r5, r2, r7
 8000cee:	45a9      	cmp	r9, r5
 8000cf0:	4189      	sbcs	r1, r1
 8000cf2:	4662      	mov	r2, ip
 8000cf4:	4249      	negs	r1, r1
 8000cf6:	1a9a      	subs	r2, r3, r2
 8000cf8:	1a52      	subs	r2, r2, r1
 8000cfa:	4690      	mov	r8, r2
 8000cfc:	0212      	lsls	r2, r2, #8
 8000cfe:	d532      	bpl.n	8000d66 <__aeabi_dadd+0x63a>
 8000d00:	464a      	mov	r2, r9
 8000d02:	1abd      	subs	r5, r7, r2
 8000d04:	42af      	cmp	r7, r5
 8000d06:	4189      	sbcs	r1, r1
 8000d08:	4662      	mov	r2, ip
 8000d0a:	4249      	negs	r1, r1
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	1a5b      	subs	r3, r3, r1
 8000d10:	4698      	mov	r8, r3
 8000d12:	0004      	movs	r4, r0
 8000d14:	e584      	b.n	8000820 <__aeabi_dadd+0xf4>
 8000d16:	4663      	mov	r3, ip
 8000d18:	08f9      	lsrs	r1, r7, #3
 8000d1a:	075a      	lsls	r2, r3, #29
 8000d1c:	4311      	orrs	r1, r2
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	e64e      	b.n	80009c0 <__aeabi_dadd+0x294>
 8000d22:	08f9      	lsrs	r1, r7, #3
 8000d24:	0768      	lsls	r0, r5, #29
 8000d26:	4301      	orrs	r1, r0
 8000d28:	08eb      	lsrs	r3, r5, #3
 8000d2a:	e624      	b.n	8000976 <__aeabi_dadd+0x24a>
 8000d2c:	4662      	mov	r2, ip
 8000d2e:	433a      	orrs	r2, r7
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x608>
 8000d32:	e698      	b.n	8000a66 <__aeabi_dadd+0x33a>
 8000d34:	464a      	mov	r2, r9
 8000d36:	08d1      	lsrs	r1, r2, #3
 8000d38:	075a      	lsls	r2, r3, #29
 8000d3a:	4311      	orrs	r1, r2
 8000d3c:	08da      	lsrs	r2, r3, #3
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	031b      	lsls	r3, r3, #12
 8000d42:	421a      	tst	r2, r3
 8000d44:	d008      	beq.n	8000d58 <__aeabi_dadd+0x62c>
 8000d46:	4660      	mov	r0, ip
 8000d48:	08c5      	lsrs	r5, r0, #3
 8000d4a:	421d      	tst	r5, r3
 8000d4c:	d104      	bne.n	8000d58 <__aeabi_dadd+0x62c>
 8000d4e:	4654      	mov	r4, sl
 8000d50:	002a      	movs	r2, r5
 8000d52:	08f9      	lsrs	r1, r7, #3
 8000d54:	0743      	lsls	r3, r0, #29
 8000d56:	4319      	orrs	r1, r3
 8000d58:	0f4b      	lsrs	r3, r1, #29
 8000d5a:	00c9      	lsls	r1, r1, #3
 8000d5c:	075b      	lsls	r3, r3, #29
 8000d5e:	08c9      	lsrs	r1, r1, #3
 8000d60:	4319      	orrs	r1, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	e62c      	b.n	80009c0 <__aeabi_dadd+0x294>
 8000d66:	4641      	mov	r1, r8
 8000d68:	4329      	orrs	r1, r5
 8000d6a:	d000      	beq.n	8000d6e <__aeabi_dadd+0x642>
 8000d6c:	e5fa      	b.n	8000964 <__aeabi_dadd+0x238>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	000a      	movs	r2, r1
 8000d72:	2400      	movs	r4, #0
 8000d74:	e602      	b.n	800097c <__aeabi_dadd+0x250>
 8000d76:	076b      	lsls	r3, r5, #29
 8000d78:	08f9      	lsrs	r1, r7, #3
 8000d7a:	4319      	orrs	r1, r3
 8000d7c:	08eb      	lsrs	r3, r5, #3
 8000d7e:	e5fd      	b.n	800097c <__aeabi_dadd+0x250>
 8000d80:	4663      	mov	r3, ip
 8000d82:	08f9      	lsrs	r1, r7, #3
 8000d84:	075b      	lsls	r3, r3, #29
 8000d86:	4319      	orrs	r1, r3
 8000d88:	4663      	mov	r3, ip
 8000d8a:	0004      	movs	r4, r0
 8000d8c:	08db      	lsrs	r3, r3, #3
 8000d8e:	e617      	b.n	80009c0 <__aeabi_dadd+0x294>
 8000d90:	003d      	movs	r5, r7
 8000d92:	444d      	add	r5, r9
 8000d94:	4463      	add	r3, ip
 8000d96:	454d      	cmp	r5, r9
 8000d98:	4189      	sbcs	r1, r1
 8000d9a:	4698      	mov	r8, r3
 8000d9c:	4249      	negs	r1, r1
 8000d9e:	4488      	add	r8, r1
 8000da0:	4643      	mov	r3, r8
 8000da2:	021b      	lsls	r3, r3, #8
 8000da4:	d400      	bmi.n	8000da8 <__aeabi_dadd+0x67c>
 8000da6:	e5dd      	b.n	8000964 <__aeabi_dadd+0x238>
 8000da8:	4642      	mov	r2, r8
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <__aeabi_dadd+0x6d0>)
 8000dac:	2601      	movs	r6, #1
 8000dae:	401a      	ands	r2, r3
 8000db0:	4690      	mov	r8, r2
 8000db2:	e5d7      	b.n	8000964 <__aeabi_dadd+0x238>
 8000db4:	0010      	movs	r0, r2
 8000db6:	001e      	movs	r6, r3
 8000db8:	3820      	subs	r0, #32
 8000dba:	40c6      	lsrs	r6, r0
 8000dbc:	2a20      	cmp	r2, #32
 8000dbe:	d005      	beq.n	8000dcc <__aeabi_dadd+0x6a0>
 8000dc0:	2040      	movs	r0, #64	; 0x40
 8000dc2:	1a82      	subs	r2, r0, r2
 8000dc4:	4093      	lsls	r3, r2
 8000dc6:	464a      	mov	r2, r9
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	4691      	mov	r9, r2
 8000dcc:	464d      	mov	r5, r9
 8000dce:	1e6b      	subs	r3, r5, #1
 8000dd0:	419d      	sbcs	r5, r3
 8000dd2:	4335      	orrs	r5, r6
 8000dd4:	e621      	b.n	8000a1a <__aeabi_dadd+0x2ee>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	e540      	b.n	8000860 <__aeabi_dadd+0x134>
 8000dde:	464a      	mov	r2, r9
 8000de0:	19d5      	adds	r5, r2, r7
 8000de2:	42bd      	cmp	r5, r7
 8000de4:	4189      	sbcs	r1, r1
 8000de6:	4463      	add	r3, ip
 8000de8:	4698      	mov	r8, r3
 8000dea:	4249      	negs	r1, r1
 8000dec:	4488      	add	r8, r1
 8000dee:	e5b3      	b.n	8000958 <__aeabi_dadd+0x22c>
 8000df0:	2100      	movs	r1, #0
 8000df2:	4a01      	ldr	r2, [pc, #4]	; (8000df8 <__aeabi_dadd+0x6cc>)
 8000df4:	000b      	movs	r3, r1
 8000df6:	e533      	b.n	8000860 <__aeabi_dadd+0x134>
 8000df8:	000007ff 	.word	0x000007ff
 8000dfc:	ff7fffff 	.word	0xff7fffff

08000e00 <__aeabi_ddiv>:
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	4657      	mov	r7, sl
 8000e04:	464e      	mov	r6, r9
 8000e06:	4645      	mov	r5, r8
 8000e08:	46de      	mov	lr, fp
 8000e0a:	b5e0      	push	{r5, r6, r7, lr}
 8000e0c:	4681      	mov	r9, r0
 8000e0e:	0005      	movs	r5, r0
 8000e10:	030c      	lsls	r4, r1, #12
 8000e12:	0048      	lsls	r0, r1, #1
 8000e14:	4692      	mov	sl, r2
 8000e16:	001f      	movs	r7, r3
 8000e18:	b085      	sub	sp, #20
 8000e1a:	0b24      	lsrs	r4, r4, #12
 8000e1c:	0d40      	lsrs	r0, r0, #21
 8000e1e:	0fce      	lsrs	r6, r1, #31
 8000e20:	2800      	cmp	r0, #0
 8000e22:	d059      	beq.n	8000ed8 <__aeabi_ddiv+0xd8>
 8000e24:	4b87      	ldr	r3, [pc, #540]	; (8001044 <__aeabi_ddiv+0x244>)
 8000e26:	4298      	cmp	r0, r3
 8000e28:	d100      	bne.n	8000e2c <__aeabi_ddiv+0x2c>
 8000e2a:	e098      	b.n	8000f5e <__aeabi_ddiv+0x15e>
 8000e2c:	0f6b      	lsrs	r3, r5, #29
 8000e2e:	00e4      	lsls	r4, r4, #3
 8000e30:	431c      	orrs	r4, r3
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	4b83      	ldr	r3, [pc, #524]	; (8001048 <__aeabi_ddiv+0x248>)
 8000e3c:	00ed      	lsls	r5, r5, #3
 8000e3e:	469b      	mov	fp, r3
 8000e40:	2300      	movs	r3, #0
 8000e42:	4699      	mov	r9, r3
 8000e44:	4483      	add	fp, r0
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	033c      	lsls	r4, r7, #12
 8000e4a:	007b      	lsls	r3, r7, #1
 8000e4c:	4650      	mov	r0, sl
 8000e4e:	0b24      	lsrs	r4, r4, #12
 8000e50:	0d5b      	lsrs	r3, r3, #21
 8000e52:	0fff      	lsrs	r7, r7, #31
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d067      	beq.n	8000f28 <__aeabi_ddiv+0x128>
 8000e58:	4a7a      	ldr	r2, [pc, #488]	; (8001044 <__aeabi_ddiv+0x244>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d018      	beq.n	8000e90 <__aeabi_ddiv+0x90>
 8000e5e:	497a      	ldr	r1, [pc, #488]	; (8001048 <__aeabi_ddiv+0x248>)
 8000e60:	0f42      	lsrs	r2, r0, #29
 8000e62:	468c      	mov	ip, r1
 8000e64:	00e4      	lsls	r4, r4, #3
 8000e66:	4659      	mov	r1, fp
 8000e68:	4314      	orrs	r4, r2
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	4463      	add	r3, ip
 8000e6e:	0412      	lsls	r2, r2, #16
 8000e70:	1acb      	subs	r3, r1, r3
 8000e72:	4314      	orrs	r4, r2
 8000e74:	469b      	mov	fp, r3
 8000e76:	00c2      	lsls	r2, r0, #3
 8000e78:	2000      	movs	r0, #0
 8000e7a:	0033      	movs	r3, r6
 8000e7c:	407b      	eors	r3, r7
 8000e7e:	469a      	mov	sl, r3
 8000e80:	464b      	mov	r3, r9
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d900      	bls.n	8000e88 <__aeabi_ddiv+0x88>
 8000e86:	e0ef      	b.n	8001068 <__aeabi_ddiv+0x268>
 8000e88:	4970      	ldr	r1, [pc, #448]	; (800104c <__aeabi_ddiv+0x24c>)
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	58cb      	ldr	r3, [r1, r3]
 8000e8e:	469f      	mov	pc, r3
 8000e90:	4b6f      	ldr	r3, [pc, #444]	; (8001050 <__aeabi_ddiv+0x250>)
 8000e92:	4652      	mov	r2, sl
 8000e94:	469c      	mov	ip, r3
 8000e96:	4322      	orrs	r2, r4
 8000e98:	44e3      	add	fp, ip
 8000e9a:	2a00      	cmp	r2, #0
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_ddiv+0xa0>
 8000e9e:	e095      	b.n	8000fcc <__aeabi_ddiv+0x1cc>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	4319      	orrs	r1, r3
 8000ea6:	4689      	mov	r9, r1
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	2002      	movs	r0, #2
 8000eac:	e7e5      	b.n	8000e7a <__aeabi_ddiv+0x7a>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	4652      	mov	r2, sl
 8000eb6:	051b      	lsls	r3, r3, #20
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	07d2      	lsls	r2, r2, #31
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	0028      	movs	r0, r5
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	b005      	add	sp, #20
 8000ec4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ec6:	46bb      	mov	fp, r7
 8000ec8:	46b2      	mov	sl, r6
 8000eca:	46a9      	mov	r9, r5
 8000ecc:	46a0      	mov	r8, r4
 8000ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	4b5b      	ldr	r3, [pc, #364]	; (8001044 <__aeabi_ddiv+0x244>)
 8000ed6:	e7ed      	b.n	8000eb4 <__aeabi_ddiv+0xb4>
 8000ed8:	464b      	mov	r3, r9
 8000eda:	4323      	orrs	r3, r4
 8000edc:	4698      	mov	r8, r3
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0xe2>
 8000ee0:	e089      	b.n	8000ff6 <__aeabi_ddiv+0x1f6>
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_ddiv+0xe8>
 8000ee6:	e1e0      	b.n	80012aa <__aeabi_ddiv+0x4aa>
 8000ee8:	0020      	movs	r0, r4
 8000eea:	f001 f965 	bl	80021b8 <__clzsi2>
 8000eee:	0001      	movs	r1, r0
 8000ef0:	0002      	movs	r2, r0
 8000ef2:	390b      	subs	r1, #11
 8000ef4:	231d      	movs	r3, #29
 8000ef6:	1a5b      	subs	r3, r3, r1
 8000ef8:	4649      	mov	r1, r9
 8000efa:	0010      	movs	r0, r2
 8000efc:	40d9      	lsrs	r1, r3
 8000efe:	3808      	subs	r0, #8
 8000f00:	4084      	lsls	r4, r0
 8000f02:	000b      	movs	r3, r1
 8000f04:	464d      	mov	r5, r9
 8000f06:	4323      	orrs	r3, r4
 8000f08:	4698      	mov	r8, r3
 8000f0a:	4085      	lsls	r5, r0
 8000f0c:	4851      	ldr	r0, [pc, #324]	; (8001054 <__aeabi_ddiv+0x254>)
 8000f0e:	033c      	lsls	r4, r7, #12
 8000f10:	1a83      	subs	r3, r0, r2
 8000f12:	469b      	mov	fp, r3
 8000f14:	2300      	movs	r3, #0
 8000f16:	4699      	mov	r9, r3
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	007b      	lsls	r3, r7, #1
 8000f1c:	4650      	mov	r0, sl
 8000f1e:	0b24      	lsrs	r4, r4, #12
 8000f20:	0d5b      	lsrs	r3, r3, #21
 8000f22:	0fff      	lsrs	r7, r7, #31
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d197      	bne.n	8000e58 <__aeabi_ddiv+0x58>
 8000f28:	4652      	mov	r2, sl
 8000f2a:	4322      	orrs	r2, r4
 8000f2c:	d055      	beq.n	8000fda <__aeabi_ddiv+0x1da>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_ddiv+0x134>
 8000f32:	e1ca      	b.n	80012ca <__aeabi_ddiv+0x4ca>
 8000f34:	0020      	movs	r0, r4
 8000f36:	f001 f93f 	bl	80021b8 <__clzsi2>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	3a0b      	subs	r2, #11
 8000f3e:	231d      	movs	r3, #29
 8000f40:	0001      	movs	r1, r0
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	4652      	mov	r2, sl
 8000f46:	3908      	subs	r1, #8
 8000f48:	40da      	lsrs	r2, r3
 8000f4a:	408c      	lsls	r4, r1
 8000f4c:	4314      	orrs	r4, r2
 8000f4e:	4652      	mov	r2, sl
 8000f50:	408a      	lsls	r2, r1
 8000f52:	4b41      	ldr	r3, [pc, #260]	; (8001058 <__aeabi_ddiv+0x258>)
 8000f54:	4458      	add	r0, fp
 8000f56:	469b      	mov	fp, r3
 8000f58:	4483      	add	fp, r0
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	e78d      	b.n	8000e7a <__aeabi_ddiv+0x7a>
 8000f5e:	464b      	mov	r3, r9
 8000f60:	4323      	orrs	r3, r4
 8000f62:	4698      	mov	r8, r3
 8000f64:	d140      	bne.n	8000fe8 <__aeabi_ddiv+0x1e8>
 8000f66:	2308      	movs	r3, #8
 8000f68:	4699      	mov	r9, r3
 8000f6a:	3b06      	subs	r3, #6
 8000f6c:	2500      	movs	r5, #0
 8000f6e:	4683      	mov	fp, r0
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	e769      	b.n	8000e48 <__aeabi_ddiv+0x48>
 8000f74:	46b2      	mov	sl, r6
 8000f76:	9b00      	ldr	r3, [sp, #0]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d0a9      	beq.n	8000ed0 <__aeabi_ddiv+0xd0>
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0x182>
 8000f80:	e211      	b.n	80013a6 <__aeabi_ddiv+0x5a6>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d093      	beq.n	8000eae <__aeabi_ddiv+0xae>
 8000f86:	4a35      	ldr	r2, [pc, #212]	; (800105c <__aeabi_ddiv+0x25c>)
 8000f88:	445a      	add	r2, fp
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	dc00      	bgt.n	8000f90 <__aeabi_ddiv+0x190>
 8000f8e:	e13c      	b.n	800120a <__aeabi_ddiv+0x40a>
 8000f90:	076b      	lsls	r3, r5, #29
 8000f92:	d000      	beq.n	8000f96 <__aeabi_ddiv+0x196>
 8000f94:	e1a7      	b.n	80012e6 <__aeabi_ddiv+0x4e6>
 8000f96:	08ed      	lsrs	r5, r5, #3
 8000f98:	4643      	mov	r3, r8
 8000f9a:	01db      	lsls	r3, r3, #7
 8000f9c:	d506      	bpl.n	8000fac <__aeabi_ddiv+0x1ac>
 8000f9e:	4642      	mov	r2, r8
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <__aeabi_ddiv+0x260>)
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	4690      	mov	r8, r2
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	00d2      	lsls	r2, r2, #3
 8000faa:	445a      	add	r2, fp
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <__aeabi_ddiv+0x264>)
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dc8e      	bgt.n	8000ed0 <__aeabi_ddiv+0xd0>
 8000fb2:	4643      	mov	r3, r8
 8000fb4:	0552      	lsls	r2, r2, #21
 8000fb6:	0758      	lsls	r0, r3, #29
 8000fb8:	025c      	lsls	r4, r3, #9
 8000fba:	4305      	orrs	r5, r0
 8000fbc:	0b24      	lsrs	r4, r4, #12
 8000fbe:	0d53      	lsrs	r3, r2, #21
 8000fc0:	e778      	b.n	8000eb4 <__aeabi_ddiv+0xb4>
 8000fc2:	46ba      	mov	sl, r7
 8000fc4:	46a0      	mov	r8, r4
 8000fc6:	0015      	movs	r5, r2
 8000fc8:	9000      	str	r0, [sp, #0]
 8000fca:	e7d4      	b.n	8000f76 <__aeabi_ddiv+0x176>
 8000fcc:	464a      	mov	r2, r9
 8000fce:	2303      	movs	r3, #3
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	4691      	mov	r9, r2
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	4652      	mov	r2, sl
 8000fd8:	e74f      	b.n	8000e7a <__aeabi_ddiv+0x7a>
 8000fda:	4649      	mov	r1, r9
 8000fdc:	2301      	movs	r3, #1
 8000fde:	4319      	orrs	r1, r3
 8000fe0:	4689      	mov	r9, r1
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	e748      	b.n	8000e7a <__aeabi_ddiv+0x7a>
 8000fe8:	230c      	movs	r3, #12
 8000fea:	4699      	mov	r9, r3
 8000fec:	3b09      	subs	r3, #9
 8000fee:	46a0      	mov	r8, r4
 8000ff0:	4683      	mov	fp, r0
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e728      	b.n	8000e48 <__aeabi_ddiv+0x48>
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	4699      	mov	r9, r3
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	469b      	mov	fp, r3
 8000ffe:	3301      	adds	r3, #1
 8001000:	2500      	movs	r5, #0
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	e720      	b.n	8000e48 <__aeabi_ddiv+0x48>
 8001006:	2300      	movs	r3, #0
 8001008:	2480      	movs	r4, #128	; 0x80
 800100a:	469a      	mov	sl, r3
 800100c:	2500      	movs	r5, #0
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <__aeabi_ddiv+0x244>)
 8001010:	0324      	lsls	r4, r4, #12
 8001012:	e74f      	b.n	8000eb4 <__aeabi_ddiv+0xb4>
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	4641      	mov	r1, r8
 8001018:	031b      	lsls	r3, r3, #12
 800101a:	4219      	tst	r1, r3
 800101c:	d008      	beq.n	8001030 <__aeabi_ddiv+0x230>
 800101e:	421c      	tst	r4, r3
 8001020:	d106      	bne.n	8001030 <__aeabi_ddiv+0x230>
 8001022:	431c      	orrs	r4, r3
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	46ba      	mov	sl, r7
 8001028:	0015      	movs	r5, r2
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <__aeabi_ddiv+0x244>)
 800102c:	0b24      	lsrs	r4, r4, #12
 800102e:	e741      	b.n	8000eb4 <__aeabi_ddiv+0xb4>
 8001030:	2480      	movs	r4, #128	; 0x80
 8001032:	4643      	mov	r3, r8
 8001034:	0324      	lsls	r4, r4, #12
 8001036:	431c      	orrs	r4, r3
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	46b2      	mov	sl, r6
 800103c:	4b01      	ldr	r3, [pc, #4]	; (8001044 <__aeabi_ddiv+0x244>)
 800103e:	0b24      	lsrs	r4, r4, #12
 8001040:	e738      	b.n	8000eb4 <__aeabi_ddiv+0xb4>
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	000007ff 	.word	0x000007ff
 8001048:	fffffc01 	.word	0xfffffc01
 800104c:	08007bf4 	.word	0x08007bf4
 8001050:	fffff801 	.word	0xfffff801
 8001054:	fffffc0d 	.word	0xfffffc0d
 8001058:	000003f3 	.word	0x000003f3
 800105c:	000003ff 	.word	0x000003ff
 8001060:	feffffff 	.word	0xfeffffff
 8001064:	000007fe 	.word	0x000007fe
 8001068:	4544      	cmp	r4, r8
 800106a:	d200      	bcs.n	800106e <__aeabi_ddiv+0x26e>
 800106c:	e116      	b.n	800129c <__aeabi_ddiv+0x49c>
 800106e:	d100      	bne.n	8001072 <__aeabi_ddiv+0x272>
 8001070:	e111      	b.n	8001296 <__aeabi_ddiv+0x496>
 8001072:	2301      	movs	r3, #1
 8001074:	425b      	negs	r3, r3
 8001076:	469c      	mov	ip, r3
 8001078:	002e      	movs	r6, r5
 800107a:	4640      	mov	r0, r8
 800107c:	2500      	movs	r5, #0
 800107e:	44e3      	add	fp, ip
 8001080:	0223      	lsls	r3, r4, #8
 8001082:	0e14      	lsrs	r4, r2, #24
 8001084:	431c      	orrs	r4, r3
 8001086:	0c1b      	lsrs	r3, r3, #16
 8001088:	4699      	mov	r9, r3
 800108a:	0423      	lsls	r3, r4, #16
 800108c:	0c1f      	lsrs	r7, r3, #16
 800108e:	0212      	lsls	r2, r2, #8
 8001090:	4649      	mov	r1, r9
 8001092:	9200      	str	r2, [sp, #0]
 8001094:	9701      	str	r7, [sp, #4]
 8001096:	f7ff f8b7 	bl	8000208 <__aeabi_uidivmod>
 800109a:	0002      	movs	r2, r0
 800109c:	437a      	muls	r2, r7
 800109e:	040b      	lsls	r3, r1, #16
 80010a0:	0c31      	lsrs	r1, r6, #16
 80010a2:	4680      	mov	r8, r0
 80010a4:	4319      	orrs	r1, r3
 80010a6:	428a      	cmp	r2, r1
 80010a8:	d90b      	bls.n	80010c2 <__aeabi_ddiv+0x2c2>
 80010aa:	2301      	movs	r3, #1
 80010ac:	425b      	negs	r3, r3
 80010ae:	469c      	mov	ip, r3
 80010b0:	1909      	adds	r1, r1, r4
 80010b2:	44e0      	add	r8, ip
 80010b4:	428c      	cmp	r4, r1
 80010b6:	d804      	bhi.n	80010c2 <__aeabi_ddiv+0x2c2>
 80010b8:	428a      	cmp	r2, r1
 80010ba:	d902      	bls.n	80010c2 <__aeabi_ddiv+0x2c2>
 80010bc:	1e83      	subs	r3, r0, #2
 80010be:	4698      	mov	r8, r3
 80010c0:	1909      	adds	r1, r1, r4
 80010c2:	1a88      	subs	r0, r1, r2
 80010c4:	4649      	mov	r1, r9
 80010c6:	f7ff f89f 	bl	8000208 <__aeabi_uidivmod>
 80010ca:	0409      	lsls	r1, r1, #16
 80010cc:	468c      	mov	ip, r1
 80010ce:	0431      	lsls	r1, r6, #16
 80010d0:	4666      	mov	r6, ip
 80010d2:	9a01      	ldr	r2, [sp, #4]
 80010d4:	0c09      	lsrs	r1, r1, #16
 80010d6:	4342      	muls	r2, r0
 80010d8:	0003      	movs	r3, r0
 80010da:	4331      	orrs	r1, r6
 80010dc:	428a      	cmp	r2, r1
 80010de:	d904      	bls.n	80010ea <__aeabi_ddiv+0x2ea>
 80010e0:	1909      	adds	r1, r1, r4
 80010e2:	3b01      	subs	r3, #1
 80010e4:	428c      	cmp	r4, r1
 80010e6:	d800      	bhi.n	80010ea <__aeabi_ddiv+0x2ea>
 80010e8:	e111      	b.n	800130e <__aeabi_ddiv+0x50e>
 80010ea:	1a89      	subs	r1, r1, r2
 80010ec:	4642      	mov	r2, r8
 80010ee:	9e00      	ldr	r6, [sp, #0]
 80010f0:	0412      	lsls	r2, r2, #16
 80010f2:	431a      	orrs	r2, r3
 80010f4:	0c33      	lsrs	r3, r6, #16
 80010f6:	001f      	movs	r7, r3
 80010f8:	0c10      	lsrs	r0, r2, #16
 80010fa:	4690      	mov	r8, r2
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	0413      	lsls	r3, r2, #16
 8001100:	0432      	lsls	r2, r6, #16
 8001102:	0c16      	lsrs	r6, r2, #16
 8001104:	0032      	movs	r2, r6
 8001106:	0c1b      	lsrs	r3, r3, #16
 8001108:	435a      	muls	r2, r3
 800110a:	9603      	str	r6, [sp, #12]
 800110c:	437b      	muls	r3, r7
 800110e:	4346      	muls	r6, r0
 8001110:	4378      	muls	r0, r7
 8001112:	0c17      	lsrs	r7, r2, #16
 8001114:	46bc      	mov	ip, r7
 8001116:	199b      	adds	r3, r3, r6
 8001118:	4463      	add	r3, ip
 800111a:	429e      	cmp	r6, r3
 800111c:	d903      	bls.n	8001126 <__aeabi_ddiv+0x326>
 800111e:	2680      	movs	r6, #128	; 0x80
 8001120:	0276      	lsls	r6, r6, #9
 8001122:	46b4      	mov	ip, r6
 8001124:	4460      	add	r0, ip
 8001126:	0c1e      	lsrs	r6, r3, #16
 8001128:	1830      	adds	r0, r6, r0
 800112a:	0416      	lsls	r6, r2, #16
 800112c:	041b      	lsls	r3, r3, #16
 800112e:	0c36      	lsrs	r6, r6, #16
 8001130:	199e      	adds	r6, r3, r6
 8001132:	4281      	cmp	r1, r0
 8001134:	d200      	bcs.n	8001138 <__aeabi_ddiv+0x338>
 8001136:	e09c      	b.n	8001272 <__aeabi_ddiv+0x472>
 8001138:	d100      	bne.n	800113c <__aeabi_ddiv+0x33c>
 800113a:	e097      	b.n	800126c <__aeabi_ddiv+0x46c>
 800113c:	1bae      	subs	r6, r5, r6
 800113e:	1a09      	subs	r1, r1, r0
 8001140:	42b5      	cmp	r5, r6
 8001142:	4180      	sbcs	r0, r0
 8001144:	4240      	negs	r0, r0
 8001146:	1a08      	subs	r0, r1, r0
 8001148:	4284      	cmp	r4, r0
 800114a:	d100      	bne.n	800114e <__aeabi_ddiv+0x34e>
 800114c:	e111      	b.n	8001372 <__aeabi_ddiv+0x572>
 800114e:	4649      	mov	r1, r9
 8001150:	f7ff f85a 	bl	8000208 <__aeabi_uidivmod>
 8001154:	9a01      	ldr	r2, [sp, #4]
 8001156:	040b      	lsls	r3, r1, #16
 8001158:	4342      	muls	r2, r0
 800115a:	0c31      	lsrs	r1, r6, #16
 800115c:	0005      	movs	r5, r0
 800115e:	4319      	orrs	r1, r3
 8001160:	428a      	cmp	r2, r1
 8001162:	d907      	bls.n	8001174 <__aeabi_ddiv+0x374>
 8001164:	1909      	adds	r1, r1, r4
 8001166:	3d01      	subs	r5, #1
 8001168:	428c      	cmp	r4, r1
 800116a:	d803      	bhi.n	8001174 <__aeabi_ddiv+0x374>
 800116c:	428a      	cmp	r2, r1
 800116e:	d901      	bls.n	8001174 <__aeabi_ddiv+0x374>
 8001170:	1e85      	subs	r5, r0, #2
 8001172:	1909      	adds	r1, r1, r4
 8001174:	1a88      	subs	r0, r1, r2
 8001176:	4649      	mov	r1, r9
 8001178:	f7ff f846 	bl	8000208 <__aeabi_uidivmod>
 800117c:	0409      	lsls	r1, r1, #16
 800117e:	468c      	mov	ip, r1
 8001180:	0431      	lsls	r1, r6, #16
 8001182:	4666      	mov	r6, ip
 8001184:	9a01      	ldr	r2, [sp, #4]
 8001186:	0c09      	lsrs	r1, r1, #16
 8001188:	4342      	muls	r2, r0
 800118a:	0003      	movs	r3, r0
 800118c:	4331      	orrs	r1, r6
 800118e:	428a      	cmp	r2, r1
 8001190:	d907      	bls.n	80011a2 <__aeabi_ddiv+0x3a2>
 8001192:	1909      	adds	r1, r1, r4
 8001194:	3b01      	subs	r3, #1
 8001196:	428c      	cmp	r4, r1
 8001198:	d803      	bhi.n	80011a2 <__aeabi_ddiv+0x3a2>
 800119a:	428a      	cmp	r2, r1
 800119c:	d901      	bls.n	80011a2 <__aeabi_ddiv+0x3a2>
 800119e:	1e83      	subs	r3, r0, #2
 80011a0:	1909      	adds	r1, r1, r4
 80011a2:	9e03      	ldr	r6, [sp, #12]
 80011a4:	1a89      	subs	r1, r1, r2
 80011a6:	0032      	movs	r2, r6
 80011a8:	042d      	lsls	r5, r5, #16
 80011aa:	431d      	orrs	r5, r3
 80011ac:	9f02      	ldr	r7, [sp, #8]
 80011ae:	042b      	lsls	r3, r5, #16
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	435a      	muls	r2, r3
 80011b4:	437b      	muls	r3, r7
 80011b6:	469c      	mov	ip, r3
 80011b8:	0c28      	lsrs	r0, r5, #16
 80011ba:	4346      	muls	r6, r0
 80011bc:	0c13      	lsrs	r3, r2, #16
 80011be:	44b4      	add	ip, r6
 80011c0:	4463      	add	r3, ip
 80011c2:	4378      	muls	r0, r7
 80011c4:	429e      	cmp	r6, r3
 80011c6:	d903      	bls.n	80011d0 <__aeabi_ddiv+0x3d0>
 80011c8:	2680      	movs	r6, #128	; 0x80
 80011ca:	0276      	lsls	r6, r6, #9
 80011cc:	46b4      	mov	ip, r6
 80011ce:	4460      	add	r0, ip
 80011d0:	0c1e      	lsrs	r6, r3, #16
 80011d2:	0412      	lsls	r2, r2, #16
 80011d4:	041b      	lsls	r3, r3, #16
 80011d6:	0c12      	lsrs	r2, r2, #16
 80011d8:	1830      	adds	r0, r6, r0
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	4281      	cmp	r1, r0
 80011de:	d306      	bcc.n	80011ee <__aeabi_ddiv+0x3ee>
 80011e0:	d002      	beq.n	80011e8 <__aeabi_ddiv+0x3e8>
 80011e2:	2301      	movs	r3, #1
 80011e4:	431d      	orrs	r5, r3
 80011e6:	e6ce      	b.n	8000f86 <__aeabi_ddiv+0x186>
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x3ee>
 80011ec:	e6cb      	b.n	8000f86 <__aeabi_ddiv+0x186>
 80011ee:	1861      	adds	r1, r4, r1
 80011f0:	1e6e      	subs	r6, r5, #1
 80011f2:	42a1      	cmp	r1, r4
 80011f4:	d200      	bcs.n	80011f8 <__aeabi_ddiv+0x3f8>
 80011f6:	e0a4      	b.n	8001342 <__aeabi_ddiv+0x542>
 80011f8:	4281      	cmp	r1, r0
 80011fa:	d200      	bcs.n	80011fe <__aeabi_ddiv+0x3fe>
 80011fc:	e0c9      	b.n	8001392 <__aeabi_ddiv+0x592>
 80011fe:	d100      	bne.n	8001202 <__aeabi_ddiv+0x402>
 8001200:	e0d9      	b.n	80013b6 <__aeabi_ddiv+0x5b6>
 8001202:	0035      	movs	r5, r6
 8001204:	e7ed      	b.n	80011e2 <__aeabi_ddiv+0x3e2>
 8001206:	2501      	movs	r5, #1
 8001208:	426d      	negs	r5, r5
 800120a:	2101      	movs	r1, #1
 800120c:	1a89      	subs	r1, r1, r2
 800120e:	2938      	cmp	r1, #56	; 0x38
 8001210:	dd00      	ble.n	8001214 <__aeabi_ddiv+0x414>
 8001212:	e64c      	b.n	8000eae <__aeabi_ddiv+0xae>
 8001214:	291f      	cmp	r1, #31
 8001216:	dc00      	bgt.n	800121a <__aeabi_ddiv+0x41a>
 8001218:	e07f      	b.n	800131a <__aeabi_ddiv+0x51a>
 800121a:	231f      	movs	r3, #31
 800121c:	425b      	negs	r3, r3
 800121e:	1a9a      	subs	r2, r3, r2
 8001220:	4643      	mov	r3, r8
 8001222:	40d3      	lsrs	r3, r2
 8001224:	2920      	cmp	r1, #32
 8001226:	d004      	beq.n	8001232 <__aeabi_ddiv+0x432>
 8001228:	4644      	mov	r4, r8
 800122a:	4a65      	ldr	r2, [pc, #404]	; (80013c0 <__aeabi_ddiv+0x5c0>)
 800122c:	445a      	add	r2, fp
 800122e:	4094      	lsls	r4, r2
 8001230:	4325      	orrs	r5, r4
 8001232:	1e6a      	subs	r2, r5, #1
 8001234:	4195      	sbcs	r5, r2
 8001236:	2207      	movs	r2, #7
 8001238:	432b      	orrs	r3, r5
 800123a:	0015      	movs	r5, r2
 800123c:	2400      	movs	r4, #0
 800123e:	401d      	ands	r5, r3
 8001240:	421a      	tst	r2, r3
 8001242:	d100      	bne.n	8001246 <__aeabi_ddiv+0x446>
 8001244:	e0a1      	b.n	800138a <__aeabi_ddiv+0x58a>
 8001246:	220f      	movs	r2, #15
 8001248:	2400      	movs	r4, #0
 800124a:	401a      	ands	r2, r3
 800124c:	2a04      	cmp	r2, #4
 800124e:	d100      	bne.n	8001252 <__aeabi_ddiv+0x452>
 8001250:	e098      	b.n	8001384 <__aeabi_ddiv+0x584>
 8001252:	1d1a      	adds	r2, r3, #4
 8001254:	429a      	cmp	r2, r3
 8001256:	419b      	sbcs	r3, r3
 8001258:	425b      	negs	r3, r3
 800125a:	18e4      	adds	r4, r4, r3
 800125c:	0013      	movs	r3, r2
 800125e:	0222      	lsls	r2, r4, #8
 8001260:	d400      	bmi.n	8001264 <__aeabi_ddiv+0x464>
 8001262:	e08f      	b.n	8001384 <__aeabi_ddiv+0x584>
 8001264:	2301      	movs	r3, #1
 8001266:	2400      	movs	r4, #0
 8001268:	2500      	movs	r5, #0
 800126a:	e623      	b.n	8000eb4 <__aeabi_ddiv+0xb4>
 800126c:	42b5      	cmp	r5, r6
 800126e:	d300      	bcc.n	8001272 <__aeabi_ddiv+0x472>
 8001270:	e764      	b.n	800113c <__aeabi_ddiv+0x33c>
 8001272:	4643      	mov	r3, r8
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	9b00      	ldr	r3, [sp, #0]
 8001278:	469c      	mov	ip, r3
 800127a:	4465      	add	r5, ip
 800127c:	001f      	movs	r7, r3
 800127e:	429d      	cmp	r5, r3
 8001280:	419b      	sbcs	r3, r3
 8001282:	425b      	negs	r3, r3
 8001284:	191b      	adds	r3, r3, r4
 8001286:	18c9      	adds	r1, r1, r3
 8001288:	428c      	cmp	r4, r1
 800128a:	d23a      	bcs.n	8001302 <__aeabi_ddiv+0x502>
 800128c:	4288      	cmp	r0, r1
 800128e:	d863      	bhi.n	8001358 <__aeabi_ddiv+0x558>
 8001290:	d060      	beq.n	8001354 <__aeabi_ddiv+0x554>
 8001292:	4690      	mov	r8, r2
 8001294:	e752      	b.n	800113c <__aeabi_ddiv+0x33c>
 8001296:	42aa      	cmp	r2, r5
 8001298:	d900      	bls.n	800129c <__aeabi_ddiv+0x49c>
 800129a:	e6ea      	b.n	8001072 <__aeabi_ddiv+0x272>
 800129c:	4643      	mov	r3, r8
 800129e:	07de      	lsls	r6, r3, #31
 80012a0:	0858      	lsrs	r0, r3, #1
 80012a2:	086b      	lsrs	r3, r5, #1
 80012a4:	431e      	orrs	r6, r3
 80012a6:	07ed      	lsls	r5, r5, #31
 80012a8:	e6ea      	b.n	8001080 <__aeabi_ddiv+0x280>
 80012aa:	4648      	mov	r0, r9
 80012ac:	f000 ff84 	bl	80021b8 <__clzsi2>
 80012b0:	0001      	movs	r1, r0
 80012b2:	0002      	movs	r2, r0
 80012b4:	3115      	adds	r1, #21
 80012b6:	3220      	adds	r2, #32
 80012b8:	291c      	cmp	r1, #28
 80012ba:	dc00      	bgt.n	80012be <__aeabi_ddiv+0x4be>
 80012bc:	e61a      	b.n	8000ef4 <__aeabi_ddiv+0xf4>
 80012be:	464b      	mov	r3, r9
 80012c0:	3808      	subs	r0, #8
 80012c2:	4083      	lsls	r3, r0
 80012c4:	2500      	movs	r5, #0
 80012c6:	4698      	mov	r8, r3
 80012c8:	e620      	b.n	8000f0c <__aeabi_ddiv+0x10c>
 80012ca:	f000 ff75 	bl	80021b8 <__clzsi2>
 80012ce:	0003      	movs	r3, r0
 80012d0:	001a      	movs	r2, r3
 80012d2:	3215      	adds	r2, #21
 80012d4:	3020      	adds	r0, #32
 80012d6:	2a1c      	cmp	r2, #28
 80012d8:	dc00      	bgt.n	80012dc <__aeabi_ddiv+0x4dc>
 80012da:	e630      	b.n	8000f3e <__aeabi_ddiv+0x13e>
 80012dc:	4654      	mov	r4, sl
 80012de:	3b08      	subs	r3, #8
 80012e0:	2200      	movs	r2, #0
 80012e2:	409c      	lsls	r4, r3
 80012e4:	e635      	b.n	8000f52 <__aeabi_ddiv+0x152>
 80012e6:	230f      	movs	r3, #15
 80012e8:	402b      	ands	r3, r5
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d100      	bne.n	80012f0 <__aeabi_ddiv+0x4f0>
 80012ee:	e652      	b.n	8000f96 <__aeabi_ddiv+0x196>
 80012f0:	2305      	movs	r3, #5
 80012f2:	425b      	negs	r3, r3
 80012f4:	42ab      	cmp	r3, r5
 80012f6:	419b      	sbcs	r3, r3
 80012f8:	3504      	adds	r5, #4
 80012fa:	425b      	negs	r3, r3
 80012fc:	08ed      	lsrs	r5, r5, #3
 80012fe:	4498      	add	r8, r3
 8001300:	e64a      	b.n	8000f98 <__aeabi_ddiv+0x198>
 8001302:	428c      	cmp	r4, r1
 8001304:	d1c5      	bne.n	8001292 <__aeabi_ddiv+0x492>
 8001306:	42af      	cmp	r7, r5
 8001308:	d9c0      	bls.n	800128c <__aeabi_ddiv+0x48c>
 800130a:	4690      	mov	r8, r2
 800130c:	e716      	b.n	800113c <__aeabi_ddiv+0x33c>
 800130e:	428a      	cmp	r2, r1
 8001310:	d800      	bhi.n	8001314 <__aeabi_ddiv+0x514>
 8001312:	e6ea      	b.n	80010ea <__aeabi_ddiv+0x2ea>
 8001314:	1e83      	subs	r3, r0, #2
 8001316:	1909      	adds	r1, r1, r4
 8001318:	e6e7      	b.n	80010ea <__aeabi_ddiv+0x2ea>
 800131a:	4a2a      	ldr	r2, [pc, #168]	; (80013c4 <__aeabi_ddiv+0x5c4>)
 800131c:	0028      	movs	r0, r5
 800131e:	445a      	add	r2, fp
 8001320:	4643      	mov	r3, r8
 8001322:	4095      	lsls	r5, r2
 8001324:	4093      	lsls	r3, r2
 8001326:	40c8      	lsrs	r0, r1
 8001328:	1e6a      	subs	r2, r5, #1
 800132a:	4195      	sbcs	r5, r2
 800132c:	4644      	mov	r4, r8
 800132e:	4303      	orrs	r3, r0
 8001330:	432b      	orrs	r3, r5
 8001332:	40cc      	lsrs	r4, r1
 8001334:	075a      	lsls	r2, r3, #29
 8001336:	d092      	beq.n	800125e <__aeabi_ddiv+0x45e>
 8001338:	220f      	movs	r2, #15
 800133a:	401a      	ands	r2, r3
 800133c:	2a04      	cmp	r2, #4
 800133e:	d188      	bne.n	8001252 <__aeabi_ddiv+0x452>
 8001340:	e78d      	b.n	800125e <__aeabi_ddiv+0x45e>
 8001342:	0035      	movs	r5, r6
 8001344:	4281      	cmp	r1, r0
 8001346:	d000      	beq.n	800134a <__aeabi_ddiv+0x54a>
 8001348:	e74b      	b.n	80011e2 <__aeabi_ddiv+0x3e2>
 800134a:	9a00      	ldr	r2, [sp, #0]
 800134c:	4293      	cmp	r3, r2
 800134e:	d000      	beq.n	8001352 <__aeabi_ddiv+0x552>
 8001350:	e747      	b.n	80011e2 <__aeabi_ddiv+0x3e2>
 8001352:	e618      	b.n	8000f86 <__aeabi_ddiv+0x186>
 8001354:	42ae      	cmp	r6, r5
 8001356:	d99c      	bls.n	8001292 <__aeabi_ddiv+0x492>
 8001358:	2302      	movs	r3, #2
 800135a:	425b      	negs	r3, r3
 800135c:	469c      	mov	ip, r3
 800135e:	9b00      	ldr	r3, [sp, #0]
 8001360:	44e0      	add	r8, ip
 8001362:	469c      	mov	ip, r3
 8001364:	4465      	add	r5, ip
 8001366:	429d      	cmp	r5, r3
 8001368:	419b      	sbcs	r3, r3
 800136a:	425b      	negs	r3, r3
 800136c:	191b      	adds	r3, r3, r4
 800136e:	18c9      	adds	r1, r1, r3
 8001370:	e6e4      	b.n	800113c <__aeabi_ddiv+0x33c>
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <__aeabi_ddiv+0x5c8>)
 8001374:	445a      	add	r2, fp
 8001376:	2a00      	cmp	r2, #0
 8001378:	dc00      	bgt.n	800137c <__aeabi_ddiv+0x57c>
 800137a:	e744      	b.n	8001206 <__aeabi_ddiv+0x406>
 800137c:	2301      	movs	r3, #1
 800137e:	2500      	movs	r5, #0
 8001380:	4498      	add	r8, r3
 8001382:	e609      	b.n	8000f98 <__aeabi_ddiv+0x198>
 8001384:	0765      	lsls	r5, r4, #29
 8001386:	0264      	lsls	r4, r4, #9
 8001388:	0b24      	lsrs	r4, r4, #12
 800138a:	08db      	lsrs	r3, r3, #3
 800138c:	431d      	orrs	r5, r3
 800138e:	2300      	movs	r3, #0
 8001390:	e590      	b.n	8000eb4 <__aeabi_ddiv+0xb4>
 8001392:	9e00      	ldr	r6, [sp, #0]
 8001394:	3d02      	subs	r5, #2
 8001396:	0072      	lsls	r2, r6, #1
 8001398:	42b2      	cmp	r2, r6
 800139a:	41bf      	sbcs	r7, r7
 800139c:	427f      	negs	r7, r7
 800139e:	193c      	adds	r4, r7, r4
 80013a0:	1909      	adds	r1, r1, r4
 80013a2:	9200      	str	r2, [sp, #0]
 80013a4:	e7ce      	b.n	8001344 <__aeabi_ddiv+0x544>
 80013a6:	2480      	movs	r4, #128	; 0x80
 80013a8:	4643      	mov	r3, r8
 80013aa:	0324      	lsls	r4, r4, #12
 80013ac:	431c      	orrs	r4, r3
 80013ae:	0324      	lsls	r4, r4, #12
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <__aeabi_ddiv+0x5cc>)
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	e57e      	b.n	8000eb4 <__aeabi_ddiv+0xb4>
 80013b6:	9a00      	ldr	r2, [sp, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d3ea      	bcc.n	8001392 <__aeabi_ddiv+0x592>
 80013bc:	0035      	movs	r5, r6
 80013be:	e7c4      	b.n	800134a <__aeabi_ddiv+0x54a>
 80013c0:	0000043e 	.word	0x0000043e
 80013c4:	0000041e 	.word	0x0000041e
 80013c8:	000003ff 	.word	0x000003ff
 80013cc:	000007ff 	.word	0x000007ff

080013d0 <__aeabi_dmul>:
 80013d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d2:	4657      	mov	r7, sl
 80013d4:	464e      	mov	r6, r9
 80013d6:	4645      	mov	r5, r8
 80013d8:	46de      	mov	lr, fp
 80013da:	b5e0      	push	{r5, r6, r7, lr}
 80013dc:	4698      	mov	r8, r3
 80013de:	030c      	lsls	r4, r1, #12
 80013e0:	004b      	lsls	r3, r1, #1
 80013e2:	0006      	movs	r6, r0
 80013e4:	4692      	mov	sl, r2
 80013e6:	b087      	sub	sp, #28
 80013e8:	0b24      	lsrs	r4, r4, #12
 80013ea:	0d5b      	lsrs	r3, r3, #21
 80013ec:	0fcf      	lsrs	r7, r1, #31
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d06c      	beq.n	80014cc <__aeabi_dmul+0xfc>
 80013f2:	4add      	ldr	r2, [pc, #884]	; (8001768 <__aeabi_dmul+0x398>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d100      	bne.n	80013fa <__aeabi_dmul+0x2a>
 80013f8:	e086      	b.n	8001508 <__aeabi_dmul+0x138>
 80013fa:	0f42      	lsrs	r2, r0, #29
 80013fc:	00e4      	lsls	r4, r4, #3
 80013fe:	4314      	orrs	r4, r2
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	0412      	lsls	r2, r2, #16
 8001404:	4314      	orrs	r4, r2
 8001406:	4ad9      	ldr	r2, [pc, #868]	; (800176c <__aeabi_dmul+0x39c>)
 8001408:	00c5      	lsls	r5, r0, #3
 800140a:	4694      	mov	ip, r2
 800140c:	4463      	add	r3, ip
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	4699      	mov	r9, r3
 8001414:	469b      	mov	fp, r3
 8001416:	4643      	mov	r3, r8
 8001418:	4642      	mov	r2, r8
 800141a:	031e      	lsls	r6, r3, #12
 800141c:	0fd2      	lsrs	r2, r2, #31
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4650      	mov	r0, sl
 8001422:	4690      	mov	r8, r2
 8001424:	0b36      	lsrs	r6, r6, #12
 8001426:	0d5b      	lsrs	r3, r3, #21
 8001428:	d100      	bne.n	800142c <__aeabi_dmul+0x5c>
 800142a:	e078      	b.n	800151e <__aeabi_dmul+0x14e>
 800142c:	4ace      	ldr	r2, [pc, #824]	; (8001768 <__aeabi_dmul+0x398>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01d      	beq.n	800146e <__aeabi_dmul+0x9e>
 8001432:	49ce      	ldr	r1, [pc, #824]	; (800176c <__aeabi_dmul+0x39c>)
 8001434:	0f42      	lsrs	r2, r0, #29
 8001436:	468c      	mov	ip, r1
 8001438:	9900      	ldr	r1, [sp, #0]
 800143a:	4463      	add	r3, ip
 800143c:	00f6      	lsls	r6, r6, #3
 800143e:	468c      	mov	ip, r1
 8001440:	4316      	orrs	r6, r2
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	449c      	add	ip, r3
 8001446:	0412      	lsls	r2, r2, #16
 8001448:	4663      	mov	r3, ip
 800144a:	4316      	orrs	r6, r2
 800144c:	00c2      	lsls	r2, r0, #3
 800144e:	2000      	movs	r0, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	9900      	ldr	r1, [sp, #0]
 8001454:	4643      	mov	r3, r8
 8001456:	3101      	adds	r1, #1
 8001458:	468c      	mov	ip, r1
 800145a:	4649      	mov	r1, r9
 800145c:	407b      	eors	r3, r7
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	290f      	cmp	r1, #15
 8001462:	d900      	bls.n	8001466 <__aeabi_dmul+0x96>
 8001464:	e07e      	b.n	8001564 <__aeabi_dmul+0x194>
 8001466:	4bc2      	ldr	r3, [pc, #776]	; (8001770 <__aeabi_dmul+0x3a0>)
 8001468:	0089      	lsls	r1, r1, #2
 800146a:	5859      	ldr	r1, [r3, r1]
 800146c:	468f      	mov	pc, r1
 800146e:	4652      	mov	r2, sl
 8001470:	9b00      	ldr	r3, [sp, #0]
 8001472:	4332      	orrs	r2, r6
 8001474:	d000      	beq.n	8001478 <__aeabi_dmul+0xa8>
 8001476:	e156      	b.n	8001726 <__aeabi_dmul+0x356>
 8001478:	49bb      	ldr	r1, [pc, #748]	; (8001768 <__aeabi_dmul+0x398>)
 800147a:	2600      	movs	r6, #0
 800147c:	468c      	mov	ip, r1
 800147e:	4463      	add	r3, ip
 8001480:	4649      	mov	r1, r9
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2302      	movs	r3, #2
 8001486:	4319      	orrs	r1, r3
 8001488:	4689      	mov	r9, r1
 800148a:	2002      	movs	r0, #2
 800148c:	e7e1      	b.n	8001452 <__aeabi_dmul+0x82>
 800148e:	4643      	mov	r3, r8
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	0034      	movs	r4, r6
 8001494:	0015      	movs	r5, r2
 8001496:	4683      	mov	fp, r0
 8001498:	465b      	mov	r3, fp
 800149a:	2b02      	cmp	r3, #2
 800149c:	d05e      	beq.n	800155c <__aeabi_dmul+0x18c>
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dmul+0xd4>
 80014a2:	e1f3      	b.n	800188c <__aeabi_dmul+0x4bc>
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d000      	beq.n	80014aa <__aeabi_dmul+0xda>
 80014a8:	e118      	b.n	80016dc <__aeabi_dmul+0x30c>
 80014aa:	2200      	movs	r2, #0
 80014ac:	2400      	movs	r4, #0
 80014ae:	2500      	movs	r5, #0
 80014b0:	9b01      	ldr	r3, [sp, #4]
 80014b2:	0512      	lsls	r2, r2, #20
 80014b4:	4322      	orrs	r2, r4
 80014b6:	07db      	lsls	r3, r3, #31
 80014b8:	431a      	orrs	r2, r3
 80014ba:	0028      	movs	r0, r5
 80014bc:	0011      	movs	r1, r2
 80014be:	b007      	add	sp, #28
 80014c0:	bcf0      	pop	{r4, r5, r6, r7}
 80014c2:	46bb      	mov	fp, r7
 80014c4:	46b2      	mov	sl, r6
 80014c6:	46a9      	mov	r9, r5
 80014c8:	46a0      	mov	r8, r4
 80014ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014cc:	0025      	movs	r5, r4
 80014ce:	4305      	orrs	r5, r0
 80014d0:	d100      	bne.n	80014d4 <__aeabi_dmul+0x104>
 80014d2:	e141      	b.n	8001758 <__aeabi_dmul+0x388>
 80014d4:	2c00      	cmp	r4, #0
 80014d6:	d100      	bne.n	80014da <__aeabi_dmul+0x10a>
 80014d8:	e1ad      	b.n	8001836 <__aeabi_dmul+0x466>
 80014da:	0020      	movs	r0, r4
 80014dc:	f000 fe6c 	bl	80021b8 <__clzsi2>
 80014e0:	0001      	movs	r1, r0
 80014e2:	0002      	movs	r2, r0
 80014e4:	390b      	subs	r1, #11
 80014e6:	231d      	movs	r3, #29
 80014e8:	0010      	movs	r0, r2
 80014ea:	1a5b      	subs	r3, r3, r1
 80014ec:	0031      	movs	r1, r6
 80014ee:	0035      	movs	r5, r6
 80014f0:	3808      	subs	r0, #8
 80014f2:	4084      	lsls	r4, r0
 80014f4:	40d9      	lsrs	r1, r3
 80014f6:	4085      	lsls	r5, r0
 80014f8:	430c      	orrs	r4, r1
 80014fa:	489e      	ldr	r0, [pc, #632]	; (8001774 <__aeabi_dmul+0x3a4>)
 80014fc:	1a83      	subs	r3, r0, r2
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	4699      	mov	r9, r3
 8001504:	469b      	mov	fp, r3
 8001506:	e786      	b.n	8001416 <__aeabi_dmul+0x46>
 8001508:	0005      	movs	r5, r0
 800150a:	4325      	orrs	r5, r4
 800150c:	d000      	beq.n	8001510 <__aeabi_dmul+0x140>
 800150e:	e11c      	b.n	800174a <__aeabi_dmul+0x37a>
 8001510:	2208      	movs	r2, #8
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2302      	movs	r3, #2
 8001516:	2400      	movs	r4, #0
 8001518:	4691      	mov	r9, r2
 800151a:	469b      	mov	fp, r3
 800151c:	e77b      	b.n	8001416 <__aeabi_dmul+0x46>
 800151e:	4652      	mov	r2, sl
 8001520:	4332      	orrs	r2, r6
 8001522:	d100      	bne.n	8001526 <__aeabi_dmul+0x156>
 8001524:	e10a      	b.n	800173c <__aeabi_dmul+0x36c>
 8001526:	2e00      	cmp	r6, #0
 8001528:	d100      	bne.n	800152c <__aeabi_dmul+0x15c>
 800152a:	e176      	b.n	800181a <__aeabi_dmul+0x44a>
 800152c:	0030      	movs	r0, r6
 800152e:	f000 fe43 	bl	80021b8 <__clzsi2>
 8001532:	0002      	movs	r2, r0
 8001534:	3a0b      	subs	r2, #11
 8001536:	231d      	movs	r3, #29
 8001538:	0001      	movs	r1, r0
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	4652      	mov	r2, sl
 800153e:	3908      	subs	r1, #8
 8001540:	40da      	lsrs	r2, r3
 8001542:	408e      	lsls	r6, r1
 8001544:	4316      	orrs	r6, r2
 8001546:	4652      	mov	r2, sl
 8001548:	408a      	lsls	r2, r1
 800154a:	9b00      	ldr	r3, [sp, #0]
 800154c:	4989      	ldr	r1, [pc, #548]	; (8001774 <__aeabi_dmul+0x3a4>)
 800154e:	1a18      	subs	r0, r3, r0
 8001550:	0003      	movs	r3, r0
 8001552:	468c      	mov	ip, r1
 8001554:	4463      	add	r3, ip
 8001556:	2000      	movs	r0, #0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	e77a      	b.n	8001452 <__aeabi_dmul+0x82>
 800155c:	2400      	movs	r4, #0
 800155e:	2500      	movs	r5, #0
 8001560:	4a81      	ldr	r2, [pc, #516]	; (8001768 <__aeabi_dmul+0x398>)
 8001562:	e7a5      	b.n	80014b0 <__aeabi_dmul+0xe0>
 8001564:	0c2f      	lsrs	r7, r5, #16
 8001566:	042d      	lsls	r5, r5, #16
 8001568:	0c2d      	lsrs	r5, r5, #16
 800156a:	002b      	movs	r3, r5
 800156c:	0c11      	lsrs	r1, r2, #16
 800156e:	0412      	lsls	r2, r2, #16
 8001570:	0c12      	lsrs	r2, r2, #16
 8001572:	4353      	muls	r3, r2
 8001574:	4698      	mov	r8, r3
 8001576:	0013      	movs	r3, r2
 8001578:	0028      	movs	r0, r5
 800157a:	437b      	muls	r3, r7
 800157c:	4699      	mov	r9, r3
 800157e:	4348      	muls	r0, r1
 8001580:	4448      	add	r0, r9
 8001582:	4683      	mov	fp, r0
 8001584:	4640      	mov	r0, r8
 8001586:	000b      	movs	r3, r1
 8001588:	0c00      	lsrs	r0, r0, #16
 800158a:	4682      	mov	sl, r0
 800158c:	4658      	mov	r0, fp
 800158e:	437b      	muls	r3, r7
 8001590:	4450      	add	r0, sl
 8001592:	9302      	str	r3, [sp, #8]
 8001594:	4581      	cmp	r9, r0
 8001596:	d906      	bls.n	80015a6 <__aeabi_dmul+0x1d6>
 8001598:	469a      	mov	sl, r3
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	025b      	lsls	r3, r3, #9
 800159e:	4699      	mov	r9, r3
 80015a0:	44ca      	add	sl, r9
 80015a2:	4653      	mov	r3, sl
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	0c03      	lsrs	r3, r0, #16
 80015a8:	469b      	mov	fp, r3
 80015aa:	4643      	mov	r3, r8
 80015ac:	041b      	lsls	r3, r3, #16
 80015ae:	0400      	lsls	r0, r0, #16
 80015b0:	0c1b      	lsrs	r3, r3, #16
 80015b2:	4698      	mov	r8, r3
 80015b4:	0003      	movs	r3, r0
 80015b6:	4443      	add	r3, r8
 80015b8:	9304      	str	r3, [sp, #16]
 80015ba:	0c33      	lsrs	r3, r6, #16
 80015bc:	4699      	mov	r9, r3
 80015be:	002b      	movs	r3, r5
 80015c0:	0436      	lsls	r6, r6, #16
 80015c2:	0c36      	lsrs	r6, r6, #16
 80015c4:	4373      	muls	r3, r6
 80015c6:	4698      	mov	r8, r3
 80015c8:	0033      	movs	r3, r6
 80015ca:	437b      	muls	r3, r7
 80015cc:	469a      	mov	sl, r3
 80015ce:	464b      	mov	r3, r9
 80015d0:	435d      	muls	r5, r3
 80015d2:	435f      	muls	r7, r3
 80015d4:	4643      	mov	r3, r8
 80015d6:	4455      	add	r5, sl
 80015d8:	0c18      	lsrs	r0, r3, #16
 80015da:	1940      	adds	r0, r0, r5
 80015dc:	4582      	cmp	sl, r0
 80015de:	d903      	bls.n	80015e8 <__aeabi_dmul+0x218>
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	469a      	mov	sl, r3
 80015e6:	4457      	add	r7, sl
 80015e8:	0c05      	lsrs	r5, r0, #16
 80015ea:	19eb      	adds	r3, r5, r7
 80015ec:	9305      	str	r3, [sp, #20]
 80015ee:	4643      	mov	r3, r8
 80015f0:	041d      	lsls	r5, r3, #16
 80015f2:	0c2d      	lsrs	r5, r5, #16
 80015f4:	0400      	lsls	r0, r0, #16
 80015f6:	1940      	adds	r0, r0, r5
 80015f8:	0c25      	lsrs	r5, r4, #16
 80015fa:	0424      	lsls	r4, r4, #16
 80015fc:	0c24      	lsrs	r4, r4, #16
 80015fe:	0027      	movs	r7, r4
 8001600:	4357      	muls	r7, r2
 8001602:	436a      	muls	r2, r5
 8001604:	4690      	mov	r8, r2
 8001606:	002a      	movs	r2, r5
 8001608:	0c3b      	lsrs	r3, r7, #16
 800160a:	469a      	mov	sl, r3
 800160c:	434a      	muls	r2, r1
 800160e:	4361      	muls	r1, r4
 8001610:	4441      	add	r1, r8
 8001612:	4451      	add	r1, sl
 8001614:	4483      	add	fp, r0
 8001616:	4588      	cmp	r8, r1
 8001618:	d903      	bls.n	8001622 <__aeabi_dmul+0x252>
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	025b      	lsls	r3, r3, #9
 800161e:	4698      	mov	r8, r3
 8001620:	4442      	add	r2, r8
 8001622:	043f      	lsls	r7, r7, #16
 8001624:	0c0b      	lsrs	r3, r1, #16
 8001626:	0c3f      	lsrs	r7, r7, #16
 8001628:	0409      	lsls	r1, r1, #16
 800162a:	19c9      	adds	r1, r1, r7
 800162c:	0027      	movs	r7, r4
 800162e:	4698      	mov	r8, r3
 8001630:	464b      	mov	r3, r9
 8001632:	4377      	muls	r7, r6
 8001634:	435c      	muls	r4, r3
 8001636:	436e      	muls	r6, r5
 8001638:	435d      	muls	r5, r3
 800163a:	0c3b      	lsrs	r3, r7, #16
 800163c:	4699      	mov	r9, r3
 800163e:	19a4      	adds	r4, r4, r6
 8001640:	444c      	add	r4, r9
 8001642:	4442      	add	r2, r8
 8001644:	9503      	str	r5, [sp, #12]
 8001646:	42a6      	cmp	r6, r4
 8001648:	d904      	bls.n	8001654 <__aeabi_dmul+0x284>
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	4698      	mov	r8, r3
 8001650:	4445      	add	r5, r8
 8001652:	9503      	str	r5, [sp, #12]
 8001654:	9b02      	ldr	r3, [sp, #8]
 8001656:	043f      	lsls	r7, r7, #16
 8001658:	445b      	add	r3, fp
 800165a:	001e      	movs	r6, r3
 800165c:	4283      	cmp	r3, r0
 800165e:	4180      	sbcs	r0, r0
 8001660:	0423      	lsls	r3, r4, #16
 8001662:	4698      	mov	r8, r3
 8001664:	9b05      	ldr	r3, [sp, #20]
 8001666:	0c3f      	lsrs	r7, r7, #16
 8001668:	4447      	add	r7, r8
 800166a:	4698      	mov	r8, r3
 800166c:	1876      	adds	r6, r6, r1
 800166e:	428e      	cmp	r6, r1
 8001670:	4189      	sbcs	r1, r1
 8001672:	4447      	add	r7, r8
 8001674:	4240      	negs	r0, r0
 8001676:	183d      	adds	r5, r7, r0
 8001678:	46a8      	mov	r8, r5
 800167a:	4693      	mov	fp, r2
 800167c:	4249      	negs	r1, r1
 800167e:	468a      	mov	sl, r1
 8001680:	44c3      	add	fp, r8
 8001682:	429f      	cmp	r7, r3
 8001684:	41bf      	sbcs	r7, r7
 8001686:	4580      	cmp	r8, r0
 8001688:	4180      	sbcs	r0, r0
 800168a:	9b03      	ldr	r3, [sp, #12]
 800168c:	44da      	add	sl, fp
 800168e:	4698      	mov	r8, r3
 8001690:	4653      	mov	r3, sl
 8001692:	4240      	negs	r0, r0
 8001694:	427f      	negs	r7, r7
 8001696:	4307      	orrs	r7, r0
 8001698:	0c24      	lsrs	r4, r4, #16
 800169a:	4593      	cmp	fp, r2
 800169c:	4192      	sbcs	r2, r2
 800169e:	458a      	cmp	sl, r1
 80016a0:	4189      	sbcs	r1, r1
 80016a2:	193f      	adds	r7, r7, r4
 80016a4:	0ddc      	lsrs	r4, r3, #23
 80016a6:	9b04      	ldr	r3, [sp, #16]
 80016a8:	0275      	lsls	r5, r6, #9
 80016aa:	431d      	orrs	r5, r3
 80016ac:	1e68      	subs	r0, r5, #1
 80016ae:	4185      	sbcs	r5, r0
 80016b0:	4653      	mov	r3, sl
 80016b2:	4252      	negs	r2, r2
 80016b4:	4249      	negs	r1, r1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	18bf      	adds	r7, r7, r2
 80016ba:	4447      	add	r7, r8
 80016bc:	0df6      	lsrs	r6, r6, #23
 80016be:	027f      	lsls	r7, r7, #9
 80016c0:	4335      	orrs	r5, r6
 80016c2:	025a      	lsls	r2, r3, #9
 80016c4:	433c      	orrs	r4, r7
 80016c6:	4315      	orrs	r5, r2
 80016c8:	01fb      	lsls	r3, r7, #7
 80016ca:	d400      	bmi.n	80016ce <__aeabi_dmul+0x2fe>
 80016cc:	e0c1      	b.n	8001852 <__aeabi_dmul+0x482>
 80016ce:	2101      	movs	r1, #1
 80016d0:	086a      	lsrs	r2, r5, #1
 80016d2:	400d      	ands	r5, r1
 80016d4:	4315      	orrs	r5, r2
 80016d6:	07e2      	lsls	r2, r4, #31
 80016d8:	4315      	orrs	r5, r2
 80016da:	0864      	lsrs	r4, r4, #1
 80016dc:	4926      	ldr	r1, [pc, #152]	; (8001778 <__aeabi_dmul+0x3a8>)
 80016de:	4461      	add	r1, ip
 80016e0:	2900      	cmp	r1, #0
 80016e2:	dd56      	ble.n	8001792 <__aeabi_dmul+0x3c2>
 80016e4:	076b      	lsls	r3, r5, #29
 80016e6:	d009      	beq.n	80016fc <__aeabi_dmul+0x32c>
 80016e8:	220f      	movs	r2, #15
 80016ea:	402a      	ands	r2, r5
 80016ec:	2a04      	cmp	r2, #4
 80016ee:	d005      	beq.n	80016fc <__aeabi_dmul+0x32c>
 80016f0:	1d2a      	adds	r2, r5, #4
 80016f2:	42aa      	cmp	r2, r5
 80016f4:	41ad      	sbcs	r5, r5
 80016f6:	426d      	negs	r5, r5
 80016f8:	1964      	adds	r4, r4, r5
 80016fa:	0015      	movs	r5, r2
 80016fc:	01e3      	lsls	r3, r4, #7
 80016fe:	d504      	bpl.n	800170a <__aeabi_dmul+0x33a>
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	4a1e      	ldr	r2, [pc, #120]	; (800177c <__aeabi_dmul+0x3ac>)
 8001704:	00c9      	lsls	r1, r1, #3
 8001706:	4014      	ands	r4, r2
 8001708:	4461      	add	r1, ip
 800170a:	4a1d      	ldr	r2, [pc, #116]	; (8001780 <__aeabi_dmul+0x3b0>)
 800170c:	4291      	cmp	r1, r2
 800170e:	dd00      	ble.n	8001712 <__aeabi_dmul+0x342>
 8001710:	e724      	b.n	800155c <__aeabi_dmul+0x18c>
 8001712:	0762      	lsls	r2, r4, #29
 8001714:	08ed      	lsrs	r5, r5, #3
 8001716:	0264      	lsls	r4, r4, #9
 8001718:	0549      	lsls	r1, r1, #21
 800171a:	4315      	orrs	r5, r2
 800171c:	0b24      	lsrs	r4, r4, #12
 800171e:	0d4a      	lsrs	r2, r1, #21
 8001720:	e6c6      	b.n	80014b0 <__aeabi_dmul+0xe0>
 8001722:	9701      	str	r7, [sp, #4]
 8001724:	e6b8      	b.n	8001498 <__aeabi_dmul+0xc8>
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <__aeabi_dmul+0x398>)
 8001728:	2003      	movs	r0, #3
 800172a:	4694      	mov	ip, r2
 800172c:	4463      	add	r3, ip
 800172e:	464a      	mov	r2, r9
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2303      	movs	r3, #3
 8001734:	431a      	orrs	r2, r3
 8001736:	4691      	mov	r9, r2
 8001738:	4652      	mov	r2, sl
 800173a:	e68a      	b.n	8001452 <__aeabi_dmul+0x82>
 800173c:	4649      	mov	r1, r9
 800173e:	2301      	movs	r3, #1
 8001740:	4319      	orrs	r1, r3
 8001742:	4689      	mov	r9, r1
 8001744:	2600      	movs	r6, #0
 8001746:	2001      	movs	r0, #1
 8001748:	e683      	b.n	8001452 <__aeabi_dmul+0x82>
 800174a:	220c      	movs	r2, #12
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2303      	movs	r3, #3
 8001750:	0005      	movs	r5, r0
 8001752:	4691      	mov	r9, r2
 8001754:	469b      	mov	fp, r3
 8001756:	e65e      	b.n	8001416 <__aeabi_dmul+0x46>
 8001758:	2304      	movs	r3, #4
 800175a:	4699      	mov	r9, r3
 800175c:	2300      	movs	r3, #0
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	2400      	movs	r4, #0
 8001764:	469b      	mov	fp, r3
 8001766:	e656      	b.n	8001416 <__aeabi_dmul+0x46>
 8001768:	000007ff 	.word	0x000007ff
 800176c:	fffffc01 	.word	0xfffffc01
 8001770:	08007c34 	.word	0x08007c34
 8001774:	fffffc0d 	.word	0xfffffc0d
 8001778:	000003ff 	.word	0x000003ff
 800177c:	feffffff 	.word	0xfeffffff
 8001780:	000007fe 	.word	0x000007fe
 8001784:	2300      	movs	r3, #0
 8001786:	2480      	movs	r4, #128	; 0x80
 8001788:	2500      	movs	r5, #0
 800178a:	4a44      	ldr	r2, [pc, #272]	; (800189c <__aeabi_dmul+0x4cc>)
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	0324      	lsls	r4, r4, #12
 8001790:	e68e      	b.n	80014b0 <__aeabi_dmul+0xe0>
 8001792:	2001      	movs	r0, #1
 8001794:	1a40      	subs	r0, r0, r1
 8001796:	2838      	cmp	r0, #56	; 0x38
 8001798:	dd00      	ble.n	800179c <__aeabi_dmul+0x3cc>
 800179a:	e686      	b.n	80014aa <__aeabi_dmul+0xda>
 800179c:	281f      	cmp	r0, #31
 800179e:	dd5b      	ble.n	8001858 <__aeabi_dmul+0x488>
 80017a0:	221f      	movs	r2, #31
 80017a2:	0023      	movs	r3, r4
 80017a4:	4252      	negs	r2, r2
 80017a6:	1a51      	subs	r1, r2, r1
 80017a8:	40cb      	lsrs	r3, r1
 80017aa:	0019      	movs	r1, r3
 80017ac:	2820      	cmp	r0, #32
 80017ae:	d003      	beq.n	80017b8 <__aeabi_dmul+0x3e8>
 80017b0:	4a3b      	ldr	r2, [pc, #236]	; (80018a0 <__aeabi_dmul+0x4d0>)
 80017b2:	4462      	add	r2, ip
 80017b4:	4094      	lsls	r4, r2
 80017b6:	4325      	orrs	r5, r4
 80017b8:	1e6a      	subs	r2, r5, #1
 80017ba:	4195      	sbcs	r5, r2
 80017bc:	002a      	movs	r2, r5
 80017be:	430a      	orrs	r2, r1
 80017c0:	2107      	movs	r1, #7
 80017c2:	000d      	movs	r5, r1
 80017c4:	2400      	movs	r4, #0
 80017c6:	4015      	ands	r5, r2
 80017c8:	4211      	tst	r1, r2
 80017ca:	d05b      	beq.n	8001884 <__aeabi_dmul+0x4b4>
 80017cc:	210f      	movs	r1, #15
 80017ce:	2400      	movs	r4, #0
 80017d0:	4011      	ands	r1, r2
 80017d2:	2904      	cmp	r1, #4
 80017d4:	d053      	beq.n	800187e <__aeabi_dmul+0x4ae>
 80017d6:	1d11      	adds	r1, r2, #4
 80017d8:	4291      	cmp	r1, r2
 80017da:	4192      	sbcs	r2, r2
 80017dc:	4252      	negs	r2, r2
 80017de:	18a4      	adds	r4, r4, r2
 80017e0:	000a      	movs	r2, r1
 80017e2:	0223      	lsls	r3, r4, #8
 80017e4:	d54b      	bpl.n	800187e <__aeabi_dmul+0x4ae>
 80017e6:	2201      	movs	r2, #1
 80017e8:	2400      	movs	r4, #0
 80017ea:	2500      	movs	r5, #0
 80017ec:	e660      	b.n	80014b0 <__aeabi_dmul+0xe0>
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	031b      	lsls	r3, r3, #12
 80017f2:	421c      	tst	r4, r3
 80017f4:	d009      	beq.n	800180a <__aeabi_dmul+0x43a>
 80017f6:	421e      	tst	r6, r3
 80017f8:	d107      	bne.n	800180a <__aeabi_dmul+0x43a>
 80017fa:	4333      	orrs	r3, r6
 80017fc:	031c      	lsls	r4, r3, #12
 80017fe:	4643      	mov	r3, r8
 8001800:	0015      	movs	r5, r2
 8001802:	0b24      	lsrs	r4, r4, #12
 8001804:	4a25      	ldr	r2, [pc, #148]	; (800189c <__aeabi_dmul+0x4cc>)
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	e652      	b.n	80014b0 <__aeabi_dmul+0xe0>
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	0312      	lsls	r2, r2, #12
 800180e:	4314      	orrs	r4, r2
 8001810:	0324      	lsls	r4, r4, #12
 8001812:	4a22      	ldr	r2, [pc, #136]	; (800189c <__aeabi_dmul+0x4cc>)
 8001814:	0b24      	lsrs	r4, r4, #12
 8001816:	9701      	str	r7, [sp, #4]
 8001818:	e64a      	b.n	80014b0 <__aeabi_dmul+0xe0>
 800181a:	f000 fccd 	bl	80021b8 <__clzsi2>
 800181e:	0003      	movs	r3, r0
 8001820:	001a      	movs	r2, r3
 8001822:	3215      	adds	r2, #21
 8001824:	3020      	adds	r0, #32
 8001826:	2a1c      	cmp	r2, #28
 8001828:	dc00      	bgt.n	800182c <__aeabi_dmul+0x45c>
 800182a:	e684      	b.n	8001536 <__aeabi_dmul+0x166>
 800182c:	4656      	mov	r6, sl
 800182e:	3b08      	subs	r3, #8
 8001830:	2200      	movs	r2, #0
 8001832:	409e      	lsls	r6, r3
 8001834:	e689      	b.n	800154a <__aeabi_dmul+0x17a>
 8001836:	f000 fcbf 	bl	80021b8 <__clzsi2>
 800183a:	0001      	movs	r1, r0
 800183c:	0002      	movs	r2, r0
 800183e:	3115      	adds	r1, #21
 8001840:	3220      	adds	r2, #32
 8001842:	291c      	cmp	r1, #28
 8001844:	dc00      	bgt.n	8001848 <__aeabi_dmul+0x478>
 8001846:	e64e      	b.n	80014e6 <__aeabi_dmul+0x116>
 8001848:	0034      	movs	r4, r6
 800184a:	3808      	subs	r0, #8
 800184c:	2500      	movs	r5, #0
 800184e:	4084      	lsls	r4, r0
 8001850:	e653      	b.n	80014fa <__aeabi_dmul+0x12a>
 8001852:	9b00      	ldr	r3, [sp, #0]
 8001854:	469c      	mov	ip, r3
 8001856:	e741      	b.n	80016dc <__aeabi_dmul+0x30c>
 8001858:	4912      	ldr	r1, [pc, #72]	; (80018a4 <__aeabi_dmul+0x4d4>)
 800185a:	0022      	movs	r2, r4
 800185c:	4461      	add	r1, ip
 800185e:	002e      	movs	r6, r5
 8001860:	408d      	lsls	r5, r1
 8001862:	408a      	lsls	r2, r1
 8001864:	40c6      	lsrs	r6, r0
 8001866:	1e69      	subs	r1, r5, #1
 8001868:	418d      	sbcs	r5, r1
 800186a:	4332      	orrs	r2, r6
 800186c:	432a      	orrs	r2, r5
 800186e:	40c4      	lsrs	r4, r0
 8001870:	0753      	lsls	r3, r2, #29
 8001872:	d0b6      	beq.n	80017e2 <__aeabi_dmul+0x412>
 8001874:	210f      	movs	r1, #15
 8001876:	4011      	ands	r1, r2
 8001878:	2904      	cmp	r1, #4
 800187a:	d1ac      	bne.n	80017d6 <__aeabi_dmul+0x406>
 800187c:	e7b1      	b.n	80017e2 <__aeabi_dmul+0x412>
 800187e:	0765      	lsls	r5, r4, #29
 8001880:	0264      	lsls	r4, r4, #9
 8001882:	0b24      	lsrs	r4, r4, #12
 8001884:	08d2      	lsrs	r2, r2, #3
 8001886:	4315      	orrs	r5, r2
 8001888:	2200      	movs	r2, #0
 800188a:	e611      	b.n	80014b0 <__aeabi_dmul+0xe0>
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	0312      	lsls	r2, r2, #12
 8001890:	4314      	orrs	r4, r2
 8001892:	0324      	lsls	r4, r4, #12
 8001894:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_dmul+0x4cc>)
 8001896:	0b24      	lsrs	r4, r4, #12
 8001898:	e60a      	b.n	80014b0 <__aeabi_dmul+0xe0>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	0000043e 	.word	0x0000043e
 80018a4:	0000041e 	.word	0x0000041e

080018a8 <__aeabi_dsub>:
 80018a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018aa:	4657      	mov	r7, sl
 80018ac:	464e      	mov	r6, r9
 80018ae:	4645      	mov	r5, r8
 80018b0:	46de      	mov	lr, fp
 80018b2:	0004      	movs	r4, r0
 80018b4:	b5e0      	push	{r5, r6, r7, lr}
 80018b6:	001f      	movs	r7, r3
 80018b8:	0010      	movs	r0, r2
 80018ba:	030b      	lsls	r3, r1, #12
 80018bc:	0f62      	lsrs	r2, r4, #29
 80018be:	004e      	lsls	r6, r1, #1
 80018c0:	0fcd      	lsrs	r5, r1, #31
 80018c2:	0a5b      	lsrs	r3, r3, #9
 80018c4:	0339      	lsls	r1, r7, #12
 80018c6:	4313      	orrs	r3, r2
 80018c8:	0a49      	lsrs	r1, r1, #9
 80018ca:	00e2      	lsls	r2, r4, #3
 80018cc:	0f44      	lsrs	r4, r0, #29
 80018ce:	4321      	orrs	r1, r4
 80018d0:	4cc2      	ldr	r4, [pc, #776]	; (8001bdc <__aeabi_dsub+0x334>)
 80018d2:	4691      	mov	r9, r2
 80018d4:	4692      	mov	sl, r2
 80018d6:	00c0      	lsls	r0, r0, #3
 80018d8:	007a      	lsls	r2, r7, #1
 80018da:	4680      	mov	r8, r0
 80018dc:	0d76      	lsrs	r6, r6, #21
 80018de:	0d52      	lsrs	r2, r2, #21
 80018e0:	0fff      	lsrs	r7, r7, #31
 80018e2:	42a2      	cmp	r2, r4
 80018e4:	d100      	bne.n	80018e8 <__aeabi_dsub+0x40>
 80018e6:	e0b4      	b.n	8001a52 <__aeabi_dsub+0x1aa>
 80018e8:	2401      	movs	r4, #1
 80018ea:	4067      	eors	r7, r4
 80018ec:	46bb      	mov	fp, r7
 80018ee:	42bd      	cmp	r5, r7
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dsub+0x4c>
 80018f2:	e088      	b.n	8001a06 <__aeabi_dsub+0x15e>
 80018f4:	1ab4      	subs	r4, r6, r2
 80018f6:	46a4      	mov	ip, r4
 80018f8:	2c00      	cmp	r4, #0
 80018fa:	dc00      	bgt.n	80018fe <__aeabi_dsub+0x56>
 80018fc:	e0b2      	b.n	8001a64 <__aeabi_dsub+0x1bc>
 80018fe:	2a00      	cmp	r2, #0
 8001900:	d100      	bne.n	8001904 <__aeabi_dsub+0x5c>
 8001902:	e0c5      	b.n	8001a90 <__aeabi_dsub+0x1e8>
 8001904:	4ab5      	ldr	r2, [pc, #724]	; (8001bdc <__aeabi_dsub+0x334>)
 8001906:	4296      	cmp	r6, r2
 8001908:	d100      	bne.n	800190c <__aeabi_dsub+0x64>
 800190a:	e28b      	b.n	8001e24 <__aeabi_dsub+0x57c>
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	0412      	lsls	r2, r2, #16
 8001910:	4311      	orrs	r1, r2
 8001912:	4662      	mov	r2, ip
 8001914:	2a38      	cmp	r2, #56	; 0x38
 8001916:	dd00      	ble.n	800191a <__aeabi_dsub+0x72>
 8001918:	e1a1      	b.n	8001c5e <__aeabi_dsub+0x3b6>
 800191a:	2a1f      	cmp	r2, #31
 800191c:	dd00      	ble.n	8001920 <__aeabi_dsub+0x78>
 800191e:	e216      	b.n	8001d4e <__aeabi_dsub+0x4a6>
 8001920:	2720      	movs	r7, #32
 8001922:	000c      	movs	r4, r1
 8001924:	1abf      	subs	r7, r7, r2
 8001926:	40bc      	lsls	r4, r7
 8001928:	0002      	movs	r2, r0
 800192a:	46a0      	mov	r8, r4
 800192c:	4664      	mov	r4, ip
 800192e:	40b8      	lsls	r0, r7
 8001930:	40e2      	lsrs	r2, r4
 8001932:	4644      	mov	r4, r8
 8001934:	4314      	orrs	r4, r2
 8001936:	0002      	movs	r2, r0
 8001938:	1e50      	subs	r0, r2, #1
 800193a:	4182      	sbcs	r2, r0
 800193c:	4660      	mov	r0, ip
 800193e:	40c1      	lsrs	r1, r0
 8001940:	4322      	orrs	r2, r4
 8001942:	1a5b      	subs	r3, r3, r1
 8001944:	4649      	mov	r1, r9
 8001946:	1a8c      	subs	r4, r1, r2
 8001948:	45a1      	cmp	r9, r4
 800194a:	4192      	sbcs	r2, r2
 800194c:	4252      	negs	r2, r2
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	4698      	mov	r8, r3
 8001952:	4643      	mov	r3, r8
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	d400      	bmi.n	800195a <__aeabi_dsub+0xb2>
 8001958:	e117      	b.n	8001b8a <__aeabi_dsub+0x2e2>
 800195a:	4643      	mov	r3, r8
 800195c:	025b      	lsls	r3, r3, #9
 800195e:	0a5b      	lsrs	r3, r3, #9
 8001960:	4698      	mov	r8, r3
 8001962:	4643      	mov	r3, r8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d100      	bne.n	800196a <__aeabi_dsub+0xc2>
 8001968:	e16c      	b.n	8001c44 <__aeabi_dsub+0x39c>
 800196a:	4640      	mov	r0, r8
 800196c:	f000 fc24 	bl	80021b8 <__clzsi2>
 8001970:	0002      	movs	r2, r0
 8001972:	3a08      	subs	r2, #8
 8001974:	2120      	movs	r1, #32
 8001976:	0020      	movs	r0, r4
 8001978:	4643      	mov	r3, r8
 800197a:	1a89      	subs	r1, r1, r2
 800197c:	4093      	lsls	r3, r2
 800197e:	40c8      	lsrs	r0, r1
 8001980:	4094      	lsls	r4, r2
 8001982:	4303      	orrs	r3, r0
 8001984:	4296      	cmp	r6, r2
 8001986:	dd00      	ble.n	800198a <__aeabi_dsub+0xe2>
 8001988:	e157      	b.n	8001c3a <__aeabi_dsub+0x392>
 800198a:	1b96      	subs	r6, r2, r6
 800198c:	1c71      	adds	r1, r6, #1
 800198e:	291f      	cmp	r1, #31
 8001990:	dd00      	ble.n	8001994 <__aeabi_dsub+0xec>
 8001992:	e1cb      	b.n	8001d2c <__aeabi_dsub+0x484>
 8001994:	2220      	movs	r2, #32
 8001996:	0018      	movs	r0, r3
 8001998:	0026      	movs	r6, r4
 800199a:	1a52      	subs	r2, r2, r1
 800199c:	4094      	lsls	r4, r2
 800199e:	4090      	lsls	r0, r2
 80019a0:	40ce      	lsrs	r6, r1
 80019a2:	40cb      	lsrs	r3, r1
 80019a4:	1e62      	subs	r2, r4, #1
 80019a6:	4194      	sbcs	r4, r2
 80019a8:	4330      	orrs	r0, r6
 80019aa:	4698      	mov	r8, r3
 80019ac:	2600      	movs	r6, #0
 80019ae:	4304      	orrs	r4, r0
 80019b0:	0763      	lsls	r3, r4, #29
 80019b2:	d009      	beq.n	80019c8 <__aeabi_dsub+0x120>
 80019b4:	230f      	movs	r3, #15
 80019b6:	4023      	ands	r3, r4
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d005      	beq.n	80019c8 <__aeabi_dsub+0x120>
 80019bc:	1d23      	adds	r3, r4, #4
 80019be:	42a3      	cmp	r3, r4
 80019c0:	41a4      	sbcs	r4, r4
 80019c2:	4264      	negs	r4, r4
 80019c4:	44a0      	add	r8, r4
 80019c6:	001c      	movs	r4, r3
 80019c8:	4643      	mov	r3, r8
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	d400      	bmi.n	80019d0 <__aeabi_dsub+0x128>
 80019ce:	e0df      	b.n	8001b90 <__aeabi_dsub+0x2e8>
 80019d0:	4b82      	ldr	r3, [pc, #520]	; (8001bdc <__aeabi_dsub+0x334>)
 80019d2:	3601      	adds	r6, #1
 80019d4:	429e      	cmp	r6, r3
 80019d6:	d100      	bne.n	80019da <__aeabi_dsub+0x132>
 80019d8:	e0fb      	b.n	8001bd2 <__aeabi_dsub+0x32a>
 80019da:	4642      	mov	r2, r8
 80019dc:	4b80      	ldr	r3, [pc, #512]	; (8001be0 <__aeabi_dsub+0x338>)
 80019de:	08e4      	lsrs	r4, r4, #3
 80019e0:	401a      	ands	r2, r3
 80019e2:	0013      	movs	r3, r2
 80019e4:	0571      	lsls	r1, r6, #21
 80019e6:	0752      	lsls	r2, r2, #29
 80019e8:	025b      	lsls	r3, r3, #9
 80019ea:	4322      	orrs	r2, r4
 80019ec:	0b1b      	lsrs	r3, r3, #12
 80019ee:	0d49      	lsrs	r1, r1, #21
 80019f0:	0509      	lsls	r1, r1, #20
 80019f2:	07ed      	lsls	r5, r5, #31
 80019f4:	4319      	orrs	r1, r3
 80019f6:	4329      	orrs	r1, r5
 80019f8:	0010      	movs	r0, r2
 80019fa:	bcf0      	pop	{r4, r5, r6, r7}
 80019fc:	46bb      	mov	fp, r7
 80019fe:	46b2      	mov	sl, r6
 8001a00:	46a9      	mov	r9, r5
 8001a02:	46a0      	mov	r8, r4
 8001a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a06:	1ab4      	subs	r4, r6, r2
 8001a08:	46a4      	mov	ip, r4
 8001a0a:	2c00      	cmp	r4, #0
 8001a0c:	dd58      	ble.n	8001ac0 <__aeabi_dsub+0x218>
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d100      	bne.n	8001a14 <__aeabi_dsub+0x16c>
 8001a12:	e09e      	b.n	8001b52 <__aeabi_dsub+0x2aa>
 8001a14:	4a71      	ldr	r2, [pc, #452]	; (8001bdc <__aeabi_dsub+0x334>)
 8001a16:	4296      	cmp	r6, r2
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x174>
 8001a1a:	e13b      	b.n	8001c94 <__aeabi_dsub+0x3ec>
 8001a1c:	2280      	movs	r2, #128	; 0x80
 8001a1e:	0412      	lsls	r2, r2, #16
 8001a20:	4311      	orrs	r1, r2
 8001a22:	4662      	mov	r2, ip
 8001a24:	2a38      	cmp	r2, #56	; 0x38
 8001a26:	dd00      	ble.n	8001a2a <__aeabi_dsub+0x182>
 8001a28:	e0c1      	b.n	8001bae <__aeabi_dsub+0x306>
 8001a2a:	2a1f      	cmp	r2, #31
 8001a2c:	dc00      	bgt.n	8001a30 <__aeabi_dsub+0x188>
 8001a2e:	e1bb      	b.n	8001da8 <__aeabi_dsub+0x500>
 8001a30:	000c      	movs	r4, r1
 8001a32:	3a20      	subs	r2, #32
 8001a34:	40d4      	lsrs	r4, r2
 8001a36:	0022      	movs	r2, r4
 8001a38:	4664      	mov	r4, ip
 8001a3a:	2c20      	cmp	r4, #32
 8001a3c:	d004      	beq.n	8001a48 <__aeabi_dsub+0x1a0>
 8001a3e:	2740      	movs	r7, #64	; 0x40
 8001a40:	1b3f      	subs	r7, r7, r4
 8001a42:	40b9      	lsls	r1, r7
 8001a44:	4308      	orrs	r0, r1
 8001a46:	4680      	mov	r8, r0
 8001a48:	4644      	mov	r4, r8
 8001a4a:	1e61      	subs	r1, r4, #1
 8001a4c:	418c      	sbcs	r4, r1
 8001a4e:	4314      	orrs	r4, r2
 8001a50:	e0b1      	b.n	8001bb6 <__aeabi_dsub+0x30e>
 8001a52:	000c      	movs	r4, r1
 8001a54:	4304      	orrs	r4, r0
 8001a56:	d02a      	beq.n	8001aae <__aeabi_dsub+0x206>
 8001a58:	46bb      	mov	fp, r7
 8001a5a:	42bd      	cmp	r5, r7
 8001a5c:	d02d      	beq.n	8001aba <__aeabi_dsub+0x212>
 8001a5e:	4c61      	ldr	r4, [pc, #388]	; (8001be4 <__aeabi_dsub+0x33c>)
 8001a60:	46a4      	mov	ip, r4
 8001a62:	44b4      	add	ip, r6
 8001a64:	4664      	mov	r4, ip
 8001a66:	2c00      	cmp	r4, #0
 8001a68:	d05c      	beq.n	8001b24 <__aeabi_dsub+0x27c>
 8001a6a:	1b94      	subs	r4, r2, r6
 8001a6c:	46a4      	mov	ip, r4
 8001a6e:	2e00      	cmp	r6, #0
 8001a70:	d000      	beq.n	8001a74 <__aeabi_dsub+0x1cc>
 8001a72:	e115      	b.n	8001ca0 <__aeabi_dsub+0x3f8>
 8001a74:	464d      	mov	r5, r9
 8001a76:	431d      	orrs	r5, r3
 8001a78:	d100      	bne.n	8001a7c <__aeabi_dsub+0x1d4>
 8001a7a:	e1c3      	b.n	8001e04 <__aeabi_dsub+0x55c>
 8001a7c:	1e65      	subs	r5, r4, #1
 8001a7e:	2c01      	cmp	r4, #1
 8001a80:	d100      	bne.n	8001a84 <__aeabi_dsub+0x1dc>
 8001a82:	e20c      	b.n	8001e9e <__aeabi_dsub+0x5f6>
 8001a84:	4e55      	ldr	r6, [pc, #340]	; (8001bdc <__aeabi_dsub+0x334>)
 8001a86:	42b4      	cmp	r4, r6
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0x1e4>
 8001a8a:	e1f8      	b.n	8001e7e <__aeabi_dsub+0x5d6>
 8001a8c:	46ac      	mov	ip, r5
 8001a8e:	e10e      	b.n	8001cae <__aeabi_dsub+0x406>
 8001a90:	000a      	movs	r2, r1
 8001a92:	4302      	orrs	r2, r0
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x1f0>
 8001a96:	e136      	b.n	8001d06 <__aeabi_dsub+0x45e>
 8001a98:	0022      	movs	r2, r4
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	2c01      	cmp	r4, #1
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dsub+0x1fa>
 8001aa0:	e1c6      	b.n	8001e30 <__aeabi_dsub+0x588>
 8001aa2:	4c4e      	ldr	r4, [pc, #312]	; (8001bdc <__aeabi_dsub+0x334>)
 8001aa4:	45a4      	cmp	ip, r4
 8001aa6:	d100      	bne.n	8001aaa <__aeabi_dsub+0x202>
 8001aa8:	e0f4      	b.n	8001c94 <__aeabi_dsub+0x3ec>
 8001aaa:	4694      	mov	ip, r2
 8001aac:	e731      	b.n	8001912 <__aeabi_dsub+0x6a>
 8001aae:	2401      	movs	r4, #1
 8001ab0:	4067      	eors	r7, r4
 8001ab2:	46bb      	mov	fp, r7
 8001ab4:	42bd      	cmp	r5, r7
 8001ab6:	d000      	beq.n	8001aba <__aeabi_dsub+0x212>
 8001ab8:	e71c      	b.n	80018f4 <__aeabi_dsub+0x4c>
 8001aba:	4c4a      	ldr	r4, [pc, #296]	; (8001be4 <__aeabi_dsub+0x33c>)
 8001abc:	46a4      	mov	ip, r4
 8001abe:	44b4      	add	ip, r6
 8001ac0:	4664      	mov	r4, ip
 8001ac2:	2c00      	cmp	r4, #0
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x220>
 8001ac6:	e0cf      	b.n	8001c68 <__aeabi_dsub+0x3c0>
 8001ac8:	1b94      	subs	r4, r2, r6
 8001aca:	46a4      	mov	ip, r4
 8001acc:	2e00      	cmp	r6, #0
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x22a>
 8001ad0:	e15c      	b.n	8001d8c <__aeabi_dsub+0x4e4>
 8001ad2:	4e42      	ldr	r6, [pc, #264]	; (8001bdc <__aeabi_dsub+0x334>)
 8001ad4:	42b2      	cmp	r2, r6
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dsub+0x232>
 8001ad8:	e1ec      	b.n	8001eb4 <__aeabi_dsub+0x60c>
 8001ada:	2680      	movs	r6, #128	; 0x80
 8001adc:	0436      	lsls	r6, r6, #16
 8001ade:	4333      	orrs	r3, r6
 8001ae0:	4664      	mov	r4, ip
 8001ae2:	2c38      	cmp	r4, #56	; 0x38
 8001ae4:	dd00      	ble.n	8001ae8 <__aeabi_dsub+0x240>
 8001ae6:	e1b3      	b.n	8001e50 <__aeabi_dsub+0x5a8>
 8001ae8:	2c1f      	cmp	r4, #31
 8001aea:	dd00      	ble.n	8001aee <__aeabi_dsub+0x246>
 8001aec:	e238      	b.n	8001f60 <__aeabi_dsub+0x6b8>
 8001aee:	2620      	movs	r6, #32
 8001af0:	1b36      	subs	r6, r6, r4
 8001af2:	001c      	movs	r4, r3
 8001af4:	40b4      	lsls	r4, r6
 8001af6:	464f      	mov	r7, r9
 8001af8:	46a0      	mov	r8, r4
 8001afa:	4664      	mov	r4, ip
 8001afc:	40e7      	lsrs	r7, r4
 8001afe:	4644      	mov	r4, r8
 8001b00:	433c      	orrs	r4, r7
 8001b02:	464f      	mov	r7, r9
 8001b04:	40b7      	lsls	r7, r6
 8001b06:	003e      	movs	r6, r7
 8001b08:	1e77      	subs	r7, r6, #1
 8001b0a:	41be      	sbcs	r6, r7
 8001b0c:	4334      	orrs	r4, r6
 8001b0e:	4666      	mov	r6, ip
 8001b10:	40f3      	lsrs	r3, r6
 8001b12:	18c9      	adds	r1, r1, r3
 8001b14:	1824      	adds	r4, r4, r0
 8001b16:	4284      	cmp	r4, r0
 8001b18:	419b      	sbcs	r3, r3
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	4698      	mov	r8, r3
 8001b1e:	0016      	movs	r6, r2
 8001b20:	4488      	add	r8, r1
 8001b22:	e04e      	b.n	8001bc2 <__aeabi_dsub+0x31a>
 8001b24:	4a30      	ldr	r2, [pc, #192]	; (8001be8 <__aeabi_dsub+0x340>)
 8001b26:	1c74      	adds	r4, r6, #1
 8001b28:	4214      	tst	r4, r2
 8001b2a:	d000      	beq.n	8001b2e <__aeabi_dsub+0x286>
 8001b2c:	e0d6      	b.n	8001cdc <__aeabi_dsub+0x434>
 8001b2e:	464a      	mov	r2, r9
 8001b30:	431a      	orrs	r2, r3
 8001b32:	2e00      	cmp	r6, #0
 8001b34:	d000      	beq.n	8001b38 <__aeabi_dsub+0x290>
 8001b36:	e15b      	b.n	8001df0 <__aeabi_dsub+0x548>
 8001b38:	2a00      	cmp	r2, #0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x296>
 8001b3c:	e1a5      	b.n	8001e8a <__aeabi_dsub+0x5e2>
 8001b3e:	000a      	movs	r2, r1
 8001b40:	4302      	orrs	r2, r0
 8001b42:	d000      	beq.n	8001b46 <__aeabi_dsub+0x29e>
 8001b44:	e1bb      	b.n	8001ebe <__aeabi_dsub+0x616>
 8001b46:	464a      	mov	r2, r9
 8001b48:	0759      	lsls	r1, r3, #29
 8001b4a:	08d2      	lsrs	r2, r2, #3
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	08db      	lsrs	r3, r3, #3
 8001b50:	e027      	b.n	8001ba2 <__aeabi_dsub+0x2fa>
 8001b52:	000a      	movs	r2, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dsub+0x2b2>
 8001b58:	e174      	b.n	8001e44 <__aeabi_dsub+0x59c>
 8001b5a:	0022      	movs	r2, r4
 8001b5c:	3a01      	subs	r2, #1
 8001b5e:	2c01      	cmp	r4, #1
 8001b60:	d005      	beq.n	8001b6e <__aeabi_dsub+0x2c6>
 8001b62:	4c1e      	ldr	r4, [pc, #120]	; (8001bdc <__aeabi_dsub+0x334>)
 8001b64:	45a4      	cmp	ip, r4
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x2c2>
 8001b68:	e094      	b.n	8001c94 <__aeabi_dsub+0x3ec>
 8001b6a:	4694      	mov	ip, r2
 8001b6c:	e759      	b.n	8001a22 <__aeabi_dsub+0x17a>
 8001b6e:	4448      	add	r0, r9
 8001b70:	4548      	cmp	r0, r9
 8001b72:	4192      	sbcs	r2, r2
 8001b74:	185b      	adds	r3, r3, r1
 8001b76:	4698      	mov	r8, r3
 8001b78:	0004      	movs	r4, r0
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	4490      	add	r8, r2
 8001b7e:	4643      	mov	r3, r8
 8001b80:	2602      	movs	r6, #2
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	d500      	bpl.n	8001b88 <__aeabi_dsub+0x2e0>
 8001b86:	e0c4      	b.n	8001d12 <__aeabi_dsub+0x46a>
 8001b88:	3e01      	subs	r6, #1
 8001b8a:	0763      	lsls	r3, r4, #29
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dsub+0x2e8>
 8001b8e:	e711      	b.n	80019b4 <__aeabi_dsub+0x10c>
 8001b90:	4643      	mov	r3, r8
 8001b92:	46b4      	mov	ip, r6
 8001b94:	0759      	lsls	r1, r3, #29
 8001b96:	08e2      	lsrs	r2, r4, #3
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	08db      	lsrs	r3, r3, #3
 8001b9c:	490f      	ldr	r1, [pc, #60]	; (8001bdc <__aeabi_dsub+0x334>)
 8001b9e:	458c      	cmp	ip, r1
 8001ba0:	d040      	beq.n	8001c24 <__aeabi_dsub+0x37c>
 8001ba2:	4661      	mov	r1, ip
 8001ba4:	031b      	lsls	r3, r3, #12
 8001ba6:	0549      	lsls	r1, r1, #21
 8001ba8:	0b1b      	lsrs	r3, r3, #12
 8001baa:	0d49      	lsrs	r1, r1, #21
 8001bac:	e720      	b.n	80019f0 <__aeabi_dsub+0x148>
 8001bae:	4301      	orrs	r1, r0
 8001bb0:	000c      	movs	r4, r1
 8001bb2:	1e61      	subs	r1, r4, #1
 8001bb4:	418c      	sbcs	r4, r1
 8001bb6:	444c      	add	r4, r9
 8001bb8:	454c      	cmp	r4, r9
 8001bba:	4192      	sbcs	r2, r2
 8001bbc:	4252      	negs	r2, r2
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	4498      	add	r8, r3
 8001bc2:	4643      	mov	r3, r8
 8001bc4:	021b      	lsls	r3, r3, #8
 8001bc6:	d5e0      	bpl.n	8001b8a <__aeabi_dsub+0x2e2>
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__aeabi_dsub+0x334>)
 8001bca:	3601      	adds	r6, #1
 8001bcc:	429e      	cmp	r6, r3
 8001bce:	d000      	beq.n	8001bd2 <__aeabi_dsub+0x32a>
 8001bd0:	e09f      	b.n	8001d12 <__aeabi_dsub+0x46a>
 8001bd2:	0031      	movs	r1, r6
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	e70a      	b.n	80019f0 <__aeabi_dsub+0x148>
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	000007ff 	.word	0x000007ff
 8001be0:	ff7fffff 	.word	0xff7fffff
 8001be4:	fffff801 	.word	0xfffff801
 8001be8:	000007fe 	.word	0x000007fe
 8001bec:	2a00      	cmp	r2, #0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x34a>
 8001bf0:	e160      	b.n	8001eb4 <__aeabi_dsub+0x60c>
 8001bf2:	000a      	movs	r2, r1
 8001bf4:	4302      	orrs	r2, r0
 8001bf6:	d04d      	beq.n	8001c94 <__aeabi_dsub+0x3ec>
 8001bf8:	464a      	mov	r2, r9
 8001bfa:	075c      	lsls	r4, r3, #29
 8001bfc:	08d2      	lsrs	r2, r2, #3
 8001bfe:	4322      	orrs	r2, r4
 8001c00:	2480      	movs	r4, #128	; 0x80
 8001c02:	08db      	lsrs	r3, r3, #3
 8001c04:	0324      	lsls	r4, r4, #12
 8001c06:	4223      	tst	r3, r4
 8001c08:	d007      	beq.n	8001c1a <__aeabi_dsub+0x372>
 8001c0a:	08ce      	lsrs	r6, r1, #3
 8001c0c:	4226      	tst	r6, r4
 8001c0e:	d104      	bne.n	8001c1a <__aeabi_dsub+0x372>
 8001c10:	465d      	mov	r5, fp
 8001c12:	0033      	movs	r3, r6
 8001c14:	08c2      	lsrs	r2, r0, #3
 8001c16:	0749      	lsls	r1, r1, #29
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	0f51      	lsrs	r1, r2, #29
 8001c1c:	00d2      	lsls	r2, r2, #3
 8001c1e:	08d2      	lsrs	r2, r2, #3
 8001c20:	0749      	lsls	r1, r1, #29
 8001c22:	430a      	orrs	r2, r1
 8001c24:	0011      	movs	r1, r2
 8001c26:	4319      	orrs	r1, r3
 8001c28:	d100      	bne.n	8001c2c <__aeabi_dsub+0x384>
 8001c2a:	e1c8      	b.n	8001fbe <__aeabi_dsub+0x716>
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0309      	lsls	r1, r1, #12
 8001c30:	430b      	orrs	r3, r1
 8001c32:	031b      	lsls	r3, r3, #12
 8001c34:	49d5      	ldr	r1, [pc, #852]	; (8001f8c <__aeabi_dsub+0x6e4>)
 8001c36:	0b1b      	lsrs	r3, r3, #12
 8001c38:	e6da      	b.n	80019f0 <__aeabi_dsub+0x148>
 8001c3a:	49d5      	ldr	r1, [pc, #852]	; (8001f90 <__aeabi_dsub+0x6e8>)
 8001c3c:	1ab6      	subs	r6, r6, r2
 8001c3e:	400b      	ands	r3, r1
 8001c40:	4698      	mov	r8, r3
 8001c42:	e6b5      	b.n	80019b0 <__aeabi_dsub+0x108>
 8001c44:	0020      	movs	r0, r4
 8001c46:	f000 fab7 	bl	80021b8 <__clzsi2>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	3218      	adds	r2, #24
 8001c4e:	2a1f      	cmp	r2, #31
 8001c50:	dc00      	bgt.n	8001c54 <__aeabi_dsub+0x3ac>
 8001c52:	e68f      	b.n	8001974 <__aeabi_dsub+0xcc>
 8001c54:	0023      	movs	r3, r4
 8001c56:	3808      	subs	r0, #8
 8001c58:	4083      	lsls	r3, r0
 8001c5a:	2400      	movs	r4, #0
 8001c5c:	e692      	b.n	8001984 <__aeabi_dsub+0xdc>
 8001c5e:	4308      	orrs	r0, r1
 8001c60:	0002      	movs	r2, r0
 8001c62:	1e50      	subs	r0, r2, #1
 8001c64:	4182      	sbcs	r2, r0
 8001c66:	e66d      	b.n	8001944 <__aeabi_dsub+0x9c>
 8001c68:	4cca      	ldr	r4, [pc, #808]	; (8001f94 <__aeabi_dsub+0x6ec>)
 8001c6a:	1c72      	adds	r2, r6, #1
 8001c6c:	4222      	tst	r2, r4
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x3ca>
 8001c70:	e0ad      	b.n	8001dce <__aeabi_dsub+0x526>
 8001c72:	464a      	mov	r2, r9
 8001c74:	431a      	orrs	r2, r3
 8001c76:	2e00      	cmp	r6, #0
 8001c78:	d1b8      	bne.n	8001bec <__aeabi_dsub+0x344>
 8001c7a:	2a00      	cmp	r2, #0
 8001c7c:	d100      	bne.n	8001c80 <__aeabi_dsub+0x3d8>
 8001c7e:	e158      	b.n	8001f32 <__aeabi_dsub+0x68a>
 8001c80:	000a      	movs	r2, r1
 8001c82:	4302      	orrs	r2, r0
 8001c84:	d000      	beq.n	8001c88 <__aeabi_dsub+0x3e0>
 8001c86:	e159      	b.n	8001f3c <__aeabi_dsub+0x694>
 8001c88:	464a      	mov	r2, r9
 8001c8a:	0759      	lsls	r1, r3, #29
 8001c8c:	08d2      	lsrs	r2, r2, #3
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	08db      	lsrs	r3, r3, #3
 8001c92:	e786      	b.n	8001ba2 <__aeabi_dsub+0x2fa>
 8001c94:	464a      	mov	r2, r9
 8001c96:	0759      	lsls	r1, r3, #29
 8001c98:	08d2      	lsrs	r2, r2, #3
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	e7c1      	b.n	8001c24 <__aeabi_dsub+0x37c>
 8001ca0:	4dba      	ldr	r5, [pc, #744]	; (8001f8c <__aeabi_dsub+0x6e4>)
 8001ca2:	42aa      	cmp	r2, r5
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x400>
 8001ca6:	e11e      	b.n	8001ee6 <__aeabi_dsub+0x63e>
 8001ca8:	2580      	movs	r5, #128	; 0x80
 8001caa:	042d      	lsls	r5, r5, #16
 8001cac:	432b      	orrs	r3, r5
 8001cae:	4664      	mov	r4, ip
 8001cb0:	2c38      	cmp	r4, #56	; 0x38
 8001cb2:	dc5d      	bgt.n	8001d70 <__aeabi_dsub+0x4c8>
 8001cb4:	2c1f      	cmp	r4, #31
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dsub+0x412>
 8001cb8:	e0d0      	b.n	8001e5c <__aeabi_dsub+0x5b4>
 8001cba:	2520      	movs	r5, #32
 8001cbc:	4667      	mov	r7, ip
 8001cbe:	1b2d      	subs	r5, r5, r4
 8001cc0:	464e      	mov	r6, r9
 8001cc2:	001c      	movs	r4, r3
 8001cc4:	40fe      	lsrs	r6, r7
 8001cc6:	40ac      	lsls	r4, r5
 8001cc8:	4334      	orrs	r4, r6
 8001cca:	464e      	mov	r6, r9
 8001ccc:	40ae      	lsls	r6, r5
 8001cce:	0035      	movs	r5, r6
 8001cd0:	40fb      	lsrs	r3, r7
 8001cd2:	1e6e      	subs	r6, r5, #1
 8001cd4:	41b5      	sbcs	r5, r6
 8001cd6:	1ac9      	subs	r1, r1, r3
 8001cd8:	432c      	orrs	r4, r5
 8001cda:	e04e      	b.n	8001d7a <__aeabi_dsub+0x4d2>
 8001cdc:	464a      	mov	r2, r9
 8001cde:	1a14      	subs	r4, r2, r0
 8001ce0:	45a1      	cmp	r9, r4
 8001ce2:	4192      	sbcs	r2, r2
 8001ce4:	4252      	negs	r2, r2
 8001ce6:	4690      	mov	r8, r2
 8001ce8:	1a5f      	subs	r7, r3, r1
 8001cea:	003a      	movs	r2, r7
 8001cec:	4647      	mov	r7, r8
 8001cee:	1bd2      	subs	r2, r2, r7
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	0212      	lsls	r2, r2, #8
 8001cf4:	d500      	bpl.n	8001cf8 <__aeabi_dsub+0x450>
 8001cf6:	e08b      	b.n	8001e10 <__aeabi_dsub+0x568>
 8001cf8:	4642      	mov	r2, r8
 8001cfa:	4322      	orrs	r2, r4
 8001cfc:	d000      	beq.n	8001d00 <__aeabi_dsub+0x458>
 8001cfe:	e630      	b.n	8001962 <__aeabi_dsub+0xba>
 8001d00:	2300      	movs	r3, #0
 8001d02:	2500      	movs	r5, #0
 8001d04:	e74d      	b.n	8001ba2 <__aeabi_dsub+0x2fa>
 8001d06:	464a      	mov	r2, r9
 8001d08:	0759      	lsls	r1, r3, #29
 8001d0a:	08d2      	lsrs	r2, r2, #3
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	e744      	b.n	8001b9c <__aeabi_dsub+0x2f4>
 8001d12:	4642      	mov	r2, r8
 8001d14:	4b9e      	ldr	r3, [pc, #632]	; (8001f90 <__aeabi_dsub+0x6e8>)
 8001d16:	0861      	lsrs	r1, r4, #1
 8001d18:	401a      	ands	r2, r3
 8001d1a:	0013      	movs	r3, r2
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4014      	ands	r4, r2
 8001d20:	430c      	orrs	r4, r1
 8001d22:	07da      	lsls	r2, r3, #31
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	4698      	mov	r8, r3
 8001d28:	4314      	orrs	r4, r2
 8001d2a:	e641      	b.n	80019b0 <__aeabi_dsub+0x108>
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	3e1f      	subs	r6, #31
 8001d30:	40f2      	lsrs	r2, r6
 8001d32:	0016      	movs	r6, r2
 8001d34:	2920      	cmp	r1, #32
 8001d36:	d003      	beq.n	8001d40 <__aeabi_dsub+0x498>
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	1a51      	subs	r1, r2, r1
 8001d3c:	408b      	lsls	r3, r1
 8001d3e:	431c      	orrs	r4, r3
 8001d40:	1e62      	subs	r2, r4, #1
 8001d42:	4194      	sbcs	r4, r2
 8001d44:	2300      	movs	r3, #0
 8001d46:	4334      	orrs	r4, r6
 8001d48:	4698      	mov	r8, r3
 8001d4a:	2600      	movs	r6, #0
 8001d4c:	e71d      	b.n	8001b8a <__aeabi_dsub+0x2e2>
 8001d4e:	000c      	movs	r4, r1
 8001d50:	3a20      	subs	r2, #32
 8001d52:	40d4      	lsrs	r4, r2
 8001d54:	0022      	movs	r2, r4
 8001d56:	4664      	mov	r4, ip
 8001d58:	2c20      	cmp	r4, #32
 8001d5a:	d004      	beq.n	8001d66 <__aeabi_dsub+0x4be>
 8001d5c:	2740      	movs	r7, #64	; 0x40
 8001d5e:	1b3f      	subs	r7, r7, r4
 8001d60:	40b9      	lsls	r1, r7
 8001d62:	4308      	orrs	r0, r1
 8001d64:	4680      	mov	r8, r0
 8001d66:	4644      	mov	r4, r8
 8001d68:	1e61      	subs	r1, r4, #1
 8001d6a:	418c      	sbcs	r4, r1
 8001d6c:	4322      	orrs	r2, r4
 8001d6e:	e5e9      	b.n	8001944 <__aeabi_dsub+0x9c>
 8001d70:	464c      	mov	r4, r9
 8001d72:	4323      	orrs	r3, r4
 8001d74:	001c      	movs	r4, r3
 8001d76:	1e63      	subs	r3, r4, #1
 8001d78:	419c      	sbcs	r4, r3
 8001d7a:	1b04      	subs	r4, r0, r4
 8001d7c:	42a0      	cmp	r0, r4
 8001d7e:	419b      	sbcs	r3, r3
 8001d80:	425b      	negs	r3, r3
 8001d82:	1acb      	subs	r3, r1, r3
 8001d84:	4698      	mov	r8, r3
 8001d86:	465d      	mov	r5, fp
 8001d88:	0016      	movs	r6, r2
 8001d8a:	e5e2      	b.n	8001952 <__aeabi_dsub+0xaa>
 8001d8c:	464e      	mov	r6, r9
 8001d8e:	431e      	orrs	r6, r3
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x4ec>
 8001d92:	e0ae      	b.n	8001ef2 <__aeabi_dsub+0x64a>
 8001d94:	1e66      	subs	r6, r4, #1
 8001d96:	2c01      	cmp	r4, #1
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x4f4>
 8001d9a:	e0fd      	b.n	8001f98 <__aeabi_dsub+0x6f0>
 8001d9c:	4f7b      	ldr	r7, [pc, #492]	; (8001f8c <__aeabi_dsub+0x6e4>)
 8001d9e:	42bc      	cmp	r4, r7
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x4fc>
 8001da2:	e107      	b.n	8001fb4 <__aeabi_dsub+0x70c>
 8001da4:	46b4      	mov	ip, r6
 8001da6:	e69b      	b.n	8001ae0 <__aeabi_dsub+0x238>
 8001da8:	4664      	mov	r4, ip
 8001daa:	2220      	movs	r2, #32
 8001dac:	1b12      	subs	r2, r2, r4
 8001dae:	000c      	movs	r4, r1
 8001db0:	4094      	lsls	r4, r2
 8001db2:	0007      	movs	r7, r0
 8001db4:	4090      	lsls	r0, r2
 8001db6:	46a0      	mov	r8, r4
 8001db8:	4664      	mov	r4, ip
 8001dba:	1e42      	subs	r2, r0, #1
 8001dbc:	4190      	sbcs	r0, r2
 8001dbe:	4662      	mov	r2, ip
 8001dc0:	40e7      	lsrs	r7, r4
 8001dc2:	4644      	mov	r4, r8
 8001dc4:	40d1      	lsrs	r1, r2
 8001dc6:	433c      	orrs	r4, r7
 8001dc8:	4304      	orrs	r4, r0
 8001dca:	185b      	adds	r3, r3, r1
 8001dcc:	e6f3      	b.n	8001bb6 <__aeabi_dsub+0x30e>
 8001dce:	4c6f      	ldr	r4, [pc, #444]	; (8001f8c <__aeabi_dsub+0x6e4>)
 8001dd0:	42a2      	cmp	r2, r4
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x52e>
 8001dd4:	e0d5      	b.n	8001f82 <__aeabi_dsub+0x6da>
 8001dd6:	4448      	add	r0, r9
 8001dd8:	185b      	adds	r3, r3, r1
 8001dda:	4548      	cmp	r0, r9
 8001ddc:	4189      	sbcs	r1, r1
 8001dde:	4249      	negs	r1, r1
 8001de0:	185b      	adds	r3, r3, r1
 8001de2:	07dc      	lsls	r4, r3, #31
 8001de4:	0840      	lsrs	r0, r0, #1
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	4698      	mov	r8, r3
 8001dea:	0016      	movs	r6, r2
 8001dec:	4304      	orrs	r4, r0
 8001dee:	e6cc      	b.n	8001b8a <__aeabi_dsub+0x2e2>
 8001df0:	2a00      	cmp	r2, #0
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x54e>
 8001df4:	e082      	b.n	8001efc <__aeabi_dsub+0x654>
 8001df6:	000a      	movs	r2, r1
 8001df8:	4302      	orrs	r2, r0
 8001dfa:	d140      	bne.n	8001e7e <__aeabi_dsub+0x5d6>
 8001dfc:	2380      	movs	r3, #128	; 0x80
 8001dfe:	2500      	movs	r5, #0
 8001e00:	031b      	lsls	r3, r3, #12
 8001e02:	e713      	b.n	8001c2c <__aeabi_dsub+0x384>
 8001e04:	074b      	lsls	r3, r1, #29
 8001e06:	08c2      	lsrs	r2, r0, #3
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	465d      	mov	r5, fp
 8001e0c:	08cb      	lsrs	r3, r1, #3
 8001e0e:	e6c5      	b.n	8001b9c <__aeabi_dsub+0x2f4>
 8001e10:	464a      	mov	r2, r9
 8001e12:	1a84      	subs	r4, r0, r2
 8001e14:	42a0      	cmp	r0, r4
 8001e16:	4192      	sbcs	r2, r2
 8001e18:	1acb      	subs	r3, r1, r3
 8001e1a:	4252      	negs	r2, r2
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	4698      	mov	r8, r3
 8001e20:	465d      	mov	r5, fp
 8001e22:	e59e      	b.n	8001962 <__aeabi_dsub+0xba>
 8001e24:	464a      	mov	r2, r9
 8001e26:	0759      	lsls	r1, r3, #29
 8001e28:	08d2      	lsrs	r2, r2, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	08db      	lsrs	r3, r3, #3
 8001e2e:	e6f9      	b.n	8001c24 <__aeabi_dsub+0x37c>
 8001e30:	464a      	mov	r2, r9
 8001e32:	1a14      	subs	r4, r2, r0
 8001e34:	45a1      	cmp	r9, r4
 8001e36:	4192      	sbcs	r2, r2
 8001e38:	1a5b      	subs	r3, r3, r1
 8001e3a:	4252      	negs	r2, r2
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	4698      	mov	r8, r3
 8001e40:	2601      	movs	r6, #1
 8001e42:	e586      	b.n	8001952 <__aeabi_dsub+0xaa>
 8001e44:	464a      	mov	r2, r9
 8001e46:	0759      	lsls	r1, r3, #29
 8001e48:	08d2      	lsrs	r2, r2, #3
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	e6a5      	b.n	8001b9c <__aeabi_dsub+0x2f4>
 8001e50:	464c      	mov	r4, r9
 8001e52:	4323      	orrs	r3, r4
 8001e54:	001c      	movs	r4, r3
 8001e56:	1e63      	subs	r3, r4, #1
 8001e58:	419c      	sbcs	r4, r3
 8001e5a:	e65b      	b.n	8001b14 <__aeabi_dsub+0x26c>
 8001e5c:	4665      	mov	r5, ip
 8001e5e:	001e      	movs	r6, r3
 8001e60:	3d20      	subs	r5, #32
 8001e62:	40ee      	lsrs	r6, r5
 8001e64:	2c20      	cmp	r4, #32
 8001e66:	d005      	beq.n	8001e74 <__aeabi_dsub+0x5cc>
 8001e68:	2540      	movs	r5, #64	; 0x40
 8001e6a:	1b2d      	subs	r5, r5, r4
 8001e6c:	40ab      	lsls	r3, r5
 8001e6e:	464c      	mov	r4, r9
 8001e70:	431c      	orrs	r4, r3
 8001e72:	46a2      	mov	sl, r4
 8001e74:	4654      	mov	r4, sl
 8001e76:	1e63      	subs	r3, r4, #1
 8001e78:	419c      	sbcs	r4, r3
 8001e7a:	4334      	orrs	r4, r6
 8001e7c:	e77d      	b.n	8001d7a <__aeabi_dsub+0x4d2>
 8001e7e:	074b      	lsls	r3, r1, #29
 8001e80:	08c2      	lsrs	r2, r0, #3
 8001e82:	431a      	orrs	r2, r3
 8001e84:	465d      	mov	r5, fp
 8001e86:	08cb      	lsrs	r3, r1, #3
 8001e88:	e6cc      	b.n	8001c24 <__aeabi_dsub+0x37c>
 8001e8a:	000a      	movs	r2, r1
 8001e8c:	4302      	orrs	r2, r0
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dsub+0x5ea>
 8001e90:	e736      	b.n	8001d00 <__aeabi_dsub+0x458>
 8001e92:	074b      	lsls	r3, r1, #29
 8001e94:	08c2      	lsrs	r2, r0, #3
 8001e96:	431a      	orrs	r2, r3
 8001e98:	465d      	mov	r5, fp
 8001e9a:	08cb      	lsrs	r3, r1, #3
 8001e9c:	e681      	b.n	8001ba2 <__aeabi_dsub+0x2fa>
 8001e9e:	464a      	mov	r2, r9
 8001ea0:	1a84      	subs	r4, r0, r2
 8001ea2:	42a0      	cmp	r0, r4
 8001ea4:	4192      	sbcs	r2, r2
 8001ea6:	1acb      	subs	r3, r1, r3
 8001ea8:	4252      	negs	r2, r2
 8001eaa:	1a9b      	subs	r3, r3, r2
 8001eac:	4698      	mov	r8, r3
 8001eae:	465d      	mov	r5, fp
 8001eb0:	2601      	movs	r6, #1
 8001eb2:	e54e      	b.n	8001952 <__aeabi_dsub+0xaa>
 8001eb4:	074b      	lsls	r3, r1, #29
 8001eb6:	08c2      	lsrs	r2, r0, #3
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	08cb      	lsrs	r3, r1, #3
 8001ebc:	e6b2      	b.n	8001c24 <__aeabi_dsub+0x37c>
 8001ebe:	464a      	mov	r2, r9
 8001ec0:	1a14      	subs	r4, r2, r0
 8001ec2:	45a1      	cmp	r9, r4
 8001ec4:	4192      	sbcs	r2, r2
 8001ec6:	1a5f      	subs	r7, r3, r1
 8001ec8:	4252      	negs	r2, r2
 8001eca:	1aba      	subs	r2, r7, r2
 8001ecc:	4690      	mov	r8, r2
 8001ece:	0212      	lsls	r2, r2, #8
 8001ed0:	d56b      	bpl.n	8001faa <__aeabi_dsub+0x702>
 8001ed2:	464a      	mov	r2, r9
 8001ed4:	1a84      	subs	r4, r0, r2
 8001ed6:	42a0      	cmp	r0, r4
 8001ed8:	4192      	sbcs	r2, r2
 8001eda:	1acb      	subs	r3, r1, r3
 8001edc:	4252      	negs	r2, r2
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	465d      	mov	r5, fp
 8001ee4:	e564      	b.n	80019b0 <__aeabi_dsub+0x108>
 8001ee6:	074b      	lsls	r3, r1, #29
 8001ee8:	08c2      	lsrs	r2, r0, #3
 8001eea:	431a      	orrs	r2, r3
 8001eec:	465d      	mov	r5, fp
 8001eee:	08cb      	lsrs	r3, r1, #3
 8001ef0:	e698      	b.n	8001c24 <__aeabi_dsub+0x37c>
 8001ef2:	074b      	lsls	r3, r1, #29
 8001ef4:	08c2      	lsrs	r2, r0, #3
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	08cb      	lsrs	r3, r1, #3
 8001efa:	e64f      	b.n	8001b9c <__aeabi_dsub+0x2f4>
 8001efc:	000a      	movs	r2, r1
 8001efe:	4302      	orrs	r2, r0
 8001f00:	d090      	beq.n	8001e24 <__aeabi_dsub+0x57c>
 8001f02:	464a      	mov	r2, r9
 8001f04:	075c      	lsls	r4, r3, #29
 8001f06:	08d2      	lsrs	r2, r2, #3
 8001f08:	4314      	orrs	r4, r2
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	0312      	lsls	r2, r2, #12
 8001f10:	4213      	tst	r3, r2
 8001f12:	d008      	beq.n	8001f26 <__aeabi_dsub+0x67e>
 8001f14:	08ce      	lsrs	r6, r1, #3
 8001f16:	4216      	tst	r6, r2
 8001f18:	d105      	bne.n	8001f26 <__aeabi_dsub+0x67e>
 8001f1a:	08c0      	lsrs	r0, r0, #3
 8001f1c:	0749      	lsls	r1, r1, #29
 8001f1e:	4308      	orrs	r0, r1
 8001f20:	0004      	movs	r4, r0
 8001f22:	465d      	mov	r5, fp
 8001f24:	0033      	movs	r3, r6
 8001f26:	0f61      	lsrs	r1, r4, #29
 8001f28:	00e2      	lsls	r2, r4, #3
 8001f2a:	0749      	lsls	r1, r1, #29
 8001f2c:	08d2      	lsrs	r2, r2, #3
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	e678      	b.n	8001c24 <__aeabi_dsub+0x37c>
 8001f32:	074b      	lsls	r3, r1, #29
 8001f34:	08c2      	lsrs	r2, r0, #3
 8001f36:	431a      	orrs	r2, r3
 8001f38:	08cb      	lsrs	r3, r1, #3
 8001f3a:	e632      	b.n	8001ba2 <__aeabi_dsub+0x2fa>
 8001f3c:	4448      	add	r0, r9
 8001f3e:	185b      	adds	r3, r3, r1
 8001f40:	4548      	cmp	r0, r9
 8001f42:	4192      	sbcs	r2, r2
 8001f44:	4698      	mov	r8, r3
 8001f46:	4252      	negs	r2, r2
 8001f48:	4490      	add	r8, r2
 8001f4a:	4643      	mov	r3, r8
 8001f4c:	0004      	movs	r4, r0
 8001f4e:	021b      	lsls	r3, r3, #8
 8001f50:	d400      	bmi.n	8001f54 <__aeabi_dsub+0x6ac>
 8001f52:	e61a      	b.n	8001b8a <__aeabi_dsub+0x2e2>
 8001f54:	4642      	mov	r2, r8
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <__aeabi_dsub+0x6e8>)
 8001f58:	2601      	movs	r6, #1
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	4690      	mov	r8, r2
 8001f5e:	e614      	b.n	8001b8a <__aeabi_dsub+0x2e2>
 8001f60:	4666      	mov	r6, ip
 8001f62:	001f      	movs	r7, r3
 8001f64:	3e20      	subs	r6, #32
 8001f66:	40f7      	lsrs	r7, r6
 8001f68:	2c20      	cmp	r4, #32
 8001f6a:	d005      	beq.n	8001f78 <__aeabi_dsub+0x6d0>
 8001f6c:	2640      	movs	r6, #64	; 0x40
 8001f6e:	1b36      	subs	r6, r6, r4
 8001f70:	40b3      	lsls	r3, r6
 8001f72:	464c      	mov	r4, r9
 8001f74:	431c      	orrs	r4, r3
 8001f76:	46a2      	mov	sl, r4
 8001f78:	4654      	mov	r4, sl
 8001f7a:	1e63      	subs	r3, r4, #1
 8001f7c:	419c      	sbcs	r4, r3
 8001f7e:	433c      	orrs	r4, r7
 8001f80:	e5c8      	b.n	8001b14 <__aeabi_dsub+0x26c>
 8001f82:	0011      	movs	r1, r2
 8001f84:	2300      	movs	r3, #0
 8001f86:	2200      	movs	r2, #0
 8001f88:	e532      	b.n	80019f0 <__aeabi_dsub+0x148>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	000007ff 	.word	0x000007ff
 8001f90:	ff7fffff 	.word	0xff7fffff
 8001f94:	000007fe 	.word	0x000007fe
 8001f98:	464a      	mov	r2, r9
 8001f9a:	1814      	adds	r4, r2, r0
 8001f9c:	4284      	cmp	r4, r0
 8001f9e:	4192      	sbcs	r2, r2
 8001fa0:	185b      	adds	r3, r3, r1
 8001fa2:	4698      	mov	r8, r3
 8001fa4:	4252      	negs	r2, r2
 8001fa6:	4490      	add	r8, r2
 8001fa8:	e5e9      	b.n	8001b7e <__aeabi_dsub+0x2d6>
 8001faa:	4642      	mov	r2, r8
 8001fac:	4322      	orrs	r2, r4
 8001fae:	d100      	bne.n	8001fb2 <__aeabi_dsub+0x70a>
 8001fb0:	e6a6      	b.n	8001d00 <__aeabi_dsub+0x458>
 8001fb2:	e5ea      	b.n	8001b8a <__aeabi_dsub+0x2e2>
 8001fb4:	074b      	lsls	r3, r1, #29
 8001fb6:	08c2      	lsrs	r2, r0, #3
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	08cb      	lsrs	r3, r1, #3
 8001fbc:	e632      	b.n	8001c24 <__aeabi_dsub+0x37c>
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4901      	ldr	r1, [pc, #4]	; (8001fc8 <__aeabi_dsub+0x720>)
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	e514      	b.n	80019f0 <__aeabi_dsub+0x148>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	000007ff 	.word	0x000007ff

08001fcc <__aeabi_ui2d>:
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	1e04      	subs	r4, r0, #0
 8001fd0:	d010      	beq.n	8001ff4 <__aeabi_ui2d+0x28>
 8001fd2:	f000 f8f1 	bl	80021b8 <__clzsi2>
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <__aeabi_ui2d+0x48>)
 8001fd8:	1a1b      	subs	r3, r3, r0
 8001fda:	280a      	cmp	r0, #10
 8001fdc:	dc11      	bgt.n	8002002 <__aeabi_ui2d+0x36>
 8001fde:	220b      	movs	r2, #11
 8001fe0:	0021      	movs	r1, r4
 8001fe2:	1a12      	subs	r2, r2, r0
 8001fe4:	40d1      	lsrs	r1, r2
 8001fe6:	3015      	adds	r0, #21
 8001fe8:	030a      	lsls	r2, r1, #12
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	4084      	lsls	r4, r0
 8001fee:	0b12      	lsrs	r2, r2, #12
 8001ff0:	0d5b      	lsrs	r3, r3, #21
 8001ff2:	e001      	b.n	8001ff8 <__aeabi_ui2d+0x2c>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	051b      	lsls	r3, r3, #20
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	0020      	movs	r0, r4
 8001ffe:	0019      	movs	r1, r3
 8002000:	bd10      	pop	{r4, pc}
 8002002:	0022      	movs	r2, r4
 8002004:	380b      	subs	r0, #11
 8002006:	4082      	lsls	r2, r0
 8002008:	055b      	lsls	r3, r3, #21
 800200a:	0312      	lsls	r2, r2, #12
 800200c:	2400      	movs	r4, #0
 800200e:	0b12      	lsrs	r2, r2, #12
 8002010:	0d5b      	lsrs	r3, r3, #21
 8002012:	e7f1      	b.n	8001ff8 <__aeabi_ui2d+0x2c>
 8002014:	0000041e 	.word	0x0000041e

08002018 <__aeabi_f2d>:
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	0043      	lsls	r3, r0, #1
 800201c:	0246      	lsls	r6, r0, #9
 800201e:	0fc4      	lsrs	r4, r0, #31
 8002020:	20fe      	movs	r0, #254	; 0xfe
 8002022:	0e1b      	lsrs	r3, r3, #24
 8002024:	1c59      	adds	r1, r3, #1
 8002026:	0a75      	lsrs	r5, r6, #9
 8002028:	4208      	tst	r0, r1
 800202a:	d00c      	beq.n	8002046 <__aeabi_f2d+0x2e>
 800202c:	22e0      	movs	r2, #224	; 0xe0
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	4694      	mov	ip, r2
 8002032:	076d      	lsls	r5, r5, #29
 8002034:	0b36      	lsrs	r6, r6, #12
 8002036:	4463      	add	r3, ip
 8002038:	051b      	lsls	r3, r3, #20
 800203a:	4333      	orrs	r3, r6
 800203c:	07e4      	lsls	r4, r4, #31
 800203e:	4323      	orrs	r3, r4
 8002040:	0028      	movs	r0, r5
 8002042:	0019      	movs	r1, r3
 8002044:	bd70      	pop	{r4, r5, r6, pc}
 8002046:	2b00      	cmp	r3, #0
 8002048:	d114      	bne.n	8002074 <__aeabi_f2d+0x5c>
 800204a:	2d00      	cmp	r5, #0
 800204c:	d01b      	beq.n	8002086 <__aeabi_f2d+0x6e>
 800204e:	0028      	movs	r0, r5
 8002050:	f000 f8b2 	bl	80021b8 <__clzsi2>
 8002054:	280a      	cmp	r0, #10
 8002056:	dc1c      	bgt.n	8002092 <__aeabi_f2d+0x7a>
 8002058:	230b      	movs	r3, #11
 800205a:	002a      	movs	r2, r5
 800205c:	1a1b      	subs	r3, r3, r0
 800205e:	40da      	lsrs	r2, r3
 8002060:	0003      	movs	r3, r0
 8002062:	3315      	adds	r3, #21
 8002064:	409d      	lsls	r5, r3
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <__aeabi_f2d+0x88>)
 8002068:	0312      	lsls	r2, r2, #12
 800206a:	1a1b      	subs	r3, r3, r0
 800206c:	055b      	lsls	r3, r3, #21
 800206e:	0b16      	lsrs	r6, r2, #12
 8002070:	0d5b      	lsrs	r3, r3, #21
 8002072:	e7e1      	b.n	8002038 <__aeabi_f2d+0x20>
 8002074:	2d00      	cmp	r5, #0
 8002076:	d009      	beq.n	800208c <__aeabi_f2d+0x74>
 8002078:	0b32      	lsrs	r2, r6, #12
 800207a:	2680      	movs	r6, #128	; 0x80
 800207c:	0336      	lsls	r6, r6, #12
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <__aeabi_f2d+0x8c>)
 8002080:	076d      	lsls	r5, r5, #29
 8002082:	4316      	orrs	r6, r2
 8002084:	e7d8      	b.n	8002038 <__aeabi_f2d+0x20>
 8002086:	2300      	movs	r3, #0
 8002088:	2600      	movs	r6, #0
 800208a:	e7d5      	b.n	8002038 <__aeabi_f2d+0x20>
 800208c:	2600      	movs	r6, #0
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <__aeabi_f2d+0x8c>)
 8002090:	e7d2      	b.n	8002038 <__aeabi_f2d+0x20>
 8002092:	0003      	movs	r3, r0
 8002094:	002a      	movs	r2, r5
 8002096:	3b0b      	subs	r3, #11
 8002098:	409a      	lsls	r2, r3
 800209a:	2500      	movs	r5, #0
 800209c:	e7e3      	b.n	8002066 <__aeabi_f2d+0x4e>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	00000389 	.word	0x00000389
 80020a4:	000007ff 	.word	0x000007ff

080020a8 <__aeabi_d2f>:
 80020a8:	0002      	movs	r2, r0
 80020aa:	004b      	lsls	r3, r1, #1
 80020ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ae:	0308      	lsls	r0, r1, #12
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	4e3d      	ldr	r6, [pc, #244]	; (80021a8 <__aeabi_d2f+0x100>)
 80020b4:	0fcc      	lsrs	r4, r1, #31
 80020b6:	0a40      	lsrs	r0, r0, #9
 80020b8:	0f51      	lsrs	r1, r2, #29
 80020ba:	1c5f      	adds	r7, r3, #1
 80020bc:	4308      	orrs	r0, r1
 80020be:	00d5      	lsls	r5, r2, #3
 80020c0:	4237      	tst	r7, r6
 80020c2:	d00a      	beq.n	80020da <__aeabi_d2f+0x32>
 80020c4:	4939      	ldr	r1, [pc, #228]	; (80021ac <__aeabi_d2f+0x104>)
 80020c6:	185e      	adds	r6, r3, r1
 80020c8:	2efe      	cmp	r6, #254	; 0xfe
 80020ca:	dd16      	ble.n	80020fa <__aeabi_d2f+0x52>
 80020cc:	23ff      	movs	r3, #255	; 0xff
 80020ce:	2100      	movs	r1, #0
 80020d0:	05db      	lsls	r3, r3, #23
 80020d2:	430b      	orrs	r3, r1
 80020d4:	07e0      	lsls	r0, r4, #31
 80020d6:	4318      	orrs	r0, r3
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <__aeabi_d2f+0x44>
 80020de:	4328      	orrs	r0, r5
 80020e0:	d027      	beq.n	8002132 <__aeabi_d2f+0x8a>
 80020e2:	2105      	movs	r1, #5
 80020e4:	0189      	lsls	r1, r1, #6
 80020e6:	0a49      	lsrs	r1, r1, #9
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	e7f1      	b.n	80020d0 <__aeabi_d2f+0x28>
 80020ec:	4305      	orrs	r5, r0
 80020ee:	d0ed      	beq.n	80020cc <__aeabi_d2f+0x24>
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	03c9      	lsls	r1, r1, #15
 80020f4:	23ff      	movs	r3, #255	; 0xff
 80020f6:	4301      	orrs	r1, r0
 80020f8:	e7ea      	b.n	80020d0 <__aeabi_d2f+0x28>
 80020fa:	2e00      	cmp	r6, #0
 80020fc:	dd1c      	ble.n	8002138 <__aeabi_d2f+0x90>
 80020fe:	0192      	lsls	r2, r2, #6
 8002100:	0011      	movs	r1, r2
 8002102:	1e4a      	subs	r2, r1, #1
 8002104:	4191      	sbcs	r1, r2
 8002106:	00c0      	lsls	r0, r0, #3
 8002108:	0f6d      	lsrs	r5, r5, #29
 800210a:	4301      	orrs	r1, r0
 800210c:	4329      	orrs	r1, r5
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	d048      	beq.n	80021a4 <__aeabi_d2f+0xfc>
 8002112:	230f      	movs	r3, #15
 8002114:	400b      	ands	r3, r1
 8002116:	2b04      	cmp	r3, #4
 8002118:	d000      	beq.n	800211c <__aeabi_d2f+0x74>
 800211a:	3104      	adds	r1, #4
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	04db      	lsls	r3, r3, #19
 8002120:	400b      	ands	r3, r1
 8002122:	d03f      	beq.n	80021a4 <__aeabi_d2f+0xfc>
 8002124:	1c72      	adds	r2, r6, #1
 8002126:	2efe      	cmp	r6, #254	; 0xfe
 8002128:	d0d0      	beq.n	80020cc <__aeabi_d2f+0x24>
 800212a:	0189      	lsls	r1, r1, #6
 800212c:	0a49      	lsrs	r1, r1, #9
 800212e:	b2d3      	uxtb	r3, r2
 8002130:	e7ce      	b.n	80020d0 <__aeabi_d2f+0x28>
 8002132:	2300      	movs	r3, #0
 8002134:	2100      	movs	r1, #0
 8002136:	e7cb      	b.n	80020d0 <__aeabi_d2f+0x28>
 8002138:	0032      	movs	r2, r6
 800213a:	3217      	adds	r2, #23
 800213c:	db22      	blt.n	8002184 <__aeabi_d2f+0xdc>
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	221e      	movs	r2, #30
 8002142:	0409      	lsls	r1, r1, #16
 8002144:	4308      	orrs	r0, r1
 8002146:	1b92      	subs	r2, r2, r6
 8002148:	2a1f      	cmp	r2, #31
 800214a:	dd1d      	ble.n	8002188 <__aeabi_d2f+0xe0>
 800214c:	2102      	movs	r1, #2
 800214e:	4249      	negs	r1, r1
 8002150:	1b8e      	subs	r6, r1, r6
 8002152:	0001      	movs	r1, r0
 8002154:	40f1      	lsrs	r1, r6
 8002156:	000e      	movs	r6, r1
 8002158:	2a20      	cmp	r2, #32
 800215a:	d004      	beq.n	8002166 <__aeabi_d2f+0xbe>
 800215c:	4a14      	ldr	r2, [pc, #80]	; (80021b0 <__aeabi_d2f+0x108>)
 800215e:	4694      	mov	ip, r2
 8002160:	4463      	add	r3, ip
 8002162:	4098      	lsls	r0, r3
 8002164:	4305      	orrs	r5, r0
 8002166:	0029      	movs	r1, r5
 8002168:	1e4d      	subs	r5, r1, #1
 800216a:	41a9      	sbcs	r1, r5
 800216c:	4331      	orrs	r1, r6
 800216e:	2600      	movs	r6, #0
 8002170:	074b      	lsls	r3, r1, #29
 8002172:	d1ce      	bne.n	8002112 <__aeabi_d2f+0x6a>
 8002174:	2080      	movs	r0, #128	; 0x80
 8002176:	000b      	movs	r3, r1
 8002178:	04c0      	lsls	r0, r0, #19
 800217a:	2201      	movs	r2, #1
 800217c:	4003      	ands	r3, r0
 800217e:	4201      	tst	r1, r0
 8002180:	d1d3      	bne.n	800212a <__aeabi_d2f+0x82>
 8002182:	e7af      	b.n	80020e4 <__aeabi_d2f+0x3c>
 8002184:	2300      	movs	r3, #0
 8002186:	e7ac      	b.n	80020e2 <__aeabi_d2f+0x3a>
 8002188:	490a      	ldr	r1, [pc, #40]	; (80021b4 <__aeabi_d2f+0x10c>)
 800218a:	468c      	mov	ip, r1
 800218c:	0029      	movs	r1, r5
 800218e:	4463      	add	r3, ip
 8002190:	40d1      	lsrs	r1, r2
 8002192:	409d      	lsls	r5, r3
 8002194:	000a      	movs	r2, r1
 8002196:	0029      	movs	r1, r5
 8002198:	4098      	lsls	r0, r3
 800219a:	1e4d      	subs	r5, r1, #1
 800219c:	41a9      	sbcs	r1, r5
 800219e:	4301      	orrs	r1, r0
 80021a0:	4311      	orrs	r1, r2
 80021a2:	e7e4      	b.n	800216e <__aeabi_d2f+0xc6>
 80021a4:	0033      	movs	r3, r6
 80021a6:	e79d      	b.n	80020e4 <__aeabi_d2f+0x3c>
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	fffffc80 	.word	0xfffffc80
 80021b0:	fffffca2 	.word	0xfffffca2
 80021b4:	fffffc82 	.word	0xfffffc82

080021b8 <__clzsi2>:
 80021b8:	211c      	movs	r1, #28
 80021ba:	2301      	movs	r3, #1
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	4298      	cmp	r0, r3
 80021c0:	d301      	bcc.n	80021c6 <__clzsi2+0xe>
 80021c2:	0c00      	lsrs	r0, r0, #16
 80021c4:	3910      	subs	r1, #16
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	4298      	cmp	r0, r3
 80021ca:	d301      	bcc.n	80021d0 <__clzsi2+0x18>
 80021cc:	0a00      	lsrs	r0, r0, #8
 80021ce:	3908      	subs	r1, #8
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	4298      	cmp	r0, r3
 80021d4:	d301      	bcc.n	80021da <__clzsi2+0x22>
 80021d6:	0900      	lsrs	r0, r0, #4
 80021d8:	3904      	subs	r1, #4
 80021da:	a202      	add	r2, pc, #8	; (adr r2, 80021e4 <__clzsi2+0x2c>)
 80021dc:	5c10      	ldrb	r0, [r2, r0]
 80021de:	1840      	adds	r0, r0, r1
 80021e0:	4770      	bx	lr
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	02020304 	.word	0x02020304
 80021e8:	01010101 	.word	0x01010101
	...

080021f4 <new_analog>:
//
//
// All Public Functions

// EFFECTS: Create a new Analog struct and returns pointer to struct.
Analog* new_analog(ADC_HandleTypeDef* _adc_pin, uint8_t S0, uint8_t S1, uint8_t S2, uint8_t S3){
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	000c      	movs	r4, r1
 80021fe:	0010      	movs	r0, r2
 8002200:	0019      	movs	r1, r3
 8002202:	1cfb      	adds	r3, r7, #3
 8002204:	1c22      	adds	r2, r4, #0
 8002206:	701a      	strb	r2, [r3, #0]
 8002208:	1cbb      	adds	r3, r7, #2
 800220a:	1c02      	adds	r2, r0, #0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	1c7b      	adds	r3, r7, #1
 8002210:	1c0a      	adds	r2, r1, #0
 8002212:	701a      	strb	r2, [r3, #0]

	// Create a new struct
	Analog* Analog_object = (Analog*) malloc(sizeof(Analog));
 8002214:	2008      	movs	r0, #8
 8002216:	f005 fbdf 	bl	80079d8 <malloc>
 800221a:	0003      	movs	r3, r0
 800221c:	60fb      	str	r3, [r7, #12]

	Analog_object->adc_pin = _adc_pin;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	601a      	str	r2, [r3, #0]
	Analog_object->select_pins[0] = S0;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1cfa      	adds	r2, r7, #3
 8002228:	7812      	ldrb	r2, [r2, #0]
 800222a:	711a      	strb	r2, [r3, #4]
	Analog_object->select_pins[1] = S1;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	1cba      	adds	r2, r7, #2
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	715a      	strb	r2, [r3, #5]
	Analog_object->select_pins[2] = S2;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1c7a      	adds	r2, r7, #1
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	719a      	strb	r2, [r3, #6]
	Analog_object->select_pins[3] = S3;
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	2320      	movs	r3, #32
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	71d3      	strb	r3, [r2, #7]

	return Analog_object;
 8002246:	68fb      	ldr	r3, [r7, #12]

}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b005      	add	sp, #20
 800224e:	bd90      	pop	{r4, r7, pc}

08002250 <get_voltage_data>:

// EFFECTS: Get voltage data from a specific voltage sensor in Volts
float get_voltage_data(const Analog* _Analog){
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	// Read data from ADC, raw_ADC_data is a number in [0, 4095]
	uint32_t raw_ADC_data = read_from_ADC(_Analog->adc_pin);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f881 	bl	8002364 <read_from_ADC>
 8002262:	0003      	movs	r3, r0
 8002264:	60fb      	str	r3, [r7, #12]
	// Convert from [0, 4095] to [0, 1] to [0, 3.3]
	float steppedDownVoltage = (raw_ADC_data / 4095.0) * 3.3;
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff feb0 	bl	8001fcc <__aeabi_ui2d>
 800226c:	2200      	movs	r2, #0
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <get_voltage_data+0x58>)
 8002270:	f7fe fdc6 	bl	8000e00 <__aeabi_ddiv>
 8002274:	0002      	movs	r2, r0
 8002276:	000b      	movs	r3, r1
 8002278:	0010      	movs	r0, r2
 800227a:	0019      	movs	r1, r3
 800227c:	4a0b      	ldr	r2, [pc, #44]	; (80022ac <get_voltage_data+0x5c>)
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <get_voltage_data+0x60>)
 8002280:	f7ff f8a6 	bl	80013d0 <__aeabi_dmul>
 8002284:	0002      	movs	r2, r0
 8002286:	000b      	movs	r3, r1
 8002288:	0010      	movs	r0, r2
 800228a:	0019      	movs	r1, r3
 800228c:	f7ff ff0c 	bl	80020a8 <__aeabi_d2f>
 8002290:	1c03      	adds	r3, r0, #0
 8002292:	60bb      	str	r3, [r7, #8]
	// Convert steppedDownVoltage to actual output voltage
	return steppedDownVoltage * 8.0;
 8002294:	2182      	movs	r1, #130	; 0x82
 8002296:	05c9      	lsls	r1, r1, #23
 8002298:	68b8      	ldr	r0, [r7, #8]
 800229a:	f7fe f8c7 	bl	800042c <__aeabi_fmul>
 800229e:	1c03      	adds	r3, r0, #0
}
 80022a0:	1c18      	adds	r0, r3, #0
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b004      	add	sp, #16
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40affe00 	.word	0x40affe00
 80022ac:	66666666 	.word	0x66666666
 80022b0:	400a6666 	.word	0x400a6666

080022b4 <get_current_data>:

// EFFECTS: Get current data from a specific current sensor in Amps
float get_current_data(const Analog* _Analog){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	// Read data from ADC, raw_ADC_data is a number in [0, 4095]
	uint32_t raw_ADC_data = read_from_ADC(_Analog->adc_pin);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 f84f 	bl	8002364 <read_from_ADC>
 80022c6:	0003      	movs	r3, r0
 80022c8:	617b      	str	r3, [r7, #20]
	// Convert from [0, 4095] to [0, 1] to [0, 3.3]
	float raw_volts = (raw_ADC_data / 4095.0) * 3.3 * 8.0;
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff fe7e 	bl	8001fcc <__aeabi_ui2d>
 80022d0:	2200      	movs	r2, #0
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <get_current_data+0x94>)
 80022d4:	f7fe fd94 	bl	8000e00 <__aeabi_ddiv>
 80022d8:	0002      	movs	r2, r0
 80022da:	000b      	movs	r3, r1
 80022dc:	0010      	movs	r0, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <get_current_data+0x98>)
 80022e2:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <get_current_data+0x9c>)
 80022e4:	f7ff f874 	bl	80013d0 <__aeabi_dmul>
 80022e8:	0002      	movs	r2, r0
 80022ea:	000b      	movs	r3, r1
 80022ec:	0010      	movs	r0, r2
 80022ee:	0019      	movs	r1, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <get_current_data+0xa0>)
 80022f4:	f7ff f86c 	bl	80013d0 <__aeabi_dmul>
 80022f8:	0002      	movs	r2, r0
 80022fa:	000b      	movs	r3, r1
 80022fc:	0010      	movs	r0, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	f7ff fed2 	bl	80020a8 <__aeabi_d2f>
 8002304:	1c03      	adds	r3, r0, #0
 8002306:	613b      	str	r3, [r7, #16]
	// Convert from [0, 3.3] to [-1.65, 1.65] to [-1650, -1650]
	float raw_millivolts = (raw_volts - 1.65) * 1000.0;
 8002308:	6938      	ldr	r0, [r7, #16]
 800230a:	f7ff fe85 	bl	8002018 <__aeabi_f2d>
 800230e:	4a0f      	ldr	r2, [pc, #60]	; (800234c <get_current_data+0x98>)
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <get_current_data+0xa4>)
 8002312:	f7ff fac9 	bl	80018a8 <__aeabi_dsub>
 8002316:	0002      	movs	r2, r0
 8002318:	000b      	movs	r3, r1
 800231a:	0010      	movs	r0, r2
 800231c:	0019      	movs	r1, r3
 800231e:	2200      	movs	r2, #0
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <get_current_data+0xa8>)
 8002322:	f7ff f855 	bl	80013d0 <__aeabi_dmul>
 8002326:	0002      	movs	r2, r0
 8002328:	000b      	movs	r3, r1
 800232a:	0010      	movs	r0, r2
 800232c:	0019      	movs	r1, r3
 800232e:	f7ff febb 	bl	80020a8 <__aeabi_d2f>
 8002332:	1c03      	adds	r3, r0, #0
 8002334:	60fb      	str	r3, [r7, #12]
	// Convert based on sensitivity, which is 40 mV/A
	return raw_millivolts / 40.0;
 8002336:	490a      	ldr	r1, [pc, #40]	; (8002360 <get_current_data+0xac>)
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7fd ff6b 	bl	8000214 <__aeabi_fdiv>
 800233e:	1c03      	adds	r3, r0, #0
}
 8002340:	1c18      	adds	r0, r3, #0
 8002342:	46bd      	mov	sp, r7
 8002344:	b006      	add	sp, #24
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40affe00 	.word	0x40affe00
 800234c:	66666666 	.word	0x66666666
 8002350:	400a6666 	.word	0x400a6666
 8002354:	40200000 	.word	0x40200000
 8002358:	3ffa6666 	.word	0x3ffa6666
 800235c:	408f4000 	.word	0x408f4000
 8002360:	42200000 	.word	0x42200000

08002364 <read_from_ADC>:
//
// All Private Functions

// EFFECTS: Read from ADC object
// Returns a number between 0 and 4095
uint32_t read_from_ADC(ADC_HandleTypeDef* adc_object){
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc_object);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0018      	movs	r0, r3
 8002370:	f001 fa7a 	bl	8003868 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc_object, HAL_MAX_DELAY);
 8002374:	2301      	movs	r3, #1
 8002376:	425a      	negs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0011      	movs	r1, r2
 800237c:	0018      	movs	r0, r3
 800237e:	f001 fafd 	bl	800397c <HAL_ADC_PollForConversion>
    uint32_t raw = HAL_ADC_GetValue(adc_object);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f001 fb8d 	bl	8003aa4 <HAL_ADC_GetValue>
 800238a:	0003      	movs	r3, r0
 800238c:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Stop(adc_object);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f001 fab7 	bl	8003904 <HAL_ADC_Stop>
    return raw;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b004      	add	sp, #16
 800239e:	bd80      	pop	{r7, pc}

080023a0 <send_thermal_data>:

#ifdef THERMAL_ENABLE

// EFFECTS: sends thermal data in the following format
// FORMAT: THERMAL,x0,x1,x2,x3,
void send_thermal_data(float _thermal_data[THERMAL_DEVICES]) {
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b08d      	sub	sp, #52	; 0x34
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

	// TODO

	uint8_t buffer[32] = "";
 80023a8:	230c      	movs	r3, #12
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	3304      	adds	r3, #4
 80023b2:	221c      	movs	r2, #28
 80023b4:	2100      	movs	r1, #0
 80023b6:	0018      	movs	r0, r3
 80023b8:	f005 fb21 	bl	80079fe <memset>

	for (int i = 0; i < THERMAL_DEVICES; ++i) {
 80023bc:	2300      	movs	r3, #0
 80023be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c0:	e013      	b.n	80023ea <send_thermal_data+0x4a>
		memcpy(buffer, &(_thermal_data[i]), 4);
 80023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	18d1      	adds	r1, r2, r3
 80023ca:	240c      	movs	r4, #12
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	2204      	movs	r2, #4
 80023d0:	0018      	movs	r0, r3
 80023d2:	f005 fb0b 	bl	80079ec <memcpy>
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	049b      	lsls	r3, r3, #18
 80023da:	1939      	adds	r1, r7, r4
 80023dc:	4807      	ldr	r0, [pc, #28]	; (80023fc <send_thermal_data+0x5c>)
 80023de:	2220      	movs	r2, #32
 80023e0:	f002 fe8e 	bl	8005100 <HAL_I2C_Slave_Seq_Transmit_IT>
	for (int i = 0; i < THERMAL_DEVICES; ++i) {
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	3301      	adds	r3, #1
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	dde8      	ble.n	80023c2 <send_thermal_data+0x22>
	}
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b00d      	add	sp, #52	; 0x34
 80023f8:	bd90      	pop	{r4, r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	20000114 	.word	0x20000114

08002400 <get_analog_data>:

#ifdef ANALOG_ENABLE

// EFFECTS: sends analog data in the following format
// FORMAT: ANALOG,v0,v1,c0,c1,
void get_analog_data(const Analog* _analog_channels[ANALOG_DEVICES]) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < ANALOG_DEVICES; ++i) {
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	e041      	b.n	8002492 <get_analog_data+0x92>
      const Analog* analog_device = _analog_channels[i];
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	18d3      	adds	r3, r2, r3
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60bb      	str	r3, [r7, #8]

      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, analog_device->select_pins[0]); //S0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	791a      	ldrb	r2, [r3, #4]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	0059      	lsls	r1, r3, #1
 8002422:	23a0      	movs	r3, #160	; 0xa0
 8002424:	05db      	lsls	r3, r3, #23
 8002426:	0018      	movs	r0, r3
 8002428:	f002 f99a 	bl	8004760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, analog_device->select_pins[1]); //S1
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	795a      	ldrb	r2, [r3, #5]
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	0099      	lsls	r1, r3, #2
 8002434:	23a0      	movs	r3, #160	; 0xa0
 8002436:	05db      	lsls	r3, r3, #23
 8002438:	0018      	movs	r0, r3
 800243a:	f002 f991 	bl	8004760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, analog_device->select_pins[2]); //S2
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	799b      	ldrb	r3, [r3, #6]
 8002442:	4818      	ldr	r0, [pc, #96]	; (80024a4 <get_analog_data+0xa4>)
 8002444:	001a      	movs	r2, r3
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	f002 f98a 	bl	8004760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, analog_device->select_pins[3]); //S3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	79db      	ldrb	r3, [r3, #7]
 8002450:	4814      	ldr	r0, [pc, #80]	; (80024a4 <get_analog_data+0xa4>)
 8002452:	001a      	movs	r2, r3
 8002454:	2180      	movs	r1, #128	; 0x80
 8002456:	f002 f983 	bl	8004760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,  1); //ENABLE
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	4812      	ldr	r0, [pc, #72]	; (80024a8 <get_analog_data+0xa8>)
 8002460:	2201      	movs	r2, #1
 8002462:	0019      	movs	r1, r3
 8002464:	f002 f97c 	bl	8004760 <HAL_GPIO_WritePin>

      analog_voltage_data[i] = get_voltage_data(analog_device);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff fef0 	bl	8002250 <get_voltage_data>
 8002470:	1c01      	adds	r1, r0, #0
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <get_analog_data+0xac>)
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	0092      	lsls	r2, r2, #2
 8002478:	50d1      	str	r1, [r2, r3]
      analogCurrentData[i] = get_current_data(analog_device);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	0018      	movs	r0, r3
 800247e:	f7ff ff19 	bl	80022b4 <get_current_data>
 8002482:	1c01      	adds	r1, r0, #0
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <get_analog_data+0xb0>)
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	0092      	lsls	r2, r2, #2
 800248a:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < ANALOG_DEVICES; ++i) {
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b05      	cmp	r3, #5
 8002496:	ddba      	ble.n	800240e <get_analog_data+0xe>
    }
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	50000800 	.word	0x50000800
 80024a8:	50000400 	.word	0x50000400
 80024ac:	2000016c 	.word	0x2000016c
 80024b0:	20000098 	.word	0x20000098

080024b4 <send_analog_data>:

// EFFECTS: get analog data in the following format
// FORMAT: ANALOG,v0,v1,c0,c1,
void send_analog_data(float _analog_voltage_data[ANALOG_DEVICES], float _analogCurrentData[ANALOG_DEVICES]) {
 80024b4:	b590      	push	{r4, r7, lr}
 80024b6:	b08d      	sub	sp, #52	; 0x34
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  
	// TODO

	uint8_t buffer[32] = "";
 80024be:	2308      	movs	r3, #8
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	3304      	adds	r3, #4
 80024c8:	221c      	movs	r2, #28
 80024ca:	2100      	movs	r1, #0
 80024cc:	0018      	movs	r0, r3
 80024ce:	f005 fa96 	bl	80079fe <memset>

	for (int i = 0; i < ANALOG_DEVICES; ++i) {
 80024d2:	2300      	movs	r3, #0
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d6:	e013      	b.n	8002500 <send_analog_data+0x4c>
		memcpy(buffer, &(_analog_voltage_data[i]), 4);
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	18d1      	adds	r1, r2, r3
 80024e0:	2408      	movs	r4, #8
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	2204      	movs	r2, #4
 80024e6:	0018      	movs	r0, r3
 80024e8:	f005 fa80 	bl	80079ec <memcpy>
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	049b      	lsls	r3, r3, #18
 80024f0:	1939      	adds	r1, r7, r4
 80024f2:	4814      	ldr	r0, [pc, #80]	; (8002544 <send_analog_data+0x90>)
 80024f4:	2220      	movs	r2, #32
 80024f6:	f002 fe03 	bl	8005100 <HAL_I2C_Slave_Seq_Transmit_IT>
	for (int i = 0; i < ANALOG_DEVICES; ++i) {
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	3301      	adds	r3, #1
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	2b05      	cmp	r3, #5
 8002504:	dde8      	ble.n	80024d8 <send_analog_data+0x24>
	}

	for (int i = 0; i < ANALOG_DEVICES; ++i) {
 8002506:	2300      	movs	r3, #0
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
 800250a:	e013      	b.n	8002534 <send_analog_data+0x80>
		memcpy(buffer, &(_analogCurrentData[i]), 4);
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	18d1      	adds	r1, r2, r3
 8002514:	2408      	movs	r4, #8
 8002516:	193b      	adds	r3, r7, r4
 8002518:	2204      	movs	r2, #4
 800251a:	0018      	movs	r0, r3
 800251c:	f005 fa66 	bl	80079ec <memcpy>
		HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	049b      	lsls	r3, r3, #18
 8002524:	1939      	adds	r1, r7, r4
 8002526:	4807      	ldr	r0, [pc, #28]	; (8002544 <send_analog_data+0x90>)
 8002528:	2220      	movs	r2, #32
 800252a:	f002 fde9 	bl	8005100 <HAL_I2C_Slave_Seq_Transmit_IT>
	for (int i = 0; i < ANALOG_DEVICES; ++i) {
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	3301      	adds	r3, #1
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
 8002534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002536:	2b05      	cmp	r3, #5
 8002538:	dde8      	ble.n	800250c <send_analog_data+0x58>
	}
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b00d      	add	sp, #52	; 0x34
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	20000114 	.word	0x20000114

08002548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800254e:	f000 fdb1 	bl	80030b4 <HAL_Init>

  /* USER CODE BEGIN Init */

#ifdef THERMAL_ENABLE

i2cBus = new_smbus(&hi2c1); // TODO (not using huart1)
 8002552:	4b4d      	ldr	r3, [pc, #308]	; (8002688 <main+0x140>)
 8002554:	0018      	movs	r0, r3
 8002556:	f000 fa82 	bl	8002a5e <new_smbus>
 800255a:	0002      	movs	r2, r0
 800255c:	4b4b      	ldr	r3, [pc, #300]	; (800268c <main+0x144>)
 800255e:	601a      	str	r2, [r3, #0]
disable_DMA(i2cBus);
 8002560:	4b4a      	ldr	r3, [pc, #296]	; (800268c <main+0x144>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fa96 	bl	8002a96 <disable_DMA>

thermal_channels[THERMAL_3_3_V_CHANNEL] = new_thermal_sensor(i2cBus, 0, 0, 0);
 800256a:	4b48      	ldr	r3, [pc, #288]	; (800268c <main+0x144>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	f000 fc95 	bl	8002ea2 <new_thermal_sensor>
 8002578:	0002      	movs	r2, r0
 800257a:	4b45      	ldr	r3, [pc, #276]	; (8002690 <main+0x148>)
 800257c:	601a      	str	r2, [r3, #0]
thermal_channels[THERMAL_5_V_CHANNEL] = new_thermal_sensor(i2cBus, 1, 0, 0);
 800257e:	4b43      	ldr	r3, [pc, #268]	; (800268c <main+0x144>)
 8002580:	6818      	ldr	r0, [r3, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	2200      	movs	r2, #0
 8002586:	2101      	movs	r1, #1
 8002588:	f000 fc8b 	bl	8002ea2 <new_thermal_sensor>
 800258c:	0002      	movs	r2, r0
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <main+0x148>)
 8002590:	605a      	str	r2, [r3, #4]
thermal_channels[THERMAL_12_V_CHANNEL] = new_thermal_sensor(i2cBus, 0, 1, 0);
 8002592:	4b3e      	ldr	r3, [pc, #248]	; (800268c <main+0x144>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	2201      	movs	r2, #1
 800259a:	2100      	movs	r1, #0
 800259c:	f000 fc81 	bl	8002ea2 <new_thermal_sensor>
 80025a0:	0002      	movs	r2, r0
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <main+0x148>)
 80025a4:	609a      	str	r2, [r3, #8]
  ANALOG_CS3_3_3_V = 4,
	ANALOG_VOLTAGE_DIVIDER_3_3_V = 5,
  ANALOG_DEVICES = 6
};

analog_channels[ANALOG_CS1_12_V] = new_analog(&hadc1, 0, 0, 0, 0);
 80025a6:	483b      	ldr	r0, [pc, #236]	; (8002694 <main+0x14c>)
 80025a8:	2300      	movs	r3, #0
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2300      	movs	r3, #0
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	f7ff fe1f 	bl	80021f4 <new_analog>
 80025b6:	0002      	movs	r2, r0
 80025b8:	4b37      	ldr	r3, [pc, #220]	; (8002698 <main+0x150>)
 80025ba:	601a      	str	r2, [r3, #0]
analog_channels[ANALOG_VOLTAGE_DIVIDER_12_V] = new_analog(&hadc1, 1, 0, 0, 0);
 80025bc:	4835      	ldr	r0, [pc, #212]	; (8002694 <main+0x14c>)
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2300      	movs	r3, #0
 80025c4:	2200      	movs	r2, #0
 80025c6:	2101      	movs	r1, #1
 80025c8:	f7ff fe14 	bl	80021f4 <new_analog>
 80025cc:	0002      	movs	r2, r0
 80025ce:	4b32      	ldr	r3, [pc, #200]	; (8002698 <main+0x150>)
 80025d0:	605a      	str	r2, [r3, #4]
analog_channels[ANALOG_CS2_5_V] = new_analog(&hadc1, 0, 1, 0, 0);
 80025d2:	4830      	ldr	r0, [pc, #192]	; (8002694 <main+0x14c>)
 80025d4:	2300      	movs	r3, #0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2300      	movs	r3, #0
 80025da:	2201      	movs	r2, #1
 80025dc:	2100      	movs	r1, #0
 80025de:	f7ff fe09 	bl	80021f4 <new_analog>
 80025e2:	0002      	movs	r2, r0
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <main+0x150>)
 80025e6:	609a      	str	r2, [r3, #8]
analog_channels[ANALOG_VOLTAGE_DIVIDER_5_V] = new_analog(&hadc1, 1, 1, 0, 0);
 80025e8:	482a      	ldr	r0, [pc, #168]	; (8002694 <main+0x14c>)
 80025ea:	2300      	movs	r3, #0
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2300      	movs	r3, #0
 80025f0:	2201      	movs	r2, #1
 80025f2:	2101      	movs	r1, #1
 80025f4:	f7ff fdfe 	bl	80021f4 <new_analog>
 80025f8:	0002      	movs	r2, r0
 80025fa:	4b27      	ldr	r3, [pc, #156]	; (8002698 <main+0x150>)
 80025fc:	60da      	str	r2, [r3, #12]
analog_channels[ANALOG_CS3_3_3_V] = new_analog(&hadc1, 0, 0, 1, 0);
 80025fe:	4825      	ldr	r0, [pc, #148]	; (8002694 <main+0x14c>)
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2301      	movs	r3, #1
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	f7ff fdf3 	bl	80021f4 <new_analog>
 800260e:	0002      	movs	r2, r0
 8002610:	4b21      	ldr	r3, [pc, #132]	; (8002698 <main+0x150>)
 8002612:	611a      	str	r2, [r3, #16]
analog_channels[ANALOG_VOLTAGE_DIVIDER_3_3_V] = new_analog(&hadc1, 1, 0, 1, 0);
 8002614:	481f      	ldr	r0, [pc, #124]	; (8002694 <main+0x14c>)
 8002616:	2300      	movs	r3, #0
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	2200      	movs	r2, #0
 800261e:	2101      	movs	r1, #1
 8002620:	f7ff fde8 	bl	80021f4 <new_analog>
 8002624:	0002      	movs	r2, r0
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <main+0x150>)
 8002628:	615a      	str	r2, [r3, #20]
#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800262a:	f000 f83d 	bl	80026a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800262e:	f000 f987 	bl	8002940 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002632:	f000 f899 	bl	8002768 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002636:	f000 f903 	bl	8002840 <MX_I2C1_Init>
  MX_I2C2_Init();
 800263a:	f000 f941 	bl	80028c0 <MX_I2C2_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef THERMAL_ENABLE

      for (int i = 0; i < THERMAL_DEVICES; ++i) {
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	e00e      	b.n	8002662 <main+0x11a>
          thermal_data[i] = get_thermal_data(thermal_channels[i]);
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <main+0x148>)
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	0092      	lsls	r2, r2, #2
 800264a:	58d3      	ldr	r3, [r2, r3]
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fc67 	bl	8002f20 <get_thermal_data>
 8002652:	1c01      	adds	r1, r0, #0
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <main+0x154>)
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	50d1      	str	r1, [r2, r3]
      for (int i = 0; i < THERMAL_DEVICES; ++i) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3301      	adds	r3, #1
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b02      	cmp	r3, #2
 8002666:	dded      	ble.n	8002644 <main+0xfc>
      }

      send_thermal_data(thermal_data);
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <main+0x154>)
 800266a:	0018      	movs	r0, r3
 800266c:	f7ff fe98 	bl	80023a0 <send_thermal_data>

#endif

#ifdef ANALOG_ENABLE
      get_analog_data(analog_channels);
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <main+0x150>)
 8002672:	0018      	movs	r0, r3
 8002674:	f7ff fec4 	bl	8002400 <get_analog_data>
      send_analog_data(analog_voltage_data, analogCurrentData);
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <main+0x158>)
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <main+0x15c>)
 800267c:	0011      	movs	r1, r2
 800267e:	0018      	movs	r0, r3
 8002680:	f7ff ff18 	bl	80024b4 <send_analog_data>
      for (int i = 0; i < THERMAL_DEVICES; ++i) {
 8002684:	e7db      	b.n	800263e <main+0xf6>
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	200000c8 	.word	0x200000c8
 800268c:	20000184 	.word	0x20000184
 8002690:	200001ec 	.word	0x200001ec
 8002694:	20000188 	.word	0x20000188
 8002698:	200000b0 	.word	0x200000b0
 800269c:	20000160 	.word	0x20000160
 80026a0:	20000098 	.word	0x20000098
 80026a4:	2000016c 	.word	0x2000016c

080026a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b099      	sub	sp, #100	; 0x64
 80026ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ae:	242c      	movs	r4, #44	; 0x2c
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	0018      	movs	r0, r3
 80026b4:	2334      	movs	r3, #52	; 0x34
 80026b6:	001a      	movs	r2, r3
 80026b8:	2100      	movs	r1, #0
 80026ba:	f005 f9a0 	bl	80079fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026be:	231c      	movs	r3, #28
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	0018      	movs	r0, r3
 80026c4:	2310      	movs	r3, #16
 80026c6:	001a      	movs	r2, r3
 80026c8:	2100      	movs	r1, #0
 80026ca:	f005 f998 	bl	80079fe <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	0018      	movs	r0, r3
 80026d2:	2318      	movs	r3, #24
 80026d4:	001a      	movs	r2, r3
 80026d6:	2100      	movs	r1, #0
 80026d8:	f005 f991 	bl	80079fe <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	0018      	movs	r0, r3
 80026e2:	f004 fb49 	bl	8006d78 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	2202      	movs	r2, #2
 80026ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	0052      	lsls	r2, r2, #1
 80026f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	2240      	movs	r2, #64	; 0x40
 80026fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002700:	193b      	adds	r3, r7, r4
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002706:	193b      	adds	r3, r7, r4
 8002708:	0018      	movs	r0, r3
 800270a:	f004 fb75 	bl	8006df8 <HAL_RCC_OscConfig>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002712:	f000 f99f 	bl	8002a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002716:	211c      	movs	r1, #28
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2207      	movs	r2, #7
 800271c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800271e:	187b      	adds	r3, r7, r1
 8002720:	2200      	movs	r2, #0
 8002722:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002724:	187b      	adds	r3, r7, r1
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800272a:	187b      	adds	r3, r7, r1
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002730:	187b      	adds	r3, r7, r1
 8002732:	2100      	movs	r1, #0
 8002734:	0018      	movs	r0, r3
 8002736:	f004 fe75 	bl	8007424 <HAL_RCC_ClockConfig>
 800273a:	1e03      	subs	r3, r0, #0
 800273c:	d001      	beq.n	8002742 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800273e:	f000 f989 	bl	8002a54 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2220      	movs	r2, #32
 8002746:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	0018      	movs	r0, r3
 8002752:	f004 fff1 	bl	8007738 <HAL_RCCEx_PeriphCLKConfig>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d001      	beq.n	800275e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800275a:	f000 f97b 	bl	8002a54 <Error_Handler>
  }
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b019      	add	sp, #100	; 0x64
 8002764:	bd90      	pop	{r4, r7, pc}
	...

08002768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	0018      	movs	r0, r3
 8002772:	230c      	movs	r3, #12
 8002774:	001a      	movs	r2, r3
 8002776:	2100      	movs	r1, #0
 8002778:	f005 f941 	bl	80079fe <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800277c:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <MX_ADC1_Init+0xcc>)
 800277e:	4a2e      	ldr	r2, [pc, #184]	; (8002838 <MX_ADC1_Init+0xd0>)
 8002780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <MX_ADC1_Init+0xcc>)
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	05d2      	lsls	r2, r2, #23
 8002788:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800278a:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <MX_ADC1_Init+0xcc>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002790:	4b28      	ldr	r3, [pc, #160]	; (8002834 <MX_ADC1_Init+0xcc>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002796:	4b27      	ldr	r3, [pc, #156]	; (8002834 <MX_ADC1_Init+0xcc>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <MX_ADC1_Init+0xcc>)
 800279e:	2204      	movs	r2, #4
 80027a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80027a8:	4b22      	ldr	r3, [pc, #136]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027ae:	4b21      	ldr	r3, [pc, #132]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027bc:	2220      	movs	r2, #32
 80027be:	2100      	movs	r1, #0
 80027c0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027d0:	222c      	movs	r2, #44	; 0x2c
 80027d2:	2100      	movs	r1, #0
 80027d4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80027dc:	4b15      	ldr	r3, [pc, #84]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80027e2:	4b14      	ldr	r3, [pc, #80]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80027e8:	4b12      	ldr	r3, [pc, #72]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027ea:	223c      	movs	r2, #60	; 0x3c
 80027ec:	2100      	movs	r1, #0
 80027ee:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <MX_ADC1_Init+0xcc>)
 80027f8:	0018      	movs	r0, r3
 80027fa:	f000 fe57 	bl	80034ac <HAL_ADC_Init>
 80027fe:	1e03      	subs	r3, r0, #0
 8002800:	d001      	beq.n	8002806 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002802:	f000 f927 	bl	8002a54 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <MX_ADC1_Init+0xd4>)
 800280a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2200      	movs	r2, #0
 8002810:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002818:	1d3a      	adds	r2, r7, #4
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <MX_ADC1_Init+0xcc>)
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f001 f94c 	bl	8003abc <HAL_ADC_ConfigChannel>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d001      	beq.n	800282c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002828:	f000 f914 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b004      	add	sp, #16
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000188 	.word	0x20000188
 8002838:	40012400 	.word	0x40012400
 800283c:	04000002 	.word	0x04000002

08002840 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <MX_I2C1_Init+0x74>)
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <MX_I2C1_Init+0x78>)
 8002848:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <MX_I2C1_Init+0x74>)
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <MX_I2C1_Init+0x7c>)
 800284e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002850:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <MX_I2C1_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002856:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <MX_I2C1_Init+0x74>)
 8002858:	2201      	movs	r2, #1
 800285a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <MX_I2C1_Init+0x74>)
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <MX_I2C1_Init+0x74>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <MX_I2C1_Init+0x74>)
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <MX_I2C1_Init+0x74>)
 8002870:	2200      	movs	r2, #0
 8002872:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002874:	4b0f      	ldr	r3, [pc, #60]	; (80028b4 <MX_I2C1_Init+0x74>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <MX_I2C1_Init+0x74>)
 800287c:	0018      	movs	r0, r3
 800287e:	f001 ff8d 	bl	800479c <HAL_I2C_Init>
 8002882:	1e03      	subs	r3, r0, #0
 8002884:	d001      	beq.n	800288a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002886:	f000 f8e5 	bl	8002a54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <MX_I2C1_Init+0x74>)
 800288c:	2100      	movs	r1, #0
 800288e:	0018      	movs	r0, r3
 8002890:	f004 f9da 	bl	8006c48 <HAL_I2CEx_ConfigAnalogFilter>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d001      	beq.n	800289c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002898:	f000 f8dc 	bl	8002a54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <MX_I2C1_Init+0x74>)
 800289e:	2100      	movs	r1, #0
 80028a0:	0018      	movs	r0, r3
 80028a2:	f004 fa1d 	bl	8006ce0 <HAL_I2CEx_ConfigDigitalFilter>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d001      	beq.n	80028ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028aa:	f000 f8d3 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200000c8 	.word	0x200000c8
 80028b8:	40005400 	.word	0x40005400
 80028bc:	00303d5b 	.word	0x00303d5b

080028c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <MX_I2C2_Init+0x74>)
 80028c6:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <MX_I2C2_Init+0x78>)
 80028c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <MX_I2C2_Init+0x74>)
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <MX_I2C2_Init+0x7c>)
 80028ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80028d0:	4b18      	ldr	r3, [pc, #96]	; (8002934 <MX_I2C2_Init+0x74>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028d6:	4b17      	ldr	r3, [pc, #92]	; (8002934 <MX_I2C2_Init+0x74>)
 80028d8:	2201      	movs	r2, #1
 80028da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <MX_I2C2_Init+0x74>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <MX_I2C2_Init+0x74>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_I2C2_Init+0x74>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_I2C2_Init+0x74>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <MX_I2C2_Init+0x74>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_I2C2_Init+0x74>)
 80028fc:	0018      	movs	r0, r3
 80028fe:	f001 ff4d 	bl	800479c <HAL_I2C_Init>
 8002902:	1e03      	subs	r3, r0, #0
 8002904:	d001      	beq.n	800290a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002906:	f000 f8a5 	bl	8002a54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <MX_I2C2_Init+0x74>)
 800290c:	2100      	movs	r1, #0
 800290e:	0018      	movs	r0, r3
 8002910:	f004 f99a 	bl	8006c48 <HAL_I2CEx_ConfigAnalogFilter>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d001      	beq.n	800291c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002918:	f000 f89c 	bl	8002a54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <MX_I2C2_Init+0x74>)
 800291e:	2100      	movs	r1, #0
 8002920:	0018      	movs	r0, r3
 8002922:	f004 f9dd 	bl	8006ce0 <HAL_I2CEx_ConfigDigitalFilter>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800292a:	f000 f893 	bl	8002a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000114 	.word	0x20000114
 8002938:	40005800 	.word	0x40005800
 800293c:	00303d5b 	.word	0x00303d5b

08002940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002946:	240c      	movs	r4, #12
 8002948:	193b      	adds	r3, r7, r4
 800294a:	0018      	movs	r0, r3
 800294c:	2314      	movs	r3, #20
 800294e:	001a      	movs	r2, r3
 8002950:	2100      	movs	r1, #0
 8002952:	f005 f854 	bl	80079fe <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	4b3c      	ldr	r3, [pc, #240]	; (8002a48 <MX_GPIO_Init+0x108>)
 8002958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <MX_GPIO_Init+0x108>)
 800295c:	2101      	movs	r1, #1
 800295e:	430a      	orrs	r2, r1
 8002960:	635a      	str	r2, [r3, #52]	; 0x34
 8002962:	4b39      	ldr	r3, [pc, #228]	; (8002a48 <MX_GPIO_Init+0x108>)
 8002964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002966:	2201      	movs	r2, #1
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800296e:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <MX_GPIO_Init+0x108>)
 8002970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002972:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <MX_GPIO_Init+0x108>)
 8002974:	2102      	movs	r1, #2
 8002976:	430a      	orrs	r2, r1
 8002978:	635a      	str	r2, [r3, #52]	; 0x34
 800297a:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <MX_GPIO_Init+0x108>)
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297e:	2202      	movs	r2, #2
 8002980:	4013      	ands	r3, r2
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <MX_GPIO_Init+0x108>)
 8002988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <MX_GPIO_Init+0x108>)
 800298c:	2104      	movs	r1, #4
 800298e:	430a      	orrs	r2, r1
 8002990:	635a      	str	r2, [r3, #52]	; 0x34
 8002992:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <MX_GPIO_Init+0x108>)
 8002994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002996:	2204      	movs	r2, #4
 8002998:	4013      	ands	r3, r2
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|Analog_Enable_Pin, GPIO_PIN_RESET);
 800299e:	2390      	movs	r3, #144	; 0x90
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	482a      	ldr	r0, [pc, #168]	; (8002a4c <MX_GPIO_Init+0x10c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	0019      	movs	r1, r3
 80029a8:	f001 feda 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Analog_Select_Pin|Analog_SelectA9_Pin, GPIO_PIN_RESET);
 80029ac:	23c0      	movs	r3, #192	; 0xc0
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	23a0      	movs	r3, #160	; 0xa0
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	2200      	movs	r2, #0
 80029b6:	0018      	movs	r0, r3
 80029b8:	f001 fed2 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|Analog_SelectC7_Pin, GPIO_PIN_RESET);
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <MX_GPIO_Init+0x110>)
 80029be:	2200      	movs	r2, #0
 80029c0:	21c0      	movs	r1, #192	; 0xc0
 80029c2:	0018      	movs	r0, r3
 80029c4:	f001 fecc 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 Analog_Enable_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|Analog_Enable_Pin;
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	2290      	movs	r2, #144	; 0x90
 80029cc:	0212      	lsls	r2, r2, #8
 80029ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	2201      	movs	r2, #1
 80029d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029dc:	193b      	adds	r3, r7, r4
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <MX_GPIO_Init+0x10c>)
 80029e6:	0019      	movs	r1, r3
 80029e8:	0010      	movs	r0, r2
 80029ea:	f001 fd55 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : Analog_Select_Pin Analog_SelectA9_Pin */
  GPIO_InitStruct.Pin = Analog_Select_Pin|Analog_SelectA9_Pin;
 80029ee:	0021      	movs	r1, r4
 80029f0:	187b      	adds	r3, r7, r1
 80029f2:	22c0      	movs	r2, #192	; 0xc0
 80029f4:	0092      	lsls	r2, r2, #2
 80029f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029f8:	000c      	movs	r4, r1
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	2201      	movs	r2, #1
 80029fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0c:	193a      	adds	r2, r7, r4
 8002a0e:	23a0      	movs	r3, #160	; 0xa0
 8002a10:	05db      	lsls	r3, r3, #23
 8002a12:	0011      	movs	r1, r2
 8002a14:	0018      	movs	r0, r3
 8002a16:	f001 fd3f 	bl	8004498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 Analog_SelectC7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|Analog_SelectC7_Pin;
 8002a1a:	0021      	movs	r1, r4
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	22c0      	movs	r2, #192	; 0xc0
 8002a20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2201      	movs	r2, #1
 8002a26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2e:	187b      	adds	r3, r7, r1
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a34:	187b      	adds	r3, r7, r1
 8002a36:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <MX_GPIO_Init+0x110>)
 8002a38:	0019      	movs	r1, r3
 8002a3a:	0010      	movs	r0, r2
 8002a3c:	f001 fd2c 	bl	8004498 <HAL_GPIO_Init>

}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b009      	add	sp, #36	; 0x24
 8002a46:	bd90      	pop	{r4, r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	50000400 	.word	0x50000400
 8002a50:	50000800 	.word	0x50000800

08002a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a58:	b672      	cpsid	i
}
 8002a5a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <Error_Handler+0x8>

08002a5e <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c) {
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
    SMBus *smbus = malloc(sizeof(SMBus));
 8002a66:	2024      	movs	r0, #36	; 0x24
 8002a68:	f004 ffb6 	bl	80079d8 <malloc>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
    smbus->DMA = TRUE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2223      	movs	r2, #35	; 0x23
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3305      	adds	r3, #5
 8002a82:	221e      	movs	r2, #30
 8002a84:	2100      	movs	r1, #0
 8002a86:	0018      	movs	r0, r3
 8002a88:	f004 ffb9 	bl	80079fe <memset>

    return smbus;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
}
 8002a8e:	0018      	movs	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b004      	add	sp, #16
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <disable_DMA>:

void disable_DMA(SMBus *smbus) {
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
    smbus->DMA = FALSE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2223      	movs	r2, #35	; 0x23
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	5499      	strb	r1, [r3, r2]
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b002      	add	sp, #8
 8002aac:	bd80      	pop	{r7, pc}

08002aae <read_word_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
    }
    _check_error(smbus);
}

long read_word_data(SMBus *smbus, uint8_t addr, char cmd) {
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af02      	add	r7, sp, #8
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	0008      	movs	r0, r1
 8002ab8:	0011      	movs	r1, r2
 8002aba:	1cfb      	adds	r3, r7, #3
 8002abc:	1c02      	adds	r2, r0, #0
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	1cbb      	adds	r3, r7, #2
 8002ac2:	1c0a      	adds	r2, r1, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	1cba      	adds	r2, r7, #2
 8002aca:	7812      	ldrb	r2, [r2, #0]
 8002acc:	715a      	strb	r2, [r3, #5]
    if (!smbus->DMA) {
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2223      	movs	r2, #35	; 0x23
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d113      	bne.n	8002b00 <read_word_data+0x52>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, HAL_MAX_DELAY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	1cfb      	adds	r3, r7, #3
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	18db      	adds	r3, r3, r3
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	1d5a      	adds	r2, r3, #5
 8002aea:	2301      	movs	r3, #1
 8002aec:	425b      	negs	r3, r3
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2301      	movs	r3, #1
 8002af2:	f001 fee9 	bl	80048c8 <HAL_I2C_Master_Transmit>
 8002af6:	0003      	movs	r3, r0
 8002af8:	001a      	movs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	711a      	strb	r2, [r3, #4]
 8002afe:	e00f      	b.n	8002b20 <read_word_data+0x72>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	1cfb      	adds	r3, r7, #3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	18db      	adds	r3, r3, r3
 8002b0c:	b299      	uxth	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	1d5a      	adds	r2, r3, #5
 8002b12:	2301      	movs	r3, #1
 8002b14:	f002 f8e8 	bl	8004ce8 <HAL_I2C_Master_Transmit_DMA>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	711a      	strb	r2, [r3, #4]
    }
    _check_error(smbus);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 f840 	bl	8002ba8 <_check_error>

    //reads from address sent above
    if (!smbus->DMA){
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2223      	movs	r2, #35	; 0x23
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <read_word_data+0xb2>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 2, HAL_MAX_DELAY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	1cfb      	adds	r3, r7, #3
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	b21b      	sxth	r3, r3
 8002b3e:	2201      	movs	r2, #1
 8002b40:	4313      	orrs	r3, r2
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	b299      	uxth	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1d5a      	adds	r2, r3, #5
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	425b      	negs	r3, r3
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2302      	movs	r3, #2
 8002b52:	f001 ffc1 	bl	8004ad8 <HAL_I2C_Master_Receive>
 8002b56:	0003      	movs	r3, r0
 8002b58:	001a      	movs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	711a      	strb	r2, [r3, #4]
 8002b5e:	e012      	b.n	8002b86 <read_word_data+0xd8>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	1cfb      	adds	r3, r7, #3
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	b21b      	sxth	r3, r3
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b21b      	sxth	r3, r3
 8002b72:	b299      	uxth	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	1d5a      	adds	r2, r3, #5
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f002 f9bb 	bl	8004ef4 <HAL_I2C_Master_Receive_DMA>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	001a      	movs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	711a      	strb	r2, [r3, #4]
    }
    _check_error(smbus);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f80d 	bl	8002ba8 <_check_error>

    long data = smbus->buf[0] | (smbus->buf[1] << 8);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	795b      	ldrb	r3, [r3, #5]
 8002b92:	001a      	movs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	799b      	ldrb	r3, [r3, #6]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
    return data;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_check_error>:
    }

    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	791b      	ldrb	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <_check_error+0x2c>
        strcpy((char*)smbus->buf, "Err \r\n");
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1d5a      	adds	r2, r3, #5
 8002bbc:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <_check_error+0x38>)
 8002bbe:	0010      	movs	r0, r2
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	f004 ff11 	bl	80079ec <memcpy>

//        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), HAL_MAX_DELAY);
        HAL_Delay(10);
 8002bca:	200a      	movs	r0, #10
 8002bcc:	f000 faf8 	bl	80031c0 <HAL_Delay>
        return FALSE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e000      	b.n	8002bd6 <_check_error+0x2e>
    }
    return TRUE;
 8002bd4:	2301      	movs	r3, #1
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	08007b2c 	.word	0x08007b2c

08002be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_MspInit+0x44>)
 8002bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_MspInit+0x44>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_MspInit+0x44>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_MspInit+0x44>)
 8002c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <HAL_MspInit+0x44>)
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	0549      	lsls	r1, r1, #21
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_MspInit+0x44>)
 8002c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	055b      	lsls	r3, r3, #21
 8002c18:	4013      	ands	r3, r2
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	46bd      	mov	sp, r7
 8002c22:	b002      	add	sp, #8
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	40021000 	.word	0x40021000

08002c2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b08b      	sub	sp, #44	; 0x2c
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c34:	2414      	movs	r4, #20
 8002c36:	193b      	adds	r3, r7, r4
 8002c38:	0018      	movs	r0, r3
 8002c3a:	2314      	movs	r3, #20
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f004 fedd 	bl	80079fe <memset>
  if(hadc->Instance==ADC1)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a18      	ldr	r2, [pc, #96]	; (8002cac <HAL_ADC_MspInit+0x80>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d129      	bne.n	8002ca2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_ADC_MspInit+0x84>)
 8002c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <HAL_ADC_MspInit+0x84>)
 8002c54:	2180      	movs	r1, #128	; 0x80
 8002c56:	0349      	lsls	r1, r1, #13
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c5c:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_ADC_MspInit+0x84>)
 8002c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c60:	2380      	movs	r3, #128	; 0x80
 8002c62:	035b      	lsls	r3, r3, #13
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_ADC_MspInit+0x84>)
 8002c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <HAL_ADC_MspInit+0x84>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	430a      	orrs	r2, r1
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_ADC_MspInit+0x84>)
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	2203      	movs	r2, #3
 8002c86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c88:	193b      	adds	r3, r7, r4
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	193b      	adds	r3, r7, r4
 8002c90:	2200      	movs	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	193a      	adds	r2, r7, r4
 8002c96:	23a0      	movs	r3, #160	; 0xa0
 8002c98:	05db      	lsls	r3, r3, #23
 8002c9a:	0011      	movs	r1, r2
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f001 fbfb 	bl	8004498 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b00b      	add	sp, #44	; 0x2c
 8002ca8:	bd90      	pop	{r4, r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	40012400 	.word	0x40012400
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b08d      	sub	sp, #52	; 0x34
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	241c      	movs	r4, #28
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	2314      	movs	r3, #20
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f004 fe99 	bl	80079fe <memset>
  if(hi2c->Instance==I2C1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a46      	ldr	r2, [pc, #280]	; (8002dec <HAL_I2C_MspInit+0x138>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d150      	bne.n	8002d78 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cda:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002cdc:	2101      	movs	r1, #1
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
 8002cec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cee:	4b40      	ldr	r3, [pc, #256]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfe:	2202      	movs	r2, #2
 8002d00:	4013      	ands	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	00d2      	lsls	r2, r2, #3
 8002d0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	2212      	movs	r2, #18
 8002d12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	193a      	adds	r2, r7, r4
 8002d22:	23a0      	movs	r3, #160	; 0xa0
 8002d24:	05db      	lsls	r3, r3, #23
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f001 fbb5 	bl	8004498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d2e:	0021      	movs	r1, r4
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	2212      	movs	r2, #18
 8002d3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	187b      	adds	r3, r7, r1
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	187b      	adds	r3, r7, r1
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	2206      	movs	r2, #6
 8002d4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4e:	187b      	adds	r3, r7, r1
 8002d50:	4a28      	ldr	r2, [pc, #160]	; (8002df4 <HAL_I2C_MspInit+0x140>)
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f001 fb9f 	bl	8004498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d5a:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	0389      	lsls	r1, r1, #14
 8002d64:	430a      	orrs	r2, r1
 8002d66:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d68:	4b21      	ldr	r3, [pc, #132]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d6c:	2380      	movs	r3, #128	; 0x80
 8002d6e:	039b      	lsls	r3, r3, #14
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d76:	e035      	b.n	8002de4 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	; (8002df8 <HAL_I2C_MspInit+0x144>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d130      	bne.n	8002de4 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d82:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002d88:	2102      	movs	r1, #2
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	2202      	movs	r2, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d9a:	211c      	movs	r1, #28
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	22c0      	movs	r2, #192	; 0xc0
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2212      	movs	r2, #18
 8002da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2206      	movs	r2, #6
 8002dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <HAL_I2C_MspInit+0x140>)
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	0010      	movs	r0, r2
 8002dc4:	f001 fb68 	bl	8004498 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dcc:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002dce:	2180      	movs	r1, #128	; 0x80
 8002dd0:	03c9      	lsls	r1, r1, #15
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_I2C_MspInit+0x13c>)
 8002dd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	03db      	lsls	r3, r3, #15
 8002dde:	4013      	ands	r3, r2
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b00d      	add	sp, #52	; 0x34
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	40005400 	.word	0x40005400
 8002df0:	40021000 	.word	0x40021000
 8002df4:	50000400 	.word	0x50000400
 8002df8:	40005800 	.word	0x40005800

08002dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <NMI_Handler+0x4>

08002e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e06:	e7fe      	b.n	8002e06 <HardFault_Handler+0x4>

08002e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e20:	f000 f9b2 	bl	8003188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <_sbrk+0x5c>)
 8002e36:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <_sbrk+0x60>)
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e40:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <_sbrk+0x64>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <_sbrk+0x64>)
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <_sbrk+0x68>)
 8002e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	18d3      	adds	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d207      	bcs.n	8002e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e5c:	f004 fd92 	bl	8007984 <__errno>
 8002e60:	0003      	movs	r3, r0
 8002e62:	220c      	movs	r2, #12
 8002e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	425b      	negs	r3, r3
 8002e6a:	e009      	b.n	8002e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <_sbrk+0x64>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <_sbrk+0x64>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	18d2      	adds	r2, r2, r3
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <_sbrk+0x64>)
 8002e7c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b006      	add	sp, #24
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20004800 	.word	0x20004800
 8002e8c:	00000400 	.word	0x00000400
 8002e90:	2000008c 	.word	0x2000008c
 8002e94:	20000210 	.word	0x20000210

08002e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <new_thermal_sensor>:
//
//
// All Public Functions

// EFFECTS: Create a new ThermalSensor struct and returns pointer to struct.
ThermalSensor* new_thermal_sensor(SMBus* _i2cBus, uint8_t A0, uint8_t A1, uint8_t A2){
 8002ea2:	b590      	push	{r4, r7, lr}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
 8002eaa:	000c      	movs	r4, r1
 8002eac:	0010      	movs	r0, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	1cfb      	adds	r3, r7, #3
 8002eb2:	1c22      	adds	r2, r4, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	1cbb      	adds	r3, r7, #2
 8002eb8:	1c02      	adds	r2, r0, #0
 8002eba:	701a      	strb	r2, [r3, #0]
 8002ebc:	1c7b      	adds	r3, r7, #1
 8002ebe:	1c0a      	adds	r2, r1, #0
 8002ec0:	701a      	strb	r2, [r3, #0]

	// Create a new struct
	ThermalSensor* _thermal_sensor = (ThermalSensor*) malloc(sizeof(ThermalSensor));
 8002ec2:	2008      	movs	r0, #8
 8002ec4:	f004 fd88 	bl	80079d8 <malloc>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	60fb      	str	r3, [r7, #12]

	// Initialize the struct
	_thermal_sensor->address = 0b0011000;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2218      	movs	r2, #24
 8002ed0:	601a      	str	r2, [r3, #0]
	if (A0) _thermal_sensor->address |= 0b001;
 8002ed2:	1cfb      	adds	r3, r7, #3
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <new_thermal_sensor+0x44>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	601a      	str	r2, [r3, #0]
	if (A1) _thermal_sensor->address |= 0b010;
 8002ee6:	1cbb      	adds	r3, r7, #2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <new_thermal_sensor+0x58>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	601a      	str	r2, [r3, #0]
	if (A2) _thermal_sensor->address |= 0b100;
 8002efa:	1c7b      	adds	r3, r7, #1
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <new_thermal_sensor+0x6c>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2204      	movs	r2, #4
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	601a      	str	r2, [r3, #0]

	_thermal_sensor->i2cBus = _i2cBus;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	605a      	str	r2, [r3, #4]

	return _thermal_sensor;
 8002f14:	68fb      	ldr	r3, [r7, #12]
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	b005      	add	sp, #20
 8002f1c:	bd90      	pop	{r4, r7, pc}
	...

08002f20 <get_thermal_data>:

// EFFECTS: Get temperature data from a thermal sensor in Celsius
float get_thermal_data(const ThermalSensor* _thermal_sensor){
 8002f20:	b5b0      	push	{r4, r5, r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

	int specific_address = _thermal_sensor->address;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]

	// rawData is the data for the ambient
	// 0b000000101 is 0x05
	float rawData = read_word_data(_thermal_sensor->i2cBus, specific_address, 0b000000101);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	b2d1      	uxtb	r1, r2
 8002f36:	2205      	movs	r2, #5
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f7ff fdb8 	bl	8002aae <read_word_data>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7fd fbad 	bl	80006a0 <__aeabi_i2f>
 8002f46:	1c03      	adds	r3, r0, #0
 8002f48:	617b      	str	r3, [r7, #20]

	float lower_byte = (int)rawData & 0xFF;; // original && 0000000...111111111
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f7fd fb88 	bl	8000660 <__aeabi_f2iz>
 8002f50:	0003      	movs	r3, r0
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	4013      	ands	r3, r2
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7fd fba2 	bl	80006a0 <__aeabi_i2f>
 8002f5c:	1c03      	adds	r3, r0, #0
 8002f5e:	613b      	str	r3, [r7, #16]
	float upper_byte = ((int)rawData & 0xFF00) >> 8;; // original bit shifted
 8002f60:	6978      	ldr	r0, [r7, #20]
 8002f62:	f7fd fb7d 	bl	8000660 <__aeabi_f2iz>
 8002f66:	0003      	movs	r3, r0
 8002f68:	121b      	asrs	r3, r3, #8
 8002f6a:	22ff      	movs	r2, #255	; 0xff
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7fd fb96 	bl	80006a0 <__aeabi_i2f>
 8002f74:	1c03      	adds	r3, r0, #0
 8002f76:	60fb      	str	r3, [r7, #12]

	// Clear flag bits
	upper_byte = (int)upper_byte & 0x1F;
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f7fd fb71 	bl	8000660 <__aeabi_f2iz>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	221f      	movs	r2, #31
 8002f82:	4013      	ands	r3, r2
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd fb8b 	bl	80006a0 <__aeabi_i2f>
 8002f8a:	1c03      	adds	r3, r0, #0
 8002f8c:	60fb      	str	r3, [r7, #12]

	// If the sign bit is zero,
	// then the ambient temperature is greater than 0 celsius.
	// If the sign bit is one,
	// then the ambient temperature is less than 0 celsius.
	int sign_bit = ((int)upper_byte & 0x10) >> 4;
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7fd fb66 	bl	8000660 <__aeabi_f2iz>
 8002f94:	0003      	movs	r3, r0
 8002f96:	111b      	asrs	r3, r3, #4
 8002f98:	2201      	movs	r2, #1
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60bb      	str	r3, [r7, #8]
	
	float actual_temperature = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
	if (sign_bit) {
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d031      	beq.n	800300c <get_thermal_data+0xec>
		upper_byte = (int)upper_byte & 0x0F;
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7fd fb59 	bl	8000660 <__aeabi_f2iz>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f7fd fb73 	bl	80006a0 <__aeabi_i2f>
 8002fba:	1c03      	adds	r3, r0, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
		actual_temperature = (float)256 - ((float)upper_byte * (float)16 + (1.0 / 16.0) * (float)lower_byte);
 8002fbe:	2183      	movs	r1, #131	; 0x83
 8002fc0:	05c9      	lsls	r1, r1, #23
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7fd fa32 	bl	800042c <__aeabi_fmul>
 8002fc8:	1c03      	adds	r3, r0, #0
 8002fca:	1c18      	adds	r0, r3, #0
 8002fcc:	f7ff f824 	bl	8002018 <__aeabi_f2d>
 8002fd0:	0004      	movs	r4, r0
 8002fd2:	000d      	movs	r5, r1
 8002fd4:	6938      	ldr	r0, [r7, #16]
 8002fd6:	f7ff f81f 	bl	8002018 <__aeabi_f2d>
 8002fda:	2200      	movs	r2, #0
 8002fdc:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <get_thermal_data+0x138>)
 8002fde:	f7fe f9f7 	bl	80013d0 <__aeabi_dmul>
 8002fe2:	0002      	movs	r2, r0
 8002fe4:	000b      	movs	r3, r1
 8002fe6:	0020      	movs	r0, r4
 8002fe8:	0029      	movs	r1, r5
 8002fea:	f7fd fb9f 	bl	800072c <__aeabi_dadd>
 8002fee:	0002      	movs	r2, r0
 8002ff0:	000b      	movs	r3, r1
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	4919      	ldr	r1, [pc, #100]	; (800305c <get_thermal_data+0x13c>)
 8002ff6:	f7fe fc57 	bl	80018a8 <__aeabi_dsub>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	000b      	movs	r3, r1
 8002ffe:	0010      	movs	r0, r2
 8003000:	0019      	movs	r1, r3
 8003002:	f7ff f851 	bl	80020a8 <__aeabi_d2f>
 8003006:	1c03      	adds	r3, r0, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e01f      	b.n	800304c <get_thermal_data+0x12c>
	}
	else {
		actual_temperature = (float)upper_byte * (float)16 + (1.0 / 16.0) * (float)lower_byte;
 800300c:	2183      	movs	r1, #131	; 0x83
 800300e:	05c9      	lsls	r1, r1, #23
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7fd fa0b 	bl	800042c <__aeabi_fmul>
 8003016:	1c03      	adds	r3, r0, #0
 8003018:	1c18      	adds	r0, r3, #0
 800301a:	f7fe fffd 	bl	8002018 <__aeabi_f2d>
 800301e:	0004      	movs	r4, r0
 8003020:	000d      	movs	r5, r1
 8003022:	6938      	ldr	r0, [r7, #16]
 8003024:	f7fe fff8 	bl	8002018 <__aeabi_f2d>
 8003028:	2200      	movs	r2, #0
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <get_thermal_data+0x138>)
 800302c:	f7fe f9d0 	bl	80013d0 <__aeabi_dmul>
 8003030:	0002      	movs	r2, r0
 8003032:	000b      	movs	r3, r1
 8003034:	0020      	movs	r0, r4
 8003036:	0029      	movs	r1, r5
 8003038:	f7fd fb78 	bl	800072c <__aeabi_dadd>
 800303c:	0002      	movs	r2, r0
 800303e:	000b      	movs	r3, r1
 8003040:	0010      	movs	r0, r2
 8003042:	0019      	movs	r1, r3
 8003044:	f7ff f830 	bl	80020a8 <__aeabi_d2f>
 8003048:	1c03      	adds	r3, r0, #0
 800304a:	61fb      	str	r3, [r7, #28]
	}
	return actual_temperature;
 800304c:	69fb      	ldr	r3, [r7, #28]
}
 800304e:	1c18      	adds	r0, r3, #0
 8003050:	46bd      	mov	sp, r7
 8003052:	b008      	add	sp, #32
 8003054:	bdb0      	pop	{r4, r5, r7, pc}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	3fb00000 	.word	0x3fb00000
 800305c:	40700000 	.word	0x40700000

08003060 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003060:	480d      	ldr	r0, [pc, #52]	; (8003098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003062:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003064:	f7ff ff18 	bl	8002e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <LoopForever+0x6>)
  ldr r1, =_edata
 800306a:	490d      	ldr	r1, [pc, #52]	; (80030a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <LoopForever+0xe>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003080:	4c0a      	ldr	r4, [pc, #40]	; (80030ac <LoopForever+0x16>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800308e:	f004 fc7f 	bl	8007990 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003092:	f7ff fa59 	bl	8002548 <main>

08003096 <LoopForever>:

LoopForever:
  b LoopForever
 8003096:	e7fe      	b.n	8003096 <LoopForever>
  ldr   r0, =_estack
 8003098:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 800309c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80030a4:	08007cbc 	.word	0x08007cbc
  ldr r2, =_sbss
 80030a8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80030ac:	2000020c 	.word	0x2000020c

080030b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030b0:	e7fe      	b.n	80030b0 <ADC1_IRQHandler>
	...

080030b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	2200      	movs	r2, #0
 80030be:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_Init+0x3c>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_Init+0x3c>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	0049      	lsls	r1, r1, #1
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030ce:	2003      	movs	r0, #3
 80030d0:	f000 f810 	bl	80030f4 <HAL_InitTick>
 80030d4:	1e03      	subs	r3, r0, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	e001      	b.n	80030e4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80030e0:	f7ff fd80 	bl	8002be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030e4:	1dfb      	adds	r3, r7, #7
 80030e6:	781b      	ldrb	r3, [r3, #0]
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40022000 	.word	0x40022000

080030f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_InitTick+0x88>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d02b      	beq.n	8003164 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800310c:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <HAL_InitTick+0x8c>)
 800310e:	681c      	ldr	r4, [r3, #0]
 8003110:	4b1a      	ldr	r3, [pc, #104]	; (800317c <HAL_InitTick+0x88>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	0019      	movs	r1, r3
 8003116:	23fa      	movs	r3, #250	; 0xfa
 8003118:	0098      	lsls	r0, r3, #2
 800311a:	f7fc ffef 	bl	80000fc <__udivsi3>
 800311e:	0003      	movs	r3, r0
 8003120:	0019      	movs	r1, r3
 8003122:	0020      	movs	r0, r4
 8003124:	f7fc ffea 	bl	80000fc <__udivsi3>
 8003128:	0003      	movs	r3, r0
 800312a:	0018      	movs	r0, r3
 800312c:	f001 f86b 	bl	8004206 <HAL_SYSTICK_Config>
 8003130:	1e03      	subs	r3, r0, #0
 8003132:	d112      	bne.n	800315a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b03      	cmp	r3, #3
 8003138:	d80a      	bhi.n	8003150 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	2301      	movs	r3, #1
 800313e:	425b      	negs	r3, r3
 8003140:	2200      	movs	r2, #0
 8003142:	0018      	movs	r0, r3
 8003144:	f001 f84a 	bl	80041dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <HAL_InitTick+0x90>)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e00d      	b.n	800316c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003150:	230f      	movs	r3, #15
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e008      	b.n	800316c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800315a:	230f      	movs	r3, #15
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e003      	b.n	800316c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003164:	230f      	movs	r3, #15
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800316c:	230f      	movs	r3, #15
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	781b      	ldrb	r3, [r3, #0]
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b005      	add	sp, #20
 8003178:	bd90      	pop	{r4, r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	20000008 	.word	0x20000008
 8003180:	20000000 	.word	0x20000000
 8003184:	20000004 	.word	0x20000004

08003188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_IncTick+0x1c>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	001a      	movs	r2, r3
 8003192:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <HAL_IncTick+0x20>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	18d2      	adds	r2, r2, r3
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_IncTick+0x20>)
 800319a:	601a      	str	r2, [r3, #0]
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	20000008 	.word	0x20000008
 80031a8:	200001f8 	.word	0x200001f8

080031ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  return uwTick;
 80031b0:	4b02      	ldr	r3, [pc, #8]	; (80031bc <HAL_GetTick+0x10>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	200001f8 	.word	0x200001f8

080031c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031c8:	f7ff fff0 	bl	80031ac <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	d005      	beq.n	80031e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_Delay+0x44>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	001a      	movs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	f7ff ffe0 	bl	80031ac <HAL_GetTick>
 80031ec:	0002      	movs	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d8f7      	bhi.n	80031e8 <HAL_Delay+0x28>
  {
  }
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20000008 	.word	0x20000008

08003208 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a05      	ldr	r2, [pc, #20]	; (800322c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003218:	401a      	ands	r2, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	601a      	str	r2, [r3, #0]
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b002      	add	sp, #8
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	fe3fffff 	.word	0xfe3fffff

08003230 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	23e0      	movs	r3, #224	; 0xe0
 800323e:	045b      	lsls	r3, r3, #17
 8003240:	4013      	ands	r3, r2
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}

0800324a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	2104      	movs	r1, #4
 800325e:	400a      	ands	r2, r1
 8003260:	2107      	movs	r1, #7
 8003262:	4091      	lsls	r1, r2
 8003264:	000a      	movs	r2, r1
 8003266:	43d2      	mvns	r2, r2
 8003268:	401a      	ands	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2104      	movs	r1, #4
 800326e:	400b      	ands	r3, r1
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4099      	lsls	r1, r3
 8003274:	000b      	movs	r3, r1
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b004      	add	sp, #16
 8003282:	bd80      	pop	{r7, pc}

08003284 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	23c0      	movs	r3, #192	; 0xc0
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	4013      	ands	r3, r2
 8003296:	d101      	bne.n	800329c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800329c:	2300      	movs	r3, #0
}
 800329e:	0018      	movs	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	b002      	add	sp, #8
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	211f      	movs	r1, #31
 80032ba:	400a      	ands	r2, r1
 80032bc:	210f      	movs	r1, #15
 80032be:	4091      	lsls	r1, r2
 80032c0:	000a      	movs	r2, r1
 80032c2:	43d2      	mvns	r2, r2
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0e9b      	lsrs	r3, r3, #26
 80032ca:	210f      	movs	r1, #15
 80032cc:	4019      	ands	r1, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	201f      	movs	r0, #31
 80032d2:	4003      	ands	r3, r0
 80032d4:	4099      	lsls	r1, r3
 80032d6:	000b      	movs	r3, r1
 80032d8:	431a      	orrs	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b004      	add	sp, #16
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b082      	sub	sp, #8
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	035b      	lsls	r3, r3, #13
 80032f8:	0b5b      	lsrs	r3, r3, #13
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	0352      	lsls	r2, r2, #13
 800331a:	0b52      	lsrs	r2, r2, #13
 800331c:	43d2      	mvns	r2, r2
 800331e:	401a      	ands	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	0212      	lsls	r2, r2, #8
 8003340:	43d2      	mvns	r2, r2
 8003342:	401a      	ands	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	400b      	ands	r3, r1
 800334c:	4904      	ldr	r1, [pc, #16]	; (8003360 <LL_ADC_SetChannelSamplingTime+0x34>)
 800334e:	400b      	ands	r3, r1
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b004      	add	sp, #16
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	07ffff00 	.word	0x07ffff00

08003364 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	4a05      	ldr	r2, [pc, #20]	; (8003388 <LL_ADC_EnableInternalRegulator+0x24>)
 8003372:	4013      	ands	r3, r2
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	0552      	lsls	r2, r2, #21
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b002      	add	sp, #8
 8003384:	bd80      	pop	{r7, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	6fffffe8 	.word	0x6fffffe8

0800338c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	055b      	lsls	r3, r3, #21
 800339c:	401a      	ands	r2, r3
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	055b      	lsls	r3, r3, #21
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d101      	bne.n	80033aa <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <LL_ADC_Enable+0x20>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	2201      	movs	r2, #1
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b002      	add	sp, #8
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	7fffffe8 	.word	0x7fffffe8

080033d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <LL_ADC_Disable+0x20>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	2202      	movs	r2, #2
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b002      	add	sp, #8
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	7fffffe8 	.word	0x7fffffe8

080033fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2201      	movs	r2, #1
 800340a:	4013      	ands	r3, r2
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <LL_ADC_IsEnabled+0x18>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <LL_ADC_IsEnabled+0x1a>
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}

0800341e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2202      	movs	r2, #2
 800342c:	4013      	ands	r3, r2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d101      	bne.n	8003436 <LL_ADC_IsDisableOngoing+0x18>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <LL_ADC_IsDisableOngoing+0x1a>
 8003436:	2300      	movs	r3, #0
}
 8003438:	0018      	movs	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	b002      	add	sp, #8
 800343e:	bd80      	pop	{r7, pc}

08003440 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <LL_ADC_REG_StartConversion+0x20>)
 800344e:	4013      	ands	r3, r2
 8003450:	2204      	movs	r2, #4
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003458:	46c0      	nop			; (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}
 8003460:	7fffffe8 	.word	0x7fffffe8

08003464 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <LL_ADC_REG_StopConversion+0x20>)
 8003472:	4013      	ands	r3, r2
 8003474:	2210      	movs	r2, #16
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}
 8003484:	7fffffe8 	.word	0x7fffffe8

08003488 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2204      	movs	r2, #4
 8003496:	4013      	ands	r3, r2
 8003498:	2b04      	cmp	r3, #4
 800349a:	d101      	bne.n	80034a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b002      	add	sp, #8
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b4:	231f      	movs	r3, #31
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e1b1      	b.n	8003836 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0018      	movs	r0, r3
 80034de:	f7ff fba5 	bl	8002c2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2254      	movs	r2, #84	; 0x54
 80034ec:	2100      	movs	r1, #0
 80034ee:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7ff ff49 	bl	800338c <LL_ADC_IsInternalRegulatorEnabled>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d115      	bne.n	800352a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0018      	movs	r0, r3
 8003504:	f7ff ff2e 	bl	8003364 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003508:	4bcd      	ldr	r3, [pc, #820]	; (8003840 <HAL_ADC_Init+0x394>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	49cd      	ldr	r1, [pc, #820]	; (8003844 <HAL_ADC_Init+0x398>)
 800350e:	0018      	movs	r0, r3
 8003510:	f7fc fdf4 	bl	80000fc <__udivsi3>
 8003514:	0003      	movs	r3, r0
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800351c:	e002      	b.n	8003524 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3b01      	subs	r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff ff2c 	bl	800338c <LL_ADC_IsInternalRegulatorEnabled>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d10f      	bne.n	8003558 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	2210      	movs	r2, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003548:	2201      	movs	r2, #1
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003550:	231f      	movs	r3, #31
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff ff93 	bl	8003488 <LL_ADC_REG_IsConversionOngoing>
 8003562:	0003      	movs	r3, r0
 8003564:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	2210      	movs	r2, #16
 800356c:	4013      	ands	r3, r2
 800356e:	d000      	beq.n	8003572 <HAL_ADC_Init+0xc6>
 8003570:	e154      	b.n	800381c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d000      	beq.n	800357a <HAL_ADC_Init+0xce>
 8003578:	e150      	b.n	800381c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357e:	4ab2      	ldr	r2, [pc, #712]	; (8003848 <HAL_ADC_Init+0x39c>)
 8003580:	4013      	ands	r3, r2
 8003582:	2202      	movs	r2, #2
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	0018      	movs	r0, r3
 8003590:	f7ff ff34 	bl	80033fc <LL_ADC_IsEnabled>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d156      	bne.n	8003646 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2218      	movs	r2, #24
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0f9b      	lsrs	r3, r3, #30
 80035b6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035bc:	4313      	orrs	r3, r2
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	223c      	movs	r2, #60	; 0x3c
 80035c8:	5c9b      	ldrb	r3, [r3, r2]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d111      	bne.n	80035f2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0f9b      	lsrs	r3, r3, #30
 80035d4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80035da:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80035e0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80035e6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	2201      	movs	r2, #1
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	4a94      	ldr	r2, [pc, #592]	; (800384c <HAL_ADC_Init+0x3a0>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	430a      	orrs	r2, r1
 8003606:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	23c0      	movs	r3, #192	; 0xc0
 800360e:	061b      	lsls	r3, r3, #24
 8003610:	429a      	cmp	r2, r3
 8003612:	d018      	beq.n	8003646 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	05db      	lsls	r3, r3, #23
 800361c:	429a      	cmp	r2, r3
 800361e:	d012      	beq.n	8003646 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	061b      	lsls	r3, r3, #24
 8003628:	429a      	cmp	r2, r3
 800362a:	d00c      	beq.n	8003646 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800362c:	4b88      	ldr	r3, [pc, #544]	; (8003850 <HAL_ADC_Init+0x3a4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a88      	ldr	r2, [pc, #544]	; (8003854 <HAL_ADC_Init+0x3a8>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	23f0      	movs	r3, #240	; 0xf0
 800363c:	039b      	lsls	r3, r3, #14
 800363e:	401a      	ands	r2, r3
 8003640:	4b83      	ldr	r3, [pc, #524]	; (8003850 <HAL_ADC_Init+0x3a4>)
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7e1b      	ldrb	r3, [r3, #24]
 800364a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7e5b      	ldrb	r3, [r3, #25]
 8003650:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003652:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7e9b      	ldrb	r3, [r3, #26]
 8003658:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800365a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_ADC_Init+0x1be>
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	015b      	lsls	r3, r3, #5
 8003668:	e000      	b.n	800366c <HAL_ADC_Init+0x1c0>
 800366a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800366c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003672:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	da04      	bge.n	8003686 <HAL_ADC_Init+0x1da>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	e001      	b.n	800368a <HAL_ADC_Init+0x1de>
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800368a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	212c      	movs	r1, #44	; 0x2c
 8003690:	5c5b      	ldrb	r3, [r3, r1]
 8003692:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003694:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	5c9b      	ldrb	r3, [r3, r2]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d115      	bne.n	80036d2 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7e9b      	ldrb	r3, [r3, #26]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d105      	bne.n	80036ba <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	0252      	lsls	r2, r2, #9
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e00b      	b.n	80036d2 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036be:	2220      	movs	r2, #32
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	2201      	movs	r2, #1
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036de:	23e0      	movs	r3, #224	; 0xe0
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80036e8:	4313      	orrs	r3, r2
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4a58      	ldr	r2, [pc, #352]	; (8003858 <HAL_ADC_Init+0x3ac>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	430a      	orrs	r2, r1
 8003704:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	4a53      	ldr	r2, [pc, #332]	; (800385c <HAL_ADC_Init+0x3b0>)
 800370e:	4013      	ands	r3, r2
 8003710:	0019      	movs	r1, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	430a      	orrs	r2, r1
 800371a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	001a      	movs	r2, r3
 8003726:	2100      	movs	r1, #0
 8003728:	f7ff fd8f 	bl	800324a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003734:	494a      	ldr	r1, [pc, #296]	; (8003860 <HAL_ADC_Init+0x3b4>)
 8003736:	001a      	movs	r2, r3
 8003738:	f7ff fd87 	bl	800324a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2110      	movs	r1, #16
 8003750:	4249      	negs	r1, r1
 8003752:	430a      	orrs	r2, r1
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
 8003756:	e03a      	b.n	80037ce <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	039b      	lsls	r3, r3, #14
 8003760:	429a      	cmp	r2, r3
 8003762:	d134      	bne.n	80037ce <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]
 8003768:	e00c      	b.n	8003784 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	40da      	lsrs	r2, r3
 8003774:	0013      	movs	r3, r2
 8003776:	220f      	movs	r2, #15
 8003778:	4013      	ands	r3, r2
 800377a:	2b0f      	cmp	r3, #15
 800377c:	d006      	beq.n	800378c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3301      	adds	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b07      	cmp	r3, #7
 8003788:	d9ef      	bls.n	800376a <HAL_ADC_Init+0x2be>
 800378a:	e000      	b.n	800378e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 800378c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d109      	bne.n	80037a8 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2110      	movs	r1, #16
 80037a0:	4249      	negs	r1, r1
 80037a2:	430a      	orrs	r2, r1
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
 80037a6:	e012      	b.n	80037ce <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	221c      	movs	r2, #28
 80037b8:	4013      	ands	r3, r2
 80037ba:	2210      	movs	r2, #16
 80037bc:	4252      	negs	r2, r2
 80037be:	409a      	lsls	r2, r3
 80037c0:	0011      	movs	r1, r2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4a23      	ldr	r2, [pc, #140]	; (8003864 <HAL_ADC_Init+0x3b8>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d10b      	bne.n	80037f6 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	2203      	movs	r2, #3
 80037ea:	4393      	bics	r3, r2
 80037ec:	2201      	movs	r2, #1
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80037f4:	e01c      	b.n	8003830 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	2212      	movs	r2, #18
 80037fc:	4393      	bics	r3, r2
 80037fe:	2210      	movs	r2, #16
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2201      	movs	r2, #1
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003812:	231f      	movs	r3, #31
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800381a:	e009      	b.n	8003830 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	2210      	movs	r2, #16
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003828:	231f      	movs	r3, #31
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003830:	231f      	movs	r3, #31
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	781b      	ldrb	r3, [r3, #0]
}
 8003836:	0018      	movs	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	b008      	add	sp, #32
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	20000000 	.word	0x20000000
 8003844:	00030d40 	.word	0x00030d40
 8003848:	fffffefd 	.word	0xfffffefd
 800384c:	1ffffc02 	.word	0x1ffffc02
 8003850:	40012708 	.word	0x40012708
 8003854:	ffc3ffff 	.word	0xffc3ffff
 8003858:	fffe0219 	.word	0xfffe0219
 800385c:	dffffc02 	.word	0xdffffc02
 8003860:	07ffff04 	.word	0x07ffff04
 8003864:	833fffe7 	.word	0x833fffe7

08003868 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003868:	b5b0      	push	{r4, r5, r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0018      	movs	r0, r3
 8003876:	f7ff fe07 	bl	8003488 <LL_ADC_REG_IsConversionOngoing>
 800387a:	1e03      	subs	r3, r0, #0
 800387c:	d135      	bne.n	80038ea <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2254      	movs	r2, #84	; 0x54
 8003882:	5c9b      	ldrb	r3, [r3, r2]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_ADC_Start+0x24>
 8003888:	2302      	movs	r3, #2
 800388a:	e035      	b.n	80038f8 <HAL_ADC_Start+0x90>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2254      	movs	r2, #84	; 0x54
 8003890:	2101      	movs	r1, #1
 8003892:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003894:	250f      	movs	r5, #15
 8003896:	197c      	adds	r4, r7, r5
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 fb28 	bl	8003ef0 <ADC_Enable>
 80038a0:	0003      	movs	r3, r0
 80038a2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038a4:	197b      	adds	r3, r7, r5
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d119      	bne.n	80038e0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	4a13      	ldr	r2, [pc, #76]	; (8003900 <HAL_ADC_Start+0x98>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	2280      	movs	r2, #128	; 0x80
 80038b6:	0052      	lsls	r2, r2, #1
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	221c      	movs	r2, #28
 80038ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2254      	movs	r2, #84	; 0x54
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	0018      	movs	r0, r3
 80038da:	f7ff fdb1 	bl	8003440 <LL_ADC_REG_StartConversion>
 80038de:	e008      	b.n	80038f2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2254      	movs	r2, #84	; 0x54
 80038e4:	2100      	movs	r1, #0
 80038e6:	5499      	strb	r1, [r3, r2]
 80038e8:	e003      	b.n	80038f2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038ea:	230f      	movs	r3, #15
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2202      	movs	r2, #2
 80038f0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80038f2:	230f      	movs	r3, #15
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	781b      	ldrb	r3, [r3, #0]
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b004      	add	sp, #16
 80038fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003900:	fffff0fe 	.word	0xfffff0fe

08003904 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003904:	b5b0      	push	{r4, r5, r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2254      	movs	r2, #84	; 0x54
 8003910:	5c9b      	ldrb	r3, [r3, r2]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_ADC_Stop+0x16>
 8003916:	2302      	movs	r3, #2
 8003918:	e029      	b.n	800396e <HAL_ADC_Stop+0x6a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2254      	movs	r2, #84	; 0x54
 800391e:	2101      	movs	r1, #1
 8003920:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003922:	250f      	movs	r5, #15
 8003924:	197c      	adds	r4, r7, r5
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	0018      	movs	r0, r3
 800392a:	f000 fa9f 	bl	8003e6c <ADC_ConversionStop>
 800392e:	0003      	movs	r3, r0
 8003930:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003932:	197b      	adds	r3, r7, r5
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d112      	bne.n	8003960 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800393a:	197c      	adds	r4, r7, r5
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	0018      	movs	r0, r3
 8003940:	f000 fb5c 	bl	8003ffc <ADC_Disable>
 8003944:	0003      	movs	r3, r0
 8003946:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003948:	197b      	adds	r3, r7, r5
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d107      	bne.n	8003960 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003954:	4a08      	ldr	r2, [pc, #32]	; (8003978 <HAL_ADC_Stop+0x74>)
 8003956:	4013      	ands	r3, r2
 8003958:	2201      	movs	r2, #1
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2254      	movs	r2, #84	; 0x54
 8003964:	2100      	movs	r1, #0
 8003966:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003968:	230f      	movs	r3, #15
 800396a:	18fb      	adds	r3, r7, r3
 800396c:	781b      	ldrb	r3, [r3, #0]
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bdb0      	pop	{r4, r5, r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	fffffefe 	.word	0xfffffefe

0800397c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	2b08      	cmp	r3, #8
 800398c:	d102      	bne.n	8003994 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800398e:	2308      	movs	r3, #8
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e00f      	b.n	80039b4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	4013      	ands	r3, r2
 800399e:	d007      	beq.n	80039b0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	2220      	movs	r2, #32
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e072      	b.n	8003a96 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80039b0:	2304      	movs	r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80039b4:	f7ff fbfa 	bl	80031ac <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039bc:	e01f      	b.n	80039fe <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	d01c      	beq.n	80039fe <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80039c4:	f7ff fbf2 	bl	80031ac <HAL_GetTick>
 80039c8:	0002      	movs	r2, r0
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <HAL_ADC_PollForConversion+0x5e>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d111      	bne.n	80039fe <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	d10b      	bne.n	80039fe <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	2204      	movs	r2, #4
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2254      	movs	r2, #84	; 0x54
 80039f6:	2100      	movs	r1, #0
 80039f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04b      	b.n	8003a96 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4013      	ands	r3, r2
 8003a08:	d0d9      	beq.n	80039be <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	0092      	lsls	r2, r2, #2
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7ff fc31 	bl	8003284 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a22:	1e03      	subs	r3, r0, #0
 8003a24:	d02e      	beq.n	8003a84 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7e9b      	ldrb	r3, [r3, #26]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d12a      	bne.n	8003a84 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2208      	movs	r2, #8
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d123      	bne.n	8003a84 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7ff fd21 	bl	8003488 <LL_ADC_REG_IsConversionOngoing>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d110      	bne.n	8003a6c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	210c      	movs	r1, #12
 8003a56:	438a      	bics	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <HAL_ADC_PollForConversion+0x124>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	2201      	movs	r2, #1
 8003a64:	431a      	orrs	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	659a      	str	r2, [r3, #88]	; 0x58
 8003a6a:	e00b      	b.n	8003a84 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	2220      	movs	r2, #32
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	7e1b      	ldrb	r3, [r3, #24]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d103      	bne.n	8003a94 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	220c      	movs	r2, #12
 8003a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	0018      	movs	r0, r3
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b004      	add	sp, #16
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	fffffefe 	.word	0xfffffefe

08003aa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac6:	2317      	movs	r3, #23
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2254      	movs	r2, #84	; 0x54
 8003ad6:	5c9b      	ldrb	r3, [r3, r2]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x24>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e1c0      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x3a6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2254      	movs	r2, #84	; 0x54
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f7ff fccb 	bl	8003488 <LL_ADC_REG_IsConversionOngoing>
 8003af2:	1e03      	subs	r3, r0, #0
 8003af4:	d000      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0x3c>
 8003af6:	e1a3      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d100      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x46>
 8003b00:	e143      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b12:	4ac1      	ldr	r2, [pc, #772]	; (8003e18 <HAL_ADC_ConfigChannel+0x35c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d108      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0019      	movs	r1, r3
 8003b22:	0010      	movs	r0, r2
 8003b24:	f7ff fbdf 	bl	80032e6 <LL_ADC_REG_SetSequencerChAdd>
 8003b28:	e0c9      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	211f      	movs	r1, #31
 8003b34:	400b      	ands	r3, r1
 8003b36:	210f      	movs	r1, #15
 8003b38:	4099      	lsls	r1, r3
 8003b3a:	000b      	movs	r3, r1
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	4013      	ands	r3, r2
 8003b40:	0019      	movs	r1, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	035b      	lsls	r3, r3, #13
 8003b48:	0b5b      	lsrs	r3, r3, #13
 8003b4a:	d105      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x9c>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0e9b      	lsrs	r3, r3, #26
 8003b52:	221f      	movs	r2, #31
 8003b54:	4013      	ands	r3, r2
 8003b56:	e098      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d000      	beq.n	8003b64 <HAL_ADC_ConfigChannel+0xa8>
 8003b62:	e091      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x1cc>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d000      	beq.n	8003b70 <HAL_ADC_ConfigChannel+0xb4>
 8003b6e:	e089      	b.n	8003c84 <HAL_ADC_ConfigChannel+0x1c8>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2204      	movs	r2, #4
 8003b76:	4013      	ands	r3, r2
 8003b78:	d000      	beq.n	8003b7c <HAL_ADC_ConfigChannel+0xc0>
 8003b7a:	e081      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x1c4>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2208      	movs	r2, #8
 8003b82:	4013      	ands	r3, r2
 8003b84:	d000      	beq.n	8003b88 <HAL_ADC_ConfigChannel+0xcc>
 8003b86:	e079      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x1c0>
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2210      	movs	r2, #16
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d000      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0xd8>
 8003b92:	e071      	b.n	8003c78 <HAL_ADC_ConfigChannel+0x1bc>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d000      	beq.n	8003ba0 <HAL_ADC_ConfigChannel+0xe4>
 8003b9e:	e069      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x1b8>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d000      	beq.n	8003bac <HAL_ADC_ConfigChannel+0xf0>
 8003baa:	e061      	b.n	8003c70 <HAL_ADC_ConfigChannel+0x1b4>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d000      	beq.n	8003bb8 <HAL_ADC_ConfigChannel+0xfc>
 8003bb6:	e059      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x1b0>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d151      	bne.n	8003c68 <HAL_ADC_ConfigChannel+0x1ac>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d149      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x1a8>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d141      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x1a4>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	4013      	ands	r3, r2
 8003be6:	d139      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x1a0>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	015b      	lsls	r3, r3, #5
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d131      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x19c>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	019b      	lsls	r3, r3, #6
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d129      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x198>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	01db      	lsls	r3, r3, #7
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d121      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x194>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	4013      	ands	r3, r2
 8003c16:	d119      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x190>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	025b      	lsls	r3, r3, #9
 8003c20:	4013      	ands	r3, r2
 8003c22:	d111      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x18c>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	029b      	lsls	r3, r3, #10
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d109      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x188>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	02db      	lsls	r3, r3, #11
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d001      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0x184>
 8003c3c:	2312      	movs	r3, #18
 8003c3e:	e024      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c40:	2300      	movs	r3, #0
 8003c42:	e022      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c44:	2311      	movs	r3, #17
 8003c46:	e020      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	e01e      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c4c:	230f      	movs	r3, #15
 8003c4e:	e01c      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c50:	230e      	movs	r3, #14
 8003c52:	e01a      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c54:	230d      	movs	r3, #13
 8003c56:	e018      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c58:	230c      	movs	r3, #12
 8003c5a:	e016      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c5c:	230b      	movs	r3, #11
 8003c5e:	e014      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c60:	230a      	movs	r3, #10
 8003c62:	e012      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c64:	2309      	movs	r3, #9
 8003c66:	e010      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	e00e      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c6c:	2307      	movs	r3, #7
 8003c6e:	e00c      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c70:	2306      	movs	r3, #6
 8003c72:	e00a      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c74:	2305      	movs	r3, #5
 8003c76:	e008      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	e006      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e004      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e002      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_ADC_ConfigChannel+0x1ce>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	6852      	ldr	r2, [r2, #4]
 8003c8e:	201f      	movs	r0, #31
 8003c90:	4002      	ands	r2, r0
 8003c92:	4093      	lsls	r3, r2
 8003c94:	000a      	movs	r2, r1
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	089b      	lsrs	r3, r3, #2
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d808      	bhi.n	8003cbe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	001a      	movs	r2, r3
 8003cba:	f7ff faf4 	bl	80032a6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	001a      	movs	r2, r3
 8003ccc:	f7ff fb2e 	bl	800332c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db00      	blt.n	8003cda <HAL_ADC_ConfigChannel+0x21e>
 8003cd8:	e0bc      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cda:	4b50      	ldr	r3, [pc, #320]	; (8003e1c <HAL_ADC_ConfigChannel+0x360>)
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7ff faa7 	bl	8003230 <LL_ADC_GetCommonPathInternalCh>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4d      	ldr	r2, [pc, #308]	; (8003e20 <HAL_ADC_ConfigChannel+0x364>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d122      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003cf8:	d11d      	bne.n	8003d36 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	0412      	lsls	r2, r2, #16
 8003d00:	4313      	orrs	r3, r2
 8003d02:	4a46      	ldr	r2, [pc, #280]	; (8003e1c <HAL_ADC_ConfigChannel+0x360>)
 8003d04:	0019      	movs	r1, r3
 8003d06:	0010      	movs	r0, r2
 8003d08:	f7ff fa7e 	bl	8003208 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d0c:	4b45      	ldr	r3, [pc, #276]	; (8003e24 <HAL_ADC_ConfigChannel+0x368>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4945      	ldr	r1, [pc, #276]	; (8003e28 <HAL_ADC_ConfigChannel+0x36c>)
 8003d12:	0018      	movs	r0, r3
 8003d14:	f7fc f9f2 	bl	80000fc <__udivsi3>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	0013      	movs	r3, r2
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	189b      	adds	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d26:	e002      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f9      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d34:	e08e      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3c      	ldr	r2, [pc, #240]	; (8003e2c <HAL_ADC_ConfigChannel+0x370>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10e      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x2a2>
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	045b      	lsls	r3, r3, #17
 8003d46:	4013      	ands	r3, r2
 8003d48:	d109      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	0452      	lsls	r2, r2, #17
 8003d50:	4313      	orrs	r3, r2
 8003d52:	4a32      	ldr	r2, [pc, #200]	; (8003e1c <HAL_ADC_ConfigChannel+0x360>)
 8003d54:	0019      	movs	r1, r3
 8003d56:	0010      	movs	r0, r2
 8003d58:	f7ff fa56 	bl	8003208 <LL_ADC_SetCommonPathInternalCh>
 8003d5c:	e07a      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a33      	ldr	r2, [pc, #204]	; (8003e30 <HAL_ADC_ConfigChannel+0x374>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d000      	beq.n	8003d6a <HAL_ADC_ConfigChannel+0x2ae>
 8003d68:	e074      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	03db      	lsls	r3, r3, #15
 8003d70:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003d72:	d000      	beq.n	8003d76 <HAL_ADC_ConfigChannel+0x2ba>
 8003d74:	e06e      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	03d2      	lsls	r2, r2, #15
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <HAL_ADC_ConfigChannel+0x360>)
 8003d80:	0019      	movs	r1, r3
 8003d82:	0010      	movs	r0, r2
 8003d84:	f7ff fa40 	bl	8003208 <LL_ADC_SetCommonPathInternalCh>
 8003d88:	e064      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d004      	beq.n	8003da0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_ADC_ConfigChannel+0x35c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d107      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	0019      	movs	r1, r3
 8003daa:	0010      	movs	r0, r2
 8003dac:	f7ff faac 	bl	8003308 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da4d      	bge.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003db8:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <HAL_ADC_ConfigChannel+0x360>)
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff fa38 	bl	8003230 <LL_ADC_GetCommonPathInternalCh>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <HAL_ADC_ConfigChannel+0x364>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d108      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_ADC_ConfigChannel+0x378>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <HAL_ADC_ConfigChannel+0x360>)
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	0010      	movs	r0, r2
 8003dda:	f7ff fa15 	bl	8003208 <LL_ADC_SetCommonPathInternalCh>
 8003dde:	e039      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a11      	ldr	r2, [pc, #68]	; (8003e2c <HAL_ADC_ConfigChannel+0x370>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d108      	bne.n	8003dfc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4a12      	ldr	r2, [pc, #72]	; (8003e38 <HAL_ADC_ConfigChannel+0x37c>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_ADC_ConfigChannel+0x360>)
 8003df2:	0019      	movs	r1, r3
 8003df4:	0010      	movs	r0, r2
 8003df6:	f7ff fa07 	bl	8003208 <LL_ADC_SetCommonPathInternalCh>
 8003dfa:	e02b      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <HAL_ADC_ConfigChannel+0x374>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d126      	bne.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <HAL_ADC_ConfigChannel+0x380>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	4a03      	ldr	r2, [pc, #12]	; (8003e1c <HAL_ADC_ConfigChannel+0x360>)
 8003e0e:	0019      	movs	r1, r3
 8003e10:	0010      	movs	r0, r2
 8003e12:	f7ff f9f9 	bl	8003208 <LL_ADC_SetCommonPathInternalCh>
 8003e16:	e01d      	b.n	8003e54 <HAL_ADC_ConfigChannel+0x398>
 8003e18:	80000004 	.word	0x80000004
 8003e1c:	40012708 	.word	0x40012708
 8003e20:	b0001000 	.word	0xb0001000
 8003e24:	20000000 	.word	0x20000000
 8003e28:	00030d40 	.word	0x00030d40
 8003e2c:	b8004000 	.word	0xb8004000
 8003e30:	b4002000 	.word	0xb4002000
 8003e34:	ff7fffff 	.word	0xff7fffff
 8003e38:	feffffff 	.word	0xfeffffff
 8003e3c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	2220      	movs	r2, #32
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e4c:	2317      	movs	r3, #23
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2254      	movs	r2, #84	; 0x54
 8003e58:	2100      	movs	r1, #0
 8003e5a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003e5c:	2317      	movs	r3, #23
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	781b      	ldrb	r3, [r3, #0]
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b006      	add	sp, #24
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)

08003e6c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7ff fb05 	bl	8003488 <LL_ADC_REG_IsConversionOngoing>
 8003e7e:	1e03      	subs	r3, r0, #0
 8003e80:	d031      	beq.n	8003ee6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7ff fac9 	bl	800341e <LL_ADC_IsDisableOngoing>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d104      	bne.n	8003e9a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7ff fae5 	bl	8003464 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e9a:	f7ff f987 	bl	80031ac <HAL_GetTick>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003ea2:	e01a      	b.n	8003eda <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ea4:	f7ff f982 	bl	80031ac <HAL_GetTick>
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d913      	bls.n	8003eda <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d00d      	beq.n	8003eda <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	2201      	movs	r2, #1
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e006      	b.n	8003ee8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d1de      	bne.n	8003ea4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b004      	add	sp, #16
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff fa7b 	bl	80033fc <LL_ADC_IsEnabled>
 8003f06:	1e03      	subs	r3, r0, #0
 8003f08:	d000      	beq.n	8003f0c <ADC_Enable+0x1c>
 8003f0a:	e069      	b.n	8003fe0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4a36      	ldr	r2, [pc, #216]	; (8003fec <ADC_Enable+0xfc>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	d00d      	beq.n	8003f34 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f28:	2201      	movs	r2, #1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e056      	b.n	8003fe2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff fa3b 	bl	80033b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	; (8003ff0 <ADC_Enable+0x100>)
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff f975 	bl	8003230 <LL_ADC_GetCommonPathInternalCh>
 8003f46:	0002      	movs	r2, r0
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d00f      	beq.n	8003f70 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f50:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <ADC_Enable+0x104>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4928      	ldr	r1, [pc, #160]	; (8003ff8 <ADC_Enable+0x108>)
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7fc f8d0 	bl	80000fc <__udivsi3>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	3301      	adds	r3, #1
 8003f60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f62:	e002      	b.n	8003f6a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f9      	bne.n	8003f64 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7e5b      	ldrb	r3, [r3, #25]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d033      	beq.n	8003fe0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003f78:	f7ff f918 	bl	80031ac <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f80:	e027      	b.n	8003fd2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7ff fa38 	bl	80033fc <LL_ADC_IsEnabled>
 8003f8c:	1e03      	subs	r3, r0, #0
 8003f8e:	d104      	bne.n	8003f9a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff fa0d 	bl	80033b4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f9a:	f7ff f907 	bl	80031ac <HAL_GetTick>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d914      	bls.n	8003fd2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d00d      	beq.n	8003fd2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	2210      	movs	r2, #16
 8003fbc:	431a      	orrs	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e007      	b.n	8003fe2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d1d0      	bne.n	8003f82 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b004      	add	sp, #16
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	80000017 	.word	0x80000017
 8003ff0:	40012708 	.word	0x40012708
 8003ff4:	20000000 	.word	0x20000000
 8003ff8:	00030d40 	.word	0x00030d40

08003ffc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff fa08 	bl	800341e <LL_ADC_IsDisableOngoing>
 800400e:	0003      	movs	r3, r0
 8004010:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	0018      	movs	r0, r3
 8004018:	f7ff f9f0 	bl	80033fc <LL_ADC_IsEnabled>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d046      	beq.n	80040ae <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d143      	bne.n	80040ae <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2205      	movs	r2, #5
 800402e:	4013      	ands	r3, r2
 8004030:	2b01      	cmp	r3, #1
 8004032:	d10d      	bne.n	8004050 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	0018      	movs	r0, r3
 800403a:	f7ff f9cd 	bl	80033d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2203      	movs	r2, #3
 8004044:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004046:	f7ff f8b1 	bl	80031ac <HAL_GetTick>
 800404a:	0003      	movs	r3, r0
 800404c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800404e:	e028      	b.n	80040a2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	2210      	movs	r2, #16
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004060:	2201      	movs	r2, #1
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e021      	b.n	80040b0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800406c:	f7ff f89e 	bl	80031ac <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d913      	bls.n	80040a2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	d00d      	beq.n	80040a2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	2210      	movs	r2, #16
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004096:	2201      	movs	r2, #1
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e006      	b.n	80040b0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2201      	movs	r2, #1
 80040aa:	4013      	ands	r3, r2
 80040ac:	d1de      	bne.n	800406c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b004      	add	sp, #16
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040b8:	b590      	push	{r4, r7, lr}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	0002      	movs	r2, r0
 80040c0:	6039      	str	r1, [r7, #0]
 80040c2:	1dfb      	adds	r3, r7, #7
 80040c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040c6:	1dfb      	adds	r3, r7, #7
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b7f      	cmp	r3, #127	; 0x7f
 80040cc:	d828      	bhi.n	8004120 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040ce:	4a2f      	ldr	r2, [pc, #188]	; (800418c <__NVIC_SetPriority+0xd4>)
 80040d0:	1dfb      	adds	r3, r7, #7
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	b25b      	sxtb	r3, r3
 80040d6:	089b      	lsrs	r3, r3, #2
 80040d8:	33c0      	adds	r3, #192	; 0xc0
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	589b      	ldr	r3, [r3, r2]
 80040de:	1dfa      	adds	r2, r7, #7
 80040e0:	7812      	ldrb	r2, [r2, #0]
 80040e2:	0011      	movs	r1, r2
 80040e4:	2203      	movs	r2, #3
 80040e6:	400a      	ands	r2, r1
 80040e8:	00d2      	lsls	r2, r2, #3
 80040ea:	21ff      	movs	r1, #255	; 0xff
 80040ec:	4091      	lsls	r1, r2
 80040ee:	000a      	movs	r2, r1
 80040f0:	43d2      	mvns	r2, r2
 80040f2:	401a      	ands	r2, r3
 80040f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	019b      	lsls	r3, r3, #6
 80040fa:	22ff      	movs	r2, #255	; 0xff
 80040fc:	401a      	ands	r2, r3
 80040fe:	1dfb      	adds	r3, r7, #7
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	0018      	movs	r0, r3
 8004104:	2303      	movs	r3, #3
 8004106:	4003      	ands	r3, r0
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800410c:	481f      	ldr	r0, [pc, #124]	; (800418c <__NVIC_SetPriority+0xd4>)
 800410e:	1dfb      	adds	r3, r7, #7
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	b25b      	sxtb	r3, r3
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	430a      	orrs	r2, r1
 8004118:	33c0      	adds	r3, #192	; 0xc0
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800411e:	e031      	b.n	8004184 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004120:	4a1b      	ldr	r2, [pc, #108]	; (8004190 <__NVIC_SetPriority+0xd8>)
 8004122:	1dfb      	adds	r3, r7, #7
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	0019      	movs	r1, r3
 8004128:	230f      	movs	r3, #15
 800412a:	400b      	ands	r3, r1
 800412c:	3b08      	subs	r3, #8
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	3306      	adds	r3, #6
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	3304      	adds	r3, #4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	1dfa      	adds	r2, r7, #7
 800413c:	7812      	ldrb	r2, [r2, #0]
 800413e:	0011      	movs	r1, r2
 8004140:	2203      	movs	r2, #3
 8004142:	400a      	ands	r2, r1
 8004144:	00d2      	lsls	r2, r2, #3
 8004146:	21ff      	movs	r1, #255	; 0xff
 8004148:	4091      	lsls	r1, r2
 800414a:	000a      	movs	r2, r1
 800414c:	43d2      	mvns	r2, r2
 800414e:	401a      	ands	r2, r3
 8004150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	22ff      	movs	r2, #255	; 0xff
 8004158:	401a      	ands	r2, r3
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	0018      	movs	r0, r3
 8004160:	2303      	movs	r3, #3
 8004162:	4003      	ands	r3, r0
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004168:	4809      	ldr	r0, [pc, #36]	; (8004190 <__NVIC_SetPriority+0xd8>)
 800416a:	1dfb      	adds	r3, r7, #7
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	001c      	movs	r4, r3
 8004170:	230f      	movs	r3, #15
 8004172:	4023      	ands	r3, r4
 8004174:	3b08      	subs	r3, #8
 8004176:	089b      	lsrs	r3, r3, #2
 8004178:	430a      	orrs	r2, r1
 800417a:	3306      	adds	r3, #6
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	18c3      	adds	r3, r0, r3
 8004180:	3304      	adds	r3, #4
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b003      	add	sp, #12
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	e000e100 	.word	0xe000e100
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	045b      	lsls	r3, r3, #17
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d301      	bcc.n	80041ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041a8:	2301      	movs	r3, #1
 80041aa:	e010      	b.n	80041ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <SysTick_Config+0x44>)
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	3a01      	subs	r2, #1
 80041b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b4:	2301      	movs	r3, #1
 80041b6:	425b      	negs	r3, r3
 80041b8:	2103      	movs	r1, #3
 80041ba:	0018      	movs	r0, r3
 80041bc:	f7ff ff7c 	bl	80040b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <SysTick_Config+0x44>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c6:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <SysTick_Config+0x44>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b002      	add	sp, #8
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	e000e010 	.word	0xe000e010

080041dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
 80041e6:	210f      	movs	r1, #15
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	1c02      	adds	r2, r0, #0
 80041ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	b25b      	sxtb	r3, r3
 80041f6:	0011      	movs	r1, r2
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7ff ff5d 	bl	80040b8 <__NVIC_SetPriority>
}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b004      	add	sp, #16
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f7ff ffbf 	bl	8004194 <SysTick_Config>
 8004216:	0003      	movs	r3, r0
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800422e:	2317      	movs	r3, #23
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2224      	movs	r2, #36	; 0x24
 800423a:	5c9b      	ldrb	r3, [r3, r2]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_DMA_Start_IT+0x24>
 8004240:	2302      	movs	r3, #2
 8004242:	e06f      	b.n	8004324 <HAL_DMA_Start_IT+0x104>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	2101      	movs	r1, #1
 800424a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2225      	movs	r2, #37	; 0x25
 8004250:	5c9b      	ldrb	r3, [r3, r2]
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d157      	bne.n	8004308 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2225      	movs	r2, #37	; 0x25
 800425c:	2102      	movs	r1, #2
 800425e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2101      	movs	r1, #1
 8004272:	438a      	bics	r2, r1
 8004274:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f8cb 	bl	8004418 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	2b00      	cmp	r3, #0
 8004288:	d008      	beq.n	800429c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	210e      	movs	r1, #14
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e00f      	b.n	80042bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2104      	movs	r1, #4
 80042a8:	438a      	bics	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	210a      	movs	r1, #10
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	2380      	movs	r3, #128	; 0x80
 80042c4:	025b      	lsls	r3, r3, #9
 80042c6:	4013      	ands	r3, r2
 80042c8:	d008      	beq.n	80042dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	2180      	movs	r1, #128	; 0x80
 80042d6:	0049      	lsls	r1, r1, #1
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	2180      	movs	r1, #128	; 0x80
 80042f0:	0049      	lsls	r1, r1, #1
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2101      	movs	r1, #1
 8004302:	430a      	orrs	r2, r1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e00a      	b.n	800431e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2280      	movs	r2, #128	; 0x80
 800430c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2224      	movs	r2, #36	; 0x24
 8004312:	2100      	movs	r1, #0
 8004314:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004316:	2317      	movs	r3, #23
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800431e:	2317      	movs	r3, #23
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	781b      	ldrb	r3, [r3, #0]
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b006      	add	sp, #24
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	210f      	movs	r1, #15
 8004336:	187b      	adds	r3, r7, r1
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2225      	movs	r2, #37	; 0x25
 8004340:	5c9b      	ldrb	r3, [r3, r2]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d006      	beq.n	8004356 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2204      	movs	r2, #4
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800434e:	187b      	adds	r3, r7, r1
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	e049      	b.n	80043ea <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	210e      	movs	r1, #14
 8004362:	438a      	bics	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2101      	movs	r1, #1
 8004372:	438a      	bics	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	491d      	ldr	r1, [pc, #116]	; (80043f8 <HAL_DMA_Abort_IT+0xcc>)
 8004382:	400a      	ands	r2, r1
 8004384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_DMA_Abort_IT+0xd0>)
 8004388:	6859      	ldr	r1, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	221c      	movs	r2, #28
 8004390:	4013      	ands	r3, r2
 8004392:	2201      	movs	r2, #1
 8004394:	409a      	lsls	r2, r3
 8004396:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_DMA_Abort_IT+0xd0>)
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00c      	beq.n	80043c8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b8:	490f      	ldr	r1, [pc, #60]	; (80043f8 <HAL_DMA_Abort_IT+0xcc>)
 80043ba:	400a      	ands	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2225      	movs	r2, #37	; 0x25
 80043cc:	2101      	movs	r1, #1
 80043ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2224      	movs	r2, #36	; 0x24
 80043d4:	2100      	movs	r1, #0
 80043d6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d004      	beq.n	80043ea <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	0010      	movs	r0, r2
 80043e8:	4798      	blx	r3
    }
  }
  return status;
 80043ea:	230f      	movs	r3, #15
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	781b      	ldrb	r3, [r3, #0]
}
 80043f0:	0018      	movs	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b004      	add	sp, #16
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	fffffeff 	.word	0xfffffeff
 80043fc:	40020000 	.word	0x40020000

08004400 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2225      	movs	r2, #37	; 0x25
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	b2db      	uxtb	r3, r3
}
 8004410:	0018      	movs	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}

08004418 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
 8004424:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800442e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004440:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004442:	4b14      	ldr	r3, [pc, #80]	; (8004494 <DMA_SetConfig+0x7c>)
 8004444:	6859      	ldr	r1, [r3, #4]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	221c      	movs	r2, #28
 800444c:	4013      	ands	r3, r2
 800444e:	2201      	movs	r2, #1
 8004450:	409a      	lsls	r2, r3
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <DMA_SetConfig+0x7c>)
 8004454:	430a      	orrs	r2, r1
 8004456:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b10      	cmp	r3, #16
 8004466:	d108      	bne.n	800447a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004478:	e007      	b.n	800448a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	60da      	str	r2, [r3, #12]
}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b004      	add	sp, #16
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	40020000 	.word	0x40020000

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044a6:	e147      	b.n	8004738 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4091      	lsls	r1, r2
 80044b2:	000a      	movs	r2, r1
 80044b4:	4013      	ands	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d100      	bne.n	80044c0 <HAL_GPIO_Init+0x28>
 80044be:	e138      	b.n	8004732 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2203      	movs	r2, #3
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d005      	beq.n	80044d8 <HAL_GPIO_Init+0x40>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2203      	movs	r2, #3
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d130      	bne.n	800453a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	2203      	movs	r2, #3
 80044e4:	409a      	lsls	r2, r3
 80044e6:	0013      	movs	r3, r2
 80044e8:	43da      	mvns	r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4013      	ands	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68da      	ldr	r2, [r3, #12]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	409a      	lsls	r2, r3
 80044fa:	0013      	movs	r3, r2
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800450e:	2201      	movs	r2, #1
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	409a      	lsls	r2, r3
 8004514:	0013      	movs	r3, r2
 8004516:	43da      	mvns	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	091b      	lsrs	r3, r3, #4
 8004524:	2201      	movs	r2, #1
 8004526:	401a      	ands	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	409a      	lsls	r2, r3
 800452c:	0013      	movs	r3, r2
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2203      	movs	r2, #3
 8004540:	4013      	ands	r3, r2
 8004542:	2b03      	cmp	r3, #3
 8004544:	d017      	beq.n	8004576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	2203      	movs	r2, #3
 8004552:	409a      	lsls	r2, r3
 8004554:	0013      	movs	r3, r2
 8004556:	43da      	mvns	r2, r3
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4013      	ands	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689a      	ldr	r2, [r3, #8]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	409a      	lsls	r2, r3
 8004568:	0013      	movs	r3, r2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2203      	movs	r2, #3
 800457c:	4013      	ands	r3, r2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d123      	bne.n	80045ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	08da      	lsrs	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3208      	adds	r2, #8
 800458a:	0092      	lsls	r2, r2, #2
 800458c:	58d3      	ldr	r3, [r2, r3]
 800458e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2207      	movs	r2, #7
 8004594:	4013      	ands	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	220f      	movs	r2, #15
 800459a:	409a      	lsls	r2, r3
 800459c:	0013      	movs	r3, r2
 800459e:	43da      	mvns	r2, r3
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2107      	movs	r1, #7
 80045ae:	400b      	ands	r3, r1
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	409a      	lsls	r2, r3
 80045b4:	0013      	movs	r3, r2
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	08da      	lsrs	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3208      	adds	r2, #8
 80045c4:	0092      	lsls	r2, r2, #2
 80045c6:	6939      	ldr	r1, [r7, #16]
 80045c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	2203      	movs	r2, #3
 80045d6:	409a      	lsls	r2, r3
 80045d8:	0013      	movs	r3, r2
 80045da:	43da      	mvns	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2203      	movs	r2, #3
 80045e8:	401a      	ands	r2, r3
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	409a      	lsls	r2, r3
 80045f0:	0013      	movs	r3, r2
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	23c0      	movs	r3, #192	; 0xc0
 8004604:	029b      	lsls	r3, r3, #10
 8004606:	4013      	ands	r3, r2
 8004608:	d100      	bne.n	800460c <HAL_GPIO_Init+0x174>
 800460a:	e092      	b.n	8004732 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800460c:	4a50      	ldr	r2, [pc, #320]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	3318      	adds	r3, #24
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	589b      	ldr	r3, [r3, r2]
 8004618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2203      	movs	r2, #3
 800461e:	4013      	ands	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	220f      	movs	r2, #15
 8004624:	409a      	lsls	r2, r3
 8004626:	0013      	movs	r3, r2
 8004628:	43da      	mvns	r2, r3
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4013      	ands	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	23a0      	movs	r3, #160	; 0xa0
 8004634:	05db      	lsls	r3, r3, #23
 8004636:	429a      	cmp	r2, r3
 8004638:	d013      	beq.n	8004662 <HAL_GPIO_Init+0x1ca>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a45      	ldr	r2, [pc, #276]	; (8004754 <HAL_GPIO_Init+0x2bc>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00d      	beq.n	800465e <HAL_GPIO_Init+0x1c6>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a44      	ldr	r2, [pc, #272]	; (8004758 <HAL_GPIO_Init+0x2c0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d007      	beq.n	800465a <HAL_GPIO_Init+0x1c2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a43      	ldr	r2, [pc, #268]	; (800475c <HAL_GPIO_Init+0x2c4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <HAL_GPIO_Init+0x1be>
 8004652:	2303      	movs	r3, #3
 8004654:	e006      	b.n	8004664 <HAL_GPIO_Init+0x1cc>
 8004656:	2305      	movs	r3, #5
 8004658:	e004      	b.n	8004664 <HAL_GPIO_Init+0x1cc>
 800465a:	2302      	movs	r3, #2
 800465c:	e002      	b.n	8004664 <HAL_GPIO_Init+0x1cc>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_GPIO_Init+0x1cc>
 8004662:	2300      	movs	r3, #0
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	2103      	movs	r1, #3
 8004668:	400a      	ands	r2, r1
 800466a:	00d2      	lsls	r2, r2, #3
 800466c:	4093      	lsls	r3, r2
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004674:	4936      	ldr	r1, [pc, #216]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	3318      	adds	r3, #24
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004682:	4a33      	ldr	r2, [pc, #204]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	58d3      	ldr	r3, [r2, r3]
 8004688:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	43da      	mvns	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4013      	ands	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	025b      	lsls	r3, r3, #9
 800469c:	4013      	ands	r3, r2
 800469e:	d003      	beq.n	80046a8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046a8:	4929      	ldr	r1, [pc, #164]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 80046aa:	2280      	movs	r2, #128	; 0x80
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 80046b2:	2384      	movs	r3, #132	; 0x84
 80046b4:	58d3      	ldr	r3, [r2, r3]
 80046b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43da      	mvns	r2, r3
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	029b      	lsls	r3, r3, #10
 80046ca:	4013      	ands	r3, r2
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80046d6:	491e      	ldr	r1, [pc, #120]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 80046d8:	2284      	movs	r2, #132	; 0x84
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046de:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	43da      	mvns	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	035b      	lsls	r3, r3, #13
 80046f6:	4013      	ands	r3, r2
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004702:	4b13      	ldr	r3, [pc, #76]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43da      	mvns	r2, r3
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	039b      	lsls	r3, r3, #14
 8004720:	4013      	ands	r3, r2
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800472c:	4b08      	ldr	r3, [pc, #32]	; (8004750 <HAL_GPIO_Init+0x2b8>)
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	3301      	adds	r3, #1
 8004736:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	40da      	lsrs	r2, r3
 8004740:	1e13      	subs	r3, r2, #0
 8004742:	d000      	beq.n	8004746 <HAL_GPIO_Init+0x2ae>
 8004744:	e6b0      	b.n	80044a8 <HAL_GPIO_Init+0x10>
  }
}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	46c0      	nop			; (mov r8, r8)
 800474a:	46bd      	mov	sp, r7
 800474c:	b006      	add	sp, #24
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021800 	.word	0x40021800
 8004754:	50000400 	.word	0x50000400
 8004758:	50000800 	.word	0x50000800
 800475c:	50000c00 	.word	0x50000c00

08004760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	0008      	movs	r0, r1
 800476a:	0011      	movs	r1, r2
 800476c:	1cbb      	adds	r3, r7, #2
 800476e:	1c02      	adds	r2, r0, #0
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	1c7b      	adds	r3, r7, #1
 8004774:	1c0a      	adds	r2, r1, #0
 8004776:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004778:	1c7b      	adds	r3, r7, #1
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004780:	1cbb      	adds	r3, r7, #2
 8004782:	881a      	ldrh	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004788:	e003      	b.n	8004792 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800478a:	1cbb      	adds	r3, r7, #2
 800478c:	881a      	ldrh	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b002      	add	sp, #8
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e082      	b.n	80048b4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2241      	movs	r2, #65	; 0x41
 80047b2:	5c9b      	ldrb	r3, [r3, r2]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d107      	bne.n	80047ca <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2240      	movs	r2, #64	; 0x40
 80047be:	2100      	movs	r1, #0
 80047c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7fe fa75 	bl	8002cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2241      	movs	r2, #65	; 0x41
 80047ce:	2124      	movs	r1, #36	; 0x24
 80047d0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2101      	movs	r1, #1
 80047de:	438a      	bics	r2, r1
 80047e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4934      	ldr	r1, [pc, #208]	; (80048bc <HAL_I2C_Init+0x120>)
 80047ec:	400a      	ands	r2, r1
 80047ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4931      	ldr	r1, [pc, #196]	; (80048c0 <HAL_I2C_Init+0x124>)
 80047fc:	400a      	ands	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d108      	bne.n	800481a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2180      	movs	r1, #128	; 0x80
 8004812:	0209      	lsls	r1, r1, #8
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
 8004818:	e007      	b.n	800482a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2184      	movs	r1, #132	; 0x84
 8004824:	0209      	lsls	r1, r1, #8
 8004826:	430a      	orrs	r2, r1
 8004828:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d104      	bne.n	800483c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2280      	movs	r2, #128	; 0x80
 8004838:	0112      	lsls	r2, r2, #4
 800483a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	491f      	ldr	r1, [pc, #124]	; (80048c4 <HAL_I2C_Init+0x128>)
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	491a      	ldr	r1, [pc, #104]	; (80048c0 <HAL_I2C_Init+0x124>)
 8004858:	400a      	ands	r2, r1
 800485a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	431a      	orrs	r2, r3
 8004866:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69d9      	ldr	r1, [r3, #28]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1a      	ldr	r2, [r3, #32]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2101      	movs	r1, #1
 8004892:	430a      	orrs	r2, r1
 8004894:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2241      	movs	r2, #65	; 0x41
 80048a0:	2120      	movs	r1, #32
 80048a2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2242      	movs	r2, #66	; 0x42
 80048ae:	2100      	movs	r1, #0
 80048b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	f0ffffff 	.word	0xf0ffffff
 80048c0:	ffff7fff 	.word	0xffff7fff
 80048c4:	02008000 	.word	0x02008000

080048c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b089      	sub	sp, #36	; 0x24
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	0008      	movs	r0, r1
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	0019      	movs	r1, r3
 80048d6:	230a      	movs	r3, #10
 80048d8:	18fb      	adds	r3, r7, r3
 80048da:	1c02      	adds	r2, r0, #0
 80048dc:	801a      	strh	r2, [r3, #0]
 80048de:	2308      	movs	r3, #8
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	1c0a      	adds	r2, r1, #0
 80048e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2241      	movs	r2, #65	; 0x41
 80048ea:	5c9b      	ldrb	r3, [r3, r2]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d000      	beq.n	80048f4 <HAL_I2C_Master_Transmit+0x2c>
 80048f2:	e0e7      	b.n	8004ac4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2240      	movs	r2, #64	; 0x40
 80048f8:	5c9b      	ldrb	r3, [r3, r2]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_I2C_Master_Transmit+0x3a>
 80048fe:	2302      	movs	r3, #2
 8004900:	e0e1      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1fe>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2240      	movs	r2, #64	; 0x40
 8004906:	2101      	movs	r1, #1
 8004908:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800490a:	f7fe fc4f 	bl	80031ac <HAL_GetTick>
 800490e:	0003      	movs	r3, r0
 8004910:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	0219      	lsls	r1, r3, #8
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	2319      	movs	r3, #25
 800491e:	2201      	movs	r2, #1
 8004920:	f001 fef0 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8004924:	1e03      	subs	r3, r0, #0
 8004926:	d001      	beq.n	800492c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0cc      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2241      	movs	r2, #65	; 0x41
 8004930:	2121      	movs	r1, #33	; 0x21
 8004932:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2242      	movs	r2, #66	; 0x42
 8004938:	2110      	movs	r1, #16
 800493a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2208      	movs	r2, #8
 800494c:	18ba      	adds	r2, r7, r2
 800494e:	8812      	ldrh	r2, [r2, #0]
 8004950:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2bff      	cmp	r3, #255	; 0xff
 8004960:	d911      	bls.n	8004986 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	b2da      	uxtb	r2, r3
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	045c      	lsls	r4, r3, #17
 8004972:	230a      	movs	r3, #10
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	8819      	ldrh	r1, [r3, #0]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	4b55      	ldr	r3, [pc, #340]	; (8004ad0 <HAL_I2C_Master_Transmit+0x208>)
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	0023      	movs	r3, r4
 8004980:	f002 f860 	bl	8006a44 <I2C_TransferConfig>
 8004984:	e075      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004994:	b2da      	uxtb	r2, r3
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	049c      	lsls	r4, r3, #18
 800499a:	230a      	movs	r3, #10
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	8819      	ldrh	r1, [r3, #0]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	4b4b      	ldr	r3, [pc, #300]	; (8004ad0 <HAL_I2C_Master_Transmit+0x208>)
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	0023      	movs	r3, r4
 80049a8:	f002 f84c 	bl	8006a44 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80049ac:	e061      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	0018      	movs	r0, r3
 80049b6:	f001 fee4 	bl	8006782 <I2C_WaitOnTXISFlagUntilTimeout>
 80049ba:	1e03      	subs	r3, r0, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e081      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	781a      	ldrb	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d03a      	beq.n	8004a72 <HAL_I2C_Master_Transmit+0x1aa>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d136      	bne.n	8004a72 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	0013      	movs	r3, r2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2180      	movs	r1, #128	; 0x80
 8004a12:	f001 fe77 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8004a16:	1e03      	subs	r3, r0, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e053      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	2bff      	cmp	r3, #255	; 0xff
 8004a26:	d911      	bls.n	8004a4c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	22ff      	movs	r2, #255	; 0xff
 8004a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	2380      	movs	r3, #128	; 0x80
 8004a36:	045c      	lsls	r4, r3, #17
 8004a38:	230a      	movs	r3, #10
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	8819      	ldrh	r1, [r3, #0]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	2300      	movs	r3, #0
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	0023      	movs	r3, r4
 8004a46:	f001 fffd 	bl	8006a44 <I2C_TransferConfig>
 8004a4a:	e012      	b.n	8004a72 <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	049c      	lsls	r4, r3, #18
 8004a60:	230a      	movs	r3, #10
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	8819      	ldrh	r1, [r3, #0]
 8004a66:	68f8      	ldr	r0, [r7, #12]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	0023      	movs	r3, r4
 8004a6e:	f001 ffe9 	bl	8006a44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d198      	bne.n	80049ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f001 febc 	bl	8006800 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a88:	1e03      	subs	r3, r0, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e01a      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2220      	movs	r2, #32
 8004a96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	490c      	ldr	r1, [pc, #48]	; (8004ad4 <HAL_I2C_Master_Transmit+0x20c>)
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2241      	movs	r2, #65	; 0x41
 8004aac:	2120      	movs	r1, #32
 8004aae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2242      	movs	r2, #66	; 0x42
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2240      	movs	r2, #64	; 0x40
 8004abc:	2100      	movs	r1, #0
 8004abe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e000      	b.n	8004ac6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004ac4:	2302      	movs	r3, #2
  }
}
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b007      	add	sp, #28
 8004acc:	bd90      	pop	{r4, r7, pc}
 8004ace:	46c0      	nop			; (mov r8, r8)
 8004ad0:	80002000 	.word	0x80002000
 8004ad4:	fe00e800 	.word	0xfe00e800

08004ad8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b089      	sub	sp, #36	; 0x24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	0008      	movs	r0, r1
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	230a      	movs	r3, #10
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	1c02      	adds	r2, r0, #0
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	2308      	movs	r3, #8
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	1c0a      	adds	r2, r1, #0
 8004af4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2241      	movs	r2, #65	; 0x41
 8004afa:	5c9b      	ldrb	r3, [r3, r2]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d000      	beq.n	8004b04 <HAL_I2C_Master_Receive+0x2c>
 8004b02:	e0e8      	b.n	8004cd6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2240      	movs	r2, #64	; 0x40
 8004b08:	5c9b      	ldrb	r3, [r3, r2]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_I2C_Master_Receive+0x3a>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e0e2      	b.n	8004cd8 <HAL_I2C_Master_Receive+0x200>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2240      	movs	r2, #64	; 0x40
 8004b16:	2101      	movs	r1, #1
 8004b18:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b1a:	f7fe fb47 	bl	80031ac <HAL_GetTick>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	0219      	lsls	r1, r3, #8
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	2319      	movs	r3, #25
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f001 fde8 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d001      	beq.n	8004b3c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e0cd      	b.n	8004cd8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2241      	movs	r2, #65	; 0x41
 8004b40:	2122      	movs	r1, #34	; 0x22
 8004b42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2242      	movs	r2, #66	; 0x42
 8004b48:	2110      	movs	r1, #16
 8004b4a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	18ba      	adds	r2, r7, r2
 8004b5e:	8812      	ldrh	r2, [r2, #0]
 8004b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	2bff      	cmp	r3, #255	; 0xff
 8004b70:	d911      	bls.n	8004b96 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	22ff      	movs	r2, #255	; 0xff
 8004b76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	045c      	lsls	r4, r3, #17
 8004b82:	230a      	movs	r3, #10
 8004b84:	18fb      	adds	r3, r7, r3
 8004b86:	8819      	ldrh	r1, [r3, #0]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	4b55      	ldr	r3, [pc, #340]	; (8004ce0 <HAL_I2C_Master_Receive+0x208>)
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	0023      	movs	r3, r4
 8004b90:	f001 ff58 	bl	8006a44 <I2C_TransferConfig>
 8004b94:	e076      	b.n	8004c84 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	049c      	lsls	r4, r3, #18
 8004baa:	230a      	movs	r3, #10
 8004bac:	18fb      	adds	r3, r7, r3
 8004bae:	8819      	ldrh	r1, [r3, #0]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	4b4b      	ldr	r3, [pc, #300]	; (8004ce0 <HAL_I2C_Master_Receive+0x208>)
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	0023      	movs	r3, r4
 8004bb8:	f001 ff44 	bl	8006a44 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004bbc:	e062      	b.n	8004c84 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f001 fe57 	bl	8006878 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bca:	1e03      	subs	r3, r0, #0
 8004bcc:	d001      	beq.n	8004bd2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e082      	b.n	8004cd8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d03a      	beq.n	8004c84 <HAL_I2C_Master_Receive+0x1ac>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d136      	bne.n	8004c84 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	0013      	movs	r3, r2
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	f001 fd6e 	bl	8006704 <I2C_WaitOnFlagUntilTimeout>
 8004c28:	1e03      	subs	r3, r0, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e053      	b.n	8004cd8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2bff      	cmp	r3, #255	; 0xff
 8004c38:	d911      	bls.n	8004c5e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	22ff      	movs	r2, #255	; 0xff
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	045c      	lsls	r4, r3, #17
 8004c4a:	230a      	movs	r3, #10
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	8819      	ldrh	r1, [r3, #0]
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	2300      	movs	r3, #0
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	0023      	movs	r3, r4
 8004c58:	f001 fef4 	bl	8006a44 <I2C_TransferConfig>
 8004c5c:	e012      	b.n	8004c84 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	049c      	lsls	r4, r3, #18
 8004c72:	230a      	movs	r3, #10
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	8819      	ldrh	r1, [r3, #0]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	0023      	movs	r3, r4
 8004c80:	f001 fee0 	bl	8006a44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d197      	bne.n	8004bbe <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f001 fdb3 	bl	8006800 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c9a:	1e03      	subs	r3, r0, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e01a      	b.n	8004cd8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	490b      	ldr	r1, [pc, #44]	; (8004ce4 <HAL_I2C_Master_Receive+0x20c>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2241      	movs	r2, #65	; 0x41
 8004cbe:	2120      	movs	r1, #32
 8004cc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2242      	movs	r2, #66	; 0x42
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2240      	movs	r2, #64	; 0x40
 8004cce:	2100      	movs	r1, #0
 8004cd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e000      	b.n	8004cd8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004cd6:	2302      	movs	r3, #2
  }
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b007      	add	sp, #28
 8004cde:	bd90      	pop	{r4, r7, pc}
 8004ce0:	80002400 	.word	0x80002400
 8004ce4:	fe00e800 	.word	0xfe00e800

08004ce8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004ce8:	b5b0      	push	{r4, r5, r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	0008      	movs	r0, r1
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	0019      	movs	r1, r3
 8004cf6:	230a      	movs	r3, #10
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	1c02      	adds	r2, r0, #0
 8004cfc:	801a      	strh	r2, [r3, #0]
 8004cfe:	2308      	movs	r3, #8
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	1c0a      	adds	r2, r1, #0
 8004d04:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2241      	movs	r2, #65	; 0x41
 8004d0a:	5c9b      	ldrb	r3, [r3, r2]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b20      	cmp	r3, #32
 8004d10:	d000      	beq.n	8004d14 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8004d12:	e0dd      	b.n	8004ed0 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	401a      	ands	r2, r3
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d101      	bne.n	8004d2c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0d2      	b.n	8004ed2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2240      	movs	r2, #64	; 0x40
 8004d30:	5c9b      	ldrb	r3, [r3, r2]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_I2C_Master_Transmit_DMA+0x52>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e0cb      	b.n	8004ed2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	2101      	movs	r1, #1
 8004d40:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2241      	movs	r2, #65	; 0x41
 8004d46:	2121      	movs	r1, #33	; 0x21
 8004d48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2242      	movs	r2, #66	; 0x42
 8004d4e:	2110      	movs	r1, #16
 8004d50:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2208      	movs	r2, #8
 8004d62:	18ba      	adds	r2, r7, r2
 8004d64:	8812      	ldrh	r2, [r2, #0]
 8004d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a5c      	ldr	r2, [pc, #368]	; (8004edc <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8004d6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a5b      	ldr	r2, [pc, #364]	; (8004ee0 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8004d72:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2bff      	cmp	r3, #255	; 0xff
 8004d7c:	d906      	bls.n	8004d8c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	22ff      	movs	r2, #255	; 0xff
 8004d82:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	045b      	lsls	r3, r3, #17
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e007      	b.n	8004d9c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004d96:	2380      	movs	r3, #128	; 0x80
 8004d98:	049b      	lsls	r3, r3, #18
 8004d9a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d100      	bne.n	8004da6 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8004da4:	e078      	b.n	8004e98 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d023      	beq.n	8004df6 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	4a4c      	ldr	r2, [pc, #304]	; (8004ee4 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8004db4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	4a4b      	ldr	r2, [pc, #300]	; (8004ee8 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8004dbc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	2200      	movs	r2, #0
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3328      	adds	r3, #40	; 0x28
 8004dda:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004de0:	2513      	movs	r5, #19
 8004de2:	197c      	adds	r4, r7, r5
 8004de4:	f7ff fa1c 	bl	8004220 <HAL_DMA_Start_IT>
 8004de8:	0003      	movs	r3, r0
 8004dea:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004dec:	197b      	adds	r3, r7, r5
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d13d      	bne.n	8004e70 <HAL_I2C_Master_Transmit_DMA+0x188>
 8004df4:	e013      	b.n	8004e1e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2241      	movs	r2, #65	; 0x41
 8004dfa:	2120      	movs	r1, #32
 8004dfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2242      	movs	r2, #66	; 0x42
 8004e02:	2100      	movs	r1, #0
 8004e04:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	2280      	movs	r2, #128	; 0x80
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	2100      	movs	r1, #0
 8004e18:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e059      	b.n	8004ed2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	697c      	ldr	r4, [r7, #20]
 8004e26:	230a      	movs	r3, #10
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	8819      	ldrh	r1, [r3, #0]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <HAL_I2C_Master_Transmit_DMA+0x204>)
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	0023      	movs	r3, r4
 8004e34:	f001 fe06 	bl	8006a44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2240      	movs	r2, #64	; 0x40
 8004e4e:	2100      	movs	r1, #0
 8004e50:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2110      	movs	r1, #16
 8004e56:	0018      	movs	r0, r3
 8004e58:	f001 fe2a 	bl	8006ab0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	01c9      	lsls	r1, r1, #7
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e02d      	b.n	8004ecc <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2241      	movs	r2, #65	; 0x41
 8004e74:	2120      	movs	r1, #32
 8004e76:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2242      	movs	r2, #66	; 0x42
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	2210      	movs	r2, #16
 8004e86:	431a      	orrs	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2240      	movs	r2, #64	; 0x40
 8004e90:	2100      	movs	r1, #0
 8004e92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e01c      	b.n	8004ed2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4a15      	ldr	r2, [pc, #84]	; (8004ef0 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8004e9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	049c      	lsls	r4, r3, #18
 8004ea8:	230a      	movs	r3, #10
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	8819      	ldrh	r1, [r3, #0]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <HAL_I2C_Master_Transmit_DMA+0x204>)
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	0023      	movs	r3, r4
 8004eb6:	f001 fdc5 	bl	8006a44 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f001 fdf2 	bl	8006ab0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b006      	add	sp, #24
 8004ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	ffff0000 	.word	0xffff0000
 8004ee0:	080057bd 	.word	0x080057bd
 8004ee4:	08006555 	.word	0x08006555
 8004ee8:	08006695 	.word	0x08006695
 8004eec:	80002000 	.word	0x80002000
 8004ef0:	08005311 	.word	0x08005311

08004ef4 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004ef4:	b5b0      	push	{r4, r5, r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	0008      	movs	r0, r1
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	0019      	movs	r1, r3
 8004f02:	230a      	movs	r3, #10
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	1c02      	adds	r2, r0, #0
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	1c0a      	adds	r2, r1, #0
 8004f10:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2241      	movs	r2, #65	; 0x41
 8004f16:	5c9b      	ldrb	r3, [r3, r2]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d000      	beq.n	8004f20 <HAL_I2C_Master_Receive_DMA+0x2c>
 8004f1e:	e0dd      	b.n	80050dc <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	401a      	ands	r2, r3
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d101      	bne.n	8004f38 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0d2      	b.n	80050de <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2240      	movs	r2, #64	; 0x40
 8004f3c:	5c9b      	ldrb	r3, [r3, r2]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_I2C_Master_Receive_DMA+0x52>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e0cb      	b.n	80050de <HAL_I2C_Master_Receive_DMA+0x1ea>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2240      	movs	r2, #64	; 0x40
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2241      	movs	r2, #65	; 0x41
 8004f52:	2122      	movs	r1, #34	; 0x22
 8004f54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2242      	movs	r2, #66	; 0x42
 8004f5a:	2110      	movs	r1, #16
 8004f5c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2208      	movs	r2, #8
 8004f6e:	18ba      	adds	r2, r7, r2
 8004f70:	8812      	ldrh	r2, [r2, #0]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a5c      	ldr	r2, [pc, #368]	; (80050e8 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a5b      	ldr	r2, [pc, #364]	; (80050ec <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8004f7e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2bff      	cmp	r3, #255	; 0xff
 8004f88:	d906      	bls.n	8004f98 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	22ff      	movs	r2, #255	; 0xff
 8004f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	045b      	lsls	r3, r3, #17
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	e007      	b.n	8004fa8 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004fa2:	2380      	movs	r3, #128	; 0x80
 8004fa4:	049b      	lsls	r3, r3, #18
 8004fa6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d100      	bne.n	8004fb2 <HAL_I2C_Master_Receive_DMA+0xbe>
 8004fb0:	e078      	b.n	80050a4 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d023      	beq.n	8005002 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	4a4c      	ldr	r2, [pc, #304]	; (80050f0 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	4a4b      	ldr	r2, [pc, #300]	; (80050f4 <HAL_I2C_Master_Receive_DMA+0x200>)
 8004fc8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3324      	adds	r3, #36	; 0x24
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004fec:	2513      	movs	r5, #19
 8004fee:	197c      	adds	r4, r7, r5
 8004ff0:	f7ff f916 	bl	8004220 <HAL_DMA_Start_IT>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004ff8:	197b      	adds	r3, r7, r5
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d13d      	bne.n	800507c <HAL_I2C_Master_Receive_DMA+0x188>
 8005000:	e013      	b.n	800502a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2241      	movs	r2, #65	; 0x41
 8005006:	2120      	movs	r1, #32
 8005008:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2242      	movs	r2, #66	; 0x42
 800500e:	2100      	movs	r1, #0
 8005010:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	2280      	movs	r2, #128	; 0x80
 8005018:	431a      	orrs	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2240      	movs	r2, #64	; 0x40
 8005022:	2100      	movs	r1, #0
 8005024:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e059      	b.n	80050de <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502e:	b2da      	uxtb	r2, r3
 8005030:	697c      	ldr	r4, [r7, #20]
 8005032:	230a      	movs	r3, #10
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	8819      	ldrh	r1, [r3, #0]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <HAL_I2C_Master_Receive_DMA+0x204>)
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	0023      	movs	r3, r4
 8005040:	f001 fd00 	bl	8006a44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2240      	movs	r2, #64	; 0x40
 800505a:	2100      	movs	r1, #0
 800505c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2110      	movs	r1, #16
 8005062:	0018      	movs	r0, r3
 8005064:	f001 fd24 	bl	8006ab0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2180      	movs	r1, #128	; 0x80
 8005074:	0209      	lsls	r1, r1, #8
 8005076:	430a      	orrs	r2, r1
 8005078:	601a      	str	r2, [r3, #0]
 800507a:	e02d      	b.n	80050d8 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2241      	movs	r2, #65	; 0x41
 8005080:	2120      	movs	r1, #32
 8005082:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2242      	movs	r2, #66	; 0x42
 8005088:	2100      	movs	r1, #0
 800508a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	2210      	movs	r2, #16
 8005092:	431a      	orrs	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2240      	movs	r2, #64	; 0x40
 800509c:	2100      	movs	r1, #0
 800509e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e01c      	b.n	80050de <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a15      	ldr	r2, [pc, #84]	; (80050fc <HAL_I2C_Master_Receive_DMA+0x208>)
 80050a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ae:	b2da      	uxtb	r2, r3
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	049c      	lsls	r4, r3, #18
 80050b4:	230a      	movs	r3, #10
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	8819      	ldrh	r1, [r3, #0]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <HAL_I2C_Master_Receive_DMA+0x204>)
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	0023      	movs	r3, r4
 80050c2:	f001 fcbf 	bl	8006a44 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2240      	movs	r2, #64	; 0x40
 80050ca:	2100      	movs	r1, #0
 80050cc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2101      	movs	r1, #1
 80050d2:	0018      	movs	r0, r3
 80050d4:	f001 fcec 	bl	8006ab0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	e000      	b.n	80050de <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
  }
}
 80050de:	0018      	movs	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b006      	add	sp, #24
 80050e4:	bdb0      	pop	{r4, r5, r7, pc}
 80050e6:	46c0      	nop			; (mov r8, r8)
 80050e8:	ffff0000 	.word	0xffff0000
 80050ec:	080057bd 	.word	0x080057bd
 80050f0:	080065f5 	.word	0x080065f5
 80050f4:	08006695 	.word	0x08006695
 80050f8:	80002400 	.word	0x80002400
 80050fc:	08005311 	.word	0x08005311

08005100 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	1dbb      	adds	r3, r7, #6
 800510e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2241      	movs	r2, #65	; 0x41
 8005114:	5c9b      	ldrb	r3, [r3, r2]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	001a      	movs	r2, r3
 800511a:	2328      	movs	r3, #40	; 0x28
 800511c:	4013      	ands	r3, r2
 800511e:	2b28      	cmp	r3, #40	; 0x28
 8005120:	d000      	beq.n	8005124 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 8005122:	e08f      	b.n	8005244 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 800512a:	1dbb      	adds	r3, r7, #6
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2280      	movs	r2, #128	; 0x80
 8005136:	0092      	lsls	r2, r2, #2
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e083      	b.n	8005246 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800513e:	4a44      	ldr	r2, [pc, #272]	; (8005250 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	0011      	movs	r1, r2
 8005144:	0018      	movs	r0, r3
 8005146:	f001 fd1b 	bl	8006b80 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2240      	movs	r2, #64	; 0x40
 800514e:	5c9b      	ldrb	r3, [r3, r2]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d101      	bne.n	8005158 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8005154:	2302      	movs	r3, #2
 8005156:	e076      	b.n	8005246 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2240      	movs	r2, #64	; 0x40
 800515c:	2101      	movs	r1, #1
 800515e:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2241      	movs	r2, #65	; 0x41
 8005164:	5c9b      	ldrb	r3, [r3, r2]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b2a      	cmp	r3, #42	; 0x2a
 800516a:	d12c      	bne.n	80051c6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2102      	movs	r1, #2
 8005170:	0018      	movs	r0, r3
 8005172:	f001 fd05 	bl	8006b80 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	401a      	ands	r2, r3
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	429a      	cmp	r2, r3
 8005188:	d11d      	bne.n	80051c6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	492f      	ldr	r1, [pc, #188]	; (8005254 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8005196:	400a      	ands	r2, r1
 8005198:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d011      	beq.n	80051c6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <HAL_I2C_Slave_Seq_Transmit_IT+0x158>)
 80051a8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	0018      	movs	r0, r3
 80051b0:	f7ff f8bc 	bl	800432c <HAL_DMA_Abort_IT>
 80051b4:	1e03      	subs	r3, r0, #0
 80051b6:	d006      	beq.n	80051c6 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	0018      	movs	r0, r3
 80051c4:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2241      	movs	r2, #65	; 0x41
 80051ca:	2129      	movs	r1, #41	; 0x29
 80051cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2242      	movs	r2, #66	; 0x42
 80051d2:	2120      	movs	r1, #32
 80051d4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	491b      	ldr	r1, [pc, #108]	; (8005254 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 80051e8:	400a      	ands	r2, r1
 80051ea:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1dba      	adds	r2, r7, #6
 80051f6:	8812      	ldrh	r2, [r2, #0]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a13      	ldr	r2, [pc, #76]	; (800525c <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 800520e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	0c1b      	lsrs	r3, r3, #16
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2201      	movs	r2, #1
 800521c:	4013      	ands	r3, r2
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d103      	bne.n	800522c <HAL_I2C_Slave_Seq_Transmit_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2208      	movs	r2, #8
 800522a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2240      	movs	r2, #64	; 0x40
 8005230:	2100      	movs	r1, #0
 8005232:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005234:	4a06      	ldr	r2, [pc, #24]	; (8005250 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	0011      	movs	r1, r2
 800523a:	0018      	movs	r0, r3
 800523c:	f001 fc38 	bl	8006ab0 <I2C_Enable_IRQ>

    return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e000      	b.n	8005246 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
  }
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b004      	add	sp, #16
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	00008001 	.word	0x00008001
 8005254:	ffff7fff 	.word	0xffff7fff
 8005258:	080066c7 	.word	0x080066c7
 800525c:	08005595 	.word	0x08005595

08005260 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005268:	46c0      	nop			; (mov r8, r8)
 800526a:	46bd      	mov	sp, r7
 800526c:	b002      	add	sp, #8
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005278:	46c0      	nop			; (mov r8, r8)
 800527a:	46bd      	mov	sp, r7
 800527c:	b002      	add	sp, #8
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	46bd      	mov	sp, r7
 800528c:	b002      	add	sp, #8
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005298:	46c0      	nop			; (mov r8, r8)
 800529a:	46bd      	mov	sp, r7
 800529c:	b002      	add	sp, #8
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	0008      	movs	r0, r1
 80052aa:	0011      	movs	r1, r2
 80052ac:	1cfb      	adds	r3, r7, #3
 80052ae:	1c02      	adds	r2, r0, #0
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	003b      	movs	r3, r7
 80052b4:	1c0a      	adds	r2, r1, #0
 80052b6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052b8:	46c0      	nop			; (mov r8, r8)
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b002      	add	sp, #8
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b002      	add	sp, #8
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80052f8:	46c0      	nop			; (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b002      	add	sp, #8
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	46bd      	mov	sp, r7
 800530c:	b002      	add	sp, #8
 800530e:	bd80      	pop	{r7, pc}

08005310 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2240      	movs	r2, #64	; 0x40
 8005324:	5c9b      	ldrb	r3, [r3, r2]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <I2C_Master_ISR_IT+0x1e>
 800532a:	2302      	movs	r3, #2
 800532c:	e12b      	b.n	8005586 <I2C_Master_ISR_IT+0x276>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2240      	movs	r2, #64	; 0x40
 8005332:	2101      	movs	r1, #1
 8005334:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	001a      	movs	r2, r3
 800533c:	2301      	movs	r3, #1
 800533e:	4013      	ands	r3, r2
 8005340:	d014      	beq.n	800536c <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	091b      	lsrs	r3, r3, #4
 8005346:	001a      	movs	r2, r3
 8005348:	2301      	movs	r3, #1
 800534a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800534c:	d00e      	beq.n	800536c <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2210      	movs	r2, #16
 8005354:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	2204      	movs	r2, #4
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	0018      	movs	r0, r3
 8005366:	f001 f8d2 	bl	800650e <I2C_Flush_TXDR>
 800536a:	e0f5      	b.n	8005558 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	089b      	lsrs	r3, r3, #2
 8005370:	001a      	movs	r2, r3
 8005372:	2301      	movs	r3, #1
 8005374:	4013      	ands	r3, r2
 8005376:	d023      	beq.n	80053c0 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	089b      	lsrs	r3, r3, #2
 800537c:	001a      	movs	r2, r3
 800537e:	2301      	movs	r3, #1
 8005380:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005382:	d01d      	beq.n	80053c0 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2204      	movs	r2, #4
 8005388:	4393      	bics	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053be:	e0cb      	b.n	8005558 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	001a      	movs	r2, r3
 80053c6:	2301      	movs	r3, #1
 80053c8:	4013      	ands	r3, r2
 80053ca:	d01e      	beq.n	800540a <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	085b      	lsrs	r3, r3, #1
 80053d0:	001a      	movs	r2, r3
 80053d2:	2301      	movs	r3, #1
 80053d4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80053d6:	d018      	beq.n	800540a <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005408:	e0a6      	b.n	8005558 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	09db      	lsrs	r3, r3, #7
 800540e:	001a      	movs	r2, r3
 8005410:	2301      	movs	r3, #1
 8005412:	4013      	ands	r3, r2
 8005414:	d100      	bne.n	8005418 <I2C_Master_ISR_IT+0x108>
 8005416:	e06b      	b.n	80054f0 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	099b      	lsrs	r3, r3, #6
 800541c:	001a      	movs	r2, r3
 800541e:	2301      	movs	r3, #1
 8005420:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005422:	d065      	beq.n	80054f0 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d04a      	beq.n	80054c4 <I2C_Master_ISR_IT+0x1b4>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d146      	bne.n	80054c4 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	b29a      	uxth	r2, r3
 800543e:	2112      	movs	r1, #18
 8005440:	187b      	adds	r3, r7, r1
 8005442:	0592      	lsls	r2, r2, #22
 8005444:	0d92      	lsrs	r2, r2, #22
 8005446:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	2bff      	cmp	r3, #255	; 0xff
 8005450:	d910      	bls.n	8005474 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	22ff      	movs	r2, #255	; 0xff
 8005456:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545c:	b2da      	uxtb	r2, r3
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	045c      	lsls	r4, r3, #17
 8005462:	187b      	adds	r3, r7, r1
 8005464:	8819      	ldrh	r1, [r3, #0]
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	2300      	movs	r3, #0
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	0023      	movs	r3, r4
 800546e:	f001 fae9 	bl	8006a44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005472:	e03c      	b.n	80054ee <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	4a43      	ldr	r2, [pc, #268]	; (8005590 <I2C_Master_ISR_IT+0x280>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00e      	beq.n	80054a6 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005492:	2312      	movs	r3, #18
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	8819      	ldrh	r1, [r3, #0]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	0023      	movs	r3, r4
 80054a0:	f001 fad0 	bl	8006a44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054a4:	e023      	b.n	80054ee <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	049c      	lsls	r4, r3, #18
 80054b0:	2312      	movs	r3, #18
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	8819      	ldrh	r1, [r3, #0]
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	2300      	movs	r3, #0
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	0023      	movs	r3, r4
 80054be:	f001 fac1 	bl	8006a44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054c2:	e014      	b.n	80054ee <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	049b      	lsls	r3, r3, #18
 80054ce:	401a      	ands	r2, r3
 80054d0:	2380      	movs	r3, #128	; 0x80
 80054d2:	049b      	lsls	r3, r3, #18
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d004      	beq.n	80054e2 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 fc14 	bl	8005d08 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054e0:	e03a      	b.n	8005558 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2140      	movs	r1, #64	; 0x40
 80054e6:	0018      	movs	r0, r3
 80054e8:	f000 ff06 	bl	80062f8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054ec:	e034      	b.n	8005558 <I2C_Master_ISR_IT+0x248>
 80054ee:	e033      	b.n	8005558 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	099b      	lsrs	r3, r3, #6
 80054f4:	001a      	movs	r2, r3
 80054f6:	2301      	movs	r3, #1
 80054f8:	4013      	ands	r3, r2
 80054fa:	d02d      	beq.n	8005558 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	099b      	lsrs	r3, r3, #6
 8005500:	001a      	movs	r2, r3
 8005502:	2301      	movs	r3, #1
 8005504:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005506:	d027      	beq.n	8005558 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11d      	bne.n	800554e <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	049b      	lsls	r3, r3, #18
 800551c:	401a      	ands	r2, r3
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	049b      	lsls	r3, r3, #18
 8005522:	429a      	cmp	r2, r3
 8005524:	d018      	beq.n	8005558 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	4a19      	ldr	r2, [pc, #100]	; (8005590 <I2C_Master_ISR_IT+0x280>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d109      	bne.n	8005544 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	01c9      	lsls	r1, r1, #7
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
 8005542:	e009      	b.n	8005558 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 fbde 	bl	8005d08 <I2C_ITMasterSeqCplt>
 800554c:	e004      	b.n	8005558 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2140      	movs	r1, #64	; 0x40
 8005552:	0018      	movs	r0, r3
 8005554:	f000 fed0 	bl	80062f8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	001a      	movs	r2, r3
 800555e:	2301      	movs	r3, #1
 8005560:	4013      	ands	r3, r2
 8005562:	d00b      	beq.n	800557c <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	001a      	movs	r2, r3
 800556a:	2301      	movs	r3, #1
 800556c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800556e:	d005      	beq.n	800557c <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	0011      	movs	r1, r2
 8005576:	0018      	movs	r0, r3
 8005578:	f000 fc6e 	bl	8005e58 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2240      	movs	r2, #64	; 0x40
 8005580:	2100      	movs	r1, #0
 8005582:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	0018      	movs	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	b007      	add	sp, #28
 800558c:	bd90      	pop	{r4, r7, pc}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	ffff0000 	.word	0xffff0000

08005594 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2240      	movs	r2, #64	; 0x40
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <I2C_Slave_ISR_IT+0x24>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e0fa      	b.n	80057ae <I2C_Slave_ISR_IT+0x21a>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2240      	movs	r2, #64	; 0x40
 80055bc:	2101      	movs	r1, #1
 80055be:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	001a      	movs	r2, r3
 80055c6:	2301      	movs	r3, #1
 80055c8:	4013      	ands	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	095b      	lsrs	r3, r3, #5
 80055d0:	001a      	movs	r2, r3
 80055d2:	2301      	movs	r3, #1
 80055d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055d6:	d005      	beq.n	80055e4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	0011      	movs	r1, r2
 80055de:	0018      	movs	r0, r3
 80055e0:	f000 fd0c 	bl	8005ffc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	001a      	movs	r2, r3
 80055ea:	2301      	movs	r3, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	d054      	beq.n	800569a <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	001a      	movs	r2, r3
 80055f6:	2301      	movs	r3, #1
 80055f8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80055fa:	d04e      	beq.n	800569a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d12d      	bne.n	8005662 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2241      	movs	r2, #65	; 0x41
 800560a:	5c9b      	ldrb	r3, [r3, r2]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b28      	cmp	r3, #40	; 0x28
 8005610:	d10b      	bne.n	800562a <I2C_Slave_ISR_IT+0x96>
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	049b      	lsls	r3, r3, #18
 8005618:	429a      	cmp	r2, r3
 800561a:	d106      	bne.n	800562a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	0011      	movs	r1, r2
 8005622:	0018      	movs	r0, r3
 8005624:	f000 fe0e 	bl	8006244 <I2C_ITListenCplt>
 8005628:	e036      	b.n	8005698 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2241      	movs	r2, #65	; 0x41
 800562e:	5c9b      	ldrb	r3, [r3, r2]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b29      	cmp	r3, #41	; 0x29
 8005634:	d110      	bne.n	8005658 <I2C_Slave_ISR_IT+0xc4>
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4a5f      	ldr	r2, [pc, #380]	; (80057b8 <I2C_Slave_ISR_IT+0x224>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00c      	beq.n	8005658 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2210      	movs	r2, #16
 8005644:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	0018      	movs	r0, r3
 800564a:	f000 ff60 	bl	800650e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	0018      	movs	r0, r3
 8005652:	f000 fb9b 	bl	8005d8c <I2C_ITSlaveSeqCplt>
 8005656:	e01f      	b.n	8005698 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2210      	movs	r2, #16
 800565e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005660:	e09d      	b.n	800579e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2210      	movs	r2, #16
 8005668:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	2204      	movs	r2, #4
 8005670:	431a      	orrs	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d005      	beq.n	8005688 <I2C_Slave_ISR_IT+0xf4>
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	045b      	lsls	r3, r3, #17
 8005682:	429a      	cmp	r2, r3
 8005684:	d000      	beq.n	8005688 <I2C_Slave_ISR_IT+0xf4>
 8005686:	e08a      	b.n	800579e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	0011      	movs	r1, r2
 8005690:	0018      	movs	r0, r3
 8005692:	f000 fe31 	bl	80062f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005696:	e082      	b.n	800579e <I2C_Slave_ISR_IT+0x20a>
 8005698:	e081      	b.n	800579e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	089b      	lsrs	r3, r3, #2
 800569e:	001a      	movs	r2, r3
 80056a0:	2301      	movs	r3, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	d031      	beq.n	800570a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	089b      	lsrs	r3, r3, #2
 80056aa:	001a      	movs	r2, r3
 80056ac:	2301      	movs	r3, #1
 80056ae:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80056b0:	d02b      	beq.n	800570a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d018      	beq.n	80056ee <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d154      	bne.n	80057a2 <I2C_Slave_ISR_IT+0x20e>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4a2f      	ldr	r2, [pc, #188]	; (80057b8 <I2C_Slave_ISR_IT+0x224>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d050      	beq.n	80057a2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 fb42 	bl	8005d8c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005708:	e04b      	b.n	80057a2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	08db      	lsrs	r3, r3, #3
 800570e:	001a      	movs	r2, r3
 8005710:	2301      	movs	r3, #1
 8005712:	4013      	ands	r3, r2
 8005714:	d00c      	beq.n	8005730 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	08db      	lsrs	r3, r3, #3
 800571a:	001a      	movs	r2, r3
 800571c:	2301      	movs	r3, #1
 800571e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005720:	d006      	beq.n	8005730 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	0011      	movs	r1, r2
 8005728:	0018      	movs	r0, r3
 800572a:	f000 fa49 	bl	8005bc0 <I2C_ITAddrCplt>
 800572e:	e039      	b.n	80057a4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	001a      	movs	r2, r3
 8005736:	2301      	movs	r3, #1
 8005738:	4013      	ands	r3, r2
 800573a:	d033      	beq.n	80057a4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	085b      	lsrs	r3, r3, #1
 8005740:	001a      	movs	r2, r3
 8005742:	2301      	movs	r3, #1
 8005744:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005746:	d02d      	beq.n	80057a4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d018      	beq.n	8005784 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	781a      	ldrb	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	851a      	strh	r2, [r3, #40]	; 0x28
 8005782:	e00f      	b.n	80057a4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	045b      	lsls	r3, r3, #17
 800578a:	429a      	cmp	r2, r3
 800578c:	d002      	beq.n	8005794 <I2C_Slave_ISR_IT+0x200>
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	0018      	movs	r0, r3
 8005798:	f000 faf8 	bl	8005d8c <I2C_ITSlaveSeqCplt>
 800579c:	e002      	b.n	80057a4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	e000      	b.n	80057a4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80057a2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2240      	movs	r2, #64	; 0x40
 80057a8:	2100      	movs	r1, #0
 80057aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	0018      	movs	r0, r3
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b006      	add	sp, #24
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	ffff0000 	.word	0xffff0000

080057bc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 80057bc:	b590      	push	{r4, r7, lr}
 80057be:	b089      	sub	sp, #36	; 0x24
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2240      	movs	r2, #64	; 0x40
 80057cc:	5c9b      	ldrb	r3, [r3, r2]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <I2C_Master_ISR_DMA+0x1a>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e0f7      	b.n	80059c6 <I2C_Master_ISR_DMA+0x20a>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2240      	movs	r2, #64	; 0x40
 80057da:	2101      	movs	r1, #1
 80057dc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	001a      	movs	r2, r3
 80057e4:	2301      	movs	r3, #1
 80057e6:	4013      	ands	r3, r2
 80057e8:	d019      	beq.n	800581e <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	091b      	lsrs	r3, r3, #4
 80057ee:	001a      	movs	r2, r3
 80057f0:	2301      	movs	r3, #1
 80057f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057f4:	d013      	beq.n	800581e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2210      	movs	r2, #16
 80057fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	2204      	movs	r2, #4
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2120      	movs	r1, #32
 800580e:	0018      	movs	r0, r3
 8005810:	f001 f94e 	bl	8006ab0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	0018      	movs	r0, r3
 8005818:	f000 fe79 	bl	800650e <I2C_Flush_TXDR>
 800581c:	e0ce      	b.n	80059bc <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	09db      	lsrs	r3, r3, #7
 8005822:	001a      	movs	r2, r3
 8005824:	2301      	movs	r3, #1
 8005826:	4013      	ands	r3, r2
 8005828:	d100      	bne.n	800582c <I2C_Master_ISR_DMA+0x70>
 800582a:	e07e      	b.n	800592a <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	099b      	lsrs	r3, r3, #6
 8005830:	001a      	movs	r2, r3
 8005832:	2301      	movs	r3, #1
 8005834:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005836:	d100      	bne.n	800583a <I2C_Master_ISR_DMA+0x7e>
 8005838:	e077      	b.n	800592a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2140      	movs	r1, #64	; 0x40
 8005846:	438a      	bics	r2, r1
 8005848:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d055      	beq.n	8005900 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	b29a      	uxth	r2, r3
 800585c:	2312      	movs	r3, #18
 800585e:	18fb      	adds	r3, r7, r3
 8005860:	0592      	lsls	r2, r2, #22
 8005862:	0d92      	lsrs	r2, r2, #22
 8005864:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	2bff      	cmp	r3, #255	; 0xff
 800586e:	d906      	bls.n	800587e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	22ff      	movs	r2, #255	; 0xff
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005876:	2380      	movs	r3, #128	; 0x80
 8005878:	045b      	lsls	r3, r3, #17
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	e010      	b.n	80058a0 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a50      	ldr	r2, [pc, #320]	; (80059d0 <I2C_Master_ISR_DMA+0x214>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e002      	b.n	80058a0 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	049b      	lsls	r3, r3, #18
 800589e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	697c      	ldr	r4, [r7, #20]
 80058a8:	2312      	movs	r3, #18
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	8819      	ldrh	r1, [r3, #0]
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	2300      	movs	r3, #0
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	0023      	movs	r3, r4
 80058b6:	f001 f8c5 	bl	8006a44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058be:	b29a      	uxth	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2241      	movs	r2, #65	; 0x41
 80058d0:	5c9b      	ldrb	r3, [r3, r2]
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b22      	cmp	r3, #34	; 0x22
 80058d6:	d109      	bne.n	80058ec <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	0209      	lsls	r1, r1, #8
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80058ea:	e067      	b.n	80059bc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	01c9      	lsls	r1, r1, #7
 80058fa:	430a      	orrs	r2, r1
 80058fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80058fe:	e05d      	b.n	80059bc <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	2380      	movs	r3, #128	; 0x80
 8005908:	049b      	lsls	r3, r3, #18
 800590a:	401a      	ands	r2, r3
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	049b      	lsls	r3, r3, #18
 8005910:	429a      	cmp	r2, r3
 8005912:	d004      	beq.n	800591e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	0018      	movs	r0, r3
 8005918:	f000 f9f6 	bl	8005d08 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800591c:	e04e      	b.n	80059bc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2140      	movs	r1, #64	; 0x40
 8005922:	0018      	movs	r0, r3
 8005924:	f000 fce8 	bl	80062f8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005928:	e048      	b.n	80059bc <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	099b      	lsrs	r3, r3, #6
 800592e:	001a      	movs	r2, r3
 8005930:	2301      	movs	r3, #1
 8005932:	4013      	ands	r3, r2
 8005934:	d02e      	beq.n	8005994 <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	099b      	lsrs	r3, r3, #6
 800593a:	001a      	movs	r2, r3
 800593c:	2301      	movs	r3, #1
 800593e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005940:	d028      	beq.n	8005994 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d11d      	bne.n	8005988 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	049b      	lsls	r3, r3, #18
 8005956:	401a      	ands	r2, r3
 8005958:	2380      	movs	r3, #128	; 0x80
 800595a:	049b      	lsls	r3, r3, #18
 800595c:	429a      	cmp	r2, r3
 800595e:	d02c      	beq.n	80059ba <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4a1a      	ldr	r2, [pc, #104]	; (80059d0 <I2C_Master_ISR_DMA+0x214>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d109      	bne.n	800597e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2180      	movs	r1, #128	; 0x80
 8005976:	01c9      	lsls	r1, r1, #7
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800597c:	e01d      	b.n	80059ba <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	0018      	movs	r0, r3
 8005982:	f000 f9c1 	bl	8005d08 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005986:	e018      	b.n	80059ba <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2140      	movs	r1, #64	; 0x40
 800598c:	0018      	movs	r0, r3
 800598e:	f000 fcb3 	bl	80062f8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005992:	e012      	b.n	80059ba <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	001a      	movs	r2, r3
 800599a:	2301      	movs	r3, #1
 800599c:	4013      	ands	r3, r2
 800599e:	d00d      	beq.n	80059bc <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	001a      	movs	r2, r3
 80059a6:	2301      	movs	r3, #1
 80059a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80059aa:	d007      	beq.n	80059bc <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	0011      	movs	r1, r2
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 fa50 	bl	8005e58 <I2C_ITMasterCplt>
 80059b8:	e000      	b.n	80059bc <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80059ba:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2240      	movs	r2, #64	; 0x40
 80059c0:	2100      	movs	r1, #0
 80059c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	0018      	movs	r0, r3
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b007      	add	sp, #28
 80059cc:	bd90      	pop	{r4, r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	ffff0000 	.word	0xffff0000

080059d4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2240      	movs	r2, #64	; 0x40
 80059ee:	5c9b      	ldrb	r3, [r3, r2]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <I2C_Slave_ISR_DMA+0x24>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e0dd      	b.n	8005bb4 <I2C_Slave_ISR_DMA+0x1e0>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2240      	movs	r2, #64	; 0x40
 80059fc:	2101      	movs	r1, #1
 80059fe:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	001a      	movs	r2, r3
 8005a06:	2301      	movs	r3, #1
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	001a      	movs	r2, r3
 8005a12:	2301      	movs	r3, #1
 8005a14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a16:	d005      	beq.n	8005a24 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f000 faec 	bl	8005ffc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	001a      	movs	r2, r3
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <I2C_Slave_ISR_DMA+0x5e>
 8005a30:	e0a9      	b.n	8005b86 <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	091b      	lsrs	r3, r3, #4
 8005a36:	001a      	movs	r2, r3
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005a3c:	d100      	bne.n	8005a40 <I2C_Slave_ISR_DMA+0x6c>
 8005a3e:	e0a2      	b.n	8005b86 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	0b9b      	lsrs	r3, r3, #14
 8005a44:	001a      	movs	r2, r3
 8005a46:	2301      	movs	r3, #1
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d106      	bne.n	8005a5a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	0bdb      	lsrs	r3, r3, #15
 8005a50:	001a      	movs	r2, r3
 8005a52:	2301      	movs	r3, #1
 8005a54:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a56:	d100      	bne.n	8005a5a <I2C_Slave_ISR_DMA+0x86>
 8005a58:	e08e      	b.n	8005b78 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00d      	beq.n	8005a7e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	0bdb      	lsrs	r3, r3, #15
 8005a66:	001a      	movs	r2, r3
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00d      	beq.n	8005aa2 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	0b9b      	lsrs	r3, r3, #14
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d12d      	bne.n	8005b04 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2241      	movs	r2, #65	; 0x41
 8005aac:	5c9b      	ldrb	r3, [r3, r2]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b28      	cmp	r3, #40	; 0x28
 8005ab2:	d10b      	bne.n	8005acc <I2C_Slave_ISR_DMA+0xf8>
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	049b      	lsls	r3, r3, #18
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d106      	bne.n	8005acc <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	0011      	movs	r1, r2
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 fbbd 	bl	8006244 <I2C_ITListenCplt>
 8005aca:	e054      	b.n	8005b76 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2241      	movs	r2, #65	; 0x41
 8005ad0:	5c9b      	ldrb	r3, [r3, r2]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b29      	cmp	r3, #41	; 0x29
 8005ad6:	d110      	bne.n	8005afa <I2C_Slave_ISR_DMA+0x126>
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	4a38      	ldr	r2, [pc, #224]	; (8005bbc <I2C_Slave_ISR_DMA+0x1e8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00c      	beq.n	8005afa <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 fd0f 	bl	800650e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	0018      	movs	r0, r3
 8005af4:	f000 f94a 	bl	8005d8c <I2C_ITSlaveSeqCplt>
 8005af8:	e03d      	b.n	8005b76 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2210      	movs	r2, #16
 8005b00:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005b02:	e03e      	b.n	8005b82 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2210      	movs	r2, #16
 8005b0a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	2204      	movs	r2, #4
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005b18:	2317      	movs	r3, #23
 8005b1a:	18fb      	adds	r3, r7, r3
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	2141      	movs	r1, #65	; 0x41
 8005b20:	5c52      	ldrb	r2, [r2, r1]
 8005b22:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <I2C_Slave_ISR_DMA+0x160>
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	045b      	lsls	r3, r3, #17
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d126      	bne.n	8005b82 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b34:	2217      	movs	r2, #23
 8005b36:	18bb      	adds	r3, r7, r2
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b21      	cmp	r3, #33	; 0x21
 8005b3c:	d003      	beq.n	8005b46 <I2C_Slave_ISR_DMA+0x172>
 8005b3e:	18bb      	adds	r3, r7, r2
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b29      	cmp	r3, #41	; 0x29
 8005b44:	d103      	bne.n	8005b4e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2221      	movs	r2, #33	; 0x21
 8005b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b4c:	e00b      	b.n	8005b66 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b4e:	2217      	movs	r2, #23
 8005b50:	18bb      	adds	r3, r7, r2
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b22      	cmp	r3, #34	; 0x22
 8005b56:	d003      	beq.n	8005b60 <I2C_Slave_ISR_DMA+0x18c>
 8005b58:	18bb      	adds	r3, r7, r2
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b5e:	d102      	bne.n	8005b66 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2222      	movs	r2, #34	; 0x22
 8005b64:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	0011      	movs	r1, r2
 8005b6e:	0018      	movs	r0, r3
 8005b70:	f000 fbc2 	bl	80062f8 <I2C_ITError>
      if (treatdmanack == 1U)
 8005b74:	e005      	b.n	8005b82 <I2C_Slave_ISR_DMA+0x1ae>
 8005b76:	e004      	b.n	8005b82 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2210      	movs	r2, #16
 8005b7e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b80:	e013      	b.n	8005baa <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8005b82:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b84:	e011      	b.n	8005baa <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	08db      	lsrs	r3, r3, #3
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	4013      	ands	r3, r2
 8005b90:	d00b      	beq.n	8005baa <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	08db      	lsrs	r3, r3, #3
 8005b96:	001a      	movs	r2, r3
 8005b98:	2301      	movs	r3, #1
 8005b9a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005b9c:	d005      	beq.n	8005baa <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	0011      	movs	r1, r2
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f000 f80b 	bl	8005bc0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2240      	movs	r2, #64	; 0x40
 8005bae:	2100      	movs	r1, #0
 8005bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b008      	add	sp, #32
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	ffff0000 	.word	0xffff0000

08005bc0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bc0:	b5b0      	push	{r4, r5, r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2241      	movs	r2, #65	; 0x41
 8005bce:	5c9b      	ldrb	r3, [r3, r2]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	001a      	movs	r2, r3
 8005bd4:	2328      	movs	r3, #40	; 0x28
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	2b28      	cmp	r3, #40	; 0x28
 8005bda:	d000      	beq.n	8005bde <I2C_ITAddrCplt+0x1e>
 8005bdc:	e088      	b.n	8005cf0 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	250f      	movs	r5, #15
 8005bea:	197b      	adds	r3, r7, r5
 8005bec:	2101      	movs	r1, #1
 8005bee:	400a      	ands	r2, r1
 8005bf0:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	0c1b      	lsrs	r3, r3, #16
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	200c      	movs	r0, #12
 8005bfe:	183b      	adds	r3, r7, r0
 8005c00:	21fe      	movs	r1, #254	; 0xfe
 8005c02:	400a      	ands	r2, r1
 8005c04:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	240a      	movs	r4, #10
 8005c10:	193b      	adds	r3, r7, r4
 8005c12:	0592      	lsls	r2, r2, #22
 8005c14:	0d92      	lsrs	r2, r2, #22
 8005c16:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	2308      	movs	r3, #8
 8005c22:	18fb      	adds	r3, r7, r3
 8005c24:	21fe      	movs	r1, #254	; 0xfe
 8005c26:	400a      	ands	r2, r1
 8005c28:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d148      	bne.n	8005cc4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005c32:	0021      	movs	r1, r4
 8005c34:	187b      	adds	r3, r7, r1
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	09db      	lsrs	r3, r3, #7
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	183b      	adds	r3, r7, r0
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	4053      	eors	r3, r2
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	001a      	movs	r2, r3
 8005c46:	2306      	movs	r3, #6
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d120      	bne.n	8005c8e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005c4c:	183b      	adds	r3, r7, r0
 8005c4e:	187a      	adds	r2, r7, r1
 8005c50:	8812      	ldrh	r2, [r2, #0]
 8005c52:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d14c      	bne.n	8005d00 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2208      	movs	r2, #8
 8005c72:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2240      	movs	r2, #64	; 0x40
 8005c78:	2100      	movs	r1, #0
 8005c7a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c7c:	183b      	adds	r3, r7, r0
 8005c7e:	881a      	ldrh	r2, [r3, #0]
 8005c80:	197b      	adds	r3, r7, r5
 8005c82:	7819      	ldrb	r1, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7ff fb0a 	bl	80052a0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c8c:	e038      	b.n	8005d00 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005c8e:	240c      	movs	r4, #12
 8005c90:	193b      	adds	r3, r7, r4
 8005c92:	2208      	movs	r2, #8
 8005c94:	18ba      	adds	r2, r7, r2
 8005c96:	8812      	ldrh	r2, [r2, #0]
 8005c98:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	021a      	lsls	r2, r3, #8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0011      	movs	r1, r2
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f000 ff6c 	bl	8006b80 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2240      	movs	r2, #64	; 0x40
 8005cac:	2100      	movs	r1, #0
 8005cae:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cb0:	193b      	adds	r3, r7, r4
 8005cb2:	881a      	ldrh	r2, [r3, #0]
 8005cb4:	230f      	movs	r3, #15
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	7819      	ldrb	r1, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f7ff faef 	bl	80052a0 <HAL_I2C_AddrCallback>
}
 8005cc2:	e01d      	b.n	8005d00 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	0011      	movs	r1, r2
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 ff57 	bl	8006b80 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2240      	movs	r2, #64	; 0x40
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005cda:	230c      	movs	r3, #12
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	881a      	ldrh	r2, [r3, #0]
 8005ce0:	230f      	movs	r3, #15
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	7819      	ldrb	r1, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f7ff fad9 	bl	80052a0 <HAL_I2C_AddrCallback>
}
 8005cee:	e007      	b.n	8005d00 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2240      	movs	r2, #64	; 0x40
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	5499      	strb	r1, [r3, r2]
}
 8005d00:	46c0      	nop			; (mov r8, r8)
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b004      	add	sp, #16
 8005d06:	bdb0      	pop	{r4, r5, r7, pc}

08005d08 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2242      	movs	r2, #66	; 0x42
 8005d14:	2100      	movs	r1, #0
 8005d16:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2241      	movs	r2, #65	; 0x41
 8005d1c:	5c9b      	ldrb	r3, [r3, r2]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b21      	cmp	r3, #33	; 0x21
 8005d22:	d117      	bne.n	8005d54 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2241      	movs	r2, #65	; 0x41
 8005d28:	2120      	movs	r1, #32
 8005d2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2211      	movs	r2, #17
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f000 ff1f 	bl	8006b80 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2240      	movs	r2, #64	; 0x40
 8005d46:	2100      	movs	r1, #0
 8005d48:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f7ff fa87 	bl	8005260 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d52:	e016      	b.n	8005d82 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2241      	movs	r2, #65	; 0x41
 8005d58:	2120      	movs	r1, #32
 8005d5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2212      	movs	r2, #18
 8005d60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 ff07 	bl	8006b80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2240      	movs	r2, #64	; 0x40
 8005d76:	2100      	movs	r1, #0
 8005d78:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f7ff fa77 	bl	8005270 <HAL_I2C_MasterRxCpltCallback>
}
 8005d82:	46c0      	nop			; (mov r8, r8)
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b002      	add	sp, #8
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2242      	movs	r2, #66	; 0x42
 8005da0:	2100      	movs	r1, #0
 8005da2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	0b9b      	lsrs	r3, r3, #14
 8005da8:	001a      	movs	r2, r3
 8005daa:	2301      	movs	r3, #1
 8005dac:	4013      	ands	r3, r2
 8005dae:	d008      	beq.n	8005dc2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4925      	ldr	r1, [pc, #148]	; (8005e50 <I2C_ITSlaveSeqCplt+0xc4>)
 8005dbc:	400a      	ands	r2, r1
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e00d      	b.n	8005dde <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	0bdb      	lsrs	r3, r3, #15
 8005dc6:	001a      	movs	r2, r3
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d007      	beq.n	8005dde <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	491e      	ldr	r1, [pc, #120]	; (8005e54 <I2C_ITSlaveSeqCplt+0xc8>)
 8005dda:	400a      	ands	r2, r1
 8005ddc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2241      	movs	r2, #65	; 0x41
 8005de2:	5c9b      	ldrb	r3, [r3, r2]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b29      	cmp	r3, #41	; 0x29
 8005de8:	d114      	bne.n	8005e14 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2241      	movs	r2, #65	; 0x41
 8005dee:	2128      	movs	r1, #40	; 0x28
 8005df0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2221      	movs	r2, #33	; 0x21
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f000 febf 	bl	8006b80 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2240      	movs	r2, #64	; 0x40
 8005e06:	2100      	movs	r1, #0
 8005e08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f7ff fa37 	bl	8005280 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005e12:	e019      	b.n	8005e48 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2241      	movs	r2, #65	; 0x41
 8005e18:	5c9b      	ldrb	r3, [r3, r2]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1e:	d113      	bne.n	8005e48 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2241      	movs	r2, #65	; 0x41
 8005e24:	2128      	movs	r1, #40	; 0x28
 8005e26:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2222      	movs	r2, #34	; 0x22
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2102      	movs	r1, #2
 8005e32:	0018      	movs	r0, r3
 8005e34:	f000 fea4 	bl	8006b80 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2240      	movs	r2, #64	; 0x40
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	0018      	movs	r0, r3
 8005e44:	f7ff fa24 	bl	8005290 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e48:	46c0      	nop			; (mov r8, r8)
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	b004      	add	sp, #16
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	ffffbfff 	.word	0xffffbfff
 8005e54:	ffff7fff 	.word	0xffff7fff

08005e58 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2241      	movs	r2, #65	; 0x41
 8005e72:	5c9b      	ldrb	r3, [r3, r2]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b21      	cmp	r3, #33	; 0x21
 8005e78:	d108      	bne.n	8005e8c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f000 fe7e 	bl	8006b80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2211      	movs	r2, #17
 8005e88:	631a      	str	r2, [r3, #48]	; 0x30
 8005e8a:	e00d      	b.n	8005ea8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2241      	movs	r2, #65	; 0x41
 8005e90:	5c9b      	ldrb	r3, [r3, r2]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b22      	cmp	r3, #34	; 0x22
 8005e96:	d107      	bne.n	8005ea8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 fe6f 	bl	8006b80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2212      	movs	r2, #18
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4950      	ldr	r1, [pc, #320]	; (8005ff4 <I2C_ITMasterCplt+0x19c>)
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a4d      	ldr	r2, [pc, #308]	; (8005ff8 <I2C_ITMasterCplt+0x1a0>)
 8005ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	091b      	lsrs	r3, r3, #4
 8005ec8:	001a      	movs	r2, r3
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4013      	ands	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	2204      	movs	r2, #4
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2241      	movs	r2, #65	; 0x41
 8005ee8:	5c9b      	ldrb	r3, [r3, r2]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b60      	cmp	r3, #96	; 0x60
 8005eee:	d10b      	bne.n	8005f08 <I2C_ITMasterCplt+0xb0>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	089b      	lsrs	r3, r3, #2
 8005ef4:	001a      	movs	r2, r3
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d005      	beq.n	8005f08 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005f06:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 faff 	bl	800650e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2241      	movs	r2, #65	; 0x41
 8005f1a:	5c9b      	ldrb	r3, [r3, r2]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b60      	cmp	r3, #96	; 0x60
 8005f20:	d002      	beq.n	8005f28 <I2C_ITMasterCplt+0xd0>
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d007      	beq.n	8005f38 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f000 f9e1 	bl	80062f8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f36:	e058      	b.n	8005fea <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2241      	movs	r2, #65	; 0x41
 8005f3c:	5c9b      	ldrb	r3, [r3, r2]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b21      	cmp	r3, #33	; 0x21
 8005f42:	d126      	bne.n	8005f92 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2241      	movs	r2, #65	; 0x41
 8005f48:	2120      	movs	r1, #32
 8005f4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2242      	movs	r2, #66	; 0x42
 8005f56:	5c9b      	ldrb	r3, [r3, r2]
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d10c      	bne.n	8005f78 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2242      	movs	r2, #66	; 0x42
 8005f62:	2100      	movs	r1, #0
 8005f64:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2240      	movs	r2, #64	; 0x40
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7ff f9ad 	bl	80052d0 <HAL_I2C_MemTxCpltCallback>
}
 8005f76:	e038      	b.n	8005fea <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2242      	movs	r2, #66	; 0x42
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2240      	movs	r2, #64	; 0x40
 8005f84:	2100      	movs	r1, #0
 8005f86:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f7ff f968 	bl	8005260 <HAL_I2C_MasterTxCpltCallback>
}
 8005f90:	e02b      	b.n	8005fea <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2241      	movs	r2, #65	; 0x41
 8005f96:	5c9b      	ldrb	r3, [r3, r2]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b22      	cmp	r3, #34	; 0x22
 8005f9c:	d125      	bne.n	8005fea <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2241      	movs	r2, #65	; 0x41
 8005fa2:	2120      	movs	r1, #32
 8005fa4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2242      	movs	r2, #66	; 0x42
 8005fb0:	5c9b      	ldrb	r3, [r3, r2]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b40      	cmp	r3, #64	; 0x40
 8005fb6:	d10c      	bne.n	8005fd2 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2242      	movs	r2, #66	; 0x42
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f7ff f988 	bl	80052e0 <HAL_I2C_MemRxCpltCallback>
}
 8005fd0:	e00b      	b.n	8005fea <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2242      	movs	r2, #66	; 0x42
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2240      	movs	r2, #64	; 0x40
 8005fde:	2100      	movs	r1, #0
 8005fe0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f7ff f943 	bl	8005270 <HAL_I2C_MasterRxCpltCallback>
}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	46bd      	mov	sp, r7
 8005fee:	b006      	add	sp, #24
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	fe00e800 	.word	0xfe00e800
 8005ff8:	ffff0000 	.word	0xffff0000

08005ffc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006012:	200f      	movs	r0, #15
 8006014:	183b      	adds	r3, r7, r0
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	2141      	movs	r1, #65	; 0x41
 800601a:	5c52      	ldrb	r2, [r2, r1]
 800601c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2220      	movs	r2, #32
 8006024:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006026:	183b      	adds	r3, r7, r0
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b21      	cmp	r3, #33	; 0x21
 800602c:	d003      	beq.n	8006036 <I2C_ITSlaveCplt+0x3a>
 800602e:	183b      	adds	r3, r7, r0
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b29      	cmp	r3, #41	; 0x29
 8006034:	d109      	bne.n	800604a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006036:	4a7d      	ldr	r2, [pc, #500]	; (800622c <I2C_ITSlaveCplt+0x230>)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	0011      	movs	r1, r2
 800603c:	0018      	movs	r0, r3
 800603e:	f000 fd9f 	bl	8006b80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2221      	movs	r2, #33	; 0x21
 8006046:	631a      	str	r2, [r3, #48]	; 0x30
 8006048:	e011      	b.n	800606e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800604a:	220f      	movs	r2, #15
 800604c:	18bb      	adds	r3, r7, r2
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b22      	cmp	r3, #34	; 0x22
 8006052:	d003      	beq.n	800605c <I2C_ITSlaveCplt+0x60>
 8006054:	18bb      	adds	r3, r7, r2
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b2a      	cmp	r3, #42	; 0x2a
 800605a:	d108      	bne.n	800606e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800605c:	4a74      	ldr	r2, [pc, #464]	; (8006230 <I2C_ITSlaveCplt+0x234>)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	0011      	movs	r1, r2
 8006062:	0018      	movs	r0, r3
 8006064:	f000 fd8c 	bl	8006b80 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2222      	movs	r2, #34	; 0x22
 800606c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2180      	movs	r1, #128	; 0x80
 800607a:	0209      	lsls	r1, r1, #8
 800607c:	430a      	orrs	r2, r1
 800607e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	496a      	ldr	r1, [pc, #424]	; (8006234 <I2C_ITSlaveCplt+0x238>)
 800608c:	400a      	ands	r2, r1
 800608e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	0018      	movs	r0, r3
 8006094:	f000 fa3b 	bl	800650e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	0b9b      	lsrs	r3, r3, #14
 800609c:	001a      	movs	r2, r3
 800609e:	2301      	movs	r3, #1
 80060a0:	4013      	ands	r3, r2
 80060a2:	d013      	beq.n	80060cc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4962      	ldr	r1, [pc, #392]	; (8006238 <I2C_ITSlaveCplt+0x23c>)
 80060b0:	400a      	ands	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d020      	beq.n	80060fe <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060ca:	e018      	b.n	80060fe <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	0bdb      	lsrs	r3, r3, #15
 80060d0:	001a      	movs	r2, r3
 80060d2:	2301      	movs	r3, #1
 80060d4:	4013      	ands	r3, r2
 80060d6:	d012      	beq.n	80060fe <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4956      	ldr	r1, [pc, #344]	; (800623c <I2C_ITSlaveCplt+0x240>)
 80060e4:	400a      	ands	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d006      	beq.n	80060fe <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	089b      	lsrs	r3, r3, #2
 8006102:	001a      	movs	r2, r3
 8006104:	2301      	movs	r3, #1
 8006106:	4013      	ands	r3, r2
 8006108:	d020      	beq.n	800614c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2204      	movs	r2, #4
 800610e:	4393      	bics	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00c      	beq.n	800614c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	2204      	movs	r2, #4
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2242      	movs	r2, #66	; 0x42
 8006166:	2100      	movs	r1, #0
 8006168:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006174:	2b00      	cmp	r3, #0
 8006176:	d013      	beq.n	80061a0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	0011      	movs	r1, r2
 8006180:	0018      	movs	r0, r3
 8006182:	f000 f8b9 	bl	80062f8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2241      	movs	r2, #65	; 0x41
 800618a:	5c9b      	ldrb	r3, [r3, r2]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b28      	cmp	r3, #40	; 0x28
 8006190:	d147      	bne.n	8006222 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	0011      	movs	r1, r2
 8006198:	0018      	movs	r0, r3
 800619a:	f000 f853 	bl	8006244 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800619e:	e040      	b.n	8006222 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	4a26      	ldr	r2, [pc, #152]	; (8006240 <I2C_ITSlaveCplt+0x244>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d016      	beq.n	80061d8 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7ff fded 	bl	8005d8c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a22      	ldr	r2, [pc, #136]	; (8006240 <I2C_ITSlaveCplt+0x244>)
 80061b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2241      	movs	r2, #65	; 0x41
 80061bc:	2120      	movs	r1, #32
 80061be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2240      	movs	r2, #64	; 0x40
 80061ca:	2100      	movs	r1, #0
 80061cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	0018      	movs	r0, r3
 80061d2:	f7ff f875 	bl	80052c0 <HAL_I2C_ListenCpltCallback>
}
 80061d6:	e024      	b.n	8006222 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2241      	movs	r2, #65	; 0x41
 80061dc:	5c9b      	ldrb	r3, [r3, r2]
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b22      	cmp	r3, #34	; 0x22
 80061e2:	d10f      	bne.n	8006204 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2241      	movs	r2, #65	; 0x41
 80061e8:	2120      	movs	r1, #32
 80061ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2240      	movs	r2, #64	; 0x40
 80061f6:	2100      	movs	r1, #0
 80061f8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	0018      	movs	r0, r3
 80061fe:	f7ff f847 	bl	8005290 <HAL_I2C_SlaveRxCpltCallback>
}
 8006202:	e00e      	b.n	8006222 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2241      	movs	r2, #65	; 0x41
 8006208:	2120      	movs	r1, #32
 800620a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2240      	movs	r2, #64	; 0x40
 8006216:	2100      	movs	r1, #0
 8006218:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	0018      	movs	r0, r3
 800621e:	f7ff f82f 	bl	8005280 <HAL_I2C_SlaveTxCpltCallback>
}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	46bd      	mov	sp, r7
 8006226:	b006      	add	sp, #24
 8006228:	bd80      	pop	{r7, pc}
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	00008001 	.word	0x00008001
 8006230:	00008002 	.word	0x00008002
 8006234:	fe00e800 	.word	0xfe00e800
 8006238:	ffffbfff 	.word	0xffffbfff
 800623c:	ffff7fff 	.word	0xffff7fff
 8006240:	ffff0000 	.word	0xffff0000

08006244 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a27      	ldr	r2, [pc, #156]	; (80062f0 <I2C_ITListenCplt+0xac>)
 8006252:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2241      	movs	r2, #65	; 0x41
 800625e:	2120      	movs	r1, #32
 8006260:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2242      	movs	r2, #66	; 0x42
 8006266:	2100      	movs	r1, #0
 8006268:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	089b      	lsrs	r3, r3, #2
 8006274:	001a      	movs	r2, r3
 8006276:	2301      	movs	r3, #1
 8006278:	4013      	ands	r3, r2
 800627a:	d022      	beq.n	80062c2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d012      	beq.n	80062c2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	2204      	movs	r2, #4
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <I2C_ITListenCplt+0xb0>)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	0011      	movs	r1, r2
 80062c8:	0018      	movs	r0, r3
 80062ca:	f000 fc59 	bl	8006b80 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2210      	movs	r2, #16
 80062d4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2240      	movs	r2, #64	; 0x40
 80062da:	2100      	movs	r1, #0
 80062dc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	0018      	movs	r0, r3
 80062e2:	f7fe ffed 	bl	80052c0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80062e6:	46c0      	nop			; (mov r8, r8)
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b002      	add	sp, #8
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	46c0      	nop			; (mov r8, r8)
 80062f0:	ffff0000 	.word	0xffff0000
 80062f4:	00008003 	.word	0x00008003

080062f8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006302:	200f      	movs	r0, #15
 8006304:	183b      	adds	r3, r7, r0
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	2141      	movs	r1, #65	; 0x41
 800630a:	5c52      	ldrb	r2, [r2, r1]
 800630c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2242      	movs	r2, #66	; 0x42
 8006312:	2100      	movs	r1, #0
 8006314:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a62      	ldr	r2, [pc, #392]	; (80064a4 <I2C_ITError+0x1ac>)
 800631a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800632e:	183b      	adds	r3, r7, r0
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b28      	cmp	r3, #40	; 0x28
 8006334:	d007      	beq.n	8006346 <I2C_ITError+0x4e>
 8006336:	183b      	adds	r3, r7, r0
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b29      	cmp	r3, #41	; 0x29
 800633c:	d003      	beq.n	8006346 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800633e:	183b      	adds	r3, r7, r0
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b2a      	cmp	r3, #42	; 0x2a
 8006344:	d10c      	bne.n	8006360 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2103      	movs	r1, #3
 800634a:	0018      	movs	r0, r3
 800634c:	f000 fc18 	bl	8006b80 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2241      	movs	r2, #65	; 0x41
 8006354:	2128      	movs	r1, #40	; 0x28
 8006356:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a53      	ldr	r2, [pc, #332]	; (80064a8 <I2C_ITError+0x1b0>)
 800635c:	635a      	str	r2, [r3, #52]	; 0x34
 800635e:	e012      	b.n	8006386 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006360:	4a52      	ldr	r2, [pc, #328]	; (80064ac <I2C_ITError+0x1b4>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	0011      	movs	r1, r2
 8006366:	0018      	movs	r0, r3
 8006368:	f000 fc0a 	bl	8006b80 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2241      	movs	r2, #65	; 0x41
 8006370:	5c9b      	ldrb	r3, [r3, r2]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b60      	cmp	r3, #96	; 0x60
 8006376:	d003      	beq.n	8006380 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2241      	movs	r2, #65	; 0x41
 800637c:	2120      	movs	r1, #32
 800637e:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	2b00      	cmp	r3, #0
 8006392:	d03b      	beq.n	800640c <I2C_ITError+0x114>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b11      	cmp	r3, #17
 8006398:	d002      	beq.n	80063a0 <I2C_ITError+0xa8>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b21      	cmp	r3, #33	; 0x21
 800639e:	d135      	bne.n	800640c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	01db      	lsls	r3, r3, #7
 80063aa:	401a      	ands	r2, r3
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d107      	bne.n	80063c4 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	493c      	ldr	r1, [pc, #240]	; (80064b0 <I2C_ITError+0x1b8>)
 80063c0:	400a      	ands	r2, r1
 80063c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	0018      	movs	r0, r3
 80063ca:	f7fe f819 	bl	8004400 <HAL_DMA_GetState>
 80063ce:	0003      	movs	r3, r0
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d016      	beq.n	8006402 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	4a36      	ldr	r2, [pc, #216]	; (80064b4 <I2C_ITError+0x1bc>)
 80063da:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2240      	movs	r2, #64	; 0x40
 80063e0:	2100      	movs	r1, #0
 80063e2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7fd ff9f 	bl	800432c <HAL_DMA_Abort_IT>
 80063ee:	1e03      	subs	r3, r0, #0
 80063f0:	d051      	beq.n	8006496 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	0018      	movs	r0, r3
 80063fe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006400:	e049      	b.n	8006496 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	0018      	movs	r0, r3
 8006406:	f000 f859 	bl	80064bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800640a:	e044      	b.n	8006496 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d03b      	beq.n	800648c <I2C_ITError+0x194>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b12      	cmp	r3, #18
 8006418:	d002      	beq.n	8006420 <I2C_ITError+0x128>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b22      	cmp	r3, #34	; 0x22
 800641e:	d135      	bne.n	800648c <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	2380      	movs	r3, #128	; 0x80
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	401a      	ands	r2, r3
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	021b      	lsls	r3, r3, #8
 8006430:	429a      	cmp	r2, r3
 8006432:	d107      	bne.n	8006444 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	491e      	ldr	r1, [pc, #120]	; (80064b8 <I2C_ITError+0x1c0>)
 8006440:	400a      	ands	r2, r1
 8006442:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	0018      	movs	r0, r3
 800644a:	f7fd ffd9 	bl	8004400 <HAL_DMA_GetState>
 800644e:	0003      	movs	r3, r0
 8006450:	2b01      	cmp	r3, #1
 8006452:	d016      	beq.n	8006482 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006458:	4a16      	ldr	r2, [pc, #88]	; (80064b4 <I2C_ITError+0x1bc>)
 800645a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2240      	movs	r2, #64	; 0x40
 8006460:	2100      	movs	r1, #0
 8006462:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006468:	0018      	movs	r0, r3
 800646a:	f7fd ff5f 	bl	800432c <HAL_DMA_Abort_IT>
 800646e:	1e03      	subs	r3, r0, #0
 8006470:	d013      	beq.n	800649a <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	0018      	movs	r0, r3
 800647e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006480:	e00b      	b.n	800649a <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0018      	movs	r0, r3
 8006486:	f000 f819 	bl	80064bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800648a:	e006      	b.n	800649a <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	0018      	movs	r0, r3
 8006490:	f000 f814 	bl	80064bc <I2C_TreatErrorCallback>
  }
}
 8006494:	e002      	b.n	800649c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	e000      	b.n	800649c <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800649a:	46c0      	nop			; (mov r8, r8)
}
 800649c:	46c0      	nop			; (mov r8, r8)
 800649e:	46bd      	mov	sp, r7
 80064a0:	b004      	add	sp, #16
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	ffff0000 	.word	0xffff0000
 80064a8:	08005595 	.word	0x08005595
 80064ac:	00008003 	.word	0x00008003
 80064b0:	ffffbfff 	.word	0xffffbfff
 80064b4:	080066c7 	.word	0x080066c7
 80064b8:	ffff7fff 	.word	0xffff7fff

080064bc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2241      	movs	r2, #65	; 0x41
 80064c8:	5c9b      	ldrb	r3, [r3, r2]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b60      	cmp	r3, #96	; 0x60
 80064ce:	d10f      	bne.n	80064f0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2241      	movs	r2, #65	; 0x41
 80064d4:	2120      	movs	r1, #32
 80064d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2240      	movs	r2, #64	; 0x40
 80064e2:	2100      	movs	r1, #0
 80064e4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f7fe ff09 	bl	8005300 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064ee:	e00a      	b.n	8006506 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2240      	movs	r2, #64	; 0x40
 80064fa:	2100      	movs	r1, #0
 80064fc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	0018      	movs	r0, r3
 8006502:	f7fe fef5 	bl	80052f0 <HAL_I2C_ErrorCallback>
}
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	46bd      	mov	sp, r7
 800650a:	b002      	add	sp, #8
 800650c:	bd80      	pop	{r7, pc}

0800650e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	2202      	movs	r2, #2
 800651e:	4013      	ands	r3, r2
 8006520:	2b02      	cmp	r3, #2
 8006522:	d103      	bne.n	800652c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2200      	movs	r2, #0
 800652a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	2201      	movs	r2, #1
 8006534:	4013      	ands	r3, r2
 8006536:	2b01      	cmp	r3, #1
 8006538:	d007      	beq.n	800654a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2101      	movs	r1, #1
 8006546:	430a      	orrs	r2, r1
 8006548:	619a      	str	r2, [r3, #24]
  }
}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	46bd      	mov	sp, r7
 800654e:	b002      	add	sp, #8
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4920      	ldr	r1, [pc, #128]	; (80065f0 <I2C_DMAMasterTransmitCplt+0x9c>)
 800656e:	400a      	ands	r2, r1
 8006570:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2120      	movs	r1, #32
 8006580:	0018      	movs	r0, r3
 8006582:	f000 fa95 	bl	8006ab0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006586:	e02e      	b.n	80065e6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006590:	189a      	adds	r2, r3, r2
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	2bff      	cmp	r3, #255	; 0xff
 800659e:	d903      	bls.n	80065a8 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	22ff      	movs	r2, #255	; 0xff
 80065a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80065a6:	e004      	b.n	80065b2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	0019      	movs	r1, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3328      	adds	r3, #40	; 0x28
 80065c2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80065c8:	f7fd fe2a 	bl	8004220 <HAL_DMA_Start_IT>
 80065cc:	1e03      	subs	r3, r0, #0
 80065ce:	d005      	beq.n	80065dc <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2110      	movs	r1, #16
 80065d4:	0018      	movs	r0, r3
 80065d6:	f7ff fe8f 	bl	80062f8 <I2C_ITError>
}
 80065da:	e004      	b.n	80065e6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2140      	movs	r1, #64	; 0x40
 80065e0:	0018      	movs	r0, r3
 80065e2:	f000 fa65 	bl	8006ab0 <I2C_Enable_IRQ>
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b004      	add	sp, #16
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	ffffbfff 	.word	0xffffbfff

080065f4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4920      	ldr	r1, [pc, #128]	; (8006690 <I2C_DMAMasterReceiveCplt+0x9c>)
 800660e:	400a      	ands	r2, r1
 8006610:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2120      	movs	r1, #32
 8006620:	0018      	movs	r0, r3
 8006622:	f000 fa45 	bl	8006ab0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006626:	e02e      	b.n	8006686 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006630:	189a      	adds	r2, r3, r2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	2bff      	cmp	r3, #255	; 0xff
 800663e:	d903      	bls.n	8006648 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	22ff      	movs	r2, #255	; 0xff
 8006644:	851a      	strh	r2, [r3, #40]	; 0x28
 8006646:	e004      	b.n	8006652 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	3324      	adds	r3, #36	; 0x24
 800665c:	0019      	movs	r1, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006668:	f7fd fdda 	bl	8004220 <HAL_DMA_Start_IT>
 800666c:	1e03      	subs	r3, r0, #0
 800666e:	d005      	beq.n	800667c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2110      	movs	r1, #16
 8006674:	0018      	movs	r0, r3
 8006676:	f7ff fe3f 	bl	80062f8 <I2C_ITError>
}
 800667a:	e004      	b.n	8006686 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2140      	movs	r1, #64	; 0x40
 8006680:	0018      	movs	r0, r3
 8006682:	f000 fa15 	bl	8006ab0 <I2C_Enable_IRQ>
}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	46bd      	mov	sp, r7
 800668a:	b004      	add	sp, #16
 800668c:	bd80      	pop	{r7, pc}
 800668e:	46c0      	nop			; (mov r8, r8)
 8006690:	ffff7fff 	.word	0xffff7fff

08006694 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2180      	movs	r1, #128	; 0x80
 80066ae:	0209      	lsls	r1, r1, #8
 80066b0:	430a      	orrs	r2, r1
 80066b2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2110      	movs	r1, #16
 80066b8:	0018      	movs	r0, r3
 80066ba:	f7ff fe1d 	bl	80062f8 <I2C_ITError>
}
 80066be:	46c0      	nop			; (mov r8, r8)
 80066c0:	46bd      	mov	sp, r7
 80066c2:	b004      	add	sp, #16
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d003      	beq.n	80066e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	2200      	movs	r2, #0
 80066e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d003      	beq.n	80066f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f0:	2200      	movs	r2, #0
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	0018      	movs	r0, r3
 80066f8:	f7ff fee0 	bl	80064bc <I2C_TreatErrorCallback>
}
 80066fc:	46c0      	nop			; (mov r8, r8)
 80066fe:	46bd      	mov	sp, r7
 8006700:	b004      	add	sp, #16
 8006702:	bd80      	pop	{r7, pc}

08006704 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	603b      	str	r3, [r7, #0]
 8006710:	1dfb      	adds	r3, r7, #7
 8006712:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006714:	e021      	b.n	800675a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	d01e      	beq.n	800675a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671c:	f7fc fd46 	bl	80031ac <HAL_GetTick>
 8006720:	0002      	movs	r2, r0
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d302      	bcc.n	8006732 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d113      	bne.n	800675a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	2220      	movs	r2, #32
 8006738:	431a      	orrs	r2, r3
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2241      	movs	r2, #65	; 0x41
 8006742:	2120      	movs	r1, #32
 8006744:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2242      	movs	r2, #66	; 0x42
 800674a:	2100      	movs	r1, #0
 800674c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2240      	movs	r2, #64	; 0x40
 8006752:	2100      	movs	r1, #0
 8006754:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e00f      	b.n	800677a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	4013      	ands	r3, r2
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	425a      	negs	r2, r3
 800676a:	4153      	adcs	r3, r2
 800676c:	b2db      	uxtb	r3, r3
 800676e:	001a      	movs	r2, r3
 8006770:	1dfb      	adds	r3, r7, #7
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d0ce      	beq.n	8006716 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b004      	add	sp, #16
 8006780:	bd80      	pop	{r7, pc}

08006782 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800678e:	e02b      	b.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	68b9      	ldr	r1, [r7, #8]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	0018      	movs	r0, r3
 8006798:	f000 f8da 	bl	8006950 <I2C_IsAcknowledgeFailed>
 800679c:	1e03      	subs	r3, r0, #0
 800679e:	d001      	beq.n	80067a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e029      	b.n	80067f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	3301      	adds	r3, #1
 80067a8:	d01e      	beq.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067aa:	f7fc fcff 	bl	80031ac <HAL_GetTick>
 80067ae:	0002      	movs	r2, r0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d302      	bcc.n	80067c0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d113      	bne.n	80067e8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	2220      	movs	r2, #32
 80067c6:	431a      	orrs	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2241      	movs	r2, #65	; 0x41
 80067d0:	2120      	movs	r1, #32
 80067d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2242      	movs	r2, #66	; 0x42
 80067d8:	2100      	movs	r1, #0
 80067da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	2100      	movs	r1, #0
 80067e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e007      	b.n	80067f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2202      	movs	r2, #2
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d1cc      	bne.n	8006790 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	0018      	movs	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b004      	add	sp, #16
 80067fe:	bd80      	pop	{r7, pc}

08006800 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800680c:	e028      	b.n	8006860 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	0018      	movs	r0, r3
 8006816:	f000 f89b 	bl	8006950 <I2C_IsAcknowledgeFailed>
 800681a:	1e03      	subs	r3, r0, #0
 800681c:	d001      	beq.n	8006822 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e026      	b.n	8006870 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006822:	f7fc fcc3 	bl	80031ac <HAL_GetTick>
 8006826:	0002      	movs	r2, r0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	429a      	cmp	r2, r3
 8006830:	d302      	bcc.n	8006838 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d113      	bne.n	8006860 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	2220      	movs	r2, #32
 800683e:	431a      	orrs	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2241      	movs	r2, #65	; 0x41
 8006848:	2120      	movs	r1, #32
 800684a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2242      	movs	r2, #66	; 0x42
 8006850:	2100      	movs	r1, #0
 8006852:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2240      	movs	r2, #64	; 0x40
 8006858:	2100      	movs	r1, #0
 800685a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e007      	b.n	8006870 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	2220      	movs	r2, #32
 8006868:	4013      	ands	r3, r2
 800686a:	2b20      	cmp	r3, #32
 800686c:	d1cf      	bne.n	800680e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b004      	add	sp, #16
 8006876:	bd80      	pop	{r7, pc}

08006878 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006884:	e055      	b.n	8006932 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	0018      	movs	r0, r3
 800688e:	f000 f85f 	bl	8006950 <I2C_IsAcknowledgeFailed>
 8006892:	1e03      	subs	r3, r0, #0
 8006894:	d001      	beq.n	800689a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e053      	b.n	8006942 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	2220      	movs	r2, #32
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b20      	cmp	r3, #32
 80068a6:	d129      	bne.n	80068fc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	2204      	movs	r2, #4
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	d105      	bne.n	80068c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e03f      	b.n	8006942 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2220      	movs	r2, #32
 80068c8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685a      	ldr	r2, [r3, #4]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	491d      	ldr	r1, [pc, #116]	; (800694c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80068d6:	400a      	ands	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2241      	movs	r2, #65	; 0x41
 80068e4:	2120      	movs	r1, #32
 80068e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2242      	movs	r2, #66	; 0x42
 80068ec:	2100      	movs	r1, #0
 80068ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2240      	movs	r2, #64	; 0x40
 80068f4:	2100      	movs	r1, #0
 80068f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e022      	b.n	8006942 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068fc:	f7fc fc56 	bl	80031ac <HAL_GetTick>
 8006900:	0002      	movs	r2, r0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	429a      	cmp	r2, r3
 800690a:	d302      	bcc.n	8006912 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10f      	bne.n	8006932 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006916:	2220      	movs	r2, #32
 8006918:	431a      	orrs	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2241      	movs	r2, #65	; 0x41
 8006922:	2120      	movs	r1, #32
 8006924:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2240      	movs	r2, #64	; 0x40
 800692a:	2100      	movs	r1, #0
 800692c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e007      	b.n	8006942 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	2204      	movs	r2, #4
 800693a:	4013      	ands	r3, r2
 800693c:	2b04      	cmp	r3, #4
 800693e:	d1a2      	bne.n	8006886 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	0018      	movs	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	b004      	add	sp, #16
 8006948:	bd80      	pop	{r7, pc}
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	fe00e800 	.word	0xfe00e800

08006950 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2210      	movs	r2, #16
 8006964:	4013      	ands	r3, r2
 8006966:	2b10      	cmp	r3, #16
 8006968:	d164      	bne.n	8006a34 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	049b      	lsls	r3, r3, #18
 8006974:	401a      	ands	r2, r3
 8006976:	2380      	movs	r3, #128	; 0x80
 8006978:	049b      	lsls	r3, r3, #18
 800697a:	429a      	cmp	r2, r3
 800697c:	d02b      	beq.n	80069d6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2180      	movs	r1, #128	; 0x80
 800698a:	01c9      	lsls	r1, r1, #7
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006990:	e021      	b.n	80069d6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	3301      	adds	r3, #1
 8006996:	d01e      	beq.n	80069d6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006998:	f7fc fc08 	bl	80031ac <HAL_GetTick>
 800699c:	0002      	movs	r2, r0
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <I2C_IsAcknowledgeFailed+0x5e>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d113      	bne.n	80069d6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b2:	2220      	movs	r2, #32
 80069b4:	431a      	orrs	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2241      	movs	r2, #65	; 0x41
 80069be:	2120      	movs	r1, #32
 80069c0:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2242      	movs	r2, #66	; 0x42
 80069c6:	2100      	movs	r1, #0
 80069c8:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2240      	movs	r2, #64	; 0x40
 80069ce:	2100      	movs	r1, #0
 80069d0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e02f      	b.n	8006a36 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	2220      	movs	r2, #32
 80069de:	4013      	ands	r3, r2
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	d1d6      	bne.n	8006992 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2210      	movs	r2, #16
 80069ea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2220      	movs	r2, #32
 80069f2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	0018      	movs	r0, r3
 80069f8:	f7ff fd89 	bl	800650e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685a      	ldr	r2, [r3, #4]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	490e      	ldr	r1, [pc, #56]	; (8006a40 <I2C_IsAcknowledgeFailed+0xf0>)
 8006a08:	400a      	ands	r2, r1
 8006a0a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a10:	2204      	movs	r2, #4
 8006a12:	431a      	orrs	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2241      	movs	r2, #65	; 0x41
 8006a1c:	2120      	movs	r1, #32
 8006a1e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2242      	movs	r2, #66	; 0x42
 8006a24:	2100      	movs	r1, #0
 8006a26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2240      	movs	r2, #64	; 0x40
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	0018      	movs	r0, r3
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	b004      	add	sp, #16
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	fe00e800 	.word	0xfe00e800

08006a44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a44:	b590      	push	{r4, r7, lr}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	0008      	movs	r0, r1
 8006a4e:	0011      	movs	r1, r2
 8006a50:	607b      	str	r3, [r7, #4]
 8006a52:	240a      	movs	r4, #10
 8006a54:	193b      	adds	r3, r7, r4
 8006a56:	1c02      	adds	r2, r0, #0
 8006a58:	801a      	strh	r2, [r3, #0]
 8006a5a:	2009      	movs	r0, #9
 8006a5c:	183b      	adds	r3, r7, r0
 8006a5e:	1c0a      	adds	r2, r1, #0
 8006a60:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	6a3a      	ldr	r2, [r7, #32]
 8006a6a:	0d51      	lsrs	r1, r2, #21
 8006a6c:	2280      	movs	r2, #128	; 0x80
 8006a6e:	00d2      	lsls	r2, r2, #3
 8006a70:	400a      	ands	r2, r1
 8006a72:	490e      	ldr	r1, [pc, #56]	; (8006aac <I2C_TransferConfig+0x68>)
 8006a74:	430a      	orrs	r2, r1
 8006a76:	43d2      	mvns	r2, r2
 8006a78:	401a      	ands	r2, r3
 8006a7a:	0011      	movs	r1, r2
 8006a7c:	193b      	adds	r3, r7, r4
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	059b      	lsls	r3, r3, #22
 8006a82:	0d9a      	lsrs	r2, r3, #22
 8006a84:	183b      	adds	r3, r7, r0
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	0418      	lsls	r0, r3, #16
 8006a8a:	23ff      	movs	r3, #255	; 0xff
 8006a8c:	041b      	lsls	r3, r3, #16
 8006a8e:	4003      	ands	r3, r0
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	431a      	orrs	r2, r3
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b005      	add	sp, #20
 8006aa8:	bd90      	pop	{r4, r7, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	03ff63ff 	.word	0x03ff63ff

08006ab0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	000a      	movs	r2, r1
 8006aba:	1cbb      	adds	r3, r7, #2
 8006abc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac6:	4b2c      	ldr	r3, [pc, #176]	; (8006b78 <I2C_Enable_IRQ+0xc8>)
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d004      	beq.n	8006ad6 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006ad0:	4b2a      	ldr	r3, [pc, #168]	; (8006b7c <I2C_Enable_IRQ+0xcc>)
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d121      	bne.n	8006b1a <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ad6:	1cbb      	adds	r3, r7, #2
 8006ad8:	2200      	movs	r2, #0
 8006ada:	5e9b      	ldrsh	r3, [r3, r2]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	da03      	bge.n	8006ae8 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	22b8      	movs	r2, #184	; 0xb8
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006ae8:	1cbb      	adds	r3, r7, #2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	d103      	bne.n	8006af8 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2290      	movs	r2, #144	; 0x90
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006af8:	1cbb      	adds	r3, r7, #2
 8006afa:	881b      	ldrh	r3, [r3, #0]
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d103      	bne.n	8006b08 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2260      	movs	r2, #96	; 0x60
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b08:	1cbb      	adds	r3, r7, #2
 8006b0a:	881b      	ldrh	r3, [r3, #0]
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d127      	bne.n	8006b60 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2240      	movs	r2, #64	; 0x40
 8006b14:	4313      	orrs	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006b18:	e022      	b.n	8006b60 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b1a:	1cbb      	adds	r3, r7, #2
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	5e9b      	ldrsh	r3, [r3, r2]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da03      	bge.n	8006b2c <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	22b8      	movs	r2, #184	; 0xb8
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b2c:	1cbb      	adds	r3, r7, #2
 8006b2e:	881b      	ldrh	r3, [r3, #0]
 8006b30:	2201      	movs	r2, #1
 8006b32:	4013      	ands	r3, r2
 8006b34:	d003      	beq.n	8006b3e <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	22f2      	movs	r2, #242	; 0xf2
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b3e:	1cbb      	adds	r3, r7, #2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	2202      	movs	r2, #2
 8006b44:	4013      	ands	r3, r2
 8006b46:	d003      	beq.n	8006b50 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	22f4      	movs	r2, #244	; 0xf4
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b50:	1cbb      	adds	r3, r7, #2
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	d103      	bne.n	8006b60 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6819      	ldr	r1, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	601a      	str	r2, [r3, #0]
}
 8006b70:	46c0      	nop			; (mov r8, r8)
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b004      	add	sp, #16
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	080057bd 	.word	0x080057bd
 8006b7c:	080059d5 	.word	0x080059d5

08006b80 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	000a      	movs	r2, r1
 8006b8a:	1cbb      	adds	r3, r7, #2
 8006b8c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b92:	1cbb      	adds	r3, r7, #2
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	2201      	movs	r2, #1
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d010      	beq.n	8006bbe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2242      	movs	r2, #66	; 0x42
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2241      	movs	r2, #65	; 0x41
 8006ba8:	5c9b      	ldrb	r3, [r3, r2]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	001a      	movs	r2, r3
 8006bae:	2328      	movs	r3, #40	; 0x28
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	2b28      	cmp	r3, #40	; 0x28
 8006bb4:	d003      	beq.n	8006bbe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	22b0      	movs	r2, #176	; 0xb0
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006bbe:	1cbb      	adds	r3, r7, #2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	d010      	beq.n	8006bea <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2244      	movs	r2, #68	; 0x44
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2241      	movs	r2, #65	; 0x41
 8006bd4:	5c9b      	ldrb	r3, [r3, r2]
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	001a      	movs	r2, r3
 8006bda:	2328      	movs	r3, #40	; 0x28
 8006bdc:	4013      	ands	r3, r2
 8006bde:	2b28      	cmp	r3, #40	; 0x28
 8006be0:	d003      	beq.n	8006bea <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	22b0      	movs	r2, #176	; 0xb0
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bea:	1cbb      	adds	r3, r7, #2
 8006bec:	2200      	movs	r2, #0
 8006bee:	5e9b      	ldrsh	r3, [r3, r2]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da03      	bge.n	8006bfc <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	22b8      	movs	r2, #184	; 0xb8
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006bfc:	1cbb      	adds	r3, r7, #2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d103      	bne.n	8006c0c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2290      	movs	r2, #144	; 0x90
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c0c:	1cbb      	adds	r3, r7, #2
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d103      	bne.n	8006c1c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c1c:	1cbb      	adds	r3, r7, #2
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	2b40      	cmp	r3, #64	; 0x40
 8006c22:	d103      	bne.n	8006c2c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2240      	movs	r2, #64	; 0x40
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	43d9      	mvns	r1, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	400a      	ands	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	46bd      	mov	sp, r7
 8006c42:	b004      	add	sp, #16
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2241      	movs	r2, #65	; 0x41
 8006c56:	5c9b      	ldrb	r3, [r3, r2]
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d138      	bne.n	8006cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2240      	movs	r2, #64	; 0x40
 8006c62:	5c9b      	ldrb	r3, [r3, r2]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e032      	b.n	8006cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2240      	movs	r2, #64	; 0x40
 8006c70:	2101      	movs	r1, #1
 8006c72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2241      	movs	r2, #65	; 0x41
 8006c78:	2124      	movs	r1, #36	; 0x24
 8006c7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2101      	movs	r1, #1
 8006c88:	438a      	bics	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4911      	ldr	r1, [pc, #68]	; (8006cdc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006c98:	400a      	ands	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6819      	ldr	r1, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2241      	movs	r2, #65	; 0x41
 8006cc0:	2120      	movs	r1, #32
 8006cc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2240      	movs	r2, #64	; 0x40
 8006cc8:	2100      	movs	r1, #0
 8006cca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e000      	b.n	8006cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
  }
}
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b002      	add	sp, #8
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	ffffefff 	.word	0xffffefff

08006ce0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2241      	movs	r2, #65	; 0x41
 8006cee:	5c9b      	ldrb	r3, [r3, r2]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	d139      	bne.n	8006d6a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2240      	movs	r2, #64	; 0x40
 8006cfa:	5c9b      	ldrb	r3, [r3, r2]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e033      	b.n	8006d6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2240      	movs	r2, #64	; 0x40
 8006d08:	2101      	movs	r1, #1
 8006d0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2241      	movs	r2, #65	; 0x41
 8006d10:	2124      	movs	r1, #36	; 0x24
 8006d12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2101      	movs	r1, #1
 8006d20:	438a      	bics	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4a11      	ldr	r2, [pc, #68]	; (8006d74 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006d30:	4013      	ands	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2101      	movs	r1, #1
 8006d52:	430a      	orrs	r2, r1
 8006d54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2241      	movs	r2, #65	; 0x41
 8006d5a:	2120      	movs	r1, #32
 8006d5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2240      	movs	r2, #64	; 0x40
 8006d62:	2100      	movs	r1, #0
 8006d64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	e000      	b.n	8006d6c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d6a:	2302      	movs	r3, #2
  }
}
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b004      	add	sp, #16
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	fffff0ff 	.word	0xfffff0ff

08006d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006d80:	4b19      	ldr	r3, [pc, #100]	; (8006de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a19      	ldr	r2, [pc, #100]	; (8006dec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006d86:	4013      	ands	r3, r2
 8006d88:	0019      	movs	r1, r3
 8006d8a:	4b17      	ldr	r3, [pc, #92]	; (8006de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d11f      	bne.n	8006ddc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	0013      	movs	r3, r2
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	005b      	lsls	r3, r3, #1
 8006da8:	4912      	ldr	r1, [pc, #72]	; (8006df4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006daa:	0018      	movs	r0, r3
 8006dac:	f7f9 f9a6 	bl	80000fc <__udivsi3>
 8006db0:	0003      	movs	r3, r0
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006db6:	e008      	b.n	8006dca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e001      	b.n	8006dca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e009      	b.n	8006dde <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006dca:	4b07      	ldr	r3, [pc, #28]	; (8006de8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	2380      	movs	r3, #128	; 0x80
 8006dd0:	00db      	lsls	r3, r3, #3
 8006dd2:	401a      	ands	r2, r3
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d0ed      	beq.n	8006db8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	0018      	movs	r0, r3
 8006de0:	46bd      	mov	sp, r7
 8006de2:	b004      	add	sp, #16
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	40007000 	.word	0x40007000
 8006dec:	fffff9ff 	.word	0xfffff9ff
 8006df0:	20000000 	.word	0x20000000
 8006df4:	000f4240 	.word	0x000f4240

08006df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e2f9      	b.n	80073fe <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4013      	ands	r3, r2
 8006e12:	d100      	bne.n	8006e16 <HAL_RCC_OscConfig+0x1e>
 8006e14:	e07c      	b.n	8006f10 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e16:	4bc3      	ldr	r3, [pc, #780]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2238      	movs	r2, #56	; 0x38
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e20:	4bc0      	ldr	r3, [pc, #768]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2203      	movs	r2, #3
 8006e26:	4013      	ands	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b10      	cmp	r3, #16
 8006e2e:	d102      	bne.n	8006e36 <HAL_RCC_OscConfig+0x3e>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d002      	beq.n	8006e3c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d10b      	bne.n	8006e54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e3c:	4bb9      	ldr	r3, [pc, #740]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	029b      	lsls	r3, r3, #10
 8006e44:	4013      	ands	r3, r2
 8006e46:	d062      	beq.n	8006f0e <HAL_RCC_OscConfig+0x116>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d15e      	bne.n	8006f0e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e2d4      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	2380      	movs	r3, #128	; 0x80
 8006e5a:	025b      	lsls	r3, r3, #9
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d107      	bne.n	8006e70 <HAL_RCC_OscConfig+0x78>
 8006e60:	4bb0      	ldr	r3, [pc, #704]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	4baf      	ldr	r3, [pc, #700]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e66:	2180      	movs	r1, #128	; 0x80
 8006e68:	0249      	lsls	r1, r1, #9
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	601a      	str	r2, [r3, #0]
 8006e6e:	e020      	b.n	8006eb2 <HAL_RCC_OscConfig+0xba>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	23a0      	movs	r3, #160	; 0xa0
 8006e76:	02db      	lsls	r3, r3, #11
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d10e      	bne.n	8006e9a <HAL_RCC_OscConfig+0xa2>
 8006e7c:	4ba9      	ldr	r3, [pc, #676]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	4ba8      	ldr	r3, [pc, #672]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e82:	2180      	movs	r1, #128	; 0x80
 8006e84:	02c9      	lsls	r1, r1, #11
 8006e86:	430a      	orrs	r2, r1
 8006e88:	601a      	str	r2, [r3, #0]
 8006e8a:	4ba6      	ldr	r3, [pc, #664]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4ba5      	ldr	r3, [pc, #660]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e90:	2180      	movs	r1, #128	; 0x80
 8006e92:	0249      	lsls	r1, r1, #9
 8006e94:	430a      	orrs	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e00b      	b.n	8006eb2 <HAL_RCC_OscConfig+0xba>
 8006e9a:	4ba2      	ldr	r3, [pc, #648]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4ba1      	ldr	r3, [pc, #644]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006ea0:	49a1      	ldr	r1, [pc, #644]	; (8007128 <HAL_RCC_OscConfig+0x330>)
 8006ea2:	400a      	ands	r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	4b9f      	ldr	r3, [pc, #636]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4b9e      	ldr	r3, [pc, #632]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006eac:	499f      	ldr	r1, [pc, #636]	; (800712c <HAL_RCC_OscConfig+0x334>)
 8006eae:	400a      	ands	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d014      	beq.n	8006ee4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eba:	f7fc f977 	bl	80031ac <HAL_GetTick>
 8006ebe:	0003      	movs	r3, r0
 8006ec0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec4:	f7fc f972 	bl	80031ac <HAL_GetTick>
 8006ec8:	0002      	movs	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b64      	cmp	r3, #100	; 0x64
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e293      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ed6:	4b93      	ldr	r3, [pc, #588]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	029b      	lsls	r3, r3, #10
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d0f0      	beq.n	8006ec4 <HAL_RCC_OscConfig+0xcc>
 8006ee2:	e015      	b.n	8006f10 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fc f962 	bl	80031ac <HAL_GetTick>
 8006ee8:	0003      	movs	r3, r0
 8006eea:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006eec:	e008      	b.n	8006f00 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eee:	f7fc f95d 	bl	80031ac <HAL_GetTick>
 8006ef2:	0002      	movs	r2, r0
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b64      	cmp	r3, #100	; 0x64
 8006efa:	d901      	bls.n	8006f00 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e27e      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f00:	4b88      	ldr	r3, [pc, #544]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	2380      	movs	r3, #128	; 0x80
 8006f06:	029b      	lsls	r3, r3, #10
 8006f08:	4013      	ands	r3, r2
 8006f0a:	d1f0      	bne.n	8006eee <HAL_RCC_OscConfig+0xf6>
 8006f0c:	e000      	b.n	8006f10 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2202      	movs	r2, #2
 8006f16:	4013      	ands	r3, r2
 8006f18:	d100      	bne.n	8006f1c <HAL_RCC_OscConfig+0x124>
 8006f1a:	e099      	b.n	8007050 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f1c:	4b81      	ldr	r3, [pc, #516]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2238      	movs	r2, #56	; 0x38
 8006f22:	4013      	ands	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f26:	4b7f      	ldr	r3, [pc, #508]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d102      	bne.n	8006f3c <HAL_RCC_OscConfig+0x144>
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d002      	beq.n	8006f42 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d135      	bne.n	8006fae <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f42:	4b78      	ldr	r3, [pc, #480]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	2380      	movs	r3, #128	; 0x80
 8006f48:	00db      	lsls	r3, r3, #3
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	d005      	beq.n	8006f5a <HAL_RCC_OscConfig+0x162>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e251      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f5a:	4b72      	ldr	r3, [pc, #456]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	4a74      	ldr	r2, [pc, #464]	; (8007130 <HAL_RCC_OscConfig+0x338>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	0019      	movs	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	021a      	lsls	r2, r3, #8
 8006f6a:	4b6e      	ldr	r3, [pc, #440]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d112      	bne.n	8006f9c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006f76:	4b6b      	ldr	r3, [pc, #428]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a6e      	ldr	r2, [pc, #440]	; (8007134 <HAL_RCC_OscConfig+0x33c>)
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	0019      	movs	r1, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	4b67      	ldr	r3, [pc, #412]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f86:	430a      	orrs	r2, r1
 8006f88:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006f8a:	4b66      	ldr	r3, [pc, #408]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	0adb      	lsrs	r3, r3, #11
 8006f90:	2207      	movs	r2, #7
 8006f92:	4013      	ands	r3, r2
 8006f94:	4a68      	ldr	r2, [pc, #416]	; (8007138 <HAL_RCC_OscConfig+0x340>)
 8006f96:	40da      	lsrs	r2, r3
 8006f98:	4b68      	ldr	r3, [pc, #416]	; (800713c <HAL_RCC_OscConfig+0x344>)
 8006f9a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f9c:	4b68      	ldr	r3, [pc, #416]	; (8007140 <HAL_RCC_OscConfig+0x348>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7fc f8a7 	bl	80030f4 <HAL_InitTick>
 8006fa6:	1e03      	subs	r3, r0, #0
 8006fa8:	d051      	beq.n	800704e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e227      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d030      	beq.n	8007018 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006fb6:	4b5b      	ldr	r3, [pc, #364]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a5e      	ldr	r2, [pc, #376]	; (8007134 <HAL_RCC_OscConfig+0x33c>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	0019      	movs	r1, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691a      	ldr	r2, [r3, #16]
 8006fc4:	4b57      	ldr	r3, [pc, #348]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006fca:	4b56      	ldr	r3, [pc, #344]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4b55      	ldr	r3, [pc, #340]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006fd0:	2180      	movs	r1, #128	; 0x80
 8006fd2:	0049      	lsls	r1, r1, #1
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd8:	f7fc f8e8 	bl	80031ac <HAL_GetTick>
 8006fdc:	0003      	movs	r3, r0
 8006fde:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fe0:	e008      	b.n	8006ff4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fe2:	f7fc f8e3 	bl	80031ac <HAL_GetTick>
 8006fe6:	0002      	movs	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d901      	bls.n	8006ff4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e204      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ff4:	4b4b      	ldr	r3, [pc, #300]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	2380      	movs	r3, #128	; 0x80
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	d0f0      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007000:	4b48      	ldr	r3, [pc, #288]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	4a4a      	ldr	r2, [pc, #296]	; (8007130 <HAL_RCC_OscConfig+0x338>)
 8007006:	4013      	ands	r3, r2
 8007008:	0019      	movs	r1, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	021a      	lsls	r2, r3, #8
 8007010:	4b44      	ldr	r3, [pc, #272]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	e01b      	b.n	8007050 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007018:	4b42      	ldr	r3, [pc, #264]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	4b41      	ldr	r3, [pc, #260]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 800701e:	4949      	ldr	r1, [pc, #292]	; (8007144 <HAL_RCC_OscConfig+0x34c>)
 8007020:	400a      	ands	r2, r1
 8007022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007024:	f7fc f8c2 	bl	80031ac <HAL_GetTick>
 8007028:	0003      	movs	r3, r0
 800702a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800702c:	e008      	b.n	8007040 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800702e:	f7fc f8bd 	bl	80031ac <HAL_GetTick>
 8007032:	0002      	movs	r2, r0
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d901      	bls.n	8007040 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e1de      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007040:	4b38      	ldr	r3, [pc, #224]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	2380      	movs	r3, #128	; 0x80
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4013      	ands	r3, r2
 800704a:	d1f0      	bne.n	800702e <HAL_RCC_OscConfig+0x236>
 800704c:	e000      	b.n	8007050 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800704e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2208      	movs	r2, #8
 8007056:	4013      	ands	r3, r2
 8007058:	d047      	beq.n	80070ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800705a:	4b32      	ldr	r3, [pc, #200]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2238      	movs	r2, #56	; 0x38
 8007060:	4013      	ands	r3, r2
 8007062:	2b18      	cmp	r3, #24
 8007064:	d10a      	bne.n	800707c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007066:	4b2f      	ldr	r3, [pc, #188]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8007068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800706a:	2202      	movs	r2, #2
 800706c:	4013      	ands	r3, r2
 800706e:	d03c      	beq.n	80070ea <HAL_RCC_OscConfig+0x2f2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d138      	bne.n	80070ea <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e1c0      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d019      	beq.n	80070b8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8007084:	4b27      	ldr	r3, [pc, #156]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8007086:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007088:	4b26      	ldr	r3, [pc, #152]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 800708a:	2101      	movs	r1, #1
 800708c:	430a      	orrs	r2, r1
 800708e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007090:	f7fc f88c 	bl	80031ac <HAL_GetTick>
 8007094:	0003      	movs	r3, r0
 8007096:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007098:	e008      	b.n	80070ac <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800709a:	f7fc f887 	bl	80031ac <HAL_GetTick>
 800709e:	0002      	movs	r2, r0
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e1a8      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070ac:	4b1d      	ldr	r3, [pc, #116]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 80070ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070b0:	2202      	movs	r2, #2
 80070b2:	4013      	ands	r3, r2
 80070b4:	d0f1      	beq.n	800709a <HAL_RCC_OscConfig+0x2a2>
 80070b6:	e018      	b.n	80070ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80070b8:	4b1a      	ldr	r3, [pc, #104]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 80070ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80070bc:	4b19      	ldr	r3, [pc, #100]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 80070be:	2101      	movs	r1, #1
 80070c0:	438a      	bics	r2, r1
 80070c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c4:	f7fc f872 	bl	80031ac <HAL_GetTick>
 80070c8:	0003      	movs	r3, r0
 80070ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070ce:	f7fc f86d 	bl	80031ac <HAL_GetTick>
 80070d2:	0002      	movs	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e18e      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070e0:	4b10      	ldr	r3, [pc, #64]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 80070e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e4:	2202      	movs	r2, #2
 80070e6:	4013      	ands	r3, r2
 80070e8:	d1f1      	bne.n	80070ce <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2204      	movs	r2, #4
 80070f0:	4013      	ands	r3, r2
 80070f2:	d100      	bne.n	80070f6 <HAL_RCC_OscConfig+0x2fe>
 80070f4:	e0c6      	b.n	8007284 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070f6:	231f      	movs	r3, #31
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2238      	movs	r2, #56	; 0x38
 8007104:	4013      	ands	r3, r2
 8007106:	2b20      	cmp	r3, #32
 8007108:	d11e      	bne.n	8007148 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800710a:	4b06      	ldr	r3, [pc, #24]	; (8007124 <HAL_RCC_OscConfig+0x32c>)
 800710c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710e:	2202      	movs	r2, #2
 8007110:	4013      	ands	r3, r2
 8007112:	d100      	bne.n	8007116 <HAL_RCC_OscConfig+0x31e>
 8007114:	e0b6      	b.n	8007284 <HAL_RCC_OscConfig+0x48c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d000      	beq.n	8007120 <HAL_RCC_OscConfig+0x328>
 800711e:	e0b1      	b.n	8007284 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e16c      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
 8007124:	40021000 	.word	0x40021000
 8007128:	fffeffff 	.word	0xfffeffff
 800712c:	fffbffff 	.word	0xfffbffff
 8007130:	ffff80ff 	.word	0xffff80ff
 8007134:	ffffc7ff 	.word	0xffffc7ff
 8007138:	00f42400 	.word	0x00f42400
 800713c:	20000000 	.word	0x20000000
 8007140:	20000004 	.word	0x20000004
 8007144:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007148:	4baf      	ldr	r3, [pc, #700]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800714a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800714c:	2380      	movs	r3, #128	; 0x80
 800714e:	055b      	lsls	r3, r3, #21
 8007150:	4013      	ands	r3, r2
 8007152:	d101      	bne.n	8007158 <HAL_RCC_OscConfig+0x360>
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <HAL_RCC_OscConfig+0x362>
 8007158:	2300      	movs	r3, #0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d011      	beq.n	8007182 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800715e:	4baa      	ldr	r3, [pc, #680]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007162:	4ba9      	ldr	r3, [pc, #676]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007164:	2180      	movs	r1, #128	; 0x80
 8007166:	0549      	lsls	r1, r1, #21
 8007168:	430a      	orrs	r2, r1
 800716a:	63da      	str	r2, [r3, #60]	; 0x3c
 800716c:	4ba6      	ldr	r3, [pc, #664]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800716e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	055b      	lsls	r3, r3, #21
 8007174:	4013      	ands	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800717a:	231f      	movs	r3, #31
 800717c:	18fb      	adds	r3, r7, r3
 800717e:	2201      	movs	r2, #1
 8007180:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007182:	4ba2      	ldr	r3, [pc, #648]	; (800740c <HAL_RCC_OscConfig+0x614>)
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	2380      	movs	r3, #128	; 0x80
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4013      	ands	r3, r2
 800718c:	d11a      	bne.n	80071c4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800718e:	4b9f      	ldr	r3, [pc, #636]	; (800740c <HAL_RCC_OscConfig+0x614>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4b9e      	ldr	r3, [pc, #632]	; (800740c <HAL_RCC_OscConfig+0x614>)
 8007194:	2180      	movs	r1, #128	; 0x80
 8007196:	0049      	lsls	r1, r1, #1
 8007198:	430a      	orrs	r2, r1
 800719a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800719c:	f7fc f806 	bl	80031ac <HAL_GetTick>
 80071a0:	0003      	movs	r3, r0
 80071a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071a4:	e008      	b.n	80071b8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a6:	f7fc f801 	bl	80031ac <HAL_GetTick>
 80071aa:	0002      	movs	r2, r0
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e122      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071b8:	4b94      	ldr	r3, [pc, #592]	; (800740c <HAL_RCC_OscConfig+0x614>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	2380      	movs	r3, #128	; 0x80
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	4013      	ands	r3, r2
 80071c2:	d0f0      	beq.n	80071a6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d106      	bne.n	80071da <HAL_RCC_OscConfig+0x3e2>
 80071cc:	4b8e      	ldr	r3, [pc, #568]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80071ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071d0:	4b8d      	ldr	r3, [pc, #564]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80071d2:	2101      	movs	r1, #1
 80071d4:	430a      	orrs	r2, r1
 80071d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80071d8:	e01c      	b.n	8007214 <HAL_RCC_OscConfig+0x41c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	2b05      	cmp	r3, #5
 80071e0:	d10c      	bne.n	80071fc <HAL_RCC_OscConfig+0x404>
 80071e2:	4b89      	ldr	r3, [pc, #548]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80071e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071e6:	4b88      	ldr	r3, [pc, #544]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80071e8:	2104      	movs	r1, #4
 80071ea:	430a      	orrs	r2, r1
 80071ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80071ee:	4b86      	ldr	r3, [pc, #536]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80071f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071f2:	4b85      	ldr	r3, [pc, #532]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80071f4:	2101      	movs	r1, #1
 80071f6:	430a      	orrs	r2, r1
 80071f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80071fa:	e00b      	b.n	8007214 <HAL_RCC_OscConfig+0x41c>
 80071fc:	4b82      	ldr	r3, [pc, #520]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80071fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007200:	4b81      	ldr	r3, [pc, #516]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007202:	2101      	movs	r1, #1
 8007204:	438a      	bics	r2, r1
 8007206:	65da      	str	r2, [r3, #92]	; 0x5c
 8007208:	4b7f      	ldr	r3, [pc, #508]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800720a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800720c:	4b7e      	ldr	r3, [pc, #504]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800720e:	2104      	movs	r1, #4
 8007210:	438a      	bics	r2, r1
 8007212:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d014      	beq.n	8007246 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7fb ffc6 	bl	80031ac <HAL_GetTick>
 8007220:	0003      	movs	r3, r0
 8007222:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007224:	e009      	b.n	800723a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007226:	f7fb ffc1 	bl	80031ac <HAL_GetTick>
 800722a:	0002      	movs	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	4a77      	ldr	r2, [pc, #476]	; (8007410 <HAL_RCC_OscConfig+0x618>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e0e1      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723a:	4b73      	ldr	r3, [pc, #460]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800723c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800723e:	2202      	movs	r2, #2
 8007240:	4013      	ands	r3, r2
 8007242:	d0f0      	beq.n	8007226 <HAL_RCC_OscConfig+0x42e>
 8007244:	e013      	b.n	800726e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007246:	f7fb ffb1 	bl	80031ac <HAL_GetTick>
 800724a:	0003      	movs	r3, r0
 800724c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800724e:	e009      	b.n	8007264 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007250:	f7fb ffac 	bl	80031ac <HAL_GetTick>
 8007254:	0002      	movs	r2, r0
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	4a6d      	ldr	r2, [pc, #436]	; (8007410 <HAL_RCC_OscConfig+0x618>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d901      	bls.n	8007264 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e0cc      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007264:	4b68      	ldr	r3, [pc, #416]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007268:	2202      	movs	r2, #2
 800726a:	4013      	ands	r3, r2
 800726c:	d1f0      	bne.n	8007250 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800726e:	231f      	movs	r3, #31
 8007270:	18fb      	adds	r3, r7, r3
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d105      	bne.n	8007284 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007278:	4b63      	ldr	r3, [pc, #396]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800727a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800727c:	4b62      	ldr	r3, [pc, #392]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800727e:	4965      	ldr	r1, [pc, #404]	; (8007414 <HAL_RCC_OscConfig+0x61c>)
 8007280:	400a      	ands	r2, r1
 8007282:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d100      	bne.n	800728e <HAL_RCC_OscConfig+0x496>
 800728c:	e0b6      	b.n	80073fc <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800728e:	4b5e      	ldr	r3, [pc, #376]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2238      	movs	r2, #56	; 0x38
 8007294:	4013      	ands	r3, r2
 8007296:	2b10      	cmp	r3, #16
 8007298:	d100      	bne.n	800729c <HAL_RCC_OscConfig+0x4a4>
 800729a:	e07e      	b.n	800739a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d153      	bne.n	800734c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a4:	4b58      	ldr	r3, [pc, #352]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	4b57      	ldr	r3, [pc, #348]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80072aa:	495b      	ldr	r1, [pc, #364]	; (8007418 <HAL_RCC_OscConfig+0x620>)
 80072ac:	400a      	ands	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b0:	f7fb ff7c 	bl	80031ac <HAL_GetTick>
 80072b4:	0003      	movs	r3, r0
 80072b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072b8:	e008      	b.n	80072cc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ba:	f7fb ff77 	bl	80031ac <HAL_GetTick>
 80072be:	0002      	movs	r2, r0
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d901      	bls.n	80072cc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e098      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072cc:	4b4e      	ldr	r3, [pc, #312]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	2380      	movs	r3, #128	; 0x80
 80072d2:	049b      	lsls	r3, r3, #18
 80072d4:	4013      	ands	r3, r2
 80072d6:	d1f0      	bne.n	80072ba <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072d8:	4b4b      	ldr	r3, [pc, #300]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4a4f      	ldr	r2, [pc, #316]	; (800741c <HAL_RCC_OscConfig+0x624>)
 80072de:	4013      	ands	r3, r2
 80072e0:	0019      	movs	r1, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1a      	ldr	r2, [r3, #32]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	431a      	orrs	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	431a      	orrs	r2, r3
 8007300:	4b41      	ldr	r3, [pc, #260]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007302:	430a      	orrs	r2, r1
 8007304:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007306:	4b40      	ldr	r3, [pc, #256]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800730c:	2180      	movs	r1, #128	; 0x80
 800730e:	0449      	lsls	r1, r1, #17
 8007310:	430a      	orrs	r2, r1
 8007312:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007314:	4b3c      	ldr	r3, [pc, #240]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	4b3b      	ldr	r3, [pc, #236]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800731a:	2180      	movs	r1, #128	; 0x80
 800731c:	0549      	lsls	r1, r1, #21
 800731e:	430a      	orrs	r2, r1
 8007320:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007322:	f7fb ff43 	bl	80031ac <HAL_GetTick>
 8007326:	0003      	movs	r3, r0
 8007328:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800732c:	f7fb ff3e 	bl	80031ac <HAL_GetTick>
 8007330:	0002      	movs	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b02      	cmp	r3, #2
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e05f      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800733e:	4b32      	ldr	r3, [pc, #200]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	2380      	movs	r3, #128	; 0x80
 8007344:	049b      	lsls	r3, r3, #18
 8007346:	4013      	ands	r3, r2
 8007348:	d0f0      	beq.n	800732c <HAL_RCC_OscConfig+0x534>
 800734a:	e057      	b.n	80073fc <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800734c:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	4b2d      	ldr	r3, [pc, #180]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007352:	4931      	ldr	r1, [pc, #196]	; (8007418 <HAL_RCC_OscConfig+0x620>)
 8007354:	400a      	ands	r2, r1
 8007356:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007358:	4b2b      	ldr	r3, [pc, #172]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800735a:	68da      	ldr	r2, [r3, #12]
 800735c:	4b2a      	ldr	r3, [pc, #168]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800735e:	2103      	movs	r1, #3
 8007360:	438a      	bics	r2, r1
 8007362:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007364:	4b28      	ldr	r3, [pc, #160]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	4b27      	ldr	r3, [pc, #156]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800736a:	492d      	ldr	r1, [pc, #180]	; (8007420 <HAL_RCC_OscConfig+0x628>)
 800736c:	400a      	ands	r2, r1
 800736e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007370:	f7fb ff1c 	bl	80031ac <HAL_GetTick>
 8007374:	0003      	movs	r3, r0
 8007376:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800737a:	f7fb ff17 	bl	80031ac <HAL_GetTick>
 800737e:	0002      	movs	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e038      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800738c:	4b1e      	ldr	r3, [pc, #120]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	2380      	movs	r3, #128	; 0x80
 8007392:	049b      	lsls	r3, r3, #18
 8007394:	4013      	ands	r3, r2
 8007396:	d1f0      	bne.n	800737a <HAL_RCC_OscConfig+0x582>
 8007398:	e030      	b.n	80073fc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e02b      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80073a6:	4b18      	ldr	r3, [pc, #96]	; (8007408 <HAL_RCC_OscConfig+0x610>)
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	2203      	movs	r2, #3
 80073b0:	401a      	ands	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d11e      	bne.n	80073f8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2270      	movs	r2, #112	; 0x70
 80073be:	401a      	ands	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d117      	bne.n	80073f8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	23fe      	movs	r3, #254	; 0xfe
 80073cc:	01db      	lsls	r3, r3, #7
 80073ce:	401a      	ands	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d10e      	bne.n	80073f8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	23f8      	movs	r3, #248	; 0xf8
 80073de:	039b      	lsls	r3, r3, #14
 80073e0:	401a      	ands	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d106      	bne.n	80073f8 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	0f5b      	lsrs	r3, r3, #29
 80073ee:	075a      	lsls	r2, r3, #29
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d001      	beq.n	80073fc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	0018      	movs	r0, r3
 8007400:	46bd      	mov	sp, r7
 8007402:	b008      	add	sp, #32
 8007404:	bd80      	pop	{r7, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	40021000 	.word	0x40021000
 800740c:	40007000 	.word	0x40007000
 8007410:	00001388 	.word	0x00001388
 8007414:	efffffff 	.word	0xefffffff
 8007418:	feffffff 	.word	0xfeffffff
 800741c:	1fc1808c 	.word	0x1fc1808c
 8007420:	effeffff 	.word	0xeffeffff

08007424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e0e9      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007438:	4b76      	ldr	r3, [pc, #472]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2207      	movs	r2, #7
 800743e:	4013      	ands	r3, r2
 8007440:	683a      	ldr	r2, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d91e      	bls.n	8007484 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007446:	4b73      	ldr	r3, [pc, #460]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2207      	movs	r2, #7
 800744c:	4393      	bics	r3, r2
 800744e:	0019      	movs	r1, r3
 8007450:	4b70      	ldr	r3, [pc, #448]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007458:	f7fb fea8 	bl	80031ac <HAL_GetTick>
 800745c:	0003      	movs	r3, r0
 800745e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007460:	e009      	b.n	8007476 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007462:	f7fb fea3 	bl	80031ac <HAL_GetTick>
 8007466:	0002      	movs	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	4a6a      	ldr	r2, [pc, #424]	; (8007618 <HAL_RCC_ClockConfig+0x1f4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e0ca      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007476:	4b67      	ldr	r3, [pc, #412]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2207      	movs	r2, #7
 800747c:	4013      	ands	r3, r2
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	429a      	cmp	r2, r3
 8007482:	d1ee      	bne.n	8007462 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2202      	movs	r2, #2
 800748a:	4013      	ands	r3, r2
 800748c:	d015      	beq.n	80074ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2204      	movs	r2, #4
 8007494:	4013      	ands	r3, r2
 8007496:	d006      	beq.n	80074a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007498:	4b60      	ldr	r3, [pc, #384]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	4b5f      	ldr	r3, [pc, #380]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 800749e:	21e0      	movs	r1, #224	; 0xe0
 80074a0:	01c9      	lsls	r1, r1, #7
 80074a2:	430a      	orrs	r2, r1
 80074a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a6:	4b5d      	ldr	r3, [pc, #372]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	4a5d      	ldr	r2, [pc, #372]	; (8007620 <HAL_RCC_ClockConfig+0x1fc>)
 80074ac:	4013      	ands	r3, r2
 80074ae:	0019      	movs	r1, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	4b59      	ldr	r3, [pc, #356]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80074b6:	430a      	orrs	r2, r1
 80074b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2201      	movs	r2, #1
 80074c0:	4013      	ands	r3, r2
 80074c2:	d057      	beq.n	8007574 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d107      	bne.n	80074dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074cc:	4b53      	ldr	r3, [pc, #332]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	2380      	movs	r3, #128	; 0x80
 80074d2:	029b      	lsls	r3, r3, #10
 80074d4:	4013      	ands	r3, r2
 80074d6:	d12b      	bne.n	8007530 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e097      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d107      	bne.n	80074f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074e4:	4b4d      	ldr	r3, [pc, #308]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	049b      	lsls	r3, r3, #18
 80074ec:	4013      	ands	r3, r2
 80074ee:	d11f      	bne.n	8007530 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e08b      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074fc:	4b47      	ldr	r3, [pc, #284]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	2380      	movs	r3, #128	; 0x80
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	4013      	ands	r3, r2
 8007506:	d113      	bne.n	8007530 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e07f      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b03      	cmp	r3, #3
 8007512:	d106      	bne.n	8007522 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007514:	4b41      	ldr	r3, [pc, #260]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 8007516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007518:	2202      	movs	r2, #2
 800751a:	4013      	ands	r3, r2
 800751c:	d108      	bne.n	8007530 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e074      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007522:	4b3e      	ldr	r3, [pc, #248]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 8007524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007526:	2202      	movs	r2, #2
 8007528:	4013      	ands	r3, r2
 800752a:	d101      	bne.n	8007530 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e06d      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007530:	4b3a      	ldr	r3, [pc, #232]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	2207      	movs	r2, #7
 8007536:	4393      	bics	r3, r2
 8007538:	0019      	movs	r1, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	4b37      	ldr	r3, [pc, #220]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 8007540:	430a      	orrs	r2, r1
 8007542:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007544:	f7fb fe32 	bl	80031ac <HAL_GetTick>
 8007548:	0003      	movs	r3, r0
 800754a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754c:	e009      	b.n	8007562 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800754e:	f7fb fe2d 	bl	80031ac <HAL_GetTick>
 8007552:	0002      	movs	r2, r0
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	4a2f      	ldr	r2, [pc, #188]	; (8007618 <HAL_RCC_ClockConfig+0x1f4>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d901      	bls.n	8007562 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e054      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007562:	4b2e      	ldr	r3, [pc, #184]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2238      	movs	r2, #56	; 0x38
 8007568:	401a      	ands	r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	429a      	cmp	r2, r3
 8007572:	d1ec      	bne.n	800754e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007574:	4b27      	ldr	r3, [pc, #156]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2207      	movs	r2, #7
 800757a:	4013      	ands	r3, r2
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	429a      	cmp	r2, r3
 8007580:	d21e      	bcs.n	80075c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007582:	4b24      	ldr	r3, [pc, #144]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2207      	movs	r2, #7
 8007588:	4393      	bics	r3, r2
 800758a:	0019      	movs	r1, r3
 800758c:	4b21      	ldr	r3, [pc, #132]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	430a      	orrs	r2, r1
 8007592:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007594:	f7fb fe0a 	bl	80031ac <HAL_GetTick>
 8007598:	0003      	movs	r3, r0
 800759a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800759c:	e009      	b.n	80075b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800759e:	f7fb fe05 	bl	80031ac <HAL_GetTick>
 80075a2:	0002      	movs	r2, r0
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	4a1b      	ldr	r2, [pc, #108]	; (8007618 <HAL_RCC_ClockConfig+0x1f4>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e02c      	b.n	800760c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80075b2:	4b18      	ldr	r3, [pc, #96]	; (8007614 <HAL_RCC_ClockConfig+0x1f0>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2207      	movs	r2, #7
 80075b8:	4013      	ands	r3, r2
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d1ee      	bne.n	800759e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2204      	movs	r2, #4
 80075c6:	4013      	ands	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80075ca:	4b14      	ldr	r3, [pc, #80]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	4a15      	ldr	r2, [pc, #84]	; (8007624 <HAL_RCC_ClockConfig+0x200>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	0019      	movs	r1, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68da      	ldr	r2, [r3, #12]
 80075d8:	4b10      	ldr	r3, [pc, #64]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80075da:	430a      	orrs	r2, r1
 80075dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80075de:	f000 f829 	bl	8007634 <HAL_RCC_GetSysClockFreq>
 80075e2:	0001      	movs	r1, r0
 80075e4:	4b0d      	ldr	r3, [pc, #52]	; (800761c <HAL_RCC_ClockConfig+0x1f8>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	0a1b      	lsrs	r3, r3, #8
 80075ea:	220f      	movs	r2, #15
 80075ec:	401a      	ands	r2, r3
 80075ee:	4b0e      	ldr	r3, [pc, #56]	; (8007628 <HAL_RCC_ClockConfig+0x204>)
 80075f0:	0092      	lsls	r2, r2, #2
 80075f2:	58d3      	ldr	r3, [r2, r3]
 80075f4:	221f      	movs	r2, #31
 80075f6:	4013      	ands	r3, r2
 80075f8:	000a      	movs	r2, r1
 80075fa:	40da      	lsrs	r2, r3
 80075fc:	4b0b      	ldr	r3, [pc, #44]	; (800762c <HAL_RCC_ClockConfig+0x208>)
 80075fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <HAL_RCC_ClockConfig+0x20c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	0018      	movs	r0, r3
 8007606:	f7fb fd75 	bl	80030f4 <HAL_InitTick>
 800760a:	0003      	movs	r3, r0
}
 800760c:	0018      	movs	r0, r3
 800760e:	46bd      	mov	sp, r7
 8007610:	b004      	add	sp, #16
 8007612:	bd80      	pop	{r7, pc}
 8007614:	40022000 	.word	0x40022000
 8007618:	00001388 	.word	0x00001388
 800761c:	40021000 	.word	0x40021000
 8007620:	fffff0ff 	.word	0xfffff0ff
 8007624:	ffff8fff 	.word	0xffff8fff
 8007628:	08007c74 	.word	0x08007c74
 800762c:	20000000 	.word	0x20000000
 8007630:	20000004 	.word	0x20000004

08007634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800763a:	4b3c      	ldr	r3, [pc, #240]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2238      	movs	r2, #56	; 0x38
 8007640:	4013      	ands	r3, r2
 8007642:	d10f      	bne.n	8007664 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007644:	4b39      	ldr	r3, [pc, #228]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	0adb      	lsrs	r3, r3, #11
 800764a:	2207      	movs	r2, #7
 800764c:	4013      	ands	r3, r2
 800764e:	2201      	movs	r2, #1
 8007650:	409a      	lsls	r2, r3
 8007652:	0013      	movs	r3, r2
 8007654:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	4835      	ldr	r0, [pc, #212]	; (8007730 <HAL_RCC_GetSysClockFreq+0xfc>)
 800765a:	f7f8 fd4f 	bl	80000fc <__udivsi3>
 800765e:	0003      	movs	r3, r0
 8007660:	613b      	str	r3, [r7, #16]
 8007662:	e05d      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007664:	4b31      	ldr	r3, [pc, #196]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	2238      	movs	r2, #56	; 0x38
 800766a:	4013      	ands	r3, r2
 800766c:	2b08      	cmp	r3, #8
 800766e:	d102      	bne.n	8007676 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007670:	4b30      	ldr	r3, [pc, #192]	; (8007734 <HAL_RCC_GetSysClockFreq+0x100>)
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	e054      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007676:	4b2d      	ldr	r3, [pc, #180]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	2238      	movs	r2, #56	; 0x38
 800767c:	4013      	ands	r3, r2
 800767e:	2b10      	cmp	r3, #16
 8007680:	d138      	bne.n	80076f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007682:	4b2a      	ldr	r3, [pc, #168]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	2203      	movs	r2, #3
 8007688:	4013      	ands	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800768c:	4b27      	ldr	r3, [pc, #156]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	2207      	movs	r2, #7
 8007694:	4013      	ands	r3, r2
 8007696:	3301      	adds	r3, #1
 8007698:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b03      	cmp	r3, #3
 800769e:	d10d      	bne.n	80076bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	4824      	ldr	r0, [pc, #144]	; (8007734 <HAL_RCC_GetSysClockFreq+0x100>)
 80076a4:	f7f8 fd2a 	bl	80000fc <__udivsi3>
 80076a8:	0003      	movs	r3, r0
 80076aa:	0019      	movs	r1, r3
 80076ac:	4b1f      	ldr	r3, [pc, #124]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	227f      	movs	r2, #127	; 0x7f
 80076b4:	4013      	ands	r3, r2
 80076b6:	434b      	muls	r3, r1
 80076b8:	617b      	str	r3, [r7, #20]
        break;
 80076ba:	e00d      	b.n	80076d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	481c      	ldr	r0, [pc, #112]	; (8007730 <HAL_RCC_GetSysClockFreq+0xfc>)
 80076c0:	f7f8 fd1c 	bl	80000fc <__udivsi3>
 80076c4:	0003      	movs	r3, r0
 80076c6:	0019      	movs	r1, r3
 80076c8:	4b18      	ldr	r3, [pc, #96]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	227f      	movs	r2, #127	; 0x7f
 80076d0:	4013      	ands	r3, r2
 80076d2:	434b      	muls	r3, r1
 80076d4:	617b      	str	r3, [r7, #20]
        break;
 80076d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80076d8:	4b14      	ldr	r3, [pc, #80]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	0f5b      	lsrs	r3, r3, #29
 80076de:	2207      	movs	r2, #7
 80076e0:	4013      	ands	r3, r2
 80076e2:	3301      	adds	r3, #1
 80076e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80076e6:	6879      	ldr	r1, [r7, #4]
 80076e8:	6978      	ldr	r0, [r7, #20]
 80076ea:	f7f8 fd07 	bl	80000fc <__udivsi3>
 80076ee:	0003      	movs	r3, r0
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	e015      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80076f4:	4b0d      	ldr	r3, [pc, #52]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	2238      	movs	r2, #56	; 0x38
 80076fa:	4013      	ands	r3, r2
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d103      	bne.n	8007708 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	021b      	lsls	r3, r3, #8
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	e00b      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007708:	4b08      	ldr	r3, [pc, #32]	; (800772c <HAL_RCC_GetSysClockFreq+0xf8>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	2238      	movs	r2, #56	; 0x38
 800770e:	4013      	ands	r3, r2
 8007710:	2b18      	cmp	r3, #24
 8007712:	d103      	bne.n	800771c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007714:	23fa      	movs	r3, #250	; 0xfa
 8007716:	01db      	lsls	r3, r3, #7
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	e001      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007720:	693b      	ldr	r3, [r7, #16]
}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	b006      	add	sp, #24
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	40021000 	.word	0x40021000
 8007730:	00f42400 	.word	0x00f42400
 8007734:	007a1200 	.word	0x007a1200

08007738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007740:	2313      	movs	r3, #19
 8007742:	18fb      	adds	r3, r7, r3
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007748:	2312      	movs	r3, #18
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	2200      	movs	r2, #0
 800774e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2380      	movs	r3, #128	; 0x80
 8007756:	029b      	lsls	r3, r3, #10
 8007758:	4013      	ands	r3, r2
 800775a:	d100      	bne.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800775c:	e0a3      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800775e:	2011      	movs	r0, #17
 8007760:	183b      	adds	r3, r7, r0
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007766:	4b7f      	ldr	r3, [pc, #508]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007768:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800776a:	2380      	movs	r3, #128	; 0x80
 800776c:	055b      	lsls	r3, r3, #21
 800776e:	4013      	ands	r3, r2
 8007770:	d110      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007772:	4b7c      	ldr	r3, [pc, #496]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007776:	4b7b      	ldr	r3, [pc, #492]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007778:	2180      	movs	r1, #128	; 0x80
 800777a:	0549      	lsls	r1, r1, #21
 800777c:	430a      	orrs	r2, r1
 800777e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007780:	4b78      	ldr	r3, [pc, #480]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007784:	2380      	movs	r3, #128	; 0x80
 8007786:	055b      	lsls	r3, r3, #21
 8007788:	4013      	ands	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800778e:	183b      	adds	r3, r7, r0
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007794:	4b74      	ldr	r3, [pc, #464]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	4b73      	ldr	r3, [pc, #460]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800779a:	2180      	movs	r1, #128	; 0x80
 800779c:	0049      	lsls	r1, r1, #1
 800779e:	430a      	orrs	r2, r1
 80077a0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077a2:	f7fb fd03 	bl	80031ac <HAL_GetTick>
 80077a6:	0003      	movs	r3, r0
 80077a8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077aa:	e00b      	b.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077ac:	f7fb fcfe 	bl	80031ac <HAL_GetTick>
 80077b0:	0002      	movs	r2, r0
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d904      	bls.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80077ba:	2313      	movs	r3, #19
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	2203      	movs	r2, #3
 80077c0:	701a      	strb	r2, [r3, #0]
        break;
 80077c2:	e005      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077c4:	4b68      	ldr	r3, [pc, #416]	; (8007968 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4013      	ands	r3, r2
 80077ce:	d0ed      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80077d0:	2313      	movs	r3, #19
 80077d2:	18fb      	adds	r3, r7, r3
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d154      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077da:	4b62      	ldr	r3, [pc, #392]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80077dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80077de:	23c0      	movs	r3, #192	; 0xc0
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4013      	ands	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d019      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d014      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80077f6:	4b5b      	ldr	r3, [pc, #364]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80077f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fa:	4a5c      	ldr	r2, [pc, #368]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007800:	4b58      	ldr	r3, [pc, #352]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007804:	4b57      	ldr	r3, [pc, #348]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007806:	2180      	movs	r1, #128	; 0x80
 8007808:	0249      	lsls	r1, r1, #9
 800780a:	430a      	orrs	r2, r1
 800780c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800780e:	4b55      	ldr	r3, [pc, #340]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007810:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007812:	4b54      	ldr	r3, [pc, #336]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007814:	4956      	ldr	r1, [pc, #344]	; (8007970 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007816:	400a      	ands	r2, r1
 8007818:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800781a:	4b52      	ldr	r3, [pc, #328]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2201      	movs	r2, #1
 8007824:	4013      	ands	r3, r2
 8007826:	d016      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007828:	f7fb fcc0 	bl	80031ac <HAL_GetTick>
 800782c:	0003      	movs	r3, r0
 800782e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007830:	e00c      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007832:	f7fb fcbb 	bl	80031ac <HAL_GetTick>
 8007836:	0002      	movs	r2, r0
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	4a4d      	ldr	r2, [pc, #308]	; (8007974 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d904      	bls.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007842:	2313      	movs	r3, #19
 8007844:	18fb      	adds	r3, r7, r3
 8007846:	2203      	movs	r2, #3
 8007848:	701a      	strb	r2, [r3, #0]
            break;
 800784a:	e004      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800784c:	4b45      	ldr	r3, [pc, #276]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800784e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007850:	2202      	movs	r2, #2
 8007852:	4013      	ands	r3, r2
 8007854:	d0ed      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007856:	2313      	movs	r3, #19
 8007858:	18fb      	adds	r3, r7, r3
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007860:	4b40      	ldr	r3, [pc, #256]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007864:	4a41      	ldr	r2, [pc, #260]	; (800796c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007866:	4013      	ands	r3, r2
 8007868:	0019      	movs	r1, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695a      	ldr	r2, [r3, #20]
 800786e:	4b3d      	ldr	r3, [pc, #244]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007870:	430a      	orrs	r2, r1
 8007872:	65da      	str	r2, [r3, #92]	; 0x5c
 8007874:	e00c      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007876:	2312      	movs	r3, #18
 8007878:	18fb      	adds	r3, r7, r3
 800787a:	2213      	movs	r2, #19
 800787c:	18ba      	adds	r2, r7, r2
 800787e:	7812      	ldrb	r2, [r2, #0]
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e005      	b.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007884:	2312      	movs	r3, #18
 8007886:	18fb      	adds	r3, r7, r3
 8007888:	2213      	movs	r2, #19
 800788a:	18ba      	adds	r2, r7, r2
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007890:	2311      	movs	r3, #17
 8007892:	18fb      	adds	r3, r7, r3
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d105      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800789a:	4b32      	ldr	r3, [pc, #200]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800789c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800789e:	4b31      	ldr	r3, [pc, #196]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078a0:	4935      	ldr	r1, [pc, #212]	; (8007978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80078a2:	400a      	ands	r2, r1
 80078a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2201      	movs	r2, #1
 80078ac:	4013      	ands	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078b0:	4b2c      	ldr	r3, [pc, #176]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b4:	2203      	movs	r2, #3
 80078b6:	4393      	bics	r3, r2
 80078b8:	0019      	movs	r1, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	4b29      	ldr	r3, [pc, #164]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078c0:	430a      	orrs	r2, r1
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2220      	movs	r2, #32
 80078ca:	4013      	ands	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078ce:	4b25      	ldr	r3, [pc, #148]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	4a2a      	ldr	r2, [pc, #168]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	0019      	movs	r1, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	4b21      	ldr	r3, [pc, #132]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078de:	430a      	orrs	r2, r1
 80078e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	2380      	movs	r3, #128	; 0x80
 80078e8:	01db      	lsls	r3, r3, #7
 80078ea:	4013      	ands	r3, r2
 80078ec:	d015      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078ee:	4b1d      	ldr	r3, [pc, #116]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	0899      	lsrs	r1, r3, #2
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	691a      	ldr	r2, [r3, #16]
 80078fa:	4b1a      	ldr	r3, [pc, #104]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078fc:	430a      	orrs	r2, r1
 80078fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	2380      	movs	r3, #128	; 0x80
 8007906:	05db      	lsls	r3, r3, #23
 8007908:	429a      	cmp	r2, r3
 800790a:	d106      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800790c:	4b15      	ldr	r3, [pc, #84]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	4b14      	ldr	r3, [pc, #80]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007912:	2180      	movs	r1, #128	; 0x80
 8007914:	0249      	lsls	r1, r1, #9
 8007916:	430a      	orrs	r2, r1
 8007918:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	2380      	movs	r3, #128	; 0x80
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	4013      	ands	r3, r2
 8007924:	d016      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007926:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792a:	4a15      	ldr	r2, [pc, #84]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800792c:	4013      	ands	r3, r2
 800792e:	0019      	movs	r1, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007936:	430a      	orrs	r2, r1
 8007938:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	2380      	movs	r3, #128	; 0x80
 8007940:	01db      	lsls	r3, r3, #7
 8007942:	429a      	cmp	r2, r3
 8007944:	d106      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007946:	4b07      	ldr	r3, [pc, #28]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007948:	68da      	ldr	r2, [r3, #12]
 800794a:	4b06      	ldr	r3, [pc, #24]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800794c:	2180      	movs	r1, #128	; 0x80
 800794e:	0249      	lsls	r1, r1, #9
 8007950:	430a      	orrs	r2, r1
 8007952:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007954:	2312      	movs	r3, #18
 8007956:	18fb      	adds	r3, r7, r3
 8007958:	781b      	ldrb	r3, [r3, #0]
}
 800795a:	0018      	movs	r0, r3
 800795c:	46bd      	mov	sp, r7
 800795e:	b006      	add	sp, #24
 8007960:	bd80      	pop	{r7, pc}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	40021000 	.word	0x40021000
 8007968:	40007000 	.word	0x40007000
 800796c:	fffffcff 	.word	0xfffffcff
 8007970:	fffeffff 	.word	0xfffeffff
 8007974:	00001388 	.word	0x00001388
 8007978:	efffffff 	.word	0xefffffff
 800797c:	ffffcfff 	.word	0xffffcfff
 8007980:	ffff3fff 	.word	0xffff3fff

08007984 <__errno>:
 8007984:	4b01      	ldr	r3, [pc, #4]	; (800798c <__errno+0x8>)
 8007986:	6818      	ldr	r0, [r3, #0]
 8007988:	4770      	bx	lr
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	2000000c 	.word	0x2000000c

08007990 <__libc_init_array>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	2600      	movs	r6, #0
 8007994:	4d0c      	ldr	r5, [pc, #48]	; (80079c8 <__libc_init_array+0x38>)
 8007996:	4c0d      	ldr	r4, [pc, #52]	; (80079cc <__libc_init_array+0x3c>)
 8007998:	1b64      	subs	r4, r4, r5
 800799a:	10a4      	asrs	r4, r4, #2
 800799c:	42a6      	cmp	r6, r4
 800799e:	d109      	bne.n	80079b4 <__libc_init_array+0x24>
 80079a0:	2600      	movs	r6, #0
 80079a2:	f000 f8b7 	bl	8007b14 <_init>
 80079a6:	4d0a      	ldr	r5, [pc, #40]	; (80079d0 <__libc_init_array+0x40>)
 80079a8:	4c0a      	ldr	r4, [pc, #40]	; (80079d4 <__libc_init_array+0x44>)
 80079aa:	1b64      	subs	r4, r4, r5
 80079ac:	10a4      	asrs	r4, r4, #2
 80079ae:	42a6      	cmp	r6, r4
 80079b0:	d105      	bne.n	80079be <__libc_init_array+0x2e>
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	00b3      	lsls	r3, r6, #2
 80079b6:	58eb      	ldr	r3, [r5, r3]
 80079b8:	4798      	blx	r3
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7ee      	b.n	800799c <__libc_init_array+0xc>
 80079be:	00b3      	lsls	r3, r6, #2
 80079c0:	58eb      	ldr	r3, [r5, r3]
 80079c2:	4798      	blx	r3
 80079c4:	3601      	adds	r6, #1
 80079c6:	e7f2      	b.n	80079ae <__libc_init_array+0x1e>
 80079c8:	08007cb4 	.word	0x08007cb4
 80079cc:	08007cb4 	.word	0x08007cb4
 80079d0:	08007cb4 	.word	0x08007cb4
 80079d4:	08007cb8 	.word	0x08007cb8

080079d8 <malloc>:
 80079d8:	b510      	push	{r4, lr}
 80079da:	4b03      	ldr	r3, [pc, #12]	; (80079e8 <malloc+0x10>)
 80079dc:	0001      	movs	r1, r0
 80079de:	6818      	ldr	r0, [r3, #0]
 80079e0:	f000 f816 	bl	8007a10 <_malloc_r>
 80079e4:	bd10      	pop	{r4, pc}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	2000000c 	.word	0x2000000c

080079ec <memcpy>:
 80079ec:	2300      	movs	r3, #0
 80079ee:	b510      	push	{r4, lr}
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d100      	bne.n	80079f6 <memcpy+0xa>
 80079f4:	bd10      	pop	{r4, pc}
 80079f6:	5ccc      	ldrb	r4, [r1, r3]
 80079f8:	54c4      	strb	r4, [r0, r3]
 80079fa:	3301      	adds	r3, #1
 80079fc:	e7f8      	b.n	80079f0 <memcpy+0x4>

080079fe <memset>:
 80079fe:	0003      	movs	r3, r0
 8007a00:	1882      	adds	r2, r0, r2
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d100      	bne.n	8007a08 <memset+0xa>
 8007a06:	4770      	bx	lr
 8007a08:	7019      	strb	r1, [r3, #0]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	e7f9      	b.n	8007a02 <memset+0x4>
	...

08007a10 <_malloc_r>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	2303      	movs	r3, #3
 8007a14:	1ccd      	adds	r5, r1, #3
 8007a16:	439d      	bics	r5, r3
 8007a18:	3508      	adds	r5, #8
 8007a1a:	0006      	movs	r6, r0
 8007a1c:	2d0c      	cmp	r5, #12
 8007a1e:	d21f      	bcs.n	8007a60 <_malloc_r+0x50>
 8007a20:	250c      	movs	r5, #12
 8007a22:	42a9      	cmp	r1, r5
 8007a24:	d81e      	bhi.n	8007a64 <_malloc_r+0x54>
 8007a26:	0030      	movs	r0, r6
 8007a28:	f000 f862 	bl	8007af0 <__malloc_lock>
 8007a2c:	4925      	ldr	r1, [pc, #148]	; (8007ac4 <_malloc_r+0xb4>)
 8007a2e:	680a      	ldr	r2, [r1, #0]
 8007a30:	0014      	movs	r4, r2
 8007a32:	2c00      	cmp	r4, #0
 8007a34:	d11a      	bne.n	8007a6c <_malloc_r+0x5c>
 8007a36:	4f24      	ldr	r7, [pc, #144]	; (8007ac8 <_malloc_r+0xb8>)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <_malloc_r+0x38>
 8007a3e:	0021      	movs	r1, r4
 8007a40:	0030      	movs	r0, r6
 8007a42:	f000 f843 	bl	8007acc <_sbrk_r>
 8007a46:	6038      	str	r0, [r7, #0]
 8007a48:	0029      	movs	r1, r5
 8007a4a:	0030      	movs	r0, r6
 8007a4c:	f000 f83e 	bl	8007acc <_sbrk_r>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d12b      	bne.n	8007aac <_malloc_r+0x9c>
 8007a54:	230c      	movs	r3, #12
 8007a56:	0030      	movs	r0, r6
 8007a58:	6033      	str	r3, [r6, #0]
 8007a5a:	f000 f851 	bl	8007b00 <__malloc_unlock>
 8007a5e:	e003      	b.n	8007a68 <_malloc_r+0x58>
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	dade      	bge.n	8007a22 <_malloc_r+0x12>
 8007a64:	230c      	movs	r3, #12
 8007a66:	6033      	str	r3, [r6, #0]
 8007a68:	2000      	movs	r0, #0
 8007a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	1b5b      	subs	r3, r3, r5
 8007a70:	d419      	bmi.n	8007aa6 <_malloc_r+0x96>
 8007a72:	2b0b      	cmp	r3, #11
 8007a74:	d903      	bls.n	8007a7e <_malloc_r+0x6e>
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	18e4      	adds	r4, r4, r3
 8007a7a:	6025      	str	r5, [r4, #0]
 8007a7c:	e003      	b.n	8007a86 <_malloc_r+0x76>
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	42a2      	cmp	r2, r4
 8007a82:	d10e      	bne.n	8007aa2 <_malloc_r+0x92>
 8007a84:	600b      	str	r3, [r1, #0]
 8007a86:	0030      	movs	r0, r6
 8007a88:	f000 f83a 	bl	8007b00 <__malloc_unlock>
 8007a8c:	0020      	movs	r0, r4
 8007a8e:	2207      	movs	r2, #7
 8007a90:	300b      	adds	r0, #11
 8007a92:	1d23      	adds	r3, r4, #4
 8007a94:	4390      	bics	r0, r2
 8007a96:	1ac2      	subs	r2, r0, r3
 8007a98:	4298      	cmp	r0, r3
 8007a9a:	d0e6      	beq.n	8007a6a <_malloc_r+0x5a>
 8007a9c:	1a1b      	subs	r3, r3, r0
 8007a9e:	50a3      	str	r3, [r4, r2]
 8007aa0:	e7e3      	b.n	8007a6a <_malloc_r+0x5a>
 8007aa2:	6053      	str	r3, [r2, #4]
 8007aa4:	e7ef      	b.n	8007a86 <_malloc_r+0x76>
 8007aa6:	0022      	movs	r2, r4
 8007aa8:	6864      	ldr	r4, [r4, #4]
 8007aaa:	e7c2      	b.n	8007a32 <_malloc_r+0x22>
 8007aac:	2303      	movs	r3, #3
 8007aae:	1cc4      	adds	r4, r0, #3
 8007ab0:	439c      	bics	r4, r3
 8007ab2:	42a0      	cmp	r0, r4
 8007ab4:	d0e1      	beq.n	8007a7a <_malloc_r+0x6a>
 8007ab6:	1a21      	subs	r1, r4, r0
 8007ab8:	0030      	movs	r0, r6
 8007aba:	f000 f807 	bl	8007acc <_sbrk_r>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	d1db      	bne.n	8007a7a <_malloc_r+0x6a>
 8007ac2:	e7c7      	b.n	8007a54 <_malloc_r+0x44>
 8007ac4:	20000090 	.word	0x20000090
 8007ac8:	20000094 	.word	0x20000094

08007acc <_sbrk_r>:
 8007acc:	2300      	movs	r3, #0
 8007ace:	b570      	push	{r4, r5, r6, lr}
 8007ad0:	4d06      	ldr	r5, [pc, #24]	; (8007aec <_sbrk_r+0x20>)
 8007ad2:	0004      	movs	r4, r0
 8007ad4:	0008      	movs	r0, r1
 8007ad6:	602b      	str	r3, [r5, #0]
 8007ad8:	f7fb f9a8 	bl	8002e2c <_sbrk>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d103      	bne.n	8007ae8 <_sbrk_r+0x1c>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d000      	beq.n	8007ae8 <_sbrk_r+0x1c>
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	bd70      	pop	{r4, r5, r6, pc}
 8007aea:	46c0      	nop			; (mov r8, r8)
 8007aec:	200001fc 	.word	0x200001fc

08007af0 <__malloc_lock>:
 8007af0:	b510      	push	{r4, lr}
 8007af2:	4802      	ldr	r0, [pc, #8]	; (8007afc <__malloc_lock+0xc>)
 8007af4:	f000 f80c 	bl	8007b10 <__retarget_lock_acquire_recursive>
 8007af8:	bd10      	pop	{r4, pc}
 8007afa:	46c0      	nop			; (mov r8, r8)
 8007afc:	20000204 	.word	0x20000204

08007b00 <__malloc_unlock>:
 8007b00:	b510      	push	{r4, lr}
 8007b02:	4802      	ldr	r0, [pc, #8]	; (8007b0c <__malloc_unlock+0xc>)
 8007b04:	f000 f805 	bl	8007b12 <__retarget_lock_release_recursive>
 8007b08:	bd10      	pop	{r4, pc}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	20000204 	.word	0x20000204

08007b10 <__retarget_lock_acquire_recursive>:
 8007b10:	4770      	bx	lr

08007b12 <__retarget_lock_release_recursive>:
 8007b12:	4770      	bx	lr

08007b14 <_init>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr

08007b20 <_fini>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr
