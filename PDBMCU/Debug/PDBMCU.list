
PDBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008274  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008524  08008524  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08008524  08008524  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008524  08008524  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008524  08008524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800852c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000070  0800859c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  0800859c  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcc7  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261d  00000000  00000000  0002fd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  00032380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  00032ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017031  00000000  00000000  000338e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed7f  00000000  00000000  0004a919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089ab1  00000000  00000000  00059698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d0c  00000000  00000000  000e319c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000070 	.word	0x20000070
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08008310 	.word	0x08008310

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000074 	.word	0x20000074
 80000f8:	08008310 	.word	0x08008310

080000fc <__gnu_thumb1_case_shi>:
 80000fc:	b403      	push	{r0, r1}
 80000fe:	4671      	mov	r1, lr
 8000100:	0849      	lsrs	r1, r1, #1
 8000102:	0040      	lsls	r0, r0, #1
 8000104:	0049      	lsls	r1, r1, #1
 8000106:	5e09      	ldrsh	r1, [r1, r0]
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	448e      	add	lr, r1
 800010c:	bc03      	pop	{r0, r1}
 800010e:	4770      	bx	lr

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	; 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f806 	bl	8000224 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__aeabi_idiv0>:
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_fdiv>:
 8000228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800022a:	464f      	mov	r7, r9
 800022c:	4646      	mov	r6, r8
 800022e:	46d6      	mov	lr, sl
 8000230:	0245      	lsls	r5, r0, #9
 8000232:	b5c0      	push	{r6, r7, lr}
 8000234:	0047      	lsls	r7, r0, #1
 8000236:	1c0c      	adds	r4, r1, #0
 8000238:	0a6d      	lsrs	r5, r5, #9
 800023a:	0e3f      	lsrs	r7, r7, #24
 800023c:	0fc6      	lsrs	r6, r0, #31
 800023e:	2f00      	cmp	r7, #0
 8000240:	d066      	beq.n	8000310 <__aeabi_fdiv+0xe8>
 8000242:	2fff      	cmp	r7, #255	; 0xff
 8000244:	d06c      	beq.n	8000320 <__aeabi_fdiv+0xf8>
 8000246:	2300      	movs	r3, #0
 8000248:	00ea      	lsls	r2, r5, #3
 800024a:	2580      	movs	r5, #128	; 0x80
 800024c:	4699      	mov	r9, r3
 800024e:	469a      	mov	sl, r3
 8000250:	04ed      	lsls	r5, r5, #19
 8000252:	4315      	orrs	r5, r2
 8000254:	3f7f      	subs	r7, #127	; 0x7f
 8000256:	0260      	lsls	r0, r4, #9
 8000258:	0061      	lsls	r1, r4, #1
 800025a:	0a43      	lsrs	r3, r0, #9
 800025c:	4698      	mov	r8, r3
 800025e:	0e09      	lsrs	r1, r1, #24
 8000260:	0fe4      	lsrs	r4, r4, #31
 8000262:	2900      	cmp	r1, #0
 8000264:	d048      	beq.n	80002f8 <__aeabi_fdiv+0xd0>
 8000266:	29ff      	cmp	r1, #255	; 0xff
 8000268:	d010      	beq.n	800028c <__aeabi_fdiv+0x64>
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	00d8      	lsls	r0, r3, #3
 800026e:	04d2      	lsls	r2, r2, #19
 8000270:	4302      	orrs	r2, r0
 8000272:	4690      	mov	r8, r2
 8000274:	2000      	movs	r0, #0
 8000276:	397f      	subs	r1, #127	; 0x7f
 8000278:	464a      	mov	r2, r9
 800027a:	0033      	movs	r3, r6
 800027c:	1a7f      	subs	r7, r7, r1
 800027e:	4302      	orrs	r2, r0
 8000280:	496c      	ldr	r1, [pc, #432]	; (8000434 <__aeabi_fdiv+0x20c>)
 8000282:	0092      	lsls	r2, r2, #2
 8000284:	588a      	ldr	r2, [r1, r2]
 8000286:	4063      	eors	r3, r4
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4697      	mov	pc, r2
 800028c:	2b00      	cmp	r3, #0
 800028e:	d16d      	bne.n	800036c <__aeabi_fdiv+0x144>
 8000290:	2002      	movs	r0, #2
 8000292:	3fff      	subs	r7, #255	; 0xff
 8000294:	e033      	b.n	80002fe <__aeabi_fdiv+0xd6>
 8000296:	2300      	movs	r3, #0
 8000298:	4698      	mov	r8, r3
 800029a:	0026      	movs	r6, r4
 800029c:	4645      	mov	r5, r8
 800029e:	4682      	mov	sl, r0
 80002a0:	4653      	mov	r3, sl
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	d100      	bne.n	80002a8 <__aeabi_fdiv+0x80>
 80002a6:	e07f      	b.n	80003a8 <__aeabi_fdiv+0x180>
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d100      	bne.n	80002ae <__aeabi_fdiv+0x86>
 80002ac:	e094      	b.n	80003d8 <__aeabi_fdiv+0x1b0>
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d017      	beq.n	80002e2 <__aeabi_fdiv+0xba>
 80002b2:	0038      	movs	r0, r7
 80002b4:	307f      	adds	r0, #127	; 0x7f
 80002b6:	2800      	cmp	r0, #0
 80002b8:	dd5f      	ble.n	800037a <__aeabi_fdiv+0x152>
 80002ba:	076b      	lsls	r3, r5, #29
 80002bc:	d004      	beq.n	80002c8 <__aeabi_fdiv+0xa0>
 80002be:	230f      	movs	r3, #15
 80002c0:	402b      	ands	r3, r5
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d000      	beq.n	80002c8 <__aeabi_fdiv+0xa0>
 80002c6:	3504      	adds	r5, #4
 80002c8:	012b      	lsls	r3, r5, #4
 80002ca:	d503      	bpl.n	80002d4 <__aeabi_fdiv+0xac>
 80002cc:	0038      	movs	r0, r7
 80002ce:	4b5a      	ldr	r3, [pc, #360]	; (8000438 <__aeabi_fdiv+0x210>)
 80002d0:	3080      	adds	r0, #128	; 0x80
 80002d2:	401d      	ands	r5, r3
 80002d4:	28fe      	cmp	r0, #254	; 0xfe
 80002d6:	dc67      	bgt.n	80003a8 <__aeabi_fdiv+0x180>
 80002d8:	01ad      	lsls	r5, r5, #6
 80002da:	0a6d      	lsrs	r5, r5, #9
 80002dc:	b2c0      	uxtb	r0, r0
 80002de:	e002      	b.n	80002e6 <__aeabi_fdiv+0xbe>
 80002e0:	001e      	movs	r6, r3
 80002e2:	2000      	movs	r0, #0
 80002e4:	2500      	movs	r5, #0
 80002e6:	05c0      	lsls	r0, r0, #23
 80002e8:	4328      	orrs	r0, r5
 80002ea:	07f6      	lsls	r6, r6, #31
 80002ec:	4330      	orrs	r0, r6
 80002ee:	bce0      	pop	{r5, r6, r7}
 80002f0:	46ba      	mov	sl, r7
 80002f2:	46b1      	mov	r9, r6
 80002f4:	46a8      	mov	r8, r5
 80002f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d12b      	bne.n	8000354 <__aeabi_fdiv+0x12c>
 80002fc:	2001      	movs	r0, #1
 80002fe:	464a      	mov	r2, r9
 8000300:	0033      	movs	r3, r6
 8000302:	494e      	ldr	r1, [pc, #312]	; (800043c <__aeabi_fdiv+0x214>)
 8000304:	4302      	orrs	r2, r0
 8000306:	0092      	lsls	r2, r2, #2
 8000308:	588a      	ldr	r2, [r1, r2]
 800030a:	4063      	eors	r3, r4
 800030c:	b2db      	uxtb	r3, r3
 800030e:	4697      	mov	pc, r2
 8000310:	2d00      	cmp	r5, #0
 8000312:	d113      	bne.n	800033c <__aeabi_fdiv+0x114>
 8000314:	2304      	movs	r3, #4
 8000316:	4699      	mov	r9, r3
 8000318:	3b03      	subs	r3, #3
 800031a:	2700      	movs	r7, #0
 800031c:	469a      	mov	sl, r3
 800031e:	e79a      	b.n	8000256 <__aeabi_fdiv+0x2e>
 8000320:	2d00      	cmp	r5, #0
 8000322:	d105      	bne.n	8000330 <__aeabi_fdiv+0x108>
 8000324:	2308      	movs	r3, #8
 8000326:	4699      	mov	r9, r3
 8000328:	3b06      	subs	r3, #6
 800032a:	27ff      	movs	r7, #255	; 0xff
 800032c:	469a      	mov	sl, r3
 800032e:	e792      	b.n	8000256 <__aeabi_fdiv+0x2e>
 8000330:	230c      	movs	r3, #12
 8000332:	4699      	mov	r9, r3
 8000334:	3b09      	subs	r3, #9
 8000336:	27ff      	movs	r7, #255	; 0xff
 8000338:	469a      	mov	sl, r3
 800033a:	e78c      	b.n	8000256 <__aeabi_fdiv+0x2e>
 800033c:	0028      	movs	r0, r5
 800033e:	f001 ff45 	bl	80021cc <__clzsi2>
 8000342:	2776      	movs	r7, #118	; 0x76
 8000344:	1f43      	subs	r3, r0, #5
 8000346:	409d      	lsls	r5, r3
 8000348:	2300      	movs	r3, #0
 800034a:	427f      	negs	r7, r7
 800034c:	4699      	mov	r9, r3
 800034e:	469a      	mov	sl, r3
 8000350:	1a3f      	subs	r7, r7, r0
 8000352:	e780      	b.n	8000256 <__aeabi_fdiv+0x2e>
 8000354:	0018      	movs	r0, r3
 8000356:	f001 ff39 	bl	80021cc <__clzsi2>
 800035a:	4642      	mov	r2, r8
 800035c:	1f43      	subs	r3, r0, #5
 800035e:	2176      	movs	r1, #118	; 0x76
 8000360:	409a      	lsls	r2, r3
 8000362:	4249      	negs	r1, r1
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	4690      	mov	r8, r2
 8000368:	2000      	movs	r0, #0
 800036a:	e785      	b.n	8000278 <__aeabi_fdiv+0x50>
 800036c:	21ff      	movs	r1, #255	; 0xff
 800036e:	2003      	movs	r0, #3
 8000370:	e782      	b.n	8000278 <__aeabi_fdiv+0x50>
 8000372:	001e      	movs	r6, r3
 8000374:	20ff      	movs	r0, #255	; 0xff
 8000376:	2500      	movs	r5, #0
 8000378:	e7b5      	b.n	80002e6 <__aeabi_fdiv+0xbe>
 800037a:	2301      	movs	r3, #1
 800037c:	1a1b      	subs	r3, r3, r0
 800037e:	2b1b      	cmp	r3, #27
 8000380:	dcaf      	bgt.n	80002e2 <__aeabi_fdiv+0xba>
 8000382:	379e      	adds	r7, #158	; 0x9e
 8000384:	0029      	movs	r1, r5
 8000386:	40bd      	lsls	r5, r7
 8000388:	40d9      	lsrs	r1, r3
 800038a:	1e6a      	subs	r2, r5, #1
 800038c:	4195      	sbcs	r5, r2
 800038e:	430d      	orrs	r5, r1
 8000390:	076b      	lsls	r3, r5, #29
 8000392:	d004      	beq.n	800039e <__aeabi_fdiv+0x176>
 8000394:	230f      	movs	r3, #15
 8000396:	402b      	ands	r3, r5
 8000398:	2b04      	cmp	r3, #4
 800039a:	d000      	beq.n	800039e <__aeabi_fdiv+0x176>
 800039c:	3504      	adds	r5, #4
 800039e:	016b      	lsls	r3, r5, #5
 80003a0:	d544      	bpl.n	800042c <__aeabi_fdiv+0x204>
 80003a2:	2001      	movs	r0, #1
 80003a4:	2500      	movs	r5, #0
 80003a6:	e79e      	b.n	80002e6 <__aeabi_fdiv+0xbe>
 80003a8:	20ff      	movs	r0, #255	; 0xff
 80003aa:	2500      	movs	r5, #0
 80003ac:	e79b      	b.n	80002e6 <__aeabi_fdiv+0xbe>
 80003ae:	2580      	movs	r5, #128	; 0x80
 80003b0:	2600      	movs	r6, #0
 80003b2:	20ff      	movs	r0, #255	; 0xff
 80003b4:	03ed      	lsls	r5, r5, #15
 80003b6:	e796      	b.n	80002e6 <__aeabi_fdiv+0xbe>
 80003b8:	2300      	movs	r3, #0
 80003ba:	4698      	mov	r8, r3
 80003bc:	2080      	movs	r0, #128	; 0x80
 80003be:	03c0      	lsls	r0, r0, #15
 80003c0:	4205      	tst	r5, r0
 80003c2:	d009      	beq.n	80003d8 <__aeabi_fdiv+0x1b0>
 80003c4:	4643      	mov	r3, r8
 80003c6:	4203      	tst	r3, r0
 80003c8:	d106      	bne.n	80003d8 <__aeabi_fdiv+0x1b0>
 80003ca:	4645      	mov	r5, r8
 80003cc:	4305      	orrs	r5, r0
 80003ce:	026d      	lsls	r5, r5, #9
 80003d0:	0026      	movs	r6, r4
 80003d2:	20ff      	movs	r0, #255	; 0xff
 80003d4:	0a6d      	lsrs	r5, r5, #9
 80003d6:	e786      	b.n	80002e6 <__aeabi_fdiv+0xbe>
 80003d8:	2080      	movs	r0, #128	; 0x80
 80003da:	03c0      	lsls	r0, r0, #15
 80003dc:	4305      	orrs	r5, r0
 80003de:	026d      	lsls	r5, r5, #9
 80003e0:	20ff      	movs	r0, #255	; 0xff
 80003e2:	0a6d      	lsrs	r5, r5, #9
 80003e4:	e77f      	b.n	80002e6 <__aeabi_fdiv+0xbe>
 80003e6:	4641      	mov	r1, r8
 80003e8:	016a      	lsls	r2, r5, #5
 80003ea:	0148      	lsls	r0, r1, #5
 80003ec:	4282      	cmp	r2, r0
 80003ee:	d219      	bcs.n	8000424 <__aeabi_fdiv+0x1fc>
 80003f0:	211b      	movs	r1, #27
 80003f2:	2500      	movs	r5, #0
 80003f4:	3f01      	subs	r7, #1
 80003f6:	2601      	movs	r6, #1
 80003f8:	0014      	movs	r4, r2
 80003fa:	006d      	lsls	r5, r5, #1
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	2c00      	cmp	r4, #0
 8000400:	db01      	blt.n	8000406 <__aeabi_fdiv+0x1de>
 8000402:	4290      	cmp	r0, r2
 8000404:	d801      	bhi.n	800040a <__aeabi_fdiv+0x1e2>
 8000406:	1a12      	subs	r2, r2, r0
 8000408:	4335      	orrs	r5, r6
 800040a:	3901      	subs	r1, #1
 800040c:	2900      	cmp	r1, #0
 800040e:	d1f3      	bne.n	80003f8 <__aeabi_fdiv+0x1d0>
 8000410:	1e50      	subs	r0, r2, #1
 8000412:	4182      	sbcs	r2, r0
 8000414:	0038      	movs	r0, r7
 8000416:	307f      	adds	r0, #127	; 0x7f
 8000418:	001e      	movs	r6, r3
 800041a:	4315      	orrs	r5, r2
 800041c:	2800      	cmp	r0, #0
 800041e:	dd00      	ble.n	8000422 <__aeabi_fdiv+0x1fa>
 8000420:	e74b      	b.n	80002ba <__aeabi_fdiv+0x92>
 8000422:	e7aa      	b.n	800037a <__aeabi_fdiv+0x152>
 8000424:	211a      	movs	r1, #26
 8000426:	2501      	movs	r5, #1
 8000428:	1a12      	subs	r2, r2, r0
 800042a:	e7e4      	b.n	80003f6 <__aeabi_fdiv+0x1ce>
 800042c:	01ad      	lsls	r5, r5, #6
 800042e:	2000      	movs	r0, #0
 8000430:	0a6d      	lsrs	r5, r5, #9
 8000432:	e758      	b.n	80002e6 <__aeabi_fdiv+0xbe>
 8000434:	08008370 	.word	0x08008370
 8000438:	f7ffffff 	.word	0xf7ffffff
 800043c:	080083b0 	.word	0x080083b0

08000440 <__aeabi_fmul>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	4657      	mov	r7, sl
 8000444:	464e      	mov	r6, r9
 8000446:	4645      	mov	r5, r8
 8000448:	46de      	mov	lr, fp
 800044a:	0244      	lsls	r4, r0, #9
 800044c:	b5e0      	push	{r5, r6, r7, lr}
 800044e:	0045      	lsls	r5, r0, #1
 8000450:	1c0f      	adds	r7, r1, #0
 8000452:	0a64      	lsrs	r4, r4, #9
 8000454:	0e2d      	lsrs	r5, r5, #24
 8000456:	0fc6      	lsrs	r6, r0, #31
 8000458:	2d00      	cmp	r5, #0
 800045a:	d047      	beq.n	80004ec <__aeabi_fmul+0xac>
 800045c:	2dff      	cmp	r5, #255	; 0xff
 800045e:	d04d      	beq.n	80004fc <__aeabi_fmul+0xbc>
 8000460:	2300      	movs	r3, #0
 8000462:	2080      	movs	r0, #128	; 0x80
 8000464:	469a      	mov	sl, r3
 8000466:	469b      	mov	fp, r3
 8000468:	00e4      	lsls	r4, r4, #3
 800046a:	04c0      	lsls	r0, r0, #19
 800046c:	4304      	orrs	r4, r0
 800046e:	3d7f      	subs	r5, #127	; 0x7f
 8000470:	0278      	lsls	r0, r7, #9
 8000472:	0a43      	lsrs	r3, r0, #9
 8000474:	4699      	mov	r9, r3
 8000476:	007a      	lsls	r2, r7, #1
 8000478:	0ffb      	lsrs	r3, r7, #31
 800047a:	4698      	mov	r8, r3
 800047c:	0e12      	lsrs	r2, r2, #24
 800047e:	464b      	mov	r3, r9
 8000480:	d044      	beq.n	800050c <__aeabi_fmul+0xcc>
 8000482:	2aff      	cmp	r2, #255	; 0xff
 8000484:	d011      	beq.n	80004aa <__aeabi_fmul+0x6a>
 8000486:	00d8      	lsls	r0, r3, #3
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	04db      	lsls	r3, r3, #19
 800048c:	4303      	orrs	r3, r0
 800048e:	4699      	mov	r9, r3
 8000490:	2000      	movs	r0, #0
 8000492:	3a7f      	subs	r2, #127	; 0x7f
 8000494:	18ad      	adds	r5, r5, r2
 8000496:	4647      	mov	r7, r8
 8000498:	4653      	mov	r3, sl
 800049a:	4077      	eors	r7, r6
 800049c:	1c69      	adds	r1, r5, #1
 800049e:	2b0f      	cmp	r3, #15
 80004a0:	d83f      	bhi.n	8000522 <__aeabi_fmul+0xe2>
 80004a2:	4a72      	ldr	r2, [pc, #456]	; (800066c <__aeabi_fmul+0x22c>)
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	58d3      	ldr	r3, [r2, r3]
 80004a8:	469f      	mov	pc, r3
 80004aa:	35ff      	adds	r5, #255	; 0xff
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d000      	beq.n	80004b2 <__aeabi_fmul+0x72>
 80004b0:	e079      	b.n	80005a6 <__aeabi_fmul+0x166>
 80004b2:	4652      	mov	r2, sl
 80004b4:	2302      	movs	r3, #2
 80004b6:	431a      	orrs	r2, r3
 80004b8:	4692      	mov	sl, r2
 80004ba:	2002      	movs	r0, #2
 80004bc:	e7eb      	b.n	8000496 <__aeabi_fmul+0x56>
 80004be:	4647      	mov	r7, r8
 80004c0:	464c      	mov	r4, r9
 80004c2:	4683      	mov	fp, r0
 80004c4:	465b      	mov	r3, fp
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d028      	beq.n	800051c <__aeabi_fmul+0xdc>
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d100      	bne.n	80004d0 <__aeabi_fmul+0x90>
 80004ce:	e0c6      	b.n	800065e <__aeabi_fmul+0x21e>
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d14f      	bne.n	8000574 <__aeabi_fmul+0x134>
 80004d4:	2000      	movs	r0, #0
 80004d6:	2400      	movs	r4, #0
 80004d8:	05c0      	lsls	r0, r0, #23
 80004da:	07ff      	lsls	r7, r7, #31
 80004dc:	4320      	orrs	r0, r4
 80004de:	4338      	orrs	r0, r7
 80004e0:	bcf0      	pop	{r4, r5, r6, r7}
 80004e2:	46bb      	mov	fp, r7
 80004e4:	46b2      	mov	sl, r6
 80004e6:	46a9      	mov	r9, r5
 80004e8:	46a0      	mov	r8, r4
 80004ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	d171      	bne.n	80005d4 <__aeabi_fmul+0x194>
 80004f0:	2304      	movs	r3, #4
 80004f2:	469a      	mov	sl, r3
 80004f4:	3b03      	subs	r3, #3
 80004f6:	2500      	movs	r5, #0
 80004f8:	469b      	mov	fp, r3
 80004fa:	e7b9      	b.n	8000470 <__aeabi_fmul+0x30>
 80004fc:	2c00      	cmp	r4, #0
 80004fe:	d163      	bne.n	80005c8 <__aeabi_fmul+0x188>
 8000500:	2308      	movs	r3, #8
 8000502:	469a      	mov	sl, r3
 8000504:	3b06      	subs	r3, #6
 8000506:	25ff      	movs	r5, #255	; 0xff
 8000508:	469b      	mov	fp, r3
 800050a:	e7b1      	b.n	8000470 <__aeabi_fmul+0x30>
 800050c:	2b00      	cmp	r3, #0
 800050e:	d150      	bne.n	80005b2 <__aeabi_fmul+0x172>
 8000510:	4652      	mov	r2, sl
 8000512:	3301      	adds	r3, #1
 8000514:	431a      	orrs	r2, r3
 8000516:	4692      	mov	sl, r2
 8000518:	2001      	movs	r0, #1
 800051a:	e7bc      	b.n	8000496 <__aeabi_fmul+0x56>
 800051c:	20ff      	movs	r0, #255	; 0xff
 800051e:	2400      	movs	r4, #0
 8000520:	e7da      	b.n	80004d8 <__aeabi_fmul+0x98>
 8000522:	4648      	mov	r0, r9
 8000524:	0c26      	lsrs	r6, r4, #16
 8000526:	0424      	lsls	r4, r4, #16
 8000528:	0c22      	lsrs	r2, r4, #16
 800052a:	0404      	lsls	r4, r0, #16
 800052c:	0c24      	lsrs	r4, r4, #16
 800052e:	464b      	mov	r3, r9
 8000530:	0020      	movs	r0, r4
 8000532:	0c1b      	lsrs	r3, r3, #16
 8000534:	4350      	muls	r0, r2
 8000536:	4374      	muls	r4, r6
 8000538:	435a      	muls	r2, r3
 800053a:	435e      	muls	r6, r3
 800053c:	1912      	adds	r2, r2, r4
 800053e:	0c03      	lsrs	r3, r0, #16
 8000540:	189b      	adds	r3, r3, r2
 8000542:	429c      	cmp	r4, r3
 8000544:	d903      	bls.n	800054e <__aeabi_fmul+0x10e>
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	0252      	lsls	r2, r2, #9
 800054a:	4694      	mov	ip, r2
 800054c:	4466      	add	r6, ip
 800054e:	0400      	lsls	r0, r0, #16
 8000550:	041a      	lsls	r2, r3, #16
 8000552:	0c00      	lsrs	r0, r0, #16
 8000554:	1812      	adds	r2, r2, r0
 8000556:	0194      	lsls	r4, r2, #6
 8000558:	1e60      	subs	r0, r4, #1
 800055a:	4184      	sbcs	r4, r0
 800055c:	0c1b      	lsrs	r3, r3, #16
 800055e:	0e92      	lsrs	r2, r2, #26
 8000560:	199b      	adds	r3, r3, r6
 8000562:	4314      	orrs	r4, r2
 8000564:	019b      	lsls	r3, r3, #6
 8000566:	431c      	orrs	r4, r3
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	d572      	bpl.n	8000652 <__aeabi_fmul+0x212>
 800056c:	2001      	movs	r0, #1
 800056e:	0863      	lsrs	r3, r4, #1
 8000570:	4004      	ands	r4, r0
 8000572:	431c      	orrs	r4, r3
 8000574:	0008      	movs	r0, r1
 8000576:	307f      	adds	r0, #127	; 0x7f
 8000578:	2800      	cmp	r0, #0
 800057a:	dd3c      	ble.n	80005f6 <__aeabi_fmul+0x1b6>
 800057c:	0763      	lsls	r3, r4, #29
 800057e:	d004      	beq.n	800058a <__aeabi_fmul+0x14a>
 8000580:	230f      	movs	r3, #15
 8000582:	4023      	ands	r3, r4
 8000584:	2b04      	cmp	r3, #4
 8000586:	d000      	beq.n	800058a <__aeabi_fmul+0x14a>
 8000588:	3404      	adds	r4, #4
 800058a:	0123      	lsls	r3, r4, #4
 800058c:	d503      	bpl.n	8000596 <__aeabi_fmul+0x156>
 800058e:	3180      	adds	r1, #128	; 0x80
 8000590:	0008      	movs	r0, r1
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <__aeabi_fmul+0x230>)
 8000594:	401c      	ands	r4, r3
 8000596:	28fe      	cmp	r0, #254	; 0xfe
 8000598:	dcc0      	bgt.n	800051c <__aeabi_fmul+0xdc>
 800059a:	01a4      	lsls	r4, r4, #6
 800059c:	0a64      	lsrs	r4, r4, #9
 800059e:	b2c0      	uxtb	r0, r0
 80005a0:	e79a      	b.n	80004d8 <__aeabi_fmul+0x98>
 80005a2:	0037      	movs	r7, r6
 80005a4:	e78e      	b.n	80004c4 <__aeabi_fmul+0x84>
 80005a6:	4652      	mov	r2, sl
 80005a8:	2303      	movs	r3, #3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	4692      	mov	sl, r2
 80005ae:	2003      	movs	r0, #3
 80005b0:	e771      	b.n	8000496 <__aeabi_fmul+0x56>
 80005b2:	4648      	mov	r0, r9
 80005b4:	f001 fe0a 	bl	80021cc <__clzsi2>
 80005b8:	464a      	mov	r2, r9
 80005ba:	1f43      	subs	r3, r0, #5
 80005bc:	409a      	lsls	r2, r3
 80005be:	1a2d      	subs	r5, r5, r0
 80005c0:	4691      	mov	r9, r2
 80005c2:	2000      	movs	r0, #0
 80005c4:	3d76      	subs	r5, #118	; 0x76
 80005c6:	e766      	b.n	8000496 <__aeabi_fmul+0x56>
 80005c8:	230c      	movs	r3, #12
 80005ca:	469a      	mov	sl, r3
 80005cc:	3b09      	subs	r3, #9
 80005ce:	25ff      	movs	r5, #255	; 0xff
 80005d0:	469b      	mov	fp, r3
 80005d2:	e74d      	b.n	8000470 <__aeabi_fmul+0x30>
 80005d4:	0020      	movs	r0, r4
 80005d6:	f001 fdf9 	bl	80021cc <__clzsi2>
 80005da:	2576      	movs	r5, #118	; 0x76
 80005dc:	1f43      	subs	r3, r0, #5
 80005de:	409c      	lsls	r4, r3
 80005e0:	2300      	movs	r3, #0
 80005e2:	426d      	negs	r5, r5
 80005e4:	469a      	mov	sl, r3
 80005e6:	469b      	mov	fp, r3
 80005e8:	1a2d      	subs	r5, r5, r0
 80005ea:	e741      	b.n	8000470 <__aeabi_fmul+0x30>
 80005ec:	2480      	movs	r4, #128	; 0x80
 80005ee:	2700      	movs	r7, #0
 80005f0:	20ff      	movs	r0, #255	; 0xff
 80005f2:	03e4      	lsls	r4, r4, #15
 80005f4:	e770      	b.n	80004d8 <__aeabi_fmul+0x98>
 80005f6:	2301      	movs	r3, #1
 80005f8:	1a1b      	subs	r3, r3, r0
 80005fa:	2b1b      	cmp	r3, #27
 80005fc:	dd00      	ble.n	8000600 <__aeabi_fmul+0x1c0>
 80005fe:	e769      	b.n	80004d4 <__aeabi_fmul+0x94>
 8000600:	319e      	adds	r1, #158	; 0x9e
 8000602:	0020      	movs	r0, r4
 8000604:	408c      	lsls	r4, r1
 8000606:	40d8      	lsrs	r0, r3
 8000608:	1e63      	subs	r3, r4, #1
 800060a:	419c      	sbcs	r4, r3
 800060c:	4304      	orrs	r4, r0
 800060e:	0763      	lsls	r3, r4, #29
 8000610:	d004      	beq.n	800061c <__aeabi_fmul+0x1dc>
 8000612:	230f      	movs	r3, #15
 8000614:	4023      	ands	r3, r4
 8000616:	2b04      	cmp	r3, #4
 8000618:	d000      	beq.n	800061c <__aeabi_fmul+0x1dc>
 800061a:	3404      	adds	r4, #4
 800061c:	0163      	lsls	r3, r4, #5
 800061e:	d51a      	bpl.n	8000656 <__aeabi_fmul+0x216>
 8000620:	2001      	movs	r0, #1
 8000622:	2400      	movs	r4, #0
 8000624:	e758      	b.n	80004d8 <__aeabi_fmul+0x98>
 8000626:	2080      	movs	r0, #128	; 0x80
 8000628:	03c0      	lsls	r0, r0, #15
 800062a:	4204      	tst	r4, r0
 800062c:	d009      	beq.n	8000642 <__aeabi_fmul+0x202>
 800062e:	464b      	mov	r3, r9
 8000630:	4203      	tst	r3, r0
 8000632:	d106      	bne.n	8000642 <__aeabi_fmul+0x202>
 8000634:	464c      	mov	r4, r9
 8000636:	4304      	orrs	r4, r0
 8000638:	0264      	lsls	r4, r4, #9
 800063a:	4647      	mov	r7, r8
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	0a64      	lsrs	r4, r4, #9
 8000640:	e74a      	b.n	80004d8 <__aeabi_fmul+0x98>
 8000642:	2080      	movs	r0, #128	; 0x80
 8000644:	03c0      	lsls	r0, r0, #15
 8000646:	4304      	orrs	r4, r0
 8000648:	0264      	lsls	r4, r4, #9
 800064a:	0037      	movs	r7, r6
 800064c:	20ff      	movs	r0, #255	; 0xff
 800064e:	0a64      	lsrs	r4, r4, #9
 8000650:	e742      	b.n	80004d8 <__aeabi_fmul+0x98>
 8000652:	0029      	movs	r1, r5
 8000654:	e78e      	b.n	8000574 <__aeabi_fmul+0x134>
 8000656:	01a4      	lsls	r4, r4, #6
 8000658:	2000      	movs	r0, #0
 800065a:	0a64      	lsrs	r4, r4, #9
 800065c:	e73c      	b.n	80004d8 <__aeabi_fmul+0x98>
 800065e:	2080      	movs	r0, #128	; 0x80
 8000660:	03c0      	lsls	r0, r0, #15
 8000662:	4304      	orrs	r4, r0
 8000664:	0264      	lsls	r4, r4, #9
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	0a64      	lsrs	r4, r4, #9
 800066a:	e735      	b.n	80004d8 <__aeabi_fmul+0x98>
 800066c:	080083f0 	.word	0x080083f0
 8000670:	f7ffffff 	.word	0xf7ffffff

08000674 <__aeabi_f2iz>:
 8000674:	0241      	lsls	r1, r0, #9
 8000676:	0042      	lsls	r2, r0, #1
 8000678:	0fc3      	lsrs	r3, r0, #31
 800067a:	0a49      	lsrs	r1, r1, #9
 800067c:	2000      	movs	r0, #0
 800067e:	0e12      	lsrs	r2, r2, #24
 8000680:	2a7e      	cmp	r2, #126	; 0x7e
 8000682:	d903      	bls.n	800068c <__aeabi_f2iz+0x18>
 8000684:	2a9d      	cmp	r2, #157	; 0x9d
 8000686:	d902      	bls.n	800068e <__aeabi_f2iz+0x1a>
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <__aeabi_f2iz+0x3c>)
 800068a:	1898      	adds	r0, r3, r2
 800068c:	4770      	bx	lr
 800068e:	2080      	movs	r0, #128	; 0x80
 8000690:	0400      	lsls	r0, r0, #16
 8000692:	4301      	orrs	r1, r0
 8000694:	2a95      	cmp	r2, #149	; 0x95
 8000696:	dc07      	bgt.n	80006a8 <__aeabi_f2iz+0x34>
 8000698:	2096      	movs	r0, #150	; 0x96
 800069a:	1a82      	subs	r2, r0, r2
 800069c:	40d1      	lsrs	r1, r2
 800069e:	4248      	negs	r0, r1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f3      	bne.n	800068c <__aeabi_f2iz+0x18>
 80006a4:	0008      	movs	r0, r1
 80006a6:	e7f1      	b.n	800068c <__aeabi_f2iz+0x18>
 80006a8:	3a96      	subs	r2, #150	; 0x96
 80006aa:	4091      	lsls	r1, r2
 80006ac:	e7f7      	b.n	800069e <__aeabi_f2iz+0x2a>
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	7fffffff 	.word	0x7fffffff

080006b4 <__aeabi_i2f>:
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d013      	beq.n	80006e2 <__aeabi_i2f+0x2e>
 80006ba:	17c3      	asrs	r3, r0, #31
 80006bc:	18c5      	adds	r5, r0, r3
 80006be:	405d      	eors	r5, r3
 80006c0:	0fc4      	lsrs	r4, r0, #31
 80006c2:	0028      	movs	r0, r5
 80006c4:	f001 fd82 	bl	80021cc <__clzsi2>
 80006c8:	239e      	movs	r3, #158	; 0x9e
 80006ca:	0001      	movs	r1, r0
 80006cc:	1a1b      	subs	r3, r3, r0
 80006ce:	2b96      	cmp	r3, #150	; 0x96
 80006d0:	dc0f      	bgt.n	80006f2 <__aeabi_i2f+0x3e>
 80006d2:	2808      	cmp	r0, #8
 80006d4:	dd01      	ble.n	80006da <__aeabi_i2f+0x26>
 80006d6:	3908      	subs	r1, #8
 80006d8:	408d      	lsls	r5, r1
 80006da:	026d      	lsls	r5, r5, #9
 80006dc:	0a6d      	lsrs	r5, r5, #9
 80006de:	b2d8      	uxtb	r0, r3
 80006e0:	e002      	b.n	80006e8 <__aeabi_i2f+0x34>
 80006e2:	2400      	movs	r4, #0
 80006e4:	2000      	movs	r0, #0
 80006e6:	2500      	movs	r5, #0
 80006e8:	05c0      	lsls	r0, r0, #23
 80006ea:	4328      	orrs	r0, r5
 80006ec:	07e4      	lsls	r4, r4, #31
 80006ee:	4320      	orrs	r0, r4
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	2b99      	cmp	r3, #153	; 0x99
 80006f4:	dd0b      	ble.n	800070e <__aeabi_i2f+0x5a>
 80006f6:	2205      	movs	r2, #5
 80006f8:	002e      	movs	r6, r5
 80006fa:	1a12      	subs	r2, r2, r0
 80006fc:	40d6      	lsrs	r6, r2
 80006fe:	0002      	movs	r2, r0
 8000700:	321b      	adds	r2, #27
 8000702:	4095      	lsls	r5, r2
 8000704:	0028      	movs	r0, r5
 8000706:	1e45      	subs	r5, r0, #1
 8000708:	41a8      	sbcs	r0, r5
 800070a:	0035      	movs	r5, r6
 800070c:	4305      	orrs	r5, r0
 800070e:	2905      	cmp	r1, #5
 8000710:	dd01      	ble.n	8000716 <__aeabi_i2f+0x62>
 8000712:	1f4a      	subs	r2, r1, #5
 8000714:	4095      	lsls	r5, r2
 8000716:	002a      	movs	r2, r5
 8000718:	4e08      	ldr	r6, [pc, #32]	; (800073c <__aeabi_i2f+0x88>)
 800071a:	4032      	ands	r2, r6
 800071c:	0768      	lsls	r0, r5, #29
 800071e:	d009      	beq.n	8000734 <__aeabi_i2f+0x80>
 8000720:	200f      	movs	r0, #15
 8000722:	4028      	ands	r0, r5
 8000724:	2804      	cmp	r0, #4
 8000726:	d005      	beq.n	8000734 <__aeabi_i2f+0x80>
 8000728:	3204      	adds	r2, #4
 800072a:	0150      	lsls	r0, r2, #5
 800072c:	d502      	bpl.n	8000734 <__aeabi_i2f+0x80>
 800072e:	239f      	movs	r3, #159	; 0x9f
 8000730:	4032      	ands	r2, r6
 8000732:	1a5b      	subs	r3, r3, r1
 8000734:	0192      	lsls	r2, r2, #6
 8000736:	0a55      	lsrs	r5, r2, #9
 8000738:	b2d8      	uxtb	r0, r3
 800073a:	e7d5      	b.n	80006e8 <__aeabi_i2f+0x34>
 800073c:	fbffffff 	.word	0xfbffffff

08000740 <__aeabi_dadd>:
 8000740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000742:	464f      	mov	r7, r9
 8000744:	46d6      	mov	lr, sl
 8000746:	4646      	mov	r6, r8
 8000748:	000d      	movs	r5, r1
 800074a:	0001      	movs	r1, r0
 800074c:	0018      	movs	r0, r3
 800074e:	b5c0      	push	{r6, r7, lr}
 8000750:	0017      	movs	r7, r2
 8000752:	032b      	lsls	r3, r5, #12
 8000754:	0a5a      	lsrs	r2, r3, #9
 8000756:	0f4b      	lsrs	r3, r1, #29
 8000758:	4313      	orrs	r3, r2
 800075a:	00ca      	lsls	r2, r1, #3
 800075c:	4691      	mov	r9, r2
 800075e:	0302      	lsls	r2, r0, #12
 8000760:	006e      	lsls	r6, r5, #1
 8000762:	0041      	lsls	r1, r0, #1
 8000764:	0a52      	lsrs	r2, r2, #9
 8000766:	0fec      	lsrs	r4, r5, #31
 8000768:	0f7d      	lsrs	r5, r7, #29
 800076a:	4315      	orrs	r5, r2
 800076c:	0d76      	lsrs	r6, r6, #21
 800076e:	0d49      	lsrs	r1, r1, #21
 8000770:	0fc0      	lsrs	r0, r0, #31
 8000772:	4682      	mov	sl, r0
 8000774:	46ac      	mov	ip, r5
 8000776:	00ff      	lsls	r7, r7, #3
 8000778:	1a72      	subs	r2, r6, r1
 800077a:	4284      	cmp	r4, r0
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x40>
 800077e:	e098      	b.n	80008b2 <__aeabi_dadd+0x172>
 8000780:	2a00      	cmp	r2, #0
 8000782:	dc00      	bgt.n	8000786 <__aeabi_dadd+0x46>
 8000784:	e081      	b.n	800088a <__aeabi_dadd+0x14a>
 8000786:	2900      	cmp	r1, #0
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x4c>
 800078a:	e0b6      	b.n	80008fa <__aeabi_dadd+0x1ba>
 800078c:	49c9      	ldr	r1, [pc, #804]	; (8000ab4 <__aeabi_dadd+0x374>)
 800078e:	428e      	cmp	r6, r1
 8000790:	d100      	bne.n	8000794 <__aeabi_dadd+0x54>
 8000792:	e172      	b.n	8000a7a <__aeabi_dadd+0x33a>
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0028      	movs	r0, r5
 8000798:	0409      	lsls	r1, r1, #16
 800079a:	4308      	orrs	r0, r1
 800079c:	4684      	mov	ip, r0
 800079e:	2a38      	cmp	r2, #56	; 0x38
 80007a0:	dd00      	ble.n	80007a4 <__aeabi_dadd+0x64>
 80007a2:	e15e      	b.n	8000a62 <__aeabi_dadd+0x322>
 80007a4:	2a1f      	cmp	r2, #31
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dadd+0x6a>
 80007a8:	e1ee      	b.n	8000b88 <__aeabi_dadd+0x448>
 80007aa:	2020      	movs	r0, #32
 80007ac:	0039      	movs	r1, r7
 80007ae:	4665      	mov	r5, ip
 80007b0:	1a80      	subs	r0, r0, r2
 80007b2:	4087      	lsls	r7, r0
 80007b4:	40d1      	lsrs	r1, r2
 80007b6:	4085      	lsls	r5, r0
 80007b8:	430d      	orrs	r5, r1
 80007ba:	0039      	movs	r1, r7
 80007bc:	1e4f      	subs	r7, r1, #1
 80007be:	41b9      	sbcs	r1, r7
 80007c0:	4667      	mov	r7, ip
 80007c2:	40d7      	lsrs	r7, r2
 80007c4:	4329      	orrs	r1, r5
 80007c6:	1bdb      	subs	r3, r3, r7
 80007c8:	464a      	mov	r2, r9
 80007ca:	1a55      	subs	r5, r2, r1
 80007cc:	45a9      	cmp	r9, r5
 80007ce:	4189      	sbcs	r1, r1
 80007d0:	4249      	negs	r1, r1
 80007d2:	1a5b      	subs	r3, r3, r1
 80007d4:	4698      	mov	r8, r3
 80007d6:	4643      	mov	r3, r8
 80007d8:	021b      	lsls	r3, r3, #8
 80007da:	d400      	bmi.n	80007de <__aeabi_dadd+0x9e>
 80007dc:	e0cc      	b.n	8000978 <__aeabi_dadd+0x238>
 80007de:	4643      	mov	r3, r8
 80007e0:	025b      	lsls	r3, r3, #9
 80007e2:	0a5b      	lsrs	r3, r3, #9
 80007e4:	4698      	mov	r8, r3
 80007e6:	4643      	mov	r3, r8
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0xae>
 80007ec:	e12c      	b.n	8000a48 <__aeabi_dadd+0x308>
 80007ee:	4640      	mov	r0, r8
 80007f0:	f001 fcec 	bl	80021cc <__clzsi2>
 80007f4:	0001      	movs	r1, r0
 80007f6:	3908      	subs	r1, #8
 80007f8:	2220      	movs	r2, #32
 80007fa:	0028      	movs	r0, r5
 80007fc:	4643      	mov	r3, r8
 80007fe:	1a52      	subs	r2, r2, r1
 8000800:	408b      	lsls	r3, r1
 8000802:	40d0      	lsrs	r0, r2
 8000804:	408d      	lsls	r5, r1
 8000806:	4303      	orrs	r3, r0
 8000808:	428e      	cmp	r6, r1
 800080a:	dd00      	ble.n	800080e <__aeabi_dadd+0xce>
 800080c:	e117      	b.n	8000a3e <__aeabi_dadd+0x2fe>
 800080e:	1b8e      	subs	r6, r1, r6
 8000810:	1c72      	adds	r2, r6, #1
 8000812:	2a1f      	cmp	r2, #31
 8000814:	dd00      	ble.n	8000818 <__aeabi_dadd+0xd8>
 8000816:	e1a7      	b.n	8000b68 <__aeabi_dadd+0x428>
 8000818:	2120      	movs	r1, #32
 800081a:	0018      	movs	r0, r3
 800081c:	002e      	movs	r6, r5
 800081e:	1a89      	subs	r1, r1, r2
 8000820:	408d      	lsls	r5, r1
 8000822:	4088      	lsls	r0, r1
 8000824:	40d6      	lsrs	r6, r2
 8000826:	40d3      	lsrs	r3, r2
 8000828:	1e69      	subs	r1, r5, #1
 800082a:	418d      	sbcs	r5, r1
 800082c:	4330      	orrs	r0, r6
 800082e:	4698      	mov	r8, r3
 8000830:	2600      	movs	r6, #0
 8000832:	4305      	orrs	r5, r0
 8000834:	076b      	lsls	r3, r5, #29
 8000836:	d009      	beq.n	800084c <__aeabi_dadd+0x10c>
 8000838:	230f      	movs	r3, #15
 800083a:	402b      	ands	r3, r5
 800083c:	2b04      	cmp	r3, #4
 800083e:	d005      	beq.n	800084c <__aeabi_dadd+0x10c>
 8000840:	1d2b      	adds	r3, r5, #4
 8000842:	42ab      	cmp	r3, r5
 8000844:	41ad      	sbcs	r5, r5
 8000846:	426d      	negs	r5, r5
 8000848:	44a8      	add	r8, r5
 800084a:	001d      	movs	r5, r3
 800084c:	4643      	mov	r3, r8
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	d400      	bmi.n	8000854 <__aeabi_dadd+0x114>
 8000852:	e094      	b.n	800097e <__aeabi_dadd+0x23e>
 8000854:	4b97      	ldr	r3, [pc, #604]	; (8000ab4 <__aeabi_dadd+0x374>)
 8000856:	1c72      	adds	r2, r6, #1
 8000858:	429a      	cmp	r2, r3
 800085a:	d100      	bne.n	800085e <__aeabi_dadd+0x11e>
 800085c:	e09d      	b.n	800099a <__aeabi_dadd+0x25a>
 800085e:	4641      	mov	r1, r8
 8000860:	4b95      	ldr	r3, [pc, #596]	; (8000ab8 <__aeabi_dadd+0x378>)
 8000862:	08ed      	lsrs	r5, r5, #3
 8000864:	4019      	ands	r1, r3
 8000866:	000b      	movs	r3, r1
 8000868:	0552      	lsls	r2, r2, #21
 800086a:	0749      	lsls	r1, r1, #29
 800086c:	025b      	lsls	r3, r3, #9
 800086e:	4329      	orrs	r1, r5
 8000870:	0b1b      	lsrs	r3, r3, #12
 8000872:	0d52      	lsrs	r2, r2, #21
 8000874:	0512      	lsls	r2, r2, #20
 8000876:	4313      	orrs	r3, r2
 8000878:	07e4      	lsls	r4, r4, #31
 800087a:	4323      	orrs	r3, r4
 800087c:	0008      	movs	r0, r1
 800087e:	0019      	movs	r1, r3
 8000880:	bce0      	pop	{r5, r6, r7}
 8000882:	46ba      	mov	sl, r7
 8000884:	46b1      	mov	r9, r6
 8000886:	46a8      	mov	r8, r5
 8000888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088a:	2a00      	cmp	r2, #0
 800088c:	d043      	beq.n	8000916 <__aeabi_dadd+0x1d6>
 800088e:	1b8a      	subs	r2, r1, r6
 8000890:	2e00      	cmp	r6, #0
 8000892:	d000      	beq.n	8000896 <__aeabi_dadd+0x156>
 8000894:	e12a      	b.n	8000aec <__aeabi_dadd+0x3ac>
 8000896:	464c      	mov	r4, r9
 8000898:	431c      	orrs	r4, r3
 800089a:	d100      	bne.n	800089e <__aeabi_dadd+0x15e>
 800089c:	e1d1      	b.n	8000c42 <__aeabi_dadd+0x502>
 800089e:	1e54      	subs	r4, r2, #1
 80008a0:	2a01      	cmp	r2, #1
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x166>
 80008a4:	e21f      	b.n	8000ce6 <__aeabi_dadd+0x5a6>
 80008a6:	4d83      	ldr	r5, [pc, #524]	; (8000ab4 <__aeabi_dadd+0x374>)
 80008a8:	42aa      	cmp	r2, r5
 80008aa:	d100      	bne.n	80008ae <__aeabi_dadd+0x16e>
 80008ac:	e272      	b.n	8000d94 <__aeabi_dadd+0x654>
 80008ae:	0022      	movs	r2, r4
 80008b0:	e123      	b.n	8000afa <__aeabi_dadd+0x3ba>
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	dc00      	bgt.n	80008b8 <__aeabi_dadd+0x178>
 80008b6:	e098      	b.n	80009ea <__aeabi_dadd+0x2aa>
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d042      	beq.n	8000942 <__aeabi_dadd+0x202>
 80008bc:	497d      	ldr	r1, [pc, #500]	; (8000ab4 <__aeabi_dadd+0x374>)
 80008be:	428e      	cmp	r6, r1
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dadd+0x184>
 80008c2:	e0da      	b.n	8000a7a <__aeabi_dadd+0x33a>
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0028      	movs	r0, r5
 80008c8:	0409      	lsls	r1, r1, #16
 80008ca:	4308      	orrs	r0, r1
 80008cc:	4684      	mov	ip, r0
 80008ce:	2a38      	cmp	r2, #56	; 0x38
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dadd+0x194>
 80008d2:	e129      	b.n	8000b28 <__aeabi_dadd+0x3e8>
 80008d4:	2a1f      	cmp	r2, #31
 80008d6:	dc00      	bgt.n	80008da <__aeabi_dadd+0x19a>
 80008d8:	e187      	b.n	8000bea <__aeabi_dadd+0x4aa>
 80008da:	0011      	movs	r1, r2
 80008dc:	4665      	mov	r5, ip
 80008de:	3920      	subs	r1, #32
 80008e0:	40cd      	lsrs	r5, r1
 80008e2:	2a20      	cmp	r2, #32
 80008e4:	d004      	beq.n	80008f0 <__aeabi_dadd+0x1b0>
 80008e6:	2040      	movs	r0, #64	; 0x40
 80008e8:	4661      	mov	r1, ip
 80008ea:	1a82      	subs	r2, r0, r2
 80008ec:	4091      	lsls	r1, r2
 80008ee:	430f      	orrs	r7, r1
 80008f0:	0039      	movs	r1, r7
 80008f2:	1e4f      	subs	r7, r1, #1
 80008f4:	41b9      	sbcs	r1, r7
 80008f6:	430d      	orrs	r5, r1
 80008f8:	e11b      	b.n	8000b32 <__aeabi_dadd+0x3f2>
 80008fa:	0029      	movs	r1, r5
 80008fc:	4339      	orrs	r1, r7
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x1c2>
 8000900:	e0b5      	b.n	8000a6e <__aeabi_dadd+0x32e>
 8000902:	1e51      	subs	r1, r2, #1
 8000904:	2a01      	cmp	r2, #1
 8000906:	d100      	bne.n	800090a <__aeabi_dadd+0x1ca>
 8000908:	e1ab      	b.n	8000c62 <__aeabi_dadd+0x522>
 800090a:	486a      	ldr	r0, [pc, #424]	; (8000ab4 <__aeabi_dadd+0x374>)
 800090c:	4282      	cmp	r2, r0
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x1d2>
 8000910:	e1b2      	b.n	8000c78 <__aeabi_dadd+0x538>
 8000912:	000a      	movs	r2, r1
 8000914:	e743      	b.n	800079e <__aeabi_dadd+0x5e>
 8000916:	4969      	ldr	r1, [pc, #420]	; (8000abc <__aeabi_dadd+0x37c>)
 8000918:	1c75      	adds	r5, r6, #1
 800091a:	420d      	tst	r5, r1
 800091c:	d000      	beq.n	8000920 <__aeabi_dadd+0x1e0>
 800091e:	e0cf      	b.n	8000ac0 <__aeabi_dadd+0x380>
 8000920:	2e00      	cmp	r6, #0
 8000922:	d000      	beq.n	8000926 <__aeabi_dadd+0x1e6>
 8000924:	e193      	b.n	8000c4e <__aeabi_dadd+0x50e>
 8000926:	4649      	mov	r1, r9
 8000928:	4319      	orrs	r1, r3
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x1ee>
 800092c:	e1d1      	b.n	8000cd2 <__aeabi_dadd+0x592>
 800092e:	4661      	mov	r1, ip
 8000930:	4339      	orrs	r1, r7
 8000932:	d000      	beq.n	8000936 <__aeabi_dadd+0x1f6>
 8000934:	e1e3      	b.n	8000cfe <__aeabi_dadd+0x5be>
 8000936:	4649      	mov	r1, r9
 8000938:	0758      	lsls	r0, r3, #29
 800093a:	08c9      	lsrs	r1, r1, #3
 800093c:	4301      	orrs	r1, r0
 800093e:	08db      	lsrs	r3, r3, #3
 8000940:	e026      	b.n	8000990 <__aeabi_dadd+0x250>
 8000942:	0029      	movs	r1, r5
 8000944:	4339      	orrs	r1, r7
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x20a>
 8000948:	e091      	b.n	8000a6e <__aeabi_dadd+0x32e>
 800094a:	1e51      	subs	r1, r2, #1
 800094c:	2a01      	cmp	r2, #1
 800094e:	d005      	beq.n	800095c <__aeabi_dadd+0x21c>
 8000950:	4858      	ldr	r0, [pc, #352]	; (8000ab4 <__aeabi_dadd+0x374>)
 8000952:	4282      	cmp	r2, r0
 8000954:	d100      	bne.n	8000958 <__aeabi_dadd+0x218>
 8000956:	e18f      	b.n	8000c78 <__aeabi_dadd+0x538>
 8000958:	000a      	movs	r2, r1
 800095a:	e7b8      	b.n	80008ce <__aeabi_dadd+0x18e>
 800095c:	003d      	movs	r5, r7
 800095e:	444d      	add	r5, r9
 8000960:	454d      	cmp	r5, r9
 8000962:	4189      	sbcs	r1, r1
 8000964:	4463      	add	r3, ip
 8000966:	4698      	mov	r8, r3
 8000968:	4249      	negs	r1, r1
 800096a:	4488      	add	r8, r1
 800096c:	4643      	mov	r3, r8
 800096e:	2602      	movs	r6, #2
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	d500      	bpl.n	8000976 <__aeabi_dadd+0x236>
 8000974:	e0eb      	b.n	8000b4e <__aeabi_dadd+0x40e>
 8000976:	3e01      	subs	r6, #1
 8000978:	076b      	lsls	r3, r5, #29
 800097a:	d000      	beq.n	800097e <__aeabi_dadd+0x23e>
 800097c:	e75c      	b.n	8000838 <__aeabi_dadd+0xf8>
 800097e:	4643      	mov	r3, r8
 8000980:	08e9      	lsrs	r1, r5, #3
 8000982:	075a      	lsls	r2, r3, #29
 8000984:	4311      	orrs	r1, r2
 8000986:	0032      	movs	r2, r6
 8000988:	08db      	lsrs	r3, r3, #3
 800098a:	484a      	ldr	r0, [pc, #296]	; (8000ab4 <__aeabi_dadd+0x374>)
 800098c:	4282      	cmp	r2, r0
 800098e:	d021      	beq.n	80009d4 <__aeabi_dadd+0x294>
 8000990:	031b      	lsls	r3, r3, #12
 8000992:	0552      	lsls	r2, r2, #21
 8000994:	0b1b      	lsrs	r3, r3, #12
 8000996:	0d52      	lsrs	r2, r2, #21
 8000998:	e76c      	b.n	8000874 <__aeabi_dadd+0x134>
 800099a:	2300      	movs	r3, #0
 800099c:	2100      	movs	r1, #0
 800099e:	e769      	b.n	8000874 <__aeabi_dadd+0x134>
 80009a0:	002a      	movs	r2, r5
 80009a2:	433a      	orrs	r2, r7
 80009a4:	d069      	beq.n	8000a7a <__aeabi_dadd+0x33a>
 80009a6:	464a      	mov	r2, r9
 80009a8:	0758      	lsls	r0, r3, #29
 80009aa:	08d1      	lsrs	r1, r2, #3
 80009ac:	08da      	lsrs	r2, r3, #3
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	031b      	lsls	r3, r3, #12
 80009b2:	4308      	orrs	r0, r1
 80009b4:	421a      	tst	r2, r3
 80009b6:	d007      	beq.n	80009c8 <__aeabi_dadd+0x288>
 80009b8:	0029      	movs	r1, r5
 80009ba:	08ed      	lsrs	r5, r5, #3
 80009bc:	421d      	tst	r5, r3
 80009be:	d103      	bne.n	80009c8 <__aeabi_dadd+0x288>
 80009c0:	002a      	movs	r2, r5
 80009c2:	08ff      	lsrs	r7, r7, #3
 80009c4:	0748      	lsls	r0, r1, #29
 80009c6:	4338      	orrs	r0, r7
 80009c8:	0f43      	lsrs	r3, r0, #29
 80009ca:	00c1      	lsls	r1, r0, #3
 80009cc:	075b      	lsls	r3, r3, #29
 80009ce:	08c9      	lsrs	r1, r1, #3
 80009d0:	4319      	orrs	r1, r3
 80009d2:	0013      	movs	r3, r2
 80009d4:	000a      	movs	r2, r1
 80009d6:	431a      	orrs	r2, r3
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x29c>
 80009da:	e213      	b.n	8000e04 <__aeabi_dadd+0x6c4>
 80009dc:	2280      	movs	r2, #128	; 0x80
 80009de:	0312      	lsls	r2, r2, #12
 80009e0:	4313      	orrs	r3, r2
 80009e2:	031b      	lsls	r3, r3, #12
 80009e4:	4a33      	ldr	r2, [pc, #204]	; (8000ab4 <__aeabi_dadd+0x374>)
 80009e6:	0b1b      	lsrs	r3, r3, #12
 80009e8:	e744      	b.n	8000874 <__aeabi_dadd+0x134>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d04b      	beq.n	8000a86 <__aeabi_dadd+0x346>
 80009ee:	1b8a      	subs	r2, r1, r6
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x2b6>
 80009f4:	e0e7      	b.n	8000bc6 <__aeabi_dadd+0x486>
 80009f6:	482f      	ldr	r0, [pc, #188]	; (8000ab4 <__aeabi_dadd+0x374>)
 80009f8:	4281      	cmp	r1, r0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x2be>
 80009fc:	e195      	b.n	8000d2a <__aeabi_dadd+0x5ea>
 80009fe:	2080      	movs	r0, #128	; 0x80
 8000a00:	0400      	lsls	r0, r0, #16
 8000a02:	4303      	orrs	r3, r0
 8000a04:	2a38      	cmp	r2, #56	; 0x38
 8000a06:	dd00      	ble.n	8000a0a <__aeabi_dadd+0x2ca>
 8000a08:	e143      	b.n	8000c92 <__aeabi_dadd+0x552>
 8000a0a:	2a1f      	cmp	r2, #31
 8000a0c:	dd00      	ble.n	8000a10 <__aeabi_dadd+0x2d0>
 8000a0e:	e1db      	b.n	8000dc8 <__aeabi_dadd+0x688>
 8000a10:	2020      	movs	r0, #32
 8000a12:	001d      	movs	r5, r3
 8000a14:	464e      	mov	r6, r9
 8000a16:	1a80      	subs	r0, r0, r2
 8000a18:	4085      	lsls	r5, r0
 8000a1a:	40d6      	lsrs	r6, r2
 8000a1c:	4335      	orrs	r5, r6
 8000a1e:	464e      	mov	r6, r9
 8000a20:	4086      	lsls	r6, r0
 8000a22:	0030      	movs	r0, r6
 8000a24:	40d3      	lsrs	r3, r2
 8000a26:	1e46      	subs	r6, r0, #1
 8000a28:	41b0      	sbcs	r0, r6
 8000a2a:	449c      	add	ip, r3
 8000a2c:	4305      	orrs	r5, r0
 8000a2e:	19ed      	adds	r5, r5, r7
 8000a30:	42bd      	cmp	r5, r7
 8000a32:	419b      	sbcs	r3, r3
 8000a34:	425b      	negs	r3, r3
 8000a36:	4463      	add	r3, ip
 8000a38:	4698      	mov	r8, r3
 8000a3a:	000e      	movs	r6, r1
 8000a3c:	e07f      	b.n	8000b3e <__aeabi_dadd+0x3fe>
 8000a3e:	4a1e      	ldr	r2, [pc, #120]	; (8000ab8 <__aeabi_dadd+0x378>)
 8000a40:	1a76      	subs	r6, r6, r1
 8000a42:	4013      	ands	r3, r2
 8000a44:	4698      	mov	r8, r3
 8000a46:	e6f5      	b.n	8000834 <__aeabi_dadd+0xf4>
 8000a48:	0028      	movs	r0, r5
 8000a4a:	f001 fbbf 	bl	80021cc <__clzsi2>
 8000a4e:	0001      	movs	r1, r0
 8000a50:	3118      	adds	r1, #24
 8000a52:	291f      	cmp	r1, #31
 8000a54:	dc00      	bgt.n	8000a58 <__aeabi_dadd+0x318>
 8000a56:	e6cf      	b.n	80007f8 <__aeabi_dadd+0xb8>
 8000a58:	002b      	movs	r3, r5
 8000a5a:	3808      	subs	r0, #8
 8000a5c:	4083      	lsls	r3, r0
 8000a5e:	2500      	movs	r5, #0
 8000a60:	e6d2      	b.n	8000808 <__aeabi_dadd+0xc8>
 8000a62:	4662      	mov	r2, ip
 8000a64:	433a      	orrs	r2, r7
 8000a66:	0011      	movs	r1, r2
 8000a68:	1e4f      	subs	r7, r1, #1
 8000a6a:	41b9      	sbcs	r1, r7
 8000a6c:	e6ac      	b.n	80007c8 <__aeabi_dadd+0x88>
 8000a6e:	4649      	mov	r1, r9
 8000a70:	0758      	lsls	r0, r3, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	4301      	orrs	r1, r0
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	e787      	b.n	800098a <__aeabi_dadd+0x24a>
 8000a7a:	4649      	mov	r1, r9
 8000a7c:	075a      	lsls	r2, r3, #29
 8000a7e:	08c9      	lsrs	r1, r1, #3
 8000a80:	4311      	orrs	r1, r2
 8000a82:	08db      	lsrs	r3, r3, #3
 8000a84:	e7a6      	b.n	80009d4 <__aeabi_dadd+0x294>
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <__aeabi_dadd+0x37c>)
 8000a88:	1c70      	adds	r0, r6, #1
 8000a8a:	4208      	tst	r0, r1
 8000a8c:	d000      	beq.n	8000a90 <__aeabi_dadd+0x350>
 8000a8e:	e0bb      	b.n	8000c08 <__aeabi_dadd+0x4c8>
 8000a90:	2e00      	cmp	r6, #0
 8000a92:	d000      	beq.n	8000a96 <__aeabi_dadd+0x356>
 8000a94:	e114      	b.n	8000cc0 <__aeabi_dadd+0x580>
 8000a96:	4649      	mov	r1, r9
 8000a98:	4319      	orrs	r1, r3
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dadd+0x35e>
 8000a9c:	e175      	b.n	8000d8a <__aeabi_dadd+0x64a>
 8000a9e:	0029      	movs	r1, r5
 8000aa0:	4339      	orrs	r1, r7
 8000aa2:	d000      	beq.n	8000aa6 <__aeabi_dadd+0x366>
 8000aa4:	e17e      	b.n	8000da4 <__aeabi_dadd+0x664>
 8000aa6:	4649      	mov	r1, r9
 8000aa8:	0758      	lsls	r0, r3, #29
 8000aaa:	08c9      	lsrs	r1, r1, #3
 8000aac:	4301      	orrs	r1, r0
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	e76e      	b.n	8000990 <__aeabi_dadd+0x250>
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	000007ff 	.word	0x000007ff
 8000ab8:	ff7fffff 	.word	0xff7fffff
 8000abc:	000007fe 	.word	0x000007fe
 8000ac0:	4649      	mov	r1, r9
 8000ac2:	1bcd      	subs	r5, r1, r7
 8000ac4:	4661      	mov	r1, ip
 8000ac6:	1a58      	subs	r0, r3, r1
 8000ac8:	45a9      	cmp	r9, r5
 8000aca:	4189      	sbcs	r1, r1
 8000acc:	4249      	negs	r1, r1
 8000ace:	4688      	mov	r8, r1
 8000ad0:	0001      	movs	r1, r0
 8000ad2:	4640      	mov	r0, r8
 8000ad4:	1a09      	subs	r1, r1, r0
 8000ad6:	4688      	mov	r8, r1
 8000ad8:	0209      	lsls	r1, r1, #8
 8000ada:	d500      	bpl.n	8000ade <__aeabi_dadd+0x39e>
 8000adc:	e0a6      	b.n	8000c2c <__aeabi_dadd+0x4ec>
 8000ade:	4641      	mov	r1, r8
 8000ae0:	4329      	orrs	r1, r5
 8000ae2:	d000      	beq.n	8000ae6 <__aeabi_dadd+0x3a6>
 8000ae4:	e67f      	b.n	80007e6 <__aeabi_dadd+0xa6>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	2400      	movs	r4, #0
 8000aea:	e751      	b.n	8000990 <__aeabi_dadd+0x250>
 8000aec:	4cc7      	ldr	r4, [pc, #796]	; (8000e0c <__aeabi_dadd+0x6cc>)
 8000aee:	42a1      	cmp	r1, r4
 8000af0:	d100      	bne.n	8000af4 <__aeabi_dadd+0x3b4>
 8000af2:	e0c7      	b.n	8000c84 <__aeabi_dadd+0x544>
 8000af4:	2480      	movs	r4, #128	; 0x80
 8000af6:	0424      	lsls	r4, r4, #16
 8000af8:	4323      	orrs	r3, r4
 8000afa:	2a38      	cmp	r2, #56	; 0x38
 8000afc:	dc54      	bgt.n	8000ba8 <__aeabi_dadd+0x468>
 8000afe:	2a1f      	cmp	r2, #31
 8000b00:	dd00      	ble.n	8000b04 <__aeabi_dadd+0x3c4>
 8000b02:	e0cc      	b.n	8000c9e <__aeabi_dadd+0x55e>
 8000b04:	2420      	movs	r4, #32
 8000b06:	4648      	mov	r0, r9
 8000b08:	1aa4      	subs	r4, r4, r2
 8000b0a:	001d      	movs	r5, r3
 8000b0c:	464e      	mov	r6, r9
 8000b0e:	40a0      	lsls	r0, r4
 8000b10:	40d6      	lsrs	r6, r2
 8000b12:	40a5      	lsls	r5, r4
 8000b14:	0004      	movs	r4, r0
 8000b16:	40d3      	lsrs	r3, r2
 8000b18:	4662      	mov	r2, ip
 8000b1a:	4335      	orrs	r5, r6
 8000b1c:	1e66      	subs	r6, r4, #1
 8000b1e:	41b4      	sbcs	r4, r6
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	469c      	mov	ip, r3
 8000b24:	4325      	orrs	r5, r4
 8000b26:	e044      	b.n	8000bb2 <__aeabi_dadd+0x472>
 8000b28:	4662      	mov	r2, ip
 8000b2a:	433a      	orrs	r2, r7
 8000b2c:	0015      	movs	r5, r2
 8000b2e:	1e6f      	subs	r7, r5, #1
 8000b30:	41bd      	sbcs	r5, r7
 8000b32:	444d      	add	r5, r9
 8000b34:	454d      	cmp	r5, r9
 8000b36:	4189      	sbcs	r1, r1
 8000b38:	4249      	negs	r1, r1
 8000b3a:	4688      	mov	r8, r1
 8000b3c:	4498      	add	r8, r3
 8000b3e:	4643      	mov	r3, r8
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	d400      	bmi.n	8000b46 <__aeabi_dadd+0x406>
 8000b44:	e718      	b.n	8000978 <__aeabi_dadd+0x238>
 8000b46:	4bb1      	ldr	r3, [pc, #708]	; (8000e0c <__aeabi_dadd+0x6cc>)
 8000b48:	3601      	adds	r6, #1
 8000b4a:	429e      	cmp	r6, r3
 8000b4c:	d049      	beq.n	8000be2 <__aeabi_dadd+0x4a2>
 8000b4e:	4642      	mov	r2, r8
 8000b50:	4baf      	ldr	r3, [pc, #700]	; (8000e10 <__aeabi_dadd+0x6d0>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	401a      	ands	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	086a      	lsrs	r2, r5, #1
 8000b5a:	400d      	ands	r5, r1
 8000b5c:	4315      	orrs	r5, r2
 8000b5e:	07d9      	lsls	r1, r3, #31
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	4698      	mov	r8, r3
 8000b64:	430d      	orrs	r5, r1
 8000b66:	e665      	b.n	8000834 <__aeabi_dadd+0xf4>
 8000b68:	0018      	movs	r0, r3
 8000b6a:	3e1f      	subs	r6, #31
 8000b6c:	40f0      	lsrs	r0, r6
 8000b6e:	2a20      	cmp	r2, #32
 8000b70:	d003      	beq.n	8000b7a <__aeabi_dadd+0x43a>
 8000b72:	2140      	movs	r1, #64	; 0x40
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	4093      	lsls	r3, r2
 8000b78:	431d      	orrs	r5, r3
 8000b7a:	1e69      	subs	r1, r5, #1
 8000b7c:	418d      	sbcs	r5, r1
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2600      	movs	r6, #0
 8000b82:	4698      	mov	r8, r3
 8000b84:	4305      	orrs	r5, r0
 8000b86:	e6f7      	b.n	8000978 <__aeabi_dadd+0x238>
 8000b88:	0011      	movs	r1, r2
 8000b8a:	4665      	mov	r5, ip
 8000b8c:	3920      	subs	r1, #32
 8000b8e:	40cd      	lsrs	r5, r1
 8000b90:	2a20      	cmp	r2, #32
 8000b92:	d004      	beq.n	8000b9e <__aeabi_dadd+0x45e>
 8000b94:	2040      	movs	r0, #64	; 0x40
 8000b96:	4661      	mov	r1, ip
 8000b98:	1a82      	subs	r2, r0, r2
 8000b9a:	4091      	lsls	r1, r2
 8000b9c:	430f      	orrs	r7, r1
 8000b9e:	0039      	movs	r1, r7
 8000ba0:	1e4f      	subs	r7, r1, #1
 8000ba2:	41b9      	sbcs	r1, r7
 8000ba4:	4329      	orrs	r1, r5
 8000ba6:	e60f      	b.n	80007c8 <__aeabi_dadd+0x88>
 8000ba8:	464a      	mov	r2, r9
 8000baa:	4313      	orrs	r3, r2
 8000bac:	001d      	movs	r5, r3
 8000bae:	1e6b      	subs	r3, r5, #1
 8000bb0:	419d      	sbcs	r5, r3
 8000bb2:	1b7d      	subs	r5, r7, r5
 8000bb4:	42af      	cmp	r7, r5
 8000bb6:	419b      	sbcs	r3, r3
 8000bb8:	4662      	mov	r2, ip
 8000bba:	425b      	negs	r3, r3
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	4698      	mov	r8, r3
 8000bc0:	4654      	mov	r4, sl
 8000bc2:	000e      	movs	r6, r1
 8000bc4:	e607      	b.n	80007d6 <__aeabi_dadd+0x96>
 8000bc6:	4648      	mov	r0, r9
 8000bc8:	4318      	orrs	r0, r3
 8000bca:	d100      	bne.n	8000bce <__aeabi_dadd+0x48e>
 8000bcc:	e0b3      	b.n	8000d36 <__aeabi_dadd+0x5f6>
 8000bce:	1e50      	subs	r0, r2, #1
 8000bd0:	2a01      	cmp	r2, #1
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0x496>
 8000bd4:	e10d      	b.n	8000df2 <__aeabi_dadd+0x6b2>
 8000bd6:	4d8d      	ldr	r5, [pc, #564]	; (8000e0c <__aeabi_dadd+0x6cc>)
 8000bd8:	42aa      	cmp	r2, r5
 8000bda:	d100      	bne.n	8000bde <__aeabi_dadd+0x49e>
 8000bdc:	e0a5      	b.n	8000d2a <__aeabi_dadd+0x5ea>
 8000bde:	0002      	movs	r2, r0
 8000be0:	e710      	b.n	8000a04 <__aeabi_dadd+0x2c4>
 8000be2:	0032      	movs	r2, r6
 8000be4:	2300      	movs	r3, #0
 8000be6:	2100      	movs	r1, #0
 8000be8:	e644      	b.n	8000874 <__aeabi_dadd+0x134>
 8000bea:	2120      	movs	r1, #32
 8000bec:	0038      	movs	r0, r7
 8000bee:	1a89      	subs	r1, r1, r2
 8000bf0:	4665      	mov	r5, ip
 8000bf2:	408f      	lsls	r7, r1
 8000bf4:	408d      	lsls	r5, r1
 8000bf6:	40d0      	lsrs	r0, r2
 8000bf8:	1e79      	subs	r1, r7, #1
 8000bfa:	418f      	sbcs	r7, r1
 8000bfc:	4305      	orrs	r5, r0
 8000bfe:	433d      	orrs	r5, r7
 8000c00:	4667      	mov	r7, ip
 8000c02:	40d7      	lsrs	r7, r2
 8000c04:	19db      	adds	r3, r3, r7
 8000c06:	e794      	b.n	8000b32 <__aeabi_dadd+0x3f2>
 8000c08:	4a80      	ldr	r2, [pc, #512]	; (8000e0c <__aeabi_dadd+0x6cc>)
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_dadd+0x4d0>
 8000c0e:	e0ec      	b.n	8000dea <__aeabi_dadd+0x6aa>
 8000c10:	0039      	movs	r1, r7
 8000c12:	4449      	add	r1, r9
 8000c14:	4549      	cmp	r1, r9
 8000c16:	4192      	sbcs	r2, r2
 8000c18:	4463      	add	r3, ip
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	189b      	adds	r3, r3, r2
 8000c1e:	07dd      	lsls	r5, r3, #31
 8000c20:	0849      	lsrs	r1, r1, #1
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	4698      	mov	r8, r3
 8000c26:	0006      	movs	r6, r0
 8000c28:	430d      	orrs	r5, r1
 8000c2a:	e6a5      	b.n	8000978 <__aeabi_dadd+0x238>
 8000c2c:	464a      	mov	r2, r9
 8000c2e:	1abd      	subs	r5, r7, r2
 8000c30:	42af      	cmp	r7, r5
 8000c32:	4189      	sbcs	r1, r1
 8000c34:	4662      	mov	r2, ip
 8000c36:	4249      	negs	r1, r1
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	1a5b      	subs	r3, r3, r1
 8000c3c:	4698      	mov	r8, r3
 8000c3e:	4654      	mov	r4, sl
 8000c40:	e5d1      	b.n	80007e6 <__aeabi_dadd+0xa6>
 8000c42:	076c      	lsls	r4, r5, #29
 8000c44:	08f9      	lsrs	r1, r7, #3
 8000c46:	4321      	orrs	r1, r4
 8000c48:	08eb      	lsrs	r3, r5, #3
 8000c4a:	0004      	movs	r4, r0
 8000c4c:	e69d      	b.n	800098a <__aeabi_dadd+0x24a>
 8000c4e:	464a      	mov	r2, r9
 8000c50:	431a      	orrs	r2, r3
 8000c52:	d175      	bne.n	8000d40 <__aeabi_dadd+0x600>
 8000c54:	4661      	mov	r1, ip
 8000c56:	4339      	orrs	r1, r7
 8000c58:	d114      	bne.n	8000c84 <__aeabi_dadd+0x544>
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	2400      	movs	r4, #0
 8000c5e:	031b      	lsls	r3, r3, #12
 8000c60:	e6bc      	b.n	80009dc <__aeabi_dadd+0x29c>
 8000c62:	464a      	mov	r2, r9
 8000c64:	1bd5      	subs	r5, r2, r7
 8000c66:	45a9      	cmp	r9, r5
 8000c68:	4189      	sbcs	r1, r1
 8000c6a:	4662      	mov	r2, ip
 8000c6c:	4249      	negs	r1, r1
 8000c6e:	1a9b      	subs	r3, r3, r2
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	4698      	mov	r8, r3
 8000c74:	2601      	movs	r6, #1
 8000c76:	e5ae      	b.n	80007d6 <__aeabi_dadd+0x96>
 8000c78:	464a      	mov	r2, r9
 8000c7a:	08d1      	lsrs	r1, r2, #3
 8000c7c:	075a      	lsls	r2, r3, #29
 8000c7e:	4311      	orrs	r1, r2
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	e6a7      	b.n	80009d4 <__aeabi_dadd+0x294>
 8000c84:	4663      	mov	r3, ip
 8000c86:	08f9      	lsrs	r1, r7, #3
 8000c88:	075a      	lsls	r2, r3, #29
 8000c8a:	4654      	mov	r4, sl
 8000c8c:	4311      	orrs	r1, r2
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	e6a0      	b.n	80009d4 <__aeabi_dadd+0x294>
 8000c92:	464a      	mov	r2, r9
 8000c94:	4313      	orrs	r3, r2
 8000c96:	001d      	movs	r5, r3
 8000c98:	1e6b      	subs	r3, r5, #1
 8000c9a:	419d      	sbcs	r5, r3
 8000c9c:	e6c7      	b.n	8000a2e <__aeabi_dadd+0x2ee>
 8000c9e:	0014      	movs	r4, r2
 8000ca0:	001e      	movs	r6, r3
 8000ca2:	3c20      	subs	r4, #32
 8000ca4:	40e6      	lsrs	r6, r4
 8000ca6:	2a20      	cmp	r2, #32
 8000ca8:	d005      	beq.n	8000cb6 <__aeabi_dadd+0x576>
 8000caa:	2440      	movs	r4, #64	; 0x40
 8000cac:	1aa2      	subs	r2, r4, r2
 8000cae:	4093      	lsls	r3, r2
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	4691      	mov	r9, r2
 8000cb6:	464d      	mov	r5, r9
 8000cb8:	1e6b      	subs	r3, r5, #1
 8000cba:	419d      	sbcs	r5, r3
 8000cbc:	4335      	orrs	r5, r6
 8000cbe:	e778      	b.n	8000bb2 <__aeabi_dadd+0x472>
 8000cc0:	464a      	mov	r2, r9
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_dadd+0x588>
 8000cc6:	e66b      	b.n	80009a0 <__aeabi_dadd+0x260>
 8000cc8:	076b      	lsls	r3, r5, #29
 8000cca:	08f9      	lsrs	r1, r7, #3
 8000ccc:	4319      	orrs	r1, r3
 8000cce:	08eb      	lsrs	r3, r5, #3
 8000cd0:	e680      	b.n	80009d4 <__aeabi_dadd+0x294>
 8000cd2:	4661      	mov	r1, ip
 8000cd4:	4339      	orrs	r1, r7
 8000cd6:	d054      	beq.n	8000d82 <__aeabi_dadd+0x642>
 8000cd8:	4663      	mov	r3, ip
 8000cda:	08f9      	lsrs	r1, r7, #3
 8000cdc:	075c      	lsls	r4, r3, #29
 8000cde:	4321      	orrs	r1, r4
 8000ce0:	08db      	lsrs	r3, r3, #3
 8000ce2:	0004      	movs	r4, r0
 8000ce4:	e654      	b.n	8000990 <__aeabi_dadd+0x250>
 8000ce6:	464a      	mov	r2, r9
 8000ce8:	1abd      	subs	r5, r7, r2
 8000cea:	42af      	cmp	r7, r5
 8000cec:	4189      	sbcs	r1, r1
 8000cee:	4662      	mov	r2, ip
 8000cf0:	4249      	negs	r1, r1
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	1a5b      	subs	r3, r3, r1
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	0004      	movs	r4, r0
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	e56b      	b.n	80007d6 <__aeabi_dadd+0x96>
 8000cfe:	464a      	mov	r2, r9
 8000d00:	1bd5      	subs	r5, r2, r7
 8000d02:	45a9      	cmp	r9, r5
 8000d04:	4189      	sbcs	r1, r1
 8000d06:	4662      	mov	r2, ip
 8000d08:	4249      	negs	r1, r1
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	1a52      	subs	r2, r2, r1
 8000d0e:	4690      	mov	r8, r2
 8000d10:	0212      	lsls	r2, r2, #8
 8000d12:	d532      	bpl.n	8000d7a <__aeabi_dadd+0x63a>
 8000d14:	464a      	mov	r2, r9
 8000d16:	1abd      	subs	r5, r7, r2
 8000d18:	42af      	cmp	r7, r5
 8000d1a:	4189      	sbcs	r1, r1
 8000d1c:	4662      	mov	r2, ip
 8000d1e:	4249      	negs	r1, r1
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	1a5b      	subs	r3, r3, r1
 8000d24:	4698      	mov	r8, r3
 8000d26:	0004      	movs	r4, r0
 8000d28:	e584      	b.n	8000834 <__aeabi_dadd+0xf4>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	08f9      	lsrs	r1, r7, #3
 8000d2e:	075a      	lsls	r2, r3, #29
 8000d30:	4311      	orrs	r1, r2
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	e64e      	b.n	80009d4 <__aeabi_dadd+0x294>
 8000d36:	08f9      	lsrs	r1, r7, #3
 8000d38:	0768      	lsls	r0, r5, #29
 8000d3a:	4301      	orrs	r1, r0
 8000d3c:	08eb      	lsrs	r3, r5, #3
 8000d3e:	e624      	b.n	800098a <__aeabi_dadd+0x24a>
 8000d40:	4662      	mov	r2, ip
 8000d42:	433a      	orrs	r2, r7
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x608>
 8000d46:	e698      	b.n	8000a7a <__aeabi_dadd+0x33a>
 8000d48:	464a      	mov	r2, r9
 8000d4a:	08d1      	lsrs	r1, r2, #3
 8000d4c:	075a      	lsls	r2, r3, #29
 8000d4e:	4311      	orrs	r1, r2
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	031b      	lsls	r3, r3, #12
 8000d56:	421a      	tst	r2, r3
 8000d58:	d008      	beq.n	8000d6c <__aeabi_dadd+0x62c>
 8000d5a:	4660      	mov	r0, ip
 8000d5c:	08c5      	lsrs	r5, r0, #3
 8000d5e:	421d      	tst	r5, r3
 8000d60:	d104      	bne.n	8000d6c <__aeabi_dadd+0x62c>
 8000d62:	4654      	mov	r4, sl
 8000d64:	002a      	movs	r2, r5
 8000d66:	08f9      	lsrs	r1, r7, #3
 8000d68:	0743      	lsls	r3, r0, #29
 8000d6a:	4319      	orrs	r1, r3
 8000d6c:	0f4b      	lsrs	r3, r1, #29
 8000d6e:	00c9      	lsls	r1, r1, #3
 8000d70:	075b      	lsls	r3, r3, #29
 8000d72:	08c9      	lsrs	r1, r1, #3
 8000d74:	4319      	orrs	r1, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	e62c      	b.n	80009d4 <__aeabi_dadd+0x294>
 8000d7a:	4641      	mov	r1, r8
 8000d7c:	4329      	orrs	r1, r5
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_dadd+0x642>
 8000d80:	e5fa      	b.n	8000978 <__aeabi_dadd+0x238>
 8000d82:	2300      	movs	r3, #0
 8000d84:	000a      	movs	r2, r1
 8000d86:	2400      	movs	r4, #0
 8000d88:	e602      	b.n	8000990 <__aeabi_dadd+0x250>
 8000d8a:	076b      	lsls	r3, r5, #29
 8000d8c:	08f9      	lsrs	r1, r7, #3
 8000d8e:	4319      	orrs	r1, r3
 8000d90:	08eb      	lsrs	r3, r5, #3
 8000d92:	e5fd      	b.n	8000990 <__aeabi_dadd+0x250>
 8000d94:	4663      	mov	r3, ip
 8000d96:	08f9      	lsrs	r1, r7, #3
 8000d98:	075b      	lsls	r3, r3, #29
 8000d9a:	4319      	orrs	r1, r3
 8000d9c:	4663      	mov	r3, ip
 8000d9e:	0004      	movs	r4, r0
 8000da0:	08db      	lsrs	r3, r3, #3
 8000da2:	e617      	b.n	80009d4 <__aeabi_dadd+0x294>
 8000da4:	003d      	movs	r5, r7
 8000da6:	444d      	add	r5, r9
 8000da8:	4463      	add	r3, ip
 8000daa:	454d      	cmp	r5, r9
 8000dac:	4189      	sbcs	r1, r1
 8000dae:	4698      	mov	r8, r3
 8000db0:	4249      	negs	r1, r1
 8000db2:	4488      	add	r8, r1
 8000db4:	4643      	mov	r3, r8
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	d400      	bmi.n	8000dbc <__aeabi_dadd+0x67c>
 8000dba:	e5dd      	b.n	8000978 <__aeabi_dadd+0x238>
 8000dbc:	4642      	mov	r2, r8
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <__aeabi_dadd+0x6d0>)
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	4690      	mov	r8, r2
 8000dc6:	e5d7      	b.n	8000978 <__aeabi_dadd+0x238>
 8000dc8:	0010      	movs	r0, r2
 8000dca:	001e      	movs	r6, r3
 8000dcc:	3820      	subs	r0, #32
 8000dce:	40c6      	lsrs	r6, r0
 8000dd0:	2a20      	cmp	r2, #32
 8000dd2:	d005      	beq.n	8000de0 <__aeabi_dadd+0x6a0>
 8000dd4:	2040      	movs	r0, #64	; 0x40
 8000dd6:	1a82      	subs	r2, r0, r2
 8000dd8:	4093      	lsls	r3, r2
 8000dda:	464a      	mov	r2, r9
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	4691      	mov	r9, r2
 8000de0:	464d      	mov	r5, r9
 8000de2:	1e6b      	subs	r3, r5, #1
 8000de4:	419d      	sbcs	r5, r3
 8000de6:	4335      	orrs	r5, r6
 8000de8:	e621      	b.n	8000a2e <__aeabi_dadd+0x2ee>
 8000dea:	0002      	movs	r2, r0
 8000dec:	2300      	movs	r3, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	e540      	b.n	8000874 <__aeabi_dadd+0x134>
 8000df2:	464a      	mov	r2, r9
 8000df4:	19d5      	adds	r5, r2, r7
 8000df6:	42bd      	cmp	r5, r7
 8000df8:	4189      	sbcs	r1, r1
 8000dfa:	4463      	add	r3, ip
 8000dfc:	4698      	mov	r8, r3
 8000dfe:	4249      	negs	r1, r1
 8000e00:	4488      	add	r8, r1
 8000e02:	e5b3      	b.n	800096c <__aeabi_dadd+0x22c>
 8000e04:	2100      	movs	r1, #0
 8000e06:	4a01      	ldr	r2, [pc, #4]	; (8000e0c <__aeabi_dadd+0x6cc>)
 8000e08:	000b      	movs	r3, r1
 8000e0a:	e533      	b.n	8000874 <__aeabi_dadd+0x134>
 8000e0c:	000007ff 	.word	0x000007ff
 8000e10:	ff7fffff 	.word	0xff7fffff

08000e14 <__aeabi_ddiv>:
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	4657      	mov	r7, sl
 8000e18:	464e      	mov	r6, r9
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	46de      	mov	lr, fp
 8000e1e:	b5e0      	push	{r5, r6, r7, lr}
 8000e20:	4681      	mov	r9, r0
 8000e22:	0005      	movs	r5, r0
 8000e24:	030c      	lsls	r4, r1, #12
 8000e26:	0048      	lsls	r0, r1, #1
 8000e28:	4692      	mov	sl, r2
 8000e2a:	001f      	movs	r7, r3
 8000e2c:	b085      	sub	sp, #20
 8000e2e:	0b24      	lsrs	r4, r4, #12
 8000e30:	0d40      	lsrs	r0, r0, #21
 8000e32:	0fce      	lsrs	r6, r1, #31
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d059      	beq.n	8000eec <__aeabi_ddiv+0xd8>
 8000e38:	4b87      	ldr	r3, [pc, #540]	; (8001058 <__aeabi_ddiv+0x244>)
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_ddiv+0x2c>
 8000e3e:	e098      	b.n	8000f72 <__aeabi_ddiv+0x15e>
 8000e40:	0f6b      	lsrs	r3, r5, #29
 8000e42:	00e4      	lsls	r4, r4, #3
 8000e44:	431c      	orrs	r4, r3
 8000e46:	2380      	movs	r3, #128	; 0x80
 8000e48:	041b      	lsls	r3, r3, #16
 8000e4a:	4323      	orrs	r3, r4
 8000e4c:	4698      	mov	r8, r3
 8000e4e:	4b83      	ldr	r3, [pc, #524]	; (800105c <__aeabi_ddiv+0x248>)
 8000e50:	00ed      	lsls	r5, r5, #3
 8000e52:	469b      	mov	fp, r3
 8000e54:	2300      	movs	r3, #0
 8000e56:	4699      	mov	r9, r3
 8000e58:	4483      	add	fp, r0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	033c      	lsls	r4, r7, #12
 8000e5e:	007b      	lsls	r3, r7, #1
 8000e60:	4650      	mov	r0, sl
 8000e62:	0b24      	lsrs	r4, r4, #12
 8000e64:	0d5b      	lsrs	r3, r3, #21
 8000e66:	0fff      	lsrs	r7, r7, #31
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d067      	beq.n	8000f3c <__aeabi_ddiv+0x128>
 8000e6c:	4a7a      	ldr	r2, [pc, #488]	; (8001058 <__aeabi_ddiv+0x244>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d018      	beq.n	8000ea4 <__aeabi_ddiv+0x90>
 8000e72:	497a      	ldr	r1, [pc, #488]	; (800105c <__aeabi_ddiv+0x248>)
 8000e74:	0f42      	lsrs	r2, r0, #29
 8000e76:	468c      	mov	ip, r1
 8000e78:	00e4      	lsls	r4, r4, #3
 8000e7a:	4659      	mov	r1, fp
 8000e7c:	4314      	orrs	r4, r2
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	4463      	add	r3, ip
 8000e82:	0412      	lsls	r2, r2, #16
 8000e84:	1acb      	subs	r3, r1, r3
 8000e86:	4314      	orrs	r4, r2
 8000e88:	469b      	mov	fp, r3
 8000e8a:	00c2      	lsls	r2, r0, #3
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	0033      	movs	r3, r6
 8000e90:	407b      	eors	r3, r7
 8000e92:	469a      	mov	sl, r3
 8000e94:	464b      	mov	r3, r9
 8000e96:	2b0f      	cmp	r3, #15
 8000e98:	d900      	bls.n	8000e9c <__aeabi_ddiv+0x88>
 8000e9a:	e0ef      	b.n	800107c <__aeabi_ddiv+0x268>
 8000e9c:	4970      	ldr	r1, [pc, #448]	; (8001060 <__aeabi_ddiv+0x24c>)
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	58cb      	ldr	r3, [r1, r3]
 8000ea2:	469f      	mov	pc, r3
 8000ea4:	4b6f      	ldr	r3, [pc, #444]	; (8001064 <__aeabi_ddiv+0x250>)
 8000ea6:	4652      	mov	r2, sl
 8000ea8:	469c      	mov	ip, r3
 8000eaa:	4322      	orrs	r2, r4
 8000eac:	44e3      	add	fp, ip
 8000eae:	2a00      	cmp	r2, #0
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_ddiv+0xa0>
 8000eb2:	e095      	b.n	8000fe0 <__aeabi_ddiv+0x1cc>
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	4319      	orrs	r1, r3
 8000eba:	4689      	mov	r9, r1
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	e7e5      	b.n	8000e8e <__aeabi_ddiv+0x7a>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	2400      	movs	r4, #0
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	4652      	mov	r2, sl
 8000eca:	051b      	lsls	r3, r3, #20
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	07d2      	lsls	r2, r2, #31
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	b005      	add	sp, #20
 8000ed8:	bcf0      	pop	{r4, r5, r6, r7}
 8000eda:	46bb      	mov	fp, r7
 8000edc:	46b2      	mov	sl, r6
 8000ede:	46a9      	mov	r9, r5
 8000ee0:	46a0      	mov	r8, r4
 8000ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee4:	2400      	movs	r4, #0
 8000ee6:	2500      	movs	r5, #0
 8000ee8:	4b5b      	ldr	r3, [pc, #364]	; (8001058 <__aeabi_ddiv+0x244>)
 8000eea:	e7ed      	b.n	8000ec8 <__aeabi_ddiv+0xb4>
 8000eec:	464b      	mov	r3, r9
 8000eee:	4323      	orrs	r3, r4
 8000ef0:	4698      	mov	r8, r3
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_ddiv+0xe2>
 8000ef4:	e089      	b.n	800100a <__aeabi_ddiv+0x1f6>
 8000ef6:	2c00      	cmp	r4, #0
 8000ef8:	d100      	bne.n	8000efc <__aeabi_ddiv+0xe8>
 8000efa:	e1e0      	b.n	80012be <__aeabi_ddiv+0x4aa>
 8000efc:	0020      	movs	r0, r4
 8000efe:	f001 f965 	bl	80021cc <__clzsi2>
 8000f02:	0001      	movs	r1, r0
 8000f04:	0002      	movs	r2, r0
 8000f06:	390b      	subs	r1, #11
 8000f08:	231d      	movs	r3, #29
 8000f0a:	1a5b      	subs	r3, r3, r1
 8000f0c:	4649      	mov	r1, r9
 8000f0e:	0010      	movs	r0, r2
 8000f10:	40d9      	lsrs	r1, r3
 8000f12:	3808      	subs	r0, #8
 8000f14:	4084      	lsls	r4, r0
 8000f16:	000b      	movs	r3, r1
 8000f18:	464d      	mov	r5, r9
 8000f1a:	4323      	orrs	r3, r4
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	4085      	lsls	r5, r0
 8000f20:	4851      	ldr	r0, [pc, #324]	; (8001068 <__aeabi_ddiv+0x254>)
 8000f22:	033c      	lsls	r4, r7, #12
 8000f24:	1a83      	subs	r3, r0, r2
 8000f26:	469b      	mov	fp, r3
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	007b      	lsls	r3, r7, #1
 8000f30:	4650      	mov	r0, sl
 8000f32:	0b24      	lsrs	r4, r4, #12
 8000f34:	0d5b      	lsrs	r3, r3, #21
 8000f36:	0fff      	lsrs	r7, r7, #31
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d197      	bne.n	8000e6c <__aeabi_ddiv+0x58>
 8000f3c:	4652      	mov	r2, sl
 8000f3e:	4322      	orrs	r2, r4
 8000f40:	d055      	beq.n	8000fee <__aeabi_ddiv+0x1da>
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_ddiv+0x134>
 8000f46:	e1ca      	b.n	80012de <__aeabi_ddiv+0x4ca>
 8000f48:	0020      	movs	r0, r4
 8000f4a:	f001 f93f 	bl	80021cc <__clzsi2>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	3a0b      	subs	r2, #11
 8000f52:	231d      	movs	r3, #29
 8000f54:	0001      	movs	r1, r0
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	4652      	mov	r2, sl
 8000f5a:	3908      	subs	r1, #8
 8000f5c:	40da      	lsrs	r2, r3
 8000f5e:	408c      	lsls	r4, r1
 8000f60:	4314      	orrs	r4, r2
 8000f62:	4652      	mov	r2, sl
 8000f64:	408a      	lsls	r2, r1
 8000f66:	4b41      	ldr	r3, [pc, #260]	; (800106c <__aeabi_ddiv+0x258>)
 8000f68:	4458      	add	r0, fp
 8000f6a:	469b      	mov	fp, r3
 8000f6c:	4483      	add	fp, r0
 8000f6e:	2000      	movs	r0, #0
 8000f70:	e78d      	b.n	8000e8e <__aeabi_ddiv+0x7a>
 8000f72:	464b      	mov	r3, r9
 8000f74:	4323      	orrs	r3, r4
 8000f76:	4698      	mov	r8, r3
 8000f78:	d140      	bne.n	8000ffc <__aeabi_ddiv+0x1e8>
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	3b06      	subs	r3, #6
 8000f80:	2500      	movs	r5, #0
 8000f82:	4683      	mov	fp, r0
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	e769      	b.n	8000e5c <__aeabi_ddiv+0x48>
 8000f88:	46b2      	mov	sl, r6
 8000f8a:	9b00      	ldr	r3, [sp, #0]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d0a9      	beq.n	8000ee4 <__aeabi_ddiv+0xd0>
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d100      	bne.n	8000f96 <__aeabi_ddiv+0x182>
 8000f94:	e211      	b.n	80013ba <__aeabi_ddiv+0x5a6>
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d093      	beq.n	8000ec2 <__aeabi_ddiv+0xae>
 8000f9a:	4a35      	ldr	r2, [pc, #212]	; (8001070 <__aeabi_ddiv+0x25c>)
 8000f9c:	445a      	add	r2, fp
 8000f9e:	2a00      	cmp	r2, #0
 8000fa0:	dc00      	bgt.n	8000fa4 <__aeabi_ddiv+0x190>
 8000fa2:	e13c      	b.n	800121e <__aeabi_ddiv+0x40a>
 8000fa4:	076b      	lsls	r3, r5, #29
 8000fa6:	d000      	beq.n	8000faa <__aeabi_ddiv+0x196>
 8000fa8:	e1a7      	b.n	80012fa <__aeabi_ddiv+0x4e6>
 8000faa:	08ed      	lsrs	r5, r5, #3
 8000fac:	4643      	mov	r3, r8
 8000fae:	01db      	lsls	r3, r3, #7
 8000fb0:	d506      	bpl.n	8000fc0 <__aeabi_ddiv+0x1ac>
 8000fb2:	4642      	mov	r2, r8
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <__aeabi_ddiv+0x260>)
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	4690      	mov	r8, r2
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	00d2      	lsls	r2, r2, #3
 8000fbe:	445a      	add	r2, fp
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <__aeabi_ddiv+0x264>)
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dc8e      	bgt.n	8000ee4 <__aeabi_ddiv+0xd0>
 8000fc6:	4643      	mov	r3, r8
 8000fc8:	0552      	lsls	r2, r2, #21
 8000fca:	0758      	lsls	r0, r3, #29
 8000fcc:	025c      	lsls	r4, r3, #9
 8000fce:	4305      	orrs	r5, r0
 8000fd0:	0b24      	lsrs	r4, r4, #12
 8000fd2:	0d53      	lsrs	r3, r2, #21
 8000fd4:	e778      	b.n	8000ec8 <__aeabi_ddiv+0xb4>
 8000fd6:	46ba      	mov	sl, r7
 8000fd8:	46a0      	mov	r8, r4
 8000fda:	0015      	movs	r5, r2
 8000fdc:	9000      	str	r0, [sp, #0]
 8000fde:	e7d4      	b.n	8000f8a <__aeabi_ddiv+0x176>
 8000fe0:	464a      	mov	r2, r9
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	4691      	mov	r9, r2
 8000fe8:	2003      	movs	r0, #3
 8000fea:	4652      	mov	r2, sl
 8000fec:	e74f      	b.n	8000e8e <__aeabi_ddiv+0x7a>
 8000fee:	4649      	mov	r1, r9
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	4319      	orrs	r1, r3
 8000ff4:	4689      	mov	r9, r1
 8000ff6:	2400      	movs	r4, #0
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	e748      	b.n	8000e8e <__aeabi_ddiv+0x7a>
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	4699      	mov	r9, r3
 8001000:	3b09      	subs	r3, #9
 8001002:	46a0      	mov	r8, r4
 8001004:	4683      	mov	fp, r0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	e728      	b.n	8000e5c <__aeabi_ddiv+0x48>
 800100a:	2304      	movs	r3, #4
 800100c:	4699      	mov	r9, r3
 800100e:	2300      	movs	r3, #0
 8001010:	469b      	mov	fp, r3
 8001012:	3301      	adds	r3, #1
 8001014:	2500      	movs	r5, #0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	e720      	b.n	8000e5c <__aeabi_ddiv+0x48>
 800101a:	2300      	movs	r3, #0
 800101c:	2480      	movs	r4, #128	; 0x80
 800101e:	469a      	mov	sl, r3
 8001020:	2500      	movs	r5, #0
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <__aeabi_ddiv+0x244>)
 8001024:	0324      	lsls	r4, r4, #12
 8001026:	e74f      	b.n	8000ec8 <__aeabi_ddiv+0xb4>
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	4641      	mov	r1, r8
 800102c:	031b      	lsls	r3, r3, #12
 800102e:	4219      	tst	r1, r3
 8001030:	d008      	beq.n	8001044 <__aeabi_ddiv+0x230>
 8001032:	421c      	tst	r4, r3
 8001034:	d106      	bne.n	8001044 <__aeabi_ddiv+0x230>
 8001036:	431c      	orrs	r4, r3
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	46ba      	mov	sl, r7
 800103c:	0015      	movs	r5, r2
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <__aeabi_ddiv+0x244>)
 8001040:	0b24      	lsrs	r4, r4, #12
 8001042:	e741      	b.n	8000ec8 <__aeabi_ddiv+0xb4>
 8001044:	2480      	movs	r4, #128	; 0x80
 8001046:	4643      	mov	r3, r8
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	431c      	orrs	r4, r3
 800104c:	0324      	lsls	r4, r4, #12
 800104e:	46b2      	mov	sl, r6
 8001050:	4b01      	ldr	r3, [pc, #4]	; (8001058 <__aeabi_ddiv+0x244>)
 8001052:	0b24      	lsrs	r4, r4, #12
 8001054:	e738      	b.n	8000ec8 <__aeabi_ddiv+0xb4>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	000007ff 	.word	0x000007ff
 800105c:	fffffc01 	.word	0xfffffc01
 8001060:	08008430 	.word	0x08008430
 8001064:	fffff801 	.word	0xfffff801
 8001068:	fffffc0d 	.word	0xfffffc0d
 800106c:	000003f3 	.word	0x000003f3
 8001070:	000003ff 	.word	0x000003ff
 8001074:	feffffff 	.word	0xfeffffff
 8001078:	000007fe 	.word	0x000007fe
 800107c:	4544      	cmp	r4, r8
 800107e:	d200      	bcs.n	8001082 <__aeabi_ddiv+0x26e>
 8001080:	e116      	b.n	80012b0 <__aeabi_ddiv+0x49c>
 8001082:	d100      	bne.n	8001086 <__aeabi_ddiv+0x272>
 8001084:	e111      	b.n	80012aa <__aeabi_ddiv+0x496>
 8001086:	2301      	movs	r3, #1
 8001088:	425b      	negs	r3, r3
 800108a:	469c      	mov	ip, r3
 800108c:	002e      	movs	r6, r5
 800108e:	4640      	mov	r0, r8
 8001090:	2500      	movs	r5, #0
 8001092:	44e3      	add	fp, ip
 8001094:	0223      	lsls	r3, r4, #8
 8001096:	0e14      	lsrs	r4, r2, #24
 8001098:	431c      	orrs	r4, r3
 800109a:	0c1b      	lsrs	r3, r3, #16
 800109c:	4699      	mov	r9, r3
 800109e:	0423      	lsls	r3, r4, #16
 80010a0:	0c1f      	lsrs	r7, r3, #16
 80010a2:	0212      	lsls	r2, r2, #8
 80010a4:	4649      	mov	r1, r9
 80010a6:	9200      	str	r2, [sp, #0]
 80010a8:	9701      	str	r7, [sp, #4]
 80010aa:	f7ff f8b7 	bl	800021c <__aeabi_uidivmod>
 80010ae:	0002      	movs	r2, r0
 80010b0:	437a      	muls	r2, r7
 80010b2:	040b      	lsls	r3, r1, #16
 80010b4:	0c31      	lsrs	r1, r6, #16
 80010b6:	4680      	mov	r8, r0
 80010b8:	4319      	orrs	r1, r3
 80010ba:	428a      	cmp	r2, r1
 80010bc:	d90b      	bls.n	80010d6 <__aeabi_ddiv+0x2c2>
 80010be:	2301      	movs	r3, #1
 80010c0:	425b      	negs	r3, r3
 80010c2:	469c      	mov	ip, r3
 80010c4:	1909      	adds	r1, r1, r4
 80010c6:	44e0      	add	r8, ip
 80010c8:	428c      	cmp	r4, r1
 80010ca:	d804      	bhi.n	80010d6 <__aeabi_ddiv+0x2c2>
 80010cc:	428a      	cmp	r2, r1
 80010ce:	d902      	bls.n	80010d6 <__aeabi_ddiv+0x2c2>
 80010d0:	1e83      	subs	r3, r0, #2
 80010d2:	4698      	mov	r8, r3
 80010d4:	1909      	adds	r1, r1, r4
 80010d6:	1a88      	subs	r0, r1, r2
 80010d8:	4649      	mov	r1, r9
 80010da:	f7ff f89f 	bl	800021c <__aeabi_uidivmod>
 80010de:	0409      	lsls	r1, r1, #16
 80010e0:	468c      	mov	ip, r1
 80010e2:	0431      	lsls	r1, r6, #16
 80010e4:	4666      	mov	r6, ip
 80010e6:	9a01      	ldr	r2, [sp, #4]
 80010e8:	0c09      	lsrs	r1, r1, #16
 80010ea:	4342      	muls	r2, r0
 80010ec:	0003      	movs	r3, r0
 80010ee:	4331      	orrs	r1, r6
 80010f0:	428a      	cmp	r2, r1
 80010f2:	d904      	bls.n	80010fe <__aeabi_ddiv+0x2ea>
 80010f4:	1909      	adds	r1, r1, r4
 80010f6:	3b01      	subs	r3, #1
 80010f8:	428c      	cmp	r4, r1
 80010fa:	d800      	bhi.n	80010fe <__aeabi_ddiv+0x2ea>
 80010fc:	e111      	b.n	8001322 <__aeabi_ddiv+0x50e>
 80010fe:	1a89      	subs	r1, r1, r2
 8001100:	4642      	mov	r2, r8
 8001102:	9e00      	ldr	r6, [sp, #0]
 8001104:	0412      	lsls	r2, r2, #16
 8001106:	431a      	orrs	r2, r3
 8001108:	0c33      	lsrs	r3, r6, #16
 800110a:	001f      	movs	r7, r3
 800110c:	0c10      	lsrs	r0, r2, #16
 800110e:	4690      	mov	r8, r2
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	0413      	lsls	r3, r2, #16
 8001114:	0432      	lsls	r2, r6, #16
 8001116:	0c16      	lsrs	r6, r2, #16
 8001118:	0032      	movs	r2, r6
 800111a:	0c1b      	lsrs	r3, r3, #16
 800111c:	435a      	muls	r2, r3
 800111e:	9603      	str	r6, [sp, #12]
 8001120:	437b      	muls	r3, r7
 8001122:	4346      	muls	r6, r0
 8001124:	4378      	muls	r0, r7
 8001126:	0c17      	lsrs	r7, r2, #16
 8001128:	46bc      	mov	ip, r7
 800112a:	199b      	adds	r3, r3, r6
 800112c:	4463      	add	r3, ip
 800112e:	429e      	cmp	r6, r3
 8001130:	d903      	bls.n	800113a <__aeabi_ddiv+0x326>
 8001132:	2680      	movs	r6, #128	; 0x80
 8001134:	0276      	lsls	r6, r6, #9
 8001136:	46b4      	mov	ip, r6
 8001138:	4460      	add	r0, ip
 800113a:	0c1e      	lsrs	r6, r3, #16
 800113c:	1830      	adds	r0, r6, r0
 800113e:	0416      	lsls	r6, r2, #16
 8001140:	041b      	lsls	r3, r3, #16
 8001142:	0c36      	lsrs	r6, r6, #16
 8001144:	199e      	adds	r6, r3, r6
 8001146:	4281      	cmp	r1, r0
 8001148:	d200      	bcs.n	800114c <__aeabi_ddiv+0x338>
 800114a:	e09c      	b.n	8001286 <__aeabi_ddiv+0x472>
 800114c:	d100      	bne.n	8001150 <__aeabi_ddiv+0x33c>
 800114e:	e097      	b.n	8001280 <__aeabi_ddiv+0x46c>
 8001150:	1bae      	subs	r6, r5, r6
 8001152:	1a09      	subs	r1, r1, r0
 8001154:	42b5      	cmp	r5, r6
 8001156:	4180      	sbcs	r0, r0
 8001158:	4240      	negs	r0, r0
 800115a:	1a08      	subs	r0, r1, r0
 800115c:	4284      	cmp	r4, r0
 800115e:	d100      	bne.n	8001162 <__aeabi_ddiv+0x34e>
 8001160:	e111      	b.n	8001386 <__aeabi_ddiv+0x572>
 8001162:	4649      	mov	r1, r9
 8001164:	f7ff f85a 	bl	800021c <__aeabi_uidivmod>
 8001168:	9a01      	ldr	r2, [sp, #4]
 800116a:	040b      	lsls	r3, r1, #16
 800116c:	4342      	muls	r2, r0
 800116e:	0c31      	lsrs	r1, r6, #16
 8001170:	0005      	movs	r5, r0
 8001172:	4319      	orrs	r1, r3
 8001174:	428a      	cmp	r2, r1
 8001176:	d907      	bls.n	8001188 <__aeabi_ddiv+0x374>
 8001178:	1909      	adds	r1, r1, r4
 800117a:	3d01      	subs	r5, #1
 800117c:	428c      	cmp	r4, r1
 800117e:	d803      	bhi.n	8001188 <__aeabi_ddiv+0x374>
 8001180:	428a      	cmp	r2, r1
 8001182:	d901      	bls.n	8001188 <__aeabi_ddiv+0x374>
 8001184:	1e85      	subs	r5, r0, #2
 8001186:	1909      	adds	r1, r1, r4
 8001188:	1a88      	subs	r0, r1, r2
 800118a:	4649      	mov	r1, r9
 800118c:	f7ff f846 	bl	800021c <__aeabi_uidivmod>
 8001190:	0409      	lsls	r1, r1, #16
 8001192:	468c      	mov	ip, r1
 8001194:	0431      	lsls	r1, r6, #16
 8001196:	4666      	mov	r6, ip
 8001198:	9a01      	ldr	r2, [sp, #4]
 800119a:	0c09      	lsrs	r1, r1, #16
 800119c:	4342      	muls	r2, r0
 800119e:	0003      	movs	r3, r0
 80011a0:	4331      	orrs	r1, r6
 80011a2:	428a      	cmp	r2, r1
 80011a4:	d907      	bls.n	80011b6 <__aeabi_ddiv+0x3a2>
 80011a6:	1909      	adds	r1, r1, r4
 80011a8:	3b01      	subs	r3, #1
 80011aa:	428c      	cmp	r4, r1
 80011ac:	d803      	bhi.n	80011b6 <__aeabi_ddiv+0x3a2>
 80011ae:	428a      	cmp	r2, r1
 80011b0:	d901      	bls.n	80011b6 <__aeabi_ddiv+0x3a2>
 80011b2:	1e83      	subs	r3, r0, #2
 80011b4:	1909      	adds	r1, r1, r4
 80011b6:	9e03      	ldr	r6, [sp, #12]
 80011b8:	1a89      	subs	r1, r1, r2
 80011ba:	0032      	movs	r2, r6
 80011bc:	042d      	lsls	r5, r5, #16
 80011be:	431d      	orrs	r5, r3
 80011c0:	9f02      	ldr	r7, [sp, #8]
 80011c2:	042b      	lsls	r3, r5, #16
 80011c4:	0c1b      	lsrs	r3, r3, #16
 80011c6:	435a      	muls	r2, r3
 80011c8:	437b      	muls	r3, r7
 80011ca:	469c      	mov	ip, r3
 80011cc:	0c28      	lsrs	r0, r5, #16
 80011ce:	4346      	muls	r6, r0
 80011d0:	0c13      	lsrs	r3, r2, #16
 80011d2:	44b4      	add	ip, r6
 80011d4:	4463      	add	r3, ip
 80011d6:	4378      	muls	r0, r7
 80011d8:	429e      	cmp	r6, r3
 80011da:	d903      	bls.n	80011e4 <__aeabi_ddiv+0x3d0>
 80011dc:	2680      	movs	r6, #128	; 0x80
 80011de:	0276      	lsls	r6, r6, #9
 80011e0:	46b4      	mov	ip, r6
 80011e2:	4460      	add	r0, ip
 80011e4:	0c1e      	lsrs	r6, r3, #16
 80011e6:	0412      	lsls	r2, r2, #16
 80011e8:	041b      	lsls	r3, r3, #16
 80011ea:	0c12      	lsrs	r2, r2, #16
 80011ec:	1830      	adds	r0, r6, r0
 80011ee:	189b      	adds	r3, r3, r2
 80011f0:	4281      	cmp	r1, r0
 80011f2:	d306      	bcc.n	8001202 <__aeabi_ddiv+0x3ee>
 80011f4:	d002      	beq.n	80011fc <__aeabi_ddiv+0x3e8>
 80011f6:	2301      	movs	r3, #1
 80011f8:	431d      	orrs	r5, r3
 80011fa:	e6ce      	b.n	8000f9a <__aeabi_ddiv+0x186>
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d100      	bne.n	8001202 <__aeabi_ddiv+0x3ee>
 8001200:	e6cb      	b.n	8000f9a <__aeabi_ddiv+0x186>
 8001202:	1861      	adds	r1, r4, r1
 8001204:	1e6e      	subs	r6, r5, #1
 8001206:	42a1      	cmp	r1, r4
 8001208:	d200      	bcs.n	800120c <__aeabi_ddiv+0x3f8>
 800120a:	e0a4      	b.n	8001356 <__aeabi_ddiv+0x542>
 800120c:	4281      	cmp	r1, r0
 800120e:	d200      	bcs.n	8001212 <__aeabi_ddiv+0x3fe>
 8001210:	e0c9      	b.n	80013a6 <__aeabi_ddiv+0x592>
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0x402>
 8001214:	e0d9      	b.n	80013ca <__aeabi_ddiv+0x5b6>
 8001216:	0035      	movs	r5, r6
 8001218:	e7ed      	b.n	80011f6 <__aeabi_ddiv+0x3e2>
 800121a:	2501      	movs	r5, #1
 800121c:	426d      	negs	r5, r5
 800121e:	2101      	movs	r1, #1
 8001220:	1a89      	subs	r1, r1, r2
 8001222:	2938      	cmp	r1, #56	; 0x38
 8001224:	dd00      	ble.n	8001228 <__aeabi_ddiv+0x414>
 8001226:	e64c      	b.n	8000ec2 <__aeabi_ddiv+0xae>
 8001228:	291f      	cmp	r1, #31
 800122a:	dc00      	bgt.n	800122e <__aeabi_ddiv+0x41a>
 800122c:	e07f      	b.n	800132e <__aeabi_ddiv+0x51a>
 800122e:	231f      	movs	r3, #31
 8001230:	425b      	negs	r3, r3
 8001232:	1a9a      	subs	r2, r3, r2
 8001234:	4643      	mov	r3, r8
 8001236:	40d3      	lsrs	r3, r2
 8001238:	2920      	cmp	r1, #32
 800123a:	d004      	beq.n	8001246 <__aeabi_ddiv+0x432>
 800123c:	4644      	mov	r4, r8
 800123e:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <__aeabi_ddiv+0x5c0>)
 8001240:	445a      	add	r2, fp
 8001242:	4094      	lsls	r4, r2
 8001244:	4325      	orrs	r5, r4
 8001246:	1e6a      	subs	r2, r5, #1
 8001248:	4195      	sbcs	r5, r2
 800124a:	2207      	movs	r2, #7
 800124c:	432b      	orrs	r3, r5
 800124e:	0015      	movs	r5, r2
 8001250:	2400      	movs	r4, #0
 8001252:	401d      	ands	r5, r3
 8001254:	421a      	tst	r2, r3
 8001256:	d100      	bne.n	800125a <__aeabi_ddiv+0x446>
 8001258:	e0a1      	b.n	800139e <__aeabi_ddiv+0x58a>
 800125a:	220f      	movs	r2, #15
 800125c:	2400      	movs	r4, #0
 800125e:	401a      	ands	r2, r3
 8001260:	2a04      	cmp	r2, #4
 8001262:	d100      	bne.n	8001266 <__aeabi_ddiv+0x452>
 8001264:	e098      	b.n	8001398 <__aeabi_ddiv+0x584>
 8001266:	1d1a      	adds	r2, r3, #4
 8001268:	429a      	cmp	r2, r3
 800126a:	419b      	sbcs	r3, r3
 800126c:	425b      	negs	r3, r3
 800126e:	18e4      	adds	r4, r4, r3
 8001270:	0013      	movs	r3, r2
 8001272:	0222      	lsls	r2, r4, #8
 8001274:	d400      	bmi.n	8001278 <__aeabi_ddiv+0x464>
 8001276:	e08f      	b.n	8001398 <__aeabi_ddiv+0x584>
 8001278:	2301      	movs	r3, #1
 800127a:	2400      	movs	r4, #0
 800127c:	2500      	movs	r5, #0
 800127e:	e623      	b.n	8000ec8 <__aeabi_ddiv+0xb4>
 8001280:	42b5      	cmp	r5, r6
 8001282:	d300      	bcc.n	8001286 <__aeabi_ddiv+0x472>
 8001284:	e764      	b.n	8001150 <__aeabi_ddiv+0x33c>
 8001286:	4643      	mov	r3, r8
 8001288:	1e5a      	subs	r2, r3, #1
 800128a:	9b00      	ldr	r3, [sp, #0]
 800128c:	469c      	mov	ip, r3
 800128e:	4465      	add	r5, ip
 8001290:	001f      	movs	r7, r3
 8001292:	429d      	cmp	r5, r3
 8001294:	419b      	sbcs	r3, r3
 8001296:	425b      	negs	r3, r3
 8001298:	191b      	adds	r3, r3, r4
 800129a:	18c9      	adds	r1, r1, r3
 800129c:	428c      	cmp	r4, r1
 800129e:	d23a      	bcs.n	8001316 <__aeabi_ddiv+0x502>
 80012a0:	4288      	cmp	r0, r1
 80012a2:	d863      	bhi.n	800136c <__aeabi_ddiv+0x558>
 80012a4:	d060      	beq.n	8001368 <__aeabi_ddiv+0x554>
 80012a6:	4690      	mov	r8, r2
 80012a8:	e752      	b.n	8001150 <__aeabi_ddiv+0x33c>
 80012aa:	42aa      	cmp	r2, r5
 80012ac:	d900      	bls.n	80012b0 <__aeabi_ddiv+0x49c>
 80012ae:	e6ea      	b.n	8001086 <__aeabi_ddiv+0x272>
 80012b0:	4643      	mov	r3, r8
 80012b2:	07de      	lsls	r6, r3, #31
 80012b4:	0858      	lsrs	r0, r3, #1
 80012b6:	086b      	lsrs	r3, r5, #1
 80012b8:	431e      	orrs	r6, r3
 80012ba:	07ed      	lsls	r5, r5, #31
 80012bc:	e6ea      	b.n	8001094 <__aeabi_ddiv+0x280>
 80012be:	4648      	mov	r0, r9
 80012c0:	f000 ff84 	bl	80021cc <__clzsi2>
 80012c4:	0001      	movs	r1, r0
 80012c6:	0002      	movs	r2, r0
 80012c8:	3115      	adds	r1, #21
 80012ca:	3220      	adds	r2, #32
 80012cc:	291c      	cmp	r1, #28
 80012ce:	dc00      	bgt.n	80012d2 <__aeabi_ddiv+0x4be>
 80012d0:	e61a      	b.n	8000f08 <__aeabi_ddiv+0xf4>
 80012d2:	464b      	mov	r3, r9
 80012d4:	3808      	subs	r0, #8
 80012d6:	4083      	lsls	r3, r0
 80012d8:	2500      	movs	r5, #0
 80012da:	4698      	mov	r8, r3
 80012dc:	e620      	b.n	8000f20 <__aeabi_ddiv+0x10c>
 80012de:	f000 ff75 	bl	80021cc <__clzsi2>
 80012e2:	0003      	movs	r3, r0
 80012e4:	001a      	movs	r2, r3
 80012e6:	3215      	adds	r2, #21
 80012e8:	3020      	adds	r0, #32
 80012ea:	2a1c      	cmp	r2, #28
 80012ec:	dc00      	bgt.n	80012f0 <__aeabi_ddiv+0x4dc>
 80012ee:	e630      	b.n	8000f52 <__aeabi_ddiv+0x13e>
 80012f0:	4654      	mov	r4, sl
 80012f2:	3b08      	subs	r3, #8
 80012f4:	2200      	movs	r2, #0
 80012f6:	409c      	lsls	r4, r3
 80012f8:	e635      	b.n	8000f66 <__aeabi_ddiv+0x152>
 80012fa:	230f      	movs	r3, #15
 80012fc:	402b      	ands	r3, r5
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d100      	bne.n	8001304 <__aeabi_ddiv+0x4f0>
 8001302:	e652      	b.n	8000faa <__aeabi_ddiv+0x196>
 8001304:	2305      	movs	r3, #5
 8001306:	425b      	negs	r3, r3
 8001308:	42ab      	cmp	r3, r5
 800130a:	419b      	sbcs	r3, r3
 800130c:	3504      	adds	r5, #4
 800130e:	425b      	negs	r3, r3
 8001310:	08ed      	lsrs	r5, r5, #3
 8001312:	4498      	add	r8, r3
 8001314:	e64a      	b.n	8000fac <__aeabi_ddiv+0x198>
 8001316:	428c      	cmp	r4, r1
 8001318:	d1c5      	bne.n	80012a6 <__aeabi_ddiv+0x492>
 800131a:	42af      	cmp	r7, r5
 800131c:	d9c0      	bls.n	80012a0 <__aeabi_ddiv+0x48c>
 800131e:	4690      	mov	r8, r2
 8001320:	e716      	b.n	8001150 <__aeabi_ddiv+0x33c>
 8001322:	428a      	cmp	r2, r1
 8001324:	d800      	bhi.n	8001328 <__aeabi_ddiv+0x514>
 8001326:	e6ea      	b.n	80010fe <__aeabi_ddiv+0x2ea>
 8001328:	1e83      	subs	r3, r0, #2
 800132a:	1909      	adds	r1, r1, r4
 800132c:	e6e7      	b.n	80010fe <__aeabi_ddiv+0x2ea>
 800132e:	4a2a      	ldr	r2, [pc, #168]	; (80013d8 <__aeabi_ddiv+0x5c4>)
 8001330:	0028      	movs	r0, r5
 8001332:	445a      	add	r2, fp
 8001334:	4643      	mov	r3, r8
 8001336:	4095      	lsls	r5, r2
 8001338:	4093      	lsls	r3, r2
 800133a:	40c8      	lsrs	r0, r1
 800133c:	1e6a      	subs	r2, r5, #1
 800133e:	4195      	sbcs	r5, r2
 8001340:	4644      	mov	r4, r8
 8001342:	4303      	orrs	r3, r0
 8001344:	432b      	orrs	r3, r5
 8001346:	40cc      	lsrs	r4, r1
 8001348:	075a      	lsls	r2, r3, #29
 800134a:	d092      	beq.n	8001272 <__aeabi_ddiv+0x45e>
 800134c:	220f      	movs	r2, #15
 800134e:	401a      	ands	r2, r3
 8001350:	2a04      	cmp	r2, #4
 8001352:	d188      	bne.n	8001266 <__aeabi_ddiv+0x452>
 8001354:	e78d      	b.n	8001272 <__aeabi_ddiv+0x45e>
 8001356:	0035      	movs	r5, r6
 8001358:	4281      	cmp	r1, r0
 800135a:	d000      	beq.n	800135e <__aeabi_ddiv+0x54a>
 800135c:	e74b      	b.n	80011f6 <__aeabi_ddiv+0x3e2>
 800135e:	9a00      	ldr	r2, [sp, #0]
 8001360:	4293      	cmp	r3, r2
 8001362:	d000      	beq.n	8001366 <__aeabi_ddiv+0x552>
 8001364:	e747      	b.n	80011f6 <__aeabi_ddiv+0x3e2>
 8001366:	e618      	b.n	8000f9a <__aeabi_ddiv+0x186>
 8001368:	42ae      	cmp	r6, r5
 800136a:	d99c      	bls.n	80012a6 <__aeabi_ddiv+0x492>
 800136c:	2302      	movs	r3, #2
 800136e:	425b      	negs	r3, r3
 8001370:	469c      	mov	ip, r3
 8001372:	9b00      	ldr	r3, [sp, #0]
 8001374:	44e0      	add	r8, ip
 8001376:	469c      	mov	ip, r3
 8001378:	4465      	add	r5, ip
 800137a:	429d      	cmp	r5, r3
 800137c:	419b      	sbcs	r3, r3
 800137e:	425b      	negs	r3, r3
 8001380:	191b      	adds	r3, r3, r4
 8001382:	18c9      	adds	r1, r1, r3
 8001384:	e6e4      	b.n	8001150 <__aeabi_ddiv+0x33c>
 8001386:	4a15      	ldr	r2, [pc, #84]	; (80013dc <__aeabi_ddiv+0x5c8>)
 8001388:	445a      	add	r2, fp
 800138a:	2a00      	cmp	r2, #0
 800138c:	dc00      	bgt.n	8001390 <__aeabi_ddiv+0x57c>
 800138e:	e744      	b.n	800121a <__aeabi_ddiv+0x406>
 8001390:	2301      	movs	r3, #1
 8001392:	2500      	movs	r5, #0
 8001394:	4498      	add	r8, r3
 8001396:	e609      	b.n	8000fac <__aeabi_ddiv+0x198>
 8001398:	0765      	lsls	r5, r4, #29
 800139a:	0264      	lsls	r4, r4, #9
 800139c:	0b24      	lsrs	r4, r4, #12
 800139e:	08db      	lsrs	r3, r3, #3
 80013a0:	431d      	orrs	r5, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	e590      	b.n	8000ec8 <__aeabi_ddiv+0xb4>
 80013a6:	9e00      	ldr	r6, [sp, #0]
 80013a8:	3d02      	subs	r5, #2
 80013aa:	0072      	lsls	r2, r6, #1
 80013ac:	42b2      	cmp	r2, r6
 80013ae:	41bf      	sbcs	r7, r7
 80013b0:	427f      	negs	r7, r7
 80013b2:	193c      	adds	r4, r7, r4
 80013b4:	1909      	adds	r1, r1, r4
 80013b6:	9200      	str	r2, [sp, #0]
 80013b8:	e7ce      	b.n	8001358 <__aeabi_ddiv+0x544>
 80013ba:	2480      	movs	r4, #128	; 0x80
 80013bc:	4643      	mov	r3, r8
 80013be:	0324      	lsls	r4, r4, #12
 80013c0:	431c      	orrs	r4, r3
 80013c2:	0324      	lsls	r4, r4, #12
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <__aeabi_ddiv+0x5cc>)
 80013c6:	0b24      	lsrs	r4, r4, #12
 80013c8:	e57e      	b.n	8000ec8 <__aeabi_ddiv+0xb4>
 80013ca:	9a00      	ldr	r2, [sp, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d3ea      	bcc.n	80013a6 <__aeabi_ddiv+0x592>
 80013d0:	0035      	movs	r5, r6
 80013d2:	e7c4      	b.n	800135e <__aeabi_ddiv+0x54a>
 80013d4:	0000043e 	.word	0x0000043e
 80013d8:	0000041e 	.word	0x0000041e
 80013dc:	000003ff 	.word	0x000003ff
 80013e0:	000007ff 	.word	0x000007ff

080013e4 <__aeabi_dmul>:
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	4657      	mov	r7, sl
 80013e8:	464e      	mov	r6, r9
 80013ea:	4645      	mov	r5, r8
 80013ec:	46de      	mov	lr, fp
 80013ee:	b5e0      	push	{r5, r6, r7, lr}
 80013f0:	4698      	mov	r8, r3
 80013f2:	030c      	lsls	r4, r1, #12
 80013f4:	004b      	lsls	r3, r1, #1
 80013f6:	0006      	movs	r6, r0
 80013f8:	4692      	mov	sl, r2
 80013fa:	b087      	sub	sp, #28
 80013fc:	0b24      	lsrs	r4, r4, #12
 80013fe:	0d5b      	lsrs	r3, r3, #21
 8001400:	0fcf      	lsrs	r7, r1, #31
 8001402:	2b00      	cmp	r3, #0
 8001404:	d06c      	beq.n	80014e0 <__aeabi_dmul+0xfc>
 8001406:	4add      	ldr	r2, [pc, #884]	; (800177c <__aeabi_dmul+0x398>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d100      	bne.n	800140e <__aeabi_dmul+0x2a>
 800140c:	e086      	b.n	800151c <__aeabi_dmul+0x138>
 800140e:	0f42      	lsrs	r2, r0, #29
 8001410:	00e4      	lsls	r4, r4, #3
 8001412:	4314      	orrs	r4, r2
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	0412      	lsls	r2, r2, #16
 8001418:	4314      	orrs	r4, r2
 800141a:	4ad9      	ldr	r2, [pc, #868]	; (8001780 <__aeabi_dmul+0x39c>)
 800141c:	00c5      	lsls	r5, r0, #3
 800141e:	4694      	mov	ip, r2
 8001420:	4463      	add	r3, ip
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2300      	movs	r3, #0
 8001426:	4699      	mov	r9, r3
 8001428:	469b      	mov	fp, r3
 800142a:	4643      	mov	r3, r8
 800142c:	4642      	mov	r2, r8
 800142e:	031e      	lsls	r6, r3, #12
 8001430:	0fd2      	lsrs	r2, r2, #31
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4650      	mov	r0, sl
 8001436:	4690      	mov	r8, r2
 8001438:	0b36      	lsrs	r6, r6, #12
 800143a:	0d5b      	lsrs	r3, r3, #21
 800143c:	d100      	bne.n	8001440 <__aeabi_dmul+0x5c>
 800143e:	e078      	b.n	8001532 <__aeabi_dmul+0x14e>
 8001440:	4ace      	ldr	r2, [pc, #824]	; (800177c <__aeabi_dmul+0x398>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01d      	beq.n	8001482 <__aeabi_dmul+0x9e>
 8001446:	49ce      	ldr	r1, [pc, #824]	; (8001780 <__aeabi_dmul+0x39c>)
 8001448:	0f42      	lsrs	r2, r0, #29
 800144a:	468c      	mov	ip, r1
 800144c:	9900      	ldr	r1, [sp, #0]
 800144e:	4463      	add	r3, ip
 8001450:	00f6      	lsls	r6, r6, #3
 8001452:	468c      	mov	ip, r1
 8001454:	4316      	orrs	r6, r2
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	449c      	add	ip, r3
 800145a:	0412      	lsls	r2, r2, #16
 800145c:	4663      	mov	r3, ip
 800145e:	4316      	orrs	r6, r2
 8001460:	00c2      	lsls	r2, r0, #3
 8001462:	2000      	movs	r0, #0
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	9900      	ldr	r1, [sp, #0]
 8001468:	4643      	mov	r3, r8
 800146a:	3101      	adds	r1, #1
 800146c:	468c      	mov	ip, r1
 800146e:	4649      	mov	r1, r9
 8001470:	407b      	eors	r3, r7
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	290f      	cmp	r1, #15
 8001476:	d900      	bls.n	800147a <__aeabi_dmul+0x96>
 8001478:	e07e      	b.n	8001578 <__aeabi_dmul+0x194>
 800147a:	4bc2      	ldr	r3, [pc, #776]	; (8001784 <__aeabi_dmul+0x3a0>)
 800147c:	0089      	lsls	r1, r1, #2
 800147e:	5859      	ldr	r1, [r3, r1]
 8001480:	468f      	mov	pc, r1
 8001482:	4652      	mov	r2, sl
 8001484:	9b00      	ldr	r3, [sp, #0]
 8001486:	4332      	orrs	r2, r6
 8001488:	d000      	beq.n	800148c <__aeabi_dmul+0xa8>
 800148a:	e156      	b.n	800173a <__aeabi_dmul+0x356>
 800148c:	49bb      	ldr	r1, [pc, #748]	; (800177c <__aeabi_dmul+0x398>)
 800148e:	2600      	movs	r6, #0
 8001490:	468c      	mov	ip, r1
 8001492:	4463      	add	r3, ip
 8001494:	4649      	mov	r1, r9
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2302      	movs	r3, #2
 800149a:	4319      	orrs	r1, r3
 800149c:	4689      	mov	r9, r1
 800149e:	2002      	movs	r0, #2
 80014a0:	e7e1      	b.n	8001466 <__aeabi_dmul+0x82>
 80014a2:	4643      	mov	r3, r8
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	0034      	movs	r4, r6
 80014a8:	0015      	movs	r5, r2
 80014aa:	4683      	mov	fp, r0
 80014ac:	465b      	mov	r3, fp
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d05e      	beq.n	8001570 <__aeabi_dmul+0x18c>
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d100      	bne.n	80014b8 <__aeabi_dmul+0xd4>
 80014b6:	e1f3      	b.n	80018a0 <__aeabi_dmul+0x4bc>
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d000      	beq.n	80014be <__aeabi_dmul+0xda>
 80014bc:	e118      	b.n	80016f0 <__aeabi_dmul+0x30c>
 80014be:	2200      	movs	r2, #0
 80014c0:	2400      	movs	r4, #0
 80014c2:	2500      	movs	r5, #0
 80014c4:	9b01      	ldr	r3, [sp, #4]
 80014c6:	0512      	lsls	r2, r2, #20
 80014c8:	4322      	orrs	r2, r4
 80014ca:	07db      	lsls	r3, r3, #31
 80014cc:	431a      	orrs	r2, r3
 80014ce:	0028      	movs	r0, r5
 80014d0:	0011      	movs	r1, r2
 80014d2:	b007      	add	sp, #28
 80014d4:	bcf0      	pop	{r4, r5, r6, r7}
 80014d6:	46bb      	mov	fp, r7
 80014d8:	46b2      	mov	sl, r6
 80014da:	46a9      	mov	r9, r5
 80014dc:	46a0      	mov	r8, r4
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e0:	0025      	movs	r5, r4
 80014e2:	4305      	orrs	r5, r0
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dmul+0x104>
 80014e6:	e141      	b.n	800176c <__aeabi_dmul+0x388>
 80014e8:	2c00      	cmp	r4, #0
 80014ea:	d100      	bne.n	80014ee <__aeabi_dmul+0x10a>
 80014ec:	e1ad      	b.n	800184a <__aeabi_dmul+0x466>
 80014ee:	0020      	movs	r0, r4
 80014f0:	f000 fe6c 	bl	80021cc <__clzsi2>
 80014f4:	0001      	movs	r1, r0
 80014f6:	0002      	movs	r2, r0
 80014f8:	390b      	subs	r1, #11
 80014fa:	231d      	movs	r3, #29
 80014fc:	0010      	movs	r0, r2
 80014fe:	1a5b      	subs	r3, r3, r1
 8001500:	0031      	movs	r1, r6
 8001502:	0035      	movs	r5, r6
 8001504:	3808      	subs	r0, #8
 8001506:	4084      	lsls	r4, r0
 8001508:	40d9      	lsrs	r1, r3
 800150a:	4085      	lsls	r5, r0
 800150c:	430c      	orrs	r4, r1
 800150e:	489e      	ldr	r0, [pc, #632]	; (8001788 <__aeabi_dmul+0x3a4>)
 8001510:	1a83      	subs	r3, r0, r2
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2300      	movs	r3, #0
 8001516:	4699      	mov	r9, r3
 8001518:	469b      	mov	fp, r3
 800151a:	e786      	b.n	800142a <__aeabi_dmul+0x46>
 800151c:	0005      	movs	r5, r0
 800151e:	4325      	orrs	r5, r4
 8001520:	d000      	beq.n	8001524 <__aeabi_dmul+0x140>
 8001522:	e11c      	b.n	800175e <__aeabi_dmul+0x37a>
 8001524:	2208      	movs	r2, #8
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2302      	movs	r3, #2
 800152a:	2400      	movs	r4, #0
 800152c:	4691      	mov	r9, r2
 800152e:	469b      	mov	fp, r3
 8001530:	e77b      	b.n	800142a <__aeabi_dmul+0x46>
 8001532:	4652      	mov	r2, sl
 8001534:	4332      	orrs	r2, r6
 8001536:	d100      	bne.n	800153a <__aeabi_dmul+0x156>
 8001538:	e10a      	b.n	8001750 <__aeabi_dmul+0x36c>
 800153a:	2e00      	cmp	r6, #0
 800153c:	d100      	bne.n	8001540 <__aeabi_dmul+0x15c>
 800153e:	e176      	b.n	800182e <__aeabi_dmul+0x44a>
 8001540:	0030      	movs	r0, r6
 8001542:	f000 fe43 	bl	80021cc <__clzsi2>
 8001546:	0002      	movs	r2, r0
 8001548:	3a0b      	subs	r2, #11
 800154a:	231d      	movs	r3, #29
 800154c:	0001      	movs	r1, r0
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	4652      	mov	r2, sl
 8001552:	3908      	subs	r1, #8
 8001554:	40da      	lsrs	r2, r3
 8001556:	408e      	lsls	r6, r1
 8001558:	4316      	orrs	r6, r2
 800155a:	4652      	mov	r2, sl
 800155c:	408a      	lsls	r2, r1
 800155e:	9b00      	ldr	r3, [sp, #0]
 8001560:	4989      	ldr	r1, [pc, #548]	; (8001788 <__aeabi_dmul+0x3a4>)
 8001562:	1a18      	subs	r0, r3, r0
 8001564:	0003      	movs	r3, r0
 8001566:	468c      	mov	ip, r1
 8001568:	4463      	add	r3, ip
 800156a:	2000      	movs	r0, #0
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	e77a      	b.n	8001466 <__aeabi_dmul+0x82>
 8001570:	2400      	movs	r4, #0
 8001572:	2500      	movs	r5, #0
 8001574:	4a81      	ldr	r2, [pc, #516]	; (800177c <__aeabi_dmul+0x398>)
 8001576:	e7a5      	b.n	80014c4 <__aeabi_dmul+0xe0>
 8001578:	0c2f      	lsrs	r7, r5, #16
 800157a:	042d      	lsls	r5, r5, #16
 800157c:	0c2d      	lsrs	r5, r5, #16
 800157e:	002b      	movs	r3, r5
 8001580:	0c11      	lsrs	r1, r2, #16
 8001582:	0412      	lsls	r2, r2, #16
 8001584:	0c12      	lsrs	r2, r2, #16
 8001586:	4353      	muls	r3, r2
 8001588:	4698      	mov	r8, r3
 800158a:	0013      	movs	r3, r2
 800158c:	0028      	movs	r0, r5
 800158e:	437b      	muls	r3, r7
 8001590:	4699      	mov	r9, r3
 8001592:	4348      	muls	r0, r1
 8001594:	4448      	add	r0, r9
 8001596:	4683      	mov	fp, r0
 8001598:	4640      	mov	r0, r8
 800159a:	000b      	movs	r3, r1
 800159c:	0c00      	lsrs	r0, r0, #16
 800159e:	4682      	mov	sl, r0
 80015a0:	4658      	mov	r0, fp
 80015a2:	437b      	muls	r3, r7
 80015a4:	4450      	add	r0, sl
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	4581      	cmp	r9, r0
 80015aa:	d906      	bls.n	80015ba <__aeabi_dmul+0x1d6>
 80015ac:	469a      	mov	sl, r3
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	025b      	lsls	r3, r3, #9
 80015b2:	4699      	mov	r9, r3
 80015b4:	44ca      	add	sl, r9
 80015b6:	4653      	mov	r3, sl
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	0c03      	lsrs	r3, r0, #16
 80015bc:	469b      	mov	fp, r3
 80015be:	4643      	mov	r3, r8
 80015c0:	041b      	lsls	r3, r3, #16
 80015c2:	0400      	lsls	r0, r0, #16
 80015c4:	0c1b      	lsrs	r3, r3, #16
 80015c6:	4698      	mov	r8, r3
 80015c8:	0003      	movs	r3, r0
 80015ca:	4443      	add	r3, r8
 80015cc:	9304      	str	r3, [sp, #16]
 80015ce:	0c33      	lsrs	r3, r6, #16
 80015d0:	4699      	mov	r9, r3
 80015d2:	002b      	movs	r3, r5
 80015d4:	0436      	lsls	r6, r6, #16
 80015d6:	0c36      	lsrs	r6, r6, #16
 80015d8:	4373      	muls	r3, r6
 80015da:	4698      	mov	r8, r3
 80015dc:	0033      	movs	r3, r6
 80015de:	437b      	muls	r3, r7
 80015e0:	469a      	mov	sl, r3
 80015e2:	464b      	mov	r3, r9
 80015e4:	435d      	muls	r5, r3
 80015e6:	435f      	muls	r7, r3
 80015e8:	4643      	mov	r3, r8
 80015ea:	4455      	add	r5, sl
 80015ec:	0c18      	lsrs	r0, r3, #16
 80015ee:	1940      	adds	r0, r0, r5
 80015f0:	4582      	cmp	sl, r0
 80015f2:	d903      	bls.n	80015fc <__aeabi_dmul+0x218>
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	025b      	lsls	r3, r3, #9
 80015f8:	469a      	mov	sl, r3
 80015fa:	4457      	add	r7, sl
 80015fc:	0c05      	lsrs	r5, r0, #16
 80015fe:	19eb      	adds	r3, r5, r7
 8001600:	9305      	str	r3, [sp, #20]
 8001602:	4643      	mov	r3, r8
 8001604:	041d      	lsls	r5, r3, #16
 8001606:	0c2d      	lsrs	r5, r5, #16
 8001608:	0400      	lsls	r0, r0, #16
 800160a:	1940      	adds	r0, r0, r5
 800160c:	0c25      	lsrs	r5, r4, #16
 800160e:	0424      	lsls	r4, r4, #16
 8001610:	0c24      	lsrs	r4, r4, #16
 8001612:	0027      	movs	r7, r4
 8001614:	4357      	muls	r7, r2
 8001616:	436a      	muls	r2, r5
 8001618:	4690      	mov	r8, r2
 800161a:	002a      	movs	r2, r5
 800161c:	0c3b      	lsrs	r3, r7, #16
 800161e:	469a      	mov	sl, r3
 8001620:	434a      	muls	r2, r1
 8001622:	4361      	muls	r1, r4
 8001624:	4441      	add	r1, r8
 8001626:	4451      	add	r1, sl
 8001628:	4483      	add	fp, r0
 800162a:	4588      	cmp	r8, r1
 800162c:	d903      	bls.n	8001636 <__aeabi_dmul+0x252>
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	4698      	mov	r8, r3
 8001634:	4442      	add	r2, r8
 8001636:	043f      	lsls	r7, r7, #16
 8001638:	0c0b      	lsrs	r3, r1, #16
 800163a:	0c3f      	lsrs	r7, r7, #16
 800163c:	0409      	lsls	r1, r1, #16
 800163e:	19c9      	adds	r1, r1, r7
 8001640:	0027      	movs	r7, r4
 8001642:	4698      	mov	r8, r3
 8001644:	464b      	mov	r3, r9
 8001646:	4377      	muls	r7, r6
 8001648:	435c      	muls	r4, r3
 800164a:	436e      	muls	r6, r5
 800164c:	435d      	muls	r5, r3
 800164e:	0c3b      	lsrs	r3, r7, #16
 8001650:	4699      	mov	r9, r3
 8001652:	19a4      	adds	r4, r4, r6
 8001654:	444c      	add	r4, r9
 8001656:	4442      	add	r2, r8
 8001658:	9503      	str	r5, [sp, #12]
 800165a:	42a6      	cmp	r6, r4
 800165c:	d904      	bls.n	8001668 <__aeabi_dmul+0x284>
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	025b      	lsls	r3, r3, #9
 8001662:	4698      	mov	r8, r3
 8001664:	4445      	add	r5, r8
 8001666:	9503      	str	r5, [sp, #12]
 8001668:	9b02      	ldr	r3, [sp, #8]
 800166a:	043f      	lsls	r7, r7, #16
 800166c:	445b      	add	r3, fp
 800166e:	001e      	movs	r6, r3
 8001670:	4283      	cmp	r3, r0
 8001672:	4180      	sbcs	r0, r0
 8001674:	0423      	lsls	r3, r4, #16
 8001676:	4698      	mov	r8, r3
 8001678:	9b05      	ldr	r3, [sp, #20]
 800167a:	0c3f      	lsrs	r7, r7, #16
 800167c:	4447      	add	r7, r8
 800167e:	4698      	mov	r8, r3
 8001680:	1876      	adds	r6, r6, r1
 8001682:	428e      	cmp	r6, r1
 8001684:	4189      	sbcs	r1, r1
 8001686:	4447      	add	r7, r8
 8001688:	4240      	negs	r0, r0
 800168a:	183d      	adds	r5, r7, r0
 800168c:	46a8      	mov	r8, r5
 800168e:	4693      	mov	fp, r2
 8001690:	4249      	negs	r1, r1
 8001692:	468a      	mov	sl, r1
 8001694:	44c3      	add	fp, r8
 8001696:	429f      	cmp	r7, r3
 8001698:	41bf      	sbcs	r7, r7
 800169a:	4580      	cmp	r8, r0
 800169c:	4180      	sbcs	r0, r0
 800169e:	9b03      	ldr	r3, [sp, #12]
 80016a0:	44da      	add	sl, fp
 80016a2:	4698      	mov	r8, r3
 80016a4:	4653      	mov	r3, sl
 80016a6:	4240      	negs	r0, r0
 80016a8:	427f      	negs	r7, r7
 80016aa:	4307      	orrs	r7, r0
 80016ac:	0c24      	lsrs	r4, r4, #16
 80016ae:	4593      	cmp	fp, r2
 80016b0:	4192      	sbcs	r2, r2
 80016b2:	458a      	cmp	sl, r1
 80016b4:	4189      	sbcs	r1, r1
 80016b6:	193f      	adds	r7, r7, r4
 80016b8:	0ddc      	lsrs	r4, r3, #23
 80016ba:	9b04      	ldr	r3, [sp, #16]
 80016bc:	0275      	lsls	r5, r6, #9
 80016be:	431d      	orrs	r5, r3
 80016c0:	1e68      	subs	r0, r5, #1
 80016c2:	4185      	sbcs	r5, r0
 80016c4:	4653      	mov	r3, sl
 80016c6:	4252      	negs	r2, r2
 80016c8:	4249      	negs	r1, r1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	18bf      	adds	r7, r7, r2
 80016ce:	4447      	add	r7, r8
 80016d0:	0df6      	lsrs	r6, r6, #23
 80016d2:	027f      	lsls	r7, r7, #9
 80016d4:	4335      	orrs	r5, r6
 80016d6:	025a      	lsls	r2, r3, #9
 80016d8:	433c      	orrs	r4, r7
 80016da:	4315      	orrs	r5, r2
 80016dc:	01fb      	lsls	r3, r7, #7
 80016de:	d400      	bmi.n	80016e2 <__aeabi_dmul+0x2fe>
 80016e0:	e0c1      	b.n	8001866 <__aeabi_dmul+0x482>
 80016e2:	2101      	movs	r1, #1
 80016e4:	086a      	lsrs	r2, r5, #1
 80016e6:	400d      	ands	r5, r1
 80016e8:	4315      	orrs	r5, r2
 80016ea:	07e2      	lsls	r2, r4, #31
 80016ec:	4315      	orrs	r5, r2
 80016ee:	0864      	lsrs	r4, r4, #1
 80016f0:	4926      	ldr	r1, [pc, #152]	; (800178c <__aeabi_dmul+0x3a8>)
 80016f2:	4461      	add	r1, ip
 80016f4:	2900      	cmp	r1, #0
 80016f6:	dd56      	ble.n	80017a6 <__aeabi_dmul+0x3c2>
 80016f8:	076b      	lsls	r3, r5, #29
 80016fa:	d009      	beq.n	8001710 <__aeabi_dmul+0x32c>
 80016fc:	220f      	movs	r2, #15
 80016fe:	402a      	ands	r2, r5
 8001700:	2a04      	cmp	r2, #4
 8001702:	d005      	beq.n	8001710 <__aeabi_dmul+0x32c>
 8001704:	1d2a      	adds	r2, r5, #4
 8001706:	42aa      	cmp	r2, r5
 8001708:	41ad      	sbcs	r5, r5
 800170a:	426d      	negs	r5, r5
 800170c:	1964      	adds	r4, r4, r5
 800170e:	0015      	movs	r5, r2
 8001710:	01e3      	lsls	r3, r4, #7
 8001712:	d504      	bpl.n	800171e <__aeabi_dmul+0x33a>
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <__aeabi_dmul+0x3ac>)
 8001718:	00c9      	lsls	r1, r1, #3
 800171a:	4014      	ands	r4, r2
 800171c:	4461      	add	r1, ip
 800171e:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <__aeabi_dmul+0x3b0>)
 8001720:	4291      	cmp	r1, r2
 8001722:	dd00      	ble.n	8001726 <__aeabi_dmul+0x342>
 8001724:	e724      	b.n	8001570 <__aeabi_dmul+0x18c>
 8001726:	0762      	lsls	r2, r4, #29
 8001728:	08ed      	lsrs	r5, r5, #3
 800172a:	0264      	lsls	r4, r4, #9
 800172c:	0549      	lsls	r1, r1, #21
 800172e:	4315      	orrs	r5, r2
 8001730:	0b24      	lsrs	r4, r4, #12
 8001732:	0d4a      	lsrs	r2, r1, #21
 8001734:	e6c6      	b.n	80014c4 <__aeabi_dmul+0xe0>
 8001736:	9701      	str	r7, [sp, #4]
 8001738:	e6b8      	b.n	80014ac <__aeabi_dmul+0xc8>
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <__aeabi_dmul+0x398>)
 800173c:	2003      	movs	r0, #3
 800173e:	4694      	mov	ip, r2
 8001740:	4463      	add	r3, ip
 8001742:	464a      	mov	r2, r9
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2303      	movs	r3, #3
 8001748:	431a      	orrs	r2, r3
 800174a:	4691      	mov	r9, r2
 800174c:	4652      	mov	r2, sl
 800174e:	e68a      	b.n	8001466 <__aeabi_dmul+0x82>
 8001750:	4649      	mov	r1, r9
 8001752:	2301      	movs	r3, #1
 8001754:	4319      	orrs	r1, r3
 8001756:	4689      	mov	r9, r1
 8001758:	2600      	movs	r6, #0
 800175a:	2001      	movs	r0, #1
 800175c:	e683      	b.n	8001466 <__aeabi_dmul+0x82>
 800175e:	220c      	movs	r2, #12
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	2303      	movs	r3, #3
 8001764:	0005      	movs	r5, r0
 8001766:	4691      	mov	r9, r2
 8001768:	469b      	mov	fp, r3
 800176a:	e65e      	b.n	800142a <__aeabi_dmul+0x46>
 800176c:	2304      	movs	r3, #4
 800176e:	4699      	mov	r9, r3
 8001770:	2300      	movs	r3, #0
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	2400      	movs	r4, #0
 8001778:	469b      	mov	fp, r3
 800177a:	e656      	b.n	800142a <__aeabi_dmul+0x46>
 800177c:	000007ff 	.word	0x000007ff
 8001780:	fffffc01 	.word	0xfffffc01
 8001784:	08008470 	.word	0x08008470
 8001788:	fffffc0d 	.word	0xfffffc0d
 800178c:	000003ff 	.word	0x000003ff
 8001790:	feffffff 	.word	0xfeffffff
 8001794:	000007fe 	.word	0x000007fe
 8001798:	2300      	movs	r3, #0
 800179a:	2480      	movs	r4, #128	; 0x80
 800179c:	2500      	movs	r5, #0
 800179e:	4a44      	ldr	r2, [pc, #272]	; (80018b0 <__aeabi_dmul+0x4cc>)
 80017a0:	9301      	str	r3, [sp, #4]
 80017a2:	0324      	lsls	r4, r4, #12
 80017a4:	e68e      	b.n	80014c4 <__aeabi_dmul+0xe0>
 80017a6:	2001      	movs	r0, #1
 80017a8:	1a40      	subs	r0, r0, r1
 80017aa:	2838      	cmp	r0, #56	; 0x38
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dmul+0x3cc>
 80017ae:	e686      	b.n	80014be <__aeabi_dmul+0xda>
 80017b0:	281f      	cmp	r0, #31
 80017b2:	dd5b      	ble.n	800186c <__aeabi_dmul+0x488>
 80017b4:	221f      	movs	r2, #31
 80017b6:	0023      	movs	r3, r4
 80017b8:	4252      	negs	r2, r2
 80017ba:	1a51      	subs	r1, r2, r1
 80017bc:	40cb      	lsrs	r3, r1
 80017be:	0019      	movs	r1, r3
 80017c0:	2820      	cmp	r0, #32
 80017c2:	d003      	beq.n	80017cc <__aeabi_dmul+0x3e8>
 80017c4:	4a3b      	ldr	r2, [pc, #236]	; (80018b4 <__aeabi_dmul+0x4d0>)
 80017c6:	4462      	add	r2, ip
 80017c8:	4094      	lsls	r4, r2
 80017ca:	4325      	orrs	r5, r4
 80017cc:	1e6a      	subs	r2, r5, #1
 80017ce:	4195      	sbcs	r5, r2
 80017d0:	002a      	movs	r2, r5
 80017d2:	430a      	orrs	r2, r1
 80017d4:	2107      	movs	r1, #7
 80017d6:	000d      	movs	r5, r1
 80017d8:	2400      	movs	r4, #0
 80017da:	4015      	ands	r5, r2
 80017dc:	4211      	tst	r1, r2
 80017de:	d05b      	beq.n	8001898 <__aeabi_dmul+0x4b4>
 80017e0:	210f      	movs	r1, #15
 80017e2:	2400      	movs	r4, #0
 80017e4:	4011      	ands	r1, r2
 80017e6:	2904      	cmp	r1, #4
 80017e8:	d053      	beq.n	8001892 <__aeabi_dmul+0x4ae>
 80017ea:	1d11      	adds	r1, r2, #4
 80017ec:	4291      	cmp	r1, r2
 80017ee:	4192      	sbcs	r2, r2
 80017f0:	4252      	negs	r2, r2
 80017f2:	18a4      	adds	r4, r4, r2
 80017f4:	000a      	movs	r2, r1
 80017f6:	0223      	lsls	r3, r4, #8
 80017f8:	d54b      	bpl.n	8001892 <__aeabi_dmul+0x4ae>
 80017fa:	2201      	movs	r2, #1
 80017fc:	2400      	movs	r4, #0
 80017fe:	2500      	movs	r5, #0
 8001800:	e660      	b.n	80014c4 <__aeabi_dmul+0xe0>
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	031b      	lsls	r3, r3, #12
 8001806:	421c      	tst	r4, r3
 8001808:	d009      	beq.n	800181e <__aeabi_dmul+0x43a>
 800180a:	421e      	tst	r6, r3
 800180c:	d107      	bne.n	800181e <__aeabi_dmul+0x43a>
 800180e:	4333      	orrs	r3, r6
 8001810:	031c      	lsls	r4, r3, #12
 8001812:	4643      	mov	r3, r8
 8001814:	0015      	movs	r5, r2
 8001816:	0b24      	lsrs	r4, r4, #12
 8001818:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <__aeabi_dmul+0x4cc>)
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	e652      	b.n	80014c4 <__aeabi_dmul+0xe0>
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	0312      	lsls	r2, r2, #12
 8001822:	4314      	orrs	r4, r2
 8001824:	0324      	lsls	r4, r4, #12
 8001826:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <__aeabi_dmul+0x4cc>)
 8001828:	0b24      	lsrs	r4, r4, #12
 800182a:	9701      	str	r7, [sp, #4]
 800182c:	e64a      	b.n	80014c4 <__aeabi_dmul+0xe0>
 800182e:	f000 fccd 	bl	80021cc <__clzsi2>
 8001832:	0003      	movs	r3, r0
 8001834:	001a      	movs	r2, r3
 8001836:	3215      	adds	r2, #21
 8001838:	3020      	adds	r0, #32
 800183a:	2a1c      	cmp	r2, #28
 800183c:	dc00      	bgt.n	8001840 <__aeabi_dmul+0x45c>
 800183e:	e684      	b.n	800154a <__aeabi_dmul+0x166>
 8001840:	4656      	mov	r6, sl
 8001842:	3b08      	subs	r3, #8
 8001844:	2200      	movs	r2, #0
 8001846:	409e      	lsls	r6, r3
 8001848:	e689      	b.n	800155e <__aeabi_dmul+0x17a>
 800184a:	f000 fcbf 	bl	80021cc <__clzsi2>
 800184e:	0001      	movs	r1, r0
 8001850:	0002      	movs	r2, r0
 8001852:	3115      	adds	r1, #21
 8001854:	3220      	adds	r2, #32
 8001856:	291c      	cmp	r1, #28
 8001858:	dc00      	bgt.n	800185c <__aeabi_dmul+0x478>
 800185a:	e64e      	b.n	80014fa <__aeabi_dmul+0x116>
 800185c:	0034      	movs	r4, r6
 800185e:	3808      	subs	r0, #8
 8001860:	2500      	movs	r5, #0
 8001862:	4084      	lsls	r4, r0
 8001864:	e653      	b.n	800150e <__aeabi_dmul+0x12a>
 8001866:	9b00      	ldr	r3, [sp, #0]
 8001868:	469c      	mov	ip, r3
 800186a:	e741      	b.n	80016f0 <__aeabi_dmul+0x30c>
 800186c:	4912      	ldr	r1, [pc, #72]	; (80018b8 <__aeabi_dmul+0x4d4>)
 800186e:	0022      	movs	r2, r4
 8001870:	4461      	add	r1, ip
 8001872:	002e      	movs	r6, r5
 8001874:	408d      	lsls	r5, r1
 8001876:	408a      	lsls	r2, r1
 8001878:	40c6      	lsrs	r6, r0
 800187a:	1e69      	subs	r1, r5, #1
 800187c:	418d      	sbcs	r5, r1
 800187e:	4332      	orrs	r2, r6
 8001880:	432a      	orrs	r2, r5
 8001882:	40c4      	lsrs	r4, r0
 8001884:	0753      	lsls	r3, r2, #29
 8001886:	d0b6      	beq.n	80017f6 <__aeabi_dmul+0x412>
 8001888:	210f      	movs	r1, #15
 800188a:	4011      	ands	r1, r2
 800188c:	2904      	cmp	r1, #4
 800188e:	d1ac      	bne.n	80017ea <__aeabi_dmul+0x406>
 8001890:	e7b1      	b.n	80017f6 <__aeabi_dmul+0x412>
 8001892:	0765      	lsls	r5, r4, #29
 8001894:	0264      	lsls	r4, r4, #9
 8001896:	0b24      	lsrs	r4, r4, #12
 8001898:	08d2      	lsrs	r2, r2, #3
 800189a:	4315      	orrs	r5, r2
 800189c:	2200      	movs	r2, #0
 800189e:	e611      	b.n	80014c4 <__aeabi_dmul+0xe0>
 80018a0:	2280      	movs	r2, #128	; 0x80
 80018a2:	0312      	lsls	r2, r2, #12
 80018a4:	4314      	orrs	r4, r2
 80018a6:	0324      	lsls	r4, r4, #12
 80018a8:	4a01      	ldr	r2, [pc, #4]	; (80018b0 <__aeabi_dmul+0x4cc>)
 80018aa:	0b24      	lsrs	r4, r4, #12
 80018ac:	e60a      	b.n	80014c4 <__aeabi_dmul+0xe0>
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	000007ff 	.word	0x000007ff
 80018b4:	0000043e 	.word	0x0000043e
 80018b8:	0000041e 	.word	0x0000041e

080018bc <__aeabi_dsub>:
 80018bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018be:	4657      	mov	r7, sl
 80018c0:	464e      	mov	r6, r9
 80018c2:	4645      	mov	r5, r8
 80018c4:	46de      	mov	lr, fp
 80018c6:	0004      	movs	r4, r0
 80018c8:	b5e0      	push	{r5, r6, r7, lr}
 80018ca:	001f      	movs	r7, r3
 80018cc:	0010      	movs	r0, r2
 80018ce:	030b      	lsls	r3, r1, #12
 80018d0:	0f62      	lsrs	r2, r4, #29
 80018d2:	004e      	lsls	r6, r1, #1
 80018d4:	0fcd      	lsrs	r5, r1, #31
 80018d6:	0a5b      	lsrs	r3, r3, #9
 80018d8:	0339      	lsls	r1, r7, #12
 80018da:	4313      	orrs	r3, r2
 80018dc:	0a49      	lsrs	r1, r1, #9
 80018de:	00e2      	lsls	r2, r4, #3
 80018e0:	0f44      	lsrs	r4, r0, #29
 80018e2:	4321      	orrs	r1, r4
 80018e4:	4cc2      	ldr	r4, [pc, #776]	; (8001bf0 <__aeabi_dsub+0x334>)
 80018e6:	4691      	mov	r9, r2
 80018e8:	4692      	mov	sl, r2
 80018ea:	00c0      	lsls	r0, r0, #3
 80018ec:	007a      	lsls	r2, r7, #1
 80018ee:	4680      	mov	r8, r0
 80018f0:	0d76      	lsrs	r6, r6, #21
 80018f2:	0d52      	lsrs	r2, r2, #21
 80018f4:	0fff      	lsrs	r7, r7, #31
 80018f6:	42a2      	cmp	r2, r4
 80018f8:	d100      	bne.n	80018fc <__aeabi_dsub+0x40>
 80018fa:	e0b4      	b.n	8001a66 <__aeabi_dsub+0x1aa>
 80018fc:	2401      	movs	r4, #1
 80018fe:	4067      	eors	r7, r4
 8001900:	46bb      	mov	fp, r7
 8001902:	42bd      	cmp	r5, r7
 8001904:	d100      	bne.n	8001908 <__aeabi_dsub+0x4c>
 8001906:	e088      	b.n	8001a1a <__aeabi_dsub+0x15e>
 8001908:	1ab4      	subs	r4, r6, r2
 800190a:	46a4      	mov	ip, r4
 800190c:	2c00      	cmp	r4, #0
 800190e:	dc00      	bgt.n	8001912 <__aeabi_dsub+0x56>
 8001910:	e0b2      	b.n	8001a78 <__aeabi_dsub+0x1bc>
 8001912:	2a00      	cmp	r2, #0
 8001914:	d100      	bne.n	8001918 <__aeabi_dsub+0x5c>
 8001916:	e0c5      	b.n	8001aa4 <__aeabi_dsub+0x1e8>
 8001918:	4ab5      	ldr	r2, [pc, #724]	; (8001bf0 <__aeabi_dsub+0x334>)
 800191a:	4296      	cmp	r6, r2
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x64>
 800191e:	e28b      	b.n	8001e38 <__aeabi_dsub+0x57c>
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	0412      	lsls	r2, r2, #16
 8001924:	4311      	orrs	r1, r2
 8001926:	4662      	mov	r2, ip
 8001928:	2a38      	cmp	r2, #56	; 0x38
 800192a:	dd00      	ble.n	800192e <__aeabi_dsub+0x72>
 800192c:	e1a1      	b.n	8001c72 <__aeabi_dsub+0x3b6>
 800192e:	2a1f      	cmp	r2, #31
 8001930:	dd00      	ble.n	8001934 <__aeabi_dsub+0x78>
 8001932:	e216      	b.n	8001d62 <__aeabi_dsub+0x4a6>
 8001934:	2720      	movs	r7, #32
 8001936:	000c      	movs	r4, r1
 8001938:	1abf      	subs	r7, r7, r2
 800193a:	40bc      	lsls	r4, r7
 800193c:	0002      	movs	r2, r0
 800193e:	46a0      	mov	r8, r4
 8001940:	4664      	mov	r4, ip
 8001942:	40b8      	lsls	r0, r7
 8001944:	40e2      	lsrs	r2, r4
 8001946:	4644      	mov	r4, r8
 8001948:	4314      	orrs	r4, r2
 800194a:	0002      	movs	r2, r0
 800194c:	1e50      	subs	r0, r2, #1
 800194e:	4182      	sbcs	r2, r0
 8001950:	4660      	mov	r0, ip
 8001952:	40c1      	lsrs	r1, r0
 8001954:	4322      	orrs	r2, r4
 8001956:	1a5b      	subs	r3, r3, r1
 8001958:	4649      	mov	r1, r9
 800195a:	1a8c      	subs	r4, r1, r2
 800195c:	45a1      	cmp	r9, r4
 800195e:	4192      	sbcs	r2, r2
 8001960:	4252      	negs	r2, r2
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	4698      	mov	r8, r3
 8001966:	4643      	mov	r3, r8
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	d400      	bmi.n	800196e <__aeabi_dsub+0xb2>
 800196c:	e117      	b.n	8001b9e <__aeabi_dsub+0x2e2>
 800196e:	4643      	mov	r3, r8
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	4698      	mov	r8, r3
 8001976:	4643      	mov	r3, r8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d100      	bne.n	800197e <__aeabi_dsub+0xc2>
 800197c:	e16c      	b.n	8001c58 <__aeabi_dsub+0x39c>
 800197e:	4640      	mov	r0, r8
 8001980:	f000 fc24 	bl	80021cc <__clzsi2>
 8001984:	0002      	movs	r2, r0
 8001986:	3a08      	subs	r2, #8
 8001988:	2120      	movs	r1, #32
 800198a:	0020      	movs	r0, r4
 800198c:	4643      	mov	r3, r8
 800198e:	1a89      	subs	r1, r1, r2
 8001990:	4093      	lsls	r3, r2
 8001992:	40c8      	lsrs	r0, r1
 8001994:	4094      	lsls	r4, r2
 8001996:	4303      	orrs	r3, r0
 8001998:	4296      	cmp	r6, r2
 800199a:	dd00      	ble.n	800199e <__aeabi_dsub+0xe2>
 800199c:	e157      	b.n	8001c4e <__aeabi_dsub+0x392>
 800199e:	1b96      	subs	r6, r2, r6
 80019a0:	1c71      	adds	r1, r6, #1
 80019a2:	291f      	cmp	r1, #31
 80019a4:	dd00      	ble.n	80019a8 <__aeabi_dsub+0xec>
 80019a6:	e1cb      	b.n	8001d40 <__aeabi_dsub+0x484>
 80019a8:	2220      	movs	r2, #32
 80019aa:	0018      	movs	r0, r3
 80019ac:	0026      	movs	r6, r4
 80019ae:	1a52      	subs	r2, r2, r1
 80019b0:	4094      	lsls	r4, r2
 80019b2:	4090      	lsls	r0, r2
 80019b4:	40ce      	lsrs	r6, r1
 80019b6:	40cb      	lsrs	r3, r1
 80019b8:	1e62      	subs	r2, r4, #1
 80019ba:	4194      	sbcs	r4, r2
 80019bc:	4330      	orrs	r0, r6
 80019be:	4698      	mov	r8, r3
 80019c0:	2600      	movs	r6, #0
 80019c2:	4304      	orrs	r4, r0
 80019c4:	0763      	lsls	r3, r4, #29
 80019c6:	d009      	beq.n	80019dc <__aeabi_dsub+0x120>
 80019c8:	230f      	movs	r3, #15
 80019ca:	4023      	ands	r3, r4
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d005      	beq.n	80019dc <__aeabi_dsub+0x120>
 80019d0:	1d23      	adds	r3, r4, #4
 80019d2:	42a3      	cmp	r3, r4
 80019d4:	41a4      	sbcs	r4, r4
 80019d6:	4264      	negs	r4, r4
 80019d8:	44a0      	add	r8, r4
 80019da:	001c      	movs	r4, r3
 80019dc:	4643      	mov	r3, r8
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	d400      	bmi.n	80019e4 <__aeabi_dsub+0x128>
 80019e2:	e0df      	b.n	8001ba4 <__aeabi_dsub+0x2e8>
 80019e4:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <__aeabi_dsub+0x334>)
 80019e6:	3601      	adds	r6, #1
 80019e8:	429e      	cmp	r6, r3
 80019ea:	d100      	bne.n	80019ee <__aeabi_dsub+0x132>
 80019ec:	e0fb      	b.n	8001be6 <__aeabi_dsub+0x32a>
 80019ee:	4642      	mov	r2, r8
 80019f0:	4b80      	ldr	r3, [pc, #512]	; (8001bf4 <__aeabi_dsub+0x338>)
 80019f2:	08e4      	lsrs	r4, r4, #3
 80019f4:	401a      	ands	r2, r3
 80019f6:	0013      	movs	r3, r2
 80019f8:	0571      	lsls	r1, r6, #21
 80019fa:	0752      	lsls	r2, r2, #29
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	4322      	orrs	r2, r4
 8001a00:	0b1b      	lsrs	r3, r3, #12
 8001a02:	0d49      	lsrs	r1, r1, #21
 8001a04:	0509      	lsls	r1, r1, #20
 8001a06:	07ed      	lsls	r5, r5, #31
 8001a08:	4319      	orrs	r1, r3
 8001a0a:	4329      	orrs	r1, r5
 8001a0c:	0010      	movs	r0, r2
 8001a0e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a10:	46bb      	mov	fp, r7
 8001a12:	46b2      	mov	sl, r6
 8001a14:	46a9      	mov	r9, r5
 8001a16:	46a0      	mov	r8, r4
 8001a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a1a:	1ab4      	subs	r4, r6, r2
 8001a1c:	46a4      	mov	ip, r4
 8001a1e:	2c00      	cmp	r4, #0
 8001a20:	dd58      	ble.n	8001ad4 <__aeabi_dsub+0x218>
 8001a22:	2a00      	cmp	r2, #0
 8001a24:	d100      	bne.n	8001a28 <__aeabi_dsub+0x16c>
 8001a26:	e09e      	b.n	8001b66 <__aeabi_dsub+0x2aa>
 8001a28:	4a71      	ldr	r2, [pc, #452]	; (8001bf0 <__aeabi_dsub+0x334>)
 8001a2a:	4296      	cmp	r6, r2
 8001a2c:	d100      	bne.n	8001a30 <__aeabi_dsub+0x174>
 8001a2e:	e13b      	b.n	8001ca8 <__aeabi_dsub+0x3ec>
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	0412      	lsls	r2, r2, #16
 8001a34:	4311      	orrs	r1, r2
 8001a36:	4662      	mov	r2, ip
 8001a38:	2a38      	cmp	r2, #56	; 0x38
 8001a3a:	dd00      	ble.n	8001a3e <__aeabi_dsub+0x182>
 8001a3c:	e0c1      	b.n	8001bc2 <__aeabi_dsub+0x306>
 8001a3e:	2a1f      	cmp	r2, #31
 8001a40:	dc00      	bgt.n	8001a44 <__aeabi_dsub+0x188>
 8001a42:	e1bb      	b.n	8001dbc <__aeabi_dsub+0x500>
 8001a44:	000c      	movs	r4, r1
 8001a46:	3a20      	subs	r2, #32
 8001a48:	40d4      	lsrs	r4, r2
 8001a4a:	0022      	movs	r2, r4
 8001a4c:	4664      	mov	r4, ip
 8001a4e:	2c20      	cmp	r4, #32
 8001a50:	d004      	beq.n	8001a5c <__aeabi_dsub+0x1a0>
 8001a52:	2740      	movs	r7, #64	; 0x40
 8001a54:	1b3f      	subs	r7, r7, r4
 8001a56:	40b9      	lsls	r1, r7
 8001a58:	4308      	orrs	r0, r1
 8001a5a:	4680      	mov	r8, r0
 8001a5c:	4644      	mov	r4, r8
 8001a5e:	1e61      	subs	r1, r4, #1
 8001a60:	418c      	sbcs	r4, r1
 8001a62:	4314      	orrs	r4, r2
 8001a64:	e0b1      	b.n	8001bca <__aeabi_dsub+0x30e>
 8001a66:	000c      	movs	r4, r1
 8001a68:	4304      	orrs	r4, r0
 8001a6a:	d02a      	beq.n	8001ac2 <__aeabi_dsub+0x206>
 8001a6c:	46bb      	mov	fp, r7
 8001a6e:	42bd      	cmp	r5, r7
 8001a70:	d02d      	beq.n	8001ace <__aeabi_dsub+0x212>
 8001a72:	4c61      	ldr	r4, [pc, #388]	; (8001bf8 <__aeabi_dsub+0x33c>)
 8001a74:	46a4      	mov	ip, r4
 8001a76:	44b4      	add	ip, r6
 8001a78:	4664      	mov	r4, ip
 8001a7a:	2c00      	cmp	r4, #0
 8001a7c:	d05c      	beq.n	8001b38 <__aeabi_dsub+0x27c>
 8001a7e:	1b94      	subs	r4, r2, r6
 8001a80:	46a4      	mov	ip, r4
 8001a82:	2e00      	cmp	r6, #0
 8001a84:	d000      	beq.n	8001a88 <__aeabi_dsub+0x1cc>
 8001a86:	e115      	b.n	8001cb4 <__aeabi_dsub+0x3f8>
 8001a88:	464d      	mov	r5, r9
 8001a8a:	431d      	orrs	r5, r3
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dsub+0x1d4>
 8001a8e:	e1c3      	b.n	8001e18 <__aeabi_dsub+0x55c>
 8001a90:	1e65      	subs	r5, r4, #1
 8001a92:	2c01      	cmp	r4, #1
 8001a94:	d100      	bne.n	8001a98 <__aeabi_dsub+0x1dc>
 8001a96:	e20c      	b.n	8001eb2 <__aeabi_dsub+0x5f6>
 8001a98:	4e55      	ldr	r6, [pc, #340]	; (8001bf0 <__aeabi_dsub+0x334>)
 8001a9a:	42b4      	cmp	r4, r6
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x1e4>
 8001a9e:	e1f8      	b.n	8001e92 <__aeabi_dsub+0x5d6>
 8001aa0:	46ac      	mov	ip, r5
 8001aa2:	e10e      	b.n	8001cc2 <__aeabi_dsub+0x406>
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	4302      	orrs	r2, r0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x1f0>
 8001aaa:	e136      	b.n	8001d1a <__aeabi_dsub+0x45e>
 8001aac:	0022      	movs	r2, r4
 8001aae:	3a01      	subs	r2, #1
 8001ab0:	2c01      	cmp	r4, #1
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x1fa>
 8001ab4:	e1c6      	b.n	8001e44 <__aeabi_dsub+0x588>
 8001ab6:	4c4e      	ldr	r4, [pc, #312]	; (8001bf0 <__aeabi_dsub+0x334>)
 8001ab8:	45a4      	cmp	ip, r4
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x202>
 8001abc:	e0f4      	b.n	8001ca8 <__aeabi_dsub+0x3ec>
 8001abe:	4694      	mov	ip, r2
 8001ac0:	e731      	b.n	8001926 <__aeabi_dsub+0x6a>
 8001ac2:	2401      	movs	r4, #1
 8001ac4:	4067      	eors	r7, r4
 8001ac6:	46bb      	mov	fp, r7
 8001ac8:	42bd      	cmp	r5, r7
 8001aca:	d000      	beq.n	8001ace <__aeabi_dsub+0x212>
 8001acc:	e71c      	b.n	8001908 <__aeabi_dsub+0x4c>
 8001ace:	4c4a      	ldr	r4, [pc, #296]	; (8001bf8 <__aeabi_dsub+0x33c>)
 8001ad0:	46a4      	mov	ip, r4
 8001ad2:	44b4      	add	ip, r6
 8001ad4:	4664      	mov	r4, ip
 8001ad6:	2c00      	cmp	r4, #0
 8001ad8:	d100      	bne.n	8001adc <__aeabi_dsub+0x220>
 8001ada:	e0cf      	b.n	8001c7c <__aeabi_dsub+0x3c0>
 8001adc:	1b94      	subs	r4, r2, r6
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	2e00      	cmp	r6, #0
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x22a>
 8001ae4:	e15c      	b.n	8001da0 <__aeabi_dsub+0x4e4>
 8001ae6:	4e42      	ldr	r6, [pc, #264]	; (8001bf0 <__aeabi_dsub+0x334>)
 8001ae8:	42b2      	cmp	r2, r6
 8001aea:	d100      	bne.n	8001aee <__aeabi_dsub+0x232>
 8001aec:	e1ec      	b.n	8001ec8 <__aeabi_dsub+0x60c>
 8001aee:	2680      	movs	r6, #128	; 0x80
 8001af0:	0436      	lsls	r6, r6, #16
 8001af2:	4333      	orrs	r3, r6
 8001af4:	4664      	mov	r4, ip
 8001af6:	2c38      	cmp	r4, #56	; 0x38
 8001af8:	dd00      	ble.n	8001afc <__aeabi_dsub+0x240>
 8001afa:	e1b3      	b.n	8001e64 <__aeabi_dsub+0x5a8>
 8001afc:	2c1f      	cmp	r4, #31
 8001afe:	dd00      	ble.n	8001b02 <__aeabi_dsub+0x246>
 8001b00:	e238      	b.n	8001f74 <__aeabi_dsub+0x6b8>
 8001b02:	2620      	movs	r6, #32
 8001b04:	1b36      	subs	r6, r6, r4
 8001b06:	001c      	movs	r4, r3
 8001b08:	40b4      	lsls	r4, r6
 8001b0a:	464f      	mov	r7, r9
 8001b0c:	46a0      	mov	r8, r4
 8001b0e:	4664      	mov	r4, ip
 8001b10:	40e7      	lsrs	r7, r4
 8001b12:	4644      	mov	r4, r8
 8001b14:	433c      	orrs	r4, r7
 8001b16:	464f      	mov	r7, r9
 8001b18:	40b7      	lsls	r7, r6
 8001b1a:	003e      	movs	r6, r7
 8001b1c:	1e77      	subs	r7, r6, #1
 8001b1e:	41be      	sbcs	r6, r7
 8001b20:	4334      	orrs	r4, r6
 8001b22:	4666      	mov	r6, ip
 8001b24:	40f3      	lsrs	r3, r6
 8001b26:	18c9      	adds	r1, r1, r3
 8001b28:	1824      	adds	r4, r4, r0
 8001b2a:	4284      	cmp	r4, r0
 8001b2c:	419b      	sbcs	r3, r3
 8001b2e:	425b      	negs	r3, r3
 8001b30:	4698      	mov	r8, r3
 8001b32:	0016      	movs	r6, r2
 8001b34:	4488      	add	r8, r1
 8001b36:	e04e      	b.n	8001bd6 <__aeabi_dsub+0x31a>
 8001b38:	4a30      	ldr	r2, [pc, #192]	; (8001bfc <__aeabi_dsub+0x340>)
 8001b3a:	1c74      	adds	r4, r6, #1
 8001b3c:	4214      	tst	r4, r2
 8001b3e:	d000      	beq.n	8001b42 <__aeabi_dsub+0x286>
 8001b40:	e0d6      	b.n	8001cf0 <__aeabi_dsub+0x434>
 8001b42:	464a      	mov	r2, r9
 8001b44:	431a      	orrs	r2, r3
 8001b46:	2e00      	cmp	r6, #0
 8001b48:	d000      	beq.n	8001b4c <__aeabi_dsub+0x290>
 8001b4a:	e15b      	b.n	8001e04 <__aeabi_dsub+0x548>
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_dsub+0x296>
 8001b50:	e1a5      	b.n	8001e9e <__aeabi_dsub+0x5e2>
 8001b52:	000a      	movs	r2, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	d000      	beq.n	8001b5a <__aeabi_dsub+0x29e>
 8001b58:	e1bb      	b.n	8001ed2 <__aeabi_dsub+0x616>
 8001b5a:	464a      	mov	r2, r9
 8001b5c:	0759      	lsls	r1, r3, #29
 8001b5e:	08d2      	lsrs	r2, r2, #3
 8001b60:	430a      	orrs	r2, r1
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	e027      	b.n	8001bb6 <__aeabi_dsub+0x2fa>
 8001b66:	000a      	movs	r2, r1
 8001b68:	4302      	orrs	r2, r0
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dsub+0x2b2>
 8001b6c:	e174      	b.n	8001e58 <__aeabi_dsub+0x59c>
 8001b6e:	0022      	movs	r2, r4
 8001b70:	3a01      	subs	r2, #1
 8001b72:	2c01      	cmp	r4, #1
 8001b74:	d005      	beq.n	8001b82 <__aeabi_dsub+0x2c6>
 8001b76:	4c1e      	ldr	r4, [pc, #120]	; (8001bf0 <__aeabi_dsub+0x334>)
 8001b78:	45a4      	cmp	ip, r4
 8001b7a:	d100      	bne.n	8001b7e <__aeabi_dsub+0x2c2>
 8001b7c:	e094      	b.n	8001ca8 <__aeabi_dsub+0x3ec>
 8001b7e:	4694      	mov	ip, r2
 8001b80:	e759      	b.n	8001a36 <__aeabi_dsub+0x17a>
 8001b82:	4448      	add	r0, r9
 8001b84:	4548      	cmp	r0, r9
 8001b86:	4192      	sbcs	r2, r2
 8001b88:	185b      	adds	r3, r3, r1
 8001b8a:	4698      	mov	r8, r3
 8001b8c:	0004      	movs	r4, r0
 8001b8e:	4252      	negs	r2, r2
 8001b90:	4490      	add	r8, r2
 8001b92:	4643      	mov	r3, r8
 8001b94:	2602      	movs	r6, #2
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	d500      	bpl.n	8001b9c <__aeabi_dsub+0x2e0>
 8001b9a:	e0c4      	b.n	8001d26 <__aeabi_dsub+0x46a>
 8001b9c:	3e01      	subs	r6, #1
 8001b9e:	0763      	lsls	r3, r4, #29
 8001ba0:	d000      	beq.n	8001ba4 <__aeabi_dsub+0x2e8>
 8001ba2:	e711      	b.n	80019c8 <__aeabi_dsub+0x10c>
 8001ba4:	4643      	mov	r3, r8
 8001ba6:	46b4      	mov	ip, r6
 8001ba8:	0759      	lsls	r1, r3, #29
 8001baa:	08e2      	lsrs	r2, r4, #3
 8001bac:	430a      	orrs	r2, r1
 8001bae:	08db      	lsrs	r3, r3, #3
 8001bb0:	490f      	ldr	r1, [pc, #60]	; (8001bf0 <__aeabi_dsub+0x334>)
 8001bb2:	458c      	cmp	ip, r1
 8001bb4:	d040      	beq.n	8001c38 <__aeabi_dsub+0x37c>
 8001bb6:	4661      	mov	r1, ip
 8001bb8:	031b      	lsls	r3, r3, #12
 8001bba:	0549      	lsls	r1, r1, #21
 8001bbc:	0b1b      	lsrs	r3, r3, #12
 8001bbe:	0d49      	lsrs	r1, r1, #21
 8001bc0:	e720      	b.n	8001a04 <__aeabi_dsub+0x148>
 8001bc2:	4301      	orrs	r1, r0
 8001bc4:	000c      	movs	r4, r1
 8001bc6:	1e61      	subs	r1, r4, #1
 8001bc8:	418c      	sbcs	r4, r1
 8001bca:	444c      	add	r4, r9
 8001bcc:	454c      	cmp	r4, r9
 8001bce:	4192      	sbcs	r2, r2
 8001bd0:	4252      	negs	r2, r2
 8001bd2:	4690      	mov	r8, r2
 8001bd4:	4498      	add	r8, r3
 8001bd6:	4643      	mov	r3, r8
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	d5e0      	bpl.n	8001b9e <__aeabi_dsub+0x2e2>
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <__aeabi_dsub+0x334>)
 8001bde:	3601      	adds	r6, #1
 8001be0:	429e      	cmp	r6, r3
 8001be2:	d000      	beq.n	8001be6 <__aeabi_dsub+0x32a>
 8001be4:	e09f      	b.n	8001d26 <__aeabi_dsub+0x46a>
 8001be6:	0031      	movs	r1, r6
 8001be8:	2300      	movs	r3, #0
 8001bea:	2200      	movs	r2, #0
 8001bec:	e70a      	b.n	8001a04 <__aeabi_dsub+0x148>
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	000007ff 	.word	0x000007ff
 8001bf4:	ff7fffff 	.word	0xff7fffff
 8001bf8:	fffff801 	.word	0xfffff801
 8001bfc:	000007fe 	.word	0x000007fe
 8001c00:	2a00      	cmp	r2, #0
 8001c02:	d100      	bne.n	8001c06 <__aeabi_dsub+0x34a>
 8001c04:	e160      	b.n	8001ec8 <__aeabi_dsub+0x60c>
 8001c06:	000a      	movs	r2, r1
 8001c08:	4302      	orrs	r2, r0
 8001c0a:	d04d      	beq.n	8001ca8 <__aeabi_dsub+0x3ec>
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	075c      	lsls	r4, r3, #29
 8001c10:	08d2      	lsrs	r2, r2, #3
 8001c12:	4322      	orrs	r2, r4
 8001c14:	2480      	movs	r4, #128	; 0x80
 8001c16:	08db      	lsrs	r3, r3, #3
 8001c18:	0324      	lsls	r4, r4, #12
 8001c1a:	4223      	tst	r3, r4
 8001c1c:	d007      	beq.n	8001c2e <__aeabi_dsub+0x372>
 8001c1e:	08ce      	lsrs	r6, r1, #3
 8001c20:	4226      	tst	r6, r4
 8001c22:	d104      	bne.n	8001c2e <__aeabi_dsub+0x372>
 8001c24:	465d      	mov	r5, fp
 8001c26:	0033      	movs	r3, r6
 8001c28:	08c2      	lsrs	r2, r0, #3
 8001c2a:	0749      	lsls	r1, r1, #29
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	0f51      	lsrs	r1, r2, #29
 8001c30:	00d2      	lsls	r2, r2, #3
 8001c32:	08d2      	lsrs	r2, r2, #3
 8001c34:	0749      	lsls	r1, r1, #29
 8001c36:	430a      	orrs	r2, r1
 8001c38:	0011      	movs	r1, r2
 8001c3a:	4319      	orrs	r1, r3
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x384>
 8001c3e:	e1c8      	b.n	8001fd2 <__aeabi_dsub+0x716>
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	0309      	lsls	r1, r1, #12
 8001c44:	430b      	orrs	r3, r1
 8001c46:	031b      	lsls	r3, r3, #12
 8001c48:	49d5      	ldr	r1, [pc, #852]	; (8001fa0 <__aeabi_dsub+0x6e4>)
 8001c4a:	0b1b      	lsrs	r3, r3, #12
 8001c4c:	e6da      	b.n	8001a04 <__aeabi_dsub+0x148>
 8001c4e:	49d5      	ldr	r1, [pc, #852]	; (8001fa4 <__aeabi_dsub+0x6e8>)
 8001c50:	1ab6      	subs	r6, r6, r2
 8001c52:	400b      	ands	r3, r1
 8001c54:	4698      	mov	r8, r3
 8001c56:	e6b5      	b.n	80019c4 <__aeabi_dsub+0x108>
 8001c58:	0020      	movs	r0, r4
 8001c5a:	f000 fab7 	bl	80021cc <__clzsi2>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	3218      	adds	r2, #24
 8001c62:	2a1f      	cmp	r2, #31
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_dsub+0x3ac>
 8001c66:	e68f      	b.n	8001988 <__aeabi_dsub+0xcc>
 8001c68:	0023      	movs	r3, r4
 8001c6a:	3808      	subs	r0, #8
 8001c6c:	4083      	lsls	r3, r0
 8001c6e:	2400      	movs	r4, #0
 8001c70:	e692      	b.n	8001998 <__aeabi_dsub+0xdc>
 8001c72:	4308      	orrs	r0, r1
 8001c74:	0002      	movs	r2, r0
 8001c76:	1e50      	subs	r0, r2, #1
 8001c78:	4182      	sbcs	r2, r0
 8001c7a:	e66d      	b.n	8001958 <__aeabi_dsub+0x9c>
 8001c7c:	4cca      	ldr	r4, [pc, #808]	; (8001fa8 <__aeabi_dsub+0x6ec>)
 8001c7e:	1c72      	adds	r2, r6, #1
 8001c80:	4222      	tst	r2, r4
 8001c82:	d000      	beq.n	8001c86 <__aeabi_dsub+0x3ca>
 8001c84:	e0ad      	b.n	8001de2 <__aeabi_dsub+0x526>
 8001c86:	464a      	mov	r2, r9
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d1b8      	bne.n	8001c00 <__aeabi_dsub+0x344>
 8001c8e:	2a00      	cmp	r2, #0
 8001c90:	d100      	bne.n	8001c94 <__aeabi_dsub+0x3d8>
 8001c92:	e158      	b.n	8001f46 <__aeabi_dsub+0x68a>
 8001c94:	000a      	movs	r2, r1
 8001c96:	4302      	orrs	r2, r0
 8001c98:	d000      	beq.n	8001c9c <__aeabi_dsub+0x3e0>
 8001c9a:	e159      	b.n	8001f50 <__aeabi_dsub+0x694>
 8001c9c:	464a      	mov	r2, r9
 8001c9e:	0759      	lsls	r1, r3, #29
 8001ca0:	08d2      	lsrs	r2, r2, #3
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	e786      	b.n	8001bb6 <__aeabi_dsub+0x2fa>
 8001ca8:	464a      	mov	r2, r9
 8001caa:	0759      	lsls	r1, r3, #29
 8001cac:	08d2      	lsrs	r2, r2, #3
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	e7c1      	b.n	8001c38 <__aeabi_dsub+0x37c>
 8001cb4:	4dba      	ldr	r5, [pc, #744]	; (8001fa0 <__aeabi_dsub+0x6e4>)
 8001cb6:	42aa      	cmp	r2, r5
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x400>
 8001cba:	e11e      	b.n	8001efa <__aeabi_dsub+0x63e>
 8001cbc:	2580      	movs	r5, #128	; 0x80
 8001cbe:	042d      	lsls	r5, r5, #16
 8001cc0:	432b      	orrs	r3, r5
 8001cc2:	4664      	mov	r4, ip
 8001cc4:	2c38      	cmp	r4, #56	; 0x38
 8001cc6:	dc5d      	bgt.n	8001d84 <__aeabi_dsub+0x4c8>
 8001cc8:	2c1f      	cmp	r4, #31
 8001cca:	dd00      	ble.n	8001cce <__aeabi_dsub+0x412>
 8001ccc:	e0d0      	b.n	8001e70 <__aeabi_dsub+0x5b4>
 8001cce:	2520      	movs	r5, #32
 8001cd0:	4667      	mov	r7, ip
 8001cd2:	1b2d      	subs	r5, r5, r4
 8001cd4:	464e      	mov	r6, r9
 8001cd6:	001c      	movs	r4, r3
 8001cd8:	40fe      	lsrs	r6, r7
 8001cda:	40ac      	lsls	r4, r5
 8001cdc:	4334      	orrs	r4, r6
 8001cde:	464e      	mov	r6, r9
 8001ce0:	40ae      	lsls	r6, r5
 8001ce2:	0035      	movs	r5, r6
 8001ce4:	40fb      	lsrs	r3, r7
 8001ce6:	1e6e      	subs	r6, r5, #1
 8001ce8:	41b5      	sbcs	r5, r6
 8001cea:	1ac9      	subs	r1, r1, r3
 8001cec:	432c      	orrs	r4, r5
 8001cee:	e04e      	b.n	8001d8e <__aeabi_dsub+0x4d2>
 8001cf0:	464a      	mov	r2, r9
 8001cf2:	1a14      	subs	r4, r2, r0
 8001cf4:	45a1      	cmp	r9, r4
 8001cf6:	4192      	sbcs	r2, r2
 8001cf8:	4252      	negs	r2, r2
 8001cfa:	4690      	mov	r8, r2
 8001cfc:	1a5f      	subs	r7, r3, r1
 8001cfe:	003a      	movs	r2, r7
 8001d00:	4647      	mov	r7, r8
 8001d02:	1bd2      	subs	r2, r2, r7
 8001d04:	4690      	mov	r8, r2
 8001d06:	0212      	lsls	r2, r2, #8
 8001d08:	d500      	bpl.n	8001d0c <__aeabi_dsub+0x450>
 8001d0a:	e08b      	b.n	8001e24 <__aeabi_dsub+0x568>
 8001d0c:	4642      	mov	r2, r8
 8001d0e:	4322      	orrs	r2, r4
 8001d10:	d000      	beq.n	8001d14 <__aeabi_dsub+0x458>
 8001d12:	e630      	b.n	8001976 <__aeabi_dsub+0xba>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2500      	movs	r5, #0
 8001d18:	e74d      	b.n	8001bb6 <__aeabi_dsub+0x2fa>
 8001d1a:	464a      	mov	r2, r9
 8001d1c:	0759      	lsls	r1, r3, #29
 8001d1e:	08d2      	lsrs	r2, r2, #3
 8001d20:	430a      	orrs	r2, r1
 8001d22:	08db      	lsrs	r3, r3, #3
 8001d24:	e744      	b.n	8001bb0 <__aeabi_dsub+0x2f4>
 8001d26:	4642      	mov	r2, r8
 8001d28:	4b9e      	ldr	r3, [pc, #632]	; (8001fa4 <__aeabi_dsub+0x6e8>)
 8001d2a:	0861      	lsrs	r1, r4, #1
 8001d2c:	401a      	ands	r2, r3
 8001d2e:	0013      	movs	r3, r2
 8001d30:	2201      	movs	r2, #1
 8001d32:	4014      	ands	r4, r2
 8001d34:	430c      	orrs	r4, r1
 8001d36:	07da      	lsls	r2, r3, #31
 8001d38:	085b      	lsrs	r3, r3, #1
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	4314      	orrs	r4, r2
 8001d3e:	e641      	b.n	80019c4 <__aeabi_dsub+0x108>
 8001d40:	001a      	movs	r2, r3
 8001d42:	3e1f      	subs	r6, #31
 8001d44:	40f2      	lsrs	r2, r6
 8001d46:	0016      	movs	r6, r2
 8001d48:	2920      	cmp	r1, #32
 8001d4a:	d003      	beq.n	8001d54 <__aeabi_dsub+0x498>
 8001d4c:	2240      	movs	r2, #64	; 0x40
 8001d4e:	1a51      	subs	r1, r2, r1
 8001d50:	408b      	lsls	r3, r1
 8001d52:	431c      	orrs	r4, r3
 8001d54:	1e62      	subs	r2, r4, #1
 8001d56:	4194      	sbcs	r4, r2
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4334      	orrs	r4, r6
 8001d5c:	4698      	mov	r8, r3
 8001d5e:	2600      	movs	r6, #0
 8001d60:	e71d      	b.n	8001b9e <__aeabi_dsub+0x2e2>
 8001d62:	000c      	movs	r4, r1
 8001d64:	3a20      	subs	r2, #32
 8001d66:	40d4      	lsrs	r4, r2
 8001d68:	0022      	movs	r2, r4
 8001d6a:	4664      	mov	r4, ip
 8001d6c:	2c20      	cmp	r4, #32
 8001d6e:	d004      	beq.n	8001d7a <__aeabi_dsub+0x4be>
 8001d70:	2740      	movs	r7, #64	; 0x40
 8001d72:	1b3f      	subs	r7, r7, r4
 8001d74:	40b9      	lsls	r1, r7
 8001d76:	4308      	orrs	r0, r1
 8001d78:	4680      	mov	r8, r0
 8001d7a:	4644      	mov	r4, r8
 8001d7c:	1e61      	subs	r1, r4, #1
 8001d7e:	418c      	sbcs	r4, r1
 8001d80:	4322      	orrs	r2, r4
 8001d82:	e5e9      	b.n	8001958 <__aeabi_dsub+0x9c>
 8001d84:	464c      	mov	r4, r9
 8001d86:	4323      	orrs	r3, r4
 8001d88:	001c      	movs	r4, r3
 8001d8a:	1e63      	subs	r3, r4, #1
 8001d8c:	419c      	sbcs	r4, r3
 8001d8e:	1b04      	subs	r4, r0, r4
 8001d90:	42a0      	cmp	r0, r4
 8001d92:	419b      	sbcs	r3, r3
 8001d94:	425b      	negs	r3, r3
 8001d96:	1acb      	subs	r3, r1, r3
 8001d98:	4698      	mov	r8, r3
 8001d9a:	465d      	mov	r5, fp
 8001d9c:	0016      	movs	r6, r2
 8001d9e:	e5e2      	b.n	8001966 <__aeabi_dsub+0xaa>
 8001da0:	464e      	mov	r6, r9
 8001da2:	431e      	orrs	r6, r3
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x4ec>
 8001da6:	e0ae      	b.n	8001f06 <__aeabi_dsub+0x64a>
 8001da8:	1e66      	subs	r6, r4, #1
 8001daa:	2c01      	cmp	r4, #1
 8001dac:	d100      	bne.n	8001db0 <__aeabi_dsub+0x4f4>
 8001dae:	e0fd      	b.n	8001fac <__aeabi_dsub+0x6f0>
 8001db0:	4f7b      	ldr	r7, [pc, #492]	; (8001fa0 <__aeabi_dsub+0x6e4>)
 8001db2:	42bc      	cmp	r4, r7
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x4fc>
 8001db6:	e107      	b.n	8001fc8 <__aeabi_dsub+0x70c>
 8001db8:	46b4      	mov	ip, r6
 8001dba:	e69b      	b.n	8001af4 <__aeabi_dsub+0x238>
 8001dbc:	4664      	mov	r4, ip
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	1b12      	subs	r2, r2, r4
 8001dc2:	000c      	movs	r4, r1
 8001dc4:	4094      	lsls	r4, r2
 8001dc6:	0007      	movs	r7, r0
 8001dc8:	4090      	lsls	r0, r2
 8001dca:	46a0      	mov	r8, r4
 8001dcc:	4664      	mov	r4, ip
 8001dce:	1e42      	subs	r2, r0, #1
 8001dd0:	4190      	sbcs	r0, r2
 8001dd2:	4662      	mov	r2, ip
 8001dd4:	40e7      	lsrs	r7, r4
 8001dd6:	4644      	mov	r4, r8
 8001dd8:	40d1      	lsrs	r1, r2
 8001dda:	433c      	orrs	r4, r7
 8001ddc:	4304      	orrs	r4, r0
 8001dde:	185b      	adds	r3, r3, r1
 8001de0:	e6f3      	b.n	8001bca <__aeabi_dsub+0x30e>
 8001de2:	4c6f      	ldr	r4, [pc, #444]	; (8001fa0 <__aeabi_dsub+0x6e4>)
 8001de4:	42a2      	cmp	r2, r4
 8001de6:	d100      	bne.n	8001dea <__aeabi_dsub+0x52e>
 8001de8:	e0d5      	b.n	8001f96 <__aeabi_dsub+0x6da>
 8001dea:	4448      	add	r0, r9
 8001dec:	185b      	adds	r3, r3, r1
 8001dee:	4548      	cmp	r0, r9
 8001df0:	4189      	sbcs	r1, r1
 8001df2:	4249      	negs	r1, r1
 8001df4:	185b      	adds	r3, r3, r1
 8001df6:	07dc      	lsls	r4, r3, #31
 8001df8:	0840      	lsrs	r0, r0, #1
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	4698      	mov	r8, r3
 8001dfe:	0016      	movs	r6, r2
 8001e00:	4304      	orrs	r4, r0
 8001e02:	e6cc      	b.n	8001b9e <__aeabi_dsub+0x2e2>
 8001e04:	2a00      	cmp	r2, #0
 8001e06:	d000      	beq.n	8001e0a <__aeabi_dsub+0x54e>
 8001e08:	e082      	b.n	8001f10 <__aeabi_dsub+0x654>
 8001e0a:	000a      	movs	r2, r1
 8001e0c:	4302      	orrs	r2, r0
 8001e0e:	d140      	bne.n	8001e92 <__aeabi_dsub+0x5d6>
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	2500      	movs	r5, #0
 8001e14:	031b      	lsls	r3, r3, #12
 8001e16:	e713      	b.n	8001c40 <__aeabi_dsub+0x384>
 8001e18:	074b      	lsls	r3, r1, #29
 8001e1a:	08c2      	lsrs	r2, r0, #3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	465d      	mov	r5, fp
 8001e20:	08cb      	lsrs	r3, r1, #3
 8001e22:	e6c5      	b.n	8001bb0 <__aeabi_dsub+0x2f4>
 8001e24:	464a      	mov	r2, r9
 8001e26:	1a84      	subs	r4, r0, r2
 8001e28:	42a0      	cmp	r0, r4
 8001e2a:	4192      	sbcs	r2, r2
 8001e2c:	1acb      	subs	r3, r1, r3
 8001e2e:	4252      	negs	r2, r2
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	4698      	mov	r8, r3
 8001e34:	465d      	mov	r5, fp
 8001e36:	e59e      	b.n	8001976 <__aeabi_dsub+0xba>
 8001e38:	464a      	mov	r2, r9
 8001e3a:	0759      	lsls	r1, r3, #29
 8001e3c:	08d2      	lsrs	r2, r2, #3
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	e6f9      	b.n	8001c38 <__aeabi_dsub+0x37c>
 8001e44:	464a      	mov	r2, r9
 8001e46:	1a14      	subs	r4, r2, r0
 8001e48:	45a1      	cmp	r9, r4
 8001e4a:	4192      	sbcs	r2, r2
 8001e4c:	1a5b      	subs	r3, r3, r1
 8001e4e:	4252      	negs	r2, r2
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	4698      	mov	r8, r3
 8001e54:	2601      	movs	r6, #1
 8001e56:	e586      	b.n	8001966 <__aeabi_dsub+0xaa>
 8001e58:	464a      	mov	r2, r9
 8001e5a:	0759      	lsls	r1, r3, #29
 8001e5c:	08d2      	lsrs	r2, r2, #3
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	e6a5      	b.n	8001bb0 <__aeabi_dsub+0x2f4>
 8001e64:	464c      	mov	r4, r9
 8001e66:	4323      	orrs	r3, r4
 8001e68:	001c      	movs	r4, r3
 8001e6a:	1e63      	subs	r3, r4, #1
 8001e6c:	419c      	sbcs	r4, r3
 8001e6e:	e65b      	b.n	8001b28 <__aeabi_dsub+0x26c>
 8001e70:	4665      	mov	r5, ip
 8001e72:	001e      	movs	r6, r3
 8001e74:	3d20      	subs	r5, #32
 8001e76:	40ee      	lsrs	r6, r5
 8001e78:	2c20      	cmp	r4, #32
 8001e7a:	d005      	beq.n	8001e88 <__aeabi_dsub+0x5cc>
 8001e7c:	2540      	movs	r5, #64	; 0x40
 8001e7e:	1b2d      	subs	r5, r5, r4
 8001e80:	40ab      	lsls	r3, r5
 8001e82:	464c      	mov	r4, r9
 8001e84:	431c      	orrs	r4, r3
 8001e86:	46a2      	mov	sl, r4
 8001e88:	4654      	mov	r4, sl
 8001e8a:	1e63      	subs	r3, r4, #1
 8001e8c:	419c      	sbcs	r4, r3
 8001e8e:	4334      	orrs	r4, r6
 8001e90:	e77d      	b.n	8001d8e <__aeabi_dsub+0x4d2>
 8001e92:	074b      	lsls	r3, r1, #29
 8001e94:	08c2      	lsrs	r2, r0, #3
 8001e96:	431a      	orrs	r2, r3
 8001e98:	465d      	mov	r5, fp
 8001e9a:	08cb      	lsrs	r3, r1, #3
 8001e9c:	e6cc      	b.n	8001c38 <__aeabi_dsub+0x37c>
 8001e9e:	000a      	movs	r2, r1
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x5ea>
 8001ea4:	e736      	b.n	8001d14 <__aeabi_dsub+0x458>
 8001ea6:	074b      	lsls	r3, r1, #29
 8001ea8:	08c2      	lsrs	r2, r0, #3
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	465d      	mov	r5, fp
 8001eae:	08cb      	lsrs	r3, r1, #3
 8001eb0:	e681      	b.n	8001bb6 <__aeabi_dsub+0x2fa>
 8001eb2:	464a      	mov	r2, r9
 8001eb4:	1a84      	subs	r4, r0, r2
 8001eb6:	42a0      	cmp	r0, r4
 8001eb8:	4192      	sbcs	r2, r2
 8001eba:	1acb      	subs	r3, r1, r3
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	4698      	mov	r8, r3
 8001ec2:	465d      	mov	r5, fp
 8001ec4:	2601      	movs	r6, #1
 8001ec6:	e54e      	b.n	8001966 <__aeabi_dsub+0xaa>
 8001ec8:	074b      	lsls	r3, r1, #29
 8001eca:	08c2      	lsrs	r2, r0, #3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	08cb      	lsrs	r3, r1, #3
 8001ed0:	e6b2      	b.n	8001c38 <__aeabi_dsub+0x37c>
 8001ed2:	464a      	mov	r2, r9
 8001ed4:	1a14      	subs	r4, r2, r0
 8001ed6:	45a1      	cmp	r9, r4
 8001ed8:	4192      	sbcs	r2, r2
 8001eda:	1a5f      	subs	r7, r3, r1
 8001edc:	4252      	negs	r2, r2
 8001ede:	1aba      	subs	r2, r7, r2
 8001ee0:	4690      	mov	r8, r2
 8001ee2:	0212      	lsls	r2, r2, #8
 8001ee4:	d56b      	bpl.n	8001fbe <__aeabi_dsub+0x702>
 8001ee6:	464a      	mov	r2, r9
 8001ee8:	1a84      	subs	r4, r0, r2
 8001eea:	42a0      	cmp	r0, r4
 8001eec:	4192      	sbcs	r2, r2
 8001eee:	1acb      	subs	r3, r1, r3
 8001ef0:	4252      	negs	r2, r2
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	4698      	mov	r8, r3
 8001ef6:	465d      	mov	r5, fp
 8001ef8:	e564      	b.n	80019c4 <__aeabi_dsub+0x108>
 8001efa:	074b      	lsls	r3, r1, #29
 8001efc:	08c2      	lsrs	r2, r0, #3
 8001efe:	431a      	orrs	r2, r3
 8001f00:	465d      	mov	r5, fp
 8001f02:	08cb      	lsrs	r3, r1, #3
 8001f04:	e698      	b.n	8001c38 <__aeabi_dsub+0x37c>
 8001f06:	074b      	lsls	r3, r1, #29
 8001f08:	08c2      	lsrs	r2, r0, #3
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	08cb      	lsrs	r3, r1, #3
 8001f0e:	e64f      	b.n	8001bb0 <__aeabi_dsub+0x2f4>
 8001f10:	000a      	movs	r2, r1
 8001f12:	4302      	orrs	r2, r0
 8001f14:	d090      	beq.n	8001e38 <__aeabi_dsub+0x57c>
 8001f16:	464a      	mov	r2, r9
 8001f18:	075c      	lsls	r4, r3, #29
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	4314      	orrs	r4, r2
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	08db      	lsrs	r3, r3, #3
 8001f22:	0312      	lsls	r2, r2, #12
 8001f24:	4213      	tst	r3, r2
 8001f26:	d008      	beq.n	8001f3a <__aeabi_dsub+0x67e>
 8001f28:	08ce      	lsrs	r6, r1, #3
 8001f2a:	4216      	tst	r6, r2
 8001f2c:	d105      	bne.n	8001f3a <__aeabi_dsub+0x67e>
 8001f2e:	08c0      	lsrs	r0, r0, #3
 8001f30:	0749      	lsls	r1, r1, #29
 8001f32:	4308      	orrs	r0, r1
 8001f34:	0004      	movs	r4, r0
 8001f36:	465d      	mov	r5, fp
 8001f38:	0033      	movs	r3, r6
 8001f3a:	0f61      	lsrs	r1, r4, #29
 8001f3c:	00e2      	lsls	r2, r4, #3
 8001f3e:	0749      	lsls	r1, r1, #29
 8001f40:	08d2      	lsrs	r2, r2, #3
 8001f42:	430a      	orrs	r2, r1
 8001f44:	e678      	b.n	8001c38 <__aeabi_dsub+0x37c>
 8001f46:	074b      	lsls	r3, r1, #29
 8001f48:	08c2      	lsrs	r2, r0, #3
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	08cb      	lsrs	r3, r1, #3
 8001f4e:	e632      	b.n	8001bb6 <__aeabi_dsub+0x2fa>
 8001f50:	4448      	add	r0, r9
 8001f52:	185b      	adds	r3, r3, r1
 8001f54:	4548      	cmp	r0, r9
 8001f56:	4192      	sbcs	r2, r2
 8001f58:	4698      	mov	r8, r3
 8001f5a:	4252      	negs	r2, r2
 8001f5c:	4490      	add	r8, r2
 8001f5e:	4643      	mov	r3, r8
 8001f60:	0004      	movs	r4, r0
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	d400      	bmi.n	8001f68 <__aeabi_dsub+0x6ac>
 8001f66:	e61a      	b.n	8001b9e <__aeabi_dsub+0x2e2>
 8001f68:	4642      	mov	r2, r8
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <__aeabi_dsub+0x6e8>)
 8001f6c:	2601      	movs	r6, #1
 8001f6e:	401a      	ands	r2, r3
 8001f70:	4690      	mov	r8, r2
 8001f72:	e614      	b.n	8001b9e <__aeabi_dsub+0x2e2>
 8001f74:	4666      	mov	r6, ip
 8001f76:	001f      	movs	r7, r3
 8001f78:	3e20      	subs	r6, #32
 8001f7a:	40f7      	lsrs	r7, r6
 8001f7c:	2c20      	cmp	r4, #32
 8001f7e:	d005      	beq.n	8001f8c <__aeabi_dsub+0x6d0>
 8001f80:	2640      	movs	r6, #64	; 0x40
 8001f82:	1b36      	subs	r6, r6, r4
 8001f84:	40b3      	lsls	r3, r6
 8001f86:	464c      	mov	r4, r9
 8001f88:	431c      	orrs	r4, r3
 8001f8a:	46a2      	mov	sl, r4
 8001f8c:	4654      	mov	r4, sl
 8001f8e:	1e63      	subs	r3, r4, #1
 8001f90:	419c      	sbcs	r4, r3
 8001f92:	433c      	orrs	r4, r7
 8001f94:	e5c8      	b.n	8001b28 <__aeabi_dsub+0x26c>
 8001f96:	0011      	movs	r1, r2
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	e532      	b.n	8001a04 <__aeabi_dsub+0x148>
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	000007ff 	.word	0x000007ff
 8001fa4:	ff7fffff 	.word	0xff7fffff
 8001fa8:	000007fe 	.word	0x000007fe
 8001fac:	464a      	mov	r2, r9
 8001fae:	1814      	adds	r4, r2, r0
 8001fb0:	4284      	cmp	r4, r0
 8001fb2:	4192      	sbcs	r2, r2
 8001fb4:	185b      	adds	r3, r3, r1
 8001fb6:	4698      	mov	r8, r3
 8001fb8:	4252      	negs	r2, r2
 8001fba:	4490      	add	r8, r2
 8001fbc:	e5e9      	b.n	8001b92 <__aeabi_dsub+0x2d6>
 8001fbe:	4642      	mov	r2, r8
 8001fc0:	4322      	orrs	r2, r4
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x70a>
 8001fc4:	e6a6      	b.n	8001d14 <__aeabi_dsub+0x458>
 8001fc6:	e5ea      	b.n	8001b9e <__aeabi_dsub+0x2e2>
 8001fc8:	074b      	lsls	r3, r1, #29
 8001fca:	08c2      	lsrs	r2, r0, #3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	08cb      	lsrs	r3, r1, #3
 8001fd0:	e632      	b.n	8001c38 <__aeabi_dsub+0x37c>
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4901      	ldr	r1, [pc, #4]	; (8001fdc <__aeabi_dsub+0x720>)
 8001fd6:	0013      	movs	r3, r2
 8001fd8:	e514      	b.n	8001a04 <__aeabi_dsub+0x148>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	000007ff 	.word	0x000007ff

08001fe0 <__aeabi_ui2d>:
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	1e04      	subs	r4, r0, #0
 8001fe4:	d010      	beq.n	8002008 <__aeabi_ui2d+0x28>
 8001fe6:	f000 f8f1 	bl	80021cc <__clzsi2>
 8001fea:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <__aeabi_ui2d+0x48>)
 8001fec:	1a1b      	subs	r3, r3, r0
 8001fee:	280a      	cmp	r0, #10
 8001ff0:	dc11      	bgt.n	8002016 <__aeabi_ui2d+0x36>
 8001ff2:	220b      	movs	r2, #11
 8001ff4:	0021      	movs	r1, r4
 8001ff6:	1a12      	subs	r2, r2, r0
 8001ff8:	40d1      	lsrs	r1, r2
 8001ffa:	3015      	adds	r0, #21
 8001ffc:	030a      	lsls	r2, r1, #12
 8001ffe:	055b      	lsls	r3, r3, #21
 8002000:	4084      	lsls	r4, r0
 8002002:	0b12      	lsrs	r2, r2, #12
 8002004:	0d5b      	lsrs	r3, r3, #21
 8002006:	e001      	b.n	800200c <__aeabi_ui2d+0x2c>
 8002008:	2300      	movs	r3, #0
 800200a:	2200      	movs	r2, #0
 800200c:	051b      	lsls	r3, r3, #20
 800200e:	4313      	orrs	r3, r2
 8002010:	0020      	movs	r0, r4
 8002012:	0019      	movs	r1, r3
 8002014:	bd10      	pop	{r4, pc}
 8002016:	0022      	movs	r2, r4
 8002018:	380b      	subs	r0, #11
 800201a:	4082      	lsls	r2, r0
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	0312      	lsls	r2, r2, #12
 8002020:	2400      	movs	r4, #0
 8002022:	0b12      	lsrs	r2, r2, #12
 8002024:	0d5b      	lsrs	r3, r3, #21
 8002026:	e7f1      	b.n	800200c <__aeabi_ui2d+0x2c>
 8002028:	0000041e 	.word	0x0000041e

0800202c <__aeabi_f2d>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	0043      	lsls	r3, r0, #1
 8002030:	0246      	lsls	r6, r0, #9
 8002032:	0fc4      	lsrs	r4, r0, #31
 8002034:	20fe      	movs	r0, #254	; 0xfe
 8002036:	0e1b      	lsrs	r3, r3, #24
 8002038:	1c59      	adds	r1, r3, #1
 800203a:	0a75      	lsrs	r5, r6, #9
 800203c:	4208      	tst	r0, r1
 800203e:	d00c      	beq.n	800205a <__aeabi_f2d+0x2e>
 8002040:	22e0      	movs	r2, #224	; 0xe0
 8002042:	0092      	lsls	r2, r2, #2
 8002044:	4694      	mov	ip, r2
 8002046:	076d      	lsls	r5, r5, #29
 8002048:	0b36      	lsrs	r6, r6, #12
 800204a:	4463      	add	r3, ip
 800204c:	051b      	lsls	r3, r3, #20
 800204e:	4333      	orrs	r3, r6
 8002050:	07e4      	lsls	r4, r4, #31
 8002052:	4323      	orrs	r3, r4
 8002054:	0028      	movs	r0, r5
 8002056:	0019      	movs	r1, r3
 8002058:	bd70      	pop	{r4, r5, r6, pc}
 800205a:	2b00      	cmp	r3, #0
 800205c:	d114      	bne.n	8002088 <__aeabi_f2d+0x5c>
 800205e:	2d00      	cmp	r5, #0
 8002060:	d01b      	beq.n	800209a <__aeabi_f2d+0x6e>
 8002062:	0028      	movs	r0, r5
 8002064:	f000 f8b2 	bl	80021cc <__clzsi2>
 8002068:	280a      	cmp	r0, #10
 800206a:	dc1c      	bgt.n	80020a6 <__aeabi_f2d+0x7a>
 800206c:	230b      	movs	r3, #11
 800206e:	002a      	movs	r2, r5
 8002070:	1a1b      	subs	r3, r3, r0
 8002072:	40da      	lsrs	r2, r3
 8002074:	0003      	movs	r3, r0
 8002076:	3315      	adds	r3, #21
 8002078:	409d      	lsls	r5, r3
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <__aeabi_f2d+0x88>)
 800207c:	0312      	lsls	r2, r2, #12
 800207e:	1a1b      	subs	r3, r3, r0
 8002080:	055b      	lsls	r3, r3, #21
 8002082:	0b16      	lsrs	r6, r2, #12
 8002084:	0d5b      	lsrs	r3, r3, #21
 8002086:	e7e1      	b.n	800204c <__aeabi_f2d+0x20>
 8002088:	2d00      	cmp	r5, #0
 800208a:	d009      	beq.n	80020a0 <__aeabi_f2d+0x74>
 800208c:	0b32      	lsrs	r2, r6, #12
 800208e:	2680      	movs	r6, #128	; 0x80
 8002090:	0336      	lsls	r6, r6, #12
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <__aeabi_f2d+0x8c>)
 8002094:	076d      	lsls	r5, r5, #29
 8002096:	4316      	orrs	r6, r2
 8002098:	e7d8      	b.n	800204c <__aeabi_f2d+0x20>
 800209a:	2300      	movs	r3, #0
 800209c:	2600      	movs	r6, #0
 800209e:	e7d5      	b.n	800204c <__aeabi_f2d+0x20>
 80020a0:	2600      	movs	r6, #0
 80020a2:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <__aeabi_f2d+0x8c>)
 80020a4:	e7d2      	b.n	800204c <__aeabi_f2d+0x20>
 80020a6:	0003      	movs	r3, r0
 80020a8:	002a      	movs	r2, r5
 80020aa:	3b0b      	subs	r3, #11
 80020ac:	409a      	lsls	r2, r3
 80020ae:	2500      	movs	r5, #0
 80020b0:	e7e3      	b.n	800207a <__aeabi_f2d+0x4e>
 80020b2:	46c0      	nop			; (mov r8, r8)
 80020b4:	00000389 	.word	0x00000389
 80020b8:	000007ff 	.word	0x000007ff

080020bc <__aeabi_d2f>:
 80020bc:	0002      	movs	r2, r0
 80020be:	004b      	lsls	r3, r1, #1
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	0308      	lsls	r0, r1, #12
 80020c4:	0d5b      	lsrs	r3, r3, #21
 80020c6:	4e3d      	ldr	r6, [pc, #244]	; (80021bc <__aeabi_d2f+0x100>)
 80020c8:	0fcc      	lsrs	r4, r1, #31
 80020ca:	0a40      	lsrs	r0, r0, #9
 80020cc:	0f51      	lsrs	r1, r2, #29
 80020ce:	1c5f      	adds	r7, r3, #1
 80020d0:	4308      	orrs	r0, r1
 80020d2:	00d5      	lsls	r5, r2, #3
 80020d4:	4237      	tst	r7, r6
 80020d6:	d00a      	beq.n	80020ee <__aeabi_d2f+0x32>
 80020d8:	4939      	ldr	r1, [pc, #228]	; (80021c0 <__aeabi_d2f+0x104>)
 80020da:	185e      	adds	r6, r3, r1
 80020dc:	2efe      	cmp	r6, #254	; 0xfe
 80020de:	dd16      	ble.n	800210e <__aeabi_d2f+0x52>
 80020e0:	23ff      	movs	r3, #255	; 0xff
 80020e2:	2100      	movs	r1, #0
 80020e4:	05db      	lsls	r3, r3, #23
 80020e6:	430b      	orrs	r3, r1
 80020e8:	07e0      	lsls	r0, r4, #31
 80020ea:	4318      	orrs	r0, r3
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d106      	bne.n	8002100 <__aeabi_d2f+0x44>
 80020f2:	4328      	orrs	r0, r5
 80020f4:	d027      	beq.n	8002146 <__aeabi_d2f+0x8a>
 80020f6:	2105      	movs	r1, #5
 80020f8:	0189      	lsls	r1, r1, #6
 80020fa:	0a49      	lsrs	r1, r1, #9
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e7f1      	b.n	80020e4 <__aeabi_d2f+0x28>
 8002100:	4305      	orrs	r5, r0
 8002102:	d0ed      	beq.n	80020e0 <__aeabi_d2f+0x24>
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	03c9      	lsls	r1, r1, #15
 8002108:	23ff      	movs	r3, #255	; 0xff
 800210a:	4301      	orrs	r1, r0
 800210c:	e7ea      	b.n	80020e4 <__aeabi_d2f+0x28>
 800210e:	2e00      	cmp	r6, #0
 8002110:	dd1c      	ble.n	800214c <__aeabi_d2f+0x90>
 8002112:	0192      	lsls	r2, r2, #6
 8002114:	0011      	movs	r1, r2
 8002116:	1e4a      	subs	r2, r1, #1
 8002118:	4191      	sbcs	r1, r2
 800211a:	00c0      	lsls	r0, r0, #3
 800211c:	0f6d      	lsrs	r5, r5, #29
 800211e:	4301      	orrs	r1, r0
 8002120:	4329      	orrs	r1, r5
 8002122:	074b      	lsls	r3, r1, #29
 8002124:	d048      	beq.n	80021b8 <__aeabi_d2f+0xfc>
 8002126:	230f      	movs	r3, #15
 8002128:	400b      	ands	r3, r1
 800212a:	2b04      	cmp	r3, #4
 800212c:	d000      	beq.n	8002130 <__aeabi_d2f+0x74>
 800212e:	3104      	adds	r1, #4
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	04db      	lsls	r3, r3, #19
 8002134:	400b      	ands	r3, r1
 8002136:	d03f      	beq.n	80021b8 <__aeabi_d2f+0xfc>
 8002138:	1c72      	adds	r2, r6, #1
 800213a:	2efe      	cmp	r6, #254	; 0xfe
 800213c:	d0d0      	beq.n	80020e0 <__aeabi_d2f+0x24>
 800213e:	0189      	lsls	r1, r1, #6
 8002140:	0a49      	lsrs	r1, r1, #9
 8002142:	b2d3      	uxtb	r3, r2
 8002144:	e7ce      	b.n	80020e4 <__aeabi_d2f+0x28>
 8002146:	2300      	movs	r3, #0
 8002148:	2100      	movs	r1, #0
 800214a:	e7cb      	b.n	80020e4 <__aeabi_d2f+0x28>
 800214c:	0032      	movs	r2, r6
 800214e:	3217      	adds	r2, #23
 8002150:	db22      	blt.n	8002198 <__aeabi_d2f+0xdc>
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	221e      	movs	r2, #30
 8002156:	0409      	lsls	r1, r1, #16
 8002158:	4308      	orrs	r0, r1
 800215a:	1b92      	subs	r2, r2, r6
 800215c:	2a1f      	cmp	r2, #31
 800215e:	dd1d      	ble.n	800219c <__aeabi_d2f+0xe0>
 8002160:	2102      	movs	r1, #2
 8002162:	4249      	negs	r1, r1
 8002164:	1b8e      	subs	r6, r1, r6
 8002166:	0001      	movs	r1, r0
 8002168:	40f1      	lsrs	r1, r6
 800216a:	000e      	movs	r6, r1
 800216c:	2a20      	cmp	r2, #32
 800216e:	d004      	beq.n	800217a <__aeabi_d2f+0xbe>
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <__aeabi_d2f+0x108>)
 8002172:	4694      	mov	ip, r2
 8002174:	4463      	add	r3, ip
 8002176:	4098      	lsls	r0, r3
 8002178:	4305      	orrs	r5, r0
 800217a:	0029      	movs	r1, r5
 800217c:	1e4d      	subs	r5, r1, #1
 800217e:	41a9      	sbcs	r1, r5
 8002180:	4331      	orrs	r1, r6
 8002182:	2600      	movs	r6, #0
 8002184:	074b      	lsls	r3, r1, #29
 8002186:	d1ce      	bne.n	8002126 <__aeabi_d2f+0x6a>
 8002188:	2080      	movs	r0, #128	; 0x80
 800218a:	000b      	movs	r3, r1
 800218c:	04c0      	lsls	r0, r0, #19
 800218e:	2201      	movs	r2, #1
 8002190:	4003      	ands	r3, r0
 8002192:	4201      	tst	r1, r0
 8002194:	d1d3      	bne.n	800213e <__aeabi_d2f+0x82>
 8002196:	e7af      	b.n	80020f8 <__aeabi_d2f+0x3c>
 8002198:	2300      	movs	r3, #0
 800219a:	e7ac      	b.n	80020f6 <__aeabi_d2f+0x3a>
 800219c:	490a      	ldr	r1, [pc, #40]	; (80021c8 <__aeabi_d2f+0x10c>)
 800219e:	468c      	mov	ip, r1
 80021a0:	0029      	movs	r1, r5
 80021a2:	4463      	add	r3, ip
 80021a4:	40d1      	lsrs	r1, r2
 80021a6:	409d      	lsls	r5, r3
 80021a8:	000a      	movs	r2, r1
 80021aa:	0029      	movs	r1, r5
 80021ac:	4098      	lsls	r0, r3
 80021ae:	1e4d      	subs	r5, r1, #1
 80021b0:	41a9      	sbcs	r1, r5
 80021b2:	4301      	orrs	r1, r0
 80021b4:	4311      	orrs	r1, r2
 80021b6:	e7e4      	b.n	8002182 <__aeabi_d2f+0xc6>
 80021b8:	0033      	movs	r3, r6
 80021ba:	e79d      	b.n	80020f8 <__aeabi_d2f+0x3c>
 80021bc:	000007fe 	.word	0x000007fe
 80021c0:	fffffc80 	.word	0xfffffc80
 80021c4:	fffffca2 	.word	0xfffffca2
 80021c8:	fffffc82 	.word	0xfffffc82

080021cc <__clzsi2>:
 80021cc:	211c      	movs	r1, #28
 80021ce:	2301      	movs	r3, #1
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	4298      	cmp	r0, r3
 80021d4:	d301      	bcc.n	80021da <__clzsi2+0xe>
 80021d6:	0c00      	lsrs	r0, r0, #16
 80021d8:	3910      	subs	r1, #16
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	4298      	cmp	r0, r3
 80021de:	d301      	bcc.n	80021e4 <__clzsi2+0x18>
 80021e0:	0a00      	lsrs	r0, r0, #8
 80021e2:	3908      	subs	r1, #8
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	4298      	cmp	r0, r3
 80021e8:	d301      	bcc.n	80021ee <__clzsi2+0x22>
 80021ea:	0900      	lsrs	r0, r0, #4
 80021ec:	3904      	subs	r1, #4
 80021ee:	a202      	add	r2, pc, #8	; (adr r2, 80021f8 <__clzsi2+0x2c>)
 80021f0:	5c10      	ldrb	r0, [r2, r0]
 80021f2:	1840      	adds	r0, r0, r1
 80021f4:	4770      	bx	lr
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	02020304 	.word	0x02020304
 80021fc:	01010101 	.word	0x01010101
	...

08002208 <new_analog>:
//
//
// All Public Functions

// EFFECTS: Create a new Analog struct and returns pointer to struct.
Analog* new_analog(ADC_HandleTypeDef* _adc_pin, uint8_t S0, uint8_t S1, uint8_t S2, uint8_t S3){
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	000c      	movs	r4, r1
 8002212:	0010      	movs	r0, r2
 8002214:	0019      	movs	r1, r3
 8002216:	1cfb      	adds	r3, r7, #3
 8002218:	1c22      	adds	r2, r4, #0
 800221a:	701a      	strb	r2, [r3, #0]
 800221c:	1cbb      	adds	r3, r7, #2
 800221e:	1c02      	adds	r2, r0, #0
 8002220:	701a      	strb	r2, [r3, #0]
 8002222:	1c7b      	adds	r3, r7, #1
 8002224:	1c0a      	adds	r2, r1, #0
 8002226:	701a      	strb	r2, [r3, #0]

	// Create a new struct
	Analog* Analog_object = (Analog*) malloc(sizeof(Analog));
 8002228:	2008      	movs	r0, #8
 800222a:	f005 fc39 	bl	8007aa0 <malloc>
 800222e:	0003      	movs	r3, r0
 8002230:	60fb      	str	r3, [r7, #12]

	Analog_object->adc_pin = _adc_pin;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]
	Analog_object->select_pins[0] = S0;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1cfa      	adds	r2, r7, #3
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	711a      	strb	r2, [r3, #4]
	Analog_object->select_pins[1] = S1;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1cba      	adds	r2, r7, #2
 8002244:	7812      	ldrb	r2, [r2, #0]
 8002246:	715a      	strb	r2, [r3, #5]
	Analog_object->select_pins[2] = S2;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1c7a      	adds	r2, r7, #1
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	719a      	strb	r2, [r3, #6]
	Analog_object->select_pins[3] = S3;
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	2320      	movs	r3, #32
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	71d3      	strb	r3, [r2, #7]

	return Analog_object;
 800225a:	68fb      	ldr	r3, [r7, #12]

}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b005      	add	sp, #20
 8002262:	bd90      	pop	{r4, r7, pc}

08002264 <get_voltage_data>:

// EFFECTS: Get voltage data from a specific voltage sensor in Volts
float get_voltage_data(const Analog* _Analog){
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	// Read data from ADC, raw_ADC_data is a number in [0, 4095]
	uint32_t raw_ADC_data = read_from_ADC(_Analog->adc_pin);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 f881 	bl	8002378 <read_from_ADC>
 8002276:	0003      	movs	r3, r0
 8002278:	60fb      	str	r3, [r7, #12]
	// Convert from [0, 4095] to [0, 1] to [0, 3.3]
	float steppedDownVoltage = (raw_ADC_data / 4095.0) * 3.3;
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7ff feb0 	bl	8001fe0 <__aeabi_ui2d>
 8002280:	2200      	movs	r2, #0
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <get_voltage_data+0x58>)
 8002284:	f7fe fdc6 	bl	8000e14 <__aeabi_ddiv>
 8002288:	0002      	movs	r2, r0
 800228a:	000b      	movs	r3, r1
 800228c:	0010      	movs	r0, r2
 800228e:	0019      	movs	r1, r3
 8002290:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <get_voltage_data+0x5c>)
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <get_voltage_data+0x60>)
 8002294:	f7ff f8a6 	bl	80013e4 <__aeabi_dmul>
 8002298:	0002      	movs	r2, r0
 800229a:	000b      	movs	r3, r1
 800229c:	0010      	movs	r0, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	f7ff ff0c 	bl	80020bc <__aeabi_d2f>
 80022a4:	1c03      	adds	r3, r0, #0
 80022a6:	60bb      	str	r3, [r7, #8]
	// Convert steppedDownVoltage to actual output voltage
	return steppedDownVoltage * 8.0;
 80022a8:	2182      	movs	r1, #130	; 0x82
 80022aa:	05c9      	lsls	r1, r1, #23
 80022ac:	68b8      	ldr	r0, [r7, #8]
 80022ae:	f7fe f8c7 	bl	8000440 <__aeabi_fmul>
 80022b2:	1c03      	adds	r3, r0, #0
}
 80022b4:	1c18      	adds	r0, r3, #0
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b004      	add	sp, #16
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40affe00 	.word	0x40affe00
 80022c0:	66666666 	.word	0x66666666
 80022c4:	400a6666 	.word	0x400a6666

080022c8 <get_current_data>:

// EFFECTS: Get current data from a specific current sensor in Amps
float get_current_data(const Analog* _Analog){
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	// Read data from ADC, raw_ADC_data is a number in [0, 4095]
	uint32_t raw_ADC_data = read_from_ADC(_Analog->adc_pin);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 f84f 	bl	8002378 <read_from_ADC>
 80022da:	0003      	movs	r3, r0
 80022dc:	617b      	str	r3, [r7, #20]
	// Convert from [0, 4095] to [0, 1] to [0, 3.3]
	float raw_volts = (raw_ADC_data / 4095.0) * 3.3 * 8.0;
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7ff fe7e 	bl	8001fe0 <__aeabi_ui2d>
 80022e4:	2200      	movs	r2, #0
 80022e6:	4b1d      	ldr	r3, [pc, #116]	; (800235c <get_current_data+0x94>)
 80022e8:	f7fe fd94 	bl	8000e14 <__aeabi_ddiv>
 80022ec:	0002      	movs	r2, r0
 80022ee:	000b      	movs	r3, r1
 80022f0:	0010      	movs	r0, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	4a1a      	ldr	r2, [pc, #104]	; (8002360 <get_current_data+0x98>)
 80022f6:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <get_current_data+0x9c>)
 80022f8:	f7ff f874 	bl	80013e4 <__aeabi_dmul>
 80022fc:	0002      	movs	r2, r0
 80022fe:	000b      	movs	r3, r1
 8002300:	0010      	movs	r0, r2
 8002302:	0019      	movs	r1, r3
 8002304:	2200      	movs	r2, #0
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <get_current_data+0xa0>)
 8002308:	f7ff f86c 	bl	80013e4 <__aeabi_dmul>
 800230c:	0002      	movs	r2, r0
 800230e:	000b      	movs	r3, r1
 8002310:	0010      	movs	r0, r2
 8002312:	0019      	movs	r1, r3
 8002314:	f7ff fed2 	bl	80020bc <__aeabi_d2f>
 8002318:	1c03      	adds	r3, r0, #0
 800231a:	613b      	str	r3, [r7, #16]
	// Convert from [0, 3.3] to [-1.65, 1.65] to [-1650, -1650]
	float raw_millivolts = (raw_volts - 1.65) * 1000.0;
 800231c:	6938      	ldr	r0, [r7, #16]
 800231e:	f7ff fe85 	bl	800202c <__aeabi_f2d>
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <get_current_data+0x98>)
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <get_current_data+0xa4>)
 8002326:	f7ff fac9 	bl	80018bc <__aeabi_dsub>
 800232a:	0002      	movs	r2, r0
 800232c:	000b      	movs	r3, r1
 800232e:	0010      	movs	r0, r2
 8002330:	0019      	movs	r1, r3
 8002332:	2200      	movs	r2, #0
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <get_current_data+0xa8>)
 8002336:	f7ff f855 	bl	80013e4 <__aeabi_dmul>
 800233a:	0002      	movs	r2, r0
 800233c:	000b      	movs	r3, r1
 800233e:	0010      	movs	r0, r2
 8002340:	0019      	movs	r1, r3
 8002342:	f7ff febb 	bl	80020bc <__aeabi_d2f>
 8002346:	1c03      	adds	r3, r0, #0
 8002348:	60fb      	str	r3, [r7, #12]
	// Convert based on sensitivity, which is 40 mV/A
	return raw_millivolts / 40.0;
 800234a:	490a      	ldr	r1, [pc, #40]	; (8002374 <get_current_data+0xac>)
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f7fd ff6b 	bl	8000228 <__aeabi_fdiv>
 8002352:	1c03      	adds	r3, r0, #0
}
 8002354:	1c18      	adds	r0, r3, #0
 8002356:	46bd      	mov	sp, r7
 8002358:	b006      	add	sp, #24
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40affe00 	.word	0x40affe00
 8002360:	66666666 	.word	0x66666666
 8002364:	400a6666 	.word	0x400a6666
 8002368:	40200000 	.word	0x40200000
 800236c:	3ffa6666 	.word	0x3ffa6666
 8002370:	408f4000 	.word	0x408f4000
 8002374:	42200000 	.word	0x42200000

08002378 <read_from_ADC>:
//
// All Private Functions

// EFFECTS: Read from ADC object
// Returns a number between 0 and 4095
uint32_t read_from_ADC(ADC_HandleTypeDef* adc_object){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc_object);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f001 fad4 	bl	8003930 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc_object, HAL_MAX_DELAY);
 8002388:	2301      	movs	r3, #1
 800238a:	425a      	negs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	0011      	movs	r1, r2
 8002390:	0018      	movs	r0, r3
 8002392:	f001 fb57 	bl	8003a44 <HAL_ADC_PollForConversion>
    uint32_t raw = HAL_ADC_GetValue(adc_object);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f001 fbe7 	bl	8003b6c <HAL_ADC_GetValue>
 800239e:	0003      	movs	r3, r0
 80023a0:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Stop(adc_object);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f001 fb11 	bl	80039cc <HAL_ADC_Stop>
    return raw;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <send_thermal_data>:

#ifdef THERMAL_ENABLE

// EFFECTS: sends thermal data in the following format
// FORMAT: $THERMISTOR,<t0>,<t1>,<t2>
void send_thermal_data() {
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	b095      	sub	sp, #84	; 0x54
 80023b8:	af04      	add	r7, sp, #16

	// TODO

	uint8_t buffer[50] = "";
 80023ba:	260c      	movs	r6, #12
 80023bc:	19bb      	adds	r3, r7, r6
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	3304      	adds	r3, #4
 80023c4:	222e      	movs	r2, #46	; 0x2e
 80023c6:	2100      	movs	r1, #0
 80023c8:	0018      	movs	r0, r3
 80023ca:	f005 fb7c 	bl	8007ac6 <memset>

  sprintf((char *)buffer, "$THERMISTOR,%f,%f,%f\r\n",\
			  thermal_data[0], thermal_data[1], thermal_data[2]);
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <send_thermal_data+0x70>)
 80023d0:	681b      	ldr	r3, [r3, #0]
  sprintf((char *)buffer, "$THERMISTOR,%f,%f,%f\r\n",\
 80023d2:	1c18      	adds	r0, r3, #0
 80023d4:	f7ff fe2a 	bl	800202c <__aeabi_f2d>
 80023d8:	6038      	str	r0, [r7, #0]
 80023da:	6079      	str	r1, [r7, #4]
			  thermal_data[0], thermal_data[1], thermal_data[2]);
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <send_thermal_data+0x70>)
 80023de:	685b      	ldr	r3, [r3, #4]
  sprintf((char *)buffer, "$THERMISTOR,%f,%f,%f\r\n",\
 80023e0:	1c18      	adds	r0, r3, #0
 80023e2:	f7ff fe23 	bl	800202c <__aeabi_f2d>
 80023e6:	0004      	movs	r4, r0
 80023e8:	000d      	movs	r5, r1
			  thermal_data[0], thermal_data[1], thermal_data[2]);
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <send_thermal_data+0x70>)
 80023ec:	689b      	ldr	r3, [r3, #8]
  sprintf((char *)buffer, "$THERMISTOR,%f,%f,%f\r\n",\
 80023ee:	1c18      	adds	r0, r3, #0
 80023f0:	f7ff fe1c 	bl	800202c <__aeabi_f2d>
 80023f4:	0002      	movs	r2, r0
 80023f6:	000b      	movs	r3, r1
 80023f8:	490b      	ldr	r1, [pc, #44]	; (8002428 <send_thermal_data+0x74>)
 80023fa:	19b8      	adds	r0, r7, r6
 80023fc:	9202      	str	r2, [sp, #8]
 80023fe:	9303      	str	r3, [sp, #12]
 8002400:	9400      	str	r4, [sp, #0]
 8002402:	9501      	str	r5, [sp, #4]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f005 fc20 	bl	8007c4c <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	049b      	lsls	r3, r3, #18
 8002410:	19b9      	adds	r1, r7, r6
 8002412:	4806      	ldr	r0, [pc, #24]	; (800242c <send_thermal_data+0x78>)
 8002414:	2232      	movs	r2, #50	; 0x32
 8002416:	f002 fed7 	bl	80051c8 <HAL_I2C_Slave_Seq_Transmit_IT>

}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46bd      	mov	sp, r7
 800241e:	b011      	add	sp, #68	; 0x44
 8002420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	20000148 	.word	0x20000148
 8002428:	08008328 	.word	0x08008328
 800242c:	200000fc 	.word	0x200000fc

08002430 <select_analog_channel>:
#endif

#ifdef ANALOG_ENABLE

// EFFECTS: select analog channel
void select_analog_channel(const Analog* analog_device) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, analog_device->select_pins[0]); //S0
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	791a      	ldrb	r2, [r3, #4]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	0059      	lsls	r1, r3, #1
 8002440:	23a0      	movs	r3, #160	; 0xa0
 8002442:	05db      	lsls	r3, r3, #23
 8002444:	0018      	movs	r0, r3
 8002446:	f002 f9ef 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, analog_device->select_pins[1]); //S1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	795a      	ldrb	r2, [r3, #5]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	0099      	lsls	r1, r3, #2
 8002452:	23a0      	movs	r3, #160	; 0xa0
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	0018      	movs	r0, r3
 8002458:	f002 f9e6 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, analog_device->select_pins[2]); //S2
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	799b      	ldrb	r3, [r3, #6]
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <select_analog_channel+0x60>)
 8002462:	001a      	movs	r2, r3
 8002464:	2140      	movs	r1, #64	; 0x40
 8002466:	f002 f9df 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, analog_device->select_pins[3]); //S3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	79db      	ldrb	r3, [r3, #7]
 800246e:	4808      	ldr	r0, [pc, #32]	; (8002490 <select_analog_channel+0x60>)
 8002470:	001a      	movs	r2, r3
 8002472:	2180      	movs	r1, #128	; 0x80
 8002474:	f002 f9d8 	bl	8004828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,  1); //ENABLE
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	4805      	ldr	r0, [pc, #20]	; (8002494 <select_analog_channel+0x64>)
 800247e:	2201      	movs	r2, #1
 8002480:	0019      	movs	r1, r3
 8002482:	f002 f9d1 	bl	8004828 <HAL_GPIO_WritePin>
}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b002      	add	sp, #8
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	50000800 	.word	0x50000800
 8002494:	50000400 	.word	0x50000400

08002498 <get_analog_data>:

// EFFECTS: get analog data in the following format
// FORMAT: $CURRENT,<c0>,<c1>,<c2> and $VOLTAGE,<v0>,<v1>,<v2>
void get_analog_data() {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0

    for (int i = 0; i < CURRENT_DEVICES; ++i) {
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	e014      	b.n	80024ce <get_analog_data+0x36>
      const Analog* analog_device = current_channels[i];
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <get_analog_data+0x7c>)
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	0092      	lsls	r2, r2, #2
 80024aa:	58d3      	ldr	r3, [r2, r3]
 80024ac:	603b      	str	r3, [r7, #0]
      select_analog_channel(analog_device);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff ffbd 	bl	8002430 <select_analog_channel>
      current_data[i] = get_current_data(analog_device);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff ff05 	bl	80022c8 <get_current_data>
 80024be:	1c01      	adds	r1, r0, #0
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <get_analog_data+0x80>)
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < CURRENT_DEVICES; ++i) {
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3301      	adds	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	dde7      	ble.n	80024a4 <get_analog_data+0xc>
    }

    for (int i = 0; i < VOLTAGE_DEVICES; ++i) {
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	e014      	b.n	8002504 <get_analog_data+0x6c>
	  const Analog* analog_device = voltage_channels[i];
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <get_analog_data+0x84>)
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	0092      	lsls	r2, r2, #2
 80024e0:	58d3      	ldr	r3, [r2, r3]
 80024e2:	607b      	str	r3, [r7, #4]
	  select_analog_channel(analog_device);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f7ff ffa2 	bl	8002430 <select_analog_channel>
	  voltage_data[i] = get_voltage_data(analog_device);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff feb8 	bl	8002264 <get_voltage_data>
 80024f4:	1c01      	adds	r1, r0, #0
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <get_analog_data+0x88>)
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < VOLTAGE_DEVICES; ++i) {
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3301      	adds	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b02      	cmp	r3, #2
 8002508:	dde7      	ble.n	80024da <get_analog_data+0x42>
	}
}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b004      	add	sp, #16
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200001c8 	.word	0x200001c8
 8002518:	20000098 	.word	0x20000098
 800251c:	200001d4 	.word	0x200001d4
 8002520:	200000a4 	.word	0x200000a4

08002524 <send_current_data>:

// EFFECTS: send current data in the following format
// FORMAT: $CURRENT,<c0>,<c1>,<c2>
void send_current_data() {
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	b095      	sub	sp, #84	; 0x54
 8002528:	af04      	add	r7, sp, #16

	// TODO

	uint8_t buffer[50] = "";
 800252a:	260c      	movs	r6, #12
 800252c:	19bb      	adds	r3, r7, r6
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	3304      	adds	r3, #4
 8002534:	222e      	movs	r2, #46	; 0x2e
 8002536:	2100      	movs	r1, #0
 8002538:	0018      	movs	r0, r3
 800253a:	f005 fac4 	bl	8007ac6 <memset>

	sprintf((char *)buffer, "CURRENT,%f,%f,%f\r\n",\
			  current_data[0], current_data[1], current_data[2]);
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <send_current_data+0x70>)
 8002540:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)buffer, "CURRENT,%f,%f,%f\r\n",\
 8002542:	1c18      	adds	r0, r3, #0
 8002544:	f7ff fd72 	bl	800202c <__aeabi_f2d>
 8002548:	6038      	str	r0, [r7, #0]
 800254a:	6079      	str	r1, [r7, #4]
			  current_data[0], current_data[1], current_data[2]);
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <send_current_data+0x70>)
 800254e:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)buffer, "CURRENT,%f,%f,%f\r\n",\
 8002550:	1c18      	adds	r0, r3, #0
 8002552:	f7ff fd6b 	bl	800202c <__aeabi_f2d>
 8002556:	0004      	movs	r4, r0
 8002558:	000d      	movs	r5, r1
			  current_data[0], current_data[1], current_data[2]);
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <send_current_data+0x70>)
 800255c:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)buffer, "CURRENT,%f,%f,%f\r\n",\
 800255e:	1c18      	adds	r0, r3, #0
 8002560:	f7ff fd64 	bl	800202c <__aeabi_f2d>
 8002564:	0002      	movs	r2, r0
 8002566:	000b      	movs	r3, r1
 8002568:	490b      	ldr	r1, [pc, #44]	; (8002598 <send_current_data+0x74>)
 800256a:	19b8      	adds	r0, r7, r6
 800256c:	9202      	str	r2, [sp, #8]
 800256e:	9303      	str	r3, [sp, #12]
 8002570:	9400      	str	r4, [sp, #0]
 8002572:	9501      	str	r5, [sp, #4]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f005 fb68 	bl	8007c4c <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	049b      	lsls	r3, r3, #18
 8002580:	19b9      	adds	r1, r7, r6
 8002582:	4806      	ldr	r0, [pc, #24]	; (800259c <send_current_data+0x78>)
 8002584:	2232      	movs	r2, #50	; 0x32
 8002586:	f002 fe1f 	bl	80051c8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b011      	add	sp, #68	; 0x44
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	20000098 	.word	0x20000098
 8002598:	08008340 	.word	0x08008340
 800259c:	200000fc 	.word	0x200000fc

080025a0 <send_voltage_data>:

// EFFECTS: send analog data in the following format
// FORMAT: $VOLTAGE,<v0>,<v1>,<v2>
void send_voltage_data() {
 80025a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a2:	b095      	sub	sp, #84	; 0x54
 80025a4:	af04      	add	r7, sp, #16
  
	// TODO

	uint8_t buffer[50] = "";
 80025a6:	260c      	movs	r6, #12
 80025a8:	19bb      	adds	r3, r7, r6
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	3304      	adds	r3, #4
 80025b0:	222e      	movs	r2, #46	; 0x2e
 80025b2:	2100      	movs	r1, #0
 80025b4:	0018      	movs	r0, r3
 80025b6:	f005 fa86 	bl	8007ac6 <memset>

	sprintf((char *)buffer, "VOLTAGE,%f,%f,%f\r\n",\
			  voltage_data[0], voltage_data[1], voltage_data[2]);
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <send_voltage_data+0x70>)
 80025bc:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)buffer, "VOLTAGE,%f,%f,%f\r\n",\
 80025be:	1c18      	adds	r0, r3, #0
 80025c0:	f7ff fd34 	bl	800202c <__aeabi_f2d>
 80025c4:	6038      	str	r0, [r7, #0]
 80025c6:	6079      	str	r1, [r7, #4]
			  voltage_data[0], voltage_data[1], voltage_data[2]);
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <send_voltage_data+0x70>)
 80025ca:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)buffer, "VOLTAGE,%f,%f,%f\r\n",\
 80025cc:	1c18      	adds	r0, r3, #0
 80025ce:	f7ff fd2d 	bl	800202c <__aeabi_f2d>
 80025d2:	0004      	movs	r4, r0
 80025d4:	000d      	movs	r5, r1
			  voltage_data[0], voltage_data[1], voltage_data[2]);
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <send_voltage_data+0x70>)
 80025d8:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)buffer, "VOLTAGE,%f,%f,%f\r\n",\
 80025da:	1c18      	adds	r0, r3, #0
 80025dc:	f7ff fd26 	bl	800202c <__aeabi_f2d>
 80025e0:	0002      	movs	r2, r0
 80025e2:	000b      	movs	r3, r1
 80025e4:	490b      	ldr	r1, [pc, #44]	; (8002614 <send_voltage_data+0x74>)
 80025e6:	19b8      	adds	r0, r7, r6
 80025e8:	9202      	str	r2, [sp, #8]
 80025ea:	9303      	str	r3, [sp, #12]
 80025ec:	9400      	str	r4, [sp, #0]
 80025ee:	9501      	str	r5, [sp, #4]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f005 fb2a 	bl	8007c4c <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	049b      	lsls	r3, r3, #18
 80025fc:	19b9      	adds	r1, r7, r6
 80025fe:	4806      	ldr	r0, [pc, #24]	; (8002618 <send_voltage_data+0x78>)
 8002600:	2232      	movs	r2, #50	; 0x32
 8002602:	f002 fde1 	bl	80051c8 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b011      	add	sp, #68	; 0x44
 800260c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	200000a4 	.word	0x200000a4
 8002614:	08008354 	.word	0x08008354
 8002618:	200000fc 	.word	0x200000fc

0800261c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002622:	f000 fdab 	bl	800317c <HAL_Init>

  /* USER CODE BEGIN Init */

#ifdef THERMAL_ENABLE

i2cBus = new_smbus(&hi2c1); // TODO (not using huart1)
 8002626:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <main+0x138>)
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fa7c 	bl	8002b26 <new_smbus>
 800262e:	0002      	movs	r2, r0
 8002630:	4b49      	ldr	r3, [pc, #292]	; (8002758 <main+0x13c>)
 8002632:	601a      	str	r2, [r3, #0]
disable_DMA(i2cBus);
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <main+0x13c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0018      	movs	r0, r3
 800263a:	f000 fa90 	bl	8002b5e <disable_DMA>

thermal_channels[THERMAL_3_3_V_CHANNEL] = new_thermal_sensor(i2cBus, 0, 0, 0);
 800263e:	4b46      	ldr	r3, [pc, #280]	; (8002758 <main+0x13c>)
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2200      	movs	r2, #0
 8002646:	2100      	movs	r1, #0
 8002648:	f000 fc8f 	bl	8002f6a <new_thermal_sensor>
 800264c:	0002      	movs	r2, r0
 800264e:	4b43      	ldr	r3, [pc, #268]	; (800275c <main+0x140>)
 8002650:	601a      	str	r2, [r3, #0]
thermal_channels[THERMAL_5_V_CHANNEL] = new_thermal_sensor(i2cBus, 1, 0, 0);
 8002652:	4b41      	ldr	r3, [pc, #260]	; (8002758 <main+0x13c>)
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	2300      	movs	r3, #0
 8002658:	2200      	movs	r2, #0
 800265a:	2101      	movs	r1, #1
 800265c:	f000 fc85 	bl	8002f6a <new_thermal_sensor>
 8002660:	0002      	movs	r2, r0
 8002662:	4b3e      	ldr	r3, [pc, #248]	; (800275c <main+0x140>)
 8002664:	605a      	str	r2, [r3, #4]
thermal_channels[THERMAL_12_V_CHANNEL] = new_thermal_sensor(i2cBus, 0, 1, 0);
 8002666:	4b3c      	ldr	r3, [pc, #240]	; (8002758 <main+0x13c>)
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	2300      	movs	r3, #0
 800266c:	2201      	movs	r2, #1
 800266e:	2100      	movs	r1, #0
 8002670:	f000 fc7b 	bl	8002f6a <new_thermal_sensor>
 8002674:	0002      	movs	r2, r0
 8002676:	4b39      	ldr	r3, [pc, #228]	; (800275c <main+0x140>)
 8002678:	609a      	str	r2, [r3, #8]

#endif

#ifdef ANALOG_ENABLE

current_channels[CS3_3_3_V] = new_analog(&hadc1, 0, 0, 1, 0);
 800267a:	4839      	ldr	r0, [pc, #228]	; (8002760 <main+0x144>)
 800267c:	2300      	movs	r3, #0
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	f7ff fdbf 	bl	8002208 <new_analog>
 800268a:	0002      	movs	r2, r0
 800268c:	4b35      	ldr	r3, [pc, #212]	; (8002764 <main+0x148>)
 800268e:	601a      	str	r2, [r3, #0]
current_channels[CS2_5_V] = new_analog(&hadc1, 0, 1, 0, 0);
 8002690:	4833      	ldr	r0, [pc, #204]	; (8002760 <main+0x144>)
 8002692:	2300      	movs	r3, #0
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2300      	movs	r3, #0
 8002698:	2201      	movs	r2, #1
 800269a:	2100      	movs	r1, #0
 800269c:	f7ff fdb4 	bl	8002208 <new_analog>
 80026a0:	0002      	movs	r2, r0
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <main+0x148>)
 80026a4:	605a      	str	r2, [r3, #4]
current_channels[CS1_12_V] = new_analog(&hadc1, 0, 0, 0, 0);
 80026a6:	482e      	ldr	r0, [pc, #184]	; (8002760 <main+0x144>)
 80026a8:	2300      	movs	r3, #0
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	f7ff fda9 	bl	8002208 <new_analog>
 80026b6:	0002      	movs	r2, r0
 80026b8:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <main+0x148>)
 80026ba:	609a      	str	r2, [r3, #8]

voltage_channels[VOLTAGE_DIVIDER_3_3_V] = new_analog(&hadc1, 1, 0, 1, 0);
 80026bc:	4828      	ldr	r0, [pc, #160]	; (8002760 <main+0x144>)
 80026be:	2300      	movs	r3, #0
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2301      	movs	r3, #1
 80026c4:	2200      	movs	r2, #0
 80026c6:	2101      	movs	r1, #1
 80026c8:	f7ff fd9e 	bl	8002208 <new_analog>
 80026cc:	0002      	movs	r2, r0
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <main+0x14c>)
 80026d0:	601a      	str	r2, [r3, #0]
voltage_channels[VOLTAGE_DIVIDER_5_V] = new_analog(&hadc1, 1, 1, 0, 0);
 80026d2:	4823      	ldr	r0, [pc, #140]	; (8002760 <main+0x144>)
 80026d4:	2300      	movs	r3, #0
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2300      	movs	r3, #0
 80026da:	2201      	movs	r2, #1
 80026dc:	2101      	movs	r1, #1
 80026de:	f7ff fd93 	bl	8002208 <new_analog>
 80026e2:	0002      	movs	r2, r0
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <main+0x14c>)
 80026e6:	605a      	str	r2, [r3, #4]
voltage_channels[VOLTAGE_DIVIDER_12_V] = new_analog(&hadc1, 1, 0, 0, 0);
 80026e8:	481d      	ldr	r0, [pc, #116]	; (8002760 <main+0x144>)
 80026ea:	2300      	movs	r3, #0
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2300      	movs	r3, #0
 80026f0:	2200      	movs	r2, #0
 80026f2:	2101      	movs	r1, #1
 80026f4:	f7ff fd88 	bl	8002208 <new_analog>
 80026f8:	0002      	movs	r2, r0
 80026fa:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <main+0x14c>)
 80026fc:	609a      	str	r2, [r3, #8]
#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fe:	f000 f837 	bl	8002770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002702:	f000 f981 	bl	8002a08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002706:	f000 f893 	bl	8002830 <MX_ADC1_Init>
  MX_I2C1_Init();
 800270a:	f000 f8fd 	bl	8002908 <MX_I2C1_Init>
  MX_I2C2_Init();
 800270e:	f000 f93b 	bl	8002988 <MX_I2C2_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef THERMAL_ENABLE

      for (int i = 0; i < THERMAL_DEVICES; ++i) {
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	e00e      	b.n	8002736 <main+0x11a>
          thermal_data[i] = get_thermal_data(thermal_channels[i]);
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <main+0x140>)
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	0092      	lsls	r2, r2, #2
 800271e:	58d3      	ldr	r3, [r2, r3]
 8002720:	0018      	movs	r0, r3
 8002722:	f000 fc61 	bl	8002fe8 <get_thermal_data>
 8002726:	1c01      	adds	r1, r0, #0
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <main+0x150>)
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	50d1      	str	r1, [r2, r3]
      for (int i = 0; i < THERMAL_DEVICES; ++i) {
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3301      	adds	r3, #1
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b02      	cmp	r3, #2
 800273a:	dded      	ble.n	8002718 <main+0xfc>
      }

      send_thermal_data(thermal_data);
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <main+0x150>)
 800273e:	0018      	movs	r0, r3
 8002740:	f7ff fe38 	bl	80023b4 <send_thermal_data>

#endif

#ifdef ANALOG_ENABLE
      get_analog_data();
 8002744:	f7ff fea8 	bl	8002498 <get_analog_data>
      send_current_data();
 8002748:	f7ff feec 	bl	8002524 <send_current_data>
      send_voltage_data();
 800274c:	f7ff ff28 	bl	80025a0 <send_voltage_data>
      for (int i = 0; i < THERMAL_DEVICES; ++i) {
 8002750:	e7df      	b.n	8002712 <main+0xf6>
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	200000b0 	.word	0x200000b0
 8002758:	20000154 	.word	0x20000154
 800275c:	200001bc 	.word	0x200001bc
 8002760:	20000158 	.word	0x20000158
 8002764:	200001c8 	.word	0x200001c8
 8002768:	200001d4 	.word	0x200001d4
 800276c:	20000148 	.word	0x20000148

08002770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b099      	sub	sp, #100	; 0x64
 8002774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002776:	242c      	movs	r4, #44	; 0x2c
 8002778:	193b      	adds	r3, r7, r4
 800277a:	0018      	movs	r0, r3
 800277c:	2334      	movs	r3, #52	; 0x34
 800277e:	001a      	movs	r2, r3
 8002780:	2100      	movs	r1, #0
 8002782:	f005 f9a0 	bl	8007ac6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002786:	231c      	movs	r3, #28
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	0018      	movs	r0, r3
 800278c:	2310      	movs	r3, #16
 800278e:	001a      	movs	r2, r3
 8002790:	2100      	movs	r1, #0
 8002792:	f005 f998 	bl	8007ac6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	0018      	movs	r0, r3
 800279a:	2318      	movs	r3, #24
 800279c:	001a      	movs	r2, r3
 800279e:	2100      	movs	r1, #0
 80027a0:	f005 f991 	bl	8007ac6 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f004 fb49 	bl	8006e40 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b4:	193b      	adds	r3, r7, r4
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0052      	lsls	r2, r2, #1
 80027ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027bc:	193b      	adds	r3, r7, r4
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	2240      	movs	r2, #64	; 0x40
 80027c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	0018      	movs	r0, r3
 80027d2:	f004 fb75 	bl	8006ec0 <HAL_RCC_OscConfig>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80027da:	f000 f99f 	bl	8002b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027de:	211c      	movs	r1, #28
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2207      	movs	r2, #7
 80027e4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2200      	movs	r2, #0
 80027ea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2200      	movs	r2, #0
 80027f0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	2200      	movs	r2, #0
 80027f6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2100      	movs	r1, #0
 80027fc:	0018      	movs	r0, r3
 80027fe:	f004 fe75 	bl	80074ec <HAL_RCC_ClockConfig>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d001      	beq.n	800280a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002806:	f000 f989 	bl	8002b1c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2220      	movs	r2, #32
 800280e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	0018      	movs	r0, r3
 800281a:	f004 fff1 	bl	8007800 <HAL_RCCEx_PeriphCLKConfig>
 800281e:	1e03      	subs	r3, r0, #0
 8002820:	d001      	beq.n	8002826 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002822:	f000 f97b 	bl	8002b1c <Error_Handler>
  }
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b019      	add	sp, #100	; 0x64
 800282c:	bd90      	pop	{r4, r7, pc}
	...

08002830 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	0018      	movs	r0, r3
 800283a:	230c      	movs	r3, #12
 800283c:	001a      	movs	r2, r3
 800283e:	2100      	movs	r1, #0
 8002840:	f005 f941 	bl	8007ac6 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002846:	4a2e      	ldr	r2, [pc, #184]	; (8002900 <MX_ADC1_Init+0xd0>)
 8002848:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <MX_ADC1_Init+0xcc>)
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	05d2      	lsls	r2, r2, #23
 8002850:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002852:	4b2a      	ldr	r3, [pc, #168]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002858:	4b28      	ldr	r3, [pc, #160]	; (80028fc <MX_ADC1_Init+0xcc>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002864:	4b25      	ldr	r3, [pc, #148]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002866:	2204      	movs	r2, #4
 8002868:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <MX_ADC1_Init+0xcc>)
 800286c:	2200      	movs	r2, #0
 800286e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002870:	4b22      	ldr	r3, [pc, #136]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002872:	2200      	movs	r2, #0
 8002874:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002876:	4b21      	ldr	r3, [pc, #132]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002878:	2200      	movs	r2, #0
 800287a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800287c:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <MX_ADC1_Init+0xcc>)
 800287e:	2201      	movs	r2, #1
 8002880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002884:	2220      	movs	r2, #32
 8002886:	2100      	movs	r1, #0
 8002888:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <MX_ADC1_Init+0xcc>)
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002890:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002892:	2200      	movs	r2, #0
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <MX_ADC1_Init+0xcc>)
 8002898:	222c      	movs	r2, #44	; 0x2c
 800289a:	2100      	movs	r1, #0
 800289c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <MX_ADC1_Init+0xcc>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80028a4:	4b15      	ldr	r3, [pc, #84]	; (80028fc <MX_ADC1_Init+0xcc>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80028aa:	4b14      	ldr	r3, [pc, #80]	; (80028fc <MX_ADC1_Init+0xcc>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <MX_ADC1_Init+0xcc>)
 80028b2:	223c      	movs	r2, #60	; 0x3c
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80028b8:	4b10      	ldr	r3, [pc, #64]	; (80028fc <MX_ADC1_Init+0xcc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <MX_ADC1_Init+0xcc>)
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 fe57 	bl	8003574 <HAL_ADC_Init>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d001      	beq.n	80028ce <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80028ca:	f000 f927 	bl	8002b1c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <MX_ADC1_Init+0xd4>)
 80028d2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028e0:	1d3a      	adds	r2, r7, #4
 80028e2:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_ADC1_Init+0xcc>)
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f001 f94c 	bl	8003b84 <HAL_ADC_ConfigChannel>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d001      	beq.n	80028f4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80028f0:	f000 f914 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b004      	add	sp, #16
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000158 	.word	0x20000158
 8002900:	40012400 	.word	0x40012400
 8002904:	04000002 	.word	0x04000002

08002908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <MX_I2C1_Init+0x74>)
 800290e:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <MX_I2C1_Init+0x78>)
 8002910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <MX_I2C1_Init+0x74>)
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <MX_I2C1_Init+0x7c>)
 8002916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <MX_I2C1_Init+0x74>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <MX_I2C1_Init+0x74>)
 8002920:	2201      	movs	r2, #1
 8002922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <MX_I2C1_Init+0x74>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <MX_I2C1_Init+0x74>)
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002930:	4b12      	ldr	r3, [pc, #72]	; (800297c <MX_I2C1_Init+0x74>)
 8002932:	2200      	movs	r2, #0
 8002934:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <MX_I2C1_Init+0x74>)
 8002938:	2200      	movs	r2, #0
 800293a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <MX_I2C1_Init+0x74>)
 800293e:	2200      	movs	r2, #0
 8002940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <MX_I2C1_Init+0x74>)
 8002944:	0018      	movs	r0, r3
 8002946:	f001 ff8d 	bl	8004864 <HAL_I2C_Init>
 800294a:	1e03      	subs	r3, r0, #0
 800294c:	d001      	beq.n	8002952 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800294e:	f000 f8e5 	bl	8002b1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <MX_I2C1_Init+0x74>)
 8002954:	2100      	movs	r1, #0
 8002956:	0018      	movs	r0, r3
 8002958:	f004 f9da 	bl	8006d10 <HAL_I2CEx_ConfigAnalogFilter>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d001      	beq.n	8002964 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002960:	f000 f8dc 	bl	8002b1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <MX_I2C1_Init+0x74>)
 8002966:	2100      	movs	r1, #0
 8002968:	0018      	movs	r0, r3
 800296a:	f004 fa1d 	bl	8006da8 <HAL_I2CEx_ConfigDigitalFilter>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d001      	beq.n	8002976 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002972:	f000 f8d3 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200000b0 	.word	0x200000b0
 8002980:	40005400 	.word	0x40005400
 8002984:	00303d5b 	.word	0x00303d5b

08002988 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <MX_I2C2_Init+0x74>)
 800298e:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <MX_I2C2_Init+0x78>)
 8002990:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <MX_I2C2_Init+0x74>)
 8002994:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <MX_I2C2_Init+0x7c>)
 8002996:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002998:	4b18      	ldr	r3, [pc, #96]	; (80029fc <MX_I2C2_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800299e:	4b17      	ldr	r3, [pc, #92]	; (80029fc <MX_I2C2_Init+0x74>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <MX_I2C2_Init+0x74>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <MX_I2C2_Init+0x74>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <MX_I2C2_Init+0x74>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <MX_I2C2_Init+0x74>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <MX_I2C2_Init+0x74>)
 80029be:	2200      	movs	r2, #0
 80029c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <MX_I2C2_Init+0x74>)
 80029c4:	0018      	movs	r0, r3
 80029c6:	f001 ff4d 	bl	8004864 <HAL_I2C_Init>
 80029ca:	1e03      	subs	r3, r0, #0
 80029cc:	d001      	beq.n	80029d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80029ce:	f000 f8a5 	bl	8002b1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <MX_I2C2_Init+0x74>)
 80029d4:	2100      	movs	r1, #0
 80029d6:	0018      	movs	r0, r3
 80029d8:	f004 f99a 	bl	8006d10 <HAL_I2CEx_ConfigAnalogFilter>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d001      	beq.n	80029e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80029e0:	f000 f89c 	bl	8002b1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <MX_I2C2_Init+0x74>)
 80029e6:	2100      	movs	r1, #0
 80029e8:	0018      	movs	r0, r3
 80029ea:	f004 f9dd 	bl	8006da8 <HAL_I2CEx_ConfigDigitalFilter>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d001      	beq.n	80029f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80029f2:	f000 f893 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200000fc 	.word	0x200000fc
 8002a00:	40005800 	.word	0x40005800
 8002a04:	00303d5b 	.word	0x00303d5b

08002a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0e:	240c      	movs	r4, #12
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	0018      	movs	r0, r3
 8002a14:	2314      	movs	r3, #20
 8002a16:	001a      	movs	r2, r3
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f005 f854 	bl	8007ac6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a22:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34
 8002a2a:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	2201      	movs	r2, #1
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a3a:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	635a      	str	r2, [r3, #52]	; 0x34
 8002a42:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	2202      	movs	r2, #2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4e:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a52:	4b2f      	ldr	r3, [pc, #188]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a54:	2104      	movs	r1, #4
 8002a56:	430a      	orrs	r2, r1
 8002a58:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5a:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <MX_GPIO_Init+0x108>)
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	2204      	movs	r2, #4
 8002a60:	4013      	ands	r3, r2
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|Analog_Enable_Pin, GPIO_PIN_RESET);
 8002a66:	2390      	movs	r3, #144	; 0x90
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	482a      	ldr	r0, [pc, #168]	; (8002b14 <MX_GPIO_Init+0x10c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	0019      	movs	r1, r3
 8002a70:	f001 feda 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Analog_Select_Pin|Analog_SelectA9_Pin, GPIO_PIN_RESET);
 8002a74:	23c0      	movs	r3, #192	; 0xc0
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	23a0      	movs	r3, #160	; 0xa0
 8002a7a:	05db      	lsls	r3, r3, #23
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f001 fed2 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Analog_SelectC6_Pin|Analog_SelectC7_Pin, GPIO_PIN_RESET);
 8002a84:	4b24      	ldr	r3, [pc, #144]	; (8002b18 <MX_GPIO_Init+0x110>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	21c0      	movs	r1, #192	; 0xc0
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f001 fecc 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 Analog_Enable_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|Analog_Enable_Pin;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2290      	movs	r2, #144	; 0x90
 8002a94:	0212      	lsls	r2, r2, #8
 8002a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a98:	193b      	adds	r3, r7, r4
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <MX_GPIO_Init+0x10c>)
 8002aae:	0019      	movs	r1, r3
 8002ab0:	0010      	movs	r0, r2
 8002ab2:	f001 fd55 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : Analog_Select_Pin Analog_SelectA9_Pin */
  GPIO_InitStruct.Pin = Analog_Select_Pin|Analog_SelectA9_Pin;
 8002ab6:	0021      	movs	r1, r4
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	22c0      	movs	r2, #192	; 0xc0
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac0:	000c      	movs	r4, r1
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	193b      	adds	r3, r7, r4
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad4:	193a      	adds	r2, r7, r4
 8002ad6:	23a0      	movs	r3, #160	; 0xa0
 8002ad8:	05db      	lsls	r3, r3, #23
 8002ada:	0011      	movs	r1, r2
 8002adc:	0018      	movs	r0, r3
 8002ade:	f001 fd3f 	bl	8004560 <HAL_GPIO_Init>

  /*Configure GPIO pins : Analog_SelectC6_Pin Analog_SelectC7_Pin */
  GPIO_InitStruct.Pin = Analog_SelectC6_Pin|Analog_SelectC7_Pin;
 8002ae2:	0021      	movs	r1, r4
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	22c0      	movs	r2, #192	; 0xc0
 8002ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	2201      	movs	r2, #1
 8002aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	187b      	adds	r3, r7, r1
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	4a06      	ldr	r2, [pc, #24]	; (8002b18 <MX_GPIO_Init+0x110>)
 8002b00:	0019      	movs	r1, r3
 8002b02:	0010      	movs	r0, r2
 8002b04:	f001 fd2c 	bl	8004560 <HAL_GPIO_Init>

}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b009      	add	sp, #36	; 0x24
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	50000400 	.word	0x50000400
 8002b18:	50000800 	.word	0x50000800

08002b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <Error_Handler+0x8>

08002b26 <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c) {
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
    SMBus *smbus = malloc(sizeof(SMBus));
 8002b2e:	2024      	movs	r0, #36	; 0x24
 8002b30:	f004 ffb6 	bl	8007aa0 <malloc>
 8002b34:	0003      	movs	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	601a      	str	r2, [r3, #0]
    smbus->DMA = TRUE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2223      	movs	r2, #35	; 0x23
 8002b42:	2101      	movs	r1, #1
 8002b44:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	3305      	adds	r3, #5
 8002b4a:	221e      	movs	r2, #30
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f004 ffb9 	bl	8007ac6 <memset>

    return smbus;
 8002b54:	68fb      	ldr	r3, [r7, #12]
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b004      	add	sp, #16
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <disable_DMA>:

void disable_DMA(SMBus *smbus) {
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
    smbus->DMA = FALSE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2223      	movs	r2, #35	; 0x23
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	5499      	strb	r1, [r3, r2]
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <read_word_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
    }
    _check_error(smbus);
}

long read_word_data(SMBus *smbus, uint8_t addr, char cmd) {
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af02      	add	r7, sp, #8
 8002b7c:	6078      	str	r0, [r7, #4]
 8002b7e:	0008      	movs	r0, r1
 8002b80:	0011      	movs	r1, r2
 8002b82:	1cfb      	adds	r3, r7, #3
 8002b84:	1c02      	adds	r2, r0, #0
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	1cbb      	adds	r3, r7, #2
 8002b8a:	1c0a      	adds	r2, r1, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	1cba      	adds	r2, r7, #2
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	715a      	strb	r2, [r3, #5]
    if (!smbus->DMA) {
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2223      	movs	r2, #35	; 0x23
 8002b9a:	5c9b      	ldrb	r3, [r3, r2]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d113      	bne.n	8002bc8 <read_word_data+0x52>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, HAL_MAX_DELAY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	1cfb      	adds	r3, r7, #3
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	18db      	adds	r3, r3, r3
 8002bac:	b299      	uxth	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	1d5a      	adds	r2, r3, #5
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	425b      	negs	r3, r3
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f001 fee9 	bl	8004990 <HAL_I2C_Master_Transmit>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	711a      	strb	r2, [r3, #4]
 8002bc6:	e00f      	b.n	8002be8 <read_word_data+0x72>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	1cfb      	adds	r3, r7, #3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	18db      	adds	r3, r3, r3
 8002bd4:	b299      	uxth	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	1d5a      	adds	r2, r3, #5
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f002 f8e8 	bl	8004db0 <HAL_I2C_Master_Transmit_DMA>
 8002be0:	0003      	movs	r3, r0
 8002be2:	001a      	movs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	711a      	strb	r2, [r3, #4]
    }
    _check_error(smbus);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 f840 	bl	8002c70 <_check_error>

    //reads from address sent above
    if (!smbus->DMA){
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2223      	movs	r2, #35	; 0x23
 8002bf4:	5c9b      	ldrb	r3, [r3, r2]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d116      	bne.n	8002c28 <read_word_data+0xb2>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 2, HAL_MAX_DELAY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	1cfb      	adds	r3, r7, #3
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	2201      	movs	r2, #1
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	b21b      	sxth	r3, r3
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	1d5a      	adds	r2, r3, #5
 8002c12:	2301      	movs	r3, #1
 8002c14:	425b      	negs	r3, r3
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f001 ffc1 	bl	8004ba0 <HAL_I2C_Master_Receive>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	001a      	movs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	711a      	strb	r2, [r3, #4]
 8002c26:	e012      	b.n	8002c4e <read_word_data+0xd8>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	1cfb      	adds	r3, r7, #3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	b21b      	sxth	r3, r3
 8002c34:	2201      	movs	r2, #1
 8002c36:	4313      	orrs	r3, r2
 8002c38:	b21b      	sxth	r3, r3
 8002c3a:	b299      	uxth	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	1d5a      	adds	r2, r3, #5
 8002c40:	2302      	movs	r3, #2
 8002c42:	f002 f9bb 	bl	8004fbc <HAL_I2C_Master_Receive_DMA>
 8002c46:	0003      	movs	r3, r0
 8002c48:	001a      	movs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	711a      	strb	r2, [r3, #4]
    }
    _check_error(smbus);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 f80d 	bl	8002c70 <_check_error>

    long data = smbus->buf[0] | (smbus->buf[1] << 8);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	795b      	ldrb	r3, [r3, #5]
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	799b      	ldrb	r3, [r3, #6]
 8002c60:	021b      	lsls	r3, r3, #8
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
    return data;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b004      	add	sp, #16
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_check_error>:
    }

    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	791b      	ldrb	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00d      	beq.n	8002c9c <_check_error+0x2c>
        strcpy((char*)smbus->buf, "Err \r\n");
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1d5a      	adds	r2, r3, #5
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <_check_error+0x38>)
 8002c86:	0010      	movs	r0, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	f004 ff11 	bl	8007ab4 <memcpy>

//        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), HAL_MAX_DELAY);
        HAL_Delay(10);
 8002c92:	200a      	movs	r0, #10
 8002c94:	f000 faf8 	bl	8003288 <HAL_Delay>
        return FALSE;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e000      	b.n	8002c9e <_check_error+0x2e>
    }
    return TRUE;
 8002c9c:	2301      	movs	r3, #1
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	08008368 	.word	0x08008368

08002cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_MspInit+0x44>)
 8002ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	0549      	lsls	r1, r1, #21
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	055b      	lsls	r3, r3, #21
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b002      	add	sp, #8
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b08b      	sub	sp, #44	; 0x2c
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	2414      	movs	r4, #20
 8002cfe:	193b      	adds	r3, r7, r4
 8002d00:	0018      	movs	r0, r3
 8002d02:	2314      	movs	r3, #20
 8002d04:	001a      	movs	r2, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	f004 fedd 	bl	8007ac6 <memset>
  if(hadc->Instance==ADC1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a18      	ldr	r2, [pc, #96]	; (8002d74 <HAL_ADC_MspInit+0x80>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d129      	bne.n	8002d6a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d16:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_ADC_MspInit+0x84>)
 8002d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_ADC_MspInit+0x84>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	0349      	lsls	r1, r1, #13
 8002d20:	430a      	orrs	r2, r1
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_ADC_MspInit+0x84>)
 8002d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	035b      	lsls	r3, r3, #13
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_ADC_MspInit+0x84>)
 8002d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_ADC_MspInit+0x84>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_ADC_MspInit+0x84>)
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	2201      	movs	r2, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d4a:	193b      	adds	r3, r7, r4
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	2203      	movs	r2, #3
 8002d54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	193b      	adds	r3, r7, r4
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	193a      	adds	r2, r7, r4
 8002d5e:	23a0      	movs	r3, #160	; 0xa0
 8002d60:	05db      	lsls	r3, r3, #23
 8002d62:	0011      	movs	r1, r2
 8002d64:	0018      	movs	r0, r3
 8002d66:	f001 fbfb 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b00b      	add	sp, #44	; 0x2c
 8002d70:	bd90      	pop	{r4, r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	40012400 	.word	0x40012400
 8002d78:	40021000 	.word	0x40021000

08002d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b08d      	sub	sp, #52	; 0x34
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	241c      	movs	r4, #28
 8002d86:	193b      	adds	r3, r7, r4
 8002d88:	0018      	movs	r0, r3
 8002d8a:	2314      	movs	r3, #20
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	2100      	movs	r1, #0
 8002d90:	f004 fe99 	bl	8007ac6 <memset>
  if(hi2c->Instance==I2C1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a46      	ldr	r2, [pc, #280]	; (8002eb4 <HAL_I2C_MspInit+0x138>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d150      	bne.n	8002e40 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da2:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	430a      	orrs	r2, r1
 8002da8:	635a      	str	r2, [r3, #52]	; 0x34
 8002daa:	4b43      	ldr	r3, [pc, #268]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dae:	2201      	movs	r2, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc2:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	00d2      	lsls	r2, r2, #3
 8002dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd6:	193b      	adds	r3, r7, r4
 8002dd8:	2212      	movs	r2, #18
 8002dda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ddc:	193b      	adds	r3, r7, r4
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de2:	193b      	adds	r3, r7, r4
 8002de4:	2200      	movs	r2, #0
 8002de6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de8:	193a      	adds	r2, r7, r4
 8002dea:	23a0      	movs	r3, #160	; 0xa0
 8002dec:	05db      	lsls	r3, r3, #23
 8002dee:	0011      	movs	r1, r2
 8002df0:	0018      	movs	r0, r3
 8002df2:	f001 fbb5 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002df6:	0021      	movs	r1, r4
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2212      	movs	r2, #18
 8002e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2206      	movs	r2, #6
 8002e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <HAL_I2C_MspInit+0x140>)
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	0010      	movs	r0, r2
 8002e1e:	f001 fb9f 	bl	8004560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	0389      	lsls	r1, r1, #14
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e30:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	039b      	lsls	r3, r3, #14
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e3e:	e035      	b.n	8002eac <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <HAL_I2C_MspInit+0x144>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d130      	bne.n	8002eac <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002e50:	2102      	movs	r1, #2
 8002e52:	430a      	orrs	r2, r1
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34
 8002e56:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002e62:	211c      	movs	r1, #28
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	22c0      	movs	r2, #192	; 0xc0
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	2212      	movs	r2, #18
 8002e70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2206      	movs	r2, #6
 8002e82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	4a0d      	ldr	r2, [pc, #52]	; (8002ebc <HAL_I2C_MspInit+0x140>)
 8002e88:	0019      	movs	r1, r3
 8002e8a:	0010      	movs	r0, r2
 8002e8c:	f001 fb68 	bl	8004560 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002e96:	2180      	movs	r1, #128	; 0x80
 8002e98:	03c9      	lsls	r1, r1, #15
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_I2C_MspInit+0x13c>)
 8002ea0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	03db      	lsls	r3, r3, #15
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	68bb      	ldr	r3, [r7, #8]
}
 8002eac:	46c0      	nop			; (mov r8, r8)
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b00d      	add	sp, #52	; 0x34
 8002eb2:	bd90      	pop	{r4, r7, pc}
 8002eb4:	40005400 	.word	0x40005400
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	50000400 	.word	0x50000400
 8002ec0:	40005800 	.word	0x40005800

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <NMI_Handler+0x4>

08002eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ece:	e7fe      	b.n	8002ece <HardFault_Handler+0x4>

08002ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 f9b2 	bl	8003250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002efc:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <_sbrk+0x5c>)
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <_sbrk+0x60>)
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <_sbrk+0x64>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <_sbrk+0x64>)
 8002f12:	4a12      	ldr	r2, [pc, #72]	; (8002f5c <_sbrk+0x68>)
 8002f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f16:	4b10      	ldr	r3, [pc, #64]	; (8002f58 <_sbrk+0x64>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d207      	bcs.n	8002f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f24:	f004 fd92 	bl	8007a4c <__errno>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	425b      	negs	r3, r3
 8002f32:	e009      	b.n	8002f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <_sbrk+0x64>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	18d2      	adds	r2, r2, r3
 8002f42:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <_sbrk+0x64>)
 8002f44:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b006      	add	sp, #24
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20004800 	.word	0x20004800
 8002f54:	00000400 	.word	0x00000400
 8002f58:	2000008c 	.word	0x2000008c
 8002f5c:	200001f8 	.word	0x200001f8

08002f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <new_thermal_sensor>:
//
//
// All Public Functions

// EFFECTS: Create a new ThermalSensor struct and returns pointer to struct.
ThermalSensor* new_thermal_sensor(SMBus* _i2cBus, uint8_t A0, uint8_t A1, uint8_t A2){
 8002f6a:	b590      	push	{r4, r7, lr}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	000c      	movs	r4, r1
 8002f74:	0010      	movs	r0, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	1cfb      	adds	r3, r7, #3
 8002f7a:	1c22      	adds	r2, r4, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	1cbb      	adds	r3, r7, #2
 8002f80:	1c02      	adds	r2, r0, #0
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	1c7b      	adds	r3, r7, #1
 8002f86:	1c0a      	adds	r2, r1, #0
 8002f88:	701a      	strb	r2, [r3, #0]

	// Create a new struct
	ThermalSensor* _thermal_sensor = (ThermalSensor*) malloc(sizeof(ThermalSensor));
 8002f8a:	2008      	movs	r0, #8
 8002f8c:	f004 fd88 	bl	8007aa0 <malloc>
 8002f90:	0003      	movs	r3, r0
 8002f92:	60fb      	str	r3, [r7, #12]

	// Initialize the struct
	_thermal_sensor->address = 0b0011000;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2218      	movs	r2, #24
 8002f98:	601a      	str	r2, [r3, #0]
	if (A0) _thermal_sensor->address |= 0b001;
 8002f9a:	1cfb      	adds	r3, r7, #3
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <new_thermal_sensor+0x44>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	601a      	str	r2, [r3, #0]
	if (A1) _thermal_sensor->address |= 0b010;
 8002fae:	1cbb      	adds	r3, r7, #2
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <new_thermal_sensor+0x58>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	601a      	str	r2, [r3, #0]
	if (A2) _thermal_sensor->address |= 0b100;
 8002fc2:	1c7b      	adds	r3, r7, #1
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <new_thermal_sensor+0x6c>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	601a      	str	r2, [r3, #0]

	_thermal_sensor->i2cBus = _i2cBus;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	605a      	str	r2, [r3, #4]

	return _thermal_sensor;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b005      	add	sp, #20
 8002fe4:	bd90      	pop	{r4, r7, pc}
	...

08002fe8 <get_thermal_data>:

// EFFECTS: Get temperature data from a thermal sensor in Celsius
float get_thermal_data(const ThermalSensor* _thermal_sensor){
 8002fe8:	b5b0      	push	{r4, r5, r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

	int specific_address = _thermal_sensor->address;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	61bb      	str	r3, [r7, #24]

	// rawData is the data for the ambient
	// 0b000000101 is 0x05
	float rawData = read_word_data(_thermal_sensor->i2cBus, specific_address, 0b000000101);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	b2d1      	uxtb	r1, r2
 8002ffe:	2205      	movs	r2, #5
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff fdb8 	bl	8002b76 <read_word_data>
 8003006:	0003      	movs	r3, r0
 8003008:	0018      	movs	r0, r3
 800300a:	f7fd fb53 	bl	80006b4 <__aeabi_i2f>
 800300e:	1c03      	adds	r3, r0, #0
 8003010:	617b      	str	r3, [r7, #20]

	float lower_byte = (int)rawData & 0xFF;; // original && 0000000...111111111
 8003012:	6978      	ldr	r0, [r7, #20]
 8003014:	f7fd fb2e 	bl	8000674 <__aeabi_f2iz>
 8003018:	0003      	movs	r3, r0
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	4013      	ands	r3, r2
 800301e:	0018      	movs	r0, r3
 8003020:	f7fd fb48 	bl	80006b4 <__aeabi_i2f>
 8003024:	1c03      	adds	r3, r0, #0
 8003026:	613b      	str	r3, [r7, #16]
	float upper_byte = ((int)rawData & 0xFF00) >> 8;; // original bit shifted
 8003028:	6978      	ldr	r0, [r7, #20]
 800302a:	f7fd fb23 	bl	8000674 <__aeabi_f2iz>
 800302e:	0003      	movs	r3, r0
 8003030:	121b      	asrs	r3, r3, #8
 8003032:	22ff      	movs	r2, #255	; 0xff
 8003034:	4013      	ands	r3, r2
 8003036:	0018      	movs	r0, r3
 8003038:	f7fd fb3c 	bl	80006b4 <__aeabi_i2f>
 800303c:	1c03      	adds	r3, r0, #0
 800303e:	60fb      	str	r3, [r7, #12]

	// Clear flag bits
	upper_byte = (int)upper_byte & 0x1F;
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f7fd fb17 	bl	8000674 <__aeabi_f2iz>
 8003046:	0003      	movs	r3, r0
 8003048:	221f      	movs	r2, #31
 800304a:	4013      	ands	r3, r2
 800304c:	0018      	movs	r0, r3
 800304e:	f7fd fb31 	bl	80006b4 <__aeabi_i2f>
 8003052:	1c03      	adds	r3, r0, #0
 8003054:	60fb      	str	r3, [r7, #12]

	// If the sign bit is zero,
	// then the ambient temperature is greater than 0 celsius.
	// If the sign bit is one,
	// then the ambient temperature is less than 0 celsius.
	int sign_bit = ((int)upper_byte & 0x10) >> 4;
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7fd fb0c 	bl	8000674 <__aeabi_f2iz>
 800305c:	0003      	movs	r3, r0
 800305e:	111b      	asrs	r3, r3, #4
 8003060:	2201      	movs	r2, #1
 8003062:	4013      	ands	r3, r2
 8003064:	60bb      	str	r3, [r7, #8]
	
	float actual_temperature = 0;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
	if (sign_bit) {
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d031      	beq.n	80030d4 <get_thermal_data+0xec>
		upper_byte = (int)upper_byte & 0x0F;
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7fd faff 	bl	8000674 <__aeabi_f2iz>
 8003076:	0003      	movs	r3, r0
 8003078:	220f      	movs	r2, #15
 800307a:	4013      	ands	r3, r2
 800307c:	0018      	movs	r0, r3
 800307e:	f7fd fb19 	bl	80006b4 <__aeabi_i2f>
 8003082:	1c03      	adds	r3, r0, #0
 8003084:	60fb      	str	r3, [r7, #12]
		actual_temperature = (float)256 - ((float)upper_byte * (float)16 + (1.0 / 16.0) * (float)lower_byte);
 8003086:	2183      	movs	r1, #131	; 0x83
 8003088:	05c9      	lsls	r1, r1, #23
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7fd f9d8 	bl	8000440 <__aeabi_fmul>
 8003090:	1c03      	adds	r3, r0, #0
 8003092:	1c18      	adds	r0, r3, #0
 8003094:	f7fe ffca 	bl	800202c <__aeabi_f2d>
 8003098:	0004      	movs	r4, r0
 800309a:	000d      	movs	r5, r1
 800309c:	6938      	ldr	r0, [r7, #16]
 800309e:	f7fe ffc5 	bl	800202c <__aeabi_f2d>
 80030a2:	2200      	movs	r2, #0
 80030a4:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <get_thermal_data+0x138>)
 80030a6:	f7fe f99d 	bl	80013e4 <__aeabi_dmul>
 80030aa:	0002      	movs	r2, r0
 80030ac:	000b      	movs	r3, r1
 80030ae:	0020      	movs	r0, r4
 80030b0:	0029      	movs	r1, r5
 80030b2:	f7fd fb45 	bl	8000740 <__aeabi_dadd>
 80030b6:	0002      	movs	r2, r0
 80030b8:	000b      	movs	r3, r1
 80030ba:	2000      	movs	r0, #0
 80030bc:	4919      	ldr	r1, [pc, #100]	; (8003124 <get_thermal_data+0x13c>)
 80030be:	f7fe fbfd 	bl	80018bc <__aeabi_dsub>
 80030c2:	0002      	movs	r2, r0
 80030c4:	000b      	movs	r3, r1
 80030c6:	0010      	movs	r0, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	f7fe fff7 	bl	80020bc <__aeabi_d2f>
 80030ce:	1c03      	adds	r3, r0, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	e01f      	b.n	8003114 <get_thermal_data+0x12c>
	}
	else {
		actual_temperature = (float)upper_byte * (float)16 + (1.0 / 16.0) * (float)lower_byte;
 80030d4:	2183      	movs	r1, #131	; 0x83
 80030d6:	05c9      	lsls	r1, r1, #23
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f7fd f9b1 	bl	8000440 <__aeabi_fmul>
 80030de:	1c03      	adds	r3, r0, #0
 80030e0:	1c18      	adds	r0, r3, #0
 80030e2:	f7fe ffa3 	bl	800202c <__aeabi_f2d>
 80030e6:	0004      	movs	r4, r0
 80030e8:	000d      	movs	r5, r1
 80030ea:	6938      	ldr	r0, [r7, #16]
 80030ec:	f7fe ff9e 	bl	800202c <__aeabi_f2d>
 80030f0:	2200      	movs	r2, #0
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <get_thermal_data+0x138>)
 80030f4:	f7fe f976 	bl	80013e4 <__aeabi_dmul>
 80030f8:	0002      	movs	r2, r0
 80030fa:	000b      	movs	r3, r1
 80030fc:	0020      	movs	r0, r4
 80030fe:	0029      	movs	r1, r5
 8003100:	f7fd fb1e 	bl	8000740 <__aeabi_dadd>
 8003104:	0002      	movs	r2, r0
 8003106:	000b      	movs	r3, r1
 8003108:	0010      	movs	r0, r2
 800310a:	0019      	movs	r1, r3
 800310c:	f7fe ffd6 	bl	80020bc <__aeabi_d2f>
 8003110:	1c03      	adds	r3, r0, #0
 8003112:	61fb      	str	r3, [r7, #28]
	}
	return actual_temperature;
 8003114:	69fb      	ldr	r3, [r7, #28]
}
 8003116:	1c18      	adds	r0, r3, #0
 8003118:	46bd      	mov	sp, r7
 800311a:	b008      	add	sp, #32
 800311c:	bdb0      	pop	{r4, r5, r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	3fb00000 	.word	0x3fb00000
 8003124:	40700000 	.word	0x40700000

08003128 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003128:	480d      	ldr	r0, [pc, #52]	; (8003160 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800312a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800312c:	f7ff ff18 	bl	8002f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003130:	480c      	ldr	r0, [pc, #48]	; (8003164 <LoopForever+0x6>)
  ldr r1, =_edata
 8003132:	490d      	ldr	r1, [pc, #52]	; (8003168 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003134:	4a0d      	ldr	r2, [pc, #52]	; (800316c <LoopForever+0xe>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003138:	e002      	b.n	8003140 <LoopCopyDataInit>

0800313a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800313a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800313c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800313e:	3304      	adds	r3, #4

08003140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003144:	d3f9      	bcc.n	800313a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003148:	4c0a      	ldr	r4, [pc, #40]	; (8003174 <LoopForever+0x16>)
  movs r3, #0
 800314a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800314c:	e001      	b.n	8003152 <LoopFillZerobss>

0800314e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800314e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003150:	3204      	adds	r2, #4

08003152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003154:	d3fb      	bcc.n	800314e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003156:	f004 fc7f 	bl	8007a58 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800315a:	f7ff fa5f 	bl	800261c <main>

0800315e <LoopForever>:

LoopForever:
  b LoopForever
 800315e:	e7fe      	b.n	800315e <LoopForever>
  ldr   r0, =_estack
 8003160:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8003164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003168:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800316c:	0800852c 	.word	0x0800852c
  ldr r2, =_sbss
 8003170:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003174:	200001f4 	.word	0x200001f4

08003178 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003178:	e7fe      	b.n	8003178 <ADC1_IRQHandler>
	...

0800317c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_Init+0x3c>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_Init+0x3c>)
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	0049      	lsls	r1, r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003196:	2003      	movs	r0, #3
 8003198:	f000 f810 	bl	80031bc <HAL_InitTick>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d003      	beq.n	80031a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80031a0:	1dfb      	adds	r3, r7, #7
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e001      	b.n	80031ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80031a8:	f7ff fd80 	bl	8002cac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	781b      	ldrb	r3, [r3, #0]
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40022000 	.word	0x40022000

080031bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031c4:	230f      	movs	r3, #15
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_InitTick+0x88>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d02b      	beq.n	800322c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <HAL_InitTick+0x8c>)
 80031d6:	681c      	ldr	r4, [r3, #0]
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <HAL_InitTick+0x88>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	0019      	movs	r1, r3
 80031de:	23fa      	movs	r3, #250	; 0xfa
 80031e0:	0098      	lsls	r0, r3, #2
 80031e2:	f7fc ff95 	bl	8000110 <__udivsi3>
 80031e6:	0003      	movs	r3, r0
 80031e8:	0019      	movs	r1, r3
 80031ea:	0020      	movs	r0, r4
 80031ec:	f7fc ff90 	bl	8000110 <__udivsi3>
 80031f0:	0003      	movs	r3, r0
 80031f2:	0018      	movs	r0, r3
 80031f4:	f001 f86b 	bl	80042ce <HAL_SYSTICK_Config>
 80031f8:	1e03      	subs	r3, r0, #0
 80031fa:	d112      	bne.n	8003222 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d80a      	bhi.n	8003218 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	2301      	movs	r3, #1
 8003206:	425b      	negs	r3, r3
 8003208:	2200      	movs	r2, #0
 800320a:	0018      	movs	r0, r3
 800320c:	f001 f84a 	bl	80042a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003210:	4b0e      	ldr	r3, [pc, #56]	; (800324c <HAL_InitTick+0x90>)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	e00d      	b.n	8003234 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003218:	230f      	movs	r3, #15
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e008      	b.n	8003234 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003222:	230f      	movs	r3, #15
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e003      	b.n	8003234 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800322c:	230f      	movs	r3, #15
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2201      	movs	r2, #1
 8003232:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003234:	230f      	movs	r3, #15
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	781b      	ldrb	r3, [r3, #0]
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b005      	add	sp, #20
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	20000008 	.word	0x20000008
 8003248:	20000000 	.word	0x20000000
 800324c:	20000004 	.word	0x20000004

08003250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_IncTick+0x1c>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	001a      	movs	r2, r3
 800325a:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_IncTick+0x20>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	18d2      	adds	r2, r2, r3
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_IncTick+0x20>)
 8003262:	601a      	str	r2, [r3, #0]
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	20000008 	.word	0x20000008
 8003270:	200001e0 	.word	0x200001e0

08003274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  return uwTick;
 8003278:	4b02      	ldr	r3, [pc, #8]	; (8003284 <HAL_GetTick+0x10>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	200001e0 	.word	0x200001e0

08003288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003290:	f7ff fff0 	bl	8003274 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3301      	adds	r3, #1
 80032a0:	d005      	beq.n	80032ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_Delay+0x44>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	001a      	movs	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	f7ff ffe0 	bl	8003274 <HAL_GetTick>
 80032b4:	0002      	movs	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d8f7      	bhi.n	80032b0 <HAL_Delay+0x28>
  {
  }
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b004      	add	sp, #16
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	20000008 	.word	0x20000008

080032d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80032e0:	401a      	ands	r2, r3
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	fe3fffff 	.word	0xfe3fffff

080032f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	23e0      	movs	r3, #224	; 0xe0
 8003306:	045b      	lsls	r3, r3, #17
 8003308:	4013      	ands	r3, r2
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b002      	add	sp, #8
 8003310:	bd80      	pop	{r7, pc}

08003312 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	2104      	movs	r1, #4
 8003326:	400a      	ands	r2, r1
 8003328:	2107      	movs	r1, #7
 800332a:	4091      	lsls	r1, r2
 800332c:	000a      	movs	r2, r1
 800332e:	43d2      	mvns	r2, r2
 8003330:	401a      	ands	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2104      	movs	r1, #4
 8003336:	400b      	ands	r3, r1
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4099      	lsls	r1, r3
 800333c:	000b      	movs	r3, r1
 800333e:	431a      	orrs	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}

0800334c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68da      	ldr	r2, [r3, #12]
 8003358:	23c0      	movs	r3, #192	; 0xc0
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	4013      	ands	r3, r2
 800335e:	d101      	bne.n	8003364 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003364:	2300      	movs	r3, #0
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b002      	add	sp, #8
 800336c:	bd80      	pop	{r7, pc}

0800336e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	211f      	movs	r1, #31
 8003382:	400a      	ands	r2, r1
 8003384:	210f      	movs	r1, #15
 8003386:	4091      	lsls	r1, r2
 8003388:	000a      	movs	r2, r1
 800338a:	43d2      	mvns	r2, r2
 800338c:	401a      	ands	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	210f      	movs	r1, #15
 8003394:	4019      	ands	r1, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	201f      	movs	r0, #31
 800339a:	4003      	ands	r3, r0
 800339c:	4099      	lsls	r1, r3
 800339e:	000b      	movs	r3, r1
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}

080033ae <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
 80033b6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	035b      	lsls	r3, r3, #13
 80033c0:	0b5b      	lsrs	r3, r3, #13
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	0352      	lsls	r2, r2, #13
 80033e2:	0b52      	lsrs	r2, r2, #13
 80033e4:	43d2      	mvns	r2, r2
 80033e6:	401a      	ands	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	0212      	lsls	r2, r2, #8
 8003408:	43d2      	mvns	r2, r2
 800340a:	401a      	ands	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	400b      	ands	r3, r1
 8003414:	4904      	ldr	r1, [pc, #16]	; (8003428 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003416:	400b      	ands	r3, r1
 8003418:	431a      	orrs	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	07ffff00 	.word	0x07ffff00

0800342c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4a05      	ldr	r2, [pc, #20]	; (8003450 <LL_ADC_EnableInternalRegulator+0x24>)
 800343a:	4013      	ands	r3, r2
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	0552      	lsls	r2, r2, #21
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	46bd      	mov	sp, r7
 800344a:	b002      	add	sp, #8
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	6fffffe8 	.word	0x6fffffe8

08003454 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	055b      	lsls	r3, r3, #21
 8003464:	401a      	ands	r2, r3
 8003466:	2380      	movs	r3, #128	; 0x80
 8003468:	055b      	lsls	r3, r3, #21
 800346a:	429a      	cmp	r2, r3
 800346c:	d101      	bne.n	8003472 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003472:	2300      	movs	r3, #0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <LL_ADC_Enable+0x20>)
 800348a:	4013      	ands	r3, r2
 800348c:	2201      	movs	r2, #1
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}
 800349c:	7fffffe8 	.word	0x7fffffe8

080034a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4a04      	ldr	r2, [pc, #16]	; (80034c0 <LL_ADC_Disable+0x20>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	2202      	movs	r2, #2
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	7fffffe8 	.word	0x7fffffe8

080034c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <LL_ADC_IsEnabled+0x18>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <LL_ADC_IsEnabled+0x1a>
 80034dc:	2300      	movs	r3, #0
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b002      	add	sp, #8
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2202      	movs	r2, #2
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d101      	bne.n	80034fe <LL_ADC_IsDisableOngoing+0x18>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <LL_ADC_IsDisableOngoing+0x1a>
 80034fe:	2300      	movs	r3, #0
}
 8003500:	0018      	movs	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}

08003508 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <LL_ADC_REG_StartConversion+0x20>)
 8003516:	4013      	ands	r3, r2
 8003518:	2204      	movs	r2, #4
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}
 8003528:	7fffffe8 	.word	0x7fffffe8

0800352c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <LL_ADC_REG_StopConversion+0x20>)
 800353a:	4013      	ands	r3, r2
 800353c:	2210      	movs	r2, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}
 800354c:	7fffffe8 	.word	0x7fffffe8

08003550 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2204      	movs	r2, #4
 800355e:	4013      	ands	r3, r2
 8003560:	2b04      	cmp	r3, #4
 8003562:	d101      	bne.n	8003568 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003568:	2300      	movs	r3, #0
}
 800356a:	0018      	movs	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	b002      	add	sp, #8
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357c:	231f      	movs	r3, #31
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e1b1      	b.n	80038fe <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fba5 	bl	8002cf4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2254      	movs	r2, #84	; 0x54
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0018      	movs	r0, r3
 80035be:	f7ff ff49 	bl	8003454 <LL_ADC_IsInternalRegulatorEnabled>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d115      	bne.n	80035f2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7ff ff2e 	bl	800342c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035d0:	4bcd      	ldr	r3, [pc, #820]	; (8003908 <HAL_ADC_Init+0x394>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	49cd      	ldr	r1, [pc, #820]	; (800390c <HAL_ADC_Init+0x398>)
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7fc fd9a 	bl	8000110 <__udivsi3>
 80035dc:	0003      	movs	r3, r0
 80035de:	3301      	adds	r3, #1
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035e4:	e002      	b.n	80035ec <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f9      	bne.n	80035e6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	0018      	movs	r0, r3
 80035f8:	f7ff ff2c 	bl	8003454 <LL_ADC_IsInternalRegulatorEnabled>
 80035fc:	1e03      	subs	r3, r0, #0
 80035fe:	d10f      	bne.n	8003620 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	2210      	movs	r2, #16
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	2201      	movs	r2, #1
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003618:	231f      	movs	r3, #31
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2201      	movs	r2, #1
 800361e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff ff93 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 800362a:	0003      	movs	r3, r0
 800362c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	2210      	movs	r2, #16
 8003634:	4013      	ands	r3, r2
 8003636:	d000      	beq.n	800363a <HAL_ADC_Init+0xc6>
 8003638:	e154      	b.n	80038e4 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d000      	beq.n	8003642 <HAL_ADC_Init+0xce>
 8003640:	e150      	b.n	80038e4 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	4ab2      	ldr	r2, [pc, #712]	; (8003910 <HAL_ADC_Init+0x39c>)
 8003648:	4013      	ands	r3, r2
 800364a:	2202      	movs	r2, #2
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0018      	movs	r0, r3
 8003658:	f7ff ff34 	bl	80034c4 <LL_ADC_IsEnabled>
 800365c:	1e03      	subs	r3, r0, #0
 800365e:	d156      	bne.n	800370e <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2218      	movs	r2, #24
 8003668:	4393      	bics	r3, r2
 800366a:	0019      	movs	r1, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	0f9b      	lsrs	r3, r3, #30
 800367e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003684:	4313      	orrs	r3, r2
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	223c      	movs	r2, #60	; 0x3c
 8003690:	5c9b      	ldrb	r3, [r3, r2]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d111      	bne.n	80036ba <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	0f9b      	lsrs	r3, r3, #30
 800369c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80036a2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80036a8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80036ae:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	2201      	movs	r2, #1
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	4a94      	ldr	r2, [pc, #592]	; (8003914 <HAL_ADC_Init+0x3a0>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	0019      	movs	r1, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	23c0      	movs	r3, #192	; 0xc0
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	429a      	cmp	r2, r3
 80036da:	d018      	beq.n	800370e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	05db      	lsls	r3, r3, #23
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d012      	beq.n	800370e <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d00c      	beq.n	800370e <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80036f4:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_ADC_Init+0x3a4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a88      	ldr	r2, [pc, #544]	; (800391c <HAL_ADC_Init+0x3a8>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	0019      	movs	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	23f0      	movs	r3, #240	; 0xf0
 8003704:	039b      	lsls	r3, r3, #14
 8003706:	401a      	ands	r2, r3
 8003708:	4b83      	ldr	r3, [pc, #524]	; (8003918 <HAL_ADC_Init+0x3a4>)
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	7e1b      	ldrb	r3, [r3, #24]
 8003712:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7e5b      	ldrb	r3, [r3, #25]
 8003718:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800371a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	7e9b      	ldrb	r3, [r3, #26]
 8003720:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003722:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	2b00      	cmp	r3, #0
 800372a:	d002      	beq.n	8003732 <HAL_ADC_Init+0x1be>
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	015b      	lsls	r3, r3, #5
 8003730:	e000      	b.n	8003734 <HAL_ADC_Init+0x1c0>
 8003732:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003734:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800373a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	da04      	bge.n	800374e <HAL_ADC_Init+0x1da>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	085b      	lsrs	r3, r3, #1
 800374c:	e001      	b.n	8003752 <HAL_ADC_Init+0x1de>
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003752:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	5c5b      	ldrb	r3, [r3, r1]
 800375a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800375c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	5c9b      	ldrb	r3, [r3, r2]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d115      	bne.n	800379a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	7e9b      	ldrb	r3, [r3, #26]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d105      	bne.n	8003782 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	0252      	lsls	r2, r2, #9
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	e00b      	b.n	800379a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	2220      	movs	r2, #32
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	2201      	movs	r2, #1
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a6:	23e0      	movs	r3, #224	; 0xe0
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80037b0:	4313      	orrs	r3, r2
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4a58      	ldr	r2, [pc, #352]	; (8003920 <HAL_ADC_Init+0x3ac>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	4a53      	ldr	r2, [pc, #332]	; (8003924 <HAL_ADC_Init+0x3b0>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ec:	001a      	movs	r2, r3
 80037ee:	2100      	movs	r1, #0
 80037f0:	f7ff fd8f 	bl	8003312 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	494a      	ldr	r1, [pc, #296]	; (8003928 <HAL_ADC_Init+0x3b4>)
 80037fe:	001a      	movs	r2, r3
 8003800:	f7ff fd87 	bl	8003312 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2110      	movs	r1, #16
 8003818:	4249      	negs	r1, r1
 800381a:	430a      	orrs	r2, r1
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
 800381e:	e03a      	b.n	8003896 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	039b      	lsls	r3, r3, #14
 8003828:	429a      	cmp	r2, r3
 800382a:	d134      	bne.n	8003896 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800382c:	2300      	movs	r3, #0
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	e00c      	b.n	800384c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	40da      	lsrs	r2, r3
 800383c:	0013      	movs	r3, r2
 800383e:	220f      	movs	r2, #15
 8003840:	4013      	ands	r3, r2
 8003842:	2b0f      	cmp	r3, #15
 8003844:	d006      	beq.n	8003854 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	3301      	adds	r3, #1
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b07      	cmp	r3, #7
 8003850:	d9ef      	bls.n	8003832 <HAL_ADC_Init+0x2be>
 8003852:	e000      	b.n	8003856 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003854:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d109      	bne.n	8003870 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2110      	movs	r1, #16
 8003868:	4249      	negs	r1, r1
 800386a:	430a      	orrs	r2, r1
 800386c:	629a      	str	r2, [r3, #40]	; 0x28
 800386e:	e012      	b.n	8003896 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	3b01      	subs	r3, #1
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	221c      	movs	r2, #28
 8003880:	4013      	ands	r3, r2
 8003882:	2210      	movs	r2, #16
 8003884:	4252      	negs	r2, r2
 8003886:	409a      	lsls	r2, r3
 8003888:	0011      	movs	r1, r2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4a23      	ldr	r2, [pc, #140]	; (800392c <HAL_ADC_Init+0x3b8>)
 800389e:	4013      	ands	r3, r2
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d10b      	bne.n	80038be <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	2203      	movs	r2, #3
 80038b2:	4393      	bics	r3, r2
 80038b4:	2201      	movs	r2, #1
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80038bc:	e01c      	b.n	80038f8 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	2212      	movs	r2, #18
 80038c4:	4393      	bics	r3, r2
 80038c6:	2210      	movs	r2, #16
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d2:	2201      	movs	r2, #1
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80038da:	231f      	movs	r3, #31
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	2201      	movs	r2, #1
 80038e0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80038e2:	e009      	b.n	80038f8 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	2210      	movs	r2, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038f0:	231f      	movs	r3, #31
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80038f8:	231f      	movs	r3, #31
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
}
 80038fe:	0018      	movs	r0, r3
 8003900:	46bd      	mov	sp, r7
 8003902:	b008      	add	sp, #32
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	20000000 	.word	0x20000000
 800390c:	00030d40 	.word	0x00030d40
 8003910:	fffffefd 	.word	0xfffffefd
 8003914:	1ffffc02 	.word	0x1ffffc02
 8003918:	40012708 	.word	0x40012708
 800391c:	ffc3ffff 	.word	0xffc3ffff
 8003920:	fffe0219 	.word	0xfffe0219
 8003924:	dffffc02 	.word	0xdffffc02
 8003928:	07ffff04 	.word	0x07ffff04
 800392c:	833fffe7 	.word	0x833fffe7

08003930 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003930:	b5b0      	push	{r4, r5, r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	0018      	movs	r0, r3
 800393e:	f7ff fe07 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d135      	bne.n	80039b2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2254      	movs	r2, #84	; 0x54
 800394a:	5c9b      	ldrb	r3, [r3, r2]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_ADC_Start+0x24>
 8003950:	2302      	movs	r3, #2
 8003952:	e035      	b.n	80039c0 <HAL_ADC_Start+0x90>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2254      	movs	r2, #84	; 0x54
 8003958:	2101      	movs	r1, #1
 800395a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800395c:	250f      	movs	r5, #15
 800395e:	197c      	adds	r4, r7, r5
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fb28 	bl	8003fb8 <ADC_Enable>
 8003968:	0003      	movs	r3, r0
 800396a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800396c:	197b      	adds	r3, r7, r5
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d119      	bne.n	80039a8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	4a13      	ldr	r2, [pc, #76]	; (80039c8 <HAL_ADC_Start+0x98>)
 800397a:	4013      	ands	r3, r2
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	0052      	lsls	r2, r2, #1
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	221c      	movs	r2, #28
 8003992:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2254      	movs	r2, #84	; 0x54
 8003998:	2100      	movs	r1, #0
 800399a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7ff fdb1 	bl	8003508 <LL_ADC_REG_StartConversion>
 80039a6:	e008      	b.n	80039ba <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2254      	movs	r2, #84	; 0x54
 80039ac:	2100      	movs	r1, #0
 80039ae:	5499      	strb	r1, [r3, r2]
 80039b0:	e003      	b.n	80039ba <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039b2:	230f      	movs	r3, #15
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2202      	movs	r2, #2
 80039b8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80039ba:	230f      	movs	r3, #15
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	781b      	ldrb	r3, [r3, #0]
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bdb0      	pop	{r4, r5, r7, pc}
 80039c8:	fffff0fe 	.word	0xfffff0fe

080039cc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80039cc:	b5b0      	push	{r4, r5, r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2254      	movs	r2, #84	; 0x54
 80039d8:	5c9b      	ldrb	r3, [r3, r2]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_Stop+0x16>
 80039de:	2302      	movs	r3, #2
 80039e0:	e029      	b.n	8003a36 <HAL_ADC_Stop+0x6a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2254      	movs	r2, #84	; 0x54
 80039e6:	2101      	movs	r1, #1
 80039e8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80039ea:	250f      	movs	r5, #15
 80039ec:	197c      	adds	r4, r7, r5
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 fa9f 	bl	8003f34 <ADC_ConversionStop>
 80039f6:	0003      	movs	r3, r0
 80039f8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80039fa:	197b      	adds	r3, r7, r5
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d112      	bne.n	8003a28 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a02:	197c      	adds	r4, r7, r5
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 fb5c 	bl	80040c4 <ADC_Disable>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a10:	197b      	adds	r3, r7, r5
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d107      	bne.n	8003a28 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	4a08      	ldr	r2, [pc, #32]	; (8003a40 <HAL_ADC_Stop+0x74>)
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2201      	movs	r2, #1
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2254      	movs	r2, #84	; 0x54
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003a30:	230f      	movs	r3, #15
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	781b      	ldrb	r3, [r3, #0]
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b004      	add	sp, #16
 8003a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	fffffefe 	.word	0xfffffefe

08003a44 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d102      	bne.n	8003a5c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003a56:	2308      	movs	r3, #8
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e00f      	b.n	8003a7c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	4013      	ands	r3, r2
 8003a66:	d007      	beq.n	8003a78 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e072      	b.n	8003b5e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003a78:	2304      	movs	r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a7c:	f7ff fbfa 	bl	8003274 <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003a84:	e01f      	b.n	8003ac6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	d01c      	beq.n	8003ac6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a8c:	f7ff fbf2 	bl	8003274 <HAL_GetTick>
 8003a90:	0002      	movs	r2, r0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d302      	bcc.n	8003aa2 <HAL_ADC_PollForConversion+0x5e>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d111      	bne.n	8003ac6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d10b      	bne.n	8003ac6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2254      	movs	r2, #84	; 0x54
 8003abe:	2100      	movs	r1, #0
 8003ac0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e04b      	b.n	8003b5e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d0d9      	beq.n	8003a86 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	0092      	lsls	r2, r2, #2
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f7ff fc31 	bl	800334c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003aea:	1e03      	subs	r3, r0, #0
 8003aec:	d02e      	beq.n	8003b4c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7e9b      	ldrb	r3, [r3, #26]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d12a      	bne.n	8003b4c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2208      	movs	r2, #8
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d123      	bne.n	8003b4c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff fd21 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d110      	bne.n	8003b34 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	210c      	movs	r1, #12
 8003b1e:	438a      	bics	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b26:	4a10      	ldr	r2, [pc, #64]	; (8003b68 <HAL_ADC_PollForConversion+0x124>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	659a      	str	r2, [r3, #88]	; 0x58
 8003b32:	e00b      	b.n	8003b4c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	2220      	movs	r2, #32
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2201      	movs	r2, #1
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e1b      	ldrb	r3, [r3, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d103      	bne.n	8003b5c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	220c      	movs	r2, #12
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b004      	add	sp, #16
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	fffffefe 	.word	0xfffffefe

08003b6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b002      	add	sp, #8
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8e:	2317      	movs	r3, #23
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2254      	movs	r2, #84	; 0x54
 8003b9e:	5c9b      	ldrb	r3, [r3, r2]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_ConfigChannel+0x24>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e1c0      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x3a6>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2254      	movs	r2, #84	; 0x54
 8003bac:	2101      	movs	r1, #1
 8003bae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7ff fccb 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 8003bba:	1e03      	subs	r3, r0, #0
 8003bbc:	d000      	beq.n	8003bc0 <HAL_ADC_ConfigChannel+0x3c>
 8003bbe:	e1a3      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d100      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x46>
 8003bc8:	e143      	b.n	8003e52 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	061b      	lsls	r3, r3, #24
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d004      	beq.n	8003be0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bda:	4ac1      	ldr	r2, [pc, #772]	; (8003ee0 <HAL_ADC_ConfigChannel+0x35c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	0019      	movs	r1, r3
 8003bea:	0010      	movs	r0, r2
 8003bec:	f7ff fbdf 	bl	80033ae <LL_ADC_REG_SetSequencerChAdd>
 8003bf0:	e0c9      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	211f      	movs	r1, #31
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	210f      	movs	r1, #15
 8003c00:	4099      	lsls	r1, r3
 8003c02:	000b      	movs	r3, r1
 8003c04:	43db      	mvns	r3, r3
 8003c06:	4013      	ands	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	035b      	lsls	r3, r3, #13
 8003c10:	0b5b      	lsrs	r3, r3, #13
 8003c12:	d105      	bne.n	8003c20 <HAL_ADC_ConfigChannel+0x9c>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0e9b      	lsrs	r3, r3, #26
 8003c1a:	221f      	movs	r2, #31
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	e098      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2201      	movs	r2, #1
 8003c26:	4013      	ands	r3, r2
 8003c28:	d000      	beq.n	8003c2c <HAL_ADC_ConfigChannel+0xa8>
 8003c2a:	e091      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x1cc>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2202      	movs	r2, #2
 8003c32:	4013      	ands	r3, r2
 8003c34:	d000      	beq.n	8003c38 <HAL_ADC_ConfigChannel+0xb4>
 8003c36:	e089      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x1c8>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d000      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0xc0>
 8003c42:	e081      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x1c4>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2208      	movs	r2, #8
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d000      	beq.n	8003c50 <HAL_ADC_ConfigChannel+0xcc>
 8003c4e:	e079      	b.n	8003d44 <HAL_ADC_ConfigChannel+0x1c0>
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2210      	movs	r2, #16
 8003c56:	4013      	ands	r3, r2
 8003c58:	d000      	beq.n	8003c5c <HAL_ADC_ConfigChannel+0xd8>
 8003c5a:	e071      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x1bc>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2220      	movs	r2, #32
 8003c62:	4013      	ands	r3, r2
 8003c64:	d000      	beq.n	8003c68 <HAL_ADC_ConfigChannel+0xe4>
 8003c66:	e069      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x1b8>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2240      	movs	r2, #64	; 0x40
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d000      	beq.n	8003c74 <HAL_ADC_ConfigChannel+0xf0>
 8003c72:	e061      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x1b4>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2280      	movs	r2, #128	; 0x80
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d000      	beq.n	8003c80 <HAL_ADC_ConfigChannel+0xfc>
 8003c7e:	e059      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x1b0>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d151      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x1ac>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4013      	ands	r3, r2
 8003c96:	d149      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x1a8>
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d141      	bne.n	8003d28 <HAL_ADC_ConfigChannel+0x1a4>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	4013      	ands	r3, r2
 8003cae:	d139      	bne.n	8003d24 <HAL_ADC_ConfigChannel+0x1a0>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	015b      	lsls	r3, r3, #5
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d131      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x19c>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	019b      	lsls	r3, r3, #6
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d129      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x198>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	01db      	lsls	r3, r3, #7
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d121      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x194>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	021b      	lsls	r3, r3, #8
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d119      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x190>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	025b      	lsls	r3, r3, #9
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x18c>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	029b      	lsls	r3, r3, #10
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d109      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x188>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	2380      	movs	r3, #128	; 0x80
 8003cfe:	02db      	lsls	r3, r3, #11
 8003d00:	4013      	ands	r3, r2
 8003d02:	d001      	beq.n	8003d08 <HAL_ADC_ConfigChannel+0x184>
 8003d04:	2312      	movs	r3, #18
 8003d06:	e024      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e022      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d0c:	2311      	movs	r3, #17
 8003d0e:	e020      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d10:	2310      	movs	r3, #16
 8003d12:	e01e      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d14:	230f      	movs	r3, #15
 8003d16:	e01c      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d18:	230e      	movs	r3, #14
 8003d1a:	e01a      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d1c:	230d      	movs	r3, #13
 8003d1e:	e018      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d20:	230c      	movs	r3, #12
 8003d22:	e016      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d24:	230b      	movs	r3, #11
 8003d26:	e014      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d28:	230a      	movs	r3, #10
 8003d2a:	e012      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d2c:	2309      	movs	r3, #9
 8003d2e:	e010      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d30:	2308      	movs	r3, #8
 8003d32:	e00e      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d34:	2307      	movs	r3, #7
 8003d36:	e00c      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d38:	2306      	movs	r3, #6
 8003d3a:	e00a      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d3c:	2305      	movs	r3, #5
 8003d3e:	e008      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e006      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d44:	2303      	movs	r3, #3
 8003d46:	e004      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e002      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_ADC_ConfigChannel+0x1ce>
 8003d50:	2300      	movs	r3, #0
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	6852      	ldr	r2, [r2, #4]
 8003d56:	201f      	movs	r0, #31
 8003d58:	4002      	ands	r2, r0
 8003d5a:	4093      	lsls	r3, r2
 8003d5c:	000a      	movs	r2, r1
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d808      	bhi.n	8003d86 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6859      	ldr	r1, [r3, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	001a      	movs	r2, r3
 8003d82:	f7ff faf4 	bl	800336e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	001a      	movs	r2, r3
 8003d94:	f7ff fb2e 	bl	80033f4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	db00      	blt.n	8003da2 <HAL_ADC_ConfigChannel+0x21e>
 8003da0:	e0bc      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003da2:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_ADC_ConfigChannel+0x360>)
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff faa7 	bl	80032f8 <LL_ADC_GetCommonPathInternalCh>
 8003daa:	0003      	movs	r3, r0
 8003dac:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a4d      	ldr	r2, [pc, #308]	; (8003ee8 <HAL_ADC_ConfigChannel+0x364>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d122      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	041b      	lsls	r3, r3, #16
 8003dbe:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dc0:	d11d      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2280      	movs	r2, #128	; 0x80
 8003dc6:	0412      	lsls	r2, r2, #16
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	4a46      	ldr	r2, [pc, #280]	; (8003ee4 <HAL_ADC_ConfigChannel+0x360>)
 8003dcc:	0019      	movs	r1, r3
 8003dce:	0010      	movs	r0, r2
 8003dd0:	f7ff fa7e 	bl	80032d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dd4:	4b45      	ldr	r3, [pc, #276]	; (8003eec <HAL_ADC_ConfigChannel+0x368>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4945      	ldr	r1, [pc, #276]	; (8003ef0 <HAL_ADC_ConfigChannel+0x36c>)
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7fc f998 	bl	8000110 <__udivsi3>
 8003de0:	0003      	movs	r3, r0
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	0013      	movs	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	189b      	adds	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dee:	e002      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1f9      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dfc:	e08e      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a3c      	ldr	r2, [pc, #240]	; (8003ef4 <HAL_ADC_ConfigChannel+0x370>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d10e      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x2a2>
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	045b      	lsls	r3, r3, #17
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d109      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2280      	movs	r2, #128	; 0x80
 8003e16:	0452      	lsls	r2, r2, #17
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <HAL_ADC_ConfigChannel+0x360>)
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	0010      	movs	r0, r2
 8003e20:	f7ff fa56 	bl	80032d0 <LL_ADC_SetCommonPathInternalCh>
 8003e24:	e07a      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a33      	ldr	r2, [pc, #204]	; (8003ef8 <HAL_ADC_ConfigChannel+0x374>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d000      	beq.n	8003e32 <HAL_ADC_ConfigChannel+0x2ae>
 8003e30:	e074      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	03db      	lsls	r3, r3, #15
 8003e38:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e3a:	d000      	beq.n	8003e3e <HAL_ADC_ConfigChannel+0x2ba>
 8003e3c:	e06e      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	2280      	movs	r2, #128	; 0x80
 8003e42:	03d2      	lsls	r2, r2, #15
 8003e44:	4313      	orrs	r3, r2
 8003e46:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <HAL_ADC_ConfigChannel+0x360>)
 8003e48:	0019      	movs	r1, r3
 8003e4a:	0010      	movs	r0, r2
 8003e4c:	f7ff fa40 	bl	80032d0 <LL_ADC_SetCommonPathInternalCh>
 8003e50:	e064      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691a      	ldr	r2, [r3, #16]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d004      	beq.n	8003e68 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <HAL_ADC_ConfigChannel+0x35c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d107      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0019      	movs	r1, r3
 8003e72:	0010      	movs	r0, r2
 8003e74:	f7ff faac 	bl	80033d0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	da4d      	bge.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e80:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <HAL_ADC_ConfigChannel+0x360>)
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7ff fa38 	bl	80032f8 <LL_ADC_GetCommonPathInternalCh>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a15      	ldr	r2, [pc, #84]	; (8003ee8 <HAL_ADC_ConfigChannel+0x364>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d108      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4a18      	ldr	r2, [pc, #96]	; (8003efc <HAL_ADC_ConfigChannel+0x378>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	4a11      	ldr	r2, [pc, #68]	; (8003ee4 <HAL_ADC_ConfigChannel+0x360>)
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	0010      	movs	r0, r2
 8003ea2:	f7ff fa15 	bl	80032d0 <LL_ADC_SetCommonPathInternalCh>
 8003ea6:	e039      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a11      	ldr	r2, [pc, #68]	; (8003ef4 <HAL_ADC_ConfigChannel+0x370>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d108      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <HAL_ADC_ConfigChannel+0x37c>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_ADC_ConfigChannel+0x360>)
 8003eba:	0019      	movs	r1, r3
 8003ebc:	0010      	movs	r0, r2
 8003ebe:	f7ff fa07 	bl	80032d0 <LL_ADC_SetCommonPathInternalCh>
 8003ec2:	e02b      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <HAL_ADC_ConfigChannel+0x374>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d126      	bne.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4a0c      	ldr	r2, [pc, #48]	; (8003f04 <HAL_ADC_ConfigChannel+0x380>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	4a03      	ldr	r2, [pc, #12]	; (8003ee4 <HAL_ADC_ConfigChannel+0x360>)
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	0010      	movs	r0, r2
 8003eda:	f7ff f9f9 	bl	80032d0 <LL_ADC_SetCommonPathInternalCh>
 8003ede:	e01d      	b.n	8003f1c <HAL_ADC_ConfigChannel+0x398>
 8003ee0:	80000004 	.word	0x80000004
 8003ee4:	40012708 	.word	0x40012708
 8003ee8:	b0001000 	.word	0xb0001000
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	00030d40 	.word	0x00030d40
 8003ef4:	b8004000 	.word	0xb8004000
 8003ef8:	b4002000 	.word	0xb4002000
 8003efc:	ff7fffff 	.word	0xff7fffff
 8003f00:	feffffff 	.word	0xfeffffff
 8003f04:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f14:	2317      	movs	r3, #23
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2254      	movs	r2, #84	; 0x54
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003f24:	2317      	movs	r3, #23
 8003f26:	18fb      	adds	r3, r7, r3
 8003f28:	781b      	ldrb	r3, [r3, #0]
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)

08003f34 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff fb05 	bl	8003550 <LL_ADC_REG_IsConversionOngoing>
 8003f46:	1e03      	subs	r3, r0, #0
 8003f48:	d031      	beq.n	8003fae <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f7ff fac9 	bl	80034e6 <LL_ADC_IsDisableOngoing>
 8003f54:	1e03      	subs	r3, r0, #0
 8003f56:	d104      	bne.n	8003f62 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7ff fae5 	bl	800352c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f62:	f7ff f987 	bl	8003274 <HAL_GetTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f6a:	e01a      	b.n	8003fa2 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f6c:	f7ff f982 	bl	8003274 <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d913      	bls.n	8003fa2 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2204      	movs	r2, #4
 8003f82:	4013      	ands	r3, r2
 8003f84:	d00d      	beq.n	8003fa2 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	2201      	movs	r2, #1
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e006      	b.n	8003fb0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2204      	movs	r2, #4
 8003faa:	4013      	ands	r3, r2
 8003fac:	d1de      	bne.n	8003f6c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f7ff fa7b 	bl	80034c4 <LL_ADC_IsEnabled>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d000      	beq.n	8003fd4 <ADC_Enable+0x1c>
 8003fd2:	e069      	b.n	80040a8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	4a36      	ldr	r2, [pc, #216]	; (80040b4 <ADC_Enable+0xfc>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d00d      	beq.n	8003ffc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e056      	b.n	80040aa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0018      	movs	r0, r3
 8004002:	f7ff fa3b 	bl	800347c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004006:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <ADC_Enable+0x100>)
 8004008:	0018      	movs	r0, r3
 800400a:	f7ff f975 	bl	80032f8 <LL_ADC_GetCommonPathInternalCh>
 800400e:	0002      	movs	r2, r0
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	4013      	ands	r3, r2
 8004016:	d00f      	beq.n	8004038 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004018:	4b28      	ldr	r3, [pc, #160]	; (80040bc <ADC_Enable+0x104>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4928      	ldr	r1, [pc, #160]	; (80040c0 <ADC_Enable+0x108>)
 800401e:	0018      	movs	r0, r3
 8004020:	f7fc f876 	bl	8000110 <__udivsi3>
 8004024:	0003      	movs	r3, r0
 8004026:	3301      	adds	r3, #1
 8004028:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800402a:	e002      	b.n	8004032 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	3b01      	subs	r3, #1
 8004030:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f9      	bne.n	800402c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7e5b      	ldrb	r3, [r3, #25]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d033      	beq.n	80040a8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004040:	f7ff f918 	bl	8003274 <HAL_GetTick>
 8004044:	0003      	movs	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004048:	e027      	b.n	800409a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	0018      	movs	r0, r3
 8004050:	f7ff fa38 	bl	80034c4 <LL_ADC_IsEnabled>
 8004054:	1e03      	subs	r3, r0, #0
 8004056:	d104      	bne.n	8004062 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff fa0d 	bl	800347c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004062:	f7ff f907 	bl	8003274 <HAL_GetTick>
 8004066:	0002      	movs	r2, r0
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d914      	bls.n	800409a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2201      	movs	r2, #1
 8004078:	4013      	ands	r3, r2
 800407a:	2b01      	cmp	r3, #1
 800407c:	d00d      	beq.n	800409a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004082:	2210      	movs	r2, #16
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	2201      	movs	r2, #1
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e007      	b.n	80040aa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d1d0      	bne.n	800404a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	0018      	movs	r0, r3
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b004      	add	sp, #16
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	80000017 	.word	0x80000017
 80040b8:	40012708 	.word	0x40012708
 80040bc:	20000000 	.word	0x20000000
 80040c0:	00030d40 	.word	0x00030d40

080040c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f7ff fa08 	bl	80034e6 <LL_ADC_IsDisableOngoing>
 80040d6:	0003      	movs	r3, r0
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	0018      	movs	r0, r3
 80040e0:	f7ff f9f0 	bl	80034c4 <LL_ADC_IsEnabled>
 80040e4:	1e03      	subs	r3, r0, #0
 80040e6:	d046      	beq.n	8004176 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d143      	bne.n	8004176 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2205      	movs	r2, #5
 80040f6:	4013      	ands	r3, r2
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10d      	bne.n	8004118 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	0018      	movs	r0, r3
 8004102:	f7ff f9cd 	bl	80034a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2203      	movs	r2, #3
 800410c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800410e:	f7ff f8b1 	bl	8003274 <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004116:	e028      	b.n	800416a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411c:	2210      	movs	r2, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	2201      	movs	r2, #1
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e021      	b.n	8004178 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004134:	f7ff f89e 	bl	8003274 <HAL_GetTick>
 8004138:	0002      	movs	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d913      	bls.n	800416a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2201      	movs	r2, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d00d      	beq.n	800416a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	2210      	movs	r2, #16
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	2201      	movs	r2, #1
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e006      	b.n	8004178 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2201      	movs	r2, #1
 8004172:	4013      	ands	r3, r2
 8004174:	d1de      	bne.n	8004134 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b004      	add	sp, #16
 800417e:	bd80      	pop	{r7, pc}

08004180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004180:	b590      	push	{r4, r7, lr}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	0002      	movs	r2, r0
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	1dfb      	adds	r3, r7, #7
 800418c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800418e:	1dfb      	adds	r3, r7, #7
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b7f      	cmp	r3, #127	; 0x7f
 8004194:	d828      	bhi.n	80041e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004196:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <__NVIC_SetPriority+0xd4>)
 8004198:	1dfb      	adds	r3, r7, #7
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b25b      	sxtb	r3, r3
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	33c0      	adds	r3, #192	; 0xc0
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	589b      	ldr	r3, [r3, r2]
 80041a6:	1dfa      	adds	r2, r7, #7
 80041a8:	7812      	ldrb	r2, [r2, #0]
 80041aa:	0011      	movs	r1, r2
 80041ac:	2203      	movs	r2, #3
 80041ae:	400a      	ands	r2, r1
 80041b0:	00d2      	lsls	r2, r2, #3
 80041b2:	21ff      	movs	r1, #255	; 0xff
 80041b4:	4091      	lsls	r1, r2
 80041b6:	000a      	movs	r2, r1
 80041b8:	43d2      	mvns	r2, r2
 80041ba:	401a      	ands	r2, r3
 80041bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	22ff      	movs	r2, #255	; 0xff
 80041c4:	401a      	ands	r2, r3
 80041c6:	1dfb      	adds	r3, r7, #7
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	0018      	movs	r0, r3
 80041cc:	2303      	movs	r3, #3
 80041ce:	4003      	ands	r3, r0
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041d4:	481f      	ldr	r0, [pc, #124]	; (8004254 <__NVIC_SetPriority+0xd4>)
 80041d6:	1dfb      	adds	r3, r7, #7
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	b25b      	sxtb	r3, r3
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	430a      	orrs	r2, r1
 80041e0:	33c0      	adds	r3, #192	; 0xc0
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80041e6:	e031      	b.n	800424c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041e8:	4a1b      	ldr	r2, [pc, #108]	; (8004258 <__NVIC_SetPriority+0xd8>)
 80041ea:	1dfb      	adds	r3, r7, #7
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	0019      	movs	r1, r3
 80041f0:	230f      	movs	r3, #15
 80041f2:	400b      	ands	r3, r1
 80041f4:	3b08      	subs	r3, #8
 80041f6:	089b      	lsrs	r3, r3, #2
 80041f8:	3306      	adds	r3, #6
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	18d3      	adds	r3, r2, r3
 80041fe:	3304      	adds	r3, #4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1dfa      	adds	r2, r7, #7
 8004204:	7812      	ldrb	r2, [r2, #0]
 8004206:	0011      	movs	r1, r2
 8004208:	2203      	movs	r2, #3
 800420a:	400a      	ands	r2, r1
 800420c:	00d2      	lsls	r2, r2, #3
 800420e:	21ff      	movs	r1, #255	; 0xff
 8004210:	4091      	lsls	r1, r2
 8004212:	000a      	movs	r2, r1
 8004214:	43d2      	mvns	r2, r2
 8004216:	401a      	ands	r2, r3
 8004218:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	22ff      	movs	r2, #255	; 0xff
 8004220:	401a      	ands	r2, r3
 8004222:	1dfb      	adds	r3, r7, #7
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	0018      	movs	r0, r3
 8004228:	2303      	movs	r3, #3
 800422a:	4003      	ands	r3, r0
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004230:	4809      	ldr	r0, [pc, #36]	; (8004258 <__NVIC_SetPriority+0xd8>)
 8004232:	1dfb      	adds	r3, r7, #7
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	001c      	movs	r4, r3
 8004238:	230f      	movs	r3, #15
 800423a:	4023      	ands	r3, r4
 800423c:	3b08      	subs	r3, #8
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	430a      	orrs	r2, r1
 8004242:	3306      	adds	r3, #6
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	18c3      	adds	r3, r0, r3
 8004248:	3304      	adds	r3, #4
 800424a:	601a      	str	r2, [r3, #0]
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b003      	add	sp, #12
 8004252:	bd90      	pop	{r4, r7, pc}
 8004254:	e000e100 	.word	0xe000e100
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1e5a      	subs	r2, r3, #1
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	045b      	lsls	r3, r3, #17
 800426c:	429a      	cmp	r2, r3
 800426e:	d301      	bcc.n	8004274 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004270:	2301      	movs	r3, #1
 8004272:	e010      	b.n	8004296 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004274:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <SysTick_Config+0x44>)
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	3a01      	subs	r2, #1
 800427a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800427c:	2301      	movs	r3, #1
 800427e:	425b      	negs	r3, r3
 8004280:	2103      	movs	r1, #3
 8004282:	0018      	movs	r0, r3
 8004284:	f7ff ff7c 	bl	8004180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <SysTick_Config+0x44>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800428e:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <SysTick_Config+0x44>)
 8004290:	2207      	movs	r2, #7
 8004292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004294:	2300      	movs	r3, #0
}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b002      	add	sp, #8
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			; (mov r8, r8)
 80042a0:	e000e010 	.word	0xe000e010

080042a4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	607a      	str	r2, [r7, #4]
 80042ae:	210f      	movs	r1, #15
 80042b0:	187b      	adds	r3, r7, r1
 80042b2:	1c02      	adds	r2, r0, #0
 80042b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	187b      	adds	r3, r7, r1
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	0011      	movs	r1, r2
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff ff5d 	bl	8004180 <__NVIC_SetPriority>
}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0018      	movs	r0, r3
 80042da:	f7ff ffbf 	bl	800425c <SysTick_Config>
 80042de:	0003      	movs	r3, r0
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b002      	add	sp, #8
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042f6:	2317      	movs	r3, #23
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2224      	movs	r2, #36	; 0x24
 8004302:	5c9b      	ldrb	r3, [r3, r2]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_DMA_Start_IT+0x24>
 8004308:	2302      	movs	r3, #2
 800430a:	e06f      	b.n	80043ec <HAL_DMA_Start_IT+0x104>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	2101      	movs	r1, #1
 8004312:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2225      	movs	r2, #37	; 0x25
 8004318:	5c9b      	ldrb	r3, [r3, r2]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d157      	bne.n	80043d0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2225      	movs	r2, #37	; 0x25
 8004324:	2102      	movs	r1, #2
 8004326:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2101      	movs	r1, #1
 800433a:	438a      	bics	r2, r1
 800433c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f8cb 	bl	80044e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	210e      	movs	r1, #14
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e00f      	b.n	8004384 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2104      	movs	r1, #4
 8004370:	438a      	bics	r2, r1
 8004372:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	210a      	movs	r1, #10
 8004380:	430a      	orrs	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	025b      	lsls	r3, r3, #9
 800438e:	4013      	ands	r3, r2
 8004390:	d008      	beq.n	80043a4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	0049      	lsls	r1, r1, #1
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	0049      	lsls	r1, r1, #1
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2101      	movs	r1, #1
 80043ca:	430a      	orrs	r2, r1
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e00a      	b.n	80043e6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2224      	movs	r2, #36	; 0x24
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80043de:	2317      	movs	r3, #23
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80043e6:	2317      	movs	r3, #23
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	781b      	ldrb	r3, [r3, #0]
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b006      	add	sp, #24
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	210f      	movs	r1, #15
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2225      	movs	r2, #37	; 0x25
 8004408:	5c9b      	ldrb	r3, [r3, r2]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d006      	beq.n	800441e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2204      	movs	r2, #4
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004416:	187b      	adds	r3, r7, r1
 8004418:	2201      	movs	r2, #1
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e049      	b.n	80044b2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	210e      	movs	r1, #14
 800442a:	438a      	bics	r2, r1
 800442c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2101      	movs	r1, #1
 800443a:	438a      	bics	r2, r1
 800443c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	491d      	ldr	r1, [pc, #116]	; (80044c0 <HAL_DMA_Abort_IT+0xcc>)
 800444a:	400a      	ands	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800444e:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <HAL_DMA_Abort_IT+0xd0>)
 8004450:	6859      	ldr	r1, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	221c      	movs	r2, #28
 8004458:	4013      	ands	r3, r2
 800445a:	2201      	movs	r2, #1
 800445c:	409a      	lsls	r2, r3
 800445e:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_DMA_Abort_IT+0xd0>)
 8004460:	430a      	orrs	r2, r1
 8004462:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800446c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004480:	490f      	ldr	r1, [pc, #60]	; (80044c0 <HAL_DMA_Abort_IT+0xcc>)
 8004482:	400a      	ands	r2, r1
 8004484:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800448e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2225      	movs	r2, #37	; 0x25
 8004494:	2101      	movs	r1, #1
 8004496:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	2100      	movs	r1, #0
 800449e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	0010      	movs	r0, r2
 80044b0:	4798      	blx	r3
    }
  }
  return status;
 80044b2:	230f      	movs	r3, #15
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	781b      	ldrb	r3, [r3, #0]
}
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b004      	add	sp, #16
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	fffffeff 	.word	0xfffffeff
 80044c4:	40020000 	.word	0x40020000

080044c8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2225      	movs	r2, #37	; 0x25
 80044d4:	5c9b      	ldrb	r3, [r3, r2]
 80044d6:	b2db      	uxtb	r3, r3
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b002      	add	sp, #8
 80044de:	bd80      	pop	{r7, pc}

080044e0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80044f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004508:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800450a:	4b14      	ldr	r3, [pc, #80]	; (800455c <DMA_SetConfig+0x7c>)
 800450c:	6859      	ldr	r1, [r3, #4]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	221c      	movs	r2, #28
 8004514:	4013      	ands	r3, r2
 8004516:	2201      	movs	r2, #1
 8004518:	409a      	lsls	r2, r3
 800451a:	4b10      	ldr	r3, [pc, #64]	; (800455c <DMA_SetConfig+0x7c>)
 800451c:	430a      	orrs	r2, r1
 800451e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b10      	cmp	r3, #16
 800452e:	d108      	bne.n	8004542 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004540:	e007      	b.n	8004552 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]
}
 8004552:	46c0      	nop			; (mov r8, r8)
 8004554:	46bd      	mov	sp, r7
 8004556:	b004      	add	sp, #16
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	40020000 	.word	0x40020000

08004560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800456e:	e147      	b.n	8004800 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4091      	lsls	r1, r2
 800457a:	000a      	movs	r2, r1
 800457c:	4013      	ands	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d100      	bne.n	8004588 <HAL_GPIO_Init+0x28>
 8004586:	e138      	b.n	80047fa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2203      	movs	r2, #3
 800458e:	4013      	ands	r3, r2
 8004590:	2b01      	cmp	r3, #1
 8004592:	d005      	beq.n	80045a0 <HAL_GPIO_Init+0x40>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2203      	movs	r2, #3
 800459a:	4013      	ands	r3, r2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d130      	bne.n	8004602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	2203      	movs	r2, #3
 80045ac:	409a      	lsls	r2, r3
 80045ae:	0013      	movs	r3, r2
 80045b0:	43da      	mvns	r2, r3
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	409a      	lsls	r2, r3
 80045c2:	0013      	movs	r3, r2
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045d6:	2201      	movs	r2, #1
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	409a      	lsls	r2, r3
 80045dc:	0013      	movs	r3, r2
 80045de:	43da      	mvns	r2, r3
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4013      	ands	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	2201      	movs	r2, #1
 80045ee:	401a      	ands	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	409a      	lsls	r2, r3
 80045f4:	0013      	movs	r3, r2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2203      	movs	r2, #3
 8004608:	4013      	ands	r3, r2
 800460a:	2b03      	cmp	r3, #3
 800460c:	d017      	beq.n	800463e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	2203      	movs	r2, #3
 800461a:	409a      	lsls	r2, r3
 800461c:	0013      	movs	r3, r2
 800461e:	43da      	mvns	r2, r3
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	409a      	lsls	r2, r3
 8004630:	0013      	movs	r3, r2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2203      	movs	r2, #3
 8004644:	4013      	ands	r3, r2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d123      	bne.n	8004692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	08da      	lsrs	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3208      	adds	r2, #8
 8004652:	0092      	lsls	r2, r2, #2
 8004654:	58d3      	ldr	r3, [r2, r3]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	2207      	movs	r2, #7
 800465c:	4013      	ands	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	220f      	movs	r2, #15
 8004662:	409a      	lsls	r2, r3
 8004664:	0013      	movs	r3, r2
 8004666:	43da      	mvns	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2107      	movs	r1, #7
 8004676:	400b      	ands	r3, r1
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	409a      	lsls	r2, r3
 800467c:	0013      	movs	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	08da      	lsrs	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3208      	adds	r2, #8
 800468c:	0092      	lsls	r2, r2, #2
 800468e:	6939      	ldr	r1, [r7, #16]
 8004690:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	409a      	lsls	r2, r3
 80046a0:	0013      	movs	r3, r2
 80046a2:	43da      	mvns	r2, r3
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4013      	ands	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2203      	movs	r2, #3
 80046b0:	401a      	ands	r2, r3
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	0013      	movs	r3, r2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	23c0      	movs	r3, #192	; 0xc0
 80046cc:	029b      	lsls	r3, r3, #10
 80046ce:	4013      	ands	r3, r2
 80046d0:	d100      	bne.n	80046d4 <HAL_GPIO_Init+0x174>
 80046d2:	e092      	b.n	80047fa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80046d4:	4a50      	ldr	r2, [pc, #320]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	3318      	adds	r3, #24
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	589b      	ldr	r3, [r3, r2]
 80046e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2203      	movs	r2, #3
 80046e6:	4013      	ands	r3, r2
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	220f      	movs	r2, #15
 80046ec:	409a      	lsls	r2, r3
 80046ee:	0013      	movs	r3, r2
 80046f0:	43da      	mvns	r2, r3
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	23a0      	movs	r3, #160	; 0xa0
 80046fc:	05db      	lsls	r3, r3, #23
 80046fe:	429a      	cmp	r2, r3
 8004700:	d013      	beq.n	800472a <HAL_GPIO_Init+0x1ca>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a45      	ldr	r2, [pc, #276]	; (800481c <HAL_GPIO_Init+0x2bc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00d      	beq.n	8004726 <HAL_GPIO_Init+0x1c6>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a44      	ldr	r2, [pc, #272]	; (8004820 <HAL_GPIO_Init+0x2c0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <HAL_GPIO_Init+0x1c2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a43      	ldr	r2, [pc, #268]	; (8004824 <HAL_GPIO_Init+0x2c4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_GPIO_Init+0x1be>
 800471a:	2303      	movs	r3, #3
 800471c:	e006      	b.n	800472c <HAL_GPIO_Init+0x1cc>
 800471e:	2305      	movs	r3, #5
 8004720:	e004      	b.n	800472c <HAL_GPIO_Init+0x1cc>
 8004722:	2302      	movs	r3, #2
 8004724:	e002      	b.n	800472c <HAL_GPIO_Init+0x1cc>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_GPIO_Init+0x1cc>
 800472a:	2300      	movs	r3, #0
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	2103      	movs	r1, #3
 8004730:	400a      	ands	r2, r1
 8004732:	00d2      	lsls	r2, r2, #3
 8004734:	4093      	lsls	r3, r2
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800473c:	4936      	ldr	r1, [pc, #216]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3318      	adds	r3, #24
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800474a:	4a33      	ldr	r2, [pc, #204]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	58d3      	ldr	r3, [r2, r3]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	43da      	mvns	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	025b      	lsls	r3, r3, #9
 8004764:	4013      	ands	r3, r2
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004770:	4929      	ldr	r1, [pc, #164]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004778:	4a27      	ldr	r2, [pc, #156]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 800477a:	2384      	movs	r3, #132	; 0x84
 800477c:	58d3      	ldr	r3, [r2, r3]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43da      	mvns	r2, r3
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	2380      	movs	r3, #128	; 0x80
 8004790:	029b      	lsls	r3, r3, #10
 8004792:	4013      	ands	r3, r2
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800479e:	491e      	ldr	r1, [pc, #120]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 80047a0:	2284      	movs	r2, #132	; 0x84
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	43da      	mvns	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	035b      	lsls	r3, r3, #13
 80047be:	4013      	ands	r3, r2
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047ca:	4b13      	ldr	r3, [pc, #76]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	43da      	mvns	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	039b      	lsls	r3, r3, #14
 80047e8:	4013      	ands	r3, r2
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <HAL_GPIO_Init+0x2b8>)
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	3301      	adds	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	40da      	lsrs	r2, r3
 8004808:	1e13      	subs	r3, r2, #0
 800480a:	d000      	beq.n	800480e <HAL_GPIO_Init+0x2ae>
 800480c:	e6b0      	b.n	8004570 <HAL_GPIO_Init+0x10>
  }
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	46bd      	mov	sp, r7
 8004814:	b006      	add	sp, #24
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021800 	.word	0x40021800
 800481c:	50000400 	.word	0x50000400
 8004820:	50000800 	.word	0x50000800
 8004824:	50000c00 	.word	0x50000c00

08004828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	0008      	movs	r0, r1
 8004832:	0011      	movs	r1, r2
 8004834:	1cbb      	adds	r3, r7, #2
 8004836:	1c02      	adds	r2, r0, #0
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	1c7b      	adds	r3, r7, #1
 800483c:	1c0a      	adds	r2, r1, #0
 800483e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004840:	1c7b      	adds	r3, r7, #1
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004848:	1cbb      	adds	r3, r7, #2
 800484a:	881a      	ldrh	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004850:	e003      	b.n	800485a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004852:	1cbb      	adds	r3, r7, #2
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	629a      	str	r2, [r3, #40]	; 0x28
}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	46bd      	mov	sp, r7
 800485e:	b002      	add	sp, #8
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e082      	b.n	800497c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2241      	movs	r2, #65	; 0x41
 800487a:	5c9b      	ldrb	r3, [r3, r2]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2240      	movs	r2, #64	; 0x40
 8004886:	2100      	movs	r1, #0
 8004888:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f7fe fa75 	bl	8002d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2241      	movs	r2, #65	; 0x41
 8004896:	2124      	movs	r1, #36	; 0x24
 8004898:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	438a      	bics	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4934      	ldr	r1, [pc, #208]	; (8004984 <HAL_I2C_Init+0x120>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4931      	ldr	r1, [pc, #196]	; (8004988 <HAL_I2C_Init+0x124>)
 80048c4:	400a      	ands	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d108      	bne.n	80048e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2180      	movs	r1, #128	; 0x80
 80048da:	0209      	lsls	r1, r1, #8
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	e007      	b.n	80048f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2184      	movs	r1, #132	; 0x84
 80048ec:	0209      	lsls	r1, r1, #8
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d104      	bne.n	8004904 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2280      	movs	r2, #128	; 0x80
 8004900:	0112      	lsls	r2, r2, #4
 8004902:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	491f      	ldr	r1, [pc, #124]	; (800498c <HAL_I2C_Init+0x128>)
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	491a      	ldr	r1, [pc, #104]	; (8004988 <HAL_I2C_Init+0x124>)
 8004920:	400a      	ands	r2, r1
 8004922:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	431a      	orrs	r2, r3
 800492e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69d9      	ldr	r1, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2241      	movs	r2, #65	; 0x41
 8004968:	2120      	movs	r1, #32
 800496a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2242      	movs	r2, #66	; 0x42
 8004976:	2100      	movs	r1, #0
 8004978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}
 8004984:	f0ffffff 	.word	0xf0ffffff
 8004988:	ffff7fff 	.word	0xffff7fff
 800498c:	02008000 	.word	0x02008000

08004990 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	0008      	movs	r0, r1
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	0019      	movs	r1, r3
 800499e:	230a      	movs	r3, #10
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	1c02      	adds	r2, r0, #0
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	2308      	movs	r3, #8
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	1c0a      	adds	r2, r1, #0
 80049ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2241      	movs	r2, #65	; 0x41
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d000      	beq.n	80049bc <HAL_I2C_Master_Transmit+0x2c>
 80049ba:	e0e7      	b.n	8004b8c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	5c9b      	ldrb	r3, [r3, r2]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_I2C_Master_Transmit+0x3a>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0e1      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2240      	movs	r2, #64	; 0x40
 80049ce:	2101      	movs	r1, #1
 80049d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049d2:	f7fe fc4f 	bl	8003274 <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	0219      	lsls	r1, r3, #8
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2319      	movs	r3, #25
 80049e6:	2201      	movs	r2, #1
 80049e8:	f001 fef0 	bl	80067cc <I2C_WaitOnFlagUntilTimeout>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0cc      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2241      	movs	r2, #65	; 0x41
 80049f8:	2121      	movs	r1, #33	; 0x21
 80049fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2242      	movs	r2, #66	; 0x42
 8004a00:	2110      	movs	r1, #16
 8004a02:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2208      	movs	r2, #8
 8004a14:	18ba      	adds	r2, r7, r2
 8004a16:	8812      	ldrh	r2, [r2, #0]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2bff      	cmp	r3, #255	; 0xff
 8004a28:	d911      	bls.n	8004a4e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	22ff      	movs	r2, #255	; 0xff
 8004a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	045c      	lsls	r4, r3, #17
 8004a3a:	230a      	movs	r3, #10
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	8819      	ldrh	r1, [r3, #0]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	4b55      	ldr	r3, [pc, #340]	; (8004b98 <HAL_I2C_Master_Transmit+0x208>)
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	0023      	movs	r3, r4
 8004a48:	f002 f860 	bl	8006b0c <I2C_TransferConfig>
 8004a4c:	e075      	b.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	049c      	lsls	r4, r3, #18
 8004a62:	230a      	movs	r3, #10
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	8819      	ldrh	r1, [r3, #0]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	4b4b      	ldr	r3, [pc, #300]	; (8004b98 <HAL_I2C_Master_Transmit+0x208>)
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	0023      	movs	r3, r4
 8004a70:	f002 f84c 	bl	8006b0c <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a74:	e061      	b.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f001 fee4 	bl	800684a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a82:	1e03      	subs	r3, r0, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e081      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	781a      	ldrb	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d03a      	beq.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d136      	bne.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	0013      	movs	r3, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	f001 fe77 	bl	80067cc <I2C_WaitOnFlagUntilTimeout>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e053      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2bff      	cmp	r3, #255	; 0xff
 8004aee:	d911      	bls.n	8004b14 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	22ff      	movs	r2, #255	; 0xff
 8004af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	045c      	lsls	r4, r3, #17
 8004b00:	230a      	movs	r3, #10
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	8819      	ldrh	r1, [r3, #0]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	0023      	movs	r3, r4
 8004b0e:	f001 fffd 	bl	8006b0c <I2C_TransferConfig>
 8004b12:	e012      	b.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	049c      	lsls	r4, r3, #18
 8004b28:	230a      	movs	r3, #10
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	8819      	ldrh	r1, [r3, #0]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	2300      	movs	r3, #0
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	0023      	movs	r3, r4
 8004b36:	f001 ffe9 	bl	8006b0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d198      	bne.n	8004a76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f001 febc 	bl	80068c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b50:	1e03      	subs	r3, r0, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e01a      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	490c      	ldr	r1, [pc, #48]	; (8004b9c <HAL_I2C_Master_Transmit+0x20c>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2241      	movs	r2, #65	; 0x41
 8004b74:	2120      	movs	r1, #32
 8004b76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2242      	movs	r2, #66	; 0x42
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	2100      	movs	r1, #0
 8004b86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	0018      	movs	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b007      	add	sp, #28
 8004b94:	bd90      	pop	{r4, r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	80002000 	.word	0x80002000
 8004b9c:	fe00e800 	.word	0xfe00e800

08004ba0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b089      	sub	sp, #36	; 0x24
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	0008      	movs	r0, r1
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	0019      	movs	r1, r3
 8004bae:	230a      	movs	r3, #10
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	1c02      	adds	r2, r0, #0
 8004bb4:	801a      	strh	r2, [r3, #0]
 8004bb6:	2308      	movs	r3, #8
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	1c0a      	adds	r2, r1, #0
 8004bbc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2241      	movs	r2, #65	; 0x41
 8004bc2:	5c9b      	ldrb	r3, [r3, r2]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d000      	beq.n	8004bcc <HAL_I2C_Master_Receive+0x2c>
 8004bca:	e0e8      	b.n	8004d9e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2240      	movs	r2, #64	; 0x40
 8004bd0:	5c9b      	ldrb	r3, [r3, r2]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_I2C_Master_Receive+0x3a>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e0e2      	b.n	8004da0 <HAL_I2C_Master_Receive+0x200>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2240      	movs	r2, #64	; 0x40
 8004bde:	2101      	movs	r1, #1
 8004be0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004be2:	f7fe fb47 	bl	8003274 <HAL_GetTick>
 8004be6:	0003      	movs	r3, r0
 8004be8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	0219      	lsls	r1, r3, #8
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	2319      	movs	r3, #25
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f001 fde8 	bl	80067cc <I2C_WaitOnFlagUntilTimeout>
 8004bfc:	1e03      	subs	r3, r0, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0cd      	b.n	8004da0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2241      	movs	r2, #65	; 0x41
 8004c08:	2122      	movs	r1, #34	; 0x22
 8004c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2242      	movs	r2, #66	; 0x42
 8004c10:	2110      	movs	r1, #16
 8004c12:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2208      	movs	r2, #8
 8004c24:	18ba      	adds	r2, r7, r2
 8004c26:	8812      	ldrh	r2, [r2, #0]
 8004c28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2bff      	cmp	r3, #255	; 0xff
 8004c38:	d911      	bls.n	8004c5e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	22ff      	movs	r2, #255	; 0xff
 8004c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	045c      	lsls	r4, r3, #17
 8004c4a:	230a      	movs	r3, #10
 8004c4c:	18fb      	adds	r3, r7, r3
 8004c4e:	8819      	ldrh	r1, [r3, #0]
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	4b55      	ldr	r3, [pc, #340]	; (8004da8 <HAL_I2C_Master_Receive+0x208>)
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	0023      	movs	r3, r4
 8004c58:	f001 ff58 	bl	8006b0c <I2C_TransferConfig>
 8004c5c:	e076      	b.n	8004d4c <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	049c      	lsls	r4, r3, #18
 8004c72:	230a      	movs	r3, #10
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	8819      	ldrh	r1, [r3, #0]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <HAL_I2C_Master_Receive+0x208>)
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	0023      	movs	r3, r4
 8004c80:	f001 ff44 	bl	8006b0c <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004c84:	e062      	b.n	8004d4c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f001 fe57 	bl	8006940 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e082      	b.n	8004da0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d03a      	beq.n	8004d4c <HAL_I2C_Master_Receive+0x1ac>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d136      	bne.n	8004d4c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	0013      	movs	r3, r2
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	f001 fd6e 	bl	80067cc <I2C_WaitOnFlagUntilTimeout>
 8004cf0:	1e03      	subs	r3, r0, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e053      	b.n	8004da0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2bff      	cmp	r3, #255	; 0xff
 8004d00:	d911      	bls.n	8004d26 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	22ff      	movs	r2, #255	; 0xff
 8004d06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	2380      	movs	r3, #128	; 0x80
 8004d10:	045c      	lsls	r4, r3, #17
 8004d12:	230a      	movs	r3, #10
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	8819      	ldrh	r1, [r3, #0]
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	0023      	movs	r3, r4
 8004d20:	f001 fef4 	bl	8006b0c <I2C_TransferConfig>
 8004d24:	e012      	b.n	8004d4c <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	2380      	movs	r3, #128	; 0x80
 8004d38:	049c      	lsls	r4, r3, #18
 8004d3a:	230a      	movs	r3, #10
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	8819      	ldrh	r1, [r3, #0]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	2300      	movs	r3, #0
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	0023      	movs	r3, r4
 8004d48:	f001 fee0 	bl	8006b0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d197      	bne.n	8004c86 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f001 fdb3 	bl	80068c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d62:	1e03      	subs	r3, r0, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e01a      	b.n	8004da0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	490b      	ldr	r1, [pc, #44]	; (8004dac <HAL_I2C_Master_Receive+0x20c>)
 8004d7e:	400a      	ands	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2241      	movs	r2, #65	; 0x41
 8004d86:	2120      	movs	r1, #32
 8004d88:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2242      	movs	r2, #66	; 0x42
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2240      	movs	r2, #64	; 0x40
 8004d96:	2100      	movs	r1, #0
 8004d98:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	0018      	movs	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b007      	add	sp, #28
 8004da6:	bd90      	pop	{r4, r7, pc}
 8004da8:	80002400 	.word	0x80002400
 8004dac:	fe00e800 	.word	0xfe00e800

08004db0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004db0:	b5b0      	push	{r4, r5, r7, lr}
 8004db2:	b088      	sub	sp, #32
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	0008      	movs	r0, r1
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	230a      	movs	r3, #10
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	1c02      	adds	r2, r0, #0
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	2308      	movs	r3, #8
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	1c0a      	adds	r2, r1, #0
 8004dcc:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2241      	movs	r2, #65	; 0x41
 8004dd2:	5c9b      	ldrb	r3, [r3, r2]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d000      	beq.n	8004ddc <HAL_I2C_Master_Transmit_DMA+0x2c>
 8004dda:	e0dd      	b.n	8004f98 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	021b      	lsls	r3, r3, #8
 8004de6:	401a      	ands	r2, r3
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d101      	bne.n	8004df4 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
 8004df2:	e0d2      	b.n	8004f9a <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	5c9b      	ldrb	r3, [r3, r2]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_I2C_Master_Transmit_DMA+0x52>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e0cb      	b.n	8004f9a <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2240      	movs	r2, #64	; 0x40
 8004e06:	2101      	movs	r1, #1
 8004e08:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2241      	movs	r2, #65	; 0x41
 8004e0e:	2121      	movs	r1, #33	; 0x21
 8004e10:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2242      	movs	r2, #66	; 0x42
 8004e16:	2110      	movs	r1, #16
 8004e18:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	18ba      	adds	r2, r7, r2
 8004e2c:	8812      	ldrh	r2, [r2, #0]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a5c      	ldr	r2, [pc, #368]	; (8004fa4 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8004e34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4a5b      	ldr	r2, [pc, #364]	; (8004fa8 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8004e3a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2bff      	cmp	r3, #255	; 0xff
 8004e44:	d906      	bls.n	8004e54 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	22ff      	movs	r2, #255	; 0xff
 8004e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	045b      	lsls	r3, r3, #17
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e007      	b.n	8004e64 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004e5e:	2380      	movs	r3, #128	; 0x80
 8004e60:	049b      	lsls	r3, r3, #18
 8004e62:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d100      	bne.n	8004e6e <HAL_I2C_Master_Transmit_DMA+0xbe>
 8004e6c:	e078      	b.n	8004f60 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d023      	beq.n	8004ebe <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	4a4c      	ldr	r2, [pc, #304]	; (8004fac <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8004e7c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	4a4b      	ldr	r2, [pc, #300]	; (8004fb0 <HAL_I2C_Master_Transmit_DMA+0x200>)
 8004e84:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	2200      	movs	r2, #0
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3328      	adds	r3, #40	; 0x28
 8004ea2:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004ea8:	2513      	movs	r5, #19
 8004eaa:	197c      	adds	r4, r7, r5
 8004eac:	f7ff fa1c 	bl	80042e8 <HAL_DMA_Start_IT>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004eb4:	197b      	adds	r3, r7, r5
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d13d      	bne.n	8004f38 <HAL_I2C_Master_Transmit_DMA+0x188>
 8004ebc:	e013      	b.n	8004ee6 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2241      	movs	r2, #65	; 0x41
 8004ec2:	2120      	movs	r1, #32
 8004ec4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2242      	movs	r2, #66	; 0x42
 8004eca:	2100      	movs	r1, #0
 8004ecc:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	2280      	movs	r2, #128	; 0x80
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2240      	movs	r2, #64	; 0x40
 8004ede:	2100      	movs	r1, #0
 8004ee0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e059      	b.n	8004f9a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	697c      	ldr	r4, [r7, #20]
 8004eee:	230a      	movs	r3, #10
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	8819      	ldrh	r1, [r3, #0]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	0023      	movs	r3, r4
 8004efc:	f001 fe06 	bl	8006b0c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2240      	movs	r2, #64	; 0x40
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2110      	movs	r1, #16
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f001 fe2a 	bl	8006b78 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2180      	movs	r1, #128	; 0x80
 8004f30:	01c9      	lsls	r1, r1, #7
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e02d      	b.n	8004f94 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2241      	movs	r2, #65	; 0x41
 8004f3c:	2120      	movs	r1, #32
 8004f3e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2242      	movs	r2, #66	; 0x42
 8004f44:	2100      	movs	r1, #0
 8004f46:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2240      	movs	r2, #64	; 0x40
 8004f58:	2100      	movs	r1, #0
 8004f5a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e01c      	b.n	8004f9a <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8004f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	2380      	movs	r3, #128	; 0x80
 8004f6e:	049c      	lsls	r4, r3, #18
 8004f70:	230a      	movs	r3, #10
 8004f72:	18fb      	adds	r3, r7, r3
 8004f74:	8819      	ldrh	r1, [r3, #0]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	4b0e      	ldr	r3, [pc, #56]	; (8004fb4 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	0023      	movs	r3, r4
 8004f7e:	f001 fdc5 	bl	8006b0c <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2240      	movs	r2, #64	; 0x40
 8004f86:	2100      	movs	r1, #0
 8004f88:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	0018      	movs	r0, r3
 8004f90:	f001 fdf2 	bl	8006b78 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	e000      	b.n	8004f9a <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f98:	2302      	movs	r3, #2
  }
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b006      	add	sp, #24
 8004fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	ffff0000 	.word	0xffff0000
 8004fa8:	08005885 	.word	0x08005885
 8004fac:	0800661d 	.word	0x0800661d
 8004fb0:	0800675d 	.word	0x0800675d
 8004fb4:	80002000 	.word	0x80002000
 8004fb8:	080053d9 	.word	0x080053d9

08004fbc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004fbc:	b5b0      	push	{r4, r5, r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	0008      	movs	r0, r1
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	0019      	movs	r1, r3
 8004fca:	230a      	movs	r3, #10
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	1c02      	adds	r2, r0, #0
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	18fb      	adds	r3, r7, r3
 8004fd6:	1c0a      	adds	r2, r1, #0
 8004fd8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2241      	movs	r2, #65	; 0x41
 8004fde:	5c9b      	ldrb	r3, [r3, r2]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d000      	beq.n	8004fe8 <HAL_I2C_Master_Receive_DMA+0x2c>
 8004fe6:	e0dd      	b.n	80051a4 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699a      	ldr	r2, [r3, #24]
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d101      	bne.n	8005000 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e0d2      	b.n	80051a6 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2240      	movs	r2, #64	; 0x40
 8005004:	5c9b      	ldrb	r3, [r3, r2]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_I2C_Master_Receive_DMA+0x52>
 800500a:	2302      	movs	r3, #2
 800500c:	e0cb      	b.n	80051a6 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2240      	movs	r2, #64	; 0x40
 8005012:	2101      	movs	r1, #1
 8005014:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2241      	movs	r2, #65	; 0x41
 800501a:	2122      	movs	r1, #34	; 0x22
 800501c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2242      	movs	r2, #66	; 0x42
 8005022:	2110      	movs	r1, #16
 8005024:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2208      	movs	r2, #8
 8005036:	18ba      	adds	r2, r7, r2
 8005038:	8812      	ldrh	r2, [r2, #0]
 800503a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4a5c      	ldr	r2, [pc, #368]	; (80051b0 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a5b      	ldr	r2, [pc, #364]	; (80051b4 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8005046:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2bff      	cmp	r3, #255	; 0xff
 8005050:	d906      	bls.n	8005060 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	045b      	lsls	r3, r3, #17
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	e007      	b.n	8005070 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	049b      	lsls	r3, r3, #18
 800506e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005074:	2b00      	cmp	r3, #0
 8005076:	d100      	bne.n	800507a <HAL_I2C_Master_Receive_DMA+0xbe>
 8005078:	e078      	b.n	800516c <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d023      	beq.n	80050ca <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	4a4c      	ldr	r2, [pc, #304]	; (80051b8 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8005088:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	4a4b      	ldr	r2, [pc, #300]	; (80051bc <HAL_I2C_Master_Receive_DMA+0x200>)
 8005090:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	2200      	movs	r2, #0
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	2200      	movs	r2, #0
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3324      	adds	r3, #36	; 0x24
 80050ac:	0019      	movs	r1, r3
 80050ae:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80050b4:	2513      	movs	r5, #19
 80050b6:	197c      	adds	r4, r7, r5
 80050b8:	f7ff f916 	bl	80042e8 <HAL_DMA_Start_IT>
 80050bc:	0003      	movs	r3, r0
 80050be:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80050c0:	197b      	adds	r3, r7, r5
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d13d      	bne.n	8005144 <HAL_I2C_Master_Receive_DMA+0x188>
 80050c8:	e013      	b.n	80050f2 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2241      	movs	r2, #65	; 0x41
 80050ce:	2120      	movs	r1, #32
 80050d0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2242      	movs	r2, #66	; 0x42
 80050d6:	2100      	movs	r1, #0
 80050d8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	2280      	movs	r2, #128	; 0x80
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2240      	movs	r2, #64	; 0x40
 80050ea:	2100      	movs	r1, #0
 80050ec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e059      	b.n	80051a6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	697c      	ldr	r4, [r7, #20]
 80050fa:	230a      	movs	r3, #10
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	8819      	ldrh	r1, [r3, #0]
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	4b2f      	ldr	r3, [pc, #188]	; (80051c0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	0023      	movs	r3, r4
 8005108:	f001 fd00 	bl	8006b0c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2240      	movs	r2, #64	; 0x40
 8005122:	2100      	movs	r1, #0
 8005124:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2110      	movs	r1, #16
 800512a:	0018      	movs	r0, r3
 800512c:	f001 fd24 	bl	8006b78 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	0209      	lsls	r1, r1, #8
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e02d      	b.n	80051a0 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2241      	movs	r2, #65	; 0x41
 8005148:	2120      	movs	r1, #32
 800514a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2242      	movs	r2, #66	; 0x42
 8005150:	2100      	movs	r1, #0
 8005152:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	2210      	movs	r2, #16
 800515a:	431a      	orrs	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2240      	movs	r2, #64	; 0x40
 8005164:	2100      	movs	r1, #0
 8005166:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e01c      	b.n	80051a6 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_I2C_Master_Receive_DMA+0x208>)
 8005170:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005176:	b2da      	uxtb	r2, r3
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	049c      	lsls	r4, r3, #18
 800517c:	230a      	movs	r3, #10
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	8819      	ldrh	r1, [r3, #0]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	4b0e      	ldr	r3, [pc, #56]	; (80051c0 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	0023      	movs	r3, r4
 800518a:	f001 fcbf 	bl	8006b0c <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2240      	movs	r2, #64	; 0x40
 8005192:	2100      	movs	r1, #0
 8005194:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2101      	movs	r1, #1
 800519a:	0018      	movs	r0, r3
 800519c:	f001 fcec 	bl	8006b78 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b006      	add	sp, #24
 80051ac:	bdb0      	pop	{r4, r5, r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	ffff0000 	.word	0xffff0000
 80051b4:	08005885 	.word	0x08005885
 80051b8:	080066bd 	.word	0x080066bd
 80051bc:	0800675d 	.word	0x0800675d
 80051c0:	80002400 	.word	0x80002400
 80051c4:	080053d9 	.word	0x080053d9

080051c8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	1dbb      	adds	r3, r7, #6
 80051d6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2241      	movs	r2, #65	; 0x41
 80051dc:	5c9b      	ldrb	r3, [r3, r2]
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	001a      	movs	r2, r3
 80051e2:	2328      	movs	r3, #40	; 0x28
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b28      	cmp	r3, #40	; 0x28
 80051e8:	d000      	beq.n	80051ec <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 80051ea:	e08f      	b.n	800530c <HAL_I2C_Slave_Seq_Transmit_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 80051f2:	1dbb      	adds	r3, r7, #6
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d105      	bne.n	8005206 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	0092      	lsls	r2, r2, #2
 8005200:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e083      	b.n	800530e <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005206:	4a44      	ldr	r2, [pc, #272]	; (8005318 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	0011      	movs	r1, r2
 800520c:	0018      	movs	r0, r3
 800520e:	f001 fd1b 	bl	8006c48 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2240      	movs	r2, #64	; 0x40
 8005216:	5c9b      	ldrb	r3, [r3, r2]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 800521c:	2302      	movs	r3, #2
 800521e:	e076      	b.n	800530e <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2240      	movs	r2, #64	; 0x40
 8005224:	2101      	movs	r1, #1
 8005226:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2241      	movs	r2, #65	; 0x41
 800522c:	5c9b      	ldrb	r3, [r3, r2]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b2a      	cmp	r3, #42	; 0x2a
 8005232:	d12c      	bne.n	800528e <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2102      	movs	r1, #2
 8005238:	0018      	movs	r0, r3
 800523a:	f001 fd05 	bl	8006c48 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	401a      	ands	r2, r3
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	429a      	cmp	r2, r3
 8005250:	d11d      	bne.n	800528e <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	492f      	ldr	r1, [pc, #188]	; (800531c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 800525e:	400a      	ands	r2, r1
 8005260:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d011      	beq.n	800528e <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	4a2c      	ldr	r2, [pc, #176]	; (8005320 <HAL_I2C_Slave_Seq_Transmit_IT+0x158>)
 8005270:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	0018      	movs	r0, r3
 8005278:	f7ff f8bc 	bl	80043f4 <HAL_DMA_Abort_IT>
 800527c:	1e03      	subs	r3, r0, #0
 800527e:	d006      	beq.n	800528e <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	0018      	movs	r0, r3
 800528c:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2241      	movs	r2, #65	; 0x41
 8005292:	2129      	movs	r1, #41	; 0x29
 8005294:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2242      	movs	r2, #66	; 0x42
 800529a:	2120      	movs	r1, #32
 800529c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	491b      	ldr	r1, [pc, #108]	; (800531c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1dba      	adds	r2, r7, #6
 80052be:	8812      	ldrh	r2, [r2, #0]
 80052c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80052d6:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	0c1b      	lsrs	r3, r3, #16
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2201      	movs	r2, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d103      	bne.n	80052f4 <HAL_I2C_Slave_Seq_Transmit_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2208      	movs	r2, #8
 80052f2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2240      	movs	r2, #64	; 0x40
 80052f8:	2100      	movs	r1, #0
 80052fa:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80052fc:	4a06      	ldr	r2, [pc, #24]	; (8005318 <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	0011      	movs	r1, r2
 8005302:	0018      	movs	r0, r3
 8005304:	f001 fc38 	bl	8006b78 <I2C_Enable_IRQ>

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
  }
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b004      	add	sp, #16
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	00008001 	.word	0x00008001
 800531c:	ffff7fff 	.word	0xffff7fff
 8005320:	0800678f 	.word	0x0800678f
 8005324:	0800565d 	.word	0x0800565d

08005328 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005330:	46c0      	nop			; (mov r8, r8)
 8005332:	46bd      	mov	sp, r7
 8005334:	b002      	add	sp, #8
 8005336:	bd80      	pop	{r7, pc}

08005338 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005340:	46c0      	nop			; (mov r8, r8)
 8005342:	46bd      	mov	sp, r7
 8005344:	b002      	add	sp, #8
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005350:	46c0      	nop			; (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	b002      	add	sp, #8
 8005356:	bd80      	pop	{r7, pc}

08005358 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005360:	46c0      	nop			; (mov r8, r8)
 8005362:	46bd      	mov	sp, r7
 8005364:	b002      	add	sp, #8
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	0008      	movs	r0, r1
 8005372:	0011      	movs	r1, r2
 8005374:	1cfb      	adds	r3, r7, #3
 8005376:	1c02      	adds	r2, r0, #0
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	003b      	movs	r3, r7
 800537c:	1c0a      	adds	r2, r1, #0
 800537e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b002      	add	sp, #8
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005390:	46c0      	nop			; (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	b002      	add	sp, #8
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80053a0:	46c0      	nop			; (mov r8, r8)
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b002      	add	sp, #8
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80053b0:	46c0      	nop			; (mov r8, r8)
 80053b2:	46bd      	mov	sp, r7
 80053b4:	b002      	add	sp, #8
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b002      	add	sp, #8
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b002      	add	sp, #8
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b089      	sub	sp, #36	; 0x24
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2240      	movs	r2, #64	; 0x40
 80053ec:	5c9b      	ldrb	r3, [r3, r2]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <I2C_Master_ISR_IT+0x1e>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e12b      	b.n	800564e <I2C_Master_ISR_IT+0x276>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2240      	movs	r2, #64	; 0x40
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	001a      	movs	r2, r3
 8005404:	2301      	movs	r3, #1
 8005406:	4013      	ands	r3, r2
 8005408:	d014      	beq.n	8005434 <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	091b      	lsrs	r3, r3, #4
 800540e:	001a      	movs	r2, r3
 8005410:	2301      	movs	r3, #1
 8005412:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005414:	d00e      	beq.n	8005434 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2210      	movs	r2, #16
 800541c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	2204      	movs	r2, #4
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	0018      	movs	r0, r3
 800542e:	f001 f8d2 	bl	80065d6 <I2C_Flush_TXDR>
 8005432:	e0f5      	b.n	8005620 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	001a      	movs	r2, r3
 800543a:	2301      	movs	r3, #1
 800543c:	4013      	ands	r3, r2
 800543e:	d023      	beq.n	8005488 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	089b      	lsrs	r3, r3, #2
 8005444:	001a      	movs	r2, r3
 8005446:	2301      	movs	r3, #1
 8005448:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800544a:	d01d      	beq.n	8005488 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2204      	movs	r2, #4
 8005450:	4393      	bics	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005486:	e0cb      	b.n	8005620 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	001a      	movs	r2, r3
 800548e:	2301      	movs	r3, #1
 8005490:	4013      	ands	r3, r2
 8005492:	d01e      	beq.n	80054d2 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	085b      	lsrs	r3, r3, #1
 8005498:	001a      	movs	r2, r3
 800549a:	2301      	movs	r3, #1
 800549c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800549e:	d018      	beq.n	80054d2 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	781a      	ldrb	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054d0:	e0a6      	b.n	8005620 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	09db      	lsrs	r3, r3, #7
 80054d6:	001a      	movs	r2, r3
 80054d8:	2301      	movs	r3, #1
 80054da:	4013      	ands	r3, r2
 80054dc:	d100      	bne.n	80054e0 <I2C_Master_ISR_IT+0x108>
 80054de:	e06b      	b.n	80055b8 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	099b      	lsrs	r3, r3, #6
 80054e4:	001a      	movs	r2, r3
 80054e6:	2301      	movs	r3, #1
 80054e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80054ea:	d065      	beq.n	80055b8 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04a      	beq.n	800558c <I2C_Master_ISR_IT+0x1b4>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d146      	bne.n	800558c <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	b29a      	uxth	r2, r3
 8005506:	2112      	movs	r1, #18
 8005508:	187b      	adds	r3, r7, r1
 800550a:	0592      	lsls	r2, r2, #22
 800550c:	0d92      	lsrs	r2, r2, #22
 800550e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2bff      	cmp	r3, #255	; 0xff
 8005518:	d910      	bls.n	800553c <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	22ff      	movs	r2, #255	; 0xff
 800551e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005524:	b2da      	uxtb	r2, r3
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	045c      	lsls	r4, r3, #17
 800552a:	187b      	adds	r3, r7, r1
 800552c:	8819      	ldrh	r1, [r3, #0]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	2300      	movs	r3, #0
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	0023      	movs	r3, r4
 8005536:	f001 fae9 	bl	8006b0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800553a:	e03c      	b.n	80055b6 <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	4a43      	ldr	r2, [pc, #268]	; (8005658 <I2C_Master_ISR_IT+0x280>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00e      	beq.n	800556e <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005554:	b2da      	uxtb	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800555a:	2312      	movs	r3, #18
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	8819      	ldrh	r1, [r3, #0]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	2300      	movs	r3, #0
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	0023      	movs	r3, r4
 8005568:	f001 fad0 	bl	8006b0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800556c:	e023      	b.n	80055b6 <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	b2da      	uxtb	r2, r3
 8005574:	2380      	movs	r3, #128	; 0x80
 8005576:	049c      	lsls	r4, r3, #18
 8005578:	2312      	movs	r3, #18
 800557a:	18fb      	adds	r3, r7, r3
 800557c:	8819      	ldrh	r1, [r3, #0]
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	2300      	movs	r3, #0
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	0023      	movs	r3, r4
 8005586:	f001 fac1 	bl	8006b0c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558a:	e014      	b.n	80055b6 <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	049b      	lsls	r3, r3, #18
 8005596:	401a      	ands	r2, r3
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	049b      	lsls	r3, r3, #18
 800559c:	429a      	cmp	r2, r3
 800559e:	d004      	beq.n	80055aa <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	0018      	movs	r0, r3
 80055a4:	f000 fc14 	bl	8005dd0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055a8:	e03a      	b.n	8005620 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2140      	movs	r1, #64	; 0x40
 80055ae:	0018      	movs	r0, r3
 80055b0:	f000 ff06 	bl	80063c0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055b4:	e034      	b.n	8005620 <I2C_Master_ISR_IT+0x248>
 80055b6:	e033      	b.n	8005620 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	099b      	lsrs	r3, r3, #6
 80055bc:	001a      	movs	r2, r3
 80055be:	2301      	movs	r3, #1
 80055c0:	4013      	ands	r3, r2
 80055c2:	d02d      	beq.n	8005620 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	099b      	lsrs	r3, r3, #6
 80055c8:	001a      	movs	r2, r3
 80055ca:	2301      	movs	r3, #1
 80055cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80055ce:	d027      	beq.n	8005620 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d11d      	bne.n	8005616 <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	049b      	lsls	r3, r3, #18
 80055e4:	401a      	ands	r2, r3
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	049b      	lsls	r3, r3, #18
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d018      	beq.n	8005620 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	4a19      	ldr	r2, [pc, #100]	; (8005658 <I2C_Master_ISR_IT+0x280>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d109      	bne.n	800560c <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2180      	movs	r1, #128	; 0x80
 8005604:	01c9      	lsls	r1, r1, #7
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	e009      	b.n	8005620 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	0018      	movs	r0, r3
 8005610:	f000 fbde 	bl	8005dd0 <I2C_ITMasterSeqCplt>
 8005614:	e004      	b.n	8005620 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2140      	movs	r1, #64	; 0x40
 800561a:	0018      	movs	r0, r3
 800561c:	f000 fed0 	bl	80063c0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	001a      	movs	r2, r3
 8005626:	2301      	movs	r3, #1
 8005628:	4013      	ands	r3, r2
 800562a:	d00b      	beq.n	8005644 <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	001a      	movs	r2, r3
 8005632:	2301      	movs	r3, #1
 8005634:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005636:	d005      	beq.n	8005644 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	0011      	movs	r1, r2
 800563e:	0018      	movs	r0, r3
 8005640:	f000 fc6e 	bl	8005f20 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2240      	movs	r2, #64	; 0x40
 8005648:	2100      	movs	r1, #0
 800564a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b007      	add	sp, #28
 8005654:	bd90      	pop	{r4, r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	ffff0000 	.word	0xffff0000

0800565c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2240      	movs	r2, #64	; 0x40
 8005676:	5c9b      	ldrb	r3, [r3, r2]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d101      	bne.n	8005680 <I2C_Slave_ISR_IT+0x24>
 800567c:	2302      	movs	r3, #2
 800567e:	e0fa      	b.n	8005876 <I2C_Slave_ISR_IT+0x21a>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2240      	movs	r2, #64	; 0x40
 8005684:	2101      	movs	r1, #1
 8005686:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	001a      	movs	r2, r3
 800568e:	2301      	movs	r3, #1
 8005690:	4013      	ands	r3, r2
 8005692:	d00b      	beq.n	80056ac <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	001a      	movs	r2, r3
 800569a:	2301      	movs	r3, #1
 800569c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800569e:	d005      	beq.n	80056ac <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	0011      	movs	r1, r2
 80056a6:	0018      	movs	r0, r3
 80056a8:	f000 fd0c 	bl	80060c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	091b      	lsrs	r3, r3, #4
 80056b0:	001a      	movs	r2, r3
 80056b2:	2301      	movs	r3, #1
 80056b4:	4013      	ands	r3, r2
 80056b6:	d054      	beq.n	8005762 <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	091b      	lsrs	r3, r3, #4
 80056bc:	001a      	movs	r2, r3
 80056be:	2301      	movs	r3, #1
 80056c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80056c2:	d04e      	beq.n	8005762 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d12d      	bne.n	800572a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2241      	movs	r2, #65	; 0x41
 80056d2:	5c9b      	ldrb	r3, [r3, r2]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b28      	cmp	r3, #40	; 0x28
 80056d8:	d10b      	bne.n	80056f2 <I2C_Slave_ISR_IT+0x96>
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	049b      	lsls	r3, r3, #18
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d106      	bne.n	80056f2 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	0011      	movs	r1, r2
 80056ea:	0018      	movs	r0, r3
 80056ec:	f000 fe0e 	bl	800630c <I2C_ITListenCplt>
 80056f0:	e036      	b.n	8005760 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2241      	movs	r2, #65	; 0x41
 80056f6:	5c9b      	ldrb	r3, [r3, r2]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b29      	cmp	r3, #41	; 0x29
 80056fc:	d110      	bne.n	8005720 <I2C_Slave_ISR_IT+0xc4>
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4a5f      	ldr	r2, [pc, #380]	; (8005880 <I2C_Slave_ISR_IT+0x224>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00c      	beq.n	8005720 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2210      	movs	r2, #16
 800570c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	0018      	movs	r0, r3
 8005712:	f000 ff60 	bl	80065d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	0018      	movs	r0, r3
 800571a:	f000 fb9b 	bl	8005e54 <I2C_ITSlaveSeqCplt>
 800571e:	e01f      	b.n	8005760 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2210      	movs	r2, #16
 8005726:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005728:	e09d      	b.n	8005866 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2210      	movs	r2, #16
 8005730:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	2204      	movs	r2, #4
 8005738:	431a      	orrs	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <I2C_Slave_ISR_IT+0xf4>
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	045b      	lsls	r3, r3, #17
 800574a:	429a      	cmp	r2, r3
 800574c:	d000      	beq.n	8005750 <I2C_Slave_ISR_IT+0xf4>
 800574e:	e08a      	b.n	8005866 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	0011      	movs	r1, r2
 8005758:	0018      	movs	r0, r3
 800575a:	f000 fe31 	bl	80063c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800575e:	e082      	b.n	8005866 <I2C_Slave_ISR_IT+0x20a>
 8005760:	e081      	b.n	8005866 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	089b      	lsrs	r3, r3, #2
 8005766:	001a      	movs	r2, r3
 8005768:	2301      	movs	r3, #1
 800576a:	4013      	ands	r3, r2
 800576c:	d031      	beq.n	80057d2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	001a      	movs	r2, r3
 8005774:	2301      	movs	r3, #1
 8005776:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005778:	d02b      	beq.n	80057d2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d018      	beq.n	80057b6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d154      	bne.n	800586a <I2C_Slave_ISR_IT+0x20e>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	4a2f      	ldr	r2, [pc, #188]	; (8005880 <I2C_Slave_ISR_IT+0x224>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d050      	beq.n	800586a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	0018      	movs	r0, r3
 80057cc:	f000 fb42 	bl	8005e54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80057d0:	e04b      	b.n	800586a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	08db      	lsrs	r3, r3, #3
 80057d6:	001a      	movs	r2, r3
 80057d8:	2301      	movs	r3, #1
 80057da:	4013      	ands	r3, r2
 80057dc:	d00c      	beq.n	80057f8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	001a      	movs	r2, r3
 80057e4:	2301      	movs	r3, #1
 80057e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80057e8:	d006      	beq.n	80057f8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	0011      	movs	r1, r2
 80057f0:	0018      	movs	r0, r3
 80057f2:	f000 fa49 	bl	8005c88 <I2C_ITAddrCplt>
 80057f6:	e039      	b.n	800586c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	001a      	movs	r2, r3
 80057fe:	2301      	movs	r3, #1
 8005800:	4013      	ands	r3, r2
 8005802:	d033      	beq.n	800586c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	085b      	lsrs	r3, r3, #1
 8005808:	001a      	movs	r2, r3
 800580a:	2301      	movs	r3, #1
 800580c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800580e:	d02d      	beq.n	800586c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d018      	beq.n	800584c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	; 0x28
 800584a:	e00f      	b.n	800586c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	045b      	lsls	r3, r3, #17
 8005852:	429a      	cmp	r2, r3
 8005854:	d002      	beq.n	800585c <I2C_Slave_ISR_IT+0x200>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d107      	bne.n	800586c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	0018      	movs	r0, r3
 8005860:	f000 faf8 	bl	8005e54 <I2C_ITSlaveSeqCplt>
 8005864:	e002      	b.n	800586c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	e000      	b.n	800586c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800586a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2240      	movs	r2, #64	; 0x40
 8005870:	2100      	movs	r1, #0
 8005872:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	0018      	movs	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	b006      	add	sp, #24
 800587c:	bd80      	pop	{r7, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	ffff0000 	.word	0xffff0000

08005884 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b089      	sub	sp, #36	; 0x24
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2240      	movs	r2, #64	; 0x40
 8005894:	5c9b      	ldrb	r3, [r3, r2]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <I2C_Master_ISR_DMA+0x1a>
 800589a:	2302      	movs	r3, #2
 800589c:	e0f7      	b.n	8005a8e <I2C_Master_ISR_DMA+0x20a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2240      	movs	r2, #64	; 0x40
 80058a2:	2101      	movs	r1, #1
 80058a4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	001a      	movs	r2, r3
 80058ac:	2301      	movs	r3, #1
 80058ae:	4013      	ands	r3, r2
 80058b0:	d019      	beq.n	80058e6 <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	091b      	lsrs	r3, r3, #4
 80058b6:	001a      	movs	r2, r3
 80058b8:	2301      	movs	r3, #1
 80058ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80058bc:	d013      	beq.n	80058e6 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2210      	movs	r2, #16
 80058c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ca:	2204      	movs	r2, #4
 80058cc:	431a      	orrs	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2120      	movs	r1, #32
 80058d6:	0018      	movs	r0, r3
 80058d8:	f001 f94e 	bl	8006b78 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	0018      	movs	r0, r3
 80058e0:	f000 fe79 	bl	80065d6 <I2C_Flush_TXDR>
 80058e4:	e0ce      	b.n	8005a84 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	09db      	lsrs	r3, r3, #7
 80058ea:	001a      	movs	r2, r3
 80058ec:	2301      	movs	r3, #1
 80058ee:	4013      	ands	r3, r2
 80058f0:	d100      	bne.n	80058f4 <I2C_Master_ISR_DMA+0x70>
 80058f2:	e07e      	b.n	80059f2 <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	099b      	lsrs	r3, r3, #6
 80058f8:	001a      	movs	r2, r3
 80058fa:	2301      	movs	r3, #1
 80058fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80058fe:	d100      	bne.n	8005902 <I2C_Master_ISR_DMA+0x7e>
 8005900:	e077      	b.n	80059f2 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	438a      	bics	r2, r1
 8005910:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d055      	beq.n	80059c8 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	b29a      	uxth	r2, r3
 8005924:	2312      	movs	r3, #18
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	0592      	lsls	r2, r2, #22
 800592a:	0d92      	lsrs	r2, r2, #22
 800592c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	2bff      	cmp	r3, #255	; 0xff
 8005936:	d906      	bls.n	8005946 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	22ff      	movs	r2, #255	; 0xff
 800593c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800593e:	2380      	movs	r3, #128	; 0x80
 8005940:	045b      	lsls	r3, r3, #17
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e010      	b.n	8005968 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594a:	b29a      	uxth	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	4a50      	ldr	r2, [pc, #320]	; (8005a98 <I2C_Master_ISR_DMA+0x214>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	e002      	b.n	8005968 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	049b      	lsls	r3, r3, #18
 8005966:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800596c:	b2da      	uxtb	r2, r3
 800596e:	697c      	ldr	r4, [r7, #20]
 8005970:	2312      	movs	r3, #18
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	8819      	ldrh	r1, [r3, #0]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	2300      	movs	r3, #0
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	0023      	movs	r3, r4
 800597e:	f001 f8c5 	bl	8006b0c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2241      	movs	r2, #65	; 0x41
 8005998:	5c9b      	ldrb	r3, [r3, r2]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b22      	cmp	r3, #34	; 0x22
 800599e:	d109      	bne.n	80059b4 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2180      	movs	r1, #128	; 0x80
 80059ac:	0209      	lsls	r1, r1, #8
 80059ae:	430a      	orrs	r2, r1
 80059b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80059b2:	e067      	b.n	8005a84 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2180      	movs	r1, #128	; 0x80
 80059c0:	01c9      	lsls	r1, r1, #7
 80059c2:	430a      	orrs	r2, r1
 80059c4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80059c6:	e05d      	b.n	8005a84 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	2380      	movs	r3, #128	; 0x80
 80059d0:	049b      	lsls	r3, r3, #18
 80059d2:	401a      	ands	r2, r3
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	049b      	lsls	r3, r3, #18
 80059d8:	429a      	cmp	r2, r3
 80059da:	d004      	beq.n	80059e6 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	0018      	movs	r0, r3
 80059e0:	f000 f9f6 	bl	8005dd0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80059e4:	e04e      	b.n	8005a84 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2140      	movs	r1, #64	; 0x40
 80059ea:	0018      	movs	r0, r3
 80059ec:	f000 fce8 	bl	80063c0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80059f0:	e048      	b.n	8005a84 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	099b      	lsrs	r3, r3, #6
 80059f6:	001a      	movs	r2, r3
 80059f8:	2301      	movs	r3, #1
 80059fa:	4013      	ands	r3, r2
 80059fc:	d02e      	beq.n	8005a5c <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	099b      	lsrs	r3, r3, #6
 8005a02:	001a      	movs	r2, r3
 8005a04:	2301      	movs	r3, #1
 8005a06:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005a08:	d028      	beq.n	8005a5c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d11d      	bne.n	8005a50 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	2380      	movs	r3, #128	; 0x80
 8005a1c:	049b      	lsls	r3, r3, #18
 8005a1e:	401a      	ands	r2, r3
 8005a20:	2380      	movs	r3, #128	; 0x80
 8005a22:	049b      	lsls	r3, r3, #18
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d02c      	beq.n	8005a82 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <I2C_Master_ISR_DMA+0x214>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d109      	bne.n	8005a46 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2180      	movs	r1, #128	; 0x80
 8005a3e:	01c9      	lsls	r1, r1, #7
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005a44:	e01d      	b.n	8005a82 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f000 f9c1 	bl	8005dd0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005a4e:	e018      	b.n	8005a82 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2140      	movs	r1, #64	; 0x40
 8005a54:	0018      	movs	r0, r3
 8005a56:	f000 fcb3 	bl	80063c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005a5a:	e012      	b.n	8005a82 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	001a      	movs	r2, r3
 8005a62:	2301      	movs	r3, #1
 8005a64:	4013      	ands	r3, r2
 8005a66:	d00d      	beq.n	8005a84 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	001a      	movs	r2, r3
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005a72:	d007      	beq.n	8005a84 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	0011      	movs	r1, r2
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f000 fa50 	bl	8005f20 <I2C_ITMasterCplt>
 8005a80:	e000      	b.n	8005a84 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8005a82:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2240      	movs	r2, #64	; 0x40
 8005a88:	2100      	movs	r1, #0
 8005a8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	0018      	movs	r0, r3
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b007      	add	sp, #28
 8005a94:	bd90      	pop	{r4, r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	ffff0000 	.word	0xffff0000

08005a9c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2240      	movs	r2, #64	; 0x40
 8005ab6:	5c9b      	ldrb	r3, [r3, r2]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <I2C_Slave_ISR_DMA+0x24>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0dd      	b.n	8005c7c <I2C_Slave_ISR_DMA+0x1e0>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2240      	movs	r2, #64	; 0x40
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	001a      	movs	r2, r3
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d00b      	beq.n	8005aec <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	001a      	movs	r2, r3
 8005ada:	2301      	movs	r3, #1
 8005adc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ade:	d005      	beq.n	8005aec <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	0011      	movs	r1, r2
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 faec 	bl	80060c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	091b      	lsrs	r3, r3, #4
 8005af0:	001a      	movs	r2, r3
 8005af2:	2301      	movs	r3, #1
 8005af4:	4013      	ands	r3, r2
 8005af6:	d100      	bne.n	8005afa <I2C_Slave_ISR_DMA+0x5e>
 8005af8:	e0a9      	b.n	8005c4e <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	001a      	movs	r2, r3
 8005b00:	2301      	movs	r3, #1
 8005b02:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b04:	d100      	bne.n	8005b08 <I2C_Slave_ISR_DMA+0x6c>
 8005b06:	e0a2      	b.n	8005c4e <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	0b9b      	lsrs	r3, r3, #14
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4013      	ands	r3, r2
 8005b12:	d106      	bne.n	8005b22 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	0bdb      	lsrs	r3, r3, #15
 8005b18:	001a      	movs	r2, r3
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b1e:	d100      	bne.n	8005b22 <I2C_Slave_ISR_DMA+0x86>
 8005b20:	e08e      	b.n	8005c40 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	0bdb      	lsrs	r3, r3, #15
 8005b2e:	001a      	movs	r2, r3
 8005b30:	2301      	movs	r3, #1
 8005b32:	4013      	ands	r3, r2
 8005b34:	d007      	beq.n	8005b46 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8005b42:	2301      	movs	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00d      	beq.n	8005b6a <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	0b9b      	lsrs	r3, r3, #14
 8005b52:	001a      	movs	r2, r3
 8005b54:	2301      	movs	r3, #1
 8005b56:	4013      	ands	r3, r2
 8005b58:	d007      	beq.n	8005b6a <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d101      	bne.n	8005b6a <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8005b66:	2301      	movs	r3, #1
 8005b68:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d12d      	bne.n	8005bcc <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2241      	movs	r2, #65	; 0x41
 8005b74:	5c9b      	ldrb	r3, [r3, r2]
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b28      	cmp	r3, #40	; 0x28
 8005b7a:	d10b      	bne.n	8005b94 <I2C_Slave_ISR_DMA+0xf8>
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	2380      	movs	r3, #128	; 0x80
 8005b80:	049b      	lsls	r3, r3, #18
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d106      	bne.n	8005b94 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 fbbd 	bl	800630c <I2C_ITListenCplt>
 8005b92:	e054      	b.n	8005c3e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2241      	movs	r2, #65	; 0x41
 8005b98:	5c9b      	ldrb	r3, [r3, r2]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b29      	cmp	r3, #41	; 0x29
 8005b9e:	d110      	bne.n	8005bc2 <I2C_Slave_ISR_DMA+0x126>
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	4a38      	ldr	r2, [pc, #224]	; (8005c84 <I2C_Slave_ISR_DMA+0x1e8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d00c      	beq.n	8005bc2 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2210      	movs	r2, #16
 8005bae:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f000 fd0f 	bl	80065d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 f94a 	bl	8005e54 <I2C_ITSlaveSeqCplt>
 8005bc0:	e03d      	b.n	8005c3e <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2210      	movs	r2, #16
 8005bc8:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005bca:	e03e      	b.n	8005c4a <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2210      	movs	r2, #16
 8005bd2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd8:	2204      	movs	r2, #4
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005be0:	2317      	movs	r3, #23
 8005be2:	18fb      	adds	r3, r7, r3
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	2141      	movs	r1, #65	; 0x41
 8005be8:	5c52      	ldrb	r2, [r2, r1]
 8005bea:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d004      	beq.n	8005bfc <I2C_Slave_ISR_DMA+0x160>
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	2380      	movs	r3, #128	; 0x80
 8005bf6:	045b      	lsls	r3, r3, #17
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d126      	bne.n	8005c4a <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bfc:	2217      	movs	r2, #23
 8005bfe:	18bb      	adds	r3, r7, r2
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b21      	cmp	r3, #33	; 0x21
 8005c04:	d003      	beq.n	8005c0e <I2C_Slave_ISR_DMA+0x172>
 8005c06:	18bb      	adds	r3, r7, r2
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b29      	cmp	r3, #41	; 0x29
 8005c0c:	d103      	bne.n	8005c16 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2221      	movs	r2, #33	; 0x21
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
 8005c14:	e00b      	b.n	8005c2e <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c16:	2217      	movs	r2, #23
 8005c18:	18bb      	adds	r3, r7, r2
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b22      	cmp	r3, #34	; 0x22
 8005c1e:	d003      	beq.n	8005c28 <I2C_Slave_ISR_DMA+0x18c>
 8005c20:	18bb      	adds	r3, r7, r2
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b2a      	cmp	r3, #42	; 0x2a
 8005c26:	d102      	bne.n	8005c2e <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2222      	movs	r2, #34	; 0x22
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	0011      	movs	r1, r2
 8005c36:	0018      	movs	r0, r3
 8005c38:	f000 fbc2 	bl	80063c0 <I2C_ITError>
      if (treatdmanack == 1U)
 8005c3c:	e005      	b.n	8005c4a <I2C_Slave_ISR_DMA+0x1ae>
 8005c3e:	e004      	b.n	8005c4a <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2210      	movs	r2, #16
 8005c46:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005c48:	e013      	b.n	8005c72 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8005c4a:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005c4c:	e011      	b.n	8005c72 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	08db      	lsrs	r3, r3, #3
 8005c52:	001a      	movs	r2, r3
 8005c54:	2301      	movs	r3, #1
 8005c56:	4013      	ands	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	08db      	lsrs	r3, r3, #3
 8005c5e:	001a      	movs	r2, r3
 8005c60:	2301      	movs	r3, #1
 8005c62:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005c64:	d005      	beq.n	8005c72 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	0011      	movs	r1, r2
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 f80b 	bl	8005c88 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2240      	movs	r2, #64	; 0x40
 8005c76:	2100      	movs	r1, #0
 8005c78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	b008      	add	sp, #32
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	ffff0000 	.word	0xffff0000

08005c88 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c88:	b5b0      	push	{r4, r5, r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2241      	movs	r2, #65	; 0x41
 8005c96:	5c9b      	ldrb	r3, [r3, r2]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	2328      	movs	r3, #40	; 0x28
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	2b28      	cmp	r3, #40	; 0x28
 8005ca2:	d000      	beq.n	8005ca6 <I2C_ITAddrCplt+0x1e>
 8005ca4:	e088      	b.n	8005db8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	0c1b      	lsrs	r3, r3, #16
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	250f      	movs	r5, #15
 8005cb2:	197b      	adds	r3, r7, r5
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	400a      	ands	r2, r1
 8005cb8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	0c1b      	lsrs	r3, r3, #16
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	200c      	movs	r0, #12
 8005cc6:	183b      	adds	r3, r7, r0
 8005cc8:	21fe      	movs	r1, #254	; 0xfe
 8005cca:	400a      	ands	r2, r1
 8005ccc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	240a      	movs	r4, #10
 8005cd8:	193b      	adds	r3, r7, r4
 8005cda:	0592      	lsls	r2, r2, #22
 8005cdc:	0d92      	lsrs	r2, r2, #22
 8005cde:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	2308      	movs	r3, #8
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	21fe      	movs	r1, #254	; 0xfe
 8005cee:	400a      	ands	r2, r1
 8005cf0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d148      	bne.n	8005d8c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005cfa:	0021      	movs	r1, r4
 8005cfc:	187b      	adds	r3, r7, r1
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	09db      	lsrs	r3, r3, #7
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	183b      	adds	r3, r7, r0
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	4053      	eors	r3, r2
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	001a      	movs	r2, r3
 8005d0e:	2306      	movs	r3, #6
 8005d10:	4013      	ands	r3, r2
 8005d12:	d120      	bne.n	8005d56 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005d14:	183b      	adds	r3, r7, r0
 8005d16:	187a      	adds	r2, r7, r1
 8005d18:	8812      	ldrh	r2, [r2, #0]
 8005d1a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d14c      	bne.n	8005dc8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2208      	movs	r2, #8
 8005d3a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2240      	movs	r2, #64	; 0x40
 8005d40:	2100      	movs	r1, #0
 8005d42:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d44:	183b      	adds	r3, r7, r0
 8005d46:	881a      	ldrh	r2, [r3, #0]
 8005d48:	197b      	adds	r3, r7, r5
 8005d4a:	7819      	ldrb	r1, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	0018      	movs	r0, r3
 8005d50:	f7ff fb0a 	bl	8005368 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005d54:	e038      	b.n	8005dc8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005d56:	240c      	movs	r4, #12
 8005d58:	193b      	adds	r3, r7, r4
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	18ba      	adds	r2, r7, r2
 8005d5e:	8812      	ldrh	r2, [r2, #0]
 8005d60:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d62:	2380      	movs	r3, #128	; 0x80
 8005d64:	021a      	lsls	r2, r3, #8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	0011      	movs	r1, r2
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 ff6c 	bl	8006c48 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2240      	movs	r2, #64	; 0x40
 8005d74:	2100      	movs	r1, #0
 8005d76:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005d78:	193b      	adds	r3, r7, r4
 8005d7a:	881a      	ldrh	r2, [r3, #0]
 8005d7c:	230f      	movs	r3, #15
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	7819      	ldrb	r1, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7ff faef 	bl	8005368 <HAL_I2C_AddrCallback>
}
 8005d8a:	e01d      	b.n	8005dc8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005d8c:	2380      	movs	r3, #128	; 0x80
 8005d8e:	021a      	lsls	r2, r3, #8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	0011      	movs	r1, r2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 ff57 	bl	8006c48 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2240      	movs	r2, #64	; 0x40
 8005d9e:	2100      	movs	r1, #0
 8005da0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005da2:	230c      	movs	r3, #12
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	881a      	ldrh	r2, [r3, #0]
 8005da8:	230f      	movs	r3, #15
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	7819      	ldrb	r1, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7ff fad9 	bl	8005368 <HAL_I2C_AddrCallback>
}
 8005db6:	e007      	b.n	8005dc8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2208      	movs	r2, #8
 8005dbe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2240      	movs	r2, #64	; 0x40
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]
}
 8005dc8:	46c0      	nop			; (mov r8, r8)
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b004      	add	sp, #16
 8005dce:	bdb0      	pop	{r4, r5, r7, pc}

08005dd0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2242      	movs	r2, #66	; 0x42
 8005ddc:	2100      	movs	r1, #0
 8005dde:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2241      	movs	r2, #65	; 0x41
 8005de4:	5c9b      	ldrb	r3, [r3, r2]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b21      	cmp	r3, #33	; 0x21
 8005dea:	d117      	bne.n	8005e1c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2241      	movs	r2, #65	; 0x41
 8005df0:	2120      	movs	r1, #32
 8005df2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2211      	movs	r2, #17
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2101      	movs	r1, #1
 8005e04:	0018      	movs	r0, r3
 8005e06:	f000 ff1f 	bl	8006c48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2240      	movs	r2, #64	; 0x40
 8005e0e:	2100      	movs	r1, #0
 8005e10:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0018      	movs	r0, r3
 8005e16:	f7ff fa87 	bl	8005328 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e1a:	e016      	b.n	8005e4a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2241      	movs	r2, #65	; 0x41
 8005e20:	2120      	movs	r1, #32
 8005e22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2212      	movs	r2, #18
 8005e28:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2102      	movs	r1, #2
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 ff07 	bl	8006c48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2240      	movs	r2, #64	; 0x40
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f7ff fa77 	bl	8005338 <HAL_I2C_MasterRxCpltCallback>
}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	b002      	add	sp, #8
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2242      	movs	r2, #66	; 0x42
 8005e68:	2100      	movs	r1, #0
 8005e6a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	0b9b      	lsrs	r3, r3, #14
 8005e70:	001a      	movs	r2, r3
 8005e72:	2301      	movs	r3, #1
 8005e74:	4013      	ands	r3, r2
 8005e76:	d008      	beq.n	8005e8a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4925      	ldr	r1, [pc, #148]	; (8005f18 <I2C_ITSlaveSeqCplt+0xc4>)
 8005e84:	400a      	ands	r2, r1
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	e00d      	b.n	8005ea6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	0bdb      	lsrs	r3, r3, #15
 8005e8e:	001a      	movs	r2, r3
 8005e90:	2301      	movs	r3, #1
 8005e92:	4013      	ands	r3, r2
 8005e94:	d007      	beq.n	8005ea6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	491e      	ldr	r1, [pc, #120]	; (8005f1c <I2C_ITSlaveSeqCplt+0xc8>)
 8005ea2:	400a      	ands	r2, r1
 8005ea4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2241      	movs	r2, #65	; 0x41
 8005eaa:	5c9b      	ldrb	r3, [r3, r2]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b29      	cmp	r3, #41	; 0x29
 8005eb0:	d114      	bne.n	8005edc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2241      	movs	r2, #65	; 0x41
 8005eb6:	2128      	movs	r1, #40	; 0x28
 8005eb8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2221      	movs	r2, #33	; 0x21
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 febf 	bl	8006c48 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2240      	movs	r2, #64	; 0x40
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f7ff fa37 	bl	8005348 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005eda:	e019      	b.n	8005f10 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2241      	movs	r2, #65	; 0x41
 8005ee0:	5c9b      	ldrb	r3, [r3, r2]
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8005ee6:	d113      	bne.n	8005f10 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2241      	movs	r2, #65	; 0x41
 8005eec:	2128      	movs	r1, #40	; 0x28
 8005eee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2222      	movs	r2, #34	; 0x22
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2102      	movs	r1, #2
 8005efa:	0018      	movs	r0, r3
 8005efc:	f000 fea4 	bl	8006c48 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2240      	movs	r2, #64	; 0x40
 8005f04:	2100      	movs	r1, #0
 8005f06:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f7ff fa24 	bl	8005358 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f10:	46c0      	nop			; (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	b004      	add	sp, #16
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	ffffbfff 	.word	0xffffbfff
 8005f1c:	ffff7fff 	.word	0xffff7fff

08005f20 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2220      	movs	r2, #32
 8005f34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2241      	movs	r2, #65	; 0x41
 8005f3a:	5c9b      	ldrb	r3, [r3, r2]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b21      	cmp	r3, #33	; 0x21
 8005f40:	d108      	bne.n	8005f54 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2101      	movs	r1, #1
 8005f46:	0018      	movs	r0, r3
 8005f48:	f000 fe7e 	bl	8006c48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2211      	movs	r2, #17
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
 8005f52:	e00d      	b.n	8005f70 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2241      	movs	r2, #65	; 0x41
 8005f58:	5c9b      	ldrb	r3, [r3, r2]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b22      	cmp	r3, #34	; 0x22
 8005f5e:	d107      	bne.n	8005f70 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2102      	movs	r1, #2
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 fe6f 	bl	8006c48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2212      	movs	r2, #18
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4950      	ldr	r1, [pc, #320]	; (80060bc <I2C_ITMasterCplt+0x19c>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a4d      	ldr	r2, [pc, #308]	; (80060c0 <I2C_ITMasterCplt+0x1a0>)
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	001a      	movs	r2, r3
 8005f92:	2301      	movs	r3, #1
 8005f94:	4013      	ands	r3, r2
 8005f96:	d009      	beq.n	8005fac <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2210      	movs	r2, #16
 8005f9e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2241      	movs	r2, #65	; 0x41
 8005fb0:	5c9b      	ldrb	r3, [r3, r2]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b60      	cmp	r3, #96	; 0x60
 8005fb6:	d10b      	bne.n	8005fd0 <I2C_ITMasterCplt+0xb0>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	089b      	lsrs	r3, r3, #2
 8005fbc:	001a      	movs	r2, r3
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d005      	beq.n	8005fd0 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005fce:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f000 faff 	bl	80065d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2241      	movs	r2, #65	; 0x41
 8005fe2:	5c9b      	ldrb	r3, [r3, r2]
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b60      	cmp	r3, #96	; 0x60
 8005fe8:	d002      	beq.n	8005ff0 <I2C_ITMasterCplt+0xd0>
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	0011      	movs	r1, r2
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f000 f9e1 	bl	80063c0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ffe:	e058      	b.n	80060b2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2241      	movs	r2, #65	; 0x41
 8006004:	5c9b      	ldrb	r3, [r3, r2]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b21      	cmp	r3, #33	; 0x21
 800600a:	d126      	bne.n	800605a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2241      	movs	r2, #65	; 0x41
 8006010:	2120      	movs	r1, #32
 8006012:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2242      	movs	r2, #66	; 0x42
 800601e:	5c9b      	ldrb	r3, [r3, r2]
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b40      	cmp	r3, #64	; 0x40
 8006024:	d10c      	bne.n	8006040 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2242      	movs	r2, #66	; 0x42
 800602a:	2100      	movs	r1, #0
 800602c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2240      	movs	r2, #64	; 0x40
 8006032:	2100      	movs	r1, #0
 8006034:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	0018      	movs	r0, r3
 800603a:	f7ff f9ad 	bl	8005398 <HAL_I2C_MemTxCpltCallback>
}
 800603e:	e038      	b.n	80060b2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2242      	movs	r2, #66	; 0x42
 8006044:	2100      	movs	r1, #0
 8006046:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	2100      	movs	r1, #0
 800604e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	0018      	movs	r0, r3
 8006054:	f7ff f968 	bl	8005328 <HAL_I2C_MasterTxCpltCallback>
}
 8006058:	e02b      	b.n	80060b2 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2241      	movs	r2, #65	; 0x41
 800605e:	5c9b      	ldrb	r3, [r3, r2]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b22      	cmp	r3, #34	; 0x22
 8006064:	d125      	bne.n	80060b2 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2241      	movs	r2, #65	; 0x41
 800606a:	2120      	movs	r1, #32
 800606c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2242      	movs	r2, #66	; 0x42
 8006078:	5c9b      	ldrb	r3, [r3, r2]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d10c      	bne.n	800609a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2242      	movs	r2, #66	; 0x42
 8006084:	2100      	movs	r1, #0
 8006086:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2240      	movs	r2, #64	; 0x40
 800608c:	2100      	movs	r1, #0
 800608e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	0018      	movs	r0, r3
 8006094:	f7ff f988 	bl	80053a8 <HAL_I2C_MemRxCpltCallback>
}
 8006098:	e00b      	b.n	80060b2 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2242      	movs	r2, #66	; 0x42
 800609e:	2100      	movs	r1, #0
 80060a0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2240      	movs	r2, #64	; 0x40
 80060a6:	2100      	movs	r1, #0
 80060a8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7ff f943 	bl	8005338 <HAL_I2C_MasterRxCpltCallback>
}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b006      	add	sp, #24
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	fe00e800 	.word	0xfe00e800
 80060c0:	ffff0000 	.word	0xffff0000

080060c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80060da:	200f      	movs	r0, #15
 80060dc:	183b      	adds	r3, r7, r0
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	2141      	movs	r1, #65	; 0x41
 80060e2:	5c52      	ldrb	r2, [r2, r1]
 80060e4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2220      	movs	r2, #32
 80060ec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80060ee:	183b      	adds	r3, r7, r0
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	2b21      	cmp	r3, #33	; 0x21
 80060f4:	d003      	beq.n	80060fe <I2C_ITSlaveCplt+0x3a>
 80060f6:	183b      	adds	r3, r7, r0
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b29      	cmp	r3, #41	; 0x29
 80060fc:	d109      	bne.n	8006112 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80060fe:	4a7d      	ldr	r2, [pc, #500]	; (80062f4 <I2C_ITSlaveCplt+0x230>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	0011      	movs	r1, r2
 8006104:	0018      	movs	r0, r3
 8006106:	f000 fd9f 	bl	8006c48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2221      	movs	r2, #33	; 0x21
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
 8006110:	e011      	b.n	8006136 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006112:	220f      	movs	r2, #15
 8006114:	18bb      	adds	r3, r7, r2
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b22      	cmp	r3, #34	; 0x22
 800611a:	d003      	beq.n	8006124 <I2C_ITSlaveCplt+0x60>
 800611c:	18bb      	adds	r3, r7, r2
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b2a      	cmp	r3, #42	; 0x2a
 8006122:	d108      	bne.n	8006136 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006124:	4a74      	ldr	r2, [pc, #464]	; (80062f8 <I2C_ITSlaveCplt+0x234>)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0011      	movs	r1, r2
 800612a:	0018      	movs	r0, r3
 800612c:	f000 fd8c 	bl	8006c48 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2222      	movs	r2, #34	; 0x22
 8006134:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	0209      	lsls	r1, r1, #8
 8006144:	430a      	orrs	r2, r1
 8006146:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	496a      	ldr	r1, [pc, #424]	; (80062fc <I2C_ITSlaveCplt+0x238>)
 8006154:	400a      	ands	r2, r1
 8006156:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	0018      	movs	r0, r3
 800615c:	f000 fa3b 	bl	80065d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	0b9b      	lsrs	r3, r3, #14
 8006164:	001a      	movs	r2, r3
 8006166:	2301      	movs	r3, #1
 8006168:	4013      	ands	r3, r2
 800616a:	d013      	beq.n	8006194 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4962      	ldr	r1, [pc, #392]	; (8006300 <I2C_ITSlaveCplt+0x23c>)
 8006178:	400a      	ands	r2, r1
 800617a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	2b00      	cmp	r3, #0
 8006182:	d020      	beq.n	80061c6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	b29a      	uxth	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006192:	e018      	b.n	80061c6 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	0bdb      	lsrs	r3, r3, #15
 8006198:	001a      	movs	r2, r3
 800619a:	2301      	movs	r3, #1
 800619c:	4013      	ands	r3, r2
 800619e:	d012      	beq.n	80061c6 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4956      	ldr	r1, [pc, #344]	; (8006304 <I2C_ITSlaveCplt+0x240>)
 80061ac:	400a      	ands	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d006      	beq.n	80061c6 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	089b      	lsrs	r3, r3, #2
 80061ca:	001a      	movs	r2, r3
 80061cc:	2301      	movs	r3, #1
 80061ce:	4013      	ands	r3, r2
 80061d0:	d020      	beq.n	8006214 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2204      	movs	r2, #4
 80061d6:	4393      	bics	r3, r2
 80061d8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	2204      	movs	r2, #4
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2242      	movs	r2, #66	; 0x42
 800622e:	2100      	movs	r1, #0
 8006230:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623c:	2b00      	cmp	r3, #0
 800623e:	d013      	beq.n	8006268 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	0011      	movs	r1, r2
 8006248:	0018      	movs	r0, r3
 800624a:	f000 f8b9 	bl	80063c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2241      	movs	r2, #65	; 0x41
 8006252:	5c9b      	ldrb	r3, [r3, r2]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b28      	cmp	r3, #40	; 0x28
 8006258:	d147      	bne.n	80062ea <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	0011      	movs	r1, r2
 8006260:	0018      	movs	r0, r3
 8006262:	f000 f853 	bl	800630c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006266:	e040      	b.n	80062ea <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	4a26      	ldr	r2, [pc, #152]	; (8006308 <I2C_ITSlaveCplt+0x244>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d016      	beq.n	80062a0 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f7ff fded 	bl	8005e54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a22      	ldr	r2, [pc, #136]	; (8006308 <I2C_ITSlaveCplt+0x244>)
 800627e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2241      	movs	r2, #65	; 0x41
 8006284:	2120      	movs	r1, #32
 8006286:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2240      	movs	r2, #64	; 0x40
 8006292:	2100      	movs	r1, #0
 8006294:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	0018      	movs	r0, r3
 800629a:	f7ff f875 	bl	8005388 <HAL_I2C_ListenCpltCallback>
}
 800629e:	e024      	b.n	80062ea <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2241      	movs	r2, #65	; 0x41
 80062a4:	5c9b      	ldrb	r3, [r3, r2]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b22      	cmp	r3, #34	; 0x22
 80062aa:	d10f      	bne.n	80062cc <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2241      	movs	r2, #65	; 0x41
 80062b0:	2120      	movs	r1, #32
 80062b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2240      	movs	r2, #64	; 0x40
 80062be:	2100      	movs	r1, #0
 80062c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7ff f847 	bl	8005358 <HAL_I2C_SlaveRxCpltCallback>
}
 80062ca:	e00e      	b.n	80062ea <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2241      	movs	r2, #65	; 0x41
 80062d0:	2120      	movs	r1, #32
 80062d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2240      	movs	r2, #64	; 0x40
 80062de:	2100      	movs	r1, #0
 80062e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	0018      	movs	r0, r3
 80062e6:	f7ff f82f 	bl	8005348 <HAL_I2C_SlaveTxCpltCallback>
}
 80062ea:	46c0      	nop			; (mov r8, r8)
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b006      	add	sp, #24
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	00008001 	.word	0x00008001
 80062f8:	00008002 	.word	0x00008002
 80062fc:	fe00e800 	.word	0xfe00e800
 8006300:	ffffbfff 	.word	0xffffbfff
 8006304:	ffff7fff 	.word	0xffff7fff
 8006308:	ffff0000 	.word	0xffff0000

0800630c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <I2C_ITListenCplt+0xac>)
 800631a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2241      	movs	r2, #65	; 0x41
 8006326:	2120      	movs	r1, #32
 8006328:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2242      	movs	r2, #66	; 0x42
 800632e:	2100      	movs	r1, #0
 8006330:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	089b      	lsrs	r3, r3, #2
 800633c:	001a      	movs	r2, r3
 800633e:	2301      	movs	r3, #1
 8006340:	4013      	ands	r3, r2
 8006342:	d022      	beq.n	800638a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006360:	2b00      	cmp	r3, #0
 8006362:	d012      	beq.n	800638a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29a      	uxth	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	2204      	movs	r2, #4
 8006384:	431a      	orrs	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800638a:	4a0c      	ldr	r2, [pc, #48]	; (80063bc <I2C_ITListenCplt+0xb0>)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f000 fc59 	bl	8006c48 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2210      	movs	r2, #16
 800639c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2240      	movs	r2, #64	; 0x40
 80063a2:	2100      	movs	r1, #0
 80063a4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0018      	movs	r0, r3
 80063aa:	f7fe ffed 	bl	8005388 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b002      	add	sp, #8
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	ffff0000 	.word	0xffff0000
 80063bc:	00008003 	.word	0x00008003

080063c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80063ca:	200f      	movs	r0, #15
 80063cc:	183b      	adds	r3, r7, r0
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	2141      	movs	r1, #65	; 0x41
 80063d2:	5c52      	ldrb	r2, [r2, r1]
 80063d4:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2242      	movs	r2, #66	; 0x42
 80063da:	2100      	movs	r1, #0
 80063dc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a62      	ldr	r2, [pc, #392]	; (800656c <I2C_ITError+0x1ac>)
 80063e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80063f6:	183b      	adds	r3, r7, r0
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b28      	cmp	r3, #40	; 0x28
 80063fc:	d007      	beq.n	800640e <I2C_ITError+0x4e>
 80063fe:	183b      	adds	r3, r7, r0
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b29      	cmp	r3, #41	; 0x29
 8006404:	d003      	beq.n	800640e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006406:	183b      	adds	r3, r7, r0
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b2a      	cmp	r3, #42	; 0x2a
 800640c:	d10c      	bne.n	8006428 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2103      	movs	r1, #3
 8006412:	0018      	movs	r0, r3
 8006414:	f000 fc18 	bl	8006c48 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2241      	movs	r2, #65	; 0x41
 800641c:	2128      	movs	r1, #40	; 0x28
 800641e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a53      	ldr	r2, [pc, #332]	; (8006570 <I2C_ITError+0x1b0>)
 8006424:	635a      	str	r2, [r3, #52]	; 0x34
 8006426:	e012      	b.n	800644e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006428:	4a52      	ldr	r2, [pc, #328]	; (8006574 <I2C_ITError+0x1b4>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	0011      	movs	r1, r2
 800642e:	0018      	movs	r0, r3
 8006430:	f000 fc0a 	bl	8006c48 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2241      	movs	r2, #65	; 0x41
 8006438:	5c9b      	ldrb	r3, [r3, r2]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b60      	cmp	r3, #96	; 0x60
 800643e:	d003      	beq.n	8006448 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2241      	movs	r2, #65	; 0x41
 8006444:	2120      	movs	r1, #32
 8006446:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006452:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	2b00      	cmp	r3, #0
 800645a:	d03b      	beq.n	80064d4 <I2C_ITError+0x114>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2b11      	cmp	r3, #17
 8006460:	d002      	beq.n	8006468 <I2C_ITError+0xa8>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b21      	cmp	r3, #33	; 0x21
 8006466:	d135      	bne.n	80064d4 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	2380      	movs	r3, #128	; 0x80
 8006470:	01db      	lsls	r3, r3, #7
 8006472:	401a      	ands	r2, r3
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	01db      	lsls	r3, r3, #7
 8006478:	429a      	cmp	r2, r3
 800647a:	d107      	bne.n	800648c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	493c      	ldr	r1, [pc, #240]	; (8006578 <I2C_ITError+0x1b8>)
 8006488:	400a      	ands	r2, r1
 800648a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	0018      	movs	r0, r3
 8006492:	f7fe f819 	bl	80044c8 <HAL_DMA_GetState>
 8006496:	0003      	movs	r3, r0
 8006498:	2b01      	cmp	r3, #1
 800649a:	d016      	beq.n	80064ca <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a0:	4a36      	ldr	r2, [pc, #216]	; (800657c <I2C_ITError+0x1bc>)
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2240      	movs	r2, #64	; 0x40
 80064a8:	2100      	movs	r1, #0
 80064aa:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7fd ff9f 	bl	80043f4 <HAL_DMA_Abort_IT>
 80064b6:	1e03      	subs	r3, r0, #0
 80064b8:	d051      	beq.n	800655e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c4:	0018      	movs	r0, r3
 80064c6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064c8:	e049      	b.n	800655e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	0018      	movs	r0, r3
 80064ce:	f000 f859 	bl	8006584 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80064d2:	e044      	b.n	800655e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d03b      	beq.n	8006554 <I2C_ITError+0x194>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b12      	cmp	r3, #18
 80064e0:	d002      	beq.n	80064e8 <I2C_ITError+0x128>
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b22      	cmp	r3, #34	; 0x22
 80064e6:	d135      	bne.n	8006554 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	2380      	movs	r3, #128	; 0x80
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	401a      	ands	r2, r3
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d107      	bne.n	800650c <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	491e      	ldr	r1, [pc, #120]	; (8006580 <I2C_ITError+0x1c0>)
 8006508:	400a      	ands	r2, r1
 800650a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006510:	0018      	movs	r0, r3
 8006512:	f7fd ffd9 	bl	80044c8 <HAL_DMA_GetState>
 8006516:	0003      	movs	r3, r0
 8006518:	2b01      	cmp	r3, #1
 800651a:	d016      	beq.n	800654a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006520:	4a16      	ldr	r2, [pc, #88]	; (800657c <I2C_ITError+0x1bc>)
 8006522:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2240      	movs	r2, #64	; 0x40
 8006528:	2100      	movs	r1, #0
 800652a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006530:	0018      	movs	r0, r3
 8006532:	f7fd ff5f 	bl	80043f4 <HAL_DMA_Abort_IT>
 8006536:	1e03      	subs	r3, r0, #0
 8006538:	d013      	beq.n	8006562 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	0018      	movs	r0, r3
 8006546:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006548:	e00b      	b.n	8006562 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0018      	movs	r0, r3
 800654e:	f000 f819 	bl	8006584 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006552:	e006      	b.n	8006562 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	0018      	movs	r0, r3
 8006558:	f000 f814 	bl	8006584 <I2C_TreatErrorCallback>
  }
}
 800655c:	e002      	b.n	8006564 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	e000      	b.n	8006564 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006562:	46c0      	nop			; (mov r8, r8)
}
 8006564:	46c0      	nop			; (mov r8, r8)
 8006566:	46bd      	mov	sp, r7
 8006568:	b004      	add	sp, #16
 800656a:	bd80      	pop	{r7, pc}
 800656c:	ffff0000 	.word	0xffff0000
 8006570:	0800565d 	.word	0x0800565d
 8006574:	00008003 	.word	0x00008003
 8006578:	ffffbfff 	.word	0xffffbfff
 800657c:	0800678f 	.word	0x0800678f
 8006580:	ffff7fff 	.word	0xffff7fff

08006584 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2241      	movs	r2, #65	; 0x41
 8006590:	5c9b      	ldrb	r3, [r3, r2]
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b60      	cmp	r3, #96	; 0x60
 8006596:	d10f      	bne.n	80065b8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2241      	movs	r2, #65	; 0x41
 800659c:	2120      	movs	r1, #32
 800659e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2240      	movs	r2, #64	; 0x40
 80065aa:	2100      	movs	r1, #0
 80065ac:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f7fe ff09 	bl	80053c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065b6:	e00a      	b.n	80065ce <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2240      	movs	r2, #64	; 0x40
 80065c2:	2100      	movs	r1, #0
 80065c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	0018      	movs	r0, r3
 80065ca:	f7fe fef5 	bl	80053b8 <HAL_I2C_ErrorCallback>
}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b002      	add	sp, #8
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	2202      	movs	r2, #2
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d103      	bne.n	80065f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2200      	movs	r2, #0
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	2201      	movs	r2, #1
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d007      	beq.n	8006612 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2101      	movs	r1, #1
 800660e:	430a      	orrs	r2, r1
 8006610:	619a      	str	r2, [r3, #24]
  }
}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	46bd      	mov	sp, r7
 8006616:	b002      	add	sp, #8
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4920      	ldr	r1, [pc, #128]	; (80066b8 <I2C_DMAMasterTransmitCplt+0x9c>)
 8006636:	400a      	ands	r2, r1
 8006638:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d105      	bne.n	8006650 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2120      	movs	r1, #32
 8006648:	0018      	movs	r0, r3
 800664a:	f000 fa95 	bl	8006b78 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800664e:	e02e      	b.n	80066ae <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006658:	189a      	adds	r2, r3, r2
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006662:	b29b      	uxth	r3, r3
 8006664:	2bff      	cmp	r3, #255	; 0xff
 8006666:	d903      	bls.n	8006670 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	22ff      	movs	r2, #255	; 0xff
 800666c:	851a      	strh	r2, [r3, #40]	; 0x28
 800666e:	e004      	b.n	800667a <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006674:	b29a      	uxth	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	0019      	movs	r1, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3328      	adds	r3, #40	; 0x28
 800668a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006690:	f7fd fe2a 	bl	80042e8 <HAL_DMA_Start_IT>
 8006694:	1e03      	subs	r3, r0, #0
 8006696:	d005      	beq.n	80066a4 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2110      	movs	r1, #16
 800669c:	0018      	movs	r0, r3
 800669e:	f7ff fe8f 	bl	80063c0 <I2C_ITError>
}
 80066a2:	e004      	b.n	80066ae <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2140      	movs	r1, #64	; 0x40
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 fa65 	bl	8006b78 <I2C_Enable_IRQ>
}
 80066ae:	46c0      	nop			; (mov r8, r8)
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b004      	add	sp, #16
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	46c0      	nop			; (mov r8, r8)
 80066b8:	ffffbfff 	.word	0xffffbfff

080066bc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4920      	ldr	r1, [pc, #128]	; (8006758 <I2C_DMAMasterReceiveCplt+0x9c>)
 80066d6:	400a      	ands	r2, r1
 80066d8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066de:	b29b      	uxth	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2120      	movs	r1, #32
 80066e8:	0018      	movs	r0, r3
 80066ea:	f000 fa45 	bl	8006b78 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80066ee:	e02e      	b.n	800674e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80066f8:	189a      	adds	r2, r3, r2
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	2bff      	cmp	r3, #255	; 0xff
 8006706:	d903      	bls.n	8006710 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	22ff      	movs	r2, #255	; 0xff
 800670c:	851a      	strh	r2, [r3, #40]	; 0x28
 800670e:	e004      	b.n	800671a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29a      	uxth	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3324      	adds	r3, #36	; 0x24
 8006724:	0019      	movs	r1, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006730:	f7fd fdda 	bl	80042e8 <HAL_DMA_Start_IT>
 8006734:	1e03      	subs	r3, r0, #0
 8006736:	d005      	beq.n	8006744 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2110      	movs	r1, #16
 800673c:	0018      	movs	r0, r3
 800673e:	f7ff fe3f 	bl	80063c0 <I2C_ITError>
}
 8006742:	e004      	b.n	800674e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2140      	movs	r1, #64	; 0x40
 8006748:	0018      	movs	r0, r3
 800674a:	f000 fa15 	bl	8006b78 <I2C_Enable_IRQ>
}
 800674e:	46c0      	nop			; (mov r8, r8)
 8006750:	46bd      	mov	sp, r7
 8006752:	b004      	add	sp, #16
 8006754:	bd80      	pop	{r7, pc}
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	ffff7fff 	.word	0xffff7fff

0800675c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2180      	movs	r1, #128	; 0x80
 8006776:	0209      	lsls	r1, r1, #8
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2110      	movs	r1, #16
 8006780:	0018      	movs	r0, r3
 8006782:	f7ff fe1d 	bl	80063c0 <I2C_ITError>
}
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	46bd      	mov	sp, r7
 800678a:	b004      	add	sp, #16
 800678c:	bd80      	pop	{r7, pc}

0800678e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a8:	2200      	movs	r2, #0
 80067aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d003      	beq.n	80067bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b8:	2200      	movs	r2, #0
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff fee0 	bl	8006584 <I2C_TreatErrorCallback>
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b004      	add	sp, #16
 80067ca:	bd80      	pop	{r7, pc}

080067cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	1dfb      	adds	r3, r7, #7
 80067da:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067dc:	e021      	b.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	3301      	adds	r3, #1
 80067e2:	d01e      	beq.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e4:	f7fc fd46 	bl	8003274 <HAL_GetTick>
 80067e8:	0002      	movs	r2, r0
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d302      	bcc.n	80067fa <I2C_WaitOnFlagUntilTimeout+0x2e>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d113      	bne.n	8006822 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	2220      	movs	r2, #32
 8006800:	431a      	orrs	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2241      	movs	r2, #65	; 0x41
 800680a:	2120      	movs	r1, #32
 800680c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2242      	movs	r2, #66	; 0x42
 8006812:	2100      	movs	r1, #0
 8006814:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2240      	movs	r2, #64	; 0x40
 800681a:	2100      	movs	r1, #0
 800681c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e00f      	b.n	8006842 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	4013      	ands	r3, r2
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	425a      	negs	r2, r3
 8006832:	4153      	adcs	r3, r2
 8006834:	b2db      	uxtb	r3, r3
 8006836:	001a      	movs	r2, r3
 8006838:	1dfb      	adds	r3, r7, #7
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d0ce      	beq.n	80067de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	0018      	movs	r0, r3
 8006844:	46bd      	mov	sp, r7
 8006846:	b004      	add	sp, #16
 8006848:	bd80      	pop	{r7, pc}

0800684a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b084      	sub	sp, #16
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006856:	e02b      	b.n	80068b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	0018      	movs	r0, r3
 8006860:	f000 f8da 	bl	8006a18 <I2C_IsAcknowledgeFailed>
 8006864:	1e03      	subs	r3, r0, #0
 8006866:	d001      	beq.n	800686c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e029      	b.n	80068c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3301      	adds	r3, #1
 8006870:	d01e      	beq.n	80068b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006872:	f7fc fcff 	bl	8003274 <HAL_GetTick>
 8006876:	0002      	movs	r2, r0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d302      	bcc.n	8006888 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d113      	bne.n	80068b0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	2220      	movs	r2, #32
 800688e:	431a      	orrs	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2241      	movs	r2, #65	; 0x41
 8006898:	2120      	movs	r1, #32
 800689a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2242      	movs	r2, #66	; 0x42
 80068a0:	2100      	movs	r1, #0
 80068a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	2100      	movs	r1, #0
 80068aa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e007      	b.n	80068c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2202      	movs	r2, #2
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d1cc      	bne.n	8006858 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b004      	add	sp, #16
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d4:	e028      	b.n	8006928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 f89b 	bl	8006a18 <I2C_IsAcknowledgeFailed>
 80068e2:	1e03      	subs	r3, r0, #0
 80068e4:	d001      	beq.n	80068ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e026      	b.n	8006938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ea:	f7fc fcc3 	bl	8003274 <HAL_GetTick>
 80068ee:	0002      	movs	r2, r0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d302      	bcc.n	8006900 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d113      	bne.n	8006928 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006904:	2220      	movs	r2, #32
 8006906:	431a      	orrs	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2241      	movs	r2, #65	; 0x41
 8006910:	2120      	movs	r1, #32
 8006912:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2242      	movs	r2, #66	; 0x42
 8006918:	2100      	movs	r1, #0
 800691a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2240      	movs	r2, #64	; 0x40
 8006920:	2100      	movs	r1, #0
 8006922:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e007      	b.n	8006938 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	2220      	movs	r2, #32
 8006930:	4013      	ands	r3, r2
 8006932:	2b20      	cmp	r3, #32
 8006934:	d1cf      	bne.n	80068d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	0018      	movs	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	b004      	add	sp, #16
 800693e:	bd80      	pop	{r7, pc}

08006940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800694c:	e055      	b.n	80069fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	0018      	movs	r0, r3
 8006956:	f000 f85f 	bl	8006a18 <I2C_IsAcknowledgeFailed>
 800695a:	1e03      	subs	r3, r0, #0
 800695c:	d001      	beq.n	8006962 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e053      	b.n	8006a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	2220      	movs	r2, #32
 800696a:	4013      	ands	r3, r2
 800696c:	2b20      	cmp	r3, #32
 800696e:	d129      	bne.n	80069c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2204      	movs	r2, #4
 8006978:	4013      	ands	r3, r2
 800697a:	2b04      	cmp	r3, #4
 800697c:	d105      	bne.n	800698a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	e03f      	b.n	8006a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2220      	movs	r2, #32
 8006990:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	491d      	ldr	r1, [pc, #116]	; (8006a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800699e:	400a      	ands	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2241      	movs	r2, #65	; 0x41
 80069ac:	2120      	movs	r1, #32
 80069ae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2242      	movs	r2, #66	; 0x42
 80069b4:	2100      	movs	r1, #0
 80069b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2240      	movs	r2, #64	; 0x40
 80069bc:	2100      	movs	r1, #0
 80069be:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e022      	b.n	8006a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c4:	f7fc fc56 	bl	8003274 <HAL_GetTick>
 80069c8:	0002      	movs	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d302      	bcc.n	80069da <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10f      	bne.n	80069fa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069de:	2220      	movs	r2, #32
 80069e0:	431a      	orrs	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2241      	movs	r2, #65	; 0x41
 80069ea:	2120      	movs	r1, #32
 80069ec:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2240      	movs	r2, #64	; 0x40
 80069f2:	2100      	movs	r1, #0
 80069f4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e007      	b.n	8006a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2204      	movs	r2, #4
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d1a2      	bne.n	800694e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b004      	add	sp, #16
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	fe00e800 	.word	0xfe00e800

08006a18 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	2210      	movs	r2, #16
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d164      	bne.n	8006afc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	2380      	movs	r3, #128	; 0x80
 8006a3a:	049b      	lsls	r3, r3, #18
 8006a3c:	401a      	ands	r2, r3
 8006a3e:	2380      	movs	r3, #128	; 0x80
 8006a40:	049b      	lsls	r3, r3, #18
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d02b      	beq.n	8006a9e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	01c9      	lsls	r1, r1, #7
 8006a54:	430a      	orrs	r2, r1
 8006a56:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a58:	e021      	b.n	8006a9e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	d01e      	beq.n	8006a9e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a60:	f7fc fc08 	bl	8003274 <HAL_GetTick>
 8006a64:	0002      	movs	r2, r0
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d302      	bcc.n	8006a76 <I2C_IsAcknowledgeFailed+0x5e>
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d113      	bne.n	8006a9e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	431a      	orrs	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2241      	movs	r2, #65	; 0x41
 8006a86:	2120      	movs	r1, #32
 8006a88:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2242      	movs	r2, #66	; 0x42
 8006a8e:	2100      	movs	r1, #0
 8006a90:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2240      	movs	r2, #64	; 0x40
 8006a96:	2100      	movs	r1, #0
 8006a98:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e02f      	b.n	8006afe <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d1d6      	bne.n	8006a5a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f7ff fd89 	bl	80065d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	490e      	ldr	r1, [pc, #56]	; (8006b08 <I2C_IsAcknowledgeFailed+0xf0>)
 8006ad0:	400a      	ands	r2, r1
 8006ad2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad8:	2204      	movs	r2, #4
 8006ada:	431a      	orrs	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2241      	movs	r2, #65	; 0x41
 8006ae4:	2120      	movs	r1, #32
 8006ae6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2242      	movs	r2, #66	; 0x42
 8006aec:	2100      	movs	r1, #0
 8006aee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2240      	movs	r2, #64	; 0x40
 8006af4:	2100      	movs	r1, #0
 8006af6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b004      	add	sp, #16
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	fe00e800 	.word	0xfe00e800

08006b0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b0c:	b590      	push	{r4, r7, lr}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	0008      	movs	r0, r1
 8006b16:	0011      	movs	r1, r2
 8006b18:	607b      	str	r3, [r7, #4]
 8006b1a:	240a      	movs	r4, #10
 8006b1c:	193b      	adds	r3, r7, r4
 8006b1e:	1c02      	adds	r2, r0, #0
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	2009      	movs	r0, #9
 8006b24:	183b      	adds	r3, r7, r0
 8006b26:	1c0a      	adds	r2, r1, #0
 8006b28:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	6a3a      	ldr	r2, [r7, #32]
 8006b32:	0d51      	lsrs	r1, r2, #21
 8006b34:	2280      	movs	r2, #128	; 0x80
 8006b36:	00d2      	lsls	r2, r2, #3
 8006b38:	400a      	ands	r2, r1
 8006b3a:	490e      	ldr	r1, [pc, #56]	; (8006b74 <I2C_TransferConfig+0x68>)
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	43d2      	mvns	r2, r2
 8006b40:	401a      	ands	r2, r3
 8006b42:	0011      	movs	r1, r2
 8006b44:	193b      	adds	r3, r7, r4
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	059b      	lsls	r3, r3, #22
 8006b4a:	0d9a      	lsrs	r2, r3, #22
 8006b4c:	183b      	adds	r3, r7, r0
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	0418      	lsls	r0, r3, #16
 8006b52:	23ff      	movs	r3, #255	; 0xff
 8006b54:	041b      	lsls	r3, r3, #16
 8006b56:	4003      	ands	r3, r0
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006b6a:	46c0      	nop			; (mov r8, r8)
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	b005      	add	sp, #20
 8006b70:	bd90      	pop	{r4, r7, pc}
 8006b72:	46c0      	nop			; (mov r8, r8)
 8006b74:	03ff63ff 	.word	0x03ff63ff

08006b78 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	000a      	movs	r2, r1
 8006b82:	1cbb      	adds	r3, r7, #2
 8006b84:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b8e:	4b2c      	ldr	r3, [pc, #176]	; (8006c40 <I2C_Enable_IRQ+0xc8>)
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d004      	beq.n	8006b9e <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006b98:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <I2C_Enable_IRQ+0xcc>)
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d121      	bne.n	8006be2 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b9e:	1cbb      	adds	r3, r7, #2
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	5e9b      	ldrsh	r3, [r3, r2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da03      	bge.n	8006bb0 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	22b8      	movs	r2, #184	; 0xb8
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006bb0:	1cbb      	adds	r3, r7, #2
 8006bb2:	881b      	ldrh	r3, [r3, #0]
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d103      	bne.n	8006bc0 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2290      	movs	r2, #144	; 0x90
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bc0:	1cbb      	adds	r3, r7, #2
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d103      	bne.n	8006bd0 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2260      	movs	r2, #96	; 0x60
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006bd0:	1cbb      	adds	r3, r7, #2
 8006bd2:	881b      	ldrh	r3, [r3, #0]
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d127      	bne.n	8006c28 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2240      	movs	r2, #64	; 0x40
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006be0:	e022      	b.n	8006c28 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006be2:	1cbb      	adds	r3, r7, #2
 8006be4:	2200      	movs	r2, #0
 8006be6:	5e9b      	ldrsh	r3, [r3, r2]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	da03      	bge.n	8006bf4 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	22b8      	movs	r2, #184	; 0xb8
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006bf4:	1cbb      	adds	r3, r7, #2
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d003      	beq.n	8006c06 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	22f2      	movs	r2, #242	; 0xf2
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c06:	1cbb      	adds	r3, r7, #2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d003      	beq.n	8006c18 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	22f4      	movs	r2, #244	; 0xf4
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c18:	1cbb      	adds	r3, r7, #2
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d103      	bne.n	8006c28 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	4313      	orrs	r3, r2
 8006c26:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	6819      	ldr	r1, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	430a      	orrs	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]
}
 8006c38:	46c0      	nop			; (mov r8, r8)
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b004      	add	sp, #16
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	08005885 	.word	0x08005885
 8006c44:	08005a9d 	.word	0x08005a9d

08006c48 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	000a      	movs	r2, r1
 8006c52:	1cbb      	adds	r3, r7, #2
 8006c54:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c5a:	1cbb      	adds	r3, r7, #2
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	4013      	ands	r3, r2
 8006c62:	d010      	beq.n	8006c86 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2242      	movs	r2, #66	; 0x42
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2241      	movs	r2, #65	; 0x41
 8006c70:	5c9b      	ldrb	r3, [r3, r2]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	001a      	movs	r2, r3
 8006c76:	2328      	movs	r3, #40	; 0x28
 8006c78:	4013      	ands	r3, r2
 8006c7a:	2b28      	cmp	r3, #40	; 0x28
 8006c7c:	d003      	beq.n	8006c86 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	22b0      	movs	r2, #176	; 0xb0
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c86:	1cbb      	adds	r3, r7, #2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d010      	beq.n	8006cb2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2244      	movs	r2, #68	; 0x44
 8006c94:	4313      	orrs	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2241      	movs	r2, #65	; 0x41
 8006c9c:	5c9b      	ldrb	r3, [r3, r2]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	001a      	movs	r2, r3
 8006ca2:	2328      	movs	r3, #40	; 0x28
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	2b28      	cmp	r3, #40	; 0x28
 8006ca8:	d003      	beq.n	8006cb2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	22b0      	movs	r2, #176	; 0xb0
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006cb2:	1cbb      	adds	r3, r7, #2
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	5e9b      	ldrsh	r3, [r3, r2]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	da03      	bge.n	8006cc4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	22b8      	movs	r2, #184	; 0xb8
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006cc4:	1cbb      	adds	r3, r7, #2
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d103      	bne.n	8006cd4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2290      	movs	r2, #144	; 0x90
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006cd4:	1cbb      	adds	r3, r7, #2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d103      	bne.n	8006ce4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006ce4:	1cbb      	adds	r3, r7, #2
 8006ce6:	881b      	ldrh	r3, [r3, #0]
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	d103      	bne.n	8006cf4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2240      	movs	r2, #64	; 0x40
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	43d9      	mvns	r1, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	400a      	ands	r2, r1
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b004      	add	sp, #16
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2241      	movs	r2, #65	; 0x41
 8006d1e:	5c9b      	ldrb	r3, [r3, r2]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b20      	cmp	r3, #32
 8006d24:	d138      	bne.n	8006d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2240      	movs	r2, #64	; 0x40
 8006d2a:	5c9b      	ldrb	r3, [r3, r2]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e032      	b.n	8006d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2240      	movs	r2, #64	; 0x40
 8006d38:	2101      	movs	r1, #1
 8006d3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2241      	movs	r2, #65	; 0x41
 8006d40:	2124      	movs	r1, #36	; 0x24
 8006d42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2101      	movs	r1, #1
 8006d50:	438a      	bics	r2, r1
 8006d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4911      	ldr	r1, [pc, #68]	; (8006da4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006d60:	400a      	ands	r2, r1
 8006d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6819      	ldr	r1, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2101      	movs	r1, #1
 8006d80:	430a      	orrs	r2, r1
 8006d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2241      	movs	r2, #65	; 0x41
 8006d88:	2120      	movs	r1, #32
 8006d8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2240      	movs	r2, #64	; 0x40
 8006d90:	2100      	movs	r1, #0
 8006d92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	e000      	b.n	8006d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
  }
}
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b002      	add	sp, #8
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	ffffefff 	.word	0xffffefff

08006da8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2241      	movs	r2, #65	; 0x41
 8006db6:	5c9b      	ldrb	r3, [r3, r2]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d139      	bne.n	8006e32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2240      	movs	r2, #64	; 0x40
 8006dc2:	5c9b      	ldrb	r3, [r3, r2]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e033      	b.n	8006e34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2240      	movs	r2, #64	; 0x40
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2241      	movs	r2, #65	; 0x41
 8006dd8:	2124      	movs	r1, #36	; 0x24
 8006dda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2101      	movs	r1, #1
 8006de8:	438a      	bics	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a11      	ldr	r2, [pc, #68]	; (8006e3c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	021b      	lsls	r3, r3, #8
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2101      	movs	r1, #1
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2241      	movs	r2, #65	; 0x41
 8006e22:	2120      	movs	r1, #32
 8006e24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2240      	movs	r2, #64	; 0x40
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e000      	b.n	8006e34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e32:	2302      	movs	r3, #2
  }
}
 8006e34:	0018      	movs	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b004      	add	sp, #16
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	fffff0ff 	.word	0xfffff0ff

08006e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006e48:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a19      	ldr	r2, [pc, #100]	; (8006eb4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	0019      	movs	r1, r3
 8006e52:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	2380      	movs	r3, #128	; 0x80
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d11f      	bne.n	8006ea4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	0013      	movs	r3, r2
 8006e6a:	005b      	lsls	r3, r3, #1
 8006e6c:	189b      	adds	r3, r3, r2
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	4912      	ldr	r1, [pc, #72]	; (8006ebc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7f9 f94c 	bl	8000110 <__udivsi3>
 8006e78:	0003      	movs	r3, r0
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e7e:	e008      	b.n	8006e92 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e001      	b.n	8006e92 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e009      	b.n	8006ea6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006e92:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	2380      	movs	r3, #128	; 0x80
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	401a      	ands	r2, r3
 8006e9c:	2380      	movs	r3, #128	; 0x80
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d0ed      	beq.n	8006e80 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b004      	add	sp, #16
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	40007000 	.word	0x40007000
 8006eb4:	fffff9ff 	.word	0xfffff9ff
 8006eb8:	20000000 	.word	0x20000000
 8006ebc:	000f4240 	.word	0x000f4240

08006ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b088      	sub	sp, #32
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e2f9      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4013      	ands	r3, r2
 8006eda:	d100      	bne.n	8006ede <HAL_RCC_OscConfig+0x1e>
 8006edc:	e07c      	b.n	8006fd8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ede:	4bc3      	ldr	r3, [pc, #780]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	2238      	movs	r2, #56	; 0x38
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ee8:	4bc0      	ldr	r3, [pc, #768]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	2203      	movs	r2, #3
 8006eee:	4013      	ands	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d102      	bne.n	8006efe <HAL_RCC_OscConfig+0x3e>
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d002      	beq.n	8006f04 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d10b      	bne.n	8006f1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f04:	4bb9      	ldr	r3, [pc, #740]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d062      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x116>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d15e      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e2d4      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	025b      	lsls	r3, r3, #9
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d107      	bne.n	8006f38 <HAL_RCC_OscConfig+0x78>
 8006f28:	4bb0      	ldr	r3, [pc, #704]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	4baf      	ldr	r3, [pc, #700]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f2e:	2180      	movs	r1, #128	; 0x80
 8006f30:	0249      	lsls	r1, r1, #9
 8006f32:	430a      	orrs	r2, r1
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e020      	b.n	8006f7a <HAL_RCC_OscConfig+0xba>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	23a0      	movs	r3, #160	; 0xa0
 8006f3e:	02db      	lsls	r3, r3, #11
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d10e      	bne.n	8006f62 <HAL_RCC_OscConfig+0xa2>
 8006f44:	4ba9      	ldr	r3, [pc, #676]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	4ba8      	ldr	r3, [pc, #672]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	02c9      	lsls	r1, r1, #11
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	601a      	str	r2, [r3, #0]
 8006f52:	4ba6      	ldr	r3, [pc, #664]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4ba5      	ldr	r3, [pc, #660]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f58:	2180      	movs	r1, #128	; 0x80
 8006f5a:	0249      	lsls	r1, r1, #9
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e00b      	b.n	8006f7a <HAL_RCC_OscConfig+0xba>
 8006f62:	4ba2      	ldr	r3, [pc, #648]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4ba1      	ldr	r3, [pc, #644]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f68:	49a1      	ldr	r1, [pc, #644]	; (80071f0 <HAL_RCC_OscConfig+0x330>)
 8006f6a:	400a      	ands	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	4b9f      	ldr	r3, [pc, #636]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	4b9e      	ldr	r3, [pc, #632]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006f74:	499f      	ldr	r1, [pc, #636]	; (80071f4 <HAL_RCC_OscConfig+0x334>)
 8006f76:	400a      	ands	r2, r1
 8006f78:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d014      	beq.n	8006fac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f82:	f7fc f977 	bl	8003274 <HAL_GetTick>
 8006f86:	0003      	movs	r3, r0
 8006f88:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f8c:	f7fc f972 	bl	8003274 <HAL_GetTick>
 8006f90:	0002      	movs	r2, r0
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b64      	cmp	r3, #100	; 0x64
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e293      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f9e:	4b93      	ldr	r3, [pc, #588]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	2380      	movs	r3, #128	; 0x80
 8006fa4:	029b      	lsls	r3, r3, #10
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	d0f0      	beq.n	8006f8c <HAL_RCC_OscConfig+0xcc>
 8006faa:	e015      	b.n	8006fd8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fac:	f7fc f962 	bl	8003274 <HAL_GetTick>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb6:	f7fc f95d 	bl	8003274 <HAL_GetTick>
 8006fba:	0002      	movs	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b64      	cmp	r3, #100	; 0x64
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e27e      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fc8:	4b88      	ldr	r3, [pc, #544]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	2380      	movs	r3, #128	; 0x80
 8006fce:	029b      	lsls	r3, r3, #10
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d1f0      	bne.n	8006fb6 <HAL_RCC_OscConfig+0xf6>
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d100      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x124>
 8006fe2:	e099      	b.n	8007118 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fe4:	4b81      	ldr	r3, [pc, #516]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	2238      	movs	r2, #56	; 0x38
 8006fea:	4013      	ands	r3, r2
 8006fec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fee:	4b7f      	ldr	r3, [pc, #508]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d102      	bne.n	8007004 <HAL_RCC_OscConfig+0x144>
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d002      	beq.n	800700a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d135      	bne.n	8007076 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800700a:	4b78      	ldr	r3, [pc, #480]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4013      	ands	r3, r2
 8007014:	d005      	beq.n	8007022 <HAL_RCC_OscConfig+0x162>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e251      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007022:	4b72      	ldr	r3, [pc, #456]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	4a74      	ldr	r2, [pc, #464]	; (80071f8 <HAL_RCC_OscConfig+0x338>)
 8007028:	4013      	ands	r3, r2
 800702a:	0019      	movs	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	021a      	lsls	r2, r3, #8
 8007032:	4b6e      	ldr	r3, [pc, #440]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d112      	bne.n	8007064 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800703e:	4b6b      	ldr	r3, [pc, #428]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a6e      	ldr	r2, [pc, #440]	; (80071fc <HAL_RCC_OscConfig+0x33c>)
 8007044:	4013      	ands	r3, r2
 8007046:	0019      	movs	r1, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	4b67      	ldr	r3, [pc, #412]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 800704e:	430a      	orrs	r2, r1
 8007050:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007052:	4b66      	ldr	r3, [pc, #408]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	0adb      	lsrs	r3, r3, #11
 8007058:	2207      	movs	r2, #7
 800705a:	4013      	ands	r3, r2
 800705c:	4a68      	ldr	r2, [pc, #416]	; (8007200 <HAL_RCC_OscConfig+0x340>)
 800705e:	40da      	lsrs	r2, r3
 8007060:	4b68      	ldr	r3, [pc, #416]	; (8007204 <HAL_RCC_OscConfig+0x344>)
 8007062:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007064:	4b68      	ldr	r3, [pc, #416]	; (8007208 <HAL_RCC_OscConfig+0x348>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	0018      	movs	r0, r3
 800706a:	f7fc f8a7 	bl	80031bc <HAL_InitTick>
 800706e:	1e03      	subs	r3, r0, #0
 8007070:	d051      	beq.n	8007116 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e227      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d030      	beq.n	80070e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800707e:	4b5b      	ldr	r3, [pc, #364]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a5e      	ldr	r2, [pc, #376]	; (80071fc <HAL_RCC_OscConfig+0x33c>)
 8007084:	4013      	ands	r3, r2
 8007086:	0019      	movs	r1, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	4b57      	ldr	r3, [pc, #348]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 800708e:	430a      	orrs	r2, r1
 8007090:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007092:	4b56      	ldr	r3, [pc, #344]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	4b55      	ldr	r3, [pc, #340]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	0049      	lsls	r1, r1, #1
 800709c:	430a      	orrs	r2, r1
 800709e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fc f8e8 	bl	8003274 <HAL_GetTick>
 80070a4:	0003      	movs	r3, r0
 80070a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070a8:	e008      	b.n	80070bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070aa:	f7fc f8e3 	bl	8003274 <HAL_GetTick>
 80070ae:	0002      	movs	r2, r0
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d901      	bls.n	80070bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e204      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070bc:	4b4b      	ldr	r3, [pc, #300]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	4013      	ands	r3, r2
 80070c6:	d0f0      	beq.n	80070aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c8:	4b48      	ldr	r3, [pc, #288]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	4a4a      	ldr	r2, [pc, #296]	; (80071f8 <HAL_RCC_OscConfig+0x338>)
 80070ce:	4013      	ands	r3, r2
 80070d0:	0019      	movs	r1, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	021a      	lsls	r2, r3, #8
 80070d8:	4b44      	ldr	r3, [pc, #272]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 80070da:	430a      	orrs	r2, r1
 80070dc:	605a      	str	r2, [r3, #4]
 80070de:	e01b      	b.n	8007118 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80070e0:	4b42      	ldr	r3, [pc, #264]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	4b41      	ldr	r3, [pc, #260]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 80070e6:	4949      	ldr	r1, [pc, #292]	; (800720c <HAL_RCC_OscConfig+0x34c>)
 80070e8:	400a      	ands	r2, r1
 80070ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ec:	f7fc f8c2 	bl	8003274 <HAL_GetTick>
 80070f0:	0003      	movs	r3, r0
 80070f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80070f4:	e008      	b.n	8007108 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070f6:	f7fc f8bd 	bl	8003274 <HAL_GetTick>
 80070fa:	0002      	movs	r2, r0
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e1de      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007108:	4b38      	ldr	r3, [pc, #224]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	2380      	movs	r3, #128	; 0x80
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4013      	ands	r3, r2
 8007112:	d1f0      	bne.n	80070f6 <HAL_RCC_OscConfig+0x236>
 8007114:	e000      	b.n	8007118 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007116:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2208      	movs	r2, #8
 800711e:	4013      	ands	r3, r2
 8007120:	d047      	beq.n	80071b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007122:	4b32      	ldr	r3, [pc, #200]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2238      	movs	r2, #56	; 0x38
 8007128:	4013      	ands	r3, r2
 800712a:	2b18      	cmp	r3, #24
 800712c:	d10a      	bne.n	8007144 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800712e:	4b2f      	ldr	r3, [pc, #188]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007132:	2202      	movs	r2, #2
 8007134:	4013      	ands	r3, r2
 8007136:	d03c      	beq.n	80071b2 <HAL_RCC_OscConfig+0x2f2>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d138      	bne.n	80071b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e1c0      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d019      	beq.n	8007180 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800714c:	4b27      	ldr	r3, [pc, #156]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 800714e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007150:	4b26      	ldr	r3, [pc, #152]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007152:	2101      	movs	r1, #1
 8007154:	430a      	orrs	r2, r1
 8007156:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fc f88c 	bl	8003274 <HAL_GetTick>
 800715c:	0003      	movs	r3, r0
 800715e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007160:	e008      	b.n	8007174 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007162:	f7fc f887 	bl	8003274 <HAL_GetTick>
 8007166:	0002      	movs	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e1a8      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007174:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007178:	2202      	movs	r2, #2
 800717a:	4013      	ands	r3, r2
 800717c:	d0f1      	beq.n	8007162 <HAL_RCC_OscConfig+0x2a2>
 800717e:	e018      	b.n	80071b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8007180:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007182:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007184:	4b19      	ldr	r3, [pc, #100]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 8007186:	2101      	movs	r1, #1
 8007188:	438a      	bics	r2, r1
 800718a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fc f872 	bl	8003274 <HAL_GetTick>
 8007190:	0003      	movs	r3, r0
 8007192:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007196:	f7fc f86d 	bl	8003274 <HAL_GetTick>
 800719a:	0002      	movs	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e18e      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071a8:	4b10      	ldr	r3, [pc, #64]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 80071aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ac:	2202      	movs	r2, #2
 80071ae:	4013      	ands	r3, r2
 80071b0:	d1f1      	bne.n	8007196 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2204      	movs	r2, #4
 80071b8:	4013      	ands	r3, r2
 80071ba:	d100      	bne.n	80071be <HAL_RCC_OscConfig+0x2fe>
 80071bc:	e0c6      	b.n	800734c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071be:	231f      	movs	r3, #31
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2238      	movs	r2, #56	; 0x38
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b20      	cmp	r3, #32
 80071d0:	d11e      	bne.n	8007210 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <HAL_RCC_OscConfig+0x32c>)
 80071d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d6:	2202      	movs	r2, #2
 80071d8:	4013      	ands	r3, r2
 80071da:	d100      	bne.n	80071de <HAL_RCC_OscConfig+0x31e>
 80071dc:	e0b6      	b.n	800734c <HAL_RCC_OscConfig+0x48c>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d000      	beq.n	80071e8 <HAL_RCC_OscConfig+0x328>
 80071e6:	e0b1      	b.n	800734c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e16c      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
 80071ec:	40021000 	.word	0x40021000
 80071f0:	fffeffff 	.word	0xfffeffff
 80071f4:	fffbffff 	.word	0xfffbffff
 80071f8:	ffff80ff 	.word	0xffff80ff
 80071fc:	ffffc7ff 	.word	0xffffc7ff
 8007200:	00f42400 	.word	0x00f42400
 8007204:	20000000 	.word	0x20000000
 8007208:	20000004 	.word	0x20000004
 800720c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007210:	4baf      	ldr	r3, [pc, #700]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007214:	2380      	movs	r3, #128	; 0x80
 8007216:	055b      	lsls	r3, r3, #21
 8007218:	4013      	ands	r3, r2
 800721a:	d101      	bne.n	8007220 <HAL_RCC_OscConfig+0x360>
 800721c:	2301      	movs	r3, #1
 800721e:	e000      	b.n	8007222 <HAL_RCC_OscConfig+0x362>
 8007220:	2300      	movs	r3, #0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d011      	beq.n	800724a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007226:	4baa      	ldr	r3, [pc, #680]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800722a:	4ba9      	ldr	r3, [pc, #676]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	0549      	lsls	r1, r1, #21
 8007230:	430a      	orrs	r2, r1
 8007232:	63da      	str	r2, [r3, #60]	; 0x3c
 8007234:	4ba6      	ldr	r3, [pc, #664]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007238:	2380      	movs	r3, #128	; 0x80
 800723a:	055b      	lsls	r3, r3, #21
 800723c:	4013      	ands	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007242:	231f      	movs	r3, #31
 8007244:	18fb      	adds	r3, r7, r3
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800724a:	4ba2      	ldr	r3, [pc, #648]	; (80074d4 <HAL_RCC_OscConfig+0x614>)
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	2380      	movs	r3, #128	; 0x80
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	4013      	ands	r3, r2
 8007254:	d11a      	bne.n	800728c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007256:	4b9f      	ldr	r3, [pc, #636]	; (80074d4 <HAL_RCC_OscConfig+0x614>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b9e      	ldr	r3, [pc, #632]	; (80074d4 <HAL_RCC_OscConfig+0x614>)
 800725c:	2180      	movs	r1, #128	; 0x80
 800725e:	0049      	lsls	r1, r1, #1
 8007260:	430a      	orrs	r2, r1
 8007262:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8007264:	f7fc f806 	bl	8003274 <HAL_GetTick>
 8007268:	0003      	movs	r3, r0
 800726a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800726c:	e008      	b.n	8007280 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800726e:	f7fc f801 	bl	8003274 <HAL_GetTick>
 8007272:	0002      	movs	r2, r0
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e122      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007280:	4b94      	ldr	r3, [pc, #592]	; (80074d4 <HAL_RCC_OscConfig+0x614>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	2380      	movs	r3, #128	; 0x80
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	4013      	ands	r3, r2
 800728a:	d0f0      	beq.n	800726e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d106      	bne.n	80072a2 <HAL_RCC_OscConfig+0x3e2>
 8007294:	4b8e      	ldr	r3, [pc, #568]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007298:	4b8d      	ldr	r3, [pc, #564]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 800729a:	2101      	movs	r1, #1
 800729c:	430a      	orrs	r2, r1
 800729e:	65da      	str	r2, [r3, #92]	; 0x5c
 80072a0:	e01c      	b.n	80072dc <HAL_RCC_OscConfig+0x41c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d10c      	bne.n	80072c4 <HAL_RCC_OscConfig+0x404>
 80072aa:	4b89      	ldr	r3, [pc, #548]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80072ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072ae:	4b88      	ldr	r3, [pc, #544]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80072b0:	2104      	movs	r1, #4
 80072b2:	430a      	orrs	r2, r1
 80072b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80072b6:	4b86      	ldr	r3, [pc, #536]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80072b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072ba:	4b85      	ldr	r3, [pc, #532]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80072bc:	2101      	movs	r1, #1
 80072be:	430a      	orrs	r2, r1
 80072c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80072c2:	e00b      	b.n	80072dc <HAL_RCC_OscConfig+0x41c>
 80072c4:	4b82      	ldr	r3, [pc, #520]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80072c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072c8:	4b81      	ldr	r3, [pc, #516]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80072ca:	2101      	movs	r1, #1
 80072cc:	438a      	bics	r2, r1
 80072ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80072d0:	4b7f      	ldr	r3, [pc, #508]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80072d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072d4:	4b7e      	ldr	r3, [pc, #504]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80072d6:	2104      	movs	r1, #4
 80072d8:	438a      	bics	r2, r1
 80072da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d014      	beq.n	800730e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e4:	f7fb ffc6 	bl	8003274 <HAL_GetTick>
 80072e8:	0003      	movs	r3, r0
 80072ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072ec:	e009      	b.n	8007302 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ee:	f7fb ffc1 	bl	8003274 <HAL_GetTick>
 80072f2:	0002      	movs	r2, r0
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	1ad3      	subs	r3, r2, r3
 80072f8:	4a77      	ldr	r2, [pc, #476]	; (80074d8 <HAL_RCC_OscConfig+0x618>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e0e1      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007302:	4b73      	ldr	r3, [pc, #460]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007306:	2202      	movs	r2, #2
 8007308:	4013      	ands	r3, r2
 800730a:	d0f0      	beq.n	80072ee <HAL_RCC_OscConfig+0x42e>
 800730c:	e013      	b.n	8007336 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800730e:	f7fb ffb1 	bl	8003274 <HAL_GetTick>
 8007312:	0003      	movs	r3, r0
 8007314:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007316:	e009      	b.n	800732c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007318:	f7fb ffac 	bl	8003274 <HAL_GetTick>
 800731c:	0002      	movs	r2, r0
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	4a6d      	ldr	r2, [pc, #436]	; (80074d8 <HAL_RCC_OscConfig+0x618>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d901      	bls.n	800732c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e0cc      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800732c:	4b68      	ldr	r3, [pc, #416]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 800732e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007330:	2202      	movs	r2, #2
 8007332:	4013      	ands	r3, r2
 8007334:	d1f0      	bne.n	8007318 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007336:	231f      	movs	r3, #31
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d105      	bne.n	800734c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007340:	4b63      	ldr	r3, [pc, #396]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007344:	4b62      	ldr	r3, [pc, #392]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007346:	4965      	ldr	r1, [pc, #404]	; (80074dc <HAL_RCC_OscConfig+0x61c>)
 8007348:	400a      	ands	r2, r1
 800734a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d100      	bne.n	8007356 <HAL_RCC_OscConfig+0x496>
 8007354:	e0b6      	b.n	80074c4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007356:	4b5e      	ldr	r3, [pc, #376]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2238      	movs	r2, #56	; 0x38
 800735c:	4013      	ands	r3, r2
 800735e:	2b10      	cmp	r3, #16
 8007360:	d100      	bne.n	8007364 <HAL_RCC_OscConfig+0x4a4>
 8007362:	e07e      	b.n	8007462 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d153      	bne.n	8007414 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800736c:	4b58      	ldr	r3, [pc, #352]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b57      	ldr	r3, [pc, #348]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007372:	495b      	ldr	r1, [pc, #364]	; (80074e0 <HAL_RCC_OscConfig+0x620>)
 8007374:	400a      	ands	r2, r1
 8007376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007378:	f7fb ff7c 	bl	8003274 <HAL_GetTick>
 800737c:	0003      	movs	r3, r0
 800737e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007380:	e008      	b.n	8007394 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007382:	f7fb ff77 	bl	8003274 <HAL_GetTick>
 8007386:	0002      	movs	r2, r0
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	d901      	bls.n	8007394 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e098      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007394:	4b4e      	ldr	r3, [pc, #312]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	049b      	lsls	r3, r3, #18
 800739c:	4013      	ands	r3, r2
 800739e:	d1f0      	bne.n	8007382 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073a0:	4b4b      	ldr	r3, [pc, #300]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4a4f      	ldr	r2, [pc, #316]	; (80074e4 <HAL_RCC_OscConfig+0x624>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	0019      	movs	r1, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1a      	ldr	r2, [r3, #32]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	431a      	orrs	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	431a      	orrs	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	431a      	orrs	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	431a      	orrs	r2, r3
 80073c8:	4b41      	ldr	r3, [pc, #260]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80073ca:	430a      	orrs	r2, r1
 80073cc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073ce:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b3f      	ldr	r3, [pc, #252]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80073d4:	2180      	movs	r1, #128	; 0x80
 80073d6:	0449      	lsls	r1, r1, #17
 80073d8:	430a      	orrs	r2, r1
 80073da:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80073dc:	4b3c      	ldr	r3, [pc, #240]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	4b3b      	ldr	r3, [pc, #236]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 80073e2:	2180      	movs	r1, #128	; 0x80
 80073e4:	0549      	lsls	r1, r1, #21
 80073e6:	430a      	orrs	r2, r1
 80073e8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ea:	f7fb ff43 	bl	8003274 <HAL_GetTick>
 80073ee:	0003      	movs	r3, r0
 80073f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073f4:	f7fb ff3e 	bl	8003274 <HAL_GetTick>
 80073f8:	0002      	movs	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e05f      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007406:	4b32      	ldr	r3, [pc, #200]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	2380      	movs	r3, #128	; 0x80
 800740c:	049b      	lsls	r3, r3, #18
 800740e:	4013      	ands	r3, r2
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCC_OscConfig+0x534>
 8007412:	e057      	b.n	80074c4 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007414:	4b2e      	ldr	r3, [pc, #184]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	4b2d      	ldr	r3, [pc, #180]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 800741a:	4931      	ldr	r1, [pc, #196]	; (80074e0 <HAL_RCC_OscConfig+0x620>)
 800741c:	400a      	ands	r2, r1
 800741e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007420:	4b2b      	ldr	r3, [pc, #172]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007426:	2103      	movs	r1, #3
 8007428:	438a      	bics	r2, r1
 800742a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800742c:	4b28      	ldr	r3, [pc, #160]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	4b27      	ldr	r3, [pc, #156]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007432:	492d      	ldr	r1, [pc, #180]	; (80074e8 <HAL_RCC_OscConfig+0x628>)
 8007434:	400a      	ands	r2, r1
 8007436:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007438:	f7fb ff1c 	bl	8003274 <HAL_GetTick>
 800743c:	0003      	movs	r3, r0
 800743e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007440:	e008      	b.n	8007454 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007442:	f7fb ff17 	bl	8003274 <HAL_GetTick>
 8007446:	0002      	movs	r2, r0
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d901      	bls.n	8007454 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e038      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007454:	4b1e      	ldr	r3, [pc, #120]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	2380      	movs	r3, #128	; 0x80
 800745a:	049b      	lsls	r3, r3, #18
 800745c:	4013      	ands	r3, r2
 800745e:	d1f0      	bne.n	8007442 <HAL_RCC_OscConfig+0x582>
 8007460:	e030      	b.n	80074c4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	e02b      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800746e:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <HAL_RCC_OscConfig+0x610>)
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2203      	movs	r2, #3
 8007478:	401a      	ands	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	429a      	cmp	r2, r3
 8007480:	d11e      	bne.n	80074c0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2270      	movs	r2, #112	; 0x70
 8007486:	401a      	ands	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800748c:	429a      	cmp	r2, r3
 800748e:	d117      	bne.n	80074c0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	23fe      	movs	r3, #254	; 0xfe
 8007494:	01db      	lsls	r3, r3, #7
 8007496:	401a      	ands	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800749e:	429a      	cmp	r2, r3
 80074a0:	d10e      	bne.n	80074c0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	23f8      	movs	r3, #248	; 0xf8
 80074a6:	039b      	lsls	r3, r3, #14
 80074a8:	401a      	ands	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d106      	bne.n	80074c0 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	0f5b      	lsrs	r3, r3, #29
 80074b6:	075a      	lsls	r2, r3, #29
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074bc:	429a      	cmp	r2, r3
 80074be:	d001      	beq.n	80074c4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	0018      	movs	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	b008      	add	sp, #32
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	40021000 	.word	0x40021000
 80074d4:	40007000 	.word	0x40007000
 80074d8:	00001388 	.word	0x00001388
 80074dc:	efffffff 	.word	0xefffffff
 80074e0:	feffffff 	.word	0xfeffffff
 80074e4:	1fc1808c 	.word	0x1fc1808c
 80074e8:	effeffff 	.word	0xeffeffff

080074ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e0e9      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007500:	4b76      	ldr	r3, [pc, #472]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2207      	movs	r2, #7
 8007506:	4013      	ands	r3, r2
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d91e      	bls.n	800754c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800750e:	4b73      	ldr	r3, [pc, #460]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2207      	movs	r2, #7
 8007514:	4393      	bics	r3, r2
 8007516:	0019      	movs	r1, r3
 8007518:	4b70      	ldr	r3, [pc, #448]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007520:	f7fb fea8 	bl	8003274 <HAL_GetTick>
 8007524:	0003      	movs	r3, r0
 8007526:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007528:	e009      	b.n	800753e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800752a:	f7fb fea3 	bl	8003274 <HAL_GetTick>
 800752e:	0002      	movs	r2, r0
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	4a6a      	ldr	r2, [pc, #424]	; (80076e0 <HAL_RCC_ClockConfig+0x1f4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d901      	bls.n	800753e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e0ca      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800753e:	4b67      	ldr	r3, [pc, #412]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2207      	movs	r2, #7
 8007544:	4013      	ands	r3, r2
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d1ee      	bne.n	800752a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2202      	movs	r2, #2
 8007552:	4013      	ands	r3, r2
 8007554:	d015      	beq.n	8007582 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2204      	movs	r2, #4
 800755c:	4013      	ands	r3, r2
 800755e:	d006      	beq.n	800756e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007560:	4b60      	ldr	r3, [pc, #384]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	4b5f      	ldr	r3, [pc, #380]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 8007566:	21e0      	movs	r1, #224	; 0xe0
 8007568:	01c9      	lsls	r1, r1, #7
 800756a:	430a      	orrs	r2, r1
 800756c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800756e:	4b5d      	ldr	r3, [pc, #372]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	4a5d      	ldr	r2, [pc, #372]	; (80076e8 <HAL_RCC_ClockConfig+0x1fc>)
 8007574:	4013      	ands	r3, r2
 8007576:	0019      	movs	r1, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689a      	ldr	r2, [r3, #8]
 800757c:	4b59      	ldr	r3, [pc, #356]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 800757e:	430a      	orrs	r2, r1
 8007580:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2201      	movs	r2, #1
 8007588:	4013      	ands	r3, r2
 800758a:	d057      	beq.n	800763c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007594:	4b53      	ldr	r3, [pc, #332]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	2380      	movs	r3, #128	; 0x80
 800759a:	029b      	lsls	r3, r3, #10
 800759c:	4013      	ands	r3, r2
 800759e:	d12b      	bne.n	80075f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e097      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d107      	bne.n	80075bc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ac:	4b4d      	ldr	r3, [pc, #308]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	2380      	movs	r3, #128	; 0x80
 80075b2:	049b      	lsls	r3, r3, #18
 80075b4:	4013      	ands	r3, r2
 80075b6:	d11f      	bne.n	80075f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e08b      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d107      	bne.n	80075d4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075c4:	4b47      	ldr	r3, [pc, #284]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	2380      	movs	r3, #128	; 0x80
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	4013      	ands	r3, r2
 80075ce:	d113      	bne.n	80075f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e07f      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	2b03      	cmp	r3, #3
 80075da:	d106      	bne.n	80075ea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075dc:	4b41      	ldr	r3, [pc, #260]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 80075de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e0:	2202      	movs	r2, #2
 80075e2:	4013      	ands	r3, r2
 80075e4:	d108      	bne.n	80075f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e074      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ea:	4b3e      	ldr	r3, [pc, #248]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 80075ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ee:	2202      	movs	r2, #2
 80075f0:	4013      	ands	r3, r2
 80075f2:	d101      	bne.n	80075f8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e06d      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075f8:	4b3a      	ldr	r3, [pc, #232]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2207      	movs	r2, #7
 80075fe:	4393      	bics	r3, r2
 8007600:	0019      	movs	r1, r3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	4b37      	ldr	r3, [pc, #220]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 8007608:	430a      	orrs	r2, r1
 800760a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800760c:	f7fb fe32 	bl	8003274 <HAL_GetTick>
 8007610:	0003      	movs	r3, r0
 8007612:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007614:	e009      	b.n	800762a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007616:	f7fb fe2d 	bl	8003274 <HAL_GetTick>
 800761a:	0002      	movs	r2, r0
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	4a2f      	ldr	r2, [pc, #188]	; (80076e0 <HAL_RCC_ClockConfig+0x1f4>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e054      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800762a:	4b2e      	ldr	r3, [pc, #184]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2238      	movs	r2, #56	; 0x38
 8007630:	401a      	ands	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	429a      	cmp	r2, r3
 800763a:	d1ec      	bne.n	8007616 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800763c:	4b27      	ldr	r3, [pc, #156]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2207      	movs	r2, #7
 8007642:	4013      	ands	r3, r2
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d21e      	bcs.n	8007688 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800764a:	4b24      	ldr	r3, [pc, #144]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2207      	movs	r2, #7
 8007650:	4393      	bics	r3, r2
 8007652:	0019      	movs	r1, r3
 8007654:	4b21      	ldr	r3, [pc, #132]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800765c:	f7fb fe0a 	bl	8003274 <HAL_GetTick>
 8007660:	0003      	movs	r3, r0
 8007662:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007664:	e009      	b.n	800767a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007666:	f7fb fe05 	bl	8003274 <HAL_GetTick>
 800766a:	0002      	movs	r2, r0
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	4a1b      	ldr	r2, [pc, #108]	; (80076e0 <HAL_RCC_ClockConfig+0x1f4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e02c      	b.n	80076d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800767a:	4b18      	ldr	r3, [pc, #96]	; (80076dc <HAL_RCC_ClockConfig+0x1f0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2207      	movs	r2, #7
 8007680:	4013      	ands	r3, r2
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d1ee      	bne.n	8007666 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2204      	movs	r2, #4
 800768e:	4013      	ands	r3, r2
 8007690:	d009      	beq.n	80076a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007692:	4b14      	ldr	r3, [pc, #80]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	4a15      	ldr	r2, [pc, #84]	; (80076ec <HAL_RCC_ClockConfig+0x200>)
 8007698:	4013      	ands	r3, r2
 800769a:	0019      	movs	r1, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	4b10      	ldr	r3, [pc, #64]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 80076a2:	430a      	orrs	r2, r1
 80076a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80076a6:	f000 f829 	bl	80076fc <HAL_RCC_GetSysClockFreq>
 80076aa:	0001      	movs	r1, r0
 80076ac:	4b0d      	ldr	r3, [pc, #52]	; (80076e4 <HAL_RCC_ClockConfig+0x1f8>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	0a1b      	lsrs	r3, r3, #8
 80076b2:	220f      	movs	r2, #15
 80076b4:	401a      	ands	r2, r3
 80076b6:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <HAL_RCC_ClockConfig+0x204>)
 80076b8:	0092      	lsls	r2, r2, #2
 80076ba:	58d3      	ldr	r3, [r2, r3]
 80076bc:	221f      	movs	r2, #31
 80076be:	4013      	ands	r3, r2
 80076c0:	000a      	movs	r2, r1
 80076c2:	40da      	lsrs	r2, r3
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <HAL_RCC_ClockConfig+0x208>)
 80076c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80076c8:	4b0b      	ldr	r3, [pc, #44]	; (80076f8 <HAL_RCC_ClockConfig+0x20c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	0018      	movs	r0, r3
 80076ce:	f7fb fd75 	bl	80031bc <HAL_InitTick>
 80076d2:	0003      	movs	r3, r0
}
 80076d4:	0018      	movs	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b004      	add	sp, #16
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40022000 	.word	0x40022000
 80076e0:	00001388 	.word	0x00001388
 80076e4:	40021000 	.word	0x40021000
 80076e8:	fffff0ff 	.word	0xfffff0ff
 80076ec:	ffff8fff 	.word	0xffff8fff
 80076f0:	080084b0 	.word	0x080084b0
 80076f4:	20000000 	.word	0x20000000
 80076f8:	20000004 	.word	0x20000004

080076fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007702:	4b3c      	ldr	r3, [pc, #240]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	2238      	movs	r2, #56	; 0x38
 8007708:	4013      	ands	r3, r2
 800770a:	d10f      	bne.n	800772c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800770c:	4b39      	ldr	r3, [pc, #228]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	0adb      	lsrs	r3, r3, #11
 8007712:	2207      	movs	r2, #7
 8007714:	4013      	ands	r3, r2
 8007716:	2201      	movs	r2, #1
 8007718:	409a      	lsls	r2, r3
 800771a:	0013      	movs	r3, r2
 800771c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	4835      	ldr	r0, [pc, #212]	; (80077f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007722:	f7f8 fcf5 	bl	8000110 <__udivsi3>
 8007726:	0003      	movs	r3, r0
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	e05d      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800772c:	4b31      	ldr	r3, [pc, #196]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2238      	movs	r2, #56	; 0x38
 8007732:	4013      	ands	r3, r2
 8007734:	2b08      	cmp	r3, #8
 8007736:	d102      	bne.n	800773e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007738:	4b30      	ldr	r3, [pc, #192]	; (80077fc <HAL_RCC_GetSysClockFreq+0x100>)
 800773a:	613b      	str	r3, [r7, #16]
 800773c:	e054      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800773e:	4b2d      	ldr	r3, [pc, #180]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2238      	movs	r2, #56	; 0x38
 8007744:	4013      	ands	r3, r2
 8007746:	2b10      	cmp	r3, #16
 8007748:	d138      	bne.n	80077bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800774a:	4b2a      	ldr	r3, [pc, #168]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	2203      	movs	r2, #3
 8007750:	4013      	ands	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007754:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	091b      	lsrs	r3, r3, #4
 800775a:	2207      	movs	r2, #7
 800775c:	4013      	ands	r3, r2
 800775e:	3301      	adds	r3, #1
 8007760:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b03      	cmp	r3, #3
 8007766:	d10d      	bne.n	8007784 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007768:	68b9      	ldr	r1, [r7, #8]
 800776a:	4824      	ldr	r0, [pc, #144]	; (80077fc <HAL_RCC_GetSysClockFreq+0x100>)
 800776c:	f7f8 fcd0 	bl	8000110 <__udivsi3>
 8007770:	0003      	movs	r3, r0
 8007772:	0019      	movs	r1, r3
 8007774:	4b1f      	ldr	r3, [pc, #124]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	227f      	movs	r2, #127	; 0x7f
 800777c:	4013      	ands	r3, r2
 800777e:	434b      	muls	r3, r1
 8007780:	617b      	str	r3, [r7, #20]
        break;
 8007782:	e00d      	b.n	80077a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	481c      	ldr	r0, [pc, #112]	; (80077f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007788:	f7f8 fcc2 	bl	8000110 <__udivsi3>
 800778c:	0003      	movs	r3, r0
 800778e:	0019      	movs	r1, r3
 8007790:	4b18      	ldr	r3, [pc, #96]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	0a1b      	lsrs	r3, r3, #8
 8007796:	227f      	movs	r2, #127	; 0x7f
 8007798:	4013      	ands	r3, r2
 800779a:	434b      	muls	r3, r1
 800779c:	617b      	str	r3, [r7, #20]
        break;
 800779e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80077a0:	4b14      	ldr	r3, [pc, #80]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	0f5b      	lsrs	r3, r3, #29
 80077a6:	2207      	movs	r2, #7
 80077a8:	4013      	ands	r3, r2
 80077aa:	3301      	adds	r3, #1
 80077ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	6978      	ldr	r0, [r7, #20]
 80077b2:	f7f8 fcad 	bl	8000110 <__udivsi3>
 80077b6:	0003      	movs	r3, r0
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	e015      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	2238      	movs	r2, #56	; 0x38
 80077c2:	4013      	ands	r3, r2
 80077c4:	2b20      	cmp	r3, #32
 80077c6:	d103      	bne.n	80077d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	e00b      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80077d0:	4b08      	ldr	r3, [pc, #32]	; (80077f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	2238      	movs	r2, #56	; 0x38
 80077d6:	4013      	ands	r3, r2
 80077d8:	2b18      	cmp	r3, #24
 80077da:	d103      	bne.n	80077e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80077dc:	23fa      	movs	r3, #250	; 0xfa
 80077de:	01db      	lsls	r3, r3, #7
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	e001      	b.n	80077e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80077e8:	693b      	ldr	r3, [r7, #16]
}
 80077ea:	0018      	movs	r0, r3
 80077ec:	46bd      	mov	sp, r7
 80077ee:	b006      	add	sp, #24
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	46c0      	nop			; (mov r8, r8)
 80077f4:	40021000 	.word	0x40021000
 80077f8:	00f42400 	.word	0x00f42400
 80077fc:	007a1200 	.word	0x007a1200

08007800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007808:	2313      	movs	r3, #19
 800780a:	18fb      	adds	r3, r7, r3
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007810:	2312      	movs	r3, #18
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	2200      	movs	r2, #0
 8007816:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	2380      	movs	r3, #128	; 0x80
 800781e:	029b      	lsls	r3, r3, #10
 8007820:	4013      	ands	r3, r2
 8007822:	d100      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007824:	e0a3      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007826:	2011      	movs	r0, #17
 8007828:	183b      	adds	r3, r7, r0
 800782a:	2200      	movs	r2, #0
 800782c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800782e:	4b7f      	ldr	r3, [pc, #508]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007832:	2380      	movs	r3, #128	; 0x80
 8007834:	055b      	lsls	r3, r3, #21
 8007836:	4013      	ands	r3, r2
 8007838:	d110      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800783a:	4b7c      	ldr	r3, [pc, #496]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800783c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783e:	4b7b      	ldr	r3, [pc, #492]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007840:	2180      	movs	r1, #128	; 0x80
 8007842:	0549      	lsls	r1, r1, #21
 8007844:	430a      	orrs	r2, r1
 8007846:	63da      	str	r2, [r3, #60]	; 0x3c
 8007848:	4b78      	ldr	r3, [pc, #480]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800784a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800784c:	2380      	movs	r3, #128	; 0x80
 800784e:	055b      	lsls	r3, r3, #21
 8007850:	4013      	ands	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]
 8007854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007856:	183b      	adds	r3, r7, r0
 8007858:	2201      	movs	r2, #1
 800785a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800785c:	4b74      	ldr	r3, [pc, #464]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	4b73      	ldr	r3, [pc, #460]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007862:	2180      	movs	r1, #128	; 0x80
 8007864:	0049      	lsls	r1, r1, #1
 8007866:	430a      	orrs	r2, r1
 8007868:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800786a:	f7fb fd03 	bl	8003274 <HAL_GetTick>
 800786e:	0003      	movs	r3, r0
 8007870:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007872:	e00b      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007874:	f7fb fcfe 	bl	8003274 <HAL_GetTick>
 8007878:	0002      	movs	r2, r0
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d904      	bls.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007882:	2313      	movs	r3, #19
 8007884:	18fb      	adds	r3, r7, r3
 8007886:	2203      	movs	r2, #3
 8007888:	701a      	strb	r2, [r3, #0]
        break;
 800788a:	e005      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800788c:	4b68      	ldr	r3, [pc, #416]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	2380      	movs	r3, #128	; 0x80
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	4013      	ands	r3, r2
 8007896:	d0ed      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007898:	2313      	movs	r3, #19
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d154      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078a2:	4b62      	ldr	r3, [pc, #392]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078a6:	23c0      	movs	r3, #192	; 0xc0
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4013      	ands	r3, r2
 80078ac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d019      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d014      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80078be:	4b5b      	ldr	r3, [pc, #364]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c2:	4a5c      	ldr	r2, [pc, #368]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078c8:	4b58      	ldr	r3, [pc, #352]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078cc:	4b57      	ldr	r3, [pc, #348]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078ce:	2180      	movs	r1, #128	; 0x80
 80078d0:	0249      	lsls	r1, r1, #9
 80078d2:	430a      	orrs	r2, r1
 80078d4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078d6:	4b55      	ldr	r3, [pc, #340]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078da:	4b54      	ldr	r3, [pc, #336]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078dc:	4956      	ldr	r1, [pc, #344]	; (8007a38 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80078de:	400a      	ands	r2, r1
 80078e0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80078e2:	4b52      	ldr	r3, [pc, #328]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	2201      	movs	r2, #1
 80078ec:	4013      	ands	r3, r2
 80078ee:	d016      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f0:	f7fb fcc0 	bl	8003274 <HAL_GetTick>
 80078f4:	0003      	movs	r3, r0
 80078f6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078f8:	e00c      	b.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078fa:	f7fb fcbb 	bl	8003274 <HAL_GetTick>
 80078fe:	0002      	movs	r2, r0
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	4a4d      	ldr	r2, [pc, #308]	; (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d904      	bls.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800790a:	2313      	movs	r3, #19
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	2203      	movs	r2, #3
 8007910:	701a      	strb	r2, [r3, #0]
            break;
 8007912:	e004      	b.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007914:	4b45      	ldr	r3, [pc, #276]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007918:	2202      	movs	r2, #2
 800791a:	4013      	ands	r3, r2
 800791c:	d0ed      	beq.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800791e:	2313      	movs	r3, #19
 8007920:	18fb      	adds	r3, r7, r3
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007928:	4b40      	ldr	r3, [pc, #256]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800792a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792c:	4a41      	ldr	r2, [pc, #260]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800792e:	4013      	ands	r3, r2
 8007930:	0019      	movs	r1, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695a      	ldr	r2, [r3, #20]
 8007936:	4b3d      	ldr	r3, [pc, #244]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007938:	430a      	orrs	r2, r1
 800793a:	65da      	str	r2, [r3, #92]	; 0x5c
 800793c:	e00c      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800793e:	2312      	movs	r3, #18
 8007940:	18fb      	adds	r3, r7, r3
 8007942:	2213      	movs	r2, #19
 8007944:	18ba      	adds	r2, r7, r2
 8007946:	7812      	ldrb	r2, [r2, #0]
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e005      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794c:	2312      	movs	r3, #18
 800794e:	18fb      	adds	r3, r7, r3
 8007950:	2213      	movs	r2, #19
 8007952:	18ba      	adds	r2, r7, r2
 8007954:	7812      	ldrb	r2, [r2, #0]
 8007956:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007958:	2311      	movs	r3, #17
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d105      	bne.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007962:	4b32      	ldr	r3, [pc, #200]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007966:	4b31      	ldr	r3, [pc, #196]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007968:	4935      	ldr	r1, [pc, #212]	; (8007a40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800796a:	400a      	ands	r2, r1
 800796c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2201      	movs	r2, #1
 8007974:	4013      	ands	r3, r2
 8007976:	d009      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007978:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800797a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797c:	2203      	movs	r2, #3
 800797e:	4393      	bics	r3, r2
 8007980:	0019      	movs	r1, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	4b29      	ldr	r3, [pc, #164]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007988:	430a      	orrs	r2, r1
 800798a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2220      	movs	r2, #32
 8007992:	4013      	ands	r3, r2
 8007994:	d009      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007996:	4b25      	ldr	r3, [pc, #148]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800799a:	4a2a      	ldr	r2, [pc, #168]	; (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800799c:	4013      	ands	r3, r2
 800799e:	0019      	movs	r1, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	4b21      	ldr	r3, [pc, #132]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079a6:	430a      	orrs	r2, r1
 80079a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	2380      	movs	r3, #128	; 0x80
 80079b0:	01db      	lsls	r3, r3, #7
 80079b2:	4013      	ands	r3, r2
 80079b4:	d015      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079b6:	4b1d      	ldr	r3, [pc, #116]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	0899      	lsrs	r1, r3, #2
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079c4:	430a      	orrs	r2, r1
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	2380      	movs	r3, #128	; 0x80
 80079ce:	05db      	lsls	r3, r3, #23
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d106      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80079d4:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079da:	2180      	movs	r1, #128	; 0x80
 80079dc:	0249      	lsls	r1, r1, #9
 80079de:	430a      	orrs	r2, r1
 80079e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	2380      	movs	r3, #128	; 0x80
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	4013      	ands	r3, r2
 80079ec:	d016      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80079ee:	4b0f      	ldr	r3, [pc, #60]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	0019      	movs	r1, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80079fe:	430a      	orrs	r2, r1
 8007a00:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	2380      	movs	r3, #128	; 0x80
 8007a08:	01db      	lsls	r3, r3, #7
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007a0e:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007a14:	2180      	movs	r1, #128	; 0x80
 8007a16:	0249      	lsls	r1, r1, #9
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8007a1c:	2312      	movs	r3, #18
 8007a1e:	18fb      	adds	r3, r7, r3
 8007a20:	781b      	ldrb	r3, [r3, #0]
}
 8007a22:	0018      	movs	r0, r3
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b006      	add	sp, #24
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	46c0      	nop			; (mov r8, r8)
 8007a2c:	40021000 	.word	0x40021000
 8007a30:	40007000 	.word	0x40007000
 8007a34:	fffffcff 	.word	0xfffffcff
 8007a38:	fffeffff 	.word	0xfffeffff
 8007a3c:	00001388 	.word	0x00001388
 8007a40:	efffffff 	.word	0xefffffff
 8007a44:	ffffcfff 	.word	0xffffcfff
 8007a48:	ffff3fff 	.word	0xffff3fff

08007a4c <__errno>:
 8007a4c:	4b01      	ldr	r3, [pc, #4]	; (8007a54 <__errno+0x8>)
 8007a4e:	6818      	ldr	r0, [r3, #0]
 8007a50:	4770      	bx	lr
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	2000000c 	.word	0x2000000c

08007a58 <__libc_init_array>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	4d0c      	ldr	r5, [pc, #48]	; (8007a90 <__libc_init_array+0x38>)
 8007a5e:	4c0d      	ldr	r4, [pc, #52]	; (8007a94 <__libc_init_array+0x3c>)
 8007a60:	1b64      	subs	r4, r4, r5
 8007a62:	10a4      	asrs	r4, r4, #2
 8007a64:	42a6      	cmp	r6, r4
 8007a66:	d109      	bne.n	8007a7c <__libc_init_array+0x24>
 8007a68:	2600      	movs	r6, #0
 8007a6a:	f000 fc51 	bl	8008310 <_init>
 8007a6e:	4d0a      	ldr	r5, [pc, #40]	; (8007a98 <__libc_init_array+0x40>)
 8007a70:	4c0a      	ldr	r4, [pc, #40]	; (8007a9c <__libc_init_array+0x44>)
 8007a72:	1b64      	subs	r4, r4, r5
 8007a74:	10a4      	asrs	r4, r4, #2
 8007a76:	42a6      	cmp	r6, r4
 8007a78:	d105      	bne.n	8007a86 <__libc_init_array+0x2e>
 8007a7a:	bd70      	pop	{r4, r5, r6, pc}
 8007a7c:	00b3      	lsls	r3, r6, #2
 8007a7e:	58eb      	ldr	r3, [r5, r3]
 8007a80:	4798      	blx	r3
 8007a82:	3601      	adds	r6, #1
 8007a84:	e7ee      	b.n	8007a64 <__libc_init_array+0xc>
 8007a86:	00b3      	lsls	r3, r6, #2
 8007a88:	58eb      	ldr	r3, [r5, r3]
 8007a8a:	4798      	blx	r3
 8007a8c:	3601      	adds	r6, #1
 8007a8e:	e7f2      	b.n	8007a76 <__libc_init_array+0x1e>
 8007a90:	08008524 	.word	0x08008524
 8007a94:	08008524 	.word	0x08008524
 8007a98:	08008524 	.word	0x08008524
 8007a9c:	08008528 	.word	0x08008528

08007aa0 <malloc>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	4b03      	ldr	r3, [pc, #12]	; (8007ab0 <malloc+0x10>)
 8007aa4:	0001      	movs	r1, r0
 8007aa6:	6818      	ldr	r0, [r3, #0]
 8007aa8:	f000 f860 	bl	8007b6c <_malloc_r>
 8007aac:	bd10      	pop	{r4, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	2000000c 	.word	0x2000000c

08007ab4 <memcpy>:
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	b510      	push	{r4, lr}
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d100      	bne.n	8007abe <memcpy+0xa>
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	5ccc      	ldrb	r4, [r1, r3]
 8007ac0:	54c4      	strb	r4, [r0, r3]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	e7f8      	b.n	8007ab8 <memcpy+0x4>

08007ac6 <memset>:
 8007ac6:	0003      	movs	r3, r0
 8007ac8:	1882      	adds	r2, r0, r2
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d100      	bne.n	8007ad0 <memset+0xa>
 8007ace:	4770      	bx	lr
 8007ad0:	7019      	strb	r1, [r3, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	e7f9      	b.n	8007aca <memset+0x4>
	...

08007ad8 <_free_r>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	0005      	movs	r5, r0
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d010      	beq.n	8007b02 <_free_r+0x2a>
 8007ae0:	1f0c      	subs	r4, r1, #4
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	da00      	bge.n	8007aea <_free_r+0x12>
 8007ae8:	18e4      	adds	r4, r4, r3
 8007aea:	0028      	movs	r0, r5
 8007aec:	f000 f8ce 	bl	8007c8c <__malloc_lock>
 8007af0:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <_free_r+0x90>)
 8007af2:	6813      	ldr	r3, [r2, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d105      	bne.n	8007b04 <_free_r+0x2c>
 8007af8:	6063      	str	r3, [r4, #4]
 8007afa:	6014      	str	r4, [r2, #0]
 8007afc:	0028      	movs	r0, r5
 8007afe:	f000 f8cd 	bl	8007c9c <__malloc_unlock>
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	d908      	bls.n	8007b1a <_free_r+0x42>
 8007b08:	6821      	ldr	r1, [r4, #0]
 8007b0a:	1860      	adds	r0, r4, r1
 8007b0c:	4283      	cmp	r3, r0
 8007b0e:	d1f3      	bne.n	8007af8 <_free_r+0x20>
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	1841      	adds	r1, r0, r1
 8007b16:	6021      	str	r1, [r4, #0]
 8007b18:	e7ee      	b.n	8007af8 <_free_r+0x20>
 8007b1a:	001a      	movs	r2, r3
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <_free_r+0x4e>
 8007b22:	42a3      	cmp	r3, r4
 8007b24:	d9f9      	bls.n	8007b1a <_free_r+0x42>
 8007b26:	6811      	ldr	r1, [r2, #0]
 8007b28:	1850      	adds	r0, r2, r1
 8007b2a:	42a0      	cmp	r0, r4
 8007b2c:	d10b      	bne.n	8007b46 <_free_r+0x6e>
 8007b2e:	6820      	ldr	r0, [r4, #0]
 8007b30:	1809      	adds	r1, r1, r0
 8007b32:	1850      	adds	r0, r2, r1
 8007b34:	6011      	str	r1, [r2, #0]
 8007b36:	4283      	cmp	r3, r0
 8007b38:	d1e0      	bne.n	8007afc <_free_r+0x24>
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	1841      	adds	r1, r0, r1
 8007b40:	6011      	str	r1, [r2, #0]
 8007b42:	6053      	str	r3, [r2, #4]
 8007b44:	e7da      	b.n	8007afc <_free_r+0x24>
 8007b46:	42a0      	cmp	r0, r4
 8007b48:	d902      	bls.n	8007b50 <_free_r+0x78>
 8007b4a:	230c      	movs	r3, #12
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	e7d5      	b.n	8007afc <_free_r+0x24>
 8007b50:	6821      	ldr	r1, [r4, #0]
 8007b52:	1860      	adds	r0, r4, r1
 8007b54:	4283      	cmp	r3, r0
 8007b56:	d103      	bne.n	8007b60 <_free_r+0x88>
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	1841      	adds	r1, r0, r1
 8007b5e:	6021      	str	r1, [r4, #0]
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	6054      	str	r4, [r2, #4]
 8007b64:	e7ca      	b.n	8007afc <_free_r+0x24>
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	20000090 	.word	0x20000090

08007b6c <_malloc_r>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	2303      	movs	r3, #3
 8007b70:	1ccd      	adds	r5, r1, #3
 8007b72:	439d      	bics	r5, r3
 8007b74:	3508      	adds	r5, #8
 8007b76:	0006      	movs	r6, r0
 8007b78:	2d0c      	cmp	r5, #12
 8007b7a:	d21f      	bcs.n	8007bbc <_malloc_r+0x50>
 8007b7c:	250c      	movs	r5, #12
 8007b7e:	42a9      	cmp	r1, r5
 8007b80:	d81e      	bhi.n	8007bc0 <_malloc_r+0x54>
 8007b82:	0030      	movs	r0, r6
 8007b84:	f000 f882 	bl	8007c8c <__malloc_lock>
 8007b88:	4925      	ldr	r1, [pc, #148]	; (8007c20 <_malloc_r+0xb4>)
 8007b8a:	680a      	ldr	r2, [r1, #0]
 8007b8c:	0014      	movs	r4, r2
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	d11a      	bne.n	8007bc8 <_malloc_r+0x5c>
 8007b92:	4f24      	ldr	r7, [pc, #144]	; (8007c24 <_malloc_r+0xb8>)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d104      	bne.n	8007ba4 <_malloc_r+0x38>
 8007b9a:	0021      	movs	r1, r4
 8007b9c:	0030      	movs	r0, r6
 8007b9e:	f000 f843 	bl	8007c28 <_sbrk_r>
 8007ba2:	6038      	str	r0, [r7, #0]
 8007ba4:	0029      	movs	r1, r5
 8007ba6:	0030      	movs	r0, r6
 8007ba8:	f000 f83e 	bl	8007c28 <_sbrk_r>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d12b      	bne.n	8007c08 <_malloc_r+0x9c>
 8007bb0:	230c      	movs	r3, #12
 8007bb2:	0030      	movs	r0, r6
 8007bb4:	6033      	str	r3, [r6, #0]
 8007bb6:	f000 f871 	bl	8007c9c <__malloc_unlock>
 8007bba:	e003      	b.n	8007bc4 <_malloc_r+0x58>
 8007bbc:	2d00      	cmp	r5, #0
 8007bbe:	dade      	bge.n	8007b7e <_malloc_r+0x12>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	6033      	str	r3, [r6, #0]
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	1b5b      	subs	r3, r3, r5
 8007bcc:	d419      	bmi.n	8007c02 <_malloc_r+0x96>
 8007bce:	2b0b      	cmp	r3, #11
 8007bd0:	d903      	bls.n	8007bda <_malloc_r+0x6e>
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	18e4      	adds	r4, r4, r3
 8007bd6:	6025      	str	r5, [r4, #0]
 8007bd8:	e003      	b.n	8007be2 <_malloc_r+0x76>
 8007bda:	6863      	ldr	r3, [r4, #4]
 8007bdc:	42a2      	cmp	r2, r4
 8007bde:	d10e      	bne.n	8007bfe <_malloc_r+0x92>
 8007be0:	600b      	str	r3, [r1, #0]
 8007be2:	0030      	movs	r0, r6
 8007be4:	f000 f85a 	bl	8007c9c <__malloc_unlock>
 8007be8:	0020      	movs	r0, r4
 8007bea:	2207      	movs	r2, #7
 8007bec:	300b      	adds	r0, #11
 8007bee:	1d23      	adds	r3, r4, #4
 8007bf0:	4390      	bics	r0, r2
 8007bf2:	1ac2      	subs	r2, r0, r3
 8007bf4:	4298      	cmp	r0, r3
 8007bf6:	d0e6      	beq.n	8007bc6 <_malloc_r+0x5a>
 8007bf8:	1a1b      	subs	r3, r3, r0
 8007bfa:	50a3      	str	r3, [r4, r2]
 8007bfc:	e7e3      	b.n	8007bc6 <_malloc_r+0x5a>
 8007bfe:	6053      	str	r3, [r2, #4]
 8007c00:	e7ef      	b.n	8007be2 <_malloc_r+0x76>
 8007c02:	0022      	movs	r2, r4
 8007c04:	6864      	ldr	r4, [r4, #4]
 8007c06:	e7c2      	b.n	8007b8e <_malloc_r+0x22>
 8007c08:	2303      	movs	r3, #3
 8007c0a:	1cc4      	adds	r4, r0, #3
 8007c0c:	439c      	bics	r4, r3
 8007c0e:	42a0      	cmp	r0, r4
 8007c10:	d0e1      	beq.n	8007bd6 <_malloc_r+0x6a>
 8007c12:	1a21      	subs	r1, r4, r0
 8007c14:	0030      	movs	r0, r6
 8007c16:	f000 f807 	bl	8007c28 <_sbrk_r>
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	d1db      	bne.n	8007bd6 <_malloc_r+0x6a>
 8007c1e:	e7c7      	b.n	8007bb0 <_malloc_r+0x44>
 8007c20:	20000090 	.word	0x20000090
 8007c24:	20000094 	.word	0x20000094

08007c28 <_sbrk_r>:
 8007c28:	2300      	movs	r3, #0
 8007c2a:	b570      	push	{r4, r5, r6, lr}
 8007c2c:	4d06      	ldr	r5, [pc, #24]	; (8007c48 <_sbrk_r+0x20>)
 8007c2e:	0004      	movs	r4, r0
 8007c30:	0008      	movs	r0, r1
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7fb f95e 	bl	8002ef4 <_sbrk>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d103      	bne.n	8007c44 <_sbrk_r+0x1c>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d000      	beq.n	8007c44 <_sbrk_r+0x1c>
 8007c42:	6023      	str	r3, [r4, #0]
 8007c44:	bd70      	pop	{r4, r5, r6, pc}
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	200001e4 	.word	0x200001e4

08007c4c <siprintf>:
 8007c4c:	b40e      	push	{r1, r2, r3}
 8007c4e:	b500      	push	{lr}
 8007c50:	490b      	ldr	r1, [pc, #44]	; (8007c80 <siprintf+0x34>)
 8007c52:	b09c      	sub	sp, #112	; 0x70
 8007c54:	ab1d      	add	r3, sp, #116	; 0x74
 8007c56:	9002      	str	r0, [sp, #8]
 8007c58:	9006      	str	r0, [sp, #24]
 8007c5a:	9107      	str	r1, [sp, #28]
 8007c5c:	9104      	str	r1, [sp, #16]
 8007c5e:	4809      	ldr	r0, [pc, #36]	; (8007c84 <siprintf+0x38>)
 8007c60:	4909      	ldr	r1, [pc, #36]	; (8007c88 <siprintf+0x3c>)
 8007c62:	cb04      	ldmia	r3!, {r2}
 8007c64:	9105      	str	r1, [sp, #20]
 8007c66:	6800      	ldr	r0, [r0, #0]
 8007c68:	a902      	add	r1, sp, #8
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	f000 f880 	bl	8007d70 <_svfiprintf_r>
 8007c70:	2300      	movs	r3, #0
 8007c72:	9a02      	ldr	r2, [sp, #8]
 8007c74:	7013      	strb	r3, [r2, #0]
 8007c76:	b01c      	add	sp, #112	; 0x70
 8007c78:	bc08      	pop	{r3}
 8007c7a:	b003      	add	sp, #12
 8007c7c:	4718      	bx	r3
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	7fffffff 	.word	0x7fffffff
 8007c84:	2000000c 	.word	0x2000000c
 8007c88:	ffff0208 	.word	0xffff0208

08007c8c <__malloc_lock>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	4802      	ldr	r0, [pc, #8]	; (8007c98 <__malloc_lock+0xc>)
 8007c90:	f000 faf0 	bl	8008274 <__retarget_lock_acquire_recursive>
 8007c94:	bd10      	pop	{r4, pc}
 8007c96:	46c0      	nop			; (mov r8, r8)
 8007c98:	200001ec 	.word	0x200001ec

08007c9c <__malloc_unlock>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	4802      	ldr	r0, [pc, #8]	; (8007ca8 <__malloc_unlock+0xc>)
 8007ca0:	f000 fae9 	bl	8008276 <__retarget_lock_release_recursive>
 8007ca4:	bd10      	pop	{r4, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	200001ec 	.word	0x200001ec

08007cac <__ssputs_r>:
 8007cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cae:	688e      	ldr	r6, [r1, #8]
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	0007      	movs	r7, r0
 8007cb4:	000c      	movs	r4, r1
 8007cb6:	9203      	str	r2, [sp, #12]
 8007cb8:	9301      	str	r3, [sp, #4]
 8007cba:	429e      	cmp	r6, r3
 8007cbc:	d83c      	bhi.n	8007d38 <__ssputs_r+0x8c>
 8007cbe:	2390      	movs	r3, #144	; 0x90
 8007cc0:	898a      	ldrh	r2, [r1, #12]
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	421a      	tst	r2, r3
 8007cc6:	d034      	beq.n	8007d32 <__ssputs_r+0x86>
 8007cc8:	2503      	movs	r5, #3
 8007cca:	6909      	ldr	r1, [r1, #16]
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	1a5b      	subs	r3, r3, r1
 8007cd0:	9302      	str	r3, [sp, #8]
 8007cd2:	6963      	ldr	r3, [r4, #20]
 8007cd4:	9802      	ldr	r0, [sp, #8]
 8007cd6:	435d      	muls	r5, r3
 8007cd8:	0feb      	lsrs	r3, r5, #31
 8007cda:	195d      	adds	r5, r3, r5
 8007cdc:	9b01      	ldr	r3, [sp, #4]
 8007cde:	106d      	asrs	r5, r5, #1
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	181b      	adds	r3, r3, r0
 8007ce4:	42ab      	cmp	r3, r5
 8007ce6:	d900      	bls.n	8007cea <__ssputs_r+0x3e>
 8007ce8:	001d      	movs	r5, r3
 8007cea:	0553      	lsls	r3, r2, #21
 8007cec:	d532      	bpl.n	8007d54 <__ssputs_r+0xa8>
 8007cee:	0029      	movs	r1, r5
 8007cf0:	0038      	movs	r0, r7
 8007cf2:	f7ff ff3b 	bl	8007b6c <_malloc_r>
 8007cf6:	1e06      	subs	r6, r0, #0
 8007cf8:	d109      	bne.n	8007d0e <__ssputs_r+0x62>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	2340      	movs	r3, #64	; 0x40
 8007d00:	2001      	movs	r0, #1
 8007d02:	89a2      	ldrh	r2, [r4, #12]
 8007d04:	4240      	negs	r0, r0
 8007d06:	4313      	orrs	r3, r2
 8007d08:	81a3      	strh	r3, [r4, #12]
 8007d0a:	b005      	add	sp, #20
 8007d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d0e:	9a02      	ldr	r2, [sp, #8]
 8007d10:	6921      	ldr	r1, [r4, #16]
 8007d12:	f7ff fecf 	bl	8007ab4 <memcpy>
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	4a14      	ldr	r2, [pc, #80]	; (8007d6c <__ssputs_r+0xc0>)
 8007d1a:	401a      	ands	r2, r3
 8007d1c:	2380      	movs	r3, #128	; 0x80
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	81a3      	strh	r3, [r4, #12]
 8007d22:	9b02      	ldr	r3, [sp, #8]
 8007d24:	6126      	str	r6, [r4, #16]
 8007d26:	18f6      	adds	r6, r6, r3
 8007d28:	6026      	str	r6, [r4, #0]
 8007d2a:	6165      	str	r5, [r4, #20]
 8007d2c:	9e01      	ldr	r6, [sp, #4]
 8007d2e:	1aed      	subs	r5, r5, r3
 8007d30:	60a5      	str	r5, [r4, #8]
 8007d32:	9b01      	ldr	r3, [sp, #4]
 8007d34:	429e      	cmp	r6, r3
 8007d36:	d900      	bls.n	8007d3a <__ssputs_r+0x8e>
 8007d38:	9e01      	ldr	r6, [sp, #4]
 8007d3a:	0032      	movs	r2, r6
 8007d3c:	9903      	ldr	r1, [sp, #12]
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	f000 faa5 	bl	800828e <memmove>
 8007d44:	68a3      	ldr	r3, [r4, #8]
 8007d46:	2000      	movs	r0, #0
 8007d48:	1b9b      	subs	r3, r3, r6
 8007d4a:	60a3      	str	r3, [r4, #8]
 8007d4c:	6823      	ldr	r3, [r4, #0]
 8007d4e:	199e      	adds	r6, r3, r6
 8007d50:	6026      	str	r6, [r4, #0]
 8007d52:	e7da      	b.n	8007d0a <__ssputs_r+0x5e>
 8007d54:	002a      	movs	r2, r5
 8007d56:	0038      	movs	r0, r7
 8007d58:	f000 faac 	bl	80082b4 <_realloc_r>
 8007d5c:	1e06      	subs	r6, r0, #0
 8007d5e:	d1e0      	bne.n	8007d22 <__ssputs_r+0x76>
 8007d60:	0038      	movs	r0, r7
 8007d62:	6921      	ldr	r1, [r4, #16]
 8007d64:	f7ff feb8 	bl	8007ad8 <_free_r>
 8007d68:	e7c7      	b.n	8007cfa <__ssputs_r+0x4e>
 8007d6a:	46c0      	nop			; (mov r8, r8)
 8007d6c:	fffffb7f 	.word	0xfffffb7f

08007d70 <_svfiprintf_r>:
 8007d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d72:	b0a1      	sub	sp, #132	; 0x84
 8007d74:	9003      	str	r0, [sp, #12]
 8007d76:	001d      	movs	r5, r3
 8007d78:	898b      	ldrh	r3, [r1, #12]
 8007d7a:	000f      	movs	r7, r1
 8007d7c:	0016      	movs	r6, r2
 8007d7e:	061b      	lsls	r3, r3, #24
 8007d80:	d511      	bpl.n	8007da6 <_svfiprintf_r+0x36>
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10e      	bne.n	8007da6 <_svfiprintf_r+0x36>
 8007d88:	2140      	movs	r1, #64	; 0x40
 8007d8a:	f7ff feef 	bl	8007b6c <_malloc_r>
 8007d8e:	6038      	str	r0, [r7, #0]
 8007d90:	6138      	str	r0, [r7, #16]
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d105      	bne.n	8007da2 <_svfiprintf_r+0x32>
 8007d96:	230c      	movs	r3, #12
 8007d98:	9a03      	ldr	r2, [sp, #12]
 8007d9a:	3801      	subs	r0, #1
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	b021      	add	sp, #132	; 0x84
 8007da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007da2:	2340      	movs	r3, #64	; 0x40
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	2300      	movs	r3, #0
 8007da8:	ac08      	add	r4, sp, #32
 8007daa:	6163      	str	r3, [r4, #20]
 8007dac:	3320      	adds	r3, #32
 8007dae:	7663      	strb	r3, [r4, #25]
 8007db0:	3310      	adds	r3, #16
 8007db2:	76a3      	strb	r3, [r4, #26]
 8007db4:	9507      	str	r5, [sp, #28]
 8007db6:	0035      	movs	r5, r6
 8007db8:	782b      	ldrb	r3, [r5, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d001      	beq.n	8007dc2 <_svfiprintf_r+0x52>
 8007dbe:	2b25      	cmp	r3, #37	; 0x25
 8007dc0:	d147      	bne.n	8007e52 <_svfiprintf_r+0xe2>
 8007dc2:	1bab      	subs	r3, r5, r6
 8007dc4:	9305      	str	r3, [sp, #20]
 8007dc6:	42b5      	cmp	r5, r6
 8007dc8:	d00c      	beq.n	8007de4 <_svfiprintf_r+0x74>
 8007dca:	0032      	movs	r2, r6
 8007dcc:	0039      	movs	r1, r7
 8007dce:	9803      	ldr	r0, [sp, #12]
 8007dd0:	f7ff ff6c 	bl	8007cac <__ssputs_r>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d100      	bne.n	8007dda <_svfiprintf_r+0x6a>
 8007dd8:	e0ae      	b.n	8007f38 <_svfiprintf_r+0x1c8>
 8007dda:	6962      	ldr	r2, [r4, #20]
 8007ddc:	9b05      	ldr	r3, [sp, #20]
 8007dde:	4694      	mov	ip, r2
 8007de0:	4463      	add	r3, ip
 8007de2:	6163      	str	r3, [r4, #20]
 8007de4:	782b      	ldrb	r3, [r5, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d100      	bne.n	8007dec <_svfiprintf_r+0x7c>
 8007dea:	e0a5      	b.n	8007f38 <_svfiprintf_r+0x1c8>
 8007dec:	2201      	movs	r2, #1
 8007dee:	2300      	movs	r3, #0
 8007df0:	4252      	negs	r2, r2
 8007df2:	6062      	str	r2, [r4, #4]
 8007df4:	a904      	add	r1, sp, #16
 8007df6:	3254      	adds	r2, #84	; 0x54
 8007df8:	1852      	adds	r2, r2, r1
 8007dfa:	1c6e      	adds	r6, r5, #1
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	60e3      	str	r3, [r4, #12]
 8007e00:	60a3      	str	r3, [r4, #8]
 8007e02:	7013      	strb	r3, [r2, #0]
 8007e04:	65a3      	str	r3, [r4, #88]	; 0x58
 8007e06:	2205      	movs	r2, #5
 8007e08:	7831      	ldrb	r1, [r6, #0]
 8007e0a:	4854      	ldr	r0, [pc, #336]	; (8007f5c <_svfiprintf_r+0x1ec>)
 8007e0c:	f000 fa34 	bl	8008278 <memchr>
 8007e10:	1c75      	adds	r5, r6, #1
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d11f      	bne.n	8007e56 <_svfiprintf_r+0xe6>
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	06d3      	lsls	r3, r2, #27
 8007e1a:	d504      	bpl.n	8007e26 <_svfiprintf_r+0xb6>
 8007e1c:	2353      	movs	r3, #83	; 0x53
 8007e1e:	a904      	add	r1, sp, #16
 8007e20:	185b      	adds	r3, r3, r1
 8007e22:	2120      	movs	r1, #32
 8007e24:	7019      	strb	r1, [r3, #0]
 8007e26:	0713      	lsls	r3, r2, #28
 8007e28:	d504      	bpl.n	8007e34 <_svfiprintf_r+0xc4>
 8007e2a:	2353      	movs	r3, #83	; 0x53
 8007e2c:	a904      	add	r1, sp, #16
 8007e2e:	185b      	adds	r3, r3, r1
 8007e30:	212b      	movs	r1, #43	; 0x2b
 8007e32:	7019      	strb	r1, [r3, #0]
 8007e34:	7833      	ldrb	r3, [r6, #0]
 8007e36:	2b2a      	cmp	r3, #42	; 0x2a
 8007e38:	d016      	beq.n	8007e68 <_svfiprintf_r+0xf8>
 8007e3a:	0035      	movs	r5, r6
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	200a      	movs	r0, #10
 8007e40:	68e3      	ldr	r3, [r4, #12]
 8007e42:	782a      	ldrb	r2, [r5, #0]
 8007e44:	1c6e      	adds	r6, r5, #1
 8007e46:	3a30      	subs	r2, #48	; 0x30
 8007e48:	2a09      	cmp	r2, #9
 8007e4a:	d94e      	bls.n	8007eea <_svfiprintf_r+0x17a>
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	d111      	bne.n	8007e74 <_svfiprintf_r+0x104>
 8007e50:	e017      	b.n	8007e82 <_svfiprintf_r+0x112>
 8007e52:	3501      	adds	r5, #1
 8007e54:	e7b0      	b.n	8007db8 <_svfiprintf_r+0x48>
 8007e56:	4b41      	ldr	r3, [pc, #260]	; (8007f5c <_svfiprintf_r+0x1ec>)
 8007e58:	6822      	ldr	r2, [r4, #0]
 8007e5a:	1ac0      	subs	r0, r0, r3
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4083      	lsls	r3, r0
 8007e60:	4313      	orrs	r3, r2
 8007e62:	002e      	movs	r6, r5
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	e7ce      	b.n	8007e06 <_svfiprintf_r+0x96>
 8007e68:	9b07      	ldr	r3, [sp, #28]
 8007e6a:	1d19      	adds	r1, r3, #4
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	9107      	str	r1, [sp, #28]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	db01      	blt.n	8007e78 <_svfiprintf_r+0x108>
 8007e74:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e76:	e004      	b.n	8007e82 <_svfiprintf_r+0x112>
 8007e78:	425b      	negs	r3, r3
 8007e7a:	60e3      	str	r3, [r4, #12]
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	782b      	ldrb	r3, [r5, #0]
 8007e84:	2b2e      	cmp	r3, #46	; 0x2e
 8007e86:	d10a      	bne.n	8007e9e <_svfiprintf_r+0x12e>
 8007e88:	786b      	ldrb	r3, [r5, #1]
 8007e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e8c:	d135      	bne.n	8007efa <_svfiprintf_r+0x18a>
 8007e8e:	9b07      	ldr	r3, [sp, #28]
 8007e90:	3502      	adds	r5, #2
 8007e92:	1d1a      	adds	r2, r3, #4
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	9207      	str	r2, [sp, #28]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	db2b      	blt.n	8007ef4 <_svfiprintf_r+0x184>
 8007e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9e:	4e30      	ldr	r6, [pc, #192]	; (8007f60 <_svfiprintf_r+0x1f0>)
 8007ea0:	2203      	movs	r2, #3
 8007ea2:	0030      	movs	r0, r6
 8007ea4:	7829      	ldrb	r1, [r5, #0]
 8007ea6:	f000 f9e7 	bl	8008278 <memchr>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d006      	beq.n	8007ebc <_svfiprintf_r+0x14c>
 8007eae:	2340      	movs	r3, #64	; 0x40
 8007eb0:	1b80      	subs	r0, r0, r6
 8007eb2:	4083      	lsls	r3, r0
 8007eb4:	6822      	ldr	r2, [r4, #0]
 8007eb6:	3501      	adds	r5, #1
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	6023      	str	r3, [r4, #0]
 8007ebc:	7829      	ldrb	r1, [r5, #0]
 8007ebe:	2206      	movs	r2, #6
 8007ec0:	4828      	ldr	r0, [pc, #160]	; (8007f64 <_svfiprintf_r+0x1f4>)
 8007ec2:	1c6e      	adds	r6, r5, #1
 8007ec4:	7621      	strb	r1, [r4, #24]
 8007ec6:	f000 f9d7 	bl	8008278 <memchr>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d03c      	beq.n	8007f48 <_svfiprintf_r+0x1d8>
 8007ece:	4b26      	ldr	r3, [pc, #152]	; (8007f68 <_svfiprintf_r+0x1f8>)
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d125      	bne.n	8007f20 <_svfiprintf_r+0x1b0>
 8007ed4:	2207      	movs	r2, #7
 8007ed6:	9b07      	ldr	r3, [sp, #28]
 8007ed8:	3307      	adds	r3, #7
 8007eda:	4393      	bics	r3, r2
 8007edc:	3308      	adds	r3, #8
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	6963      	ldr	r3, [r4, #20]
 8007ee2:	9a04      	ldr	r2, [sp, #16]
 8007ee4:	189b      	adds	r3, r3, r2
 8007ee6:	6163      	str	r3, [r4, #20]
 8007ee8:	e765      	b.n	8007db6 <_svfiprintf_r+0x46>
 8007eea:	4343      	muls	r3, r0
 8007eec:	0035      	movs	r5, r6
 8007eee:	2101      	movs	r1, #1
 8007ef0:	189b      	adds	r3, r3, r2
 8007ef2:	e7a6      	b.n	8007e42 <_svfiprintf_r+0xd2>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	425b      	negs	r3, r3
 8007ef8:	e7d0      	b.n	8007e9c <_svfiprintf_r+0x12c>
 8007efa:	2300      	movs	r3, #0
 8007efc:	200a      	movs	r0, #10
 8007efe:	001a      	movs	r2, r3
 8007f00:	3501      	adds	r5, #1
 8007f02:	6063      	str	r3, [r4, #4]
 8007f04:	7829      	ldrb	r1, [r5, #0]
 8007f06:	1c6e      	adds	r6, r5, #1
 8007f08:	3930      	subs	r1, #48	; 0x30
 8007f0a:	2909      	cmp	r1, #9
 8007f0c:	d903      	bls.n	8007f16 <_svfiprintf_r+0x1a6>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d0c5      	beq.n	8007e9e <_svfiprintf_r+0x12e>
 8007f12:	9209      	str	r2, [sp, #36]	; 0x24
 8007f14:	e7c3      	b.n	8007e9e <_svfiprintf_r+0x12e>
 8007f16:	4342      	muls	r2, r0
 8007f18:	0035      	movs	r5, r6
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	1852      	adds	r2, r2, r1
 8007f1e:	e7f1      	b.n	8007f04 <_svfiprintf_r+0x194>
 8007f20:	ab07      	add	r3, sp, #28
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	003a      	movs	r2, r7
 8007f26:	0021      	movs	r1, r4
 8007f28:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <_svfiprintf_r+0x1fc>)
 8007f2a:	9803      	ldr	r0, [sp, #12]
 8007f2c:	e000      	b.n	8007f30 <_svfiprintf_r+0x1c0>
 8007f2e:	bf00      	nop
 8007f30:	9004      	str	r0, [sp, #16]
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	3301      	adds	r3, #1
 8007f36:	d1d3      	bne.n	8007ee0 <_svfiprintf_r+0x170>
 8007f38:	89bb      	ldrh	r3, [r7, #12]
 8007f3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f3c:	065b      	lsls	r3, r3, #25
 8007f3e:	d400      	bmi.n	8007f42 <_svfiprintf_r+0x1d2>
 8007f40:	e72d      	b.n	8007d9e <_svfiprintf_r+0x2e>
 8007f42:	2001      	movs	r0, #1
 8007f44:	4240      	negs	r0, r0
 8007f46:	e72a      	b.n	8007d9e <_svfiprintf_r+0x2e>
 8007f48:	ab07      	add	r3, sp, #28
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	003a      	movs	r2, r7
 8007f4e:	0021      	movs	r1, r4
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <_svfiprintf_r+0x1fc>)
 8007f52:	9803      	ldr	r0, [sp, #12]
 8007f54:	f000 f87c 	bl	8008050 <_printf_i>
 8007f58:	e7ea      	b.n	8007f30 <_svfiprintf_r+0x1c0>
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	080084f0 	.word	0x080084f0
 8007f60:	080084f6 	.word	0x080084f6
 8007f64:	080084fa 	.word	0x080084fa
 8007f68:	00000000 	.word	0x00000000
 8007f6c:	08007cad 	.word	0x08007cad

08007f70 <_printf_common>:
 8007f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f72:	0015      	movs	r5, r2
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	688a      	ldr	r2, [r1, #8]
 8007f78:	690b      	ldr	r3, [r1, #16]
 8007f7a:	000c      	movs	r4, r1
 8007f7c:	9000      	str	r0, [sp, #0]
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	da00      	bge.n	8007f84 <_printf_common+0x14>
 8007f82:	0013      	movs	r3, r2
 8007f84:	0022      	movs	r2, r4
 8007f86:	602b      	str	r3, [r5, #0]
 8007f88:	3243      	adds	r2, #67	; 0x43
 8007f8a:	7812      	ldrb	r2, [r2, #0]
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	d001      	beq.n	8007f94 <_printf_common+0x24>
 8007f90:	3301      	adds	r3, #1
 8007f92:	602b      	str	r3, [r5, #0]
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	069b      	lsls	r3, r3, #26
 8007f98:	d502      	bpl.n	8007fa0 <_printf_common+0x30>
 8007f9a:	682b      	ldr	r3, [r5, #0]
 8007f9c:	3302      	adds	r3, #2
 8007f9e:	602b      	str	r3, [r5, #0]
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	2306      	movs	r3, #6
 8007fa4:	0017      	movs	r7, r2
 8007fa6:	401f      	ands	r7, r3
 8007fa8:	421a      	tst	r2, r3
 8007faa:	d027      	beq.n	8007ffc <_printf_common+0x8c>
 8007fac:	0023      	movs	r3, r4
 8007fae:	3343      	adds	r3, #67	; 0x43
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	1e5a      	subs	r2, r3, #1
 8007fb4:	4193      	sbcs	r3, r2
 8007fb6:	6822      	ldr	r2, [r4, #0]
 8007fb8:	0692      	lsls	r2, r2, #26
 8007fba:	d430      	bmi.n	800801e <_printf_common+0xae>
 8007fbc:	0022      	movs	r2, r4
 8007fbe:	9901      	ldr	r1, [sp, #4]
 8007fc0:	9800      	ldr	r0, [sp, #0]
 8007fc2:	9e08      	ldr	r6, [sp, #32]
 8007fc4:	3243      	adds	r2, #67	; 0x43
 8007fc6:	47b0      	blx	r6
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d025      	beq.n	8008018 <_printf_common+0xa8>
 8007fcc:	2306      	movs	r3, #6
 8007fce:	6820      	ldr	r0, [r4, #0]
 8007fd0:	682a      	ldr	r2, [r5, #0]
 8007fd2:	68e1      	ldr	r1, [r4, #12]
 8007fd4:	2500      	movs	r5, #0
 8007fd6:	4003      	ands	r3, r0
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d103      	bne.n	8007fe4 <_printf_common+0x74>
 8007fdc:	1a8d      	subs	r5, r1, r2
 8007fde:	43eb      	mvns	r3, r5
 8007fe0:	17db      	asrs	r3, r3, #31
 8007fe2:	401d      	ands	r5, r3
 8007fe4:	68a3      	ldr	r3, [r4, #8]
 8007fe6:	6922      	ldr	r2, [r4, #16]
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	dd01      	ble.n	8007ff0 <_printf_common+0x80>
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	18ed      	adds	r5, r5, r3
 8007ff0:	2700      	movs	r7, #0
 8007ff2:	42bd      	cmp	r5, r7
 8007ff4:	d120      	bne.n	8008038 <_printf_common+0xc8>
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	e010      	b.n	800801c <_printf_common+0xac>
 8007ffa:	3701      	adds	r7, #1
 8007ffc:	68e3      	ldr	r3, [r4, #12]
 8007ffe:	682a      	ldr	r2, [r5, #0]
 8008000:	1a9b      	subs	r3, r3, r2
 8008002:	42bb      	cmp	r3, r7
 8008004:	ddd2      	ble.n	8007fac <_printf_common+0x3c>
 8008006:	0022      	movs	r2, r4
 8008008:	2301      	movs	r3, #1
 800800a:	9901      	ldr	r1, [sp, #4]
 800800c:	9800      	ldr	r0, [sp, #0]
 800800e:	9e08      	ldr	r6, [sp, #32]
 8008010:	3219      	adds	r2, #25
 8008012:	47b0      	blx	r6
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d1f0      	bne.n	8007ffa <_printf_common+0x8a>
 8008018:	2001      	movs	r0, #1
 800801a:	4240      	negs	r0, r0
 800801c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800801e:	2030      	movs	r0, #48	; 0x30
 8008020:	18e1      	adds	r1, r4, r3
 8008022:	3143      	adds	r1, #67	; 0x43
 8008024:	7008      	strb	r0, [r1, #0]
 8008026:	0021      	movs	r1, r4
 8008028:	1c5a      	adds	r2, r3, #1
 800802a:	3145      	adds	r1, #69	; 0x45
 800802c:	7809      	ldrb	r1, [r1, #0]
 800802e:	18a2      	adds	r2, r4, r2
 8008030:	3243      	adds	r2, #67	; 0x43
 8008032:	3302      	adds	r3, #2
 8008034:	7011      	strb	r1, [r2, #0]
 8008036:	e7c1      	b.n	8007fbc <_printf_common+0x4c>
 8008038:	0022      	movs	r2, r4
 800803a:	2301      	movs	r3, #1
 800803c:	9901      	ldr	r1, [sp, #4]
 800803e:	9800      	ldr	r0, [sp, #0]
 8008040:	9e08      	ldr	r6, [sp, #32]
 8008042:	321a      	adds	r2, #26
 8008044:	47b0      	blx	r6
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	d0e6      	beq.n	8008018 <_printf_common+0xa8>
 800804a:	3701      	adds	r7, #1
 800804c:	e7d1      	b.n	8007ff2 <_printf_common+0x82>
	...

08008050 <_printf_i>:
 8008050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008052:	b08b      	sub	sp, #44	; 0x2c
 8008054:	9206      	str	r2, [sp, #24]
 8008056:	000a      	movs	r2, r1
 8008058:	3243      	adds	r2, #67	; 0x43
 800805a:	9307      	str	r3, [sp, #28]
 800805c:	9005      	str	r0, [sp, #20]
 800805e:	9204      	str	r2, [sp, #16]
 8008060:	7e0a      	ldrb	r2, [r1, #24]
 8008062:	000c      	movs	r4, r1
 8008064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008066:	2a78      	cmp	r2, #120	; 0x78
 8008068:	d806      	bhi.n	8008078 <_printf_i+0x28>
 800806a:	2a62      	cmp	r2, #98	; 0x62
 800806c:	d808      	bhi.n	8008080 <_printf_i+0x30>
 800806e:	2a00      	cmp	r2, #0
 8008070:	d100      	bne.n	8008074 <_printf_i+0x24>
 8008072:	e0c0      	b.n	80081f6 <_printf_i+0x1a6>
 8008074:	2a58      	cmp	r2, #88	; 0x58
 8008076:	d052      	beq.n	800811e <_printf_i+0xce>
 8008078:	0026      	movs	r6, r4
 800807a:	3642      	adds	r6, #66	; 0x42
 800807c:	7032      	strb	r2, [r6, #0]
 800807e:	e022      	b.n	80080c6 <_printf_i+0x76>
 8008080:	0010      	movs	r0, r2
 8008082:	3863      	subs	r0, #99	; 0x63
 8008084:	2815      	cmp	r0, #21
 8008086:	d8f7      	bhi.n	8008078 <_printf_i+0x28>
 8008088:	f7f8 f838 	bl	80000fc <__gnu_thumb1_case_shi>
 800808c:	001f0016 	.word	0x001f0016
 8008090:	fff6fff6 	.word	0xfff6fff6
 8008094:	fff6fff6 	.word	0xfff6fff6
 8008098:	fff6001f 	.word	0xfff6001f
 800809c:	fff6fff6 	.word	0xfff6fff6
 80080a0:	00a8fff6 	.word	0x00a8fff6
 80080a4:	009a0036 	.word	0x009a0036
 80080a8:	fff6fff6 	.word	0xfff6fff6
 80080ac:	fff600b9 	.word	0xfff600b9
 80080b0:	fff60036 	.word	0xfff60036
 80080b4:	009efff6 	.word	0x009efff6
 80080b8:	0026      	movs	r6, r4
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	3642      	adds	r6, #66	; 0x42
 80080be:	1d11      	adds	r1, r2, #4
 80080c0:	6019      	str	r1, [r3, #0]
 80080c2:	6813      	ldr	r3, [r2, #0]
 80080c4:	7033      	strb	r3, [r6, #0]
 80080c6:	2301      	movs	r3, #1
 80080c8:	e0a7      	b.n	800821a <_printf_i+0x1ca>
 80080ca:	6808      	ldr	r0, [r1, #0]
 80080cc:	6819      	ldr	r1, [r3, #0]
 80080ce:	1d0a      	adds	r2, r1, #4
 80080d0:	0605      	lsls	r5, r0, #24
 80080d2:	d50b      	bpl.n	80080ec <_printf_i+0x9c>
 80080d4:	680d      	ldr	r5, [r1, #0]
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	2d00      	cmp	r5, #0
 80080da:	da03      	bge.n	80080e4 <_printf_i+0x94>
 80080dc:	232d      	movs	r3, #45	; 0x2d
 80080de:	9a04      	ldr	r2, [sp, #16]
 80080e0:	426d      	negs	r5, r5
 80080e2:	7013      	strb	r3, [r2, #0]
 80080e4:	4b61      	ldr	r3, [pc, #388]	; (800826c <_printf_i+0x21c>)
 80080e6:	270a      	movs	r7, #10
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	e032      	b.n	8008152 <_printf_i+0x102>
 80080ec:	680d      	ldr	r5, [r1, #0]
 80080ee:	601a      	str	r2, [r3, #0]
 80080f0:	0641      	lsls	r1, r0, #25
 80080f2:	d5f1      	bpl.n	80080d8 <_printf_i+0x88>
 80080f4:	b22d      	sxth	r5, r5
 80080f6:	e7ef      	b.n	80080d8 <_printf_i+0x88>
 80080f8:	680d      	ldr	r5, [r1, #0]
 80080fa:	6819      	ldr	r1, [r3, #0]
 80080fc:	1d08      	adds	r0, r1, #4
 80080fe:	6018      	str	r0, [r3, #0]
 8008100:	062e      	lsls	r6, r5, #24
 8008102:	d501      	bpl.n	8008108 <_printf_i+0xb8>
 8008104:	680d      	ldr	r5, [r1, #0]
 8008106:	e003      	b.n	8008110 <_printf_i+0xc0>
 8008108:	066d      	lsls	r5, r5, #25
 800810a:	d5fb      	bpl.n	8008104 <_printf_i+0xb4>
 800810c:	680d      	ldr	r5, [r1, #0]
 800810e:	b2ad      	uxth	r5, r5
 8008110:	4b56      	ldr	r3, [pc, #344]	; (800826c <_printf_i+0x21c>)
 8008112:	270a      	movs	r7, #10
 8008114:	9303      	str	r3, [sp, #12]
 8008116:	2a6f      	cmp	r2, #111	; 0x6f
 8008118:	d117      	bne.n	800814a <_printf_i+0xfa>
 800811a:	2708      	movs	r7, #8
 800811c:	e015      	b.n	800814a <_printf_i+0xfa>
 800811e:	3145      	adds	r1, #69	; 0x45
 8008120:	700a      	strb	r2, [r1, #0]
 8008122:	4a52      	ldr	r2, [pc, #328]	; (800826c <_printf_i+0x21c>)
 8008124:	9203      	str	r2, [sp, #12]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	6821      	ldr	r1, [r4, #0]
 800812a:	ca20      	ldmia	r2!, {r5}
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	0608      	lsls	r0, r1, #24
 8008130:	d550      	bpl.n	80081d4 <_printf_i+0x184>
 8008132:	07cb      	lsls	r3, r1, #31
 8008134:	d502      	bpl.n	800813c <_printf_i+0xec>
 8008136:	2320      	movs	r3, #32
 8008138:	4319      	orrs	r1, r3
 800813a:	6021      	str	r1, [r4, #0]
 800813c:	2710      	movs	r7, #16
 800813e:	2d00      	cmp	r5, #0
 8008140:	d103      	bne.n	800814a <_printf_i+0xfa>
 8008142:	2320      	movs	r3, #32
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	439a      	bics	r2, r3
 8008148:	6022      	str	r2, [r4, #0]
 800814a:	0023      	movs	r3, r4
 800814c:	2200      	movs	r2, #0
 800814e:	3343      	adds	r3, #67	; 0x43
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	6863      	ldr	r3, [r4, #4]
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	db03      	blt.n	8008162 <_printf_i+0x112>
 800815a:	2204      	movs	r2, #4
 800815c:	6821      	ldr	r1, [r4, #0]
 800815e:	4391      	bics	r1, r2
 8008160:	6021      	str	r1, [r4, #0]
 8008162:	2d00      	cmp	r5, #0
 8008164:	d102      	bne.n	800816c <_printf_i+0x11c>
 8008166:	9e04      	ldr	r6, [sp, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00c      	beq.n	8008186 <_printf_i+0x136>
 800816c:	9e04      	ldr	r6, [sp, #16]
 800816e:	0028      	movs	r0, r5
 8008170:	0039      	movs	r1, r7
 8008172:	f7f8 f853 	bl	800021c <__aeabi_uidivmod>
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	3e01      	subs	r6, #1
 800817a:	5c5b      	ldrb	r3, [r3, r1]
 800817c:	7033      	strb	r3, [r6, #0]
 800817e:	002b      	movs	r3, r5
 8008180:	0005      	movs	r5, r0
 8008182:	429f      	cmp	r7, r3
 8008184:	d9f3      	bls.n	800816e <_printf_i+0x11e>
 8008186:	2f08      	cmp	r7, #8
 8008188:	d109      	bne.n	800819e <_printf_i+0x14e>
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	07db      	lsls	r3, r3, #31
 800818e:	d506      	bpl.n	800819e <_printf_i+0x14e>
 8008190:	6863      	ldr	r3, [r4, #4]
 8008192:	6922      	ldr	r2, [r4, #16]
 8008194:	4293      	cmp	r3, r2
 8008196:	dc02      	bgt.n	800819e <_printf_i+0x14e>
 8008198:	2330      	movs	r3, #48	; 0x30
 800819a:	3e01      	subs	r6, #1
 800819c:	7033      	strb	r3, [r6, #0]
 800819e:	9b04      	ldr	r3, [sp, #16]
 80081a0:	1b9b      	subs	r3, r3, r6
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	9b07      	ldr	r3, [sp, #28]
 80081a6:	0021      	movs	r1, r4
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	9805      	ldr	r0, [sp, #20]
 80081ac:	9b06      	ldr	r3, [sp, #24]
 80081ae:	aa09      	add	r2, sp, #36	; 0x24
 80081b0:	f7ff fede 	bl	8007f70 <_printf_common>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d135      	bne.n	8008224 <_printf_i+0x1d4>
 80081b8:	2001      	movs	r0, #1
 80081ba:	4240      	negs	r0, r0
 80081bc:	b00b      	add	sp, #44	; 0x2c
 80081be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081c0:	2220      	movs	r2, #32
 80081c2:	6809      	ldr	r1, [r1, #0]
 80081c4:	430a      	orrs	r2, r1
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	0022      	movs	r2, r4
 80081ca:	2178      	movs	r1, #120	; 0x78
 80081cc:	3245      	adds	r2, #69	; 0x45
 80081ce:	7011      	strb	r1, [r2, #0]
 80081d0:	4a27      	ldr	r2, [pc, #156]	; (8008270 <_printf_i+0x220>)
 80081d2:	e7a7      	b.n	8008124 <_printf_i+0xd4>
 80081d4:	0648      	lsls	r0, r1, #25
 80081d6:	d5ac      	bpl.n	8008132 <_printf_i+0xe2>
 80081d8:	b2ad      	uxth	r5, r5
 80081da:	e7aa      	b.n	8008132 <_printf_i+0xe2>
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	680d      	ldr	r5, [r1, #0]
 80081e0:	1d10      	adds	r0, r2, #4
 80081e2:	6949      	ldr	r1, [r1, #20]
 80081e4:	6018      	str	r0, [r3, #0]
 80081e6:	6813      	ldr	r3, [r2, #0]
 80081e8:	062e      	lsls	r6, r5, #24
 80081ea:	d501      	bpl.n	80081f0 <_printf_i+0x1a0>
 80081ec:	6019      	str	r1, [r3, #0]
 80081ee:	e002      	b.n	80081f6 <_printf_i+0x1a6>
 80081f0:	066d      	lsls	r5, r5, #25
 80081f2:	d5fb      	bpl.n	80081ec <_printf_i+0x19c>
 80081f4:	8019      	strh	r1, [r3, #0]
 80081f6:	2300      	movs	r3, #0
 80081f8:	9e04      	ldr	r6, [sp, #16]
 80081fa:	6123      	str	r3, [r4, #16]
 80081fc:	e7d2      	b.n	80081a4 <_printf_i+0x154>
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	1d11      	adds	r1, r2, #4
 8008202:	6019      	str	r1, [r3, #0]
 8008204:	6816      	ldr	r6, [r2, #0]
 8008206:	2100      	movs	r1, #0
 8008208:	0030      	movs	r0, r6
 800820a:	6862      	ldr	r2, [r4, #4]
 800820c:	f000 f834 	bl	8008278 <memchr>
 8008210:	2800      	cmp	r0, #0
 8008212:	d001      	beq.n	8008218 <_printf_i+0x1c8>
 8008214:	1b80      	subs	r0, r0, r6
 8008216:	6060      	str	r0, [r4, #4]
 8008218:	6863      	ldr	r3, [r4, #4]
 800821a:	6123      	str	r3, [r4, #16]
 800821c:	2300      	movs	r3, #0
 800821e:	9a04      	ldr	r2, [sp, #16]
 8008220:	7013      	strb	r3, [r2, #0]
 8008222:	e7bf      	b.n	80081a4 <_printf_i+0x154>
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	0032      	movs	r2, r6
 8008228:	9906      	ldr	r1, [sp, #24]
 800822a:	9805      	ldr	r0, [sp, #20]
 800822c:	9d07      	ldr	r5, [sp, #28]
 800822e:	47a8      	blx	r5
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d0c1      	beq.n	80081b8 <_printf_i+0x168>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	079b      	lsls	r3, r3, #30
 8008238:	d415      	bmi.n	8008266 <_printf_i+0x216>
 800823a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823c:	68e0      	ldr	r0, [r4, #12]
 800823e:	4298      	cmp	r0, r3
 8008240:	dabc      	bge.n	80081bc <_printf_i+0x16c>
 8008242:	0018      	movs	r0, r3
 8008244:	e7ba      	b.n	80081bc <_printf_i+0x16c>
 8008246:	0022      	movs	r2, r4
 8008248:	2301      	movs	r3, #1
 800824a:	9906      	ldr	r1, [sp, #24]
 800824c:	9805      	ldr	r0, [sp, #20]
 800824e:	9e07      	ldr	r6, [sp, #28]
 8008250:	3219      	adds	r2, #25
 8008252:	47b0      	blx	r6
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d0af      	beq.n	80081b8 <_printf_i+0x168>
 8008258:	3501      	adds	r5, #1
 800825a:	68e3      	ldr	r3, [r4, #12]
 800825c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800825e:	1a9b      	subs	r3, r3, r2
 8008260:	42ab      	cmp	r3, r5
 8008262:	dcf0      	bgt.n	8008246 <_printf_i+0x1f6>
 8008264:	e7e9      	b.n	800823a <_printf_i+0x1ea>
 8008266:	2500      	movs	r5, #0
 8008268:	e7f7      	b.n	800825a <_printf_i+0x20a>
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	08008501 	.word	0x08008501
 8008270:	08008512 	.word	0x08008512

08008274 <__retarget_lock_acquire_recursive>:
 8008274:	4770      	bx	lr

08008276 <__retarget_lock_release_recursive>:
 8008276:	4770      	bx	lr

08008278 <memchr>:
 8008278:	b2c9      	uxtb	r1, r1
 800827a:	1882      	adds	r2, r0, r2
 800827c:	4290      	cmp	r0, r2
 800827e:	d101      	bne.n	8008284 <memchr+0xc>
 8008280:	2000      	movs	r0, #0
 8008282:	4770      	bx	lr
 8008284:	7803      	ldrb	r3, [r0, #0]
 8008286:	428b      	cmp	r3, r1
 8008288:	d0fb      	beq.n	8008282 <memchr+0xa>
 800828a:	3001      	adds	r0, #1
 800828c:	e7f6      	b.n	800827c <memchr+0x4>

0800828e <memmove>:
 800828e:	b510      	push	{r4, lr}
 8008290:	4288      	cmp	r0, r1
 8008292:	d902      	bls.n	800829a <memmove+0xc>
 8008294:	188b      	adds	r3, r1, r2
 8008296:	4298      	cmp	r0, r3
 8008298:	d303      	bcc.n	80082a2 <memmove+0x14>
 800829a:	2300      	movs	r3, #0
 800829c:	e007      	b.n	80082ae <memmove+0x20>
 800829e:	5c8b      	ldrb	r3, [r1, r2]
 80082a0:	5483      	strb	r3, [r0, r2]
 80082a2:	3a01      	subs	r2, #1
 80082a4:	d2fb      	bcs.n	800829e <memmove+0x10>
 80082a6:	bd10      	pop	{r4, pc}
 80082a8:	5ccc      	ldrb	r4, [r1, r3]
 80082aa:	54c4      	strb	r4, [r0, r3]
 80082ac:	3301      	adds	r3, #1
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d1fa      	bne.n	80082a8 <memmove+0x1a>
 80082b2:	e7f8      	b.n	80082a6 <memmove+0x18>

080082b4 <_realloc_r>:
 80082b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b6:	0007      	movs	r7, r0
 80082b8:	000d      	movs	r5, r1
 80082ba:	0016      	movs	r6, r2
 80082bc:	2900      	cmp	r1, #0
 80082be:	d105      	bne.n	80082cc <_realloc_r+0x18>
 80082c0:	0011      	movs	r1, r2
 80082c2:	f7ff fc53 	bl	8007b6c <_malloc_r>
 80082c6:	0004      	movs	r4, r0
 80082c8:	0020      	movs	r0, r4
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	d103      	bne.n	80082d8 <_realloc_r+0x24>
 80082d0:	f7ff fc02 	bl	8007ad8 <_free_r>
 80082d4:	0034      	movs	r4, r6
 80082d6:	e7f7      	b.n	80082c8 <_realloc_r+0x14>
 80082d8:	f000 f812 	bl	8008300 <_malloc_usable_size_r>
 80082dc:	002c      	movs	r4, r5
 80082de:	42b0      	cmp	r0, r6
 80082e0:	d2f2      	bcs.n	80082c8 <_realloc_r+0x14>
 80082e2:	0031      	movs	r1, r6
 80082e4:	0038      	movs	r0, r7
 80082e6:	f7ff fc41 	bl	8007b6c <_malloc_r>
 80082ea:	1e04      	subs	r4, r0, #0
 80082ec:	d0ec      	beq.n	80082c8 <_realloc_r+0x14>
 80082ee:	0029      	movs	r1, r5
 80082f0:	0032      	movs	r2, r6
 80082f2:	f7ff fbdf 	bl	8007ab4 <memcpy>
 80082f6:	0029      	movs	r1, r5
 80082f8:	0038      	movs	r0, r7
 80082fa:	f7ff fbed 	bl	8007ad8 <_free_r>
 80082fe:	e7e3      	b.n	80082c8 <_realloc_r+0x14>

08008300 <_malloc_usable_size_r>:
 8008300:	1f0b      	subs	r3, r1, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	1f18      	subs	r0, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	da01      	bge.n	800830e <_malloc_usable_size_r+0xe>
 800830a:	580b      	ldr	r3, [r1, r0]
 800830c:	18c0      	adds	r0, r0, r3
 800830e:	4770      	bx	lr

08008310 <_init>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr

0800831c <_fini>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	46c0      	nop			; (mov r8, r8)
 8008320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008322:	bc08      	pop	{r3}
 8008324:	469e      	mov	lr, r3
 8008326:	4770      	bx	lr
