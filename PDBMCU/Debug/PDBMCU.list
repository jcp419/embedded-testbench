
PDBMCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af9c  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800b050  0800b050  0001b050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5f4  0800b5f4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b5f4  0800b5f4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b5f4  0800b5f4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f4  0800b5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f8  0800b5f8  0001b5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001dc  0800b7d8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  0800b7d8  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caf0  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f2  00000000  00000000  0002ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002f1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174de  00000000  00000000  00030890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f454  00000000  00000000  00047d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa15  00000000  00000000  000571c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1bd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bec  00000000  00000000  000e1c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	200001dc 	.word	0x200001dc
 80000d4:	00000000 	.word	0x00000000
 80000d8:	0800b038 	.word	0x0800b038

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	200001e0 	.word	0x200001e0
 80000f8:	0800b038 	.word	0x0800b038

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_uqi>:
 800010c:	b402      	push	{r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	5c09      	ldrb	r1, [r1, r0]
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	448e      	add	lr, r1
 800011a:	bc02      	pop	{r1}
 800011c:	4770      	bx	lr
 800011e:	46c0      	nop			; (mov r8, r8)

08000120 <__gnu_thumb1_case_shi>:
 8000120:	b403      	push	{r0, r1}
 8000122:	4671      	mov	r1, lr
 8000124:	0849      	lsrs	r1, r1, #1
 8000126:	0040      	lsls	r0, r0, #1
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	5e09      	ldrsh	r1, [r1, r0]
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	448e      	add	lr, r1
 8000130:	bc03      	pop	{r0, r1}
 8000132:	4770      	bx	lr

08000134 <__udivsi3>:
 8000134:	2200      	movs	r2, #0
 8000136:	0843      	lsrs	r3, r0, #1
 8000138:	428b      	cmp	r3, r1
 800013a:	d374      	bcc.n	8000226 <__udivsi3+0xf2>
 800013c:	0903      	lsrs	r3, r0, #4
 800013e:	428b      	cmp	r3, r1
 8000140:	d35f      	bcc.n	8000202 <__udivsi3+0xce>
 8000142:	0a03      	lsrs	r3, r0, #8
 8000144:	428b      	cmp	r3, r1
 8000146:	d344      	bcc.n	80001d2 <__udivsi3+0x9e>
 8000148:	0b03      	lsrs	r3, r0, #12
 800014a:	428b      	cmp	r3, r1
 800014c:	d328      	bcc.n	80001a0 <__udivsi3+0x6c>
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d30d      	bcc.n	8000170 <__udivsi3+0x3c>
 8000154:	22ff      	movs	r2, #255	; 0xff
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	ba12      	rev	r2, r2
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d302      	bcc.n	8000166 <__udivsi3+0x32>
 8000160:	1212      	asrs	r2, r2, #8
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	d065      	beq.n	8000232 <__udivsi3+0xfe>
 8000166:	0b03      	lsrs	r3, r0, #12
 8000168:	428b      	cmp	r3, r1
 800016a:	d319      	bcc.n	80001a0 <__udivsi3+0x6c>
 800016c:	e000      	b.n	8000170 <__udivsi3+0x3c>
 800016e:	0a09      	lsrs	r1, r1, #8
 8000170:	0bc3      	lsrs	r3, r0, #15
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x46>
 8000176:	03cb      	lsls	r3, r1, #15
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b83      	lsrs	r3, r0, #14
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x52>
 8000182:	038b      	lsls	r3, r1, #14
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b43      	lsrs	r3, r0, #13
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x5e>
 800018e:	034b      	lsls	r3, r1, #13
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b03      	lsrs	r3, r0, #12
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x6a>
 800019a:	030b      	lsls	r3, r1, #12
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0ac3      	lsrs	r3, r0, #11
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x76>
 80001a6:	02cb      	lsls	r3, r1, #11
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a83      	lsrs	r3, r0, #10
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x82>
 80001b2:	028b      	lsls	r3, r1, #10
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a43      	lsrs	r3, r0, #9
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x8e>
 80001be:	024b      	lsls	r3, r1, #9
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a03      	lsrs	r3, r0, #8
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x9a>
 80001ca:	020b      	lsls	r3, r1, #8
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	d2cd      	bcs.n	800016e <__udivsi3+0x3a>
 80001d2:	09c3      	lsrs	r3, r0, #7
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xa8>
 80001d8:	01cb      	lsls	r3, r1, #7
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0983      	lsrs	r3, r0, #6
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xb4>
 80001e4:	018b      	lsls	r3, r1, #6
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0943      	lsrs	r3, r0, #5
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xc0>
 80001f0:	014b      	lsls	r3, r1, #5
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0903      	lsrs	r3, r0, #4
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xcc>
 80001fc:	010b      	lsls	r3, r1, #4
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	08c3      	lsrs	r3, r0, #3
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xd8>
 8000208:	00cb      	lsls	r3, r1, #3
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0883      	lsrs	r3, r0, #2
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xe4>
 8000214:	008b      	lsls	r3, r1, #2
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0843      	lsrs	r3, r0, #1
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xf0>
 8000220:	004b      	lsls	r3, r1, #1
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	1a41      	subs	r1, r0, r1
 8000228:	d200      	bcs.n	800022c <__udivsi3+0xf8>
 800022a:	4601      	mov	r1, r0
 800022c:	4152      	adcs	r2, r2
 800022e:	4610      	mov	r0, r2
 8000230:	4770      	bx	lr
 8000232:	e7ff      	b.n	8000234 <__udivsi3+0x100>
 8000234:	b501      	push	{r0, lr}
 8000236:	2000      	movs	r0, #0
 8000238:	f000 f8f0 	bl	800041c <__aeabi_idiv0>
 800023c:	bd02      	pop	{r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_uidivmod>:
 8000240:	2900      	cmp	r1, #0
 8000242:	d0f7      	beq.n	8000234 <__udivsi3+0x100>
 8000244:	e776      	b.n	8000134 <__udivsi3>
 8000246:	4770      	bx	lr

08000248 <__divsi3>:
 8000248:	4603      	mov	r3, r0
 800024a:	430b      	orrs	r3, r1
 800024c:	d47f      	bmi.n	800034e <__divsi3+0x106>
 800024e:	2200      	movs	r2, #0
 8000250:	0843      	lsrs	r3, r0, #1
 8000252:	428b      	cmp	r3, r1
 8000254:	d374      	bcc.n	8000340 <__divsi3+0xf8>
 8000256:	0903      	lsrs	r3, r0, #4
 8000258:	428b      	cmp	r3, r1
 800025a:	d35f      	bcc.n	800031c <__divsi3+0xd4>
 800025c:	0a03      	lsrs	r3, r0, #8
 800025e:	428b      	cmp	r3, r1
 8000260:	d344      	bcc.n	80002ec <__divsi3+0xa4>
 8000262:	0b03      	lsrs	r3, r0, #12
 8000264:	428b      	cmp	r3, r1
 8000266:	d328      	bcc.n	80002ba <__divsi3+0x72>
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d30d      	bcc.n	800028a <__divsi3+0x42>
 800026e:	22ff      	movs	r2, #255	; 0xff
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	ba12      	rev	r2, r2
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__divsi3+0x38>
 800027a:	1212      	asrs	r2, r2, #8
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	d065      	beq.n	800034c <__divsi3+0x104>
 8000280:	0b03      	lsrs	r3, r0, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d319      	bcc.n	80002ba <__divsi3+0x72>
 8000286:	e000      	b.n	800028a <__divsi3+0x42>
 8000288:	0a09      	lsrs	r1, r1, #8
 800028a:	0bc3      	lsrs	r3, r0, #15
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x4c>
 8000290:	03cb      	lsls	r3, r1, #15
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b83      	lsrs	r3, r0, #14
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x58>
 800029c:	038b      	lsls	r3, r1, #14
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b43      	lsrs	r3, r0, #13
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x64>
 80002a8:	034b      	lsls	r3, r1, #13
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b03      	lsrs	r3, r0, #12
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x70>
 80002b4:	030b      	lsls	r3, r1, #12
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0ac3      	lsrs	r3, r0, #11
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x7c>
 80002c0:	02cb      	lsls	r3, r1, #11
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a83      	lsrs	r3, r0, #10
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x88>
 80002cc:	028b      	lsls	r3, r1, #10
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a43      	lsrs	r3, r0, #9
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x94>
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a03      	lsrs	r3, r0, #8
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0xa0>
 80002e4:	020b      	lsls	r3, r1, #8
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	d2cd      	bcs.n	8000288 <__divsi3+0x40>
 80002ec:	09c3      	lsrs	r3, r0, #7
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xae>
 80002f2:	01cb      	lsls	r3, r1, #7
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0983      	lsrs	r3, r0, #6
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xba>
 80002fe:	018b      	lsls	r3, r1, #6
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0943      	lsrs	r3, r0, #5
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xc6>
 800030a:	014b      	lsls	r3, r1, #5
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0903      	lsrs	r3, r0, #4
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xd2>
 8000316:	010b      	lsls	r3, r1, #4
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	08c3      	lsrs	r3, r0, #3
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xde>
 8000322:	00cb      	lsls	r3, r1, #3
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0883      	lsrs	r3, r0, #2
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xea>
 800032e:	008b      	lsls	r3, r1, #2
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0843      	lsrs	r3, r0, #1
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xf6>
 800033a:	004b      	lsls	r3, r1, #1
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	1a41      	subs	r1, r0, r1
 8000342:	d200      	bcs.n	8000346 <__divsi3+0xfe>
 8000344:	4601      	mov	r1, r0
 8000346:	4152      	adcs	r2, r2
 8000348:	4610      	mov	r0, r2
 800034a:	4770      	bx	lr
 800034c:	e05d      	b.n	800040a <__divsi3+0x1c2>
 800034e:	0fca      	lsrs	r2, r1, #31
 8000350:	d000      	beq.n	8000354 <__divsi3+0x10c>
 8000352:	4249      	negs	r1, r1
 8000354:	1003      	asrs	r3, r0, #32
 8000356:	d300      	bcc.n	800035a <__divsi3+0x112>
 8000358:	4240      	negs	r0, r0
 800035a:	4053      	eors	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	469c      	mov	ip, r3
 8000360:	0903      	lsrs	r3, r0, #4
 8000362:	428b      	cmp	r3, r1
 8000364:	d32d      	bcc.n	80003c2 <__divsi3+0x17a>
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d312      	bcc.n	8000392 <__divsi3+0x14a>
 800036c:	22fc      	movs	r2, #252	; 0xfc
 800036e:	0189      	lsls	r1, r1, #6
 8000370:	ba12      	rev	r2, r2
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d30c      	bcc.n	8000392 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d308      	bcc.n	8000392 <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d304      	bcc.n	8000392 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	d03a      	beq.n	8000402 <__divsi3+0x1ba>
 800038c:	1192      	asrs	r2, r2, #6
 800038e:	e000      	b.n	8000392 <__divsi3+0x14a>
 8000390:	0989      	lsrs	r1, r1, #6
 8000392:	09c3      	lsrs	r3, r0, #7
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x154>
 8000398:	01cb      	lsls	r3, r1, #7
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0983      	lsrs	r3, r0, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x160>
 80003a4:	018b      	lsls	r3, r1, #6
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0943      	lsrs	r3, r0, #5
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x16c>
 80003b0:	014b      	lsls	r3, r1, #5
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0903      	lsrs	r3, r0, #4
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x178>
 80003bc:	010b      	lsls	r3, r1, #4
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	08c3      	lsrs	r3, r0, #3
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x184>
 80003c8:	00cb      	lsls	r3, r1, #3
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0883      	lsrs	r3, r0, #2
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x190>
 80003d4:	008b      	lsls	r3, r1, #2
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	d2d9      	bcs.n	8000390 <__divsi3+0x148>
 80003dc:	0843      	lsrs	r3, r0, #1
 80003de:	428b      	cmp	r3, r1
 80003e0:	d301      	bcc.n	80003e6 <__divsi3+0x19e>
 80003e2:	004b      	lsls	r3, r1, #1
 80003e4:	1ac0      	subs	r0, r0, r3
 80003e6:	4152      	adcs	r2, r2
 80003e8:	1a41      	subs	r1, r0, r1
 80003ea:	d200      	bcs.n	80003ee <__divsi3+0x1a6>
 80003ec:	4601      	mov	r1, r0
 80003ee:	4663      	mov	r3, ip
 80003f0:	4152      	adcs	r2, r2
 80003f2:	105b      	asrs	r3, r3, #1
 80003f4:	4610      	mov	r0, r2
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x1b4>
 80003f8:	4240      	negs	r0, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d500      	bpl.n	8000400 <__divsi3+0x1b8>
 80003fe:	4249      	negs	r1, r1
 8000400:	4770      	bx	lr
 8000402:	4663      	mov	r3, ip
 8000404:	105b      	asrs	r3, r3, #1
 8000406:	d300      	bcc.n	800040a <__divsi3+0x1c2>
 8000408:	4240      	negs	r0, r0
 800040a:	b501      	push	{r0, lr}
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f805 	bl	800041c <__aeabi_idiv0>
 8000412:	bd02      	pop	{r1, pc}

08000414 <__aeabi_idivmod>:
 8000414:	2900      	cmp	r1, #0
 8000416:	d0f8      	beq.n	800040a <__divsi3+0x1c2>
 8000418:	e716      	b.n	8000248 <__divsi3>
 800041a:	4770      	bx	lr

0800041c <__aeabi_idiv0>:
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_cdrcmple>:
 8000420:	4684      	mov	ip, r0
 8000422:	0010      	movs	r0, r2
 8000424:	4662      	mov	r2, ip
 8000426:	468c      	mov	ip, r1
 8000428:	0019      	movs	r1, r3
 800042a:	4663      	mov	r3, ip
 800042c:	e000      	b.n	8000430 <__aeabi_cdcmpeq>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdcmpeq>:
 8000430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000432:	f001 f9b9 	bl	80017a8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	d401      	bmi.n	800043e <__aeabi_cdcmpeq+0xe>
 800043a:	2100      	movs	r1, #0
 800043c:	42c8      	cmn	r0, r1
 800043e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000440 <__aeabi_dcmpeq>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f909 	bl	8001658 <__eqdf2>
 8000446:	4240      	negs	r0, r0
 8000448:	3001      	adds	r0, #1
 800044a:	bd10      	pop	{r4, pc}

0800044c <__aeabi_dcmplt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f9ab 	bl	80017a8 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	db01      	blt.n	800045a <__aeabi_dcmplt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_dcmple>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f9a1 	bl	80017a8 <__ledf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dd01      	ble.n	800046e <__aeabi_dcmple+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_dcmpgt>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 f931 	bl	80016dc <__gedf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	dc01      	bgt.n	8000482 <__aeabi_dcmpgt+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_dcmpge>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f001 f927 	bl	80016dc <__gedf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	da01      	bge.n	8000496 <__aeabi_dcmpge+0xe>
 8000492:	2000      	movs	r0, #0
 8000494:	bd10      	pop	{r4, pc}
 8000496:	2001      	movs	r0, #1
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_fdiv>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	464f      	mov	r7, r9
 80004a0:	4646      	mov	r6, r8
 80004a2:	46d6      	mov	lr, sl
 80004a4:	0245      	lsls	r5, r0, #9
 80004a6:	b5c0      	push	{r6, r7, lr}
 80004a8:	0047      	lsls	r7, r0, #1
 80004aa:	1c0c      	adds	r4, r1, #0
 80004ac:	0a6d      	lsrs	r5, r5, #9
 80004ae:	0e3f      	lsrs	r7, r7, #24
 80004b0:	0fc6      	lsrs	r6, r0, #31
 80004b2:	2f00      	cmp	r7, #0
 80004b4:	d100      	bne.n	80004b8 <__aeabi_fdiv+0x1c>
 80004b6:	e070      	b.n	800059a <__aeabi_fdiv+0xfe>
 80004b8:	2fff      	cmp	r7, #255	; 0xff
 80004ba:	d100      	bne.n	80004be <__aeabi_fdiv+0x22>
 80004bc:	e075      	b.n	80005aa <__aeabi_fdiv+0x10e>
 80004be:	00eb      	lsls	r3, r5, #3
 80004c0:	2580      	movs	r5, #128	; 0x80
 80004c2:	04ed      	lsls	r5, r5, #19
 80004c4:	431d      	orrs	r5, r3
 80004c6:	2300      	movs	r3, #0
 80004c8:	4699      	mov	r9, r3
 80004ca:	469a      	mov	sl, r3
 80004cc:	3f7f      	subs	r7, #127	; 0x7f
 80004ce:	0260      	lsls	r0, r4, #9
 80004d0:	0a43      	lsrs	r3, r0, #9
 80004d2:	4698      	mov	r8, r3
 80004d4:	0063      	lsls	r3, r4, #1
 80004d6:	0e1b      	lsrs	r3, r3, #24
 80004d8:	0fe4      	lsrs	r4, r4, #31
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d04e      	beq.n	800057c <__aeabi_fdiv+0xe0>
 80004de:	2bff      	cmp	r3, #255	; 0xff
 80004e0:	d046      	beq.n	8000570 <__aeabi_fdiv+0xd4>
 80004e2:	4642      	mov	r2, r8
 80004e4:	00d0      	lsls	r0, r2, #3
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	04d2      	lsls	r2, r2, #19
 80004ea:	4302      	orrs	r2, r0
 80004ec:	4690      	mov	r8, r2
 80004ee:	2200      	movs	r2, #0
 80004f0:	3b7f      	subs	r3, #127	; 0x7f
 80004f2:	0031      	movs	r1, r6
 80004f4:	1aff      	subs	r7, r7, r3
 80004f6:	464b      	mov	r3, r9
 80004f8:	4061      	eors	r1, r4
 80004fa:	b2c9      	uxtb	r1, r1
 80004fc:	4313      	orrs	r3, r2
 80004fe:	2b0f      	cmp	r3, #15
 8000500:	d900      	bls.n	8000504 <__aeabi_fdiv+0x68>
 8000502:	e0b5      	b.n	8000670 <__aeabi_fdiv+0x1d4>
 8000504:	486e      	ldr	r0, [pc, #440]	; (80006c0 <__aeabi_fdiv+0x224>)
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	58c3      	ldr	r3, [r0, r3]
 800050a:	469f      	mov	pc, r3
 800050c:	2300      	movs	r3, #0
 800050e:	4698      	mov	r8, r3
 8000510:	0026      	movs	r6, r4
 8000512:	4645      	mov	r5, r8
 8000514:	4692      	mov	sl, r2
 8000516:	4653      	mov	r3, sl
 8000518:	2b02      	cmp	r3, #2
 800051a:	d100      	bne.n	800051e <__aeabi_fdiv+0x82>
 800051c:	e089      	b.n	8000632 <__aeabi_fdiv+0x196>
 800051e:	2b03      	cmp	r3, #3
 8000520:	d100      	bne.n	8000524 <__aeabi_fdiv+0x88>
 8000522:	e09e      	b.n	8000662 <__aeabi_fdiv+0x1c6>
 8000524:	2b01      	cmp	r3, #1
 8000526:	d018      	beq.n	800055a <__aeabi_fdiv+0xbe>
 8000528:	003b      	movs	r3, r7
 800052a:	337f      	adds	r3, #127	; 0x7f
 800052c:	2b00      	cmp	r3, #0
 800052e:	dd69      	ble.n	8000604 <__aeabi_fdiv+0x168>
 8000530:	076a      	lsls	r2, r5, #29
 8000532:	d004      	beq.n	800053e <__aeabi_fdiv+0xa2>
 8000534:	220f      	movs	r2, #15
 8000536:	402a      	ands	r2, r5
 8000538:	2a04      	cmp	r2, #4
 800053a:	d000      	beq.n	800053e <__aeabi_fdiv+0xa2>
 800053c:	3504      	adds	r5, #4
 800053e:	012a      	lsls	r2, r5, #4
 8000540:	d503      	bpl.n	800054a <__aeabi_fdiv+0xae>
 8000542:	4b60      	ldr	r3, [pc, #384]	; (80006c4 <__aeabi_fdiv+0x228>)
 8000544:	401d      	ands	r5, r3
 8000546:	003b      	movs	r3, r7
 8000548:	3380      	adds	r3, #128	; 0x80
 800054a:	2bfe      	cmp	r3, #254	; 0xfe
 800054c:	dd00      	ble.n	8000550 <__aeabi_fdiv+0xb4>
 800054e:	e070      	b.n	8000632 <__aeabi_fdiv+0x196>
 8000550:	01ad      	lsls	r5, r5, #6
 8000552:	0a6d      	lsrs	r5, r5, #9
 8000554:	b2d8      	uxtb	r0, r3
 8000556:	e002      	b.n	800055e <__aeabi_fdiv+0xc2>
 8000558:	000e      	movs	r6, r1
 800055a:	2000      	movs	r0, #0
 800055c:	2500      	movs	r5, #0
 800055e:	05c0      	lsls	r0, r0, #23
 8000560:	4328      	orrs	r0, r5
 8000562:	07f6      	lsls	r6, r6, #31
 8000564:	4330      	orrs	r0, r6
 8000566:	bce0      	pop	{r5, r6, r7}
 8000568:	46ba      	mov	sl, r7
 800056a:	46b1      	mov	r9, r6
 800056c:	46a8      	mov	r8, r5
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	4643      	mov	r3, r8
 8000572:	2b00      	cmp	r3, #0
 8000574:	d13f      	bne.n	80005f6 <__aeabi_fdiv+0x15a>
 8000576:	2202      	movs	r2, #2
 8000578:	3fff      	subs	r7, #255	; 0xff
 800057a:	e003      	b.n	8000584 <__aeabi_fdiv+0xe8>
 800057c:	4643      	mov	r3, r8
 800057e:	2b00      	cmp	r3, #0
 8000580:	d12d      	bne.n	80005de <__aeabi_fdiv+0x142>
 8000582:	2201      	movs	r2, #1
 8000584:	0031      	movs	r1, r6
 8000586:	464b      	mov	r3, r9
 8000588:	4061      	eors	r1, r4
 800058a:	b2c9      	uxtb	r1, r1
 800058c:	4313      	orrs	r3, r2
 800058e:	2b0f      	cmp	r3, #15
 8000590:	d834      	bhi.n	80005fc <__aeabi_fdiv+0x160>
 8000592:	484d      	ldr	r0, [pc, #308]	; (80006c8 <__aeabi_fdiv+0x22c>)
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	58c3      	ldr	r3, [r0, r3]
 8000598:	469f      	mov	pc, r3
 800059a:	2d00      	cmp	r5, #0
 800059c:	d113      	bne.n	80005c6 <__aeabi_fdiv+0x12a>
 800059e:	2304      	movs	r3, #4
 80005a0:	4699      	mov	r9, r3
 80005a2:	3b03      	subs	r3, #3
 80005a4:	2700      	movs	r7, #0
 80005a6:	469a      	mov	sl, r3
 80005a8:	e791      	b.n	80004ce <__aeabi_fdiv+0x32>
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d105      	bne.n	80005ba <__aeabi_fdiv+0x11e>
 80005ae:	2308      	movs	r3, #8
 80005b0:	4699      	mov	r9, r3
 80005b2:	3b06      	subs	r3, #6
 80005b4:	27ff      	movs	r7, #255	; 0xff
 80005b6:	469a      	mov	sl, r3
 80005b8:	e789      	b.n	80004ce <__aeabi_fdiv+0x32>
 80005ba:	230c      	movs	r3, #12
 80005bc:	4699      	mov	r9, r3
 80005be:	3b09      	subs	r3, #9
 80005c0:	27ff      	movs	r7, #255	; 0xff
 80005c2:	469a      	mov	sl, r3
 80005c4:	e783      	b.n	80004ce <__aeabi_fdiv+0x32>
 80005c6:	0028      	movs	r0, r5
 80005c8:	f002 f8ca 	bl	8002760 <__clzsi2>
 80005cc:	2776      	movs	r7, #118	; 0x76
 80005ce:	1f43      	subs	r3, r0, #5
 80005d0:	409d      	lsls	r5, r3
 80005d2:	2300      	movs	r3, #0
 80005d4:	427f      	negs	r7, r7
 80005d6:	4699      	mov	r9, r3
 80005d8:	469a      	mov	sl, r3
 80005da:	1a3f      	subs	r7, r7, r0
 80005dc:	e777      	b.n	80004ce <__aeabi_fdiv+0x32>
 80005de:	4640      	mov	r0, r8
 80005e0:	f002 f8be 	bl	8002760 <__clzsi2>
 80005e4:	4642      	mov	r2, r8
 80005e6:	1f43      	subs	r3, r0, #5
 80005e8:	409a      	lsls	r2, r3
 80005ea:	2376      	movs	r3, #118	; 0x76
 80005ec:	425b      	negs	r3, r3
 80005ee:	4690      	mov	r8, r2
 80005f0:	1a1b      	subs	r3, r3, r0
 80005f2:	2200      	movs	r2, #0
 80005f4:	e77d      	b.n	80004f2 <__aeabi_fdiv+0x56>
 80005f6:	23ff      	movs	r3, #255	; 0xff
 80005f8:	2203      	movs	r2, #3
 80005fa:	e77a      	b.n	80004f2 <__aeabi_fdiv+0x56>
 80005fc:	000e      	movs	r6, r1
 80005fe:	20ff      	movs	r0, #255	; 0xff
 8000600:	2500      	movs	r5, #0
 8000602:	e7ac      	b.n	800055e <__aeabi_fdiv+0xc2>
 8000604:	2001      	movs	r0, #1
 8000606:	1ac0      	subs	r0, r0, r3
 8000608:	281b      	cmp	r0, #27
 800060a:	dca6      	bgt.n	800055a <__aeabi_fdiv+0xbe>
 800060c:	379e      	adds	r7, #158	; 0x9e
 800060e:	002a      	movs	r2, r5
 8000610:	40bd      	lsls	r5, r7
 8000612:	40c2      	lsrs	r2, r0
 8000614:	1e6b      	subs	r3, r5, #1
 8000616:	419d      	sbcs	r5, r3
 8000618:	4315      	orrs	r5, r2
 800061a:	076b      	lsls	r3, r5, #29
 800061c:	d004      	beq.n	8000628 <__aeabi_fdiv+0x18c>
 800061e:	230f      	movs	r3, #15
 8000620:	402b      	ands	r3, r5
 8000622:	2b04      	cmp	r3, #4
 8000624:	d000      	beq.n	8000628 <__aeabi_fdiv+0x18c>
 8000626:	3504      	adds	r5, #4
 8000628:	016b      	lsls	r3, r5, #5
 800062a:	d544      	bpl.n	80006b6 <__aeabi_fdiv+0x21a>
 800062c:	2001      	movs	r0, #1
 800062e:	2500      	movs	r5, #0
 8000630:	e795      	b.n	800055e <__aeabi_fdiv+0xc2>
 8000632:	20ff      	movs	r0, #255	; 0xff
 8000634:	2500      	movs	r5, #0
 8000636:	e792      	b.n	800055e <__aeabi_fdiv+0xc2>
 8000638:	2580      	movs	r5, #128	; 0x80
 800063a:	2600      	movs	r6, #0
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	03ed      	lsls	r5, r5, #15
 8000640:	e78d      	b.n	800055e <__aeabi_fdiv+0xc2>
 8000642:	2300      	movs	r3, #0
 8000644:	4698      	mov	r8, r3
 8000646:	2080      	movs	r0, #128	; 0x80
 8000648:	03c0      	lsls	r0, r0, #15
 800064a:	4205      	tst	r5, r0
 800064c:	d009      	beq.n	8000662 <__aeabi_fdiv+0x1c6>
 800064e:	4643      	mov	r3, r8
 8000650:	4203      	tst	r3, r0
 8000652:	d106      	bne.n	8000662 <__aeabi_fdiv+0x1c6>
 8000654:	4645      	mov	r5, r8
 8000656:	4305      	orrs	r5, r0
 8000658:	026d      	lsls	r5, r5, #9
 800065a:	0026      	movs	r6, r4
 800065c:	20ff      	movs	r0, #255	; 0xff
 800065e:	0a6d      	lsrs	r5, r5, #9
 8000660:	e77d      	b.n	800055e <__aeabi_fdiv+0xc2>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	03c0      	lsls	r0, r0, #15
 8000666:	4305      	orrs	r5, r0
 8000668:	026d      	lsls	r5, r5, #9
 800066a:	20ff      	movs	r0, #255	; 0xff
 800066c:	0a6d      	lsrs	r5, r5, #9
 800066e:	e776      	b.n	800055e <__aeabi_fdiv+0xc2>
 8000670:	4642      	mov	r2, r8
 8000672:	016b      	lsls	r3, r5, #5
 8000674:	0150      	lsls	r0, r2, #5
 8000676:	4283      	cmp	r3, r0
 8000678:	d219      	bcs.n	80006ae <__aeabi_fdiv+0x212>
 800067a:	221b      	movs	r2, #27
 800067c:	2500      	movs	r5, #0
 800067e:	3f01      	subs	r7, #1
 8000680:	2601      	movs	r6, #1
 8000682:	001c      	movs	r4, r3
 8000684:	006d      	lsls	r5, r5, #1
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2c00      	cmp	r4, #0
 800068a:	db01      	blt.n	8000690 <__aeabi_fdiv+0x1f4>
 800068c:	4298      	cmp	r0, r3
 800068e:	d801      	bhi.n	8000694 <__aeabi_fdiv+0x1f8>
 8000690:	1a1b      	subs	r3, r3, r0
 8000692:	4335      	orrs	r5, r6
 8000694:	3a01      	subs	r2, #1
 8000696:	2a00      	cmp	r2, #0
 8000698:	d1f3      	bne.n	8000682 <__aeabi_fdiv+0x1e6>
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	4193      	sbcs	r3, r2
 800069e:	431d      	orrs	r5, r3
 80006a0:	003b      	movs	r3, r7
 80006a2:	337f      	adds	r3, #127	; 0x7f
 80006a4:	000e      	movs	r6, r1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dd00      	ble.n	80006ac <__aeabi_fdiv+0x210>
 80006aa:	e741      	b.n	8000530 <__aeabi_fdiv+0x94>
 80006ac:	e7aa      	b.n	8000604 <__aeabi_fdiv+0x168>
 80006ae:	221a      	movs	r2, #26
 80006b0:	2501      	movs	r5, #1
 80006b2:	1a1b      	subs	r3, r3, r0
 80006b4:	e7e4      	b.n	8000680 <__aeabi_fdiv+0x1e4>
 80006b6:	01ad      	lsls	r5, r5, #6
 80006b8:	2000      	movs	r0, #0
 80006ba:	0a6d      	lsrs	r5, r5, #9
 80006bc:	e74f      	b.n	800055e <__aeabi_fdiv+0xc2>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	0800b098 	.word	0x0800b098
 80006c4:	f7ffffff 	.word	0xf7ffffff
 80006c8:	0800b0d8 	.word	0x0800b0d8

080006cc <__aeabi_fmul>:
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	464f      	mov	r7, r9
 80006d0:	4646      	mov	r6, r8
 80006d2:	46d6      	mov	lr, sl
 80006d4:	0244      	lsls	r4, r0, #9
 80006d6:	0045      	lsls	r5, r0, #1
 80006d8:	b5c0      	push	{r6, r7, lr}
 80006da:	0a64      	lsrs	r4, r4, #9
 80006dc:	1c0f      	adds	r7, r1, #0
 80006de:	0e2d      	lsrs	r5, r5, #24
 80006e0:	0fc6      	lsrs	r6, r0, #31
 80006e2:	2d00      	cmp	r5, #0
 80006e4:	d100      	bne.n	80006e8 <__aeabi_fmul+0x1c>
 80006e6:	e08d      	b.n	8000804 <__aeabi_fmul+0x138>
 80006e8:	2dff      	cmp	r5, #255	; 0xff
 80006ea:	d100      	bne.n	80006ee <__aeabi_fmul+0x22>
 80006ec:	e092      	b.n	8000814 <__aeabi_fmul+0x148>
 80006ee:	2300      	movs	r3, #0
 80006f0:	2080      	movs	r0, #128	; 0x80
 80006f2:	4699      	mov	r9, r3
 80006f4:	469a      	mov	sl, r3
 80006f6:	00e4      	lsls	r4, r4, #3
 80006f8:	04c0      	lsls	r0, r0, #19
 80006fa:	4304      	orrs	r4, r0
 80006fc:	3d7f      	subs	r5, #127	; 0x7f
 80006fe:	0278      	lsls	r0, r7, #9
 8000700:	0a43      	lsrs	r3, r0, #9
 8000702:	4698      	mov	r8, r3
 8000704:	007b      	lsls	r3, r7, #1
 8000706:	0e1b      	lsrs	r3, r3, #24
 8000708:	0fff      	lsrs	r7, r7, #31
 800070a:	2b00      	cmp	r3, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_fmul+0x44>
 800070e:	e070      	b.n	80007f2 <__aeabi_fmul+0x126>
 8000710:	2bff      	cmp	r3, #255	; 0xff
 8000712:	d100      	bne.n	8000716 <__aeabi_fmul+0x4a>
 8000714:	e086      	b.n	8000824 <__aeabi_fmul+0x158>
 8000716:	4642      	mov	r2, r8
 8000718:	00d0      	lsls	r0, r2, #3
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	3b7f      	subs	r3, #127	; 0x7f
 800071e:	18ed      	adds	r5, r5, r3
 8000720:	2300      	movs	r3, #0
 8000722:	04d2      	lsls	r2, r2, #19
 8000724:	4302      	orrs	r2, r0
 8000726:	4690      	mov	r8, r2
 8000728:	469c      	mov	ip, r3
 800072a:	0031      	movs	r1, r6
 800072c:	464b      	mov	r3, r9
 800072e:	4079      	eors	r1, r7
 8000730:	1c68      	adds	r0, r5, #1
 8000732:	2b0f      	cmp	r3, #15
 8000734:	d81c      	bhi.n	8000770 <__aeabi_fmul+0xa4>
 8000736:	4a76      	ldr	r2, [pc, #472]	; (8000910 <__aeabi_fmul+0x244>)
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	58d3      	ldr	r3, [r2, r3]
 800073c:	469f      	mov	pc, r3
 800073e:	0039      	movs	r1, r7
 8000740:	4644      	mov	r4, r8
 8000742:	46e2      	mov	sl, ip
 8000744:	4653      	mov	r3, sl
 8000746:	2b02      	cmp	r3, #2
 8000748:	d00f      	beq.n	800076a <__aeabi_fmul+0x9e>
 800074a:	2b03      	cmp	r3, #3
 800074c:	d100      	bne.n	8000750 <__aeabi_fmul+0x84>
 800074e:	e0d7      	b.n	8000900 <__aeabi_fmul+0x234>
 8000750:	2b01      	cmp	r3, #1
 8000752:	d137      	bne.n	80007c4 <__aeabi_fmul+0xf8>
 8000754:	2000      	movs	r0, #0
 8000756:	2400      	movs	r4, #0
 8000758:	05c0      	lsls	r0, r0, #23
 800075a:	4320      	orrs	r0, r4
 800075c:	07c9      	lsls	r1, r1, #31
 800075e:	4308      	orrs	r0, r1
 8000760:	bce0      	pop	{r5, r6, r7}
 8000762:	46ba      	mov	sl, r7
 8000764:	46b1      	mov	r9, r6
 8000766:	46a8      	mov	r8, r5
 8000768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800076a:	20ff      	movs	r0, #255	; 0xff
 800076c:	2400      	movs	r4, #0
 800076e:	e7f3      	b.n	8000758 <__aeabi_fmul+0x8c>
 8000770:	0c26      	lsrs	r6, r4, #16
 8000772:	0424      	lsls	r4, r4, #16
 8000774:	0c22      	lsrs	r2, r4, #16
 8000776:	4644      	mov	r4, r8
 8000778:	0424      	lsls	r4, r4, #16
 800077a:	0c24      	lsrs	r4, r4, #16
 800077c:	4643      	mov	r3, r8
 800077e:	0027      	movs	r7, r4
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	4357      	muls	r7, r2
 8000784:	4374      	muls	r4, r6
 8000786:	435a      	muls	r2, r3
 8000788:	435e      	muls	r6, r3
 800078a:	1912      	adds	r2, r2, r4
 800078c:	0c3b      	lsrs	r3, r7, #16
 800078e:	189b      	adds	r3, r3, r2
 8000790:	429c      	cmp	r4, r3
 8000792:	d903      	bls.n	800079c <__aeabi_fmul+0xd0>
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	0252      	lsls	r2, r2, #9
 8000798:	4694      	mov	ip, r2
 800079a:	4466      	add	r6, ip
 800079c:	043f      	lsls	r7, r7, #16
 800079e:	041a      	lsls	r2, r3, #16
 80007a0:	0c3f      	lsrs	r7, r7, #16
 80007a2:	19d2      	adds	r2, r2, r7
 80007a4:	0194      	lsls	r4, r2, #6
 80007a6:	1e67      	subs	r7, r4, #1
 80007a8:	41bc      	sbcs	r4, r7
 80007aa:	0c1b      	lsrs	r3, r3, #16
 80007ac:	0e92      	lsrs	r2, r2, #26
 80007ae:	199b      	adds	r3, r3, r6
 80007b0:	4314      	orrs	r4, r2
 80007b2:	019b      	lsls	r3, r3, #6
 80007b4:	431c      	orrs	r4, r3
 80007b6:	011b      	lsls	r3, r3, #4
 80007b8:	d400      	bmi.n	80007bc <__aeabi_fmul+0xf0>
 80007ba:	e09b      	b.n	80008f4 <__aeabi_fmul+0x228>
 80007bc:	2301      	movs	r3, #1
 80007be:	0862      	lsrs	r2, r4, #1
 80007c0:	401c      	ands	r4, r3
 80007c2:	4314      	orrs	r4, r2
 80007c4:	0002      	movs	r2, r0
 80007c6:	327f      	adds	r2, #127	; 0x7f
 80007c8:	2a00      	cmp	r2, #0
 80007ca:	dd64      	ble.n	8000896 <__aeabi_fmul+0x1ca>
 80007cc:	0763      	lsls	r3, r4, #29
 80007ce:	d004      	beq.n	80007da <__aeabi_fmul+0x10e>
 80007d0:	230f      	movs	r3, #15
 80007d2:	4023      	ands	r3, r4
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d000      	beq.n	80007da <__aeabi_fmul+0x10e>
 80007d8:	3404      	adds	r4, #4
 80007da:	0123      	lsls	r3, r4, #4
 80007dc:	d503      	bpl.n	80007e6 <__aeabi_fmul+0x11a>
 80007de:	0002      	movs	r2, r0
 80007e0:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <__aeabi_fmul+0x248>)
 80007e2:	3280      	adds	r2, #128	; 0x80
 80007e4:	401c      	ands	r4, r3
 80007e6:	2afe      	cmp	r2, #254	; 0xfe
 80007e8:	dcbf      	bgt.n	800076a <__aeabi_fmul+0x9e>
 80007ea:	01a4      	lsls	r4, r4, #6
 80007ec:	0a64      	lsrs	r4, r4, #9
 80007ee:	b2d0      	uxtb	r0, r2
 80007f0:	e7b2      	b.n	8000758 <__aeabi_fmul+0x8c>
 80007f2:	4643      	mov	r3, r8
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d13d      	bne.n	8000874 <__aeabi_fmul+0x1a8>
 80007f8:	464a      	mov	r2, r9
 80007fa:	3301      	adds	r3, #1
 80007fc:	431a      	orrs	r2, r3
 80007fe:	4691      	mov	r9, r2
 8000800:	469c      	mov	ip, r3
 8000802:	e792      	b.n	800072a <__aeabi_fmul+0x5e>
 8000804:	2c00      	cmp	r4, #0
 8000806:	d129      	bne.n	800085c <__aeabi_fmul+0x190>
 8000808:	2304      	movs	r3, #4
 800080a:	4699      	mov	r9, r3
 800080c:	3b03      	subs	r3, #3
 800080e:	2500      	movs	r5, #0
 8000810:	469a      	mov	sl, r3
 8000812:	e774      	b.n	80006fe <__aeabi_fmul+0x32>
 8000814:	2c00      	cmp	r4, #0
 8000816:	d11b      	bne.n	8000850 <__aeabi_fmul+0x184>
 8000818:	2308      	movs	r3, #8
 800081a:	4699      	mov	r9, r3
 800081c:	3b06      	subs	r3, #6
 800081e:	25ff      	movs	r5, #255	; 0xff
 8000820:	469a      	mov	sl, r3
 8000822:	e76c      	b.n	80006fe <__aeabi_fmul+0x32>
 8000824:	4643      	mov	r3, r8
 8000826:	35ff      	adds	r5, #255	; 0xff
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10b      	bne.n	8000844 <__aeabi_fmul+0x178>
 800082c:	2302      	movs	r3, #2
 800082e:	464a      	mov	r2, r9
 8000830:	431a      	orrs	r2, r3
 8000832:	4691      	mov	r9, r2
 8000834:	469c      	mov	ip, r3
 8000836:	e778      	b.n	800072a <__aeabi_fmul+0x5e>
 8000838:	4653      	mov	r3, sl
 800083a:	0031      	movs	r1, r6
 800083c:	2b02      	cmp	r3, #2
 800083e:	d000      	beq.n	8000842 <__aeabi_fmul+0x176>
 8000840:	e783      	b.n	800074a <__aeabi_fmul+0x7e>
 8000842:	e792      	b.n	800076a <__aeabi_fmul+0x9e>
 8000844:	2303      	movs	r3, #3
 8000846:	464a      	mov	r2, r9
 8000848:	431a      	orrs	r2, r3
 800084a:	4691      	mov	r9, r2
 800084c:	469c      	mov	ip, r3
 800084e:	e76c      	b.n	800072a <__aeabi_fmul+0x5e>
 8000850:	230c      	movs	r3, #12
 8000852:	4699      	mov	r9, r3
 8000854:	3b09      	subs	r3, #9
 8000856:	25ff      	movs	r5, #255	; 0xff
 8000858:	469a      	mov	sl, r3
 800085a:	e750      	b.n	80006fe <__aeabi_fmul+0x32>
 800085c:	0020      	movs	r0, r4
 800085e:	f001 ff7f 	bl	8002760 <__clzsi2>
 8000862:	2576      	movs	r5, #118	; 0x76
 8000864:	1f43      	subs	r3, r0, #5
 8000866:	409c      	lsls	r4, r3
 8000868:	2300      	movs	r3, #0
 800086a:	426d      	negs	r5, r5
 800086c:	4699      	mov	r9, r3
 800086e:	469a      	mov	sl, r3
 8000870:	1a2d      	subs	r5, r5, r0
 8000872:	e744      	b.n	80006fe <__aeabi_fmul+0x32>
 8000874:	4640      	mov	r0, r8
 8000876:	f001 ff73 	bl	8002760 <__clzsi2>
 800087a:	4642      	mov	r2, r8
 800087c:	1f43      	subs	r3, r0, #5
 800087e:	409a      	lsls	r2, r3
 8000880:	2300      	movs	r3, #0
 8000882:	1a2d      	subs	r5, r5, r0
 8000884:	4690      	mov	r8, r2
 8000886:	469c      	mov	ip, r3
 8000888:	3d76      	subs	r5, #118	; 0x76
 800088a:	e74e      	b.n	800072a <__aeabi_fmul+0x5e>
 800088c:	2480      	movs	r4, #128	; 0x80
 800088e:	2100      	movs	r1, #0
 8000890:	20ff      	movs	r0, #255	; 0xff
 8000892:	03e4      	lsls	r4, r4, #15
 8000894:	e760      	b.n	8000758 <__aeabi_fmul+0x8c>
 8000896:	2301      	movs	r3, #1
 8000898:	1a9b      	subs	r3, r3, r2
 800089a:	2b1b      	cmp	r3, #27
 800089c:	dd00      	ble.n	80008a0 <__aeabi_fmul+0x1d4>
 800089e:	e759      	b.n	8000754 <__aeabi_fmul+0x88>
 80008a0:	0022      	movs	r2, r4
 80008a2:	309e      	adds	r0, #158	; 0x9e
 80008a4:	40da      	lsrs	r2, r3
 80008a6:	4084      	lsls	r4, r0
 80008a8:	0013      	movs	r3, r2
 80008aa:	1e62      	subs	r2, r4, #1
 80008ac:	4194      	sbcs	r4, r2
 80008ae:	431c      	orrs	r4, r3
 80008b0:	0763      	lsls	r3, r4, #29
 80008b2:	d004      	beq.n	80008be <__aeabi_fmul+0x1f2>
 80008b4:	230f      	movs	r3, #15
 80008b6:	4023      	ands	r3, r4
 80008b8:	2b04      	cmp	r3, #4
 80008ba:	d000      	beq.n	80008be <__aeabi_fmul+0x1f2>
 80008bc:	3404      	adds	r4, #4
 80008be:	0163      	lsls	r3, r4, #5
 80008c0:	d51a      	bpl.n	80008f8 <__aeabi_fmul+0x22c>
 80008c2:	2001      	movs	r0, #1
 80008c4:	2400      	movs	r4, #0
 80008c6:	e747      	b.n	8000758 <__aeabi_fmul+0x8c>
 80008c8:	2080      	movs	r0, #128	; 0x80
 80008ca:	03c0      	lsls	r0, r0, #15
 80008cc:	4204      	tst	r4, r0
 80008ce:	d009      	beq.n	80008e4 <__aeabi_fmul+0x218>
 80008d0:	4643      	mov	r3, r8
 80008d2:	4203      	tst	r3, r0
 80008d4:	d106      	bne.n	80008e4 <__aeabi_fmul+0x218>
 80008d6:	4644      	mov	r4, r8
 80008d8:	4304      	orrs	r4, r0
 80008da:	0264      	lsls	r4, r4, #9
 80008dc:	0039      	movs	r1, r7
 80008de:	20ff      	movs	r0, #255	; 0xff
 80008e0:	0a64      	lsrs	r4, r4, #9
 80008e2:	e739      	b.n	8000758 <__aeabi_fmul+0x8c>
 80008e4:	2080      	movs	r0, #128	; 0x80
 80008e6:	03c0      	lsls	r0, r0, #15
 80008e8:	4304      	orrs	r4, r0
 80008ea:	0264      	lsls	r4, r4, #9
 80008ec:	0031      	movs	r1, r6
 80008ee:	20ff      	movs	r0, #255	; 0xff
 80008f0:	0a64      	lsrs	r4, r4, #9
 80008f2:	e731      	b.n	8000758 <__aeabi_fmul+0x8c>
 80008f4:	0028      	movs	r0, r5
 80008f6:	e765      	b.n	80007c4 <__aeabi_fmul+0xf8>
 80008f8:	01a4      	lsls	r4, r4, #6
 80008fa:	2000      	movs	r0, #0
 80008fc:	0a64      	lsrs	r4, r4, #9
 80008fe:	e72b      	b.n	8000758 <__aeabi_fmul+0x8c>
 8000900:	2080      	movs	r0, #128	; 0x80
 8000902:	03c0      	lsls	r0, r0, #15
 8000904:	4304      	orrs	r4, r0
 8000906:	0264      	lsls	r4, r4, #9
 8000908:	20ff      	movs	r0, #255	; 0xff
 800090a:	0a64      	lsrs	r4, r4, #9
 800090c:	e724      	b.n	8000758 <__aeabi_fmul+0x8c>
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	0800b118 	.word	0x0800b118
 8000914:	f7ffffff 	.word	0xf7ffffff

08000918 <__aeabi_f2iz>:
 8000918:	0241      	lsls	r1, r0, #9
 800091a:	0042      	lsls	r2, r0, #1
 800091c:	0fc3      	lsrs	r3, r0, #31
 800091e:	0a49      	lsrs	r1, r1, #9
 8000920:	2000      	movs	r0, #0
 8000922:	0e12      	lsrs	r2, r2, #24
 8000924:	2a7e      	cmp	r2, #126	; 0x7e
 8000926:	dd03      	ble.n	8000930 <__aeabi_f2iz+0x18>
 8000928:	2a9d      	cmp	r2, #157	; 0x9d
 800092a:	dd02      	ble.n	8000932 <__aeabi_f2iz+0x1a>
 800092c:	4a09      	ldr	r2, [pc, #36]	; (8000954 <__aeabi_f2iz+0x3c>)
 800092e:	1898      	adds	r0, r3, r2
 8000930:	4770      	bx	lr
 8000932:	2080      	movs	r0, #128	; 0x80
 8000934:	0400      	lsls	r0, r0, #16
 8000936:	4301      	orrs	r1, r0
 8000938:	2a95      	cmp	r2, #149	; 0x95
 800093a:	dc07      	bgt.n	800094c <__aeabi_f2iz+0x34>
 800093c:	2096      	movs	r0, #150	; 0x96
 800093e:	1a82      	subs	r2, r0, r2
 8000940:	40d1      	lsrs	r1, r2
 8000942:	4248      	negs	r0, r1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f3      	bne.n	8000930 <__aeabi_f2iz+0x18>
 8000948:	0008      	movs	r0, r1
 800094a:	e7f1      	b.n	8000930 <__aeabi_f2iz+0x18>
 800094c:	3a96      	subs	r2, #150	; 0x96
 800094e:	4091      	lsls	r1, r2
 8000950:	e7f7      	b.n	8000942 <__aeabi_f2iz+0x2a>
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	7fffffff 	.word	0x7fffffff

08000958 <__aeabi_i2f>:
 8000958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095a:	2800      	cmp	r0, #0
 800095c:	d013      	beq.n	8000986 <__aeabi_i2f+0x2e>
 800095e:	17c3      	asrs	r3, r0, #31
 8000960:	18c6      	adds	r6, r0, r3
 8000962:	405e      	eors	r6, r3
 8000964:	0fc4      	lsrs	r4, r0, #31
 8000966:	0030      	movs	r0, r6
 8000968:	f001 fefa 	bl	8002760 <__clzsi2>
 800096c:	239e      	movs	r3, #158	; 0x9e
 800096e:	0005      	movs	r5, r0
 8000970:	1a1b      	subs	r3, r3, r0
 8000972:	2b96      	cmp	r3, #150	; 0x96
 8000974:	dc0f      	bgt.n	8000996 <__aeabi_i2f+0x3e>
 8000976:	2808      	cmp	r0, #8
 8000978:	dd01      	ble.n	800097e <__aeabi_i2f+0x26>
 800097a:	3d08      	subs	r5, #8
 800097c:	40ae      	lsls	r6, r5
 800097e:	0276      	lsls	r6, r6, #9
 8000980:	0a76      	lsrs	r6, r6, #9
 8000982:	b2d8      	uxtb	r0, r3
 8000984:	e002      	b.n	800098c <__aeabi_i2f+0x34>
 8000986:	2400      	movs	r4, #0
 8000988:	2000      	movs	r0, #0
 800098a:	2600      	movs	r6, #0
 800098c:	05c0      	lsls	r0, r0, #23
 800098e:	4330      	orrs	r0, r6
 8000990:	07e4      	lsls	r4, r4, #31
 8000992:	4320      	orrs	r0, r4
 8000994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000996:	2b99      	cmp	r3, #153	; 0x99
 8000998:	dd0c      	ble.n	80009b4 <__aeabi_i2f+0x5c>
 800099a:	2205      	movs	r2, #5
 800099c:	0031      	movs	r1, r6
 800099e:	1a12      	subs	r2, r2, r0
 80009a0:	40d1      	lsrs	r1, r2
 80009a2:	000a      	movs	r2, r1
 80009a4:	0001      	movs	r1, r0
 80009a6:	0030      	movs	r0, r6
 80009a8:	311b      	adds	r1, #27
 80009aa:	4088      	lsls	r0, r1
 80009ac:	1e41      	subs	r1, r0, #1
 80009ae:	4188      	sbcs	r0, r1
 80009b0:	4302      	orrs	r2, r0
 80009b2:	0016      	movs	r6, r2
 80009b4:	2d05      	cmp	r5, #5
 80009b6:	dc12      	bgt.n	80009de <__aeabi_i2f+0x86>
 80009b8:	0031      	movs	r1, r6
 80009ba:	4f0d      	ldr	r7, [pc, #52]	; (80009f0 <__aeabi_i2f+0x98>)
 80009bc:	4039      	ands	r1, r7
 80009be:	0772      	lsls	r2, r6, #29
 80009c0:	d009      	beq.n	80009d6 <__aeabi_i2f+0x7e>
 80009c2:	200f      	movs	r0, #15
 80009c4:	4030      	ands	r0, r6
 80009c6:	2804      	cmp	r0, #4
 80009c8:	d005      	beq.n	80009d6 <__aeabi_i2f+0x7e>
 80009ca:	3104      	adds	r1, #4
 80009cc:	014a      	lsls	r2, r1, #5
 80009ce:	d502      	bpl.n	80009d6 <__aeabi_i2f+0x7e>
 80009d0:	239f      	movs	r3, #159	; 0x9f
 80009d2:	4039      	ands	r1, r7
 80009d4:	1b5b      	subs	r3, r3, r5
 80009d6:	0189      	lsls	r1, r1, #6
 80009d8:	0a4e      	lsrs	r6, r1, #9
 80009da:	b2d8      	uxtb	r0, r3
 80009dc:	e7d6      	b.n	800098c <__aeabi_i2f+0x34>
 80009de:	1f6a      	subs	r2, r5, #5
 80009e0:	4096      	lsls	r6, r2
 80009e2:	0031      	movs	r1, r6
 80009e4:	4f02      	ldr	r7, [pc, #8]	; (80009f0 <__aeabi_i2f+0x98>)
 80009e6:	4039      	ands	r1, r7
 80009e8:	0772      	lsls	r2, r6, #29
 80009ea:	d0f4      	beq.n	80009d6 <__aeabi_i2f+0x7e>
 80009ec:	e7e9      	b.n	80009c2 <__aeabi_i2f+0x6a>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	fbffffff 	.word	0xfbffffff

080009f4 <__aeabi_dadd>:
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464f      	mov	r7, r9
 80009f8:	4646      	mov	r6, r8
 80009fa:	46d6      	mov	lr, sl
 80009fc:	000d      	movs	r5, r1
 80009fe:	0004      	movs	r4, r0
 8000a00:	b5c0      	push	{r6, r7, lr}
 8000a02:	001f      	movs	r7, r3
 8000a04:	0011      	movs	r1, r2
 8000a06:	0328      	lsls	r0, r5, #12
 8000a08:	0f62      	lsrs	r2, r4, #29
 8000a0a:	0a40      	lsrs	r0, r0, #9
 8000a0c:	4310      	orrs	r0, r2
 8000a0e:	007a      	lsls	r2, r7, #1
 8000a10:	0d52      	lsrs	r2, r2, #21
 8000a12:	00e3      	lsls	r3, r4, #3
 8000a14:	033c      	lsls	r4, r7, #12
 8000a16:	4691      	mov	r9, r2
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	0ffa      	lsrs	r2, r7, #31
 8000a1c:	0f4f      	lsrs	r7, r1, #29
 8000a1e:	006e      	lsls	r6, r5, #1
 8000a20:	4327      	orrs	r7, r4
 8000a22:	4692      	mov	sl, r2
 8000a24:	46b8      	mov	r8, r7
 8000a26:	0d76      	lsrs	r6, r6, #21
 8000a28:	0fed      	lsrs	r5, r5, #31
 8000a2a:	00c9      	lsls	r1, r1, #3
 8000a2c:	4295      	cmp	r5, r2
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x3e>
 8000a30:	e099      	b.n	8000b66 <__aeabi_dadd+0x172>
 8000a32:	464c      	mov	r4, r9
 8000a34:	1b34      	subs	r4, r6, r4
 8000a36:	46a4      	mov	ip, r4
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	dc00      	bgt.n	8000a3e <__aeabi_dadd+0x4a>
 8000a3c:	e07c      	b.n	8000b38 <__aeabi_dadd+0x144>
 8000a3e:	464a      	mov	r2, r9
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_dadd+0x52>
 8000a44:	e0b8      	b.n	8000bb8 <__aeabi_dadd+0x1c4>
 8000a46:	4ac5      	ldr	r2, [pc, #788]	; (8000d5c <__aeabi_dadd+0x368>)
 8000a48:	4296      	cmp	r6, r2
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_dadd+0x5a>
 8000a4c:	e11c      	b.n	8000c88 <__aeabi_dadd+0x294>
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	003c      	movs	r4, r7
 8000a52:	0412      	lsls	r2, r2, #16
 8000a54:	4314      	orrs	r4, r2
 8000a56:	46a0      	mov	r8, r4
 8000a58:	4662      	mov	r2, ip
 8000a5a:	2a38      	cmp	r2, #56	; 0x38
 8000a5c:	dd00      	ble.n	8000a60 <__aeabi_dadd+0x6c>
 8000a5e:	e161      	b.n	8000d24 <__aeabi_dadd+0x330>
 8000a60:	2a1f      	cmp	r2, #31
 8000a62:	dd00      	ble.n	8000a66 <__aeabi_dadd+0x72>
 8000a64:	e1cc      	b.n	8000e00 <__aeabi_dadd+0x40c>
 8000a66:	4664      	mov	r4, ip
 8000a68:	2220      	movs	r2, #32
 8000a6a:	1b12      	subs	r2, r2, r4
 8000a6c:	4644      	mov	r4, r8
 8000a6e:	4094      	lsls	r4, r2
 8000a70:	000f      	movs	r7, r1
 8000a72:	46a1      	mov	r9, r4
 8000a74:	4664      	mov	r4, ip
 8000a76:	4091      	lsls	r1, r2
 8000a78:	40e7      	lsrs	r7, r4
 8000a7a:	464c      	mov	r4, r9
 8000a7c:	1e4a      	subs	r2, r1, #1
 8000a7e:	4191      	sbcs	r1, r2
 8000a80:	433c      	orrs	r4, r7
 8000a82:	4642      	mov	r2, r8
 8000a84:	4321      	orrs	r1, r4
 8000a86:	4664      	mov	r4, ip
 8000a88:	40e2      	lsrs	r2, r4
 8000a8a:	1a80      	subs	r0, r0, r2
 8000a8c:	1a5c      	subs	r4, r3, r1
 8000a8e:	42a3      	cmp	r3, r4
 8000a90:	419b      	sbcs	r3, r3
 8000a92:	425f      	negs	r7, r3
 8000a94:	1bc7      	subs	r7, r0, r7
 8000a96:	023b      	lsls	r3, r7, #8
 8000a98:	d400      	bmi.n	8000a9c <__aeabi_dadd+0xa8>
 8000a9a:	e0d0      	b.n	8000c3e <__aeabi_dadd+0x24a>
 8000a9c:	027f      	lsls	r7, r7, #9
 8000a9e:	0a7f      	lsrs	r7, r7, #9
 8000aa0:	2f00      	cmp	r7, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_dadd+0xb2>
 8000aa4:	e0ff      	b.n	8000ca6 <__aeabi_dadd+0x2b2>
 8000aa6:	0038      	movs	r0, r7
 8000aa8:	f001 fe5a 	bl	8002760 <__clzsi2>
 8000aac:	0001      	movs	r1, r0
 8000aae:	3908      	subs	r1, #8
 8000ab0:	2320      	movs	r3, #32
 8000ab2:	0022      	movs	r2, r4
 8000ab4:	1a5b      	subs	r3, r3, r1
 8000ab6:	408f      	lsls	r7, r1
 8000ab8:	40da      	lsrs	r2, r3
 8000aba:	408c      	lsls	r4, r1
 8000abc:	4317      	orrs	r7, r2
 8000abe:	42b1      	cmp	r1, r6
 8000ac0:	da00      	bge.n	8000ac4 <__aeabi_dadd+0xd0>
 8000ac2:	e0ff      	b.n	8000cc4 <__aeabi_dadd+0x2d0>
 8000ac4:	1b89      	subs	r1, r1, r6
 8000ac6:	1c4b      	adds	r3, r1, #1
 8000ac8:	2b1f      	cmp	r3, #31
 8000aca:	dd00      	ble.n	8000ace <__aeabi_dadd+0xda>
 8000acc:	e0a8      	b.n	8000c20 <__aeabi_dadd+0x22c>
 8000ace:	2220      	movs	r2, #32
 8000ad0:	0039      	movs	r1, r7
 8000ad2:	1ad2      	subs	r2, r2, r3
 8000ad4:	0020      	movs	r0, r4
 8000ad6:	4094      	lsls	r4, r2
 8000ad8:	4091      	lsls	r1, r2
 8000ada:	40d8      	lsrs	r0, r3
 8000adc:	1e62      	subs	r2, r4, #1
 8000ade:	4194      	sbcs	r4, r2
 8000ae0:	40df      	lsrs	r7, r3
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	4301      	orrs	r1, r0
 8000ae6:	430c      	orrs	r4, r1
 8000ae8:	0763      	lsls	r3, r4, #29
 8000aea:	d009      	beq.n	8000b00 <__aeabi_dadd+0x10c>
 8000aec:	230f      	movs	r3, #15
 8000aee:	4023      	ands	r3, r4
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d005      	beq.n	8000b00 <__aeabi_dadd+0x10c>
 8000af4:	1d23      	adds	r3, r4, #4
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	41a4      	sbcs	r4, r4
 8000afa:	4264      	negs	r4, r4
 8000afc:	193f      	adds	r7, r7, r4
 8000afe:	001c      	movs	r4, r3
 8000b00:	023b      	lsls	r3, r7, #8
 8000b02:	d400      	bmi.n	8000b06 <__aeabi_dadd+0x112>
 8000b04:	e09e      	b.n	8000c44 <__aeabi_dadd+0x250>
 8000b06:	4b95      	ldr	r3, [pc, #596]	; (8000d5c <__aeabi_dadd+0x368>)
 8000b08:	3601      	adds	r6, #1
 8000b0a:	429e      	cmp	r6, r3
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_dadd+0x11c>
 8000b0e:	e0b7      	b.n	8000c80 <__aeabi_dadd+0x28c>
 8000b10:	4a93      	ldr	r2, [pc, #588]	; (8000d60 <__aeabi_dadd+0x36c>)
 8000b12:	08e4      	lsrs	r4, r4, #3
 8000b14:	4017      	ands	r7, r2
 8000b16:	077b      	lsls	r3, r7, #29
 8000b18:	0571      	lsls	r1, r6, #21
 8000b1a:	027f      	lsls	r7, r7, #9
 8000b1c:	4323      	orrs	r3, r4
 8000b1e:	0b3f      	lsrs	r7, r7, #12
 8000b20:	0d4a      	lsrs	r2, r1, #21
 8000b22:	0512      	lsls	r2, r2, #20
 8000b24:	433a      	orrs	r2, r7
 8000b26:	07ed      	lsls	r5, r5, #31
 8000b28:	432a      	orrs	r2, r5
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	0011      	movs	r1, r2
 8000b2e:	bce0      	pop	{r5, r6, r7}
 8000b30:	46ba      	mov	sl, r7
 8000b32:	46b1      	mov	r9, r6
 8000b34:	46a8      	mov	r8, r5
 8000b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d04b      	beq.n	8000bd4 <__aeabi_dadd+0x1e0>
 8000b3c:	464c      	mov	r4, r9
 8000b3e:	1ba4      	subs	r4, r4, r6
 8000b40:	46a4      	mov	ip, r4
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d000      	beq.n	8000b48 <__aeabi_dadd+0x154>
 8000b46:	e123      	b.n	8000d90 <__aeabi_dadd+0x39c>
 8000b48:	0004      	movs	r4, r0
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x15c>
 8000b4e:	e1af      	b.n	8000eb0 <__aeabi_dadd+0x4bc>
 8000b50:	4662      	mov	r2, ip
 8000b52:	1e54      	subs	r4, r2, #1
 8000b54:	2a01      	cmp	r2, #1
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dadd+0x166>
 8000b58:	e215      	b.n	8000f86 <__aeabi_dadd+0x592>
 8000b5a:	4d80      	ldr	r5, [pc, #512]	; (8000d5c <__aeabi_dadd+0x368>)
 8000b5c:	45ac      	cmp	ip, r5
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dadd+0x16e>
 8000b60:	e1c8      	b.n	8000ef4 <__aeabi_dadd+0x500>
 8000b62:	46a4      	mov	ip, r4
 8000b64:	e11b      	b.n	8000d9e <__aeabi_dadd+0x3aa>
 8000b66:	464a      	mov	r2, r9
 8000b68:	1ab2      	subs	r2, r6, r2
 8000b6a:	4694      	mov	ip, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	dc00      	bgt.n	8000b72 <__aeabi_dadd+0x17e>
 8000b70:	e0ac      	b.n	8000ccc <__aeabi_dadd+0x2d8>
 8000b72:	464a      	mov	r2, r9
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	d043      	beq.n	8000c00 <__aeabi_dadd+0x20c>
 8000b78:	4a78      	ldr	r2, [pc, #480]	; (8000d5c <__aeabi_dadd+0x368>)
 8000b7a:	4296      	cmp	r6, r2
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x18c>
 8000b7e:	e1af      	b.n	8000ee0 <__aeabi_dadd+0x4ec>
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	003c      	movs	r4, r7
 8000b84:	0412      	lsls	r2, r2, #16
 8000b86:	4314      	orrs	r4, r2
 8000b88:	46a0      	mov	r8, r4
 8000b8a:	4662      	mov	r2, ip
 8000b8c:	2a38      	cmp	r2, #56	; 0x38
 8000b8e:	dc67      	bgt.n	8000c60 <__aeabi_dadd+0x26c>
 8000b90:	2a1f      	cmp	r2, #31
 8000b92:	dc00      	bgt.n	8000b96 <__aeabi_dadd+0x1a2>
 8000b94:	e15f      	b.n	8000e56 <__aeabi_dadd+0x462>
 8000b96:	4647      	mov	r7, r8
 8000b98:	3a20      	subs	r2, #32
 8000b9a:	40d7      	lsrs	r7, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	2a20      	cmp	r2, #32
 8000ba0:	d005      	beq.n	8000bae <__aeabi_dadd+0x1ba>
 8000ba2:	4664      	mov	r4, ip
 8000ba4:	2240      	movs	r2, #64	; 0x40
 8000ba6:	1b12      	subs	r2, r2, r4
 8000ba8:	4644      	mov	r4, r8
 8000baa:	4094      	lsls	r4, r2
 8000bac:	4321      	orrs	r1, r4
 8000bae:	1e4a      	subs	r2, r1, #1
 8000bb0:	4191      	sbcs	r1, r2
 8000bb2:	000c      	movs	r4, r1
 8000bb4:	433c      	orrs	r4, r7
 8000bb6:	e057      	b.n	8000c68 <__aeabi_dadd+0x274>
 8000bb8:	003a      	movs	r2, r7
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dadd+0x1cc>
 8000bbe:	e105      	b.n	8000dcc <__aeabi_dadd+0x3d8>
 8000bc0:	0022      	movs	r2, r4
 8000bc2:	3a01      	subs	r2, #1
 8000bc4:	2c01      	cmp	r4, #1
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dadd+0x1d6>
 8000bc8:	e182      	b.n	8000ed0 <__aeabi_dadd+0x4dc>
 8000bca:	4c64      	ldr	r4, [pc, #400]	; (8000d5c <__aeabi_dadd+0x368>)
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d05b      	beq.n	8000c88 <__aeabi_dadd+0x294>
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	e741      	b.n	8000a58 <__aeabi_dadd+0x64>
 8000bd4:	4c63      	ldr	r4, [pc, #396]	; (8000d64 <__aeabi_dadd+0x370>)
 8000bd6:	1c77      	adds	r7, r6, #1
 8000bd8:	4227      	tst	r7, r4
 8000bda:	d000      	beq.n	8000bde <__aeabi_dadd+0x1ea>
 8000bdc:	e0c4      	b.n	8000d68 <__aeabi_dadd+0x374>
 8000bde:	0004      	movs	r4, r0
 8000be0:	431c      	orrs	r4, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d000      	beq.n	8000be8 <__aeabi_dadd+0x1f4>
 8000be6:	e169      	b.n	8000ebc <__aeabi_dadd+0x4c8>
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x1fa>
 8000bec:	e1bf      	b.n	8000f6e <__aeabi_dadd+0x57a>
 8000bee:	4644      	mov	r4, r8
 8000bf0:	430c      	orrs	r4, r1
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_dadd+0x202>
 8000bf4:	e1d0      	b.n	8000f98 <__aeabi_dadd+0x5a4>
 8000bf6:	0742      	lsls	r2, r0, #29
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	08c0      	lsrs	r0, r0, #3
 8000bfe:	e029      	b.n	8000c54 <__aeabi_dadd+0x260>
 8000c00:	003a      	movs	r2, r7
 8000c02:	430a      	orrs	r2, r1
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x214>
 8000c06:	e170      	b.n	8000eea <__aeabi_dadd+0x4f6>
 8000c08:	4662      	mov	r2, ip
 8000c0a:	4664      	mov	r4, ip
 8000c0c:	3a01      	subs	r2, #1
 8000c0e:	2c01      	cmp	r4, #1
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x220>
 8000c12:	e0e0      	b.n	8000dd6 <__aeabi_dadd+0x3e2>
 8000c14:	4c51      	ldr	r4, [pc, #324]	; (8000d5c <__aeabi_dadd+0x368>)
 8000c16:	45a4      	cmp	ip, r4
 8000c18:	d100      	bne.n	8000c1c <__aeabi_dadd+0x228>
 8000c1a:	e161      	b.n	8000ee0 <__aeabi_dadd+0x4ec>
 8000c1c:	4694      	mov	ip, r2
 8000c1e:	e7b4      	b.n	8000b8a <__aeabi_dadd+0x196>
 8000c20:	003a      	movs	r2, r7
 8000c22:	391f      	subs	r1, #31
 8000c24:	40ca      	lsrs	r2, r1
 8000c26:	0011      	movs	r1, r2
 8000c28:	2b20      	cmp	r3, #32
 8000c2a:	d003      	beq.n	8000c34 <__aeabi_dadd+0x240>
 8000c2c:	2240      	movs	r2, #64	; 0x40
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	409f      	lsls	r7, r3
 8000c32:	433c      	orrs	r4, r7
 8000c34:	1e63      	subs	r3, r4, #1
 8000c36:	419c      	sbcs	r4, r3
 8000c38:	2700      	movs	r7, #0
 8000c3a:	2600      	movs	r6, #0
 8000c3c:	430c      	orrs	r4, r1
 8000c3e:	0763      	lsls	r3, r4, #29
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x250>
 8000c42:	e753      	b.n	8000aec <__aeabi_dadd+0xf8>
 8000c44:	46b4      	mov	ip, r6
 8000c46:	08e4      	lsrs	r4, r4, #3
 8000c48:	077b      	lsls	r3, r7, #29
 8000c4a:	4323      	orrs	r3, r4
 8000c4c:	08f8      	lsrs	r0, r7, #3
 8000c4e:	4a43      	ldr	r2, [pc, #268]	; (8000d5c <__aeabi_dadd+0x368>)
 8000c50:	4594      	cmp	ip, r2
 8000c52:	d01d      	beq.n	8000c90 <__aeabi_dadd+0x29c>
 8000c54:	4662      	mov	r2, ip
 8000c56:	0307      	lsls	r7, r0, #12
 8000c58:	0552      	lsls	r2, r2, #21
 8000c5a:	0b3f      	lsrs	r7, r7, #12
 8000c5c:	0d52      	lsrs	r2, r2, #21
 8000c5e:	e760      	b.n	8000b22 <__aeabi_dadd+0x12e>
 8000c60:	4644      	mov	r4, r8
 8000c62:	430c      	orrs	r4, r1
 8000c64:	1e62      	subs	r2, r4, #1
 8000c66:	4194      	sbcs	r4, r2
 8000c68:	18e4      	adds	r4, r4, r3
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	419b      	sbcs	r3, r3
 8000c6e:	425f      	negs	r7, r3
 8000c70:	183f      	adds	r7, r7, r0
 8000c72:	023b      	lsls	r3, r7, #8
 8000c74:	d5e3      	bpl.n	8000c3e <__aeabi_dadd+0x24a>
 8000c76:	4b39      	ldr	r3, [pc, #228]	; (8000d5c <__aeabi_dadd+0x368>)
 8000c78:	3601      	adds	r6, #1
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_dadd+0x28c>
 8000c7e:	e0b5      	b.n	8000dec <__aeabi_dadd+0x3f8>
 8000c80:	0032      	movs	r2, r6
 8000c82:	2700      	movs	r7, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	e74c      	b.n	8000b22 <__aeabi_dadd+0x12e>
 8000c88:	0742      	lsls	r2, r0, #29
 8000c8a:	08db      	lsrs	r3, r3, #3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	08c0      	lsrs	r0, r0, #3
 8000c90:	001a      	movs	r2, r3
 8000c92:	4302      	orrs	r2, r0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x2a4>
 8000c96:	e1e1      	b.n	800105c <__aeabi_dadd+0x668>
 8000c98:	2780      	movs	r7, #128	; 0x80
 8000c9a:	033f      	lsls	r7, r7, #12
 8000c9c:	4307      	orrs	r7, r0
 8000c9e:	033f      	lsls	r7, r7, #12
 8000ca0:	4a2e      	ldr	r2, [pc, #184]	; (8000d5c <__aeabi_dadd+0x368>)
 8000ca2:	0b3f      	lsrs	r7, r7, #12
 8000ca4:	e73d      	b.n	8000b22 <__aeabi_dadd+0x12e>
 8000ca6:	0020      	movs	r0, r4
 8000ca8:	f001 fd5a 	bl	8002760 <__clzsi2>
 8000cac:	0001      	movs	r1, r0
 8000cae:	3118      	adds	r1, #24
 8000cb0:	291f      	cmp	r1, #31
 8000cb2:	dc00      	bgt.n	8000cb6 <__aeabi_dadd+0x2c2>
 8000cb4:	e6fc      	b.n	8000ab0 <__aeabi_dadd+0xbc>
 8000cb6:	3808      	subs	r0, #8
 8000cb8:	4084      	lsls	r4, r0
 8000cba:	0027      	movs	r7, r4
 8000cbc:	2400      	movs	r4, #0
 8000cbe:	42b1      	cmp	r1, r6
 8000cc0:	db00      	blt.n	8000cc4 <__aeabi_dadd+0x2d0>
 8000cc2:	e6ff      	b.n	8000ac4 <__aeabi_dadd+0xd0>
 8000cc4:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <__aeabi_dadd+0x36c>)
 8000cc6:	1a76      	subs	r6, r6, r1
 8000cc8:	4017      	ands	r7, r2
 8000cca:	e70d      	b.n	8000ae8 <__aeabi_dadd+0xf4>
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	d02f      	beq.n	8000d30 <__aeabi_dadd+0x33c>
 8000cd0:	464a      	mov	r2, r9
 8000cd2:	1b92      	subs	r2, r2, r6
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x2e8>
 8000cda:	e0ad      	b.n	8000e38 <__aeabi_dadd+0x444>
 8000cdc:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <__aeabi_dadd+0x368>)
 8000cde:	4591      	cmp	r9, r2
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x2f0>
 8000ce2:	e10f      	b.n	8000f04 <__aeabi_dadd+0x510>
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	0412      	lsls	r2, r2, #16
 8000ce8:	4310      	orrs	r0, r2
 8000cea:	4662      	mov	r2, ip
 8000cec:	2a38      	cmp	r2, #56	; 0x38
 8000cee:	dd00      	ble.n	8000cf2 <__aeabi_dadd+0x2fe>
 8000cf0:	e10f      	b.n	8000f12 <__aeabi_dadd+0x51e>
 8000cf2:	2a1f      	cmp	r2, #31
 8000cf4:	dd00      	ble.n	8000cf8 <__aeabi_dadd+0x304>
 8000cf6:	e180      	b.n	8000ffa <__aeabi_dadd+0x606>
 8000cf8:	4664      	mov	r4, ip
 8000cfa:	2220      	movs	r2, #32
 8000cfc:	001e      	movs	r6, r3
 8000cfe:	1b12      	subs	r2, r2, r4
 8000d00:	4667      	mov	r7, ip
 8000d02:	0004      	movs	r4, r0
 8000d04:	4093      	lsls	r3, r2
 8000d06:	4094      	lsls	r4, r2
 8000d08:	40fe      	lsrs	r6, r7
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	4193      	sbcs	r3, r2
 8000d0e:	40f8      	lsrs	r0, r7
 8000d10:	4334      	orrs	r4, r6
 8000d12:	431c      	orrs	r4, r3
 8000d14:	4480      	add	r8, r0
 8000d16:	1864      	adds	r4, r4, r1
 8000d18:	428c      	cmp	r4, r1
 8000d1a:	41bf      	sbcs	r7, r7
 8000d1c:	427f      	negs	r7, r7
 8000d1e:	464e      	mov	r6, r9
 8000d20:	4447      	add	r7, r8
 8000d22:	e7a6      	b.n	8000c72 <__aeabi_dadd+0x27e>
 8000d24:	4642      	mov	r2, r8
 8000d26:	430a      	orrs	r2, r1
 8000d28:	0011      	movs	r1, r2
 8000d2a:	1e4a      	subs	r2, r1, #1
 8000d2c:	4191      	sbcs	r1, r2
 8000d2e:	e6ad      	b.n	8000a8c <__aeabi_dadd+0x98>
 8000d30:	4c0c      	ldr	r4, [pc, #48]	; (8000d64 <__aeabi_dadd+0x370>)
 8000d32:	1c72      	adds	r2, r6, #1
 8000d34:	4222      	tst	r2, r4
 8000d36:	d000      	beq.n	8000d3a <__aeabi_dadd+0x346>
 8000d38:	e0a1      	b.n	8000e7e <__aeabi_dadd+0x48a>
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d000      	beq.n	8000d44 <__aeabi_dadd+0x350>
 8000d42:	e0fa      	b.n	8000f3a <__aeabi_dadd+0x546>
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_dadd+0x356>
 8000d48:	e145      	b.n	8000fd6 <__aeabi_dadd+0x5e2>
 8000d4a:	003a      	movs	r2, r7
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	d000      	beq.n	8000d52 <__aeabi_dadd+0x35e>
 8000d50:	e146      	b.n	8000fe0 <__aeabi_dadd+0x5ec>
 8000d52:	0742      	lsls	r2, r0, #29
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	08c0      	lsrs	r0, r0, #3
 8000d5a:	e77b      	b.n	8000c54 <__aeabi_dadd+0x260>
 8000d5c:	000007ff 	.word	0x000007ff
 8000d60:	ff7fffff 	.word	0xff7fffff
 8000d64:	000007fe 	.word	0x000007fe
 8000d68:	4647      	mov	r7, r8
 8000d6a:	1a5c      	subs	r4, r3, r1
 8000d6c:	1bc2      	subs	r2, r0, r7
 8000d6e:	42a3      	cmp	r3, r4
 8000d70:	41bf      	sbcs	r7, r7
 8000d72:	427f      	negs	r7, r7
 8000d74:	46b9      	mov	r9, r7
 8000d76:	0017      	movs	r7, r2
 8000d78:	464a      	mov	r2, r9
 8000d7a:	1abf      	subs	r7, r7, r2
 8000d7c:	023a      	lsls	r2, r7, #8
 8000d7e:	d500      	bpl.n	8000d82 <__aeabi_dadd+0x38e>
 8000d80:	e08d      	b.n	8000e9e <__aeabi_dadd+0x4aa>
 8000d82:	0023      	movs	r3, r4
 8000d84:	433b      	orrs	r3, r7
 8000d86:	d000      	beq.n	8000d8a <__aeabi_dadd+0x396>
 8000d88:	e68a      	b.n	8000aa0 <__aeabi_dadd+0xac>
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	2500      	movs	r5, #0
 8000d8e:	e761      	b.n	8000c54 <__aeabi_dadd+0x260>
 8000d90:	4cb4      	ldr	r4, [pc, #720]	; (8001064 <__aeabi_dadd+0x670>)
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	d100      	bne.n	8000d98 <__aeabi_dadd+0x3a4>
 8000d96:	e0ad      	b.n	8000ef4 <__aeabi_dadd+0x500>
 8000d98:	2480      	movs	r4, #128	; 0x80
 8000d9a:	0424      	lsls	r4, r4, #16
 8000d9c:	4320      	orrs	r0, r4
 8000d9e:	4664      	mov	r4, ip
 8000da0:	2c38      	cmp	r4, #56	; 0x38
 8000da2:	dc3d      	bgt.n	8000e20 <__aeabi_dadd+0x42c>
 8000da4:	4662      	mov	r2, ip
 8000da6:	2c1f      	cmp	r4, #31
 8000da8:	dd00      	ble.n	8000dac <__aeabi_dadd+0x3b8>
 8000daa:	e0b7      	b.n	8000f1c <__aeabi_dadd+0x528>
 8000dac:	2520      	movs	r5, #32
 8000dae:	001e      	movs	r6, r3
 8000db0:	1b2d      	subs	r5, r5, r4
 8000db2:	0004      	movs	r4, r0
 8000db4:	40ab      	lsls	r3, r5
 8000db6:	40ac      	lsls	r4, r5
 8000db8:	40d6      	lsrs	r6, r2
 8000dba:	40d0      	lsrs	r0, r2
 8000dbc:	4642      	mov	r2, r8
 8000dbe:	1e5d      	subs	r5, r3, #1
 8000dc0:	41ab      	sbcs	r3, r5
 8000dc2:	4334      	orrs	r4, r6
 8000dc4:	1a12      	subs	r2, r2, r0
 8000dc6:	4690      	mov	r8, r2
 8000dc8:	4323      	orrs	r3, r4
 8000dca:	e02c      	b.n	8000e26 <__aeabi_dadd+0x432>
 8000dcc:	0742      	lsls	r2, r0, #29
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	08c0      	lsrs	r0, r0, #3
 8000dd4:	e73b      	b.n	8000c4e <__aeabi_dadd+0x25a>
 8000dd6:	185c      	adds	r4, r3, r1
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	419b      	sbcs	r3, r3
 8000ddc:	4440      	add	r0, r8
 8000dde:	425b      	negs	r3, r3
 8000de0:	18c7      	adds	r7, r0, r3
 8000de2:	2601      	movs	r6, #1
 8000de4:	023b      	lsls	r3, r7, #8
 8000de6:	d400      	bmi.n	8000dea <__aeabi_dadd+0x3f6>
 8000de8:	e729      	b.n	8000c3e <__aeabi_dadd+0x24a>
 8000dea:	2602      	movs	r6, #2
 8000dec:	4a9e      	ldr	r2, [pc, #632]	; (8001068 <__aeabi_dadd+0x674>)
 8000dee:	0863      	lsrs	r3, r4, #1
 8000df0:	4017      	ands	r7, r2
 8000df2:	2201      	movs	r2, #1
 8000df4:	4014      	ands	r4, r2
 8000df6:	431c      	orrs	r4, r3
 8000df8:	07fb      	lsls	r3, r7, #31
 8000dfa:	431c      	orrs	r4, r3
 8000dfc:	087f      	lsrs	r7, r7, #1
 8000dfe:	e673      	b.n	8000ae8 <__aeabi_dadd+0xf4>
 8000e00:	4644      	mov	r4, r8
 8000e02:	3a20      	subs	r2, #32
 8000e04:	40d4      	lsrs	r4, r2
 8000e06:	4662      	mov	r2, ip
 8000e08:	2a20      	cmp	r2, #32
 8000e0a:	d005      	beq.n	8000e18 <__aeabi_dadd+0x424>
 8000e0c:	4667      	mov	r7, ip
 8000e0e:	2240      	movs	r2, #64	; 0x40
 8000e10:	1bd2      	subs	r2, r2, r7
 8000e12:	4647      	mov	r7, r8
 8000e14:	4097      	lsls	r7, r2
 8000e16:	4339      	orrs	r1, r7
 8000e18:	1e4a      	subs	r2, r1, #1
 8000e1a:	4191      	sbcs	r1, r2
 8000e1c:	4321      	orrs	r1, r4
 8000e1e:	e635      	b.n	8000a8c <__aeabi_dadd+0x98>
 8000e20:	4303      	orrs	r3, r0
 8000e22:	1e58      	subs	r0, r3, #1
 8000e24:	4183      	sbcs	r3, r0
 8000e26:	1acc      	subs	r4, r1, r3
 8000e28:	42a1      	cmp	r1, r4
 8000e2a:	41bf      	sbcs	r7, r7
 8000e2c:	4643      	mov	r3, r8
 8000e2e:	427f      	negs	r7, r7
 8000e30:	4655      	mov	r5, sl
 8000e32:	464e      	mov	r6, r9
 8000e34:	1bdf      	subs	r7, r3, r7
 8000e36:	e62e      	b.n	8000a96 <__aeabi_dadd+0xa2>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	431a      	orrs	r2, r3
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_dadd+0x44c>
 8000e3e:	e0bd      	b.n	8000fbc <__aeabi_dadd+0x5c8>
 8000e40:	4662      	mov	r2, ip
 8000e42:	4664      	mov	r4, ip
 8000e44:	3a01      	subs	r2, #1
 8000e46:	2c01      	cmp	r4, #1
 8000e48:	d100      	bne.n	8000e4c <__aeabi_dadd+0x458>
 8000e4a:	e0e5      	b.n	8001018 <__aeabi_dadd+0x624>
 8000e4c:	4c85      	ldr	r4, [pc, #532]	; (8001064 <__aeabi_dadd+0x670>)
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d058      	beq.n	8000f04 <__aeabi_dadd+0x510>
 8000e52:	4694      	mov	ip, r2
 8000e54:	e749      	b.n	8000cea <__aeabi_dadd+0x2f6>
 8000e56:	4664      	mov	r4, ip
 8000e58:	2220      	movs	r2, #32
 8000e5a:	1b12      	subs	r2, r2, r4
 8000e5c:	4644      	mov	r4, r8
 8000e5e:	4094      	lsls	r4, r2
 8000e60:	000f      	movs	r7, r1
 8000e62:	46a1      	mov	r9, r4
 8000e64:	4664      	mov	r4, ip
 8000e66:	4091      	lsls	r1, r2
 8000e68:	40e7      	lsrs	r7, r4
 8000e6a:	464c      	mov	r4, r9
 8000e6c:	1e4a      	subs	r2, r1, #1
 8000e6e:	4191      	sbcs	r1, r2
 8000e70:	433c      	orrs	r4, r7
 8000e72:	4642      	mov	r2, r8
 8000e74:	430c      	orrs	r4, r1
 8000e76:	4661      	mov	r1, ip
 8000e78:	40ca      	lsrs	r2, r1
 8000e7a:	1880      	adds	r0, r0, r2
 8000e7c:	e6f4      	b.n	8000c68 <__aeabi_dadd+0x274>
 8000e7e:	4c79      	ldr	r4, [pc, #484]	; (8001064 <__aeabi_dadd+0x670>)
 8000e80:	42a2      	cmp	r2, r4
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dadd+0x492>
 8000e84:	e6fd      	b.n	8000c82 <__aeabi_dadd+0x28e>
 8000e86:	1859      	adds	r1, r3, r1
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	419b      	sbcs	r3, r3
 8000e8c:	4440      	add	r0, r8
 8000e8e:	425f      	negs	r7, r3
 8000e90:	19c7      	adds	r7, r0, r7
 8000e92:	07fc      	lsls	r4, r7, #31
 8000e94:	0849      	lsrs	r1, r1, #1
 8000e96:	0016      	movs	r6, r2
 8000e98:	430c      	orrs	r4, r1
 8000e9a:	087f      	lsrs	r7, r7, #1
 8000e9c:	e6cf      	b.n	8000c3e <__aeabi_dadd+0x24a>
 8000e9e:	1acc      	subs	r4, r1, r3
 8000ea0:	42a1      	cmp	r1, r4
 8000ea2:	41bf      	sbcs	r7, r7
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	427f      	negs	r7, r7
 8000ea8:	1a18      	subs	r0, r3, r0
 8000eaa:	4655      	mov	r5, sl
 8000eac:	1bc7      	subs	r7, r0, r7
 8000eae:	e5f7      	b.n	8000aa0 <__aeabi_dadd+0xac>
 8000eb0:	08c9      	lsrs	r1, r1, #3
 8000eb2:	077b      	lsls	r3, r7, #29
 8000eb4:	4655      	mov	r5, sl
 8000eb6:	430b      	orrs	r3, r1
 8000eb8:	08f8      	lsrs	r0, r7, #3
 8000eba:	e6c8      	b.n	8000c4e <__aeabi_dadd+0x25a>
 8000ebc:	2c00      	cmp	r4, #0
 8000ebe:	d000      	beq.n	8000ec2 <__aeabi_dadd+0x4ce>
 8000ec0:	e081      	b.n	8000fc6 <__aeabi_dadd+0x5d2>
 8000ec2:	4643      	mov	r3, r8
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	d115      	bne.n	8000ef4 <__aeabi_dadd+0x500>
 8000ec8:	2080      	movs	r0, #128	; 0x80
 8000eca:	2500      	movs	r5, #0
 8000ecc:	0300      	lsls	r0, r0, #12
 8000ece:	e6e3      	b.n	8000c98 <__aeabi_dadd+0x2a4>
 8000ed0:	1a5c      	subs	r4, r3, r1
 8000ed2:	42a3      	cmp	r3, r4
 8000ed4:	419b      	sbcs	r3, r3
 8000ed6:	1bc7      	subs	r7, r0, r7
 8000ed8:	425b      	negs	r3, r3
 8000eda:	2601      	movs	r6, #1
 8000edc:	1aff      	subs	r7, r7, r3
 8000ede:	e5da      	b.n	8000a96 <__aeabi_dadd+0xa2>
 8000ee0:	0742      	lsls	r2, r0, #29
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	08c0      	lsrs	r0, r0, #3
 8000ee8:	e6d2      	b.n	8000c90 <__aeabi_dadd+0x29c>
 8000eea:	0742      	lsls	r2, r0, #29
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	08c0      	lsrs	r0, r0, #3
 8000ef2:	e6ac      	b.n	8000c4e <__aeabi_dadd+0x25a>
 8000ef4:	4643      	mov	r3, r8
 8000ef6:	4642      	mov	r2, r8
 8000ef8:	08c9      	lsrs	r1, r1, #3
 8000efa:	075b      	lsls	r3, r3, #29
 8000efc:	4655      	mov	r5, sl
 8000efe:	430b      	orrs	r3, r1
 8000f00:	08d0      	lsrs	r0, r2, #3
 8000f02:	e6c5      	b.n	8000c90 <__aeabi_dadd+0x29c>
 8000f04:	4643      	mov	r3, r8
 8000f06:	4642      	mov	r2, r8
 8000f08:	075b      	lsls	r3, r3, #29
 8000f0a:	08c9      	lsrs	r1, r1, #3
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	08d0      	lsrs	r0, r2, #3
 8000f10:	e6be      	b.n	8000c90 <__aeabi_dadd+0x29c>
 8000f12:	4303      	orrs	r3, r0
 8000f14:	001c      	movs	r4, r3
 8000f16:	1e63      	subs	r3, r4, #1
 8000f18:	419c      	sbcs	r4, r3
 8000f1a:	e6fc      	b.n	8000d16 <__aeabi_dadd+0x322>
 8000f1c:	0002      	movs	r2, r0
 8000f1e:	3c20      	subs	r4, #32
 8000f20:	40e2      	lsrs	r2, r4
 8000f22:	0014      	movs	r4, r2
 8000f24:	4662      	mov	r2, ip
 8000f26:	2a20      	cmp	r2, #32
 8000f28:	d003      	beq.n	8000f32 <__aeabi_dadd+0x53e>
 8000f2a:	2540      	movs	r5, #64	; 0x40
 8000f2c:	1aad      	subs	r5, r5, r2
 8000f2e:	40a8      	lsls	r0, r5
 8000f30:	4303      	orrs	r3, r0
 8000f32:	1e58      	subs	r0, r3, #1
 8000f34:	4183      	sbcs	r3, r0
 8000f36:	4323      	orrs	r3, r4
 8000f38:	e775      	b.n	8000e26 <__aeabi_dadd+0x432>
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d0e2      	beq.n	8000f04 <__aeabi_dadd+0x510>
 8000f3e:	003a      	movs	r2, r7
 8000f40:	430a      	orrs	r2, r1
 8000f42:	d0cd      	beq.n	8000ee0 <__aeabi_dadd+0x4ec>
 8000f44:	0742      	lsls	r2, r0, #29
 8000f46:	08db      	lsrs	r3, r3, #3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	08c0      	lsrs	r0, r0, #3
 8000f4e:	0312      	lsls	r2, r2, #12
 8000f50:	4210      	tst	r0, r2
 8000f52:	d006      	beq.n	8000f62 <__aeabi_dadd+0x56e>
 8000f54:	08fc      	lsrs	r4, r7, #3
 8000f56:	4214      	tst	r4, r2
 8000f58:	d103      	bne.n	8000f62 <__aeabi_dadd+0x56e>
 8000f5a:	0020      	movs	r0, r4
 8000f5c:	08cb      	lsrs	r3, r1, #3
 8000f5e:	077a      	lsls	r2, r7, #29
 8000f60:	4313      	orrs	r3, r2
 8000f62:	0f5a      	lsrs	r2, r3, #29
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	0752      	lsls	r2, r2, #29
 8000f68:	08db      	lsrs	r3, r3, #3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	e690      	b.n	8000c90 <__aeabi_dadd+0x29c>
 8000f6e:	4643      	mov	r3, r8
 8000f70:	430b      	orrs	r3, r1
 8000f72:	d100      	bne.n	8000f76 <__aeabi_dadd+0x582>
 8000f74:	e709      	b.n	8000d8a <__aeabi_dadd+0x396>
 8000f76:	4643      	mov	r3, r8
 8000f78:	4642      	mov	r2, r8
 8000f7a:	08c9      	lsrs	r1, r1, #3
 8000f7c:	075b      	lsls	r3, r3, #29
 8000f7e:	4655      	mov	r5, sl
 8000f80:	430b      	orrs	r3, r1
 8000f82:	08d0      	lsrs	r0, r2, #3
 8000f84:	e666      	b.n	8000c54 <__aeabi_dadd+0x260>
 8000f86:	1acc      	subs	r4, r1, r3
 8000f88:	42a1      	cmp	r1, r4
 8000f8a:	4189      	sbcs	r1, r1
 8000f8c:	1a3f      	subs	r7, r7, r0
 8000f8e:	4249      	negs	r1, r1
 8000f90:	4655      	mov	r5, sl
 8000f92:	2601      	movs	r6, #1
 8000f94:	1a7f      	subs	r7, r7, r1
 8000f96:	e57e      	b.n	8000a96 <__aeabi_dadd+0xa2>
 8000f98:	4642      	mov	r2, r8
 8000f9a:	1a5c      	subs	r4, r3, r1
 8000f9c:	1a87      	subs	r7, r0, r2
 8000f9e:	42a3      	cmp	r3, r4
 8000fa0:	4192      	sbcs	r2, r2
 8000fa2:	4252      	negs	r2, r2
 8000fa4:	1abf      	subs	r7, r7, r2
 8000fa6:	023a      	lsls	r2, r7, #8
 8000fa8:	d53d      	bpl.n	8001026 <__aeabi_dadd+0x632>
 8000faa:	1acc      	subs	r4, r1, r3
 8000fac:	42a1      	cmp	r1, r4
 8000fae:	4189      	sbcs	r1, r1
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	4249      	negs	r1, r1
 8000fb4:	1a1f      	subs	r7, r3, r0
 8000fb6:	4655      	mov	r5, sl
 8000fb8:	1a7f      	subs	r7, r7, r1
 8000fba:	e595      	b.n	8000ae8 <__aeabi_dadd+0xf4>
 8000fbc:	077b      	lsls	r3, r7, #29
 8000fbe:	08c9      	lsrs	r1, r1, #3
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	08f8      	lsrs	r0, r7, #3
 8000fc4:	e643      	b.n	8000c4e <__aeabi_dadd+0x25a>
 8000fc6:	4644      	mov	r4, r8
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	430c      	orrs	r4, r1
 8000fcc:	d130      	bne.n	8001030 <__aeabi_dadd+0x63c>
 8000fce:	0742      	lsls	r2, r0, #29
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	08c0      	lsrs	r0, r0, #3
 8000fd4:	e65c      	b.n	8000c90 <__aeabi_dadd+0x29c>
 8000fd6:	077b      	lsls	r3, r7, #29
 8000fd8:	08c9      	lsrs	r1, r1, #3
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	08f8      	lsrs	r0, r7, #3
 8000fde:	e639      	b.n	8000c54 <__aeabi_dadd+0x260>
 8000fe0:	185c      	adds	r4, r3, r1
 8000fe2:	429c      	cmp	r4, r3
 8000fe4:	419b      	sbcs	r3, r3
 8000fe6:	4440      	add	r0, r8
 8000fe8:	425b      	negs	r3, r3
 8000fea:	18c7      	adds	r7, r0, r3
 8000fec:	023b      	lsls	r3, r7, #8
 8000fee:	d400      	bmi.n	8000ff2 <__aeabi_dadd+0x5fe>
 8000ff0:	e625      	b.n	8000c3e <__aeabi_dadd+0x24a>
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <__aeabi_dadd+0x674>)
 8000ff4:	2601      	movs	r6, #1
 8000ff6:	401f      	ands	r7, r3
 8000ff8:	e621      	b.n	8000c3e <__aeabi_dadd+0x24a>
 8000ffa:	0004      	movs	r4, r0
 8000ffc:	3a20      	subs	r2, #32
 8000ffe:	40d4      	lsrs	r4, r2
 8001000:	4662      	mov	r2, ip
 8001002:	2a20      	cmp	r2, #32
 8001004:	d004      	beq.n	8001010 <__aeabi_dadd+0x61c>
 8001006:	2240      	movs	r2, #64	; 0x40
 8001008:	4666      	mov	r6, ip
 800100a:	1b92      	subs	r2, r2, r6
 800100c:	4090      	lsls	r0, r2
 800100e:	4303      	orrs	r3, r0
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	4193      	sbcs	r3, r2
 8001014:	431c      	orrs	r4, r3
 8001016:	e67e      	b.n	8000d16 <__aeabi_dadd+0x322>
 8001018:	185c      	adds	r4, r3, r1
 800101a:	428c      	cmp	r4, r1
 800101c:	4189      	sbcs	r1, r1
 800101e:	4440      	add	r0, r8
 8001020:	4249      	negs	r1, r1
 8001022:	1847      	adds	r7, r0, r1
 8001024:	e6dd      	b.n	8000de2 <__aeabi_dadd+0x3ee>
 8001026:	0023      	movs	r3, r4
 8001028:	433b      	orrs	r3, r7
 800102a:	d100      	bne.n	800102e <__aeabi_dadd+0x63a>
 800102c:	e6ad      	b.n	8000d8a <__aeabi_dadd+0x396>
 800102e:	e606      	b.n	8000c3e <__aeabi_dadd+0x24a>
 8001030:	0744      	lsls	r4, r0, #29
 8001032:	4323      	orrs	r3, r4
 8001034:	2480      	movs	r4, #128	; 0x80
 8001036:	08c0      	lsrs	r0, r0, #3
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	4220      	tst	r0, r4
 800103c:	d008      	beq.n	8001050 <__aeabi_dadd+0x65c>
 800103e:	4642      	mov	r2, r8
 8001040:	08d6      	lsrs	r6, r2, #3
 8001042:	4226      	tst	r6, r4
 8001044:	d104      	bne.n	8001050 <__aeabi_dadd+0x65c>
 8001046:	4655      	mov	r5, sl
 8001048:	0030      	movs	r0, r6
 800104a:	08cb      	lsrs	r3, r1, #3
 800104c:	0751      	lsls	r1, r2, #29
 800104e:	430b      	orrs	r3, r1
 8001050:	0f5a      	lsrs	r2, r3, #29
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	08db      	lsrs	r3, r3, #3
 8001056:	0752      	lsls	r2, r2, #29
 8001058:	4313      	orrs	r3, r2
 800105a:	e619      	b.n	8000c90 <__aeabi_dadd+0x29c>
 800105c:	2300      	movs	r3, #0
 800105e:	4a01      	ldr	r2, [pc, #4]	; (8001064 <__aeabi_dadd+0x670>)
 8001060:	001f      	movs	r7, r3
 8001062:	e55e      	b.n	8000b22 <__aeabi_dadd+0x12e>
 8001064:	000007ff 	.word	0x000007ff
 8001068:	ff7fffff 	.word	0xff7fffff

0800106c <__aeabi_ddiv>:
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106e:	4657      	mov	r7, sl
 8001070:	464e      	mov	r6, r9
 8001072:	4645      	mov	r5, r8
 8001074:	46de      	mov	lr, fp
 8001076:	b5e0      	push	{r5, r6, r7, lr}
 8001078:	4681      	mov	r9, r0
 800107a:	0005      	movs	r5, r0
 800107c:	030c      	lsls	r4, r1, #12
 800107e:	0048      	lsls	r0, r1, #1
 8001080:	4692      	mov	sl, r2
 8001082:	001f      	movs	r7, r3
 8001084:	b085      	sub	sp, #20
 8001086:	0b24      	lsrs	r4, r4, #12
 8001088:	0d40      	lsrs	r0, r0, #21
 800108a:	0fce      	lsrs	r6, r1, #31
 800108c:	2800      	cmp	r0, #0
 800108e:	d100      	bne.n	8001092 <__aeabi_ddiv+0x26>
 8001090:	e156      	b.n	8001340 <__aeabi_ddiv+0x2d4>
 8001092:	4bd4      	ldr	r3, [pc, #848]	; (80013e4 <__aeabi_ddiv+0x378>)
 8001094:	4298      	cmp	r0, r3
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x2e>
 8001098:	e172      	b.n	8001380 <__aeabi_ddiv+0x314>
 800109a:	0f6b      	lsrs	r3, r5, #29
 800109c:	00e4      	lsls	r4, r4, #3
 800109e:	431c      	orrs	r4, r3
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	041b      	lsls	r3, r3, #16
 80010a4:	4323      	orrs	r3, r4
 80010a6:	4698      	mov	r8, r3
 80010a8:	4bcf      	ldr	r3, [pc, #828]	; (80013e8 <__aeabi_ddiv+0x37c>)
 80010aa:	00ed      	lsls	r5, r5, #3
 80010ac:	469b      	mov	fp, r3
 80010ae:	2300      	movs	r3, #0
 80010b0:	4699      	mov	r9, r3
 80010b2:	4483      	add	fp, r0
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	033c      	lsls	r4, r7, #12
 80010b8:	007b      	lsls	r3, r7, #1
 80010ba:	4650      	mov	r0, sl
 80010bc:	0b24      	lsrs	r4, r4, #12
 80010be:	0d5b      	lsrs	r3, r3, #21
 80010c0:	0fff      	lsrs	r7, r7, #31
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x5c>
 80010c6:	e11f      	b.n	8001308 <__aeabi_ddiv+0x29c>
 80010c8:	4ac6      	ldr	r2, [pc, #792]	; (80013e4 <__aeabi_ddiv+0x378>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d100      	bne.n	80010d0 <__aeabi_ddiv+0x64>
 80010ce:	e162      	b.n	8001396 <__aeabi_ddiv+0x32a>
 80010d0:	49c5      	ldr	r1, [pc, #788]	; (80013e8 <__aeabi_ddiv+0x37c>)
 80010d2:	0f42      	lsrs	r2, r0, #29
 80010d4:	468c      	mov	ip, r1
 80010d6:	00e4      	lsls	r4, r4, #3
 80010d8:	4659      	mov	r1, fp
 80010da:	4314      	orrs	r4, r2
 80010dc:	2280      	movs	r2, #128	; 0x80
 80010de:	4463      	add	r3, ip
 80010e0:	0412      	lsls	r2, r2, #16
 80010e2:	1acb      	subs	r3, r1, r3
 80010e4:	4314      	orrs	r4, r2
 80010e6:	469b      	mov	fp, r3
 80010e8:	00c2      	lsls	r2, r0, #3
 80010ea:	2000      	movs	r0, #0
 80010ec:	0033      	movs	r3, r6
 80010ee:	407b      	eors	r3, r7
 80010f0:	469a      	mov	sl, r3
 80010f2:	464b      	mov	r3, r9
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d827      	bhi.n	8001148 <__aeabi_ddiv+0xdc>
 80010f8:	49bc      	ldr	r1, [pc, #752]	; (80013ec <__aeabi_ddiv+0x380>)
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	58cb      	ldr	r3, [r1, r3]
 80010fe:	469f      	mov	pc, r3
 8001100:	46b2      	mov	sl, r6
 8001102:	9b00      	ldr	r3, [sp, #0]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d016      	beq.n	8001136 <__aeabi_ddiv+0xca>
 8001108:	2b03      	cmp	r3, #3
 800110a:	d100      	bne.n	800110e <__aeabi_ddiv+0xa2>
 800110c:	e28e      	b.n	800162c <__aeabi_ddiv+0x5c0>
 800110e:	2b01      	cmp	r3, #1
 8001110:	d000      	beq.n	8001114 <__aeabi_ddiv+0xa8>
 8001112:	e0d9      	b.n	80012c8 <__aeabi_ddiv+0x25c>
 8001114:	2300      	movs	r3, #0
 8001116:	2400      	movs	r4, #0
 8001118:	2500      	movs	r5, #0
 800111a:	4652      	mov	r2, sl
 800111c:	051b      	lsls	r3, r3, #20
 800111e:	4323      	orrs	r3, r4
 8001120:	07d2      	lsls	r2, r2, #31
 8001122:	4313      	orrs	r3, r2
 8001124:	0028      	movs	r0, r5
 8001126:	0019      	movs	r1, r3
 8001128:	b005      	add	sp, #20
 800112a:	bcf0      	pop	{r4, r5, r6, r7}
 800112c:	46bb      	mov	fp, r7
 800112e:	46b2      	mov	sl, r6
 8001130:	46a9      	mov	r9, r5
 8001132:	46a0      	mov	r8, r4
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001136:	2400      	movs	r4, #0
 8001138:	2500      	movs	r5, #0
 800113a:	4baa      	ldr	r3, [pc, #680]	; (80013e4 <__aeabi_ddiv+0x378>)
 800113c:	e7ed      	b.n	800111a <__aeabi_ddiv+0xae>
 800113e:	46ba      	mov	sl, r7
 8001140:	46a0      	mov	r8, r4
 8001142:	0015      	movs	r5, r2
 8001144:	9000      	str	r0, [sp, #0]
 8001146:	e7dc      	b.n	8001102 <__aeabi_ddiv+0x96>
 8001148:	4544      	cmp	r4, r8
 800114a:	d200      	bcs.n	800114e <__aeabi_ddiv+0xe2>
 800114c:	e1c7      	b.n	80014de <__aeabi_ddiv+0x472>
 800114e:	d100      	bne.n	8001152 <__aeabi_ddiv+0xe6>
 8001150:	e1c2      	b.n	80014d8 <__aeabi_ddiv+0x46c>
 8001152:	2301      	movs	r3, #1
 8001154:	425b      	negs	r3, r3
 8001156:	469c      	mov	ip, r3
 8001158:	002e      	movs	r6, r5
 800115a:	4640      	mov	r0, r8
 800115c:	2500      	movs	r5, #0
 800115e:	44e3      	add	fp, ip
 8001160:	0223      	lsls	r3, r4, #8
 8001162:	0e14      	lsrs	r4, r2, #24
 8001164:	431c      	orrs	r4, r3
 8001166:	0c1b      	lsrs	r3, r3, #16
 8001168:	4699      	mov	r9, r3
 800116a:	0423      	lsls	r3, r4, #16
 800116c:	0c1f      	lsrs	r7, r3, #16
 800116e:	0212      	lsls	r2, r2, #8
 8001170:	4649      	mov	r1, r9
 8001172:	9200      	str	r2, [sp, #0]
 8001174:	9701      	str	r7, [sp, #4]
 8001176:	f7ff f863 	bl	8000240 <__aeabi_uidivmod>
 800117a:	0002      	movs	r2, r0
 800117c:	437a      	muls	r2, r7
 800117e:	040b      	lsls	r3, r1, #16
 8001180:	0c31      	lsrs	r1, r6, #16
 8001182:	4680      	mov	r8, r0
 8001184:	4319      	orrs	r1, r3
 8001186:	428a      	cmp	r2, r1
 8001188:	d907      	bls.n	800119a <__aeabi_ddiv+0x12e>
 800118a:	2301      	movs	r3, #1
 800118c:	425b      	negs	r3, r3
 800118e:	469c      	mov	ip, r3
 8001190:	1909      	adds	r1, r1, r4
 8001192:	44e0      	add	r8, ip
 8001194:	428c      	cmp	r4, r1
 8001196:	d800      	bhi.n	800119a <__aeabi_ddiv+0x12e>
 8001198:	e207      	b.n	80015aa <__aeabi_ddiv+0x53e>
 800119a:	1a88      	subs	r0, r1, r2
 800119c:	4649      	mov	r1, r9
 800119e:	f7ff f84f 	bl	8000240 <__aeabi_uidivmod>
 80011a2:	0409      	lsls	r1, r1, #16
 80011a4:	468c      	mov	ip, r1
 80011a6:	0431      	lsls	r1, r6, #16
 80011a8:	4666      	mov	r6, ip
 80011aa:	9a01      	ldr	r2, [sp, #4]
 80011ac:	0c09      	lsrs	r1, r1, #16
 80011ae:	4342      	muls	r2, r0
 80011b0:	0003      	movs	r3, r0
 80011b2:	4331      	orrs	r1, r6
 80011b4:	428a      	cmp	r2, r1
 80011b6:	d904      	bls.n	80011c2 <__aeabi_ddiv+0x156>
 80011b8:	1909      	adds	r1, r1, r4
 80011ba:	3b01      	subs	r3, #1
 80011bc:	428c      	cmp	r4, r1
 80011be:	d800      	bhi.n	80011c2 <__aeabi_ddiv+0x156>
 80011c0:	e1ed      	b.n	800159e <__aeabi_ddiv+0x532>
 80011c2:	1a88      	subs	r0, r1, r2
 80011c4:	4642      	mov	r2, r8
 80011c6:	0412      	lsls	r2, r2, #16
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4690      	mov	r8, r2
 80011cc:	4641      	mov	r1, r8
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	040e      	lsls	r6, r1, #16
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	001f      	movs	r7, r3
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	9b00      	ldr	r3, [sp, #0]
 80011da:	0c36      	lsrs	r6, r6, #16
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c19      	lsrs	r1, r3, #16
 80011e0:	000b      	movs	r3, r1
 80011e2:	4373      	muls	r3, r6
 80011e4:	0c12      	lsrs	r2, r2, #16
 80011e6:	437e      	muls	r6, r7
 80011e8:	9103      	str	r1, [sp, #12]
 80011ea:	4351      	muls	r1, r2
 80011ec:	437a      	muls	r2, r7
 80011ee:	0c1f      	lsrs	r7, r3, #16
 80011f0:	46bc      	mov	ip, r7
 80011f2:	1876      	adds	r6, r6, r1
 80011f4:	4466      	add	r6, ip
 80011f6:	42b1      	cmp	r1, r6
 80011f8:	d903      	bls.n	8001202 <__aeabi_ddiv+0x196>
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	0249      	lsls	r1, r1, #9
 80011fe:	468c      	mov	ip, r1
 8001200:	4462      	add	r2, ip
 8001202:	0c31      	lsrs	r1, r6, #16
 8001204:	188a      	adds	r2, r1, r2
 8001206:	0431      	lsls	r1, r6, #16
 8001208:	041e      	lsls	r6, r3, #16
 800120a:	0c36      	lsrs	r6, r6, #16
 800120c:	198e      	adds	r6, r1, r6
 800120e:	4290      	cmp	r0, r2
 8001210:	d302      	bcc.n	8001218 <__aeabi_ddiv+0x1ac>
 8001212:	d112      	bne.n	800123a <__aeabi_ddiv+0x1ce>
 8001214:	42b5      	cmp	r5, r6
 8001216:	d210      	bcs.n	800123a <__aeabi_ddiv+0x1ce>
 8001218:	4643      	mov	r3, r8
 800121a:	1e59      	subs	r1, r3, #1
 800121c:	9b00      	ldr	r3, [sp, #0]
 800121e:	469c      	mov	ip, r3
 8001220:	4465      	add	r5, ip
 8001222:	001f      	movs	r7, r3
 8001224:	429d      	cmp	r5, r3
 8001226:	419b      	sbcs	r3, r3
 8001228:	425b      	negs	r3, r3
 800122a:	191b      	adds	r3, r3, r4
 800122c:	18c0      	adds	r0, r0, r3
 800122e:	4284      	cmp	r4, r0
 8001230:	d200      	bcs.n	8001234 <__aeabi_ddiv+0x1c8>
 8001232:	e1a0      	b.n	8001576 <__aeabi_ddiv+0x50a>
 8001234:	d100      	bne.n	8001238 <__aeabi_ddiv+0x1cc>
 8001236:	e19b      	b.n	8001570 <__aeabi_ddiv+0x504>
 8001238:	4688      	mov	r8, r1
 800123a:	1bae      	subs	r6, r5, r6
 800123c:	42b5      	cmp	r5, r6
 800123e:	41ad      	sbcs	r5, r5
 8001240:	1a80      	subs	r0, r0, r2
 8001242:	426d      	negs	r5, r5
 8001244:	1b40      	subs	r0, r0, r5
 8001246:	4284      	cmp	r4, r0
 8001248:	d100      	bne.n	800124c <__aeabi_ddiv+0x1e0>
 800124a:	e1d5      	b.n	80015f8 <__aeabi_ddiv+0x58c>
 800124c:	4649      	mov	r1, r9
 800124e:	f7fe fff7 	bl	8000240 <__aeabi_uidivmod>
 8001252:	9a01      	ldr	r2, [sp, #4]
 8001254:	040b      	lsls	r3, r1, #16
 8001256:	4342      	muls	r2, r0
 8001258:	0c31      	lsrs	r1, r6, #16
 800125a:	0005      	movs	r5, r0
 800125c:	4319      	orrs	r1, r3
 800125e:	428a      	cmp	r2, r1
 8001260:	d900      	bls.n	8001264 <__aeabi_ddiv+0x1f8>
 8001262:	e16c      	b.n	800153e <__aeabi_ddiv+0x4d2>
 8001264:	1a88      	subs	r0, r1, r2
 8001266:	4649      	mov	r1, r9
 8001268:	f7fe ffea 	bl	8000240 <__aeabi_uidivmod>
 800126c:	9a01      	ldr	r2, [sp, #4]
 800126e:	0436      	lsls	r6, r6, #16
 8001270:	4342      	muls	r2, r0
 8001272:	0409      	lsls	r1, r1, #16
 8001274:	0c36      	lsrs	r6, r6, #16
 8001276:	0003      	movs	r3, r0
 8001278:	430e      	orrs	r6, r1
 800127a:	42b2      	cmp	r2, r6
 800127c:	d900      	bls.n	8001280 <__aeabi_ddiv+0x214>
 800127e:	e153      	b.n	8001528 <__aeabi_ddiv+0x4bc>
 8001280:	9803      	ldr	r0, [sp, #12]
 8001282:	1ab6      	subs	r6, r6, r2
 8001284:	0002      	movs	r2, r0
 8001286:	042d      	lsls	r5, r5, #16
 8001288:	431d      	orrs	r5, r3
 800128a:	9f02      	ldr	r7, [sp, #8]
 800128c:	042b      	lsls	r3, r5, #16
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	435a      	muls	r2, r3
 8001292:	437b      	muls	r3, r7
 8001294:	469c      	mov	ip, r3
 8001296:	0c29      	lsrs	r1, r5, #16
 8001298:	4348      	muls	r0, r1
 800129a:	0c13      	lsrs	r3, r2, #16
 800129c:	4484      	add	ip, r0
 800129e:	4463      	add	r3, ip
 80012a0:	4379      	muls	r1, r7
 80012a2:	4298      	cmp	r0, r3
 80012a4:	d903      	bls.n	80012ae <__aeabi_ddiv+0x242>
 80012a6:	2080      	movs	r0, #128	; 0x80
 80012a8:	0240      	lsls	r0, r0, #9
 80012aa:	4684      	mov	ip, r0
 80012ac:	4461      	add	r1, ip
 80012ae:	0c18      	lsrs	r0, r3, #16
 80012b0:	0412      	lsls	r2, r2, #16
 80012b2:	041b      	lsls	r3, r3, #16
 80012b4:	0c12      	lsrs	r2, r2, #16
 80012b6:	1841      	adds	r1, r0, r1
 80012b8:	189b      	adds	r3, r3, r2
 80012ba:	428e      	cmp	r6, r1
 80012bc:	d200      	bcs.n	80012c0 <__aeabi_ddiv+0x254>
 80012be:	e0ff      	b.n	80014c0 <__aeabi_ddiv+0x454>
 80012c0:	d100      	bne.n	80012c4 <__aeabi_ddiv+0x258>
 80012c2:	e0fa      	b.n	80014ba <__aeabi_ddiv+0x44e>
 80012c4:	2301      	movs	r3, #1
 80012c6:	431d      	orrs	r5, r3
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <__aeabi_ddiv+0x384>)
 80012ca:	445a      	add	r2, fp
 80012cc:	2a00      	cmp	r2, #0
 80012ce:	dc00      	bgt.n	80012d2 <__aeabi_ddiv+0x266>
 80012d0:	e0aa      	b.n	8001428 <__aeabi_ddiv+0x3bc>
 80012d2:	076b      	lsls	r3, r5, #29
 80012d4:	d000      	beq.n	80012d8 <__aeabi_ddiv+0x26c>
 80012d6:	e13d      	b.n	8001554 <__aeabi_ddiv+0x4e8>
 80012d8:	08ed      	lsrs	r5, r5, #3
 80012da:	4643      	mov	r3, r8
 80012dc:	01db      	lsls	r3, r3, #7
 80012de:	d506      	bpl.n	80012ee <__aeabi_ddiv+0x282>
 80012e0:	4642      	mov	r2, r8
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <__aeabi_ddiv+0x388>)
 80012e4:	401a      	ands	r2, r3
 80012e6:	4690      	mov	r8, r2
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	00d2      	lsls	r2, r2, #3
 80012ec:	445a      	add	r2, fp
 80012ee:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <__aeabi_ddiv+0x38c>)
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dd00      	ble.n	80012f6 <__aeabi_ddiv+0x28a>
 80012f4:	e71f      	b.n	8001136 <__aeabi_ddiv+0xca>
 80012f6:	4643      	mov	r3, r8
 80012f8:	075b      	lsls	r3, r3, #29
 80012fa:	431d      	orrs	r5, r3
 80012fc:	4643      	mov	r3, r8
 80012fe:	0552      	lsls	r2, r2, #21
 8001300:	025c      	lsls	r4, r3, #9
 8001302:	0b24      	lsrs	r4, r4, #12
 8001304:	0d53      	lsrs	r3, r2, #21
 8001306:	e708      	b.n	800111a <__aeabi_ddiv+0xae>
 8001308:	4652      	mov	r2, sl
 800130a:	4322      	orrs	r2, r4
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0x2a4>
 800130e:	e07b      	b.n	8001408 <__aeabi_ddiv+0x39c>
 8001310:	2c00      	cmp	r4, #0
 8001312:	d100      	bne.n	8001316 <__aeabi_ddiv+0x2aa>
 8001314:	e0fa      	b.n	800150c <__aeabi_ddiv+0x4a0>
 8001316:	0020      	movs	r0, r4
 8001318:	f001 fa22 	bl	8002760 <__clzsi2>
 800131c:	0002      	movs	r2, r0
 800131e:	3a0b      	subs	r2, #11
 8001320:	231d      	movs	r3, #29
 8001322:	0001      	movs	r1, r0
 8001324:	1a9b      	subs	r3, r3, r2
 8001326:	4652      	mov	r2, sl
 8001328:	3908      	subs	r1, #8
 800132a:	40da      	lsrs	r2, r3
 800132c:	408c      	lsls	r4, r1
 800132e:	4314      	orrs	r4, r2
 8001330:	4652      	mov	r2, sl
 8001332:	408a      	lsls	r2, r1
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <__aeabi_ddiv+0x390>)
 8001336:	4458      	add	r0, fp
 8001338:	469b      	mov	fp, r3
 800133a:	4483      	add	fp, r0
 800133c:	2000      	movs	r0, #0
 800133e:	e6d5      	b.n	80010ec <__aeabi_ddiv+0x80>
 8001340:	464b      	mov	r3, r9
 8001342:	4323      	orrs	r3, r4
 8001344:	4698      	mov	r8, r3
 8001346:	d044      	beq.n	80013d2 <__aeabi_ddiv+0x366>
 8001348:	2c00      	cmp	r4, #0
 800134a:	d100      	bne.n	800134e <__aeabi_ddiv+0x2e2>
 800134c:	e0ce      	b.n	80014ec <__aeabi_ddiv+0x480>
 800134e:	0020      	movs	r0, r4
 8001350:	f001 fa06 	bl	8002760 <__clzsi2>
 8001354:	0001      	movs	r1, r0
 8001356:	0002      	movs	r2, r0
 8001358:	390b      	subs	r1, #11
 800135a:	231d      	movs	r3, #29
 800135c:	1a5b      	subs	r3, r3, r1
 800135e:	4649      	mov	r1, r9
 8001360:	0010      	movs	r0, r2
 8001362:	40d9      	lsrs	r1, r3
 8001364:	3808      	subs	r0, #8
 8001366:	4084      	lsls	r4, r0
 8001368:	000b      	movs	r3, r1
 800136a:	464d      	mov	r5, r9
 800136c:	4323      	orrs	r3, r4
 800136e:	4698      	mov	r8, r3
 8001370:	4085      	lsls	r5, r0
 8001372:	4823      	ldr	r0, [pc, #140]	; (8001400 <__aeabi_ddiv+0x394>)
 8001374:	1a83      	subs	r3, r0, r2
 8001376:	469b      	mov	fp, r3
 8001378:	2300      	movs	r3, #0
 800137a:	4699      	mov	r9, r3
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	e69a      	b.n	80010b6 <__aeabi_ddiv+0x4a>
 8001380:	464b      	mov	r3, r9
 8001382:	4323      	orrs	r3, r4
 8001384:	4698      	mov	r8, r3
 8001386:	d11d      	bne.n	80013c4 <__aeabi_ddiv+0x358>
 8001388:	2308      	movs	r3, #8
 800138a:	4699      	mov	r9, r3
 800138c:	3b06      	subs	r3, #6
 800138e:	2500      	movs	r5, #0
 8001390:	4683      	mov	fp, r0
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	e68f      	b.n	80010b6 <__aeabi_ddiv+0x4a>
 8001396:	4652      	mov	r2, sl
 8001398:	4322      	orrs	r2, r4
 800139a:	d109      	bne.n	80013b0 <__aeabi_ddiv+0x344>
 800139c:	2302      	movs	r3, #2
 800139e:	4649      	mov	r1, r9
 80013a0:	4319      	orrs	r1, r3
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <__aeabi_ddiv+0x398>)
 80013a4:	4689      	mov	r9, r1
 80013a6:	469c      	mov	ip, r3
 80013a8:	2400      	movs	r4, #0
 80013aa:	2002      	movs	r0, #2
 80013ac:	44e3      	add	fp, ip
 80013ae:	e69d      	b.n	80010ec <__aeabi_ddiv+0x80>
 80013b0:	2303      	movs	r3, #3
 80013b2:	464a      	mov	r2, r9
 80013b4:	431a      	orrs	r2, r3
 80013b6:	4b13      	ldr	r3, [pc, #76]	; (8001404 <__aeabi_ddiv+0x398>)
 80013b8:	4691      	mov	r9, r2
 80013ba:	469c      	mov	ip, r3
 80013bc:	4652      	mov	r2, sl
 80013be:	2003      	movs	r0, #3
 80013c0:	44e3      	add	fp, ip
 80013c2:	e693      	b.n	80010ec <__aeabi_ddiv+0x80>
 80013c4:	230c      	movs	r3, #12
 80013c6:	4699      	mov	r9, r3
 80013c8:	3b09      	subs	r3, #9
 80013ca:	46a0      	mov	r8, r4
 80013cc:	4683      	mov	fp, r0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	e671      	b.n	80010b6 <__aeabi_ddiv+0x4a>
 80013d2:	2304      	movs	r3, #4
 80013d4:	4699      	mov	r9, r3
 80013d6:	2300      	movs	r3, #0
 80013d8:	469b      	mov	fp, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	2500      	movs	r5, #0
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	e669      	b.n	80010b6 <__aeabi_ddiv+0x4a>
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	fffffc01 	.word	0xfffffc01
 80013ec:	0800b158 	.word	0x0800b158
 80013f0:	000003ff 	.word	0x000003ff
 80013f4:	feffffff 	.word	0xfeffffff
 80013f8:	000007fe 	.word	0x000007fe
 80013fc:	000003f3 	.word	0x000003f3
 8001400:	fffffc0d 	.word	0xfffffc0d
 8001404:	fffff801 	.word	0xfffff801
 8001408:	4649      	mov	r1, r9
 800140a:	2301      	movs	r3, #1
 800140c:	4319      	orrs	r1, r3
 800140e:	4689      	mov	r9, r1
 8001410:	2400      	movs	r4, #0
 8001412:	2001      	movs	r0, #1
 8001414:	e66a      	b.n	80010ec <__aeabi_ddiv+0x80>
 8001416:	2300      	movs	r3, #0
 8001418:	2480      	movs	r4, #128	; 0x80
 800141a:	469a      	mov	sl, r3
 800141c:	2500      	movs	r5, #0
 800141e:	4b8a      	ldr	r3, [pc, #552]	; (8001648 <__aeabi_ddiv+0x5dc>)
 8001420:	0324      	lsls	r4, r4, #12
 8001422:	e67a      	b.n	800111a <__aeabi_ddiv+0xae>
 8001424:	2501      	movs	r5, #1
 8001426:	426d      	negs	r5, r5
 8001428:	2301      	movs	r3, #1
 800142a:	1a9b      	subs	r3, r3, r2
 800142c:	2b38      	cmp	r3, #56	; 0x38
 800142e:	dd00      	ble.n	8001432 <__aeabi_ddiv+0x3c6>
 8001430:	e670      	b.n	8001114 <__aeabi_ddiv+0xa8>
 8001432:	2b1f      	cmp	r3, #31
 8001434:	dc00      	bgt.n	8001438 <__aeabi_ddiv+0x3cc>
 8001436:	e0bf      	b.n	80015b8 <__aeabi_ddiv+0x54c>
 8001438:	211f      	movs	r1, #31
 800143a:	4249      	negs	r1, r1
 800143c:	1a8a      	subs	r2, r1, r2
 800143e:	4641      	mov	r1, r8
 8001440:	40d1      	lsrs	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	2b20      	cmp	r3, #32
 8001446:	d004      	beq.n	8001452 <__aeabi_ddiv+0x3e6>
 8001448:	4641      	mov	r1, r8
 800144a:	4b80      	ldr	r3, [pc, #512]	; (800164c <__aeabi_ddiv+0x5e0>)
 800144c:	445b      	add	r3, fp
 800144e:	4099      	lsls	r1, r3
 8001450:	430d      	orrs	r5, r1
 8001452:	1e6b      	subs	r3, r5, #1
 8001454:	419d      	sbcs	r5, r3
 8001456:	2307      	movs	r3, #7
 8001458:	432a      	orrs	r2, r5
 800145a:	001d      	movs	r5, r3
 800145c:	2400      	movs	r4, #0
 800145e:	4015      	ands	r5, r2
 8001460:	4213      	tst	r3, r2
 8001462:	d100      	bne.n	8001466 <__aeabi_ddiv+0x3fa>
 8001464:	e0d4      	b.n	8001610 <__aeabi_ddiv+0x5a4>
 8001466:	210f      	movs	r1, #15
 8001468:	2300      	movs	r3, #0
 800146a:	4011      	ands	r1, r2
 800146c:	2904      	cmp	r1, #4
 800146e:	d100      	bne.n	8001472 <__aeabi_ddiv+0x406>
 8001470:	e0cb      	b.n	800160a <__aeabi_ddiv+0x59e>
 8001472:	1d11      	adds	r1, r2, #4
 8001474:	4291      	cmp	r1, r2
 8001476:	4192      	sbcs	r2, r2
 8001478:	4252      	negs	r2, r2
 800147a:	189b      	adds	r3, r3, r2
 800147c:	000a      	movs	r2, r1
 800147e:	0219      	lsls	r1, r3, #8
 8001480:	d400      	bmi.n	8001484 <__aeabi_ddiv+0x418>
 8001482:	e0c2      	b.n	800160a <__aeabi_ddiv+0x59e>
 8001484:	2301      	movs	r3, #1
 8001486:	2400      	movs	r4, #0
 8001488:	2500      	movs	r5, #0
 800148a:	e646      	b.n	800111a <__aeabi_ddiv+0xae>
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	4641      	mov	r1, r8
 8001490:	031b      	lsls	r3, r3, #12
 8001492:	4219      	tst	r1, r3
 8001494:	d008      	beq.n	80014a8 <__aeabi_ddiv+0x43c>
 8001496:	421c      	tst	r4, r3
 8001498:	d106      	bne.n	80014a8 <__aeabi_ddiv+0x43c>
 800149a:	431c      	orrs	r4, r3
 800149c:	0324      	lsls	r4, r4, #12
 800149e:	46ba      	mov	sl, r7
 80014a0:	0015      	movs	r5, r2
 80014a2:	4b69      	ldr	r3, [pc, #420]	; (8001648 <__aeabi_ddiv+0x5dc>)
 80014a4:	0b24      	lsrs	r4, r4, #12
 80014a6:	e638      	b.n	800111a <__aeabi_ddiv+0xae>
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	4643      	mov	r3, r8
 80014ac:	0324      	lsls	r4, r4, #12
 80014ae:	431c      	orrs	r4, r3
 80014b0:	0324      	lsls	r4, r4, #12
 80014b2:	46b2      	mov	sl, r6
 80014b4:	4b64      	ldr	r3, [pc, #400]	; (8001648 <__aeabi_ddiv+0x5dc>)
 80014b6:	0b24      	lsrs	r4, r4, #12
 80014b8:	e62f      	b.n	800111a <__aeabi_ddiv+0xae>
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_ddiv+0x454>
 80014be:	e703      	b.n	80012c8 <__aeabi_ddiv+0x25c>
 80014c0:	19a6      	adds	r6, r4, r6
 80014c2:	1e68      	subs	r0, r5, #1
 80014c4:	42a6      	cmp	r6, r4
 80014c6:	d200      	bcs.n	80014ca <__aeabi_ddiv+0x45e>
 80014c8:	e08d      	b.n	80015e6 <__aeabi_ddiv+0x57a>
 80014ca:	428e      	cmp	r6, r1
 80014cc:	d200      	bcs.n	80014d0 <__aeabi_ddiv+0x464>
 80014ce:	e0a3      	b.n	8001618 <__aeabi_ddiv+0x5ac>
 80014d0:	d100      	bne.n	80014d4 <__aeabi_ddiv+0x468>
 80014d2:	e0b3      	b.n	800163c <__aeabi_ddiv+0x5d0>
 80014d4:	0005      	movs	r5, r0
 80014d6:	e6f5      	b.n	80012c4 <__aeabi_ddiv+0x258>
 80014d8:	42aa      	cmp	r2, r5
 80014da:	d900      	bls.n	80014de <__aeabi_ddiv+0x472>
 80014dc:	e639      	b.n	8001152 <__aeabi_ddiv+0xe6>
 80014de:	4643      	mov	r3, r8
 80014e0:	07de      	lsls	r6, r3, #31
 80014e2:	0858      	lsrs	r0, r3, #1
 80014e4:	086b      	lsrs	r3, r5, #1
 80014e6:	431e      	orrs	r6, r3
 80014e8:	07ed      	lsls	r5, r5, #31
 80014ea:	e639      	b.n	8001160 <__aeabi_ddiv+0xf4>
 80014ec:	4648      	mov	r0, r9
 80014ee:	f001 f937 	bl	8002760 <__clzsi2>
 80014f2:	0001      	movs	r1, r0
 80014f4:	0002      	movs	r2, r0
 80014f6:	3115      	adds	r1, #21
 80014f8:	3220      	adds	r2, #32
 80014fa:	291c      	cmp	r1, #28
 80014fc:	dc00      	bgt.n	8001500 <__aeabi_ddiv+0x494>
 80014fe:	e72c      	b.n	800135a <__aeabi_ddiv+0x2ee>
 8001500:	464b      	mov	r3, r9
 8001502:	3808      	subs	r0, #8
 8001504:	4083      	lsls	r3, r0
 8001506:	2500      	movs	r5, #0
 8001508:	4698      	mov	r8, r3
 800150a:	e732      	b.n	8001372 <__aeabi_ddiv+0x306>
 800150c:	f001 f928 	bl	8002760 <__clzsi2>
 8001510:	0003      	movs	r3, r0
 8001512:	001a      	movs	r2, r3
 8001514:	3215      	adds	r2, #21
 8001516:	3020      	adds	r0, #32
 8001518:	2a1c      	cmp	r2, #28
 800151a:	dc00      	bgt.n	800151e <__aeabi_ddiv+0x4b2>
 800151c:	e700      	b.n	8001320 <__aeabi_ddiv+0x2b4>
 800151e:	4654      	mov	r4, sl
 8001520:	3b08      	subs	r3, #8
 8001522:	2200      	movs	r2, #0
 8001524:	409c      	lsls	r4, r3
 8001526:	e705      	b.n	8001334 <__aeabi_ddiv+0x2c8>
 8001528:	1936      	adds	r6, r6, r4
 800152a:	3b01      	subs	r3, #1
 800152c:	42b4      	cmp	r4, r6
 800152e:	d900      	bls.n	8001532 <__aeabi_ddiv+0x4c6>
 8001530:	e6a6      	b.n	8001280 <__aeabi_ddiv+0x214>
 8001532:	42b2      	cmp	r2, r6
 8001534:	d800      	bhi.n	8001538 <__aeabi_ddiv+0x4cc>
 8001536:	e6a3      	b.n	8001280 <__aeabi_ddiv+0x214>
 8001538:	1e83      	subs	r3, r0, #2
 800153a:	1936      	adds	r6, r6, r4
 800153c:	e6a0      	b.n	8001280 <__aeabi_ddiv+0x214>
 800153e:	1909      	adds	r1, r1, r4
 8001540:	3d01      	subs	r5, #1
 8001542:	428c      	cmp	r4, r1
 8001544:	d900      	bls.n	8001548 <__aeabi_ddiv+0x4dc>
 8001546:	e68d      	b.n	8001264 <__aeabi_ddiv+0x1f8>
 8001548:	428a      	cmp	r2, r1
 800154a:	d800      	bhi.n	800154e <__aeabi_ddiv+0x4e2>
 800154c:	e68a      	b.n	8001264 <__aeabi_ddiv+0x1f8>
 800154e:	1e85      	subs	r5, r0, #2
 8001550:	1909      	adds	r1, r1, r4
 8001552:	e687      	b.n	8001264 <__aeabi_ddiv+0x1f8>
 8001554:	230f      	movs	r3, #15
 8001556:	402b      	ands	r3, r5
 8001558:	2b04      	cmp	r3, #4
 800155a:	d100      	bne.n	800155e <__aeabi_ddiv+0x4f2>
 800155c:	e6bc      	b.n	80012d8 <__aeabi_ddiv+0x26c>
 800155e:	2305      	movs	r3, #5
 8001560:	425b      	negs	r3, r3
 8001562:	42ab      	cmp	r3, r5
 8001564:	419b      	sbcs	r3, r3
 8001566:	3504      	adds	r5, #4
 8001568:	425b      	negs	r3, r3
 800156a:	08ed      	lsrs	r5, r5, #3
 800156c:	4498      	add	r8, r3
 800156e:	e6b4      	b.n	80012da <__aeabi_ddiv+0x26e>
 8001570:	42af      	cmp	r7, r5
 8001572:	d900      	bls.n	8001576 <__aeabi_ddiv+0x50a>
 8001574:	e660      	b.n	8001238 <__aeabi_ddiv+0x1cc>
 8001576:	4282      	cmp	r2, r0
 8001578:	d804      	bhi.n	8001584 <__aeabi_ddiv+0x518>
 800157a:	d000      	beq.n	800157e <__aeabi_ddiv+0x512>
 800157c:	e65c      	b.n	8001238 <__aeabi_ddiv+0x1cc>
 800157e:	42ae      	cmp	r6, r5
 8001580:	d800      	bhi.n	8001584 <__aeabi_ddiv+0x518>
 8001582:	e659      	b.n	8001238 <__aeabi_ddiv+0x1cc>
 8001584:	2302      	movs	r3, #2
 8001586:	425b      	negs	r3, r3
 8001588:	469c      	mov	ip, r3
 800158a:	9b00      	ldr	r3, [sp, #0]
 800158c:	44e0      	add	r8, ip
 800158e:	469c      	mov	ip, r3
 8001590:	4465      	add	r5, ip
 8001592:	429d      	cmp	r5, r3
 8001594:	419b      	sbcs	r3, r3
 8001596:	425b      	negs	r3, r3
 8001598:	191b      	adds	r3, r3, r4
 800159a:	18c0      	adds	r0, r0, r3
 800159c:	e64d      	b.n	800123a <__aeabi_ddiv+0x1ce>
 800159e:	428a      	cmp	r2, r1
 80015a0:	d800      	bhi.n	80015a4 <__aeabi_ddiv+0x538>
 80015a2:	e60e      	b.n	80011c2 <__aeabi_ddiv+0x156>
 80015a4:	1e83      	subs	r3, r0, #2
 80015a6:	1909      	adds	r1, r1, r4
 80015a8:	e60b      	b.n	80011c2 <__aeabi_ddiv+0x156>
 80015aa:	428a      	cmp	r2, r1
 80015ac:	d800      	bhi.n	80015b0 <__aeabi_ddiv+0x544>
 80015ae:	e5f4      	b.n	800119a <__aeabi_ddiv+0x12e>
 80015b0:	1e83      	subs	r3, r0, #2
 80015b2:	4698      	mov	r8, r3
 80015b4:	1909      	adds	r1, r1, r4
 80015b6:	e5f0      	b.n	800119a <__aeabi_ddiv+0x12e>
 80015b8:	4925      	ldr	r1, [pc, #148]	; (8001650 <__aeabi_ddiv+0x5e4>)
 80015ba:	0028      	movs	r0, r5
 80015bc:	4459      	add	r1, fp
 80015be:	408d      	lsls	r5, r1
 80015c0:	4642      	mov	r2, r8
 80015c2:	408a      	lsls	r2, r1
 80015c4:	1e69      	subs	r1, r5, #1
 80015c6:	418d      	sbcs	r5, r1
 80015c8:	4641      	mov	r1, r8
 80015ca:	40d8      	lsrs	r0, r3
 80015cc:	40d9      	lsrs	r1, r3
 80015ce:	4302      	orrs	r2, r0
 80015d0:	432a      	orrs	r2, r5
 80015d2:	000b      	movs	r3, r1
 80015d4:	0751      	lsls	r1, r2, #29
 80015d6:	d100      	bne.n	80015da <__aeabi_ddiv+0x56e>
 80015d8:	e751      	b.n	800147e <__aeabi_ddiv+0x412>
 80015da:	210f      	movs	r1, #15
 80015dc:	4011      	ands	r1, r2
 80015de:	2904      	cmp	r1, #4
 80015e0:	d000      	beq.n	80015e4 <__aeabi_ddiv+0x578>
 80015e2:	e746      	b.n	8001472 <__aeabi_ddiv+0x406>
 80015e4:	e74b      	b.n	800147e <__aeabi_ddiv+0x412>
 80015e6:	0005      	movs	r5, r0
 80015e8:	428e      	cmp	r6, r1
 80015ea:	d000      	beq.n	80015ee <__aeabi_ddiv+0x582>
 80015ec:	e66a      	b.n	80012c4 <__aeabi_ddiv+0x258>
 80015ee:	9a00      	ldr	r2, [sp, #0]
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d000      	beq.n	80015f6 <__aeabi_ddiv+0x58a>
 80015f4:	e666      	b.n	80012c4 <__aeabi_ddiv+0x258>
 80015f6:	e667      	b.n	80012c8 <__aeabi_ddiv+0x25c>
 80015f8:	4a16      	ldr	r2, [pc, #88]	; (8001654 <__aeabi_ddiv+0x5e8>)
 80015fa:	445a      	add	r2, fp
 80015fc:	2a00      	cmp	r2, #0
 80015fe:	dc00      	bgt.n	8001602 <__aeabi_ddiv+0x596>
 8001600:	e710      	b.n	8001424 <__aeabi_ddiv+0x3b8>
 8001602:	2301      	movs	r3, #1
 8001604:	2500      	movs	r5, #0
 8001606:	4498      	add	r8, r3
 8001608:	e667      	b.n	80012da <__aeabi_ddiv+0x26e>
 800160a:	075d      	lsls	r5, r3, #29
 800160c:	025b      	lsls	r3, r3, #9
 800160e:	0b1c      	lsrs	r4, r3, #12
 8001610:	08d2      	lsrs	r2, r2, #3
 8001612:	2300      	movs	r3, #0
 8001614:	4315      	orrs	r5, r2
 8001616:	e580      	b.n	800111a <__aeabi_ddiv+0xae>
 8001618:	9800      	ldr	r0, [sp, #0]
 800161a:	3d02      	subs	r5, #2
 800161c:	0042      	lsls	r2, r0, #1
 800161e:	4282      	cmp	r2, r0
 8001620:	41bf      	sbcs	r7, r7
 8001622:	427f      	negs	r7, r7
 8001624:	193c      	adds	r4, r7, r4
 8001626:	1936      	adds	r6, r6, r4
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	e7dd      	b.n	80015e8 <__aeabi_ddiv+0x57c>
 800162c:	2480      	movs	r4, #128	; 0x80
 800162e:	4643      	mov	r3, r8
 8001630:	0324      	lsls	r4, r4, #12
 8001632:	431c      	orrs	r4, r3
 8001634:	0324      	lsls	r4, r4, #12
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__aeabi_ddiv+0x5dc>)
 8001638:	0b24      	lsrs	r4, r4, #12
 800163a:	e56e      	b.n	800111a <__aeabi_ddiv+0xae>
 800163c:	9a00      	ldr	r2, [sp, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d3ea      	bcc.n	8001618 <__aeabi_ddiv+0x5ac>
 8001642:	0005      	movs	r5, r0
 8001644:	e7d3      	b.n	80015ee <__aeabi_ddiv+0x582>
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	000007ff 	.word	0x000007ff
 800164c:	0000043e 	.word	0x0000043e
 8001650:	0000041e 	.word	0x0000041e
 8001654:	000003ff 	.word	0x000003ff

08001658 <__eqdf2>:
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	464e      	mov	r6, r9
 800165c:	4645      	mov	r5, r8
 800165e:	46de      	mov	lr, fp
 8001660:	4657      	mov	r7, sl
 8001662:	4690      	mov	r8, r2
 8001664:	b5e0      	push	{r5, r6, r7, lr}
 8001666:	0017      	movs	r7, r2
 8001668:	031a      	lsls	r2, r3, #12
 800166a:	0b12      	lsrs	r2, r2, #12
 800166c:	0005      	movs	r5, r0
 800166e:	4684      	mov	ip, r0
 8001670:	4819      	ldr	r0, [pc, #100]	; (80016d8 <__eqdf2+0x80>)
 8001672:	030e      	lsls	r6, r1, #12
 8001674:	004c      	lsls	r4, r1, #1
 8001676:	4691      	mov	r9, r2
 8001678:	005a      	lsls	r2, r3, #1
 800167a:	0fdb      	lsrs	r3, r3, #31
 800167c:	469b      	mov	fp, r3
 800167e:	0b36      	lsrs	r6, r6, #12
 8001680:	0d64      	lsrs	r4, r4, #21
 8001682:	0fc9      	lsrs	r1, r1, #31
 8001684:	0d52      	lsrs	r2, r2, #21
 8001686:	4284      	cmp	r4, r0
 8001688:	d019      	beq.n	80016be <__eqdf2+0x66>
 800168a:	4282      	cmp	r2, r0
 800168c:	d010      	beq.n	80016b0 <__eqdf2+0x58>
 800168e:	2001      	movs	r0, #1
 8001690:	4294      	cmp	r4, r2
 8001692:	d10e      	bne.n	80016b2 <__eqdf2+0x5a>
 8001694:	454e      	cmp	r6, r9
 8001696:	d10c      	bne.n	80016b2 <__eqdf2+0x5a>
 8001698:	2001      	movs	r0, #1
 800169a:	45c4      	cmp	ip, r8
 800169c:	d109      	bne.n	80016b2 <__eqdf2+0x5a>
 800169e:	4559      	cmp	r1, fp
 80016a0:	d017      	beq.n	80016d2 <__eqdf2+0x7a>
 80016a2:	2c00      	cmp	r4, #0
 80016a4:	d105      	bne.n	80016b2 <__eqdf2+0x5a>
 80016a6:	0030      	movs	r0, r6
 80016a8:	4328      	orrs	r0, r5
 80016aa:	1e43      	subs	r3, r0, #1
 80016ac:	4198      	sbcs	r0, r3
 80016ae:	e000      	b.n	80016b2 <__eqdf2+0x5a>
 80016b0:	2001      	movs	r0, #1
 80016b2:	bcf0      	pop	{r4, r5, r6, r7}
 80016b4:	46bb      	mov	fp, r7
 80016b6:	46b2      	mov	sl, r6
 80016b8:	46a9      	mov	r9, r5
 80016ba:	46a0      	mov	r8, r4
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016be:	0033      	movs	r3, r6
 80016c0:	2001      	movs	r0, #1
 80016c2:	432b      	orrs	r3, r5
 80016c4:	d1f5      	bne.n	80016b2 <__eqdf2+0x5a>
 80016c6:	42a2      	cmp	r2, r4
 80016c8:	d1f3      	bne.n	80016b2 <__eqdf2+0x5a>
 80016ca:	464b      	mov	r3, r9
 80016cc:	433b      	orrs	r3, r7
 80016ce:	d1f0      	bne.n	80016b2 <__eqdf2+0x5a>
 80016d0:	e7e2      	b.n	8001698 <__eqdf2+0x40>
 80016d2:	2000      	movs	r0, #0
 80016d4:	e7ed      	b.n	80016b2 <__eqdf2+0x5a>
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	000007ff 	.word	0x000007ff

080016dc <__gedf2>:
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	4647      	mov	r7, r8
 80016e0:	46ce      	mov	lr, r9
 80016e2:	0004      	movs	r4, r0
 80016e4:	0018      	movs	r0, r3
 80016e6:	0016      	movs	r6, r2
 80016e8:	031b      	lsls	r3, r3, #12
 80016ea:	0b1b      	lsrs	r3, r3, #12
 80016ec:	4d2d      	ldr	r5, [pc, #180]	; (80017a4 <__gedf2+0xc8>)
 80016ee:	004a      	lsls	r2, r1, #1
 80016f0:	4699      	mov	r9, r3
 80016f2:	b580      	push	{r7, lr}
 80016f4:	0043      	lsls	r3, r0, #1
 80016f6:	030f      	lsls	r7, r1, #12
 80016f8:	46a4      	mov	ip, r4
 80016fa:	46b0      	mov	r8, r6
 80016fc:	0b3f      	lsrs	r7, r7, #12
 80016fe:	0d52      	lsrs	r2, r2, #21
 8001700:	0fc9      	lsrs	r1, r1, #31
 8001702:	0d5b      	lsrs	r3, r3, #21
 8001704:	0fc0      	lsrs	r0, r0, #31
 8001706:	42aa      	cmp	r2, r5
 8001708:	d021      	beq.n	800174e <__gedf2+0x72>
 800170a:	42ab      	cmp	r3, r5
 800170c:	d013      	beq.n	8001736 <__gedf2+0x5a>
 800170e:	2a00      	cmp	r2, #0
 8001710:	d122      	bne.n	8001758 <__gedf2+0x7c>
 8001712:	433c      	orrs	r4, r7
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <__gedf2+0x42>
 8001718:	464d      	mov	r5, r9
 800171a:	432e      	orrs	r6, r5
 800171c:	d022      	beq.n	8001764 <__gedf2+0x88>
 800171e:	2c00      	cmp	r4, #0
 8001720:	d010      	beq.n	8001744 <__gedf2+0x68>
 8001722:	4281      	cmp	r1, r0
 8001724:	d022      	beq.n	800176c <__gedf2+0x90>
 8001726:	2002      	movs	r0, #2
 8001728:	3901      	subs	r1, #1
 800172a:	4008      	ands	r0, r1
 800172c:	3801      	subs	r0, #1
 800172e:	bcc0      	pop	{r6, r7}
 8001730:	46b9      	mov	r9, r7
 8001732:	46b0      	mov	r8, r6
 8001734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001736:	464d      	mov	r5, r9
 8001738:	432e      	orrs	r6, r5
 800173a:	d129      	bne.n	8001790 <__gedf2+0xb4>
 800173c:	2a00      	cmp	r2, #0
 800173e:	d1f0      	bne.n	8001722 <__gedf2+0x46>
 8001740:	433c      	orrs	r4, r7
 8001742:	d1ee      	bne.n	8001722 <__gedf2+0x46>
 8001744:	2800      	cmp	r0, #0
 8001746:	d1f2      	bne.n	800172e <__gedf2+0x52>
 8001748:	2001      	movs	r0, #1
 800174a:	4240      	negs	r0, r0
 800174c:	e7ef      	b.n	800172e <__gedf2+0x52>
 800174e:	003d      	movs	r5, r7
 8001750:	4325      	orrs	r5, r4
 8001752:	d11d      	bne.n	8001790 <__gedf2+0xb4>
 8001754:	4293      	cmp	r3, r2
 8001756:	d0ee      	beq.n	8001736 <__gedf2+0x5a>
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1e2      	bne.n	8001722 <__gedf2+0x46>
 800175c:	464c      	mov	r4, r9
 800175e:	4326      	orrs	r6, r4
 8001760:	d1df      	bne.n	8001722 <__gedf2+0x46>
 8001762:	e7e0      	b.n	8001726 <__gedf2+0x4a>
 8001764:	2000      	movs	r0, #0
 8001766:	2c00      	cmp	r4, #0
 8001768:	d0e1      	beq.n	800172e <__gedf2+0x52>
 800176a:	e7dc      	b.n	8001726 <__gedf2+0x4a>
 800176c:	429a      	cmp	r2, r3
 800176e:	dc0a      	bgt.n	8001786 <__gedf2+0xaa>
 8001770:	dbe8      	blt.n	8001744 <__gedf2+0x68>
 8001772:	454f      	cmp	r7, r9
 8001774:	d8d7      	bhi.n	8001726 <__gedf2+0x4a>
 8001776:	d00e      	beq.n	8001796 <__gedf2+0xba>
 8001778:	2000      	movs	r0, #0
 800177a:	454f      	cmp	r7, r9
 800177c:	d2d7      	bcs.n	800172e <__gedf2+0x52>
 800177e:	2900      	cmp	r1, #0
 8001780:	d0e2      	beq.n	8001748 <__gedf2+0x6c>
 8001782:	0008      	movs	r0, r1
 8001784:	e7d3      	b.n	800172e <__gedf2+0x52>
 8001786:	4243      	negs	r3, r0
 8001788:	4158      	adcs	r0, r3
 800178a:	0040      	lsls	r0, r0, #1
 800178c:	3801      	subs	r0, #1
 800178e:	e7ce      	b.n	800172e <__gedf2+0x52>
 8001790:	2002      	movs	r0, #2
 8001792:	4240      	negs	r0, r0
 8001794:	e7cb      	b.n	800172e <__gedf2+0x52>
 8001796:	45c4      	cmp	ip, r8
 8001798:	d8c5      	bhi.n	8001726 <__gedf2+0x4a>
 800179a:	2000      	movs	r0, #0
 800179c:	45c4      	cmp	ip, r8
 800179e:	d2c6      	bcs.n	800172e <__gedf2+0x52>
 80017a0:	e7ed      	b.n	800177e <__gedf2+0xa2>
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	000007ff 	.word	0x000007ff

080017a8 <__ledf2>:
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017aa:	4647      	mov	r7, r8
 80017ac:	46ce      	mov	lr, r9
 80017ae:	0004      	movs	r4, r0
 80017b0:	0018      	movs	r0, r3
 80017b2:	0016      	movs	r6, r2
 80017b4:	031b      	lsls	r3, r3, #12
 80017b6:	0b1b      	lsrs	r3, r3, #12
 80017b8:	4d2c      	ldr	r5, [pc, #176]	; (800186c <__ledf2+0xc4>)
 80017ba:	004a      	lsls	r2, r1, #1
 80017bc:	4699      	mov	r9, r3
 80017be:	b580      	push	{r7, lr}
 80017c0:	0043      	lsls	r3, r0, #1
 80017c2:	030f      	lsls	r7, r1, #12
 80017c4:	46a4      	mov	ip, r4
 80017c6:	46b0      	mov	r8, r6
 80017c8:	0b3f      	lsrs	r7, r7, #12
 80017ca:	0d52      	lsrs	r2, r2, #21
 80017cc:	0fc9      	lsrs	r1, r1, #31
 80017ce:	0d5b      	lsrs	r3, r3, #21
 80017d0:	0fc0      	lsrs	r0, r0, #31
 80017d2:	42aa      	cmp	r2, r5
 80017d4:	d00d      	beq.n	80017f2 <__ledf2+0x4a>
 80017d6:	42ab      	cmp	r3, r5
 80017d8:	d010      	beq.n	80017fc <__ledf2+0x54>
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d127      	bne.n	800182e <__ledf2+0x86>
 80017de:	433c      	orrs	r4, r7
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d111      	bne.n	8001808 <__ledf2+0x60>
 80017e4:	464d      	mov	r5, r9
 80017e6:	432e      	orrs	r6, r5
 80017e8:	d10e      	bne.n	8001808 <__ledf2+0x60>
 80017ea:	2000      	movs	r0, #0
 80017ec:	2c00      	cmp	r4, #0
 80017ee:	d015      	beq.n	800181c <__ledf2+0x74>
 80017f0:	e00e      	b.n	8001810 <__ledf2+0x68>
 80017f2:	003d      	movs	r5, r7
 80017f4:	4325      	orrs	r5, r4
 80017f6:	d110      	bne.n	800181a <__ledf2+0x72>
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d118      	bne.n	800182e <__ledf2+0x86>
 80017fc:	464d      	mov	r5, r9
 80017fe:	432e      	orrs	r6, r5
 8001800:	d10b      	bne.n	800181a <__ledf2+0x72>
 8001802:	2a00      	cmp	r2, #0
 8001804:	d102      	bne.n	800180c <__ledf2+0x64>
 8001806:	433c      	orrs	r4, r7
 8001808:	2c00      	cmp	r4, #0
 800180a:	d00b      	beq.n	8001824 <__ledf2+0x7c>
 800180c:	4281      	cmp	r1, r0
 800180e:	d014      	beq.n	800183a <__ledf2+0x92>
 8001810:	2002      	movs	r0, #2
 8001812:	3901      	subs	r1, #1
 8001814:	4008      	ands	r0, r1
 8001816:	3801      	subs	r0, #1
 8001818:	e000      	b.n	800181c <__ledf2+0x74>
 800181a:	2002      	movs	r0, #2
 800181c:	bcc0      	pop	{r6, r7}
 800181e:	46b9      	mov	r9, r7
 8001820:	46b0      	mov	r8, r6
 8001822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001824:	2800      	cmp	r0, #0
 8001826:	d1f9      	bne.n	800181c <__ledf2+0x74>
 8001828:	2001      	movs	r0, #1
 800182a:	4240      	negs	r0, r0
 800182c:	e7f6      	b.n	800181c <__ledf2+0x74>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ec      	bne.n	800180c <__ledf2+0x64>
 8001832:	464c      	mov	r4, r9
 8001834:	4326      	orrs	r6, r4
 8001836:	d1e9      	bne.n	800180c <__ledf2+0x64>
 8001838:	e7ea      	b.n	8001810 <__ledf2+0x68>
 800183a:	429a      	cmp	r2, r3
 800183c:	dd04      	ble.n	8001848 <__ledf2+0xa0>
 800183e:	4243      	negs	r3, r0
 8001840:	4158      	adcs	r0, r3
 8001842:	0040      	lsls	r0, r0, #1
 8001844:	3801      	subs	r0, #1
 8001846:	e7e9      	b.n	800181c <__ledf2+0x74>
 8001848:	429a      	cmp	r2, r3
 800184a:	dbeb      	blt.n	8001824 <__ledf2+0x7c>
 800184c:	454f      	cmp	r7, r9
 800184e:	d8df      	bhi.n	8001810 <__ledf2+0x68>
 8001850:	d006      	beq.n	8001860 <__ledf2+0xb8>
 8001852:	2000      	movs	r0, #0
 8001854:	454f      	cmp	r7, r9
 8001856:	d2e1      	bcs.n	800181c <__ledf2+0x74>
 8001858:	2900      	cmp	r1, #0
 800185a:	d0e5      	beq.n	8001828 <__ledf2+0x80>
 800185c:	0008      	movs	r0, r1
 800185e:	e7dd      	b.n	800181c <__ledf2+0x74>
 8001860:	45c4      	cmp	ip, r8
 8001862:	d8d5      	bhi.n	8001810 <__ledf2+0x68>
 8001864:	2000      	movs	r0, #0
 8001866:	45c4      	cmp	ip, r8
 8001868:	d2d8      	bcs.n	800181c <__ledf2+0x74>
 800186a:	e7f5      	b.n	8001858 <__ledf2+0xb0>
 800186c:	000007ff 	.word	0x000007ff

08001870 <__aeabi_dmul>:
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	4657      	mov	r7, sl
 8001874:	464e      	mov	r6, r9
 8001876:	4645      	mov	r5, r8
 8001878:	46de      	mov	lr, fp
 800187a:	b5e0      	push	{r5, r6, r7, lr}
 800187c:	4698      	mov	r8, r3
 800187e:	030c      	lsls	r4, r1, #12
 8001880:	004b      	lsls	r3, r1, #1
 8001882:	0006      	movs	r6, r0
 8001884:	4692      	mov	sl, r2
 8001886:	b087      	sub	sp, #28
 8001888:	0b24      	lsrs	r4, r4, #12
 800188a:	0d5b      	lsrs	r3, r3, #21
 800188c:	0fcf      	lsrs	r7, r1, #31
 800188e:	2b00      	cmp	r3, #0
 8001890:	d100      	bne.n	8001894 <__aeabi_dmul+0x24>
 8001892:	e15c      	b.n	8001b4e <__aeabi_dmul+0x2de>
 8001894:	4ad9      	ldr	r2, [pc, #868]	; (8001bfc <__aeabi_dmul+0x38c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d100      	bne.n	800189c <__aeabi_dmul+0x2c>
 800189a:	e175      	b.n	8001b88 <__aeabi_dmul+0x318>
 800189c:	0f42      	lsrs	r2, r0, #29
 800189e:	00e4      	lsls	r4, r4, #3
 80018a0:	4314      	orrs	r4, r2
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0412      	lsls	r2, r2, #16
 80018a6:	4314      	orrs	r4, r2
 80018a8:	4ad5      	ldr	r2, [pc, #852]	; (8001c00 <__aeabi_dmul+0x390>)
 80018aa:	00c5      	lsls	r5, r0, #3
 80018ac:	4694      	mov	ip, r2
 80018ae:	4463      	add	r3, ip
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	4699      	mov	r9, r3
 80018b6:	469b      	mov	fp, r3
 80018b8:	4643      	mov	r3, r8
 80018ba:	4642      	mov	r2, r8
 80018bc:	031e      	lsls	r6, r3, #12
 80018be:	0fd2      	lsrs	r2, r2, #31
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4650      	mov	r0, sl
 80018c4:	4690      	mov	r8, r2
 80018c6:	0b36      	lsrs	r6, r6, #12
 80018c8:	0d5b      	lsrs	r3, r3, #21
 80018ca:	d100      	bne.n	80018ce <__aeabi_dmul+0x5e>
 80018cc:	e120      	b.n	8001b10 <__aeabi_dmul+0x2a0>
 80018ce:	4acb      	ldr	r2, [pc, #812]	; (8001bfc <__aeabi_dmul+0x38c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dmul+0x66>
 80018d4:	e162      	b.n	8001b9c <__aeabi_dmul+0x32c>
 80018d6:	49ca      	ldr	r1, [pc, #808]	; (8001c00 <__aeabi_dmul+0x390>)
 80018d8:	0f42      	lsrs	r2, r0, #29
 80018da:	468c      	mov	ip, r1
 80018dc:	9900      	ldr	r1, [sp, #0]
 80018de:	4463      	add	r3, ip
 80018e0:	00f6      	lsls	r6, r6, #3
 80018e2:	468c      	mov	ip, r1
 80018e4:	4316      	orrs	r6, r2
 80018e6:	2280      	movs	r2, #128	; 0x80
 80018e8:	449c      	add	ip, r3
 80018ea:	0412      	lsls	r2, r2, #16
 80018ec:	4663      	mov	r3, ip
 80018ee:	4316      	orrs	r6, r2
 80018f0:	00c2      	lsls	r2, r0, #3
 80018f2:	2000      	movs	r0, #0
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	9900      	ldr	r1, [sp, #0]
 80018f8:	4643      	mov	r3, r8
 80018fa:	3101      	adds	r1, #1
 80018fc:	468c      	mov	ip, r1
 80018fe:	4649      	mov	r1, r9
 8001900:	407b      	eors	r3, r7
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	290f      	cmp	r1, #15
 8001906:	d826      	bhi.n	8001956 <__aeabi_dmul+0xe6>
 8001908:	4bbe      	ldr	r3, [pc, #760]	; (8001c04 <__aeabi_dmul+0x394>)
 800190a:	0089      	lsls	r1, r1, #2
 800190c:	5859      	ldr	r1, [r3, r1]
 800190e:	468f      	mov	pc, r1
 8001910:	4643      	mov	r3, r8
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	0034      	movs	r4, r6
 8001916:	0015      	movs	r5, r2
 8001918:	4683      	mov	fp, r0
 800191a:	465b      	mov	r3, fp
 800191c:	2b02      	cmp	r3, #2
 800191e:	d016      	beq.n	800194e <__aeabi_dmul+0xde>
 8001920:	2b03      	cmp	r3, #3
 8001922:	d100      	bne.n	8001926 <__aeabi_dmul+0xb6>
 8001924:	e203      	b.n	8001d2e <__aeabi_dmul+0x4be>
 8001926:	2b01      	cmp	r3, #1
 8001928:	d000      	beq.n	800192c <__aeabi_dmul+0xbc>
 800192a:	e0cd      	b.n	8001ac8 <__aeabi_dmul+0x258>
 800192c:	2200      	movs	r2, #0
 800192e:	2400      	movs	r4, #0
 8001930:	2500      	movs	r5, #0
 8001932:	9b01      	ldr	r3, [sp, #4]
 8001934:	0512      	lsls	r2, r2, #20
 8001936:	4322      	orrs	r2, r4
 8001938:	07db      	lsls	r3, r3, #31
 800193a:	431a      	orrs	r2, r3
 800193c:	0028      	movs	r0, r5
 800193e:	0011      	movs	r1, r2
 8001940:	b007      	add	sp, #28
 8001942:	bcf0      	pop	{r4, r5, r6, r7}
 8001944:	46bb      	mov	fp, r7
 8001946:	46b2      	mov	sl, r6
 8001948:	46a9      	mov	r9, r5
 800194a:	46a0      	mov	r8, r4
 800194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194e:	2400      	movs	r4, #0
 8001950:	2500      	movs	r5, #0
 8001952:	4aaa      	ldr	r2, [pc, #680]	; (8001bfc <__aeabi_dmul+0x38c>)
 8001954:	e7ed      	b.n	8001932 <__aeabi_dmul+0xc2>
 8001956:	0c28      	lsrs	r0, r5, #16
 8001958:	042d      	lsls	r5, r5, #16
 800195a:	0c2d      	lsrs	r5, r5, #16
 800195c:	002b      	movs	r3, r5
 800195e:	0c11      	lsrs	r1, r2, #16
 8001960:	0412      	lsls	r2, r2, #16
 8001962:	0c12      	lsrs	r2, r2, #16
 8001964:	4353      	muls	r3, r2
 8001966:	4698      	mov	r8, r3
 8001968:	0013      	movs	r3, r2
 800196a:	002f      	movs	r7, r5
 800196c:	4343      	muls	r3, r0
 800196e:	4699      	mov	r9, r3
 8001970:	434f      	muls	r7, r1
 8001972:	444f      	add	r7, r9
 8001974:	46bb      	mov	fp, r7
 8001976:	4647      	mov	r7, r8
 8001978:	000b      	movs	r3, r1
 800197a:	0c3f      	lsrs	r7, r7, #16
 800197c:	46ba      	mov	sl, r7
 800197e:	4343      	muls	r3, r0
 8001980:	44da      	add	sl, fp
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	45d1      	cmp	r9, sl
 8001986:	d904      	bls.n	8001992 <__aeabi_dmul+0x122>
 8001988:	2780      	movs	r7, #128	; 0x80
 800198a:	027f      	lsls	r7, r7, #9
 800198c:	46b9      	mov	r9, r7
 800198e:	444b      	add	r3, r9
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	4653      	mov	r3, sl
 8001994:	0c1b      	lsrs	r3, r3, #16
 8001996:	469b      	mov	fp, r3
 8001998:	4653      	mov	r3, sl
 800199a:	041f      	lsls	r7, r3, #16
 800199c:	4643      	mov	r3, r8
 800199e:	041b      	lsls	r3, r3, #16
 80019a0:	0c1b      	lsrs	r3, r3, #16
 80019a2:	4698      	mov	r8, r3
 80019a4:	003b      	movs	r3, r7
 80019a6:	4443      	add	r3, r8
 80019a8:	9304      	str	r3, [sp, #16]
 80019aa:	0c33      	lsrs	r3, r6, #16
 80019ac:	0436      	lsls	r6, r6, #16
 80019ae:	0c36      	lsrs	r6, r6, #16
 80019b0:	4698      	mov	r8, r3
 80019b2:	0033      	movs	r3, r6
 80019b4:	4343      	muls	r3, r0
 80019b6:	4699      	mov	r9, r3
 80019b8:	4643      	mov	r3, r8
 80019ba:	4343      	muls	r3, r0
 80019bc:	002f      	movs	r7, r5
 80019be:	469a      	mov	sl, r3
 80019c0:	4643      	mov	r3, r8
 80019c2:	4377      	muls	r7, r6
 80019c4:	435d      	muls	r5, r3
 80019c6:	0c38      	lsrs	r0, r7, #16
 80019c8:	444d      	add	r5, r9
 80019ca:	1945      	adds	r5, r0, r5
 80019cc:	45a9      	cmp	r9, r5
 80019ce:	d903      	bls.n	80019d8 <__aeabi_dmul+0x168>
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	4699      	mov	r9, r3
 80019d6:	44ca      	add	sl, r9
 80019d8:	043f      	lsls	r7, r7, #16
 80019da:	0c28      	lsrs	r0, r5, #16
 80019dc:	0c3f      	lsrs	r7, r7, #16
 80019de:	042d      	lsls	r5, r5, #16
 80019e0:	19ed      	adds	r5, r5, r7
 80019e2:	0c27      	lsrs	r7, r4, #16
 80019e4:	0424      	lsls	r4, r4, #16
 80019e6:	0c24      	lsrs	r4, r4, #16
 80019e8:	0003      	movs	r3, r0
 80019ea:	0020      	movs	r0, r4
 80019ec:	4350      	muls	r0, r2
 80019ee:	437a      	muls	r2, r7
 80019f0:	4691      	mov	r9, r2
 80019f2:	003a      	movs	r2, r7
 80019f4:	4453      	add	r3, sl
 80019f6:	9305      	str	r3, [sp, #20]
 80019f8:	0c03      	lsrs	r3, r0, #16
 80019fa:	469a      	mov	sl, r3
 80019fc:	434a      	muls	r2, r1
 80019fe:	4361      	muls	r1, r4
 8001a00:	4449      	add	r1, r9
 8001a02:	4451      	add	r1, sl
 8001a04:	44ab      	add	fp, r5
 8001a06:	4589      	cmp	r9, r1
 8001a08:	d903      	bls.n	8001a12 <__aeabi_dmul+0x1a2>
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	025b      	lsls	r3, r3, #9
 8001a0e:	4699      	mov	r9, r3
 8001a10:	444a      	add	r2, r9
 8001a12:	0400      	lsls	r0, r0, #16
 8001a14:	0c0b      	lsrs	r3, r1, #16
 8001a16:	0c00      	lsrs	r0, r0, #16
 8001a18:	0409      	lsls	r1, r1, #16
 8001a1a:	1809      	adds	r1, r1, r0
 8001a1c:	0020      	movs	r0, r4
 8001a1e:	4699      	mov	r9, r3
 8001a20:	4643      	mov	r3, r8
 8001a22:	4370      	muls	r0, r6
 8001a24:	435c      	muls	r4, r3
 8001a26:	437e      	muls	r6, r7
 8001a28:	435f      	muls	r7, r3
 8001a2a:	0c03      	lsrs	r3, r0, #16
 8001a2c:	4698      	mov	r8, r3
 8001a2e:	19a4      	adds	r4, r4, r6
 8001a30:	4444      	add	r4, r8
 8001a32:	444a      	add	r2, r9
 8001a34:	9703      	str	r7, [sp, #12]
 8001a36:	42a6      	cmp	r6, r4
 8001a38:	d904      	bls.n	8001a44 <__aeabi_dmul+0x1d4>
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	025b      	lsls	r3, r3, #9
 8001a3e:	4698      	mov	r8, r3
 8001a40:	4447      	add	r7, r8
 8001a42:	9703      	str	r7, [sp, #12]
 8001a44:	0423      	lsls	r3, r4, #16
 8001a46:	9e02      	ldr	r6, [sp, #8]
 8001a48:	469a      	mov	sl, r3
 8001a4a:	9b05      	ldr	r3, [sp, #20]
 8001a4c:	445e      	add	r6, fp
 8001a4e:	4698      	mov	r8, r3
 8001a50:	42ae      	cmp	r6, r5
 8001a52:	41ad      	sbcs	r5, r5
 8001a54:	1876      	adds	r6, r6, r1
 8001a56:	428e      	cmp	r6, r1
 8001a58:	4189      	sbcs	r1, r1
 8001a5a:	0400      	lsls	r0, r0, #16
 8001a5c:	0c00      	lsrs	r0, r0, #16
 8001a5e:	4450      	add	r0, sl
 8001a60:	4440      	add	r0, r8
 8001a62:	426d      	negs	r5, r5
 8001a64:	1947      	adds	r7, r0, r5
 8001a66:	46b8      	mov	r8, r7
 8001a68:	4693      	mov	fp, r2
 8001a6a:	4249      	negs	r1, r1
 8001a6c:	4689      	mov	r9, r1
 8001a6e:	44c3      	add	fp, r8
 8001a70:	44d9      	add	r9, fp
 8001a72:	4298      	cmp	r0, r3
 8001a74:	4180      	sbcs	r0, r0
 8001a76:	45a8      	cmp	r8, r5
 8001a78:	41ad      	sbcs	r5, r5
 8001a7a:	4593      	cmp	fp, r2
 8001a7c:	4192      	sbcs	r2, r2
 8001a7e:	4589      	cmp	r9, r1
 8001a80:	4189      	sbcs	r1, r1
 8001a82:	426d      	negs	r5, r5
 8001a84:	4240      	negs	r0, r0
 8001a86:	4328      	orrs	r0, r5
 8001a88:	0c24      	lsrs	r4, r4, #16
 8001a8a:	4252      	negs	r2, r2
 8001a8c:	4249      	negs	r1, r1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	9b03      	ldr	r3, [sp, #12]
 8001a92:	1900      	adds	r0, r0, r4
 8001a94:	1880      	adds	r0, r0, r2
 8001a96:	18c7      	adds	r7, r0, r3
 8001a98:	464b      	mov	r3, r9
 8001a9a:	0ddc      	lsrs	r4, r3, #23
 8001a9c:	9b04      	ldr	r3, [sp, #16]
 8001a9e:	0275      	lsls	r5, r6, #9
 8001aa0:	431d      	orrs	r5, r3
 8001aa2:	1e6a      	subs	r2, r5, #1
 8001aa4:	4195      	sbcs	r5, r2
 8001aa6:	464b      	mov	r3, r9
 8001aa8:	0df6      	lsrs	r6, r6, #23
 8001aaa:	027f      	lsls	r7, r7, #9
 8001aac:	4335      	orrs	r5, r6
 8001aae:	025a      	lsls	r2, r3, #9
 8001ab0:	433c      	orrs	r4, r7
 8001ab2:	4315      	orrs	r5, r2
 8001ab4:	01fb      	lsls	r3, r7, #7
 8001ab6:	d400      	bmi.n	8001aba <__aeabi_dmul+0x24a>
 8001ab8:	e11c      	b.n	8001cf4 <__aeabi_dmul+0x484>
 8001aba:	2101      	movs	r1, #1
 8001abc:	086a      	lsrs	r2, r5, #1
 8001abe:	400d      	ands	r5, r1
 8001ac0:	4315      	orrs	r5, r2
 8001ac2:	07e2      	lsls	r2, r4, #31
 8001ac4:	4315      	orrs	r5, r2
 8001ac6:	0864      	lsrs	r4, r4, #1
 8001ac8:	494f      	ldr	r1, [pc, #316]	; (8001c08 <__aeabi_dmul+0x398>)
 8001aca:	4461      	add	r1, ip
 8001acc:	2900      	cmp	r1, #0
 8001ace:	dc00      	bgt.n	8001ad2 <__aeabi_dmul+0x262>
 8001ad0:	e0b0      	b.n	8001c34 <__aeabi_dmul+0x3c4>
 8001ad2:	076b      	lsls	r3, r5, #29
 8001ad4:	d009      	beq.n	8001aea <__aeabi_dmul+0x27a>
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	402a      	ands	r2, r5
 8001ada:	2a04      	cmp	r2, #4
 8001adc:	d005      	beq.n	8001aea <__aeabi_dmul+0x27a>
 8001ade:	1d2a      	adds	r2, r5, #4
 8001ae0:	42aa      	cmp	r2, r5
 8001ae2:	41ad      	sbcs	r5, r5
 8001ae4:	426d      	negs	r5, r5
 8001ae6:	1964      	adds	r4, r4, r5
 8001ae8:	0015      	movs	r5, r2
 8001aea:	01e3      	lsls	r3, r4, #7
 8001aec:	d504      	bpl.n	8001af8 <__aeabi_dmul+0x288>
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	4a46      	ldr	r2, [pc, #280]	; (8001c0c <__aeabi_dmul+0x39c>)
 8001af2:	00c9      	lsls	r1, r1, #3
 8001af4:	4014      	ands	r4, r2
 8001af6:	4461      	add	r1, ip
 8001af8:	4a45      	ldr	r2, [pc, #276]	; (8001c10 <__aeabi_dmul+0x3a0>)
 8001afa:	4291      	cmp	r1, r2
 8001afc:	dd00      	ble.n	8001b00 <__aeabi_dmul+0x290>
 8001afe:	e726      	b.n	800194e <__aeabi_dmul+0xde>
 8001b00:	0762      	lsls	r2, r4, #29
 8001b02:	08ed      	lsrs	r5, r5, #3
 8001b04:	0264      	lsls	r4, r4, #9
 8001b06:	0549      	lsls	r1, r1, #21
 8001b08:	4315      	orrs	r5, r2
 8001b0a:	0b24      	lsrs	r4, r4, #12
 8001b0c:	0d4a      	lsrs	r2, r1, #21
 8001b0e:	e710      	b.n	8001932 <__aeabi_dmul+0xc2>
 8001b10:	4652      	mov	r2, sl
 8001b12:	4332      	orrs	r2, r6
 8001b14:	d100      	bne.n	8001b18 <__aeabi_dmul+0x2a8>
 8001b16:	e07f      	b.n	8001c18 <__aeabi_dmul+0x3a8>
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	d100      	bne.n	8001b1e <__aeabi_dmul+0x2ae>
 8001b1c:	e0dc      	b.n	8001cd8 <__aeabi_dmul+0x468>
 8001b1e:	0030      	movs	r0, r6
 8001b20:	f000 fe1e 	bl	8002760 <__clzsi2>
 8001b24:	0002      	movs	r2, r0
 8001b26:	3a0b      	subs	r2, #11
 8001b28:	231d      	movs	r3, #29
 8001b2a:	0001      	movs	r1, r0
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	4652      	mov	r2, sl
 8001b30:	3908      	subs	r1, #8
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	408e      	lsls	r6, r1
 8001b36:	4316      	orrs	r6, r2
 8001b38:	4652      	mov	r2, sl
 8001b3a:	408a      	lsls	r2, r1
 8001b3c:	9b00      	ldr	r3, [sp, #0]
 8001b3e:	4935      	ldr	r1, [pc, #212]	; (8001c14 <__aeabi_dmul+0x3a4>)
 8001b40:	1a18      	subs	r0, r3, r0
 8001b42:	0003      	movs	r3, r0
 8001b44:	468c      	mov	ip, r1
 8001b46:	4463      	add	r3, ip
 8001b48:	2000      	movs	r0, #0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	e6d3      	b.n	80018f6 <__aeabi_dmul+0x86>
 8001b4e:	0025      	movs	r5, r4
 8001b50:	4305      	orrs	r5, r0
 8001b52:	d04a      	beq.n	8001bea <__aeabi_dmul+0x37a>
 8001b54:	2c00      	cmp	r4, #0
 8001b56:	d100      	bne.n	8001b5a <__aeabi_dmul+0x2ea>
 8001b58:	e0b0      	b.n	8001cbc <__aeabi_dmul+0x44c>
 8001b5a:	0020      	movs	r0, r4
 8001b5c:	f000 fe00 	bl	8002760 <__clzsi2>
 8001b60:	0001      	movs	r1, r0
 8001b62:	0002      	movs	r2, r0
 8001b64:	390b      	subs	r1, #11
 8001b66:	231d      	movs	r3, #29
 8001b68:	0010      	movs	r0, r2
 8001b6a:	1a5b      	subs	r3, r3, r1
 8001b6c:	0031      	movs	r1, r6
 8001b6e:	0035      	movs	r5, r6
 8001b70:	3808      	subs	r0, #8
 8001b72:	4084      	lsls	r4, r0
 8001b74:	40d9      	lsrs	r1, r3
 8001b76:	4085      	lsls	r5, r0
 8001b78:	430c      	orrs	r4, r1
 8001b7a:	4826      	ldr	r0, [pc, #152]	; (8001c14 <__aeabi_dmul+0x3a4>)
 8001b7c:	1a83      	subs	r3, r0, r2
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	4699      	mov	r9, r3
 8001b84:	469b      	mov	fp, r3
 8001b86:	e697      	b.n	80018b8 <__aeabi_dmul+0x48>
 8001b88:	0005      	movs	r5, r0
 8001b8a:	4325      	orrs	r5, r4
 8001b8c:	d126      	bne.n	8001bdc <__aeabi_dmul+0x36c>
 8001b8e:	2208      	movs	r2, #8
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2302      	movs	r3, #2
 8001b94:	2400      	movs	r4, #0
 8001b96:	4691      	mov	r9, r2
 8001b98:	469b      	mov	fp, r3
 8001b9a:	e68d      	b.n	80018b8 <__aeabi_dmul+0x48>
 8001b9c:	4652      	mov	r2, sl
 8001b9e:	9b00      	ldr	r3, [sp, #0]
 8001ba0:	4332      	orrs	r2, r6
 8001ba2:	d110      	bne.n	8001bc6 <__aeabi_dmul+0x356>
 8001ba4:	4915      	ldr	r1, [pc, #84]	; (8001bfc <__aeabi_dmul+0x38c>)
 8001ba6:	2600      	movs	r6, #0
 8001ba8:	468c      	mov	ip, r1
 8001baa:	4463      	add	r3, ip
 8001bac:	4649      	mov	r1, r9
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	4319      	orrs	r1, r3
 8001bb4:	4689      	mov	r9, r1
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	e69d      	b.n	80018f6 <__aeabi_dmul+0x86>
 8001bba:	465b      	mov	r3, fp
 8001bbc:	9701      	str	r7, [sp, #4]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d000      	beq.n	8001bc4 <__aeabi_dmul+0x354>
 8001bc2:	e6ad      	b.n	8001920 <__aeabi_dmul+0xb0>
 8001bc4:	e6c3      	b.n	800194e <__aeabi_dmul+0xde>
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <__aeabi_dmul+0x38c>)
 8001bc8:	2003      	movs	r0, #3
 8001bca:	4694      	mov	ip, r2
 8001bcc:	4463      	add	r3, ip
 8001bce:	464a      	mov	r2, r9
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	4691      	mov	r9, r2
 8001bd8:	4652      	mov	r2, sl
 8001bda:	e68c      	b.n	80018f6 <__aeabi_dmul+0x86>
 8001bdc:	220c      	movs	r2, #12
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2303      	movs	r3, #3
 8001be2:	0005      	movs	r5, r0
 8001be4:	4691      	mov	r9, r2
 8001be6:	469b      	mov	fp, r3
 8001be8:	e666      	b.n	80018b8 <__aeabi_dmul+0x48>
 8001bea:	2304      	movs	r3, #4
 8001bec:	4699      	mov	r9, r3
 8001bee:	2300      	movs	r3, #0
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	2400      	movs	r4, #0
 8001bf6:	469b      	mov	fp, r3
 8001bf8:	e65e      	b.n	80018b8 <__aeabi_dmul+0x48>
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	000007ff 	.word	0x000007ff
 8001c00:	fffffc01 	.word	0xfffffc01
 8001c04:	0800b198 	.word	0x0800b198
 8001c08:	000003ff 	.word	0x000003ff
 8001c0c:	feffffff 	.word	0xfeffffff
 8001c10:	000007fe 	.word	0x000007fe
 8001c14:	fffffc0d 	.word	0xfffffc0d
 8001c18:	4649      	mov	r1, r9
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	4319      	orrs	r1, r3
 8001c1e:	4689      	mov	r9, r1
 8001c20:	2600      	movs	r6, #0
 8001c22:	2001      	movs	r0, #1
 8001c24:	e667      	b.n	80018f6 <__aeabi_dmul+0x86>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2480      	movs	r4, #128	; 0x80
 8001c2a:	2500      	movs	r5, #0
 8001c2c:	4a43      	ldr	r2, [pc, #268]	; (8001d3c <__aeabi_dmul+0x4cc>)
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	0324      	lsls	r4, r4, #12
 8001c32:	e67e      	b.n	8001932 <__aeabi_dmul+0xc2>
 8001c34:	2001      	movs	r0, #1
 8001c36:	1a40      	subs	r0, r0, r1
 8001c38:	2838      	cmp	r0, #56	; 0x38
 8001c3a:	dd00      	ble.n	8001c3e <__aeabi_dmul+0x3ce>
 8001c3c:	e676      	b.n	800192c <__aeabi_dmul+0xbc>
 8001c3e:	281f      	cmp	r0, #31
 8001c40:	dd5b      	ble.n	8001cfa <__aeabi_dmul+0x48a>
 8001c42:	221f      	movs	r2, #31
 8001c44:	0023      	movs	r3, r4
 8001c46:	4252      	negs	r2, r2
 8001c48:	1a51      	subs	r1, r2, r1
 8001c4a:	40cb      	lsrs	r3, r1
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	2820      	cmp	r0, #32
 8001c50:	d003      	beq.n	8001c5a <__aeabi_dmul+0x3ea>
 8001c52:	4a3b      	ldr	r2, [pc, #236]	; (8001d40 <__aeabi_dmul+0x4d0>)
 8001c54:	4462      	add	r2, ip
 8001c56:	4094      	lsls	r4, r2
 8001c58:	4325      	orrs	r5, r4
 8001c5a:	1e6a      	subs	r2, r5, #1
 8001c5c:	4195      	sbcs	r5, r2
 8001c5e:	002a      	movs	r2, r5
 8001c60:	430a      	orrs	r2, r1
 8001c62:	2107      	movs	r1, #7
 8001c64:	000d      	movs	r5, r1
 8001c66:	2400      	movs	r4, #0
 8001c68:	4015      	ands	r5, r2
 8001c6a:	4211      	tst	r1, r2
 8001c6c:	d05b      	beq.n	8001d26 <__aeabi_dmul+0x4b6>
 8001c6e:	210f      	movs	r1, #15
 8001c70:	2400      	movs	r4, #0
 8001c72:	4011      	ands	r1, r2
 8001c74:	2904      	cmp	r1, #4
 8001c76:	d053      	beq.n	8001d20 <__aeabi_dmul+0x4b0>
 8001c78:	1d11      	adds	r1, r2, #4
 8001c7a:	4291      	cmp	r1, r2
 8001c7c:	4192      	sbcs	r2, r2
 8001c7e:	4252      	negs	r2, r2
 8001c80:	18a4      	adds	r4, r4, r2
 8001c82:	000a      	movs	r2, r1
 8001c84:	0223      	lsls	r3, r4, #8
 8001c86:	d54b      	bpl.n	8001d20 <__aeabi_dmul+0x4b0>
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	2500      	movs	r5, #0
 8001c8e:	e650      	b.n	8001932 <__aeabi_dmul+0xc2>
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	031b      	lsls	r3, r3, #12
 8001c94:	421c      	tst	r4, r3
 8001c96:	d009      	beq.n	8001cac <__aeabi_dmul+0x43c>
 8001c98:	421e      	tst	r6, r3
 8001c9a:	d107      	bne.n	8001cac <__aeabi_dmul+0x43c>
 8001c9c:	4333      	orrs	r3, r6
 8001c9e:	031c      	lsls	r4, r3, #12
 8001ca0:	4643      	mov	r3, r8
 8001ca2:	0015      	movs	r5, r2
 8001ca4:	0b24      	lsrs	r4, r4, #12
 8001ca6:	4a25      	ldr	r2, [pc, #148]	; (8001d3c <__aeabi_dmul+0x4cc>)
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	e642      	b.n	8001932 <__aeabi_dmul+0xc2>
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	0312      	lsls	r2, r2, #12
 8001cb0:	4314      	orrs	r4, r2
 8001cb2:	0324      	lsls	r4, r4, #12
 8001cb4:	4a21      	ldr	r2, [pc, #132]	; (8001d3c <__aeabi_dmul+0x4cc>)
 8001cb6:	0b24      	lsrs	r4, r4, #12
 8001cb8:	9701      	str	r7, [sp, #4]
 8001cba:	e63a      	b.n	8001932 <__aeabi_dmul+0xc2>
 8001cbc:	f000 fd50 	bl	8002760 <__clzsi2>
 8001cc0:	0001      	movs	r1, r0
 8001cc2:	0002      	movs	r2, r0
 8001cc4:	3115      	adds	r1, #21
 8001cc6:	3220      	adds	r2, #32
 8001cc8:	291c      	cmp	r1, #28
 8001cca:	dc00      	bgt.n	8001cce <__aeabi_dmul+0x45e>
 8001ccc:	e74b      	b.n	8001b66 <__aeabi_dmul+0x2f6>
 8001cce:	0034      	movs	r4, r6
 8001cd0:	3808      	subs	r0, #8
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	4084      	lsls	r4, r0
 8001cd6:	e750      	b.n	8001b7a <__aeabi_dmul+0x30a>
 8001cd8:	f000 fd42 	bl	8002760 <__clzsi2>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	001a      	movs	r2, r3
 8001ce0:	3215      	adds	r2, #21
 8001ce2:	3020      	adds	r0, #32
 8001ce4:	2a1c      	cmp	r2, #28
 8001ce6:	dc00      	bgt.n	8001cea <__aeabi_dmul+0x47a>
 8001ce8:	e71e      	b.n	8001b28 <__aeabi_dmul+0x2b8>
 8001cea:	4656      	mov	r6, sl
 8001cec:	3b08      	subs	r3, #8
 8001cee:	2200      	movs	r2, #0
 8001cf0:	409e      	lsls	r6, r3
 8001cf2:	e723      	b.n	8001b3c <__aeabi_dmul+0x2cc>
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	469c      	mov	ip, r3
 8001cf8:	e6e6      	b.n	8001ac8 <__aeabi_dmul+0x258>
 8001cfa:	4912      	ldr	r1, [pc, #72]	; (8001d44 <__aeabi_dmul+0x4d4>)
 8001cfc:	0022      	movs	r2, r4
 8001cfe:	4461      	add	r1, ip
 8001d00:	002e      	movs	r6, r5
 8001d02:	408d      	lsls	r5, r1
 8001d04:	408a      	lsls	r2, r1
 8001d06:	40c6      	lsrs	r6, r0
 8001d08:	1e69      	subs	r1, r5, #1
 8001d0a:	418d      	sbcs	r5, r1
 8001d0c:	4332      	orrs	r2, r6
 8001d0e:	432a      	orrs	r2, r5
 8001d10:	40c4      	lsrs	r4, r0
 8001d12:	0753      	lsls	r3, r2, #29
 8001d14:	d0b6      	beq.n	8001c84 <__aeabi_dmul+0x414>
 8001d16:	210f      	movs	r1, #15
 8001d18:	4011      	ands	r1, r2
 8001d1a:	2904      	cmp	r1, #4
 8001d1c:	d1ac      	bne.n	8001c78 <__aeabi_dmul+0x408>
 8001d1e:	e7b1      	b.n	8001c84 <__aeabi_dmul+0x414>
 8001d20:	0765      	lsls	r5, r4, #29
 8001d22:	0264      	lsls	r4, r4, #9
 8001d24:	0b24      	lsrs	r4, r4, #12
 8001d26:	08d2      	lsrs	r2, r2, #3
 8001d28:	4315      	orrs	r5, r2
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	e601      	b.n	8001932 <__aeabi_dmul+0xc2>
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	0312      	lsls	r2, r2, #12
 8001d32:	4314      	orrs	r4, r2
 8001d34:	0324      	lsls	r4, r4, #12
 8001d36:	4a01      	ldr	r2, [pc, #4]	; (8001d3c <__aeabi_dmul+0x4cc>)
 8001d38:	0b24      	lsrs	r4, r4, #12
 8001d3a:	e5fa      	b.n	8001932 <__aeabi_dmul+0xc2>
 8001d3c:	000007ff 	.word	0x000007ff
 8001d40:	0000043e 	.word	0x0000043e
 8001d44:	0000041e 	.word	0x0000041e

08001d48 <__aeabi_dsub>:
 8001d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d4a:	4657      	mov	r7, sl
 8001d4c:	464e      	mov	r6, r9
 8001d4e:	4645      	mov	r5, r8
 8001d50:	46de      	mov	lr, fp
 8001d52:	b5e0      	push	{r5, r6, r7, lr}
 8001d54:	001e      	movs	r6, r3
 8001d56:	0017      	movs	r7, r2
 8001d58:	004a      	lsls	r2, r1, #1
 8001d5a:	030b      	lsls	r3, r1, #12
 8001d5c:	0d52      	lsrs	r2, r2, #21
 8001d5e:	0a5b      	lsrs	r3, r3, #9
 8001d60:	4690      	mov	r8, r2
 8001d62:	0f42      	lsrs	r2, r0, #29
 8001d64:	431a      	orrs	r2, r3
 8001d66:	0fcd      	lsrs	r5, r1, #31
 8001d68:	4ccd      	ldr	r4, [pc, #820]	; (80020a0 <__aeabi_dsub+0x358>)
 8001d6a:	0331      	lsls	r1, r6, #12
 8001d6c:	00c3      	lsls	r3, r0, #3
 8001d6e:	4694      	mov	ip, r2
 8001d70:	0070      	lsls	r0, r6, #1
 8001d72:	0f7a      	lsrs	r2, r7, #29
 8001d74:	0a49      	lsrs	r1, r1, #9
 8001d76:	00ff      	lsls	r7, r7, #3
 8001d78:	469a      	mov	sl, r3
 8001d7a:	46b9      	mov	r9, r7
 8001d7c:	0d40      	lsrs	r0, r0, #21
 8001d7e:	0ff6      	lsrs	r6, r6, #31
 8001d80:	4311      	orrs	r1, r2
 8001d82:	42a0      	cmp	r0, r4
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x40>
 8001d86:	e0b1      	b.n	8001eec <__aeabi_dsub+0x1a4>
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4056      	eors	r6, r2
 8001d8c:	46b3      	mov	fp, r6
 8001d8e:	42b5      	cmp	r5, r6
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x4c>
 8001d92:	e088      	b.n	8001ea6 <__aeabi_dsub+0x15e>
 8001d94:	4642      	mov	r2, r8
 8001d96:	1a12      	subs	r2, r2, r0
 8001d98:	2a00      	cmp	r2, #0
 8001d9a:	dc00      	bgt.n	8001d9e <__aeabi_dsub+0x56>
 8001d9c:	e0ae      	b.n	8001efc <__aeabi_dsub+0x1b4>
 8001d9e:	2800      	cmp	r0, #0
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dsub+0x5c>
 8001da2:	e0c1      	b.n	8001f28 <__aeabi_dsub+0x1e0>
 8001da4:	48be      	ldr	r0, [pc, #760]	; (80020a0 <__aeabi_dsub+0x358>)
 8001da6:	4580      	cmp	r8, r0
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x64>
 8001daa:	e151      	b.n	8002050 <__aeabi_dsub+0x308>
 8001dac:	2080      	movs	r0, #128	; 0x80
 8001dae:	0400      	lsls	r0, r0, #16
 8001db0:	4301      	orrs	r1, r0
 8001db2:	2a38      	cmp	r2, #56	; 0x38
 8001db4:	dd00      	ble.n	8001db8 <__aeabi_dsub+0x70>
 8001db6:	e17b      	b.n	80020b0 <__aeabi_dsub+0x368>
 8001db8:	2a1f      	cmp	r2, #31
 8001dba:	dd00      	ble.n	8001dbe <__aeabi_dsub+0x76>
 8001dbc:	e1ee      	b.n	800219c <__aeabi_dsub+0x454>
 8001dbe:	2020      	movs	r0, #32
 8001dc0:	003e      	movs	r6, r7
 8001dc2:	1a80      	subs	r0, r0, r2
 8001dc4:	000c      	movs	r4, r1
 8001dc6:	40d6      	lsrs	r6, r2
 8001dc8:	40d1      	lsrs	r1, r2
 8001dca:	4087      	lsls	r7, r0
 8001dcc:	4662      	mov	r2, ip
 8001dce:	4084      	lsls	r4, r0
 8001dd0:	1a52      	subs	r2, r2, r1
 8001dd2:	1e78      	subs	r0, r7, #1
 8001dd4:	4187      	sbcs	r7, r0
 8001dd6:	4694      	mov	ip, r2
 8001dd8:	4334      	orrs	r4, r6
 8001dda:	4327      	orrs	r7, r4
 8001ddc:	1bdc      	subs	r4, r3, r7
 8001dde:	42a3      	cmp	r3, r4
 8001de0:	419b      	sbcs	r3, r3
 8001de2:	4662      	mov	r2, ip
 8001de4:	425b      	negs	r3, r3
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	4699      	mov	r9, r3
 8001dea:	464b      	mov	r3, r9
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	d400      	bmi.n	8001df2 <__aeabi_dsub+0xaa>
 8001df0:	e118      	b.n	8002024 <__aeabi_dsub+0x2dc>
 8001df2:	464b      	mov	r3, r9
 8001df4:	0258      	lsls	r0, r3, #9
 8001df6:	0a43      	lsrs	r3, r0, #9
 8001df8:	4699      	mov	r9, r3
 8001dfa:	464b      	mov	r3, r9
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d100      	bne.n	8001e02 <__aeabi_dsub+0xba>
 8001e00:	e137      	b.n	8002072 <__aeabi_dsub+0x32a>
 8001e02:	4648      	mov	r0, r9
 8001e04:	f000 fcac 	bl	8002760 <__clzsi2>
 8001e08:	0001      	movs	r1, r0
 8001e0a:	3908      	subs	r1, #8
 8001e0c:	2320      	movs	r3, #32
 8001e0e:	0022      	movs	r2, r4
 8001e10:	4648      	mov	r0, r9
 8001e12:	1a5b      	subs	r3, r3, r1
 8001e14:	40da      	lsrs	r2, r3
 8001e16:	4088      	lsls	r0, r1
 8001e18:	408c      	lsls	r4, r1
 8001e1a:	4643      	mov	r3, r8
 8001e1c:	4310      	orrs	r0, r2
 8001e1e:	4588      	cmp	r8, r1
 8001e20:	dd00      	ble.n	8001e24 <__aeabi_dsub+0xdc>
 8001e22:	e136      	b.n	8002092 <__aeabi_dsub+0x34a>
 8001e24:	1ac9      	subs	r1, r1, r3
 8001e26:	1c4b      	adds	r3, r1, #1
 8001e28:	2b1f      	cmp	r3, #31
 8001e2a:	dd00      	ble.n	8001e2e <__aeabi_dsub+0xe6>
 8001e2c:	e0ea      	b.n	8002004 <__aeabi_dsub+0x2bc>
 8001e2e:	2220      	movs	r2, #32
 8001e30:	0026      	movs	r6, r4
 8001e32:	1ad2      	subs	r2, r2, r3
 8001e34:	0001      	movs	r1, r0
 8001e36:	4094      	lsls	r4, r2
 8001e38:	40de      	lsrs	r6, r3
 8001e3a:	40d8      	lsrs	r0, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	4091      	lsls	r1, r2
 8001e40:	1e62      	subs	r2, r4, #1
 8001e42:	4194      	sbcs	r4, r2
 8001e44:	4681      	mov	r9, r0
 8001e46:	4698      	mov	r8, r3
 8001e48:	4331      	orrs	r1, r6
 8001e4a:	430c      	orrs	r4, r1
 8001e4c:	0763      	lsls	r3, r4, #29
 8001e4e:	d009      	beq.n	8001e64 <__aeabi_dsub+0x11c>
 8001e50:	230f      	movs	r3, #15
 8001e52:	4023      	ands	r3, r4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d005      	beq.n	8001e64 <__aeabi_dsub+0x11c>
 8001e58:	1d23      	adds	r3, r4, #4
 8001e5a:	42a3      	cmp	r3, r4
 8001e5c:	41a4      	sbcs	r4, r4
 8001e5e:	4264      	negs	r4, r4
 8001e60:	44a1      	add	r9, r4
 8001e62:	001c      	movs	r4, r3
 8001e64:	464b      	mov	r3, r9
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	d400      	bmi.n	8001e6c <__aeabi_dsub+0x124>
 8001e6a:	e0de      	b.n	800202a <__aeabi_dsub+0x2e2>
 8001e6c:	4641      	mov	r1, r8
 8001e6e:	4b8c      	ldr	r3, [pc, #560]	; (80020a0 <__aeabi_dsub+0x358>)
 8001e70:	3101      	adds	r1, #1
 8001e72:	4299      	cmp	r1, r3
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x130>
 8001e76:	e0e7      	b.n	8002048 <__aeabi_dsub+0x300>
 8001e78:	464b      	mov	r3, r9
 8001e7a:	488a      	ldr	r0, [pc, #552]	; (80020a4 <__aeabi_dsub+0x35c>)
 8001e7c:	08e4      	lsrs	r4, r4, #3
 8001e7e:	4003      	ands	r3, r0
 8001e80:	0018      	movs	r0, r3
 8001e82:	0549      	lsls	r1, r1, #21
 8001e84:	075b      	lsls	r3, r3, #29
 8001e86:	0240      	lsls	r0, r0, #9
 8001e88:	4323      	orrs	r3, r4
 8001e8a:	0d4a      	lsrs	r2, r1, #21
 8001e8c:	0b04      	lsrs	r4, r0, #12
 8001e8e:	0512      	lsls	r2, r2, #20
 8001e90:	07ed      	lsls	r5, r5, #31
 8001e92:	4322      	orrs	r2, r4
 8001e94:	432a      	orrs	r2, r5
 8001e96:	0018      	movs	r0, r3
 8001e98:	0011      	movs	r1, r2
 8001e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e9c:	46bb      	mov	fp, r7
 8001e9e:	46b2      	mov	sl, r6
 8001ea0:	46a9      	mov	r9, r5
 8001ea2:	46a0      	mov	r8, r4
 8001ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ea6:	4642      	mov	r2, r8
 8001ea8:	1a12      	subs	r2, r2, r0
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	dd52      	ble.n	8001f54 <__aeabi_dsub+0x20c>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x16c>
 8001eb2:	e09c      	b.n	8001fee <__aeabi_dsub+0x2a6>
 8001eb4:	45a0      	cmp	r8, r4
 8001eb6:	d100      	bne.n	8001eba <__aeabi_dsub+0x172>
 8001eb8:	e0ca      	b.n	8002050 <__aeabi_dsub+0x308>
 8001eba:	2080      	movs	r0, #128	; 0x80
 8001ebc:	0400      	lsls	r0, r0, #16
 8001ebe:	4301      	orrs	r1, r0
 8001ec0:	2a38      	cmp	r2, #56	; 0x38
 8001ec2:	dd00      	ble.n	8001ec6 <__aeabi_dsub+0x17e>
 8001ec4:	e149      	b.n	800215a <__aeabi_dsub+0x412>
 8001ec6:	2a1f      	cmp	r2, #31
 8001ec8:	dc00      	bgt.n	8001ecc <__aeabi_dsub+0x184>
 8001eca:	e197      	b.n	80021fc <__aeabi_dsub+0x4b4>
 8001ecc:	0010      	movs	r0, r2
 8001ece:	000e      	movs	r6, r1
 8001ed0:	3820      	subs	r0, #32
 8001ed2:	40c6      	lsrs	r6, r0
 8001ed4:	2a20      	cmp	r2, #32
 8001ed6:	d004      	beq.n	8001ee2 <__aeabi_dsub+0x19a>
 8001ed8:	2040      	movs	r0, #64	; 0x40
 8001eda:	1a82      	subs	r2, r0, r2
 8001edc:	4091      	lsls	r1, r2
 8001ede:	430f      	orrs	r7, r1
 8001ee0:	46b9      	mov	r9, r7
 8001ee2:	464c      	mov	r4, r9
 8001ee4:	1e62      	subs	r2, r4, #1
 8001ee6:	4194      	sbcs	r4, r2
 8001ee8:	4334      	orrs	r4, r6
 8001eea:	e13a      	b.n	8002162 <__aeabi_dsub+0x41a>
 8001eec:	000a      	movs	r2, r1
 8001eee:	433a      	orrs	r2, r7
 8001ef0:	d028      	beq.n	8001f44 <__aeabi_dsub+0x1fc>
 8001ef2:	46b3      	mov	fp, r6
 8001ef4:	42b5      	cmp	r5, r6
 8001ef6:	d02b      	beq.n	8001f50 <__aeabi_dsub+0x208>
 8001ef8:	4a6b      	ldr	r2, [pc, #428]	; (80020a8 <__aeabi_dsub+0x360>)
 8001efa:	4442      	add	r2, r8
 8001efc:	2a00      	cmp	r2, #0
 8001efe:	d05d      	beq.n	8001fbc <__aeabi_dsub+0x274>
 8001f00:	4642      	mov	r2, r8
 8001f02:	4644      	mov	r4, r8
 8001f04:	1a82      	subs	r2, r0, r2
 8001f06:	2c00      	cmp	r4, #0
 8001f08:	d000      	beq.n	8001f0c <__aeabi_dsub+0x1c4>
 8001f0a:	e0f5      	b.n	80020f8 <__aeabi_dsub+0x3b0>
 8001f0c:	4665      	mov	r5, ip
 8001f0e:	431d      	orrs	r5, r3
 8001f10:	d100      	bne.n	8001f14 <__aeabi_dsub+0x1cc>
 8001f12:	e19c      	b.n	800224e <__aeabi_dsub+0x506>
 8001f14:	1e55      	subs	r5, r2, #1
 8001f16:	2a01      	cmp	r2, #1
 8001f18:	d100      	bne.n	8001f1c <__aeabi_dsub+0x1d4>
 8001f1a:	e1fb      	b.n	8002314 <__aeabi_dsub+0x5cc>
 8001f1c:	4c60      	ldr	r4, [pc, #384]	; (80020a0 <__aeabi_dsub+0x358>)
 8001f1e:	42a2      	cmp	r2, r4
 8001f20:	d100      	bne.n	8001f24 <__aeabi_dsub+0x1dc>
 8001f22:	e1bd      	b.n	80022a0 <__aeabi_dsub+0x558>
 8001f24:	002a      	movs	r2, r5
 8001f26:	e0f0      	b.n	800210a <__aeabi_dsub+0x3c2>
 8001f28:	0008      	movs	r0, r1
 8001f2a:	4338      	orrs	r0, r7
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dsub+0x1e8>
 8001f2e:	e0c3      	b.n	80020b8 <__aeabi_dsub+0x370>
 8001f30:	1e50      	subs	r0, r2, #1
 8001f32:	2a01      	cmp	r2, #1
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x1f0>
 8001f36:	e1a8      	b.n	800228a <__aeabi_dsub+0x542>
 8001f38:	4c59      	ldr	r4, [pc, #356]	; (80020a0 <__aeabi_dsub+0x358>)
 8001f3a:	42a2      	cmp	r2, r4
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x1f8>
 8001f3e:	e087      	b.n	8002050 <__aeabi_dsub+0x308>
 8001f40:	0002      	movs	r2, r0
 8001f42:	e736      	b.n	8001db2 <__aeabi_dsub+0x6a>
 8001f44:	2201      	movs	r2, #1
 8001f46:	4056      	eors	r6, r2
 8001f48:	46b3      	mov	fp, r6
 8001f4a:	42b5      	cmp	r5, r6
 8001f4c:	d000      	beq.n	8001f50 <__aeabi_dsub+0x208>
 8001f4e:	e721      	b.n	8001d94 <__aeabi_dsub+0x4c>
 8001f50:	4a55      	ldr	r2, [pc, #340]	; (80020a8 <__aeabi_dsub+0x360>)
 8001f52:	4442      	add	r2, r8
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x212>
 8001f58:	e0b5      	b.n	80020c6 <__aeabi_dsub+0x37e>
 8001f5a:	4642      	mov	r2, r8
 8001f5c:	4644      	mov	r4, r8
 8001f5e:	1a82      	subs	r2, r0, r2
 8001f60:	2c00      	cmp	r4, #0
 8001f62:	d100      	bne.n	8001f66 <__aeabi_dsub+0x21e>
 8001f64:	e138      	b.n	80021d8 <__aeabi_dsub+0x490>
 8001f66:	4e4e      	ldr	r6, [pc, #312]	; (80020a0 <__aeabi_dsub+0x358>)
 8001f68:	42b0      	cmp	r0, r6
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dsub+0x226>
 8001f6c:	e1de      	b.n	800232c <__aeabi_dsub+0x5e4>
 8001f6e:	2680      	movs	r6, #128	; 0x80
 8001f70:	4664      	mov	r4, ip
 8001f72:	0436      	lsls	r6, r6, #16
 8001f74:	4334      	orrs	r4, r6
 8001f76:	46a4      	mov	ip, r4
 8001f78:	2a38      	cmp	r2, #56	; 0x38
 8001f7a:	dd00      	ble.n	8001f7e <__aeabi_dsub+0x236>
 8001f7c:	e196      	b.n	80022ac <__aeabi_dsub+0x564>
 8001f7e:	2a1f      	cmp	r2, #31
 8001f80:	dd00      	ble.n	8001f84 <__aeabi_dsub+0x23c>
 8001f82:	e224      	b.n	80023ce <__aeabi_dsub+0x686>
 8001f84:	2620      	movs	r6, #32
 8001f86:	1ab4      	subs	r4, r6, r2
 8001f88:	46a2      	mov	sl, r4
 8001f8a:	4664      	mov	r4, ip
 8001f8c:	4656      	mov	r6, sl
 8001f8e:	40b4      	lsls	r4, r6
 8001f90:	46a1      	mov	r9, r4
 8001f92:	001c      	movs	r4, r3
 8001f94:	464e      	mov	r6, r9
 8001f96:	40d4      	lsrs	r4, r2
 8001f98:	4326      	orrs	r6, r4
 8001f9a:	0034      	movs	r4, r6
 8001f9c:	4656      	mov	r6, sl
 8001f9e:	40b3      	lsls	r3, r6
 8001fa0:	1e5e      	subs	r6, r3, #1
 8001fa2:	41b3      	sbcs	r3, r6
 8001fa4:	431c      	orrs	r4, r3
 8001fa6:	4663      	mov	r3, ip
 8001fa8:	40d3      	lsrs	r3, r2
 8001faa:	18c9      	adds	r1, r1, r3
 8001fac:	19e4      	adds	r4, r4, r7
 8001fae:	42bc      	cmp	r4, r7
 8001fb0:	41bf      	sbcs	r7, r7
 8001fb2:	427f      	negs	r7, r7
 8001fb4:	46b9      	mov	r9, r7
 8001fb6:	4680      	mov	r8, r0
 8001fb8:	4489      	add	r9, r1
 8001fba:	e0d8      	b.n	800216e <__aeabi_dsub+0x426>
 8001fbc:	4640      	mov	r0, r8
 8001fbe:	4c3b      	ldr	r4, [pc, #236]	; (80020ac <__aeabi_dsub+0x364>)
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	4220      	tst	r0, r4
 8001fc4:	d000      	beq.n	8001fc8 <__aeabi_dsub+0x280>
 8001fc6:	e0b4      	b.n	8002132 <__aeabi_dsub+0x3ea>
 8001fc8:	4640      	mov	r0, r8
 8001fca:	2800      	cmp	r0, #0
 8001fcc:	d000      	beq.n	8001fd0 <__aeabi_dsub+0x288>
 8001fce:	e144      	b.n	800225a <__aeabi_dsub+0x512>
 8001fd0:	4660      	mov	r0, ip
 8001fd2:	4318      	orrs	r0, r3
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x290>
 8001fd6:	e190      	b.n	80022fa <__aeabi_dsub+0x5b2>
 8001fd8:	0008      	movs	r0, r1
 8001fda:	4338      	orrs	r0, r7
 8001fdc:	d000      	beq.n	8001fe0 <__aeabi_dsub+0x298>
 8001fde:	e1aa      	b.n	8002336 <__aeabi_dsub+0x5ee>
 8001fe0:	4661      	mov	r1, ip
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	0749      	lsls	r1, r1, #29
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	4661      	mov	r1, ip
 8001fea:	08cc      	lsrs	r4, r1, #3
 8001fec:	e027      	b.n	800203e <__aeabi_dsub+0x2f6>
 8001fee:	0008      	movs	r0, r1
 8001ff0:	4338      	orrs	r0, r7
 8001ff2:	d061      	beq.n	80020b8 <__aeabi_dsub+0x370>
 8001ff4:	1e50      	subs	r0, r2, #1
 8001ff6:	2a01      	cmp	r2, #1
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x2b4>
 8001ffa:	e139      	b.n	8002270 <__aeabi_dsub+0x528>
 8001ffc:	42a2      	cmp	r2, r4
 8001ffe:	d027      	beq.n	8002050 <__aeabi_dsub+0x308>
 8002000:	0002      	movs	r2, r0
 8002002:	e75d      	b.n	8001ec0 <__aeabi_dsub+0x178>
 8002004:	0002      	movs	r2, r0
 8002006:	391f      	subs	r1, #31
 8002008:	40ca      	lsrs	r2, r1
 800200a:	0011      	movs	r1, r2
 800200c:	2b20      	cmp	r3, #32
 800200e:	d003      	beq.n	8002018 <__aeabi_dsub+0x2d0>
 8002010:	2240      	movs	r2, #64	; 0x40
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4098      	lsls	r0, r3
 8002016:	4304      	orrs	r4, r0
 8002018:	1e63      	subs	r3, r4, #1
 800201a:	419c      	sbcs	r4, r3
 800201c:	2300      	movs	r3, #0
 800201e:	4699      	mov	r9, r3
 8002020:	4698      	mov	r8, r3
 8002022:	430c      	orrs	r4, r1
 8002024:	0763      	lsls	r3, r4, #29
 8002026:	d000      	beq.n	800202a <__aeabi_dsub+0x2e2>
 8002028:	e712      	b.n	8001e50 <__aeabi_dsub+0x108>
 800202a:	464b      	mov	r3, r9
 800202c:	464a      	mov	r2, r9
 800202e:	08e4      	lsrs	r4, r4, #3
 8002030:	075b      	lsls	r3, r3, #29
 8002032:	4323      	orrs	r3, r4
 8002034:	08d4      	lsrs	r4, r2, #3
 8002036:	4642      	mov	r2, r8
 8002038:	4919      	ldr	r1, [pc, #100]	; (80020a0 <__aeabi_dsub+0x358>)
 800203a:	428a      	cmp	r2, r1
 800203c:	d00e      	beq.n	800205c <__aeabi_dsub+0x314>
 800203e:	0324      	lsls	r4, r4, #12
 8002040:	0552      	lsls	r2, r2, #21
 8002042:	0b24      	lsrs	r4, r4, #12
 8002044:	0d52      	lsrs	r2, r2, #21
 8002046:	e722      	b.n	8001e8e <__aeabi_dsub+0x146>
 8002048:	000a      	movs	r2, r1
 800204a:	2400      	movs	r4, #0
 800204c:	2300      	movs	r3, #0
 800204e:	e71e      	b.n	8001e8e <__aeabi_dsub+0x146>
 8002050:	08db      	lsrs	r3, r3, #3
 8002052:	4662      	mov	r2, ip
 8002054:	0752      	lsls	r2, r2, #29
 8002056:	4313      	orrs	r3, r2
 8002058:	4662      	mov	r2, ip
 800205a:	08d4      	lsrs	r4, r2, #3
 800205c:	001a      	movs	r2, r3
 800205e:	4322      	orrs	r2, r4
 8002060:	d100      	bne.n	8002064 <__aeabi_dsub+0x31c>
 8002062:	e1fc      	b.n	800245e <__aeabi_dsub+0x716>
 8002064:	2280      	movs	r2, #128	; 0x80
 8002066:	0312      	lsls	r2, r2, #12
 8002068:	4314      	orrs	r4, r2
 800206a:	0324      	lsls	r4, r4, #12
 800206c:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <__aeabi_dsub+0x358>)
 800206e:	0b24      	lsrs	r4, r4, #12
 8002070:	e70d      	b.n	8001e8e <__aeabi_dsub+0x146>
 8002072:	0020      	movs	r0, r4
 8002074:	f000 fb74 	bl	8002760 <__clzsi2>
 8002078:	0001      	movs	r1, r0
 800207a:	3118      	adds	r1, #24
 800207c:	291f      	cmp	r1, #31
 800207e:	dc00      	bgt.n	8002082 <__aeabi_dsub+0x33a>
 8002080:	e6c4      	b.n	8001e0c <__aeabi_dsub+0xc4>
 8002082:	3808      	subs	r0, #8
 8002084:	4084      	lsls	r4, r0
 8002086:	4643      	mov	r3, r8
 8002088:	0020      	movs	r0, r4
 800208a:	2400      	movs	r4, #0
 800208c:	4588      	cmp	r8, r1
 800208e:	dc00      	bgt.n	8002092 <__aeabi_dsub+0x34a>
 8002090:	e6c8      	b.n	8001e24 <__aeabi_dsub+0xdc>
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <__aeabi_dsub+0x35c>)
 8002094:	1a5b      	subs	r3, r3, r1
 8002096:	4010      	ands	r0, r2
 8002098:	4698      	mov	r8, r3
 800209a:	4681      	mov	r9, r0
 800209c:	e6d6      	b.n	8001e4c <__aeabi_dsub+0x104>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	000007ff 	.word	0x000007ff
 80020a4:	ff7fffff 	.word	0xff7fffff
 80020a8:	fffff801 	.word	0xfffff801
 80020ac:	000007fe 	.word	0x000007fe
 80020b0:	430f      	orrs	r7, r1
 80020b2:	1e7a      	subs	r2, r7, #1
 80020b4:	4197      	sbcs	r7, r2
 80020b6:	e691      	b.n	8001ddc <__aeabi_dsub+0x94>
 80020b8:	4661      	mov	r1, ip
 80020ba:	08db      	lsrs	r3, r3, #3
 80020bc:	0749      	lsls	r1, r1, #29
 80020be:	430b      	orrs	r3, r1
 80020c0:	4661      	mov	r1, ip
 80020c2:	08cc      	lsrs	r4, r1, #3
 80020c4:	e7b8      	b.n	8002038 <__aeabi_dsub+0x2f0>
 80020c6:	4640      	mov	r0, r8
 80020c8:	4cd3      	ldr	r4, [pc, #844]	; (8002418 <__aeabi_dsub+0x6d0>)
 80020ca:	3001      	adds	r0, #1
 80020cc:	4220      	tst	r0, r4
 80020ce:	d000      	beq.n	80020d2 <__aeabi_dsub+0x38a>
 80020d0:	e0a2      	b.n	8002218 <__aeabi_dsub+0x4d0>
 80020d2:	4640      	mov	r0, r8
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d000      	beq.n	80020da <__aeabi_dsub+0x392>
 80020d8:	e101      	b.n	80022de <__aeabi_dsub+0x596>
 80020da:	4660      	mov	r0, ip
 80020dc:	4318      	orrs	r0, r3
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x39a>
 80020e0:	e15e      	b.n	80023a0 <__aeabi_dsub+0x658>
 80020e2:	0008      	movs	r0, r1
 80020e4:	4338      	orrs	r0, r7
 80020e6:	d000      	beq.n	80020ea <__aeabi_dsub+0x3a2>
 80020e8:	e15f      	b.n	80023aa <__aeabi_dsub+0x662>
 80020ea:	4661      	mov	r1, ip
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	0749      	lsls	r1, r1, #29
 80020f0:	430b      	orrs	r3, r1
 80020f2:	4661      	mov	r1, ip
 80020f4:	08cc      	lsrs	r4, r1, #3
 80020f6:	e7a2      	b.n	800203e <__aeabi_dsub+0x2f6>
 80020f8:	4dc8      	ldr	r5, [pc, #800]	; (800241c <__aeabi_dsub+0x6d4>)
 80020fa:	42a8      	cmp	r0, r5
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x3b8>
 80020fe:	e0cf      	b.n	80022a0 <__aeabi_dsub+0x558>
 8002100:	2580      	movs	r5, #128	; 0x80
 8002102:	4664      	mov	r4, ip
 8002104:	042d      	lsls	r5, r5, #16
 8002106:	432c      	orrs	r4, r5
 8002108:	46a4      	mov	ip, r4
 800210a:	2a38      	cmp	r2, #56	; 0x38
 800210c:	dc56      	bgt.n	80021bc <__aeabi_dsub+0x474>
 800210e:	2a1f      	cmp	r2, #31
 8002110:	dd00      	ble.n	8002114 <__aeabi_dsub+0x3cc>
 8002112:	e0d1      	b.n	80022b8 <__aeabi_dsub+0x570>
 8002114:	2520      	movs	r5, #32
 8002116:	001e      	movs	r6, r3
 8002118:	1aad      	subs	r5, r5, r2
 800211a:	4664      	mov	r4, ip
 800211c:	40ab      	lsls	r3, r5
 800211e:	40ac      	lsls	r4, r5
 8002120:	40d6      	lsrs	r6, r2
 8002122:	1e5d      	subs	r5, r3, #1
 8002124:	41ab      	sbcs	r3, r5
 8002126:	4334      	orrs	r4, r6
 8002128:	4323      	orrs	r3, r4
 800212a:	4664      	mov	r4, ip
 800212c:	40d4      	lsrs	r4, r2
 800212e:	1b09      	subs	r1, r1, r4
 8002130:	e049      	b.n	80021c6 <__aeabi_dsub+0x47e>
 8002132:	4660      	mov	r0, ip
 8002134:	1bdc      	subs	r4, r3, r7
 8002136:	1a46      	subs	r6, r0, r1
 8002138:	42a3      	cmp	r3, r4
 800213a:	4180      	sbcs	r0, r0
 800213c:	4240      	negs	r0, r0
 800213e:	4681      	mov	r9, r0
 8002140:	0030      	movs	r0, r6
 8002142:	464e      	mov	r6, r9
 8002144:	1b80      	subs	r0, r0, r6
 8002146:	4681      	mov	r9, r0
 8002148:	0200      	lsls	r0, r0, #8
 800214a:	d476      	bmi.n	800223a <__aeabi_dsub+0x4f2>
 800214c:	464b      	mov	r3, r9
 800214e:	4323      	orrs	r3, r4
 8002150:	d000      	beq.n	8002154 <__aeabi_dsub+0x40c>
 8002152:	e652      	b.n	8001dfa <__aeabi_dsub+0xb2>
 8002154:	2400      	movs	r4, #0
 8002156:	2500      	movs	r5, #0
 8002158:	e771      	b.n	800203e <__aeabi_dsub+0x2f6>
 800215a:	4339      	orrs	r1, r7
 800215c:	000c      	movs	r4, r1
 800215e:	1e62      	subs	r2, r4, #1
 8002160:	4194      	sbcs	r4, r2
 8002162:	18e4      	adds	r4, r4, r3
 8002164:	429c      	cmp	r4, r3
 8002166:	419b      	sbcs	r3, r3
 8002168:	425b      	negs	r3, r3
 800216a:	4463      	add	r3, ip
 800216c:	4699      	mov	r9, r3
 800216e:	464b      	mov	r3, r9
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	d400      	bmi.n	8002176 <__aeabi_dsub+0x42e>
 8002174:	e756      	b.n	8002024 <__aeabi_dsub+0x2dc>
 8002176:	2301      	movs	r3, #1
 8002178:	469c      	mov	ip, r3
 800217a:	4ba8      	ldr	r3, [pc, #672]	; (800241c <__aeabi_dsub+0x6d4>)
 800217c:	44e0      	add	r8, ip
 800217e:	4598      	cmp	r8, r3
 8002180:	d038      	beq.n	80021f4 <__aeabi_dsub+0x4ac>
 8002182:	464b      	mov	r3, r9
 8002184:	48a6      	ldr	r0, [pc, #664]	; (8002420 <__aeabi_dsub+0x6d8>)
 8002186:	2201      	movs	r2, #1
 8002188:	4003      	ands	r3, r0
 800218a:	0018      	movs	r0, r3
 800218c:	0863      	lsrs	r3, r4, #1
 800218e:	4014      	ands	r4, r2
 8002190:	431c      	orrs	r4, r3
 8002192:	07c3      	lsls	r3, r0, #31
 8002194:	431c      	orrs	r4, r3
 8002196:	0843      	lsrs	r3, r0, #1
 8002198:	4699      	mov	r9, r3
 800219a:	e657      	b.n	8001e4c <__aeabi_dsub+0x104>
 800219c:	0010      	movs	r0, r2
 800219e:	000e      	movs	r6, r1
 80021a0:	3820      	subs	r0, #32
 80021a2:	40c6      	lsrs	r6, r0
 80021a4:	2a20      	cmp	r2, #32
 80021a6:	d004      	beq.n	80021b2 <__aeabi_dsub+0x46a>
 80021a8:	2040      	movs	r0, #64	; 0x40
 80021aa:	1a82      	subs	r2, r0, r2
 80021ac:	4091      	lsls	r1, r2
 80021ae:	430f      	orrs	r7, r1
 80021b0:	46b9      	mov	r9, r7
 80021b2:	464f      	mov	r7, r9
 80021b4:	1e7a      	subs	r2, r7, #1
 80021b6:	4197      	sbcs	r7, r2
 80021b8:	4337      	orrs	r7, r6
 80021ba:	e60f      	b.n	8001ddc <__aeabi_dsub+0x94>
 80021bc:	4662      	mov	r2, ip
 80021be:	431a      	orrs	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	1e5a      	subs	r2, r3, #1
 80021c4:	4193      	sbcs	r3, r2
 80021c6:	1afc      	subs	r4, r7, r3
 80021c8:	42a7      	cmp	r7, r4
 80021ca:	41bf      	sbcs	r7, r7
 80021cc:	427f      	negs	r7, r7
 80021ce:	1bcb      	subs	r3, r1, r7
 80021d0:	4699      	mov	r9, r3
 80021d2:	465d      	mov	r5, fp
 80021d4:	4680      	mov	r8, r0
 80021d6:	e608      	b.n	8001dea <__aeabi_dsub+0xa2>
 80021d8:	4666      	mov	r6, ip
 80021da:	431e      	orrs	r6, r3
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x498>
 80021de:	e0be      	b.n	800235e <__aeabi_dsub+0x616>
 80021e0:	1e56      	subs	r6, r2, #1
 80021e2:	2a01      	cmp	r2, #1
 80021e4:	d100      	bne.n	80021e8 <__aeabi_dsub+0x4a0>
 80021e6:	e109      	b.n	80023fc <__aeabi_dsub+0x6b4>
 80021e8:	4c8c      	ldr	r4, [pc, #560]	; (800241c <__aeabi_dsub+0x6d4>)
 80021ea:	42a2      	cmp	r2, r4
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x4a8>
 80021ee:	e119      	b.n	8002424 <__aeabi_dsub+0x6dc>
 80021f0:	0032      	movs	r2, r6
 80021f2:	e6c1      	b.n	8001f78 <__aeabi_dsub+0x230>
 80021f4:	4642      	mov	r2, r8
 80021f6:	2400      	movs	r4, #0
 80021f8:	2300      	movs	r3, #0
 80021fa:	e648      	b.n	8001e8e <__aeabi_dsub+0x146>
 80021fc:	2020      	movs	r0, #32
 80021fe:	000c      	movs	r4, r1
 8002200:	1a80      	subs	r0, r0, r2
 8002202:	003e      	movs	r6, r7
 8002204:	4087      	lsls	r7, r0
 8002206:	4084      	lsls	r4, r0
 8002208:	40d6      	lsrs	r6, r2
 800220a:	1e78      	subs	r0, r7, #1
 800220c:	4187      	sbcs	r7, r0
 800220e:	40d1      	lsrs	r1, r2
 8002210:	4334      	orrs	r4, r6
 8002212:	433c      	orrs	r4, r7
 8002214:	448c      	add	ip, r1
 8002216:	e7a4      	b.n	8002162 <__aeabi_dsub+0x41a>
 8002218:	4a80      	ldr	r2, [pc, #512]	; (800241c <__aeabi_dsub+0x6d4>)
 800221a:	4290      	cmp	r0, r2
 800221c:	d100      	bne.n	8002220 <__aeabi_dsub+0x4d8>
 800221e:	e0e9      	b.n	80023f4 <__aeabi_dsub+0x6ac>
 8002220:	19df      	adds	r7, r3, r7
 8002222:	429f      	cmp	r7, r3
 8002224:	419b      	sbcs	r3, r3
 8002226:	4461      	add	r1, ip
 8002228:	425b      	negs	r3, r3
 800222a:	18c9      	adds	r1, r1, r3
 800222c:	07cc      	lsls	r4, r1, #31
 800222e:	087f      	lsrs	r7, r7, #1
 8002230:	084b      	lsrs	r3, r1, #1
 8002232:	4699      	mov	r9, r3
 8002234:	4680      	mov	r8, r0
 8002236:	433c      	orrs	r4, r7
 8002238:	e6f4      	b.n	8002024 <__aeabi_dsub+0x2dc>
 800223a:	1afc      	subs	r4, r7, r3
 800223c:	42a7      	cmp	r7, r4
 800223e:	41bf      	sbcs	r7, r7
 8002240:	4663      	mov	r3, ip
 8002242:	427f      	negs	r7, r7
 8002244:	1ac9      	subs	r1, r1, r3
 8002246:	1bcb      	subs	r3, r1, r7
 8002248:	4699      	mov	r9, r3
 800224a:	465d      	mov	r5, fp
 800224c:	e5d5      	b.n	8001dfa <__aeabi_dsub+0xb2>
 800224e:	08ff      	lsrs	r7, r7, #3
 8002250:	074b      	lsls	r3, r1, #29
 8002252:	465d      	mov	r5, fp
 8002254:	433b      	orrs	r3, r7
 8002256:	08cc      	lsrs	r4, r1, #3
 8002258:	e6ee      	b.n	8002038 <__aeabi_dsub+0x2f0>
 800225a:	4662      	mov	r2, ip
 800225c:	431a      	orrs	r2, r3
 800225e:	d000      	beq.n	8002262 <__aeabi_dsub+0x51a>
 8002260:	e082      	b.n	8002368 <__aeabi_dsub+0x620>
 8002262:	000b      	movs	r3, r1
 8002264:	433b      	orrs	r3, r7
 8002266:	d11b      	bne.n	80022a0 <__aeabi_dsub+0x558>
 8002268:	2480      	movs	r4, #128	; 0x80
 800226a:	2500      	movs	r5, #0
 800226c:	0324      	lsls	r4, r4, #12
 800226e:	e6f9      	b.n	8002064 <__aeabi_dsub+0x31c>
 8002270:	19dc      	adds	r4, r3, r7
 8002272:	429c      	cmp	r4, r3
 8002274:	419b      	sbcs	r3, r3
 8002276:	4461      	add	r1, ip
 8002278:	4689      	mov	r9, r1
 800227a:	425b      	negs	r3, r3
 800227c:	4499      	add	r9, r3
 800227e:	464b      	mov	r3, r9
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	d444      	bmi.n	800230e <__aeabi_dsub+0x5c6>
 8002284:	2301      	movs	r3, #1
 8002286:	4698      	mov	r8, r3
 8002288:	e6cc      	b.n	8002024 <__aeabi_dsub+0x2dc>
 800228a:	1bdc      	subs	r4, r3, r7
 800228c:	4662      	mov	r2, ip
 800228e:	42a3      	cmp	r3, r4
 8002290:	419b      	sbcs	r3, r3
 8002292:	1a51      	subs	r1, r2, r1
 8002294:	425b      	negs	r3, r3
 8002296:	1acb      	subs	r3, r1, r3
 8002298:	4699      	mov	r9, r3
 800229a:	2301      	movs	r3, #1
 800229c:	4698      	mov	r8, r3
 800229e:	e5a4      	b.n	8001dea <__aeabi_dsub+0xa2>
 80022a0:	08ff      	lsrs	r7, r7, #3
 80022a2:	074b      	lsls	r3, r1, #29
 80022a4:	465d      	mov	r5, fp
 80022a6:	433b      	orrs	r3, r7
 80022a8:	08cc      	lsrs	r4, r1, #3
 80022aa:	e6d7      	b.n	800205c <__aeabi_dsub+0x314>
 80022ac:	4662      	mov	r2, ip
 80022ae:	431a      	orrs	r2, r3
 80022b0:	0014      	movs	r4, r2
 80022b2:	1e63      	subs	r3, r4, #1
 80022b4:	419c      	sbcs	r4, r3
 80022b6:	e679      	b.n	8001fac <__aeabi_dsub+0x264>
 80022b8:	0015      	movs	r5, r2
 80022ba:	4664      	mov	r4, ip
 80022bc:	3d20      	subs	r5, #32
 80022be:	40ec      	lsrs	r4, r5
 80022c0:	46a0      	mov	r8, r4
 80022c2:	2a20      	cmp	r2, #32
 80022c4:	d005      	beq.n	80022d2 <__aeabi_dsub+0x58a>
 80022c6:	2540      	movs	r5, #64	; 0x40
 80022c8:	4664      	mov	r4, ip
 80022ca:	1aaa      	subs	r2, r5, r2
 80022cc:	4094      	lsls	r4, r2
 80022ce:	4323      	orrs	r3, r4
 80022d0:	469a      	mov	sl, r3
 80022d2:	4654      	mov	r4, sl
 80022d4:	1e63      	subs	r3, r4, #1
 80022d6:	419c      	sbcs	r4, r3
 80022d8:	4643      	mov	r3, r8
 80022da:	4323      	orrs	r3, r4
 80022dc:	e773      	b.n	80021c6 <__aeabi_dsub+0x47e>
 80022de:	4662      	mov	r2, ip
 80022e0:	431a      	orrs	r2, r3
 80022e2:	d023      	beq.n	800232c <__aeabi_dsub+0x5e4>
 80022e4:	000a      	movs	r2, r1
 80022e6:	433a      	orrs	r2, r7
 80022e8:	d000      	beq.n	80022ec <__aeabi_dsub+0x5a4>
 80022ea:	e0a0      	b.n	800242e <__aeabi_dsub+0x6e6>
 80022ec:	4662      	mov	r2, ip
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	0752      	lsls	r2, r2, #29
 80022f2:	4313      	orrs	r3, r2
 80022f4:	4662      	mov	r2, ip
 80022f6:	08d4      	lsrs	r4, r2, #3
 80022f8:	e6b0      	b.n	800205c <__aeabi_dsub+0x314>
 80022fa:	000b      	movs	r3, r1
 80022fc:	433b      	orrs	r3, r7
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x5ba>
 8002300:	e728      	b.n	8002154 <__aeabi_dsub+0x40c>
 8002302:	08ff      	lsrs	r7, r7, #3
 8002304:	074b      	lsls	r3, r1, #29
 8002306:	465d      	mov	r5, fp
 8002308:	433b      	orrs	r3, r7
 800230a:	08cc      	lsrs	r4, r1, #3
 800230c:	e697      	b.n	800203e <__aeabi_dsub+0x2f6>
 800230e:	2302      	movs	r3, #2
 8002310:	4698      	mov	r8, r3
 8002312:	e736      	b.n	8002182 <__aeabi_dsub+0x43a>
 8002314:	1afc      	subs	r4, r7, r3
 8002316:	42a7      	cmp	r7, r4
 8002318:	41bf      	sbcs	r7, r7
 800231a:	4663      	mov	r3, ip
 800231c:	427f      	negs	r7, r7
 800231e:	1ac9      	subs	r1, r1, r3
 8002320:	1bcb      	subs	r3, r1, r7
 8002322:	4699      	mov	r9, r3
 8002324:	2301      	movs	r3, #1
 8002326:	465d      	mov	r5, fp
 8002328:	4698      	mov	r8, r3
 800232a:	e55e      	b.n	8001dea <__aeabi_dsub+0xa2>
 800232c:	074b      	lsls	r3, r1, #29
 800232e:	08ff      	lsrs	r7, r7, #3
 8002330:	433b      	orrs	r3, r7
 8002332:	08cc      	lsrs	r4, r1, #3
 8002334:	e692      	b.n	800205c <__aeabi_dsub+0x314>
 8002336:	1bdc      	subs	r4, r3, r7
 8002338:	4660      	mov	r0, ip
 800233a:	42a3      	cmp	r3, r4
 800233c:	41b6      	sbcs	r6, r6
 800233e:	1a40      	subs	r0, r0, r1
 8002340:	4276      	negs	r6, r6
 8002342:	1b80      	subs	r0, r0, r6
 8002344:	4681      	mov	r9, r0
 8002346:	0200      	lsls	r0, r0, #8
 8002348:	d560      	bpl.n	800240c <__aeabi_dsub+0x6c4>
 800234a:	1afc      	subs	r4, r7, r3
 800234c:	42a7      	cmp	r7, r4
 800234e:	41bf      	sbcs	r7, r7
 8002350:	4663      	mov	r3, ip
 8002352:	427f      	negs	r7, r7
 8002354:	1ac9      	subs	r1, r1, r3
 8002356:	1bcb      	subs	r3, r1, r7
 8002358:	4699      	mov	r9, r3
 800235a:	465d      	mov	r5, fp
 800235c:	e576      	b.n	8001e4c <__aeabi_dsub+0x104>
 800235e:	08ff      	lsrs	r7, r7, #3
 8002360:	074b      	lsls	r3, r1, #29
 8002362:	433b      	orrs	r3, r7
 8002364:	08cc      	lsrs	r4, r1, #3
 8002366:	e667      	b.n	8002038 <__aeabi_dsub+0x2f0>
 8002368:	000a      	movs	r2, r1
 800236a:	08db      	lsrs	r3, r3, #3
 800236c:	433a      	orrs	r2, r7
 800236e:	d100      	bne.n	8002372 <__aeabi_dsub+0x62a>
 8002370:	e66f      	b.n	8002052 <__aeabi_dsub+0x30a>
 8002372:	4662      	mov	r2, ip
 8002374:	0752      	lsls	r2, r2, #29
 8002376:	4313      	orrs	r3, r2
 8002378:	4662      	mov	r2, ip
 800237a:	08d4      	lsrs	r4, r2, #3
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	0312      	lsls	r2, r2, #12
 8002380:	4214      	tst	r4, r2
 8002382:	d007      	beq.n	8002394 <__aeabi_dsub+0x64c>
 8002384:	08c8      	lsrs	r0, r1, #3
 8002386:	4210      	tst	r0, r2
 8002388:	d104      	bne.n	8002394 <__aeabi_dsub+0x64c>
 800238a:	465d      	mov	r5, fp
 800238c:	0004      	movs	r4, r0
 800238e:	08fb      	lsrs	r3, r7, #3
 8002390:	0749      	lsls	r1, r1, #29
 8002392:	430b      	orrs	r3, r1
 8002394:	0f5a      	lsrs	r2, r3, #29
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	0752      	lsls	r2, r2, #29
 800239c:	4313      	orrs	r3, r2
 800239e:	e65d      	b.n	800205c <__aeabi_dsub+0x314>
 80023a0:	074b      	lsls	r3, r1, #29
 80023a2:	08ff      	lsrs	r7, r7, #3
 80023a4:	433b      	orrs	r3, r7
 80023a6:	08cc      	lsrs	r4, r1, #3
 80023a8:	e649      	b.n	800203e <__aeabi_dsub+0x2f6>
 80023aa:	19dc      	adds	r4, r3, r7
 80023ac:	429c      	cmp	r4, r3
 80023ae:	419b      	sbcs	r3, r3
 80023b0:	4461      	add	r1, ip
 80023b2:	4689      	mov	r9, r1
 80023b4:	425b      	negs	r3, r3
 80023b6:	4499      	add	r9, r3
 80023b8:	464b      	mov	r3, r9
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	d400      	bmi.n	80023c0 <__aeabi_dsub+0x678>
 80023be:	e631      	b.n	8002024 <__aeabi_dsub+0x2dc>
 80023c0:	464a      	mov	r2, r9
 80023c2:	4b17      	ldr	r3, [pc, #92]	; (8002420 <__aeabi_dsub+0x6d8>)
 80023c4:	401a      	ands	r2, r3
 80023c6:	2301      	movs	r3, #1
 80023c8:	4691      	mov	r9, r2
 80023ca:	4698      	mov	r8, r3
 80023cc:	e62a      	b.n	8002024 <__aeabi_dsub+0x2dc>
 80023ce:	0016      	movs	r6, r2
 80023d0:	4664      	mov	r4, ip
 80023d2:	3e20      	subs	r6, #32
 80023d4:	40f4      	lsrs	r4, r6
 80023d6:	46a0      	mov	r8, r4
 80023d8:	2a20      	cmp	r2, #32
 80023da:	d005      	beq.n	80023e8 <__aeabi_dsub+0x6a0>
 80023dc:	2640      	movs	r6, #64	; 0x40
 80023de:	4664      	mov	r4, ip
 80023e0:	1ab2      	subs	r2, r6, r2
 80023e2:	4094      	lsls	r4, r2
 80023e4:	4323      	orrs	r3, r4
 80023e6:	469a      	mov	sl, r3
 80023e8:	4654      	mov	r4, sl
 80023ea:	1e63      	subs	r3, r4, #1
 80023ec:	419c      	sbcs	r4, r3
 80023ee:	4643      	mov	r3, r8
 80023f0:	431c      	orrs	r4, r3
 80023f2:	e5db      	b.n	8001fac <__aeabi_dsub+0x264>
 80023f4:	0002      	movs	r2, r0
 80023f6:	2400      	movs	r4, #0
 80023f8:	2300      	movs	r3, #0
 80023fa:	e548      	b.n	8001e8e <__aeabi_dsub+0x146>
 80023fc:	19dc      	adds	r4, r3, r7
 80023fe:	42bc      	cmp	r4, r7
 8002400:	41bf      	sbcs	r7, r7
 8002402:	4461      	add	r1, ip
 8002404:	4689      	mov	r9, r1
 8002406:	427f      	negs	r7, r7
 8002408:	44b9      	add	r9, r7
 800240a:	e738      	b.n	800227e <__aeabi_dsub+0x536>
 800240c:	464b      	mov	r3, r9
 800240e:	4323      	orrs	r3, r4
 8002410:	d100      	bne.n	8002414 <__aeabi_dsub+0x6cc>
 8002412:	e69f      	b.n	8002154 <__aeabi_dsub+0x40c>
 8002414:	e606      	b.n	8002024 <__aeabi_dsub+0x2dc>
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	000007fe 	.word	0x000007fe
 800241c:	000007ff 	.word	0x000007ff
 8002420:	ff7fffff 	.word	0xff7fffff
 8002424:	08ff      	lsrs	r7, r7, #3
 8002426:	074b      	lsls	r3, r1, #29
 8002428:	433b      	orrs	r3, r7
 800242a:	08cc      	lsrs	r4, r1, #3
 800242c:	e616      	b.n	800205c <__aeabi_dsub+0x314>
 800242e:	4662      	mov	r2, ip
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	0752      	lsls	r2, r2, #29
 8002434:	4313      	orrs	r3, r2
 8002436:	4662      	mov	r2, ip
 8002438:	08d4      	lsrs	r4, r2, #3
 800243a:	2280      	movs	r2, #128	; 0x80
 800243c:	0312      	lsls	r2, r2, #12
 800243e:	4214      	tst	r4, r2
 8002440:	d007      	beq.n	8002452 <__aeabi_dsub+0x70a>
 8002442:	08c8      	lsrs	r0, r1, #3
 8002444:	4210      	tst	r0, r2
 8002446:	d104      	bne.n	8002452 <__aeabi_dsub+0x70a>
 8002448:	465d      	mov	r5, fp
 800244a:	0004      	movs	r4, r0
 800244c:	08fb      	lsrs	r3, r7, #3
 800244e:	0749      	lsls	r1, r1, #29
 8002450:	430b      	orrs	r3, r1
 8002452:	0f5a      	lsrs	r2, r3, #29
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	0752      	lsls	r2, r2, #29
 8002458:	08db      	lsrs	r3, r3, #3
 800245a:	4313      	orrs	r3, r2
 800245c:	e5fe      	b.n	800205c <__aeabi_dsub+0x314>
 800245e:	2300      	movs	r3, #0
 8002460:	4a01      	ldr	r2, [pc, #4]	; (8002468 <__aeabi_dsub+0x720>)
 8002462:	001c      	movs	r4, r3
 8002464:	e513      	b.n	8001e8e <__aeabi_dsub+0x146>
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	000007ff 	.word	0x000007ff

0800246c <__aeabi_dcmpun>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	0005      	movs	r5, r0
 8002470:	480c      	ldr	r0, [pc, #48]	; (80024a4 <__aeabi_dcmpun+0x38>)
 8002472:	031c      	lsls	r4, r3, #12
 8002474:	0016      	movs	r6, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	030a      	lsls	r2, r1, #12
 800247a:	0049      	lsls	r1, r1, #1
 800247c:	0b12      	lsrs	r2, r2, #12
 800247e:	0d49      	lsrs	r1, r1, #21
 8002480:	0b24      	lsrs	r4, r4, #12
 8002482:	0d5b      	lsrs	r3, r3, #21
 8002484:	4281      	cmp	r1, r0
 8002486:	d008      	beq.n	800249a <__aeabi_dcmpun+0x2e>
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <__aeabi_dcmpun+0x38>)
 800248a:	2000      	movs	r0, #0
 800248c:	4293      	cmp	r3, r2
 800248e:	d103      	bne.n	8002498 <__aeabi_dcmpun+0x2c>
 8002490:	0020      	movs	r0, r4
 8002492:	4330      	orrs	r0, r6
 8002494:	1e43      	subs	r3, r0, #1
 8002496:	4198      	sbcs	r0, r3
 8002498:	bd70      	pop	{r4, r5, r6, pc}
 800249a:	2001      	movs	r0, #1
 800249c:	432a      	orrs	r2, r5
 800249e:	d1fb      	bne.n	8002498 <__aeabi_dcmpun+0x2c>
 80024a0:	e7f2      	b.n	8002488 <__aeabi_dcmpun+0x1c>
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	000007ff 	.word	0x000007ff

080024a8 <__aeabi_d2iz>:
 80024a8:	000a      	movs	r2, r1
 80024aa:	b530      	push	{r4, r5, lr}
 80024ac:	4c13      	ldr	r4, [pc, #76]	; (80024fc <__aeabi_d2iz+0x54>)
 80024ae:	0053      	lsls	r3, r2, #1
 80024b0:	0309      	lsls	r1, r1, #12
 80024b2:	0005      	movs	r5, r0
 80024b4:	0b09      	lsrs	r1, r1, #12
 80024b6:	2000      	movs	r0, #0
 80024b8:	0d5b      	lsrs	r3, r3, #21
 80024ba:	0fd2      	lsrs	r2, r2, #31
 80024bc:	42a3      	cmp	r3, r4
 80024be:	dd04      	ble.n	80024ca <__aeabi_d2iz+0x22>
 80024c0:	480f      	ldr	r0, [pc, #60]	; (8002500 <__aeabi_d2iz+0x58>)
 80024c2:	4283      	cmp	r3, r0
 80024c4:	dd02      	ble.n	80024cc <__aeabi_d2iz+0x24>
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <__aeabi_d2iz+0x5c>)
 80024c8:	18d0      	adds	r0, r2, r3
 80024ca:	bd30      	pop	{r4, r5, pc}
 80024cc:	2080      	movs	r0, #128	; 0x80
 80024ce:	0340      	lsls	r0, r0, #13
 80024d0:	4301      	orrs	r1, r0
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <__aeabi_d2iz+0x60>)
 80024d4:	1ac0      	subs	r0, r0, r3
 80024d6:	281f      	cmp	r0, #31
 80024d8:	dd08      	ble.n	80024ec <__aeabi_d2iz+0x44>
 80024da:	480c      	ldr	r0, [pc, #48]	; (800250c <__aeabi_d2iz+0x64>)
 80024dc:	1ac3      	subs	r3, r0, r3
 80024de:	40d9      	lsrs	r1, r3
 80024e0:	000b      	movs	r3, r1
 80024e2:	4258      	negs	r0, r3
 80024e4:	2a00      	cmp	r2, #0
 80024e6:	d1f0      	bne.n	80024ca <__aeabi_d2iz+0x22>
 80024e8:	0018      	movs	r0, r3
 80024ea:	e7ee      	b.n	80024ca <__aeabi_d2iz+0x22>
 80024ec:	4c08      	ldr	r4, [pc, #32]	; (8002510 <__aeabi_d2iz+0x68>)
 80024ee:	40c5      	lsrs	r5, r0
 80024f0:	46a4      	mov	ip, r4
 80024f2:	4463      	add	r3, ip
 80024f4:	4099      	lsls	r1, r3
 80024f6:	000b      	movs	r3, r1
 80024f8:	432b      	orrs	r3, r5
 80024fa:	e7f2      	b.n	80024e2 <__aeabi_d2iz+0x3a>
 80024fc:	000003fe 	.word	0x000003fe
 8002500:	0000041d 	.word	0x0000041d
 8002504:	7fffffff 	.word	0x7fffffff
 8002508:	00000433 	.word	0x00000433
 800250c:	00000413 	.word	0x00000413
 8002510:	fffffbed 	.word	0xfffffbed

08002514 <__aeabi_i2d>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	2800      	cmp	r0, #0
 8002518:	d016      	beq.n	8002548 <__aeabi_i2d+0x34>
 800251a:	17c3      	asrs	r3, r0, #31
 800251c:	18c5      	adds	r5, r0, r3
 800251e:	405d      	eors	r5, r3
 8002520:	0fc4      	lsrs	r4, r0, #31
 8002522:	0028      	movs	r0, r5
 8002524:	f000 f91c 	bl	8002760 <__clzsi2>
 8002528:	4a11      	ldr	r2, [pc, #68]	; (8002570 <__aeabi_i2d+0x5c>)
 800252a:	1a12      	subs	r2, r2, r0
 800252c:	280a      	cmp	r0, #10
 800252e:	dc16      	bgt.n	800255e <__aeabi_i2d+0x4a>
 8002530:	0003      	movs	r3, r0
 8002532:	002e      	movs	r6, r5
 8002534:	3315      	adds	r3, #21
 8002536:	409e      	lsls	r6, r3
 8002538:	230b      	movs	r3, #11
 800253a:	1a18      	subs	r0, r3, r0
 800253c:	40c5      	lsrs	r5, r0
 800253e:	0552      	lsls	r2, r2, #21
 8002540:	032d      	lsls	r5, r5, #12
 8002542:	0b2d      	lsrs	r5, r5, #12
 8002544:	0d53      	lsrs	r3, r2, #21
 8002546:	e003      	b.n	8002550 <__aeabi_i2d+0x3c>
 8002548:	2400      	movs	r4, #0
 800254a:	2300      	movs	r3, #0
 800254c:	2500      	movs	r5, #0
 800254e:	2600      	movs	r6, #0
 8002550:	051b      	lsls	r3, r3, #20
 8002552:	432b      	orrs	r3, r5
 8002554:	07e4      	lsls	r4, r4, #31
 8002556:	4323      	orrs	r3, r4
 8002558:	0030      	movs	r0, r6
 800255a:	0019      	movs	r1, r3
 800255c:	bd70      	pop	{r4, r5, r6, pc}
 800255e:	380b      	subs	r0, #11
 8002560:	4085      	lsls	r5, r0
 8002562:	0552      	lsls	r2, r2, #21
 8002564:	032d      	lsls	r5, r5, #12
 8002566:	2600      	movs	r6, #0
 8002568:	0b2d      	lsrs	r5, r5, #12
 800256a:	0d53      	lsrs	r3, r2, #21
 800256c:	e7f0      	b.n	8002550 <__aeabi_i2d+0x3c>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	0000041e 	.word	0x0000041e

08002574 <__aeabi_ui2d>:
 8002574:	b510      	push	{r4, lr}
 8002576:	1e04      	subs	r4, r0, #0
 8002578:	d010      	beq.n	800259c <__aeabi_ui2d+0x28>
 800257a:	f000 f8f1 	bl	8002760 <__clzsi2>
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <__aeabi_ui2d+0x48>)
 8002580:	1a1b      	subs	r3, r3, r0
 8002582:	280a      	cmp	r0, #10
 8002584:	dc11      	bgt.n	80025aa <__aeabi_ui2d+0x36>
 8002586:	220b      	movs	r2, #11
 8002588:	0021      	movs	r1, r4
 800258a:	1a12      	subs	r2, r2, r0
 800258c:	40d1      	lsrs	r1, r2
 800258e:	3015      	adds	r0, #21
 8002590:	030a      	lsls	r2, r1, #12
 8002592:	055b      	lsls	r3, r3, #21
 8002594:	4084      	lsls	r4, r0
 8002596:	0b12      	lsrs	r2, r2, #12
 8002598:	0d5b      	lsrs	r3, r3, #21
 800259a:	e001      	b.n	80025a0 <__aeabi_ui2d+0x2c>
 800259c:	2300      	movs	r3, #0
 800259e:	2200      	movs	r2, #0
 80025a0:	051b      	lsls	r3, r3, #20
 80025a2:	4313      	orrs	r3, r2
 80025a4:	0020      	movs	r0, r4
 80025a6:	0019      	movs	r1, r3
 80025a8:	bd10      	pop	{r4, pc}
 80025aa:	0022      	movs	r2, r4
 80025ac:	380b      	subs	r0, #11
 80025ae:	4082      	lsls	r2, r0
 80025b0:	055b      	lsls	r3, r3, #21
 80025b2:	0312      	lsls	r2, r2, #12
 80025b4:	2400      	movs	r4, #0
 80025b6:	0b12      	lsrs	r2, r2, #12
 80025b8:	0d5b      	lsrs	r3, r3, #21
 80025ba:	e7f1      	b.n	80025a0 <__aeabi_ui2d+0x2c>
 80025bc:	0000041e 	.word	0x0000041e

080025c0 <__aeabi_f2d>:
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	0043      	lsls	r3, r0, #1
 80025c4:	0246      	lsls	r6, r0, #9
 80025c6:	0fc4      	lsrs	r4, r0, #31
 80025c8:	20fe      	movs	r0, #254	; 0xfe
 80025ca:	0e1b      	lsrs	r3, r3, #24
 80025cc:	1c59      	adds	r1, r3, #1
 80025ce:	0a75      	lsrs	r5, r6, #9
 80025d0:	4208      	tst	r0, r1
 80025d2:	d00c      	beq.n	80025ee <__aeabi_f2d+0x2e>
 80025d4:	22e0      	movs	r2, #224	; 0xe0
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	4694      	mov	ip, r2
 80025da:	076d      	lsls	r5, r5, #29
 80025dc:	0b36      	lsrs	r6, r6, #12
 80025de:	4463      	add	r3, ip
 80025e0:	051b      	lsls	r3, r3, #20
 80025e2:	4333      	orrs	r3, r6
 80025e4:	07e4      	lsls	r4, r4, #31
 80025e6:	4323      	orrs	r3, r4
 80025e8:	0028      	movs	r0, r5
 80025ea:	0019      	movs	r1, r3
 80025ec:	bd70      	pop	{r4, r5, r6, pc}
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d114      	bne.n	800261c <__aeabi_f2d+0x5c>
 80025f2:	2d00      	cmp	r5, #0
 80025f4:	d01b      	beq.n	800262e <__aeabi_f2d+0x6e>
 80025f6:	0028      	movs	r0, r5
 80025f8:	f000 f8b2 	bl	8002760 <__clzsi2>
 80025fc:	280a      	cmp	r0, #10
 80025fe:	dc1c      	bgt.n	800263a <__aeabi_f2d+0x7a>
 8002600:	230b      	movs	r3, #11
 8002602:	002e      	movs	r6, r5
 8002604:	1a1b      	subs	r3, r3, r0
 8002606:	40de      	lsrs	r6, r3
 8002608:	0003      	movs	r3, r0
 800260a:	3315      	adds	r3, #21
 800260c:	409d      	lsls	r5, r3
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <__aeabi_f2d+0x88>)
 8002610:	0336      	lsls	r6, r6, #12
 8002612:	1a12      	subs	r2, r2, r0
 8002614:	0552      	lsls	r2, r2, #21
 8002616:	0b36      	lsrs	r6, r6, #12
 8002618:	0d53      	lsrs	r3, r2, #21
 800261a:	e7e1      	b.n	80025e0 <__aeabi_f2d+0x20>
 800261c:	2d00      	cmp	r5, #0
 800261e:	d009      	beq.n	8002634 <__aeabi_f2d+0x74>
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	0b36      	lsrs	r6, r6, #12
 8002624:	0312      	lsls	r2, r2, #12
 8002626:	4b09      	ldr	r3, [pc, #36]	; (800264c <__aeabi_f2d+0x8c>)
 8002628:	076d      	lsls	r5, r5, #29
 800262a:	4316      	orrs	r6, r2
 800262c:	e7d8      	b.n	80025e0 <__aeabi_f2d+0x20>
 800262e:	2300      	movs	r3, #0
 8002630:	2600      	movs	r6, #0
 8002632:	e7d5      	b.n	80025e0 <__aeabi_f2d+0x20>
 8002634:	2600      	movs	r6, #0
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <__aeabi_f2d+0x8c>)
 8002638:	e7d2      	b.n	80025e0 <__aeabi_f2d+0x20>
 800263a:	0003      	movs	r3, r0
 800263c:	3b0b      	subs	r3, #11
 800263e:	409d      	lsls	r5, r3
 8002640:	002e      	movs	r6, r5
 8002642:	2500      	movs	r5, #0
 8002644:	e7e3      	b.n	800260e <__aeabi_f2d+0x4e>
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	00000389 	.word	0x00000389
 800264c:	000007ff 	.word	0x000007ff

08002650 <__aeabi_d2f>:
 8002650:	0002      	movs	r2, r0
 8002652:	004b      	lsls	r3, r1, #1
 8002654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002656:	0d5b      	lsrs	r3, r3, #21
 8002658:	030c      	lsls	r4, r1, #12
 800265a:	4e3d      	ldr	r6, [pc, #244]	; (8002750 <__aeabi_d2f+0x100>)
 800265c:	0a64      	lsrs	r4, r4, #9
 800265e:	0f40      	lsrs	r0, r0, #29
 8002660:	1c5f      	adds	r7, r3, #1
 8002662:	0fc9      	lsrs	r1, r1, #31
 8002664:	4304      	orrs	r4, r0
 8002666:	00d5      	lsls	r5, r2, #3
 8002668:	4237      	tst	r7, r6
 800266a:	d00a      	beq.n	8002682 <__aeabi_d2f+0x32>
 800266c:	4839      	ldr	r0, [pc, #228]	; (8002754 <__aeabi_d2f+0x104>)
 800266e:	181e      	adds	r6, r3, r0
 8002670:	2efe      	cmp	r6, #254	; 0xfe
 8002672:	dd16      	ble.n	80026a2 <__aeabi_d2f+0x52>
 8002674:	20ff      	movs	r0, #255	; 0xff
 8002676:	2400      	movs	r4, #0
 8002678:	05c0      	lsls	r0, r0, #23
 800267a:	4320      	orrs	r0, r4
 800267c:	07c9      	lsls	r1, r1, #31
 800267e:	4308      	orrs	r0, r1
 8002680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002682:	2b00      	cmp	r3, #0
 8002684:	d106      	bne.n	8002694 <__aeabi_d2f+0x44>
 8002686:	432c      	orrs	r4, r5
 8002688:	d026      	beq.n	80026d8 <__aeabi_d2f+0x88>
 800268a:	2205      	movs	r2, #5
 800268c:	0192      	lsls	r2, r2, #6
 800268e:	0a54      	lsrs	r4, r2, #9
 8002690:	b2d8      	uxtb	r0, r3
 8002692:	e7f1      	b.n	8002678 <__aeabi_d2f+0x28>
 8002694:	4325      	orrs	r5, r4
 8002696:	d0ed      	beq.n	8002674 <__aeabi_d2f+0x24>
 8002698:	2080      	movs	r0, #128	; 0x80
 800269a:	03c0      	lsls	r0, r0, #15
 800269c:	4304      	orrs	r4, r0
 800269e:	20ff      	movs	r0, #255	; 0xff
 80026a0:	e7ea      	b.n	8002678 <__aeabi_d2f+0x28>
 80026a2:	2e00      	cmp	r6, #0
 80026a4:	dd1b      	ble.n	80026de <__aeabi_d2f+0x8e>
 80026a6:	0192      	lsls	r2, r2, #6
 80026a8:	1e53      	subs	r3, r2, #1
 80026aa:	419a      	sbcs	r2, r3
 80026ac:	00e4      	lsls	r4, r4, #3
 80026ae:	0f6d      	lsrs	r5, r5, #29
 80026b0:	4322      	orrs	r2, r4
 80026b2:	432a      	orrs	r2, r5
 80026b4:	0753      	lsls	r3, r2, #29
 80026b6:	d048      	beq.n	800274a <__aeabi_d2f+0xfa>
 80026b8:	230f      	movs	r3, #15
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d000      	beq.n	80026c2 <__aeabi_d2f+0x72>
 80026c0:	3204      	adds	r2, #4
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	04db      	lsls	r3, r3, #19
 80026c6:	4013      	ands	r3, r2
 80026c8:	d03f      	beq.n	800274a <__aeabi_d2f+0xfa>
 80026ca:	1c70      	adds	r0, r6, #1
 80026cc:	2efe      	cmp	r6, #254	; 0xfe
 80026ce:	d0d1      	beq.n	8002674 <__aeabi_d2f+0x24>
 80026d0:	0192      	lsls	r2, r2, #6
 80026d2:	0a54      	lsrs	r4, r2, #9
 80026d4:	b2c0      	uxtb	r0, r0
 80026d6:	e7cf      	b.n	8002678 <__aeabi_d2f+0x28>
 80026d8:	2000      	movs	r0, #0
 80026da:	2400      	movs	r4, #0
 80026dc:	e7cc      	b.n	8002678 <__aeabi_d2f+0x28>
 80026de:	0032      	movs	r2, r6
 80026e0:	3217      	adds	r2, #23
 80026e2:	db22      	blt.n	800272a <__aeabi_d2f+0xda>
 80026e4:	2080      	movs	r0, #128	; 0x80
 80026e6:	0400      	lsls	r0, r0, #16
 80026e8:	4320      	orrs	r0, r4
 80026ea:	241e      	movs	r4, #30
 80026ec:	1ba4      	subs	r4, r4, r6
 80026ee:	2c1f      	cmp	r4, #31
 80026f0:	dd1d      	ble.n	800272e <__aeabi_d2f+0xde>
 80026f2:	2202      	movs	r2, #2
 80026f4:	4252      	negs	r2, r2
 80026f6:	1b96      	subs	r6, r2, r6
 80026f8:	0002      	movs	r2, r0
 80026fa:	40f2      	lsrs	r2, r6
 80026fc:	0016      	movs	r6, r2
 80026fe:	2c20      	cmp	r4, #32
 8002700:	d004      	beq.n	800270c <__aeabi_d2f+0xbc>
 8002702:	4a15      	ldr	r2, [pc, #84]	; (8002758 <__aeabi_d2f+0x108>)
 8002704:	4694      	mov	ip, r2
 8002706:	4463      	add	r3, ip
 8002708:	4098      	lsls	r0, r3
 800270a:	4305      	orrs	r5, r0
 800270c:	002a      	movs	r2, r5
 800270e:	1e53      	subs	r3, r2, #1
 8002710:	419a      	sbcs	r2, r3
 8002712:	4332      	orrs	r2, r6
 8002714:	2600      	movs	r6, #0
 8002716:	0753      	lsls	r3, r2, #29
 8002718:	d1ce      	bne.n	80026b8 <__aeabi_d2f+0x68>
 800271a:	2480      	movs	r4, #128	; 0x80
 800271c:	0013      	movs	r3, r2
 800271e:	04e4      	lsls	r4, r4, #19
 8002720:	2001      	movs	r0, #1
 8002722:	4023      	ands	r3, r4
 8002724:	4222      	tst	r2, r4
 8002726:	d1d3      	bne.n	80026d0 <__aeabi_d2f+0x80>
 8002728:	e7b0      	b.n	800268c <__aeabi_d2f+0x3c>
 800272a:	2300      	movs	r3, #0
 800272c:	e7ad      	b.n	800268a <__aeabi_d2f+0x3a>
 800272e:	4a0b      	ldr	r2, [pc, #44]	; (800275c <__aeabi_d2f+0x10c>)
 8002730:	4694      	mov	ip, r2
 8002732:	002a      	movs	r2, r5
 8002734:	40e2      	lsrs	r2, r4
 8002736:	0014      	movs	r4, r2
 8002738:	002a      	movs	r2, r5
 800273a:	4463      	add	r3, ip
 800273c:	409a      	lsls	r2, r3
 800273e:	4098      	lsls	r0, r3
 8002740:	1e55      	subs	r5, r2, #1
 8002742:	41aa      	sbcs	r2, r5
 8002744:	4302      	orrs	r2, r0
 8002746:	4322      	orrs	r2, r4
 8002748:	e7e4      	b.n	8002714 <__aeabi_d2f+0xc4>
 800274a:	0033      	movs	r3, r6
 800274c:	e79e      	b.n	800268c <__aeabi_d2f+0x3c>
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	000007fe 	.word	0x000007fe
 8002754:	fffffc80 	.word	0xfffffc80
 8002758:	fffffca2 	.word	0xfffffca2
 800275c:	fffffc82 	.word	0xfffffc82

08002760 <__clzsi2>:
 8002760:	211c      	movs	r1, #28
 8002762:	2301      	movs	r3, #1
 8002764:	041b      	lsls	r3, r3, #16
 8002766:	4298      	cmp	r0, r3
 8002768:	d301      	bcc.n	800276e <__clzsi2+0xe>
 800276a:	0c00      	lsrs	r0, r0, #16
 800276c:	3910      	subs	r1, #16
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	4298      	cmp	r0, r3
 8002772:	d301      	bcc.n	8002778 <__clzsi2+0x18>
 8002774:	0a00      	lsrs	r0, r0, #8
 8002776:	3908      	subs	r1, #8
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	4298      	cmp	r0, r3
 800277c:	d301      	bcc.n	8002782 <__clzsi2+0x22>
 800277e:	0900      	lsrs	r0, r0, #4
 8002780:	3904      	subs	r1, #4
 8002782:	a202      	add	r2, pc, #8	; (adr r2, 800278c <__clzsi2+0x2c>)
 8002784:	5c10      	ldrb	r0, [r2, r0]
 8002786:	1840      	adds	r0, r0, r1
 8002788:	4770      	bx	lr
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	02020304 	.word	0x02020304
 8002790:	01010101 	.word	0x01010101
	...

0800279c <new_analog>:
//
//
// All Public Functions

// EFFECTS: Create a new Analog struct and returns pointer to struct.
Analog* new_analog(ADC_HandleTypeDef* _adc_pin, uint8_t S0, uint8_t S1, uint8_t S2, uint8_t S3){
 800279c:	b590      	push	{r4, r7, lr}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	000c      	movs	r4, r1
 80027a6:	0010      	movs	r0, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	1cfb      	adds	r3, r7, #3
 80027ac:	1c22      	adds	r2, r4, #0
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	1cbb      	adds	r3, r7, #2
 80027b2:	1c02      	adds	r2, r0, #0
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	1c7b      	adds	r3, r7, #1
 80027b8:	1c0a      	adds	r2, r1, #0
 80027ba:	701a      	strb	r2, [r3, #0]

	// Create a new struct
	Analog* Analog_object = (Analog*) malloc(sizeof(Analog));
 80027bc:	2008      	movs	r0, #8
 80027be:	f005 fc99 	bl	80080f4 <malloc>
 80027c2:	0003      	movs	r3, r0
 80027c4:	60fb      	str	r3, [r7, #12]

	Analog_object->adc_pin = _adc_pin;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	601a      	str	r2, [r3, #0]
	Analog_object->select_pins[0] = S0;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1cfa      	adds	r2, r7, #3
 80027d0:	7812      	ldrb	r2, [r2, #0]
 80027d2:	711a      	strb	r2, [r3, #4]
	Analog_object->select_pins[1] = S1;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1cba      	adds	r2, r7, #2
 80027d8:	7812      	ldrb	r2, [r2, #0]
 80027da:	715a      	strb	r2, [r3, #5]
	Analog_object->select_pins[2] = S2;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1c7a      	adds	r2, r7, #1
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	719a      	strb	r2, [r3, #6]
	Analog_object->select_pins[3] = S3;
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	2320      	movs	r3, #32
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	71d3      	strb	r3, [r2, #7]

	return Analog_object;
 80027ee:	68fb      	ldr	r3, [r7, #12]

}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b005      	add	sp, #20
 80027f6:	bd90      	pop	{r4, r7, pc}

080027f8 <get_voltage_data>:

// EFFECTS: Get voltage data from a specific voltage sensor in Volts
float get_voltage_data(const Analog* _Analog){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	// Read data from ADC, raw_ADC_data is a number in [0, 4095]
	uint32_t raw_ADC_data = read_from_ADC(_Analog->adc_pin);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 f85b 	bl	80028c0 <read_from_ADC>
 800280a:	0003      	movs	r3, r0
 800280c:	60fb      	str	r3, [r7, #12]
	// Convert from [0, 4095] to [0, 1] to [0, 3.3]
	float steppedDownVoltage = (raw_ADC_data / 4095.0) * 3.3;
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f7ff feb0 	bl	8002574 <__aeabi_ui2d>
 8002814:	2200      	movs	r2, #0
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <get_voltage_data+0x58>)
 8002818:	f7fe fc28 	bl	800106c <__aeabi_ddiv>
 800281c:	0002      	movs	r2, r0
 800281e:	000b      	movs	r3, r1
 8002820:	0010      	movs	r0, r2
 8002822:	0019      	movs	r1, r3
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <get_voltage_data+0x5c>)
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <get_voltage_data+0x60>)
 8002828:	f7ff f822 	bl	8001870 <__aeabi_dmul>
 800282c:	0002      	movs	r2, r0
 800282e:	000b      	movs	r3, r1
 8002830:	0010      	movs	r0, r2
 8002832:	0019      	movs	r1, r3
 8002834:	f7ff ff0c 	bl	8002650 <__aeabi_d2f>
 8002838:	1c03      	adds	r3, r0, #0
 800283a:	60bb      	str	r3, [r7, #8]
	// Convert steppedDownVoltage to actual output voltage (multiplier of 14)
	return steppedDownVoltage * 14.0;
 800283c:	4907      	ldr	r1, [pc, #28]	; (800285c <get_voltage_data+0x64>)
 800283e:	68b8      	ldr	r0, [r7, #8]
 8002840:	f7fd ff44 	bl	80006cc <__aeabi_fmul>
 8002844:	1c03      	adds	r3, r0, #0
}
 8002846:	1c18      	adds	r0, r3, #0
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	40affe00 	.word	0x40affe00
 8002854:	66666666 	.word	0x66666666
 8002858:	400a6666 	.word	0x400a6666
 800285c:	41600000 	.word	0x41600000

08002860 <get_current_data>:

// EFFECTS: Get current data from a specific current sensor in Amps
float get_current_data(const Analog* _Analog){
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	// Get offset voltage
	float offsetVolts = get_voltage_data(_Analog);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f7ff ffc4 	bl	80027f8 <get_voltage_data>
 8002870:	1c03      	adds	r3, r0, #0
 8002872:	617b      	str	r3, [r7, #20]
	// Account for offset which is zero current output voltage (3.3 * 0.1)
	float volts = offsetVolts - 3.3 * 0.1;
 8002874:	6978      	ldr	r0, [r7, #20]
 8002876:	f7ff fea3 	bl	80025c0 <__aeabi_f2d>
 800287a:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <get_current_data+0x50>)
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <get_current_data+0x54>)
 800287e:	f7ff fa63 	bl	8001d48 <__aeabi_dsub>
 8002882:	0002      	movs	r2, r0
 8002884:	000b      	movs	r3, r1
 8002886:	0010      	movs	r0, r2
 8002888:	0019      	movs	r1, r3
 800288a:	f7ff fee1 	bl	8002650 <__aeabi_d2f>
 800288e:	1c03      	adds	r3, r0, #0
 8002890:	613b      	str	r3, [r7, #16]
	// Convert from volts to millivolts
	float millivolts = (volts) * 1000.0;
 8002892:	4909      	ldr	r1, [pc, #36]	; (80028b8 <get_current_data+0x58>)
 8002894:	6938      	ldr	r0, [r7, #16]
 8002896:	f7fd ff19 	bl	80006cc <__aeabi_fmul>
 800289a:	1c03      	adds	r3, r0, #0
 800289c:	60fb      	str	r3, [r7, #12]
	// Convert based on sensitivity, which is 264 mV/A
	return millivolts / 264.0;
 800289e:	4907      	ldr	r1, [pc, #28]	; (80028bc <get_current_data+0x5c>)
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7fd fdfb 	bl	800049c <__aeabi_fdiv>
 80028a6:	1c03      	adds	r3, r0, #0
}
 80028a8:	1c18      	adds	r0, r3, #0
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b006      	add	sp, #24
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	51eb851f 	.word	0x51eb851f
 80028b4:	3fd51eb8 	.word	0x3fd51eb8
 80028b8:	447a0000 	.word	0x447a0000
 80028bc:	43840000 	.word	0x43840000

080028c0 <read_from_ADC>:
//
// All Private Functions

// EFFECTS: Read from ADC object
// Returns a number between 0 and 4095
uint32_t read_from_ADC(ADC_HandleTypeDef* adc_object){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc_object);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f001 fb5a 	bl	8003f84 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc_object, HAL_MAX_DELAY);
 80028d0:	2301      	movs	r3, #1
 80028d2:	425a      	negs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	0011      	movs	r1, r2
 80028d8:	0018      	movs	r0, r3
 80028da:	f001 fbdd 	bl	8004098 <HAL_ADC_PollForConversion>
    uint32_t raw = HAL_ADC_GetValue(adc_object);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0018      	movs	r0, r3
 80028e2:	f001 fc6d 	bl	80041c0 <HAL_ADC_GetValue>
 80028e6:	0003      	movs	r3, r0
 80028e8:	60fb      	str	r3, [r7, #12]
    HAL_ADC_Stop(adc_object);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f001 fb97 	bl	8004020 <HAL_ADC_Stop>
    return raw;
 80028f2:	68fb      	ldr	r3, [r7, #12]
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b004      	add	sp, #16
 80028fa:	bd80      	pop	{r7, pc}

080028fc <send_temperature_data>:

#ifdef TEMPERATURE_ENABLE

// EFFECTS: sends temperature data in the following format
// FORMAT: $TEMPERATURE,<t0>,<t1>,<t2>
void send_temperature_data() {
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fe:	b095      	sub	sp, #84	; 0x54
 8002900:	af04      	add	r7, sp, #16

	// TODO

	// Total length of output of string $TEMPERATURE,x,x,x
	uint8_t buffer[50] = "";
 8002902:	260c      	movs	r6, #12
 8002904:	19bb      	adds	r3, r7, r6
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	3304      	adds	r3, #4
 800290c:	222e      	movs	r2, #46	; 0x2e
 800290e:	2100      	movs	r1, #0
 8002910:	0018      	movs	r0, r3
 8002912:	f005 fc02 	bl	800811a <memset>

	sprintf((char *)buffer, "$TEMPERATURE,%f,%f,%f\r\n",\
			temperature_data[0], temperature_data[1], temperature_data[2]);
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <send_temperature_data+0x70>)
 8002918:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)buffer, "$TEMPERATURE,%f,%f,%f\r\n",\
 800291a:	1c18      	adds	r0, r3, #0
 800291c:	f7ff fe50 	bl	80025c0 <__aeabi_f2d>
 8002920:	6038      	str	r0, [r7, #0]
 8002922:	6079      	str	r1, [r7, #4]
			temperature_data[0], temperature_data[1], temperature_data[2]);
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <send_temperature_data+0x70>)
 8002926:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)buffer, "$TEMPERATURE,%f,%f,%f\r\n",\
 8002928:	1c18      	adds	r0, r3, #0
 800292a:	f7ff fe49 	bl	80025c0 <__aeabi_f2d>
 800292e:	0004      	movs	r4, r0
 8002930:	000d      	movs	r5, r1
			temperature_data[0], temperature_data[1], temperature_data[2]);
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <send_temperature_data+0x70>)
 8002934:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)buffer, "$TEMPERATURE,%f,%f,%f\r\n",\
 8002936:	1c18      	adds	r0, r3, #0
 8002938:	f7ff fe42 	bl	80025c0 <__aeabi_f2d>
 800293c:	0002      	movs	r2, r0
 800293e:	000b      	movs	r3, r1
 8002940:	490b      	ldr	r1, [pc, #44]	; (8002970 <send_temperature_data+0x74>)
 8002942:	19b8      	adds	r0, r7, r6
 8002944:	9202      	str	r2, [sp, #8]
 8002946:	9303      	str	r3, [sp, #12]
 8002948:	9400      	str	r4, [sp, #0]
 800294a:	9501      	str	r5, [sp, #4]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f006 f94e 	bl	8008bf0 <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	049b      	lsls	r3, r3, #18
 8002958:	19b9      	adds	r1, r7, r6
 800295a:	4806      	ldr	r0, [pc, #24]	; (8002974 <send_temperature_data+0x78>)
 800295c:	2232      	movs	r2, #50	; 0x32
 800295e:	f002 ff5d 	bl	800581c <HAL_I2C_Slave_Seq_Transmit_IT>

}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b011      	add	sp, #68	; 0x44
 8002968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	20000300 	.word	0x20000300
 8002970:	0800b050 	.word	0x0800b050
 8002974:	200002a8 	.word	0x200002a8

08002978 <select_analog_channel>:
#endif

#ifdef ANALOG_ENABLE

// EFFECTS: select analog channel
void select_analog_channel(const Analog* analog_device) {
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, analog_device->select_pins[0]); //S0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	791a      	ldrb	r2, [r3, #4]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	0059      	lsls	r1, r3, #1
 8002988:	23a0      	movs	r3, #160	; 0xa0
 800298a:	05db      	lsls	r3, r3, #23
 800298c:	0018      	movs	r0, r3
 800298e:	f002 fa75 	bl	8004e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, analog_device->select_pins[1]); //S1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	795a      	ldrb	r2, [r3, #5]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	0099      	lsls	r1, r3, #2
 800299a:	23a0      	movs	r3, #160	; 0xa0
 800299c:	05db      	lsls	r3, r3, #23
 800299e:	0018      	movs	r0, r3
 80029a0:	f002 fa6c 	bl	8004e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, analog_device->select_pins[2]); //S2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	799b      	ldrb	r3, [r3, #6]
 80029a8:	480b      	ldr	r0, [pc, #44]	; (80029d8 <select_analog_channel+0x60>)
 80029aa:	001a      	movs	r2, r3
 80029ac:	2140      	movs	r1, #64	; 0x40
 80029ae:	f002 fa65 	bl	8004e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, analog_device->select_pins[3]); //S3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	79db      	ldrb	r3, [r3, #7]
 80029b6:	4808      	ldr	r0, [pc, #32]	; (80029d8 <select_analog_channel+0x60>)
 80029b8:	001a      	movs	r2, r3
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	f002 fa5e 	bl	8004e7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,  1); //ENABLE
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <select_analog_channel+0x64>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	0019      	movs	r1, r3
 80029ca:	f002 fa57 	bl	8004e7c <HAL_GPIO_WritePin>
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b002      	add	sp, #8
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	50000800 	.word	0x50000800
 80029dc:	50000400 	.word	0x50000400

080029e0 <get_analog_data>:

// EFFECTS: get analog data in the following format
// FORMAT: $CURRENT,<c0>,<c1>,<c2> and $VOLTAGE,<v0>,<v1>,<v2>
void get_analog_data() {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0

    for (int i = 0; i < CURRENT_DEVICES; ++i) {
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	e014      	b.n	8002a16 <get_analog_data+0x36>
    	const Analog* analog_device = current_channels[i];
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <get_analog_data+0x7c>)
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	58d3      	ldr	r3, [r2, r3]
 80029f4:	603b      	str	r3, [r7, #0]
    	select_analog_channel(analog_device);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f7ff ffbd 	bl	8002978 <select_analog_channel>
    	current_data[i] = get_current_data(analog_device);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff ff2d 	bl	8002860 <get_current_data>
 8002a06:	1c01      	adds	r1, r0, #0
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <get_analog_data+0x80>)
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < CURRENT_DEVICES; ++i) {
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	3301      	adds	r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	dde7      	ble.n	80029ec <get_analog_data+0xc>
    }

    for (int i = 0; i < VOLTAGE_DEVICES; ++i) {
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	e014      	b.n	8002a4c <get_analog_data+0x6c>
    	const Analog* analog_device = voltage_channels[i];
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <get_analog_data+0x84>)
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	58d3      	ldr	r3, [r2, r3]
 8002a2a:	607b      	str	r3, [r7, #4]
    	select_analog_channel(analog_device);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff ffa2 	bl	8002978 <select_analog_channel>
    	voltage_data[i] = get_voltage_data(analog_device);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7ff fede 	bl	80027f8 <get_voltage_data>
 8002a3c:	1c01      	adds	r1, r0, #0
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <get_analog_data+0x88>)
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < VOLTAGE_DEVICES; ++i) {
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	dde7      	ble.n	8002a22 <get_analog_data+0x42>
	}
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	2000031c 	.word	0x2000031c
 8002a60:	20000334 	.word	0x20000334
 8002a64:	20000310 	.word	0x20000310
 8002a68:	20000328 	.word	0x20000328

08002a6c <send_current_data>:

// EFFECTS: send current data in the following format
// FORMAT: $CURRENT,<c0>,<c1>,<c2>
void send_current_data() {
 8002a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6e:	b095      	sub	sp, #84	; 0x54
 8002a70:	af04      	add	r7, sp, #16

	// TODO - verify that we are sending i2c messages properly
	// Total length of output of string $CURRENT,x,x,x
	uint8_t buffer[50] = "";
 8002a72:	260c      	movs	r6, #12
 8002a74:	19bb      	adds	r3, r7, r6
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	222e      	movs	r2, #46	; 0x2e
 8002a7e:	2100      	movs	r1, #0
 8002a80:	0018      	movs	r0, r3
 8002a82:	f005 fb4a 	bl	800811a <memset>

	sprintf((char *)buffer, "$CURRENT,%f,%f,%f\r\n",\
			current_data[0], current_data[1], current_data[2]);
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <send_current_data+0x70>)
 8002a88:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)buffer, "$CURRENT,%f,%f,%f\r\n",\
 8002a8a:	1c18      	adds	r0, r3, #0
 8002a8c:	f7ff fd98 	bl	80025c0 <__aeabi_f2d>
 8002a90:	6038      	str	r0, [r7, #0]
 8002a92:	6079      	str	r1, [r7, #4]
			current_data[0], current_data[1], current_data[2]);
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <send_current_data+0x70>)
 8002a96:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)buffer, "$CURRENT,%f,%f,%f\r\n",\
 8002a98:	1c18      	adds	r0, r3, #0
 8002a9a:	f7ff fd91 	bl	80025c0 <__aeabi_f2d>
 8002a9e:	0004      	movs	r4, r0
 8002aa0:	000d      	movs	r5, r1
			current_data[0], current_data[1], current_data[2]);
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <send_current_data+0x70>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)buffer, "$CURRENT,%f,%f,%f\r\n",\
 8002aa6:	1c18      	adds	r0, r3, #0
 8002aa8:	f7ff fd8a 	bl	80025c0 <__aeabi_f2d>
 8002aac:	0002      	movs	r2, r0
 8002aae:	000b      	movs	r3, r1
 8002ab0:	490b      	ldr	r1, [pc, #44]	; (8002ae0 <send_current_data+0x74>)
 8002ab2:	19b8      	adds	r0, r7, r6
 8002ab4:	9202      	str	r2, [sp, #8]
 8002ab6:	9303      	str	r3, [sp, #12]
 8002ab8:	9400      	str	r4, [sp, #0]
 8002aba:	9501      	str	r5, [sp, #4]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f006 f896 	bl	8008bf0 <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	049b      	lsls	r3, r3, #18
 8002ac8:	19b9      	adds	r1, r7, r6
 8002aca:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <send_current_data+0x78>)
 8002acc:	2232      	movs	r2, #50	; 0x32
 8002ace:	f002 fea5 	bl	800581c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b011      	add	sp, #68	; 0x44
 8002ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	20000334 	.word	0x20000334
 8002ae0:	0800b068 	.word	0x0800b068
 8002ae4:	200002a8 	.word	0x200002a8

08002ae8 <send_voltage_data>:

// EFFECTS: send analog data in the following format
// FORMAT: $VOLTAGE,<v0>,<v1>,<v2>
void send_voltage_data() {
 8002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aea:	b095      	sub	sp, #84	; 0x54
 8002aec:	af04      	add	r7, sp, #16
  
	// TODO - verify that we are sending i2c messages properly
	// Total length of output of string $VOLTAGE,x,x,x
	uint8_t buffer[50] = "";
 8002aee:	260c      	movs	r6, #12
 8002af0:	19bb      	adds	r3, r7, r6
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	3304      	adds	r3, #4
 8002af8:	222e      	movs	r2, #46	; 0x2e
 8002afa:	2100      	movs	r1, #0
 8002afc:	0018      	movs	r0, r3
 8002afe:	f005 fb0c 	bl	800811a <memset>

	sprintf((char *)buffer, "$VOLTAGE,%f,%f,%f\r\n",\
			voltage_data[0], voltage_data[1], voltage_data[2]);
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <send_voltage_data+0x70>)
 8002b04:	681b      	ldr	r3, [r3, #0]
	sprintf((char *)buffer, "$VOLTAGE,%f,%f,%f\r\n",\
 8002b06:	1c18      	adds	r0, r3, #0
 8002b08:	f7ff fd5a 	bl	80025c0 <__aeabi_f2d>
 8002b0c:	6038      	str	r0, [r7, #0]
 8002b0e:	6079      	str	r1, [r7, #4]
			voltage_data[0], voltage_data[1], voltage_data[2]);
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <send_voltage_data+0x70>)
 8002b12:	685b      	ldr	r3, [r3, #4]
	sprintf((char *)buffer, "$VOLTAGE,%f,%f,%f\r\n",\
 8002b14:	1c18      	adds	r0, r3, #0
 8002b16:	f7ff fd53 	bl	80025c0 <__aeabi_f2d>
 8002b1a:	0004      	movs	r4, r0
 8002b1c:	000d      	movs	r5, r1
			voltage_data[0], voltage_data[1], voltage_data[2]);
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <send_voltage_data+0x70>)
 8002b20:	689b      	ldr	r3, [r3, #8]
	sprintf((char *)buffer, "$VOLTAGE,%f,%f,%f\r\n",\
 8002b22:	1c18      	adds	r0, r3, #0
 8002b24:	f7ff fd4c 	bl	80025c0 <__aeabi_f2d>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	000b      	movs	r3, r1
 8002b2c:	490b      	ldr	r1, [pc, #44]	; (8002b5c <send_voltage_data+0x74>)
 8002b2e:	19b8      	adds	r0, r7, r6
 8002b30:	9202      	str	r2, [sp, #8]
 8002b32:	9303      	str	r3, [sp, #12]
 8002b34:	9400      	str	r4, [sp, #0]
 8002b36:	9501      	str	r5, [sp, #4]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f006 f858 	bl	8008bf0 <siprintf>

	HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, buffer, sizeof(buffer), I2C_LAST_FRAME);
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	049b      	lsls	r3, r3, #18
 8002b44:	19b9      	adds	r1, r7, r6
 8002b46:	4806      	ldr	r0, [pc, #24]	; (8002b60 <send_voltage_data+0x78>)
 8002b48:	2232      	movs	r2, #50	; 0x32
 8002b4a:	f002 fe67 	bl	800581c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b011      	add	sp, #68	; 0x44
 8002b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	20000328 	.word	0x20000328
 8002b5c:	0800b07c 	.word	0x0800b07c
 8002b60:	200002a8 	.word	0x200002a8

08002b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b6a:	f000 fe31 	bl	80037d0 <HAL_Init>

  /* USER CODE BEGIN Init */

#ifdef TEMPERATURE_ENABLE

i2cBus = new_smbus(&hi2c1);
 8002b6e:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <main+0x138>)
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fa7c 	bl	800306e <new_smbus>
 8002b76:	0002      	movs	r2, r0
 8002b78:	4b49      	ldr	r3, [pc, #292]	; (8002ca0 <main+0x13c>)
 8002b7a:	601a      	str	r2, [r3, #0]
disable_DMA(i2cBus);
 8002b7c:	4b48      	ldr	r3, [pc, #288]	; (8002ca0 <main+0x13c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 fa90 	bl	80030a6 <disable_DMA>

temperature_channels[TEMPERATURE_3_3_V_CHANNEL] = new_temperature_sensor(i2cBus, 0, 0, 0);
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <main+0x13c>)
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f000 fd15 	bl	80035be <new_temperature_sensor>
 8002b94:	0002      	movs	r2, r0
 8002b96:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <main+0x140>)
 8002b98:	601a      	str	r2, [r3, #0]
temperature_channels[TEMPERATURE_5_V_CHANNEL] = new_temperature_sensor(i2cBus, 1, 0, 0);
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <main+0x13c>)
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	f000 fd0b 	bl	80035be <new_temperature_sensor>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <main+0x140>)
 8002bac:	605a      	str	r2, [r3, #4]
temperature_channels[TEMPERATURE_12_V_CHANNEL] = new_temperature_sensor(i2cBus, 0, 1, 0);
 8002bae:	4b3c      	ldr	r3, [pc, #240]	; (8002ca0 <main+0x13c>)
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	f000 fd01 	bl	80035be <new_temperature_sensor>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <main+0x140>)
 8002bc0:	609a      	str	r2, [r3, #8]

#endif

#ifdef ANALOG_ENABLE

current_channels[CS3_3_3_V] = new_analog(&hadc1, 0, 0, 1, 0);
 8002bc2:	4839      	ldr	r0, [pc, #228]	; (8002ca8 <main+0x144>)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	f7ff fde5 	bl	800279c <new_analog>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	4b35      	ldr	r3, [pc, #212]	; (8002cac <main+0x148>)
 8002bd6:	601a      	str	r2, [r3, #0]
current_channels[CS2_5_V] = new_analog(&hadc1, 0, 1, 0, 0);
 8002bd8:	4833      	ldr	r0, [pc, #204]	; (8002ca8 <main+0x144>)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	2201      	movs	r2, #1
 8002be2:	2100      	movs	r1, #0
 8002be4:	f7ff fdda 	bl	800279c <new_analog>
 8002be8:	0002      	movs	r2, r0
 8002bea:	4b30      	ldr	r3, [pc, #192]	; (8002cac <main+0x148>)
 8002bec:	605a      	str	r2, [r3, #4]
current_channels[CS1_12_V] = new_analog(&hadc1, 0, 0, 0, 0);
 8002bee:	482e      	ldr	r0, [pc, #184]	; (8002ca8 <main+0x144>)
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f7ff fdcf 	bl	800279c <new_analog>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <main+0x148>)
 8002c02:	609a      	str	r2, [r3, #8]

voltage_channels[VOLTAGE_DIVIDER_3_3_V] = new_analog(&hadc1, 1, 0, 1, 0);
 8002c04:	4828      	ldr	r0, [pc, #160]	; (8002ca8 <main+0x144>)
 8002c06:	2300      	movs	r3, #0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2101      	movs	r1, #1
 8002c10:	f7ff fdc4 	bl	800279c <new_analog>
 8002c14:	0002      	movs	r2, r0
 8002c16:	4b26      	ldr	r3, [pc, #152]	; (8002cb0 <main+0x14c>)
 8002c18:	601a      	str	r2, [r3, #0]
voltage_channels[VOLTAGE_DIVIDER_5_V] = new_analog(&hadc1, 1, 1, 0, 0);
 8002c1a:	4823      	ldr	r0, [pc, #140]	; (8002ca8 <main+0x144>)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2300      	movs	r3, #0
 8002c22:	2201      	movs	r2, #1
 8002c24:	2101      	movs	r1, #1
 8002c26:	f7ff fdb9 	bl	800279c <new_analog>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <main+0x14c>)
 8002c2e:	605a      	str	r2, [r3, #4]
voltage_channels[VOLTAGE_DIVIDER_12_V] = new_analog(&hadc1, 1, 0, 0, 0);
 8002c30:	481d      	ldr	r0, [pc, #116]	; (8002ca8 <main+0x144>)
 8002c32:	2300      	movs	r3, #0
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	2300      	movs	r3, #0
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	f7ff fdae 	bl	800279c <new_analog>
 8002c40:	0002      	movs	r2, r0
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <main+0x14c>)
 8002c44:	609a      	str	r2, [r3, #8]
#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c46:	f000 f837 	bl	8002cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c4a:	f000 f981 	bl	8002f50 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002c4e:	f000 f893 	bl	8002d78 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002c52:	f000 f8fd 	bl	8002e50 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002c56:	f000 f93b 	bl	8002ed0 <MX_I2C2_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef TEMPERATURE_ENABLE

      for (int i = 0; i < TEMPERATURE_DEVICES; ++i) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	e00e      	b.n	8002c7e <main+0x11a>
          temperature_data[i] = get_temperature_data(temperature_channels[i]);
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <main+0x140>)
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	0092      	lsls	r2, r2, #2
 8002c66:	58d3      	ldr	r3, [r2, r3]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 fce7 	bl	800363c <get_temperature_data>
 8002c6e:	1c01      	adds	r1, r0, #0
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <main+0x150>)
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	0092      	lsls	r2, r2, #2
 8002c76:	50d1      	str	r1, [r2, r3]
      for (int i = 0; i < TEMPERATURE_DEVICES; ++i) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	dded      	ble.n	8002c60 <main+0xfc>
      }

      send_temperature_data(temperature_data);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <main+0x150>)
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7ff fe38 	bl	80028fc <send_temperature_data>

#endif

#ifdef ANALOG_ENABLE
      get_analog_data();
 8002c8c:	f7ff fea8 	bl	80029e0 <get_analog_data>
      send_current_data();
 8002c90:	f7ff feec 	bl	8002a6c <send_current_data>
      send_voltage_data();
 8002c94:	f7ff ff28 	bl	8002ae8 <send_voltage_data>
      for (int i = 0; i < TEMPERATURE_DEVICES; ++i) {
 8002c98:	e7df      	b.n	8002c5a <main+0xf6>
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	2000025c 	.word	0x2000025c
 8002ca0:	2000030c 	.word	0x2000030c
 8002ca4:	200002f4 	.word	0x200002f4
 8002ca8:	200001f8 	.word	0x200001f8
 8002cac:	2000031c 	.word	0x2000031c
 8002cb0:	20000310 	.word	0x20000310
 8002cb4:	20000300 	.word	0x20000300

08002cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b099      	sub	sp, #100	; 0x64
 8002cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cbe:	242c      	movs	r4, #44	; 0x2c
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	2334      	movs	r3, #52	; 0x34
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	2100      	movs	r1, #0
 8002cca:	f005 fa26 	bl	800811a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cce:	231c      	movs	r3, #28
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	2310      	movs	r3, #16
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f005 fa1e 	bl	800811a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	2318      	movs	r3, #24
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f005 fa17 	bl	800811a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f004 fbcf 	bl	8007494 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cf6:	193b      	adds	r3, r7, r4
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	2280      	movs	r2, #128	; 0x80
 8002d00:	0052      	lsls	r2, r2, #1
 8002d02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002d04:	193b      	adds	r3, r7, r4
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d0a:	193b      	adds	r3, r7, r4
 8002d0c:	2240      	movs	r2, #64	; 0x40
 8002d0e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d10:	193b      	adds	r3, r7, r4
 8002d12:	2200      	movs	r2, #0
 8002d14:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f004 fbfb 	bl	8007514 <HAL_RCC_OscConfig>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d001      	beq.n	8002d26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002d22:	f000 f99f 	bl	8003064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d26:	211c      	movs	r1, #28
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	2200      	movs	r2, #0
 8002d32:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	2100      	movs	r1, #0
 8002d44:	0018      	movs	r0, r3
 8002d46:	f004 fefb 	bl	8007b40 <HAL_RCC_ClockConfig>
 8002d4a:	1e03      	subs	r3, r0, #0
 8002d4c:	d001      	beq.n	8002d52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d4e:	f000 f989 	bl	8003064 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2220      	movs	r2, #32
 8002d56:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	0018      	movs	r0, r3
 8002d62:	f005 f877 	bl	8007e54 <HAL_RCCEx_PeriphCLKConfig>
 8002d66:	1e03      	subs	r3, r0, #0
 8002d68:	d001      	beq.n	8002d6e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002d6a:	f000 f97b 	bl	8003064 <Error_Handler>
  }
}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b019      	add	sp, #100	; 0x64
 8002d74:	bd90      	pop	{r4, r7, pc}
	...

08002d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	0018      	movs	r0, r3
 8002d82:	230c      	movs	r3, #12
 8002d84:	001a      	movs	r2, r3
 8002d86:	2100      	movs	r1, #0
 8002d88:	f005 f9c7 	bl	800811a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002d8e:	4a2e      	ldr	r2, [pc, #184]	; (8002e48 <MX_ADC1_Init+0xd0>)
 8002d90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002d92:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002d94:	2280      	movs	r2, #128	; 0x80
 8002d96:	05d2      	lsls	r2, r2, #23
 8002d98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002da6:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dae:	2204      	movs	r2, #4
 8002db0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dcc:	2220      	movs	r2, #32
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002de0:	222c      	movs	r2, #44	; 0x2c
 8002de2:	2100      	movs	r1, #0
 8002de4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002dec:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002dfa:	223c      	movs	r2, #60	; 0x3c
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 fedd 	bl	8003bc8 <HAL_ADC_Init>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d001      	beq.n	8002e16 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8002e12:	f000 f927 	bl	8003064 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <MX_ADC1_Init+0xd4>)
 8002e1a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e28:	1d3a      	adds	r2, r7, #4
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <MX_ADC1_Init+0xcc>)
 8002e2c:	0011      	movs	r1, r2
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f001 f9d2 	bl	80041d8 <HAL_ADC_ConfigChannel>
 8002e34:	1e03      	subs	r3, r0, #0
 8002e36:	d001      	beq.n	8002e3c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002e38:	f000 f914 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b004      	add	sp, #16
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200001f8 	.word	0x200001f8
 8002e48:	40012400 	.word	0x40012400
 8002e4c:	04000002 	.word	0x04000002

08002e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e56:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <MX_I2C1_Init+0x78>)
 8002e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ecc <MX_I2C1_Init+0x7c>)
 8002e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e6c:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e72:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f002 f813 	bl	8004eb8 <HAL_I2C_Init>
 8002e92:	1e03      	subs	r3, r0, #0
 8002e94:	d001      	beq.n	8002e9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002e96:	f000 f8e5 	bl	8003064 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f004 fa60 	bl	8007364 <HAL_I2CEx_ConfigAnalogFilter>
 8002ea4:	1e03      	subs	r3, r0, #0
 8002ea6:	d001      	beq.n	8002eac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ea8:	f000 f8dc 	bl	8003064 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <MX_I2C1_Init+0x74>)
 8002eae:	2100      	movs	r1, #0
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f004 faa3 	bl	80073fc <HAL_I2CEx_ConfigDigitalFilter>
 8002eb6:	1e03      	subs	r3, r0, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002eba:	f000 f8d3 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	2000025c 	.word	0x2000025c
 8002ec8:	40005400 	.word	0x40005400
 8002ecc:	00303d5b 	.word	0x00303d5b

08002ed0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002ed6:	4a1c      	ldr	r2, [pc, #112]	; (8002f48 <MX_I2C2_Init+0x78>)
 8002ed8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002edc:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <MX_I2C2_Init+0x7c>)
 8002ede:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002ef2:	4b14      	ldr	r3, [pc, #80]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f04:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f001 ffd3 	bl	8004eb8 <HAL_I2C_Init>
 8002f12:	1e03      	subs	r3, r0, #0
 8002f14:	d001      	beq.n	8002f1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002f16:	f000 f8a5 	bl	8003064 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f004 fa20 	bl	8007364 <HAL_I2CEx_ConfigAnalogFilter>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d001      	beq.n	8002f2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002f28:	f000 f89c 	bl	8003064 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <MX_I2C2_Init+0x74>)
 8002f2e:	2100      	movs	r1, #0
 8002f30:	0018      	movs	r0, r3
 8002f32:	f004 fa63 	bl	80073fc <HAL_I2CEx_ConfigDigitalFilter>
 8002f36:	1e03      	subs	r3, r0, #0
 8002f38:	d001      	beq.n	8002f3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002f3a:	f000 f893 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200002a8 	.word	0x200002a8
 8002f48:	40005800 	.word	0x40005800
 8002f4c:	00303d5b 	.word	0x00303d5b

08002f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f56:	240c      	movs	r4, #12
 8002f58:	193b      	adds	r3, r7, r4
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	2314      	movs	r3, #20
 8002f5e:	001a      	movs	r2, r3
 8002f60:	2100      	movs	r1, #0
 8002f62:	f005 f8da 	bl	800811a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4b3c      	ldr	r3, [pc, #240]	; (8003058 <MX_GPIO_Init+0x108>)
 8002f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <MX_GPIO_Init+0x108>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	635a      	str	r2, [r3, #52]	; 0x34
 8002f72:	4b39      	ldr	r3, [pc, #228]	; (8003058 <MX_GPIO_Init+0x108>)
 8002f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f76:	2201      	movs	r2, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	4b36      	ldr	r3, [pc, #216]	; (8003058 <MX_GPIO_Init+0x108>)
 8002f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <MX_GPIO_Init+0x108>)
 8002f84:	2102      	movs	r1, #2
 8002f86:	430a      	orrs	r2, r1
 8002f88:	635a      	str	r2, [r3, #52]	; 0x34
 8002f8a:	4b33      	ldr	r3, [pc, #204]	; (8003058 <MX_GPIO_Init+0x108>)
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	2202      	movs	r2, #2
 8002f90:	4013      	ands	r3, r2
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <MX_GPIO_Init+0x108>)
 8002f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <MX_GPIO_Init+0x108>)
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	; (8003058 <MX_GPIO_Init+0x108>)
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa6:	2204      	movs	r2, #4
 8002fa8:	4013      	ands	r3, r2
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|Analog_Enable_Pin, GPIO_PIN_RESET);
 8002fae:	2390      	movs	r3, #144	; 0x90
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	482a      	ldr	r0, [pc, #168]	; (800305c <MX_GPIO_Init+0x10c>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	f001 ff60 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Analog_Select_Pin|Analog_SelectA9_Pin, GPIO_PIN_RESET);
 8002fbc:	23c0      	movs	r3, #192	; 0xc0
 8002fbe:	0099      	lsls	r1, r3, #2
 8002fc0:	23a0      	movs	r3, #160	; 0xa0
 8002fc2:	05db      	lsls	r3, r3, #23
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f001 ff58 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Analog_SelectC6_Pin|Analog_SelectC7_Pin, GPIO_PIN_RESET);
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <MX_GPIO_Init+0x110>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	21c0      	movs	r1, #192	; 0xc0
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f001 ff52 	bl	8004e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 Analog_Enable_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|Analog_Enable_Pin;
 8002fd8:	193b      	adds	r3, r7, r4
 8002fda:	2290      	movs	r2, #144	; 0x90
 8002fdc:	0212      	lsls	r2, r2, #8
 8002fde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fec:	193b      	adds	r3, r7, r4
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff2:	193b      	adds	r3, r7, r4
 8002ff4:	4a19      	ldr	r2, [pc, #100]	; (800305c <MX_GPIO_Init+0x10c>)
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	0010      	movs	r0, r2
 8002ffa:	f001 fddb 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Analog_Select_Pin Analog_SelectA9_Pin */
  GPIO_InitStruct.Pin = Analog_Select_Pin|Analog_SelectA9_Pin;
 8002ffe:	0021      	movs	r1, r4
 8003000:	187b      	adds	r3, r7, r1
 8003002:	22c0      	movs	r2, #192	; 0xc0
 8003004:	0092      	lsls	r2, r2, #2
 8003006:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003008:	000c      	movs	r4, r1
 800300a:	193b      	adds	r3, r7, r4
 800300c:	2201      	movs	r2, #1
 800300e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	193b      	adds	r3, r7, r4
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	193b      	adds	r3, r7, r4
 8003018:	2200      	movs	r2, #0
 800301a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	193a      	adds	r2, r7, r4
 800301e:	23a0      	movs	r3, #160	; 0xa0
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f001 fdc5 	bl	8004bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Analog_SelectC6_Pin Analog_SelectC7_Pin */
  GPIO_InitStruct.Pin = Analog_SelectC6_Pin|Analog_SelectC7_Pin;
 800302a:	0021      	movs	r1, r4
 800302c:	187b      	adds	r3, r7, r1
 800302e:	22c0      	movs	r2, #192	; 0xc0
 8003030:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003032:	187b      	adds	r3, r7, r1
 8003034:	2201      	movs	r2, #1
 8003036:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	187b      	adds	r3, r7, r1
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	187b      	adds	r3, r7, r1
 8003040:	2200      	movs	r2, #0
 8003042:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003044:	187b      	adds	r3, r7, r1
 8003046:	4a06      	ldr	r2, [pc, #24]	; (8003060 <MX_GPIO_Init+0x110>)
 8003048:	0019      	movs	r1, r3
 800304a:	0010      	movs	r0, r2
 800304c:	f001 fdb2 	bl	8004bb4 <HAL_GPIO_Init>

}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b009      	add	sp, #36	; 0x24
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	50000400 	.word	0x50000400
 8003060:	50000800 	.word	0x50000800

08003064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
}
 800306a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800306c:	e7fe      	b.n	800306c <Error_Handler+0x8>

0800306e <new_smbus>:
#include "smbus.h"


SMBus *new_smbus(I2C_HandleTypeDef *hi2c) {
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
    SMBus *smbus = malloc(sizeof(SMBus));
 8003076:	2024      	movs	r0, #36	; 0x24
 8003078:	f005 f83c 	bl	80080f4 <malloc>
 800307c:	0003      	movs	r3, r0
 800307e:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	601a      	str	r2, [r3, #0]
    smbus->DMA = TRUE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2223      	movs	r2, #35	; 0x23
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3305      	adds	r3, #5
 8003092:	221e      	movs	r2, #30
 8003094:	2100      	movs	r1, #0
 8003096:	0018      	movs	r0, r3
 8003098:	f005 f83f 	bl	800811a <memset>

    return smbus;
 800309c:	68fb      	ldr	r3, [r7, #12]
}
 800309e:	0018      	movs	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b004      	add	sp, #16
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <disable_DMA>:

void disable_DMA(SMBus *smbus) {
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
    smbus->DMA = FALSE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2223      	movs	r2, #35	; 0x23
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]
}
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b002      	add	sp, #8
 80030bc:	bd80      	pop	{r7, pc}

080030be <read_word_data>:
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
    }
    _check_error(smbus);
}

long read_word_data(SMBus *smbus, uint8_t addr, char cmd) {
 80030be:	b580      	push	{r7, lr}
 80030c0:	b086      	sub	sp, #24
 80030c2:	af02      	add	r7, sp, #8
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	0008      	movs	r0, r1
 80030c8:	0011      	movs	r1, r2
 80030ca:	1cfb      	adds	r3, r7, #3
 80030cc:	1c02      	adds	r2, r0, #0
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	1cbb      	adds	r3, r7, #2
 80030d2:	1c0a      	adds	r2, r1, #0
 80030d4:	701a      	strb	r2, [r3, #0]
    smbus->buf[0] = cmd;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	1cba      	adds	r2, r7, #2
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	715a      	strb	r2, [r3, #5]
    if (!smbus->DMA) {
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2223      	movs	r2, #35	; 0x23
 80030e2:	5c9b      	ldrb	r3, [r3, r2]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d113      	bne.n	8003110 <read_word_data+0x52>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, HAL_MAX_DELAY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	1cfb      	adds	r3, r7, #3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	18db      	adds	r3, r3, r3
 80030f4:	b299      	uxth	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	1d5a      	adds	r2, r3, #5
 80030fa:	2301      	movs	r3, #1
 80030fc:	425b      	negs	r3, r3
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	2301      	movs	r3, #1
 8003102:	f001 ff6f 	bl	8004fe4 <HAL_I2C_Master_Transmit>
 8003106:	0003      	movs	r3, r0
 8003108:	001a      	movs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	711a      	strb	r2, [r3, #4]
 800310e:	e00f      	b.n	8003130 <read_word_data+0x72>
    }
    else {
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	1cfb      	adds	r3, r7, #3
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b29b      	uxth	r3, r3
 800311a:	18db      	adds	r3, r3, r3
 800311c:	b299      	uxth	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	1d5a      	adds	r2, r3, #5
 8003122:	2301      	movs	r3, #1
 8003124:	f002 f96e 	bl	8005404 <HAL_I2C_Master_Transmit_DMA>
 8003128:	0003      	movs	r3, r0
 800312a:	001a      	movs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	711a      	strb	r2, [r3, #4]
    }
    _check_error(smbus);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f000 f840 	bl	80031b8 <_check_error>

    //reads from address sent above
    if (!smbus->DMA){
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2223      	movs	r2, #35	; 0x23
 800313c:	5c9b      	ldrb	r3, [r3, r2]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <read_word_data+0xb2>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 2, HAL_MAX_DELAY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	1cfb      	adds	r3, r7, #3
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	b21b      	sxth	r3, r3
 800314e:	2201      	movs	r2, #1
 8003150:	4313      	orrs	r3, r2
 8003152:	b21b      	sxth	r3, r3
 8003154:	b299      	uxth	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1d5a      	adds	r2, r3, #5
 800315a:	2301      	movs	r3, #1
 800315c:	425b      	negs	r3, r3
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2302      	movs	r3, #2
 8003162:	f002 f847 	bl	80051f4 <HAL_I2C_Master_Receive>
 8003166:	0003      	movs	r3, r0
 8003168:	001a      	movs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	711a      	strb	r2, [r3, #4]
 800316e:	e012      	b.n	8003196 <read_word_data+0xd8>
    }
    else {
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	1cfb      	adds	r3, r7, #3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	b21b      	sxth	r3, r3
 800317c:	2201      	movs	r2, #1
 800317e:	4313      	orrs	r3, r2
 8003180:	b21b      	sxth	r3, r3
 8003182:	b299      	uxth	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1d5a      	adds	r2, r3, #5
 8003188:	2302      	movs	r3, #2
 800318a:	f002 fa41 	bl	8005610 <HAL_I2C_Master_Receive_DMA>
 800318e:	0003      	movs	r3, r0
 8003190:	001a      	movs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	711a      	strb	r2, [r3, #4]
    }
    _check_error(smbus);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 f80d 	bl	80031b8 <_check_error>

    long data = smbus->buf[0] | (smbus->buf[1] << 8);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	001a      	movs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	799b      	ldrb	r3, [r3, #6]
 80031a8:	021b      	lsls	r3, r3, #8
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
    return data;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b004      	add	sp, #16
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <_check_error>:
    }

    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    if (smbus->ret != HAL_OK) {
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	791b      	ldrb	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00d      	beq.n	80031e4 <_check_error+0x2c>
        strcpy((char*)smbus->buf, "Err \r\n");
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1d5a      	adds	r2, r3, #5
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <_check_error+0x38>)
 80031ce:	0010      	movs	r0, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	2307      	movs	r3, #7
 80031d4:	001a      	movs	r2, r3
 80031d6:	f004 ff97 	bl	8008108 <memcpy>

//        HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), HAL_MAX_DELAY);
        HAL_Delay(10);
 80031da:	200a      	movs	r0, #10
 80031dc:	f000 fb7e 	bl	80038dc <HAL_Delay>
        return FALSE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	e000      	b.n	80031e6 <_check_error+0x2e>
    }
    return TRUE;
 80031e4:	2301      	movs	r3, #1
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b002      	add	sp, #8
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	0800b090 	.word	0x0800b090

080031f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_MspInit+0x44>)
 80031fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <HAL_MspInit+0x44>)
 8003200:	2101      	movs	r1, #1
 8003202:	430a      	orrs	r2, r1
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_MspInit+0x44>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2201      	movs	r2, #1
 800320c:	4013      	ands	r3, r2
 800320e:	607b      	str	r3, [r7, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_MspInit+0x44>)
 8003214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <HAL_MspInit+0x44>)
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	0549      	lsls	r1, r1, #21
 800321c:	430a      	orrs	r2, r1
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_MspInit+0x44>)
 8003222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003224:	2380      	movs	r3, #128	; 0x80
 8003226:	055b      	lsls	r3, r3, #21
 8003228:	4013      	ands	r3, r2
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b002      	add	sp, #8
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	40021000 	.word	0x40021000

0800323c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b08b      	sub	sp, #44	; 0x2c
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	2414      	movs	r4, #20
 8003246:	193b      	adds	r3, r7, r4
 8003248:	0018      	movs	r0, r3
 800324a:	2314      	movs	r3, #20
 800324c:	001a      	movs	r2, r3
 800324e:	2100      	movs	r1, #0
 8003250:	f004 ff63 	bl	800811a <memset>
  if(hadc->Instance==ADC1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_ADC_MspInit+0x80>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d129      	bne.n	80032b2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_ADC_MspInit+0x84>)
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <HAL_ADC_MspInit+0x84>)
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0349      	lsls	r1, r1, #13
 8003268:	430a      	orrs	r2, r1
 800326a:	641a      	str	r2, [r3, #64]	; 0x40
 800326c:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_ADC_MspInit+0x84>)
 800326e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	035b      	lsls	r3, r3, #13
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_ADC_MspInit+0x84>)
 800327c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_ADC_MspInit+0x84>)
 8003280:	2101      	movs	r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	635a      	str	r2, [r3, #52]	; 0x34
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_ADC_MspInit+0x84>)
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	2201      	movs	r2, #1
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003292:	193b      	adds	r3, r7, r4
 8003294:	2202      	movs	r2, #2
 8003296:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003298:	193b      	adds	r3, r7, r4
 800329a:	2203      	movs	r2, #3
 800329c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	193b      	adds	r3, r7, r4
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	193a      	adds	r2, r7, r4
 80032a6:	23a0      	movs	r3, #160	; 0xa0
 80032a8:	05db      	lsls	r3, r3, #23
 80032aa:	0011      	movs	r1, r2
 80032ac:	0018      	movs	r0, r3
 80032ae:	f001 fc81 	bl	8004bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b00b      	add	sp, #44	; 0x2c
 80032b8:	bd90      	pop	{r4, r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	40012400 	.word	0x40012400
 80032c0:	40021000 	.word	0x40021000

080032c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b08d      	sub	sp, #52	; 0x34
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	241c      	movs	r4, #28
 80032ce:	193b      	adds	r3, r7, r4
 80032d0:	0018      	movs	r0, r3
 80032d2:	2314      	movs	r3, #20
 80032d4:	001a      	movs	r2, r3
 80032d6:	2100      	movs	r1, #0
 80032d8:	f004 ff1f 	bl	800811a <memset>
  if(hi2c->Instance==I2C1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a46      	ldr	r2, [pc, #280]	; (80033fc <HAL_I2C_MspInit+0x138>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d150      	bne.n	8003388 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 80032e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ea:	4b45      	ldr	r3, [pc, #276]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 80032ec:	2101      	movs	r1, #1
 80032ee:	430a      	orrs	r2, r1
 80032f0:	635a      	str	r2, [r3, #52]	; 0x34
 80032f2:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	2201      	movs	r2, #1
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
 80032fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fe:	4b40      	ldr	r3, [pc, #256]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 8003300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003302:	4b3f      	ldr	r3, [pc, #252]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 8003304:	2102      	movs	r1, #2
 8003306:	430a      	orrs	r2, r1
 8003308:	635a      	str	r2, [r3, #52]	; 0x34
 800330a:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 800330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = TEMP_SDA_Pin;
 8003316:	193b      	adds	r3, r7, r4
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	00d2      	lsls	r2, r2, #3
 800331c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800331e:	193b      	adds	r3, r7, r4
 8003320:	2212      	movs	r2, #18
 8003322:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	193b      	adds	r3, r7, r4
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(TEMP_SDA_GPIO_Port, &GPIO_InitStruct);
 8003330:	193a      	adds	r2, r7, r4
 8003332:	23a0      	movs	r3, #160	; 0xa0
 8003334:	05db      	lsls	r3, r3, #23
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f001 fc3b 	bl	8004bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP_SCL_Pin;
 800333e:	0021      	movs	r1, r4
 8003340:	187b      	adds	r3, r7, r1
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003346:	187b      	adds	r3, r7, r1
 8003348:	2212      	movs	r2, #18
 800334a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	187b      	adds	r3, r7, r1
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2200      	movs	r2, #0
 8003356:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003358:	187b      	adds	r3, r7, r1
 800335a:	2206      	movs	r2, #6
 800335c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TEMP_SCL_GPIO_Port, &GPIO_InitStruct);
 800335e:	187b      	adds	r3, r7, r1
 8003360:	4a28      	ldr	r2, [pc, #160]	; (8003404 <HAL_I2C_MspInit+0x140>)
 8003362:	0019      	movs	r1, r3
 8003364:	0010      	movs	r0, r2
 8003366:	f001 fc25 	bl	8004bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800336a:	4b25      	ldr	r3, [pc, #148]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 800336c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	0389      	lsls	r1, r1, #14
 8003374:	430a      	orrs	r2, r1
 8003376:	63da      	str	r2, [r3, #60]	; 0x3c
 8003378:	4b21      	ldr	r3, [pc, #132]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 800337a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	039b      	lsls	r3, r3, #14
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003386:	e035      	b.n	80033f4 <HAL_I2C_MspInit+0x130>
  else if(hi2c->Instance==I2C2)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a1e      	ldr	r2, [pc, #120]	; (8003408 <HAL_I2C_MspInit+0x144>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d130      	bne.n	80033f4 <HAL_I2C_MspInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 8003394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 8003398:	2102      	movs	r1, #2
 800339a:	430a      	orrs	r2, r1
 800339c:	635a      	str	r2, [r3, #52]	; 0x34
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 80033a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a2:	2202      	movs	r2, #2
 80033a4:	4013      	ands	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JETSON_SCL_Pin|JETSON_SDA_Pin;
 80033aa:	211c      	movs	r1, #28
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	22c0      	movs	r2, #192	; 0xc0
 80033b0:	0112      	lsls	r2, r2, #4
 80033b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	2212      	movs	r2, #18
 80033b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80033c6:	187b      	adds	r3, r7, r1
 80033c8:	2206      	movs	r2, #6
 80033ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	4a0d      	ldr	r2, [pc, #52]	; (8003404 <HAL_I2C_MspInit+0x140>)
 80033d0:	0019      	movs	r1, r3
 80033d2:	0010      	movs	r0, r2
 80033d4:	f001 fbee 	bl	8004bb4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 80033da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	03c9      	lsls	r1, r1, #15
 80033e2:	430a      	orrs	r2, r1
 80033e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <HAL_I2C_MspInit+0x13c>)
 80033e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ea:	2380      	movs	r3, #128	; 0x80
 80033ec:	03db      	lsls	r3, r3, #15
 80033ee:	4013      	ands	r3, r2
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b00d      	add	sp, #52	; 0x34
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	40005400 	.word	0x40005400
 8003400:	40021000 	.word	0x40021000
 8003404:	50000400 	.word	0x50000400
 8003408:	40005800 	.word	0x40005800

0800340c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003410:	e7fe      	b.n	8003410 <NMI_Handler+0x4>

08003412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003416:	e7fe      	b.n	8003416 <HardFault_Handler+0x4>

08003418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003430:	f000 fa38 	bl	80038a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	af00      	add	r7, sp, #0
	return 1;
 800343e:	2301      	movs	r3, #1
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <_kill>:

int _kill(int pid, int sig)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003450:	f004 fe26 	bl	80080a0 <__errno>
 8003454:	0003      	movs	r3, r0
 8003456:	2216      	movs	r2, #22
 8003458:	601a      	str	r2, [r3, #0]
	return -1;
 800345a:	2301      	movs	r3, #1
 800345c:	425b      	negs	r3, r3
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b002      	add	sp, #8
 8003464:	bd80      	pop	{r7, pc}

08003466 <_exit>:

void _exit (int status)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800346e:	2301      	movs	r3, #1
 8003470:	425a      	negs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	0011      	movs	r1, r2
 8003476:	0018      	movs	r0, r3
 8003478:	f7ff ffe5 	bl	8003446 <_kill>
	while (1) {}		/* Make sure we hang here */
 800347c:	e7fe      	b.n	800347c <_exit+0x16>

0800347e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e00a      	b.n	80034a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003490:	e000      	b.n	8003494 <_read+0x16>
 8003492:	bf00      	nop
 8003494:	0001      	movs	r1, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	60ba      	str	r2, [r7, #8]
 800349c:	b2ca      	uxtb	r2, r1
 800349e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	dbf0      	blt.n	8003490 <_read+0x12>
	}

return len;
 80034ae:	687b      	ldr	r3, [r7, #4]
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b006      	add	sp, #24
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	e009      	b.n	80034de <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	60ba      	str	r2, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	0018      	movs	r0, r3
 80034d4:	e000      	b.n	80034d8 <_write+0x20>
 80034d6:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	dbf1      	blt.n	80034ca <_write+0x12>
	}
	return len;
 80034e6:	687b      	ldr	r3, [r7, #4]
}
 80034e8:	0018      	movs	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b006      	add	sp, #24
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_close>:

int _close(int file)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	return -1;
 80034f8:	2301      	movs	r3, #1
 80034fa:	425b      	negs	r3, r3
}
 80034fc:	0018      	movs	r0, r3
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}

08003504 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	0192      	lsls	r2, r2, #6
 8003514:	605a      	str	r2, [r3, #4]
	return 0;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <_isatty>:

int _isatty(int file)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
	return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	b002      	add	sp, #8
 8003530:	bd80      	pop	{r7, pc}

08003532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	607a      	str	r2, [r7, #4]
	return 0;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}

08003548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <_sbrk+0x5c>)
 8003552:	4b15      	ldr	r3, [pc, #84]	; (80035a8 <_sbrk+0x60>)
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <_sbrk+0x64>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003564:	4b11      	ldr	r3, [pc, #68]	; (80035ac <_sbrk+0x64>)
 8003566:	4a12      	ldr	r2, [pc, #72]	; (80035b0 <_sbrk+0x68>)
 8003568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <_sbrk+0x64>)
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	18d3      	adds	r3, r2, r3
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	429a      	cmp	r2, r3
 8003576:	d207      	bcs.n	8003588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003578:	f004 fd92 	bl	80080a0 <__errno>
 800357c:	0003      	movs	r3, r0
 800357e:	220c      	movs	r2, #12
 8003580:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003582:	2301      	movs	r3, #1
 8003584:	425b      	negs	r3, r3
 8003586:	e009      	b.n	800359c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <_sbrk+0x64>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800358e:	4b07      	ldr	r3, [pc, #28]	; (80035ac <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	18d2      	adds	r2, r2, r3
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <_sbrk+0x64>)
 8003598:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800359a:	68fb      	ldr	r3, [r7, #12]
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b006      	add	sp, #24
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20004800 	.word	0x20004800
 80035a8:	00000400 	.word	0x00000400
 80035ac:	20000340 	.word	0x20000340
 80035b0:	20000358 	.word	0x20000358

080035b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <new_temperature_sensor>:
//
//
// All Public Functions

// EFFECTS: Create a new TemperatureSensor struct and returns pointer to struct.
TemperatureSensor* new_temperature_sensor(SMBus* _i2cBus, uint8_t A0, uint8_t A1, uint8_t A2){
 80035be:	b590      	push	{r4, r7, lr}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	000c      	movs	r4, r1
 80035c8:	0010      	movs	r0, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	1cfb      	adds	r3, r7, #3
 80035ce:	1c22      	adds	r2, r4, #0
 80035d0:	701a      	strb	r2, [r3, #0]
 80035d2:	1cbb      	adds	r3, r7, #2
 80035d4:	1c02      	adds	r2, r0, #0
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	1c7b      	adds	r3, r7, #1
 80035da:	1c0a      	adds	r2, r1, #0
 80035dc:	701a      	strb	r2, [r3, #0]

	// Create a new struct
	TemperatureSensor* _temperature_sensor = (TemperatureSensor*) malloc(sizeof(TemperatureSensor));
 80035de:	2008      	movs	r0, #8
 80035e0:	f004 fd88 	bl	80080f4 <malloc>
 80035e4:	0003      	movs	r3, r0
 80035e6:	60fb      	str	r3, [r7, #12]

	// Initialize the struct
	_temperature_sensor->address = 0b0011000;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2218      	movs	r2, #24
 80035ec:	601a      	str	r2, [r3, #0]
	if (A0) _temperature_sensor->address |= 0b001;
 80035ee:	1cfb      	adds	r3, r7, #3
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <new_temperature_sensor+0x44>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2201      	movs	r2, #1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	601a      	str	r2, [r3, #0]
	if (A1) _temperature_sensor->address |= 0b010;
 8003602:	1cbb      	adds	r3, r7, #2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <new_temperature_sensor+0x58>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2202      	movs	r2, #2
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	601a      	str	r2, [r3, #0]
	if (A2) _temperature_sensor->address |= 0b100;
 8003616:	1c7b      	adds	r3, r7, #1
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <new_temperature_sensor+0x6c>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2204      	movs	r2, #4
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	601a      	str	r2, [r3, #0]

	_temperature_sensor->i2cBus = _i2cBus;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	605a      	str	r2, [r3, #4]

	return _temperature_sensor;
 8003630:	68fb      	ldr	r3, [r7, #12]
}
 8003632:	0018      	movs	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	b005      	add	sp, #20
 8003638:	bd90      	pop	{r4, r7, pc}
	...

0800363c <get_temperature_data>:

// EFFECTS: Get temperature data from a temperature sensor in Celsius
float get_temperature_data(const TemperatureSensor* _temperature_sensor){
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]

	int specific_address = _temperature_sensor->address;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	61bb      	str	r3, [r7, #24]

	// rawData is the data for the ambient
	// 0b000000101 is 0x05
	float rawData = read_word_data(_temperature_sensor->i2cBus, specific_address, 0b000000101);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	b2d1      	uxtb	r1, r2
 8003652:	2205      	movs	r2, #5
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff fd32 	bl	80030be <read_word_data>
 800365a:	0003      	movs	r3, r0
 800365c:	0018      	movs	r0, r3
 800365e:	f7fd f97b 	bl	8000958 <__aeabi_i2f>
 8003662:	1c03      	adds	r3, r0, #0
 8003664:	617b      	str	r3, [r7, #20]

	float lower_byte = (int)rawData & 0xFF;; // original && 0000000...111111111
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7fd f956 	bl	8000918 <__aeabi_f2iz>
 800366c:	0003      	movs	r3, r0
 800366e:	22ff      	movs	r2, #255	; 0xff
 8003670:	4013      	ands	r3, r2
 8003672:	0018      	movs	r0, r3
 8003674:	f7fd f970 	bl	8000958 <__aeabi_i2f>
 8003678:	1c03      	adds	r3, r0, #0
 800367a:	613b      	str	r3, [r7, #16]
	float upper_byte = ((int)rawData & 0xFF00) >> 8;; // original bit shifted
 800367c:	6978      	ldr	r0, [r7, #20]
 800367e:	f7fd f94b 	bl	8000918 <__aeabi_f2iz>
 8003682:	0003      	movs	r3, r0
 8003684:	121b      	asrs	r3, r3, #8
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	4013      	ands	r3, r2
 800368a:	0018      	movs	r0, r3
 800368c:	f7fd f964 	bl	8000958 <__aeabi_i2f>
 8003690:	1c03      	adds	r3, r0, #0
 8003692:	60fb      	str	r3, [r7, #12]

	// Clear flag bits
	upper_byte = (int)upper_byte & 0x1F;
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7fd f93f 	bl	8000918 <__aeabi_f2iz>
 800369a:	0003      	movs	r3, r0
 800369c:	221f      	movs	r2, #31
 800369e:	4013      	ands	r3, r2
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fd f959 	bl	8000958 <__aeabi_i2f>
 80036a6:	1c03      	adds	r3, r0, #0
 80036a8:	60fb      	str	r3, [r7, #12]

	// If the sign bit is zero,
	// then the ambient temperature is greater than 0 celsius.
	// If the sign bit is one,
	// then the ambient temperature is less than 0 celsius.
	int sign_bit = ((int)upper_byte & 0x10) >> 4;
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f7fd f934 	bl	8000918 <__aeabi_f2iz>
 80036b0:	0003      	movs	r3, r0
 80036b2:	111b      	asrs	r3, r3, #4
 80036b4:	2201      	movs	r2, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]
	
	float actual_temperature = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
	if (sign_bit) {
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d031      	beq.n	8003728 <get_temperature_data+0xec>
		upper_byte = (int)upper_byte & 0x0F;
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7fd f927 	bl	8000918 <__aeabi_f2iz>
 80036ca:	0003      	movs	r3, r0
 80036cc:	220f      	movs	r2, #15
 80036ce:	4013      	ands	r3, r2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f7fd f941 	bl	8000958 <__aeabi_i2f>
 80036d6:	1c03      	adds	r3, r0, #0
 80036d8:	60fb      	str	r3, [r7, #12]
		actual_temperature = (float)256 - ((float)upper_byte * (float)16 + (1.0 / 16.0) * (float)lower_byte);
 80036da:	2183      	movs	r1, #131	; 0x83
 80036dc:	05c9      	lsls	r1, r1, #23
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7fc fff4 	bl	80006cc <__aeabi_fmul>
 80036e4:	1c03      	adds	r3, r0, #0
 80036e6:	1c18      	adds	r0, r3, #0
 80036e8:	f7fe ff6a 	bl	80025c0 <__aeabi_f2d>
 80036ec:	0004      	movs	r4, r0
 80036ee:	000d      	movs	r5, r1
 80036f0:	6938      	ldr	r0, [r7, #16]
 80036f2:	f7fe ff65 	bl	80025c0 <__aeabi_f2d>
 80036f6:	2200      	movs	r2, #0
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <get_temperature_data+0x138>)
 80036fa:	f7fe f8b9 	bl	8001870 <__aeabi_dmul>
 80036fe:	0002      	movs	r2, r0
 8003700:	000b      	movs	r3, r1
 8003702:	0020      	movs	r0, r4
 8003704:	0029      	movs	r1, r5
 8003706:	f7fd f975 	bl	80009f4 <__aeabi_dadd>
 800370a:	0002      	movs	r2, r0
 800370c:	000b      	movs	r3, r1
 800370e:	2000      	movs	r0, #0
 8003710:	4919      	ldr	r1, [pc, #100]	; (8003778 <get_temperature_data+0x13c>)
 8003712:	f7fe fb19 	bl	8001d48 <__aeabi_dsub>
 8003716:	0002      	movs	r2, r0
 8003718:	000b      	movs	r3, r1
 800371a:	0010      	movs	r0, r2
 800371c:	0019      	movs	r1, r3
 800371e:	f7fe ff97 	bl	8002650 <__aeabi_d2f>
 8003722:	1c03      	adds	r3, r0, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	e01f      	b.n	8003768 <get_temperature_data+0x12c>
	}
	else {
		actual_temperature = (float)upper_byte * (float)16 + (1.0 / 16.0) * (float)lower_byte;
 8003728:	2183      	movs	r1, #131	; 0x83
 800372a:	05c9      	lsls	r1, r1, #23
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7fc ffcd 	bl	80006cc <__aeabi_fmul>
 8003732:	1c03      	adds	r3, r0, #0
 8003734:	1c18      	adds	r0, r3, #0
 8003736:	f7fe ff43 	bl	80025c0 <__aeabi_f2d>
 800373a:	0004      	movs	r4, r0
 800373c:	000d      	movs	r5, r1
 800373e:	6938      	ldr	r0, [r7, #16]
 8003740:	f7fe ff3e 	bl	80025c0 <__aeabi_f2d>
 8003744:	2200      	movs	r2, #0
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <get_temperature_data+0x138>)
 8003748:	f7fe f892 	bl	8001870 <__aeabi_dmul>
 800374c:	0002      	movs	r2, r0
 800374e:	000b      	movs	r3, r1
 8003750:	0020      	movs	r0, r4
 8003752:	0029      	movs	r1, r5
 8003754:	f7fd f94e 	bl	80009f4 <__aeabi_dadd>
 8003758:	0002      	movs	r2, r0
 800375a:	000b      	movs	r3, r1
 800375c:	0010      	movs	r0, r2
 800375e:	0019      	movs	r1, r3
 8003760:	f7fe ff76 	bl	8002650 <__aeabi_d2f>
 8003764:	1c03      	adds	r3, r0, #0
 8003766:	61fb      	str	r3, [r7, #28]
	}
	return actual_temperature;
 8003768:	69fb      	ldr	r3, [r7, #28]
}
 800376a:	1c18      	adds	r0, r3, #0
 800376c:	46bd      	mov	sp, r7
 800376e:	b008      	add	sp, #32
 8003770:	bdb0      	pop	{r4, r5, r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	3fb00000 	.word	0x3fb00000
 8003778:	40700000 	.word	0x40700000

0800377c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800377c:	480d      	ldr	r0, [pc, #52]	; (80037b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800377e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003780:	f7ff ff18 	bl	80035b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003786:	490d      	ldr	r1, [pc, #52]	; (80037bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <LoopForever+0xe>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800378c:	e002      	b.n	8003794 <LoopCopyDataInit>

0800378e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800378e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003792:	3304      	adds	r3, #4

08003794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003798:	d3f9      	bcc.n	800378e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800379c:	4c0a      	ldr	r4, [pc, #40]	; (80037c8 <LoopForever+0x16>)
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a0:	e001      	b.n	80037a6 <LoopFillZerobss>

080037a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a4:	3204      	adds	r2, #4

080037a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a8:	d3fb      	bcc.n	80037a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037aa:	f004 fc7f 	bl	80080ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037ae:	f7ff f9d9 	bl	8002b64 <main>

080037b2 <LoopForever>:

LoopForever:
  b LoopForever
 80037b2:	e7fe      	b.n	80037b2 <LoopForever>
  ldr   r0, =_estack
 80037b4:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 80037b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80037c0:	0800b5fc 	.word	0x0800b5fc
  ldr r2, =_sbss
 80037c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80037c8:	20000358 	.word	0x20000358

080037cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC1_IRQHandler>
	...

080037d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037d6:	1dfb      	adds	r3, r7, #7
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_Init+0x3c>)
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <HAL_Init+0x3c>)
 80037e2:	2180      	movs	r1, #128	; 0x80
 80037e4:	0049      	lsls	r1, r1, #1
 80037e6:	430a      	orrs	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037ea:	2003      	movs	r0, #3
 80037ec:	f000 f810 	bl	8003810 <HAL_InitTick>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d003      	beq.n	80037fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80037f4:	1dfb      	adds	r3, r7, #7
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e001      	b.n	8003800 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80037fc:	f7ff fcfa 	bl	80031f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003800:	1dfb      	adds	r3, r7, #7
 8003802:	781b      	ldrb	r3, [r3, #0]
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b002      	add	sp, #8
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40022000 	.word	0x40022000

08003810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003818:	230f      	movs	r3, #15
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <HAL_InitTick+0x88>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02b      	beq.n	8003880 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003828:	4b1c      	ldr	r3, [pc, #112]	; (800389c <HAL_InitTick+0x8c>)
 800382a:	681c      	ldr	r4, [r3, #0]
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <HAL_InitTick+0x88>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	0019      	movs	r1, r3
 8003832:	23fa      	movs	r3, #250	; 0xfa
 8003834:	0098      	lsls	r0, r3, #2
 8003836:	f7fc fc7d 	bl	8000134 <__udivsi3>
 800383a:	0003      	movs	r3, r0
 800383c:	0019      	movs	r1, r3
 800383e:	0020      	movs	r0, r4
 8003840:	f7fc fc78 	bl	8000134 <__udivsi3>
 8003844:	0003      	movs	r3, r0
 8003846:	0018      	movs	r0, r3
 8003848:	f001 f86b 	bl	8004922 <HAL_SYSTICK_Config>
 800384c:	1e03      	subs	r3, r0, #0
 800384e:	d112      	bne.n	8003876 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d80a      	bhi.n	800386c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	2301      	movs	r3, #1
 800385a:	425b      	negs	r3, r3
 800385c:	2200      	movs	r2, #0
 800385e:	0018      	movs	r0, r3
 8003860:	f001 f84a 	bl	80048f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <HAL_InitTick+0x90>)
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e00d      	b.n	8003888 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800386c:	230f      	movs	r3, #15
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e008      	b.n	8003888 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003876:	230f      	movs	r3, #15
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	e003      	b.n	8003888 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003880:	230f      	movs	r3, #15
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003888:	230f      	movs	r3, #15
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	781b      	ldrb	r3, [r3, #0]
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b005      	add	sp, #20
 8003894:	bd90      	pop	{r4, r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	20000008 	.word	0x20000008
 800389c:	20000000 	.word	0x20000000
 80038a0:	20000004 	.word	0x20000004

080038a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_IncTick+0x1c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	001a      	movs	r2, r3
 80038ae:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <HAL_IncTick+0x20>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	18d2      	adds	r2, r2, r3
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_IncTick+0x20>)
 80038b6:	601a      	str	r2, [r3, #0]
}
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	20000008 	.word	0x20000008
 80038c4:	20000344 	.word	0x20000344

080038c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  return uwTick;
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <HAL_GetTick+0x10>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	46c0      	nop			; (mov r8, r8)
 80038d8:	20000344 	.word	0x20000344

080038dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7ff fff0 	bl	80038c8 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3301      	adds	r3, #1
 80038f4:	d005      	beq.n	8003902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <HAL_Delay+0x44>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	001a      	movs	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	189b      	adds	r3, r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	f7ff ffe0 	bl	80038c8 <HAL_GetTick>
 8003908:	0002      	movs	r2, r0
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	429a      	cmp	r2, r3
 8003912:	d8f7      	bhi.n	8003904 <HAL_Delay+0x28>
  {
  }
}
 8003914:	46c0      	nop			; (mov r8, r8)
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	46bd      	mov	sp, r7
 800391a:	b004      	add	sp, #16
 800391c:	bd80      	pop	{r7, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	20000008 	.word	0x20000008

08003924 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003934:	401a      	ands	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	601a      	str	r2, [r3, #0]
}
 800393e:	46c0      	nop			; (mov r8, r8)
 8003940:	46bd      	mov	sp, r7
 8003942:	b002      	add	sp, #8
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	fe3fffff 	.word	0xfe3fffff

0800394c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	23e0      	movs	r3, #224	; 0xe0
 800395a:	045b      	lsls	r3, r3, #17
 800395c:	4013      	ands	r3, r2
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b002      	add	sp, #8
 8003964:	bd80      	pop	{r7, pc}

08003966 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b084      	sub	sp, #16
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	2104      	movs	r1, #4
 800397a:	400a      	ands	r2, r1
 800397c:	2107      	movs	r1, #7
 800397e:	4091      	lsls	r1, r2
 8003980:	000a      	movs	r2, r1
 8003982:	43d2      	mvns	r2, r2
 8003984:	401a      	ands	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2104      	movs	r1, #4
 800398a:	400b      	ands	r3, r1
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4099      	lsls	r1, r3
 8003990:	000b      	movs	r3, r1
 8003992:	431a      	orrs	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b004      	add	sp, #16
 800399e:	bd80      	pop	{r7, pc}

080039a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	23c0      	movs	r3, #192	; 0xc0
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	4013      	ands	r3, r2
 80039b2:	d101      	bne.n	80039b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	211f      	movs	r1, #31
 80039d6:	400a      	ands	r2, r1
 80039d8:	210f      	movs	r1, #15
 80039da:	4091      	lsls	r1, r2
 80039dc:	000a      	movs	r2, r1
 80039de:	43d2      	mvns	r2, r2
 80039e0:	401a      	ands	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	0e9b      	lsrs	r3, r3, #26
 80039e6:	210f      	movs	r1, #15
 80039e8:	4019      	ands	r1, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	201f      	movs	r0, #31
 80039ee:	4003      	ands	r3, r0
 80039f0:	4099      	lsls	r1, r3
 80039f2:	000b      	movs	r3, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	035b      	lsls	r3, r3, #13
 8003a14:	0b5b      	lsrs	r3, r3, #13
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	0352      	lsls	r2, r2, #13
 8003a36:	0b52      	lsrs	r2, r2, #13
 8003a38:	43d2      	mvns	r2, r2
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b002      	add	sp, #8
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	0212      	lsls	r2, r2, #8
 8003a5c:	43d2      	mvns	r2, r2
 8003a5e:	401a      	ands	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	400b      	ands	r3, r1
 8003a68:	4904      	ldr	r1, [pc, #16]	; (8003a7c <LL_ADC_SetChannelSamplingTime+0x34>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b004      	add	sp, #16
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	07ffff00 	.word	0x07ffff00

08003a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	2280      	movs	r2, #128	; 0x80
 8003a92:	0552      	lsls	r2, r2, #21
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	6fffffe8 	.word	0x6fffffe8

08003aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	2380      	movs	r3, #128	; 0x80
 8003ab6:	055b      	lsls	r3, r3, #21
 8003ab8:	401a      	ands	r2, r3
 8003aba:	2380      	movs	r3, #128	; 0x80
 8003abc:	055b      	lsls	r3, r3, #21
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d101      	bne.n	8003ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b002      	add	sp, #8
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	4a04      	ldr	r2, [pc, #16]	; (8003af0 <LL_ADC_Enable+0x20>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	7fffffe8 	.word	0x7fffffe8

08003af4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <LL_ADC_Disable+0x20>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	2202      	movs	r2, #2
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	7fffffe8 	.word	0x7fffffe8

08003b18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2201      	movs	r2, #1
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <LL_ADC_IsEnabled+0x18>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <LL_ADC_IsEnabled+0x1a>
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b002      	add	sp, #8
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2202      	movs	r2, #2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d101      	bne.n	8003b52 <LL_ADC_IsDisableOngoing+0x18>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <LL_ADC_IsDisableOngoing+0x1a>
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <LL_ADC_REG_StartConversion+0x20>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2204      	movs	r2, #4
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	7fffffe8 	.word	0x7fffffe8

08003b80 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <LL_ADC_REG_StopConversion+0x20>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	2210      	movs	r2, #16
 8003b92:	431a      	orrs	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b002      	add	sp, #8
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	7fffffe8 	.word	0x7fffffe8

08003ba4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d101      	bne.n	8003bbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e000      	b.n	8003bbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd0:	231f      	movs	r3, #31
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e1b1      	b.n	8003f52 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10a      	bne.n	8003c0c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7ff fb1f 	bl	800323c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2254      	movs	r2, #84	; 0x54
 8003c08:	2100      	movs	r1, #0
 8003c0a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7ff ff49 	bl	8003aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8003c16:	1e03      	subs	r3, r0, #0
 8003c18:	d115      	bne.n	8003c46 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7ff ff2e 	bl	8003a80 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c24:	4bcd      	ldr	r3, [pc, #820]	; (8003f5c <HAL_ADC_Init+0x394>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	49cd      	ldr	r1, [pc, #820]	; (8003f60 <HAL_ADC_Init+0x398>)
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7fc fa82 	bl	8000134 <__udivsi3>
 8003c30:	0003      	movs	r3, r0
 8003c32:	3301      	adds	r3, #1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c38:	e002      	b.n	8003c40 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f9      	bne.n	8003c3a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7ff ff2c 	bl	8003aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8003c50:	1e03      	subs	r3, r0, #0
 8003c52:	d10f      	bne.n	8003c74 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	2210      	movs	r2, #16
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	2201      	movs	r2, #1
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c6c:	231f      	movs	r3, #31
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2201      	movs	r2, #1
 8003c72:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff ff93 	bl	8003ba4 <LL_ADC_REG_IsConversionOngoing>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	2210      	movs	r2, #16
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d000      	beq.n	8003c8e <HAL_ADC_Init+0xc6>
 8003c8c:	e154      	b.n	8003f38 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d000      	beq.n	8003c96 <HAL_ADC_Init+0xce>
 8003c94:	e150      	b.n	8003f38 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	4ab2      	ldr	r2, [pc, #712]	; (8003f64 <HAL_ADC_Init+0x39c>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f7ff ff34 	bl	8003b18 <LL_ADC_IsEnabled>
 8003cb0:	1e03      	subs	r3, r0, #0
 8003cb2:	d156      	bne.n	8003d62 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2218      	movs	r2, #24
 8003cbc:	4393      	bics	r3, r2
 8003cbe:	0019      	movs	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	0f9b      	lsrs	r3, r3, #30
 8003cd2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	223c      	movs	r2, #60	; 0x3c
 8003ce4:	5c9b      	ldrb	r3, [r3, r2]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d111      	bne.n	8003d0e <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	0f9b      	lsrs	r3, r3, #30
 8003cf0:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003cf6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003cfc:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003d02:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	2201      	movs	r2, #1
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	4a94      	ldr	r2, [pc, #592]	; (8003f68 <HAL_ADC_Init+0x3a0>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	23c0      	movs	r3, #192	; 0xc0
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d018      	beq.n	8003d62 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	05db      	lsls	r3, r3, #23
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d012      	beq.n	8003d62 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	061b      	lsls	r3, r3, #24
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d00c      	beq.n	8003d62 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003d48:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_ADC_Init+0x3a4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a88      	ldr	r2, [pc, #544]	; (8003f70 <HAL_ADC_Init+0x3a8>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	0019      	movs	r1, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	23f0      	movs	r3, #240	; 0xf0
 8003d58:	039b      	lsls	r3, r3, #14
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	4b83      	ldr	r3, [pc, #524]	; (8003f6c <HAL_ADC_Init+0x3a4>)
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	7e1b      	ldrb	r3, [r3, #24]
 8003d66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7e5b      	ldrb	r3, [r3, #25]
 8003d6c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003d6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7e9b      	ldrb	r3, [r3, #26]
 8003d74:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003d76:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_ADC_Init+0x1be>
 8003d80:	2380      	movs	r3, #128	; 0x80
 8003d82:	015b      	lsls	r3, r3, #5
 8003d84:	e000      	b.n	8003d88 <HAL_ADC_Init+0x1c0>
 8003d86:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003d88:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003d8e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da04      	bge.n	8003da2 <HAL_ADC_Init+0x1da>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	e001      	b.n	8003da6 <HAL_ADC_Init+0x1de>
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8003da6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	212c      	movs	r1, #44	; 0x2c
 8003dac:	5c5b      	ldrb	r3, [r3, r1]
 8003dae:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003db0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	5c9b      	ldrb	r3, [r3, r2]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d115      	bne.n	8003dee <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	7e9b      	ldrb	r3, [r3, #26]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2280      	movs	r2, #128	; 0x80
 8003dce:	0252      	lsls	r2, r2, #9
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	e00b      	b.n	8003dee <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	2220      	movs	r2, #32
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	2201      	movs	r2, #1
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dfa:	23e0      	movs	r3, #224	; 0xe0
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003e04:	4313      	orrs	r3, r2
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_ADC_Init+0x3ac>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	0019      	movs	r1, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	4a53      	ldr	r2, [pc, #332]	; (8003f78 <HAL_ADC_Init+0x3b0>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	0019      	movs	r1, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6818      	ldr	r0, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e40:	001a      	movs	r2, r3
 8003e42:	2100      	movs	r1, #0
 8003e44:	f7ff fd8f 	bl	8003966 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	494a      	ldr	r1, [pc, #296]	; (8003f7c <HAL_ADC_Init+0x3b4>)
 8003e52:	001a      	movs	r2, r3
 8003e54:	f7ff fd87 	bl	8003966 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	4249      	negs	r1, r1
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28
 8003e72:	e03a      	b.n	8003eea <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	039b      	lsls	r3, r3, #14
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d134      	bne.n	8003eea <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e00c      	b.n	8003ea0 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	40da      	lsrs	r2, r3
 8003e90:	0013      	movs	r3, r2
 8003e92:	220f      	movs	r2, #15
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b0f      	cmp	r3, #15
 8003e98:	d006      	beq.n	8003ea8 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b07      	cmp	r3, #7
 8003ea4:	d9ef      	bls.n	8003e86 <HAL_ADC_Init+0x2be>
 8003ea6:	e000      	b.n	8003eaa <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003ea8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d109      	bne.n	8003ec4 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2110      	movs	r1, #16
 8003ebc:	4249      	negs	r1, r1
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec2:	e012      	b.n	8003eea <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	221c      	movs	r2, #28
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	4252      	negs	r2, r2
 8003eda:	409a      	lsls	r2, r3
 8003edc:	0011      	movs	r1, r2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <HAL_ADC_Init+0x3b8>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d10b      	bne.n	8003f12 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	2203      	movs	r2, #3
 8003f06:	4393      	bics	r3, r2
 8003f08:	2201      	movs	r2, #1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f10:	e01c      	b.n	8003f4c <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	2212      	movs	r2, #18
 8003f18:	4393      	bics	r3, r2
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f26:	2201      	movs	r2, #1
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003f2e:	231f      	movs	r3, #31
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003f36:	e009      	b.n	8003f4c <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f44:	231f      	movs	r3, #31
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003f4c:	231f      	movs	r3, #31
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	781b      	ldrb	r3, [r3, #0]
}
 8003f52:	0018      	movs	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b008      	add	sp, #32
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	00030d40 	.word	0x00030d40
 8003f64:	fffffefd 	.word	0xfffffefd
 8003f68:	1ffffc02 	.word	0x1ffffc02
 8003f6c:	40012708 	.word	0x40012708
 8003f70:	ffc3ffff 	.word	0xffc3ffff
 8003f74:	fffe0219 	.word	0xfffe0219
 8003f78:	dffffc02 	.word	0xdffffc02
 8003f7c:	07ffff04 	.word	0x07ffff04
 8003f80:	833fffe7 	.word	0x833fffe7

08003f84 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003f84:	b5b0      	push	{r4, r5, r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7ff fe07 	bl	8003ba4 <LL_ADC_REG_IsConversionOngoing>
 8003f96:	1e03      	subs	r3, r0, #0
 8003f98:	d135      	bne.n	8004006 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2254      	movs	r2, #84	; 0x54
 8003f9e:	5c9b      	ldrb	r3, [r3, r2]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_ADC_Start+0x24>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e035      	b.n	8004014 <HAL_ADC_Start+0x90>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2254      	movs	r2, #84	; 0x54
 8003fac:	2101      	movs	r1, #1
 8003fae:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fb0:	250f      	movs	r5, #15
 8003fb2:	197c      	adds	r4, r7, r5
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 fb28 	bl	800460c <ADC_Enable>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fc0:	197b      	adds	r3, r7, r5
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d119      	bne.n	8003ffc <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <HAL_ADC_Start+0x98>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2280      	movs	r2, #128	; 0x80
 8003fd2:	0052      	lsls	r2, r2, #1
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	221c      	movs	r2, #28
 8003fe6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2254      	movs	r2, #84	; 0x54
 8003fec:	2100      	movs	r1, #0
 8003fee:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7ff fdb1 	bl	8003b5c <LL_ADC_REG_StartConversion>
 8003ffa:	e008      	b.n	800400e <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2254      	movs	r2, #84	; 0x54
 8004000:	2100      	movs	r1, #0
 8004002:	5499      	strb	r1, [r3, r2]
 8004004:	e003      	b.n	800400e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004006:	230f      	movs	r3, #15
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800400e:	230f      	movs	r3, #15
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	781b      	ldrb	r3, [r3, #0]
}
 8004014:	0018      	movs	r0, r3
 8004016:	46bd      	mov	sp, r7
 8004018:	b004      	add	sp, #16
 800401a:	bdb0      	pop	{r4, r5, r7, pc}
 800401c:	fffff0fe 	.word	0xfffff0fe

08004020 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004020:	b5b0      	push	{r4, r5, r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2254      	movs	r2, #84	; 0x54
 800402c:	5c9b      	ldrb	r3, [r3, r2]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d101      	bne.n	8004036 <HAL_ADC_Stop+0x16>
 8004032:	2302      	movs	r3, #2
 8004034:	e029      	b.n	800408a <HAL_ADC_Stop+0x6a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2254      	movs	r2, #84	; 0x54
 800403a:	2101      	movs	r1, #1
 800403c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800403e:	250f      	movs	r5, #15
 8004040:	197c      	adds	r4, r7, r5
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0018      	movs	r0, r3
 8004046:	f000 fa9f 	bl	8004588 <ADC_ConversionStop>
 800404a:	0003      	movs	r3, r0
 800404c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800404e:	197b      	adds	r3, r7, r5
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d112      	bne.n	800407c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004056:	197c      	adds	r4, r7, r5
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	0018      	movs	r0, r3
 800405c:	f000 fb5c 	bl	8004718 <ADC_Disable>
 8004060:	0003      	movs	r3, r0
 8004062:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004064:	197b      	adds	r3, r7, r5
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d107      	bne.n	800407c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	4a08      	ldr	r2, [pc, #32]	; (8004094 <HAL_ADC_Stop+0x74>)
 8004072:	4013      	ands	r3, r2
 8004074:	2201      	movs	r2, #1
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2254      	movs	r2, #84	; 0x54
 8004080:	2100      	movs	r1, #0
 8004082:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004084:	230f      	movs	r3, #15
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	781b      	ldrb	r3, [r3, #0]
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b004      	add	sp, #16
 8004090:	bdb0      	pop	{r4, r5, r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	fffffefe 	.word	0xfffffefe

08004098 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d102      	bne.n	80040b0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80040aa:	2308      	movs	r3, #8
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e00f      	b.n	80040d0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	4013      	ands	r3, r2
 80040ba:	d007      	beq.n	80040cc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	2220      	movs	r2, #32
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e072      	b.n	80041b2 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80040cc:	2304      	movs	r3, #4
 80040ce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80040d0:	f7ff fbfa 	bl	80038c8 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80040d8:	e01f      	b.n	800411a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	d01c      	beq.n	800411a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80040e0:	f7ff fbf2 	bl	80038c8 <HAL_GetTick>
 80040e4:	0002      	movs	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d302      	bcc.n	80040f6 <HAL_ADC_PollForConversion+0x5e>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d111      	bne.n	800411a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4013      	ands	r3, r2
 8004100:	d10b      	bne.n	800411a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004106:	2204      	movs	r2, #4
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2254      	movs	r2, #84	; 0x54
 8004112:	2100      	movs	r1, #0
 8004114:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e04b      	b.n	80041b2 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4013      	ands	r3, r2
 8004124:	d0d9      	beq.n	80040da <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	0092      	lsls	r2, r2, #2
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	0018      	movs	r0, r3
 800413a:	f7ff fc31 	bl	80039a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800413e:	1e03      	subs	r3, r0, #0
 8004140:	d02e      	beq.n	80041a0 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	7e9b      	ldrb	r3, [r3, #26]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12a      	bne.n	80041a0 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2208      	movs	r2, #8
 8004152:	4013      	ands	r3, r2
 8004154:	2b08      	cmp	r3, #8
 8004156:	d123      	bne.n	80041a0 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0018      	movs	r0, r3
 800415e:	f7ff fd21 	bl	8003ba4 <LL_ADC_REG_IsConversionOngoing>
 8004162:	1e03      	subs	r3, r0, #0
 8004164:	d110      	bne.n	8004188 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	210c      	movs	r1, #12
 8004172:	438a      	bics	r2, r1
 8004174:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_ADC_PollForConversion+0x124>)
 800417c:	4013      	ands	r3, r2
 800417e:	2201      	movs	r2, #1
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	659a      	str	r2, [r3, #88]	; 0x58
 8004186:	e00b      	b.n	80041a0 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	2220      	movs	r2, #32
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004198:	2201      	movs	r2, #1
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	7e1b      	ldrb	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d103      	bne.n	80041b0 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	220c      	movs	r2, #12
 80041ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b004      	add	sp, #16
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	fffffefe 	.word	0xfffffefe

080041c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80041ce:	0018      	movs	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b002      	add	sp, #8
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041e2:	2317      	movs	r3, #23
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2254      	movs	r2, #84	; 0x54
 80041f2:	5c9b      	ldrb	r3, [r3, r2]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x24>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e1c0      	b.n	800457e <HAL_ADC_ConfigChannel+0x3a6>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2254      	movs	r2, #84	; 0x54
 8004200:	2101      	movs	r1, #1
 8004202:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff fccb 	bl	8003ba4 <LL_ADC_REG_IsConversionOngoing>
 800420e:	1e03      	subs	r3, r0, #0
 8004210:	d000      	beq.n	8004214 <HAL_ADC_ConfigChannel+0x3c>
 8004212:	e1a3      	b.n	800455c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d100      	bne.n	800421e <HAL_ADC_ConfigChannel+0x46>
 800421c:	e143      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	429a      	cmp	r2, r3
 8004228:	d004      	beq.n	8004234 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800422e:	4ac1      	ldr	r2, [pc, #772]	; (8004534 <HAL_ADC_ConfigChannel+0x35c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0019      	movs	r1, r3
 800423e:	0010      	movs	r0, r2
 8004240:	f7ff fbdf 	bl	8003a02 <LL_ADC_REG_SetSequencerChAdd>
 8004244:	e0c9      	b.n	80043da <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	211f      	movs	r1, #31
 8004250:	400b      	ands	r3, r1
 8004252:	210f      	movs	r1, #15
 8004254:	4099      	lsls	r1, r3
 8004256:	000b      	movs	r3, r1
 8004258:	43db      	mvns	r3, r3
 800425a:	4013      	ands	r3, r2
 800425c:	0019      	movs	r1, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	035b      	lsls	r3, r3, #13
 8004264:	0b5b      	lsrs	r3, r3, #13
 8004266:	d105      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x9c>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0e9b      	lsrs	r3, r3, #26
 800426e:	221f      	movs	r2, #31
 8004270:	4013      	ands	r3, r2
 8004272:	e098      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2201      	movs	r2, #1
 800427a:	4013      	ands	r3, r2
 800427c:	d000      	beq.n	8004280 <HAL_ADC_ConfigChannel+0xa8>
 800427e:	e091      	b.n	80043a4 <HAL_ADC_ConfigChannel+0x1cc>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2202      	movs	r2, #2
 8004286:	4013      	ands	r3, r2
 8004288:	d000      	beq.n	800428c <HAL_ADC_ConfigChannel+0xb4>
 800428a:	e089      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x1c8>
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2204      	movs	r2, #4
 8004292:	4013      	ands	r3, r2
 8004294:	d000      	beq.n	8004298 <HAL_ADC_ConfigChannel+0xc0>
 8004296:	e081      	b.n	800439c <HAL_ADC_ConfigChannel+0x1c4>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2208      	movs	r2, #8
 800429e:	4013      	ands	r3, r2
 80042a0:	d000      	beq.n	80042a4 <HAL_ADC_ConfigChannel+0xcc>
 80042a2:	e079      	b.n	8004398 <HAL_ADC_ConfigChannel+0x1c0>
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2210      	movs	r2, #16
 80042aa:	4013      	ands	r3, r2
 80042ac:	d000      	beq.n	80042b0 <HAL_ADC_ConfigChannel+0xd8>
 80042ae:	e071      	b.n	8004394 <HAL_ADC_ConfigChannel+0x1bc>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2220      	movs	r2, #32
 80042b6:	4013      	ands	r3, r2
 80042b8:	d000      	beq.n	80042bc <HAL_ADC_ConfigChannel+0xe4>
 80042ba:	e069      	b.n	8004390 <HAL_ADC_ConfigChannel+0x1b8>
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2240      	movs	r2, #64	; 0x40
 80042c2:	4013      	ands	r3, r2
 80042c4:	d000      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0xf0>
 80042c6:	e061      	b.n	800438c <HAL_ADC_ConfigChannel+0x1b4>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	4013      	ands	r3, r2
 80042d0:	d000      	beq.n	80042d4 <HAL_ADC_ConfigChannel+0xfc>
 80042d2:	e059      	b.n	8004388 <HAL_ADC_ConfigChannel+0x1b0>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4013      	ands	r3, r2
 80042de:	d151      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x1ac>
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4013      	ands	r3, r2
 80042ea:	d149      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x1a8>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4013      	ands	r3, r2
 80042f6:	d141      	bne.n	800437c <HAL_ADC_ConfigChannel+0x1a4>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	2380      	movs	r3, #128	; 0x80
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	4013      	ands	r3, r2
 8004302:	d139      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x1a0>
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	015b      	lsls	r3, r3, #5
 800430c:	4013      	ands	r3, r2
 800430e:	d131      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x19c>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	019b      	lsls	r3, r3, #6
 8004318:	4013      	ands	r3, r2
 800431a:	d129      	bne.n	8004370 <HAL_ADC_ConfigChannel+0x198>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	01db      	lsls	r3, r3, #7
 8004324:	4013      	ands	r3, r2
 8004326:	d121      	bne.n	800436c <HAL_ADC_ConfigChannel+0x194>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	4013      	ands	r3, r2
 8004332:	d119      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x190>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	025b      	lsls	r3, r3, #9
 800433c:	4013      	ands	r3, r2
 800433e:	d111      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x18c>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	029b      	lsls	r3, r3, #10
 8004348:	4013      	ands	r3, r2
 800434a:	d109      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x188>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	2380      	movs	r3, #128	; 0x80
 8004352:	02db      	lsls	r3, r3, #11
 8004354:	4013      	ands	r3, r2
 8004356:	d001      	beq.n	800435c <HAL_ADC_ConfigChannel+0x184>
 8004358:	2312      	movs	r3, #18
 800435a:	e024      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 800435c:	2300      	movs	r3, #0
 800435e:	e022      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004360:	2311      	movs	r3, #17
 8004362:	e020      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004364:	2310      	movs	r3, #16
 8004366:	e01e      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004368:	230f      	movs	r3, #15
 800436a:	e01c      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 800436c:	230e      	movs	r3, #14
 800436e:	e01a      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004370:	230d      	movs	r3, #13
 8004372:	e018      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004374:	230c      	movs	r3, #12
 8004376:	e016      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004378:	230b      	movs	r3, #11
 800437a:	e014      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 800437c:	230a      	movs	r3, #10
 800437e:	e012      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004380:	2309      	movs	r3, #9
 8004382:	e010      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004384:	2308      	movs	r3, #8
 8004386:	e00e      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004388:	2307      	movs	r3, #7
 800438a:	e00c      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 800438c:	2306      	movs	r3, #6
 800438e:	e00a      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004390:	2305      	movs	r3, #5
 8004392:	e008      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004394:	2304      	movs	r3, #4
 8004396:	e006      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 8004398:	2303      	movs	r3, #3
 800439a:	e004      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 800439c:	2302      	movs	r3, #2
 800439e:	e002      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_ADC_ConfigChannel+0x1ce>
 80043a4:	2300      	movs	r3, #0
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	6852      	ldr	r2, [r2, #4]
 80043aa:	201f      	movs	r0, #31
 80043ac:	4002      	ands	r2, r0
 80043ae:	4093      	lsls	r3, r2
 80043b0:	000a      	movs	r2, r1
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d808      	bhi.n	80043da <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	001a      	movs	r2, r3
 80043d6:	f7ff faf4 	bl	80039c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6819      	ldr	r1, [r3, #0]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	001a      	movs	r2, r3
 80043e8:	f7ff fb2e 	bl	8003a48 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	db00      	blt.n	80043f6 <HAL_ADC_ConfigChannel+0x21e>
 80043f4:	e0bc      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043f6:	4b50      	ldr	r3, [pc, #320]	; (8004538 <HAL_ADC_ConfigChannel+0x360>)
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7ff faa7 	bl	800394c <LL_ADC_GetCommonPathInternalCh>
 80043fe:	0003      	movs	r3, r0
 8004400:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a4d      	ldr	r2, [pc, #308]	; (800453c <HAL_ADC_ConfigChannel+0x364>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d122      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	041b      	lsls	r3, r3, #16
 8004412:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004414:	d11d      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2280      	movs	r2, #128	; 0x80
 800441a:	0412      	lsls	r2, r2, #16
 800441c:	4313      	orrs	r3, r2
 800441e:	4a46      	ldr	r2, [pc, #280]	; (8004538 <HAL_ADC_ConfigChannel+0x360>)
 8004420:	0019      	movs	r1, r3
 8004422:	0010      	movs	r0, r2
 8004424:	f7ff fa7e 	bl	8003924 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004428:	4b45      	ldr	r3, [pc, #276]	; (8004540 <HAL_ADC_ConfigChannel+0x368>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4945      	ldr	r1, [pc, #276]	; (8004544 <HAL_ADC_ConfigChannel+0x36c>)
 800442e:	0018      	movs	r0, r3
 8004430:	f7fb fe80 	bl	8000134 <__udivsi3>
 8004434:	0003      	movs	r3, r0
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	0013      	movs	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	189b      	adds	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004442:	e002      	b.n	800444a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3b01      	subs	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f9      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004450:	e08e      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a3c      	ldr	r2, [pc, #240]	; (8004548 <HAL_ADC_ConfigChannel+0x370>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d10e      	bne.n	800447a <HAL_ADC_ConfigChannel+0x2a2>
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	045b      	lsls	r3, r3, #17
 8004462:	4013      	ands	r3, r2
 8004464:	d109      	bne.n	800447a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	2280      	movs	r2, #128	; 0x80
 800446a:	0452      	lsls	r2, r2, #17
 800446c:	4313      	orrs	r3, r2
 800446e:	4a32      	ldr	r2, [pc, #200]	; (8004538 <HAL_ADC_ConfigChannel+0x360>)
 8004470:	0019      	movs	r1, r3
 8004472:	0010      	movs	r0, r2
 8004474:	f7ff fa56 	bl	8003924 <LL_ADC_SetCommonPathInternalCh>
 8004478:	e07a      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a33      	ldr	r2, [pc, #204]	; (800454c <HAL_ADC_ConfigChannel+0x374>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d000      	beq.n	8004486 <HAL_ADC_ConfigChannel+0x2ae>
 8004484:	e074      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	03db      	lsls	r3, r3, #15
 800448c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800448e:	d000      	beq.n	8004492 <HAL_ADC_ConfigChannel+0x2ba>
 8004490:	e06e      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2280      	movs	r2, #128	; 0x80
 8004496:	03d2      	lsls	r2, r2, #15
 8004498:	4313      	orrs	r3, r2
 800449a:	4a27      	ldr	r2, [pc, #156]	; (8004538 <HAL_ADC_ConfigChannel+0x360>)
 800449c:	0019      	movs	r1, r3
 800449e:	0010      	movs	r0, r2
 80044a0:	f7ff fa40 	bl	8003924 <LL_ADC_SetCommonPathInternalCh>
 80044a4:	e064      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d004      	beq.n	80044bc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80044b6:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <HAL_ADC_ConfigChannel+0x35c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d107      	bne.n	80044cc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	0019      	movs	r1, r3
 80044c6:	0010      	movs	r0, r2
 80044c8:	f7ff faac 	bl	8003a24 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	da4d      	bge.n	8004570 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d4:	4b18      	ldr	r3, [pc, #96]	; (8004538 <HAL_ADC_ConfigChannel+0x360>)
 80044d6:	0018      	movs	r0, r3
 80044d8:	f7ff fa38 	bl	800394c <LL_ADC_GetCommonPathInternalCh>
 80044dc:	0003      	movs	r3, r0
 80044de:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a15      	ldr	r2, [pc, #84]	; (800453c <HAL_ADC_ConfigChannel+0x364>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d108      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_ADC_ConfigChannel+0x378>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	4a11      	ldr	r2, [pc, #68]	; (8004538 <HAL_ADC_ConfigChannel+0x360>)
 80044f2:	0019      	movs	r1, r3
 80044f4:	0010      	movs	r0, r2
 80044f6:	f7ff fa15 	bl	8003924 <LL_ADC_SetCommonPathInternalCh>
 80044fa:	e039      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a11      	ldr	r2, [pc, #68]	; (8004548 <HAL_ADC_ConfigChannel+0x370>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d108      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	4a12      	ldr	r2, [pc, #72]	; (8004554 <HAL_ADC_ConfigChannel+0x37c>)
 800450a:	4013      	ands	r3, r2
 800450c:	4a0a      	ldr	r2, [pc, #40]	; (8004538 <HAL_ADC_ConfigChannel+0x360>)
 800450e:	0019      	movs	r1, r3
 8004510:	0010      	movs	r0, r2
 8004512:	f7ff fa07 	bl	8003924 <LL_ADC_SetCommonPathInternalCh>
 8004516:	e02b      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a0b      	ldr	r2, [pc, #44]	; (800454c <HAL_ADC_ConfigChannel+0x374>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d126      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <HAL_ADC_ConfigChannel+0x380>)
 8004526:	4013      	ands	r3, r2
 8004528:	4a03      	ldr	r2, [pc, #12]	; (8004538 <HAL_ADC_ConfigChannel+0x360>)
 800452a:	0019      	movs	r1, r3
 800452c:	0010      	movs	r0, r2
 800452e:	f7ff f9f9 	bl	8003924 <LL_ADC_SetCommonPathInternalCh>
 8004532:	e01d      	b.n	8004570 <HAL_ADC_ConfigChannel+0x398>
 8004534:	80000004 	.word	0x80000004
 8004538:	40012708 	.word	0x40012708
 800453c:	b0001000 	.word	0xb0001000
 8004540:	20000000 	.word	0x20000000
 8004544:	00030d40 	.word	0x00030d40
 8004548:	b8004000 	.word	0xb8004000
 800454c:	b4002000 	.word	0xb4002000
 8004550:	ff7fffff 	.word	0xff7fffff
 8004554:	feffffff 	.word	0xfeffffff
 8004558:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	2220      	movs	r2, #32
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004568:	2317      	movs	r3, #23
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	2201      	movs	r2, #1
 800456e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2254      	movs	r2, #84	; 0x54
 8004574:	2100      	movs	r1, #0
 8004576:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004578:	2317      	movs	r3, #23
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
}
 800457e:	0018      	movs	r0, r3
 8004580:	46bd      	mov	sp, r7
 8004582:	b006      	add	sp, #24
 8004584:	bd80      	pop	{r7, pc}
 8004586:	46c0      	nop			; (mov r8, r8)

08004588 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	0018      	movs	r0, r3
 8004596:	f7ff fb05 	bl	8003ba4 <LL_ADC_REG_IsConversionOngoing>
 800459a:	1e03      	subs	r3, r0, #0
 800459c:	d031      	beq.n	8004602 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7ff fac9 	bl	8003b3a <LL_ADC_IsDisableOngoing>
 80045a8:	1e03      	subs	r3, r0, #0
 80045aa:	d104      	bne.n	80045b6 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7ff fae5 	bl	8003b80 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80045b6:	f7ff f987 	bl	80038c8 <HAL_GetTick>
 80045ba:	0003      	movs	r3, r0
 80045bc:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80045be:	e01a      	b.n	80045f6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80045c0:	f7ff f982 	bl	80038c8 <HAL_GetTick>
 80045c4:	0002      	movs	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d913      	bls.n	80045f6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2204      	movs	r2, #4
 80045d6:	4013      	ands	r3, r2
 80045d8:	d00d      	beq.n	80045f6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	2210      	movs	r2, #16
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	2201      	movs	r2, #1
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e006      	b.n	8004604 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2204      	movs	r2, #4
 80045fe:	4013      	ands	r3, r2
 8004600:	d1de      	bne.n	80045c0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	0018      	movs	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	b004      	add	sp, #16
 800460a:	bd80      	pop	{r7, pc}

0800460c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004614:	2300      	movs	r3, #0
 8004616:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0018      	movs	r0, r3
 800461e:	f7ff fa7b 	bl	8003b18 <LL_ADC_IsEnabled>
 8004622:	1e03      	subs	r3, r0, #0
 8004624:	d000      	beq.n	8004628 <ADC_Enable+0x1c>
 8004626:	e069      	b.n	80046fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	4a36      	ldr	r2, [pc, #216]	; (8004708 <ADC_Enable+0xfc>)
 8004630:	4013      	ands	r3, r2
 8004632:	d00d      	beq.n	8004650 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004638:	2210      	movs	r2, #16
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004644:	2201      	movs	r2, #1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e056      	b.n	80046fe <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0018      	movs	r0, r3
 8004656:	f7ff fa3b 	bl	8003ad0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800465a:	4b2c      	ldr	r3, [pc, #176]	; (800470c <ADC_Enable+0x100>)
 800465c:	0018      	movs	r0, r3
 800465e:	f7ff f975 	bl	800394c <LL_ADC_GetCommonPathInternalCh>
 8004662:	0002      	movs	r2, r0
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	041b      	lsls	r3, r3, #16
 8004668:	4013      	ands	r3, r2
 800466a:	d00f      	beq.n	800468c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800466c:	4b28      	ldr	r3, [pc, #160]	; (8004710 <ADC_Enable+0x104>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4928      	ldr	r1, [pc, #160]	; (8004714 <ADC_Enable+0x108>)
 8004672:	0018      	movs	r0, r3
 8004674:	f7fb fd5e 	bl	8000134 <__udivsi3>
 8004678:	0003      	movs	r3, r0
 800467a:	3301      	adds	r3, #1
 800467c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800467e:	e002      	b.n	8004686 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3b01      	subs	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f9      	bne.n	8004680 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	7e5b      	ldrb	r3, [r3, #25]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d033      	beq.n	80046fc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004694:	f7ff f918 	bl	80038c8 <HAL_GetTick>
 8004698:	0003      	movs	r3, r0
 800469a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800469c:	e027      	b.n	80046ee <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	0018      	movs	r0, r3
 80046a4:	f7ff fa38 	bl	8003b18 <LL_ADC_IsEnabled>
 80046a8:	1e03      	subs	r3, r0, #0
 80046aa:	d104      	bne.n	80046b6 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff fa0d 	bl	8003ad0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046b6:	f7ff f907 	bl	80038c8 <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d914      	bls.n	80046ee <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d00d      	beq.n	80046ee <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	2210      	movs	r2, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	2201      	movs	r2, #1
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e007      	b.n	80046fe <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2201      	movs	r2, #1
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d1d0      	bne.n	800469e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	0018      	movs	r0, r3
 8004700:	46bd      	mov	sp, r7
 8004702:	b004      	add	sp, #16
 8004704:	bd80      	pop	{r7, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	80000017 	.word	0x80000017
 800470c:	40012708 	.word	0x40012708
 8004710:	20000000 	.word	0x20000000
 8004714:	00030d40 	.word	0x00030d40

08004718 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	0018      	movs	r0, r3
 8004726:	f7ff fa08 	bl	8003b3a <LL_ADC_IsDisableOngoing>
 800472a:	0003      	movs	r3, r0
 800472c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	0018      	movs	r0, r3
 8004734:	f7ff f9f0 	bl	8003b18 <LL_ADC_IsEnabled>
 8004738:	1e03      	subs	r3, r0, #0
 800473a:	d046      	beq.n	80047ca <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d143      	bne.n	80047ca <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	2205      	movs	r2, #5
 800474a:	4013      	ands	r3, r2
 800474c:	2b01      	cmp	r3, #1
 800474e:	d10d      	bne.n	800476c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0018      	movs	r0, r3
 8004756:	f7ff f9cd 	bl	8003af4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2203      	movs	r2, #3
 8004760:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004762:	f7ff f8b1 	bl	80038c8 <HAL_GetTick>
 8004766:	0003      	movs	r3, r0
 8004768:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800476a:	e028      	b.n	80047be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	2210      	movs	r2, #16
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	2201      	movs	r2, #1
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e021      	b.n	80047cc <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004788:	f7ff f89e 	bl	80038c8 <HAL_GetTick>
 800478c:	0002      	movs	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d913      	bls.n	80047be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2201      	movs	r2, #1
 800479e:	4013      	ands	r3, r2
 80047a0:	d00d      	beq.n	80047be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	2210      	movs	r2, #16
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	2201      	movs	r2, #1
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e006      	b.n	80047cc <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	d1de      	bne.n	8004788 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b004      	add	sp, #16
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047d4:	b590      	push	{r4, r7, lr}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	0002      	movs	r2, r0
 80047dc:	6039      	str	r1, [r7, #0]
 80047de:	1dfb      	adds	r3, r7, #7
 80047e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	1dfb      	adds	r3, r7, #7
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b7f      	cmp	r3, #127	; 0x7f
 80047e8:	d828      	bhi.n	800483c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047ea:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <__NVIC_SetPriority+0xd4>)
 80047ec:	1dfb      	adds	r3, r7, #7
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	b25b      	sxtb	r3, r3
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	33c0      	adds	r3, #192	; 0xc0
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	589b      	ldr	r3, [r3, r2]
 80047fa:	1dfa      	adds	r2, r7, #7
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	0011      	movs	r1, r2
 8004800:	2203      	movs	r2, #3
 8004802:	400a      	ands	r2, r1
 8004804:	00d2      	lsls	r2, r2, #3
 8004806:	21ff      	movs	r1, #255	; 0xff
 8004808:	4091      	lsls	r1, r2
 800480a:	000a      	movs	r2, r1
 800480c:	43d2      	mvns	r2, r2
 800480e:	401a      	ands	r2, r3
 8004810:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	019b      	lsls	r3, r3, #6
 8004816:	22ff      	movs	r2, #255	; 0xff
 8004818:	401a      	ands	r2, r3
 800481a:	1dfb      	adds	r3, r7, #7
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	0018      	movs	r0, r3
 8004820:	2303      	movs	r3, #3
 8004822:	4003      	ands	r3, r0
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004828:	481f      	ldr	r0, [pc, #124]	; (80048a8 <__NVIC_SetPriority+0xd4>)
 800482a:	1dfb      	adds	r3, r7, #7
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	b25b      	sxtb	r3, r3
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	430a      	orrs	r2, r1
 8004834:	33c0      	adds	r3, #192	; 0xc0
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800483a:	e031      	b.n	80048a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800483c:	4a1b      	ldr	r2, [pc, #108]	; (80048ac <__NVIC_SetPriority+0xd8>)
 800483e:	1dfb      	adds	r3, r7, #7
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	0019      	movs	r1, r3
 8004844:	230f      	movs	r3, #15
 8004846:	400b      	ands	r3, r1
 8004848:	3b08      	subs	r3, #8
 800484a:	089b      	lsrs	r3, r3, #2
 800484c:	3306      	adds	r3, #6
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	18d3      	adds	r3, r2, r3
 8004852:	3304      	adds	r3, #4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	1dfa      	adds	r2, r7, #7
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	0011      	movs	r1, r2
 800485c:	2203      	movs	r2, #3
 800485e:	400a      	ands	r2, r1
 8004860:	00d2      	lsls	r2, r2, #3
 8004862:	21ff      	movs	r1, #255	; 0xff
 8004864:	4091      	lsls	r1, r2
 8004866:	000a      	movs	r2, r1
 8004868:	43d2      	mvns	r2, r2
 800486a:	401a      	ands	r2, r3
 800486c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	22ff      	movs	r2, #255	; 0xff
 8004874:	401a      	ands	r2, r3
 8004876:	1dfb      	adds	r3, r7, #7
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	0018      	movs	r0, r3
 800487c:	2303      	movs	r3, #3
 800487e:	4003      	ands	r3, r0
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004884:	4809      	ldr	r0, [pc, #36]	; (80048ac <__NVIC_SetPriority+0xd8>)
 8004886:	1dfb      	adds	r3, r7, #7
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	001c      	movs	r4, r3
 800488c:	230f      	movs	r3, #15
 800488e:	4023      	ands	r3, r4
 8004890:	3b08      	subs	r3, #8
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	430a      	orrs	r2, r1
 8004896:	3306      	adds	r3, #6
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	18c3      	adds	r3, r0, r3
 800489c:	3304      	adds	r3, #4
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	46c0      	nop			; (mov r8, r8)
 80048a2:	46bd      	mov	sp, r7
 80048a4:	b003      	add	sp, #12
 80048a6:	bd90      	pop	{r4, r7, pc}
 80048a8:	e000e100 	.word	0xe000e100
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1e5a      	subs	r2, r3, #1
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	045b      	lsls	r3, r3, #17
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d301      	bcc.n	80048c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048c4:	2301      	movs	r3, #1
 80048c6:	e010      	b.n	80048ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <SysTick_Config+0x44>)
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	3a01      	subs	r2, #1
 80048ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048d0:	2301      	movs	r3, #1
 80048d2:	425b      	negs	r3, r3
 80048d4:	2103      	movs	r1, #3
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7ff ff7c 	bl	80047d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <SysTick_Config+0x44>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <SysTick_Config+0x44>)
 80048e4:	2207      	movs	r2, #7
 80048e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	0018      	movs	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	b002      	add	sp, #8
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	46c0      	nop			; (mov r8, r8)
 80048f4:	e000e010 	.word	0xe000e010

080048f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	210f      	movs	r1, #15
 8004904:	187b      	adds	r3, r7, r1
 8004906:	1c02      	adds	r2, r0, #0
 8004908:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	187b      	adds	r3, r7, r1
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b25b      	sxtb	r3, r3
 8004912:	0011      	movs	r1, r2
 8004914:	0018      	movs	r0, r3
 8004916:	f7ff ff5d 	bl	80047d4 <__NVIC_SetPriority>
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b004      	add	sp, #16
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	0018      	movs	r0, r3
 800492e:	f7ff ffbf 	bl	80048b0 <SysTick_Config>
 8004932:	0003      	movs	r3, r0
}
 8004934:	0018      	movs	r0, r3
 8004936:	46bd      	mov	sp, r7
 8004938:	b002      	add	sp, #8
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2317      	movs	r3, #23
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2224      	movs	r2, #36	; 0x24
 8004956:	5c9b      	ldrb	r3, [r3, r2]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_DMA_Start_IT+0x24>
 800495c:	2302      	movs	r3, #2
 800495e:	e06f      	b.n	8004a40 <HAL_DMA_Start_IT+0x104>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2224      	movs	r2, #36	; 0x24
 8004964:	2101      	movs	r1, #1
 8004966:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2225      	movs	r2, #37	; 0x25
 800496c:	5c9b      	ldrb	r3, [r3, r2]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	d157      	bne.n	8004a24 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2225      	movs	r2, #37	; 0x25
 8004978:	2102      	movs	r1, #2
 800497a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2101      	movs	r1, #1
 800498e:	438a      	bics	r2, r1
 8004990:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f8cb 	bl	8004b34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	210e      	movs	r1, #14
 80049b2:	430a      	orrs	r2, r1
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	e00f      	b.n	80049d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2104      	movs	r1, #4
 80049c4:	438a      	bics	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	210a      	movs	r1, #10
 80049d4:	430a      	orrs	r2, r1
 80049d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	025b      	lsls	r3, r3, #9
 80049e2:	4013      	ands	r3, r2
 80049e4:	d008      	beq.n	80049f8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f0:	2180      	movs	r1, #128	; 0x80
 80049f2:	0049      	lsls	r1, r1, #1
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	0049      	lsls	r1, r1, #1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e00a      	b.n	8004a3a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2280      	movs	r2, #128	; 0x80
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2224      	movs	r2, #36	; 0x24
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004a32:	2317      	movs	r3, #23
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	2201      	movs	r2, #1
 8004a38:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004a3a:	2317      	movs	r3, #23
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	781b      	ldrb	r3, [r3, #0]
}
 8004a40:	0018      	movs	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	b006      	add	sp, #24
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a50:	210f      	movs	r1, #15
 8004a52:	187b      	adds	r3, r7, r1
 8004a54:	2200      	movs	r2, #0
 8004a56:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2225      	movs	r2, #37	; 0x25
 8004a5c:	5c9b      	ldrb	r3, [r3, r2]
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d006      	beq.n	8004a72 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2204      	movs	r2, #4
 8004a68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a6a:	187b      	adds	r3, r7, r1
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	e049      	b.n	8004b06 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	210e      	movs	r1, #14
 8004a7e:	438a      	bics	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	438a      	bics	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	491d      	ldr	r1, [pc, #116]	; (8004b14 <HAL_DMA_Abort_IT+0xcc>)
 8004a9e:	400a      	ands	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <HAL_DMA_Abort_IT+0xd0>)
 8004aa4:	6859      	ldr	r1, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aaa:	221c      	movs	r2, #28
 8004aac:	4013      	ands	r3, r2
 8004aae:	2201      	movs	r2, #1
 8004ab0:	409a      	lsls	r2, r3
 8004ab2:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <HAL_DMA_Abort_IT+0xd0>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ac0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad4:	490f      	ldr	r1, [pc, #60]	; (8004b14 <HAL_DMA_Abort_IT+0xcc>)
 8004ad6:	400a      	ands	r2, r1
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004ae2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2225      	movs	r2, #37	; 0x25
 8004ae8:	2101      	movs	r1, #1
 8004aea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	2100      	movs	r1, #0
 8004af2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	0010      	movs	r0, r2
 8004b04:	4798      	blx	r3
    }
  }
  return status;
 8004b06:	230f      	movs	r3, #15
 8004b08:	18fb      	adds	r3, r7, r3
 8004b0a:	781b      	ldrb	r3, [r3, #0]
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b004      	add	sp, #16
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	fffffeff 	.word	0xfffffeff
 8004b18:	40020000 	.word	0x40020000

08004b1c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2225      	movs	r2, #37	; 0x25
 8004b28:	5c9b      	ldrb	r3, [r3, r2]
 8004b2a:	b2db      	uxtb	r3, r3
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004b5c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004b5e:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <DMA_SetConfig+0x7c>)
 8004b60:	6859      	ldr	r1, [r3, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	221c      	movs	r2, #28
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <DMA_SetConfig+0x7c>)
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b10      	cmp	r3, #16
 8004b82:	d108      	bne.n	8004b96 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004b94:	e007      	b.n	8004ba6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	60da      	str	r2, [r3, #12]
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b004      	add	sp, #16
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			; (mov r8, r8)
 8004bb0:	40020000 	.word	0x40020000

08004bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bc2:	e147      	b.n	8004e54 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2101      	movs	r1, #1
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4091      	lsls	r1, r2
 8004bce:	000a      	movs	r2, r1
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d100      	bne.n	8004bdc <HAL_GPIO_Init+0x28>
 8004bda:	e138      	b.n	8004e4e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2203      	movs	r2, #3
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d005      	beq.n	8004bf4 <HAL_GPIO_Init+0x40>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2203      	movs	r2, #3
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d130      	bne.n	8004c56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	2203      	movs	r2, #3
 8004c00:	409a      	lsls	r2, r3
 8004c02:	0013      	movs	r3, r2
 8004c04:	43da      	mvns	r2, r3
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	409a      	lsls	r2, r3
 8004c16:	0013      	movs	r3, r2
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	0013      	movs	r3, r2
 8004c32:	43da      	mvns	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	2201      	movs	r2, #1
 8004c42:	401a      	ands	r2, r3
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	409a      	lsls	r2, r3
 8004c48:	0013      	movs	r3, r2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2203      	movs	r2, #3
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d017      	beq.n	8004c92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	409a      	lsls	r2, r3
 8004c70:	0013      	movs	r3, r2
 8004c72:	43da      	mvns	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	4013      	ands	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	409a      	lsls	r2, r3
 8004c84:	0013      	movs	r3, r2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	2203      	movs	r2, #3
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d123      	bne.n	8004ce6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	08da      	lsrs	r2, r3, #3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3208      	adds	r2, #8
 8004ca6:	0092      	lsls	r2, r2, #2
 8004ca8:	58d3      	ldr	r3, [r2, r3]
 8004caa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2207      	movs	r2, #7
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	220f      	movs	r2, #15
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	0013      	movs	r3, r2
 8004cba:	43da      	mvns	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2107      	movs	r1, #7
 8004cca:	400b      	ands	r3, r1
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	409a      	lsls	r2, r3
 8004cd0:	0013      	movs	r3, r2
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	08da      	lsrs	r2, r3, #3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3208      	adds	r2, #8
 8004ce0:	0092      	lsls	r2, r2, #2
 8004ce2:	6939      	ldr	r1, [r7, #16]
 8004ce4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	409a      	lsls	r2, r3
 8004cf4:	0013      	movs	r3, r2
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2203      	movs	r2, #3
 8004d04:	401a      	ands	r2, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	0013      	movs	r3, r2
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	23c0      	movs	r3, #192	; 0xc0
 8004d20:	029b      	lsls	r3, r3, #10
 8004d22:	4013      	ands	r3, r2
 8004d24:	d100      	bne.n	8004d28 <HAL_GPIO_Init+0x174>
 8004d26:	e092      	b.n	8004e4e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004d28:	4a50      	ldr	r2, [pc, #320]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	089b      	lsrs	r3, r3, #2
 8004d2e:	3318      	adds	r3, #24
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	589b      	ldr	r3, [r3, r2]
 8004d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	220f      	movs	r2, #15
 8004d40:	409a      	lsls	r2, r3
 8004d42:	0013      	movs	r3, r2
 8004d44:	43da      	mvns	r2, r3
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	23a0      	movs	r3, #160	; 0xa0
 8004d50:	05db      	lsls	r3, r3, #23
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d013      	beq.n	8004d7e <HAL_GPIO_Init+0x1ca>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a45      	ldr	r2, [pc, #276]	; (8004e70 <HAL_GPIO_Init+0x2bc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00d      	beq.n	8004d7a <HAL_GPIO_Init+0x1c6>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a44      	ldr	r2, [pc, #272]	; (8004e74 <HAL_GPIO_Init+0x2c0>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <HAL_GPIO_Init+0x1c2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a43      	ldr	r2, [pc, #268]	; (8004e78 <HAL_GPIO_Init+0x2c4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <HAL_GPIO_Init+0x1be>
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e006      	b.n	8004d80 <HAL_GPIO_Init+0x1cc>
 8004d72:	2305      	movs	r3, #5
 8004d74:	e004      	b.n	8004d80 <HAL_GPIO_Init+0x1cc>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e002      	b.n	8004d80 <HAL_GPIO_Init+0x1cc>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <HAL_GPIO_Init+0x1cc>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	2103      	movs	r1, #3
 8004d84:	400a      	ands	r2, r1
 8004d86:	00d2      	lsls	r2, r2, #3
 8004d88:	4093      	lsls	r3, r2
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004d90:	4936      	ldr	r1, [pc, #216]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	089b      	lsrs	r3, r3, #2
 8004d96:	3318      	adds	r3, #24
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004d9e:	4a33      	ldr	r2, [pc, #204]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004da0:	2380      	movs	r3, #128	; 0x80
 8004da2:	58d3      	ldr	r3, [r2, r3]
 8004da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	43da      	mvns	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	025b      	lsls	r3, r3, #9
 8004db8:	4013      	ands	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dc4:	4929      	ldr	r1, [pc, #164]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004dc6:	2280      	movs	r2, #128	; 0x80
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004dce:	2384      	movs	r3, #132	; 0x84
 8004dd0:	58d3      	ldr	r3, [r2, r3]
 8004dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	43da      	mvns	r2, r3
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	029b      	lsls	r3, r3, #10
 8004de6:	4013      	ands	r3, r2
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004df2:	491e      	ldr	r1, [pc, #120]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004df4:	2284      	movs	r2, #132	; 0x84
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	43da      	mvns	r2, r3
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	035b      	lsls	r3, r3, #13
 8004e12:	4013      	ands	r3, r2
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e1e:	4b13      	ldr	r3, [pc, #76]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004e24:	4b11      	ldr	r3, [pc, #68]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	43da      	mvns	r2, r3
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4013      	ands	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	039b      	lsls	r3, r3, #14
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e48:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <HAL_GPIO_Init+0x2b8>)
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	3301      	adds	r3, #1
 8004e52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	40da      	lsrs	r2, r3
 8004e5c:	1e13      	subs	r3, r2, #0
 8004e5e:	d000      	beq.n	8004e62 <HAL_GPIO_Init+0x2ae>
 8004e60:	e6b0      	b.n	8004bc4 <HAL_GPIO_Init+0x10>
  }
}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b006      	add	sp, #24
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40021800 	.word	0x40021800
 8004e70:	50000400 	.word	0x50000400
 8004e74:	50000800 	.word	0x50000800
 8004e78:	50000c00 	.word	0x50000c00

08004e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	0008      	movs	r0, r1
 8004e86:	0011      	movs	r1, r2
 8004e88:	1cbb      	adds	r3, r7, #2
 8004e8a:	1c02      	adds	r2, r0, #0
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	1c7b      	adds	r3, r7, #1
 8004e90:	1c0a      	adds	r2, r1, #0
 8004e92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e94:	1c7b      	adds	r3, r7, #1
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d004      	beq.n	8004ea6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e9c:	1cbb      	adds	r3, r7, #2
 8004e9e:	881a      	ldrh	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ea4:	e003      	b.n	8004eae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ea6:	1cbb      	adds	r3, r7, #2
 8004ea8:	881a      	ldrh	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b002      	add	sp, #8
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e082      	b.n	8004fd0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2241      	movs	r2, #65	; 0x41
 8004ece:	5c9b      	ldrb	r3, [r3, r2]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d107      	bne.n	8004ee6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2240      	movs	r2, #64	; 0x40
 8004eda:	2100      	movs	r1, #0
 8004edc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f7fe f9ef 	bl	80032c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2241      	movs	r2, #65	; 0x41
 8004eea:	2124      	movs	r1, #36	; 0x24
 8004eec:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2101      	movs	r1, #1
 8004efa:	438a      	bics	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4934      	ldr	r1, [pc, #208]	; (8004fd8 <HAL_I2C_Init+0x120>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4931      	ldr	r1, [pc, #196]	; (8004fdc <HAL_I2C_Init+0x124>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d108      	bne.n	8004f36 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2180      	movs	r1, #128	; 0x80
 8004f2e:	0209      	lsls	r1, r1, #8
 8004f30:	430a      	orrs	r2, r1
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	e007      	b.n	8004f46 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2184      	movs	r1, #132	; 0x84
 8004f40:	0209      	lsls	r1, r1, #8
 8004f42:	430a      	orrs	r2, r1
 8004f44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d104      	bne.n	8004f58 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	0112      	lsls	r2, r2, #4
 8004f56:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	491f      	ldr	r1, [pc, #124]	; (8004fe0 <HAL_I2C_Init+0x128>)
 8004f64:	430a      	orrs	r2, r1
 8004f66:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	491a      	ldr	r1, [pc, #104]	; (8004fdc <HAL_I2C_Init+0x124>)
 8004f74:	400a      	ands	r2, r1
 8004f76:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69d9      	ldr	r1, [r3, #28]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1a      	ldr	r2, [r3, #32]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2101      	movs	r1, #1
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2241      	movs	r2, #65	; 0x41
 8004fbc:	2120      	movs	r1, #32
 8004fbe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2242      	movs	r2, #66	; 0x42
 8004fca:	2100      	movs	r1, #0
 8004fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	b002      	add	sp, #8
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	f0ffffff 	.word	0xf0ffffff
 8004fdc:	ffff7fff 	.word	0xffff7fff
 8004fe0:	02008000 	.word	0x02008000

08004fe4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b089      	sub	sp, #36	; 0x24
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	0008      	movs	r0, r1
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	230a      	movs	r3, #10
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	1c02      	adds	r2, r0, #0
 8004ff8:	801a      	strh	r2, [r3, #0]
 8004ffa:	2308      	movs	r3, #8
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	1c0a      	adds	r2, r1, #0
 8005000:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2241      	movs	r2, #65	; 0x41
 8005006:	5c9b      	ldrb	r3, [r3, r2]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	d000      	beq.n	8005010 <HAL_I2C_Master_Transmit+0x2c>
 800500e:	e0e7      	b.n	80051e0 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	5c9b      	ldrb	r3, [r3, r2]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_I2C_Master_Transmit+0x3a>
 800501a:	2302      	movs	r3, #2
 800501c:	e0e1      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1fe>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2240      	movs	r2, #64	; 0x40
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005026:	f7fe fc4f 	bl	80038c8 <HAL_GetTick>
 800502a:	0003      	movs	r3, r0
 800502c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	0219      	lsls	r1, r3, #8
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	2319      	movs	r3, #25
 800503a:	2201      	movs	r2, #1
 800503c:	f001 fef0 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8005040:	1e03      	subs	r3, r0, #0
 8005042:	d001      	beq.n	8005048 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0cc      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2241      	movs	r2, #65	; 0x41
 800504c:	2121      	movs	r1, #33	; 0x21
 800504e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2242      	movs	r2, #66	; 0x42
 8005054:	2110      	movs	r1, #16
 8005056:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2208      	movs	r2, #8
 8005068:	18ba      	adds	r2, r7, r2
 800506a:	8812      	ldrh	r2, [r2, #0]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	2bff      	cmp	r3, #255	; 0xff
 800507c:	d911      	bls.n	80050a2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	22ff      	movs	r2, #255	; 0xff
 8005082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	b2da      	uxtb	r2, r3
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	045c      	lsls	r4, r3, #17
 800508e:	230a      	movs	r3, #10
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	8819      	ldrh	r1, [r3, #0]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	4b55      	ldr	r3, [pc, #340]	; (80051ec <HAL_I2C_Master_Transmit+0x208>)
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	0023      	movs	r3, r4
 800509c:	f002 f860 	bl	8007160 <I2C_TransferConfig>
 80050a0:	e075      	b.n	800518e <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	2380      	movs	r3, #128	; 0x80
 80050b4:	049c      	lsls	r4, r3, #18
 80050b6:	230a      	movs	r3, #10
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	8819      	ldrh	r1, [r3, #0]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	4b4b      	ldr	r3, [pc, #300]	; (80051ec <HAL_I2C_Master_Transmit+0x208>)
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	0023      	movs	r3, r4
 80050c4:	f002 f84c 	bl	8007160 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80050c8:	e061      	b.n	800518e <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	0018      	movs	r0, r3
 80050d2:	f001 fee4 	bl	8006e9e <I2C_WaitOnTXISFlagUntilTimeout>
 80050d6:	1e03      	subs	r3, r0, #0
 80050d8:	d001      	beq.n	80050de <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e081      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	781a      	ldrb	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d03a      	beq.n	800518e <HAL_I2C_Master_Transmit+0x1aa>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511c:	2b00      	cmp	r3, #0
 800511e:	d136      	bne.n	800518e <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	0013      	movs	r3, r2
 800512a:	2200      	movs	r2, #0
 800512c:	2180      	movs	r1, #128	; 0x80
 800512e:	f001 fe77 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8005132:	1e03      	subs	r3, r0, #0
 8005134:	d001      	beq.n	800513a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e053      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513e:	b29b      	uxth	r3, r3
 8005140:	2bff      	cmp	r3, #255	; 0xff
 8005142:	d911      	bls.n	8005168 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	22ff      	movs	r2, #255	; 0xff
 8005148:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	b2da      	uxtb	r2, r3
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	045c      	lsls	r4, r3, #17
 8005154:	230a      	movs	r3, #10
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	8819      	ldrh	r1, [r3, #0]
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	2300      	movs	r3, #0
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	0023      	movs	r3, r4
 8005162:	f001 fffd 	bl	8007160 <I2C_TransferConfig>
 8005166:	e012      	b.n	800518e <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005176:	b2da      	uxtb	r2, r3
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	049c      	lsls	r4, r3, #18
 800517c:	230a      	movs	r3, #10
 800517e:	18fb      	adds	r3, r7, r3
 8005180:	8819      	ldrh	r1, [r3, #0]
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	2300      	movs	r3, #0
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	0023      	movs	r3, r4
 800518a:	f001 ffe9 	bl	8007160 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	2b00      	cmp	r3, #0
 8005196:	d198      	bne.n	80050ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	0018      	movs	r0, r3
 80051a0:	f001 febc 	bl	8006f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80051a4:	1e03      	subs	r3, r0, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e01a      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2220      	movs	r2, #32
 80051b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	490c      	ldr	r1, [pc, #48]	; (80051f0 <HAL_I2C_Master_Transmit+0x20c>)
 80051c0:	400a      	ands	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2241      	movs	r2, #65	; 0x41
 80051c8:	2120      	movs	r1, #32
 80051ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2242      	movs	r2, #66	; 0x42
 80051d0:	2100      	movs	r1, #0
 80051d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2240      	movs	r2, #64	; 0x40
 80051d8:	2100      	movs	r1, #0
 80051da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	e000      	b.n	80051e2 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80051e0:	2302      	movs	r3, #2
  }
}
 80051e2:	0018      	movs	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b007      	add	sp, #28
 80051e8:	bd90      	pop	{r4, r7, pc}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	80002000 	.word	0x80002000
 80051f0:	fe00e800 	.word	0xfe00e800

080051f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size, uint32_t Timeout)
{
 80051f4:	b590      	push	{r4, r7, lr}
 80051f6:	b089      	sub	sp, #36	; 0x24
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	0008      	movs	r0, r1
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	0019      	movs	r1, r3
 8005202:	230a      	movs	r3, #10
 8005204:	18fb      	adds	r3, r7, r3
 8005206:	1c02      	adds	r2, r0, #0
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	2308      	movs	r3, #8
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	1c0a      	adds	r2, r1, #0
 8005210:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2241      	movs	r2, #65	; 0x41
 8005216:	5c9b      	ldrb	r3, [r3, r2]
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b20      	cmp	r3, #32
 800521c:	d000      	beq.n	8005220 <HAL_I2C_Master_Receive+0x2c>
 800521e:	e0e8      	b.n	80053f2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2240      	movs	r2, #64	; 0x40
 8005224:	5c9b      	ldrb	r3, [r3, r2]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_I2C_Master_Receive+0x3a>
 800522a:	2302      	movs	r3, #2
 800522c:	e0e2      	b.n	80053f4 <HAL_I2C_Master_Receive+0x200>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2240      	movs	r2, #64	; 0x40
 8005232:	2101      	movs	r1, #1
 8005234:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005236:	f7fe fb47 	bl	80038c8 <HAL_GetTick>
 800523a:	0003      	movs	r3, r0
 800523c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	0219      	lsls	r1, r3, #8
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	2319      	movs	r3, #25
 800524a:	2201      	movs	r2, #1
 800524c:	f001 fde8 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8005250:	1e03      	subs	r3, r0, #0
 8005252:	d001      	beq.n	8005258 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0cd      	b.n	80053f4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2241      	movs	r2, #65	; 0x41
 800525c:	2122      	movs	r1, #34	; 0x22
 800525e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2242      	movs	r2, #66	; 0x42
 8005264:	2110      	movs	r1, #16
 8005266:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2208      	movs	r2, #8
 8005278:	18ba      	adds	r2, r7, r2
 800527a:	8812      	ldrh	r2, [r2, #0]
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	2bff      	cmp	r3, #255	; 0xff
 800528c:	d911      	bls.n	80052b2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	22ff      	movs	r2, #255	; 0xff
 8005292:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005298:	b2da      	uxtb	r2, r3
 800529a:	2380      	movs	r3, #128	; 0x80
 800529c:	045c      	lsls	r4, r3, #17
 800529e:	230a      	movs	r3, #10
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	8819      	ldrh	r1, [r3, #0]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	4b55      	ldr	r3, [pc, #340]	; (80053fc <HAL_I2C_Master_Receive+0x208>)
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	0023      	movs	r3, r4
 80052ac:	f001 ff58 	bl	8007160 <I2C_TransferConfig>
 80052b0:	e076      	b.n	80053a0 <HAL_I2C_Master_Receive+0x1ac>
                            I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	049c      	lsls	r4, r3, #18
 80052c6:	230a      	movs	r3, #10
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	8819      	ldrh	r1, [r3, #0]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	4b4b      	ldr	r3, [pc, #300]	; (80053fc <HAL_I2C_Master_Receive+0x208>)
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	0023      	movs	r3, r4
 80052d4:	f001 ff44 	bl	8007160 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80052d8:	e062      	b.n	80053a0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f001 fe57 	bl	8006f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052e6:	1e03      	subs	r3, r0, #0
 80052e8:	d001      	beq.n	80052ee <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e082      	b.n	80053f4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d03a      	beq.n	80053a0 <HAL_I2C_Master_Receive+0x1ac>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d136      	bne.n	80053a0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	0013      	movs	r3, r2
 800533c:	2200      	movs	r2, #0
 800533e:	2180      	movs	r1, #128	; 0x80
 8005340:	f001 fd6e 	bl	8006e20 <I2C_WaitOnFlagUntilTimeout>
 8005344:	1e03      	subs	r3, r0, #0
 8005346:	d001      	beq.n	800534c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e053      	b.n	80053f4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	2bff      	cmp	r3, #255	; 0xff
 8005354:	d911      	bls.n	800537a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	22ff      	movs	r2, #255	; 0xff
 800535a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005360:	b2da      	uxtb	r2, r3
 8005362:	2380      	movs	r3, #128	; 0x80
 8005364:	045c      	lsls	r4, r3, #17
 8005366:	230a      	movs	r3, #10
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	8819      	ldrh	r1, [r3, #0]
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	2300      	movs	r3, #0
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	0023      	movs	r3, r4
 8005374:	f001 fef4 	bl	8007160 <I2C_TransferConfig>
 8005378:	e012      	b.n	80053a0 <HAL_I2C_Master_Receive+0x1ac>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005388:	b2da      	uxtb	r2, r3
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	049c      	lsls	r4, r3, #18
 800538e:	230a      	movs	r3, #10
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	8819      	ldrh	r1, [r3, #0]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	2300      	movs	r3, #0
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	0023      	movs	r3, r4
 800539c:	f001 fee0 	bl	8007160 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d197      	bne.n	80052da <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f001 fdb3 	bl	8006f1c <I2C_WaitOnSTOPFlagUntilTimeout>
 80053b6:	1e03      	subs	r3, r0, #0
 80053b8:	d001      	beq.n	80053be <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e01a      	b.n	80053f4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2220      	movs	r2, #32
 80053c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	490b      	ldr	r1, [pc, #44]	; (8005400 <HAL_I2C_Master_Receive+0x20c>)
 80053d2:	400a      	ands	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2241      	movs	r2, #65	; 0x41
 80053da:	2120      	movs	r1, #32
 80053dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2242      	movs	r2, #66	; 0x42
 80053e2:	2100      	movs	r1, #0
 80053e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2240      	movs	r2, #64	; 0x40
 80053ea:	2100      	movs	r1, #0
 80053ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b007      	add	sp, #28
 80053fa:	bd90      	pop	{r4, r7, pc}
 80053fc:	80002400 	.word	0x80002400
 8005400:	fe00e800 	.word	0xfe00e800

08005404 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005404:	b5b0      	push	{r4, r5, r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	0008      	movs	r0, r1
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	0019      	movs	r1, r3
 8005412:	230a      	movs	r3, #10
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	1c02      	adds	r2, r0, #0
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	2308      	movs	r3, #8
 800541c:	18fb      	adds	r3, r7, r3
 800541e:	1c0a      	adds	r2, r1, #0
 8005420:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2241      	movs	r2, #65	; 0x41
 8005426:	5c9b      	ldrb	r3, [r3, r2]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b20      	cmp	r3, #32
 800542c:	d000      	beq.n	8005430 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800542e:	e0dd      	b.n	80055ec <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	2380      	movs	r3, #128	; 0x80
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	401a      	ands	r2, r3
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	429a      	cmp	r2, r3
 8005442:	d101      	bne.n	8005448 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8005444:	2302      	movs	r3, #2
 8005446:	e0d2      	b.n	80055ee <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2240      	movs	r2, #64	; 0x40
 800544c:	5c9b      	ldrb	r3, [r3, r2]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_I2C_Master_Transmit_DMA+0x52>
 8005452:	2302      	movs	r3, #2
 8005454:	e0cb      	b.n	80055ee <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2240      	movs	r2, #64	; 0x40
 800545a:	2101      	movs	r1, #1
 800545c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2241      	movs	r2, #65	; 0x41
 8005462:	2121      	movs	r1, #33	; 0x21
 8005464:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2242      	movs	r2, #66	; 0x42
 800546a:	2110      	movs	r1, #16
 800546c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2208      	movs	r2, #8
 800547e:	18ba      	adds	r2, r7, r2
 8005480:	8812      	ldrh	r2, [r2, #0]
 8005482:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4a5c      	ldr	r2, [pc, #368]	; (80055f8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8005488:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a5b      	ldr	r2, [pc, #364]	; (80055fc <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800548e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	2bff      	cmp	r3, #255	; 0xff
 8005498:	d906      	bls.n	80054a8 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	22ff      	movs	r2, #255	; 0xff
 800549e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	045b      	lsls	r3, r3, #17
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e007      	b.n	80054b8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	049b      	lsls	r3, r3, #18
 80054b6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d100      	bne.n	80054c2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 80054c0:	e078      	b.n	80055b4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d023      	beq.n	8005512 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	4a4c      	ldr	r2, [pc, #304]	; (8005600 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 80054d0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	4a4b      	ldr	r2, [pc, #300]	; (8005604 <HAL_I2C_Master_Transmit_DMA+0x200>)
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	2200      	movs	r2, #0
 80054e8:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3328      	adds	r3, #40	; 0x28
 80054f6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80054fc:	2513      	movs	r5, #19
 80054fe:	197c      	adds	r4, r7, r5
 8005500:	f7ff fa1c 	bl	800493c <HAL_DMA_Start_IT>
 8005504:	0003      	movs	r3, r0
 8005506:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005508:	197b      	adds	r3, r7, r5
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d13d      	bne.n	800558c <HAL_I2C_Master_Transmit_DMA+0x188>
 8005510:	e013      	b.n	800553a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2241      	movs	r2, #65	; 0x41
 8005516:	2120      	movs	r1, #32
 8005518:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2242      	movs	r2, #66	; 0x42
 800551e:	2100      	movs	r1, #0
 8005520:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	431a      	orrs	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2240      	movs	r2, #64	; 0x40
 8005532:	2100      	movs	r1, #0
 8005534:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e059      	b.n	80055ee <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800553e:	b2da      	uxtb	r2, r3
 8005540:	697c      	ldr	r4, [r7, #20]
 8005542:	230a      	movs	r3, #10
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	8819      	ldrh	r1, [r3, #0]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	4b2f      	ldr	r3, [pc, #188]	; (8005608 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	0023      	movs	r3, r4
 8005550:	f001 fe06 	bl	8007160 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2240      	movs	r2, #64	; 0x40
 800556a:	2100      	movs	r1, #0
 800556c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2110      	movs	r1, #16
 8005572:	0018      	movs	r0, r3
 8005574:	f001 fe2a 	bl	80071cc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2180      	movs	r1, #128	; 0x80
 8005584:	01c9      	lsls	r1, r1, #7
 8005586:	430a      	orrs	r2, r1
 8005588:	601a      	str	r2, [r3, #0]
 800558a:	e02d      	b.n	80055e8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2241      	movs	r2, #65	; 0x41
 8005590:	2120      	movs	r1, #32
 8005592:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2242      	movs	r2, #66	; 0x42
 8005598:	2100      	movs	r1, #0
 800559a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a0:	2210      	movs	r2, #16
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2240      	movs	r2, #64	; 0x40
 80055ac:	2100      	movs	r1, #0
 80055ae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e01c      	b.n	80055ee <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <HAL_I2C_Master_Transmit_DMA+0x208>)
 80055b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	049c      	lsls	r4, r3, #18
 80055c4:	230a      	movs	r3, #10
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	8819      	ldrh	r1, [r3, #0]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	4b0e      	ldr	r3, [pc, #56]	; (8005608 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	0023      	movs	r3, r4
 80055d2:	f001 fdc5 	bl	8007160 <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2240      	movs	r2, #64	; 0x40
 80055da:	2100      	movs	r1, #0
 80055dc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2101      	movs	r1, #1
 80055e2:	0018      	movs	r0, r3
 80055e4:	f001 fdf2 	bl	80071cc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e000      	b.n	80055ee <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	0018      	movs	r0, r3
 80055f0:	46bd      	mov	sp, r7
 80055f2:	b006      	add	sp, #24
 80055f4:	bdb0      	pop	{r4, r5, r7, pc}
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	ffff0000 	.word	0xffff0000
 80055fc:	08005ed9 	.word	0x08005ed9
 8005600:	08006c71 	.word	0x08006c71
 8005604:	08006db1 	.word	0x08006db1
 8005608:	80002000 	.word	0x80002000
 800560c:	08005a2d 	.word	0x08005a2d

08005610 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005610:	b5b0      	push	{r4, r5, r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	0008      	movs	r0, r1
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	0019      	movs	r1, r3
 800561e:	230a      	movs	r3, #10
 8005620:	18fb      	adds	r3, r7, r3
 8005622:	1c02      	adds	r2, r0, #0
 8005624:	801a      	strh	r2, [r3, #0]
 8005626:	2308      	movs	r3, #8
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	1c0a      	adds	r2, r1, #0
 800562c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2241      	movs	r2, #65	; 0x41
 8005632:	5c9b      	ldrb	r3, [r3, r2]
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b20      	cmp	r3, #32
 8005638:	d000      	beq.n	800563c <HAL_I2C_Master_Receive_DMA+0x2c>
 800563a:	e0dd      	b.n	80057f8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	021b      	lsls	r3, r3, #8
 8005646:	401a      	ands	r2, r3
 8005648:	2380      	movs	r3, #128	; 0x80
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	429a      	cmp	r2, r3
 800564e:	d101      	bne.n	8005654 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005650:	2302      	movs	r3, #2
 8005652:	e0d2      	b.n	80057fa <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2240      	movs	r2, #64	; 0x40
 8005658:	5c9b      	ldrb	r3, [r3, r2]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_I2C_Master_Receive_DMA+0x52>
 800565e:	2302      	movs	r3, #2
 8005660:	e0cb      	b.n	80057fa <HAL_I2C_Master_Receive_DMA+0x1ea>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2240      	movs	r2, #64	; 0x40
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2241      	movs	r2, #65	; 0x41
 800566e:	2122      	movs	r1, #34	; 0x22
 8005670:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2242      	movs	r2, #66	; 0x42
 8005676:	2110      	movs	r1, #16
 8005678:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2208      	movs	r2, #8
 800568a:	18ba      	adds	r2, r7, r2
 800568c:	8812      	ldrh	r2, [r2, #0]
 800568e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4a5c      	ldr	r2, [pc, #368]	; (8005804 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8005694:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a5b      	ldr	r2, [pc, #364]	; (8005808 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800569a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2bff      	cmp	r3, #255	; 0xff
 80056a4:	d906      	bls.n	80056b4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	22ff      	movs	r2, #255	; 0xff
 80056aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	045b      	lsls	r3, r3, #17
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e007      	b.n	80056c4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80056be:	2380      	movs	r3, #128	; 0x80
 80056c0:	049b      	lsls	r3, r3, #18
 80056c2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d100      	bne.n	80056ce <HAL_I2C_Master_Receive_DMA+0xbe>
 80056cc:	e078      	b.n	80057c0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d023      	beq.n	800571e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056da:	4a4c      	ldr	r2, [pc, #304]	; (800580c <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80056dc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	4a4b      	ldr	r2, [pc, #300]	; (8005810 <HAL_I2C_Master_Receive_DMA+0x200>)
 80056e4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f2:	2200      	movs	r2, #0
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3324      	adds	r3, #36	; 0x24
 8005700:	0019      	movs	r1, r3
 8005702:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005708:	2513      	movs	r5, #19
 800570a:	197c      	adds	r4, r7, r5
 800570c:	f7ff f916 	bl	800493c <HAL_DMA_Start_IT>
 8005710:	0003      	movs	r3, r0
 8005712:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005714:	197b      	adds	r3, r7, r5
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d13d      	bne.n	8005798 <HAL_I2C_Master_Receive_DMA+0x188>
 800571c:	e013      	b.n	8005746 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2241      	movs	r2, #65	; 0x41
 8005722:	2120      	movs	r1, #32
 8005724:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2242      	movs	r2, #66	; 0x42
 800572a:	2100      	movs	r1, #0
 800572c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005732:	2280      	movs	r2, #128	; 0x80
 8005734:	431a      	orrs	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2240      	movs	r2, #64	; 0x40
 800573e:	2100      	movs	r1, #0
 8005740:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e059      	b.n	80057fa <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574a:	b2da      	uxtb	r2, r3
 800574c:	697c      	ldr	r4, [r7, #20]
 800574e:	230a      	movs	r3, #10
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	8819      	ldrh	r1, [r3, #0]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <HAL_I2C_Master_Receive_DMA+0x204>)
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	0023      	movs	r3, r4
 800575c:	f001 fd00 	bl	8007160 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2240      	movs	r2, #64	; 0x40
 8005776:	2100      	movs	r1, #0
 8005778:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2110      	movs	r1, #16
 800577e:	0018      	movs	r0, r3
 8005780:	f001 fd24 	bl	80071cc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2180      	movs	r1, #128	; 0x80
 8005790:	0209      	lsls	r1, r1, #8
 8005792:	430a      	orrs	r2, r1
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e02d      	b.n	80057f4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2241      	movs	r2, #65	; 0x41
 800579c:	2120      	movs	r1, #32
 800579e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2242      	movs	r2, #66	; 0x42
 80057a4:	2100      	movs	r1, #0
 80057a6:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ac:	2210      	movs	r2, #16
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2240      	movs	r2, #64	; 0x40
 80057b8:	2100      	movs	r1, #0
 80057ba:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e01c      	b.n	80057fa <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a15      	ldr	r2, [pc, #84]	; (8005818 <HAL_I2C_Master_Receive_DMA+0x208>)
 80057c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	2380      	movs	r3, #128	; 0x80
 80057ce:	049c      	lsls	r4, r3, #18
 80057d0:	230a      	movs	r3, #10
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	8819      	ldrh	r1, [r3, #0]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <HAL_I2C_Master_Receive_DMA+0x204>)
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	0023      	movs	r3, r4
 80057de:	f001 fcbf 	bl	8007160 <I2C_TransferConfig>
                            I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2240      	movs	r2, #64	; 0x40
 80057e6:	2100      	movs	r1, #0
 80057e8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2101      	movs	r1, #1
 80057ee:	0018      	movs	r0, r3
 80057f0:	f001 fcec 	bl	80071cc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b006      	add	sp, #24
 8005800:	bdb0      	pop	{r4, r5, r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	ffff0000 	.word	0xffff0000
 8005808:	08005ed9 	.word	0x08005ed9
 800580c:	08006d11 	.word	0x08006d11
 8005810:	08006db1 	.word	0x08006db1
 8005814:	80002400 	.word	0x80002400
 8005818:	08005a2d 	.word	0x08005a2d

0800581c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	1dbb      	adds	r3, r7, #6
 800582a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2241      	movs	r2, #65	; 0x41
 8005830:	5c9b      	ldrb	r3, [r3, r2]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	001a      	movs	r2, r3
 8005836:	2328      	movs	r3, #40	; 0x28
 8005838:	4013      	ands	r3, r2
 800583a:	2b28      	cmp	r3, #40	; 0x28
 800583c:	d000      	beq.n	8005840 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 800583e:	e08f      	b.n	8005960 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8005846:	1dbb      	adds	r3, r7, #6
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d105      	bne.n	800585a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2280      	movs	r2, #128	; 0x80
 8005852:	0092      	lsls	r2, r2, #2
 8005854:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e083      	b.n	8005962 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800585a:	4a44      	ldr	r2, [pc, #272]	; (800596c <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	0011      	movs	r1, r2
 8005860:	0018      	movs	r0, r3
 8005862:	f001 fd1b 	bl	800729c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2240      	movs	r2, #64	; 0x40
 800586a:	5c9b      	ldrb	r3, [r3, r2]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8005870:	2302      	movs	r3, #2
 8005872:	e076      	b.n	8005962 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2240      	movs	r2, #64	; 0x40
 8005878:	2101      	movs	r1, #1
 800587a:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2241      	movs	r2, #65	; 0x41
 8005880:	5c9b      	ldrb	r3, [r3, r2]
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b2a      	cmp	r3, #42	; 0x2a
 8005886:	d12c      	bne.n	80058e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2102      	movs	r1, #2
 800588c:	0018      	movs	r0, r3
 800588e:	f001 fd05 	bl	800729c <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	401a      	ands	r2, r3
 800589e:	2380      	movs	r3, #128	; 0x80
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d11d      	bne.n	80058e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	492f      	ldr	r1, [pc, #188]	; (8005970 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 80058b2:	400a      	ands	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d011      	beq.n	80058e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c2:	4a2c      	ldr	r2, [pc, #176]	; (8005974 <HAL_I2C_Slave_Seq_Transmit_IT+0x158>)
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff f8bc 	bl	8004a48 <HAL_DMA_Abort_IT>
 80058d0:	1e03      	subs	r3, r0, #0
 80058d2:	d006      	beq.n	80058e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	0018      	movs	r0, r3
 80058e0:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2241      	movs	r2, #65	; 0x41
 80058e6:	2129      	movs	r1, #41	; 0x29
 80058e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2242      	movs	r2, #66	; 0x42
 80058ee:	2120      	movs	r1, #32
 80058f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685a      	ldr	r2, [r3, #4]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	491b      	ldr	r1, [pc, #108]	; (8005970 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>)
 8005904:	400a      	ands	r2, r1
 8005906:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1dba      	adds	r2, r7, #6
 8005912:	8812      	ldrh	r2, [r2, #0]
 8005914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 800592a:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	0c1b      	lsrs	r3, r3, #16
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2201      	movs	r2, #1
 8005938:	4013      	ands	r3, r2
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b01      	cmp	r3, #1
 800593e:	d103      	bne.n	8005948 <HAL_I2C_Slave_Seq_Transmit_IT+0x12c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2208      	movs	r2, #8
 8005946:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2240      	movs	r2, #64	; 0x40
 800594c:	2100      	movs	r1, #0
 800594e:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8005950:	4a06      	ldr	r2, [pc, #24]	; (800596c <HAL_I2C_Slave_Seq_Transmit_IT+0x150>)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	0011      	movs	r1, r2
 8005956:	0018      	movs	r0, r3
 8005958:	f001 fc38 	bl	80071cc <I2C_Enable_IRQ>

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	e000      	b.n	8005962 <HAL_I2C_Slave_Seq_Transmit_IT+0x146>
  }
  else
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
  }
}
 8005962:	0018      	movs	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	b004      	add	sp, #16
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	00008001 	.word	0x00008001
 8005970:	ffff7fff 	.word	0xffff7fff
 8005974:	08006de3 	.word	0x08006de3
 8005978:	08005cb1 	.word	0x08005cb1

0800597c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	b002      	add	sp, #8
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005994:	46c0      	nop			; (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b002      	add	sp, #8
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	0008      	movs	r0, r1
 80059c6:	0011      	movs	r1, r2
 80059c8:	1cfb      	adds	r3, r7, #3
 80059ca:	1c02      	adds	r2, r0, #0
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	003b      	movs	r3, r7
 80059d0:	1c0a      	adds	r2, r1, #0
 80059d2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	46bd      	mov	sp, r7
 80059d8:	b002      	add	sp, #8
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b002      	add	sp, #8
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80059f4:	46c0      	nop			; (mov r8, r8)
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b002      	add	sp, #8
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005a04:	46c0      	nop			; (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b002      	add	sp, #8
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005a14:	46c0      	nop			; (mov r8, r8)
 8005a16:	46bd      	mov	sp, r7
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b089      	sub	sp, #36	; 0x24
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	5c9b      	ldrb	r3, [r3, r2]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <I2C_Master_ISR_IT+0x1e>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e12b      	b.n	8005ca2 <I2C_Master_ISR_IT+0x276>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2240      	movs	r2, #64	; 0x40
 8005a4e:	2101      	movs	r1, #1
 8005a50:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	001a      	movs	r2, r3
 8005a58:	2301      	movs	r3, #1
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d014      	beq.n	8005a88 <I2C_Master_ISR_IT+0x5c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	001a      	movs	r2, r3
 8005a64:	2301      	movs	r3, #1
 8005a66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a68:	d00e      	beq.n	8005a88 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2210      	movs	r2, #16
 8005a70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a76:	2204      	movs	r2, #4
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	0018      	movs	r0, r3
 8005a82:	f001 f8d2 	bl	8006c2a <I2C_Flush_TXDR>
 8005a86:	e0f5      	b.n	8005c74 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	089b      	lsrs	r3, r3, #2
 8005a8c:	001a      	movs	r2, r3
 8005a8e:	2301      	movs	r3, #1
 8005a90:	4013      	ands	r3, r2
 8005a92:	d023      	beq.n	8005adc <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	089b      	lsrs	r3, r3, #2
 8005a98:	001a      	movs	r2, r3
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005a9e:	d01d      	beq.n	8005adc <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	4393      	bics	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ada:	e0cb      	b.n	8005c74 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	085b      	lsrs	r3, r3, #1
 8005ae0:	001a      	movs	r2, r3
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d01e      	beq.n	8005b26 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	001a      	movs	r2, r3
 8005aee:	2301      	movs	r3, #1
 8005af0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005af2:	d018      	beq.n	8005b26 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b24:	e0a6      	b.n	8005c74 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	09db      	lsrs	r3, r3, #7
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d100      	bne.n	8005b34 <I2C_Master_ISR_IT+0x108>
 8005b32:	e06b      	b.n	8005c0c <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	099b      	lsrs	r3, r3, #6
 8005b38:	001a      	movs	r2, r3
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005b3e:	d065      	beq.n	8005c0c <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d04a      	beq.n	8005be0 <I2C_Master_ISR_IT+0x1b4>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d146      	bne.n	8005be0 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	2112      	movs	r1, #18
 8005b5c:	187b      	adds	r3, r7, r1
 8005b5e:	0592      	lsls	r2, r2, #22
 8005b60:	0d92      	lsrs	r2, r2, #22
 8005b62:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2bff      	cmp	r3, #255	; 0xff
 8005b6c:	d910      	bls.n	8005b90 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	22ff      	movs	r2, #255	; 0xff
 8005b72:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	2380      	movs	r3, #128	; 0x80
 8005b7c:	045c      	lsls	r4, r3, #17
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	8819      	ldrh	r1, [r3, #0]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	2300      	movs	r3, #0
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	0023      	movs	r3, r4
 8005b8a:	f001 fae9 	bl	8007160 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b8e:	e03c      	b.n	8005c0a <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9e:	4a43      	ldr	r2, [pc, #268]	; (8005cac <I2C_Master_ISR_IT+0x280>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00e      	beq.n	8005bc2 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005bae:	2312      	movs	r3, #18
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	8819      	ldrh	r1, [r3, #0]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	0023      	movs	r3, r4
 8005bbc:	f001 fad0 	bl	8007160 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bc0:	e023      	b.n	8005c0a <I2C_Master_ISR_IT+0x1de>
                                hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	049c      	lsls	r4, r3, #18
 8005bcc:	2312      	movs	r3, #18
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	8819      	ldrh	r1, [r3, #0]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	0023      	movs	r3, r4
 8005bda:	f001 fac1 	bl	8007160 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bde:	e014      	b.n	8005c0a <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	2380      	movs	r3, #128	; 0x80
 8005be8:	049b      	lsls	r3, r3, #18
 8005bea:	401a      	ands	r2, r3
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	049b      	lsls	r3, r3, #18
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d004      	beq.n	8005bfe <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 fc14 	bl	8006424 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bfc:	e03a      	b.n	8005c74 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2140      	movs	r1, #64	; 0x40
 8005c02:	0018      	movs	r0, r3
 8005c04:	f000 ff06 	bl	8006a14 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c08:	e034      	b.n	8005c74 <I2C_Master_ISR_IT+0x248>
 8005c0a:	e033      	b.n	8005c74 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	099b      	lsrs	r3, r3, #6
 8005c10:	001a      	movs	r2, r3
 8005c12:	2301      	movs	r3, #1
 8005c14:	4013      	ands	r3, r2
 8005c16:	d02d      	beq.n	8005c74 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	099b      	lsrs	r3, r3, #6
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005c22:	d027      	beq.n	8005c74 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d11d      	bne.n	8005c6a <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	2380      	movs	r3, #128	; 0x80
 8005c36:	049b      	lsls	r3, r3, #18
 8005c38:	401a      	ands	r2, r3
 8005c3a:	2380      	movs	r3, #128	; 0x80
 8005c3c:	049b      	lsls	r3, r3, #18
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d018      	beq.n	8005c74 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	4a19      	ldr	r2, [pc, #100]	; (8005cac <I2C_Master_ISR_IT+0x280>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d109      	bne.n	8005c60 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2180      	movs	r1, #128	; 0x80
 8005c58:	01c9      	lsls	r1, r1, #7
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
 8005c5e:	e009      	b.n	8005c74 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	0018      	movs	r0, r3
 8005c64:	f000 fbde 	bl	8006424 <I2C_ITMasterSeqCplt>
 8005c68:	e004      	b.n	8005c74 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2140      	movs	r1, #64	; 0x40
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f000 fed0 	bl	8006a14 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	001a      	movs	r2, r3
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	d00b      	beq.n	8005c98 <I2C_Master_ISR_IT+0x26c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	001a      	movs	r2, r3
 8005c86:	2301      	movs	r3, #1
 8005c88:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c8a:	d005      	beq.n	8005c98 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	0011      	movs	r1, r2
 8005c92:	0018      	movs	r0, r3
 8005c94:	f000 fc6e 	bl	8006574 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2240      	movs	r2, #64	; 0x40
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	b007      	add	sp, #28
 8005ca8:	bd90      	pop	{r4, r7, pc}
 8005caa:	46c0      	nop			; (mov r8, r8)
 8005cac:	ffff0000 	.word	0xffff0000

08005cb0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2240      	movs	r2, #64	; 0x40
 8005cca:	5c9b      	ldrb	r3, [r3, r2]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <I2C_Slave_ISR_IT+0x24>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e0fa      	b.n	8005eca <I2C_Slave_ISR_IT+0x21a>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	2101      	movs	r1, #1
 8005cda:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	d00b      	beq.n	8005d00 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	001a      	movs	r2, r3
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005cf2:	d005      	beq.n	8005d00 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	0011      	movs	r1, r2
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 fd0c 	bl	8006718 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	001a      	movs	r2, r3
 8005d06:	2301      	movs	r3, #1
 8005d08:	4013      	ands	r3, r2
 8005d0a:	d054      	beq.n	8005db6 <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	001a      	movs	r2, r3
 8005d12:	2301      	movs	r3, #1
 8005d14:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d16:	d04e      	beq.n	8005db6 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d12d      	bne.n	8005d7e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2241      	movs	r2, #65	; 0x41
 8005d26:	5c9b      	ldrb	r3, [r3, r2]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b28      	cmp	r3, #40	; 0x28
 8005d2c:	d10b      	bne.n	8005d46 <I2C_Slave_ISR_IT+0x96>
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	049b      	lsls	r3, r3, #18
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d106      	bne.n	8005d46 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	0011      	movs	r1, r2
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 fe0e 	bl	8006960 <I2C_ITListenCplt>
 8005d44:	e036      	b.n	8005db4 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2241      	movs	r2, #65	; 0x41
 8005d4a:	5c9b      	ldrb	r3, [r3, r2]
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b29      	cmp	r3, #41	; 0x29
 8005d50:	d110      	bne.n	8005d74 <I2C_Slave_ISR_IT+0xc4>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	4a5f      	ldr	r2, [pc, #380]	; (8005ed4 <I2C_Slave_ISR_IT+0x224>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00c      	beq.n	8005d74 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2210      	movs	r2, #16
 8005d60:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	0018      	movs	r0, r3
 8005d66:	f000 ff60 	bl	8006c2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f000 fb9b 	bl	80064a8 <I2C_ITSlaveSeqCplt>
 8005d72:	e01f      	b.n	8005db4 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2210      	movs	r2, #16
 8005d7a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d7c:	e09d      	b.n	8005eba <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2210      	movs	r2, #16
 8005d84:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <I2C_Slave_ISR_IT+0xf4>
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	045b      	lsls	r3, r3, #17
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d000      	beq.n	8005da4 <I2C_Slave_ISR_IT+0xf4>
 8005da2:	e08a      	b.n	8005eba <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	0011      	movs	r1, r2
 8005dac:	0018      	movs	r0, r3
 8005dae:	f000 fe31 	bl	8006a14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005db2:	e082      	b.n	8005eba <I2C_Slave_ISR_IT+0x20a>
 8005db4:	e081      	b.n	8005eba <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	089b      	lsrs	r3, r3, #2
 8005dba:	001a      	movs	r2, r3
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d031      	beq.n	8005e26 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	089b      	lsrs	r3, r3, #2
 8005dc6:	001a      	movs	r2, r3
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005dcc:	d02b      	beq.n	8005e26 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d018      	beq.n	8005e0a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d154      	bne.n	8005ebe <I2C_Slave_ISR_IT+0x20e>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4a2f      	ldr	r2, [pc, #188]	; (8005ed4 <I2C_Slave_ISR_IT+0x224>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d050      	beq.n	8005ebe <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f000 fb42 	bl	80064a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005e24:	e04b      	b.n	8005ebe <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	08db      	lsrs	r3, r3, #3
 8005e2a:	001a      	movs	r2, r3
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d00c      	beq.n	8005e4c <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	08db      	lsrs	r3, r3, #3
 8005e36:	001a      	movs	r2, r3
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e3c:	d006      	beq.n	8005e4c <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	0011      	movs	r1, r2
 8005e44:	0018      	movs	r0, r3
 8005e46:	f000 fa49 	bl	80062dc <I2C_ITAddrCplt>
 8005e4a:	e039      	b.n	8005ec0 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	001a      	movs	r2, r3
 8005e52:	2301      	movs	r3, #1
 8005e54:	4013      	ands	r3, r2
 8005e56:	d033      	beq.n	8005ec0 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	085b      	lsrs	r3, r3, #1
 8005e5c:	001a      	movs	r2, r3
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e62:	d02d      	beq.n	8005ec0 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d018      	beq.n	8005ea0 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8005e9e:	e00f      	b.n	8005ec0 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	2380      	movs	r3, #128	; 0x80
 8005ea4:	045b      	lsls	r3, r3, #17
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d002      	beq.n	8005eb0 <I2C_Slave_ISR_IT+0x200>
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f000 faf8 	bl	80064a8 <I2C_ITSlaveSeqCplt>
 8005eb8:	e002      	b.n	8005ec0 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	e000      	b.n	8005ec0 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8005ebe:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2240      	movs	r2, #64	; 0x40
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	0018      	movs	r0, r3
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b006      	add	sp, #24
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	ffff0000 	.word	0xffff0000

08005ed8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                               uint32_t ITSources)
{
 8005ed8:	b590      	push	{r4, r7, lr}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2240      	movs	r2, #64	; 0x40
 8005ee8:	5c9b      	ldrb	r3, [r3, r2]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <I2C_Master_ISR_DMA+0x1a>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e0f7      	b.n	80060e2 <I2C_Master_ISR_DMA+0x20a>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2240      	movs	r2, #64	; 0x40
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	001a      	movs	r2, r3
 8005f00:	2301      	movs	r3, #1
 8005f02:	4013      	ands	r3, r2
 8005f04:	d019      	beq.n	8005f3a <I2C_Master_ISR_DMA+0x62>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005f10:	d013      	beq.n	8005f3a <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2210      	movs	r2, #16
 8005f18:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1e:	2204      	movs	r2, #4
 8005f20:	431a      	orrs	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2120      	movs	r1, #32
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f001 f94e 	bl	80071cc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	0018      	movs	r0, r3
 8005f34:	f000 fe79 	bl	8006c2a <I2C_Flush_TXDR>
 8005f38:	e0ce      	b.n	80060d8 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	09db      	lsrs	r3, r3, #7
 8005f3e:	001a      	movs	r2, r3
 8005f40:	2301      	movs	r3, #1
 8005f42:	4013      	ands	r3, r2
 8005f44:	d100      	bne.n	8005f48 <I2C_Master_ISR_DMA+0x70>
 8005f46:	e07e      	b.n	8006046 <I2C_Master_ISR_DMA+0x16e>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	099b      	lsrs	r3, r3, #6
 8005f4c:	001a      	movs	r2, r3
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f52:	d100      	bne.n	8005f56 <I2C_Master_ISR_DMA+0x7e>
 8005f54:	e077      	b.n	8006046 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2140      	movs	r1, #64	; 0x40
 8005f62:	438a      	bics	r2, r1
 8005f64:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d055      	beq.n	800601c <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	2312      	movs	r3, #18
 8005f7a:	18fb      	adds	r3, r7, r3
 8005f7c:	0592      	lsls	r2, r2, #22
 8005f7e:	0d92      	lsrs	r2, r2, #22
 8005f80:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2bff      	cmp	r3, #255	; 0xff
 8005f8a:	d906      	bls.n	8005f9a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	22ff      	movs	r2, #255	; 0xff
 8005f90:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005f92:	2380      	movs	r3, #128	; 0x80
 8005f94:	045b      	lsls	r3, r3, #17
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	e010      	b.n	8005fbc <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4a50      	ldr	r2, [pc, #320]	; (80060ec <I2C_Master_ISR_DMA+0x214>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	e002      	b.n	8005fbc <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005fb6:	2380      	movs	r3, #128	; 0x80
 8005fb8:	049b      	lsls	r3, r3, #18
 8005fba:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	697c      	ldr	r4, [r7, #20]
 8005fc4:	2312      	movs	r3, #18
 8005fc6:	18fb      	adds	r3, r7, r3
 8005fc8:	8819      	ldrh	r1, [r3, #0]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	0023      	movs	r3, r4
 8005fd2:	f001 f8c5 	bl	8007160 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2241      	movs	r2, #65	; 0x41
 8005fec:	5c9b      	ldrb	r3, [r3, r2]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b22      	cmp	r3, #34	; 0x22
 8005ff2:	d109      	bne.n	8006008 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2180      	movs	r1, #128	; 0x80
 8006000:	0209      	lsls	r1, r1, #8
 8006002:	430a      	orrs	r2, r1
 8006004:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006006:	e067      	b.n	80060d8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2180      	movs	r1, #128	; 0x80
 8006014:	01c9      	lsls	r1, r1, #7
 8006016:	430a      	orrs	r2, r1
 8006018:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800601a:	e05d      	b.n	80060d8 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	049b      	lsls	r3, r3, #18
 8006026:	401a      	ands	r2, r3
 8006028:	2380      	movs	r3, #128	; 0x80
 800602a:	049b      	lsls	r3, r3, #18
 800602c:	429a      	cmp	r2, r3
 800602e:	d004      	beq.n	800603a <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	0018      	movs	r0, r3
 8006034:	f000 f9f6 	bl	8006424 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006038:	e04e      	b.n	80060d8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2140      	movs	r1, #64	; 0x40
 800603e:	0018      	movs	r0, r3
 8006040:	f000 fce8 	bl	8006a14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006044:	e048      	b.n	80060d8 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	099b      	lsrs	r3, r3, #6
 800604a:	001a      	movs	r2, r3
 800604c:	2301      	movs	r3, #1
 800604e:	4013      	ands	r3, r2
 8006050:	d02e      	beq.n	80060b0 <I2C_Master_ISR_DMA+0x1d8>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	099b      	lsrs	r3, r3, #6
 8006056:	001a      	movs	r2, r3
 8006058:	2301      	movs	r3, #1
 800605a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800605c:	d028      	beq.n	80060b0 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11d      	bne.n	80060a4 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	049b      	lsls	r3, r3, #18
 8006072:	401a      	ands	r2, r3
 8006074:	2380      	movs	r3, #128	; 0x80
 8006076:	049b      	lsls	r3, r3, #18
 8006078:	429a      	cmp	r2, r3
 800607a:	d02c      	beq.n	80060d6 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <I2C_Master_ISR_DMA+0x214>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d109      	bne.n	800609a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2180      	movs	r1, #128	; 0x80
 8006092:	01c9      	lsls	r1, r1, #7
 8006094:	430a      	orrs	r2, r1
 8006096:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006098:	e01d      	b.n	80060d6 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	0018      	movs	r0, r3
 800609e:	f000 f9c1 	bl	8006424 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80060a2:	e018      	b.n	80060d6 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2140      	movs	r1, #64	; 0x40
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fcb3 	bl	8006a14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80060ae:	e012      	b.n	80060d6 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	001a      	movs	r2, r3
 80060b6:	2301      	movs	r3, #1
 80060b8:	4013      	ands	r3, r2
 80060ba:	d00d      	beq.n	80060d8 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	001a      	movs	r2, r3
 80060c2:	2301      	movs	r3, #1
 80060c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c6:	d007      	beq.n	80060d8 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	0011      	movs	r1, r2
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 fa50 	bl	8006574 <I2C_ITMasterCplt>
 80060d4:	e000      	b.n	80060d8 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 80060d6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2240      	movs	r2, #64	; 0x40
 80060dc:	2100      	movs	r1, #0
 80060de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	0018      	movs	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b007      	add	sp, #28
 80060e8:	bd90      	pop	{r4, r7, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	ffff0000 	.word	0xffff0000

080060f0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                              uint32_t ITSources)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2240      	movs	r2, #64	; 0x40
 800610a:	5c9b      	ldrb	r3, [r3, r2]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <I2C_Slave_ISR_DMA+0x24>
 8006110:	2302      	movs	r3, #2
 8006112:	e0dd      	b.n	80062d0 <I2C_Slave_ISR_DMA+0x1e0>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2240      	movs	r2, #64	; 0x40
 8006118:	2101      	movs	r1, #1
 800611a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	001a      	movs	r2, r3
 8006122:	2301      	movs	r3, #1
 8006124:	4013      	ands	r3, r2
 8006126:	d00b      	beq.n	8006140 <I2C_Slave_ISR_DMA+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	001a      	movs	r2, r3
 800612e:	2301      	movs	r3, #1
 8006130:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006132:	d005      	beq.n	8006140 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f000 faec 	bl	8006718 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	001a      	movs	r2, r3
 8006146:	2301      	movs	r3, #1
 8006148:	4013      	ands	r3, r2
 800614a:	d100      	bne.n	800614e <I2C_Slave_ISR_DMA+0x5e>
 800614c:	e0a9      	b.n	80062a2 <I2C_Slave_ISR_DMA+0x1b2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	091b      	lsrs	r3, r3, #4
 8006152:	001a      	movs	r2, r3
 8006154:	2301      	movs	r3, #1
 8006156:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006158:	d100      	bne.n	800615c <I2C_Slave_ISR_DMA+0x6c>
 800615a:	e0a2      	b.n	80062a2 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	0b9b      	lsrs	r3, r3, #14
 8006160:	001a      	movs	r2, r3
 8006162:	2301      	movs	r3, #1
 8006164:	4013      	ands	r3, r2
 8006166:	d106      	bne.n	8006176 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	0bdb      	lsrs	r3, r3, #15
 800616c:	001a      	movs	r2, r3
 800616e:	2301      	movs	r3, #1
 8006170:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006172:	d100      	bne.n	8006176 <I2C_Slave_ISR_DMA+0x86>
 8006174:	e08e      	b.n	8006294 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00d      	beq.n	800619a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	0bdb      	lsrs	r3, r3, #15
 8006182:	001a      	movs	r2, r3
 8006184:	2301      	movs	r3, #1
 8006186:	4013      	ands	r3, r2
 8006188:	d007      	beq.n	800619a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8006196:	2301      	movs	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	0b9b      	lsrs	r3, r3, #14
 80061a6:	001a      	movs	r2, r3
 80061a8:	2301      	movs	r3, #1
 80061aa:	4013      	ands	r3, r2
 80061ac:	d007      	beq.n	80061be <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80061ba:	2301      	movs	r3, #1
 80061bc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d12d      	bne.n	8006220 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2241      	movs	r2, #65	; 0x41
 80061c8:	5c9b      	ldrb	r3, [r3, r2]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b28      	cmp	r3, #40	; 0x28
 80061ce:	d10b      	bne.n	80061e8 <I2C_Slave_ISR_DMA+0xf8>
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	049b      	lsls	r3, r3, #18
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d106      	bne.n	80061e8 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	0011      	movs	r1, r2
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 fbbd 	bl	8006960 <I2C_ITListenCplt>
 80061e6:	e054      	b.n	8006292 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2241      	movs	r2, #65	; 0x41
 80061ec:	5c9b      	ldrb	r3, [r3, r2]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b29      	cmp	r3, #41	; 0x29
 80061f2:	d110      	bne.n	8006216 <I2C_Slave_ISR_DMA+0x126>
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	4a38      	ldr	r2, [pc, #224]	; (80062d8 <I2C_Slave_ISR_DMA+0x1e8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00c      	beq.n	8006216 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2210      	movs	r2, #16
 8006202:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	0018      	movs	r0, r3
 8006208:	f000 fd0f 	bl	8006c2a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	0018      	movs	r0, r3
 8006210:	f000 f94a 	bl	80064a8 <I2C_ITSlaveSeqCplt>
 8006214:	e03d      	b.n	8006292 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2210      	movs	r2, #16
 800621c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800621e:	e03e      	b.n	800629e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2210      	movs	r2, #16
 8006226:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622c:	2204      	movs	r2, #4
 800622e:	431a      	orrs	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006234:	2317      	movs	r3, #23
 8006236:	18fb      	adds	r3, r7, r3
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	2141      	movs	r1, #65	; 0x41
 800623c:	5c52      	ldrb	r2, [r2, r1]
 800623e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d004      	beq.n	8006250 <I2C_Slave_ISR_DMA+0x160>
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	2380      	movs	r3, #128	; 0x80
 800624a:	045b      	lsls	r3, r3, #17
 800624c:	429a      	cmp	r2, r3
 800624e:	d126      	bne.n	800629e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006250:	2217      	movs	r2, #23
 8006252:	18bb      	adds	r3, r7, r2
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b21      	cmp	r3, #33	; 0x21
 8006258:	d003      	beq.n	8006262 <I2C_Slave_ISR_DMA+0x172>
 800625a:	18bb      	adds	r3, r7, r2
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b29      	cmp	r3, #41	; 0x29
 8006260:	d103      	bne.n	800626a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2221      	movs	r2, #33	; 0x21
 8006266:	631a      	str	r2, [r3, #48]	; 0x30
 8006268:	e00b      	b.n	8006282 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800626a:	2217      	movs	r2, #23
 800626c:	18bb      	adds	r3, r7, r2
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b22      	cmp	r3, #34	; 0x22
 8006272:	d003      	beq.n	800627c <I2C_Slave_ISR_DMA+0x18c>
 8006274:	18bb      	adds	r3, r7, r2
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b2a      	cmp	r3, #42	; 0x2a
 800627a:	d102      	bne.n	8006282 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2222      	movs	r2, #34	; 0x22
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	0011      	movs	r1, r2
 800628a:	0018      	movs	r0, r3
 800628c:	f000 fbc2 	bl	8006a14 <I2C_ITError>
      if (treatdmanack == 1U)
 8006290:	e005      	b.n	800629e <I2C_Slave_ISR_DMA+0x1ae>
 8006292:	e004      	b.n	800629e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2210      	movs	r2, #16
 800629a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800629c:	e013      	b.n	80062c6 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800629e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80062a0:	e011      	b.n	80062c6 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	08db      	lsrs	r3, r3, #3
 80062a6:	001a      	movs	r2, r3
 80062a8:	2301      	movs	r3, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	d00b      	beq.n	80062c6 <I2C_Slave_ISR_DMA+0x1d6>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	08db      	lsrs	r3, r3, #3
 80062b2:	001a      	movs	r2, r3
 80062b4:	2301      	movs	r3, #1
 80062b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062b8:	d005      	beq.n	80062c6 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	0011      	movs	r1, r2
 80062c0:	0018      	movs	r0, r3
 80062c2:	f000 f80b 	bl	80062dc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2240      	movs	r2, #64	; 0x40
 80062ca:	2100      	movs	r1, #0
 80062cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	0018      	movs	r0, r3
 80062d2:	46bd      	mov	sp, r7
 80062d4:	b008      	add	sp, #32
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	ffff0000 	.word	0xffff0000

080062dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062dc:	b5b0      	push	{r4, r5, r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2241      	movs	r2, #65	; 0x41
 80062ea:	5c9b      	ldrb	r3, [r3, r2]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	001a      	movs	r2, r3
 80062f0:	2328      	movs	r3, #40	; 0x28
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b28      	cmp	r3, #40	; 0x28
 80062f6:	d000      	beq.n	80062fa <I2C_ITAddrCplt+0x1e>
 80062f8:	e088      	b.n	800640c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	0c1b      	lsrs	r3, r3, #16
 8006302:	b2da      	uxtb	r2, r3
 8006304:	250f      	movs	r5, #15
 8006306:	197b      	adds	r3, r7, r5
 8006308:	2101      	movs	r1, #1
 800630a:	400a      	ands	r2, r1
 800630c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	b29a      	uxth	r2, r3
 8006318:	200c      	movs	r0, #12
 800631a:	183b      	adds	r3, r7, r0
 800631c:	21fe      	movs	r1, #254	; 0xfe
 800631e:	400a      	ands	r2, r1
 8006320:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	b29a      	uxth	r2, r3
 800632a:	240a      	movs	r4, #10
 800632c:	193b      	adds	r3, r7, r4
 800632e:	0592      	lsls	r2, r2, #22
 8006330:	0d92      	lsrs	r2, r2, #22
 8006332:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	b29a      	uxth	r2, r3
 800633c:	2308      	movs	r3, #8
 800633e:	18fb      	adds	r3, r7, r3
 8006340:	21fe      	movs	r1, #254	; 0xfe
 8006342:	400a      	ands	r2, r1
 8006344:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d148      	bne.n	80063e0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800634e:	0021      	movs	r1, r4
 8006350:	187b      	adds	r3, r7, r1
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	b29a      	uxth	r2, r3
 8006358:	183b      	adds	r3, r7, r0
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	4053      	eors	r3, r2
 800635e:	b29b      	uxth	r3, r3
 8006360:	001a      	movs	r2, r3
 8006362:	2306      	movs	r3, #6
 8006364:	4013      	ands	r3, r2
 8006366:	d120      	bne.n	80063aa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006368:	183b      	adds	r3, r7, r0
 800636a:	187a      	adds	r2, r7, r1
 800636c:	8812      	ldrh	r2, [r2, #0]
 800636e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637e:	2b02      	cmp	r3, #2
 8006380:	d14c      	bne.n	800641c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2208      	movs	r2, #8
 800638e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2240      	movs	r2, #64	; 0x40
 8006394:	2100      	movs	r1, #0
 8006396:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006398:	183b      	adds	r3, r7, r0
 800639a:	881a      	ldrh	r2, [r3, #0]
 800639c:	197b      	adds	r3, r7, r5
 800639e:	7819      	ldrb	r1, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0018      	movs	r0, r3
 80063a4:	f7ff fb0a 	bl	80059bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80063a8:	e038      	b.n	800641c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80063aa:	240c      	movs	r4, #12
 80063ac:	193b      	adds	r3, r7, r4
 80063ae:	2208      	movs	r2, #8
 80063b0:	18ba      	adds	r2, r7, r2
 80063b2:	8812      	ldrh	r2, [r2, #0]
 80063b4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063b6:	2380      	movs	r3, #128	; 0x80
 80063b8:	021a      	lsls	r2, r3, #8
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	0011      	movs	r1, r2
 80063be:	0018      	movs	r0, r3
 80063c0:	f000 ff6c 	bl	800729c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2240      	movs	r2, #64	; 0x40
 80063c8:	2100      	movs	r1, #0
 80063ca:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063cc:	193b      	adds	r3, r7, r4
 80063ce:	881a      	ldrh	r2, [r3, #0]
 80063d0:	230f      	movs	r3, #15
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	7819      	ldrb	r1, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	0018      	movs	r0, r3
 80063da:	f7ff faef 	bl	80059bc <HAL_I2C_AddrCallback>
}
 80063de:	e01d      	b.n	800641c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	021a      	lsls	r2, r3, #8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	0011      	movs	r1, r2
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 ff57 	bl	800729c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2240      	movs	r2, #64	; 0x40
 80063f2:	2100      	movs	r1, #0
 80063f4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80063f6:	230c      	movs	r3, #12
 80063f8:	18fb      	adds	r3, r7, r3
 80063fa:	881a      	ldrh	r2, [r3, #0]
 80063fc:	230f      	movs	r3, #15
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	7819      	ldrb	r1, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	0018      	movs	r0, r3
 8006406:	f7ff fad9 	bl	80059bc <HAL_I2C_AddrCallback>
}
 800640a:	e007      	b.n	800641c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2208      	movs	r2, #8
 8006412:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2240      	movs	r2, #64	; 0x40
 8006418:	2100      	movs	r1, #0
 800641a:	5499      	strb	r1, [r3, r2]
}
 800641c:	46c0      	nop			; (mov r8, r8)
 800641e:	46bd      	mov	sp, r7
 8006420:	b004      	add	sp, #16
 8006422:	bdb0      	pop	{r4, r5, r7, pc}

08006424 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2242      	movs	r2, #66	; 0x42
 8006430:	2100      	movs	r1, #0
 8006432:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2241      	movs	r2, #65	; 0x41
 8006438:	5c9b      	ldrb	r3, [r3, r2]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b21      	cmp	r3, #33	; 0x21
 800643e:	d117      	bne.n	8006470 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2241      	movs	r2, #65	; 0x41
 8006444:	2120      	movs	r1, #32
 8006446:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2211      	movs	r2, #17
 800644c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2101      	movs	r1, #1
 8006458:	0018      	movs	r0, r3
 800645a:	f000 ff1f 	bl	800729c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2240      	movs	r2, #64	; 0x40
 8006462:	2100      	movs	r1, #0
 8006464:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	0018      	movs	r0, r3
 800646a:	f7ff fa87 	bl	800597c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800646e:	e016      	b.n	800649e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2241      	movs	r2, #65	; 0x41
 8006474:	2120      	movs	r1, #32
 8006476:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2212      	movs	r2, #18
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2102      	movs	r1, #2
 8006488:	0018      	movs	r0, r3
 800648a:	f000 ff07 	bl	800729c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2240      	movs	r2, #64	; 0x40
 8006492:	2100      	movs	r1, #0
 8006494:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	0018      	movs	r0, r3
 800649a:	f7ff fa77 	bl	800598c <HAL_I2C_MasterRxCpltCallback>
}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	46bd      	mov	sp, r7
 80064a2:	b002      	add	sp, #8
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2242      	movs	r2, #66	; 0x42
 80064bc:	2100      	movs	r1, #0
 80064be:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	0b9b      	lsrs	r3, r3, #14
 80064c4:	001a      	movs	r2, r3
 80064c6:	2301      	movs	r3, #1
 80064c8:	4013      	ands	r3, r2
 80064ca:	d008      	beq.n	80064de <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4925      	ldr	r1, [pc, #148]	; (800656c <I2C_ITSlaveSeqCplt+0xc4>)
 80064d8:	400a      	ands	r2, r1
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	e00d      	b.n	80064fa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	0bdb      	lsrs	r3, r3, #15
 80064e2:	001a      	movs	r2, r3
 80064e4:	2301      	movs	r3, #1
 80064e6:	4013      	ands	r3, r2
 80064e8:	d007      	beq.n	80064fa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	491e      	ldr	r1, [pc, #120]	; (8006570 <I2C_ITSlaveSeqCplt+0xc8>)
 80064f6:	400a      	ands	r2, r1
 80064f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2241      	movs	r2, #65	; 0x41
 80064fe:	5c9b      	ldrb	r3, [r3, r2]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b29      	cmp	r3, #41	; 0x29
 8006504:	d114      	bne.n	8006530 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2241      	movs	r2, #65	; 0x41
 800650a:	2128      	movs	r1, #40	; 0x28
 800650c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2221      	movs	r2, #33	; 0x21
 8006512:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2101      	movs	r1, #1
 8006518:	0018      	movs	r0, r3
 800651a:	f000 febf 	bl	800729c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2240      	movs	r2, #64	; 0x40
 8006522:	2100      	movs	r1, #0
 8006524:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	0018      	movs	r0, r3
 800652a:	f7ff fa37 	bl	800599c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800652e:	e019      	b.n	8006564 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2241      	movs	r2, #65	; 0x41
 8006534:	5c9b      	ldrb	r3, [r3, r2]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b2a      	cmp	r3, #42	; 0x2a
 800653a:	d113      	bne.n	8006564 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2241      	movs	r2, #65	; 0x41
 8006540:	2128      	movs	r1, #40	; 0x28
 8006542:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2222      	movs	r2, #34	; 0x22
 8006548:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2102      	movs	r1, #2
 800654e:	0018      	movs	r0, r3
 8006550:	f000 fea4 	bl	800729c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2240      	movs	r2, #64	; 0x40
 8006558:	2100      	movs	r1, #0
 800655a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	0018      	movs	r0, r3
 8006560:	f7ff fa24 	bl	80059ac <HAL_I2C_SlaveRxCpltCallback>
}
 8006564:	46c0      	nop			; (mov r8, r8)
 8006566:	46bd      	mov	sp, r7
 8006568:	b004      	add	sp, #16
 800656a:	bd80      	pop	{r7, pc}
 800656c:	ffffbfff 	.word	0xffffbfff
 8006570:	ffff7fff 	.word	0xffff7fff

08006574 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2220      	movs	r2, #32
 8006588:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2241      	movs	r2, #65	; 0x41
 800658e:	5c9b      	ldrb	r3, [r3, r2]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b21      	cmp	r3, #33	; 0x21
 8006594:	d108      	bne.n	80065a8 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2101      	movs	r1, #1
 800659a:	0018      	movs	r0, r3
 800659c:	f000 fe7e 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2211      	movs	r2, #17
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
 80065a6:	e00d      	b.n	80065c4 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2241      	movs	r2, #65	; 0x41
 80065ac:	5c9b      	ldrb	r3, [r3, r2]
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b22      	cmp	r3, #34	; 0x22
 80065b2:	d107      	bne.n	80065c4 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2102      	movs	r1, #2
 80065b8:	0018      	movs	r0, r3
 80065ba:	f000 fe6f 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2212      	movs	r2, #18
 80065c2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4950      	ldr	r1, [pc, #320]	; (8006710 <I2C_ITMasterCplt+0x19c>)
 80065d0:	400a      	ands	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a4d      	ldr	r2, [pc, #308]	; (8006714 <I2C_ITMasterCplt+0x1a0>)
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	091b      	lsrs	r3, r3, #4
 80065e4:	001a      	movs	r2, r3
 80065e6:	2301      	movs	r3, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	d009      	beq.n	8006600 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2210      	movs	r2, #16
 80065f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f8:	2204      	movs	r2, #4
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2241      	movs	r2, #65	; 0x41
 8006604:	5c9b      	ldrb	r3, [r3, r2]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b60      	cmp	r3, #96	; 0x60
 800660a:	d10b      	bne.n	8006624 <I2C_ITMasterCplt+0xb0>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	089b      	lsrs	r3, r3, #2
 8006610:	001a      	movs	r2, r3
 8006612:	2301      	movs	r3, #1
 8006614:	4013      	ands	r3, r2
 8006616:	d005      	beq.n	8006624 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	b2db      	uxtb	r3, r3
 8006620:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006622:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	0018      	movs	r0, r3
 8006628:	f000 faff 	bl	8006c2a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006630:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2241      	movs	r2, #65	; 0x41
 8006636:	5c9b      	ldrb	r3, [r3, r2]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b60      	cmp	r3, #96	; 0x60
 800663c:	d002      	beq.n	8006644 <I2C_ITMasterCplt+0xd0>
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	0011      	movs	r1, r2
 800664c:	0018      	movs	r0, r3
 800664e:	f000 f9e1 	bl	8006a14 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006652:	e058      	b.n	8006706 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2241      	movs	r2, #65	; 0x41
 8006658:	5c9b      	ldrb	r3, [r3, r2]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	2b21      	cmp	r3, #33	; 0x21
 800665e:	d126      	bne.n	80066ae <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2241      	movs	r2, #65	; 0x41
 8006664:	2120      	movs	r1, #32
 8006666:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2242      	movs	r2, #66	; 0x42
 8006672:	5c9b      	ldrb	r3, [r3, r2]
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d10c      	bne.n	8006694 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2242      	movs	r2, #66	; 0x42
 800667e:	2100      	movs	r1, #0
 8006680:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2240      	movs	r2, #64	; 0x40
 8006686:	2100      	movs	r1, #0
 8006688:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	0018      	movs	r0, r3
 800668e:	f7ff f9ad 	bl	80059ec <HAL_I2C_MemTxCpltCallback>
}
 8006692:	e038      	b.n	8006706 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2242      	movs	r2, #66	; 0x42
 8006698:	2100      	movs	r1, #0
 800669a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2240      	movs	r2, #64	; 0x40
 80066a0:	2100      	movs	r1, #0
 80066a2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7ff f968 	bl	800597c <HAL_I2C_MasterTxCpltCallback>
}
 80066ac:	e02b      	b.n	8006706 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2241      	movs	r2, #65	; 0x41
 80066b2:	5c9b      	ldrb	r3, [r3, r2]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2b22      	cmp	r3, #34	; 0x22
 80066b8:	d125      	bne.n	8006706 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2241      	movs	r2, #65	; 0x41
 80066be:	2120      	movs	r1, #32
 80066c0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2242      	movs	r2, #66	; 0x42
 80066cc:	5c9b      	ldrb	r3, [r3, r2]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b40      	cmp	r3, #64	; 0x40
 80066d2:	d10c      	bne.n	80066ee <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2242      	movs	r2, #66	; 0x42
 80066d8:	2100      	movs	r1, #0
 80066da:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2240      	movs	r2, #64	; 0x40
 80066e0:	2100      	movs	r1, #0
 80066e2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f7ff f988 	bl	80059fc <HAL_I2C_MemRxCpltCallback>
}
 80066ec:	e00b      	b.n	8006706 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2242      	movs	r2, #66	; 0x42
 80066f2:	2100      	movs	r1, #0
 80066f4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2240      	movs	r2, #64	; 0x40
 80066fa:	2100      	movs	r1, #0
 80066fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	0018      	movs	r0, r3
 8006702:	f7ff f943 	bl	800598c <HAL_I2C_MasterRxCpltCallback>
}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	46bd      	mov	sp, r7
 800670a:	b006      	add	sp, #24
 800670c:	bd80      	pop	{r7, pc}
 800670e:	46c0      	nop			; (mov r8, r8)
 8006710:	fe00e800 	.word	0xfe00e800
 8006714:	ffff0000 	.word	0xffff0000

08006718 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800672e:	200f      	movs	r0, #15
 8006730:	183b      	adds	r3, r7, r0
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	2141      	movs	r1, #65	; 0x41
 8006736:	5c52      	ldrb	r2, [r2, r1]
 8006738:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2220      	movs	r2, #32
 8006740:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006742:	183b      	adds	r3, r7, r0
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	2b21      	cmp	r3, #33	; 0x21
 8006748:	d003      	beq.n	8006752 <I2C_ITSlaveCplt+0x3a>
 800674a:	183b      	adds	r3, r7, r0
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b29      	cmp	r3, #41	; 0x29
 8006750:	d109      	bne.n	8006766 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006752:	4a7d      	ldr	r2, [pc, #500]	; (8006948 <I2C_ITSlaveCplt+0x230>)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	0011      	movs	r1, r2
 8006758:	0018      	movs	r0, r3
 800675a:	f000 fd9f 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2221      	movs	r2, #33	; 0x21
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
 8006764:	e011      	b.n	800678a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006766:	220f      	movs	r2, #15
 8006768:	18bb      	adds	r3, r7, r2
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b22      	cmp	r3, #34	; 0x22
 800676e:	d003      	beq.n	8006778 <I2C_ITSlaveCplt+0x60>
 8006770:	18bb      	adds	r3, r7, r2
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b2a      	cmp	r3, #42	; 0x2a
 8006776:	d108      	bne.n	800678a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006778:	4a74      	ldr	r2, [pc, #464]	; (800694c <I2C_ITSlaveCplt+0x234>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	0011      	movs	r1, r2
 800677e:	0018      	movs	r0, r3
 8006780:	f000 fd8c 	bl	800729c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2222      	movs	r2, #34	; 0x22
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2180      	movs	r1, #128	; 0x80
 8006796:	0209      	lsls	r1, r1, #8
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	496a      	ldr	r1, [pc, #424]	; (8006950 <I2C_ITSlaveCplt+0x238>)
 80067a8:	400a      	ands	r2, r1
 80067aa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	0018      	movs	r0, r3
 80067b0:	f000 fa3b 	bl	8006c2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	0b9b      	lsrs	r3, r3, #14
 80067b8:	001a      	movs	r2, r3
 80067ba:	2301      	movs	r3, #1
 80067bc:	4013      	ands	r3, r2
 80067be:	d013      	beq.n	80067e8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4962      	ldr	r1, [pc, #392]	; (8006954 <I2C_ITSlaveCplt+0x23c>)
 80067cc:	400a      	ands	r2, r1
 80067ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d020      	beq.n	800681a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067e6:	e018      	b.n	800681a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	0bdb      	lsrs	r3, r3, #15
 80067ec:	001a      	movs	r2, r3
 80067ee:	2301      	movs	r3, #1
 80067f0:	4013      	ands	r3, r2
 80067f2:	d012      	beq.n	800681a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4956      	ldr	r1, [pc, #344]	; (8006958 <I2C_ITSlaveCplt+0x240>)
 8006800:	400a      	ands	r2, r1
 8006802:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006808:	2b00      	cmp	r3, #0
 800680a:	d006      	beq.n	800681a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	b29a      	uxth	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	089b      	lsrs	r3, r3, #2
 800681e:	001a      	movs	r2, r3
 8006820:	2301      	movs	r3, #1
 8006822:	4013      	ands	r3, r2
 8006824:	d020      	beq.n	8006868 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2204      	movs	r2, #4
 800682a:	4393      	bics	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00c      	beq.n	8006868 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	b29a      	uxth	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d005      	beq.n	800687e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006876:	2204      	movs	r2, #4
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2242      	movs	r2, #66	; 0x42
 8006882:	2100      	movs	r1, #0
 8006884:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006890:	2b00      	cmp	r3, #0
 8006892:	d013      	beq.n	80068bc <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	0011      	movs	r1, r2
 800689c:	0018      	movs	r0, r3
 800689e:	f000 f8b9 	bl	8006a14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2241      	movs	r2, #65	; 0x41
 80068a6:	5c9b      	ldrb	r3, [r3, r2]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b28      	cmp	r3, #40	; 0x28
 80068ac:	d147      	bne.n	800693e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	0011      	movs	r1, r2
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 f853 	bl	8006960 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068ba:	e040      	b.n	800693e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c0:	4a26      	ldr	r2, [pc, #152]	; (800695c <I2C_ITSlaveCplt+0x244>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d016      	beq.n	80068f4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	0018      	movs	r0, r3
 80068ca:	f7ff fded 	bl	80064a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a22      	ldr	r2, [pc, #136]	; (800695c <I2C_ITSlaveCplt+0x244>)
 80068d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2241      	movs	r2, #65	; 0x41
 80068d8:	2120      	movs	r1, #32
 80068da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2240      	movs	r2, #64	; 0x40
 80068e6:	2100      	movs	r1, #0
 80068e8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff f875 	bl	80059dc <HAL_I2C_ListenCpltCallback>
}
 80068f2:	e024      	b.n	800693e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2241      	movs	r2, #65	; 0x41
 80068f8:	5c9b      	ldrb	r3, [r3, r2]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b22      	cmp	r3, #34	; 0x22
 80068fe:	d10f      	bne.n	8006920 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2241      	movs	r2, #65	; 0x41
 8006904:	2120      	movs	r1, #32
 8006906:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2240      	movs	r2, #64	; 0x40
 8006912:	2100      	movs	r1, #0
 8006914:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	0018      	movs	r0, r3
 800691a:	f7ff f847 	bl	80059ac <HAL_I2C_SlaveRxCpltCallback>
}
 800691e:	e00e      	b.n	800693e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2241      	movs	r2, #65	; 0x41
 8006924:	2120      	movs	r1, #32
 8006926:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2240      	movs	r2, #64	; 0x40
 8006932:	2100      	movs	r1, #0
 8006934:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0018      	movs	r0, r3
 800693a:	f7ff f82f 	bl	800599c <HAL_I2C_SlaveTxCpltCallback>
}
 800693e:	46c0      	nop			; (mov r8, r8)
 8006940:	46bd      	mov	sp, r7
 8006942:	b006      	add	sp, #24
 8006944:	bd80      	pop	{r7, pc}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	00008001 	.word	0x00008001
 800694c:	00008002 	.word	0x00008002
 8006950:	fe00e800 	.word	0xfe00e800
 8006954:	ffffbfff 	.word	0xffffbfff
 8006958:	ffff7fff 	.word	0xffff7fff
 800695c:	ffff0000 	.word	0xffff0000

08006960 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a27      	ldr	r2, [pc, #156]	; (8006a0c <I2C_ITListenCplt+0xac>)
 800696e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2241      	movs	r2, #65	; 0x41
 800697a:	2120      	movs	r1, #32
 800697c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2242      	movs	r2, #66	; 0x42
 8006982:	2100      	movs	r1, #0
 8006984:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	089b      	lsrs	r3, r3, #2
 8006990:	001a      	movs	r2, r3
 8006992:	2301      	movs	r3, #1
 8006994:	4013      	ands	r3, r2
 8006996:	d022      	beq.n	80069de <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d012      	beq.n	80069de <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	3b01      	subs	r3, #1
 80069be:	b29a      	uxth	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	3b01      	subs	r3, #1
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d6:	2204      	movs	r2, #4
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80069de:	4a0c      	ldr	r2, [pc, #48]	; (8006a10 <I2C_ITListenCplt+0xb0>)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	0011      	movs	r1, r2
 80069e4:	0018      	movs	r0, r3
 80069e6:	f000 fc59 	bl	800729c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2210      	movs	r2, #16
 80069f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2240      	movs	r2, #64	; 0x40
 80069f6:	2100      	movs	r1, #0
 80069f8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7fe ffed 	bl	80059dc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006a02:	46c0      	nop			; (mov r8, r8)
 8006a04:	46bd      	mov	sp, r7
 8006a06:	b002      	add	sp, #8
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	ffff0000 	.word	0xffff0000
 8006a10:	00008003 	.word	0x00008003

08006a14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006a1e:	200f      	movs	r0, #15
 8006a20:	183b      	adds	r3, r7, r0
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	2141      	movs	r1, #65	; 0x41
 8006a26:	5c52      	ldrb	r2, [r2, r1]
 8006a28:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2242      	movs	r2, #66	; 0x42
 8006a2e:	2100      	movs	r1, #0
 8006a30:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a62      	ldr	r2, [pc, #392]	; (8006bc0 <I2C_ITError+0x1ac>)
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	431a      	orrs	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006a4a:	183b      	adds	r3, r7, r0
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b28      	cmp	r3, #40	; 0x28
 8006a50:	d007      	beq.n	8006a62 <I2C_ITError+0x4e>
 8006a52:	183b      	adds	r3, r7, r0
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b29      	cmp	r3, #41	; 0x29
 8006a58:	d003      	beq.n	8006a62 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006a5a:	183b      	adds	r3, r7, r0
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a60:	d10c      	bne.n	8006a7c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2103      	movs	r1, #3
 8006a66:	0018      	movs	r0, r3
 8006a68:	f000 fc18 	bl	800729c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2241      	movs	r2, #65	; 0x41
 8006a70:	2128      	movs	r1, #40	; 0x28
 8006a72:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a53      	ldr	r2, [pc, #332]	; (8006bc4 <I2C_ITError+0x1b0>)
 8006a78:	635a      	str	r2, [r3, #52]	; 0x34
 8006a7a:	e012      	b.n	8006aa2 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006a7c:	4a52      	ldr	r2, [pc, #328]	; (8006bc8 <I2C_ITError+0x1b4>)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	0011      	movs	r1, r2
 8006a82:	0018      	movs	r0, r3
 8006a84:	f000 fc0a 	bl	800729c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2241      	movs	r2, #65	; 0x41
 8006a8c:	5c9b      	ldrb	r3, [r3, r2]
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b60      	cmp	r3, #96	; 0x60
 8006a92:	d003      	beq.n	8006a9c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2241      	movs	r2, #65	; 0x41
 8006a98:	2120      	movs	r1, #32
 8006a9a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d03b      	beq.n	8006b28 <I2C_ITError+0x114>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b11      	cmp	r3, #17
 8006ab4:	d002      	beq.n	8006abc <I2C_ITError+0xa8>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b21      	cmp	r3, #33	; 0x21
 8006aba:	d135      	bne.n	8006b28 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	2380      	movs	r3, #128	; 0x80
 8006ac4:	01db      	lsls	r3, r3, #7
 8006ac6:	401a      	ands	r2, r3
 8006ac8:	2380      	movs	r3, #128	; 0x80
 8006aca:	01db      	lsls	r3, r3, #7
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d107      	bne.n	8006ae0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	493c      	ldr	r1, [pc, #240]	; (8006bcc <I2C_ITError+0x1b8>)
 8006adc:	400a      	ands	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f7fe f819 	bl	8004b1c <HAL_DMA_GetState>
 8006aea:	0003      	movs	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d016      	beq.n	8006b1e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	4a36      	ldr	r2, [pc, #216]	; (8006bd0 <I2C_ITError+0x1bc>)
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2240      	movs	r2, #64	; 0x40
 8006afc:	2100      	movs	r1, #0
 8006afe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b04:	0018      	movs	r0, r3
 8006b06:	f7fd ff9f 	bl	8004a48 <HAL_DMA_Abort_IT>
 8006b0a:	1e03      	subs	r3, r0, #0
 8006b0c:	d051      	beq.n	8006bb2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	0018      	movs	r0, r3
 8006b1a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b1c:	e049      	b.n	8006bb2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	0018      	movs	r0, r3
 8006b22:	f000 f859 	bl	8006bd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b26:	e044      	b.n	8006bb2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d03b      	beq.n	8006ba8 <I2C_ITError+0x194>
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2b12      	cmp	r3, #18
 8006b34:	d002      	beq.n	8006b3c <I2C_ITError+0x128>
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	2b22      	cmp	r3, #34	; 0x22
 8006b3a:	d135      	bne.n	8006ba8 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	2380      	movs	r3, #128	; 0x80
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	401a      	ands	r2, r3
 8006b48:	2380      	movs	r3, #128	; 0x80
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d107      	bne.n	8006b60 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	491e      	ldr	r1, [pc, #120]	; (8006bd4 <I2C_ITError+0x1c0>)
 8006b5c:	400a      	ands	r2, r1
 8006b5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b64:	0018      	movs	r0, r3
 8006b66:	f7fd ffd9 	bl	8004b1c <HAL_DMA_GetState>
 8006b6a:	0003      	movs	r3, r0
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d016      	beq.n	8006b9e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b74:	4a16      	ldr	r2, [pc, #88]	; (8006bd0 <I2C_ITError+0x1bc>)
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2240      	movs	r2, #64	; 0x40
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b84:	0018      	movs	r0, r3
 8006b86:	f7fd ff5f 	bl	8004a48 <HAL_DMA_Abort_IT>
 8006b8a:	1e03      	subs	r3, r0, #0
 8006b8c:	d013      	beq.n	8006bb6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b98:	0018      	movs	r0, r3
 8006b9a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b9c:	e00b      	b.n	8006bb6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f000 f819 	bl	8006bd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ba6:	e006      	b.n	8006bb6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	0018      	movs	r0, r3
 8006bac:	f000 f814 	bl	8006bd8 <I2C_TreatErrorCallback>
  }
}
 8006bb0:	e002      	b.n	8006bb8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	e000      	b.n	8006bb8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bb6:	46c0      	nop			; (mov r8, r8)
}
 8006bb8:	46c0      	nop			; (mov r8, r8)
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b004      	add	sp, #16
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	ffff0000 	.word	0xffff0000
 8006bc4:	08005cb1 	.word	0x08005cb1
 8006bc8:	00008003 	.word	0x00008003
 8006bcc:	ffffbfff 	.word	0xffffbfff
 8006bd0:	08006de3 	.word	0x08006de3
 8006bd4:	ffff7fff 	.word	0xffff7fff

08006bd8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2241      	movs	r2, #65	; 0x41
 8006be4:	5c9b      	ldrb	r3, [r3, r2]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b60      	cmp	r3, #96	; 0x60
 8006bea:	d10f      	bne.n	8006c0c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2241      	movs	r2, #65	; 0x41
 8006bf0:	2120      	movs	r1, #32
 8006bf2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2240      	movs	r2, #64	; 0x40
 8006bfe:	2100      	movs	r1, #0
 8006c00:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	0018      	movs	r0, r3
 8006c06:	f7fe ff09 	bl	8005a1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c0a:	e00a      	b.n	8006c22 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2240      	movs	r2, #64	; 0x40
 8006c16:	2100      	movs	r1, #0
 8006c18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f7fe fef5 	bl	8005a0c <HAL_I2C_ErrorCallback>
}
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b002      	add	sp, #8
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d103      	bne.n	8006c48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2200      	movs	r2, #0
 8006c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d007      	beq.n	8006c66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	699a      	ldr	r2, [r3, #24]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2101      	movs	r1, #1
 8006c62:	430a      	orrs	r2, r1
 8006c64:	619a      	str	r2, [r3, #24]
  }
}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	b002      	add	sp, #8
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c7c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4920      	ldr	r1, [pc, #128]	; (8006d0c <I2C_DMAMasterTransmitCplt+0x9c>)
 8006c8a:	400a      	ands	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d105      	bne.n	8006ca4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2120      	movs	r1, #32
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	f000 fa95 	bl	80071cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006ca2:	e02e      	b.n	8006d02 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006cac:	189a      	adds	r2, r3, r2
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2bff      	cmp	r3, #255	; 0xff
 8006cba:	d903      	bls.n	8006cc4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	22ff      	movs	r2, #255	; 0xff
 8006cc0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cc2:	e004      	b.n	8006cce <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	0019      	movs	r1, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3328      	adds	r3, #40	; 0x28
 8006cde:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006ce4:	f7fd fe2a 	bl	800493c <HAL_DMA_Start_IT>
 8006ce8:	1e03      	subs	r3, r0, #0
 8006cea:	d005      	beq.n	8006cf8 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2110      	movs	r1, #16
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f7ff fe8f 	bl	8006a14 <I2C_ITError>
}
 8006cf6:	e004      	b.n	8006d02 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2140      	movs	r1, #64	; 0x40
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 fa65 	bl	80071cc <I2C_Enable_IRQ>
}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	b004      	add	sp, #16
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	ffffbfff 	.word	0xffffbfff

08006d10 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4920      	ldr	r1, [pc, #128]	; (8006dac <I2C_DMAMasterReceiveCplt+0x9c>)
 8006d2a:	400a      	ands	r2, r1
 8006d2c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d105      	bne.n	8006d44 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2120      	movs	r1, #32
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f000 fa45 	bl	80071cc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006d42:	e02e      	b.n	8006da2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006d4c:	189a      	adds	r2, r3, r2
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2bff      	cmp	r3, #255	; 0xff
 8006d5a:	d903      	bls.n	8006d64 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	22ff      	movs	r2, #255	; 0xff
 8006d60:	851a      	strh	r2, [r3, #40]	; 0x28
 8006d62:	e004      	b.n	8006d6e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	0019      	movs	r1, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8006d84:	f7fd fdda 	bl	800493c <HAL_DMA_Start_IT>
 8006d88:	1e03      	subs	r3, r0, #0
 8006d8a:	d005      	beq.n	8006d98 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2110      	movs	r1, #16
 8006d90:	0018      	movs	r0, r3
 8006d92:	f7ff fe3f 	bl	8006a14 <I2C_ITError>
}
 8006d96:	e004      	b.n	8006da2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2140      	movs	r1, #64	; 0x40
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	f000 fa15 	bl	80071cc <I2C_Enable_IRQ>
}
 8006da2:	46c0      	nop			; (mov r8, r8)
 8006da4:	46bd      	mov	sp, r7
 8006da6:	b004      	add	sp, #16
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	46c0      	nop			; (mov r8, r8)
 8006dac:	ffff7fff 	.word	0xffff7fff

08006db0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2180      	movs	r1, #128	; 0x80
 8006dca:	0209      	lsls	r1, r1, #8
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2110      	movs	r1, #16
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7ff fe1d 	bl	8006a14 <I2C_ITError>
}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	b004      	add	sp, #16
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d003      	beq.n	8006e10 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7ff fee0 	bl	8006bd8 <I2C_TreatErrorCallback>
}
 8006e18:	46c0      	nop			; (mov r8, r8)
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b004      	add	sp, #16
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	1dfb      	adds	r3, r7, #7
 8006e2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e30:	e021      	b.n	8006e76 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	d01e      	beq.n	8006e76 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e38:	f7fc fd46 	bl	80038c8 <HAL_GetTick>
 8006e3c:	0002      	movs	r2, r0
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d302      	bcc.n	8006e4e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d113      	bne.n	8006e76 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e52:	2220      	movs	r2, #32
 8006e54:	431a      	orrs	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2241      	movs	r2, #65	; 0x41
 8006e5e:	2120      	movs	r1, #32
 8006e60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2242      	movs	r2, #66	; 0x42
 8006e66:	2100      	movs	r1, #0
 8006e68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2240      	movs	r2, #64	; 0x40
 8006e6e:	2100      	movs	r1, #0
 8006e70:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e00f      	b.n	8006e96 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	4013      	ands	r3, r2
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	425a      	negs	r2, r3
 8006e86:	4153      	adcs	r3, r2
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	001a      	movs	r2, r3
 8006e8c:	1dfb      	adds	r3, r7, #7
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d0ce      	beq.n	8006e32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	0018      	movs	r0, r3
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	b004      	add	sp, #16
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006eaa:	e02b      	b.n	8006f04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	f000 f8da 	bl	800706c <I2C_IsAcknowledgeFailed>
 8006eb8:	1e03      	subs	r3, r0, #0
 8006eba:	d001      	beq.n	8006ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e029      	b.n	8006f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	d01e      	beq.n	8006f04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec6:	f7fc fcff 	bl	80038c8 <HAL_GetTick>
 8006eca:	0002      	movs	r2, r0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d302      	bcc.n	8006edc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d113      	bne.n	8006f04 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2241      	movs	r2, #65	; 0x41
 8006eec:	2120      	movs	r1, #32
 8006eee:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2242      	movs	r2, #66	; 0x42
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2240      	movs	r2, #64	; 0x40
 8006efc:	2100      	movs	r1, #0
 8006efe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e007      	b.n	8006f14 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d1cc      	bne.n	8006eac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	0018      	movs	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b004      	add	sp, #16
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f28:	e028      	b.n	8006f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	0018      	movs	r0, r3
 8006f32:	f000 f89b 	bl	800706c <I2C_IsAcknowledgeFailed>
 8006f36:	1e03      	subs	r3, r0, #0
 8006f38:	d001      	beq.n	8006f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e026      	b.n	8006f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3e:	f7fc fcc3 	bl	80038c8 <HAL_GetTick>
 8006f42:	0002      	movs	r2, r0
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d302      	bcc.n	8006f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d113      	bne.n	8006f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f58:	2220      	movs	r2, #32
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2241      	movs	r2, #65	; 0x41
 8006f64:	2120      	movs	r1, #32
 8006f66:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2242      	movs	r2, #66	; 0x42
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2240      	movs	r2, #64	; 0x40
 8006f74:	2100      	movs	r1, #0
 8006f76:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e007      	b.n	8006f8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	2220      	movs	r2, #32
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b20      	cmp	r3, #32
 8006f88:	d1cf      	bne.n	8006f2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	b004      	add	sp, #16
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fa0:	e055      	b.n	800704e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f000 f85f 	bl	800706c <I2C_IsAcknowledgeFailed>
 8006fae:	1e03      	subs	r3, r0, #0
 8006fb0:	d001      	beq.n	8006fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e053      	b.n	800705e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d129      	bne.n	8007018 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	4013      	ands	r3, r2
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d105      	bne.n	8006fde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e03f      	b.n	800705e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	491d      	ldr	r1, [pc, #116]	; (8007068 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006ff2:	400a      	ands	r2, r1
 8006ff4:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2241      	movs	r2, #65	; 0x41
 8007000:	2120      	movs	r1, #32
 8007002:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2242      	movs	r2, #66	; 0x42
 8007008:	2100      	movs	r1, #0
 800700a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2240      	movs	r2, #64	; 0x40
 8007010:	2100      	movs	r1, #0
 8007012:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e022      	b.n	800705e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007018:	f7fc fc56 	bl	80038c8 <HAL_GetTick>
 800701c:	0002      	movs	r2, r0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	429a      	cmp	r2, r3
 8007026:	d302      	bcc.n	800702e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10f      	bne.n	800704e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	2220      	movs	r2, #32
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2241      	movs	r2, #65	; 0x41
 800703e:	2120      	movs	r1, #32
 8007040:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2240      	movs	r2, #64	; 0x40
 8007046:	2100      	movs	r1, #0
 8007048:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e007      	b.n	800705e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	2204      	movs	r2, #4
 8007056:	4013      	ands	r3, r2
 8007058:	2b04      	cmp	r3, #4
 800705a:	d1a2      	bne.n	8006fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	0018      	movs	r0, r3
 8007060:	46bd      	mov	sp, r7
 8007062:	b004      	add	sp, #16
 8007064:	bd80      	pop	{r7, pc}
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	fe00e800 	.word	0xfe00e800

0800706c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	2210      	movs	r2, #16
 8007080:	4013      	ands	r3, r2
 8007082:	2b10      	cmp	r3, #16
 8007084:	d164      	bne.n	8007150 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	2380      	movs	r3, #128	; 0x80
 800708e:	049b      	lsls	r3, r3, #18
 8007090:	401a      	ands	r2, r3
 8007092:	2380      	movs	r3, #128	; 0x80
 8007094:	049b      	lsls	r3, r3, #18
 8007096:	429a      	cmp	r2, r3
 8007098:	d02b      	beq.n	80070f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2180      	movs	r1, #128	; 0x80
 80070a6:	01c9      	lsls	r1, r1, #7
 80070a8:	430a      	orrs	r2, r1
 80070aa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070ac:	e021      	b.n	80070f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	3301      	adds	r3, #1
 80070b2:	d01e      	beq.n	80070f2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070b4:	f7fc fc08 	bl	80038c8 <HAL_GetTick>
 80070b8:	0002      	movs	r2, r0
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d302      	bcc.n	80070ca <I2C_IsAcknowledgeFailed+0x5e>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d113      	bne.n	80070f2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ce:	2220      	movs	r2, #32
 80070d0:	431a      	orrs	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2241      	movs	r2, #65	; 0x41
 80070da:	2120      	movs	r1, #32
 80070dc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2242      	movs	r2, #66	; 0x42
 80070e2:	2100      	movs	r1, #0
 80070e4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2240      	movs	r2, #64	; 0x40
 80070ea:	2100      	movs	r1, #0
 80070ec:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e02f      	b.n	8007152 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	2220      	movs	r2, #32
 80070fa:	4013      	ands	r3, r2
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d1d6      	bne.n	80070ae <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2210      	movs	r2, #16
 8007106:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2220      	movs	r2, #32
 800710e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	0018      	movs	r0, r3
 8007114:	f7ff fd89 	bl	8006c2a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	490e      	ldr	r1, [pc, #56]	; (800715c <I2C_IsAcknowledgeFailed+0xf0>)
 8007124:	400a      	ands	r2, r1
 8007126:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712c:	2204      	movs	r2, #4
 800712e:	431a      	orrs	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2241      	movs	r2, #65	; 0x41
 8007138:	2120      	movs	r1, #32
 800713a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2242      	movs	r2, #66	; 0x42
 8007140:	2100      	movs	r1, #0
 8007142:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2240      	movs	r2, #64	; 0x40
 8007148:	2100      	movs	r1, #0
 800714a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e000      	b.n	8007152 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	0018      	movs	r0, r3
 8007154:	46bd      	mov	sp, r7
 8007156:	b004      	add	sp, #16
 8007158:	bd80      	pop	{r7, pc}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	fe00e800 	.word	0xfe00e800

08007160 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	0008      	movs	r0, r1
 800716a:	0011      	movs	r1, r2
 800716c:	607b      	str	r3, [r7, #4]
 800716e:	240a      	movs	r4, #10
 8007170:	193b      	adds	r3, r7, r4
 8007172:	1c02      	adds	r2, r0, #0
 8007174:	801a      	strh	r2, [r3, #0]
 8007176:	2009      	movs	r0, #9
 8007178:	183b      	adds	r3, r7, r0
 800717a:	1c0a      	adds	r2, r1, #0
 800717c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	0d51      	lsrs	r1, r2, #21
 8007188:	2280      	movs	r2, #128	; 0x80
 800718a:	00d2      	lsls	r2, r2, #3
 800718c:	400a      	ands	r2, r1
 800718e:	490e      	ldr	r1, [pc, #56]	; (80071c8 <I2C_TransferConfig+0x68>)
 8007190:	430a      	orrs	r2, r1
 8007192:	43d2      	mvns	r2, r2
 8007194:	401a      	ands	r2, r3
 8007196:	0011      	movs	r1, r2
 8007198:	193b      	adds	r3, r7, r4
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	059b      	lsls	r3, r3, #22
 800719e:	0d9a      	lsrs	r2, r3, #22
 80071a0:	183b      	adds	r3, r7, r0
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	0418      	lsls	r0, r3, #16
 80071a6:	23ff      	movs	r3, #255	; 0xff
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	4003      	ands	r3, r0
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	431a      	orrs	r2, r3
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	46bd      	mov	sp, r7
 80071c2:	b005      	add	sp, #20
 80071c4:	bd90      	pop	{r4, r7, pc}
 80071c6:	46c0      	nop			; (mov r8, r8)
 80071c8:	03ff63ff 	.word	0x03ff63ff

080071cc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	000a      	movs	r2, r1
 80071d6:	1cbb      	adds	r3, r7, #2
 80071d8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071e2:	4b2c      	ldr	r3, [pc, #176]	; (8007294 <I2C_Enable_IRQ+0xc8>)
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d004      	beq.n	80071f2 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80071ec:	4b2a      	ldr	r3, [pc, #168]	; (8007298 <I2C_Enable_IRQ+0xcc>)
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d121      	bne.n	8007236 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80071f2:	1cbb      	adds	r3, r7, #2
 80071f4:	2200      	movs	r2, #0
 80071f6:	5e9b      	ldrsh	r3, [r3, r2]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	da03      	bge.n	8007204 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	22b8      	movs	r2, #184	; 0xb8
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007204:	1cbb      	adds	r3, r7, #2
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	2b10      	cmp	r3, #16
 800720a:	d103      	bne.n	8007214 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2290      	movs	r2, #144	; 0x90
 8007210:	4313      	orrs	r3, r2
 8007212:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007214:	1cbb      	adds	r3, r7, #2
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	2b20      	cmp	r3, #32
 800721a:	d103      	bne.n	8007224 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2260      	movs	r2, #96	; 0x60
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007224:	1cbb      	adds	r3, r7, #2
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d127      	bne.n	800727c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2240      	movs	r2, #64	; 0x40
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007234:	e022      	b.n	800727c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007236:	1cbb      	adds	r3, r7, #2
 8007238:	2200      	movs	r2, #0
 800723a:	5e9b      	ldrsh	r3, [r3, r2]
 800723c:	2b00      	cmp	r3, #0
 800723e:	da03      	bge.n	8007248 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	22b8      	movs	r2, #184	; 0xb8
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007248:	1cbb      	adds	r3, r7, #2
 800724a:	881b      	ldrh	r3, [r3, #0]
 800724c:	2201      	movs	r2, #1
 800724e:	4013      	ands	r3, r2
 8007250:	d003      	beq.n	800725a <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	22f2      	movs	r2, #242	; 0xf2
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800725a:	1cbb      	adds	r3, r7, #2
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	2202      	movs	r2, #2
 8007260:	4013      	ands	r3, r2
 8007262:	d003      	beq.n	800726c <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	22f4      	movs	r2, #244	; 0xf4
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800726c:	1cbb      	adds	r3, r7, #2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	2b20      	cmp	r3, #32
 8007272:	d103      	bne.n	800727c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2220      	movs	r2, #32
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6819      	ldr	r1, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	430a      	orrs	r2, r1
 800728a:	601a      	str	r2, [r3, #0]
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	b004      	add	sp, #16
 8007292:	bd80      	pop	{r7, pc}
 8007294:	08005ed9 	.word	0x08005ed9
 8007298:	080060f1 	.word	0x080060f1

0800729c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	000a      	movs	r2, r1
 80072a6:	1cbb      	adds	r3, r7, #2
 80072a8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80072ae:	1cbb      	adds	r3, r7, #2
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	2201      	movs	r2, #1
 80072b4:	4013      	ands	r3, r2
 80072b6:	d010      	beq.n	80072da <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2242      	movs	r2, #66	; 0x42
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2241      	movs	r2, #65	; 0x41
 80072c4:	5c9b      	ldrb	r3, [r3, r2]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	001a      	movs	r2, r3
 80072ca:	2328      	movs	r3, #40	; 0x28
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b28      	cmp	r3, #40	; 0x28
 80072d0:	d003      	beq.n	80072da <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	22b0      	movs	r2, #176	; 0xb0
 80072d6:	4313      	orrs	r3, r2
 80072d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80072da:	1cbb      	adds	r3, r7, #2
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	2202      	movs	r2, #2
 80072e0:	4013      	ands	r3, r2
 80072e2:	d010      	beq.n	8007306 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2244      	movs	r2, #68	; 0x44
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2241      	movs	r2, #65	; 0x41
 80072f0:	5c9b      	ldrb	r3, [r3, r2]
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	001a      	movs	r2, r3
 80072f6:	2328      	movs	r3, #40	; 0x28
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b28      	cmp	r3, #40	; 0x28
 80072fc:	d003      	beq.n	8007306 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	22b0      	movs	r2, #176	; 0xb0
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007306:	1cbb      	adds	r3, r7, #2
 8007308:	2200      	movs	r2, #0
 800730a:	5e9b      	ldrsh	r3, [r3, r2]
 800730c:	2b00      	cmp	r3, #0
 800730e:	da03      	bge.n	8007318 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	22b8      	movs	r2, #184	; 0xb8
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007318:	1cbb      	adds	r3, r7, #2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	2b10      	cmp	r3, #16
 800731e:	d103      	bne.n	8007328 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2290      	movs	r2, #144	; 0x90
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007328:	1cbb      	adds	r3, r7, #2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	2b20      	cmp	r3, #32
 800732e:	d103      	bne.n	8007338 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2220      	movs	r2, #32
 8007334:	4313      	orrs	r3, r2
 8007336:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007338:	1cbb      	adds	r3, r7, #2
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d103      	bne.n	8007348 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2240      	movs	r2, #64	; 0x40
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	43d9      	mvns	r1, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	400a      	ands	r2, r1
 8007358:	601a      	str	r2, [r3, #0]
}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	46bd      	mov	sp, r7
 800735e:	b004      	add	sp, #16
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2241      	movs	r2, #65	; 0x41
 8007372:	5c9b      	ldrb	r3, [r3, r2]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b20      	cmp	r3, #32
 8007378:	d138      	bne.n	80073ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2240      	movs	r2, #64	; 0x40
 800737e:	5c9b      	ldrb	r3, [r3, r2]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007384:	2302      	movs	r3, #2
 8007386:	e032      	b.n	80073ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2240      	movs	r2, #64	; 0x40
 800738c:	2101      	movs	r1, #1
 800738e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2241      	movs	r2, #65	; 0x41
 8007394:	2124      	movs	r1, #36	; 0x24
 8007396:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2101      	movs	r1, #1
 80073a4:	438a      	bics	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4911      	ldr	r1, [pc, #68]	; (80073f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80073b4:	400a      	ands	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6819      	ldr	r1, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2101      	movs	r1, #1
 80073d4:	430a      	orrs	r2, r1
 80073d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2241      	movs	r2, #65	; 0x41
 80073dc:	2120      	movs	r1, #32
 80073de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2240      	movs	r2, #64	; 0x40
 80073e4:	2100      	movs	r1, #0
 80073e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
  }
}
 80073ee:	0018      	movs	r0, r3
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b002      	add	sp, #8
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	ffffefff 	.word	0xffffefff

080073fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2241      	movs	r2, #65	; 0x41
 800740a:	5c9b      	ldrb	r3, [r3, r2]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b20      	cmp	r3, #32
 8007410:	d139      	bne.n	8007486 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2240      	movs	r2, #64	; 0x40
 8007416:	5c9b      	ldrb	r3, [r3, r2]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d101      	bne.n	8007420 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800741c:	2302      	movs	r3, #2
 800741e:	e033      	b.n	8007488 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2240      	movs	r2, #64	; 0x40
 8007424:	2101      	movs	r1, #1
 8007426:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2241      	movs	r2, #65	; 0x41
 800742c:	2124      	movs	r1, #36	; 0x24
 800742e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2101      	movs	r1, #1
 800743c:	438a      	bics	r2, r1
 800743e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a11      	ldr	r2, [pc, #68]	; (8007490 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800744c:	4013      	ands	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	021b      	lsls	r3, r3, #8
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2101      	movs	r1, #1
 800746e:	430a      	orrs	r2, r1
 8007470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2241      	movs	r2, #65	; 0x41
 8007476:	2120      	movs	r1, #32
 8007478:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2240      	movs	r2, #64	; 0x40
 800747e:	2100      	movs	r1, #0
 8007480:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	e000      	b.n	8007488 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007486:	2302      	movs	r3, #2
  }
}
 8007488:	0018      	movs	r0, r3
 800748a:	46bd      	mov	sp, r7
 800748c:	b004      	add	sp, #16
 800748e:	bd80      	pop	{r7, pc}
 8007490:	fffff0ff 	.word	0xfffff0ff

08007494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800749c:	4b19      	ldr	r3, [pc, #100]	; (8007504 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a19      	ldr	r2, [pc, #100]	; (8007508 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	0019      	movs	r1, r3
 80074a6:	4b17      	ldr	r3, [pc, #92]	; (8007504 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	2380      	movs	r3, #128	; 0x80
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d11f      	bne.n	80074f8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80074b8:	4b14      	ldr	r3, [pc, #80]	; (800750c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	0013      	movs	r3, r2
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	189b      	adds	r3, r3, r2
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	4912      	ldr	r1, [pc, #72]	; (8007510 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80074c6:	0018      	movs	r0, r3
 80074c8:	f7f8 fe34 	bl	8000134 <__udivsi3>
 80074cc:	0003      	movs	r3, r0
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074d2:	e008      	b.n	80074e6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3b01      	subs	r3, #1
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	e001      	b.n	80074e6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e009      	b.n	80074fa <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074e6:	4b07      	ldr	r3, [pc, #28]	; (8007504 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80074e8:	695a      	ldr	r2, [r3, #20]
 80074ea:	2380      	movs	r3, #128	; 0x80
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	401a      	ands	r2, r3
 80074f0:	2380      	movs	r3, #128	; 0x80
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d0ed      	beq.n	80074d4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	0018      	movs	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b004      	add	sp, #16
 8007500:	bd80      	pop	{r7, pc}
 8007502:	46c0      	nop			; (mov r8, r8)
 8007504:	40007000 	.word	0x40007000
 8007508:	fffff9ff 	.word	0xfffff9ff
 800750c:	20000000 	.word	0x20000000
 8007510:	000f4240 	.word	0x000f4240

08007514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b088      	sub	sp, #32
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e2f9      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2201      	movs	r2, #1
 800752c:	4013      	ands	r3, r2
 800752e:	d100      	bne.n	8007532 <HAL_RCC_OscConfig+0x1e>
 8007530:	e07c      	b.n	800762c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007532:	4bc3      	ldr	r3, [pc, #780]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	2238      	movs	r2, #56	; 0x38
 8007538:	4013      	ands	r3, r2
 800753a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800753c:	4bc0      	ldr	r3, [pc, #768]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	2203      	movs	r2, #3
 8007542:	4013      	ands	r3, r2
 8007544:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	2b10      	cmp	r3, #16
 800754a:	d102      	bne.n	8007552 <HAL_RCC_OscConfig+0x3e>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b03      	cmp	r3, #3
 8007550:	d002      	beq.n	8007558 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b08      	cmp	r3, #8
 8007556:	d10b      	bne.n	8007570 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007558:	4bb9      	ldr	r3, [pc, #740]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	2380      	movs	r3, #128	; 0x80
 800755e:	029b      	lsls	r3, r3, #10
 8007560:	4013      	ands	r3, r2
 8007562:	d062      	beq.n	800762a <HAL_RCC_OscConfig+0x116>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d15e      	bne.n	800762a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e2d4      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	2380      	movs	r3, #128	; 0x80
 8007576:	025b      	lsls	r3, r3, #9
 8007578:	429a      	cmp	r2, r3
 800757a:	d107      	bne.n	800758c <HAL_RCC_OscConfig+0x78>
 800757c:	4bb0      	ldr	r3, [pc, #704]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	4baf      	ldr	r3, [pc, #700]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007582:	2180      	movs	r1, #128	; 0x80
 8007584:	0249      	lsls	r1, r1, #9
 8007586:	430a      	orrs	r2, r1
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e020      	b.n	80075ce <HAL_RCC_OscConfig+0xba>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	23a0      	movs	r3, #160	; 0xa0
 8007592:	02db      	lsls	r3, r3, #11
 8007594:	429a      	cmp	r2, r3
 8007596:	d10e      	bne.n	80075b6 <HAL_RCC_OscConfig+0xa2>
 8007598:	4ba9      	ldr	r3, [pc, #676]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	4ba8      	ldr	r3, [pc, #672]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800759e:	2180      	movs	r1, #128	; 0x80
 80075a0:	02c9      	lsls	r1, r1, #11
 80075a2:	430a      	orrs	r2, r1
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	4ba6      	ldr	r3, [pc, #664]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	4ba5      	ldr	r3, [pc, #660]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	0249      	lsls	r1, r1, #9
 80075b0:	430a      	orrs	r2, r1
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e00b      	b.n	80075ce <HAL_RCC_OscConfig+0xba>
 80075b6:	4ba2      	ldr	r3, [pc, #648]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	4ba1      	ldr	r3, [pc, #644]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80075bc:	49a1      	ldr	r1, [pc, #644]	; (8007844 <HAL_RCC_OscConfig+0x330>)
 80075be:	400a      	ands	r2, r1
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	4b9f      	ldr	r3, [pc, #636]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	4b9e      	ldr	r3, [pc, #632]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80075c8:	499f      	ldr	r1, [pc, #636]	; (8007848 <HAL_RCC_OscConfig+0x334>)
 80075ca:	400a      	ands	r2, r1
 80075cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d014      	beq.n	8007600 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d6:	f7fc f977 	bl	80038c8 <HAL_GetTick>
 80075da:	0003      	movs	r3, r0
 80075dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075e0:	f7fc f972 	bl	80038c8 <HAL_GetTick>
 80075e4:	0002      	movs	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b64      	cmp	r3, #100	; 0x64
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e293      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80075f2:	4b93      	ldr	r3, [pc, #588]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	2380      	movs	r3, #128	; 0x80
 80075f8:	029b      	lsls	r3, r3, #10
 80075fa:	4013      	ands	r3, r2
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0xcc>
 80075fe:	e015      	b.n	800762c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fc f962 	bl	80038c8 <HAL_GetTick>
 8007604:	0003      	movs	r3, r0
 8007606:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800760a:	f7fc f95d 	bl	80038c8 <HAL_GetTick>
 800760e:	0002      	movs	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b64      	cmp	r3, #100	; 0x64
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e27e      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800761c:	4b88      	ldr	r3, [pc, #544]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	2380      	movs	r3, #128	; 0x80
 8007622:	029b      	lsls	r3, r3, #10
 8007624:	4013      	ands	r3, r2
 8007626:	d1f0      	bne.n	800760a <HAL_RCC_OscConfig+0xf6>
 8007628:	e000      	b.n	800762c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800762a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2202      	movs	r2, #2
 8007632:	4013      	ands	r3, r2
 8007634:	d100      	bne.n	8007638 <HAL_RCC_OscConfig+0x124>
 8007636:	e099      	b.n	800776c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007638:	4b81      	ldr	r3, [pc, #516]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	2238      	movs	r2, #56	; 0x38
 800763e:	4013      	ands	r3, r2
 8007640:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007642:	4b7f      	ldr	r3, [pc, #508]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2203      	movs	r2, #3
 8007648:	4013      	ands	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b10      	cmp	r3, #16
 8007650:	d102      	bne.n	8007658 <HAL_RCC_OscConfig+0x144>
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d002      	beq.n	800765e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d135      	bne.n	80076ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800765e:	4b78      	ldr	r3, [pc, #480]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	2380      	movs	r3, #128	; 0x80
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	4013      	ands	r3, r2
 8007668:	d005      	beq.n	8007676 <HAL_RCC_OscConfig+0x162>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e251      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007676:	4b72      	ldr	r3, [pc, #456]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4a74      	ldr	r2, [pc, #464]	; (800784c <HAL_RCC_OscConfig+0x338>)
 800767c:	4013      	ands	r3, r2
 800767e:	0019      	movs	r1, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	021a      	lsls	r2, r3, #8
 8007686:	4b6e      	ldr	r3, [pc, #440]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007688:	430a      	orrs	r2, r1
 800768a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d112      	bne.n	80076b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007692:	4b6b      	ldr	r3, [pc, #428]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a6e      	ldr	r2, [pc, #440]	; (8007850 <HAL_RCC_OscConfig+0x33c>)
 8007698:	4013      	ands	r3, r2
 800769a:	0019      	movs	r1, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	4b67      	ldr	r3, [pc, #412]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80076a2:	430a      	orrs	r2, r1
 80076a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80076a6:	4b66      	ldr	r3, [pc, #408]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	0adb      	lsrs	r3, r3, #11
 80076ac:	2207      	movs	r2, #7
 80076ae:	4013      	ands	r3, r2
 80076b0:	4a68      	ldr	r2, [pc, #416]	; (8007854 <HAL_RCC_OscConfig+0x340>)
 80076b2:	40da      	lsrs	r2, r3
 80076b4:	4b68      	ldr	r3, [pc, #416]	; (8007858 <HAL_RCC_OscConfig+0x344>)
 80076b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80076b8:	4b68      	ldr	r3, [pc, #416]	; (800785c <HAL_RCC_OscConfig+0x348>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	0018      	movs	r0, r3
 80076be:	f7fc f8a7 	bl	8003810 <HAL_InitTick>
 80076c2:	1e03      	subs	r3, r0, #0
 80076c4:	d051      	beq.n	800776a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e227      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d030      	beq.n	8007734 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80076d2:	4b5b      	ldr	r3, [pc, #364]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a5e      	ldr	r2, [pc, #376]	; (8007850 <HAL_RCC_OscConfig+0x33c>)
 80076d8:	4013      	ands	r3, r2
 80076da:	0019      	movs	r1, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	4b57      	ldr	r3, [pc, #348]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80076e2:	430a      	orrs	r2, r1
 80076e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80076e6:	4b56      	ldr	r3, [pc, #344]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	4b55      	ldr	r3, [pc, #340]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80076ec:	2180      	movs	r1, #128	; 0x80
 80076ee:	0049      	lsls	r1, r1, #1
 80076f0:	430a      	orrs	r2, r1
 80076f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f4:	f7fc f8e8 	bl	80038c8 <HAL_GetTick>
 80076f8:	0003      	movs	r3, r0
 80076fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80076fc:	e008      	b.n	8007710 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076fe:	f7fc f8e3 	bl	80038c8 <HAL_GetTick>
 8007702:	0002      	movs	r2, r0
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e204      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007710:	4b4b      	ldr	r3, [pc, #300]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	2380      	movs	r3, #128	; 0x80
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	4013      	ands	r3, r2
 800771a:	d0f0      	beq.n	80076fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800771c:	4b48      	ldr	r3, [pc, #288]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	4a4a      	ldr	r2, [pc, #296]	; (800784c <HAL_RCC_OscConfig+0x338>)
 8007722:	4013      	ands	r3, r2
 8007724:	0019      	movs	r1, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	021a      	lsls	r2, r3, #8
 800772c:	4b44      	ldr	r3, [pc, #272]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800772e:	430a      	orrs	r2, r1
 8007730:	605a      	str	r2, [r3, #4]
 8007732:	e01b      	b.n	800776c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8007734:	4b42      	ldr	r3, [pc, #264]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4b41      	ldr	r3, [pc, #260]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800773a:	4949      	ldr	r1, [pc, #292]	; (8007860 <HAL_RCC_OscConfig+0x34c>)
 800773c:	400a      	ands	r2, r1
 800773e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007740:	f7fc f8c2 	bl	80038c8 <HAL_GetTick>
 8007744:	0003      	movs	r3, r0
 8007746:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800774a:	f7fc f8bd 	bl	80038c8 <HAL_GetTick>
 800774e:	0002      	movs	r2, r0
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e1de      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800775c:	4b38      	ldr	r3, [pc, #224]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	2380      	movs	r3, #128	; 0x80
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	4013      	ands	r3, r2
 8007766:	d1f0      	bne.n	800774a <HAL_RCC_OscConfig+0x236>
 8007768:	e000      	b.n	800776c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800776a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2208      	movs	r2, #8
 8007772:	4013      	ands	r3, r2
 8007774:	d047      	beq.n	8007806 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007776:	4b32      	ldr	r3, [pc, #200]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2238      	movs	r2, #56	; 0x38
 800777c:	4013      	ands	r3, r2
 800777e:	2b18      	cmp	r3, #24
 8007780:	d10a      	bne.n	8007798 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007782:	4b2f      	ldr	r3, [pc, #188]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007786:	2202      	movs	r2, #2
 8007788:	4013      	ands	r3, r2
 800778a:	d03c      	beq.n	8007806 <HAL_RCC_OscConfig+0x2f2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d138      	bne.n	8007806 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e1c0      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d019      	beq.n	80077d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80077a0:	4b27      	ldr	r3, [pc, #156]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80077a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80077a4:	4b26      	ldr	r3, [pc, #152]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80077a6:	2101      	movs	r1, #1
 80077a8:	430a      	orrs	r2, r1
 80077aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ac:	f7fc f88c 	bl	80038c8 <HAL_GetTick>
 80077b0:	0003      	movs	r3, r0
 80077b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077b4:	e008      	b.n	80077c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077b6:	f7fc f887 	bl	80038c8 <HAL_GetTick>
 80077ba:	0002      	movs	r2, r0
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e1a8      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80077c8:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80077ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077cc:	2202      	movs	r2, #2
 80077ce:	4013      	ands	r3, r2
 80077d0:	d0f1      	beq.n	80077b6 <HAL_RCC_OscConfig+0x2a2>
 80077d2:	e018      	b.n	8007806 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80077d4:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80077d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80077d8:	4b19      	ldr	r3, [pc, #100]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80077da:	2101      	movs	r1, #1
 80077dc:	438a      	bics	r2, r1
 80077de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e0:	f7fc f872 	bl	80038c8 <HAL_GetTick>
 80077e4:	0003      	movs	r3, r0
 80077e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077e8:	e008      	b.n	80077fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077ea:	f7fc f86d 	bl	80038c8 <HAL_GetTick>
 80077ee:	0002      	movs	r2, r0
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e18e      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80077fc:	4b10      	ldr	r3, [pc, #64]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 80077fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007800:	2202      	movs	r2, #2
 8007802:	4013      	ands	r3, r2
 8007804:	d1f1      	bne.n	80077ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2204      	movs	r2, #4
 800780c:	4013      	ands	r3, r2
 800780e:	d100      	bne.n	8007812 <HAL_RCC_OscConfig+0x2fe>
 8007810:	e0c6      	b.n	80079a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007812:	231f      	movs	r3, #31
 8007814:	18fb      	adds	r3, r7, r3
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800781a:	4b09      	ldr	r3, [pc, #36]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2238      	movs	r2, #56	; 0x38
 8007820:	4013      	ands	r3, r2
 8007822:	2b20      	cmp	r3, #32
 8007824:	d11e      	bne.n	8007864 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007826:	4b06      	ldr	r3, [pc, #24]	; (8007840 <HAL_RCC_OscConfig+0x32c>)
 8007828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800782a:	2202      	movs	r2, #2
 800782c:	4013      	ands	r3, r2
 800782e:	d100      	bne.n	8007832 <HAL_RCC_OscConfig+0x31e>
 8007830:	e0b6      	b.n	80079a0 <HAL_RCC_OscConfig+0x48c>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d000      	beq.n	800783c <HAL_RCC_OscConfig+0x328>
 800783a:	e0b1      	b.n	80079a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e16c      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
 8007840:	40021000 	.word	0x40021000
 8007844:	fffeffff 	.word	0xfffeffff
 8007848:	fffbffff 	.word	0xfffbffff
 800784c:	ffff80ff 	.word	0xffff80ff
 8007850:	ffffc7ff 	.word	0xffffc7ff
 8007854:	00f42400 	.word	0x00f42400
 8007858:	20000000 	.word	0x20000000
 800785c:	20000004 	.word	0x20000004
 8007860:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007864:	4baf      	ldr	r3, [pc, #700]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007868:	2380      	movs	r3, #128	; 0x80
 800786a:	055b      	lsls	r3, r3, #21
 800786c:	4013      	ands	r3, r2
 800786e:	d101      	bne.n	8007874 <HAL_RCC_OscConfig+0x360>
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <HAL_RCC_OscConfig+0x362>
 8007874:	2300      	movs	r3, #0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d011      	beq.n	800789e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800787a:	4baa      	ldr	r3, [pc, #680]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 800787c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800787e:	4ba9      	ldr	r3, [pc, #676]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007880:	2180      	movs	r1, #128	; 0x80
 8007882:	0549      	lsls	r1, r1, #21
 8007884:	430a      	orrs	r2, r1
 8007886:	63da      	str	r2, [r3, #60]	; 0x3c
 8007888:	4ba6      	ldr	r3, [pc, #664]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 800788a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800788c:	2380      	movs	r3, #128	; 0x80
 800788e:	055b      	lsls	r3, r3, #21
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8007896:	231f      	movs	r3, #31
 8007898:	18fb      	adds	r3, r7, r3
 800789a:	2201      	movs	r2, #1
 800789c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800789e:	4ba2      	ldr	r3, [pc, #648]	; (8007b28 <HAL_RCC_OscConfig+0x614>)
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4013      	ands	r3, r2
 80078a8:	d11a      	bne.n	80078e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078aa:	4b9f      	ldr	r3, [pc, #636]	; (8007b28 <HAL_RCC_OscConfig+0x614>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b9e      	ldr	r3, [pc, #632]	; (8007b28 <HAL_RCC_OscConfig+0x614>)
 80078b0:	2180      	movs	r1, #128	; 0x80
 80078b2:	0049      	lsls	r1, r1, #1
 80078b4:	430a      	orrs	r2, r1
 80078b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80078b8:	f7fc f806 	bl	80038c8 <HAL_GetTick>
 80078bc:	0003      	movs	r3, r0
 80078be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078c0:	e008      	b.n	80078d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078c2:	f7fc f801 	bl	80038c8 <HAL_GetTick>
 80078c6:	0002      	movs	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e122      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078d4:	4b94      	ldr	r3, [pc, #592]	; (8007b28 <HAL_RCC_OscConfig+0x614>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	2380      	movs	r3, #128	; 0x80
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	4013      	ands	r3, r2
 80078de:	d0f0      	beq.n	80078c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d106      	bne.n	80078f6 <HAL_RCC_OscConfig+0x3e2>
 80078e8:	4b8e      	ldr	r3, [pc, #568]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 80078ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80078ec:	4b8d      	ldr	r3, [pc, #564]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 80078ee:	2101      	movs	r1, #1
 80078f0:	430a      	orrs	r2, r1
 80078f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80078f4:	e01c      	b.n	8007930 <HAL_RCC_OscConfig+0x41c>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2b05      	cmp	r3, #5
 80078fc:	d10c      	bne.n	8007918 <HAL_RCC_OscConfig+0x404>
 80078fe:	4b89      	ldr	r3, [pc, #548]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007900:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007902:	4b88      	ldr	r3, [pc, #544]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007904:	2104      	movs	r1, #4
 8007906:	430a      	orrs	r2, r1
 8007908:	65da      	str	r2, [r3, #92]	; 0x5c
 800790a:	4b86      	ldr	r3, [pc, #536]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 800790c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800790e:	4b85      	ldr	r3, [pc, #532]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007910:	2101      	movs	r1, #1
 8007912:	430a      	orrs	r2, r1
 8007914:	65da      	str	r2, [r3, #92]	; 0x5c
 8007916:	e00b      	b.n	8007930 <HAL_RCC_OscConfig+0x41c>
 8007918:	4b82      	ldr	r3, [pc, #520]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 800791a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800791c:	4b81      	ldr	r3, [pc, #516]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 800791e:	2101      	movs	r1, #1
 8007920:	438a      	bics	r2, r1
 8007922:	65da      	str	r2, [r3, #92]	; 0x5c
 8007924:	4b7f      	ldr	r3, [pc, #508]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007928:	4b7e      	ldr	r3, [pc, #504]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 800792a:	2104      	movs	r1, #4
 800792c:	438a      	bics	r2, r1
 800792e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d014      	beq.n	8007962 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007938:	f7fb ffc6 	bl	80038c8 <HAL_GetTick>
 800793c:	0003      	movs	r3, r0
 800793e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007940:	e009      	b.n	8007956 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007942:	f7fb ffc1 	bl	80038c8 <HAL_GetTick>
 8007946:	0002      	movs	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	4a77      	ldr	r2, [pc, #476]	; (8007b2c <HAL_RCC_OscConfig+0x618>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e0e1      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007956:	4b73      	ldr	r3, [pc, #460]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795a:	2202      	movs	r2, #2
 800795c:	4013      	ands	r3, r2
 800795e:	d0f0      	beq.n	8007942 <HAL_RCC_OscConfig+0x42e>
 8007960:	e013      	b.n	800798a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007962:	f7fb ffb1 	bl	80038c8 <HAL_GetTick>
 8007966:	0003      	movs	r3, r0
 8007968:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800796a:	e009      	b.n	8007980 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800796c:	f7fb ffac 	bl	80038c8 <HAL_GetTick>
 8007970:	0002      	movs	r2, r0
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	4a6d      	ldr	r2, [pc, #436]	; (8007b2c <HAL_RCC_OscConfig+0x618>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e0cc      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007980:	4b68      	ldr	r3, [pc, #416]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007984:	2202      	movs	r2, #2
 8007986:	4013      	ands	r3, r2
 8007988:	d1f0      	bne.n	800796c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800798a:	231f      	movs	r3, #31
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d105      	bne.n	80079a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007994:	4b63      	ldr	r3, [pc, #396]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007998:	4b62      	ldr	r3, [pc, #392]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 800799a:	4965      	ldr	r1, [pc, #404]	; (8007b30 <HAL_RCC_OscConfig+0x61c>)
 800799c:	400a      	ands	r2, r1
 800799e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d100      	bne.n	80079aa <HAL_RCC_OscConfig+0x496>
 80079a8:	e0b6      	b.n	8007b18 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079aa:	4b5e      	ldr	r3, [pc, #376]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2238      	movs	r2, #56	; 0x38
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b10      	cmp	r3, #16
 80079b4:	d100      	bne.n	80079b8 <HAL_RCC_OscConfig+0x4a4>
 80079b6:	e07e      	b.n	8007ab6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d153      	bne.n	8007a68 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079c0:	4b58      	ldr	r3, [pc, #352]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	4b57      	ldr	r3, [pc, #348]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 80079c6:	495b      	ldr	r1, [pc, #364]	; (8007b34 <HAL_RCC_OscConfig+0x620>)
 80079c8:	400a      	ands	r2, r1
 80079ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fb ff7c 	bl	80038c8 <HAL_GetTick>
 80079d0:	0003      	movs	r3, r0
 80079d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d6:	f7fb ff77 	bl	80038c8 <HAL_GetTick>
 80079da:	0002      	movs	r2, r0
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e098      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079e8:	4b4e      	ldr	r3, [pc, #312]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	049b      	lsls	r3, r3, #18
 80079f0:	4013      	ands	r3, r2
 80079f2:	d1f0      	bne.n	80079d6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079f4:	4b4b      	ldr	r3, [pc, #300]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	4a4f      	ldr	r2, [pc, #316]	; (8007b38 <HAL_RCC_OscConfig+0x624>)
 80079fa:	4013      	ands	r3, r2
 80079fc:	0019      	movs	r1, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1a      	ldr	r2, [r3, #32]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	431a      	orrs	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	4b41      	ldr	r3, [pc, #260]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a22:	4b40      	ldr	r3, [pc, #256]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	4b3f      	ldr	r3, [pc, #252]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a28:	2180      	movs	r1, #128	; 0x80
 8007a2a:	0449      	lsls	r1, r1, #17
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007a30:	4b3c      	ldr	r3, [pc, #240]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	4b3b      	ldr	r3, [pc, #236]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a36:	2180      	movs	r1, #128	; 0x80
 8007a38:	0549      	lsls	r1, r1, #21
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3e:	f7fb ff43 	bl	80038c8 <HAL_GetTick>
 8007a42:	0003      	movs	r3, r0
 8007a44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a46:	e008      	b.n	8007a5a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a48:	f7fb ff3e 	bl	80038c8 <HAL_GetTick>
 8007a4c:	0002      	movs	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e05f      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a5a:	4b32      	ldr	r3, [pc, #200]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	2380      	movs	r3, #128	; 0x80
 8007a60:	049b      	lsls	r3, r3, #18
 8007a62:	4013      	ands	r3, r2
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0x534>
 8007a66:	e057      	b.n	8007b18 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a68:	4b2e      	ldr	r3, [pc, #184]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4b2d      	ldr	r3, [pc, #180]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a6e:	4931      	ldr	r1, [pc, #196]	; (8007b34 <HAL_RCC_OscConfig+0x620>)
 8007a70:	400a      	ands	r2, r1
 8007a72:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007a74:	4b2b      	ldr	r3, [pc, #172]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a76:	68da      	ldr	r2, [r3, #12]
 8007a78:	4b2a      	ldr	r3, [pc, #168]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a7a:	2103      	movs	r1, #3
 8007a7c:	438a      	bics	r2, r1
 8007a7e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007a80:	4b28      	ldr	r3, [pc, #160]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a82:	68da      	ldr	r2, [r3, #12]
 8007a84:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007a86:	492d      	ldr	r1, [pc, #180]	; (8007b3c <HAL_RCC_OscConfig+0x628>)
 8007a88:	400a      	ands	r2, r1
 8007a8a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a8c:	f7fb ff1c 	bl	80038c8 <HAL_GetTick>
 8007a90:	0003      	movs	r3, r0
 8007a92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a94:	e008      	b.n	8007aa8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a96:	f7fb ff17 	bl	80038c8 <HAL_GetTick>
 8007a9a:	0002      	movs	r2, r0
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d901      	bls.n	8007aa8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e038      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	2380      	movs	r3, #128	; 0x80
 8007aae:	049b      	lsls	r3, r3, #18
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	d1f0      	bne.n	8007a96 <HAL_RCC_OscConfig+0x582>
 8007ab4:	e030      	b.n	8007b18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e02b      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007ac2:	4b18      	ldr	r3, [pc, #96]	; (8007b24 <HAL_RCC_OscConfig+0x610>)
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2203      	movs	r2, #3
 8007acc:	401a      	ands	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d11e      	bne.n	8007b14 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2270      	movs	r2, #112	; 0x70
 8007ada:	401a      	ands	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d117      	bne.n	8007b14 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	23fe      	movs	r3, #254	; 0xfe
 8007ae8:	01db      	lsls	r3, r3, #7
 8007aea:	401a      	ands	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d10e      	bne.n	8007b14 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	23f8      	movs	r3, #248	; 0xf8
 8007afa:	039b      	lsls	r3, r3, #14
 8007afc:	401a      	ands	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d106      	bne.n	8007b14 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	0f5b      	lsrs	r3, r3, #29
 8007b0a:	075a      	lsls	r2, r3, #29
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d001      	beq.n	8007b18 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e000      	b.n	8007b1a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	b008      	add	sp, #32
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	46c0      	nop			; (mov r8, r8)
 8007b24:	40021000 	.word	0x40021000
 8007b28:	40007000 	.word	0x40007000
 8007b2c:	00001388 	.word	0x00001388
 8007b30:	efffffff 	.word	0xefffffff
 8007b34:	feffffff 	.word	0xfeffffff
 8007b38:	1fc1808c 	.word	0x1fc1808c
 8007b3c:	effeffff 	.word	0xeffeffff

08007b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0e9      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b54:	4b76      	ldr	r3, [pc, #472]	; (8007d30 <HAL_RCC_ClockConfig+0x1f0>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2207      	movs	r2, #7
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d91e      	bls.n	8007ba0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b62:	4b73      	ldr	r3, [pc, #460]	; (8007d30 <HAL_RCC_ClockConfig+0x1f0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2207      	movs	r2, #7
 8007b68:	4393      	bics	r3, r2
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	4b70      	ldr	r3, [pc, #448]	; (8007d30 <HAL_RCC_ClockConfig+0x1f0>)
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b74:	f7fb fea8 	bl	80038c8 <HAL_GetTick>
 8007b78:	0003      	movs	r3, r0
 8007b7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007b7c:	e009      	b.n	8007b92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b7e:	f7fb fea3 	bl	80038c8 <HAL_GetTick>
 8007b82:	0002      	movs	r2, r0
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	4a6a      	ldr	r2, [pc, #424]	; (8007d34 <HAL_RCC_ClockConfig+0x1f4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d901      	bls.n	8007b92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e0ca      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007b92:	4b67      	ldr	r3, [pc, #412]	; (8007d30 <HAL_RCC_ClockConfig+0x1f0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2207      	movs	r2, #7
 8007b98:	4013      	ands	r3, r2
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d1ee      	bne.n	8007b7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	d015      	beq.n	8007bd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2204      	movs	r2, #4
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	d006      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007bb4:	4b60      	ldr	r3, [pc, #384]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007bb6:	689a      	ldr	r2, [r3, #8]
 8007bb8:	4b5f      	ldr	r3, [pc, #380]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007bba:	21e0      	movs	r1, #224	; 0xe0
 8007bbc:	01c9      	lsls	r1, r1, #7
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bc2:	4b5d      	ldr	r3, [pc, #372]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	4a5d      	ldr	r2, [pc, #372]	; (8007d3c <HAL_RCC_ClockConfig+0x1fc>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	0019      	movs	r1, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	4b59      	ldr	r3, [pc, #356]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	4013      	ands	r3, r2
 8007bde:	d057      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d107      	bne.n	8007bf8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007be8:	4b53      	ldr	r3, [pc, #332]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	2380      	movs	r3, #128	; 0x80
 8007bee:	029b      	lsls	r3, r3, #10
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	d12b      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e097      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d107      	bne.n	8007c10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c00:	4b4d      	ldr	r3, [pc, #308]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	2380      	movs	r3, #128	; 0x80
 8007c06:	049b      	lsls	r3, r3, #18
 8007c08:	4013      	ands	r3, r2
 8007c0a:	d11f      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e08b      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d107      	bne.n	8007c28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c18:	4b47      	ldr	r3, [pc, #284]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	2380      	movs	r3, #128	; 0x80
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	4013      	ands	r3, r2
 8007c22:	d113      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e07f      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d106      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c30:	4b41      	ldr	r3, [pc, #260]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c34:	2202      	movs	r2, #2
 8007c36:	4013      	ands	r3, r2
 8007c38:	d108      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e074      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c3e:	4b3e      	ldr	r3, [pc, #248]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c42:	2202      	movs	r2, #2
 8007c44:	4013      	ands	r3, r2
 8007c46:	d101      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e06d      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c4c:	4b3a      	ldr	r3, [pc, #232]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2207      	movs	r2, #7
 8007c52:	4393      	bics	r3, r2
 8007c54:	0019      	movs	r1, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	4b37      	ldr	r3, [pc, #220]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c60:	f7fb fe32 	bl	80038c8 <HAL_GetTick>
 8007c64:	0003      	movs	r3, r0
 8007c66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c68:	e009      	b.n	8007c7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c6a:	f7fb fe2d 	bl	80038c8 <HAL_GetTick>
 8007c6e:	0002      	movs	r2, r0
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <HAL_RCC_ClockConfig+0x1f4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d901      	bls.n	8007c7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e054      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c7e:	4b2e      	ldr	r3, [pc, #184]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	2238      	movs	r2, #56	; 0x38
 8007c84:	401a      	ands	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d1ec      	bne.n	8007c6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c90:	4b27      	ldr	r3, [pc, #156]	; (8007d30 <HAL_RCC_ClockConfig+0x1f0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2207      	movs	r2, #7
 8007c96:	4013      	ands	r3, r2
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d21e      	bcs.n	8007cdc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c9e:	4b24      	ldr	r3, [pc, #144]	; (8007d30 <HAL_RCC_ClockConfig+0x1f0>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2207      	movs	r2, #7
 8007ca4:	4393      	bics	r3, r2
 8007ca6:	0019      	movs	r1, r3
 8007ca8:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <HAL_RCC_ClockConfig+0x1f0>)
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007cb0:	f7fb fe0a 	bl	80038c8 <HAL_GetTick>
 8007cb4:	0003      	movs	r3, r0
 8007cb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007cb8:	e009      	b.n	8007cce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cba:	f7fb fe05 	bl	80038c8 <HAL_GetTick>
 8007cbe:	0002      	movs	r2, r0
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	4a1b      	ldr	r2, [pc, #108]	; (8007d34 <HAL_RCC_ClockConfig+0x1f4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e02c      	b.n	8007d28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007cce:	4b18      	ldr	r3, [pc, #96]	; (8007d30 <HAL_RCC_ClockConfig+0x1f0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2207      	movs	r2, #7
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d1ee      	bne.n	8007cba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	d009      	beq.n	8007cfa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007ce6:	4b14      	ldr	r3, [pc, #80]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	4a15      	ldr	r2, [pc, #84]	; (8007d40 <HAL_RCC_ClockConfig+0x200>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	0019      	movs	r1, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	4b10      	ldr	r3, [pc, #64]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007cfa:	f000 f829 	bl	8007d50 <HAL_RCC_GetSysClockFreq>
 8007cfe:	0001      	movs	r1, r0
 8007d00:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <HAL_RCC_ClockConfig+0x1f8>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	0a1b      	lsrs	r3, r3, #8
 8007d06:	220f      	movs	r2, #15
 8007d08:	401a      	ands	r2, r3
 8007d0a:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <HAL_RCC_ClockConfig+0x204>)
 8007d0c:	0092      	lsls	r2, r2, #2
 8007d0e:	58d3      	ldr	r3, [r2, r3]
 8007d10:	221f      	movs	r2, #31
 8007d12:	4013      	ands	r3, r2
 8007d14:	000a      	movs	r2, r1
 8007d16:	40da      	lsrs	r2, r3
 8007d18:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <HAL_RCC_ClockConfig+0x208>)
 8007d1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <HAL_RCC_ClockConfig+0x20c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	0018      	movs	r0, r3
 8007d22:	f7fb fd75 	bl	8003810 <HAL_InitTick>
 8007d26:	0003      	movs	r3, r0
}
 8007d28:	0018      	movs	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	b004      	add	sp, #16
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	40022000 	.word	0x40022000
 8007d34:	00001388 	.word	0x00001388
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	fffff0ff 	.word	0xfffff0ff
 8007d40:	ffff8fff 	.word	0xffff8fff
 8007d44:	0800b1d8 	.word	0x0800b1d8
 8007d48:	20000000 	.word	0x20000000
 8007d4c:	20000004 	.word	0x20000004

08007d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d56:	4b3c      	ldr	r3, [pc, #240]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	2238      	movs	r2, #56	; 0x38
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	d10f      	bne.n	8007d80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007d60:	4b39      	ldr	r3, [pc, #228]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	0adb      	lsrs	r3, r3, #11
 8007d66:	2207      	movs	r2, #7
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	409a      	lsls	r2, r3
 8007d6e:	0013      	movs	r3, r2
 8007d70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	4835      	ldr	r0, [pc, #212]	; (8007e4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8007d76:	f7f8 f9dd 	bl	8000134 <__udivsi3>
 8007d7a:	0003      	movs	r3, r0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	e05d      	b.n	8007e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d80:	4b31      	ldr	r3, [pc, #196]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	2238      	movs	r2, #56	; 0x38
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d102      	bne.n	8007d92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d8c:	4b30      	ldr	r3, [pc, #192]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x100>)
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	e054      	b.n	8007e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d92:	4b2d      	ldr	r3, [pc, #180]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	2238      	movs	r2, #56	; 0x38
 8007d98:	4013      	ands	r3, r2
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d138      	bne.n	8007e10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007d9e:	4b2a      	ldr	r3, [pc, #168]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	2203      	movs	r2, #3
 8007da4:	4013      	ands	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007da8:	4b27      	ldr	r3, [pc, #156]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	091b      	lsrs	r3, r3, #4
 8007dae:	2207      	movs	r2, #7
 8007db0:	4013      	ands	r3, r2
 8007db2:	3301      	adds	r3, #1
 8007db4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b03      	cmp	r3, #3
 8007dba:	d10d      	bne.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	4824      	ldr	r0, [pc, #144]	; (8007e50 <HAL_RCC_GetSysClockFreq+0x100>)
 8007dc0:	f7f8 f9b8 	bl	8000134 <__udivsi3>
 8007dc4:	0003      	movs	r3, r0
 8007dc6:	0019      	movs	r1, r3
 8007dc8:	4b1f      	ldr	r3, [pc, #124]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	0a1b      	lsrs	r3, r3, #8
 8007dce:	227f      	movs	r2, #127	; 0x7f
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	434b      	muls	r3, r1
 8007dd4:	617b      	str	r3, [r7, #20]
        break;
 8007dd6:	e00d      	b.n	8007df4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	481c      	ldr	r0, [pc, #112]	; (8007e4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8007ddc:	f7f8 f9aa 	bl	8000134 <__udivsi3>
 8007de0:	0003      	movs	r3, r0
 8007de2:	0019      	movs	r1, r3
 8007de4:	4b18      	ldr	r3, [pc, #96]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	0a1b      	lsrs	r3, r3, #8
 8007dea:	227f      	movs	r2, #127	; 0x7f
 8007dec:	4013      	ands	r3, r2
 8007dee:	434b      	muls	r3, r1
 8007df0:	617b      	str	r3, [r7, #20]
        break;
 8007df2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007df4:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	0f5b      	lsrs	r3, r3, #29
 8007dfa:	2207      	movs	r2, #7
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	3301      	adds	r3, #1
 8007e00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007e02:	6879      	ldr	r1, [r7, #4]
 8007e04:	6978      	ldr	r0, [r7, #20]
 8007e06:	f7f8 f995 	bl	8000134 <__udivsi3>
 8007e0a:	0003      	movs	r3, r0
 8007e0c:	613b      	str	r3, [r7, #16]
 8007e0e:	e015      	b.n	8007e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007e10:	4b0d      	ldr	r3, [pc, #52]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	2238      	movs	r2, #56	; 0x38
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b20      	cmp	r3, #32
 8007e1a:	d103      	bne.n	8007e24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007e1c:	2380      	movs	r3, #128	; 0x80
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e00b      	b.n	8007e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007e24:	4b08      	ldr	r3, [pc, #32]	; (8007e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2238      	movs	r2, #56	; 0x38
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	2b18      	cmp	r3, #24
 8007e2e:	d103      	bne.n	8007e38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007e30:	23fa      	movs	r3, #250	; 0xfa
 8007e32:	01db      	lsls	r3, r3, #7
 8007e34:	613b      	str	r3, [r7, #16]
 8007e36:	e001      	b.n	8007e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e3c:	693b      	ldr	r3, [r7, #16]
}
 8007e3e:	0018      	movs	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b006      	add	sp, #24
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	40021000 	.word	0x40021000
 8007e4c:	00f42400 	.word	0x00f42400
 8007e50:	007a1200 	.word	0x007a1200

08007e54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007e5c:	2313      	movs	r3, #19
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	2200      	movs	r2, #0
 8007e62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e64:	2312      	movs	r3, #18
 8007e66:	18fb      	adds	r3, r7, r3
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	2380      	movs	r3, #128	; 0x80
 8007e72:	029b      	lsls	r3, r3, #10
 8007e74:	4013      	ands	r3, r2
 8007e76:	d100      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007e78:	e0a3      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e7a:	2011      	movs	r0, #17
 8007e7c:	183b      	adds	r3, r7, r0
 8007e7e:	2200      	movs	r2, #0
 8007e80:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e82:	4b7f      	ldr	r3, [pc, #508]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e86:	2380      	movs	r3, #128	; 0x80
 8007e88:	055b      	lsls	r3, r3, #21
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	d110      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e8e:	4b7c      	ldr	r3, [pc, #496]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007e90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e92:	4b7b      	ldr	r3, [pc, #492]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007e94:	2180      	movs	r1, #128	; 0x80
 8007e96:	0549      	lsls	r1, r1, #21
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	63da      	str	r2, [r3, #60]	; 0x3c
 8007e9c:	4b78      	ldr	r3, [pc, #480]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ea0:	2380      	movs	r3, #128	; 0x80
 8007ea2:	055b      	lsls	r3, r3, #21
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	60bb      	str	r3, [r7, #8]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eaa:	183b      	adds	r3, r7, r0
 8007eac:	2201      	movs	r2, #1
 8007eae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eb0:	4b74      	ldr	r3, [pc, #464]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	4b73      	ldr	r3, [pc, #460]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007eb6:	2180      	movs	r1, #128	; 0x80
 8007eb8:	0049      	lsls	r1, r1, #1
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ebe:	f7fb fd03 	bl	80038c8 <HAL_GetTick>
 8007ec2:	0003      	movs	r3, r0
 8007ec4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ec6:	e00b      	b.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec8:	f7fb fcfe 	bl	80038c8 <HAL_GetTick>
 8007ecc:	0002      	movs	r2, r0
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d904      	bls.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007ed6:	2313      	movs	r3, #19
 8007ed8:	18fb      	adds	r3, r7, r3
 8007eda:	2203      	movs	r2, #3
 8007edc:	701a      	strb	r2, [r3, #0]
        break;
 8007ede:	e005      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ee0:	4b68      	ldr	r3, [pc, #416]	; (8008084 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	2380      	movs	r3, #128	; 0x80
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	4013      	ands	r3, r2
 8007eea:	d0ed      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007eec:	2313      	movs	r3, #19
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d154      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007ef6:	4b62      	ldr	r3, [pc, #392]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007ef8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007efa:	23c0      	movs	r3, #192	; 0xc0
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4013      	ands	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d019      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	695b      	ldr	r3, [r3, #20]
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d014      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f12:	4b5b      	ldr	r3, [pc, #364]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f16:	4a5c      	ldr	r2, [pc, #368]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f1c:	4b58      	ldr	r3, [pc, #352]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f20:	4b57      	ldr	r3, [pc, #348]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f22:	2180      	movs	r1, #128	; 0x80
 8007f24:	0249      	lsls	r1, r1, #9
 8007f26:	430a      	orrs	r2, r1
 8007f28:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f2a:	4b55      	ldr	r3, [pc, #340]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f2e:	4b54      	ldr	r3, [pc, #336]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f30:	4956      	ldr	r1, [pc, #344]	; (800808c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8007f32:	400a      	ands	r2, r1
 8007f34:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f36:	4b52      	ldr	r3, [pc, #328]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	4013      	ands	r3, r2
 8007f42:	d016      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f44:	f7fb fcc0 	bl	80038c8 <HAL_GetTick>
 8007f48:	0003      	movs	r3, r0
 8007f4a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f4c:	e00c      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f4e:	f7fb fcbb 	bl	80038c8 <HAL_GetTick>
 8007f52:	0002      	movs	r2, r0
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	4a4d      	ldr	r2, [pc, #308]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d904      	bls.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007f5e:	2313      	movs	r3, #19
 8007f60:	18fb      	adds	r3, r7, r3
 8007f62:	2203      	movs	r2, #3
 8007f64:	701a      	strb	r2, [r3, #0]
            break;
 8007f66:	e004      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f68:	4b45      	ldr	r3, [pc, #276]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	4013      	ands	r3, r2
 8007f70:	d0ed      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007f72:	2313      	movs	r3, #19
 8007f74:	18fb      	adds	r3, r7, r3
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10a      	bne.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f7c:	4b40      	ldr	r3, [pc, #256]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f80:	4a41      	ldr	r2, [pc, #260]	; (8008088 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8007f82:	4013      	ands	r3, r2
 8007f84:	0019      	movs	r1, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695a      	ldr	r2, [r3, #20]
 8007f8a:	4b3d      	ldr	r3, [pc, #244]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007f90:	e00c      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f92:	2312      	movs	r3, #18
 8007f94:	18fb      	adds	r3, r7, r3
 8007f96:	2213      	movs	r2, #19
 8007f98:	18ba      	adds	r2, r7, r2
 8007f9a:	7812      	ldrb	r2, [r2, #0]
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e005      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa0:	2312      	movs	r3, #18
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	2213      	movs	r2, #19
 8007fa6:	18ba      	adds	r2, r7, r2
 8007fa8:	7812      	ldrb	r2, [r2, #0]
 8007faa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fac:	2311      	movs	r3, #17
 8007fae:	18fb      	adds	r3, r7, r3
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d105      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fb6:	4b32      	ldr	r3, [pc, #200]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fba:	4b31      	ldr	r3, [pc, #196]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007fbc:	4935      	ldr	r1, [pc, #212]	; (8008094 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8007fbe:	400a      	ands	r2, r1
 8007fc0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	4013      	ands	r3, r2
 8007fca:	d009      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fcc:	4b2c      	ldr	r3, [pc, #176]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	4393      	bics	r3, r2
 8007fd4:	0019      	movs	r1, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	4b29      	ldr	r3, [pc, #164]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	d009      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007fea:	4b25      	ldr	r3, [pc, #148]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fee:	4a2a      	ldr	r2, [pc, #168]	; (8008098 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	0019      	movs	r1, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	4b21      	ldr	r3, [pc, #132]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	2380      	movs	r3, #128	; 0x80
 8008004:	01db      	lsls	r3, r3, #7
 8008006:	4013      	ands	r3, r2
 8008008:	d015      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800800a:	4b1d      	ldr	r3, [pc, #116]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800800c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	0899      	lsrs	r1, r3, #2
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691a      	ldr	r2, [r3, #16]
 8008016:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008018:	430a      	orrs	r2, r1
 800801a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	691a      	ldr	r2, [r3, #16]
 8008020:	2380      	movs	r3, #128	; 0x80
 8008022:	05db      	lsls	r3, r3, #23
 8008024:	429a      	cmp	r2, r3
 8008026:	d106      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	4b14      	ldr	r3, [pc, #80]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800802e:	2180      	movs	r1, #128	; 0x80
 8008030:	0249      	lsls	r1, r1, #9
 8008032:	430a      	orrs	r2, r1
 8008034:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	2380      	movs	r3, #128	; 0x80
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	4013      	ands	r3, r2
 8008040:	d016      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008042:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	4a15      	ldr	r2, [pc, #84]	; (800809c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008048:	4013      	ands	r3, r2
 800804a:	0019      	movs	r1, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008052:	430a      	orrs	r2, r1
 8008054:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68da      	ldr	r2, [r3, #12]
 800805a:	2380      	movs	r3, #128	; 0x80
 800805c:	01db      	lsls	r3, r3, #7
 800805e:	429a      	cmp	r2, r3
 8008060:	d106      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008062:	4b07      	ldr	r3, [pc, #28]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	4b06      	ldr	r3, [pc, #24]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8008068:	2180      	movs	r1, #128	; 0x80
 800806a:	0249      	lsls	r1, r1, #9
 800806c:	430a      	orrs	r2, r1
 800806e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008070:	2312      	movs	r3, #18
 8008072:	18fb      	adds	r3, r7, r3
 8008074:	781b      	ldrb	r3, [r3, #0]
}
 8008076:	0018      	movs	r0, r3
 8008078:	46bd      	mov	sp, r7
 800807a:	b006      	add	sp, #24
 800807c:	bd80      	pop	{r7, pc}
 800807e:	46c0      	nop			; (mov r8, r8)
 8008080:	40021000 	.word	0x40021000
 8008084:	40007000 	.word	0x40007000
 8008088:	fffffcff 	.word	0xfffffcff
 800808c:	fffeffff 	.word	0xfffeffff
 8008090:	00001388 	.word	0x00001388
 8008094:	efffffff 	.word	0xefffffff
 8008098:	ffffcfff 	.word	0xffffcfff
 800809c:	ffff3fff 	.word	0xffff3fff

080080a0 <__errno>:
 80080a0:	4b01      	ldr	r3, [pc, #4]	; (80080a8 <__errno+0x8>)
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	4770      	bx	lr
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	2000000c 	.word	0x2000000c

080080ac <__libc_init_array>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	2600      	movs	r6, #0
 80080b0:	4d0c      	ldr	r5, [pc, #48]	; (80080e4 <__libc_init_array+0x38>)
 80080b2:	4c0d      	ldr	r4, [pc, #52]	; (80080e8 <__libc_init_array+0x3c>)
 80080b4:	1b64      	subs	r4, r4, r5
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	42a6      	cmp	r6, r4
 80080ba:	d109      	bne.n	80080d0 <__libc_init_array+0x24>
 80080bc:	2600      	movs	r6, #0
 80080be:	f002 ffbb 	bl	800b038 <_init>
 80080c2:	4d0a      	ldr	r5, [pc, #40]	; (80080ec <__libc_init_array+0x40>)
 80080c4:	4c0a      	ldr	r4, [pc, #40]	; (80080f0 <__libc_init_array+0x44>)
 80080c6:	1b64      	subs	r4, r4, r5
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	42a6      	cmp	r6, r4
 80080cc:	d105      	bne.n	80080da <__libc_init_array+0x2e>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	00b3      	lsls	r3, r6, #2
 80080d2:	58eb      	ldr	r3, [r5, r3]
 80080d4:	4798      	blx	r3
 80080d6:	3601      	adds	r6, #1
 80080d8:	e7ee      	b.n	80080b8 <__libc_init_array+0xc>
 80080da:	00b3      	lsls	r3, r6, #2
 80080dc:	58eb      	ldr	r3, [r5, r3]
 80080de:	4798      	blx	r3
 80080e0:	3601      	adds	r6, #1
 80080e2:	e7f2      	b.n	80080ca <__libc_init_array+0x1e>
 80080e4:	0800b5f4 	.word	0x0800b5f4
 80080e8:	0800b5f4 	.word	0x0800b5f4
 80080ec:	0800b5f4 	.word	0x0800b5f4
 80080f0:	0800b5f8 	.word	0x0800b5f8

080080f4 <malloc>:
 80080f4:	b510      	push	{r4, lr}
 80080f6:	4b03      	ldr	r3, [pc, #12]	; (8008104 <malloc+0x10>)
 80080f8:	0001      	movs	r1, r0
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	f000 f882 	bl	8008204 <_malloc_r>
 8008100:	bd10      	pop	{r4, pc}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	2000000c 	.word	0x2000000c

08008108 <memcpy>:
 8008108:	2300      	movs	r3, #0
 800810a:	b510      	push	{r4, lr}
 800810c:	429a      	cmp	r2, r3
 800810e:	d100      	bne.n	8008112 <memcpy+0xa>
 8008110:	bd10      	pop	{r4, pc}
 8008112:	5ccc      	ldrb	r4, [r1, r3]
 8008114:	54c4      	strb	r4, [r0, r3]
 8008116:	3301      	adds	r3, #1
 8008118:	e7f8      	b.n	800810c <memcpy+0x4>

0800811a <memset>:
 800811a:	0003      	movs	r3, r0
 800811c:	1882      	adds	r2, r0, r2
 800811e:	4293      	cmp	r3, r2
 8008120:	d100      	bne.n	8008124 <memset+0xa>
 8008122:	4770      	bx	lr
 8008124:	7019      	strb	r1, [r3, #0]
 8008126:	3301      	adds	r3, #1
 8008128:	e7f9      	b.n	800811e <memset+0x4>
	...

0800812c <_free_r>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	0005      	movs	r5, r0
 8008130:	2900      	cmp	r1, #0
 8008132:	d010      	beq.n	8008156 <_free_r+0x2a>
 8008134:	1f0c      	subs	r4, r1, #4
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	da00      	bge.n	800813e <_free_r+0x12>
 800813c:	18e4      	adds	r4, r4, r3
 800813e:	0028      	movs	r0, r5
 8008140:	f001 fc2c 	bl	800999c <__malloc_lock>
 8008144:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <_free_r+0x90>)
 8008146:	6813      	ldr	r3, [r2, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d105      	bne.n	8008158 <_free_r+0x2c>
 800814c:	6063      	str	r3, [r4, #4]
 800814e:	6014      	str	r4, [r2, #0]
 8008150:	0028      	movs	r0, r5
 8008152:	f001 fc2b 	bl	80099ac <__malloc_unlock>
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	42a3      	cmp	r3, r4
 800815a:	d908      	bls.n	800816e <_free_r+0x42>
 800815c:	6821      	ldr	r1, [r4, #0]
 800815e:	1860      	adds	r0, r4, r1
 8008160:	4283      	cmp	r3, r0
 8008162:	d1f3      	bne.n	800814c <_free_r+0x20>
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	1841      	adds	r1, r0, r1
 800816a:	6021      	str	r1, [r4, #0]
 800816c:	e7ee      	b.n	800814c <_free_r+0x20>
 800816e:	001a      	movs	r2, r3
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <_free_r+0x4e>
 8008176:	42a3      	cmp	r3, r4
 8008178:	d9f9      	bls.n	800816e <_free_r+0x42>
 800817a:	6811      	ldr	r1, [r2, #0]
 800817c:	1850      	adds	r0, r2, r1
 800817e:	42a0      	cmp	r0, r4
 8008180:	d10b      	bne.n	800819a <_free_r+0x6e>
 8008182:	6820      	ldr	r0, [r4, #0]
 8008184:	1809      	adds	r1, r1, r0
 8008186:	1850      	adds	r0, r2, r1
 8008188:	6011      	str	r1, [r2, #0]
 800818a:	4283      	cmp	r3, r0
 800818c:	d1e0      	bne.n	8008150 <_free_r+0x24>
 800818e:	6818      	ldr	r0, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	1841      	adds	r1, r0, r1
 8008194:	6011      	str	r1, [r2, #0]
 8008196:	6053      	str	r3, [r2, #4]
 8008198:	e7da      	b.n	8008150 <_free_r+0x24>
 800819a:	42a0      	cmp	r0, r4
 800819c:	d902      	bls.n	80081a4 <_free_r+0x78>
 800819e:	230c      	movs	r3, #12
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	e7d5      	b.n	8008150 <_free_r+0x24>
 80081a4:	6821      	ldr	r1, [r4, #0]
 80081a6:	1860      	adds	r0, r4, r1
 80081a8:	4283      	cmp	r3, r0
 80081aa:	d103      	bne.n	80081b4 <_free_r+0x88>
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	1841      	adds	r1, r0, r1
 80081b2:	6021      	str	r1, [r4, #0]
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	6054      	str	r4, [r2, #4]
 80081b8:	e7ca      	b.n	8008150 <_free_r+0x24>
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	20000348 	.word	0x20000348

080081c0 <sbrk_aligned>:
 80081c0:	b570      	push	{r4, r5, r6, lr}
 80081c2:	4e0f      	ldr	r6, [pc, #60]	; (8008200 <sbrk_aligned+0x40>)
 80081c4:	000d      	movs	r5, r1
 80081c6:	6831      	ldr	r1, [r6, #0]
 80081c8:	0004      	movs	r4, r0
 80081ca:	2900      	cmp	r1, #0
 80081cc:	d102      	bne.n	80081d4 <sbrk_aligned+0x14>
 80081ce:	f000 fcfd 	bl	8008bcc <_sbrk_r>
 80081d2:	6030      	str	r0, [r6, #0]
 80081d4:	0029      	movs	r1, r5
 80081d6:	0020      	movs	r0, r4
 80081d8:	f000 fcf8 	bl	8008bcc <_sbrk_r>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d00a      	beq.n	80081f6 <sbrk_aligned+0x36>
 80081e0:	2303      	movs	r3, #3
 80081e2:	1cc5      	adds	r5, r0, #3
 80081e4:	439d      	bics	r5, r3
 80081e6:	42a8      	cmp	r0, r5
 80081e8:	d007      	beq.n	80081fa <sbrk_aligned+0x3a>
 80081ea:	1a29      	subs	r1, r5, r0
 80081ec:	0020      	movs	r0, r4
 80081ee:	f000 fced 	bl	8008bcc <_sbrk_r>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	d101      	bne.n	80081fa <sbrk_aligned+0x3a>
 80081f6:	2501      	movs	r5, #1
 80081f8:	426d      	negs	r5, r5
 80081fa:	0028      	movs	r0, r5
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
 80081fe:	46c0      	nop			; (mov r8, r8)
 8008200:	2000034c 	.word	0x2000034c

08008204 <_malloc_r>:
 8008204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008206:	2203      	movs	r2, #3
 8008208:	1ccb      	adds	r3, r1, #3
 800820a:	4393      	bics	r3, r2
 800820c:	3308      	adds	r3, #8
 800820e:	0006      	movs	r6, r0
 8008210:	001f      	movs	r7, r3
 8008212:	2b0c      	cmp	r3, #12
 8008214:	d232      	bcs.n	800827c <_malloc_r+0x78>
 8008216:	270c      	movs	r7, #12
 8008218:	42b9      	cmp	r1, r7
 800821a:	d831      	bhi.n	8008280 <_malloc_r+0x7c>
 800821c:	0030      	movs	r0, r6
 800821e:	f001 fbbd 	bl	800999c <__malloc_lock>
 8008222:	4d32      	ldr	r5, [pc, #200]	; (80082ec <_malloc_r+0xe8>)
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	001c      	movs	r4, r3
 8008228:	2c00      	cmp	r4, #0
 800822a:	d12e      	bne.n	800828a <_malloc_r+0x86>
 800822c:	0039      	movs	r1, r7
 800822e:	0030      	movs	r0, r6
 8008230:	f7ff ffc6 	bl	80081c0 <sbrk_aligned>
 8008234:	0004      	movs	r4, r0
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	d11e      	bne.n	8008278 <_malloc_r+0x74>
 800823a:	682c      	ldr	r4, [r5, #0]
 800823c:	0025      	movs	r5, r4
 800823e:	2d00      	cmp	r5, #0
 8008240:	d14a      	bne.n	80082d8 <_malloc_r+0xd4>
 8008242:	6823      	ldr	r3, [r4, #0]
 8008244:	0029      	movs	r1, r5
 8008246:	18e3      	adds	r3, r4, r3
 8008248:	0030      	movs	r0, r6
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	f000 fcbe 	bl	8008bcc <_sbrk_r>
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	4283      	cmp	r3, r0
 8008254:	d143      	bne.n	80082de <_malloc_r+0xda>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	3703      	adds	r7, #3
 800825a:	1aff      	subs	r7, r7, r3
 800825c:	2303      	movs	r3, #3
 800825e:	439f      	bics	r7, r3
 8008260:	3708      	adds	r7, #8
 8008262:	2f0c      	cmp	r7, #12
 8008264:	d200      	bcs.n	8008268 <_malloc_r+0x64>
 8008266:	270c      	movs	r7, #12
 8008268:	0039      	movs	r1, r7
 800826a:	0030      	movs	r0, r6
 800826c:	f7ff ffa8 	bl	80081c0 <sbrk_aligned>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d034      	beq.n	80082de <_malloc_r+0xda>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	19df      	adds	r7, r3, r7
 8008278:	6027      	str	r7, [r4, #0]
 800827a:	e013      	b.n	80082a4 <_malloc_r+0xa0>
 800827c:	2b00      	cmp	r3, #0
 800827e:	dacb      	bge.n	8008218 <_malloc_r+0x14>
 8008280:	230c      	movs	r3, #12
 8008282:	2500      	movs	r5, #0
 8008284:	6033      	str	r3, [r6, #0]
 8008286:	0028      	movs	r0, r5
 8008288:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800828a:	6822      	ldr	r2, [r4, #0]
 800828c:	1bd1      	subs	r1, r2, r7
 800828e:	d420      	bmi.n	80082d2 <_malloc_r+0xce>
 8008290:	290b      	cmp	r1, #11
 8008292:	d917      	bls.n	80082c4 <_malloc_r+0xc0>
 8008294:	19e2      	adds	r2, r4, r7
 8008296:	6027      	str	r7, [r4, #0]
 8008298:	42a3      	cmp	r3, r4
 800829a:	d111      	bne.n	80082c0 <_malloc_r+0xbc>
 800829c:	602a      	str	r2, [r5, #0]
 800829e:	6863      	ldr	r3, [r4, #4]
 80082a0:	6011      	str	r1, [r2, #0]
 80082a2:	6053      	str	r3, [r2, #4]
 80082a4:	0030      	movs	r0, r6
 80082a6:	0025      	movs	r5, r4
 80082a8:	f001 fb80 	bl	80099ac <__malloc_unlock>
 80082ac:	2207      	movs	r2, #7
 80082ae:	350b      	adds	r5, #11
 80082b0:	1d23      	adds	r3, r4, #4
 80082b2:	4395      	bics	r5, r2
 80082b4:	1aea      	subs	r2, r5, r3
 80082b6:	429d      	cmp	r5, r3
 80082b8:	d0e5      	beq.n	8008286 <_malloc_r+0x82>
 80082ba:	1b5b      	subs	r3, r3, r5
 80082bc:	50a3      	str	r3, [r4, r2]
 80082be:	e7e2      	b.n	8008286 <_malloc_r+0x82>
 80082c0:	605a      	str	r2, [r3, #4]
 80082c2:	e7ec      	b.n	800829e <_malloc_r+0x9a>
 80082c4:	6862      	ldr	r2, [r4, #4]
 80082c6:	42a3      	cmp	r3, r4
 80082c8:	d101      	bne.n	80082ce <_malloc_r+0xca>
 80082ca:	602a      	str	r2, [r5, #0]
 80082cc:	e7ea      	b.n	80082a4 <_malloc_r+0xa0>
 80082ce:	605a      	str	r2, [r3, #4]
 80082d0:	e7e8      	b.n	80082a4 <_malloc_r+0xa0>
 80082d2:	0023      	movs	r3, r4
 80082d4:	6864      	ldr	r4, [r4, #4]
 80082d6:	e7a7      	b.n	8008228 <_malloc_r+0x24>
 80082d8:	002c      	movs	r4, r5
 80082da:	686d      	ldr	r5, [r5, #4]
 80082dc:	e7af      	b.n	800823e <_malloc_r+0x3a>
 80082de:	230c      	movs	r3, #12
 80082e0:	0030      	movs	r0, r6
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f001 fb62 	bl	80099ac <__malloc_unlock>
 80082e8:	e7cd      	b.n	8008286 <_malloc_r+0x82>
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	20000348 	.word	0x20000348

080082f0 <__cvt>:
 80082f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082f2:	001e      	movs	r6, r3
 80082f4:	2300      	movs	r3, #0
 80082f6:	0014      	movs	r4, r2
 80082f8:	b08b      	sub	sp, #44	; 0x2c
 80082fa:	429e      	cmp	r6, r3
 80082fc:	da04      	bge.n	8008308 <__cvt+0x18>
 80082fe:	2180      	movs	r1, #128	; 0x80
 8008300:	0609      	lsls	r1, r1, #24
 8008302:	1873      	adds	r3, r6, r1
 8008304:	001e      	movs	r6, r3
 8008306:	232d      	movs	r3, #45	; 0x2d
 8008308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800830a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800830c:	7013      	strb	r3, [r2, #0]
 800830e:	2320      	movs	r3, #32
 8008310:	2203      	movs	r2, #3
 8008312:	439f      	bics	r7, r3
 8008314:	2f46      	cmp	r7, #70	; 0x46
 8008316:	d007      	beq.n	8008328 <__cvt+0x38>
 8008318:	003b      	movs	r3, r7
 800831a:	3b45      	subs	r3, #69	; 0x45
 800831c:	4259      	negs	r1, r3
 800831e:	414b      	adcs	r3, r1
 8008320:	9910      	ldr	r1, [sp, #64]	; 0x40
 8008322:	3a01      	subs	r2, #1
 8008324:	18cb      	adds	r3, r1, r3
 8008326:	9310      	str	r3, [sp, #64]	; 0x40
 8008328:	ab09      	add	r3, sp, #36	; 0x24
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	ab08      	add	r3, sp, #32
 800832e:	9303      	str	r3, [sp, #12]
 8008330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008332:	9200      	str	r2, [sp, #0]
 8008334:	9302      	str	r3, [sp, #8]
 8008336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008338:	0022      	movs	r2, r4
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	0033      	movs	r3, r6
 800833e:	f000 fd03 	bl	8008d48 <_dtoa_r>
 8008342:	0005      	movs	r5, r0
 8008344:	2f47      	cmp	r7, #71	; 0x47
 8008346:	d102      	bne.n	800834e <__cvt+0x5e>
 8008348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800834a:	07db      	lsls	r3, r3, #31
 800834c:	d528      	bpl.n	80083a0 <__cvt+0xb0>
 800834e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008350:	18eb      	adds	r3, r5, r3
 8008352:	9307      	str	r3, [sp, #28]
 8008354:	2f46      	cmp	r7, #70	; 0x46
 8008356:	d114      	bne.n	8008382 <__cvt+0x92>
 8008358:	782b      	ldrb	r3, [r5, #0]
 800835a:	2b30      	cmp	r3, #48	; 0x30
 800835c:	d10c      	bne.n	8008378 <__cvt+0x88>
 800835e:	2200      	movs	r2, #0
 8008360:	2300      	movs	r3, #0
 8008362:	0020      	movs	r0, r4
 8008364:	0031      	movs	r1, r6
 8008366:	f7f8 f86b 	bl	8000440 <__aeabi_dcmpeq>
 800836a:	2800      	cmp	r0, #0
 800836c:	d104      	bne.n	8008378 <__cvt+0x88>
 800836e:	2301      	movs	r3, #1
 8008370:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800837a:	9a07      	ldr	r2, [sp, #28]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	18d3      	adds	r3, r2, r3
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	2200      	movs	r2, #0
 8008384:	2300      	movs	r3, #0
 8008386:	0020      	movs	r0, r4
 8008388:	0031      	movs	r1, r6
 800838a:	f7f8 f859 	bl	8000440 <__aeabi_dcmpeq>
 800838e:	2800      	cmp	r0, #0
 8008390:	d001      	beq.n	8008396 <__cvt+0xa6>
 8008392:	9b07      	ldr	r3, [sp, #28]
 8008394:	9309      	str	r3, [sp, #36]	; 0x24
 8008396:	2230      	movs	r2, #48	; 0x30
 8008398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839a:	9907      	ldr	r1, [sp, #28]
 800839c:	428b      	cmp	r3, r1
 800839e:	d306      	bcc.n	80083ae <__cvt+0xbe>
 80083a0:	0028      	movs	r0, r5
 80083a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80083a6:	1b5b      	subs	r3, r3, r5
 80083a8:	6013      	str	r3, [r2, #0]
 80083aa:	b00b      	add	sp, #44	; 0x2c
 80083ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ae:	1c59      	adds	r1, r3, #1
 80083b0:	9109      	str	r1, [sp, #36]	; 0x24
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	e7f0      	b.n	8008398 <__cvt+0xa8>

080083b6 <__exponent>:
 80083b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b8:	1c83      	adds	r3, r0, #2
 80083ba:	b087      	sub	sp, #28
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	0005      	movs	r5, r0
 80083c0:	000c      	movs	r4, r1
 80083c2:	232b      	movs	r3, #43	; 0x2b
 80083c4:	7002      	strb	r2, [r0, #0]
 80083c6:	2900      	cmp	r1, #0
 80083c8:	da01      	bge.n	80083ce <__exponent+0x18>
 80083ca:	424c      	negs	r4, r1
 80083cc:	3302      	adds	r3, #2
 80083ce:	706b      	strb	r3, [r5, #1]
 80083d0:	2c09      	cmp	r4, #9
 80083d2:	dd31      	ble.n	8008438 <__exponent+0x82>
 80083d4:	270a      	movs	r7, #10
 80083d6:	ab04      	add	r3, sp, #16
 80083d8:	1dde      	adds	r6, r3, #7
 80083da:	0020      	movs	r0, r4
 80083dc:	0039      	movs	r1, r7
 80083de:	9601      	str	r6, [sp, #4]
 80083e0:	f7f8 f818 	bl	8000414 <__aeabi_idivmod>
 80083e4:	3e01      	subs	r6, #1
 80083e6:	3130      	adds	r1, #48	; 0x30
 80083e8:	0020      	movs	r0, r4
 80083ea:	7031      	strb	r1, [r6, #0]
 80083ec:	0039      	movs	r1, r7
 80083ee:	9402      	str	r4, [sp, #8]
 80083f0:	f7f7 ff2a 	bl	8000248 <__divsi3>
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	0004      	movs	r4, r0
 80083f8:	2b63      	cmp	r3, #99	; 0x63
 80083fa:	dcee      	bgt.n	80083da <__exponent+0x24>
 80083fc:	9b01      	ldr	r3, [sp, #4]
 80083fe:	3430      	adds	r4, #48	; 0x30
 8008400:	1e9a      	subs	r2, r3, #2
 8008402:	0013      	movs	r3, r2
 8008404:	9903      	ldr	r1, [sp, #12]
 8008406:	7014      	strb	r4, [r2, #0]
 8008408:	a804      	add	r0, sp, #16
 800840a:	3007      	adds	r0, #7
 800840c:	4298      	cmp	r0, r3
 800840e:	d80e      	bhi.n	800842e <__exponent+0x78>
 8008410:	ab04      	add	r3, sp, #16
 8008412:	3307      	adds	r3, #7
 8008414:	2000      	movs	r0, #0
 8008416:	429a      	cmp	r2, r3
 8008418:	d804      	bhi.n	8008424 <__exponent+0x6e>
 800841a:	ab04      	add	r3, sp, #16
 800841c:	3009      	adds	r0, #9
 800841e:	18c0      	adds	r0, r0, r3
 8008420:	9b01      	ldr	r3, [sp, #4]
 8008422:	1ac0      	subs	r0, r0, r3
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	1818      	adds	r0, r3, r0
 8008428:	1b40      	subs	r0, r0, r5
 800842a:	b007      	add	sp, #28
 800842c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800842e:	7818      	ldrb	r0, [r3, #0]
 8008430:	3301      	adds	r3, #1
 8008432:	7008      	strb	r0, [r1, #0]
 8008434:	3101      	adds	r1, #1
 8008436:	e7e7      	b.n	8008408 <__exponent+0x52>
 8008438:	2330      	movs	r3, #48	; 0x30
 800843a:	18e4      	adds	r4, r4, r3
 800843c:	70ab      	strb	r3, [r5, #2]
 800843e:	1d28      	adds	r0, r5, #4
 8008440:	70ec      	strb	r4, [r5, #3]
 8008442:	e7f1      	b.n	8008428 <__exponent+0x72>

08008444 <_printf_float>:
 8008444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008446:	b095      	sub	sp, #84	; 0x54
 8008448:	000c      	movs	r4, r1
 800844a:	9209      	str	r2, [sp, #36]	; 0x24
 800844c:	001e      	movs	r6, r3
 800844e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8008450:	0007      	movs	r7, r0
 8008452:	f001 fa93 	bl	800997c <_localeconv_r>
 8008456:	6803      	ldr	r3, [r0, #0]
 8008458:	0018      	movs	r0, r3
 800845a:	930c      	str	r3, [sp, #48]	; 0x30
 800845c:	f7f7 fe4e 	bl	80000fc <strlen>
 8008460:	2300      	movs	r3, #0
 8008462:	9312      	str	r3, [sp, #72]	; 0x48
 8008464:	7e23      	ldrb	r3, [r4, #24]
 8008466:	2207      	movs	r2, #7
 8008468:	930a      	str	r3, [sp, #40]	; 0x28
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	900e      	str	r0, [sp, #56]	; 0x38
 800846e:	930d      	str	r3, [sp, #52]	; 0x34
 8008470:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008472:	682b      	ldr	r3, [r5, #0]
 8008474:	05c9      	lsls	r1, r1, #23
 8008476:	d547      	bpl.n	8008508 <_printf_float+0xc4>
 8008478:	189b      	adds	r3, r3, r2
 800847a:	4393      	bics	r3, r2
 800847c:	001a      	movs	r2, r3
 800847e:	3208      	adds	r2, #8
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	64a2      	str	r2, [r4, #72]	; 0x48
 8008488:	64e3      	str	r3, [r4, #76]	; 0x4c
 800848a:	2201      	movs	r2, #1
 800848c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800848e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8008490:	930b      	str	r3, [sp, #44]	; 0x2c
 8008492:	006b      	lsls	r3, r5, #1
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	930f      	str	r3, [sp, #60]	; 0x3c
 8008498:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800849a:	4ba7      	ldr	r3, [pc, #668]	; (8008738 <_printf_float+0x2f4>)
 800849c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800849e:	4252      	negs	r2, r2
 80084a0:	f7f9 ffe4 	bl	800246c <__aeabi_dcmpun>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d131      	bne.n	800850c <_printf_float+0xc8>
 80084a8:	2201      	movs	r2, #1
 80084aa:	4ba3      	ldr	r3, [pc, #652]	; (8008738 <_printf_float+0x2f4>)
 80084ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80084ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084b0:	4252      	negs	r2, r2
 80084b2:	f7f7 ffd5 	bl	8000460 <__aeabi_dcmple>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d128      	bne.n	800850c <_printf_float+0xc8>
 80084ba:	2200      	movs	r2, #0
 80084bc:	2300      	movs	r3, #0
 80084be:	0029      	movs	r1, r5
 80084c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80084c2:	f7f7 ffc3 	bl	800044c <__aeabi_dcmplt>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	d003      	beq.n	80084d2 <_printf_float+0x8e>
 80084ca:	0023      	movs	r3, r4
 80084cc:	222d      	movs	r2, #45	; 0x2d
 80084ce:	3343      	adds	r3, #67	; 0x43
 80084d0:	701a      	strb	r2, [r3, #0]
 80084d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084d4:	4d99      	ldr	r5, [pc, #612]	; (800873c <_printf_float+0x2f8>)
 80084d6:	2b47      	cmp	r3, #71	; 0x47
 80084d8:	d900      	bls.n	80084dc <_printf_float+0x98>
 80084da:	4d99      	ldr	r5, [pc, #612]	; (8008740 <_printf_float+0x2fc>)
 80084dc:	2303      	movs	r3, #3
 80084de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	3301      	adds	r3, #1
 80084e4:	439a      	bics	r2, r3
 80084e6:	2300      	movs	r3, #0
 80084e8:	6022      	str	r2, [r4, #0]
 80084ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084ee:	0021      	movs	r1, r4
 80084f0:	0038      	movs	r0, r7
 80084f2:	9600      	str	r6, [sp, #0]
 80084f4:	aa13      	add	r2, sp, #76	; 0x4c
 80084f6:	f000 f9e7 	bl	80088c8 <_printf_common>
 80084fa:	1c43      	adds	r3, r0, #1
 80084fc:	d000      	beq.n	8008500 <_printf_float+0xbc>
 80084fe:	e0a2      	b.n	8008646 <_printf_float+0x202>
 8008500:	2001      	movs	r0, #1
 8008502:	4240      	negs	r0, r0
 8008504:	b015      	add	sp, #84	; 0x54
 8008506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008508:	3307      	adds	r3, #7
 800850a:	e7b6      	b.n	800847a <_printf_float+0x36>
 800850c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850e:	002b      	movs	r3, r5
 8008510:	0010      	movs	r0, r2
 8008512:	0029      	movs	r1, r5
 8008514:	f7f9 ffaa 	bl	800246c <__aeabi_dcmpun>
 8008518:	2800      	cmp	r0, #0
 800851a:	d00b      	beq.n	8008534 <_printf_float+0xf0>
 800851c:	2d00      	cmp	r5, #0
 800851e:	da03      	bge.n	8008528 <_printf_float+0xe4>
 8008520:	0023      	movs	r3, r4
 8008522:	222d      	movs	r2, #45	; 0x2d
 8008524:	3343      	adds	r3, #67	; 0x43
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852a:	4d86      	ldr	r5, [pc, #536]	; (8008744 <_printf_float+0x300>)
 800852c:	2b47      	cmp	r3, #71	; 0x47
 800852e:	d9d5      	bls.n	80084dc <_printf_float+0x98>
 8008530:	4d85      	ldr	r5, [pc, #532]	; (8008748 <_printf_float+0x304>)
 8008532:	e7d3      	b.n	80084dc <_printf_float+0x98>
 8008534:	2220      	movs	r2, #32
 8008536:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008538:	6863      	ldr	r3, [r4, #4]
 800853a:	4391      	bics	r1, r2
 800853c:	910f      	str	r1, [sp, #60]	; 0x3c
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	d149      	bne.n	80085d6 <_printf_float+0x192>
 8008542:	3307      	adds	r3, #7
 8008544:	6063      	str	r3, [r4, #4]
 8008546:	2380      	movs	r3, #128	; 0x80
 8008548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4313      	orrs	r3, r2
 800854e:	2200      	movs	r2, #0
 8008550:	9206      	str	r2, [sp, #24]
 8008552:	aa12      	add	r2, sp, #72	; 0x48
 8008554:	9205      	str	r2, [sp, #20]
 8008556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008558:	a908      	add	r1, sp, #32
 800855a:	9204      	str	r2, [sp, #16]
 800855c:	aa11      	add	r2, sp, #68	; 0x44
 800855e:	9203      	str	r2, [sp, #12]
 8008560:	2223      	movs	r2, #35	; 0x23
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	1852      	adds	r2, r2, r1
 800856a:	9202      	str	r2, [sp, #8]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	0038      	movs	r0, r7
 8008570:	002b      	movs	r3, r5
 8008572:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008574:	f7ff febc 	bl	80082f0 <__cvt>
 8008578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800857a:	0005      	movs	r5, r0
 800857c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800857e:	2b47      	cmp	r3, #71	; 0x47
 8008580:	d108      	bne.n	8008594 <_printf_float+0x150>
 8008582:	1ccb      	adds	r3, r1, #3
 8008584:	db02      	blt.n	800858c <_printf_float+0x148>
 8008586:	6863      	ldr	r3, [r4, #4]
 8008588:	4299      	cmp	r1, r3
 800858a:	dd48      	ble.n	800861e <_printf_float+0x1da>
 800858c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858e:	3b02      	subs	r3, #2
 8008590:	b2db      	uxtb	r3, r3
 8008592:	930a      	str	r3, [sp, #40]	; 0x28
 8008594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008596:	2b65      	cmp	r3, #101	; 0x65
 8008598:	d824      	bhi.n	80085e4 <_printf_float+0x1a0>
 800859a:	0020      	movs	r0, r4
 800859c:	001a      	movs	r2, r3
 800859e:	3901      	subs	r1, #1
 80085a0:	3050      	adds	r0, #80	; 0x50
 80085a2:	9111      	str	r1, [sp, #68]	; 0x44
 80085a4:	f7ff ff07 	bl	80083b6 <__exponent>
 80085a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085aa:	900b      	str	r0, [sp, #44]	; 0x2c
 80085ac:	1813      	adds	r3, r2, r0
 80085ae:	6123      	str	r3, [r4, #16]
 80085b0:	2a01      	cmp	r2, #1
 80085b2:	dc02      	bgt.n	80085ba <_printf_float+0x176>
 80085b4:	6822      	ldr	r2, [r4, #0]
 80085b6:	07d2      	lsls	r2, r2, #31
 80085b8:	d501      	bpl.n	80085be <_printf_float+0x17a>
 80085ba:	3301      	adds	r3, #1
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	2323      	movs	r3, #35	; 0x23
 80085c0:	aa08      	add	r2, sp, #32
 80085c2:	189b      	adds	r3, r3, r2
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d100      	bne.n	80085cc <_printf_float+0x188>
 80085ca:	e78f      	b.n	80084ec <_printf_float+0xa8>
 80085cc:	0023      	movs	r3, r4
 80085ce:	222d      	movs	r2, #45	; 0x2d
 80085d0:	3343      	adds	r3, #67	; 0x43
 80085d2:	701a      	strb	r2, [r3, #0]
 80085d4:	e78a      	b.n	80084ec <_printf_float+0xa8>
 80085d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085d8:	2a47      	cmp	r2, #71	; 0x47
 80085da:	d1b4      	bne.n	8008546 <_printf_float+0x102>
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1b2      	bne.n	8008546 <_printf_float+0x102>
 80085e0:	3301      	adds	r3, #1
 80085e2:	e7af      	b.n	8008544 <_printf_float+0x100>
 80085e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e6:	2b66      	cmp	r3, #102	; 0x66
 80085e8:	d11b      	bne.n	8008622 <_printf_float+0x1de>
 80085ea:	6863      	ldr	r3, [r4, #4]
 80085ec:	2900      	cmp	r1, #0
 80085ee:	dd0d      	ble.n	800860c <_printf_float+0x1c8>
 80085f0:	6121      	str	r1, [r4, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d102      	bne.n	80085fc <_printf_float+0x1b8>
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	07d2      	lsls	r2, r2, #31
 80085fa:	d502      	bpl.n	8008602 <_printf_float+0x1be>
 80085fc:	3301      	adds	r3, #1
 80085fe:	1859      	adds	r1, r3, r1
 8008600:	6121      	str	r1, [r4, #16]
 8008602:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008604:	65a3      	str	r3, [r4, #88]	; 0x58
 8008606:	2300      	movs	r3, #0
 8008608:	930b      	str	r3, [sp, #44]	; 0x2c
 800860a:	e7d8      	b.n	80085be <_printf_float+0x17a>
 800860c:	2b00      	cmp	r3, #0
 800860e:	d103      	bne.n	8008618 <_printf_float+0x1d4>
 8008610:	2201      	movs	r2, #1
 8008612:	6821      	ldr	r1, [r4, #0]
 8008614:	4211      	tst	r1, r2
 8008616:	d000      	beq.n	800861a <_printf_float+0x1d6>
 8008618:	1c9a      	adds	r2, r3, #2
 800861a:	6122      	str	r2, [r4, #16]
 800861c:	e7f1      	b.n	8008602 <_printf_float+0x1be>
 800861e:	2367      	movs	r3, #103	; 0x67
 8008620:	930a      	str	r3, [sp, #40]	; 0x28
 8008622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008626:	4293      	cmp	r3, r2
 8008628:	db06      	blt.n	8008638 <_printf_float+0x1f4>
 800862a:	6822      	ldr	r2, [r4, #0]
 800862c:	6123      	str	r3, [r4, #16]
 800862e:	07d2      	lsls	r2, r2, #31
 8008630:	d5e7      	bpl.n	8008602 <_printf_float+0x1be>
 8008632:	3301      	adds	r3, #1
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	e7e4      	b.n	8008602 <_printf_float+0x1be>
 8008638:	2101      	movs	r1, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	dc01      	bgt.n	8008642 <_printf_float+0x1fe>
 800863e:	1849      	adds	r1, r1, r1
 8008640:	1ac9      	subs	r1, r1, r3
 8008642:	1852      	adds	r2, r2, r1
 8008644:	e7e9      	b.n	800861a <_printf_float+0x1d6>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	0553      	lsls	r3, r2, #21
 800864a:	d407      	bmi.n	800865c <_printf_float+0x218>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	002a      	movs	r2, r5
 8008650:	0038      	movs	r0, r7
 8008652:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008654:	47b0      	blx	r6
 8008656:	1c43      	adds	r3, r0, #1
 8008658:	d128      	bne.n	80086ac <_printf_float+0x268>
 800865a:	e751      	b.n	8008500 <_printf_float+0xbc>
 800865c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800865e:	2b65      	cmp	r3, #101	; 0x65
 8008660:	d800      	bhi.n	8008664 <_printf_float+0x220>
 8008662:	e0e1      	b.n	8008828 <_printf_float+0x3e4>
 8008664:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008666:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008668:	2200      	movs	r2, #0
 800866a:	2300      	movs	r3, #0
 800866c:	f7f7 fee8 	bl	8000440 <__aeabi_dcmpeq>
 8008670:	2800      	cmp	r0, #0
 8008672:	d031      	beq.n	80086d8 <_printf_float+0x294>
 8008674:	2301      	movs	r3, #1
 8008676:	0038      	movs	r0, r7
 8008678:	4a34      	ldr	r2, [pc, #208]	; (800874c <_printf_float+0x308>)
 800867a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800867c:	47b0      	blx	r6
 800867e:	1c43      	adds	r3, r0, #1
 8008680:	d100      	bne.n	8008684 <_printf_float+0x240>
 8008682:	e73d      	b.n	8008500 <_printf_float+0xbc>
 8008684:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008686:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008688:	4293      	cmp	r3, r2
 800868a:	db02      	blt.n	8008692 <_printf_float+0x24e>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	07db      	lsls	r3, r3, #31
 8008690:	d50c      	bpl.n	80086ac <_printf_float+0x268>
 8008692:	0038      	movs	r0, r7
 8008694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800869a:	47b0      	blx	r6
 800869c:	2500      	movs	r5, #0
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d100      	bne.n	80086a4 <_printf_float+0x260>
 80086a2:	e72d      	b.n	8008500 <_printf_float+0xbc>
 80086a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086a6:	3b01      	subs	r3, #1
 80086a8:	42ab      	cmp	r3, r5
 80086aa:	dc0a      	bgt.n	80086c2 <_printf_float+0x27e>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	079b      	lsls	r3, r3, #30
 80086b0:	d500      	bpl.n	80086b4 <_printf_float+0x270>
 80086b2:	e106      	b.n	80088c2 <_printf_float+0x47e>
 80086b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086b6:	68e0      	ldr	r0, [r4, #12]
 80086b8:	4298      	cmp	r0, r3
 80086ba:	db00      	blt.n	80086be <_printf_float+0x27a>
 80086bc:	e722      	b.n	8008504 <_printf_float+0xc0>
 80086be:	0018      	movs	r0, r3
 80086c0:	e720      	b.n	8008504 <_printf_float+0xc0>
 80086c2:	0022      	movs	r2, r4
 80086c4:	2301      	movs	r3, #1
 80086c6:	0038      	movs	r0, r7
 80086c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086ca:	321a      	adds	r2, #26
 80086cc:	47b0      	blx	r6
 80086ce:	1c43      	adds	r3, r0, #1
 80086d0:	d100      	bne.n	80086d4 <_printf_float+0x290>
 80086d2:	e715      	b.n	8008500 <_printf_float+0xbc>
 80086d4:	3501      	adds	r5, #1
 80086d6:	e7e5      	b.n	80086a4 <_printf_float+0x260>
 80086d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dc38      	bgt.n	8008750 <_printf_float+0x30c>
 80086de:	2301      	movs	r3, #1
 80086e0:	0038      	movs	r0, r7
 80086e2:	4a1a      	ldr	r2, [pc, #104]	; (800874c <_printf_float+0x308>)
 80086e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086e6:	47b0      	blx	r6
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d100      	bne.n	80086ee <_printf_float+0x2aa>
 80086ec:	e708      	b.n	8008500 <_printf_float+0xbc>
 80086ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086f2:	4313      	orrs	r3, r2
 80086f4:	d102      	bne.n	80086fc <_printf_float+0x2b8>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	07db      	lsls	r3, r3, #31
 80086fa:	d5d7      	bpl.n	80086ac <_printf_float+0x268>
 80086fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086fe:	0038      	movs	r0, r7
 8008700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008702:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008704:	47b0      	blx	r6
 8008706:	1c43      	adds	r3, r0, #1
 8008708:	d100      	bne.n	800870c <_printf_float+0x2c8>
 800870a:	e6f9      	b.n	8008500 <_printf_float+0xbc>
 800870c:	2300      	movs	r3, #0
 800870e:	930a      	str	r3, [sp, #40]	; 0x28
 8008710:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008714:	425b      	negs	r3, r3
 8008716:	4293      	cmp	r3, r2
 8008718:	dc01      	bgt.n	800871e <_printf_float+0x2da>
 800871a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800871c:	e797      	b.n	800864e <_printf_float+0x20a>
 800871e:	0022      	movs	r2, r4
 8008720:	2301      	movs	r3, #1
 8008722:	0038      	movs	r0, r7
 8008724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008726:	321a      	adds	r2, #26
 8008728:	47b0      	blx	r6
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	d100      	bne.n	8008730 <_printf_float+0x2ec>
 800872e:	e6e7      	b.n	8008500 <_printf_float+0xbc>
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	3301      	adds	r3, #1
 8008734:	e7eb      	b.n	800870e <_printf_float+0x2ca>
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	7fefffff 	.word	0x7fefffff
 800873c:	0800b21c 	.word	0x0800b21c
 8008740:	0800b220 	.word	0x0800b220
 8008744:	0800b224 	.word	0x0800b224
 8008748:	0800b228 	.word	0x0800b228
 800874c:	0800b22c 	.word	0x0800b22c
 8008750:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008752:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008754:	920a      	str	r2, [sp, #40]	; 0x28
 8008756:	429a      	cmp	r2, r3
 8008758:	dd00      	ble.n	800875c <_printf_float+0x318>
 800875a:	930a      	str	r3, [sp, #40]	; 0x28
 800875c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875e:	2b00      	cmp	r3, #0
 8008760:	dc3c      	bgt.n	80087dc <_printf_float+0x398>
 8008762:	2300      	movs	r3, #0
 8008764:	930d      	str	r3, [sp, #52]	; 0x34
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	43db      	mvns	r3, r3
 800876a:	17db      	asrs	r3, r3, #31
 800876c:	930f      	str	r3, [sp, #60]	; 0x3c
 800876e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008770:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008772:	930b      	str	r3, [sp, #44]	; 0x2c
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	4013      	ands	r3, r2
 8008778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800877e:	4293      	cmp	r3, r2
 8008780:	dc34      	bgt.n	80087ec <_printf_float+0x3a8>
 8008782:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008784:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008786:	4293      	cmp	r3, r2
 8008788:	db3d      	blt.n	8008806 <_printf_float+0x3c2>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	07db      	lsls	r3, r3, #31
 800878e:	d43a      	bmi.n	8008806 <_printf_float+0x3c2>
 8008790:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008792:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008794:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	1a52      	subs	r2, r2, r1
 800879a:	920a      	str	r2, [sp, #40]	; 0x28
 800879c:	429a      	cmp	r2, r3
 800879e:	dd00      	ble.n	80087a2 <_printf_float+0x35e>
 80087a0:	930a      	str	r3, [sp, #40]	; 0x28
 80087a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	dc36      	bgt.n	8008816 <_printf_float+0x3d2>
 80087a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087aa:	2500      	movs	r5, #0
 80087ac:	43db      	mvns	r3, r3
 80087ae:	17db      	asrs	r3, r3, #31
 80087b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80087b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80087b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087bc:	400a      	ands	r2, r1
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	42ab      	cmp	r3, r5
 80087c2:	dc00      	bgt.n	80087c6 <_printf_float+0x382>
 80087c4:	e772      	b.n	80086ac <_printf_float+0x268>
 80087c6:	0022      	movs	r2, r4
 80087c8:	2301      	movs	r3, #1
 80087ca:	0038      	movs	r0, r7
 80087cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ce:	321a      	adds	r2, #26
 80087d0:	47b0      	blx	r6
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	d100      	bne.n	80087d8 <_printf_float+0x394>
 80087d6:	e693      	b.n	8008500 <_printf_float+0xbc>
 80087d8:	3501      	adds	r5, #1
 80087da:	e7ea      	b.n	80087b2 <_printf_float+0x36e>
 80087dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087de:	002a      	movs	r2, r5
 80087e0:	0038      	movs	r0, r7
 80087e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087e4:	47b0      	blx	r6
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	d1bb      	bne.n	8008762 <_printf_float+0x31e>
 80087ea:	e689      	b.n	8008500 <_printf_float+0xbc>
 80087ec:	0022      	movs	r2, r4
 80087ee:	2301      	movs	r3, #1
 80087f0:	0038      	movs	r0, r7
 80087f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087f4:	321a      	adds	r2, #26
 80087f6:	47b0      	blx	r6
 80087f8:	1c43      	adds	r3, r0, #1
 80087fa:	d100      	bne.n	80087fe <_printf_float+0x3ba>
 80087fc:	e680      	b.n	8008500 <_printf_float+0xbc>
 80087fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008800:	3301      	adds	r3, #1
 8008802:	930d      	str	r3, [sp, #52]	; 0x34
 8008804:	e7b3      	b.n	800876e <_printf_float+0x32a>
 8008806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008808:	0038      	movs	r0, r7
 800880a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800880c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800880e:	47b0      	blx	r6
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d1bd      	bne.n	8008790 <_printf_float+0x34c>
 8008814:	e674      	b.n	8008500 <_printf_float+0xbc>
 8008816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008818:	0038      	movs	r0, r7
 800881a:	18ea      	adds	r2, r5, r3
 800881c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800881e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008820:	47b0      	blx	r6
 8008822:	1c43      	adds	r3, r0, #1
 8008824:	d1c0      	bne.n	80087a8 <_printf_float+0x364>
 8008826:	e66b      	b.n	8008500 <_printf_float+0xbc>
 8008828:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800882a:	2b01      	cmp	r3, #1
 800882c:	dc02      	bgt.n	8008834 <_printf_float+0x3f0>
 800882e:	2301      	movs	r3, #1
 8008830:	421a      	tst	r2, r3
 8008832:	d034      	beq.n	800889e <_printf_float+0x45a>
 8008834:	2301      	movs	r3, #1
 8008836:	002a      	movs	r2, r5
 8008838:	0038      	movs	r0, r7
 800883a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800883c:	47b0      	blx	r6
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	d100      	bne.n	8008844 <_printf_float+0x400>
 8008842:	e65d      	b.n	8008500 <_printf_float+0xbc>
 8008844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008846:	0038      	movs	r0, r7
 8008848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800884a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800884c:	47b0      	blx	r6
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d100      	bne.n	8008854 <_printf_float+0x410>
 8008852:	e655      	b.n	8008500 <_printf_float+0xbc>
 8008854:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008856:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008858:	2200      	movs	r2, #0
 800885a:	2300      	movs	r3, #0
 800885c:	f7f7 fdf0 	bl	8000440 <__aeabi_dcmpeq>
 8008860:	2800      	cmp	r0, #0
 8008862:	d11a      	bne.n	800889a <_printf_float+0x456>
 8008864:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008866:	1c6a      	adds	r2, r5, #1
 8008868:	3b01      	subs	r3, #1
 800886a:	0038      	movs	r0, r7
 800886c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800886e:	47b0      	blx	r6
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d10e      	bne.n	8008892 <_printf_float+0x44e>
 8008874:	e644      	b.n	8008500 <_printf_float+0xbc>
 8008876:	0022      	movs	r2, r4
 8008878:	2301      	movs	r3, #1
 800887a:	0038      	movs	r0, r7
 800887c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887e:	321a      	adds	r2, #26
 8008880:	47b0      	blx	r6
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d100      	bne.n	8008888 <_printf_float+0x444>
 8008886:	e63b      	b.n	8008500 <_printf_float+0xbc>
 8008888:	3501      	adds	r5, #1
 800888a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800888c:	3b01      	subs	r3, #1
 800888e:	42ab      	cmp	r3, r5
 8008890:	dcf1      	bgt.n	8008876 <_printf_float+0x432>
 8008892:	0022      	movs	r2, r4
 8008894:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008896:	3250      	adds	r2, #80	; 0x50
 8008898:	e6da      	b.n	8008650 <_printf_float+0x20c>
 800889a:	2500      	movs	r5, #0
 800889c:	e7f5      	b.n	800888a <_printf_float+0x446>
 800889e:	002a      	movs	r2, r5
 80088a0:	e7e3      	b.n	800886a <_printf_float+0x426>
 80088a2:	0022      	movs	r2, r4
 80088a4:	2301      	movs	r3, #1
 80088a6:	0038      	movs	r0, r7
 80088a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088aa:	3219      	adds	r2, #25
 80088ac:	47b0      	blx	r6
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	d100      	bne.n	80088b4 <_printf_float+0x470>
 80088b2:	e625      	b.n	8008500 <_printf_float+0xbc>
 80088b4:	3501      	adds	r5, #1
 80088b6:	68e3      	ldr	r3, [r4, #12]
 80088b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	42ab      	cmp	r3, r5
 80088be:	dcf0      	bgt.n	80088a2 <_printf_float+0x45e>
 80088c0:	e6f8      	b.n	80086b4 <_printf_float+0x270>
 80088c2:	2500      	movs	r5, #0
 80088c4:	e7f7      	b.n	80088b6 <_printf_float+0x472>
 80088c6:	46c0      	nop			; (mov r8, r8)

080088c8 <_printf_common>:
 80088c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ca:	0015      	movs	r5, r2
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	688a      	ldr	r2, [r1, #8]
 80088d0:	690b      	ldr	r3, [r1, #16]
 80088d2:	000c      	movs	r4, r1
 80088d4:	9000      	str	r0, [sp, #0]
 80088d6:	4293      	cmp	r3, r2
 80088d8:	da00      	bge.n	80088dc <_printf_common+0x14>
 80088da:	0013      	movs	r3, r2
 80088dc:	0022      	movs	r2, r4
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	3243      	adds	r2, #67	; 0x43
 80088e2:	7812      	ldrb	r2, [r2, #0]
 80088e4:	2a00      	cmp	r2, #0
 80088e6:	d001      	beq.n	80088ec <_printf_common+0x24>
 80088e8:	3301      	adds	r3, #1
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	069b      	lsls	r3, r3, #26
 80088f0:	d502      	bpl.n	80088f8 <_printf_common+0x30>
 80088f2:	682b      	ldr	r3, [r5, #0]
 80088f4:	3302      	adds	r3, #2
 80088f6:	602b      	str	r3, [r5, #0]
 80088f8:	6822      	ldr	r2, [r4, #0]
 80088fa:	2306      	movs	r3, #6
 80088fc:	0017      	movs	r7, r2
 80088fe:	401f      	ands	r7, r3
 8008900:	421a      	tst	r2, r3
 8008902:	d027      	beq.n	8008954 <_printf_common+0x8c>
 8008904:	0023      	movs	r3, r4
 8008906:	3343      	adds	r3, #67	; 0x43
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	1e5a      	subs	r2, r3, #1
 800890c:	4193      	sbcs	r3, r2
 800890e:	6822      	ldr	r2, [r4, #0]
 8008910:	0692      	lsls	r2, r2, #26
 8008912:	d430      	bmi.n	8008976 <_printf_common+0xae>
 8008914:	0022      	movs	r2, r4
 8008916:	9901      	ldr	r1, [sp, #4]
 8008918:	9800      	ldr	r0, [sp, #0]
 800891a:	9e08      	ldr	r6, [sp, #32]
 800891c:	3243      	adds	r2, #67	; 0x43
 800891e:	47b0      	blx	r6
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d025      	beq.n	8008970 <_printf_common+0xa8>
 8008924:	2306      	movs	r3, #6
 8008926:	6820      	ldr	r0, [r4, #0]
 8008928:	682a      	ldr	r2, [r5, #0]
 800892a:	68e1      	ldr	r1, [r4, #12]
 800892c:	2500      	movs	r5, #0
 800892e:	4003      	ands	r3, r0
 8008930:	2b04      	cmp	r3, #4
 8008932:	d103      	bne.n	800893c <_printf_common+0x74>
 8008934:	1a8d      	subs	r5, r1, r2
 8008936:	43eb      	mvns	r3, r5
 8008938:	17db      	asrs	r3, r3, #31
 800893a:	401d      	ands	r5, r3
 800893c:	68a3      	ldr	r3, [r4, #8]
 800893e:	6922      	ldr	r2, [r4, #16]
 8008940:	4293      	cmp	r3, r2
 8008942:	dd01      	ble.n	8008948 <_printf_common+0x80>
 8008944:	1a9b      	subs	r3, r3, r2
 8008946:	18ed      	adds	r5, r5, r3
 8008948:	2700      	movs	r7, #0
 800894a:	42bd      	cmp	r5, r7
 800894c:	d120      	bne.n	8008990 <_printf_common+0xc8>
 800894e:	2000      	movs	r0, #0
 8008950:	e010      	b.n	8008974 <_printf_common+0xac>
 8008952:	3701      	adds	r7, #1
 8008954:	68e3      	ldr	r3, [r4, #12]
 8008956:	682a      	ldr	r2, [r5, #0]
 8008958:	1a9b      	subs	r3, r3, r2
 800895a:	42bb      	cmp	r3, r7
 800895c:	ddd2      	ble.n	8008904 <_printf_common+0x3c>
 800895e:	0022      	movs	r2, r4
 8008960:	2301      	movs	r3, #1
 8008962:	9901      	ldr	r1, [sp, #4]
 8008964:	9800      	ldr	r0, [sp, #0]
 8008966:	9e08      	ldr	r6, [sp, #32]
 8008968:	3219      	adds	r2, #25
 800896a:	47b0      	blx	r6
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d1f0      	bne.n	8008952 <_printf_common+0x8a>
 8008970:	2001      	movs	r0, #1
 8008972:	4240      	negs	r0, r0
 8008974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008976:	2030      	movs	r0, #48	; 0x30
 8008978:	18e1      	adds	r1, r4, r3
 800897a:	3143      	adds	r1, #67	; 0x43
 800897c:	7008      	strb	r0, [r1, #0]
 800897e:	0021      	movs	r1, r4
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	3145      	adds	r1, #69	; 0x45
 8008984:	7809      	ldrb	r1, [r1, #0]
 8008986:	18a2      	adds	r2, r4, r2
 8008988:	3243      	adds	r2, #67	; 0x43
 800898a:	3302      	adds	r3, #2
 800898c:	7011      	strb	r1, [r2, #0]
 800898e:	e7c1      	b.n	8008914 <_printf_common+0x4c>
 8008990:	0022      	movs	r2, r4
 8008992:	2301      	movs	r3, #1
 8008994:	9901      	ldr	r1, [sp, #4]
 8008996:	9800      	ldr	r0, [sp, #0]
 8008998:	9e08      	ldr	r6, [sp, #32]
 800899a:	321a      	adds	r2, #26
 800899c:	47b0      	blx	r6
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d0e6      	beq.n	8008970 <_printf_common+0xa8>
 80089a2:	3701      	adds	r7, #1
 80089a4:	e7d1      	b.n	800894a <_printf_common+0x82>
	...

080089a8 <_printf_i>:
 80089a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089aa:	b08b      	sub	sp, #44	; 0x2c
 80089ac:	9206      	str	r2, [sp, #24]
 80089ae:	000a      	movs	r2, r1
 80089b0:	3243      	adds	r2, #67	; 0x43
 80089b2:	9307      	str	r3, [sp, #28]
 80089b4:	9005      	str	r0, [sp, #20]
 80089b6:	9204      	str	r2, [sp, #16]
 80089b8:	7e0a      	ldrb	r2, [r1, #24]
 80089ba:	000c      	movs	r4, r1
 80089bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80089be:	2a78      	cmp	r2, #120	; 0x78
 80089c0:	d807      	bhi.n	80089d2 <_printf_i+0x2a>
 80089c2:	2a62      	cmp	r2, #98	; 0x62
 80089c4:	d809      	bhi.n	80089da <_printf_i+0x32>
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	d100      	bne.n	80089cc <_printf_i+0x24>
 80089ca:	e0c1      	b.n	8008b50 <_printf_i+0x1a8>
 80089cc:	2a58      	cmp	r2, #88	; 0x58
 80089ce:	d100      	bne.n	80089d2 <_printf_i+0x2a>
 80089d0:	e08c      	b.n	8008aec <_printf_i+0x144>
 80089d2:	0026      	movs	r6, r4
 80089d4:	3642      	adds	r6, #66	; 0x42
 80089d6:	7032      	strb	r2, [r6, #0]
 80089d8:	e022      	b.n	8008a20 <_printf_i+0x78>
 80089da:	0010      	movs	r0, r2
 80089dc:	3863      	subs	r0, #99	; 0x63
 80089de:	2815      	cmp	r0, #21
 80089e0:	d8f7      	bhi.n	80089d2 <_printf_i+0x2a>
 80089e2:	f7f7 fb9d 	bl	8000120 <__gnu_thumb1_case_shi>
 80089e6:	0016      	.short	0x0016
 80089e8:	fff6001f 	.word	0xfff6001f
 80089ec:	fff6fff6 	.word	0xfff6fff6
 80089f0:	001ffff6 	.word	0x001ffff6
 80089f4:	fff6fff6 	.word	0xfff6fff6
 80089f8:	fff6fff6 	.word	0xfff6fff6
 80089fc:	003600a8 	.word	0x003600a8
 8008a00:	fff6009a 	.word	0xfff6009a
 8008a04:	00b9fff6 	.word	0x00b9fff6
 8008a08:	0036fff6 	.word	0x0036fff6
 8008a0c:	fff6fff6 	.word	0xfff6fff6
 8008a10:	009e      	.short	0x009e
 8008a12:	0026      	movs	r6, r4
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	3642      	adds	r6, #66	; 0x42
 8008a18:	1d11      	adds	r1, r2, #4
 8008a1a:	6019      	str	r1, [r3, #0]
 8008a1c:	6813      	ldr	r3, [r2, #0]
 8008a1e:	7033      	strb	r3, [r6, #0]
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0a7      	b.n	8008b74 <_printf_i+0x1cc>
 8008a24:	6808      	ldr	r0, [r1, #0]
 8008a26:	6819      	ldr	r1, [r3, #0]
 8008a28:	1d0a      	adds	r2, r1, #4
 8008a2a:	0605      	lsls	r5, r0, #24
 8008a2c:	d50b      	bpl.n	8008a46 <_printf_i+0x9e>
 8008a2e:	680d      	ldr	r5, [r1, #0]
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	2d00      	cmp	r5, #0
 8008a34:	da03      	bge.n	8008a3e <_printf_i+0x96>
 8008a36:	232d      	movs	r3, #45	; 0x2d
 8008a38:	9a04      	ldr	r2, [sp, #16]
 8008a3a:	426d      	negs	r5, r5
 8008a3c:	7013      	strb	r3, [r2, #0]
 8008a3e:	4b61      	ldr	r3, [pc, #388]	; (8008bc4 <_printf_i+0x21c>)
 8008a40:	270a      	movs	r7, #10
 8008a42:	9303      	str	r3, [sp, #12]
 8008a44:	e01b      	b.n	8008a7e <_printf_i+0xd6>
 8008a46:	680d      	ldr	r5, [r1, #0]
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	0641      	lsls	r1, r0, #25
 8008a4c:	d5f1      	bpl.n	8008a32 <_printf_i+0x8a>
 8008a4e:	b22d      	sxth	r5, r5
 8008a50:	e7ef      	b.n	8008a32 <_printf_i+0x8a>
 8008a52:	680d      	ldr	r5, [r1, #0]
 8008a54:	6819      	ldr	r1, [r3, #0]
 8008a56:	1d08      	adds	r0, r1, #4
 8008a58:	6018      	str	r0, [r3, #0]
 8008a5a:	062e      	lsls	r6, r5, #24
 8008a5c:	d501      	bpl.n	8008a62 <_printf_i+0xba>
 8008a5e:	680d      	ldr	r5, [r1, #0]
 8008a60:	e003      	b.n	8008a6a <_printf_i+0xc2>
 8008a62:	066d      	lsls	r5, r5, #25
 8008a64:	d5fb      	bpl.n	8008a5e <_printf_i+0xb6>
 8008a66:	680d      	ldr	r5, [r1, #0]
 8008a68:	b2ad      	uxth	r5, r5
 8008a6a:	4b56      	ldr	r3, [pc, #344]	; (8008bc4 <_printf_i+0x21c>)
 8008a6c:	2708      	movs	r7, #8
 8008a6e:	9303      	str	r3, [sp, #12]
 8008a70:	2a6f      	cmp	r2, #111	; 0x6f
 8008a72:	d000      	beq.n	8008a76 <_printf_i+0xce>
 8008a74:	3702      	adds	r7, #2
 8008a76:	0023      	movs	r3, r4
 8008a78:	2200      	movs	r2, #0
 8008a7a:	3343      	adds	r3, #67	; 0x43
 8008a7c:	701a      	strb	r2, [r3, #0]
 8008a7e:	6863      	ldr	r3, [r4, #4]
 8008a80:	60a3      	str	r3, [r4, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	db03      	blt.n	8008a8e <_printf_i+0xe6>
 8008a86:	2204      	movs	r2, #4
 8008a88:	6821      	ldr	r1, [r4, #0]
 8008a8a:	4391      	bics	r1, r2
 8008a8c:	6021      	str	r1, [r4, #0]
 8008a8e:	2d00      	cmp	r5, #0
 8008a90:	d102      	bne.n	8008a98 <_printf_i+0xf0>
 8008a92:	9e04      	ldr	r6, [sp, #16]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00c      	beq.n	8008ab2 <_printf_i+0x10a>
 8008a98:	9e04      	ldr	r6, [sp, #16]
 8008a9a:	0028      	movs	r0, r5
 8008a9c:	0039      	movs	r1, r7
 8008a9e:	f7f7 fbcf 	bl	8000240 <__aeabi_uidivmod>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	3e01      	subs	r6, #1
 8008aa6:	5c5b      	ldrb	r3, [r3, r1]
 8008aa8:	7033      	strb	r3, [r6, #0]
 8008aaa:	002b      	movs	r3, r5
 8008aac:	0005      	movs	r5, r0
 8008aae:	429f      	cmp	r7, r3
 8008ab0:	d9f3      	bls.n	8008a9a <_printf_i+0xf2>
 8008ab2:	2f08      	cmp	r7, #8
 8008ab4:	d109      	bne.n	8008aca <_printf_i+0x122>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	07db      	lsls	r3, r3, #31
 8008aba:	d506      	bpl.n	8008aca <_printf_i+0x122>
 8008abc:	6863      	ldr	r3, [r4, #4]
 8008abe:	6922      	ldr	r2, [r4, #16]
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	dc02      	bgt.n	8008aca <_printf_i+0x122>
 8008ac4:	2330      	movs	r3, #48	; 0x30
 8008ac6:	3e01      	subs	r6, #1
 8008ac8:	7033      	strb	r3, [r6, #0]
 8008aca:	9b04      	ldr	r3, [sp, #16]
 8008acc:	1b9b      	subs	r3, r3, r6
 8008ace:	6123      	str	r3, [r4, #16]
 8008ad0:	9b07      	ldr	r3, [sp, #28]
 8008ad2:	0021      	movs	r1, r4
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	9805      	ldr	r0, [sp, #20]
 8008ad8:	9b06      	ldr	r3, [sp, #24]
 8008ada:	aa09      	add	r2, sp, #36	; 0x24
 8008adc:	f7ff fef4 	bl	80088c8 <_printf_common>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d14c      	bne.n	8008b7e <_printf_i+0x1d6>
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	4240      	negs	r0, r0
 8008ae8:	b00b      	add	sp, #44	; 0x2c
 8008aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aec:	3145      	adds	r1, #69	; 0x45
 8008aee:	700a      	strb	r2, [r1, #0]
 8008af0:	4a34      	ldr	r2, [pc, #208]	; (8008bc4 <_printf_i+0x21c>)
 8008af2:	9203      	str	r2, [sp, #12]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	6821      	ldr	r1, [r4, #0]
 8008af8:	ca20      	ldmia	r2!, {r5}
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	0608      	lsls	r0, r1, #24
 8008afe:	d516      	bpl.n	8008b2e <_printf_i+0x186>
 8008b00:	07cb      	lsls	r3, r1, #31
 8008b02:	d502      	bpl.n	8008b0a <_printf_i+0x162>
 8008b04:	2320      	movs	r3, #32
 8008b06:	4319      	orrs	r1, r3
 8008b08:	6021      	str	r1, [r4, #0]
 8008b0a:	2710      	movs	r7, #16
 8008b0c:	2d00      	cmp	r5, #0
 8008b0e:	d1b2      	bne.n	8008a76 <_printf_i+0xce>
 8008b10:	2320      	movs	r3, #32
 8008b12:	6822      	ldr	r2, [r4, #0]
 8008b14:	439a      	bics	r2, r3
 8008b16:	6022      	str	r2, [r4, #0]
 8008b18:	e7ad      	b.n	8008a76 <_printf_i+0xce>
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	6809      	ldr	r1, [r1, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	6022      	str	r2, [r4, #0]
 8008b22:	0022      	movs	r2, r4
 8008b24:	2178      	movs	r1, #120	; 0x78
 8008b26:	3245      	adds	r2, #69	; 0x45
 8008b28:	7011      	strb	r1, [r2, #0]
 8008b2a:	4a27      	ldr	r2, [pc, #156]	; (8008bc8 <_printf_i+0x220>)
 8008b2c:	e7e1      	b.n	8008af2 <_printf_i+0x14a>
 8008b2e:	0648      	lsls	r0, r1, #25
 8008b30:	d5e6      	bpl.n	8008b00 <_printf_i+0x158>
 8008b32:	b2ad      	uxth	r5, r5
 8008b34:	e7e4      	b.n	8008b00 <_printf_i+0x158>
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	680d      	ldr	r5, [r1, #0]
 8008b3a:	1d10      	adds	r0, r2, #4
 8008b3c:	6949      	ldr	r1, [r1, #20]
 8008b3e:	6018      	str	r0, [r3, #0]
 8008b40:	6813      	ldr	r3, [r2, #0]
 8008b42:	062e      	lsls	r6, r5, #24
 8008b44:	d501      	bpl.n	8008b4a <_printf_i+0x1a2>
 8008b46:	6019      	str	r1, [r3, #0]
 8008b48:	e002      	b.n	8008b50 <_printf_i+0x1a8>
 8008b4a:	066d      	lsls	r5, r5, #25
 8008b4c:	d5fb      	bpl.n	8008b46 <_printf_i+0x19e>
 8008b4e:	8019      	strh	r1, [r3, #0]
 8008b50:	2300      	movs	r3, #0
 8008b52:	9e04      	ldr	r6, [sp, #16]
 8008b54:	6123      	str	r3, [r4, #16]
 8008b56:	e7bb      	b.n	8008ad0 <_printf_i+0x128>
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	1d11      	adds	r1, r2, #4
 8008b5c:	6019      	str	r1, [r3, #0]
 8008b5e:	6816      	ldr	r6, [r2, #0]
 8008b60:	2100      	movs	r1, #0
 8008b62:	0030      	movs	r0, r6
 8008b64:	6862      	ldr	r2, [r4, #4]
 8008b66:	f000 ff0d 	bl	8009984 <memchr>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d001      	beq.n	8008b72 <_printf_i+0x1ca>
 8008b6e:	1b80      	subs	r0, r0, r6
 8008b70:	6060      	str	r0, [r4, #4]
 8008b72:	6863      	ldr	r3, [r4, #4]
 8008b74:	6123      	str	r3, [r4, #16]
 8008b76:	2300      	movs	r3, #0
 8008b78:	9a04      	ldr	r2, [sp, #16]
 8008b7a:	7013      	strb	r3, [r2, #0]
 8008b7c:	e7a8      	b.n	8008ad0 <_printf_i+0x128>
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	0032      	movs	r2, r6
 8008b82:	9906      	ldr	r1, [sp, #24]
 8008b84:	9805      	ldr	r0, [sp, #20]
 8008b86:	9d07      	ldr	r5, [sp, #28]
 8008b88:	47a8      	blx	r5
 8008b8a:	1c43      	adds	r3, r0, #1
 8008b8c:	d0aa      	beq.n	8008ae4 <_printf_i+0x13c>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	079b      	lsls	r3, r3, #30
 8008b92:	d415      	bmi.n	8008bc0 <_printf_i+0x218>
 8008b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b96:	68e0      	ldr	r0, [r4, #12]
 8008b98:	4298      	cmp	r0, r3
 8008b9a:	daa5      	bge.n	8008ae8 <_printf_i+0x140>
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	e7a3      	b.n	8008ae8 <_printf_i+0x140>
 8008ba0:	0022      	movs	r2, r4
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	9906      	ldr	r1, [sp, #24]
 8008ba6:	9805      	ldr	r0, [sp, #20]
 8008ba8:	9e07      	ldr	r6, [sp, #28]
 8008baa:	3219      	adds	r2, #25
 8008bac:	47b0      	blx	r6
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	d098      	beq.n	8008ae4 <_printf_i+0x13c>
 8008bb2:	3501      	adds	r5, #1
 8008bb4:	68e3      	ldr	r3, [r4, #12]
 8008bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb8:	1a9b      	subs	r3, r3, r2
 8008bba:	42ab      	cmp	r3, r5
 8008bbc:	dcf0      	bgt.n	8008ba0 <_printf_i+0x1f8>
 8008bbe:	e7e9      	b.n	8008b94 <_printf_i+0x1ec>
 8008bc0:	2500      	movs	r5, #0
 8008bc2:	e7f7      	b.n	8008bb4 <_printf_i+0x20c>
 8008bc4:	0800b22e 	.word	0x0800b22e
 8008bc8:	0800b23f 	.word	0x0800b23f

08008bcc <_sbrk_r>:
 8008bcc:	2300      	movs	r3, #0
 8008bce:	b570      	push	{r4, r5, r6, lr}
 8008bd0:	4d06      	ldr	r5, [pc, #24]	; (8008bec <_sbrk_r+0x20>)
 8008bd2:	0004      	movs	r4, r0
 8008bd4:	0008      	movs	r0, r1
 8008bd6:	602b      	str	r3, [r5, #0]
 8008bd8:	f7fa fcb6 	bl	8003548 <_sbrk>
 8008bdc:	1c43      	adds	r3, r0, #1
 8008bde:	d103      	bne.n	8008be8 <_sbrk_r+0x1c>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d000      	beq.n	8008be8 <_sbrk_r+0x1c>
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	bd70      	pop	{r4, r5, r6, pc}
 8008bea:	46c0      	nop			; (mov r8, r8)
 8008bec:	20000350 	.word	0x20000350

08008bf0 <siprintf>:
 8008bf0:	b40e      	push	{r1, r2, r3}
 8008bf2:	b500      	push	{lr}
 8008bf4:	490b      	ldr	r1, [pc, #44]	; (8008c24 <siprintf+0x34>)
 8008bf6:	b09c      	sub	sp, #112	; 0x70
 8008bf8:	ab1d      	add	r3, sp, #116	; 0x74
 8008bfa:	9002      	str	r0, [sp, #8]
 8008bfc:	9006      	str	r0, [sp, #24]
 8008bfe:	9107      	str	r1, [sp, #28]
 8008c00:	9104      	str	r1, [sp, #16]
 8008c02:	4809      	ldr	r0, [pc, #36]	; (8008c28 <siprintf+0x38>)
 8008c04:	4909      	ldr	r1, [pc, #36]	; (8008c2c <siprintf+0x3c>)
 8008c06:	cb04      	ldmia	r3!, {r2}
 8008c08:	9105      	str	r1, [sp, #20]
 8008c0a:	6800      	ldr	r0, [r0, #0]
 8008c0c:	a902      	add	r1, sp, #8
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	f001 fafe 	bl	800a210 <_svfiprintf_r>
 8008c14:	2300      	movs	r3, #0
 8008c16:	9a02      	ldr	r2, [sp, #8]
 8008c18:	7013      	strb	r3, [r2, #0]
 8008c1a:	b01c      	add	sp, #112	; 0x70
 8008c1c:	bc08      	pop	{r3}
 8008c1e:	b003      	add	sp, #12
 8008c20:	4718      	bx	r3
 8008c22:	46c0      	nop			; (mov r8, r8)
 8008c24:	7fffffff 	.word	0x7fffffff
 8008c28:	2000000c 	.word	0x2000000c
 8008c2c:	ffff0208 	.word	0xffff0208

08008c30 <quorem>:
 8008c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c32:	0006      	movs	r6, r0
 8008c34:	690b      	ldr	r3, [r1, #16]
 8008c36:	6932      	ldr	r2, [r6, #16]
 8008c38:	b087      	sub	sp, #28
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	9103      	str	r1, [sp, #12]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	db65      	blt.n	8008d0e <quorem+0xde>
 8008c42:	3b01      	subs	r3, #1
 8008c44:	009c      	lsls	r4, r3, #2
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	000b      	movs	r3, r1
 8008c4a:	3314      	adds	r3, #20
 8008c4c:	9305      	str	r3, [sp, #20]
 8008c4e:	191b      	adds	r3, r3, r4
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	0033      	movs	r3, r6
 8008c54:	3314      	adds	r3, #20
 8008c56:	9302      	str	r3, [sp, #8]
 8008c58:	191c      	adds	r4, r3, r4
 8008c5a:	9b04      	ldr	r3, [sp, #16]
 8008c5c:	6827      	ldr	r7, [r4, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	0038      	movs	r0, r7
 8008c62:	1c5d      	adds	r5, r3, #1
 8008c64:	0029      	movs	r1, r5
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	f7f7 fa64 	bl	8000134 <__udivsi3>
 8008c6c:	9001      	str	r0, [sp, #4]
 8008c6e:	42af      	cmp	r7, r5
 8008c70:	d324      	bcc.n	8008cbc <quorem+0x8c>
 8008c72:	2500      	movs	r5, #0
 8008c74:	46ac      	mov	ip, r5
 8008c76:	9802      	ldr	r0, [sp, #8]
 8008c78:	9f05      	ldr	r7, [sp, #20]
 8008c7a:	cf08      	ldmia	r7!, {r3}
 8008c7c:	9a01      	ldr	r2, [sp, #4]
 8008c7e:	b299      	uxth	r1, r3
 8008c80:	4351      	muls	r1, r2
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	4353      	muls	r3, r2
 8008c86:	1949      	adds	r1, r1, r5
 8008c88:	0c0a      	lsrs	r2, r1, #16
 8008c8a:	189b      	adds	r3, r3, r2
 8008c8c:	6802      	ldr	r2, [r0, #0]
 8008c8e:	b289      	uxth	r1, r1
 8008c90:	b292      	uxth	r2, r2
 8008c92:	4462      	add	r2, ip
 8008c94:	1a52      	subs	r2, r2, r1
 8008c96:	6801      	ldr	r1, [r0, #0]
 8008c98:	0c1d      	lsrs	r5, r3, #16
 8008c9a:	0c09      	lsrs	r1, r1, #16
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	1acb      	subs	r3, r1, r3
 8008ca0:	1411      	asrs	r1, r2, #16
 8008ca2:	185b      	adds	r3, r3, r1
 8008ca4:	1419      	asrs	r1, r3, #16
 8008ca6:	b292      	uxth	r2, r2
 8008ca8:	041b      	lsls	r3, r3, #16
 8008caa:	431a      	orrs	r2, r3
 8008cac:	9b04      	ldr	r3, [sp, #16]
 8008cae:	468c      	mov	ip, r1
 8008cb0:	c004      	stmia	r0!, {r2}
 8008cb2:	42bb      	cmp	r3, r7
 8008cb4:	d2e1      	bcs.n	8008c7a <quorem+0x4a>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d030      	beq.n	8008d1e <quorem+0xee>
 8008cbc:	0030      	movs	r0, r6
 8008cbe:	9903      	ldr	r1, [sp, #12]
 8008cc0:	f001 f900 	bl	8009ec4 <__mcmp>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	db21      	blt.n	8008d0c <quorem+0xdc>
 8008cc8:	0030      	movs	r0, r6
 8008cca:	2400      	movs	r4, #0
 8008ccc:	9b01      	ldr	r3, [sp, #4]
 8008cce:	9903      	ldr	r1, [sp, #12]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	3014      	adds	r0, #20
 8008cd6:	3114      	adds	r1, #20
 8008cd8:	6803      	ldr	r3, [r0, #0]
 8008cda:	c920      	ldmia	r1!, {r5}
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	1914      	adds	r4, r2, r4
 8008ce0:	b2aa      	uxth	r2, r5
 8008ce2:	1aa2      	subs	r2, r4, r2
 8008ce4:	0c1b      	lsrs	r3, r3, #16
 8008ce6:	0c2d      	lsrs	r5, r5, #16
 8008ce8:	1414      	asrs	r4, r2, #16
 8008cea:	1b5b      	subs	r3, r3, r5
 8008cec:	191b      	adds	r3, r3, r4
 8008cee:	141c      	asrs	r4, r3, #16
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	041b      	lsls	r3, r3, #16
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	c008      	stmia	r0!, {r3}
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	428b      	cmp	r3, r1
 8008cfc:	d2ec      	bcs.n	8008cd8 <quorem+0xa8>
 8008cfe:	9b00      	ldr	r3, [sp, #0]
 8008d00:	9a02      	ldr	r2, [sp, #8]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	18d3      	adds	r3, r2, r3
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	d015      	beq.n	8008d38 <quorem+0x108>
 8008d0c:	9801      	ldr	r0, [sp, #4]
 8008d0e:	b007      	add	sp, #28
 8008d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d106      	bne.n	8008d26 <quorem+0xf6>
 8008d18:	9b00      	ldr	r3, [sp, #0]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	9b02      	ldr	r3, [sp, #8]
 8008d20:	3c04      	subs	r4, #4
 8008d22:	42a3      	cmp	r3, r4
 8008d24:	d3f5      	bcc.n	8008d12 <quorem+0xe2>
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	6133      	str	r3, [r6, #16]
 8008d2a:	e7c7      	b.n	8008cbc <quorem+0x8c>
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	d106      	bne.n	8008d40 <quorem+0x110>
 8008d32:	9a00      	ldr	r2, [sp, #0]
 8008d34:	3a01      	subs	r2, #1
 8008d36:	9200      	str	r2, [sp, #0]
 8008d38:	9a02      	ldr	r2, [sp, #8]
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3f5      	bcc.n	8008d2c <quorem+0xfc>
 8008d40:	9b00      	ldr	r3, [sp, #0]
 8008d42:	6133      	str	r3, [r6, #16]
 8008d44:	e7e2      	b.n	8008d0c <quorem+0xdc>
	...

08008d48 <_dtoa_r>:
 8008d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d4a:	b09d      	sub	sp, #116	; 0x74
 8008d4c:	9202      	str	r2, [sp, #8]
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	9b02      	ldr	r3, [sp, #8]
 8008d52:	9c03      	ldr	r4, [sp, #12]
 8008d54:	9308      	str	r3, [sp, #32]
 8008d56:	9409      	str	r4, [sp, #36]	; 0x24
 8008d58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008d5a:	0007      	movs	r7, r0
 8008d5c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	d10e      	bne.n	8008d80 <_dtoa_r+0x38>
 8008d62:	2010      	movs	r0, #16
 8008d64:	f7ff f9c6 	bl	80080f4 <malloc>
 8008d68:	1e02      	subs	r2, r0, #0
 8008d6a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d6c:	d104      	bne.n	8008d78 <_dtoa_r+0x30>
 8008d6e:	21ea      	movs	r1, #234	; 0xea
 8008d70:	4bc7      	ldr	r3, [pc, #796]	; (8009090 <_dtoa_r+0x348>)
 8008d72:	48c8      	ldr	r0, [pc, #800]	; (8009094 <_dtoa_r+0x34c>)
 8008d74:	f001 fb4c 	bl	800a410 <__assert_func>
 8008d78:	6044      	str	r4, [r0, #4]
 8008d7a:	6084      	str	r4, [r0, #8]
 8008d7c:	6004      	str	r4, [r0, #0]
 8008d7e:	60c4      	str	r4, [r0, #12]
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	6819      	ldr	r1, [r3, #0]
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d00a      	beq.n	8008d9e <_dtoa_r+0x56>
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4093      	lsls	r3, r2
 8008d8e:	604a      	str	r2, [r1, #4]
 8008d90:	608b      	str	r3, [r1, #8]
 8008d92:	0038      	movs	r0, r7
 8008d94:	f000 fe56 	bl	8009a44 <_Bfree>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	601a      	str	r2, [r3, #0]
 8008d9e:	9b03      	ldr	r3, [sp, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	da20      	bge.n	8008de6 <_dtoa_r+0x9e>
 8008da4:	2301      	movs	r3, #1
 8008da6:	602b      	str	r3, [r5, #0]
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	005b      	lsls	r3, r3, #1
 8008dac:	085b      	lsrs	r3, r3, #1
 8008dae:	9309      	str	r3, [sp, #36]	; 0x24
 8008db0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008db2:	4bb9      	ldr	r3, [pc, #740]	; (8009098 <_dtoa_r+0x350>)
 8008db4:	4ab8      	ldr	r2, [pc, #736]	; (8009098 <_dtoa_r+0x350>)
 8008db6:	402b      	ands	r3, r5
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d117      	bne.n	8008dec <_dtoa_r+0xa4>
 8008dbc:	4bb7      	ldr	r3, [pc, #732]	; (800909c <_dtoa_r+0x354>)
 8008dbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008dc0:	0328      	lsls	r0, r5, #12
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	9b02      	ldr	r3, [sp, #8]
 8008dc6:	0b00      	lsrs	r0, r0, #12
 8008dc8:	4318      	orrs	r0, r3
 8008dca:	d101      	bne.n	8008dd0 <_dtoa_r+0x88>
 8008dcc:	f000 fdbf 	bl	800994e <_dtoa_r+0xc06>
 8008dd0:	48b3      	ldr	r0, [pc, #716]	; (80090a0 <_dtoa_r+0x358>)
 8008dd2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dd4:	9006      	str	r0, [sp, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <_dtoa_r+0x98>
 8008dda:	4bb2      	ldr	r3, [pc, #712]	; (80090a4 <_dtoa_r+0x35c>)
 8008ddc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	9806      	ldr	r0, [sp, #24]
 8008de2:	b01d      	add	sp, #116	; 0x74
 8008de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de6:	2300      	movs	r3, #0
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	e7e1      	b.n	8008db0 <_dtoa_r+0x68>
 8008dec:	9b08      	ldr	r3, [sp, #32]
 8008dee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008df0:	9312      	str	r3, [sp, #72]	; 0x48
 8008df2:	9413      	str	r4, [sp, #76]	; 0x4c
 8008df4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008df6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008df8:	2200      	movs	r2, #0
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f7f7 fb20 	bl	8000440 <__aeabi_dcmpeq>
 8008e00:	1e04      	subs	r4, r0, #0
 8008e02:	d009      	beq.n	8008e18 <_dtoa_r+0xd0>
 8008e04:	2301      	movs	r3, #1
 8008e06:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	4ba7      	ldr	r3, [pc, #668]	; (80090a8 <_dtoa_r+0x360>)
 8008e0c:	9306      	str	r3, [sp, #24]
 8008e0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d0e5      	beq.n	8008de0 <_dtoa_r+0x98>
 8008e14:	4ba5      	ldr	r3, [pc, #660]	; (80090ac <_dtoa_r+0x364>)
 8008e16:	e7e1      	b.n	8008ddc <_dtoa_r+0x94>
 8008e18:	ab1a      	add	r3, sp, #104	; 0x68
 8008e1a:	9301      	str	r3, [sp, #4]
 8008e1c:	ab1b      	add	r3, sp, #108	; 0x6c
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	0038      	movs	r0, r7
 8008e22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e26:	f001 f901 	bl	800a02c <__d2b>
 8008e2a:	006e      	lsls	r6, r5, #1
 8008e2c:	9005      	str	r0, [sp, #20]
 8008e2e:	0d76      	lsrs	r6, r6, #21
 8008e30:	d100      	bne.n	8008e34 <_dtoa_r+0xec>
 8008e32:	e07c      	b.n	8008f2e <_dtoa_r+0x1e6>
 8008e34:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e36:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008e38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e3a:	4a9d      	ldr	r2, [pc, #628]	; (80090b0 <_dtoa_r+0x368>)
 8008e3c:	031b      	lsls	r3, r3, #12
 8008e3e:	0b1b      	lsrs	r3, r3, #12
 8008e40:	431a      	orrs	r2, r3
 8008e42:	0011      	movs	r1, r2
 8008e44:	4b9b      	ldr	r3, [pc, #620]	; (80090b4 <_dtoa_r+0x36c>)
 8008e46:	9418      	str	r4, [sp, #96]	; 0x60
 8008e48:	18f6      	adds	r6, r6, r3
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	4b9a      	ldr	r3, [pc, #616]	; (80090b8 <_dtoa_r+0x370>)
 8008e4e:	f7f8 ff7b 	bl	8001d48 <__aeabi_dsub>
 8008e52:	4a9a      	ldr	r2, [pc, #616]	; (80090bc <_dtoa_r+0x374>)
 8008e54:	4b9a      	ldr	r3, [pc, #616]	; (80090c0 <_dtoa_r+0x378>)
 8008e56:	f7f8 fd0b 	bl	8001870 <__aeabi_dmul>
 8008e5a:	4a9a      	ldr	r2, [pc, #616]	; (80090c4 <_dtoa_r+0x37c>)
 8008e5c:	4b9a      	ldr	r3, [pc, #616]	; (80090c8 <_dtoa_r+0x380>)
 8008e5e:	f7f7 fdc9 	bl	80009f4 <__aeabi_dadd>
 8008e62:	0004      	movs	r4, r0
 8008e64:	0030      	movs	r0, r6
 8008e66:	000d      	movs	r5, r1
 8008e68:	f7f9 fb54 	bl	8002514 <__aeabi_i2d>
 8008e6c:	4a97      	ldr	r2, [pc, #604]	; (80090cc <_dtoa_r+0x384>)
 8008e6e:	4b98      	ldr	r3, [pc, #608]	; (80090d0 <_dtoa_r+0x388>)
 8008e70:	f7f8 fcfe 	bl	8001870 <__aeabi_dmul>
 8008e74:	0002      	movs	r2, r0
 8008e76:	000b      	movs	r3, r1
 8008e78:	0020      	movs	r0, r4
 8008e7a:	0029      	movs	r1, r5
 8008e7c:	f7f7 fdba 	bl	80009f4 <__aeabi_dadd>
 8008e80:	0004      	movs	r4, r0
 8008e82:	000d      	movs	r5, r1
 8008e84:	f7f9 fb10 	bl	80024a8 <__aeabi_d2iz>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	9002      	str	r0, [sp, #8]
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	0020      	movs	r0, r4
 8008e90:	0029      	movs	r1, r5
 8008e92:	f7f7 fadb 	bl	800044c <__aeabi_dcmplt>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	d00b      	beq.n	8008eb2 <_dtoa_r+0x16a>
 8008e9a:	9802      	ldr	r0, [sp, #8]
 8008e9c:	f7f9 fb3a 	bl	8002514 <__aeabi_i2d>
 8008ea0:	002b      	movs	r3, r5
 8008ea2:	0022      	movs	r2, r4
 8008ea4:	f7f7 facc 	bl	8000440 <__aeabi_dcmpeq>
 8008ea8:	4243      	negs	r3, r0
 8008eaa:	4158      	adcs	r0, r3
 8008eac:	9b02      	ldr	r3, [sp, #8]
 8008eae:	1a1b      	subs	r3, r3, r0
 8008eb0:	9302      	str	r3, [sp, #8]
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	9316      	str	r3, [sp, #88]	; 0x58
 8008eb6:	9b02      	ldr	r3, [sp, #8]
 8008eb8:	2b16      	cmp	r3, #22
 8008eba:	d80f      	bhi.n	8008edc <_dtoa_r+0x194>
 8008ebc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ebe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008ec0:	00da      	lsls	r2, r3, #3
 8008ec2:	4b84      	ldr	r3, [pc, #528]	; (80090d4 <_dtoa_r+0x38c>)
 8008ec4:	189b      	adds	r3, r3, r2
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f7f7 fabf 	bl	800044c <__aeabi_dcmplt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d049      	beq.n	8008f66 <_dtoa_r+0x21e>
 8008ed2:	9b02      	ldr	r3, [sp, #8]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	9302      	str	r3, [sp, #8]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9316      	str	r3, [sp, #88]	; 0x58
 8008edc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008ede:	1b9e      	subs	r6, r3, r6
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ee4:	0033      	movs	r3, r6
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	930d      	str	r3, [sp, #52]	; 0x34
 8008eea:	d504      	bpl.n	8008ef6 <_dtoa_r+0x1ae>
 8008eec:	2301      	movs	r3, #1
 8008eee:	1b9b      	subs	r3, r3, r6
 8008ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ef6:	9b02      	ldr	r3, [sp, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	db36      	blt.n	8008f6a <_dtoa_r+0x222>
 8008efc:	9a02      	ldr	r2, [sp, #8]
 8008efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f00:	4694      	mov	ip, r2
 8008f02:	4463      	add	r3, ip
 8008f04:	930d      	str	r3, [sp, #52]	; 0x34
 8008f06:	2300      	movs	r3, #0
 8008f08:	9215      	str	r2, [sp, #84]	; 0x54
 8008f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8008f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f0e:	2401      	movs	r4, #1
 8008f10:	2b09      	cmp	r3, #9
 8008f12:	d864      	bhi.n	8008fde <_dtoa_r+0x296>
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	dd02      	ble.n	8008f1e <_dtoa_r+0x1d6>
 8008f18:	2400      	movs	r4, #0
 8008f1a:	3b04      	subs	r3, #4
 8008f1c:	9322      	str	r3, [sp, #136]	; 0x88
 8008f1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f20:	1e98      	subs	r0, r3, #2
 8008f22:	2803      	cmp	r0, #3
 8008f24:	d864      	bhi.n	8008ff0 <_dtoa_r+0x2a8>
 8008f26:	f7f7 f8f1 	bl	800010c <__gnu_thumb1_case_uqi>
 8008f2a:	3829      	.short	0x3829
 8008f2c:	5836      	.short	0x5836
 8008f2e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008f30:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008f32:	189e      	adds	r6, r3, r2
 8008f34:	4b68      	ldr	r3, [pc, #416]	; (80090d8 <_dtoa_r+0x390>)
 8008f36:	18f2      	adds	r2, r6, r3
 8008f38:	2a20      	cmp	r2, #32
 8008f3a:	dd0f      	ble.n	8008f5c <_dtoa_r+0x214>
 8008f3c:	2340      	movs	r3, #64	; 0x40
 8008f3e:	1a9b      	subs	r3, r3, r2
 8008f40:	409d      	lsls	r5, r3
 8008f42:	4b66      	ldr	r3, [pc, #408]	; (80090dc <_dtoa_r+0x394>)
 8008f44:	9802      	ldr	r0, [sp, #8]
 8008f46:	18f3      	adds	r3, r6, r3
 8008f48:	40d8      	lsrs	r0, r3
 8008f4a:	4328      	orrs	r0, r5
 8008f4c:	f7f9 fb12 	bl	8002574 <__aeabi_ui2d>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4c63      	ldr	r4, [pc, #396]	; (80090e0 <_dtoa_r+0x398>)
 8008f54:	3e01      	subs	r6, #1
 8008f56:	1909      	adds	r1, r1, r4
 8008f58:	9318      	str	r3, [sp, #96]	; 0x60
 8008f5a:	e776      	b.n	8008e4a <_dtoa_r+0x102>
 8008f5c:	2320      	movs	r3, #32
 8008f5e:	9802      	ldr	r0, [sp, #8]
 8008f60:	1a9b      	subs	r3, r3, r2
 8008f62:	4098      	lsls	r0, r3
 8008f64:	e7f2      	b.n	8008f4c <_dtoa_r+0x204>
 8008f66:	9016      	str	r0, [sp, #88]	; 0x58
 8008f68:	e7b8      	b.n	8008edc <_dtoa_r+0x194>
 8008f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6c:	9a02      	ldr	r2, [sp, #8]
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	930a      	str	r3, [sp, #40]	; 0x28
 8008f72:	4253      	negs	r3, r2
 8008f74:	930e      	str	r3, [sp, #56]	; 0x38
 8008f76:	2300      	movs	r3, #0
 8008f78:	9315      	str	r3, [sp, #84]	; 0x54
 8008f7a:	e7c7      	b.n	8008f0c <_dtoa_r+0x1c4>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f82:	930c      	str	r3, [sp, #48]	; 0x30
 8008f84:	9307      	str	r3, [sp, #28]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	dc13      	bgt.n	8008fb2 <_dtoa_r+0x26a>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	001a      	movs	r2, r3
 8008f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8008f90:	9307      	str	r3, [sp, #28]
 8008f92:	9223      	str	r2, [sp, #140]	; 0x8c
 8008f94:	e00d      	b.n	8008fb2 <_dtoa_r+0x26a>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e7f1      	b.n	8008f7e <_dtoa_r+0x236>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fa0:	4694      	mov	ip, r2
 8008fa2:	9b02      	ldr	r3, [sp, #8]
 8008fa4:	4463      	add	r3, ip
 8008fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa8:	3301      	adds	r3, #1
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dc00      	bgt.n	8008fb2 <_dtoa_r+0x26a>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fb6:	6042      	str	r2, [r0, #4]
 8008fb8:	3204      	adds	r2, #4
 8008fba:	0015      	movs	r5, r2
 8008fbc:	3514      	adds	r5, #20
 8008fbe:	6841      	ldr	r1, [r0, #4]
 8008fc0:	429d      	cmp	r5, r3
 8008fc2:	d919      	bls.n	8008ff8 <_dtoa_r+0x2b0>
 8008fc4:	0038      	movs	r0, r7
 8008fc6:	f000 fcf9 	bl	80099bc <_Balloc>
 8008fca:	9006      	str	r0, [sp, #24]
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d117      	bne.n	8009000 <_dtoa_r+0x2b8>
 8008fd0:	21d5      	movs	r1, #213	; 0xd5
 8008fd2:	0002      	movs	r2, r0
 8008fd4:	4b43      	ldr	r3, [pc, #268]	; (80090e4 <_dtoa_r+0x39c>)
 8008fd6:	0049      	lsls	r1, r1, #1
 8008fd8:	e6cb      	b.n	8008d72 <_dtoa_r+0x2a>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e7de      	b.n	8008f9c <_dtoa_r+0x254>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	940f      	str	r4, [sp, #60]	; 0x3c
 8008fe2:	9322      	str	r3, [sp, #136]	; 0x88
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fe8:	9307      	str	r3, [sp, #28]
 8008fea:	2200      	movs	r2, #0
 8008fec:	3313      	adds	r3, #19
 8008fee:	e7d0      	b.n	8008f92 <_dtoa_r+0x24a>
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ff4:	3b02      	subs	r3, #2
 8008ff6:	e7f6      	b.n	8008fe6 <_dtoa_r+0x29e>
 8008ff8:	3101      	adds	r1, #1
 8008ffa:	6041      	str	r1, [r0, #4]
 8008ffc:	0052      	lsls	r2, r2, #1
 8008ffe:	e7dc      	b.n	8008fba <_dtoa_r+0x272>
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	9a06      	ldr	r2, [sp, #24]
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	9b07      	ldr	r3, [sp, #28]
 8009008:	2b0e      	cmp	r3, #14
 800900a:	d900      	bls.n	800900e <_dtoa_r+0x2c6>
 800900c:	e0eb      	b.n	80091e6 <_dtoa_r+0x49e>
 800900e:	2c00      	cmp	r4, #0
 8009010:	d100      	bne.n	8009014 <_dtoa_r+0x2cc>
 8009012:	e0e8      	b.n	80091e6 <_dtoa_r+0x49e>
 8009014:	9b02      	ldr	r3, [sp, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	dd68      	ble.n	80090ec <_dtoa_r+0x3a4>
 800901a:	001a      	movs	r2, r3
 800901c:	210f      	movs	r1, #15
 800901e:	4b2d      	ldr	r3, [pc, #180]	; (80090d4 <_dtoa_r+0x38c>)
 8009020:	400a      	ands	r2, r1
 8009022:	00d2      	lsls	r2, r2, #3
 8009024:	189b      	adds	r3, r3, r2
 8009026:	681d      	ldr	r5, [r3, #0]
 8009028:	685e      	ldr	r6, [r3, #4]
 800902a:	9b02      	ldr	r3, [sp, #8]
 800902c:	111c      	asrs	r4, r3, #4
 800902e:	2302      	movs	r3, #2
 8009030:	9310      	str	r3, [sp, #64]	; 0x40
 8009032:	9b02      	ldr	r3, [sp, #8]
 8009034:	05db      	lsls	r3, r3, #23
 8009036:	d50b      	bpl.n	8009050 <_dtoa_r+0x308>
 8009038:	4b2b      	ldr	r3, [pc, #172]	; (80090e8 <_dtoa_r+0x3a0>)
 800903a:	400c      	ands	r4, r1
 800903c:	6a1a      	ldr	r2, [r3, #32]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009042:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009044:	f7f8 f812 	bl	800106c <__aeabi_ddiv>
 8009048:	2303      	movs	r3, #3
 800904a:	9008      	str	r0, [sp, #32]
 800904c:	9109      	str	r1, [sp, #36]	; 0x24
 800904e:	9310      	str	r3, [sp, #64]	; 0x40
 8009050:	4b25      	ldr	r3, [pc, #148]	; (80090e8 <_dtoa_r+0x3a0>)
 8009052:	9314      	str	r3, [sp, #80]	; 0x50
 8009054:	2c00      	cmp	r4, #0
 8009056:	d108      	bne.n	800906a <_dtoa_r+0x322>
 8009058:	9808      	ldr	r0, [sp, #32]
 800905a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800905c:	002a      	movs	r2, r5
 800905e:	0033      	movs	r3, r6
 8009060:	f7f8 f804 	bl	800106c <__aeabi_ddiv>
 8009064:	9008      	str	r0, [sp, #32]
 8009066:	9109      	str	r1, [sp, #36]	; 0x24
 8009068:	e05c      	b.n	8009124 <_dtoa_r+0x3dc>
 800906a:	2301      	movs	r3, #1
 800906c:	421c      	tst	r4, r3
 800906e:	d00b      	beq.n	8009088 <_dtoa_r+0x340>
 8009070:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009072:	0028      	movs	r0, r5
 8009074:	3301      	adds	r3, #1
 8009076:	9310      	str	r3, [sp, #64]	; 0x40
 8009078:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800907a:	0031      	movs	r1, r6
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f7f8 fbf6 	bl	8001870 <__aeabi_dmul>
 8009084:	0005      	movs	r5, r0
 8009086:	000e      	movs	r6, r1
 8009088:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800908a:	1064      	asrs	r4, r4, #1
 800908c:	3308      	adds	r3, #8
 800908e:	e7e0      	b.n	8009052 <_dtoa_r+0x30a>
 8009090:	0800b25d 	.word	0x0800b25d
 8009094:	0800b274 	.word	0x0800b274
 8009098:	7ff00000 	.word	0x7ff00000
 800909c:	0000270f 	.word	0x0000270f
 80090a0:	0800b259 	.word	0x0800b259
 80090a4:	0800b25c 	.word	0x0800b25c
 80090a8:	0800b22c 	.word	0x0800b22c
 80090ac:	0800b22d 	.word	0x0800b22d
 80090b0:	3ff00000 	.word	0x3ff00000
 80090b4:	fffffc01 	.word	0xfffffc01
 80090b8:	3ff80000 	.word	0x3ff80000
 80090bc:	636f4361 	.word	0x636f4361
 80090c0:	3fd287a7 	.word	0x3fd287a7
 80090c4:	8b60c8b3 	.word	0x8b60c8b3
 80090c8:	3fc68a28 	.word	0x3fc68a28
 80090cc:	509f79fb 	.word	0x509f79fb
 80090d0:	3fd34413 	.word	0x3fd34413
 80090d4:	0800b368 	.word	0x0800b368
 80090d8:	00000432 	.word	0x00000432
 80090dc:	00000412 	.word	0x00000412
 80090e0:	fe100000 	.word	0xfe100000
 80090e4:	0800b2cf 	.word	0x0800b2cf
 80090e8:	0800b340 	.word	0x0800b340
 80090ec:	2302      	movs	r3, #2
 80090ee:	9310      	str	r3, [sp, #64]	; 0x40
 80090f0:	9b02      	ldr	r3, [sp, #8]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d016      	beq.n	8009124 <_dtoa_r+0x3dc>
 80090f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80090f8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80090fa:	425c      	negs	r4, r3
 80090fc:	230f      	movs	r3, #15
 80090fe:	4ab6      	ldr	r2, [pc, #728]	; (80093d8 <_dtoa_r+0x690>)
 8009100:	4023      	ands	r3, r4
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	18d3      	adds	r3, r2, r3
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f7f8 fbb1 	bl	8001870 <__aeabi_dmul>
 800910e:	2601      	movs	r6, #1
 8009110:	2300      	movs	r3, #0
 8009112:	9008      	str	r0, [sp, #32]
 8009114:	9109      	str	r1, [sp, #36]	; 0x24
 8009116:	4db1      	ldr	r5, [pc, #708]	; (80093dc <_dtoa_r+0x694>)
 8009118:	1124      	asrs	r4, r4, #4
 800911a:	2c00      	cmp	r4, #0
 800911c:	d000      	beq.n	8009120 <_dtoa_r+0x3d8>
 800911e:	e094      	b.n	800924a <_dtoa_r+0x502>
 8009120:	2b00      	cmp	r3, #0
 8009122:	d19f      	bne.n	8009064 <_dtoa_r+0x31c>
 8009124:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009126:	2b00      	cmp	r3, #0
 8009128:	d100      	bne.n	800912c <_dtoa_r+0x3e4>
 800912a:	e09b      	b.n	8009264 <_dtoa_r+0x51c>
 800912c:	9c08      	ldr	r4, [sp, #32]
 800912e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009130:	2200      	movs	r2, #0
 8009132:	0020      	movs	r0, r4
 8009134:	0029      	movs	r1, r5
 8009136:	4baa      	ldr	r3, [pc, #680]	; (80093e0 <_dtoa_r+0x698>)
 8009138:	f7f7 f988 	bl	800044c <__aeabi_dcmplt>
 800913c:	2800      	cmp	r0, #0
 800913e:	d100      	bne.n	8009142 <_dtoa_r+0x3fa>
 8009140:	e090      	b.n	8009264 <_dtoa_r+0x51c>
 8009142:	9b07      	ldr	r3, [sp, #28]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d100      	bne.n	800914a <_dtoa_r+0x402>
 8009148:	e08c      	b.n	8009264 <_dtoa_r+0x51c>
 800914a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800914c:	2b00      	cmp	r3, #0
 800914e:	dd46      	ble.n	80091de <_dtoa_r+0x496>
 8009150:	9b02      	ldr	r3, [sp, #8]
 8009152:	2200      	movs	r2, #0
 8009154:	0020      	movs	r0, r4
 8009156:	0029      	movs	r1, r5
 8009158:	1e5e      	subs	r6, r3, #1
 800915a:	4ba2      	ldr	r3, [pc, #648]	; (80093e4 <_dtoa_r+0x69c>)
 800915c:	f7f8 fb88 	bl	8001870 <__aeabi_dmul>
 8009160:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009162:	9008      	str	r0, [sp, #32]
 8009164:	9109      	str	r1, [sp, #36]	; 0x24
 8009166:	3301      	adds	r3, #1
 8009168:	9310      	str	r3, [sp, #64]	; 0x40
 800916a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800916c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800916e:	9c08      	ldr	r4, [sp, #32]
 8009170:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009172:	9314      	str	r3, [sp, #80]	; 0x50
 8009174:	f7f9 f9ce 	bl	8002514 <__aeabi_i2d>
 8009178:	0022      	movs	r2, r4
 800917a:	002b      	movs	r3, r5
 800917c:	f7f8 fb78 	bl	8001870 <__aeabi_dmul>
 8009180:	2200      	movs	r2, #0
 8009182:	4b99      	ldr	r3, [pc, #612]	; (80093e8 <_dtoa_r+0x6a0>)
 8009184:	f7f7 fc36 	bl	80009f4 <__aeabi_dadd>
 8009188:	9010      	str	r0, [sp, #64]	; 0x40
 800918a:	9111      	str	r1, [sp, #68]	; 0x44
 800918c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800918e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009190:	9208      	str	r2, [sp, #32]
 8009192:	9309      	str	r3, [sp, #36]	; 0x24
 8009194:	4a95      	ldr	r2, [pc, #596]	; (80093ec <_dtoa_r+0x6a4>)
 8009196:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009198:	4694      	mov	ip, r2
 800919a:	4463      	add	r3, ip
 800919c:	9317      	str	r3, [sp, #92]	; 0x5c
 800919e:	9309      	str	r3, [sp, #36]	; 0x24
 80091a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d161      	bne.n	800926a <_dtoa_r+0x522>
 80091a6:	2200      	movs	r2, #0
 80091a8:	0020      	movs	r0, r4
 80091aa:	0029      	movs	r1, r5
 80091ac:	4b90      	ldr	r3, [pc, #576]	; (80093f0 <_dtoa_r+0x6a8>)
 80091ae:	f7f8 fdcb 	bl	8001d48 <__aeabi_dsub>
 80091b2:	9a08      	ldr	r2, [sp, #32]
 80091b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b6:	0004      	movs	r4, r0
 80091b8:	000d      	movs	r5, r1
 80091ba:	f7f7 f95b 	bl	8000474 <__aeabi_dcmpgt>
 80091be:	2800      	cmp	r0, #0
 80091c0:	d000      	beq.n	80091c4 <_dtoa_r+0x47c>
 80091c2:	e2af      	b.n	8009724 <_dtoa_r+0x9dc>
 80091c4:	488b      	ldr	r0, [pc, #556]	; (80093f4 <_dtoa_r+0x6ac>)
 80091c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80091c8:	4684      	mov	ip, r0
 80091ca:	4461      	add	r1, ip
 80091cc:	000b      	movs	r3, r1
 80091ce:	0020      	movs	r0, r4
 80091d0:	0029      	movs	r1, r5
 80091d2:	9a08      	ldr	r2, [sp, #32]
 80091d4:	f7f7 f93a 	bl	800044c <__aeabi_dcmplt>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d000      	beq.n	80091de <_dtoa_r+0x496>
 80091dc:	e29f      	b.n	800971e <_dtoa_r+0x9d6>
 80091de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80091e2:	9308      	str	r3, [sp, #32]
 80091e4:	9409      	str	r4, [sp, #36]	; 0x24
 80091e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	da00      	bge.n	80091ee <_dtoa_r+0x4a6>
 80091ec:	e172      	b.n	80094d4 <_dtoa_r+0x78c>
 80091ee:	9a02      	ldr	r2, [sp, #8]
 80091f0:	2a0e      	cmp	r2, #14
 80091f2:	dd00      	ble.n	80091f6 <_dtoa_r+0x4ae>
 80091f4:	e16e      	b.n	80094d4 <_dtoa_r+0x78c>
 80091f6:	4b78      	ldr	r3, [pc, #480]	; (80093d8 <_dtoa_r+0x690>)
 80091f8:	00d2      	lsls	r2, r2, #3
 80091fa:	189b      	adds	r3, r3, r2
 80091fc:	685c      	ldr	r4, [r3, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	930a      	str	r3, [sp, #40]	; 0x28
 8009202:	940b      	str	r4, [sp, #44]	; 0x2c
 8009204:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009206:	2b00      	cmp	r3, #0
 8009208:	db00      	blt.n	800920c <_dtoa_r+0x4c4>
 800920a:	e0f7      	b.n	80093fc <_dtoa_r+0x6b4>
 800920c:	9b07      	ldr	r3, [sp, #28]
 800920e:	2b00      	cmp	r3, #0
 8009210:	dd00      	ble.n	8009214 <_dtoa_r+0x4cc>
 8009212:	e0f3      	b.n	80093fc <_dtoa_r+0x6b4>
 8009214:	d000      	beq.n	8009218 <_dtoa_r+0x4d0>
 8009216:	e282      	b.n	800971e <_dtoa_r+0x9d6>
 8009218:	980a      	ldr	r0, [sp, #40]	; 0x28
 800921a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800921c:	2200      	movs	r2, #0
 800921e:	4b74      	ldr	r3, [pc, #464]	; (80093f0 <_dtoa_r+0x6a8>)
 8009220:	f7f8 fb26 	bl	8001870 <__aeabi_dmul>
 8009224:	9a08      	ldr	r2, [sp, #32]
 8009226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009228:	f7f7 f92e 	bl	8000488 <__aeabi_dcmpge>
 800922c:	9e07      	ldr	r6, [sp, #28]
 800922e:	0035      	movs	r5, r6
 8009230:	2800      	cmp	r0, #0
 8009232:	d000      	beq.n	8009236 <_dtoa_r+0x4ee>
 8009234:	e259      	b.n	80096ea <_dtoa_r+0x9a2>
 8009236:	9b06      	ldr	r3, [sp, #24]
 8009238:	9a06      	ldr	r2, [sp, #24]
 800923a:	3301      	adds	r3, #1
 800923c:	9308      	str	r3, [sp, #32]
 800923e:	2331      	movs	r3, #49	; 0x31
 8009240:	7013      	strb	r3, [r2, #0]
 8009242:	9b02      	ldr	r3, [sp, #8]
 8009244:	3301      	adds	r3, #1
 8009246:	9302      	str	r3, [sp, #8]
 8009248:	e254      	b.n	80096f4 <_dtoa_r+0x9ac>
 800924a:	4234      	tst	r4, r6
 800924c:	d007      	beq.n	800925e <_dtoa_r+0x516>
 800924e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009250:	3301      	adds	r3, #1
 8009252:	9310      	str	r3, [sp, #64]	; 0x40
 8009254:	682a      	ldr	r2, [r5, #0]
 8009256:	686b      	ldr	r3, [r5, #4]
 8009258:	f7f8 fb0a 	bl	8001870 <__aeabi_dmul>
 800925c:	0033      	movs	r3, r6
 800925e:	1064      	asrs	r4, r4, #1
 8009260:	3508      	adds	r5, #8
 8009262:	e75a      	b.n	800911a <_dtoa_r+0x3d2>
 8009264:	9e02      	ldr	r6, [sp, #8]
 8009266:	9b07      	ldr	r3, [sp, #28]
 8009268:	e780      	b.n	800916c <_dtoa_r+0x424>
 800926a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800926c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800926e:	1e5a      	subs	r2, r3, #1
 8009270:	4b59      	ldr	r3, [pc, #356]	; (80093d8 <_dtoa_r+0x690>)
 8009272:	00d2      	lsls	r2, r2, #3
 8009274:	189b      	adds	r3, r3, r2
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	2900      	cmp	r1, #0
 800927c:	d051      	beq.n	8009322 <_dtoa_r+0x5da>
 800927e:	2000      	movs	r0, #0
 8009280:	495d      	ldr	r1, [pc, #372]	; (80093f8 <_dtoa_r+0x6b0>)
 8009282:	f7f7 fef3 	bl	800106c <__aeabi_ddiv>
 8009286:	9a08      	ldr	r2, [sp, #32]
 8009288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928a:	f7f8 fd5d 	bl	8001d48 <__aeabi_dsub>
 800928e:	9a06      	ldr	r2, [sp, #24]
 8009290:	9b06      	ldr	r3, [sp, #24]
 8009292:	4694      	mov	ip, r2
 8009294:	9317      	str	r3, [sp, #92]	; 0x5c
 8009296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009298:	9010      	str	r0, [sp, #64]	; 0x40
 800929a:	9111      	str	r1, [sp, #68]	; 0x44
 800929c:	4463      	add	r3, ip
 800929e:	9319      	str	r3, [sp, #100]	; 0x64
 80092a0:	0029      	movs	r1, r5
 80092a2:	0020      	movs	r0, r4
 80092a4:	f7f9 f900 	bl	80024a8 <__aeabi_d2iz>
 80092a8:	9014      	str	r0, [sp, #80]	; 0x50
 80092aa:	f7f9 f933 	bl	8002514 <__aeabi_i2d>
 80092ae:	0002      	movs	r2, r0
 80092b0:	000b      	movs	r3, r1
 80092b2:	0020      	movs	r0, r4
 80092b4:	0029      	movs	r1, r5
 80092b6:	f7f8 fd47 	bl	8001d48 <__aeabi_dsub>
 80092ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092be:	3301      	adds	r3, #1
 80092c0:	9308      	str	r3, [sp, #32]
 80092c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092c4:	0004      	movs	r4, r0
 80092c6:	3330      	adds	r3, #48	; 0x30
 80092c8:	7013      	strb	r3, [r2, #0]
 80092ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092ce:	000d      	movs	r5, r1
 80092d0:	f7f7 f8bc 	bl	800044c <__aeabi_dcmplt>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d175      	bne.n	80093c4 <_dtoa_r+0x67c>
 80092d8:	0022      	movs	r2, r4
 80092da:	002b      	movs	r3, r5
 80092dc:	2000      	movs	r0, #0
 80092de:	4940      	ldr	r1, [pc, #256]	; (80093e0 <_dtoa_r+0x698>)
 80092e0:	f7f8 fd32 	bl	8001d48 <__aeabi_dsub>
 80092e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092e8:	f7f7 f8b0 	bl	800044c <__aeabi_dcmplt>
 80092ec:	2800      	cmp	r0, #0
 80092ee:	d000      	beq.n	80092f2 <_dtoa_r+0x5aa>
 80092f0:	e0d2      	b.n	8009498 <_dtoa_r+0x750>
 80092f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80092f4:	9a08      	ldr	r2, [sp, #32]
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d100      	bne.n	80092fc <_dtoa_r+0x5b4>
 80092fa:	e770      	b.n	80091de <_dtoa_r+0x496>
 80092fc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80092fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009300:	2200      	movs	r2, #0
 8009302:	4b38      	ldr	r3, [pc, #224]	; (80093e4 <_dtoa_r+0x69c>)
 8009304:	f7f8 fab4 	bl	8001870 <__aeabi_dmul>
 8009308:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <_dtoa_r+0x69c>)
 800930a:	9010      	str	r0, [sp, #64]	; 0x40
 800930c:	9111      	str	r1, [sp, #68]	; 0x44
 800930e:	2200      	movs	r2, #0
 8009310:	0020      	movs	r0, r4
 8009312:	0029      	movs	r1, r5
 8009314:	f7f8 faac 	bl	8001870 <__aeabi_dmul>
 8009318:	9b08      	ldr	r3, [sp, #32]
 800931a:	0004      	movs	r4, r0
 800931c:	000d      	movs	r5, r1
 800931e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009320:	e7be      	b.n	80092a0 <_dtoa_r+0x558>
 8009322:	9808      	ldr	r0, [sp, #32]
 8009324:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009326:	f7f8 faa3 	bl	8001870 <__aeabi_dmul>
 800932a:	9a06      	ldr	r2, [sp, #24]
 800932c:	9b06      	ldr	r3, [sp, #24]
 800932e:	4694      	mov	ip, r2
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009334:	9010      	str	r0, [sp, #64]	; 0x40
 8009336:	9111      	str	r1, [sp, #68]	; 0x44
 8009338:	4463      	add	r3, ip
 800933a:	9319      	str	r3, [sp, #100]	; 0x64
 800933c:	0029      	movs	r1, r5
 800933e:	0020      	movs	r0, r4
 8009340:	f7f9 f8b2 	bl	80024a8 <__aeabi_d2iz>
 8009344:	9017      	str	r0, [sp, #92]	; 0x5c
 8009346:	f7f9 f8e5 	bl	8002514 <__aeabi_i2d>
 800934a:	0002      	movs	r2, r0
 800934c:	000b      	movs	r3, r1
 800934e:	0020      	movs	r0, r4
 8009350:	0029      	movs	r1, r5
 8009352:	f7f8 fcf9 	bl	8001d48 <__aeabi_dsub>
 8009356:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009358:	9a08      	ldr	r2, [sp, #32]
 800935a:	3330      	adds	r3, #48	; 0x30
 800935c:	7013      	strb	r3, [r2, #0]
 800935e:	0013      	movs	r3, r2
 8009360:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009362:	3301      	adds	r3, #1
 8009364:	0004      	movs	r4, r0
 8009366:	000d      	movs	r5, r1
 8009368:	9308      	str	r3, [sp, #32]
 800936a:	4293      	cmp	r3, r2
 800936c:	d12c      	bne.n	80093c8 <_dtoa_r+0x680>
 800936e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009370:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009372:	9a06      	ldr	r2, [sp, #24]
 8009374:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009376:	4694      	mov	ip, r2
 8009378:	4463      	add	r3, ip
 800937a:	2200      	movs	r2, #0
 800937c:	9308      	str	r3, [sp, #32]
 800937e:	4b1e      	ldr	r3, [pc, #120]	; (80093f8 <_dtoa_r+0x6b0>)
 8009380:	f7f7 fb38 	bl	80009f4 <__aeabi_dadd>
 8009384:	0002      	movs	r2, r0
 8009386:	000b      	movs	r3, r1
 8009388:	0020      	movs	r0, r4
 800938a:	0029      	movs	r1, r5
 800938c:	f7f7 f872 	bl	8000474 <__aeabi_dcmpgt>
 8009390:	2800      	cmp	r0, #0
 8009392:	d000      	beq.n	8009396 <_dtoa_r+0x64e>
 8009394:	e080      	b.n	8009498 <_dtoa_r+0x750>
 8009396:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800939a:	2000      	movs	r0, #0
 800939c:	4916      	ldr	r1, [pc, #88]	; (80093f8 <_dtoa_r+0x6b0>)
 800939e:	f7f8 fcd3 	bl	8001d48 <__aeabi_dsub>
 80093a2:	0002      	movs	r2, r0
 80093a4:	000b      	movs	r3, r1
 80093a6:	0020      	movs	r0, r4
 80093a8:	0029      	movs	r1, r5
 80093aa:	f7f7 f84f 	bl	800044c <__aeabi_dcmplt>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	d100      	bne.n	80093b4 <_dtoa_r+0x66c>
 80093b2:	e714      	b.n	80091de <_dtoa_r+0x496>
 80093b4:	9b08      	ldr	r3, [sp, #32]
 80093b6:	001a      	movs	r2, r3
 80093b8:	3a01      	subs	r2, #1
 80093ba:	9208      	str	r2, [sp, #32]
 80093bc:	7812      	ldrb	r2, [r2, #0]
 80093be:	2a30      	cmp	r2, #48	; 0x30
 80093c0:	d0f8      	beq.n	80093b4 <_dtoa_r+0x66c>
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	9602      	str	r6, [sp, #8]
 80093c6:	e055      	b.n	8009474 <_dtoa_r+0x72c>
 80093c8:	2200      	movs	r2, #0
 80093ca:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <_dtoa_r+0x69c>)
 80093cc:	f7f8 fa50 	bl	8001870 <__aeabi_dmul>
 80093d0:	0004      	movs	r4, r0
 80093d2:	000d      	movs	r5, r1
 80093d4:	e7b2      	b.n	800933c <_dtoa_r+0x5f4>
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	0800b368 	.word	0x0800b368
 80093dc:	0800b340 	.word	0x0800b340
 80093e0:	3ff00000 	.word	0x3ff00000
 80093e4:	40240000 	.word	0x40240000
 80093e8:	401c0000 	.word	0x401c0000
 80093ec:	fcc00000 	.word	0xfcc00000
 80093f0:	40140000 	.word	0x40140000
 80093f4:	7cc00000 	.word	0x7cc00000
 80093f8:	3fe00000 	.word	0x3fe00000
 80093fc:	9b07      	ldr	r3, [sp, #28]
 80093fe:	9e06      	ldr	r6, [sp, #24]
 8009400:	3b01      	subs	r3, #1
 8009402:	199b      	adds	r3, r3, r6
 8009404:	930c      	str	r3, [sp, #48]	; 0x30
 8009406:	9c08      	ldr	r4, [sp, #32]
 8009408:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800940a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800940c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800940e:	0020      	movs	r0, r4
 8009410:	0029      	movs	r1, r5
 8009412:	f7f7 fe2b 	bl	800106c <__aeabi_ddiv>
 8009416:	f7f9 f847 	bl	80024a8 <__aeabi_d2iz>
 800941a:	9007      	str	r0, [sp, #28]
 800941c:	f7f9 f87a 	bl	8002514 <__aeabi_i2d>
 8009420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009424:	f7f8 fa24 	bl	8001870 <__aeabi_dmul>
 8009428:	0002      	movs	r2, r0
 800942a:	000b      	movs	r3, r1
 800942c:	0020      	movs	r0, r4
 800942e:	0029      	movs	r1, r5
 8009430:	f7f8 fc8a 	bl	8001d48 <__aeabi_dsub>
 8009434:	0033      	movs	r3, r6
 8009436:	9a07      	ldr	r2, [sp, #28]
 8009438:	3601      	adds	r6, #1
 800943a:	3230      	adds	r2, #48	; 0x30
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009440:	9608      	str	r6, [sp, #32]
 8009442:	429a      	cmp	r2, r3
 8009444:	d139      	bne.n	80094ba <_dtoa_r+0x772>
 8009446:	0002      	movs	r2, r0
 8009448:	000b      	movs	r3, r1
 800944a:	f7f7 fad3 	bl	80009f4 <__aeabi_dadd>
 800944e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009452:	0004      	movs	r4, r0
 8009454:	000d      	movs	r5, r1
 8009456:	f7f7 f80d 	bl	8000474 <__aeabi_dcmpgt>
 800945a:	2800      	cmp	r0, #0
 800945c:	d11b      	bne.n	8009496 <_dtoa_r+0x74e>
 800945e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009462:	0020      	movs	r0, r4
 8009464:	0029      	movs	r1, r5
 8009466:	f7f6 ffeb 	bl	8000440 <__aeabi_dcmpeq>
 800946a:	2800      	cmp	r0, #0
 800946c:	d002      	beq.n	8009474 <_dtoa_r+0x72c>
 800946e:	9b07      	ldr	r3, [sp, #28]
 8009470:	07db      	lsls	r3, r3, #31
 8009472:	d410      	bmi.n	8009496 <_dtoa_r+0x74e>
 8009474:	0038      	movs	r0, r7
 8009476:	9905      	ldr	r1, [sp, #20]
 8009478:	f000 fae4 	bl	8009a44 <_Bfree>
 800947c:	2300      	movs	r3, #0
 800947e:	9a08      	ldr	r2, [sp, #32]
 8009480:	9802      	ldr	r0, [sp, #8]
 8009482:	7013      	strb	r3, [r2, #0]
 8009484:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009486:	3001      	adds	r0, #1
 8009488:	6018      	str	r0, [r3, #0]
 800948a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800948c:	2b00      	cmp	r3, #0
 800948e:	d100      	bne.n	8009492 <_dtoa_r+0x74a>
 8009490:	e4a6      	b.n	8008de0 <_dtoa_r+0x98>
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	e4a4      	b.n	8008de0 <_dtoa_r+0x98>
 8009496:	9e02      	ldr	r6, [sp, #8]
 8009498:	9b08      	ldr	r3, [sp, #32]
 800949a:	9308      	str	r3, [sp, #32]
 800949c:	3b01      	subs	r3, #1
 800949e:	781a      	ldrb	r2, [r3, #0]
 80094a0:	2a39      	cmp	r2, #57	; 0x39
 80094a2:	d106      	bne.n	80094b2 <_dtoa_r+0x76a>
 80094a4:	9a06      	ldr	r2, [sp, #24]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d1f7      	bne.n	800949a <_dtoa_r+0x752>
 80094aa:	2230      	movs	r2, #48	; 0x30
 80094ac:	9906      	ldr	r1, [sp, #24]
 80094ae:	3601      	adds	r6, #1
 80094b0:	700a      	strb	r2, [r1, #0]
 80094b2:	781a      	ldrb	r2, [r3, #0]
 80094b4:	3201      	adds	r2, #1
 80094b6:	701a      	strb	r2, [r3, #0]
 80094b8:	e784      	b.n	80093c4 <_dtoa_r+0x67c>
 80094ba:	2200      	movs	r2, #0
 80094bc:	4baa      	ldr	r3, [pc, #680]	; (8009768 <_dtoa_r+0xa20>)
 80094be:	f7f8 f9d7 	bl	8001870 <__aeabi_dmul>
 80094c2:	2200      	movs	r2, #0
 80094c4:	2300      	movs	r3, #0
 80094c6:	0004      	movs	r4, r0
 80094c8:	000d      	movs	r5, r1
 80094ca:	f7f6 ffb9 	bl	8000440 <__aeabi_dcmpeq>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d09b      	beq.n	800940a <_dtoa_r+0x6c2>
 80094d2:	e7cf      	b.n	8009474 <_dtoa_r+0x72c>
 80094d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80094d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80094d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80094da:	2d00      	cmp	r5, #0
 80094dc:	d012      	beq.n	8009504 <_dtoa_r+0x7bc>
 80094de:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80094e0:	2a01      	cmp	r2, #1
 80094e2:	dc66      	bgt.n	80095b2 <_dtoa_r+0x86a>
 80094e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	d05d      	beq.n	80095a6 <_dtoa_r+0x85e>
 80094ea:	4aa0      	ldr	r2, [pc, #640]	; (800976c <_dtoa_r+0xa24>)
 80094ec:	189b      	adds	r3, r3, r2
 80094ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f0:	2101      	movs	r1, #1
 80094f2:	18d2      	adds	r2, r2, r3
 80094f4:	920a      	str	r2, [sp, #40]	; 0x28
 80094f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094f8:	0038      	movs	r0, r7
 80094fa:	18d3      	adds	r3, r2, r3
 80094fc:	930d      	str	r3, [sp, #52]	; 0x34
 80094fe:	f000 fb51 	bl	8009ba4 <__i2b>
 8009502:	0005      	movs	r5, r0
 8009504:	2c00      	cmp	r4, #0
 8009506:	dd0e      	ble.n	8009526 <_dtoa_r+0x7de>
 8009508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800950a:	2b00      	cmp	r3, #0
 800950c:	dd0b      	ble.n	8009526 <_dtoa_r+0x7de>
 800950e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009510:	0023      	movs	r3, r4
 8009512:	4294      	cmp	r4, r2
 8009514:	dd00      	ble.n	8009518 <_dtoa_r+0x7d0>
 8009516:	0013      	movs	r3, r2
 8009518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800951a:	1ae4      	subs	r4, r4, r3
 800951c:	1ad2      	subs	r2, r2, r3
 800951e:	920a      	str	r2, [sp, #40]	; 0x28
 8009520:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009522:	1ad3      	subs	r3, r2, r3
 8009524:	930d      	str	r3, [sp, #52]	; 0x34
 8009526:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009528:	2b00      	cmp	r3, #0
 800952a:	d01f      	beq.n	800956c <_dtoa_r+0x824>
 800952c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800952e:	2b00      	cmp	r3, #0
 8009530:	d054      	beq.n	80095dc <_dtoa_r+0x894>
 8009532:	2e00      	cmp	r6, #0
 8009534:	dd11      	ble.n	800955a <_dtoa_r+0x812>
 8009536:	0029      	movs	r1, r5
 8009538:	0032      	movs	r2, r6
 800953a:	0038      	movs	r0, r7
 800953c:	f000 fbf8 	bl	8009d30 <__pow5mult>
 8009540:	9a05      	ldr	r2, [sp, #20]
 8009542:	0001      	movs	r1, r0
 8009544:	0005      	movs	r5, r0
 8009546:	0038      	movs	r0, r7
 8009548:	f000 fb42 	bl	8009bd0 <__multiply>
 800954c:	9905      	ldr	r1, [sp, #20]
 800954e:	9014      	str	r0, [sp, #80]	; 0x50
 8009550:	0038      	movs	r0, r7
 8009552:	f000 fa77 	bl	8009a44 <_Bfree>
 8009556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800955c:	1b9a      	subs	r2, r3, r6
 800955e:	42b3      	cmp	r3, r6
 8009560:	d004      	beq.n	800956c <_dtoa_r+0x824>
 8009562:	0038      	movs	r0, r7
 8009564:	9905      	ldr	r1, [sp, #20]
 8009566:	f000 fbe3 	bl	8009d30 <__pow5mult>
 800956a:	9005      	str	r0, [sp, #20]
 800956c:	2101      	movs	r1, #1
 800956e:	0038      	movs	r0, r7
 8009570:	f000 fb18 	bl	8009ba4 <__i2b>
 8009574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009576:	0006      	movs	r6, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	dd31      	ble.n	80095e0 <_dtoa_r+0x898>
 800957c:	001a      	movs	r2, r3
 800957e:	0001      	movs	r1, r0
 8009580:	0038      	movs	r0, r7
 8009582:	f000 fbd5 	bl	8009d30 <__pow5mult>
 8009586:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009588:	0006      	movs	r6, r0
 800958a:	2b01      	cmp	r3, #1
 800958c:	dd2d      	ble.n	80095ea <_dtoa_r+0x8a2>
 800958e:	2300      	movs	r3, #0
 8009590:	930e      	str	r3, [sp, #56]	; 0x38
 8009592:	6933      	ldr	r3, [r6, #16]
 8009594:	3303      	adds	r3, #3
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	18f3      	adds	r3, r6, r3
 800959a:	6858      	ldr	r0, [r3, #4]
 800959c:	f000 faba 	bl	8009b14 <__hi0bits>
 80095a0:	2320      	movs	r3, #32
 80095a2:	1a18      	subs	r0, r3, r0
 80095a4:	e039      	b.n	800961a <_dtoa_r+0x8d2>
 80095a6:	2336      	movs	r3, #54	; 0x36
 80095a8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80095aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80095ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	e79d      	b.n	80094ee <_dtoa_r+0x7a6>
 80095b2:	9b07      	ldr	r3, [sp, #28]
 80095b4:	1e5e      	subs	r6, r3, #1
 80095b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095b8:	42b3      	cmp	r3, r6
 80095ba:	db07      	blt.n	80095cc <_dtoa_r+0x884>
 80095bc:	1b9e      	subs	r6, r3, r6
 80095be:	9b07      	ldr	r3, [sp, #28]
 80095c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	da93      	bge.n	80094ee <_dtoa_r+0x7a6>
 80095c6:	1ae4      	subs	r4, r4, r3
 80095c8:	2300      	movs	r3, #0
 80095ca:	e790      	b.n	80094ee <_dtoa_r+0x7a6>
 80095cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80095d0:	1af3      	subs	r3, r6, r3
 80095d2:	18d3      	adds	r3, r2, r3
 80095d4:	960e      	str	r6, [sp, #56]	; 0x38
 80095d6:	9315      	str	r3, [sp, #84]	; 0x54
 80095d8:	2600      	movs	r6, #0
 80095da:	e7f0      	b.n	80095be <_dtoa_r+0x876>
 80095dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095de:	e7c0      	b.n	8009562 <_dtoa_r+0x81a>
 80095e0:	2300      	movs	r3, #0
 80095e2:	930e      	str	r3, [sp, #56]	; 0x38
 80095e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	dc13      	bgt.n	8009612 <_dtoa_r+0x8ca>
 80095ea:	2300      	movs	r3, #0
 80095ec:	930e      	str	r3, [sp, #56]	; 0x38
 80095ee:	9b08      	ldr	r3, [sp, #32]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10e      	bne.n	8009612 <_dtoa_r+0x8ca>
 80095f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f6:	031b      	lsls	r3, r3, #12
 80095f8:	d10b      	bne.n	8009612 <_dtoa_r+0x8ca>
 80095fa:	4b5d      	ldr	r3, [pc, #372]	; (8009770 <_dtoa_r+0xa28>)
 80095fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fe:	4213      	tst	r3, r2
 8009600:	d007      	beq.n	8009612 <_dtoa_r+0x8ca>
 8009602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009604:	3301      	adds	r3, #1
 8009606:	930a      	str	r3, [sp, #40]	; 0x28
 8009608:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800960a:	3301      	adds	r3, #1
 800960c:	930d      	str	r3, [sp, #52]	; 0x34
 800960e:	2301      	movs	r3, #1
 8009610:	930e      	str	r3, [sp, #56]	; 0x38
 8009612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009614:	2001      	movs	r0, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1bb      	bne.n	8009592 <_dtoa_r+0x84a>
 800961a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800961c:	221f      	movs	r2, #31
 800961e:	1818      	adds	r0, r3, r0
 8009620:	0003      	movs	r3, r0
 8009622:	4013      	ands	r3, r2
 8009624:	4210      	tst	r0, r2
 8009626:	d046      	beq.n	80096b6 <_dtoa_r+0x96e>
 8009628:	3201      	adds	r2, #1
 800962a:	1ad2      	subs	r2, r2, r3
 800962c:	2a04      	cmp	r2, #4
 800962e:	dd3f      	ble.n	80096b0 <_dtoa_r+0x968>
 8009630:	221c      	movs	r2, #28
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009636:	18e4      	adds	r4, r4, r3
 8009638:	18d2      	adds	r2, r2, r3
 800963a:	920a      	str	r2, [sp, #40]	; 0x28
 800963c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800963e:	18d3      	adds	r3, r2, r3
 8009640:	930d      	str	r3, [sp, #52]	; 0x34
 8009642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009644:	2b00      	cmp	r3, #0
 8009646:	dd05      	ble.n	8009654 <_dtoa_r+0x90c>
 8009648:	001a      	movs	r2, r3
 800964a:	0038      	movs	r0, r7
 800964c:	9905      	ldr	r1, [sp, #20]
 800964e:	f000 fbcb 	bl	8009de8 <__lshift>
 8009652:	9005      	str	r0, [sp, #20]
 8009654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009656:	2b00      	cmp	r3, #0
 8009658:	dd05      	ble.n	8009666 <_dtoa_r+0x91e>
 800965a:	0031      	movs	r1, r6
 800965c:	001a      	movs	r2, r3
 800965e:	0038      	movs	r0, r7
 8009660:	f000 fbc2 	bl	8009de8 <__lshift>
 8009664:	0006      	movs	r6, r0
 8009666:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009668:	2b00      	cmp	r3, #0
 800966a:	d026      	beq.n	80096ba <_dtoa_r+0x972>
 800966c:	0031      	movs	r1, r6
 800966e:	9805      	ldr	r0, [sp, #20]
 8009670:	f000 fc28 	bl	8009ec4 <__mcmp>
 8009674:	2800      	cmp	r0, #0
 8009676:	da20      	bge.n	80096ba <_dtoa_r+0x972>
 8009678:	9b02      	ldr	r3, [sp, #8]
 800967a:	220a      	movs	r2, #10
 800967c:	3b01      	subs	r3, #1
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	0038      	movs	r0, r7
 8009682:	2300      	movs	r3, #0
 8009684:	9905      	ldr	r1, [sp, #20]
 8009686:	f000 fa01 	bl	8009a8c <__multadd>
 800968a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800968c:	9005      	str	r0, [sp, #20]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d100      	bne.n	8009694 <_dtoa_r+0x94c>
 8009692:	e166      	b.n	8009962 <_dtoa_r+0xc1a>
 8009694:	2300      	movs	r3, #0
 8009696:	0029      	movs	r1, r5
 8009698:	220a      	movs	r2, #10
 800969a:	0038      	movs	r0, r7
 800969c:	f000 f9f6 	bl	8009a8c <__multadd>
 80096a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096a2:	0005      	movs	r5, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	dc47      	bgt.n	8009738 <_dtoa_r+0x9f0>
 80096a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	dc0d      	bgt.n	80096ca <_dtoa_r+0x982>
 80096ae:	e043      	b.n	8009738 <_dtoa_r+0x9f0>
 80096b0:	2a04      	cmp	r2, #4
 80096b2:	d0c6      	beq.n	8009642 <_dtoa_r+0x8fa>
 80096b4:	0013      	movs	r3, r2
 80096b6:	331c      	adds	r3, #28
 80096b8:	e7bc      	b.n	8009634 <_dtoa_r+0x8ec>
 80096ba:	9b07      	ldr	r3, [sp, #28]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	dc35      	bgt.n	800972c <_dtoa_r+0x9e4>
 80096c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	dd32      	ble.n	800972c <_dtoa_r+0x9e4>
 80096c6:	9b07      	ldr	r3, [sp, #28]
 80096c8:	930c      	str	r3, [sp, #48]	; 0x30
 80096ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10c      	bne.n	80096ea <_dtoa_r+0x9a2>
 80096d0:	0031      	movs	r1, r6
 80096d2:	2205      	movs	r2, #5
 80096d4:	0038      	movs	r0, r7
 80096d6:	f000 f9d9 	bl	8009a8c <__multadd>
 80096da:	0006      	movs	r6, r0
 80096dc:	0001      	movs	r1, r0
 80096de:	9805      	ldr	r0, [sp, #20]
 80096e0:	f000 fbf0 	bl	8009ec4 <__mcmp>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	dd00      	ble.n	80096ea <_dtoa_r+0x9a2>
 80096e8:	e5a5      	b.n	8009236 <_dtoa_r+0x4ee>
 80096ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096ec:	43db      	mvns	r3, r3
 80096ee:	9302      	str	r3, [sp, #8]
 80096f0:	9b06      	ldr	r3, [sp, #24]
 80096f2:	9308      	str	r3, [sp, #32]
 80096f4:	2400      	movs	r4, #0
 80096f6:	0031      	movs	r1, r6
 80096f8:	0038      	movs	r0, r7
 80096fa:	f000 f9a3 	bl	8009a44 <_Bfree>
 80096fe:	2d00      	cmp	r5, #0
 8009700:	d100      	bne.n	8009704 <_dtoa_r+0x9bc>
 8009702:	e6b7      	b.n	8009474 <_dtoa_r+0x72c>
 8009704:	2c00      	cmp	r4, #0
 8009706:	d005      	beq.n	8009714 <_dtoa_r+0x9cc>
 8009708:	42ac      	cmp	r4, r5
 800970a:	d003      	beq.n	8009714 <_dtoa_r+0x9cc>
 800970c:	0021      	movs	r1, r4
 800970e:	0038      	movs	r0, r7
 8009710:	f000 f998 	bl	8009a44 <_Bfree>
 8009714:	0029      	movs	r1, r5
 8009716:	0038      	movs	r0, r7
 8009718:	f000 f994 	bl	8009a44 <_Bfree>
 800971c:	e6aa      	b.n	8009474 <_dtoa_r+0x72c>
 800971e:	2600      	movs	r6, #0
 8009720:	0035      	movs	r5, r6
 8009722:	e7e2      	b.n	80096ea <_dtoa_r+0x9a2>
 8009724:	9602      	str	r6, [sp, #8]
 8009726:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009728:	0035      	movs	r5, r6
 800972a:	e584      	b.n	8009236 <_dtoa_r+0x4ee>
 800972c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d100      	bne.n	8009734 <_dtoa_r+0x9ec>
 8009732:	e0ce      	b.n	80098d2 <_dtoa_r+0xb8a>
 8009734:	9b07      	ldr	r3, [sp, #28]
 8009736:	930c      	str	r3, [sp, #48]	; 0x30
 8009738:	2c00      	cmp	r4, #0
 800973a:	dd05      	ble.n	8009748 <_dtoa_r+0xa00>
 800973c:	0029      	movs	r1, r5
 800973e:	0022      	movs	r2, r4
 8009740:	0038      	movs	r0, r7
 8009742:	f000 fb51 	bl	8009de8 <__lshift>
 8009746:	0005      	movs	r5, r0
 8009748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800974a:	0028      	movs	r0, r5
 800974c:	2b00      	cmp	r3, #0
 800974e:	d022      	beq.n	8009796 <_dtoa_r+0xa4e>
 8009750:	0038      	movs	r0, r7
 8009752:	6869      	ldr	r1, [r5, #4]
 8009754:	f000 f932 	bl	80099bc <_Balloc>
 8009758:	1e04      	subs	r4, r0, #0
 800975a:	d10f      	bne.n	800977c <_dtoa_r+0xa34>
 800975c:	0002      	movs	r2, r0
 800975e:	4b05      	ldr	r3, [pc, #20]	; (8009774 <_dtoa_r+0xa2c>)
 8009760:	4905      	ldr	r1, [pc, #20]	; (8009778 <_dtoa_r+0xa30>)
 8009762:	f7ff fb06 	bl	8008d72 <_dtoa_r+0x2a>
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	40240000 	.word	0x40240000
 800976c:	00000433 	.word	0x00000433
 8009770:	7ff00000 	.word	0x7ff00000
 8009774:	0800b2cf 	.word	0x0800b2cf
 8009778:	000002ea 	.word	0x000002ea
 800977c:	0029      	movs	r1, r5
 800977e:	692b      	ldr	r3, [r5, #16]
 8009780:	310c      	adds	r1, #12
 8009782:	1c9a      	adds	r2, r3, #2
 8009784:	0092      	lsls	r2, r2, #2
 8009786:	300c      	adds	r0, #12
 8009788:	f7fe fcbe 	bl	8008108 <memcpy>
 800978c:	2201      	movs	r2, #1
 800978e:	0021      	movs	r1, r4
 8009790:	0038      	movs	r0, r7
 8009792:	f000 fb29 	bl	8009de8 <__lshift>
 8009796:	9b06      	ldr	r3, [sp, #24]
 8009798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800979a:	930a      	str	r3, [sp, #40]	; 0x28
 800979c:	3b01      	subs	r3, #1
 800979e:	189b      	adds	r3, r3, r2
 80097a0:	2201      	movs	r2, #1
 80097a2:	002c      	movs	r4, r5
 80097a4:	0005      	movs	r5, r0
 80097a6:	9314      	str	r3, [sp, #80]	; 0x50
 80097a8:	9b08      	ldr	r3, [sp, #32]
 80097aa:	4013      	ands	r3, r2
 80097ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80097ae:	0031      	movs	r1, r6
 80097b0:	9805      	ldr	r0, [sp, #20]
 80097b2:	f7ff fa3d 	bl	8008c30 <quorem>
 80097b6:	0003      	movs	r3, r0
 80097b8:	0021      	movs	r1, r4
 80097ba:	3330      	adds	r3, #48	; 0x30
 80097bc:	900d      	str	r0, [sp, #52]	; 0x34
 80097be:	9805      	ldr	r0, [sp, #20]
 80097c0:	9307      	str	r3, [sp, #28]
 80097c2:	f000 fb7f 	bl	8009ec4 <__mcmp>
 80097c6:	002a      	movs	r2, r5
 80097c8:	900e      	str	r0, [sp, #56]	; 0x38
 80097ca:	0031      	movs	r1, r6
 80097cc:	0038      	movs	r0, r7
 80097ce:	f000 fb95 	bl	8009efc <__mdiff>
 80097d2:	68c3      	ldr	r3, [r0, #12]
 80097d4:	9008      	str	r0, [sp, #32]
 80097d6:	9310      	str	r3, [sp, #64]	; 0x40
 80097d8:	2301      	movs	r3, #1
 80097da:	930c      	str	r3, [sp, #48]	; 0x30
 80097dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d104      	bne.n	80097ec <_dtoa_r+0xaa4>
 80097e2:	0001      	movs	r1, r0
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	f000 fb6d 	bl	8009ec4 <__mcmp>
 80097ea:	900c      	str	r0, [sp, #48]	; 0x30
 80097ec:	0038      	movs	r0, r7
 80097ee:	9908      	ldr	r1, [sp, #32]
 80097f0:	f000 f928 	bl	8009a44 <_Bfree>
 80097f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80097f8:	3301      	adds	r3, #1
 80097fa:	9308      	str	r3, [sp, #32]
 80097fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097fe:	4313      	orrs	r3, r2
 8009800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009802:	4313      	orrs	r3, r2
 8009804:	d10c      	bne.n	8009820 <_dtoa_r+0xad8>
 8009806:	9b07      	ldr	r3, [sp, #28]
 8009808:	2b39      	cmp	r3, #57	; 0x39
 800980a:	d026      	beq.n	800985a <_dtoa_r+0xb12>
 800980c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800980e:	2b00      	cmp	r3, #0
 8009810:	dd02      	ble.n	8009818 <_dtoa_r+0xad0>
 8009812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009814:	3331      	adds	r3, #49	; 0x31
 8009816:	9307      	str	r3, [sp, #28]
 8009818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800981a:	9a07      	ldr	r2, [sp, #28]
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	e76a      	b.n	80096f6 <_dtoa_r+0x9ae>
 8009820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009822:	2b00      	cmp	r3, #0
 8009824:	db04      	blt.n	8009830 <_dtoa_r+0xae8>
 8009826:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009828:	4313      	orrs	r3, r2
 800982a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800982c:	4313      	orrs	r3, r2
 800982e:	d11f      	bne.n	8009870 <_dtoa_r+0xb28>
 8009830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009832:	2b00      	cmp	r3, #0
 8009834:	ddf0      	ble.n	8009818 <_dtoa_r+0xad0>
 8009836:	9905      	ldr	r1, [sp, #20]
 8009838:	2201      	movs	r2, #1
 800983a:	0038      	movs	r0, r7
 800983c:	f000 fad4 	bl	8009de8 <__lshift>
 8009840:	0031      	movs	r1, r6
 8009842:	9005      	str	r0, [sp, #20]
 8009844:	f000 fb3e 	bl	8009ec4 <__mcmp>
 8009848:	2800      	cmp	r0, #0
 800984a:	dc03      	bgt.n	8009854 <_dtoa_r+0xb0c>
 800984c:	d1e4      	bne.n	8009818 <_dtoa_r+0xad0>
 800984e:	9b07      	ldr	r3, [sp, #28]
 8009850:	07db      	lsls	r3, r3, #31
 8009852:	d5e1      	bpl.n	8009818 <_dtoa_r+0xad0>
 8009854:	9b07      	ldr	r3, [sp, #28]
 8009856:	2b39      	cmp	r3, #57	; 0x39
 8009858:	d1db      	bne.n	8009812 <_dtoa_r+0xaca>
 800985a:	2339      	movs	r3, #57	; 0x39
 800985c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800985e:	7013      	strb	r3, [r2, #0]
 8009860:	9b08      	ldr	r3, [sp, #32]
 8009862:	9308      	str	r3, [sp, #32]
 8009864:	3b01      	subs	r3, #1
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	2a39      	cmp	r2, #57	; 0x39
 800986a:	d068      	beq.n	800993e <_dtoa_r+0xbf6>
 800986c:	3201      	adds	r2, #1
 800986e:	e7d5      	b.n	800981c <_dtoa_r+0xad4>
 8009870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009872:	2b00      	cmp	r3, #0
 8009874:	dd07      	ble.n	8009886 <_dtoa_r+0xb3e>
 8009876:	9b07      	ldr	r3, [sp, #28]
 8009878:	2b39      	cmp	r3, #57	; 0x39
 800987a:	d0ee      	beq.n	800985a <_dtoa_r+0xb12>
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009880:	3301      	adds	r3, #1
 8009882:	7013      	strb	r3, [r2, #0]
 8009884:	e737      	b.n	80096f6 <_dtoa_r+0x9ae>
 8009886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009888:	9a07      	ldr	r2, [sp, #28]
 800988a:	701a      	strb	r2, [r3, #0]
 800988c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800988e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009890:	4293      	cmp	r3, r2
 8009892:	d03e      	beq.n	8009912 <_dtoa_r+0xbca>
 8009894:	2300      	movs	r3, #0
 8009896:	220a      	movs	r2, #10
 8009898:	9905      	ldr	r1, [sp, #20]
 800989a:	0038      	movs	r0, r7
 800989c:	f000 f8f6 	bl	8009a8c <__multadd>
 80098a0:	2300      	movs	r3, #0
 80098a2:	9005      	str	r0, [sp, #20]
 80098a4:	220a      	movs	r2, #10
 80098a6:	0021      	movs	r1, r4
 80098a8:	0038      	movs	r0, r7
 80098aa:	42ac      	cmp	r4, r5
 80098ac:	d106      	bne.n	80098bc <_dtoa_r+0xb74>
 80098ae:	f000 f8ed 	bl	8009a8c <__multadd>
 80098b2:	0004      	movs	r4, r0
 80098b4:	0005      	movs	r5, r0
 80098b6:	9b08      	ldr	r3, [sp, #32]
 80098b8:	930a      	str	r3, [sp, #40]	; 0x28
 80098ba:	e778      	b.n	80097ae <_dtoa_r+0xa66>
 80098bc:	f000 f8e6 	bl	8009a8c <__multadd>
 80098c0:	0029      	movs	r1, r5
 80098c2:	0004      	movs	r4, r0
 80098c4:	2300      	movs	r3, #0
 80098c6:	220a      	movs	r2, #10
 80098c8:	0038      	movs	r0, r7
 80098ca:	f000 f8df 	bl	8009a8c <__multadd>
 80098ce:	0005      	movs	r5, r0
 80098d0:	e7f1      	b.n	80098b6 <_dtoa_r+0xb6e>
 80098d2:	9b07      	ldr	r3, [sp, #28]
 80098d4:	930c      	str	r3, [sp, #48]	; 0x30
 80098d6:	2400      	movs	r4, #0
 80098d8:	0031      	movs	r1, r6
 80098da:	9805      	ldr	r0, [sp, #20]
 80098dc:	f7ff f9a8 	bl	8008c30 <quorem>
 80098e0:	9b06      	ldr	r3, [sp, #24]
 80098e2:	3030      	adds	r0, #48	; 0x30
 80098e4:	5518      	strb	r0, [r3, r4]
 80098e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098e8:	3401      	adds	r4, #1
 80098ea:	9007      	str	r0, [sp, #28]
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	dd07      	ble.n	8009900 <_dtoa_r+0xbb8>
 80098f0:	2300      	movs	r3, #0
 80098f2:	220a      	movs	r2, #10
 80098f4:	0038      	movs	r0, r7
 80098f6:	9905      	ldr	r1, [sp, #20]
 80098f8:	f000 f8c8 	bl	8009a8c <__multadd>
 80098fc:	9005      	str	r0, [sp, #20]
 80098fe:	e7eb      	b.n	80098d8 <_dtoa_r+0xb90>
 8009900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009902:	2001      	movs	r0, #1
 8009904:	2b00      	cmp	r3, #0
 8009906:	dd00      	ble.n	800990a <_dtoa_r+0xbc2>
 8009908:	0018      	movs	r0, r3
 800990a:	2400      	movs	r4, #0
 800990c:	9b06      	ldr	r3, [sp, #24]
 800990e:	181b      	adds	r3, r3, r0
 8009910:	9308      	str	r3, [sp, #32]
 8009912:	9905      	ldr	r1, [sp, #20]
 8009914:	2201      	movs	r2, #1
 8009916:	0038      	movs	r0, r7
 8009918:	f000 fa66 	bl	8009de8 <__lshift>
 800991c:	0031      	movs	r1, r6
 800991e:	9005      	str	r0, [sp, #20]
 8009920:	f000 fad0 	bl	8009ec4 <__mcmp>
 8009924:	2800      	cmp	r0, #0
 8009926:	dc9b      	bgt.n	8009860 <_dtoa_r+0xb18>
 8009928:	d102      	bne.n	8009930 <_dtoa_r+0xbe8>
 800992a:	9b07      	ldr	r3, [sp, #28]
 800992c:	07db      	lsls	r3, r3, #31
 800992e:	d497      	bmi.n	8009860 <_dtoa_r+0xb18>
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	9308      	str	r3, [sp, #32]
 8009934:	3b01      	subs	r3, #1
 8009936:	781a      	ldrb	r2, [r3, #0]
 8009938:	2a30      	cmp	r2, #48	; 0x30
 800993a:	d0fa      	beq.n	8009932 <_dtoa_r+0xbea>
 800993c:	e6db      	b.n	80096f6 <_dtoa_r+0x9ae>
 800993e:	9a06      	ldr	r2, [sp, #24]
 8009940:	429a      	cmp	r2, r3
 8009942:	d18e      	bne.n	8009862 <_dtoa_r+0xb1a>
 8009944:	9b02      	ldr	r3, [sp, #8]
 8009946:	3301      	adds	r3, #1
 8009948:	9302      	str	r3, [sp, #8]
 800994a:	2331      	movs	r3, #49	; 0x31
 800994c:	e799      	b.n	8009882 <_dtoa_r+0xb3a>
 800994e:	4b09      	ldr	r3, [pc, #36]	; (8009974 <_dtoa_r+0xc2c>)
 8009950:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009952:	9306      	str	r3, [sp, #24]
 8009954:	4b08      	ldr	r3, [pc, #32]	; (8009978 <_dtoa_r+0xc30>)
 8009956:	2a00      	cmp	r2, #0
 8009958:	d001      	beq.n	800995e <_dtoa_r+0xc16>
 800995a:	f7ff fa3f 	bl	8008ddc <_dtoa_r+0x94>
 800995e:	f7ff fa3f 	bl	8008de0 <_dtoa_r+0x98>
 8009962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009964:	2b00      	cmp	r3, #0
 8009966:	dcb6      	bgt.n	80098d6 <_dtoa_r+0xb8e>
 8009968:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800996a:	2b02      	cmp	r3, #2
 800996c:	dd00      	ble.n	8009970 <_dtoa_r+0xc28>
 800996e:	e6ac      	b.n	80096ca <_dtoa_r+0x982>
 8009970:	e7b1      	b.n	80098d6 <_dtoa_r+0xb8e>
 8009972:	46c0      	nop			; (mov r8, r8)
 8009974:	0800b250 	.word	0x0800b250
 8009978:	0800b258 	.word	0x0800b258

0800997c <_localeconv_r>:
 800997c:	4800      	ldr	r0, [pc, #0]	; (8009980 <_localeconv_r+0x4>)
 800997e:	4770      	bx	lr
 8009980:	20000160 	.word	0x20000160

08009984 <memchr>:
 8009984:	b2c9      	uxtb	r1, r1
 8009986:	1882      	adds	r2, r0, r2
 8009988:	4290      	cmp	r0, r2
 800998a:	d101      	bne.n	8009990 <memchr+0xc>
 800998c:	2000      	movs	r0, #0
 800998e:	4770      	bx	lr
 8009990:	7803      	ldrb	r3, [r0, #0]
 8009992:	428b      	cmp	r3, r1
 8009994:	d0fb      	beq.n	800998e <memchr+0xa>
 8009996:	3001      	adds	r0, #1
 8009998:	e7f6      	b.n	8009988 <memchr+0x4>
	...

0800999c <__malloc_lock>:
 800999c:	b510      	push	{r4, lr}
 800999e:	4802      	ldr	r0, [pc, #8]	; (80099a8 <__malloc_lock+0xc>)
 80099a0:	f000 fd65 	bl	800a46e <__retarget_lock_acquire_recursive>
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	46c0      	nop			; (mov r8, r8)
 80099a8:	20000354 	.word	0x20000354

080099ac <__malloc_unlock>:
 80099ac:	b510      	push	{r4, lr}
 80099ae:	4802      	ldr	r0, [pc, #8]	; (80099b8 <__malloc_unlock+0xc>)
 80099b0:	f000 fd5e 	bl	800a470 <__retarget_lock_release_recursive>
 80099b4:	bd10      	pop	{r4, pc}
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	20000354 	.word	0x20000354

080099bc <_Balloc>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099c0:	0006      	movs	r6, r0
 80099c2:	000c      	movs	r4, r1
 80099c4:	2d00      	cmp	r5, #0
 80099c6:	d10e      	bne.n	80099e6 <_Balloc+0x2a>
 80099c8:	2010      	movs	r0, #16
 80099ca:	f7fe fb93 	bl	80080f4 <malloc>
 80099ce:	1e02      	subs	r2, r0, #0
 80099d0:	6270      	str	r0, [r6, #36]	; 0x24
 80099d2:	d104      	bne.n	80099de <_Balloc+0x22>
 80099d4:	2166      	movs	r1, #102	; 0x66
 80099d6:	4b19      	ldr	r3, [pc, #100]	; (8009a3c <_Balloc+0x80>)
 80099d8:	4819      	ldr	r0, [pc, #100]	; (8009a40 <_Balloc+0x84>)
 80099da:	f000 fd19 	bl	800a410 <__assert_func>
 80099de:	6045      	str	r5, [r0, #4]
 80099e0:	6085      	str	r5, [r0, #8]
 80099e2:	6005      	str	r5, [r0, #0]
 80099e4:	60c5      	str	r5, [r0, #12]
 80099e6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80099e8:	68eb      	ldr	r3, [r5, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d013      	beq.n	8009a16 <_Balloc+0x5a>
 80099ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80099f0:	00a2      	lsls	r2, r4, #2
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	189b      	adds	r3, r3, r2
 80099f6:	6818      	ldr	r0, [r3, #0]
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d118      	bne.n	8009a2e <_Balloc+0x72>
 80099fc:	2101      	movs	r1, #1
 80099fe:	000d      	movs	r5, r1
 8009a00:	40a5      	lsls	r5, r4
 8009a02:	1d6a      	adds	r2, r5, #5
 8009a04:	0030      	movs	r0, r6
 8009a06:	0092      	lsls	r2, r2, #2
 8009a08:	f000 fb74 	bl	800a0f4 <_calloc_r>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d00c      	beq.n	8009a2a <_Balloc+0x6e>
 8009a10:	6044      	str	r4, [r0, #4]
 8009a12:	6085      	str	r5, [r0, #8]
 8009a14:	e00d      	b.n	8009a32 <_Balloc+0x76>
 8009a16:	2221      	movs	r2, #33	; 0x21
 8009a18:	2104      	movs	r1, #4
 8009a1a:	0030      	movs	r0, r6
 8009a1c:	f000 fb6a 	bl	800a0f4 <_calloc_r>
 8009a20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a22:	60e8      	str	r0, [r5, #12]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e1      	bne.n	80099ee <_Balloc+0x32>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	6802      	ldr	r2, [r0, #0]
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	2300      	movs	r3, #0
 8009a34:	6103      	str	r3, [r0, #16]
 8009a36:	60c3      	str	r3, [r0, #12]
 8009a38:	e7f8      	b.n	8009a2c <_Balloc+0x70>
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	0800b25d 	.word	0x0800b25d
 8009a40:	0800b2e0 	.word	0x0800b2e0

08009a44 <_Bfree>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a48:	0005      	movs	r5, r0
 8009a4a:	000c      	movs	r4, r1
 8009a4c:	2e00      	cmp	r6, #0
 8009a4e:	d10e      	bne.n	8009a6e <_Bfree+0x2a>
 8009a50:	2010      	movs	r0, #16
 8009a52:	f7fe fb4f 	bl	80080f4 <malloc>
 8009a56:	1e02      	subs	r2, r0, #0
 8009a58:	6268      	str	r0, [r5, #36]	; 0x24
 8009a5a:	d104      	bne.n	8009a66 <_Bfree+0x22>
 8009a5c:	218a      	movs	r1, #138	; 0x8a
 8009a5e:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <_Bfree+0x40>)
 8009a60:	4809      	ldr	r0, [pc, #36]	; (8009a88 <_Bfree+0x44>)
 8009a62:	f000 fcd5 	bl	800a410 <__assert_func>
 8009a66:	6046      	str	r6, [r0, #4]
 8009a68:	6086      	str	r6, [r0, #8]
 8009a6a:	6006      	str	r6, [r0, #0]
 8009a6c:	60c6      	str	r6, [r0, #12]
 8009a6e:	2c00      	cmp	r4, #0
 8009a70:	d007      	beq.n	8009a82 <_Bfree+0x3e>
 8009a72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a74:	6862      	ldr	r2, [r4, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	0092      	lsls	r2, r2, #2
 8009a7a:	189b      	adds	r3, r3, r2
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	6022      	str	r2, [r4, #0]
 8009a80:	601c      	str	r4, [r3, #0]
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	0800b25d 	.word	0x0800b25d
 8009a88:	0800b2e0 	.word	0x0800b2e0

08009a8c <__multadd>:
 8009a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a8e:	000e      	movs	r6, r1
 8009a90:	9001      	str	r0, [sp, #4]
 8009a92:	000c      	movs	r4, r1
 8009a94:	001d      	movs	r5, r3
 8009a96:	2000      	movs	r0, #0
 8009a98:	690f      	ldr	r7, [r1, #16]
 8009a9a:	3614      	adds	r6, #20
 8009a9c:	6833      	ldr	r3, [r6, #0]
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	b299      	uxth	r1, r3
 8009aa2:	4351      	muls	r1, r2
 8009aa4:	0c1b      	lsrs	r3, r3, #16
 8009aa6:	4353      	muls	r3, r2
 8009aa8:	1949      	adds	r1, r1, r5
 8009aaa:	0c0d      	lsrs	r5, r1, #16
 8009aac:	195b      	adds	r3, r3, r5
 8009aae:	0c1d      	lsrs	r5, r3, #16
 8009ab0:	b289      	uxth	r1, r1
 8009ab2:	041b      	lsls	r3, r3, #16
 8009ab4:	185b      	adds	r3, r3, r1
 8009ab6:	c608      	stmia	r6!, {r3}
 8009ab8:	4287      	cmp	r7, r0
 8009aba:	dcef      	bgt.n	8009a9c <__multadd+0x10>
 8009abc:	2d00      	cmp	r5, #0
 8009abe:	d022      	beq.n	8009b06 <__multadd+0x7a>
 8009ac0:	68a3      	ldr	r3, [r4, #8]
 8009ac2:	42bb      	cmp	r3, r7
 8009ac4:	dc19      	bgt.n	8009afa <__multadd+0x6e>
 8009ac6:	6863      	ldr	r3, [r4, #4]
 8009ac8:	9801      	ldr	r0, [sp, #4]
 8009aca:	1c59      	adds	r1, r3, #1
 8009acc:	f7ff ff76 	bl	80099bc <_Balloc>
 8009ad0:	1e06      	subs	r6, r0, #0
 8009ad2:	d105      	bne.n	8009ae0 <__multadd+0x54>
 8009ad4:	0002      	movs	r2, r0
 8009ad6:	21b5      	movs	r1, #181	; 0xb5
 8009ad8:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <__multadd+0x80>)
 8009ada:	480d      	ldr	r0, [pc, #52]	; (8009b10 <__multadd+0x84>)
 8009adc:	f000 fc98 	bl	800a410 <__assert_func>
 8009ae0:	0021      	movs	r1, r4
 8009ae2:	6923      	ldr	r3, [r4, #16]
 8009ae4:	310c      	adds	r1, #12
 8009ae6:	1c9a      	adds	r2, r3, #2
 8009ae8:	0092      	lsls	r2, r2, #2
 8009aea:	300c      	adds	r0, #12
 8009aec:	f7fe fb0c 	bl	8008108 <memcpy>
 8009af0:	0021      	movs	r1, r4
 8009af2:	9801      	ldr	r0, [sp, #4]
 8009af4:	f7ff ffa6 	bl	8009a44 <_Bfree>
 8009af8:	0034      	movs	r4, r6
 8009afa:	1d3b      	adds	r3, r7, #4
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	18e3      	adds	r3, r4, r3
 8009b00:	605d      	str	r5, [r3, #4]
 8009b02:	1c7b      	adds	r3, r7, #1
 8009b04:	6123      	str	r3, [r4, #16]
 8009b06:	0020      	movs	r0, r4
 8009b08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	0800b2cf 	.word	0x0800b2cf
 8009b10:	0800b2e0 	.word	0x0800b2e0

08009b14 <__hi0bits>:
 8009b14:	0003      	movs	r3, r0
 8009b16:	0c02      	lsrs	r2, r0, #16
 8009b18:	2000      	movs	r0, #0
 8009b1a:	4282      	cmp	r2, r0
 8009b1c:	d101      	bne.n	8009b22 <__hi0bits+0xe>
 8009b1e:	041b      	lsls	r3, r3, #16
 8009b20:	3010      	adds	r0, #16
 8009b22:	0e1a      	lsrs	r2, r3, #24
 8009b24:	d101      	bne.n	8009b2a <__hi0bits+0x16>
 8009b26:	3008      	adds	r0, #8
 8009b28:	021b      	lsls	r3, r3, #8
 8009b2a:	0f1a      	lsrs	r2, r3, #28
 8009b2c:	d101      	bne.n	8009b32 <__hi0bits+0x1e>
 8009b2e:	3004      	adds	r0, #4
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	0f9a      	lsrs	r2, r3, #30
 8009b34:	d101      	bne.n	8009b3a <__hi0bits+0x26>
 8009b36:	3002      	adds	r0, #2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	db03      	blt.n	8009b46 <__hi0bits+0x32>
 8009b3e:	3001      	adds	r0, #1
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	d400      	bmi.n	8009b46 <__hi0bits+0x32>
 8009b44:	2020      	movs	r0, #32
 8009b46:	4770      	bx	lr

08009b48 <__lo0bits>:
 8009b48:	6803      	ldr	r3, [r0, #0]
 8009b4a:	0002      	movs	r2, r0
 8009b4c:	2107      	movs	r1, #7
 8009b4e:	0018      	movs	r0, r3
 8009b50:	4008      	ands	r0, r1
 8009b52:	420b      	tst	r3, r1
 8009b54:	d00d      	beq.n	8009b72 <__lo0bits+0x2a>
 8009b56:	3906      	subs	r1, #6
 8009b58:	2000      	movs	r0, #0
 8009b5a:	420b      	tst	r3, r1
 8009b5c:	d105      	bne.n	8009b6a <__lo0bits+0x22>
 8009b5e:	3002      	adds	r0, #2
 8009b60:	4203      	tst	r3, r0
 8009b62:	d003      	beq.n	8009b6c <__lo0bits+0x24>
 8009b64:	40cb      	lsrs	r3, r1
 8009b66:	0008      	movs	r0, r1
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	4770      	bx	lr
 8009b6c:	089b      	lsrs	r3, r3, #2
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	e7fb      	b.n	8009b6a <__lo0bits+0x22>
 8009b72:	b299      	uxth	r1, r3
 8009b74:	2900      	cmp	r1, #0
 8009b76:	d101      	bne.n	8009b7c <__lo0bits+0x34>
 8009b78:	2010      	movs	r0, #16
 8009b7a:	0c1b      	lsrs	r3, r3, #16
 8009b7c:	b2d9      	uxtb	r1, r3
 8009b7e:	2900      	cmp	r1, #0
 8009b80:	d101      	bne.n	8009b86 <__lo0bits+0x3e>
 8009b82:	3008      	adds	r0, #8
 8009b84:	0a1b      	lsrs	r3, r3, #8
 8009b86:	0719      	lsls	r1, r3, #28
 8009b88:	d101      	bne.n	8009b8e <__lo0bits+0x46>
 8009b8a:	3004      	adds	r0, #4
 8009b8c:	091b      	lsrs	r3, r3, #4
 8009b8e:	0799      	lsls	r1, r3, #30
 8009b90:	d101      	bne.n	8009b96 <__lo0bits+0x4e>
 8009b92:	3002      	adds	r0, #2
 8009b94:	089b      	lsrs	r3, r3, #2
 8009b96:	07d9      	lsls	r1, r3, #31
 8009b98:	d4e9      	bmi.n	8009b6e <__lo0bits+0x26>
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	085b      	lsrs	r3, r3, #1
 8009b9e:	d1e6      	bne.n	8009b6e <__lo0bits+0x26>
 8009ba0:	2020      	movs	r0, #32
 8009ba2:	e7e2      	b.n	8009b6a <__lo0bits+0x22>

08009ba4 <__i2b>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	000c      	movs	r4, r1
 8009ba8:	2101      	movs	r1, #1
 8009baa:	f7ff ff07 	bl	80099bc <_Balloc>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d106      	bne.n	8009bc0 <__i2b+0x1c>
 8009bb2:	21a0      	movs	r1, #160	; 0xa0
 8009bb4:	0002      	movs	r2, r0
 8009bb6:	4b04      	ldr	r3, [pc, #16]	; (8009bc8 <__i2b+0x24>)
 8009bb8:	4804      	ldr	r0, [pc, #16]	; (8009bcc <__i2b+0x28>)
 8009bba:	0049      	lsls	r1, r1, #1
 8009bbc:	f000 fc28 	bl	800a410 <__assert_func>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	6144      	str	r4, [r0, #20]
 8009bc4:	6103      	str	r3, [r0, #16]
 8009bc6:	bd10      	pop	{r4, pc}
 8009bc8:	0800b2cf 	.word	0x0800b2cf
 8009bcc:	0800b2e0 	.word	0x0800b2e0

08009bd0 <__multiply>:
 8009bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd2:	690b      	ldr	r3, [r1, #16]
 8009bd4:	0014      	movs	r4, r2
 8009bd6:	6912      	ldr	r2, [r2, #16]
 8009bd8:	000d      	movs	r5, r1
 8009bda:	b089      	sub	sp, #36	; 0x24
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	da01      	bge.n	8009be4 <__multiply+0x14>
 8009be0:	0025      	movs	r5, r4
 8009be2:	000c      	movs	r4, r1
 8009be4:	692f      	ldr	r7, [r5, #16]
 8009be6:	6926      	ldr	r6, [r4, #16]
 8009be8:	6869      	ldr	r1, [r5, #4]
 8009bea:	19bb      	adds	r3, r7, r6
 8009bec:	9302      	str	r3, [sp, #8]
 8009bee:	68ab      	ldr	r3, [r5, #8]
 8009bf0:	19ba      	adds	r2, r7, r6
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	da00      	bge.n	8009bf8 <__multiply+0x28>
 8009bf6:	3101      	adds	r1, #1
 8009bf8:	f7ff fee0 	bl	80099bc <_Balloc>
 8009bfc:	9001      	str	r0, [sp, #4]
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d106      	bne.n	8009c10 <__multiply+0x40>
 8009c02:	215e      	movs	r1, #94	; 0x5e
 8009c04:	0002      	movs	r2, r0
 8009c06:	4b48      	ldr	r3, [pc, #288]	; (8009d28 <__multiply+0x158>)
 8009c08:	4848      	ldr	r0, [pc, #288]	; (8009d2c <__multiply+0x15c>)
 8009c0a:	31ff      	adds	r1, #255	; 0xff
 8009c0c:	f000 fc00 	bl	800a410 <__assert_func>
 8009c10:	9b01      	ldr	r3, [sp, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	3314      	adds	r3, #20
 8009c16:	469c      	mov	ip, r3
 8009c18:	19bb      	adds	r3, r7, r6
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4463      	add	r3, ip
 8009c1e:	9303      	str	r3, [sp, #12]
 8009c20:	4663      	mov	r3, ip
 8009c22:	9903      	ldr	r1, [sp, #12]
 8009c24:	428b      	cmp	r3, r1
 8009c26:	d32c      	bcc.n	8009c82 <__multiply+0xb2>
 8009c28:	002b      	movs	r3, r5
 8009c2a:	0022      	movs	r2, r4
 8009c2c:	3314      	adds	r3, #20
 8009c2e:	00bf      	lsls	r7, r7, #2
 8009c30:	3214      	adds	r2, #20
 8009c32:	9306      	str	r3, [sp, #24]
 8009c34:	00b6      	lsls	r6, r6, #2
 8009c36:	19db      	adds	r3, r3, r7
 8009c38:	9304      	str	r3, [sp, #16]
 8009c3a:	1993      	adds	r3, r2, r6
 8009c3c:	9307      	str	r3, [sp, #28]
 8009c3e:	2304      	movs	r3, #4
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	002b      	movs	r3, r5
 8009c44:	9904      	ldr	r1, [sp, #16]
 8009c46:	3315      	adds	r3, #21
 8009c48:	9200      	str	r2, [sp, #0]
 8009c4a:	4299      	cmp	r1, r3
 8009c4c:	d305      	bcc.n	8009c5a <__multiply+0x8a>
 8009c4e:	1b4b      	subs	r3, r1, r5
 8009c50:	3b15      	subs	r3, #21
 8009c52:	089b      	lsrs	r3, r3, #2
 8009c54:	3301      	adds	r3, #1
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	9305      	str	r3, [sp, #20]
 8009c5a:	9b07      	ldr	r3, [sp, #28]
 8009c5c:	9a00      	ldr	r2, [sp, #0]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d311      	bcc.n	8009c86 <__multiply+0xb6>
 8009c62:	9b02      	ldr	r3, [sp, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dd06      	ble.n	8009c76 <__multiply+0xa6>
 8009c68:	9b03      	ldr	r3, [sp, #12]
 8009c6a:	3b04      	subs	r3, #4
 8009c6c:	9303      	str	r3, [sp, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d053      	beq.n	8009d1e <__multiply+0x14e>
 8009c76:	9b01      	ldr	r3, [sp, #4]
 8009c78:	9a02      	ldr	r2, [sp, #8]
 8009c7a:	0018      	movs	r0, r3
 8009c7c:	611a      	str	r2, [r3, #16]
 8009c7e:	b009      	add	sp, #36	; 0x24
 8009c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c82:	c304      	stmia	r3!, {r2}
 8009c84:	e7cd      	b.n	8009c22 <__multiply+0x52>
 8009c86:	9b00      	ldr	r3, [sp, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	b298      	uxth	r0, r3
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d01b      	beq.n	8009cc8 <__multiply+0xf8>
 8009c90:	4667      	mov	r7, ip
 8009c92:	2400      	movs	r4, #0
 8009c94:	9e06      	ldr	r6, [sp, #24]
 8009c96:	ce02      	ldmia	r6!, {r1}
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	b28b      	uxth	r3, r1
 8009c9c:	4343      	muls	r3, r0
 8009c9e:	b292      	uxth	r2, r2
 8009ca0:	189b      	adds	r3, r3, r2
 8009ca2:	191b      	adds	r3, r3, r4
 8009ca4:	0c0c      	lsrs	r4, r1, #16
 8009ca6:	4344      	muls	r4, r0
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	0c11      	lsrs	r1, r2, #16
 8009cac:	1861      	adds	r1, r4, r1
 8009cae:	0c1c      	lsrs	r4, r3, #16
 8009cb0:	1909      	adds	r1, r1, r4
 8009cb2:	0c0c      	lsrs	r4, r1, #16
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	0409      	lsls	r1, r1, #16
 8009cb8:	430b      	orrs	r3, r1
 8009cba:	c708      	stmia	r7!, {r3}
 8009cbc:	9b04      	ldr	r3, [sp, #16]
 8009cbe:	42b3      	cmp	r3, r6
 8009cc0:	d8e9      	bhi.n	8009c96 <__multiply+0xc6>
 8009cc2:	4663      	mov	r3, ip
 8009cc4:	9a05      	ldr	r2, [sp, #20]
 8009cc6:	509c      	str	r4, [r3, r2]
 8009cc8:	9b00      	ldr	r3, [sp, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	0c1e      	lsrs	r6, r3, #16
 8009cce:	d020      	beq.n	8009d12 <__multiply+0x142>
 8009cd0:	4663      	mov	r3, ip
 8009cd2:	002c      	movs	r4, r5
 8009cd4:	4660      	mov	r0, ip
 8009cd6:	2700      	movs	r7, #0
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3414      	adds	r4, #20
 8009cdc:	6822      	ldr	r2, [r4, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	b291      	uxth	r1, r2
 8009ce2:	4371      	muls	r1, r6
 8009ce4:	6802      	ldr	r2, [r0, #0]
 8009ce6:	0c12      	lsrs	r2, r2, #16
 8009ce8:	1889      	adds	r1, r1, r2
 8009cea:	19cf      	adds	r7, r1, r7
 8009cec:	0439      	lsls	r1, r7, #16
 8009cee:	430b      	orrs	r3, r1
 8009cf0:	6003      	str	r3, [r0, #0]
 8009cf2:	cc02      	ldmia	r4!, {r1}
 8009cf4:	6843      	ldr	r3, [r0, #4]
 8009cf6:	0c09      	lsrs	r1, r1, #16
 8009cf8:	4371      	muls	r1, r6
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	0c3f      	lsrs	r7, r7, #16
 8009cfe:	18cb      	adds	r3, r1, r3
 8009d00:	9a04      	ldr	r2, [sp, #16]
 8009d02:	19db      	adds	r3, r3, r7
 8009d04:	0c1f      	lsrs	r7, r3, #16
 8009d06:	3004      	adds	r0, #4
 8009d08:	42a2      	cmp	r2, r4
 8009d0a:	d8e7      	bhi.n	8009cdc <__multiply+0x10c>
 8009d0c:	4662      	mov	r2, ip
 8009d0e:	9905      	ldr	r1, [sp, #20]
 8009d10:	5053      	str	r3, [r2, r1]
 8009d12:	9b00      	ldr	r3, [sp, #0]
 8009d14:	3304      	adds	r3, #4
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	2304      	movs	r3, #4
 8009d1a:	449c      	add	ip, r3
 8009d1c:	e79d      	b.n	8009c5a <__multiply+0x8a>
 8009d1e:	9b02      	ldr	r3, [sp, #8]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	9302      	str	r3, [sp, #8]
 8009d24:	e79d      	b.n	8009c62 <__multiply+0x92>
 8009d26:	46c0      	nop			; (mov r8, r8)
 8009d28:	0800b2cf 	.word	0x0800b2cf
 8009d2c:	0800b2e0 	.word	0x0800b2e0

08009d30 <__pow5mult>:
 8009d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d32:	2303      	movs	r3, #3
 8009d34:	0015      	movs	r5, r2
 8009d36:	0007      	movs	r7, r0
 8009d38:	000e      	movs	r6, r1
 8009d3a:	401a      	ands	r2, r3
 8009d3c:	421d      	tst	r5, r3
 8009d3e:	d008      	beq.n	8009d52 <__pow5mult+0x22>
 8009d40:	4925      	ldr	r1, [pc, #148]	; (8009dd8 <__pow5mult+0xa8>)
 8009d42:	3a01      	subs	r2, #1
 8009d44:	0092      	lsls	r2, r2, #2
 8009d46:	5852      	ldr	r2, [r2, r1]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	0031      	movs	r1, r6
 8009d4c:	f7ff fe9e 	bl	8009a8c <__multadd>
 8009d50:	0006      	movs	r6, r0
 8009d52:	10ad      	asrs	r5, r5, #2
 8009d54:	d03d      	beq.n	8009dd2 <__pow5mult+0xa2>
 8009d56:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009d58:	2c00      	cmp	r4, #0
 8009d5a:	d10f      	bne.n	8009d7c <__pow5mult+0x4c>
 8009d5c:	2010      	movs	r0, #16
 8009d5e:	f7fe f9c9 	bl	80080f4 <malloc>
 8009d62:	1e02      	subs	r2, r0, #0
 8009d64:	6278      	str	r0, [r7, #36]	; 0x24
 8009d66:	d105      	bne.n	8009d74 <__pow5mult+0x44>
 8009d68:	21d7      	movs	r1, #215	; 0xd7
 8009d6a:	4b1c      	ldr	r3, [pc, #112]	; (8009ddc <__pow5mult+0xac>)
 8009d6c:	481c      	ldr	r0, [pc, #112]	; (8009de0 <__pow5mult+0xb0>)
 8009d6e:	0049      	lsls	r1, r1, #1
 8009d70:	f000 fb4e 	bl	800a410 <__assert_func>
 8009d74:	6044      	str	r4, [r0, #4]
 8009d76:	6084      	str	r4, [r0, #8]
 8009d78:	6004      	str	r4, [r0, #0]
 8009d7a:	60c4      	str	r4, [r0, #12]
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	689c      	ldr	r4, [r3, #8]
 8009d80:	9301      	str	r3, [sp, #4]
 8009d82:	2c00      	cmp	r4, #0
 8009d84:	d108      	bne.n	8009d98 <__pow5mult+0x68>
 8009d86:	0038      	movs	r0, r7
 8009d88:	4916      	ldr	r1, [pc, #88]	; (8009de4 <__pow5mult+0xb4>)
 8009d8a:	f7ff ff0b 	bl	8009ba4 <__i2b>
 8009d8e:	9b01      	ldr	r3, [sp, #4]
 8009d90:	0004      	movs	r4, r0
 8009d92:	6098      	str	r0, [r3, #8]
 8009d94:	2300      	movs	r3, #0
 8009d96:	6003      	str	r3, [r0, #0]
 8009d98:	2301      	movs	r3, #1
 8009d9a:	421d      	tst	r5, r3
 8009d9c:	d00a      	beq.n	8009db4 <__pow5mult+0x84>
 8009d9e:	0031      	movs	r1, r6
 8009da0:	0022      	movs	r2, r4
 8009da2:	0038      	movs	r0, r7
 8009da4:	f7ff ff14 	bl	8009bd0 <__multiply>
 8009da8:	0031      	movs	r1, r6
 8009daa:	9001      	str	r0, [sp, #4]
 8009dac:	0038      	movs	r0, r7
 8009dae:	f7ff fe49 	bl	8009a44 <_Bfree>
 8009db2:	9e01      	ldr	r6, [sp, #4]
 8009db4:	106d      	asrs	r5, r5, #1
 8009db6:	d00c      	beq.n	8009dd2 <__pow5mult+0xa2>
 8009db8:	6820      	ldr	r0, [r4, #0]
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d107      	bne.n	8009dce <__pow5mult+0x9e>
 8009dbe:	0022      	movs	r2, r4
 8009dc0:	0021      	movs	r1, r4
 8009dc2:	0038      	movs	r0, r7
 8009dc4:	f7ff ff04 	bl	8009bd0 <__multiply>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	6020      	str	r0, [r4, #0]
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	0004      	movs	r4, r0
 8009dd0:	e7e2      	b.n	8009d98 <__pow5mult+0x68>
 8009dd2:	0030      	movs	r0, r6
 8009dd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009dd6:	46c0      	nop			; (mov r8, r8)
 8009dd8:	0800b430 	.word	0x0800b430
 8009ddc:	0800b25d 	.word	0x0800b25d
 8009de0:	0800b2e0 	.word	0x0800b2e0
 8009de4:	00000271 	.word	0x00000271

08009de8 <__lshift>:
 8009de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dea:	000c      	movs	r4, r1
 8009dec:	0017      	movs	r7, r2
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	1155      	asrs	r5, r2, #5
 8009df2:	b087      	sub	sp, #28
 8009df4:	18eb      	adds	r3, r5, r3
 8009df6:	9302      	str	r3, [sp, #8]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	6849      	ldr	r1, [r1, #4]
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	9004      	str	r0, [sp, #16]
 8009e02:	9a01      	ldr	r2, [sp, #4]
 8009e04:	4293      	cmp	r3, r2
 8009e06:	db10      	blt.n	8009e2a <__lshift+0x42>
 8009e08:	9804      	ldr	r0, [sp, #16]
 8009e0a:	f7ff fdd7 	bl	80099bc <_Balloc>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	0002      	movs	r2, r0
 8009e12:	0006      	movs	r6, r0
 8009e14:	0019      	movs	r1, r3
 8009e16:	3214      	adds	r2, #20
 8009e18:	4298      	cmp	r0, r3
 8009e1a:	d10c      	bne.n	8009e36 <__lshift+0x4e>
 8009e1c:	21da      	movs	r1, #218	; 0xda
 8009e1e:	0002      	movs	r2, r0
 8009e20:	4b26      	ldr	r3, [pc, #152]	; (8009ebc <__lshift+0xd4>)
 8009e22:	4827      	ldr	r0, [pc, #156]	; (8009ec0 <__lshift+0xd8>)
 8009e24:	31ff      	adds	r1, #255	; 0xff
 8009e26:	f000 faf3 	bl	800a410 <__assert_func>
 8009e2a:	3101      	adds	r1, #1
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	e7e8      	b.n	8009e02 <__lshift+0x1a>
 8009e30:	0098      	lsls	r0, r3, #2
 8009e32:	5011      	str	r1, [r2, r0]
 8009e34:	3301      	adds	r3, #1
 8009e36:	42ab      	cmp	r3, r5
 8009e38:	dbfa      	blt.n	8009e30 <__lshift+0x48>
 8009e3a:	43eb      	mvns	r3, r5
 8009e3c:	17db      	asrs	r3, r3, #31
 8009e3e:	401d      	ands	r5, r3
 8009e40:	211f      	movs	r1, #31
 8009e42:	0023      	movs	r3, r4
 8009e44:	0038      	movs	r0, r7
 8009e46:	00ad      	lsls	r5, r5, #2
 8009e48:	1955      	adds	r5, r2, r5
 8009e4a:	6922      	ldr	r2, [r4, #16]
 8009e4c:	3314      	adds	r3, #20
 8009e4e:	0092      	lsls	r2, r2, #2
 8009e50:	4008      	ands	r0, r1
 8009e52:	4684      	mov	ip, r0
 8009e54:	189a      	adds	r2, r3, r2
 8009e56:	420f      	tst	r7, r1
 8009e58:	d02a      	beq.n	8009eb0 <__lshift+0xc8>
 8009e5a:	3101      	adds	r1, #1
 8009e5c:	1a09      	subs	r1, r1, r0
 8009e5e:	9105      	str	r1, [sp, #20]
 8009e60:	2100      	movs	r1, #0
 8009e62:	9503      	str	r5, [sp, #12]
 8009e64:	4667      	mov	r7, ip
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	40b8      	lsls	r0, r7
 8009e6a:	4301      	orrs	r1, r0
 8009e6c:	9803      	ldr	r0, [sp, #12]
 8009e6e:	c002      	stmia	r0!, {r1}
 8009e70:	cb02      	ldmia	r3!, {r1}
 8009e72:	9003      	str	r0, [sp, #12]
 8009e74:	9805      	ldr	r0, [sp, #20]
 8009e76:	40c1      	lsrs	r1, r0
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d8f3      	bhi.n	8009e64 <__lshift+0x7c>
 8009e7c:	0020      	movs	r0, r4
 8009e7e:	3015      	adds	r0, #21
 8009e80:	2304      	movs	r3, #4
 8009e82:	4282      	cmp	r2, r0
 8009e84:	d304      	bcc.n	8009e90 <__lshift+0xa8>
 8009e86:	1b13      	subs	r3, r2, r4
 8009e88:	3b15      	subs	r3, #21
 8009e8a:	089b      	lsrs	r3, r3, #2
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	50e9      	str	r1, [r5, r3]
 8009e92:	2900      	cmp	r1, #0
 8009e94:	d002      	beq.n	8009e9c <__lshift+0xb4>
 8009e96:	9b02      	ldr	r3, [sp, #8]
 8009e98:	3302      	adds	r3, #2
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	9b01      	ldr	r3, [sp, #4]
 8009e9e:	9804      	ldr	r0, [sp, #16]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	0021      	movs	r1, r4
 8009ea4:	6133      	str	r3, [r6, #16]
 8009ea6:	f7ff fdcd 	bl	8009a44 <_Bfree>
 8009eaa:	0030      	movs	r0, r6
 8009eac:	b007      	add	sp, #28
 8009eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb0:	cb02      	ldmia	r3!, {r1}
 8009eb2:	c502      	stmia	r5!, {r1}
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d8fb      	bhi.n	8009eb0 <__lshift+0xc8>
 8009eb8:	e7f0      	b.n	8009e9c <__lshift+0xb4>
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	0800b2cf 	.word	0x0800b2cf
 8009ec0:	0800b2e0 	.word	0x0800b2e0

08009ec4 <__mcmp>:
 8009ec4:	6902      	ldr	r2, [r0, #16]
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	b530      	push	{r4, r5, lr}
 8009eca:	0004      	movs	r4, r0
 8009ecc:	1ad0      	subs	r0, r2, r3
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d10d      	bne.n	8009eee <__mcmp+0x2a>
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	3414      	adds	r4, #20
 8009ed6:	3114      	adds	r1, #20
 8009ed8:	18e2      	adds	r2, r4, r3
 8009eda:	18c9      	adds	r1, r1, r3
 8009edc:	3a04      	subs	r2, #4
 8009ede:	3904      	subs	r1, #4
 8009ee0:	6815      	ldr	r5, [r2, #0]
 8009ee2:	680b      	ldr	r3, [r1, #0]
 8009ee4:	429d      	cmp	r5, r3
 8009ee6:	d003      	beq.n	8009ef0 <__mcmp+0x2c>
 8009ee8:	2001      	movs	r0, #1
 8009eea:	429d      	cmp	r5, r3
 8009eec:	d303      	bcc.n	8009ef6 <__mcmp+0x32>
 8009eee:	bd30      	pop	{r4, r5, pc}
 8009ef0:	4294      	cmp	r4, r2
 8009ef2:	d3f3      	bcc.n	8009edc <__mcmp+0x18>
 8009ef4:	e7fb      	b.n	8009eee <__mcmp+0x2a>
 8009ef6:	4240      	negs	r0, r0
 8009ef8:	e7f9      	b.n	8009eee <__mcmp+0x2a>
	...

08009efc <__mdiff>:
 8009efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009efe:	000e      	movs	r6, r1
 8009f00:	0007      	movs	r7, r0
 8009f02:	0011      	movs	r1, r2
 8009f04:	0030      	movs	r0, r6
 8009f06:	b087      	sub	sp, #28
 8009f08:	0014      	movs	r4, r2
 8009f0a:	f7ff ffdb 	bl	8009ec4 <__mcmp>
 8009f0e:	1e05      	subs	r5, r0, #0
 8009f10:	d110      	bne.n	8009f34 <__mdiff+0x38>
 8009f12:	0001      	movs	r1, r0
 8009f14:	0038      	movs	r0, r7
 8009f16:	f7ff fd51 	bl	80099bc <_Balloc>
 8009f1a:	1e02      	subs	r2, r0, #0
 8009f1c:	d104      	bne.n	8009f28 <__mdiff+0x2c>
 8009f1e:	4b40      	ldr	r3, [pc, #256]	; (800a020 <__mdiff+0x124>)
 8009f20:	4940      	ldr	r1, [pc, #256]	; (800a024 <__mdiff+0x128>)
 8009f22:	4841      	ldr	r0, [pc, #260]	; (800a028 <__mdiff+0x12c>)
 8009f24:	f000 fa74 	bl	800a410 <__assert_func>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	6145      	str	r5, [r0, #20]
 8009f2c:	6103      	str	r3, [r0, #16]
 8009f2e:	0010      	movs	r0, r2
 8009f30:	b007      	add	sp, #28
 8009f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f34:	2301      	movs	r3, #1
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	db04      	blt.n	8009f46 <__mdiff+0x4a>
 8009f3c:	0023      	movs	r3, r4
 8009f3e:	0034      	movs	r4, r6
 8009f40:	001e      	movs	r6, r3
 8009f42:	2300      	movs	r3, #0
 8009f44:	9301      	str	r3, [sp, #4]
 8009f46:	0038      	movs	r0, r7
 8009f48:	6861      	ldr	r1, [r4, #4]
 8009f4a:	f7ff fd37 	bl	80099bc <_Balloc>
 8009f4e:	1e02      	subs	r2, r0, #0
 8009f50:	d103      	bne.n	8009f5a <__mdiff+0x5e>
 8009f52:	2190      	movs	r1, #144	; 0x90
 8009f54:	4b32      	ldr	r3, [pc, #200]	; (800a020 <__mdiff+0x124>)
 8009f56:	0089      	lsls	r1, r1, #2
 8009f58:	e7e3      	b.n	8009f22 <__mdiff+0x26>
 8009f5a:	9b01      	ldr	r3, [sp, #4]
 8009f5c:	2700      	movs	r7, #0
 8009f5e:	60c3      	str	r3, [r0, #12]
 8009f60:	6920      	ldr	r0, [r4, #16]
 8009f62:	3414      	adds	r4, #20
 8009f64:	9401      	str	r4, [sp, #4]
 8009f66:	9b01      	ldr	r3, [sp, #4]
 8009f68:	0084      	lsls	r4, r0, #2
 8009f6a:	191b      	adds	r3, r3, r4
 8009f6c:	0034      	movs	r4, r6
 8009f6e:	9302      	str	r3, [sp, #8]
 8009f70:	6933      	ldr	r3, [r6, #16]
 8009f72:	3414      	adds	r4, #20
 8009f74:	0099      	lsls	r1, r3, #2
 8009f76:	1863      	adds	r3, r4, r1
 8009f78:	9303      	str	r3, [sp, #12]
 8009f7a:	0013      	movs	r3, r2
 8009f7c:	3314      	adds	r3, #20
 8009f7e:	469c      	mov	ip, r3
 8009f80:	9305      	str	r3, [sp, #20]
 8009f82:	9b01      	ldr	r3, [sp, #4]
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	9b04      	ldr	r3, [sp, #16]
 8009f88:	cc02      	ldmia	r4!, {r1}
 8009f8a:	cb20      	ldmia	r3!, {r5}
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	b2ab      	uxth	r3, r5
 8009f90:	19df      	adds	r7, r3, r7
 8009f92:	b28b      	uxth	r3, r1
 8009f94:	1afb      	subs	r3, r7, r3
 8009f96:	0c09      	lsrs	r1, r1, #16
 8009f98:	0c2d      	lsrs	r5, r5, #16
 8009f9a:	1a6d      	subs	r5, r5, r1
 8009f9c:	1419      	asrs	r1, r3, #16
 8009f9e:	186d      	adds	r5, r5, r1
 8009fa0:	4661      	mov	r1, ip
 8009fa2:	142f      	asrs	r7, r5, #16
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	042d      	lsls	r5, r5, #16
 8009fa8:	432b      	orrs	r3, r5
 8009faa:	c108      	stmia	r1!, {r3}
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	468c      	mov	ip, r1
 8009fb0:	42a3      	cmp	r3, r4
 8009fb2:	d8e8      	bhi.n	8009f86 <__mdiff+0x8a>
 8009fb4:	0031      	movs	r1, r6
 8009fb6:	9c03      	ldr	r4, [sp, #12]
 8009fb8:	3115      	adds	r1, #21
 8009fba:	2304      	movs	r3, #4
 8009fbc:	428c      	cmp	r4, r1
 8009fbe:	d304      	bcc.n	8009fca <__mdiff+0xce>
 8009fc0:	1ba3      	subs	r3, r4, r6
 8009fc2:	3b15      	subs	r3, #21
 8009fc4:	089b      	lsrs	r3, r3, #2
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	9901      	ldr	r1, [sp, #4]
 8009fcc:	18cc      	adds	r4, r1, r3
 8009fce:	9905      	ldr	r1, [sp, #20]
 8009fd0:	0026      	movs	r6, r4
 8009fd2:	18cb      	adds	r3, r1, r3
 8009fd4:	469c      	mov	ip, r3
 8009fd6:	9902      	ldr	r1, [sp, #8]
 8009fd8:	428e      	cmp	r6, r1
 8009fda:	d310      	bcc.n	8009ffe <__mdiff+0x102>
 8009fdc:	9e02      	ldr	r6, [sp, #8]
 8009fde:	1ee1      	subs	r1, r4, #3
 8009fe0:	2500      	movs	r5, #0
 8009fe2:	428e      	cmp	r6, r1
 8009fe4:	d304      	bcc.n	8009ff0 <__mdiff+0xf4>
 8009fe6:	0031      	movs	r1, r6
 8009fe8:	3103      	adds	r1, #3
 8009fea:	1b0c      	subs	r4, r1, r4
 8009fec:	08a4      	lsrs	r4, r4, #2
 8009fee:	00a5      	lsls	r5, r4, #2
 8009ff0:	195b      	adds	r3, r3, r5
 8009ff2:	3b04      	subs	r3, #4
 8009ff4:	6819      	ldr	r1, [r3, #0]
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	d00f      	beq.n	800a01a <__mdiff+0x11e>
 8009ffa:	6110      	str	r0, [r2, #16]
 8009ffc:	e797      	b.n	8009f2e <__mdiff+0x32>
 8009ffe:	ce02      	ldmia	r6!, {r1}
 800a000:	b28d      	uxth	r5, r1
 800a002:	19ed      	adds	r5, r5, r7
 800a004:	0c0f      	lsrs	r7, r1, #16
 800a006:	1429      	asrs	r1, r5, #16
 800a008:	1879      	adds	r1, r7, r1
 800a00a:	140f      	asrs	r7, r1, #16
 800a00c:	b2ad      	uxth	r5, r5
 800a00e:	0409      	lsls	r1, r1, #16
 800a010:	430d      	orrs	r5, r1
 800a012:	4661      	mov	r1, ip
 800a014:	c120      	stmia	r1!, {r5}
 800a016:	468c      	mov	ip, r1
 800a018:	e7dd      	b.n	8009fd6 <__mdiff+0xda>
 800a01a:	3801      	subs	r0, #1
 800a01c:	e7e9      	b.n	8009ff2 <__mdiff+0xf6>
 800a01e:	46c0      	nop			; (mov r8, r8)
 800a020:	0800b2cf 	.word	0x0800b2cf
 800a024:	00000232 	.word	0x00000232
 800a028:	0800b2e0 	.word	0x0800b2e0

0800a02c <__d2b>:
 800a02c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a02e:	2101      	movs	r1, #1
 800a030:	0014      	movs	r4, r2
 800a032:	001e      	movs	r6, r3
 800a034:	9f08      	ldr	r7, [sp, #32]
 800a036:	f7ff fcc1 	bl	80099bc <_Balloc>
 800a03a:	1e05      	subs	r5, r0, #0
 800a03c:	d105      	bne.n	800a04a <__d2b+0x1e>
 800a03e:	0002      	movs	r2, r0
 800a040:	4b26      	ldr	r3, [pc, #152]	; (800a0dc <__d2b+0xb0>)
 800a042:	4927      	ldr	r1, [pc, #156]	; (800a0e0 <__d2b+0xb4>)
 800a044:	4827      	ldr	r0, [pc, #156]	; (800a0e4 <__d2b+0xb8>)
 800a046:	f000 f9e3 	bl	800a410 <__assert_func>
 800a04a:	0333      	lsls	r3, r6, #12
 800a04c:	0076      	lsls	r6, r6, #1
 800a04e:	0b1b      	lsrs	r3, r3, #12
 800a050:	0d76      	lsrs	r6, r6, #21
 800a052:	d124      	bne.n	800a09e <__d2b+0x72>
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	2c00      	cmp	r4, #0
 800a058:	d027      	beq.n	800a0aa <__d2b+0x7e>
 800a05a:	4668      	mov	r0, sp
 800a05c:	9400      	str	r4, [sp, #0]
 800a05e:	f7ff fd73 	bl	8009b48 <__lo0bits>
 800a062:	9c00      	ldr	r4, [sp, #0]
 800a064:	2800      	cmp	r0, #0
 800a066:	d01e      	beq.n	800a0a6 <__d2b+0x7a>
 800a068:	9b01      	ldr	r3, [sp, #4]
 800a06a:	2120      	movs	r1, #32
 800a06c:	001a      	movs	r2, r3
 800a06e:	1a09      	subs	r1, r1, r0
 800a070:	408a      	lsls	r2, r1
 800a072:	40c3      	lsrs	r3, r0
 800a074:	4322      	orrs	r2, r4
 800a076:	616a      	str	r2, [r5, #20]
 800a078:	9301      	str	r3, [sp, #4]
 800a07a:	9c01      	ldr	r4, [sp, #4]
 800a07c:	61ac      	str	r4, [r5, #24]
 800a07e:	1e63      	subs	r3, r4, #1
 800a080:	419c      	sbcs	r4, r3
 800a082:	3401      	adds	r4, #1
 800a084:	612c      	str	r4, [r5, #16]
 800a086:	2e00      	cmp	r6, #0
 800a088:	d018      	beq.n	800a0bc <__d2b+0x90>
 800a08a:	4b17      	ldr	r3, [pc, #92]	; (800a0e8 <__d2b+0xbc>)
 800a08c:	18f6      	adds	r6, r6, r3
 800a08e:	2335      	movs	r3, #53	; 0x35
 800a090:	1836      	adds	r6, r6, r0
 800a092:	1a18      	subs	r0, r3, r0
 800a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a096:	603e      	str	r6, [r7, #0]
 800a098:	6018      	str	r0, [r3, #0]
 800a09a:	0028      	movs	r0, r5
 800a09c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a09e:	2280      	movs	r2, #128	; 0x80
 800a0a0:	0352      	lsls	r2, r2, #13
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	e7d6      	b.n	800a054 <__d2b+0x28>
 800a0a6:	616c      	str	r4, [r5, #20]
 800a0a8:	e7e7      	b.n	800a07a <__d2b+0x4e>
 800a0aa:	a801      	add	r0, sp, #4
 800a0ac:	f7ff fd4c 	bl	8009b48 <__lo0bits>
 800a0b0:	2401      	movs	r4, #1
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	612c      	str	r4, [r5, #16]
 800a0b6:	616b      	str	r3, [r5, #20]
 800a0b8:	3020      	adds	r0, #32
 800a0ba:	e7e4      	b.n	800a086 <__d2b+0x5a>
 800a0bc:	4b0b      	ldr	r3, [pc, #44]	; (800a0ec <__d2b+0xc0>)
 800a0be:	18c0      	adds	r0, r0, r3
 800a0c0:	4b0b      	ldr	r3, [pc, #44]	; (800a0f0 <__d2b+0xc4>)
 800a0c2:	6038      	str	r0, [r7, #0]
 800a0c4:	18e3      	adds	r3, r4, r3
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	18eb      	adds	r3, r5, r3
 800a0ca:	6958      	ldr	r0, [r3, #20]
 800a0cc:	f7ff fd22 	bl	8009b14 <__hi0bits>
 800a0d0:	0164      	lsls	r4, r4, #5
 800a0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d4:	1a24      	subs	r4, r4, r0
 800a0d6:	601c      	str	r4, [r3, #0]
 800a0d8:	e7df      	b.n	800a09a <__d2b+0x6e>
 800a0da:	46c0      	nop			; (mov r8, r8)
 800a0dc:	0800b2cf 	.word	0x0800b2cf
 800a0e0:	0000030a 	.word	0x0000030a
 800a0e4:	0800b2e0 	.word	0x0800b2e0
 800a0e8:	fffffbcd 	.word	0xfffffbcd
 800a0ec:	fffffbce 	.word	0xfffffbce
 800a0f0:	3fffffff 	.word	0x3fffffff

0800a0f4 <_calloc_r>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	0c13      	lsrs	r3, r2, #16
 800a0f8:	0c0d      	lsrs	r5, r1, #16
 800a0fa:	d11e      	bne.n	800a13a <_calloc_r+0x46>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10c      	bne.n	800a11a <_calloc_r+0x26>
 800a100:	b289      	uxth	r1, r1
 800a102:	b294      	uxth	r4, r2
 800a104:	434c      	muls	r4, r1
 800a106:	0021      	movs	r1, r4
 800a108:	f7fe f87c 	bl	8008204 <_malloc_r>
 800a10c:	1e05      	subs	r5, r0, #0
 800a10e:	d01b      	beq.n	800a148 <_calloc_r+0x54>
 800a110:	0022      	movs	r2, r4
 800a112:	2100      	movs	r1, #0
 800a114:	f7fe f801 	bl	800811a <memset>
 800a118:	e016      	b.n	800a148 <_calloc_r+0x54>
 800a11a:	1c1d      	adds	r5, r3, #0
 800a11c:	1c0b      	adds	r3, r1, #0
 800a11e:	b292      	uxth	r2, r2
 800a120:	b289      	uxth	r1, r1
 800a122:	b29c      	uxth	r4, r3
 800a124:	4351      	muls	r1, r2
 800a126:	b2ab      	uxth	r3, r5
 800a128:	4363      	muls	r3, r4
 800a12a:	0c0c      	lsrs	r4, r1, #16
 800a12c:	191c      	adds	r4, r3, r4
 800a12e:	0c22      	lsrs	r2, r4, #16
 800a130:	d107      	bne.n	800a142 <_calloc_r+0x4e>
 800a132:	0424      	lsls	r4, r4, #16
 800a134:	b289      	uxth	r1, r1
 800a136:	430c      	orrs	r4, r1
 800a138:	e7e5      	b.n	800a106 <_calloc_r+0x12>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d101      	bne.n	800a142 <_calloc_r+0x4e>
 800a13e:	1c13      	adds	r3, r2, #0
 800a140:	e7ed      	b.n	800a11e <_calloc_r+0x2a>
 800a142:	230c      	movs	r3, #12
 800a144:	2500      	movs	r5, #0
 800a146:	6003      	str	r3, [r0, #0]
 800a148:	0028      	movs	r0, r5
 800a14a:	bd70      	pop	{r4, r5, r6, pc}

0800a14c <__ssputs_r>:
 800a14c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a14e:	688e      	ldr	r6, [r1, #8]
 800a150:	b085      	sub	sp, #20
 800a152:	0007      	movs	r7, r0
 800a154:	000c      	movs	r4, r1
 800a156:	9203      	str	r2, [sp, #12]
 800a158:	9301      	str	r3, [sp, #4]
 800a15a:	429e      	cmp	r6, r3
 800a15c:	d83c      	bhi.n	800a1d8 <__ssputs_r+0x8c>
 800a15e:	2390      	movs	r3, #144	; 0x90
 800a160:	898a      	ldrh	r2, [r1, #12]
 800a162:	00db      	lsls	r3, r3, #3
 800a164:	421a      	tst	r2, r3
 800a166:	d034      	beq.n	800a1d2 <__ssputs_r+0x86>
 800a168:	6909      	ldr	r1, [r1, #16]
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	6960      	ldr	r0, [r4, #20]
 800a16e:	1a5b      	subs	r3, r3, r1
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	2303      	movs	r3, #3
 800a174:	4343      	muls	r3, r0
 800a176:	0fdd      	lsrs	r5, r3, #31
 800a178:	18ed      	adds	r5, r5, r3
 800a17a:	9b01      	ldr	r3, [sp, #4]
 800a17c:	9802      	ldr	r0, [sp, #8]
 800a17e:	3301      	adds	r3, #1
 800a180:	181b      	adds	r3, r3, r0
 800a182:	106d      	asrs	r5, r5, #1
 800a184:	42ab      	cmp	r3, r5
 800a186:	d900      	bls.n	800a18a <__ssputs_r+0x3e>
 800a188:	001d      	movs	r5, r3
 800a18a:	0553      	lsls	r3, r2, #21
 800a18c:	d532      	bpl.n	800a1f4 <__ssputs_r+0xa8>
 800a18e:	0029      	movs	r1, r5
 800a190:	0038      	movs	r0, r7
 800a192:	f7fe f837 	bl	8008204 <_malloc_r>
 800a196:	1e06      	subs	r6, r0, #0
 800a198:	d109      	bne.n	800a1ae <__ssputs_r+0x62>
 800a19a:	230c      	movs	r3, #12
 800a19c:	603b      	str	r3, [r7, #0]
 800a19e:	2340      	movs	r3, #64	; 0x40
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	89a2      	ldrh	r2, [r4, #12]
 800a1a4:	4240      	negs	r0, r0
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	81a3      	strh	r3, [r4, #12]
 800a1aa:	b005      	add	sp, #20
 800a1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1ae:	9a02      	ldr	r2, [sp, #8]
 800a1b0:	6921      	ldr	r1, [r4, #16]
 800a1b2:	f7fd ffa9 	bl	8008108 <memcpy>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	4a14      	ldr	r2, [pc, #80]	; (800a20c <__ssputs_r+0xc0>)
 800a1ba:	401a      	ands	r2, r3
 800a1bc:	2380      	movs	r3, #128	; 0x80
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	81a3      	strh	r3, [r4, #12]
 800a1c2:	9b02      	ldr	r3, [sp, #8]
 800a1c4:	6126      	str	r6, [r4, #16]
 800a1c6:	18f6      	adds	r6, r6, r3
 800a1c8:	6026      	str	r6, [r4, #0]
 800a1ca:	6165      	str	r5, [r4, #20]
 800a1cc:	9e01      	ldr	r6, [sp, #4]
 800a1ce:	1aed      	subs	r5, r5, r3
 800a1d0:	60a5      	str	r5, [r4, #8]
 800a1d2:	9b01      	ldr	r3, [sp, #4]
 800a1d4:	429e      	cmp	r6, r3
 800a1d6:	d900      	bls.n	800a1da <__ssputs_r+0x8e>
 800a1d8:	9e01      	ldr	r6, [sp, #4]
 800a1da:	0032      	movs	r2, r6
 800a1dc:	9903      	ldr	r1, [sp, #12]
 800a1de:	6820      	ldr	r0, [r4, #0]
 800a1e0:	f000 f959 	bl	800a496 <memmove>
 800a1e4:	68a3      	ldr	r3, [r4, #8]
 800a1e6:	2000      	movs	r0, #0
 800a1e8:	1b9b      	subs	r3, r3, r6
 800a1ea:	60a3      	str	r3, [r4, #8]
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	199e      	adds	r6, r3, r6
 800a1f0:	6026      	str	r6, [r4, #0]
 800a1f2:	e7da      	b.n	800a1aa <__ssputs_r+0x5e>
 800a1f4:	002a      	movs	r2, r5
 800a1f6:	0038      	movs	r0, r7
 800a1f8:	f000 f960 	bl	800a4bc <_realloc_r>
 800a1fc:	1e06      	subs	r6, r0, #0
 800a1fe:	d1e0      	bne.n	800a1c2 <__ssputs_r+0x76>
 800a200:	0038      	movs	r0, r7
 800a202:	6921      	ldr	r1, [r4, #16]
 800a204:	f7fd ff92 	bl	800812c <_free_r>
 800a208:	e7c7      	b.n	800a19a <__ssputs_r+0x4e>
 800a20a:	46c0      	nop			; (mov r8, r8)
 800a20c:	fffffb7f 	.word	0xfffffb7f

0800a210 <_svfiprintf_r>:
 800a210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a212:	b0a1      	sub	sp, #132	; 0x84
 800a214:	9003      	str	r0, [sp, #12]
 800a216:	001d      	movs	r5, r3
 800a218:	898b      	ldrh	r3, [r1, #12]
 800a21a:	000f      	movs	r7, r1
 800a21c:	0016      	movs	r6, r2
 800a21e:	061b      	lsls	r3, r3, #24
 800a220:	d511      	bpl.n	800a246 <_svfiprintf_r+0x36>
 800a222:	690b      	ldr	r3, [r1, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10e      	bne.n	800a246 <_svfiprintf_r+0x36>
 800a228:	2140      	movs	r1, #64	; 0x40
 800a22a:	f7fd ffeb 	bl	8008204 <_malloc_r>
 800a22e:	6038      	str	r0, [r7, #0]
 800a230:	6138      	str	r0, [r7, #16]
 800a232:	2800      	cmp	r0, #0
 800a234:	d105      	bne.n	800a242 <_svfiprintf_r+0x32>
 800a236:	230c      	movs	r3, #12
 800a238:	9a03      	ldr	r2, [sp, #12]
 800a23a:	3801      	subs	r0, #1
 800a23c:	6013      	str	r3, [r2, #0]
 800a23e:	b021      	add	sp, #132	; 0x84
 800a240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	2300      	movs	r3, #0
 800a248:	ac08      	add	r4, sp, #32
 800a24a:	6163      	str	r3, [r4, #20]
 800a24c:	3320      	adds	r3, #32
 800a24e:	7663      	strb	r3, [r4, #25]
 800a250:	3310      	adds	r3, #16
 800a252:	76a3      	strb	r3, [r4, #26]
 800a254:	9507      	str	r5, [sp, #28]
 800a256:	0035      	movs	r5, r6
 800a258:	782b      	ldrb	r3, [r5, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <_svfiprintf_r+0x52>
 800a25e:	2b25      	cmp	r3, #37	; 0x25
 800a260:	d147      	bne.n	800a2f2 <_svfiprintf_r+0xe2>
 800a262:	1bab      	subs	r3, r5, r6
 800a264:	9305      	str	r3, [sp, #20]
 800a266:	42b5      	cmp	r5, r6
 800a268:	d00c      	beq.n	800a284 <_svfiprintf_r+0x74>
 800a26a:	0032      	movs	r2, r6
 800a26c:	0039      	movs	r1, r7
 800a26e:	9803      	ldr	r0, [sp, #12]
 800a270:	f7ff ff6c 	bl	800a14c <__ssputs_r>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d100      	bne.n	800a27a <_svfiprintf_r+0x6a>
 800a278:	e0ae      	b.n	800a3d8 <_svfiprintf_r+0x1c8>
 800a27a:	6962      	ldr	r2, [r4, #20]
 800a27c:	9b05      	ldr	r3, [sp, #20]
 800a27e:	4694      	mov	ip, r2
 800a280:	4463      	add	r3, ip
 800a282:	6163      	str	r3, [r4, #20]
 800a284:	782b      	ldrb	r3, [r5, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d100      	bne.n	800a28c <_svfiprintf_r+0x7c>
 800a28a:	e0a5      	b.n	800a3d8 <_svfiprintf_r+0x1c8>
 800a28c:	2201      	movs	r2, #1
 800a28e:	2300      	movs	r3, #0
 800a290:	4252      	negs	r2, r2
 800a292:	6062      	str	r2, [r4, #4]
 800a294:	a904      	add	r1, sp, #16
 800a296:	3254      	adds	r2, #84	; 0x54
 800a298:	1852      	adds	r2, r2, r1
 800a29a:	1c6e      	adds	r6, r5, #1
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	60e3      	str	r3, [r4, #12]
 800a2a0:	60a3      	str	r3, [r4, #8]
 800a2a2:	7013      	strb	r3, [r2, #0]
 800a2a4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a2a6:	2205      	movs	r2, #5
 800a2a8:	7831      	ldrb	r1, [r6, #0]
 800a2aa:	4854      	ldr	r0, [pc, #336]	; (800a3fc <_svfiprintf_r+0x1ec>)
 800a2ac:	f7ff fb6a 	bl	8009984 <memchr>
 800a2b0:	1c75      	adds	r5, r6, #1
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d11f      	bne.n	800a2f6 <_svfiprintf_r+0xe6>
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	06d3      	lsls	r3, r2, #27
 800a2ba:	d504      	bpl.n	800a2c6 <_svfiprintf_r+0xb6>
 800a2bc:	2353      	movs	r3, #83	; 0x53
 800a2be:	a904      	add	r1, sp, #16
 800a2c0:	185b      	adds	r3, r3, r1
 800a2c2:	2120      	movs	r1, #32
 800a2c4:	7019      	strb	r1, [r3, #0]
 800a2c6:	0713      	lsls	r3, r2, #28
 800a2c8:	d504      	bpl.n	800a2d4 <_svfiprintf_r+0xc4>
 800a2ca:	2353      	movs	r3, #83	; 0x53
 800a2cc:	a904      	add	r1, sp, #16
 800a2ce:	185b      	adds	r3, r3, r1
 800a2d0:	212b      	movs	r1, #43	; 0x2b
 800a2d2:	7019      	strb	r1, [r3, #0]
 800a2d4:	7833      	ldrb	r3, [r6, #0]
 800a2d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2d8:	d016      	beq.n	800a308 <_svfiprintf_r+0xf8>
 800a2da:	0035      	movs	r5, r6
 800a2dc:	2100      	movs	r1, #0
 800a2de:	200a      	movs	r0, #10
 800a2e0:	68e3      	ldr	r3, [r4, #12]
 800a2e2:	782a      	ldrb	r2, [r5, #0]
 800a2e4:	1c6e      	adds	r6, r5, #1
 800a2e6:	3a30      	subs	r2, #48	; 0x30
 800a2e8:	2a09      	cmp	r2, #9
 800a2ea:	d94e      	bls.n	800a38a <_svfiprintf_r+0x17a>
 800a2ec:	2900      	cmp	r1, #0
 800a2ee:	d111      	bne.n	800a314 <_svfiprintf_r+0x104>
 800a2f0:	e017      	b.n	800a322 <_svfiprintf_r+0x112>
 800a2f2:	3501      	adds	r5, #1
 800a2f4:	e7b0      	b.n	800a258 <_svfiprintf_r+0x48>
 800a2f6:	4b41      	ldr	r3, [pc, #260]	; (800a3fc <_svfiprintf_r+0x1ec>)
 800a2f8:	6822      	ldr	r2, [r4, #0]
 800a2fa:	1ac0      	subs	r0, r0, r3
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	4083      	lsls	r3, r0
 800a300:	4313      	orrs	r3, r2
 800a302:	002e      	movs	r6, r5
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	e7ce      	b.n	800a2a6 <_svfiprintf_r+0x96>
 800a308:	9b07      	ldr	r3, [sp, #28]
 800a30a:	1d19      	adds	r1, r3, #4
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	9107      	str	r1, [sp, #28]
 800a310:	2b00      	cmp	r3, #0
 800a312:	db01      	blt.n	800a318 <_svfiprintf_r+0x108>
 800a314:	930b      	str	r3, [sp, #44]	; 0x2c
 800a316:	e004      	b.n	800a322 <_svfiprintf_r+0x112>
 800a318:	425b      	negs	r3, r3
 800a31a:	60e3      	str	r3, [r4, #12]
 800a31c:	2302      	movs	r3, #2
 800a31e:	4313      	orrs	r3, r2
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	782b      	ldrb	r3, [r5, #0]
 800a324:	2b2e      	cmp	r3, #46	; 0x2e
 800a326:	d10a      	bne.n	800a33e <_svfiprintf_r+0x12e>
 800a328:	786b      	ldrb	r3, [r5, #1]
 800a32a:	2b2a      	cmp	r3, #42	; 0x2a
 800a32c:	d135      	bne.n	800a39a <_svfiprintf_r+0x18a>
 800a32e:	9b07      	ldr	r3, [sp, #28]
 800a330:	3502      	adds	r5, #2
 800a332:	1d1a      	adds	r2, r3, #4
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	9207      	str	r2, [sp, #28]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	db2b      	blt.n	800a394 <_svfiprintf_r+0x184>
 800a33c:	9309      	str	r3, [sp, #36]	; 0x24
 800a33e:	4e30      	ldr	r6, [pc, #192]	; (800a400 <_svfiprintf_r+0x1f0>)
 800a340:	2203      	movs	r2, #3
 800a342:	0030      	movs	r0, r6
 800a344:	7829      	ldrb	r1, [r5, #0]
 800a346:	f7ff fb1d 	bl	8009984 <memchr>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d006      	beq.n	800a35c <_svfiprintf_r+0x14c>
 800a34e:	2340      	movs	r3, #64	; 0x40
 800a350:	1b80      	subs	r0, r0, r6
 800a352:	4083      	lsls	r3, r0
 800a354:	6822      	ldr	r2, [r4, #0]
 800a356:	3501      	adds	r5, #1
 800a358:	4313      	orrs	r3, r2
 800a35a:	6023      	str	r3, [r4, #0]
 800a35c:	7829      	ldrb	r1, [r5, #0]
 800a35e:	2206      	movs	r2, #6
 800a360:	4828      	ldr	r0, [pc, #160]	; (800a404 <_svfiprintf_r+0x1f4>)
 800a362:	1c6e      	adds	r6, r5, #1
 800a364:	7621      	strb	r1, [r4, #24]
 800a366:	f7ff fb0d 	bl	8009984 <memchr>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	d03c      	beq.n	800a3e8 <_svfiprintf_r+0x1d8>
 800a36e:	4b26      	ldr	r3, [pc, #152]	; (800a408 <_svfiprintf_r+0x1f8>)
 800a370:	2b00      	cmp	r3, #0
 800a372:	d125      	bne.n	800a3c0 <_svfiprintf_r+0x1b0>
 800a374:	2207      	movs	r2, #7
 800a376:	9b07      	ldr	r3, [sp, #28]
 800a378:	3307      	adds	r3, #7
 800a37a:	4393      	bics	r3, r2
 800a37c:	3308      	adds	r3, #8
 800a37e:	9307      	str	r3, [sp, #28]
 800a380:	6963      	ldr	r3, [r4, #20]
 800a382:	9a04      	ldr	r2, [sp, #16]
 800a384:	189b      	adds	r3, r3, r2
 800a386:	6163      	str	r3, [r4, #20]
 800a388:	e765      	b.n	800a256 <_svfiprintf_r+0x46>
 800a38a:	4343      	muls	r3, r0
 800a38c:	0035      	movs	r5, r6
 800a38e:	2101      	movs	r1, #1
 800a390:	189b      	adds	r3, r3, r2
 800a392:	e7a6      	b.n	800a2e2 <_svfiprintf_r+0xd2>
 800a394:	2301      	movs	r3, #1
 800a396:	425b      	negs	r3, r3
 800a398:	e7d0      	b.n	800a33c <_svfiprintf_r+0x12c>
 800a39a:	2300      	movs	r3, #0
 800a39c:	200a      	movs	r0, #10
 800a39e:	001a      	movs	r2, r3
 800a3a0:	3501      	adds	r5, #1
 800a3a2:	6063      	str	r3, [r4, #4]
 800a3a4:	7829      	ldrb	r1, [r5, #0]
 800a3a6:	1c6e      	adds	r6, r5, #1
 800a3a8:	3930      	subs	r1, #48	; 0x30
 800a3aa:	2909      	cmp	r1, #9
 800a3ac:	d903      	bls.n	800a3b6 <_svfiprintf_r+0x1a6>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0c5      	beq.n	800a33e <_svfiprintf_r+0x12e>
 800a3b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3b4:	e7c3      	b.n	800a33e <_svfiprintf_r+0x12e>
 800a3b6:	4342      	muls	r2, r0
 800a3b8:	0035      	movs	r5, r6
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	1852      	adds	r2, r2, r1
 800a3be:	e7f1      	b.n	800a3a4 <_svfiprintf_r+0x194>
 800a3c0:	ab07      	add	r3, sp, #28
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	003a      	movs	r2, r7
 800a3c6:	0021      	movs	r1, r4
 800a3c8:	4b10      	ldr	r3, [pc, #64]	; (800a40c <_svfiprintf_r+0x1fc>)
 800a3ca:	9803      	ldr	r0, [sp, #12]
 800a3cc:	f7fe f83a 	bl	8008444 <_printf_float>
 800a3d0:	9004      	str	r0, [sp, #16]
 800a3d2:	9b04      	ldr	r3, [sp, #16]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	d1d3      	bne.n	800a380 <_svfiprintf_r+0x170>
 800a3d8:	89bb      	ldrh	r3, [r7, #12]
 800a3da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3dc:	065b      	lsls	r3, r3, #25
 800a3de:	d400      	bmi.n	800a3e2 <_svfiprintf_r+0x1d2>
 800a3e0:	e72d      	b.n	800a23e <_svfiprintf_r+0x2e>
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	4240      	negs	r0, r0
 800a3e6:	e72a      	b.n	800a23e <_svfiprintf_r+0x2e>
 800a3e8:	ab07      	add	r3, sp, #28
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	003a      	movs	r2, r7
 800a3ee:	0021      	movs	r1, r4
 800a3f0:	4b06      	ldr	r3, [pc, #24]	; (800a40c <_svfiprintf_r+0x1fc>)
 800a3f2:	9803      	ldr	r0, [sp, #12]
 800a3f4:	f7fe fad8 	bl	80089a8 <_printf_i>
 800a3f8:	e7ea      	b.n	800a3d0 <_svfiprintf_r+0x1c0>
 800a3fa:	46c0      	nop			; (mov r8, r8)
 800a3fc:	0800b43c 	.word	0x0800b43c
 800a400:	0800b442 	.word	0x0800b442
 800a404:	0800b446 	.word	0x0800b446
 800a408:	08008445 	.word	0x08008445
 800a40c:	0800a14d 	.word	0x0800a14d

0800a410 <__assert_func>:
 800a410:	b530      	push	{r4, r5, lr}
 800a412:	0014      	movs	r4, r2
 800a414:	001a      	movs	r2, r3
 800a416:	4b09      	ldr	r3, [pc, #36]	; (800a43c <__assert_func+0x2c>)
 800a418:	0005      	movs	r5, r0
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	b085      	sub	sp, #20
 800a41e:	68d8      	ldr	r0, [r3, #12]
 800a420:	4b07      	ldr	r3, [pc, #28]	; (800a440 <__assert_func+0x30>)
 800a422:	2c00      	cmp	r4, #0
 800a424:	d101      	bne.n	800a42a <__assert_func+0x1a>
 800a426:	4b07      	ldr	r3, [pc, #28]	; (800a444 <__assert_func+0x34>)
 800a428:	001c      	movs	r4, r3
 800a42a:	9301      	str	r3, [sp, #4]
 800a42c:	9100      	str	r1, [sp, #0]
 800a42e:	002b      	movs	r3, r5
 800a430:	4905      	ldr	r1, [pc, #20]	; (800a448 <__assert_func+0x38>)
 800a432:	9402      	str	r4, [sp, #8]
 800a434:	f000 f80a 	bl	800a44c <fiprintf>
 800a438:	f000 faac 	bl	800a994 <abort>
 800a43c:	2000000c 	.word	0x2000000c
 800a440:	0800b44d 	.word	0x0800b44d
 800a444:	0800b488 	.word	0x0800b488
 800a448:	0800b45a 	.word	0x0800b45a

0800a44c <fiprintf>:
 800a44c:	b40e      	push	{r1, r2, r3}
 800a44e:	b503      	push	{r0, r1, lr}
 800a450:	0001      	movs	r1, r0
 800a452:	ab03      	add	r3, sp, #12
 800a454:	4804      	ldr	r0, [pc, #16]	; (800a468 <fiprintf+0x1c>)
 800a456:	cb04      	ldmia	r3!, {r2}
 800a458:	6800      	ldr	r0, [r0, #0]
 800a45a:	9301      	str	r3, [sp, #4]
 800a45c:	f000 f884 	bl	800a568 <_vfiprintf_r>
 800a460:	b002      	add	sp, #8
 800a462:	bc08      	pop	{r3}
 800a464:	b003      	add	sp, #12
 800a466:	4718      	bx	r3
 800a468:	2000000c 	.word	0x2000000c

0800a46c <__retarget_lock_init_recursive>:
 800a46c:	4770      	bx	lr

0800a46e <__retarget_lock_acquire_recursive>:
 800a46e:	4770      	bx	lr

0800a470 <__retarget_lock_release_recursive>:
 800a470:	4770      	bx	lr

0800a472 <__ascii_mbtowc>:
 800a472:	b082      	sub	sp, #8
 800a474:	2900      	cmp	r1, #0
 800a476:	d100      	bne.n	800a47a <__ascii_mbtowc+0x8>
 800a478:	a901      	add	r1, sp, #4
 800a47a:	1e10      	subs	r0, r2, #0
 800a47c:	d006      	beq.n	800a48c <__ascii_mbtowc+0x1a>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d006      	beq.n	800a490 <__ascii_mbtowc+0x1e>
 800a482:	7813      	ldrb	r3, [r2, #0]
 800a484:	600b      	str	r3, [r1, #0]
 800a486:	7810      	ldrb	r0, [r2, #0]
 800a488:	1e43      	subs	r3, r0, #1
 800a48a:	4198      	sbcs	r0, r3
 800a48c:	b002      	add	sp, #8
 800a48e:	4770      	bx	lr
 800a490:	2002      	movs	r0, #2
 800a492:	4240      	negs	r0, r0
 800a494:	e7fa      	b.n	800a48c <__ascii_mbtowc+0x1a>

0800a496 <memmove>:
 800a496:	b510      	push	{r4, lr}
 800a498:	4288      	cmp	r0, r1
 800a49a:	d902      	bls.n	800a4a2 <memmove+0xc>
 800a49c:	188b      	adds	r3, r1, r2
 800a49e:	4298      	cmp	r0, r3
 800a4a0:	d303      	bcc.n	800a4aa <memmove+0x14>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e007      	b.n	800a4b6 <memmove+0x20>
 800a4a6:	5c8b      	ldrb	r3, [r1, r2]
 800a4a8:	5483      	strb	r3, [r0, r2]
 800a4aa:	3a01      	subs	r2, #1
 800a4ac:	d2fb      	bcs.n	800a4a6 <memmove+0x10>
 800a4ae:	bd10      	pop	{r4, pc}
 800a4b0:	5ccc      	ldrb	r4, [r1, r3]
 800a4b2:	54c4      	strb	r4, [r0, r3]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d1fa      	bne.n	800a4b0 <memmove+0x1a>
 800a4ba:	e7f8      	b.n	800a4ae <memmove+0x18>

0800a4bc <_realloc_r>:
 800a4bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4be:	0007      	movs	r7, r0
 800a4c0:	000e      	movs	r6, r1
 800a4c2:	0014      	movs	r4, r2
 800a4c4:	2900      	cmp	r1, #0
 800a4c6:	d105      	bne.n	800a4d4 <_realloc_r+0x18>
 800a4c8:	0011      	movs	r1, r2
 800a4ca:	f7fd fe9b 	bl	8008204 <_malloc_r>
 800a4ce:	0005      	movs	r5, r0
 800a4d0:	0028      	movs	r0, r5
 800a4d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4d4:	2a00      	cmp	r2, #0
 800a4d6:	d103      	bne.n	800a4e0 <_realloc_r+0x24>
 800a4d8:	f7fd fe28 	bl	800812c <_free_r>
 800a4dc:	0025      	movs	r5, r4
 800a4de:	e7f7      	b.n	800a4d0 <_realloc_r+0x14>
 800a4e0:	f000 fc9a 	bl	800ae18 <_malloc_usable_size_r>
 800a4e4:	9001      	str	r0, [sp, #4]
 800a4e6:	4284      	cmp	r4, r0
 800a4e8:	d803      	bhi.n	800a4f2 <_realloc_r+0x36>
 800a4ea:	0035      	movs	r5, r6
 800a4ec:	0843      	lsrs	r3, r0, #1
 800a4ee:	42a3      	cmp	r3, r4
 800a4f0:	d3ee      	bcc.n	800a4d0 <_realloc_r+0x14>
 800a4f2:	0021      	movs	r1, r4
 800a4f4:	0038      	movs	r0, r7
 800a4f6:	f7fd fe85 	bl	8008204 <_malloc_r>
 800a4fa:	1e05      	subs	r5, r0, #0
 800a4fc:	d0e8      	beq.n	800a4d0 <_realloc_r+0x14>
 800a4fe:	9b01      	ldr	r3, [sp, #4]
 800a500:	0022      	movs	r2, r4
 800a502:	429c      	cmp	r4, r3
 800a504:	d900      	bls.n	800a508 <_realloc_r+0x4c>
 800a506:	001a      	movs	r2, r3
 800a508:	0031      	movs	r1, r6
 800a50a:	0028      	movs	r0, r5
 800a50c:	f7fd fdfc 	bl	8008108 <memcpy>
 800a510:	0031      	movs	r1, r6
 800a512:	0038      	movs	r0, r7
 800a514:	f7fd fe0a 	bl	800812c <_free_r>
 800a518:	e7da      	b.n	800a4d0 <_realloc_r+0x14>

0800a51a <__sfputc_r>:
 800a51a:	6893      	ldr	r3, [r2, #8]
 800a51c:	b510      	push	{r4, lr}
 800a51e:	3b01      	subs	r3, #1
 800a520:	6093      	str	r3, [r2, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	da04      	bge.n	800a530 <__sfputc_r+0x16>
 800a526:	6994      	ldr	r4, [r2, #24]
 800a528:	42a3      	cmp	r3, r4
 800a52a:	db07      	blt.n	800a53c <__sfputc_r+0x22>
 800a52c:	290a      	cmp	r1, #10
 800a52e:	d005      	beq.n	800a53c <__sfputc_r+0x22>
 800a530:	6813      	ldr	r3, [r2, #0]
 800a532:	1c58      	adds	r0, r3, #1
 800a534:	6010      	str	r0, [r2, #0]
 800a536:	7019      	strb	r1, [r3, #0]
 800a538:	0008      	movs	r0, r1
 800a53a:	bd10      	pop	{r4, pc}
 800a53c:	f000 f94e 	bl	800a7dc <__swbuf_r>
 800a540:	0001      	movs	r1, r0
 800a542:	e7f9      	b.n	800a538 <__sfputc_r+0x1e>

0800a544 <__sfputs_r>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	0006      	movs	r6, r0
 800a548:	000f      	movs	r7, r1
 800a54a:	0014      	movs	r4, r2
 800a54c:	18d5      	adds	r5, r2, r3
 800a54e:	42ac      	cmp	r4, r5
 800a550:	d101      	bne.n	800a556 <__sfputs_r+0x12>
 800a552:	2000      	movs	r0, #0
 800a554:	e007      	b.n	800a566 <__sfputs_r+0x22>
 800a556:	7821      	ldrb	r1, [r4, #0]
 800a558:	003a      	movs	r2, r7
 800a55a:	0030      	movs	r0, r6
 800a55c:	f7ff ffdd 	bl	800a51a <__sfputc_r>
 800a560:	3401      	adds	r4, #1
 800a562:	1c43      	adds	r3, r0, #1
 800a564:	d1f3      	bne.n	800a54e <__sfputs_r+0xa>
 800a566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a568 <_vfiprintf_r>:
 800a568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a56a:	b0a1      	sub	sp, #132	; 0x84
 800a56c:	0006      	movs	r6, r0
 800a56e:	000c      	movs	r4, r1
 800a570:	001f      	movs	r7, r3
 800a572:	9203      	str	r2, [sp, #12]
 800a574:	2800      	cmp	r0, #0
 800a576:	d004      	beq.n	800a582 <_vfiprintf_r+0x1a>
 800a578:	6983      	ldr	r3, [r0, #24]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d101      	bne.n	800a582 <_vfiprintf_r+0x1a>
 800a57e:	f000 fb3f 	bl	800ac00 <__sinit>
 800a582:	4b8e      	ldr	r3, [pc, #568]	; (800a7bc <_vfiprintf_r+0x254>)
 800a584:	429c      	cmp	r4, r3
 800a586:	d11c      	bne.n	800a5c2 <_vfiprintf_r+0x5a>
 800a588:	6874      	ldr	r4, [r6, #4]
 800a58a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a58c:	07db      	lsls	r3, r3, #31
 800a58e:	d405      	bmi.n	800a59c <_vfiprintf_r+0x34>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	059b      	lsls	r3, r3, #22
 800a594:	d402      	bmi.n	800a59c <_vfiprintf_r+0x34>
 800a596:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a598:	f7ff ff69 	bl	800a46e <__retarget_lock_acquire_recursive>
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	071b      	lsls	r3, r3, #28
 800a5a0:	d502      	bpl.n	800a5a8 <_vfiprintf_r+0x40>
 800a5a2:	6923      	ldr	r3, [r4, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d11d      	bne.n	800a5e4 <_vfiprintf_r+0x7c>
 800a5a8:	0021      	movs	r1, r4
 800a5aa:	0030      	movs	r0, r6
 800a5ac:	f000 f97a 	bl	800a8a4 <__swsetup_r>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d017      	beq.n	800a5e4 <_vfiprintf_r+0x7c>
 800a5b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5b6:	07db      	lsls	r3, r3, #31
 800a5b8:	d50d      	bpl.n	800a5d6 <_vfiprintf_r+0x6e>
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	4240      	negs	r0, r0
 800a5be:	b021      	add	sp, #132	; 0x84
 800a5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5c2:	4b7f      	ldr	r3, [pc, #508]	; (800a7c0 <_vfiprintf_r+0x258>)
 800a5c4:	429c      	cmp	r4, r3
 800a5c6:	d101      	bne.n	800a5cc <_vfiprintf_r+0x64>
 800a5c8:	68b4      	ldr	r4, [r6, #8]
 800a5ca:	e7de      	b.n	800a58a <_vfiprintf_r+0x22>
 800a5cc:	4b7d      	ldr	r3, [pc, #500]	; (800a7c4 <_vfiprintf_r+0x25c>)
 800a5ce:	429c      	cmp	r4, r3
 800a5d0:	d1db      	bne.n	800a58a <_vfiprintf_r+0x22>
 800a5d2:	68f4      	ldr	r4, [r6, #12]
 800a5d4:	e7d9      	b.n	800a58a <_vfiprintf_r+0x22>
 800a5d6:	89a3      	ldrh	r3, [r4, #12]
 800a5d8:	059b      	lsls	r3, r3, #22
 800a5da:	d4ee      	bmi.n	800a5ba <_vfiprintf_r+0x52>
 800a5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5de:	f7ff ff47 	bl	800a470 <__retarget_lock_release_recursive>
 800a5e2:	e7ea      	b.n	800a5ba <_vfiprintf_r+0x52>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	ad08      	add	r5, sp, #32
 800a5e8:	616b      	str	r3, [r5, #20]
 800a5ea:	3320      	adds	r3, #32
 800a5ec:	766b      	strb	r3, [r5, #25]
 800a5ee:	3310      	adds	r3, #16
 800a5f0:	76ab      	strb	r3, [r5, #26]
 800a5f2:	9707      	str	r7, [sp, #28]
 800a5f4:	9f03      	ldr	r7, [sp, #12]
 800a5f6:	783b      	ldrb	r3, [r7, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <_vfiprintf_r+0x98>
 800a5fc:	2b25      	cmp	r3, #37	; 0x25
 800a5fe:	d14e      	bne.n	800a69e <_vfiprintf_r+0x136>
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	1afb      	subs	r3, r7, r3
 800a604:	9305      	str	r3, [sp, #20]
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	429f      	cmp	r7, r3
 800a60a:	d00d      	beq.n	800a628 <_vfiprintf_r+0xc0>
 800a60c:	9b05      	ldr	r3, [sp, #20]
 800a60e:	0021      	movs	r1, r4
 800a610:	0030      	movs	r0, r6
 800a612:	9a03      	ldr	r2, [sp, #12]
 800a614:	f7ff ff96 	bl	800a544 <__sfputs_r>
 800a618:	1c43      	adds	r3, r0, #1
 800a61a:	d100      	bne.n	800a61e <_vfiprintf_r+0xb6>
 800a61c:	e0b5      	b.n	800a78a <_vfiprintf_r+0x222>
 800a61e:	696a      	ldr	r2, [r5, #20]
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	4694      	mov	ip, r2
 800a624:	4463      	add	r3, ip
 800a626:	616b      	str	r3, [r5, #20]
 800a628:	783b      	ldrb	r3, [r7, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d100      	bne.n	800a630 <_vfiprintf_r+0xc8>
 800a62e:	e0ac      	b.n	800a78a <_vfiprintf_r+0x222>
 800a630:	2201      	movs	r2, #1
 800a632:	1c7b      	adds	r3, r7, #1
 800a634:	9303      	str	r3, [sp, #12]
 800a636:	2300      	movs	r3, #0
 800a638:	4252      	negs	r2, r2
 800a63a:	606a      	str	r2, [r5, #4]
 800a63c:	a904      	add	r1, sp, #16
 800a63e:	3254      	adds	r2, #84	; 0x54
 800a640:	1852      	adds	r2, r2, r1
 800a642:	602b      	str	r3, [r5, #0]
 800a644:	60eb      	str	r3, [r5, #12]
 800a646:	60ab      	str	r3, [r5, #8]
 800a648:	7013      	strb	r3, [r2, #0]
 800a64a:	65ab      	str	r3, [r5, #88]	; 0x58
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	2205      	movs	r2, #5
 800a650:	7819      	ldrb	r1, [r3, #0]
 800a652:	485d      	ldr	r0, [pc, #372]	; (800a7c8 <_vfiprintf_r+0x260>)
 800a654:	f7ff f996 	bl	8009984 <memchr>
 800a658:	9b03      	ldr	r3, [sp, #12]
 800a65a:	1c5f      	adds	r7, r3, #1
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d120      	bne.n	800a6a2 <_vfiprintf_r+0x13a>
 800a660:	682a      	ldr	r2, [r5, #0]
 800a662:	06d3      	lsls	r3, r2, #27
 800a664:	d504      	bpl.n	800a670 <_vfiprintf_r+0x108>
 800a666:	2353      	movs	r3, #83	; 0x53
 800a668:	a904      	add	r1, sp, #16
 800a66a:	185b      	adds	r3, r3, r1
 800a66c:	2120      	movs	r1, #32
 800a66e:	7019      	strb	r1, [r3, #0]
 800a670:	0713      	lsls	r3, r2, #28
 800a672:	d504      	bpl.n	800a67e <_vfiprintf_r+0x116>
 800a674:	2353      	movs	r3, #83	; 0x53
 800a676:	a904      	add	r1, sp, #16
 800a678:	185b      	adds	r3, r3, r1
 800a67a:	212b      	movs	r1, #43	; 0x2b
 800a67c:	7019      	strb	r1, [r3, #0]
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b2a      	cmp	r3, #42	; 0x2a
 800a684:	d016      	beq.n	800a6b4 <_vfiprintf_r+0x14c>
 800a686:	2100      	movs	r1, #0
 800a688:	68eb      	ldr	r3, [r5, #12]
 800a68a:	9f03      	ldr	r7, [sp, #12]
 800a68c:	783a      	ldrb	r2, [r7, #0]
 800a68e:	1c78      	adds	r0, r7, #1
 800a690:	3a30      	subs	r2, #48	; 0x30
 800a692:	4684      	mov	ip, r0
 800a694:	2a09      	cmp	r2, #9
 800a696:	d94f      	bls.n	800a738 <_vfiprintf_r+0x1d0>
 800a698:	2900      	cmp	r1, #0
 800a69a:	d111      	bne.n	800a6c0 <_vfiprintf_r+0x158>
 800a69c:	e017      	b.n	800a6ce <_vfiprintf_r+0x166>
 800a69e:	3701      	adds	r7, #1
 800a6a0:	e7a9      	b.n	800a5f6 <_vfiprintf_r+0x8e>
 800a6a2:	4b49      	ldr	r3, [pc, #292]	; (800a7c8 <_vfiprintf_r+0x260>)
 800a6a4:	682a      	ldr	r2, [r5, #0]
 800a6a6:	1ac0      	subs	r0, r0, r3
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	4083      	lsls	r3, r0
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	9703      	str	r7, [sp, #12]
 800a6b2:	e7cb      	b.n	800a64c <_vfiprintf_r+0xe4>
 800a6b4:	9b07      	ldr	r3, [sp, #28]
 800a6b6:	1d19      	adds	r1, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	9107      	str	r1, [sp, #28]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	db01      	blt.n	800a6c4 <_vfiprintf_r+0x15c>
 800a6c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6c2:	e004      	b.n	800a6ce <_vfiprintf_r+0x166>
 800a6c4:	425b      	negs	r3, r3
 800a6c6:	60eb      	str	r3, [r5, #12]
 800a6c8:	2302      	movs	r3, #2
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	783b      	ldrb	r3, [r7, #0]
 800a6d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a6d2:	d10a      	bne.n	800a6ea <_vfiprintf_r+0x182>
 800a6d4:	787b      	ldrb	r3, [r7, #1]
 800a6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d8:	d137      	bne.n	800a74a <_vfiprintf_r+0x1e2>
 800a6da:	9b07      	ldr	r3, [sp, #28]
 800a6dc:	3702      	adds	r7, #2
 800a6de:	1d1a      	adds	r2, r3, #4
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	9207      	str	r2, [sp, #28]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	db2d      	blt.n	800a744 <_vfiprintf_r+0x1dc>
 800a6e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a6ea:	2203      	movs	r2, #3
 800a6ec:	7839      	ldrb	r1, [r7, #0]
 800a6ee:	4837      	ldr	r0, [pc, #220]	; (800a7cc <_vfiprintf_r+0x264>)
 800a6f0:	f7ff f948 	bl	8009984 <memchr>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d007      	beq.n	800a708 <_vfiprintf_r+0x1a0>
 800a6f8:	4b34      	ldr	r3, [pc, #208]	; (800a7cc <_vfiprintf_r+0x264>)
 800a6fa:	682a      	ldr	r2, [r5, #0]
 800a6fc:	1ac0      	subs	r0, r0, r3
 800a6fe:	2340      	movs	r3, #64	; 0x40
 800a700:	4083      	lsls	r3, r0
 800a702:	4313      	orrs	r3, r2
 800a704:	3701      	adds	r7, #1
 800a706:	602b      	str	r3, [r5, #0]
 800a708:	7839      	ldrb	r1, [r7, #0]
 800a70a:	1c7b      	adds	r3, r7, #1
 800a70c:	2206      	movs	r2, #6
 800a70e:	4830      	ldr	r0, [pc, #192]	; (800a7d0 <_vfiprintf_r+0x268>)
 800a710:	9303      	str	r3, [sp, #12]
 800a712:	7629      	strb	r1, [r5, #24]
 800a714:	f7ff f936 	bl	8009984 <memchr>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d045      	beq.n	800a7a8 <_vfiprintf_r+0x240>
 800a71c:	4b2d      	ldr	r3, [pc, #180]	; (800a7d4 <_vfiprintf_r+0x26c>)
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d127      	bne.n	800a772 <_vfiprintf_r+0x20a>
 800a722:	2207      	movs	r2, #7
 800a724:	9b07      	ldr	r3, [sp, #28]
 800a726:	3307      	adds	r3, #7
 800a728:	4393      	bics	r3, r2
 800a72a:	3308      	adds	r3, #8
 800a72c:	9307      	str	r3, [sp, #28]
 800a72e:	696b      	ldr	r3, [r5, #20]
 800a730:	9a04      	ldr	r2, [sp, #16]
 800a732:	189b      	adds	r3, r3, r2
 800a734:	616b      	str	r3, [r5, #20]
 800a736:	e75d      	b.n	800a5f4 <_vfiprintf_r+0x8c>
 800a738:	210a      	movs	r1, #10
 800a73a:	434b      	muls	r3, r1
 800a73c:	4667      	mov	r7, ip
 800a73e:	189b      	adds	r3, r3, r2
 800a740:	3909      	subs	r1, #9
 800a742:	e7a3      	b.n	800a68c <_vfiprintf_r+0x124>
 800a744:	2301      	movs	r3, #1
 800a746:	425b      	negs	r3, r3
 800a748:	e7ce      	b.n	800a6e8 <_vfiprintf_r+0x180>
 800a74a:	2300      	movs	r3, #0
 800a74c:	001a      	movs	r2, r3
 800a74e:	3701      	adds	r7, #1
 800a750:	606b      	str	r3, [r5, #4]
 800a752:	7839      	ldrb	r1, [r7, #0]
 800a754:	1c78      	adds	r0, r7, #1
 800a756:	3930      	subs	r1, #48	; 0x30
 800a758:	4684      	mov	ip, r0
 800a75a:	2909      	cmp	r1, #9
 800a75c:	d903      	bls.n	800a766 <_vfiprintf_r+0x1fe>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0c3      	beq.n	800a6ea <_vfiprintf_r+0x182>
 800a762:	9209      	str	r2, [sp, #36]	; 0x24
 800a764:	e7c1      	b.n	800a6ea <_vfiprintf_r+0x182>
 800a766:	230a      	movs	r3, #10
 800a768:	435a      	muls	r2, r3
 800a76a:	4667      	mov	r7, ip
 800a76c:	1852      	adds	r2, r2, r1
 800a76e:	3b09      	subs	r3, #9
 800a770:	e7ef      	b.n	800a752 <_vfiprintf_r+0x1ea>
 800a772:	ab07      	add	r3, sp, #28
 800a774:	9300      	str	r3, [sp, #0]
 800a776:	0022      	movs	r2, r4
 800a778:	0029      	movs	r1, r5
 800a77a:	0030      	movs	r0, r6
 800a77c:	4b16      	ldr	r3, [pc, #88]	; (800a7d8 <_vfiprintf_r+0x270>)
 800a77e:	f7fd fe61 	bl	8008444 <_printf_float>
 800a782:	9004      	str	r0, [sp, #16]
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	3301      	adds	r3, #1
 800a788:	d1d1      	bne.n	800a72e <_vfiprintf_r+0x1c6>
 800a78a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a78c:	07db      	lsls	r3, r3, #31
 800a78e:	d405      	bmi.n	800a79c <_vfiprintf_r+0x234>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	059b      	lsls	r3, r3, #22
 800a794:	d402      	bmi.n	800a79c <_vfiprintf_r+0x234>
 800a796:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a798:	f7ff fe6a 	bl	800a470 <__retarget_lock_release_recursive>
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	065b      	lsls	r3, r3, #25
 800a7a0:	d500      	bpl.n	800a7a4 <_vfiprintf_r+0x23c>
 800a7a2:	e70a      	b.n	800a5ba <_vfiprintf_r+0x52>
 800a7a4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a7a6:	e70a      	b.n	800a5be <_vfiprintf_r+0x56>
 800a7a8:	ab07      	add	r3, sp, #28
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	0022      	movs	r2, r4
 800a7ae:	0029      	movs	r1, r5
 800a7b0:	0030      	movs	r0, r6
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <_vfiprintf_r+0x270>)
 800a7b4:	f7fe f8f8 	bl	80089a8 <_printf_i>
 800a7b8:	e7e3      	b.n	800a782 <_vfiprintf_r+0x21a>
 800a7ba:	46c0      	nop			; (mov r8, r8)
 800a7bc:	0800b5b4 	.word	0x0800b5b4
 800a7c0:	0800b5d4 	.word	0x0800b5d4
 800a7c4:	0800b594 	.word	0x0800b594
 800a7c8:	0800b43c 	.word	0x0800b43c
 800a7cc:	0800b442 	.word	0x0800b442
 800a7d0:	0800b446 	.word	0x0800b446
 800a7d4:	08008445 	.word	0x08008445
 800a7d8:	0800a545 	.word	0x0800a545

0800a7dc <__swbuf_r>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	0005      	movs	r5, r0
 800a7e0:	000e      	movs	r6, r1
 800a7e2:	0014      	movs	r4, r2
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d004      	beq.n	800a7f2 <__swbuf_r+0x16>
 800a7e8:	6983      	ldr	r3, [r0, #24]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <__swbuf_r+0x16>
 800a7ee:	f000 fa07 	bl	800ac00 <__sinit>
 800a7f2:	4b22      	ldr	r3, [pc, #136]	; (800a87c <__swbuf_r+0xa0>)
 800a7f4:	429c      	cmp	r4, r3
 800a7f6:	d12e      	bne.n	800a856 <__swbuf_r+0x7a>
 800a7f8:	686c      	ldr	r4, [r5, #4]
 800a7fa:	69a3      	ldr	r3, [r4, #24]
 800a7fc:	60a3      	str	r3, [r4, #8]
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	071b      	lsls	r3, r3, #28
 800a802:	d532      	bpl.n	800a86a <__swbuf_r+0x8e>
 800a804:	6923      	ldr	r3, [r4, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d02f      	beq.n	800a86a <__swbuf_r+0x8e>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	6922      	ldr	r2, [r4, #16]
 800a80e:	b2f7      	uxtb	r7, r6
 800a810:	1a98      	subs	r0, r3, r2
 800a812:	6963      	ldr	r3, [r4, #20]
 800a814:	b2f6      	uxtb	r6, r6
 800a816:	4283      	cmp	r3, r0
 800a818:	dc05      	bgt.n	800a826 <__swbuf_r+0x4a>
 800a81a:	0021      	movs	r1, r4
 800a81c:	0028      	movs	r0, r5
 800a81e:	f000 f94d 	bl	800aabc <_fflush_r>
 800a822:	2800      	cmp	r0, #0
 800a824:	d127      	bne.n	800a876 <__swbuf_r+0x9a>
 800a826:	68a3      	ldr	r3, [r4, #8]
 800a828:	3001      	adds	r0, #1
 800a82a:	3b01      	subs	r3, #1
 800a82c:	60a3      	str	r3, [r4, #8]
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	6022      	str	r2, [r4, #0]
 800a834:	701f      	strb	r7, [r3, #0]
 800a836:	6963      	ldr	r3, [r4, #20]
 800a838:	4283      	cmp	r3, r0
 800a83a:	d004      	beq.n	800a846 <__swbuf_r+0x6a>
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	07db      	lsls	r3, r3, #31
 800a840:	d507      	bpl.n	800a852 <__swbuf_r+0x76>
 800a842:	2e0a      	cmp	r6, #10
 800a844:	d105      	bne.n	800a852 <__swbuf_r+0x76>
 800a846:	0021      	movs	r1, r4
 800a848:	0028      	movs	r0, r5
 800a84a:	f000 f937 	bl	800aabc <_fflush_r>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d111      	bne.n	800a876 <__swbuf_r+0x9a>
 800a852:	0030      	movs	r0, r6
 800a854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a856:	4b0a      	ldr	r3, [pc, #40]	; (800a880 <__swbuf_r+0xa4>)
 800a858:	429c      	cmp	r4, r3
 800a85a:	d101      	bne.n	800a860 <__swbuf_r+0x84>
 800a85c:	68ac      	ldr	r4, [r5, #8]
 800a85e:	e7cc      	b.n	800a7fa <__swbuf_r+0x1e>
 800a860:	4b08      	ldr	r3, [pc, #32]	; (800a884 <__swbuf_r+0xa8>)
 800a862:	429c      	cmp	r4, r3
 800a864:	d1c9      	bne.n	800a7fa <__swbuf_r+0x1e>
 800a866:	68ec      	ldr	r4, [r5, #12]
 800a868:	e7c7      	b.n	800a7fa <__swbuf_r+0x1e>
 800a86a:	0021      	movs	r1, r4
 800a86c:	0028      	movs	r0, r5
 800a86e:	f000 f819 	bl	800a8a4 <__swsetup_r>
 800a872:	2800      	cmp	r0, #0
 800a874:	d0c9      	beq.n	800a80a <__swbuf_r+0x2e>
 800a876:	2601      	movs	r6, #1
 800a878:	4276      	negs	r6, r6
 800a87a:	e7ea      	b.n	800a852 <__swbuf_r+0x76>
 800a87c:	0800b5b4 	.word	0x0800b5b4
 800a880:	0800b5d4 	.word	0x0800b5d4
 800a884:	0800b594 	.word	0x0800b594

0800a888 <__ascii_wctomb>:
 800a888:	0003      	movs	r3, r0
 800a88a:	1e08      	subs	r0, r1, #0
 800a88c:	d005      	beq.n	800a89a <__ascii_wctomb+0x12>
 800a88e:	2aff      	cmp	r2, #255	; 0xff
 800a890:	d904      	bls.n	800a89c <__ascii_wctomb+0x14>
 800a892:	228a      	movs	r2, #138	; 0x8a
 800a894:	2001      	movs	r0, #1
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	4240      	negs	r0, r0
 800a89a:	4770      	bx	lr
 800a89c:	2001      	movs	r0, #1
 800a89e:	700a      	strb	r2, [r1, #0]
 800a8a0:	e7fb      	b.n	800a89a <__ascii_wctomb+0x12>
	...

0800a8a4 <__swsetup_r>:
 800a8a4:	4b37      	ldr	r3, [pc, #220]	; (800a984 <__swsetup_r+0xe0>)
 800a8a6:	b570      	push	{r4, r5, r6, lr}
 800a8a8:	681d      	ldr	r5, [r3, #0]
 800a8aa:	0006      	movs	r6, r0
 800a8ac:	000c      	movs	r4, r1
 800a8ae:	2d00      	cmp	r5, #0
 800a8b0:	d005      	beq.n	800a8be <__swsetup_r+0x1a>
 800a8b2:	69ab      	ldr	r3, [r5, #24]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <__swsetup_r+0x1a>
 800a8b8:	0028      	movs	r0, r5
 800a8ba:	f000 f9a1 	bl	800ac00 <__sinit>
 800a8be:	4b32      	ldr	r3, [pc, #200]	; (800a988 <__swsetup_r+0xe4>)
 800a8c0:	429c      	cmp	r4, r3
 800a8c2:	d10f      	bne.n	800a8e4 <__swsetup_r+0x40>
 800a8c4:	686c      	ldr	r4, [r5, #4]
 800a8c6:	230c      	movs	r3, #12
 800a8c8:	5ee2      	ldrsh	r2, [r4, r3]
 800a8ca:	b293      	uxth	r3, r2
 800a8cc:	0711      	lsls	r1, r2, #28
 800a8ce:	d42d      	bmi.n	800a92c <__swsetup_r+0x88>
 800a8d0:	06d9      	lsls	r1, r3, #27
 800a8d2:	d411      	bmi.n	800a8f8 <__swsetup_r+0x54>
 800a8d4:	2309      	movs	r3, #9
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	6033      	str	r3, [r6, #0]
 800a8da:	3337      	adds	r3, #55	; 0x37
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	4240      	negs	r0, r0
 800a8e2:	bd70      	pop	{r4, r5, r6, pc}
 800a8e4:	4b29      	ldr	r3, [pc, #164]	; (800a98c <__swsetup_r+0xe8>)
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	d101      	bne.n	800a8ee <__swsetup_r+0x4a>
 800a8ea:	68ac      	ldr	r4, [r5, #8]
 800a8ec:	e7eb      	b.n	800a8c6 <__swsetup_r+0x22>
 800a8ee:	4b28      	ldr	r3, [pc, #160]	; (800a990 <__swsetup_r+0xec>)
 800a8f0:	429c      	cmp	r4, r3
 800a8f2:	d1e8      	bne.n	800a8c6 <__swsetup_r+0x22>
 800a8f4:	68ec      	ldr	r4, [r5, #12]
 800a8f6:	e7e6      	b.n	800a8c6 <__swsetup_r+0x22>
 800a8f8:	075b      	lsls	r3, r3, #29
 800a8fa:	d513      	bpl.n	800a924 <__swsetup_r+0x80>
 800a8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8fe:	2900      	cmp	r1, #0
 800a900:	d008      	beq.n	800a914 <__swsetup_r+0x70>
 800a902:	0023      	movs	r3, r4
 800a904:	3344      	adds	r3, #68	; 0x44
 800a906:	4299      	cmp	r1, r3
 800a908:	d002      	beq.n	800a910 <__swsetup_r+0x6c>
 800a90a:	0030      	movs	r0, r6
 800a90c:	f7fd fc0e 	bl	800812c <_free_r>
 800a910:	2300      	movs	r3, #0
 800a912:	6363      	str	r3, [r4, #52]	; 0x34
 800a914:	2224      	movs	r2, #36	; 0x24
 800a916:	89a3      	ldrh	r3, [r4, #12]
 800a918:	4393      	bics	r3, r2
 800a91a:	81a3      	strh	r3, [r4, #12]
 800a91c:	2300      	movs	r3, #0
 800a91e:	6063      	str	r3, [r4, #4]
 800a920:	6923      	ldr	r3, [r4, #16]
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	2308      	movs	r3, #8
 800a926:	89a2      	ldrh	r2, [r4, #12]
 800a928:	4313      	orrs	r3, r2
 800a92a:	81a3      	strh	r3, [r4, #12]
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10b      	bne.n	800a94a <__swsetup_r+0xa6>
 800a932:	21a0      	movs	r1, #160	; 0xa0
 800a934:	2280      	movs	r2, #128	; 0x80
 800a936:	89a3      	ldrh	r3, [r4, #12]
 800a938:	0089      	lsls	r1, r1, #2
 800a93a:	0092      	lsls	r2, r2, #2
 800a93c:	400b      	ands	r3, r1
 800a93e:	4293      	cmp	r3, r2
 800a940:	d003      	beq.n	800a94a <__swsetup_r+0xa6>
 800a942:	0021      	movs	r1, r4
 800a944:	0030      	movs	r0, r6
 800a946:	f000 fa23 	bl	800ad90 <__smakebuf_r>
 800a94a:	220c      	movs	r2, #12
 800a94c:	5ea3      	ldrsh	r3, [r4, r2]
 800a94e:	2001      	movs	r0, #1
 800a950:	001a      	movs	r2, r3
 800a952:	b299      	uxth	r1, r3
 800a954:	4002      	ands	r2, r0
 800a956:	4203      	tst	r3, r0
 800a958:	d00f      	beq.n	800a97a <__swsetup_r+0xd6>
 800a95a:	2200      	movs	r2, #0
 800a95c:	60a2      	str	r2, [r4, #8]
 800a95e:	6962      	ldr	r2, [r4, #20]
 800a960:	4252      	negs	r2, r2
 800a962:	61a2      	str	r2, [r4, #24]
 800a964:	2000      	movs	r0, #0
 800a966:	6922      	ldr	r2, [r4, #16]
 800a968:	4282      	cmp	r2, r0
 800a96a:	d1ba      	bne.n	800a8e2 <__swsetup_r+0x3e>
 800a96c:	060a      	lsls	r2, r1, #24
 800a96e:	d5b8      	bpl.n	800a8e2 <__swsetup_r+0x3e>
 800a970:	2240      	movs	r2, #64	; 0x40
 800a972:	4313      	orrs	r3, r2
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	3801      	subs	r0, #1
 800a978:	e7b3      	b.n	800a8e2 <__swsetup_r+0x3e>
 800a97a:	0788      	lsls	r0, r1, #30
 800a97c:	d400      	bmi.n	800a980 <__swsetup_r+0xdc>
 800a97e:	6962      	ldr	r2, [r4, #20]
 800a980:	60a2      	str	r2, [r4, #8]
 800a982:	e7ef      	b.n	800a964 <__swsetup_r+0xc0>
 800a984:	2000000c 	.word	0x2000000c
 800a988:	0800b5b4 	.word	0x0800b5b4
 800a98c:	0800b5d4 	.word	0x0800b5d4
 800a990:	0800b594 	.word	0x0800b594

0800a994 <abort>:
 800a994:	2006      	movs	r0, #6
 800a996:	b510      	push	{r4, lr}
 800a998:	f000 fa70 	bl	800ae7c <raise>
 800a99c:	2001      	movs	r0, #1
 800a99e:	f7f8 fd62 	bl	8003466 <_exit>
	...

0800a9a4 <__sflush_r>:
 800a9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9a6:	898b      	ldrh	r3, [r1, #12]
 800a9a8:	0005      	movs	r5, r0
 800a9aa:	000c      	movs	r4, r1
 800a9ac:	071a      	lsls	r2, r3, #28
 800a9ae:	d45f      	bmi.n	800aa70 <__sflush_r+0xcc>
 800a9b0:	684a      	ldr	r2, [r1, #4]
 800a9b2:	2a00      	cmp	r2, #0
 800a9b4:	dc04      	bgt.n	800a9c0 <__sflush_r+0x1c>
 800a9b6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a9b8:	2a00      	cmp	r2, #0
 800a9ba:	dc01      	bgt.n	800a9c0 <__sflush_r+0x1c>
 800a9bc:	2000      	movs	r0, #0
 800a9be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9c0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a9c2:	2f00      	cmp	r7, #0
 800a9c4:	d0fa      	beq.n	800a9bc <__sflush_r+0x18>
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	2180      	movs	r1, #128	; 0x80
 800a9ca:	682e      	ldr	r6, [r5, #0]
 800a9cc:	602a      	str	r2, [r5, #0]
 800a9ce:	001a      	movs	r2, r3
 800a9d0:	0149      	lsls	r1, r1, #5
 800a9d2:	400a      	ands	r2, r1
 800a9d4:	420b      	tst	r3, r1
 800a9d6:	d034      	beq.n	800aa42 <__sflush_r+0x9e>
 800a9d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	075b      	lsls	r3, r3, #29
 800a9de:	d506      	bpl.n	800a9ee <__sflush_r+0x4a>
 800a9e0:	6863      	ldr	r3, [r4, #4]
 800a9e2:	1ac0      	subs	r0, r0, r3
 800a9e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <__sflush_r+0x4a>
 800a9ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9ec:	1ac0      	subs	r0, r0, r3
 800a9ee:	0002      	movs	r2, r0
 800a9f0:	6a21      	ldr	r1, [r4, #32]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	0028      	movs	r0, r5
 800a9f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a9f8:	47b8      	blx	r7
 800a9fa:	89a1      	ldrh	r1, [r4, #12]
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d106      	bne.n	800aa0e <__sflush_r+0x6a>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	2b1d      	cmp	r3, #29
 800aa04:	d831      	bhi.n	800aa6a <__sflush_r+0xc6>
 800aa06:	4a2c      	ldr	r2, [pc, #176]	; (800aab8 <__sflush_r+0x114>)
 800aa08:	40da      	lsrs	r2, r3
 800aa0a:	07d3      	lsls	r3, r2, #31
 800aa0c:	d52d      	bpl.n	800aa6a <__sflush_r+0xc6>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	04cb      	lsls	r3, r1, #19
 800aa18:	d505      	bpl.n	800aa26 <__sflush_r+0x82>
 800aa1a:	1c43      	adds	r3, r0, #1
 800aa1c:	d102      	bne.n	800aa24 <__sflush_r+0x80>
 800aa1e:	682b      	ldr	r3, [r5, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d100      	bne.n	800aa26 <__sflush_r+0x82>
 800aa24:	6560      	str	r0, [r4, #84]	; 0x54
 800aa26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa28:	602e      	str	r6, [r5, #0]
 800aa2a:	2900      	cmp	r1, #0
 800aa2c:	d0c6      	beq.n	800a9bc <__sflush_r+0x18>
 800aa2e:	0023      	movs	r3, r4
 800aa30:	3344      	adds	r3, #68	; 0x44
 800aa32:	4299      	cmp	r1, r3
 800aa34:	d002      	beq.n	800aa3c <__sflush_r+0x98>
 800aa36:	0028      	movs	r0, r5
 800aa38:	f7fd fb78 	bl	800812c <_free_r>
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	6360      	str	r0, [r4, #52]	; 0x34
 800aa40:	e7bd      	b.n	800a9be <__sflush_r+0x1a>
 800aa42:	2301      	movs	r3, #1
 800aa44:	0028      	movs	r0, r5
 800aa46:	6a21      	ldr	r1, [r4, #32]
 800aa48:	47b8      	blx	r7
 800aa4a:	1c43      	adds	r3, r0, #1
 800aa4c:	d1c5      	bne.n	800a9da <__sflush_r+0x36>
 800aa4e:	682b      	ldr	r3, [r5, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d0c2      	beq.n	800a9da <__sflush_r+0x36>
 800aa54:	2b1d      	cmp	r3, #29
 800aa56:	d001      	beq.n	800aa5c <__sflush_r+0xb8>
 800aa58:	2b16      	cmp	r3, #22
 800aa5a:	d101      	bne.n	800aa60 <__sflush_r+0xbc>
 800aa5c:	602e      	str	r6, [r5, #0]
 800aa5e:	e7ad      	b.n	800a9bc <__sflush_r+0x18>
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	89a2      	ldrh	r2, [r4, #12]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	81a3      	strh	r3, [r4, #12]
 800aa68:	e7a9      	b.n	800a9be <__sflush_r+0x1a>
 800aa6a:	2340      	movs	r3, #64	; 0x40
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	e7fa      	b.n	800aa66 <__sflush_r+0xc2>
 800aa70:	690f      	ldr	r7, [r1, #16]
 800aa72:	2f00      	cmp	r7, #0
 800aa74:	d0a2      	beq.n	800a9bc <__sflush_r+0x18>
 800aa76:	680a      	ldr	r2, [r1, #0]
 800aa78:	600f      	str	r7, [r1, #0]
 800aa7a:	1bd2      	subs	r2, r2, r7
 800aa7c:	9201      	str	r2, [sp, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	079b      	lsls	r3, r3, #30
 800aa82:	d100      	bne.n	800aa86 <__sflush_r+0xe2>
 800aa84:	694a      	ldr	r2, [r1, #20]
 800aa86:	60a2      	str	r2, [r4, #8]
 800aa88:	9b01      	ldr	r3, [sp, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	dc00      	bgt.n	800aa90 <__sflush_r+0xec>
 800aa8e:	e795      	b.n	800a9bc <__sflush_r+0x18>
 800aa90:	003a      	movs	r2, r7
 800aa92:	0028      	movs	r0, r5
 800aa94:	9b01      	ldr	r3, [sp, #4]
 800aa96:	6a21      	ldr	r1, [r4, #32]
 800aa98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aa9a:	47b0      	blx	r6
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	dc06      	bgt.n	800aaae <__sflush_r+0x10a>
 800aaa0:	2340      	movs	r3, #64	; 0x40
 800aaa2:	2001      	movs	r0, #1
 800aaa4:	89a2      	ldrh	r2, [r4, #12]
 800aaa6:	4240      	negs	r0, r0
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	81a3      	strh	r3, [r4, #12]
 800aaac:	e787      	b.n	800a9be <__sflush_r+0x1a>
 800aaae:	9b01      	ldr	r3, [sp, #4]
 800aab0:	183f      	adds	r7, r7, r0
 800aab2:	1a1b      	subs	r3, r3, r0
 800aab4:	9301      	str	r3, [sp, #4]
 800aab6:	e7e7      	b.n	800aa88 <__sflush_r+0xe4>
 800aab8:	20400001 	.word	0x20400001

0800aabc <_fflush_r>:
 800aabc:	690b      	ldr	r3, [r1, #16]
 800aabe:	b570      	push	{r4, r5, r6, lr}
 800aac0:	0005      	movs	r5, r0
 800aac2:	000c      	movs	r4, r1
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <_fflush_r+0x12>
 800aac8:	2500      	movs	r5, #0
 800aaca:	0028      	movs	r0, r5
 800aacc:	bd70      	pop	{r4, r5, r6, pc}
 800aace:	2800      	cmp	r0, #0
 800aad0:	d004      	beq.n	800aadc <_fflush_r+0x20>
 800aad2:	6983      	ldr	r3, [r0, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <_fflush_r+0x20>
 800aad8:	f000 f892 	bl	800ac00 <__sinit>
 800aadc:	4b14      	ldr	r3, [pc, #80]	; (800ab30 <_fflush_r+0x74>)
 800aade:	429c      	cmp	r4, r3
 800aae0:	d11b      	bne.n	800ab1a <_fflush_r+0x5e>
 800aae2:	686c      	ldr	r4, [r5, #4]
 800aae4:	220c      	movs	r2, #12
 800aae6:	5ea3      	ldrsh	r3, [r4, r2]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d0ed      	beq.n	800aac8 <_fflush_r+0xc>
 800aaec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aaee:	07d2      	lsls	r2, r2, #31
 800aaf0:	d404      	bmi.n	800aafc <_fflush_r+0x40>
 800aaf2:	059b      	lsls	r3, r3, #22
 800aaf4:	d402      	bmi.n	800aafc <_fflush_r+0x40>
 800aaf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaf8:	f7ff fcb9 	bl	800a46e <__retarget_lock_acquire_recursive>
 800aafc:	0028      	movs	r0, r5
 800aafe:	0021      	movs	r1, r4
 800ab00:	f7ff ff50 	bl	800a9a4 <__sflush_r>
 800ab04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab06:	0005      	movs	r5, r0
 800ab08:	07db      	lsls	r3, r3, #31
 800ab0a:	d4de      	bmi.n	800aaca <_fflush_r+0xe>
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	059b      	lsls	r3, r3, #22
 800ab10:	d4db      	bmi.n	800aaca <_fflush_r+0xe>
 800ab12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab14:	f7ff fcac 	bl	800a470 <__retarget_lock_release_recursive>
 800ab18:	e7d7      	b.n	800aaca <_fflush_r+0xe>
 800ab1a:	4b06      	ldr	r3, [pc, #24]	; (800ab34 <_fflush_r+0x78>)
 800ab1c:	429c      	cmp	r4, r3
 800ab1e:	d101      	bne.n	800ab24 <_fflush_r+0x68>
 800ab20:	68ac      	ldr	r4, [r5, #8]
 800ab22:	e7df      	b.n	800aae4 <_fflush_r+0x28>
 800ab24:	4b04      	ldr	r3, [pc, #16]	; (800ab38 <_fflush_r+0x7c>)
 800ab26:	429c      	cmp	r4, r3
 800ab28:	d1dc      	bne.n	800aae4 <_fflush_r+0x28>
 800ab2a:	68ec      	ldr	r4, [r5, #12]
 800ab2c:	e7da      	b.n	800aae4 <_fflush_r+0x28>
 800ab2e:	46c0      	nop			; (mov r8, r8)
 800ab30:	0800b5b4 	.word	0x0800b5b4
 800ab34:	0800b5d4 	.word	0x0800b5d4
 800ab38:	0800b594 	.word	0x0800b594

0800ab3c <std>:
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	b510      	push	{r4, lr}
 800ab40:	0004      	movs	r4, r0
 800ab42:	6003      	str	r3, [r0, #0]
 800ab44:	6043      	str	r3, [r0, #4]
 800ab46:	6083      	str	r3, [r0, #8]
 800ab48:	8181      	strh	r1, [r0, #12]
 800ab4a:	6643      	str	r3, [r0, #100]	; 0x64
 800ab4c:	0019      	movs	r1, r3
 800ab4e:	81c2      	strh	r2, [r0, #14]
 800ab50:	6103      	str	r3, [r0, #16]
 800ab52:	6143      	str	r3, [r0, #20]
 800ab54:	6183      	str	r3, [r0, #24]
 800ab56:	2208      	movs	r2, #8
 800ab58:	305c      	adds	r0, #92	; 0x5c
 800ab5a:	f7fd fade 	bl	800811a <memset>
 800ab5e:	4b05      	ldr	r3, [pc, #20]	; (800ab74 <std+0x38>)
 800ab60:	6224      	str	r4, [r4, #32]
 800ab62:	6263      	str	r3, [r4, #36]	; 0x24
 800ab64:	4b04      	ldr	r3, [pc, #16]	; (800ab78 <std+0x3c>)
 800ab66:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab68:	4b04      	ldr	r3, [pc, #16]	; (800ab7c <std+0x40>)
 800ab6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab6c:	4b04      	ldr	r3, [pc, #16]	; (800ab80 <std+0x44>)
 800ab6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	46c0      	nop			; (mov r8, r8)
 800ab74:	0800aebd 	.word	0x0800aebd
 800ab78:	0800aee5 	.word	0x0800aee5
 800ab7c:	0800af1d 	.word	0x0800af1d
 800ab80:	0800af49 	.word	0x0800af49

0800ab84 <_cleanup_r>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	4902      	ldr	r1, [pc, #8]	; (800ab90 <_cleanup_r+0xc>)
 800ab88:	f000 f8ba 	bl	800ad00 <_fwalk_reent>
 800ab8c:	bd10      	pop	{r4, pc}
 800ab8e:	46c0      	nop			; (mov r8, r8)
 800ab90:	0800aabd 	.word	0x0800aabd

0800ab94 <__sfmoreglue>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	2568      	movs	r5, #104	; 0x68
 800ab98:	1e4a      	subs	r2, r1, #1
 800ab9a:	4355      	muls	r5, r2
 800ab9c:	000e      	movs	r6, r1
 800ab9e:	0029      	movs	r1, r5
 800aba0:	3174      	adds	r1, #116	; 0x74
 800aba2:	f7fd fb2f 	bl	8008204 <_malloc_r>
 800aba6:	1e04      	subs	r4, r0, #0
 800aba8:	d008      	beq.n	800abbc <__sfmoreglue+0x28>
 800abaa:	2100      	movs	r1, #0
 800abac:	002a      	movs	r2, r5
 800abae:	6001      	str	r1, [r0, #0]
 800abb0:	6046      	str	r6, [r0, #4]
 800abb2:	300c      	adds	r0, #12
 800abb4:	60a0      	str	r0, [r4, #8]
 800abb6:	3268      	adds	r2, #104	; 0x68
 800abb8:	f7fd faaf 	bl	800811a <memset>
 800abbc:	0020      	movs	r0, r4
 800abbe:	bd70      	pop	{r4, r5, r6, pc}

0800abc0 <__sfp_lock_acquire>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	4802      	ldr	r0, [pc, #8]	; (800abcc <__sfp_lock_acquire+0xc>)
 800abc4:	f7ff fc53 	bl	800a46e <__retarget_lock_acquire_recursive>
 800abc8:	bd10      	pop	{r4, pc}
 800abca:	46c0      	nop			; (mov r8, r8)
 800abcc:	20000355 	.word	0x20000355

0800abd0 <__sfp_lock_release>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	4802      	ldr	r0, [pc, #8]	; (800abdc <__sfp_lock_release+0xc>)
 800abd4:	f7ff fc4c 	bl	800a470 <__retarget_lock_release_recursive>
 800abd8:	bd10      	pop	{r4, pc}
 800abda:	46c0      	nop			; (mov r8, r8)
 800abdc:	20000355 	.word	0x20000355

0800abe0 <__sinit_lock_acquire>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4802      	ldr	r0, [pc, #8]	; (800abec <__sinit_lock_acquire+0xc>)
 800abe4:	f7ff fc43 	bl	800a46e <__retarget_lock_acquire_recursive>
 800abe8:	bd10      	pop	{r4, pc}
 800abea:	46c0      	nop			; (mov r8, r8)
 800abec:	20000356 	.word	0x20000356

0800abf0 <__sinit_lock_release>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	4802      	ldr	r0, [pc, #8]	; (800abfc <__sinit_lock_release+0xc>)
 800abf4:	f7ff fc3c 	bl	800a470 <__retarget_lock_release_recursive>
 800abf8:	bd10      	pop	{r4, pc}
 800abfa:	46c0      	nop			; (mov r8, r8)
 800abfc:	20000356 	.word	0x20000356

0800ac00 <__sinit>:
 800ac00:	b513      	push	{r0, r1, r4, lr}
 800ac02:	0004      	movs	r4, r0
 800ac04:	f7ff ffec 	bl	800abe0 <__sinit_lock_acquire>
 800ac08:	69a3      	ldr	r3, [r4, #24]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <__sinit+0x14>
 800ac0e:	f7ff ffef 	bl	800abf0 <__sinit_lock_release>
 800ac12:	bd13      	pop	{r0, r1, r4, pc}
 800ac14:	64a3      	str	r3, [r4, #72]	; 0x48
 800ac16:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ac18:	6523      	str	r3, [r4, #80]	; 0x50
 800ac1a:	4b13      	ldr	r3, [pc, #76]	; (800ac68 <__sinit+0x68>)
 800ac1c:	4a13      	ldr	r2, [pc, #76]	; (800ac6c <__sinit+0x6c>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	42a3      	cmp	r3, r4
 800ac26:	d101      	bne.n	800ac2c <__sinit+0x2c>
 800ac28:	2301      	movs	r3, #1
 800ac2a:	61a3      	str	r3, [r4, #24]
 800ac2c:	0020      	movs	r0, r4
 800ac2e:	f000 f81f 	bl	800ac70 <__sfp>
 800ac32:	6060      	str	r0, [r4, #4]
 800ac34:	0020      	movs	r0, r4
 800ac36:	f000 f81b 	bl	800ac70 <__sfp>
 800ac3a:	60a0      	str	r0, [r4, #8]
 800ac3c:	0020      	movs	r0, r4
 800ac3e:	f000 f817 	bl	800ac70 <__sfp>
 800ac42:	2200      	movs	r2, #0
 800ac44:	2104      	movs	r1, #4
 800ac46:	60e0      	str	r0, [r4, #12]
 800ac48:	6860      	ldr	r0, [r4, #4]
 800ac4a:	f7ff ff77 	bl	800ab3c <std>
 800ac4e:	2201      	movs	r2, #1
 800ac50:	2109      	movs	r1, #9
 800ac52:	68a0      	ldr	r0, [r4, #8]
 800ac54:	f7ff ff72 	bl	800ab3c <std>
 800ac58:	2202      	movs	r2, #2
 800ac5a:	2112      	movs	r1, #18
 800ac5c:	68e0      	ldr	r0, [r4, #12]
 800ac5e:	f7ff ff6d 	bl	800ab3c <std>
 800ac62:	2301      	movs	r3, #1
 800ac64:	61a3      	str	r3, [r4, #24]
 800ac66:	e7d2      	b.n	800ac0e <__sinit+0xe>
 800ac68:	0800b218 	.word	0x0800b218
 800ac6c:	0800ab85 	.word	0x0800ab85

0800ac70 <__sfp>:
 800ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac72:	0007      	movs	r7, r0
 800ac74:	f7ff ffa4 	bl	800abc0 <__sfp_lock_acquire>
 800ac78:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <__sfp+0x88>)
 800ac7a:	681e      	ldr	r6, [r3, #0]
 800ac7c:	69b3      	ldr	r3, [r6, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d102      	bne.n	800ac88 <__sfp+0x18>
 800ac82:	0030      	movs	r0, r6
 800ac84:	f7ff ffbc 	bl	800ac00 <__sinit>
 800ac88:	3648      	adds	r6, #72	; 0x48
 800ac8a:	68b4      	ldr	r4, [r6, #8]
 800ac8c:	6873      	ldr	r3, [r6, #4]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	d504      	bpl.n	800ac9c <__sfp+0x2c>
 800ac92:	6833      	ldr	r3, [r6, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d022      	beq.n	800acde <__sfp+0x6e>
 800ac98:	6836      	ldr	r6, [r6, #0]
 800ac9a:	e7f6      	b.n	800ac8a <__sfp+0x1a>
 800ac9c:	220c      	movs	r2, #12
 800ac9e:	5ea5      	ldrsh	r5, [r4, r2]
 800aca0:	2d00      	cmp	r5, #0
 800aca2:	d11a      	bne.n	800acda <__sfp+0x6a>
 800aca4:	0020      	movs	r0, r4
 800aca6:	4b15      	ldr	r3, [pc, #84]	; (800acfc <__sfp+0x8c>)
 800aca8:	3058      	adds	r0, #88	; 0x58
 800acaa:	60e3      	str	r3, [r4, #12]
 800acac:	6665      	str	r5, [r4, #100]	; 0x64
 800acae:	f7ff fbdd 	bl	800a46c <__retarget_lock_init_recursive>
 800acb2:	f7ff ff8d 	bl	800abd0 <__sfp_lock_release>
 800acb6:	0020      	movs	r0, r4
 800acb8:	2208      	movs	r2, #8
 800acba:	0029      	movs	r1, r5
 800acbc:	6025      	str	r5, [r4, #0]
 800acbe:	60a5      	str	r5, [r4, #8]
 800acc0:	6065      	str	r5, [r4, #4]
 800acc2:	6125      	str	r5, [r4, #16]
 800acc4:	6165      	str	r5, [r4, #20]
 800acc6:	61a5      	str	r5, [r4, #24]
 800acc8:	305c      	adds	r0, #92	; 0x5c
 800acca:	f7fd fa26 	bl	800811a <memset>
 800acce:	6365      	str	r5, [r4, #52]	; 0x34
 800acd0:	63a5      	str	r5, [r4, #56]	; 0x38
 800acd2:	64a5      	str	r5, [r4, #72]	; 0x48
 800acd4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800acd6:	0020      	movs	r0, r4
 800acd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acda:	3468      	adds	r4, #104	; 0x68
 800acdc:	e7d7      	b.n	800ac8e <__sfp+0x1e>
 800acde:	2104      	movs	r1, #4
 800ace0:	0038      	movs	r0, r7
 800ace2:	f7ff ff57 	bl	800ab94 <__sfmoreglue>
 800ace6:	1e04      	subs	r4, r0, #0
 800ace8:	6030      	str	r0, [r6, #0]
 800acea:	d1d5      	bne.n	800ac98 <__sfp+0x28>
 800acec:	f7ff ff70 	bl	800abd0 <__sfp_lock_release>
 800acf0:	230c      	movs	r3, #12
 800acf2:	603b      	str	r3, [r7, #0]
 800acf4:	e7ef      	b.n	800acd6 <__sfp+0x66>
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	0800b218 	.word	0x0800b218
 800acfc:	ffff0001 	.word	0xffff0001

0800ad00 <_fwalk_reent>:
 800ad00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad02:	0004      	movs	r4, r0
 800ad04:	0006      	movs	r6, r0
 800ad06:	2700      	movs	r7, #0
 800ad08:	9101      	str	r1, [sp, #4]
 800ad0a:	3448      	adds	r4, #72	; 0x48
 800ad0c:	6863      	ldr	r3, [r4, #4]
 800ad0e:	68a5      	ldr	r5, [r4, #8]
 800ad10:	9300      	str	r3, [sp, #0]
 800ad12:	9b00      	ldr	r3, [sp, #0]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	d504      	bpl.n	800ad24 <_fwalk_reent+0x24>
 800ad1a:	6824      	ldr	r4, [r4, #0]
 800ad1c:	2c00      	cmp	r4, #0
 800ad1e:	d1f5      	bne.n	800ad0c <_fwalk_reent+0xc>
 800ad20:	0038      	movs	r0, r7
 800ad22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad24:	89ab      	ldrh	r3, [r5, #12]
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d908      	bls.n	800ad3c <_fwalk_reent+0x3c>
 800ad2a:	220e      	movs	r2, #14
 800ad2c:	5eab      	ldrsh	r3, [r5, r2]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	d004      	beq.n	800ad3c <_fwalk_reent+0x3c>
 800ad32:	0029      	movs	r1, r5
 800ad34:	0030      	movs	r0, r6
 800ad36:	9b01      	ldr	r3, [sp, #4]
 800ad38:	4798      	blx	r3
 800ad3a:	4307      	orrs	r7, r0
 800ad3c:	3568      	adds	r5, #104	; 0x68
 800ad3e:	e7e8      	b.n	800ad12 <_fwalk_reent+0x12>

0800ad40 <__swhatbuf_r>:
 800ad40:	b570      	push	{r4, r5, r6, lr}
 800ad42:	000e      	movs	r6, r1
 800ad44:	001d      	movs	r5, r3
 800ad46:	230e      	movs	r3, #14
 800ad48:	5ec9      	ldrsh	r1, [r1, r3]
 800ad4a:	0014      	movs	r4, r2
 800ad4c:	b096      	sub	sp, #88	; 0x58
 800ad4e:	2900      	cmp	r1, #0
 800ad50:	da08      	bge.n	800ad64 <__swhatbuf_r+0x24>
 800ad52:	220c      	movs	r2, #12
 800ad54:	5eb3      	ldrsh	r3, [r6, r2]
 800ad56:	2200      	movs	r2, #0
 800ad58:	602a      	str	r2, [r5, #0]
 800ad5a:	061b      	lsls	r3, r3, #24
 800ad5c:	d411      	bmi.n	800ad82 <__swhatbuf_r+0x42>
 800ad5e:	2380      	movs	r3, #128	; 0x80
 800ad60:	00db      	lsls	r3, r3, #3
 800ad62:	e00f      	b.n	800ad84 <__swhatbuf_r+0x44>
 800ad64:	466a      	mov	r2, sp
 800ad66:	f000 f91b 	bl	800afa0 <_fstat_r>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	dbf1      	blt.n	800ad52 <__swhatbuf_r+0x12>
 800ad6e:	23f0      	movs	r3, #240	; 0xf0
 800ad70:	9901      	ldr	r1, [sp, #4]
 800ad72:	021b      	lsls	r3, r3, #8
 800ad74:	4019      	ands	r1, r3
 800ad76:	4b05      	ldr	r3, [pc, #20]	; (800ad8c <__swhatbuf_r+0x4c>)
 800ad78:	18c9      	adds	r1, r1, r3
 800ad7a:	424b      	negs	r3, r1
 800ad7c:	4159      	adcs	r1, r3
 800ad7e:	6029      	str	r1, [r5, #0]
 800ad80:	e7ed      	b.n	800ad5e <__swhatbuf_r+0x1e>
 800ad82:	2340      	movs	r3, #64	; 0x40
 800ad84:	2000      	movs	r0, #0
 800ad86:	6023      	str	r3, [r4, #0]
 800ad88:	b016      	add	sp, #88	; 0x58
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	ffffe000 	.word	0xffffe000

0800ad90 <__smakebuf_r>:
 800ad90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad92:	2602      	movs	r6, #2
 800ad94:	898b      	ldrh	r3, [r1, #12]
 800ad96:	0005      	movs	r5, r0
 800ad98:	000c      	movs	r4, r1
 800ad9a:	4233      	tst	r3, r6
 800ad9c:	d006      	beq.n	800adac <__smakebuf_r+0x1c>
 800ad9e:	0023      	movs	r3, r4
 800ada0:	3347      	adds	r3, #71	; 0x47
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	2301      	movs	r3, #1
 800ada8:	6163      	str	r3, [r4, #20]
 800adaa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800adac:	466a      	mov	r2, sp
 800adae:	ab01      	add	r3, sp, #4
 800adb0:	f7ff ffc6 	bl	800ad40 <__swhatbuf_r>
 800adb4:	9900      	ldr	r1, [sp, #0]
 800adb6:	0007      	movs	r7, r0
 800adb8:	0028      	movs	r0, r5
 800adba:	f7fd fa23 	bl	8008204 <_malloc_r>
 800adbe:	2800      	cmp	r0, #0
 800adc0:	d108      	bne.n	800add4 <__smakebuf_r+0x44>
 800adc2:	220c      	movs	r2, #12
 800adc4:	5ea3      	ldrsh	r3, [r4, r2]
 800adc6:	059a      	lsls	r2, r3, #22
 800adc8:	d4ef      	bmi.n	800adaa <__smakebuf_r+0x1a>
 800adca:	2203      	movs	r2, #3
 800adcc:	4393      	bics	r3, r2
 800adce:	431e      	orrs	r6, r3
 800add0:	81a6      	strh	r6, [r4, #12]
 800add2:	e7e4      	b.n	800ad9e <__smakebuf_r+0xe>
 800add4:	4b0f      	ldr	r3, [pc, #60]	; (800ae14 <__smakebuf_r+0x84>)
 800add6:	62ab      	str	r3, [r5, #40]	; 0x28
 800add8:	2380      	movs	r3, #128	; 0x80
 800adda:	89a2      	ldrh	r2, [r4, #12]
 800addc:	6020      	str	r0, [r4, #0]
 800adde:	4313      	orrs	r3, r2
 800ade0:	81a3      	strh	r3, [r4, #12]
 800ade2:	9b00      	ldr	r3, [sp, #0]
 800ade4:	6120      	str	r0, [r4, #16]
 800ade6:	6163      	str	r3, [r4, #20]
 800ade8:	9b01      	ldr	r3, [sp, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00d      	beq.n	800ae0a <__smakebuf_r+0x7a>
 800adee:	0028      	movs	r0, r5
 800adf0:	230e      	movs	r3, #14
 800adf2:	5ee1      	ldrsh	r1, [r4, r3]
 800adf4:	f000 f8e6 	bl	800afc4 <_isatty_r>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d006      	beq.n	800ae0a <__smakebuf_r+0x7a>
 800adfc:	2203      	movs	r2, #3
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	4393      	bics	r3, r2
 800ae02:	001a      	movs	r2, r3
 800ae04:	2301      	movs	r3, #1
 800ae06:	4313      	orrs	r3, r2
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	89a0      	ldrh	r0, [r4, #12]
 800ae0c:	4307      	orrs	r7, r0
 800ae0e:	81a7      	strh	r7, [r4, #12]
 800ae10:	e7cb      	b.n	800adaa <__smakebuf_r+0x1a>
 800ae12:	46c0      	nop			; (mov r8, r8)
 800ae14:	0800ab85 	.word	0x0800ab85

0800ae18 <_malloc_usable_size_r>:
 800ae18:	1f0b      	subs	r3, r1, #4
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	1f18      	subs	r0, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	da01      	bge.n	800ae26 <_malloc_usable_size_r+0xe>
 800ae22:	580b      	ldr	r3, [r1, r0]
 800ae24:	18c0      	adds	r0, r0, r3
 800ae26:	4770      	bx	lr

0800ae28 <_raise_r>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	0004      	movs	r4, r0
 800ae2c:	000d      	movs	r5, r1
 800ae2e:	291f      	cmp	r1, #31
 800ae30:	d904      	bls.n	800ae3c <_raise_r+0x14>
 800ae32:	2316      	movs	r3, #22
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	2001      	movs	r0, #1
 800ae38:	4240      	negs	r0, r0
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}
 800ae3c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d004      	beq.n	800ae4c <_raise_r+0x24>
 800ae42:	008a      	lsls	r2, r1, #2
 800ae44:	189b      	adds	r3, r3, r2
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	2a00      	cmp	r2, #0
 800ae4a:	d108      	bne.n	800ae5e <_raise_r+0x36>
 800ae4c:	0020      	movs	r0, r4
 800ae4e:	f000 f831 	bl	800aeb4 <_getpid_r>
 800ae52:	002a      	movs	r2, r5
 800ae54:	0001      	movs	r1, r0
 800ae56:	0020      	movs	r0, r4
 800ae58:	f000 f81a 	bl	800ae90 <_kill_r>
 800ae5c:	e7ed      	b.n	800ae3a <_raise_r+0x12>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	2a01      	cmp	r2, #1
 800ae62:	d0ea      	beq.n	800ae3a <_raise_r+0x12>
 800ae64:	1c51      	adds	r1, r2, #1
 800ae66:	d103      	bne.n	800ae70 <_raise_r+0x48>
 800ae68:	2316      	movs	r3, #22
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	e7e4      	b.n	800ae3a <_raise_r+0x12>
 800ae70:	2400      	movs	r4, #0
 800ae72:	0028      	movs	r0, r5
 800ae74:	601c      	str	r4, [r3, #0]
 800ae76:	4790      	blx	r2
 800ae78:	0020      	movs	r0, r4
 800ae7a:	e7de      	b.n	800ae3a <_raise_r+0x12>

0800ae7c <raise>:
 800ae7c:	b510      	push	{r4, lr}
 800ae7e:	4b03      	ldr	r3, [pc, #12]	; (800ae8c <raise+0x10>)
 800ae80:	0001      	movs	r1, r0
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	f7ff ffd0 	bl	800ae28 <_raise_r>
 800ae88:	bd10      	pop	{r4, pc}
 800ae8a:	46c0      	nop			; (mov r8, r8)
 800ae8c:	2000000c 	.word	0x2000000c

0800ae90 <_kill_r>:
 800ae90:	2300      	movs	r3, #0
 800ae92:	b570      	push	{r4, r5, r6, lr}
 800ae94:	4d06      	ldr	r5, [pc, #24]	; (800aeb0 <_kill_r+0x20>)
 800ae96:	0004      	movs	r4, r0
 800ae98:	0008      	movs	r0, r1
 800ae9a:	0011      	movs	r1, r2
 800ae9c:	602b      	str	r3, [r5, #0]
 800ae9e:	f7f8 fad2 	bl	8003446 <_kill>
 800aea2:	1c43      	adds	r3, r0, #1
 800aea4:	d103      	bne.n	800aeae <_kill_r+0x1e>
 800aea6:	682b      	ldr	r3, [r5, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d000      	beq.n	800aeae <_kill_r+0x1e>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd70      	pop	{r4, r5, r6, pc}
 800aeb0:	20000350 	.word	0x20000350

0800aeb4 <_getpid_r>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	f7f8 fac0 	bl	800343a <_getpid>
 800aeba:	bd10      	pop	{r4, pc}

0800aebc <__sread>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	000c      	movs	r4, r1
 800aec0:	250e      	movs	r5, #14
 800aec2:	5f49      	ldrsh	r1, [r1, r5]
 800aec4:	f000 f8a4 	bl	800b010 <_read_r>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	db03      	blt.n	800aed4 <__sread+0x18>
 800aecc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aece:	181b      	adds	r3, r3, r0
 800aed0:	6563      	str	r3, [r4, #84]	; 0x54
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	4a02      	ldr	r2, [pc, #8]	; (800aee0 <__sread+0x24>)
 800aed8:	4013      	ands	r3, r2
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	e7f9      	b.n	800aed2 <__sread+0x16>
 800aede:	46c0      	nop			; (mov r8, r8)
 800aee0:	ffffefff 	.word	0xffffefff

0800aee4 <__swrite>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	001f      	movs	r7, r3
 800aee8:	898b      	ldrh	r3, [r1, #12]
 800aeea:	0005      	movs	r5, r0
 800aeec:	000c      	movs	r4, r1
 800aeee:	0016      	movs	r6, r2
 800aef0:	05db      	lsls	r3, r3, #23
 800aef2:	d505      	bpl.n	800af00 <__swrite+0x1c>
 800aef4:	230e      	movs	r3, #14
 800aef6:	5ec9      	ldrsh	r1, [r1, r3]
 800aef8:	2200      	movs	r2, #0
 800aefa:	2302      	movs	r3, #2
 800aefc:	f000 f874 	bl	800afe8 <_lseek_r>
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	4a05      	ldr	r2, [pc, #20]	; (800af18 <__swrite+0x34>)
 800af04:	0028      	movs	r0, r5
 800af06:	4013      	ands	r3, r2
 800af08:	81a3      	strh	r3, [r4, #12]
 800af0a:	0032      	movs	r2, r6
 800af0c:	230e      	movs	r3, #14
 800af0e:	5ee1      	ldrsh	r1, [r4, r3]
 800af10:	003b      	movs	r3, r7
 800af12:	f000 f81f 	bl	800af54 <_write_r>
 800af16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af18:	ffffefff 	.word	0xffffefff

0800af1c <__sseek>:
 800af1c:	b570      	push	{r4, r5, r6, lr}
 800af1e:	000c      	movs	r4, r1
 800af20:	250e      	movs	r5, #14
 800af22:	5f49      	ldrsh	r1, [r1, r5]
 800af24:	f000 f860 	bl	800afe8 <_lseek_r>
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	1c42      	adds	r2, r0, #1
 800af2c:	d103      	bne.n	800af36 <__sseek+0x1a>
 800af2e:	4a05      	ldr	r2, [pc, #20]	; (800af44 <__sseek+0x28>)
 800af30:	4013      	ands	r3, r2
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	bd70      	pop	{r4, r5, r6, pc}
 800af36:	2280      	movs	r2, #128	; 0x80
 800af38:	0152      	lsls	r2, r2, #5
 800af3a:	4313      	orrs	r3, r2
 800af3c:	81a3      	strh	r3, [r4, #12]
 800af3e:	6560      	str	r0, [r4, #84]	; 0x54
 800af40:	e7f8      	b.n	800af34 <__sseek+0x18>
 800af42:	46c0      	nop			; (mov r8, r8)
 800af44:	ffffefff 	.word	0xffffefff

0800af48 <__sclose>:
 800af48:	b510      	push	{r4, lr}
 800af4a:	230e      	movs	r3, #14
 800af4c:	5ec9      	ldrsh	r1, [r1, r3]
 800af4e:	f000 f815 	bl	800af7c <_close_r>
 800af52:	bd10      	pop	{r4, pc}

0800af54 <_write_r>:
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	0004      	movs	r4, r0
 800af58:	0008      	movs	r0, r1
 800af5a:	0011      	movs	r1, r2
 800af5c:	001a      	movs	r2, r3
 800af5e:	2300      	movs	r3, #0
 800af60:	4d05      	ldr	r5, [pc, #20]	; (800af78 <_write_r+0x24>)
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f8 faa8 	bl	80034b8 <_write>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d103      	bne.n	800af74 <_write_r+0x20>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d000      	beq.n	800af74 <_write_r+0x20>
 800af72:	6023      	str	r3, [r4, #0]
 800af74:	bd70      	pop	{r4, r5, r6, pc}
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	20000350 	.word	0x20000350

0800af7c <_close_r>:
 800af7c:	2300      	movs	r3, #0
 800af7e:	b570      	push	{r4, r5, r6, lr}
 800af80:	4d06      	ldr	r5, [pc, #24]	; (800af9c <_close_r+0x20>)
 800af82:	0004      	movs	r4, r0
 800af84:	0008      	movs	r0, r1
 800af86:	602b      	str	r3, [r5, #0]
 800af88:	f7f8 fab2 	bl	80034f0 <_close>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	d103      	bne.n	800af98 <_close_r+0x1c>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d000      	beq.n	800af98 <_close_r+0x1c>
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	bd70      	pop	{r4, r5, r6, pc}
 800af9a:	46c0      	nop			; (mov r8, r8)
 800af9c:	20000350 	.word	0x20000350

0800afa0 <_fstat_r>:
 800afa0:	2300      	movs	r3, #0
 800afa2:	b570      	push	{r4, r5, r6, lr}
 800afa4:	4d06      	ldr	r5, [pc, #24]	; (800afc0 <_fstat_r+0x20>)
 800afa6:	0004      	movs	r4, r0
 800afa8:	0008      	movs	r0, r1
 800afaa:	0011      	movs	r1, r2
 800afac:	602b      	str	r3, [r5, #0]
 800afae:	f7f8 faa9 	bl	8003504 <_fstat>
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	d103      	bne.n	800afbe <_fstat_r+0x1e>
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d000      	beq.n	800afbe <_fstat_r+0x1e>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	20000350 	.word	0x20000350

0800afc4 <_isatty_r>:
 800afc4:	2300      	movs	r3, #0
 800afc6:	b570      	push	{r4, r5, r6, lr}
 800afc8:	4d06      	ldr	r5, [pc, #24]	; (800afe4 <_isatty_r+0x20>)
 800afca:	0004      	movs	r4, r0
 800afcc:	0008      	movs	r0, r1
 800afce:	602b      	str	r3, [r5, #0]
 800afd0:	f7f8 faa6 	bl	8003520 <_isatty>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d103      	bne.n	800afe0 <_isatty_r+0x1c>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d000      	beq.n	800afe0 <_isatty_r+0x1c>
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	bd70      	pop	{r4, r5, r6, pc}
 800afe2:	46c0      	nop			; (mov r8, r8)
 800afe4:	20000350 	.word	0x20000350

0800afe8 <_lseek_r>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	0004      	movs	r4, r0
 800afec:	0008      	movs	r0, r1
 800afee:	0011      	movs	r1, r2
 800aff0:	001a      	movs	r2, r3
 800aff2:	2300      	movs	r3, #0
 800aff4:	4d05      	ldr	r5, [pc, #20]	; (800b00c <_lseek_r+0x24>)
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	f7f8 fa9b 	bl	8003532 <_lseek>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d103      	bne.n	800b008 <_lseek_r+0x20>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d000      	beq.n	800b008 <_lseek_r+0x20>
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	bd70      	pop	{r4, r5, r6, pc}
 800b00a:	46c0      	nop			; (mov r8, r8)
 800b00c:	20000350 	.word	0x20000350

0800b010 <_read_r>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	0004      	movs	r4, r0
 800b014:	0008      	movs	r0, r1
 800b016:	0011      	movs	r1, r2
 800b018:	001a      	movs	r2, r3
 800b01a:	2300      	movs	r3, #0
 800b01c:	4d05      	ldr	r5, [pc, #20]	; (800b034 <_read_r+0x24>)
 800b01e:	602b      	str	r3, [r5, #0]
 800b020:	f7f8 fa2d 	bl	800347e <_read>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d103      	bne.n	800b030 <_read_r+0x20>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d000      	beq.n	800b030 <_read_r+0x20>
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	bd70      	pop	{r4, r5, r6, pc}
 800b032:	46c0      	nop			; (mov r8, r8)
 800b034:	20000350 	.word	0x20000350

0800b038 <_init>:
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03a:	46c0      	nop			; (mov r8, r8)
 800b03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03e:	bc08      	pop	{r3}
 800b040:	469e      	mov	lr, r3
 800b042:	4770      	bx	lr

0800b044 <_fini>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	46c0      	nop			; (mov r8, r8)
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr
