
science_nucleo_g0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb04  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800cbb8  0800cbb8  0001cbb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d364  0800d364  00020270  2**0
                  CONTENTS
  4 .ARM          00000000  0800d364  0800d364  00020270  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d364  0800d364  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d364  0800d364  0001d364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d368  0800d368  0001d368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  0800d36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000270  0800d5dc  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  0800d5dc  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b80d  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052fa  00000000  00000000  0004baa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001b235  00000000  00000000  00050d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  0006bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000031c8  00000000  00000000  0006d228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3c5  00000000  00000000  000703f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028fd3  00000000  00000000  0008b7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b887  00000000  00000000  000b4788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015000f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f50  00000000  00000000  00150060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000270 	.word	0x20000270
 80000d4:	00000000 	.word	0x00000000
 80000d8:	0800cba0 	.word	0x0800cba0

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000274 	.word	0x20000274
 80000f8:	0800cba0 	.word	0x0800cba0

080000fc <strcmp>:
 80000fc:	7802      	ldrb	r2, [r0, #0]
 80000fe:	780b      	ldrb	r3, [r1, #0]
 8000100:	2a00      	cmp	r2, #0
 8000102:	d003      	beq.n	800010c <strcmp+0x10>
 8000104:	3001      	adds	r0, #1
 8000106:	3101      	adds	r1, #1
 8000108:	429a      	cmp	r2, r3
 800010a:	d0f7      	beq.n	80000fc <strcmp>
 800010c:	1ad0      	subs	r0, r2, r3
 800010e:	4770      	bx	lr

08000110 <strlen>:
 8000110:	2300      	movs	r3, #0
 8000112:	5cc2      	ldrb	r2, [r0, r3]
 8000114:	3301      	adds	r3, #1
 8000116:	2a00      	cmp	r2, #0
 8000118:	d1fb      	bne.n	8000112 <strlen+0x2>
 800011a:	1e58      	subs	r0, r3, #1
 800011c:	4770      	bx	lr
	...

08000120 <__gnu_thumb1_case_uqi>:
 8000120:	b402      	push	{r1}
 8000122:	4671      	mov	r1, lr
 8000124:	0849      	lsrs	r1, r1, #1
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	5c09      	ldrb	r1, [r1, r0]
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	448e      	add	lr, r1
 800012e:	bc02      	pop	{r1}
 8000130:	4770      	bx	lr
 8000132:	46c0      	nop			; (mov r8, r8)

08000134 <__gnu_thumb1_case_shi>:
 8000134:	b403      	push	{r0, r1}
 8000136:	4671      	mov	r1, lr
 8000138:	0849      	lsrs	r1, r1, #1
 800013a:	0040      	lsls	r0, r0, #1
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	5e09      	ldrsh	r1, [r1, r0]
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	448e      	add	lr, r1
 8000144:	bc03      	pop	{r0, r1}
 8000146:	4770      	bx	lr

08000148 <__udivsi3>:
 8000148:	2200      	movs	r2, #0
 800014a:	0843      	lsrs	r3, r0, #1
 800014c:	428b      	cmp	r3, r1
 800014e:	d374      	bcc.n	800023a <__udivsi3+0xf2>
 8000150:	0903      	lsrs	r3, r0, #4
 8000152:	428b      	cmp	r3, r1
 8000154:	d35f      	bcc.n	8000216 <__udivsi3+0xce>
 8000156:	0a03      	lsrs	r3, r0, #8
 8000158:	428b      	cmp	r3, r1
 800015a:	d344      	bcc.n	80001e6 <__udivsi3+0x9e>
 800015c:	0b03      	lsrs	r3, r0, #12
 800015e:	428b      	cmp	r3, r1
 8000160:	d328      	bcc.n	80001b4 <__udivsi3+0x6c>
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d30d      	bcc.n	8000184 <__udivsi3+0x3c>
 8000168:	22ff      	movs	r2, #255	; 0xff
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	ba12      	rev	r2, r2
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d302      	bcc.n	800017a <__udivsi3+0x32>
 8000174:	1212      	asrs	r2, r2, #8
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	d065      	beq.n	8000246 <__udivsi3+0xfe>
 800017a:	0b03      	lsrs	r3, r0, #12
 800017c:	428b      	cmp	r3, r1
 800017e:	d319      	bcc.n	80001b4 <__udivsi3+0x6c>
 8000180:	e000      	b.n	8000184 <__udivsi3+0x3c>
 8000182:	0a09      	lsrs	r1, r1, #8
 8000184:	0bc3      	lsrs	r3, r0, #15
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x46>
 800018a:	03cb      	lsls	r3, r1, #15
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b83      	lsrs	r3, r0, #14
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x52>
 8000196:	038b      	lsls	r3, r1, #14
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b43      	lsrs	r3, r0, #13
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x5e>
 80001a2:	034b      	lsls	r3, r1, #13
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b03      	lsrs	r3, r0, #12
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x6a>
 80001ae:	030b      	lsls	r3, r1, #12
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0ac3      	lsrs	r3, r0, #11
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x76>
 80001ba:	02cb      	lsls	r3, r1, #11
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a83      	lsrs	r3, r0, #10
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x82>
 80001c6:	028b      	lsls	r3, r1, #10
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a43      	lsrs	r3, r0, #9
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x8e>
 80001d2:	024b      	lsls	r3, r1, #9
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a03      	lsrs	r3, r0, #8
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x9a>
 80001de:	020b      	lsls	r3, r1, #8
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	d2cd      	bcs.n	8000182 <__udivsi3+0x3a>
 80001e6:	09c3      	lsrs	r3, r0, #7
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xa8>
 80001ec:	01cb      	lsls	r3, r1, #7
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0983      	lsrs	r3, r0, #6
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xb4>
 80001f8:	018b      	lsls	r3, r1, #6
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0943      	lsrs	r3, r0, #5
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xc0>
 8000204:	014b      	lsls	r3, r1, #5
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0903      	lsrs	r3, r0, #4
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xcc>
 8000210:	010b      	lsls	r3, r1, #4
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	08c3      	lsrs	r3, r0, #3
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xd8>
 800021c:	00cb      	lsls	r3, r1, #3
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0883      	lsrs	r3, r0, #2
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xe4>
 8000228:	008b      	lsls	r3, r1, #2
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0843      	lsrs	r3, r0, #1
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xf0>
 8000234:	004b      	lsls	r3, r1, #1
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	1a41      	subs	r1, r0, r1
 800023c:	d200      	bcs.n	8000240 <__udivsi3+0xf8>
 800023e:	4601      	mov	r1, r0
 8000240:	4152      	adcs	r2, r2
 8000242:	4610      	mov	r0, r2
 8000244:	4770      	bx	lr
 8000246:	e7ff      	b.n	8000248 <__udivsi3+0x100>
 8000248:	b501      	push	{r0, lr}
 800024a:	2000      	movs	r0, #0
 800024c:	f000 f8f0 	bl	8000430 <__aeabi_idiv0>
 8000250:	bd02      	pop	{r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)

08000254 <__aeabi_uidivmod>:
 8000254:	2900      	cmp	r1, #0
 8000256:	d0f7      	beq.n	8000248 <__udivsi3+0x100>
 8000258:	e776      	b.n	8000148 <__udivsi3>
 800025a:	4770      	bx	lr

0800025c <__divsi3>:
 800025c:	4603      	mov	r3, r0
 800025e:	430b      	orrs	r3, r1
 8000260:	d47f      	bmi.n	8000362 <__divsi3+0x106>
 8000262:	2200      	movs	r2, #0
 8000264:	0843      	lsrs	r3, r0, #1
 8000266:	428b      	cmp	r3, r1
 8000268:	d374      	bcc.n	8000354 <__divsi3+0xf8>
 800026a:	0903      	lsrs	r3, r0, #4
 800026c:	428b      	cmp	r3, r1
 800026e:	d35f      	bcc.n	8000330 <__divsi3+0xd4>
 8000270:	0a03      	lsrs	r3, r0, #8
 8000272:	428b      	cmp	r3, r1
 8000274:	d344      	bcc.n	8000300 <__divsi3+0xa4>
 8000276:	0b03      	lsrs	r3, r0, #12
 8000278:	428b      	cmp	r3, r1
 800027a:	d328      	bcc.n	80002ce <__divsi3+0x72>
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d30d      	bcc.n	800029e <__divsi3+0x42>
 8000282:	22ff      	movs	r2, #255	; 0xff
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	ba12      	rev	r2, r2
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d302      	bcc.n	8000294 <__divsi3+0x38>
 800028e:	1212      	asrs	r2, r2, #8
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	d065      	beq.n	8000360 <__divsi3+0x104>
 8000294:	0b03      	lsrs	r3, r0, #12
 8000296:	428b      	cmp	r3, r1
 8000298:	d319      	bcc.n	80002ce <__divsi3+0x72>
 800029a:	e000      	b.n	800029e <__divsi3+0x42>
 800029c:	0a09      	lsrs	r1, r1, #8
 800029e:	0bc3      	lsrs	r3, r0, #15
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x4c>
 80002a4:	03cb      	lsls	r3, r1, #15
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b83      	lsrs	r3, r0, #14
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x58>
 80002b0:	038b      	lsls	r3, r1, #14
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b43      	lsrs	r3, r0, #13
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x64>
 80002bc:	034b      	lsls	r3, r1, #13
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b03      	lsrs	r3, r0, #12
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x70>
 80002c8:	030b      	lsls	r3, r1, #12
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0ac3      	lsrs	r3, r0, #11
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x7c>
 80002d4:	02cb      	lsls	r3, r1, #11
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a83      	lsrs	r3, r0, #10
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x88>
 80002e0:	028b      	lsls	r3, r1, #10
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a43      	lsrs	r3, r0, #9
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x94>
 80002ec:	024b      	lsls	r3, r1, #9
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a03      	lsrs	r3, r0, #8
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0xa0>
 80002f8:	020b      	lsls	r3, r1, #8
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	d2cd      	bcs.n	800029c <__divsi3+0x40>
 8000300:	09c3      	lsrs	r3, r0, #7
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xae>
 8000306:	01cb      	lsls	r3, r1, #7
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0983      	lsrs	r3, r0, #6
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xba>
 8000312:	018b      	lsls	r3, r1, #6
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0943      	lsrs	r3, r0, #5
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xc6>
 800031e:	014b      	lsls	r3, r1, #5
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0903      	lsrs	r3, r0, #4
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xd2>
 800032a:	010b      	lsls	r3, r1, #4
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	08c3      	lsrs	r3, r0, #3
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xde>
 8000336:	00cb      	lsls	r3, r1, #3
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0883      	lsrs	r3, r0, #2
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xea>
 8000342:	008b      	lsls	r3, r1, #2
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0843      	lsrs	r3, r0, #1
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xf6>
 800034e:	004b      	lsls	r3, r1, #1
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	1a41      	subs	r1, r0, r1
 8000356:	d200      	bcs.n	800035a <__divsi3+0xfe>
 8000358:	4601      	mov	r1, r0
 800035a:	4152      	adcs	r2, r2
 800035c:	4610      	mov	r0, r2
 800035e:	4770      	bx	lr
 8000360:	e05d      	b.n	800041e <__divsi3+0x1c2>
 8000362:	0fca      	lsrs	r2, r1, #31
 8000364:	d000      	beq.n	8000368 <__divsi3+0x10c>
 8000366:	4249      	negs	r1, r1
 8000368:	1003      	asrs	r3, r0, #32
 800036a:	d300      	bcc.n	800036e <__divsi3+0x112>
 800036c:	4240      	negs	r0, r0
 800036e:	4053      	eors	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	469c      	mov	ip, r3
 8000374:	0903      	lsrs	r3, r0, #4
 8000376:	428b      	cmp	r3, r1
 8000378:	d32d      	bcc.n	80003d6 <__divsi3+0x17a>
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d312      	bcc.n	80003a6 <__divsi3+0x14a>
 8000380:	22fc      	movs	r2, #252	; 0xfc
 8000382:	0189      	lsls	r1, r1, #6
 8000384:	ba12      	rev	r2, r2
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d30c      	bcc.n	80003a6 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d308      	bcc.n	80003a6 <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d304      	bcc.n	80003a6 <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	d03a      	beq.n	8000416 <__divsi3+0x1ba>
 80003a0:	1192      	asrs	r2, r2, #6
 80003a2:	e000      	b.n	80003a6 <__divsi3+0x14a>
 80003a4:	0989      	lsrs	r1, r1, #6
 80003a6:	09c3      	lsrs	r3, r0, #7
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x154>
 80003ac:	01cb      	lsls	r3, r1, #7
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0983      	lsrs	r3, r0, #6
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x160>
 80003b8:	018b      	lsls	r3, r1, #6
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0943      	lsrs	r3, r0, #5
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x16c>
 80003c4:	014b      	lsls	r3, r1, #5
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0903      	lsrs	r3, r0, #4
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x178>
 80003d0:	010b      	lsls	r3, r1, #4
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	08c3      	lsrs	r3, r0, #3
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x184>
 80003dc:	00cb      	lsls	r3, r1, #3
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	0883      	lsrs	r3, r0, #2
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x190>
 80003e8:	008b      	lsls	r3, r1, #2
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	d2d9      	bcs.n	80003a4 <__divsi3+0x148>
 80003f0:	0843      	lsrs	r3, r0, #1
 80003f2:	428b      	cmp	r3, r1
 80003f4:	d301      	bcc.n	80003fa <__divsi3+0x19e>
 80003f6:	004b      	lsls	r3, r1, #1
 80003f8:	1ac0      	subs	r0, r0, r3
 80003fa:	4152      	adcs	r2, r2
 80003fc:	1a41      	subs	r1, r0, r1
 80003fe:	d200      	bcs.n	8000402 <__divsi3+0x1a6>
 8000400:	4601      	mov	r1, r0
 8000402:	4663      	mov	r3, ip
 8000404:	4152      	adcs	r2, r2
 8000406:	105b      	asrs	r3, r3, #1
 8000408:	4610      	mov	r0, r2
 800040a:	d301      	bcc.n	8000410 <__divsi3+0x1b4>
 800040c:	4240      	negs	r0, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d500      	bpl.n	8000414 <__divsi3+0x1b8>
 8000412:	4249      	negs	r1, r1
 8000414:	4770      	bx	lr
 8000416:	4663      	mov	r3, ip
 8000418:	105b      	asrs	r3, r3, #1
 800041a:	d300      	bcc.n	800041e <__divsi3+0x1c2>
 800041c:	4240      	negs	r0, r0
 800041e:	b501      	push	{r0, lr}
 8000420:	2000      	movs	r0, #0
 8000422:	f000 f805 	bl	8000430 <__aeabi_idiv0>
 8000426:	bd02      	pop	{r1, pc}

08000428 <__aeabi_idivmod>:
 8000428:	2900      	cmp	r1, #0
 800042a:	d0f8      	beq.n	800041e <__divsi3+0x1c2>
 800042c:	e716      	b.n	800025c <__divsi3>
 800042e:	4770      	bx	lr

08000430 <__aeabi_idiv0>:
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdrcmple>:
 8000434:	4684      	mov	ip, r0
 8000436:	0010      	movs	r0, r2
 8000438:	4662      	mov	r2, ip
 800043a:	468c      	mov	ip, r1
 800043c:	0019      	movs	r1, r3
 800043e:	4663      	mov	r3, ip
 8000440:	e000      	b.n	8000444 <__aeabi_cdcmpeq>
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_cdcmpeq>:
 8000444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000446:	f001 fe2f 	bl	80020a8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	d401      	bmi.n	8000452 <__aeabi_cdcmpeq+0xe>
 800044e:	2100      	movs	r1, #0
 8000450:	42c8      	cmn	r0, r1
 8000452:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000454 <__aeabi_dcmpeq>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 fd7f 	bl	8001f58 <__eqdf2>
 800045a:	4240      	negs	r0, r0
 800045c:	3001      	adds	r0, #1
 800045e:	bd10      	pop	{r4, pc}

08000460 <__aeabi_dcmplt>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fe21 	bl	80020a8 <__ledf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	db01      	blt.n	800046e <__aeabi_dcmplt+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_dcmple>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 fe17 	bl	80020a8 <__ledf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	dd01      	ble.n	8000482 <__aeabi_dcmple+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_dcmpgt>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f001 fda7 	bl	8001fdc <__gedf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	dc01      	bgt.n	8000496 <__aeabi_dcmpgt+0xe>
 8000492:	2000      	movs	r0, #0
 8000494:	bd10      	pop	{r4, pc}
 8000496:	2001      	movs	r0, #1
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_dcmpge>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f001 fd9d 	bl	8001fdc <__gedf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	da01      	bge.n	80004aa <__aeabi_dcmpge+0xe>
 80004a6:	2000      	movs	r0, #0
 80004a8:	bd10      	pop	{r4, pc}
 80004aa:	2001      	movs	r0, #1
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_cfrcmple>:
 80004b0:	4684      	mov	ip, r0
 80004b2:	0008      	movs	r0, r1
 80004b4:	4661      	mov	r1, ip
 80004b6:	e7ff      	b.n	80004b8 <__aeabi_cfcmpeq>

080004b8 <__aeabi_cfcmpeq>:
 80004b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ba:	f000 fb73 	bl	8000ba4 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	d401      	bmi.n	80004c6 <__aeabi_cfcmpeq+0xe>
 80004c2:	2100      	movs	r1, #0
 80004c4:	42c8      	cmn	r0, r1
 80004c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c8 <__aeabi_fcmpeq>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 faff 	bl	8000acc <__eqsf2>
 80004ce:	4240      	negs	r0, r0
 80004d0:	3001      	adds	r0, #1
 80004d2:	bd10      	pop	{r4, pc}

080004d4 <__aeabi_fcmplt>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 fb65 	bl	8000ba4 <__lesf2>
 80004da:	2800      	cmp	r0, #0
 80004dc:	db01      	blt.n	80004e2 <__aeabi_fcmplt+0xe>
 80004de:	2000      	movs	r0, #0
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	2001      	movs	r0, #1
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_fcmple>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 fb5b 	bl	8000ba4 <__lesf2>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	dd01      	ble.n	80004f6 <__aeabi_fcmple+0xe>
 80004f2:	2000      	movs	r0, #0
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	2001      	movs	r0, #1
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_fcmpgt>:
 80004fc:	b510      	push	{r4, lr}
 80004fe:	f000 fb0b 	bl	8000b18 <__gesf2>
 8000502:	2800      	cmp	r0, #0
 8000504:	dc01      	bgt.n	800050a <__aeabi_fcmpgt+0xe>
 8000506:	2000      	movs	r0, #0
 8000508:	bd10      	pop	{r4, pc}
 800050a:	2001      	movs	r0, #1
 800050c:	bd10      	pop	{r4, pc}
 800050e:	46c0      	nop			; (mov r8, r8)

08000510 <__aeabi_fcmpge>:
 8000510:	b510      	push	{r4, lr}
 8000512:	f000 fb01 	bl	8000b18 <__gesf2>
 8000516:	2800      	cmp	r0, #0
 8000518:	da01      	bge.n	800051e <__aeabi_fcmpge+0xe>
 800051a:	2000      	movs	r0, #0
 800051c:	bd10      	pop	{r4, pc}
 800051e:	2001      	movs	r0, #1
 8000520:	bd10      	pop	{r4, pc}
 8000522:	46c0      	nop			; (mov r8, r8)

08000524 <__aeabi_d2uiz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2200      	movs	r2, #0
 8000528:	4b0c      	ldr	r3, [pc, #48]	; (800055c <__aeabi_d2uiz+0x38>)
 800052a:	0004      	movs	r4, r0
 800052c:	000d      	movs	r5, r1
 800052e:	f7ff ffb5 	bl	800049c <__aeabi_dcmpge>
 8000532:	2800      	cmp	r0, #0
 8000534:	d104      	bne.n	8000540 <__aeabi_d2uiz+0x1c>
 8000536:	0020      	movs	r0, r4
 8000538:	0029      	movs	r1, r5
 800053a:	f002 fc35 	bl	8002da8 <__aeabi_d2iz>
 800053e:	bd70      	pop	{r4, r5, r6, pc}
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <__aeabi_d2uiz+0x38>)
 8000542:	2200      	movs	r2, #0
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f002 f87e 	bl	8002648 <__aeabi_dsub>
 800054c:	f002 fc2c 	bl	8002da8 <__aeabi_d2iz>
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	061b      	lsls	r3, r3, #24
 8000554:	469c      	mov	ip, r3
 8000556:	4460      	add	r0, ip
 8000558:	e7f1      	b.n	800053e <__aeabi_d2uiz+0x1a>
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	41e00000 	.word	0x41e00000

08000560 <__aeabi_fadd>:
 8000560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000562:	46c6      	mov	lr, r8
 8000564:	0243      	lsls	r3, r0, #9
 8000566:	0a5b      	lsrs	r3, r3, #9
 8000568:	024e      	lsls	r6, r1, #9
 800056a:	0045      	lsls	r5, r0, #1
 800056c:	004f      	lsls	r7, r1, #1
 800056e:	00da      	lsls	r2, r3, #3
 8000570:	0fc4      	lsrs	r4, r0, #31
 8000572:	469c      	mov	ip, r3
 8000574:	0a70      	lsrs	r0, r6, #9
 8000576:	4690      	mov	r8, r2
 8000578:	b500      	push	{lr}
 800057a:	0e2d      	lsrs	r5, r5, #24
 800057c:	0e3f      	lsrs	r7, r7, #24
 800057e:	0fc9      	lsrs	r1, r1, #31
 8000580:	09b6      	lsrs	r6, r6, #6
 8000582:	428c      	cmp	r4, r1
 8000584:	d04b      	beq.n	800061e <__aeabi_fadd+0xbe>
 8000586:	1bea      	subs	r2, r5, r7
 8000588:	2a00      	cmp	r2, #0
 800058a:	dd36      	ble.n	80005fa <__aeabi_fadd+0x9a>
 800058c:	2f00      	cmp	r7, #0
 800058e:	d061      	beq.n	8000654 <__aeabi_fadd+0xf4>
 8000590:	2dff      	cmp	r5, #255	; 0xff
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0x36>
 8000594:	e0ad      	b.n	80006f2 <__aeabi_fadd+0x192>
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	04db      	lsls	r3, r3, #19
 800059a:	431e      	orrs	r6, r3
 800059c:	2a1b      	cmp	r2, #27
 800059e:	dc00      	bgt.n	80005a2 <__aeabi_fadd+0x42>
 80005a0:	e0d3      	b.n	800074a <__aeabi_fadd+0x1ea>
 80005a2:	2001      	movs	r0, #1
 80005a4:	4643      	mov	r3, r8
 80005a6:	1a18      	subs	r0, r3, r0
 80005a8:	0143      	lsls	r3, r0, #5
 80005aa:	d400      	bmi.n	80005ae <__aeabi_fadd+0x4e>
 80005ac:	e08c      	b.n	80006c8 <__aeabi_fadd+0x168>
 80005ae:	0180      	lsls	r0, r0, #6
 80005b0:	0987      	lsrs	r7, r0, #6
 80005b2:	0038      	movs	r0, r7
 80005b4:	f002 fd54 	bl	8003060 <__clzsi2>
 80005b8:	3805      	subs	r0, #5
 80005ba:	4087      	lsls	r7, r0
 80005bc:	4285      	cmp	r5, r0
 80005be:	dc00      	bgt.n	80005c2 <__aeabi_fadd+0x62>
 80005c0:	e0b6      	b.n	8000730 <__aeabi_fadd+0x1d0>
 80005c2:	1a2d      	subs	r5, r5, r0
 80005c4:	48b3      	ldr	r0, [pc, #716]	; (8000894 <__aeabi_fadd+0x334>)
 80005c6:	4038      	ands	r0, r7
 80005c8:	0743      	lsls	r3, r0, #29
 80005ca:	d004      	beq.n	80005d6 <__aeabi_fadd+0x76>
 80005cc:	230f      	movs	r3, #15
 80005ce:	4003      	ands	r3, r0
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fadd+0x76>
 80005d4:	3004      	adds	r0, #4
 80005d6:	0143      	lsls	r3, r0, #5
 80005d8:	d400      	bmi.n	80005dc <__aeabi_fadd+0x7c>
 80005da:	e078      	b.n	80006ce <__aeabi_fadd+0x16e>
 80005dc:	1c6a      	adds	r2, r5, #1
 80005de:	2dfe      	cmp	r5, #254	; 0xfe
 80005e0:	d065      	beq.n	80006ae <__aeabi_fadd+0x14e>
 80005e2:	0180      	lsls	r0, r0, #6
 80005e4:	0a43      	lsrs	r3, r0, #9
 80005e6:	469c      	mov	ip, r3
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	4663      	mov	r3, ip
 80005ec:	05d0      	lsls	r0, r2, #23
 80005ee:	4318      	orrs	r0, r3
 80005f0:	07e4      	lsls	r4, r4, #31
 80005f2:	4320      	orrs	r0, r4
 80005f4:	bc80      	pop	{r7}
 80005f6:	46b8      	mov	r8, r7
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	d035      	beq.n	800066a <__aeabi_fadd+0x10a>
 80005fe:	1b7a      	subs	r2, r7, r5
 8000600:	2d00      	cmp	r5, #0
 8000602:	d000      	beq.n	8000606 <__aeabi_fadd+0xa6>
 8000604:	e0af      	b.n	8000766 <__aeabi_fadd+0x206>
 8000606:	4643      	mov	r3, r8
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0xae>
 800060c:	e0a7      	b.n	800075e <__aeabi_fadd+0x1fe>
 800060e:	1e53      	subs	r3, r2, #1
 8000610:	2a01      	cmp	r2, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0xb6>
 8000614:	e12f      	b.n	8000876 <__aeabi_fadd+0x316>
 8000616:	2aff      	cmp	r2, #255	; 0xff
 8000618:	d069      	beq.n	80006ee <__aeabi_fadd+0x18e>
 800061a:	001a      	movs	r2, r3
 800061c:	e0aa      	b.n	8000774 <__aeabi_fadd+0x214>
 800061e:	1be9      	subs	r1, r5, r7
 8000620:	2900      	cmp	r1, #0
 8000622:	dd70      	ble.n	8000706 <__aeabi_fadd+0x1a6>
 8000624:	2f00      	cmp	r7, #0
 8000626:	d037      	beq.n	8000698 <__aeabi_fadd+0x138>
 8000628:	2dff      	cmp	r5, #255	; 0xff
 800062a:	d062      	beq.n	80006f2 <__aeabi_fadd+0x192>
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	04db      	lsls	r3, r3, #19
 8000630:	431e      	orrs	r6, r3
 8000632:	291b      	cmp	r1, #27
 8000634:	dc00      	bgt.n	8000638 <__aeabi_fadd+0xd8>
 8000636:	e0b0      	b.n	800079a <__aeabi_fadd+0x23a>
 8000638:	2001      	movs	r0, #1
 800063a:	4440      	add	r0, r8
 800063c:	0143      	lsls	r3, r0, #5
 800063e:	d543      	bpl.n	80006c8 <__aeabi_fadd+0x168>
 8000640:	3501      	adds	r5, #1
 8000642:	2dff      	cmp	r5, #255	; 0xff
 8000644:	d033      	beq.n	80006ae <__aeabi_fadd+0x14e>
 8000646:	2301      	movs	r3, #1
 8000648:	4a93      	ldr	r2, [pc, #588]	; (8000898 <__aeabi_fadd+0x338>)
 800064a:	4003      	ands	r3, r0
 800064c:	0840      	lsrs	r0, r0, #1
 800064e:	4010      	ands	r0, r2
 8000650:	4318      	orrs	r0, r3
 8000652:	e7b9      	b.n	80005c8 <__aeabi_fadd+0x68>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0xfa>
 8000658:	e083      	b.n	8000762 <__aeabi_fadd+0x202>
 800065a:	1e51      	subs	r1, r2, #1
 800065c:	2a01      	cmp	r2, #1
 800065e:	d100      	bne.n	8000662 <__aeabi_fadd+0x102>
 8000660:	e0d8      	b.n	8000814 <__aeabi_fadd+0x2b4>
 8000662:	2aff      	cmp	r2, #255	; 0xff
 8000664:	d045      	beq.n	80006f2 <__aeabi_fadd+0x192>
 8000666:	000a      	movs	r2, r1
 8000668:	e798      	b.n	800059c <__aeabi_fadd+0x3c>
 800066a:	27fe      	movs	r7, #254	; 0xfe
 800066c:	1c6a      	adds	r2, r5, #1
 800066e:	4217      	tst	r7, r2
 8000670:	d000      	beq.n	8000674 <__aeabi_fadd+0x114>
 8000672:	e086      	b.n	8000782 <__aeabi_fadd+0x222>
 8000674:	2d00      	cmp	r5, #0
 8000676:	d000      	beq.n	800067a <__aeabi_fadd+0x11a>
 8000678:	e0b7      	b.n	80007ea <__aeabi_fadd+0x28a>
 800067a:	4643      	mov	r3, r8
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x122>
 8000680:	e0f3      	b.n	800086a <__aeabi_fadd+0x30a>
 8000682:	2200      	movs	r2, #0
 8000684:	2e00      	cmp	r6, #0
 8000686:	d0b0      	beq.n	80005ea <__aeabi_fadd+0x8a>
 8000688:	1b98      	subs	r0, r3, r6
 800068a:	0143      	lsls	r3, r0, #5
 800068c:	d400      	bmi.n	8000690 <__aeabi_fadd+0x130>
 800068e:	e0fa      	b.n	8000886 <__aeabi_fadd+0x326>
 8000690:	4643      	mov	r3, r8
 8000692:	000c      	movs	r4, r1
 8000694:	1af0      	subs	r0, r6, r3
 8000696:	e797      	b.n	80005c8 <__aeabi_fadd+0x68>
 8000698:	2e00      	cmp	r6, #0
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x13e>
 800069c:	e0c8      	b.n	8000830 <__aeabi_fadd+0x2d0>
 800069e:	1e4a      	subs	r2, r1, #1
 80006a0:	2901      	cmp	r1, #1
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x146>
 80006a4:	e0ae      	b.n	8000804 <__aeabi_fadd+0x2a4>
 80006a6:	29ff      	cmp	r1, #255	; 0xff
 80006a8:	d023      	beq.n	80006f2 <__aeabi_fadd+0x192>
 80006aa:	0011      	movs	r1, r2
 80006ac:	e7c1      	b.n	8000632 <__aeabi_fadd+0xd2>
 80006ae:	2300      	movs	r3, #0
 80006b0:	22ff      	movs	r2, #255	; 0xff
 80006b2:	469c      	mov	ip, r3
 80006b4:	e799      	b.n	80005ea <__aeabi_fadd+0x8a>
 80006b6:	21fe      	movs	r1, #254	; 0xfe
 80006b8:	1c6a      	adds	r2, r5, #1
 80006ba:	4211      	tst	r1, r2
 80006bc:	d077      	beq.n	80007ae <__aeabi_fadd+0x24e>
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d0f5      	beq.n	80006ae <__aeabi_fadd+0x14e>
 80006c2:	0015      	movs	r5, r2
 80006c4:	4446      	add	r6, r8
 80006c6:	0870      	lsrs	r0, r6, #1
 80006c8:	0743      	lsls	r3, r0, #29
 80006ca:	d000      	beq.n	80006ce <__aeabi_fadd+0x16e>
 80006cc:	e77e      	b.n	80005cc <__aeabi_fadd+0x6c>
 80006ce:	08c3      	lsrs	r3, r0, #3
 80006d0:	2dff      	cmp	r5, #255	; 0xff
 80006d2:	d00e      	beq.n	80006f2 <__aeabi_fadd+0x192>
 80006d4:	025b      	lsls	r3, r3, #9
 80006d6:	0a5b      	lsrs	r3, r3, #9
 80006d8:	469c      	mov	ip, r3
 80006da:	b2ea      	uxtb	r2, r5
 80006dc:	e785      	b.n	80005ea <__aeabi_fadd+0x8a>
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d007      	beq.n	80006f2 <__aeabi_fadd+0x192>
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	03d2      	lsls	r2, r2, #15
 80006e6:	4213      	tst	r3, r2
 80006e8:	d003      	beq.n	80006f2 <__aeabi_fadd+0x192>
 80006ea:	4210      	tst	r0, r2
 80006ec:	d101      	bne.n	80006f2 <__aeabi_fadd+0x192>
 80006ee:	000c      	movs	r4, r1
 80006f0:	0003      	movs	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0db      	beq.n	80006ae <__aeabi_fadd+0x14e>
 80006f6:	2080      	movs	r0, #128	; 0x80
 80006f8:	03c0      	lsls	r0, r0, #15
 80006fa:	4318      	orrs	r0, r3
 80006fc:	0240      	lsls	r0, r0, #9
 80006fe:	0a43      	lsrs	r3, r0, #9
 8000700:	469c      	mov	ip, r3
 8000702:	22ff      	movs	r2, #255	; 0xff
 8000704:	e771      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000706:	2900      	cmp	r1, #0
 8000708:	d0d5      	beq.n	80006b6 <__aeabi_fadd+0x156>
 800070a:	1b7a      	subs	r2, r7, r5
 800070c:	2d00      	cmp	r5, #0
 800070e:	d160      	bne.n	80007d2 <__aeabi_fadd+0x272>
 8000710:	4643      	mov	r3, r8
 8000712:	2b00      	cmp	r3, #0
 8000714:	d024      	beq.n	8000760 <__aeabi_fadd+0x200>
 8000716:	1e53      	subs	r3, r2, #1
 8000718:	2a01      	cmp	r2, #1
 800071a:	d073      	beq.n	8000804 <__aeabi_fadd+0x2a4>
 800071c:	2aff      	cmp	r2, #255	; 0xff
 800071e:	d0e7      	beq.n	80006f0 <__aeabi_fadd+0x190>
 8000720:	001a      	movs	r2, r3
 8000722:	2a1b      	cmp	r2, #27
 8000724:	dc00      	bgt.n	8000728 <__aeabi_fadd+0x1c8>
 8000726:	e085      	b.n	8000834 <__aeabi_fadd+0x2d4>
 8000728:	2001      	movs	r0, #1
 800072a:	003d      	movs	r5, r7
 800072c:	1980      	adds	r0, r0, r6
 800072e:	e785      	b.n	800063c <__aeabi_fadd+0xdc>
 8000730:	2320      	movs	r3, #32
 8000732:	003a      	movs	r2, r7
 8000734:	1b45      	subs	r5, r0, r5
 8000736:	0038      	movs	r0, r7
 8000738:	3501      	adds	r5, #1
 800073a:	40ea      	lsrs	r2, r5
 800073c:	1b5d      	subs	r5, r3, r5
 800073e:	40a8      	lsls	r0, r5
 8000740:	1e43      	subs	r3, r0, #1
 8000742:	4198      	sbcs	r0, r3
 8000744:	2500      	movs	r5, #0
 8000746:	4310      	orrs	r0, r2
 8000748:	e73e      	b.n	80005c8 <__aeabi_fadd+0x68>
 800074a:	2320      	movs	r3, #32
 800074c:	0030      	movs	r0, r6
 800074e:	1a9b      	subs	r3, r3, r2
 8000750:	0031      	movs	r1, r6
 8000752:	4098      	lsls	r0, r3
 8000754:	40d1      	lsrs	r1, r2
 8000756:	1e43      	subs	r3, r0, #1
 8000758:	4198      	sbcs	r0, r3
 800075a:	4308      	orrs	r0, r1
 800075c:	e722      	b.n	80005a4 <__aeabi_fadd+0x44>
 800075e:	000c      	movs	r4, r1
 8000760:	0003      	movs	r3, r0
 8000762:	0015      	movs	r5, r2
 8000764:	e7b4      	b.n	80006d0 <__aeabi_fadd+0x170>
 8000766:	2fff      	cmp	r7, #255	; 0xff
 8000768:	d0c1      	beq.n	80006ee <__aeabi_fadd+0x18e>
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	4640      	mov	r0, r8
 800076e:	04db      	lsls	r3, r3, #19
 8000770:	4318      	orrs	r0, r3
 8000772:	4680      	mov	r8, r0
 8000774:	2a1b      	cmp	r2, #27
 8000776:	dd51      	ble.n	800081c <__aeabi_fadd+0x2bc>
 8000778:	2001      	movs	r0, #1
 800077a:	000c      	movs	r4, r1
 800077c:	003d      	movs	r5, r7
 800077e:	1a30      	subs	r0, r6, r0
 8000780:	e712      	b.n	80005a8 <__aeabi_fadd+0x48>
 8000782:	4643      	mov	r3, r8
 8000784:	1b9f      	subs	r7, r3, r6
 8000786:	017b      	lsls	r3, r7, #5
 8000788:	d42b      	bmi.n	80007e2 <__aeabi_fadd+0x282>
 800078a:	2f00      	cmp	r7, #0
 800078c:	d000      	beq.n	8000790 <__aeabi_fadd+0x230>
 800078e:	e710      	b.n	80005b2 <__aeabi_fadd+0x52>
 8000790:	2300      	movs	r3, #0
 8000792:	2400      	movs	r4, #0
 8000794:	2200      	movs	r2, #0
 8000796:	469c      	mov	ip, r3
 8000798:	e727      	b.n	80005ea <__aeabi_fadd+0x8a>
 800079a:	2320      	movs	r3, #32
 800079c:	0032      	movs	r2, r6
 800079e:	0030      	movs	r0, r6
 80007a0:	40ca      	lsrs	r2, r1
 80007a2:	1a59      	subs	r1, r3, r1
 80007a4:	4088      	lsls	r0, r1
 80007a6:	1e43      	subs	r3, r0, #1
 80007a8:	4198      	sbcs	r0, r3
 80007aa:	4310      	orrs	r0, r2
 80007ac:	e745      	b.n	800063a <__aeabi_fadd+0xda>
 80007ae:	2d00      	cmp	r5, #0
 80007b0:	d14a      	bne.n	8000848 <__aeabi_fadd+0x2e8>
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d063      	beq.n	8000880 <__aeabi_fadd+0x320>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2e00      	cmp	r6, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x260>
 80007be:	e714      	b.n	80005ea <__aeabi_fadd+0x8a>
 80007c0:	0030      	movs	r0, r6
 80007c2:	4440      	add	r0, r8
 80007c4:	0143      	lsls	r3, r0, #5
 80007c6:	d400      	bmi.n	80007ca <__aeabi_fadd+0x26a>
 80007c8:	e77e      	b.n	80006c8 <__aeabi_fadd+0x168>
 80007ca:	4b32      	ldr	r3, [pc, #200]	; (8000894 <__aeabi_fadd+0x334>)
 80007cc:	3501      	adds	r5, #1
 80007ce:	4018      	ands	r0, r3
 80007d0:	e77a      	b.n	80006c8 <__aeabi_fadd+0x168>
 80007d2:	2fff      	cmp	r7, #255	; 0xff
 80007d4:	d08c      	beq.n	80006f0 <__aeabi_fadd+0x190>
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	4641      	mov	r1, r8
 80007da:	04db      	lsls	r3, r3, #19
 80007dc:	4319      	orrs	r1, r3
 80007de:	4688      	mov	r8, r1
 80007e0:	e79f      	b.n	8000722 <__aeabi_fadd+0x1c2>
 80007e2:	4643      	mov	r3, r8
 80007e4:	000c      	movs	r4, r1
 80007e6:	1af7      	subs	r7, r6, r3
 80007e8:	e6e3      	b.n	80005b2 <__aeabi_fadd+0x52>
 80007ea:	4642      	mov	r2, r8
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fadd+0x292>
 80007f0:	e775      	b.n	80006de <__aeabi_fadd+0x17e>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fadd+0x298>
 80007f6:	e77a      	b.n	80006ee <__aeabi_fadd+0x18e>
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	03db      	lsls	r3, r3, #15
 80007fc:	2400      	movs	r4, #0
 80007fe:	469c      	mov	ip, r3
 8000800:	22ff      	movs	r2, #255	; 0xff
 8000802:	e6f2      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000804:	0030      	movs	r0, r6
 8000806:	4440      	add	r0, r8
 8000808:	2501      	movs	r5, #1
 800080a:	0143      	lsls	r3, r0, #5
 800080c:	d400      	bmi.n	8000810 <__aeabi_fadd+0x2b0>
 800080e:	e75b      	b.n	80006c8 <__aeabi_fadd+0x168>
 8000810:	2502      	movs	r5, #2
 8000812:	e718      	b.n	8000646 <__aeabi_fadd+0xe6>
 8000814:	4643      	mov	r3, r8
 8000816:	2501      	movs	r5, #1
 8000818:	1b98      	subs	r0, r3, r6
 800081a:	e6c5      	b.n	80005a8 <__aeabi_fadd+0x48>
 800081c:	2320      	movs	r3, #32
 800081e:	4644      	mov	r4, r8
 8000820:	4640      	mov	r0, r8
 8000822:	40d4      	lsrs	r4, r2
 8000824:	1a9a      	subs	r2, r3, r2
 8000826:	4090      	lsls	r0, r2
 8000828:	1e43      	subs	r3, r0, #1
 800082a:	4198      	sbcs	r0, r3
 800082c:	4320      	orrs	r0, r4
 800082e:	e7a4      	b.n	800077a <__aeabi_fadd+0x21a>
 8000830:	000d      	movs	r5, r1
 8000832:	e74d      	b.n	80006d0 <__aeabi_fadd+0x170>
 8000834:	2320      	movs	r3, #32
 8000836:	4641      	mov	r1, r8
 8000838:	4640      	mov	r0, r8
 800083a:	40d1      	lsrs	r1, r2
 800083c:	1a9a      	subs	r2, r3, r2
 800083e:	4090      	lsls	r0, r2
 8000840:	1e43      	subs	r3, r0, #1
 8000842:	4198      	sbcs	r0, r3
 8000844:	4308      	orrs	r0, r1
 8000846:	e770      	b.n	800072a <__aeabi_fadd+0x1ca>
 8000848:	4642      	mov	r2, r8
 800084a:	2a00      	cmp	r2, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x2f0>
 800084e:	e74f      	b.n	80006f0 <__aeabi_fadd+0x190>
 8000850:	2e00      	cmp	r6, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x2f6>
 8000854:	e74d      	b.n	80006f2 <__aeabi_fadd+0x192>
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	03d2      	lsls	r2, r2, #15
 800085a:	4213      	tst	r3, r2
 800085c:	d100      	bne.n	8000860 <__aeabi_fadd+0x300>
 800085e:	e748      	b.n	80006f2 <__aeabi_fadd+0x192>
 8000860:	4210      	tst	r0, r2
 8000862:	d000      	beq.n	8000866 <__aeabi_fadd+0x306>
 8000864:	e745      	b.n	80006f2 <__aeabi_fadd+0x192>
 8000866:	0003      	movs	r3, r0
 8000868:	e743      	b.n	80006f2 <__aeabi_fadd+0x192>
 800086a:	2e00      	cmp	r6, #0
 800086c:	d090      	beq.n	8000790 <__aeabi_fadd+0x230>
 800086e:	000c      	movs	r4, r1
 8000870:	4684      	mov	ip, r0
 8000872:	2200      	movs	r2, #0
 8000874:	e6b9      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000876:	4643      	mov	r3, r8
 8000878:	000c      	movs	r4, r1
 800087a:	1af0      	subs	r0, r6, r3
 800087c:	3501      	adds	r5, #1
 800087e:	e693      	b.n	80005a8 <__aeabi_fadd+0x48>
 8000880:	4684      	mov	ip, r0
 8000882:	2200      	movs	r2, #0
 8000884:	e6b1      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000886:	2800      	cmp	r0, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fadd+0x32c>
 800088a:	e71d      	b.n	80006c8 <__aeabi_fadd+0x168>
 800088c:	2300      	movs	r3, #0
 800088e:	2400      	movs	r4, #0
 8000890:	469c      	mov	ip, r3
 8000892:	e6aa      	b.n	80005ea <__aeabi_fadd+0x8a>
 8000894:	fbffffff 	.word	0xfbffffff
 8000898:	7dffffff 	.word	0x7dffffff

0800089c <__aeabi_fdiv>:
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	464f      	mov	r7, r9
 80008a0:	4646      	mov	r6, r8
 80008a2:	46d6      	mov	lr, sl
 80008a4:	0245      	lsls	r5, r0, #9
 80008a6:	b5c0      	push	{r6, r7, lr}
 80008a8:	0047      	lsls	r7, r0, #1
 80008aa:	1c0c      	adds	r4, r1, #0
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e3f      	lsrs	r7, r7, #24
 80008b0:	0fc6      	lsrs	r6, r0, #31
 80008b2:	2f00      	cmp	r7, #0
 80008b4:	d100      	bne.n	80008b8 <__aeabi_fdiv+0x1c>
 80008b6:	e070      	b.n	800099a <__aeabi_fdiv+0xfe>
 80008b8:	2fff      	cmp	r7, #255	; 0xff
 80008ba:	d100      	bne.n	80008be <__aeabi_fdiv+0x22>
 80008bc:	e075      	b.n	80009aa <__aeabi_fdiv+0x10e>
 80008be:	00eb      	lsls	r3, r5, #3
 80008c0:	2580      	movs	r5, #128	; 0x80
 80008c2:	04ed      	lsls	r5, r5, #19
 80008c4:	431d      	orrs	r5, r3
 80008c6:	2300      	movs	r3, #0
 80008c8:	4699      	mov	r9, r3
 80008ca:	469a      	mov	sl, r3
 80008cc:	3f7f      	subs	r7, #127	; 0x7f
 80008ce:	0260      	lsls	r0, r4, #9
 80008d0:	0a43      	lsrs	r3, r0, #9
 80008d2:	4698      	mov	r8, r3
 80008d4:	0063      	lsls	r3, r4, #1
 80008d6:	0e1b      	lsrs	r3, r3, #24
 80008d8:	0fe4      	lsrs	r4, r4, #31
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d04e      	beq.n	800097c <__aeabi_fdiv+0xe0>
 80008de:	2bff      	cmp	r3, #255	; 0xff
 80008e0:	d046      	beq.n	8000970 <__aeabi_fdiv+0xd4>
 80008e2:	4642      	mov	r2, r8
 80008e4:	00d0      	lsls	r0, r2, #3
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	04d2      	lsls	r2, r2, #19
 80008ea:	4302      	orrs	r2, r0
 80008ec:	4690      	mov	r8, r2
 80008ee:	2200      	movs	r2, #0
 80008f0:	3b7f      	subs	r3, #127	; 0x7f
 80008f2:	0031      	movs	r1, r6
 80008f4:	1aff      	subs	r7, r7, r3
 80008f6:	464b      	mov	r3, r9
 80008f8:	4061      	eors	r1, r4
 80008fa:	b2c9      	uxtb	r1, r1
 80008fc:	4313      	orrs	r3, r2
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d900      	bls.n	8000904 <__aeabi_fdiv+0x68>
 8000902:	e0b5      	b.n	8000a70 <__aeabi_fdiv+0x1d4>
 8000904:	486e      	ldr	r0, [pc, #440]	; (8000ac0 <__aeabi_fdiv+0x224>)
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	58c3      	ldr	r3, [r0, r3]
 800090a:	469f      	mov	pc, r3
 800090c:	2300      	movs	r3, #0
 800090e:	4698      	mov	r8, r3
 8000910:	0026      	movs	r6, r4
 8000912:	4645      	mov	r5, r8
 8000914:	4692      	mov	sl, r2
 8000916:	4653      	mov	r3, sl
 8000918:	2b02      	cmp	r3, #2
 800091a:	d100      	bne.n	800091e <__aeabi_fdiv+0x82>
 800091c:	e089      	b.n	8000a32 <__aeabi_fdiv+0x196>
 800091e:	2b03      	cmp	r3, #3
 8000920:	d100      	bne.n	8000924 <__aeabi_fdiv+0x88>
 8000922:	e09e      	b.n	8000a62 <__aeabi_fdiv+0x1c6>
 8000924:	2b01      	cmp	r3, #1
 8000926:	d018      	beq.n	800095a <__aeabi_fdiv+0xbe>
 8000928:	003b      	movs	r3, r7
 800092a:	337f      	adds	r3, #127	; 0x7f
 800092c:	2b00      	cmp	r3, #0
 800092e:	dd69      	ble.n	8000a04 <__aeabi_fdiv+0x168>
 8000930:	076a      	lsls	r2, r5, #29
 8000932:	d004      	beq.n	800093e <__aeabi_fdiv+0xa2>
 8000934:	220f      	movs	r2, #15
 8000936:	402a      	ands	r2, r5
 8000938:	2a04      	cmp	r2, #4
 800093a:	d000      	beq.n	800093e <__aeabi_fdiv+0xa2>
 800093c:	3504      	adds	r5, #4
 800093e:	012a      	lsls	r2, r5, #4
 8000940:	d503      	bpl.n	800094a <__aeabi_fdiv+0xae>
 8000942:	4b60      	ldr	r3, [pc, #384]	; (8000ac4 <__aeabi_fdiv+0x228>)
 8000944:	401d      	ands	r5, r3
 8000946:	003b      	movs	r3, r7
 8000948:	3380      	adds	r3, #128	; 0x80
 800094a:	2bfe      	cmp	r3, #254	; 0xfe
 800094c:	dd00      	ble.n	8000950 <__aeabi_fdiv+0xb4>
 800094e:	e070      	b.n	8000a32 <__aeabi_fdiv+0x196>
 8000950:	01ad      	lsls	r5, r5, #6
 8000952:	0a6d      	lsrs	r5, r5, #9
 8000954:	b2d8      	uxtb	r0, r3
 8000956:	e002      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000958:	000e      	movs	r6, r1
 800095a:	2000      	movs	r0, #0
 800095c:	2500      	movs	r5, #0
 800095e:	05c0      	lsls	r0, r0, #23
 8000960:	4328      	orrs	r0, r5
 8000962:	07f6      	lsls	r6, r6, #31
 8000964:	4330      	orrs	r0, r6
 8000966:	bce0      	pop	{r5, r6, r7}
 8000968:	46ba      	mov	sl, r7
 800096a:	46b1      	mov	r9, r6
 800096c:	46a8      	mov	r8, r5
 800096e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000970:	4643      	mov	r3, r8
 8000972:	2b00      	cmp	r3, #0
 8000974:	d13f      	bne.n	80009f6 <__aeabi_fdiv+0x15a>
 8000976:	2202      	movs	r2, #2
 8000978:	3fff      	subs	r7, #255	; 0xff
 800097a:	e003      	b.n	8000984 <__aeabi_fdiv+0xe8>
 800097c:	4643      	mov	r3, r8
 800097e:	2b00      	cmp	r3, #0
 8000980:	d12d      	bne.n	80009de <__aeabi_fdiv+0x142>
 8000982:	2201      	movs	r2, #1
 8000984:	0031      	movs	r1, r6
 8000986:	464b      	mov	r3, r9
 8000988:	4061      	eors	r1, r4
 800098a:	b2c9      	uxtb	r1, r1
 800098c:	4313      	orrs	r3, r2
 800098e:	2b0f      	cmp	r3, #15
 8000990:	d834      	bhi.n	80009fc <__aeabi_fdiv+0x160>
 8000992:	484d      	ldr	r0, [pc, #308]	; (8000ac8 <__aeabi_fdiv+0x22c>)
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	58c3      	ldr	r3, [r0, r3]
 8000998:	469f      	mov	pc, r3
 800099a:	2d00      	cmp	r5, #0
 800099c:	d113      	bne.n	80009c6 <__aeabi_fdiv+0x12a>
 800099e:	2304      	movs	r3, #4
 80009a0:	4699      	mov	r9, r3
 80009a2:	3b03      	subs	r3, #3
 80009a4:	2700      	movs	r7, #0
 80009a6:	469a      	mov	sl, r3
 80009a8:	e791      	b.n	80008ce <__aeabi_fdiv+0x32>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	d105      	bne.n	80009ba <__aeabi_fdiv+0x11e>
 80009ae:	2308      	movs	r3, #8
 80009b0:	4699      	mov	r9, r3
 80009b2:	3b06      	subs	r3, #6
 80009b4:	27ff      	movs	r7, #255	; 0xff
 80009b6:	469a      	mov	sl, r3
 80009b8:	e789      	b.n	80008ce <__aeabi_fdiv+0x32>
 80009ba:	230c      	movs	r3, #12
 80009bc:	4699      	mov	r9, r3
 80009be:	3b09      	subs	r3, #9
 80009c0:	27ff      	movs	r7, #255	; 0xff
 80009c2:	469a      	mov	sl, r3
 80009c4:	e783      	b.n	80008ce <__aeabi_fdiv+0x32>
 80009c6:	0028      	movs	r0, r5
 80009c8:	f002 fb4a 	bl	8003060 <__clzsi2>
 80009cc:	2776      	movs	r7, #118	; 0x76
 80009ce:	1f43      	subs	r3, r0, #5
 80009d0:	409d      	lsls	r5, r3
 80009d2:	2300      	movs	r3, #0
 80009d4:	427f      	negs	r7, r7
 80009d6:	4699      	mov	r9, r3
 80009d8:	469a      	mov	sl, r3
 80009da:	1a3f      	subs	r7, r7, r0
 80009dc:	e777      	b.n	80008ce <__aeabi_fdiv+0x32>
 80009de:	4640      	mov	r0, r8
 80009e0:	f002 fb3e 	bl	8003060 <__clzsi2>
 80009e4:	4642      	mov	r2, r8
 80009e6:	1f43      	subs	r3, r0, #5
 80009e8:	409a      	lsls	r2, r3
 80009ea:	2376      	movs	r3, #118	; 0x76
 80009ec:	425b      	negs	r3, r3
 80009ee:	4690      	mov	r8, r2
 80009f0:	1a1b      	subs	r3, r3, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	e77d      	b.n	80008f2 <__aeabi_fdiv+0x56>
 80009f6:	23ff      	movs	r3, #255	; 0xff
 80009f8:	2203      	movs	r2, #3
 80009fa:	e77a      	b.n	80008f2 <__aeabi_fdiv+0x56>
 80009fc:	000e      	movs	r6, r1
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	2500      	movs	r5, #0
 8000a02:	e7ac      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a04:	2001      	movs	r0, #1
 8000a06:	1ac0      	subs	r0, r0, r3
 8000a08:	281b      	cmp	r0, #27
 8000a0a:	dca6      	bgt.n	800095a <__aeabi_fdiv+0xbe>
 8000a0c:	379e      	adds	r7, #158	; 0x9e
 8000a0e:	002a      	movs	r2, r5
 8000a10:	40bd      	lsls	r5, r7
 8000a12:	40c2      	lsrs	r2, r0
 8000a14:	1e6b      	subs	r3, r5, #1
 8000a16:	419d      	sbcs	r5, r3
 8000a18:	4315      	orrs	r5, r2
 8000a1a:	076b      	lsls	r3, r5, #29
 8000a1c:	d004      	beq.n	8000a28 <__aeabi_fdiv+0x18c>
 8000a1e:	230f      	movs	r3, #15
 8000a20:	402b      	ands	r3, r5
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	d000      	beq.n	8000a28 <__aeabi_fdiv+0x18c>
 8000a26:	3504      	adds	r5, #4
 8000a28:	016b      	lsls	r3, r5, #5
 8000a2a:	d544      	bpl.n	8000ab6 <__aeabi_fdiv+0x21a>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	2500      	movs	r5, #0
 8000a30:	e795      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	2500      	movs	r5, #0
 8000a36:	e792      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a38:	2580      	movs	r5, #128	; 0x80
 8000a3a:	2600      	movs	r6, #0
 8000a3c:	20ff      	movs	r0, #255	; 0xff
 8000a3e:	03ed      	lsls	r5, r5, #15
 8000a40:	e78d      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a42:	2300      	movs	r3, #0
 8000a44:	4698      	mov	r8, r3
 8000a46:	2080      	movs	r0, #128	; 0x80
 8000a48:	03c0      	lsls	r0, r0, #15
 8000a4a:	4205      	tst	r5, r0
 8000a4c:	d009      	beq.n	8000a62 <__aeabi_fdiv+0x1c6>
 8000a4e:	4643      	mov	r3, r8
 8000a50:	4203      	tst	r3, r0
 8000a52:	d106      	bne.n	8000a62 <__aeabi_fdiv+0x1c6>
 8000a54:	4645      	mov	r5, r8
 8000a56:	4305      	orrs	r5, r0
 8000a58:	026d      	lsls	r5, r5, #9
 8000a5a:	0026      	movs	r6, r4
 8000a5c:	20ff      	movs	r0, #255	; 0xff
 8000a5e:	0a6d      	lsrs	r5, r5, #9
 8000a60:	e77d      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a62:	2080      	movs	r0, #128	; 0x80
 8000a64:	03c0      	lsls	r0, r0, #15
 8000a66:	4305      	orrs	r5, r0
 8000a68:	026d      	lsls	r5, r5, #9
 8000a6a:	20ff      	movs	r0, #255	; 0xff
 8000a6c:	0a6d      	lsrs	r5, r5, #9
 8000a6e:	e776      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000a70:	4642      	mov	r2, r8
 8000a72:	016b      	lsls	r3, r5, #5
 8000a74:	0150      	lsls	r0, r2, #5
 8000a76:	4283      	cmp	r3, r0
 8000a78:	d219      	bcs.n	8000aae <__aeabi_fdiv+0x212>
 8000a7a:	221b      	movs	r2, #27
 8000a7c:	2500      	movs	r5, #0
 8000a7e:	3f01      	subs	r7, #1
 8000a80:	2601      	movs	r6, #1
 8000a82:	001c      	movs	r4, r3
 8000a84:	006d      	lsls	r5, r5, #1
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	2c00      	cmp	r4, #0
 8000a8a:	db01      	blt.n	8000a90 <__aeabi_fdiv+0x1f4>
 8000a8c:	4298      	cmp	r0, r3
 8000a8e:	d801      	bhi.n	8000a94 <__aeabi_fdiv+0x1f8>
 8000a90:	1a1b      	subs	r3, r3, r0
 8000a92:	4335      	orrs	r5, r6
 8000a94:	3a01      	subs	r2, #1
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	d1f3      	bne.n	8000a82 <__aeabi_fdiv+0x1e6>
 8000a9a:	1e5a      	subs	r2, r3, #1
 8000a9c:	4193      	sbcs	r3, r2
 8000a9e:	431d      	orrs	r5, r3
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	337f      	adds	r3, #127	; 0x7f
 8000aa4:	000e      	movs	r6, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_fdiv+0x210>
 8000aaa:	e741      	b.n	8000930 <__aeabi_fdiv+0x94>
 8000aac:	e7aa      	b.n	8000a04 <__aeabi_fdiv+0x168>
 8000aae:	221a      	movs	r2, #26
 8000ab0:	2501      	movs	r5, #1
 8000ab2:	1a1b      	subs	r3, r3, r0
 8000ab4:	e7e4      	b.n	8000a80 <__aeabi_fdiv+0x1e4>
 8000ab6:	01ad      	lsls	r5, r5, #6
 8000ab8:	2000      	movs	r0, #0
 8000aba:	0a6d      	lsrs	r5, r5, #9
 8000abc:	e74f      	b.n	800095e <__aeabi_fdiv+0xc2>
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	0800cc04 	.word	0x0800cc04
 8000ac4:	f7ffffff 	.word	0xf7ffffff
 8000ac8:	0800cc44 	.word	0x0800cc44

08000acc <__eqsf2>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	0042      	lsls	r2, r0, #1
 8000ad0:	0245      	lsls	r5, r0, #9
 8000ad2:	024e      	lsls	r6, r1, #9
 8000ad4:	004c      	lsls	r4, r1, #1
 8000ad6:	0fc3      	lsrs	r3, r0, #31
 8000ad8:	0a6d      	lsrs	r5, r5, #9
 8000ada:	2001      	movs	r0, #1
 8000adc:	0e12      	lsrs	r2, r2, #24
 8000ade:	0a76      	lsrs	r6, r6, #9
 8000ae0:	0e24      	lsrs	r4, r4, #24
 8000ae2:	0fc9      	lsrs	r1, r1, #31
 8000ae4:	2aff      	cmp	r2, #255	; 0xff
 8000ae6:	d006      	beq.n	8000af6 <__eqsf2+0x2a>
 8000ae8:	2cff      	cmp	r4, #255	; 0xff
 8000aea:	d003      	beq.n	8000af4 <__eqsf2+0x28>
 8000aec:	42a2      	cmp	r2, r4
 8000aee:	d101      	bne.n	8000af4 <__eqsf2+0x28>
 8000af0:	42b5      	cmp	r5, r6
 8000af2:	d006      	beq.n	8000b02 <__eqsf2+0x36>
 8000af4:	bd70      	pop	{r4, r5, r6, pc}
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d1fc      	bne.n	8000af4 <__eqsf2+0x28>
 8000afa:	2cff      	cmp	r4, #255	; 0xff
 8000afc:	d1fa      	bne.n	8000af4 <__eqsf2+0x28>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d1f8      	bne.n	8000af4 <__eqsf2+0x28>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d006      	beq.n	8000b14 <__eqsf2+0x48>
 8000b06:	2001      	movs	r0, #1
 8000b08:	2a00      	cmp	r2, #0
 8000b0a:	d1f3      	bne.n	8000af4 <__eqsf2+0x28>
 8000b0c:	0028      	movs	r0, r5
 8000b0e:	1e43      	subs	r3, r0, #1
 8000b10:	4198      	sbcs	r0, r3
 8000b12:	e7ef      	b.n	8000af4 <__eqsf2+0x28>
 8000b14:	2000      	movs	r0, #0
 8000b16:	e7ed      	b.n	8000af4 <__eqsf2+0x28>

08000b18 <__gesf2>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	0042      	lsls	r2, r0, #1
 8000b1c:	0245      	lsls	r5, r0, #9
 8000b1e:	024e      	lsls	r6, r1, #9
 8000b20:	004c      	lsls	r4, r1, #1
 8000b22:	0fc3      	lsrs	r3, r0, #31
 8000b24:	0a6d      	lsrs	r5, r5, #9
 8000b26:	0e12      	lsrs	r2, r2, #24
 8000b28:	0a76      	lsrs	r6, r6, #9
 8000b2a:	0e24      	lsrs	r4, r4, #24
 8000b2c:	0fc8      	lsrs	r0, r1, #31
 8000b2e:	2aff      	cmp	r2, #255	; 0xff
 8000b30:	d01b      	beq.n	8000b6a <__gesf2+0x52>
 8000b32:	2cff      	cmp	r4, #255	; 0xff
 8000b34:	d00e      	beq.n	8000b54 <__gesf2+0x3c>
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	d11b      	bne.n	8000b72 <__gesf2+0x5a>
 8000b3a:	2c00      	cmp	r4, #0
 8000b3c:	d101      	bne.n	8000b42 <__gesf2+0x2a>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	d01c      	beq.n	8000b7c <__gesf2+0x64>
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d00c      	beq.n	8000b60 <__gesf2+0x48>
 8000b46:	4283      	cmp	r3, r0
 8000b48:	d01c      	beq.n	8000b84 <__gesf2+0x6c>
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	1e58      	subs	r0, r3, #1
 8000b4e:	4008      	ands	r0, r1
 8000b50:	3801      	subs	r0, #1
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	2e00      	cmp	r6, #0
 8000b56:	d122      	bne.n	8000b9e <__gesf2+0x86>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d1f4      	bne.n	8000b46 <__gesf2+0x2e>
 8000b5c:	2d00      	cmp	r5, #0
 8000b5e:	d1f2      	bne.n	8000b46 <__gesf2+0x2e>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d1f6      	bne.n	8000b52 <__gesf2+0x3a>
 8000b64:	2001      	movs	r0, #1
 8000b66:	4240      	negs	r0, r0
 8000b68:	e7f3      	b.n	8000b52 <__gesf2+0x3a>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d117      	bne.n	8000b9e <__gesf2+0x86>
 8000b6e:	2cff      	cmp	r4, #255	; 0xff
 8000b70:	d0f0      	beq.n	8000b54 <__gesf2+0x3c>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d1e7      	bne.n	8000b46 <__gesf2+0x2e>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d1e5      	bne.n	8000b46 <__gesf2+0x2e>
 8000b7a:	e7e6      	b.n	8000b4a <__gesf2+0x32>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0e7      	beq.n	8000b52 <__gesf2+0x3a>
 8000b82:	e7e2      	b.n	8000b4a <__gesf2+0x32>
 8000b84:	42a2      	cmp	r2, r4
 8000b86:	dc05      	bgt.n	8000b94 <__gesf2+0x7c>
 8000b88:	dbea      	blt.n	8000b60 <__gesf2+0x48>
 8000b8a:	42b5      	cmp	r5, r6
 8000b8c:	d802      	bhi.n	8000b94 <__gesf2+0x7c>
 8000b8e:	d3e7      	bcc.n	8000b60 <__gesf2+0x48>
 8000b90:	2000      	movs	r0, #0
 8000b92:	e7de      	b.n	8000b52 <__gesf2+0x3a>
 8000b94:	4243      	negs	r3, r0
 8000b96:	4158      	adcs	r0, r3
 8000b98:	0040      	lsls	r0, r0, #1
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7d9      	b.n	8000b52 <__gesf2+0x3a>
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	4240      	negs	r0, r0
 8000ba2:	e7d6      	b.n	8000b52 <__gesf2+0x3a>

08000ba4 <__lesf2>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	0042      	lsls	r2, r0, #1
 8000ba8:	0245      	lsls	r5, r0, #9
 8000baa:	024e      	lsls	r6, r1, #9
 8000bac:	004c      	lsls	r4, r1, #1
 8000bae:	0fc3      	lsrs	r3, r0, #31
 8000bb0:	0a6d      	lsrs	r5, r5, #9
 8000bb2:	0e12      	lsrs	r2, r2, #24
 8000bb4:	0a76      	lsrs	r6, r6, #9
 8000bb6:	0e24      	lsrs	r4, r4, #24
 8000bb8:	0fc8      	lsrs	r0, r1, #31
 8000bba:	2aff      	cmp	r2, #255	; 0xff
 8000bbc:	d00b      	beq.n	8000bd6 <__lesf2+0x32>
 8000bbe:	2cff      	cmp	r4, #255	; 0xff
 8000bc0:	d00d      	beq.n	8000bde <__lesf2+0x3a>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d11f      	bne.n	8000c06 <__lesf2+0x62>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d116      	bne.n	8000bf8 <__lesf2+0x54>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d114      	bne.n	8000bf8 <__lesf2+0x54>
 8000bce:	2000      	movs	r0, #0
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d010      	beq.n	8000bf6 <__lesf2+0x52>
 8000bd4:	e009      	b.n	8000bea <__lesf2+0x46>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d10c      	bne.n	8000bf4 <__lesf2+0x50>
 8000bda:	2cff      	cmp	r4, #255	; 0xff
 8000bdc:	d113      	bne.n	8000c06 <__lesf2+0x62>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d108      	bne.n	8000bf4 <__lesf2+0x50>
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d008      	beq.n	8000bf8 <__lesf2+0x54>
 8000be6:	4283      	cmp	r3, r0
 8000be8:	d012      	beq.n	8000c10 <__lesf2+0x6c>
 8000bea:	2102      	movs	r1, #2
 8000bec:	1e58      	subs	r0, r3, #1
 8000bee:	4008      	ands	r0, r1
 8000bf0:	3801      	subs	r0, #1
 8000bf2:	e000      	b.n	8000bf6 <__lesf2+0x52>
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	2d00      	cmp	r5, #0
 8000bfa:	d1f4      	bne.n	8000be6 <__lesf2+0x42>
 8000bfc:	2800      	cmp	r0, #0
 8000bfe:	d1fa      	bne.n	8000bf6 <__lesf2+0x52>
 8000c00:	2001      	movs	r0, #1
 8000c02:	4240      	negs	r0, r0
 8000c04:	e7f7      	b.n	8000bf6 <__lesf2+0x52>
 8000c06:	2c00      	cmp	r4, #0
 8000c08:	d1ed      	bne.n	8000be6 <__lesf2+0x42>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d1eb      	bne.n	8000be6 <__lesf2+0x42>
 8000c0e:	e7ec      	b.n	8000bea <__lesf2+0x46>
 8000c10:	42a2      	cmp	r2, r4
 8000c12:	dc05      	bgt.n	8000c20 <__lesf2+0x7c>
 8000c14:	dbf2      	blt.n	8000bfc <__lesf2+0x58>
 8000c16:	42b5      	cmp	r5, r6
 8000c18:	d802      	bhi.n	8000c20 <__lesf2+0x7c>
 8000c1a:	d3ef      	bcc.n	8000bfc <__lesf2+0x58>
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	e7ea      	b.n	8000bf6 <__lesf2+0x52>
 8000c20:	4243      	negs	r3, r0
 8000c22:	4158      	adcs	r0, r3
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	3801      	subs	r0, #1
 8000c28:	e7e5      	b.n	8000bf6 <__lesf2+0x52>
 8000c2a:	46c0      	nop			; (mov r8, r8)

08000c2c <__aeabi_fmul>:
 8000c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c2e:	464f      	mov	r7, r9
 8000c30:	4646      	mov	r6, r8
 8000c32:	46d6      	mov	lr, sl
 8000c34:	0244      	lsls	r4, r0, #9
 8000c36:	0045      	lsls	r5, r0, #1
 8000c38:	b5c0      	push	{r6, r7, lr}
 8000c3a:	0a64      	lsrs	r4, r4, #9
 8000c3c:	1c0f      	adds	r7, r1, #0
 8000c3e:	0e2d      	lsrs	r5, r5, #24
 8000c40:	0fc6      	lsrs	r6, r0, #31
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_fmul+0x1c>
 8000c46:	e08d      	b.n	8000d64 <__aeabi_fmul+0x138>
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_fmul+0x22>
 8000c4c:	e092      	b.n	8000d74 <__aeabi_fmul+0x148>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	4699      	mov	r9, r3
 8000c54:	469a      	mov	sl, r3
 8000c56:	00e4      	lsls	r4, r4, #3
 8000c58:	04c0      	lsls	r0, r0, #19
 8000c5a:	4304      	orrs	r4, r0
 8000c5c:	3d7f      	subs	r5, #127	; 0x7f
 8000c5e:	0278      	lsls	r0, r7, #9
 8000c60:	0a43      	lsrs	r3, r0, #9
 8000c62:	4698      	mov	r8, r3
 8000c64:	007b      	lsls	r3, r7, #1
 8000c66:	0e1b      	lsrs	r3, r3, #24
 8000c68:	0fff      	lsrs	r7, r7, #31
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fmul+0x44>
 8000c6e:	e070      	b.n	8000d52 <__aeabi_fmul+0x126>
 8000c70:	2bff      	cmp	r3, #255	; 0xff
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fmul+0x4a>
 8000c74:	e086      	b.n	8000d84 <__aeabi_fmul+0x158>
 8000c76:	4642      	mov	r2, r8
 8000c78:	00d0      	lsls	r0, r2, #3
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	3b7f      	subs	r3, #127	; 0x7f
 8000c7e:	18ed      	adds	r5, r5, r3
 8000c80:	2300      	movs	r3, #0
 8000c82:	04d2      	lsls	r2, r2, #19
 8000c84:	4302      	orrs	r2, r0
 8000c86:	4690      	mov	r8, r2
 8000c88:	469c      	mov	ip, r3
 8000c8a:	0031      	movs	r1, r6
 8000c8c:	464b      	mov	r3, r9
 8000c8e:	4079      	eors	r1, r7
 8000c90:	1c68      	adds	r0, r5, #1
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	d81c      	bhi.n	8000cd0 <__aeabi_fmul+0xa4>
 8000c96:	4a76      	ldr	r2, [pc, #472]	; (8000e70 <__aeabi_fmul+0x244>)
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	58d3      	ldr	r3, [r2, r3]
 8000c9c:	469f      	mov	pc, r3
 8000c9e:	0039      	movs	r1, r7
 8000ca0:	4644      	mov	r4, r8
 8000ca2:	46e2      	mov	sl, ip
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d00f      	beq.n	8000cca <__aeabi_fmul+0x9e>
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fmul+0x84>
 8000cae:	e0d7      	b.n	8000e60 <__aeabi_fmul+0x234>
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d137      	bne.n	8000d24 <__aeabi_fmul+0xf8>
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	2400      	movs	r4, #0
 8000cb8:	05c0      	lsls	r0, r0, #23
 8000cba:	4320      	orrs	r0, r4
 8000cbc:	07c9      	lsls	r1, r1, #31
 8000cbe:	4308      	orrs	r0, r1
 8000cc0:	bce0      	pop	{r5, r6, r7}
 8000cc2:	46ba      	mov	sl, r7
 8000cc4:	46b1      	mov	r9, r6
 8000cc6:	46a8      	mov	r8, r5
 8000cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cca:	20ff      	movs	r0, #255	; 0xff
 8000ccc:	2400      	movs	r4, #0
 8000cce:	e7f3      	b.n	8000cb8 <__aeabi_fmul+0x8c>
 8000cd0:	0c26      	lsrs	r6, r4, #16
 8000cd2:	0424      	lsls	r4, r4, #16
 8000cd4:	0c22      	lsrs	r2, r4, #16
 8000cd6:	4644      	mov	r4, r8
 8000cd8:	0424      	lsls	r4, r4, #16
 8000cda:	0c24      	lsrs	r4, r4, #16
 8000cdc:	4643      	mov	r3, r8
 8000cde:	0027      	movs	r7, r4
 8000ce0:	0c1b      	lsrs	r3, r3, #16
 8000ce2:	4357      	muls	r7, r2
 8000ce4:	4374      	muls	r4, r6
 8000ce6:	435a      	muls	r2, r3
 8000ce8:	435e      	muls	r6, r3
 8000cea:	1912      	adds	r2, r2, r4
 8000cec:	0c3b      	lsrs	r3, r7, #16
 8000cee:	189b      	adds	r3, r3, r2
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	d903      	bls.n	8000cfc <__aeabi_fmul+0xd0>
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	4466      	add	r6, ip
 8000cfc:	043f      	lsls	r7, r7, #16
 8000cfe:	041a      	lsls	r2, r3, #16
 8000d00:	0c3f      	lsrs	r7, r7, #16
 8000d02:	19d2      	adds	r2, r2, r7
 8000d04:	0194      	lsls	r4, r2, #6
 8000d06:	1e67      	subs	r7, r4, #1
 8000d08:	41bc      	sbcs	r4, r7
 8000d0a:	0c1b      	lsrs	r3, r3, #16
 8000d0c:	0e92      	lsrs	r2, r2, #26
 8000d0e:	199b      	adds	r3, r3, r6
 8000d10:	4314      	orrs	r4, r2
 8000d12:	019b      	lsls	r3, r3, #6
 8000d14:	431c      	orrs	r4, r3
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	d400      	bmi.n	8000d1c <__aeabi_fmul+0xf0>
 8000d1a:	e09b      	b.n	8000e54 <__aeabi_fmul+0x228>
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	0862      	lsrs	r2, r4, #1
 8000d20:	401c      	ands	r4, r3
 8000d22:	4314      	orrs	r4, r2
 8000d24:	0002      	movs	r2, r0
 8000d26:	327f      	adds	r2, #127	; 0x7f
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	dd64      	ble.n	8000df6 <__aeabi_fmul+0x1ca>
 8000d2c:	0763      	lsls	r3, r4, #29
 8000d2e:	d004      	beq.n	8000d3a <__aeabi_fmul+0x10e>
 8000d30:	230f      	movs	r3, #15
 8000d32:	4023      	ands	r3, r4
 8000d34:	2b04      	cmp	r3, #4
 8000d36:	d000      	beq.n	8000d3a <__aeabi_fmul+0x10e>
 8000d38:	3404      	adds	r4, #4
 8000d3a:	0123      	lsls	r3, r4, #4
 8000d3c:	d503      	bpl.n	8000d46 <__aeabi_fmul+0x11a>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	4b4c      	ldr	r3, [pc, #304]	; (8000e74 <__aeabi_fmul+0x248>)
 8000d42:	3280      	adds	r2, #128	; 0x80
 8000d44:	401c      	ands	r4, r3
 8000d46:	2afe      	cmp	r2, #254	; 0xfe
 8000d48:	dcbf      	bgt.n	8000cca <__aeabi_fmul+0x9e>
 8000d4a:	01a4      	lsls	r4, r4, #6
 8000d4c:	0a64      	lsrs	r4, r4, #9
 8000d4e:	b2d0      	uxtb	r0, r2
 8000d50:	e7b2      	b.n	8000cb8 <__aeabi_fmul+0x8c>
 8000d52:	4643      	mov	r3, r8
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d13d      	bne.n	8000dd4 <__aeabi_fmul+0x1a8>
 8000d58:	464a      	mov	r2, r9
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	4691      	mov	r9, r2
 8000d60:	469c      	mov	ip, r3
 8000d62:	e792      	b.n	8000c8a <__aeabi_fmul+0x5e>
 8000d64:	2c00      	cmp	r4, #0
 8000d66:	d129      	bne.n	8000dbc <__aeabi_fmul+0x190>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	4699      	mov	r9, r3
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	2500      	movs	r5, #0
 8000d70:	469a      	mov	sl, r3
 8000d72:	e774      	b.n	8000c5e <__aeabi_fmul+0x32>
 8000d74:	2c00      	cmp	r4, #0
 8000d76:	d11b      	bne.n	8000db0 <__aeabi_fmul+0x184>
 8000d78:	2308      	movs	r3, #8
 8000d7a:	4699      	mov	r9, r3
 8000d7c:	3b06      	subs	r3, #6
 8000d7e:	25ff      	movs	r5, #255	; 0xff
 8000d80:	469a      	mov	sl, r3
 8000d82:	e76c      	b.n	8000c5e <__aeabi_fmul+0x32>
 8000d84:	4643      	mov	r3, r8
 8000d86:	35ff      	adds	r5, #255	; 0xff
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10b      	bne.n	8000da4 <__aeabi_fmul+0x178>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	464a      	mov	r2, r9
 8000d90:	431a      	orrs	r2, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	469c      	mov	ip, r3
 8000d96:	e778      	b.n	8000c8a <__aeabi_fmul+0x5e>
 8000d98:	4653      	mov	r3, sl
 8000d9a:	0031      	movs	r1, r6
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d000      	beq.n	8000da2 <__aeabi_fmul+0x176>
 8000da0:	e783      	b.n	8000caa <__aeabi_fmul+0x7e>
 8000da2:	e792      	b.n	8000cca <__aeabi_fmul+0x9e>
 8000da4:	2303      	movs	r3, #3
 8000da6:	464a      	mov	r2, r9
 8000da8:	431a      	orrs	r2, r3
 8000daa:	4691      	mov	r9, r2
 8000dac:	469c      	mov	ip, r3
 8000dae:	e76c      	b.n	8000c8a <__aeabi_fmul+0x5e>
 8000db0:	230c      	movs	r3, #12
 8000db2:	4699      	mov	r9, r3
 8000db4:	3b09      	subs	r3, #9
 8000db6:	25ff      	movs	r5, #255	; 0xff
 8000db8:	469a      	mov	sl, r3
 8000dba:	e750      	b.n	8000c5e <__aeabi_fmul+0x32>
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	f002 f94f 	bl	8003060 <__clzsi2>
 8000dc2:	2576      	movs	r5, #118	; 0x76
 8000dc4:	1f43      	subs	r3, r0, #5
 8000dc6:	409c      	lsls	r4, r3
 8000dc8:	2300      	movs	r3, #0
 8000dca:	426d      	negs	r5, r5
 8000dcc:	4699      	mov	r9, r3
 8000dce:	469a      	mov	sl, r3
 8000dd0:	1a2d      	subs	r5, r5, r0
 8000dd2:	e744      	b.n	8000c5e <__aeabi_fmul+0x32>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	f002 f943 	bl	8003060 <__clzsi2>
 8000dda:	4642      	mov	r2, r8
 8000ddc:	1f43      	subs	r3, r0, #5
 8000dde:	409a      	lsls	r2, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	1a2d      	subs	r5, r5, r0
 8000de4:	4690      	mov	r8, r2
 8000de6:	469c      	mov	ip, r3
 8000de8:	3d76      	subs	r5, #118	; 0x76
 8000dea:	e74e      	b.n	8000c8a <__aeabi_fmul+0x5e>
 8000dec:	2480      	movs	r4, #128	; 0x80
 8000dee:	2100      	movs	r1, #0
 8000df0:	20ff      	movs	r0, #255	; 0xff
 8000df2:	03e4      	lsls	r4, r4, #15
 8000df4:	e760      	b.n	8000cb8 <__aeabi_fmul+0x8c>
 8000df6:	2301      	movs	r3, #1
 8000df8:	1a9b      	subs	r3, r3, r2
 8000dfa:	2b1b      	cmp	r3, #27
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_fmul+0x1d4>
 8000dfe:	e759      	b.n	8000cb4 <__aeabi_fmul+0x88>
 8000e00:	0022      	movs	r2, r4
 8000e02:	309e      	adds	r0, #158	; 0x9e
 8000e04:	40da      	lsrs	r2, r3
 8000e06:	4084      	lsls	r4, r0
 8000e08:	0013      	movs	r3, r2
 8000e0a:	1e62      	subs	r2, r4, #1
 8000e0c:	4194      	sbcs	r4, r2
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	0763      	lsls	r3, r4, #29
 8000e12:	d004      	beq.n	8000e1e <__aeabi_fmul+0x1f2>
 8000e14:	230f      	movs	r3, #15
 8000e16:	4023      	ands	r3, r4
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d000      	beq.n	8000e1e <__aeabi_fmul+0x1f2>
 8000e1c:	3404      	adds	r4, #4
 8000e1e:	0163      	lsls	r3, r4, #5
 8000e20:	d51a      	bpl.n	8000e58 <__aeabi_fmul+0x22c>
 8000e22:	2001      	movs	r0, #1
 8000e24:	2400      	movs	r4, #0
 8000e26:	e747      	b.n	8000cb8 <__aeabi_fmul+0x8c>
 8000e28:	2080      	movs	r0, #128	; 0x80
 8000e2a:	03c0      	lsls	r0, r0, #15
 8000e2c:	4204      	tst	r4, r0
 8000e2e:	d009      	beq.n	8000e44 <__aeabi_fmul+0x218>
 8000e30:	4643      	mov	r3, r8
 8000e32:	4203      	tst	r3, r0
 8000e34:	d106      	bne.n	8000e44 <__aeabi_fmul+0x218>
 8000e36:	4644      	mov	r4, r8
 8000e38:	4304      	orrs	r4, r0
 8000e3a:	0264      	lsls	r4, r4, #9
 8000e3c:	0039      	movs	r1, r7
 8000e3e:	20ff      	movs	r0, #255	; 0xff
 8000e40:	0a64      	lsrs	r4, r4, #9
 8000e42:	e739      	b.n	8000cb8 <__aeabi_fmul+0x8c>
 8000e44:	2080      	movs	r0, #128	; 0x80
 8000e46:	03c0      	lsls	r0, r0, #15
 8000e48:	4304      	orrs	r4, r0
 8000e4a:	0264      	lsls	r4, r4, #9
 8000e4c:	0031      	movs	r1, r6
 8000e4e:	20ff      	movs	r0, #255	; 0xff
 8000e50:	0a64      	lsrs	r4, r4, #9
 8000e52:	e731      	b.n	8000cb8 <__aeabi_fmul+0x8c>
 8000e54:	0028      	movs	r0, r5
 8000e56:	e765      	b.n	8000d24 <__aeabi_fmul+0xf8>
 8000e58:	01a4      	lsls	r4, r4, #6
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	0a64      	lsrs	r4, r4, #9
 8000e5e:	e72b      	b.n	8000cb8 <__aeabi_fmul+0x8c>
 8000e60:	2080      	movs	r0, #128	; 0x80
 8000e62:	03c0      	lsls	r0, r0, #15
 8000e64:	4304      	orrs	r4, r0
 8000e66:	0264      	lsls	r4, r4, #9
 8000e68:	20ff      	movs	r0, #255	; 0xff
 8000e6a:	0a64      	lsrs	r4, r4, #9
 8000e6c:	e724      	b.n	8000cb8 <__aeabi_fmul+0x8c>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	0800cc84 	.word	0x0800cc84
 8000e74:	f7ffffff 	.word	0xf7ffffff

08000e78 <__aeabi_fsub>:
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	46ce      	mov	lr, r9
 8000e7c:	4647      	mov	r7, r8
 8000e7e:	0243      	lsls	r3, r0, #9
 8000e80:	0a5b      	lsrs	r3, r3, #9
 8000e82:	024e      	lsls	r6, r1, #9
 8000e84:	00da      	lsls	r2, r3, #3
 8000e86:	4694      	mov	ip, r2
 8000e88:	0a72      	lsrs	r2, r6, #9
 8000e8a:	4691      	mov	r9, r2
 8000e8c:	0045      	lsls	r5, r0, #1
 8000e8e:	004a      	lsls	r2, r1, #1
 8000e90:	b580      	push	{r7, lr}
 8000e92:	0e2d      	lsrs	r5, r5, #24
 8000e94:	001f      	movs	r7, r3
 8000e96:	0fc4      	lsrs	r4, r0, #31
 8000e98:	0e12      	lsrs	r2, r2, #24
 8000e9a:	0fc9      	lsrs	r1, r1, #31
 8000e9c:	09b6      	lsrs	r6, r6, #6
 8000e9e:	2aff      	cmp	r2, #255	; 0xff
 8000ea0:	d05b      	beq.n	8000f5a <__aeabi_fsub+0xe2>
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4041      	eors	r1, r0
 8000ea6:	428c      	cmp	r4, r1
 8000ea8:	d039      	beq.n	8000f1e <__aeabi_fsub+0xa6>
 8000eaa:	1aa8      	subs	r0, r5, r2
 8000eac:	2800      	cmp	r0, #0
 8000eae:	dd5a      	ble.n	8000f66 <__aeabi_fsub+0xee>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d06a      	beq.n	8000f8a <__aeabi_fsub+0x112>
 8000eb4:	2dff      	cmp	r5, #255	; 0xff
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fsub+0x42>
 8000eb8:	e0d9      	b.n	800106e <__aeabi_fsub+0x1f6>
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	04d2      	lsls	r2, r2, #19
 8000ebe:	4316      	orrs	r6, r2
 8000ec0:	281b      	cmp	r0, #27
 8000ec2:	dc00      	bgt.n	8000ec6 <__aeabi_fsub+0x4e>
 8000ec4:	e0e9      	b.n	800109a <__aeabi_fsub+0x222>
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	4663      	mov	r3, ip
 8000eca:	1a18      	subs	r0, r3, r0
 8000ecc:	0143      	lsls	r3, r0, #5
 8000ece:	d400      	bmi.n	8000ed2 <__aeabi_fsub+0x5a>
 8000ed0:	e0b4      	b.n	800103c <__aeabi_fsub+0x1c4>
 8000ed2:	0180      	lsls	r0, r0, #6
 8000ed4:	0987      	lsrs	r7, r0, #6
 8000ed6:	0038      	movs	r0, r7
 8000ed8:	f002 f8c2 	bl	8003060 <__clzsi2>
 8000edc:	3805      	subs	r0, #5
 8000ede:	4087      	lsls	r7, r0
 8000ee0:	4285      	cmp	r5, r0
 8000ee2:	dc00      	bgt.n	8000ee6 <__aeabi_fsub+0x6e>
 8000ee4:	e0cc      	b.n	8001080 <__aeabi_fsub+0x208>
 8000ee6:	1a2d      	subs	r5, r5, r0
 8000ee8:	48b5      	ldr	r0, [pc, #724]	; (80011c0 <__aeabi_fsub+0x348>)
 8000eea:	4038      	ands	r0, r7
 8000eec:	0743      	lsls	r3, r0, #29
 8000eee:	d004      	beq.n	8000efa <__aeabi_fsub+0x82>
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	4003      	ands	r3, r0
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d000      	beq.n	8000efa <__aeabi_fsub+0x82>
 8000ef8:	3004      	adds	r0, #4
 8000efa:	0143      	lsls	r3, r0, #5
 8000efc:	d400      	bmi.n	8000f00 <__aeabi_fsub+0x88>
 8000efe:	e0a0      	b.n	8001042 <__aeabi_fsub+0x1ca>
 8000f00:	1c6a      	adds	r2, r5, #1
 8000f02:	2dfe      	cmp	r5, #254	; 0xfe
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x90>
 8000f06:	e08d      	b.n	8001024 <__aeabi_fsub+0x1ac>
 8000f08:	0180      	lsls	r0, r0, #6
 8000f0a:	0a47      	lsrs	r7, r0, #9
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	05d0      	lsls	r0, r2, #23
 8000f10:	4338      	orrs	r0, r7
 8000f12:	07e4      	lsls	r4, r4, #31
 8000f14:	4320      	orrs	r0, r4
 8000f16:	bcc0      	pop	{r6, r7}
 8000f18:	46b9      	mov	r9, r7
 8000f1a:	46b0      	mov	r8, r6
 8000f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f1e:	1aa8      	subs	r0, r5, r2
 8000f20:	4680      	mov	r8, r0
 8000f22:	2800      	cmp	r0, #0
 8000f24:	dd45      	ble.n	8000fb2 <__aeabi_fsub+0x13a>
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	d070      	beq.n	800100c <__aeabi_fsub+0x194>
 8000f2a:	2dff      	cmp	r5, #255	; 0xff
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0xb8>
 8000f2e:	e09e      	b.n	800106e <__aeabi_fsub+0x1f6>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	04db      	lsls	r3, r3, #19
 8000f34:	431e      	orrs	r6, r3
 8000f36:	4643      	mov	r3, r8
 8000f38:	2b1b      	cmp	r3, #27
 8000f3a:	dc00      	bgt.n	8000f3e <__aeabi_fsub+0xc6>
 8000f3c:	e0d2      	b.n	80010e4 <__aeabi_fsub+0x26c>
 8000f3e:	2001      	movs	r0, #1
 8000f40:	4460      	add	r0, ip
 8000f42:	0143      	lsls	r3, r0, #5
 8000f44:	d57a      	bpl.n	800103c <__aeabi_fsub+0x1c4>
 8000f46:	3501      	adds	r5, #1
 8000f48:	2dff      	cmp	r5, #255	; 0xff
 8000f4a:	d06b      	beq.n	8001024 <__aeabi_fsub+0x1ac>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	4a9d      	ldr	r2, [pc, #628]	; (80011c4 <__aeabi_fsub+0x34c>)
 8000f50:	4003      	ands	r3, r0
 8000f52:	0840      	lsrs	r0, r0, #1
 8000f54:	4010      	ands	r0, r2
 8000f56:	4318      	orrs	r0, r3
 8000f58:	e7c8      	b.n	8000eec <__aeabi_fsub+0x74>
 8000f5a:	2e00      	cmp	r6, #0
 8000f5c:	d020      	beq.n	8000fa0 <__aeabi_fsub+0x128>
 8000f5e:	428c      	cmp	r4, r1
 8000f60:	d023      	beq.n	8000faa <__aeabi_fsub+0x132>
 8000f62:	0028      	movs	r0, r5
 8000f64:	38ff      	subs	r0, #255	; 0xff
 8000f66:	2800      	cmp	r0, #0
 8000f68:	d039      	beq.n	8000fde <__aeabi_fsub+0x166>
 8000f6a:	1b57      	subs	r7, r2, r5
 8000f6c:	2d00      	cmp	r5, #0
 8000f6e:	d000      	beq.n	8000f72 <__aeabi_fsub+0xfa>
 8000f70:	e09d      	b.n	80010ae <__aeabi_fsub+0x236>
 8000f72:	4663      	mov	r3, ip
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d100      	bne.n	8000f7a <__aeabi_fsub+0x102>
 8000f78:	e0db      	b.n	8001132 <__aeabi_fsub+0x2ba>
 8000f7a:	1e7b      	subs	r3, r7, #1
 8000f7c:	2f01      	cmp	r7, #1
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x10a>
 8000f80:	e10d      	b.n	800119e <__aeabi_fsub+0x326>
 8000f82:	2fff      	cmp	r7, #255	; 0xff
 8000f84:	d071      	beq.n	800106a <__aeabi_fsub+0x1f2>
 8000f86:	001f      	movs	r7, r3
 8000f88:	e098      	b.n	80010bc <__aeabi_fsub+0x244>
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_fsub+0x118>
 8000f8e:	e0a7      	b.n	80010e0 <__aeabi_fsub+0x268>
 8000f90:	1e42      	subs	r2, r0, #1
 8000f92:	2801      	cmp	r0, #1
 8000f94:	d100      	bne.n	8000f98 <__aeabi_fsub+0x120>
 8000f96:	e0e6      	b.n	8001166 <__aeabi_fsub+0x2ee>
 8000f98:	28ff      	cmp	r0, #255	; 0xff
 8000f9a:	d068      	beq.n	800106e <__aeabi_fsub+0x1f6>
 8000f9c:	0010      	movs	r0, r2
 8000f9e:	e78f      	b.n	8000ec0 <__aeabi_fsub+0x48>
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	4041      	eors	r1, r0
 8000fa4:	42a1      	cmp	r1, r4
 8000fa6:	d000      	beq.n	8000faa <__aeabi_fsub+0x132>
 8000fa8:	e77f      	b.n	8000eaa <__aeabi_fsub+0x32>
 8000faa:	20ff      	movs	r0, #255	; 0xff
 8000fac:	4240      	negs	r0, r0
 8000fae:	4680      	mov	r8, r0
 8000fb0:	44a8      	add	r8, r5
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	d038      	beq.n	800102a <__aeabi_fsub+0x1b2>
 8000fb8:	1b51      	subs	r1, r2, r5
 8000fba:	2d00      	cmp	r5, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x148>
 8000fbe:	e0ae      	b.n	800111e <__aeabi_fsub+0x2a6>
 8000fc0:	2aff      	cmp	r2, #255	; 0xff
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_fsub+0x14e>
 8000fc4:	e0df      	b.n	8001186 <__aeabi_fsub+0x30e>
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	4660      	mov	r0, ip
 8000fca:	04db      	lsls	r3, r3, #19
 8000fcc:	4318      	orrs	r0, r3
 8000fce:	4684      	mov	ip, r0
 8000fd0:	291b      	cmp	r1, #27
 8000fd2:	dc00      	bgt.n	8000fd6 <__aeabi_fsub+0x15e>
 8000fd4:	e0d9      	b.n	800118a <__aeabi_fsub+0x312>
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	0015      	movs	r5, r2
 8000fda:	1980      	adds	r0, r0, r6
 8000fdc:	e7b1      	b.n	8000f42 <__aeabi_fsub+0xca>
 8000fde:	20fe      	movs	r0, #254	; 0xfe
 8000fe0:	1c6a      	adds	r2, r5, #1
 8000fe2:	4210      	tst	r0, r2
 8000fe4:	d171      	bne.n	80010ca <__aeabi_fsub+0x252>
 8000fe6:	2d00      	cmp	r5, #0
 8000fe8:	d000      	beq.n	8000fec <__aeabi_fsub+0x174>
 8000fea:	e0a6      	b.n	800113a <__aeabi_fsub+0x2c2>
 8000fec:	4663      	mov	r3, ip
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x17c>
 8000ff2:	e0d9      	b.n	80011a8 <__aeabi_fsub+0x330>
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x184>
 8000ffa:	e788      	b.n	8000f0e <__aeabi_fsub+0x96>
 8000ffc:	1b98      	subs	r0, r3, r6
 8000ffe:	0143      	lsls	r3, r0, #5
 8001000:	d400      	bmi.n	8001004 <__aeabi_fsub+0x18c>
 8001002:	e0e1      	b.n	80011c8 <__aeabi_fsub+0x350>
 8001004:	4663      	mov	r3, ip
 8001006:	000c      	movs	r4, r1
 8001008:	1af0      	subs	r0, r6, r3
 800100a:	e76f      	b.n	8000eec <__aeabi_fsub+0x74>
 800100c:	2e00      	cmp	r6, #0
 800100e:	d100      	bne.n	8001012 <__aeabi_fsub+0x19a>
 8001010:	e0b7      	b.n	8001182 <__aeabi_fsub+0x30a>
 8001012:	0002      	movs	r2, r0
 8001014:	3a01      	subs	r2, #1
 8001016:	2801      	cmp	r0, #1
 8001018:	d100      	bne.n	800101c <__aeabi_fsub+0x1a4>
 800101a:	e09c      	b.n	8001156 <__aeabi_fsub+0x2de>
 800101c:	28ff      	cmp	r0, #255	; 0xff
 800101e:	d026      	beq.n	800106e <__aeabi_fsub+0x1f6>
 8001020:	4690      	mov	r8, r2
 8001022:	e788      	b.n	8000f36 <__aeabi_fsub+0xbe>
 8001024:	22ff      	movs	r2, #255	; 0xff
 8001026:	2700      	movs	r7, #0
 8001028:	e771      	b.n	8000f0e <__aeabi_fsub+0x96>
 800102a:	20fe      	movs	r0, #254	; 0xfe
 800102c:	1c6a      	adds	r2, r5, #1
 800102e:	4210      	tst	r0, r2
 8001030:	d064      	beq.n	80010fc <__aeabi_fsub+0x284>
 8001032:	2aff      	cmp	r2, #255	; 0xff
 8001034:	d0f6      	beq.n	8001024 <__aeabi_fsub+0x1ac>
 8001036:	0015      	movs	r5, r2
 8001038:	4466      	add	r6, ip
 800103a:	0870      	lsrs	r0, r6, #1
 800103c:	0743      	lsls	r3, r0, #29
 800103e:	d000      	beq.n	8001042 <__aeabi_fsub+0x1ca>
 8001040:	e756      	b.n	8000ef0 <__aeabi_fsub+0x78>
 8001042:	08c3      	lsrs	r3, r0, #3
 8001044:	2dff      	cmp	r5, #255	; 0xff
 8001046:	d012      	beq.n	800106e <__aeabi_fsub+0x1f6>
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	0a5f      	lsrs	r7, r3, #9
 800104c:	b2ea      	uxtb	r2, r5
 800104e:	e75e      	b.n	8000f0e <__aeabi_fsub+0x96>
 8001050:	4662      	mov	r2, ip
 8001052:	2a00      	cmp	r2, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x1e0>
 8001056:	e096      	b.n	8001186 <__aeabi_fsub+0x30e>
 8001058:	2e00      	cmp	r6, #0
 800105a:	d008      	beq.n	800106e <__aeabi_fsub+0x1f6>
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	03d2      	lsls	r2, r2, #15
 8001060:	4213      	tst	r3, r2
 8001062:	d004      	beq.n	800106e <__aeabi_fsub+0x1f6>
 8001064:	4648      	mov	r0, r9
 8001066:	4210      	tst	r0, r2
 8001068:	d101      	bne.n	800106e <__aeabi_fsub+0x1f6>
 800106a:	000c      	movs	r4, r1
 800106c:	464b      	mov	r3, r9
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0d8      	beq.n	8001024 <__aeabi_fsub+0x1ac>
 8001072:	2780      	movs	r7, #128	; 0x80
 8001074:	03ff      	lsls	r7, r7, #15
 8001076:	431f      	orrs	r7, r3
 8001078:	027f      	lsls	r7, r7, #9
 800107a:	22ff      	movs	r2, #255	; 0xff
 800107c:	0a7f      	lsrs	r7, r7, #9
 800107e:	e746      	b.n	8000f0e <__aeabi_fsub+0x96>
 8001080:	2320      	movs	r3, #32
 8001082:	003a      	movs	r2, r7
 8001084:	1b45      	subs	r5, r0, r5
 8001086:	0038      	movs	r0, r7
 8001088:	3501      	adds	r5, #1
 800108a:	40ea      	lsrs	r2, r5
 800108c:	1b5d      	subs	r5, r3, r5
 800108e:	40a8      	lsls	r0, r5
 8001090:	1e43      	subs	r3, r0, #1
 8001092:	4198      	sbcs	r0, r3
 8001094:	2500      	movs	r5, #0
 8001096:	4310      	orrs	r0, r2
 8001098:	e728      	b.n	8000eec <__aeabi_fsub+0x74>
 800109a:	2320      	movs	r3, #32
 800109c:	1a1b      	subs	r3, r3, r0
 800109e:	0032      	movs	r2, r6
 80010a0:	409e      	lsls	r6, r3
 80010a2:	40c2      	lsrs	r2, r0
 80010a4:	0030      	movs	r0, r6
 80010a6:	1e43      	subs	r3, r0, #1
 80010a8:	4198      	sbcs	r0, r3
 80010aa:	4310      	orrs	r0, r2
 80010ac:	e70c      	b.n	8000ec8 <__aeabi_fsub+0x50>
 80010ae:	2aff      	cmp	r2, #255	; 0xff
 80010b0:	d0db      	beq.n	800106a <__aeabi_fsub+0x1f2>
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	4660      	mov	r0, ip
 80010b6:	04db      	lsls	r3, r3, #19
 80010b8:	4318      	orrs	r0, r3
 80010ba:	4684      	mov	ip, r0
 80010bc:	2f1b      	cmp	r7, #27
 80010be:	dd56      	ble.n	800116e <__aeabi_fsub+0x2f6>
 80010c0:	2001      	movs	r0, #1
 80010c2:	000c      	movs	r4, r1
 80010c4:	0015      	movs	r5, r2
 80010c6:	1a30      	subs	r0, r6, r0
 80010c8:	e700      	b.n	8000ecc <__aeabi_fsub+0x54>
 80010ca:	4663      	mov	r3, ip
 80010cc:	1b9f      	subs	r7, r3, r6
 80010ce:	017b      	lsls	r3, r7, #5
 80010d0:	d43d      	bmi.n	800114e <__aeabi_fsub+0x2d6>
 80010d2:	2f00      	cmp	r7, #0
 80010d4:	d000      	beq.n	80010d8 <__aeabi_fsub+0x260>
 80010d6:	e6fe      	b.n	8000ed6 <__aeabi_fsub+0x5e>
 80010d8:	2400      	movs	r4, #0
 80010da:	2200      	movs	r2, #0
 80010dc:	2700      	movs	r7, #0
 80010de:	e716      	b.n	8000f0e <__aeabi_fsub+0x96>
 80010e0:	0005      	movs	r5, r0
 80010e2:	e7af      	b.n	8001044 <__aeabi_fsub+0x1cc>
 80010e4:	0032      	movs	r2, r6
 80010e6:	4643      	mov	r3, r8
 80010e8:	4641      	mov	r1, r8
 80010ea:	40da      	lsrs	r2, r3
 80010ec:	2320      	movs	r3, #32
 80010ee:	1a5b      	subs	r3, r3, r1
 80010f0:	409e      	lsls	r6, r3
 80010f2:	0030      	movs	r0, r6
 80010f4:	1e43      	subs	r3, r0, #1
 80010f6:	4198      	sbcs	r0, r3
 80010f8:	4310      	orrs	r0, r2
 80010fa:	e721      	b.n	8000f40 <__aeabi_fsub+0xc8>
 80010fc:	2d00      	cmp	r5, #0
 80010fe:	d1a7      	bne.n	8001050 <__aeabi_fsub+0x1d8>
 8001100:	4663      	mov	r3, ip
 8001102:	2b00      	cmp	r3, #0
 8001104:	d059      	beq.n	80011ba <__aeabi_fsub+0x342>
 8001106:	2200      	movs	r2, #0
 8001108:	2e00      	cmp	r6, #0
 800110a:	d100      	bne.n	800110e <__aeabi_fsub+0x296>
 800110c:	e6ff      	b.n	8000f0e <__aeabi_fsub+0x96>
 800110e:	0030      	movs	r0, r6
 8001110:	4460      	add	r0, ip
 8001112:	0143      	lsls	r3, r0, #5
 8001114:	d592      	bpl.n	800103c <__aeabi_fsub+0x1c4>
 8001116:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <__aeabi_fsub+0x348>)
 8001118:	3501      	adds	r5, #1
 800111a:	4018      	ands	r0, r3
 800111c:	e78e      	b.n	800103c <__aeabi_fsub+0x1c4>
 800111e:	4663      	mov	r3, ip
 8001120:	2b00      	cmp	r3, #0
 8001122:	d047      	beq.n	80011b4 <__aeabi_fsub+0x33c>
 8001124:	1e4b      	subs	r3, r1, #1
 8001126:	2901      	cmp	r1, #1
 8001128:	d015      	beq.n	8001156 <__aeabi_fsub+0x2de>
 800112a:	29ff      	cmp	r1, #255	; 0xff
 800112c:	d02b      	beq.n	8001186 <__aeabi_fsub+0x30e>
 800112e:	0019      	movs	r1, r3
 8001130:	e74e      	b.n	8000fd0 <__aeabi_fsub+0x158>
 8001132:	000c      	movs	r4, r1
 8001134:	464b      	mov	r3, r9
 8001136:	003d      	movs	r5, r7
 8001138:	e784      	b.n	8001044 <__aeabi_fsub+0x1cc>
 800113a:	4662      	mov	r2, ip
 800113c:	2a00      	cmp	r2, #0
 800113e:	d18b      	bne.n	8001058 <__aeabi_fsub+0x1e0>
 8001140:	2e00      	cmp	r6, #0
 8001142:	d192      	bne.n	800106a <__aeabi_fsub+0x1f2>
 8001144:	2780      	movs	r7, #128	; 0x80
 8001146:	2400      	movs	r4, #0
 8001148:	22ff      	movs	r2, #255	; 0xff
 800114a:	03ff      	lsls	r7, r7, #15
 800114c:	e6df      	b.n	8000f0e <__aeabi_fsub+0x96>
 800114e:	4663      	mov	r3, ip
 8001150:	000c      	movs	r4, r1
 8001152:	1af7      	subs	r7, r6, r3
 8001154:	e6bf      	b.n	8000ed6 <__aeabi_fsub+0x5e>
 8001156:	0030      	movs	r0, r6
 8001158:	4460      	add	r0, ip
 800115a:	2501      	movs	r5, #1
 800115c:	0143      	lsls	r3, r0, #5
 800115e:	d400      	bmi.n	8001162 <__aeabi_fsub+0x2ea>
 8001160:	e76c      	b.n	800103c <__aeabi_fsub+0x1c4>
 8001162:	2502      	movs	r5, #2
 8001164:	e6f2      	b.n	8000f4c <__aeabi_fsub+0xd4>
 8001166:	4663      	mov	r3, ip
 8001168:	2501      	movs	r5, #1
 800116a:	1b98      	subs	r0, r3, r6
 800116c:	e6ae      	b.n	8000ecc <__aeabi_fsub+0x54>
 800116e:	2320      	movs	r3, #32
 8001170:	4664      	mov	r4, ip
 8001172:	4660      	mov	r0, ip
 8001174:	40fc      	lsrs	r4, r7
 8001176:	1bdf      	subs	r7, r3, r7
 8001178:	40b8      	lsls	r0, r7
 800117a:	1e43      	subs	r3, r0, #1
 800117c:	4198      	sbcs	r0, r3
 800117e:	4320      	orrs	r0, r4
 8001180:	e79f      	b.n	80010c2 <__aeabi_fsub+0x24a>
 8001182:	0005      	movs	r5, r0
 8001184:	e75e      	b.n	8001044 <__aeabi_fsub+0x1cc>
 8001186:	464b      	mov	r3, r9
 8001188:	e771      	b.n	800106e <__aeabi_fsub+0x1f6>
 800118a:	2320      	movs	r3, #32
 800118c:	4665      	mov	r5, ip
 800118e:	4660      	mov	r0, ip
 8001190:	40cd      	lsrs	r5, r1
 8001192:	1a59      	subs	r1, r3, r1
 8001194:	4088      	lsls	r0, r1
 8001196:	1e43      	subs	r3, r0, #1
 8001198:	4198      	sbcs	r0, r3
 800119a:	4328      	orrs	r0, r5
 800119c:	e71c      	b.n	8000fd8 <__aeabi_fsub+0x160>
 800119e:	4663      	mov	r3, ip
 80011a0:	000c      	movs	r4, r1
 80011a2:	2501      	movs	r5, #1
 80011a4:	1af0      	subs	r0, r6, r3
 80011a6:	e691      	b.n	8000ecc <__aeabi_fsub+0x54>
 80011a8:	2e00      	cmp	r6, #0
 80011aa:	d095      	beq.n	80010d8 <__aeabi_fsub+0x260>
 80011ac:	000c      	movs	r4, r1
 80011ae:	464f      	mov	r7, r9
 80011b0:	2200      	movs	r2, #0
 80011b2:	e6ac      	b.n	8000f0e <__aeabi_fsub+0x96>
 80011b4:	464b      	mov	r3, r9
 80011b6:	000d      	movs	r5, r1
 80011b8:	e744      	b.n	8001044 <__aeabi_fsub+0x1cc>
 80011ba:	464f      	mov	r7, r9
 80011bc:	2200      	movs	r2, #0
 80011be:	e6a6      	b.n	8000f0e <__aeabi_fsub+0x96>
 80011c0:	fbffffff 	.word	0xfbffffff
 80011c4:	7dffffff 	.word	0x7dffffff
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d000      	beq.n	80011ce <__aeabi_fsub+0x356>
 80011cc:	e736      	b.n	800103c <__aeabi_fsub+0x1c4>
 80011ce:	2400      	movs	r4, #0
 80011d0:	2700      	movs	r7, #0
 80011d2:	e69c      	b.n	8000f0e <__aeabi_fsub+0x96>

080011d4 <__aeabi_i2f>:
 80011d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d013      	beq.n	8001202 <__aeabi_i2f+0x2e>
 80011da:	17c3      	asrs	r3, r0, #31
 80011dc:	18c6      	adds	r6, r0, r3
 80011de:	405e      	eors	r6, r3
 80011e0:	0fc4      	lsrs	r4, r0, #31
 80011e2:	0030      	movs	r0, r6
 80011e4:	f001 ff3c 	bl	8003060 <__clzsi2>
 80011e8:	239e      	movs	r3, #158	; 0x9e
 80011ea:	0005      	movs	r5, r0
 80011ec:	1a1b      	subs	r3, r3, r0
 80011ee:	2b96      	cmp	r3, #150	; 0x96
 80011f0:	dc0f      	bgt.n	8001212 <__aeabi_i2f+0x3e>
 80011f2:	2808      	cmp	r0, #8
 80011f4:	dd01      	ble.n	80011fa <__aeabi_i2f+0x26>
 80011f6:	3d08      	subs	r5, #8
 80011f8:	40ae      	lsls	r6, r5
 80011fa:	0276      	lsls	r6, r6, #9
 80011fc:	0a76      	lsrs	r6, r6, #9
 80011fe:	b2d8      	uxtb	r0, r3
 8001200:	e002      	b.n	8001208 <__aeabi_i2f+0x34>
 8001202:	2400      	movs	r4, #0
 8001204:	2000      	movs	r0, #0
 8001206:	2600      	movs	r6, #0
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4330      	orrs	r0, r6
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001212:	2b99      	cmp	r3, #153	; 0x99
 8001214:	dd0c      	ble.n	8001230 <__aeabi_i2f+0x5c>
 8001216:	2205      	movs	r2, #5
 8001218:	0031      	movs	r1, r6
 800121a:	1a12      	subs	r2, r2, r0
 800121c:	40d1      	lsrs	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	0001      	movs	r1, r0
 8001222:	0030      	movs	r0, r6
 8001224:	311b      	adds	r1, #27
 8001226:	4088      	lsls	r0, r1
 8001228:	1e41      	subs	r1, r0, #1
 800122a:	4188      	sbcs	r0, r1
 800122c:	4302      	orrs	r2, r0
 800122e:	0016      	movs	r6, r2
 8001230:	2d05      	cmp	r5, #5
 8001232:	dc12      	bgt.n	800125a <__aeabi_i2f+0x86>
 8001234:	0031      	movs	r1, r6
 8001236:	4f0d      	ldr	r7, [pc, #52]	; (800126c <__aeabi_i2f+0x98>)
 8001238:	4039      	ands	r1, r7
 800123a:	0772      	lsls	r2, r6, #29
 800123c:	d009      	beq.n	8001252 <__aeabi_i2f+0x7e>
 800123e:	200f      	movs	r0, #15
 8001240:	4030      	ands	r0, r6
 8001242:	2804      	cmp	r0, #4
 8001244:	d005      	beq.n	8001252 <__aeabi_i2f+0x7e>
 8001246:	3104      	adds	r1, #4
 8001248:	014a      	lsls	r2, r1, #5
 800124a:	d502      	bpl.n	8001252 <__aeabi_i2f+0x7e>
 800124c:	239f      	movs	r3, #159	; 0x9f
 800124e:	4039      	ands	r1, r7
 8001250:	1b5b      	subs	r3, r3, r5
 8001252:	0189      	lsls	r1, r1, #6
 8001254:	0a4e      	lsrs	r6, r1, #9
 8001256:	b2d8      	uxtb	r0, r3
 8001258:	e7d6      	b.n	8001208 <__aeabi_i2f+0x34>
 800125a:	1f6a      	subs	r2, r5, #5
 800125c:	4096      	lsls	r6, r2
 800125e:	0031      	movs	r1, r6
 8001260:	4f02      	ldr	r7, [pc, #8]	; (800126c <__aeabi_i2f+0x98>)
 8001262:	4039      	ands	r1, r7
 8001264:	0772      	lsls	r2, r6, #29
 8001266:	d0f4      	beq.n	8001252 <__aeabi_i2f+0x7e>
 8001268:	e7e9      	b.n	800123e <__aeabi_i2f+0x6a>
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	fbffffff 	.word	0xfbffffff

08001270 <__aeabi_ui2f>:
 8001270:	b570      	push	{r4, r5, r6, lr}
 8001272:	1e05      	subs	r5, r0, #0
 8001274:	d00e      	beq.n	8001294 <__aeabi_ui2f+0x24>
 8001276:	f001 fef3 	bl	8003060 <__clzsi2>
 800127a:	239e      	movs	r3, #158	; 0x9e
 800127c:	0004      	movs	r4, r0
 800127e:	1a1b      	subs	r3, r3, r0
 8001280:	2b96      	cmp	r3, #150	; 0x96
 8001282:	dc0c      	bgt.n	800129e <__aeabi_ui2f+0x2e>
 8001284:	2808      	cmp	r0, #8
 8001286:	dd01      	ble.n	800128c <__aeabi_ui2f+0x1c>
 8001288:	3c08      	subs	r4, #8
 800128a:	40a5      	lsls	r5, r4
 800128c:	026d      	lsls	r5, r5, #9
 800128e:	0a6d      	lsrs	r5, r5, #9
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	e001      	b.n	8001298 <__aeabi_ui2f+0x28>
 8001294:	2000      	movs	r0, #0
 8001296:	2500      	movs	r5, #0
 8001298:	05c0      	lsls	r0, r0, #23
 800129a:	4328      	orrs	r0, r5
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	2b99      	cmp	r3, #153	; 0x99
 80012a0:	dd09      	ble.n	80012b6 <__aeabi_ui2f+0x46>
 80012a2:	0002      	movs	r2, r0
 80012a4:	0029      	movs	r1, r5
 80012a6:	321b      	adds	r2, #27
 80012a8:	4091      	lsls	r1, r2
 80012aa:	1e4a      	subs	r2, r1, #1
 80012ac:	4191      	sbcs	r1, r2
 80012ae:	2205      	movs	r2, #5
 80012b0:	1a12      	subs	r2, r2, r0
 80012b2:	40d5      	lsrs	r5, r2
 80012b4:	430d      	orrs	r5, r1
 80012b6:	2c05      	cmp	r4, #5
 80012b8:	dc12      	bgt.n	80012e0 <__aeabi_ui2f+0x70>
 80012ba:	0029      	movs	r1, r5
 80012bc:	4e0c      	ldr	r6, [pc, #48]	; (80012f0 <__aeabi_ui2f+0x80>)
 80012be:	4031      	ands	r1, r6
 80012c0:	076a      	lsls	r2, r5, #29
 80012c2:	d009      	beq.n	80012d8 <__aeabi_ui2f+0x68>
 80012c4:	200f      	movs	r0, #15
 80012c6:	4028      	ands	r0, r5
 80012c8:	2804      	cmp	r0, #4
 80012ca:	d005      	beq.n	80012d8 <__aeabi_ui2f+0x68>
 80012cc:	3104      	adds	r1, #4
 80012ce:	014a      	lsls	r2, r1, #5
 80012d0:	d502      	bpl.n	80012d8 <__aeabi_ui2f+0x68>
 80012d2:	239f      	movs	r3, #159	; 0x9f
 80012d4:	4031      	ands	r1, r6
 80012d6:	1b1b      	subs	r3, r3, r4
 80012d8:	0189      	lsls	r1, r1, #6
 80012da:	0a4d      	lsrs	r5, r1, #9
 80012dc:	b2d8      	uxtb	r0, r3
 80012de:	e7db      	b.n	8001298 <__aeabi_ui2f+0x28>
 80012e0:	1f62      	subs	r2, r4, #5
 80012e2:	4095      	lsls	r5, r2
 80012e4:	0029      	movs	r1, r5
 80012e6:	4e02      	ldr	r6, [pc, #8]	; (80012f0 <__aeabi_ui2f+0x80>)
 80012e8:	4031      	ands	r1, r6
 80012ea:	076a      	lsls	r2, r5, #29
 80012ec:	d0f4      	beq.n	80012d8 <__aeabi_ui2f+0x68>
 80012ee:	e7e9      	b.n	80012c4 <__aeabi_ui2f+0x54>
 80012f0:	fbffffff 	.word	0xfbffffff

080012f4 <__aeabi_dadd>:
 80012f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f6:	464f      	mov	r7, r9
 80012f8:	4646      	mov	r6, r8
 80012fa:	46d6      	mov	lr, sl
 80012fc:	000d      	movs	r5, r1
 80012fe:	0004      	movs	r4, r0
 8001300:	b5c0      	push	{r6, r7, lr}
 8001302:	001f      	movs	r7, r3
 8001304:	0011      	movs	r1, r2
 8001306:	0328      	lsls	r0, r5, #12
 8001308:	0f62      	lsrs	r2, r4, #29
 800130a:	0a40      	lsrs	r0, r0, #9
 800130c:	4310      	orrs	r0, r2
 800130e:	007a      	lsls	r2, r7, #1
 8001310:	0d52      	lsrs	r2, r2, #21
 8001312:	00e3      	lsls	r3, r4, #3
 8001314:	033c      	lsls	r4, r7, #12
 8001316:	4691      	mov	r9, r2
 8001318:	0a64      	lsrs	r4, r4, #9
 800131a:	0ffa      	lsrs	r2, r7, #31
 800131c:	0f4f      	lsrs	r7, r1, #29
 800131e:	006e      	lsls	r6, r5, #1
 8001320:	4327      	orrs	r7, r4
 8001322:	4692      	mov	sl, r2
 8001324:	46b8      	mov	r8, r7
 8001326:	0d76      	lsrs	r6, r6, #21
 8001328:	0fed      	lsrs	r5, r5, #31
 800132a:	00c9      	lsls	r1, r1, #3
 800132c:	4295      	cmp	r5, r2
 800132e:	d100      	bne.n	8001332 <__aeabi_dadd+0x3e>
 8001330:	e099      	b.n	8001466 <__aeabi_dadd+0x172>
 8001332:	464c      	mov	r4, r9
 8001334:	1b34      	subs	r4, r6, r4
 8001336:	46a4      	mov	ip, r4
 8001338:	2c00      	cmp	r4, #0
 800133a:	dc00      	bgt.n	800133e <__aeabi_dadd+0x4a>
 800133c:	e07c      	b.n	8001438 <__aeabi_dadd+0x144>
 800133e:	464a      	mov	r2, r9
 8001340:	2a00      	cmp	r2, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x52>
 8001344:	e0b8      	b.n	80014b8 <__aeabi_dadd+0x1c4>
 8001346:	4ac5      	ldr	r2, [pc, #788]	; (800165c <__aeabi_dadd+0x368>)
 8001348:	4296      	cmp	r6, r2
 800134a:	d100      	bne.n	800134e <__aeabi_dadd+0x5a>
 800134c:	e11c      	b.n	8001588 <__aeabi_dadd+0x294>
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	003c      	movs	r4, r7
 8001352:	0412      	lsls	r2, r2, #16
 8001354:	4314      	orrs	r4, r2
 8001356:	46a0      	mov	r8, r4
 8001358:	4662      	mov	r2, ip
 800135a:	2a38      	cmp	r2, #56	; 0x38
 800135c:	dd00      	ble.n	8001360 <__aeabi_dadd+0x6c>
 800135e:	e161      	b.n	8001624 <__aeabi_dadd+0x330>
 8001360:	2a1f      	cmp	r2, #31
 8001362:	dd00      	ble.n	8001366 <__aeabi_dadd+0x72>
 8001364:	e1cc      	b.n	8001700 <__aeabi_dadd+0x40c>
 8001366:	4664      	mov	r4, ip
 8001368:	2220      	movs	r2, #32
 800136a:	1b12      	subs	r2, r2, r4
 800136c:	4644      	mov	r4, r8
 800136e:	4094      	lsls	r4, r2
 8001370:	000f      	movs	r7, r1
 8001372:	46a1      	mov	r9, r4
 8001374:	4664      	mov	r4, ip
 8001376:	4091      	lsls	r1, r2
 8001378:	40e7      	lsrs	r7, r4
 800137a:	464c      	mov	r4, r9
 800137c:	1e4a      	subs	r2, r1, #1
 800137e:	4191      	sbcs	r1, r2
 8001380:	433c      	orrs	r4, r7
 8001382:	4642      	mov	r2, r8
 8001384:	4321      	orrs	r1, r4
 8001386:	4664      	mov	r4, ip
 8001388:	40e2      	lsrs	r2, r4
 800138a:	1a80      	subs	r0, r0, r2
 800138c:	1a5c      	subs	r4, r3, r1
 800138e:	42a3      	cmp	r3, r4
 8001390:	419b      	sbcs	r3, r3
 8001392:	425f      	negs	r7, r3
 8001394:	1bc7      	subs	r7, r0, r7
 8001396:	023b      	lsls	r3, r7, #8
 8001398:	d400      	bmi.n	800139c <__aeabi_dadd+0xa8>
 800139a:	e0d0      	b.n	800153e <__aeabi_dadd+0x24a>
 800139c:	027f      	lsls	r7, r7, #9
 800139e:	0a7f      	lsrs	r7, r7, #9
 80013a0:	2f00      	cmp	r7, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_dadd+0xb2>
 80013a4:	e0ff      	b.n	80015a6 <__aeabi_dadd+0x2b2>
 80013a6:	0038      	movs	r0, r7
 80013a8:	f001 fe5a 	bl	8003060 <__clzsi2>
 80013ac:	0001      	movs	r1, r0
 80013ae:	3908      	subs	r1, #8
 80013b0:	2320      	movs	r3, #32
 80013b2:	0022      	movs	r2, r4
 80013b4:	1a5b      	subs	r3, r3, r1
 80013b6:	408f      	lsls	r7, r1
 80013b8:	40da      	lsrs	r2, r3
 80013ba:	408c      	lsls	r4, r1
 80013bc:	4317      	orrs	r7, r2
 80013be:	42b1      	cmp	r1, r6
 80013c0:	da00      	bge.n	80013c4 <__aeabi_dadd+0xd0>
 80013c2:	e0ff      	b.n	80015c4 <__aeabi_dadd+0x2d0>
 80013c4:	1b89      	subs	r1, r1, r6
 80013c6:	1c4b      	adds	r3, r1, #1
 80013c8:	2b1f      	cmp	r3, #31
 80013ca:	dd00      	ble.n	80013ce <__aeabi_dadd+0xda>
 80013cc:	e0a8      	b.n	8001520 <__aeabi_dadd+0x22c>
 80013ce:	2220      	movs	r2, #32
 80013d0:	0039      	movs	r1, r7
 80013d2:	1ad2      	subs	r2, r2, r3
 80013d4:	0020      	movs	r0, r4
 80013d6:	4094      	lsls	r4, r2
 80013d8:	4091      	lsls	r1, r2
 80013da:	40d8      	lsrs	r0, r3
 80013dc:	1e62      	subs	r2, r4, #1
 80013de:	4194      	sbcs	r4, r2
 80013e0:	40df      	lsrs	r7, r3
 80013e2:	2600      	movs	r6, #0
 80013e4:	4301      	orrs	r1, r0
 80013e6:	430c      	orrs	r4, r1
 80013e8:	0763      	lsls	r3, r4, #29
 80013ea:	d009      	beq.n	8001400 <__aeabi_dadd+0x10c>
 80013ec:	230f      	movs	r3, #15
 80013ee:	4023      	ands	r3, r4
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d005      	beq.n	8001400 <__aeabi_dadd+0x10c>
 80013f4:	1d23      	adds	r3, r4, #4
 80013f6:	42a3      	cmp	r3, r4
 80013f8:	41a4      	sbcs	r4, r4
 80013fa:	4264      	negs	r4, r4
 80013fc:	193f      	adds	r7, r7, r4
 80013fe:	001c      	movs	r4, r3
 8001400:	023b      	lsls	r3, r7, #8
 8001402:	d400      	bmi.n	8001406 <__aeabi_dadd+0x112>
 8001404:	e09e      	b.n	8001544 <__aeabi_dadd+0x250>
 8001406:	4b95      	ldr	r3, [pc, #596]	; (800165c <__aeabi_dadd+0x368>)
 8001408:	3601      	adds	r6, #1
 800140a:	429e      	cmp	r6, r3
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x11c>
 800140e:	e0b7      	b.n	8001580 <__aeabi_dadd+0x28c>
 8001410:	4a93      	ldr	r2, [pc, #588]	; (8001660 <__aeabi_dadd+0x36c>)
 8001412:	08e4      	lsrs	r4, r4, #3
 8001414:	4017      	ands	r7, r2
 8001416:	077b      	lsls	r3, r7, #29
 8001418:	0571      	lsls	r1, r6, #21
 800141a:	027f      	lsls	r7, r7, #9
 800141c:	4323      	orrs	r3, r4
 800141e:	0b3f      	lsrs	r7, r7, #12
 8001420:	0d4a      	lsrs	r2, r1, #21
 8001422:	0512      	lsls	r2, r2, #20
 8001424:	433a      	orrs	r2, r7
 8001426:	07ed      	lsls	r5, r5, #31
 8001428:	432a      	orrs	r2, r5
 800142a:	0018      	movs	r0, r3
 800142c:	0011      	movs	r1, r2
 800142e:	bce0      	pop	{r5, r6, r7}
 8001430:	46ba      	mov	sl, r7
 8001432:	46b1      	mov	r9, r6
 8001434:	46a8      	mov	r8, r5
 8001436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001438:	2c00      	cmp	r4, #0
 800143a:	d04b      	beq.n	80014d4 <__aeabi_dadd+0x1e0>
 800143c:	464c      	mov	r4, r9
 800143e:	1ba4      	subs	r4, r4, r6
 8001440:	46a4      	mov	ip, r4
 8001442:	2e00      	cmp	r6, #0
 8001444:	d000      	beq.n	8001448 <__aeabi_dadd+0x154>
 8001446:	e123      	b.n	8001690 <__aeabi_dadd+0x39c>
 8001448:	0004      	movs	r4, r0
 800144a:	431c      	orrs	r4, r3
 800144c:	d100      	bne.n	8001450 <__aeabi_dadd+0x15c>
 800144e:	e1af      	b.n	80017b0 <__aeabi_dadd+0x4bc>
 8001450:	4662      	mov	r2, ip
 8001452:	1e54      	subs	r4, r2, #1
 8001454:	2a01      	cmp	r2, #1
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x166>
 8001458:	e215      	b.n	8001886 <__aeabi_dadd+0x592>
 800145a:	4d80      	ldr	r5, [pc, #512]	; (800165c <__aeabi_dadd+0x368>)
 800145c:	45ac      	cmp	ip, r5
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x16e>
 8001460:	e1c8      	b.n	80017f4 <__aeabi_dadd+0x500>
 8001462:	46a4      	mov	ip, r4
 8001464:	e11b      	b.n	800169e <__aeabi_dadd+0x3aa>
 8001466:	464a      	mov	r2, r9
 8001468:	1ab2      	subs	r2, r6, r2
 800146a:	4694      	mov	ip, r2
 800146c:	2a00      	cmp	r2, #0
 800146e:	dc00      	bgt.n	8001472 <__aeabi_dadd+0x17e>
 8001470:	e0ac      	b.n	80015cc <__aeabi_dadd+0x2d8>
 8001472:	464a      	mov	r2, r9
 8001474:	2a00      	cmp	r2, #0
 8001476:	d043      	beq.n	8001500 <__aeabi_dadd+0x20c>
 8001478:	4a78      	ldr	r2, [pc, #480]	; (800165c <__aeabi_dadd+0x368>)
 800147a:	4296      	cmp	r6, r2
 800147c:	d100      	bne.n	8001480 <__aeabi_dadd+0x18c>
 800147e:	e1af      	b.n	80017e0 <__aeabi_dadd+0x4ec>
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	003c      	movs	r4, r7
 8001484:	0412      	lsls	r2, r2, #16
 8001486:	4314      	orrs	r4, r2
 8001488:	46a0      	mov	r8, r4
 800148a:	4662      	mov	r2, ip
 800148c:	2a38      	cmp	r2, #56	; 0x38
 800148e:	dc67      	bgt.n	8001560 <__aeabi_dadd+0x26c>
 8001490:	2a1f      	cmp	r2, #31
 8001492:	dc00      	bgt.n	8001496 <__aeabi_dadd+0x1a2>
 8001494:	e15f      	b.n	8001756 <__aeabi_dadd+0x462>
 8001496:	4647      	mov	r7, r8
 8001498:	3a20      	subs	r2, #32
 800149a:	40d7      	lsrs	r7, r2
 800149c:	4662      	mov	r2, ip
 800149e:	2a20      	cmp	r2, #32
 80014a0:	d005      	beq.n	80014ae <__aeabi_dadd+0x1ba>
 80014a2:	4664      	mov	r4, ip
 80014a4:	2240      	movs	r2, #64	; 0x40
 80014a6:	1b12      	subs	r2, r2, r4
 80014a8:	4644      	mov	r4, r8
 80014aa:	4094      	lsls	r4, r2
 80014ac:	4321      	orrs	r1, r4
 80014ae:	1e4a      	subs	r2, r1, #1
 80014b0:	4191      	sbcs	r1, r2
 80014b2:	000c      	movs	r4, r1
 80014b4:	433c      	orrs	r4, r7
 80014b6:	e057      	b.n	8001568 <__aeabi_dadd+0x274>
 80014b8:	003a      	movs	r2, r7
 80014ba:	430a      	orrs	r2, r1
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dadd+0x1cc>
 80014be:	e105      	b.n	80016cc <__aeabi_dadd+0x3d8>
 80014c0:	0022      	movs	r2, r4
 80014c2:	3a01      	subs	r2, #1
 80014c4:	2c01      	cmp	r4, #1
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x1d6>
 80014c8:	e182      	b.n	80017d0 <__aeabi_dadd+0x4dc>
 80014ca:	4c64      	ldr	r4, [pc, #400]	; (800165c <__aeabi_dadd+0x368>)
 80014cc:	45a4      	cmp	ip, r4
 80014ce:	d05b      	beq.n	8001588 <__aeabi_dadd+0x294>
 80014d0:	4694      	mov	ip, r2
 80014d2:	e741      	b.n	8001358 <__aeabi_dadd+0x64>
 80014d4:	4c63      	ldr	r4, [pc, #396]	; (8001664 <__aeabi_dadd+0x370>)
 80014d6:	1c77      	adds	r7, r6, #1
 80014d8:	4227      	tst	r7, r4
 80014da:	d000      	beq.n	80014de <__aeabi_dadd+0x1ea>
 80014dc:	e0c4      	b.n	8001668 <__aeabi_dadd+0x374>
 80014de:	0004      	movs	r4, r0
 80014e0:	431c      	orrs	r4, r3
 80014e2:	2e00      	cmp	r6, #0
 80014e4:	d000      	beq.n	80014e8 <__aeabi_dadd+0x1f4>
 80014e6:	e169      	b.n	80017bc <__aeabi_dadd+0x4c8>
 80014e8:	2c00      	cmp	r4, #0
 80014ea:	d100      	bne.n	80014ee <__aeabi_dadd+0x1fa>
 80014ec:	e1bf      	b.n	800186e <__aeabi_dadd+0x57a>
 80014ee:	4644      	mov	r4, r8
 80014f0:	430c      	orrs	r4, r1
 80014f2:	d000      	beq.n	80014f6 <__aeabi_dadd+0x202>
 80014f4:	e1d0      	b.n	8001898 <__aeabi_dadd+0x5a4>
 80014f6:	0742      	lsls	r2, r0, #29
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	08c0      	lsrs	r0, r0, #3
 80014fe:	e029      	b.n	8001554 <__aeabi_dadd+0x260>
 8001500:	003a      	movs	r2, r7
 8001502:	430a      	orrs	r2, r1
 8001504:	d100      	bne.n	8001508 <__aeabi_dadd+0x214>
 8001506:	e170      	b.n	80017ea <__aeabi_dadd+0x4f6>
 8001508:	4662      	mov	r2, ip
 800150a:	4664      	mov	r4, ip
 800150c:	3a01      	subs	r2, #1
 800150e:	2c01      	cmp	r4, #1
 8001510:	d100      	bne.n	8001514 <__aeabi_dadd+0x220>
 8001512:	e0e0      	b.n	80016d6 <__aeabi_dadd+0x3e2>
 8001514:	4c51      	ldr	r4, [pc, #324]	; (800165c <__aeabi_dadd+0x368>)
 8001516:	45a4      	cmp	ip, r4
 8001518:	d100      	bne.n	800151c <__aeabi_dadd+0x228>
 800151a:	e161      	b.n	80017e0 <__aeabi_dadd+0x4ec>
 800151c:	4694      	mov	ip, r2
 800151e:	e7b4      	b.n	800148a <__aeabi_dadd+0x196>
 8001520:	003a      	movs	r2, r7
 8001522:	391f      	subs	r1, #31
 8001524:	40ca      	lsrs	r2, r1
 8001526:	0011      	movs	r1, r2
 8001528:	2b20      	cmp	r3, #32
 800152a:	d003      	beq.n	8001534 <__aeabi_dadd+0x240>
 800152c:	2240      	movs	r2, #64	; 0x40
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	409f      	lsls	r7, r3
 8001532:	433c      	orrs	r4, r7
 8001534:	1e63      	subs	r3, r4, #1
 8001536:	419c      	sbcs	r4, r3
 8001538:	2700      	movs	r7, #0
 800153a:	2600      	movs	r6, #0
 800153c:	430c      	orrs	r4, r1
 800153e:	0763      	lsls	r3, r4, #29
 8001540:	d000      	beq.n	8001544 <__aeabi_dadd+0x250>
 8001542:	e753      	b.n	80013ec <__aeabi_dadd+0xf8>
 8001544:	46b4      	mov	ip, r6
 8001546:	08e4      	lsrs	r4, r4, #3
 8001548:	077b      	lsls	r3, r7, #29
 800154a:	4323      	orrs	r3, r4
 800154c:	08f8      	lsrs	r0, r7, #3
 800154e:	4a43      	ldr	r2, [pc, #268]	; (800165c <__aeabi_dadd+0x368>)
 8001550:	4594      	cmp	ip, r2
 8001552:	d01d      	beq.n	8001590 <__aeabi_dadd+0x29c>
 8001554:	4662      	mov	r2, ip
 8001556:	0307      	lsls	r7, r0, #12
 8001558:	0552      	lsls	r2, r2, #21
 800155a:	0b3f      	lsrs	r7, r7, #12
 800155c:	0d52      	lsrs	r2, r2, #21
 800155e:	e760      	b.n	8001422 <__aeabi_dadd+0x12e>
 8001560:	4644      	mov	r4, r8
 8001562:	430c      	orrs	r4, r1
 8001564:	1e62      	subs	r2, r4, #1
 8001566:	4194      	sbcs	r4, r2
 8001568:	18e4      	adds	r4, r4, r3
 800156a:	429c      	cmp	r4, r3
 800156c:	419b      	sbcs	r3, r3
 800156e:	425f      	negs	r7, r3
 8001570:	183f      	adds	r7, r7, r0
 8001572:	023b      	lsls	r3, r7, #8
 8001574:	d5e3      	bpl.n	800153e <__aeabi_dadd+0x24a>
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <__aeabi_dadd+0x368>)
 8001578:	3601      	adds	r6, #1
 800157a:	429e      	cmp	r6, r3
 800157c:	d000      	beq.n	8001580 <__aeabi_dadd+0x28c>
 800157e:	e0b5      	b.n	80016ec <__aeabi_dadd+0x3f8>
 8001580:	0032      	movs	r2, r6
 8001582:	2700      	movs	r7, #0
 8001584:	2300      	movs	r3, #0
 8001586:	e74c      	b.n	8001422 <__aeabi_dadd+0x12e>
 8001588:	0742      	lsls	r2, r0, #29
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	4313      	orrs	r3, r2
 800158e:	08c0      	lsrs	r0, r0, #3
 8001590:	001a      	movs	r2, r3
 8001592:	4302      	orrs	r2, r0
 8001594:	d100      	bne.n	8001598 <__aeabi_dadd+0x2a4>
 8001596:	e1e1      	b.n	800195c <__aeabi_dadd+0x668>
 8001598:	2780      	movs	r7, #128	; 0x80
 800159a:	033f      	lsls	r7, r7, #12
 800159c:	4307      	orrs	r7, r0
 800159e:	033f      	lsls	r7, r7, #12
 80015a0:	4a2e      	ldr	r2, [pc, #184]	; (800165c <__aeabi_dadd+0x368>)
 80015a2:	0b3f      	lsrs	r7, r7, #12
 80015a4:	e73d      	b.n	8001422 <__aeabi_dadd+0x12e>
 80015a6:	0020      	movs	r0, r4
 80015a8:	f001 fd5a 	bl	8003060 <__clzsi2>
 80015ac:	0001      	movs	r1, r0
 80015ae:	3118      	adds	r1, #24
 80015b0:	291f      	cmp	r1, #31
 80015b2:	dc00      	bgt.n	80015b6 <__aeabi_dadd+0x2c2>
 80015b4:	e6fc      	b.n	80013b0 <__aeabi_dadd+0xbc>
 80015b6:	3808      	subs	r0, #8
 80015b8:	4084      	lsls	r4, r0
 80015ba:	0027      	movs	r7, r4
 80015bc:	2400      	movs	r4, #0
 80015be:	42b1      	cmp	r1, r6
 80015c0:	db00      	blt.n	80015c4 <__aeabi_dadd+0x2d0>
 80015c2:	e6ff      	b.n	80013c4 <__aeabi_dadd+0xd0>
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <__aeabi_dadd+0x36c>)
 80015c6:	1a76      	subs	r6, r6, r1
 80015c8:	4017      	ands	r7, r2
 80015ca:	e70d      	b.n	80013e8 <__aeabi_dadd+0xf4>
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	d02f      	beq.n	8001630 <__aeabi_dadd+0x33c>
 80015d0:	464a      	mov	r2, r9
 80015d2:	1b92      	subs	r2, r2, r6
 80015d4:	4694      	mov	ip, r2
 80015d6:	2e00      	cmp	r6, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x2e8>
 80015da:	e0ad      	b.n	8001738 <__aeabi_dadd+0x444>
 80015dc:	4a1f      	ldr	r2, [pc, #124]	; (800165c <__aeabi_dadd+0x368>)
 80015de:	4591      	cmp	r9, r2
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0x2f0>
 80015e2:	e10f      	b.n	8001804 <__aeabi_dadd+0x510>
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	0412      	lsls	r2, r2, #16
 80015e8:	4310      	orrs	r0, r2
 80015ea:	4662      	mov	r2, ip
 80015ec:	2a38      	cmp	r2, #56	; 0x38
 80015ee:	dd00      	ble.n	80015f2 <__aeabi_dadd+0x2fe>
 80015f0:	e10f      	b.n	8001812 <__aeabi_dadd+0x51e>
 80015f2:	2a1f      	cmp	r2, #31
 80015f4:	dd00      	ble.n	80015f8 <__aeabi_dadd+0x304>
 80015f6:	e180      	b.n	80018fa <__aeabi_dadd+0x606>
 80015f8:	4664      	mov	r4, ip
 80015fa:	2220      	movs	r2, #32
 80015fc:	001e      	movs	r6, r3
 80015fe:	1b12      	subs	r2, r2, r4
 8001600:	4667      	mov	r7, ip
 8001602:	0004      	movs	r4, r0
 8001604:	4093      	lsls	r3, r2
 8001606:	4094      	lsls	r4, r2
 8001608:	40fe      	lsrs	r6, r7
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	4193      	sbcs	r3, r2
 800160e:	40f8      	lsrs	r0, r7
 8001610:	4334      	orrs	r4, r6
 8001612:	431c      	orrs	r4, r3
 8001614:	4480      	add	r8, r0
 8001616:	1864      	adds	r4, r4, r1
 8001618:	428c      	cmp	r4, r1
 800161a:	41bf      	sbcs	r7, r7
 800161c:	427f      	negs	r7, r7
 800161e:	464e      	mov	r6, r9
 8001620:	4447      	add	r7, r8
 8001622:	e7a6      	b.n	8001572 <__aeabi_dadd+0x27e>
 8001624:	4642      	mov	r2, r8
 8001626:	430a      	orrs	r2, r1
 8001628:	0011      	movs	r1, r2
 800162a:	1e4a      	subs	r2, r1, #1
 800162c:	4191      	sbcs	r1, r2
 800162e:	e6ad      	b.n	800138c <__aeabi_dadd+0x98>
 8001630:	4c0c      	ldr	r4, [pc, #48]	; (8001664 <__aeabi_dadd+0x370>)
 8001632:	1c72      	adds	r2, r6, #1
 8001634:	4222      	tst	r2, r4
 8001636:	d000      	beq.n	800163a <__aeabi_dadd+0x346>
 8001638:	e0a1      	b.n	800177e <__aeabi_dadd+0x48a>
 800163a:	0002      	movs	r2, r0
 800163c:	431a      	orrs	r2, r3
 800163e:	2e00      	cmp	r6, #0
 8001640:	d000      	beq.n	8001644 <__aeabi_dadd+0x350>
 8001642:	e0fa      	b.n	800183a <__aeabi_dadd+0x546>
 8001644:	2a00      	cmp	r2, #0
 8001646:	d100      	bne.n	800164a <__aeabi_dadd+0x356>
 8001648:	e145      	b.n	80018d6 <__aeabi_dadd+0x5e2>
 800164a:	003a      	movs	r2, r7
 800164c:	430a      	orrs	r2, r1
 800164e:	d000      	beq.n	8001652 <__aeabi_dadd+0x35e>
 8001650:	e146      	b.n	80018e0 <__aeabi_dadd+0x5ec>
 8001652:	0742      	lsls	r2, r0, #29
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	4313      	orrs	r3, r2
 8001658:	08c0      	lsrs	r0, r0, #3
 800165a:	e77b      	b.n	8001554 <__aeabi_dadd+0x260>
 800165c:	000007ff 	.word	0x000007ff
 8001660:	ff7fffff 	.word	0xff7fffff
 8001664:	000007fe 	.word	0x000007fe
 8001668:	4647      	mov	r7, r8
 800166a:	1a5c      	subs	r4, r3, r1
 800166c:	1bc2      	subs	r2, r0, r7
 800166e:	42a3      	cmp	r3, r4
 8001670:	41bf      	sbcs	r7, r7
 8001672:	427f      	negs	r7, r7
 8001674:	46b9      	mov	r9, r7
 8001676:	0017      	movs	r7, r2
 8001678:	464a      	mov	r2, r9
 800167a:	1abf      	subs	r7, r7, r2
 800167c:	023a      	lsls	r2, r7, #8
 800167e:	d500      	bpl.n	8001682 <__aeabi_dadd+0x38e>
 8001680:	e08d      	b.n	800179e <__aeabi_dadd+0x4aa>
 8001682:	0023      	movs	r3, r4
 8001684:	433b      	orrs	r3, r7
 8001686:	d000      	beq.n	800168a <__aeabi_dadd+0x396>
 8001688:	e68a      	b.n	80013a0 <__aeabi_dadd+0xac>
 800168a:	2000      	movs	r0, #0
 800168c:	2500      	movs	r5, #0
 800168e:	e761      	b.n	8001554 <__aeabi_dadd+0x260>
 8001690:	4cb4      	ldr	r4, [pc, #720]	; (8001964 <__aeabi_dadd+0x670>)
 8001692:	45a1      	cmp	r9, r4
 8001694:	d100      	bne.n	8001698 <__aeabi_dadd+0x3a4>
 8001696:	e0ad      	b.n	80017f4 <__aeabi_dadd+0x500>
 8001698:	2480      	movs	r4, #128	; 0x80
 800169a:	0424      	lsls	r4, r4, #16
 800169c:	4320      	orrs	r0, r4
 800169e:	4664      	mov	r4, ip
 80016a0:	2c38      	cmp	r4, #56	; 0x38
 80016a2:	dc3d      	bgt.n	8001720 <__aeabi_dadd+0x42c>
 80016a4:	4662      	mov	r2, ip
 80016a6:	2c1f      	cmp	r4, #31
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dadd+0x3b8>
 80016aa:	e0b7      	b.n	800181c <__aeabi_dadd+0x528>
 80016ac:	2520      	movs	r5, #32
 80016ae:	001e      	movs	r6, r3
 80016b0:	1b2d      	subs	r5, r5, r4
 80016b2:	0004      	movs	r4, r0
 80016b4:	40ab      	lsls	r3, r5
 80016b6:	40ac      	lsls	r4, r5
 80016b8:	40d6      	lsrs	r6, r2
 80016ba:	40d0      	lsrs	r0, r2
 80016bc:	4642      	mov	r2, r8
 80016be:	1e5d      	subs	r5, r3, #1
 80016c0:	41ab      	sbcs	r3, r5
 80016c2:	4334      	orrs	r4, r6
 80016c4:	1a12      	subs	r2, r2, r0
 80016c6:	4690      	mov	r8, r2
 80016c8:	4323      	orrs	r3, r4
 80016ca:	e02c      	b.n	8001726 <__aeabi_dadd+0x432>
 80016cc:	0742      	lsls	r2, r0, #29
 80016ce:	08db      	lsrs	r3, r3, #3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	08c0      	lsrs	r0, r0, #3
 80016d4:	e73b      	b.n	800154e <__aeabi_dadd+0x25a>
 80016d6:	185c      	adds	r4, r3, r1
 80016d8:	429c      	cmp	r4, r3
 80016da:	419b      	sbcs	r3, r3
 80016dc:	4440      	add	r0, r8
 80016de:	425b      	negs	r3, r3
 80016e0:	18c7      	adds	r7, r0, r3
 80016e2:	2601      	movs	r6, #1
 80016e4:	023b      	lsls	r3, r7, #8
 80016e6:	d400      	bmi.n	80016ea <__aeabi_dadd+0x3f6>
 80016e8:	e729      	b.n	800153e <__aeabi_dadd+0x24a>
 80016ea:	2602      	movs	r6, #2
 80016ec:	4a9e      	ldr	r2, [pc, #632]	; (8001968 <__aeabi_dadd+0x674>)
 80016ee:	0863      	lsrs	r3, r4, #1
 80016f0:	4017      	ands	r7, r2
 80016f2:	2201      	movs	r2, #1
 80016f4:	4014      	ands	r4, r2
 80016f6:	431c      	orrs	r4, r3
 80016f8:	07fb      	lsls	r3, r7, #31
 80016fa:	431c      	orrs	r4, r3
 80016fc:	087f      	lsrs	r7, r7, #1
 80016fe:	e673      	b.n	80013e8 <__aeabi_dadd+0xf4>
 8001700:	4644      	mov	r4, r8
 8001702:	3a20      	subs	r2, #32
 8001704:	40d4      	lsrs	r4, r2
 8001706:	4662      	mov	r2, ip
 8001708:	2a20      	cmp	r2, #32
 800170a:	d005      	beq.n	8001718 <__aeabi_dadd+0x424>
 800170c:	4667      	mov	r7, ip
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	1bd2      	subs	r2, r2, r7
 8001712:	4647      	mov	r7, r8
 8001714:	4097      	lsls	r7, r2
 8001716:	4339      	orrs	r1, r7
 8001718:	1e4a      	subs	r2, r1, #1
 800171a:	4191      	sbcs	r1, r2
 800171c:	4321      	orrs	r1, r4
 800171e:	e635      	b.n	800138c <__aeabi_dadd+0x98>
 8001720:	4303      	orrs	r3, r0
 8001722:	1e58      	subs	r0, r3, #1
 8001724:	4183      	sbcs	r3, r0
 8001726:	1acc      	subs	r4, r1, r3
 8001728:	42a1      	cmp	r1, r4
 800172a:	41bf      	sbcs	r7, r7
 800172c:	4643      	mov	r3, r8
 800172e:	427f      	negs	r7, r7
 8001730:	4655      	mov	r5, sl
 8001732:	464e      	mov	r6, r9
 8001734:	1bdf      	subs	r7, r3, r7
 8001736:	e62e      	b.n	8001396 <__aeabi_dadd+0xa2>
 8001738:	0002      	movs	r2, r0
 800173a:	431a      	orrs	r2, r3
 800173c:	d100      	bne.n	8001740 <__aeabi_dadd+0x44c>
 800173e:	e0bd      	b.n	80018bc <__aeabi_dadd+0x5c8>
 8001740:	4662      	mov	r2, ip
 8001742:	4664      	mov	r4, ip
 8001744:	3a01      	subs	r2, #1
 8001746:	2c01      	cmp	r4, #1
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x458>
 800174a:	e0e5      	b.n	8001918 <__aeabi_dadd+0x624>
 800174c:	4c85      	ldr	r4, [pc, #532]	; (8001964 <__aeabi_dadd+0x670>)
 800174e:	45a4      	cmp	ip, r4
 8001750:	d058      	beq.n	8001804 <__aeabi_dadd+0x510>
 8001752:	4694      	mov	ip, r2
 8001754:	e749      	b.n	80015ea <__aeabi_dadd+0x2f6>
 8001756:	4664      	mov	r4, ip
 8001758:	2220      	movs	r2, #32
 800175a:	1b12      	subs	r2, r2, r4
 800175c:	4644      	mov	r4, r8
 800175e:	4094      	lsls	r4, r2
 8001760:	000f      	movs	r7, r1
 8001762:	46a1      	mov	r9, r4
 8001764:	4664      	mov	r4, ip
 8001766:	4091      	lsls	r1, r2
 8001768:	40e7      	lsrs	r7, r4
 800176a:	464c      	mov	r4, r9
 800176c:	1e4a      	subs	r2, r1, #1
 800176e:	4191      	sbcs	r1, r2
 8001770:	433c      	orrs	r4, r7
 8001772:	4642      	mov	r2, r8
 8001774:	430c      	orrs	r4, r1
 8001776:	4661      	mov	r1, ip
 8001778:	40ca      	lsrs	r2, r1
 800177a:	1880      	adds	r0, r0, r2
 800177c:	e6f4      	b.n	8001568 <__aeabi_dadd+0x274>
 800177e:	4c79      	ldr	r4, [pc, #484]	; (8001964 <__aeabi_dadd+0x670>)
 8001780:	42a2      	cmp	r2, r4
 8001782:	d100      	bne.n	8001786 <__aeabi_dadd+0x492>
 8001784:	e6fd      	b.n	8001582 <__aeabi_dadd+0x28e>
 8001786:	1859      	adds	r1, r3, r1
 8001788:	4299      	cmp	r1, r3
 800178a:	419b      	sbcs	r3, r3
 800178c:	4440      	add	r0, r8
 800178e:	425f      	negs	r7, r3
 8001790:	19c7      	adds	r7, r0, r7
 8001792:	07fc      	lsls	r4, r7, #31
 8001794:	0849      	lsrs	r1, r1, #1
 8001796:	0016      	movs	r6, r2
 8001798:	430c      	orrs	r4, r1
 800179a:	087f      	lsrs	r7, r7, #1
 800179c:	e6cf      	b.n	800153e <__aeabi_dadd+0x24a>
 800179e:	1acc      	subs	r4, r1, r3
 80017a0:	42a1      	cmp	r1, r4
 80017a2:	41bf      	sbcs	r7, r7
 80017a4:	4643      	mov	r3, r8
 80017a6:	427f      	negs	r7, r7
 80017a8:	1a18      	subs	r0, r3, r0
 80017aa:	4655      	mov	r5, sl
 80017ac:	1bc7      	subs	r7, r0, r7
 80017ae:	e5f7      	b.n	80013a0 <__aeabi_dadd+0xac>
 80017b0:	08c9      	lsrs	r1, r1, #3
 80017b2:	077b      	lsls	r3, r7, #29
 80017b4:	4655      	mov	r5, sl
 80017b6:	430b      	orrs	r3, r1
 80017b8:	08f8      	lsrs	r0, r7, #3
 80017ba:	e6c8      	b.n	800154e <__aeabi_dadd+0x25a>
 80017bc:	2c00      	cmp	r4, #0
 80017be:	d000      	beq.n	80017c2 <__aeabi_dadd+0x4ce>
 80017c0:	e081      	b.n	80018c6 <__aeabi_dadd+0x5d2>
 80017c2:	4643      	mov	r3, r8
 80017c4:	430b      	orrs	r3, r1
 80017c6:	d115      	bne.n	80017f4 <__aeabi_dadd+0x500>
 80017c8:	2080      	movs	r0, #128	; 0x80
 80017ca:	2500      	movs	r5, #0
 80017cc:	0300      	lsls	r0, r0, #12
 80017ce:	e6e3      	b.n	8001598 <__aeabi_dadd+0x2a4>
 80017d0:	1a5c      	subs	r4, r3, r1
 80017d2:	42a3      	cmp	r3, r4
 80017d4:	419b      	sbcs	r3, r3
 80017d6:	1bc7      	subs	r7, r0, r7
 80017d8:	425b      	negs	r3, r3
 80017da:	2601      	movs	r6, #1
 80017dc:	1aff      	subs	r7, r7, r3
 80017de:	e5da      	b.n	8001396 <__aeabi_dadd+0xa2>
 80017e0:	0742      	lsls	r2, r0, #29
 80017e2:	08db      	lsrs	r3, r3, #3
 80017e4:	4313      	orrs	r3, r2
 80017e6:	08c0      	lsrs	r0, r0, #3
 80017e8:	e6d2      	b.n	8001590 <__aeabi_dadd+0x29c>
 80017ea:	0742      	lsls	r2, r0, #29
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	4313      	orrs	r3, r2
 80017f0:	08c0      	lsrs	r0, r0, #3
 80017f2:	e6ac      	b.n	800154e <__aeabi_dadd+0x25a>
 80017f4:	4643      	mov	r3, r8
 80017f6:	4642      	mov	r2, r8
 80017f8:	08c9      	lsrs	r1, r1, #3
 80017fa:	075b      	lsls	r3, r3, #29
 80017fc:	4655      	mov	r5, sl
 80017fe:	430b      	orrs	r3, r1
 8001800:	08d0      	lsrs	r0, r2, #3
 8001802:	e6c5      	b.n	8001590 <__aeabi_dadd+0x29c>
 8001804:	4643      	mov	r3, r8
 8001806:	4642      	mov	r2, r8
 8001808:	075b      	lsls	r3, r3, #29
 800180a:	08c9      	lsrs	r1, r1, #3
 800180c:	430b      	orrs	r3, r1
 800180e:	08d0      	lsrs	r0, r2, #3
 8001810:	e6be      	b.n	8001590 <__aeabi_dadd+0x29c>
 8001812:	4303      	orrs	r3, r0
 8001814:	001c      	movs	r4, r3
 8001816:	1e63      	subs	r3, r4, #1
 8001818:	419c      	sbcs	r4, r3
 800181a:	e6fc      	b.n	8001616 <__aeabi_dadd+0x322>
 800181c:	0002      	movs	r2, r0
 800181e:	3c20      	subs	r4, #32
 8001820:	40e2      	lsrs	r2, r4
 8001822:	0014      	movs	r4, r2
 8001824:	4662      	mov	r2, ip
 8001826:	2a20      	cmp	r2, #32
 8001828:	d003      	beq.n	8001832 <__aeabi_dadd+0x53e>
 800182a:	2540      	movs	r5, #64	; 0x40
 800182c:	1aad      	subs	r5, r5, r2
 800182e:	40a8      	lsls	r0, r5
 8001830:	4303      	orrs	r3, r0
 8001832:	1e58      	subs	r0, r3, #1
 8001834:	4183      	sbcs	r3, r0
 8001836:	4323      	orrs	r3, r4
 8001838:	e775      	b.n	8001726 <__aeabi_dadd+0x432>
 800183a:	2a00      	cmp	r2, #0
 800183c:	d0e2      	beq.n	8001804 <__aeabi_dadd+0x510>
 800183e:	003a      	movs	r2, r7
 8001840:	430a      	orrs	r2, r1
 8001842:	d0cd      	beq.n	80017e0 <__aeabi_dadd+0x4ec>
 8001844:	0742      	lsls	r2, r0, #29
 8001846:	08db      	lsrs	r3, r3, #3
 8001848:	4313      	orrs	r3, r2
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	08c0      	lsrs	r0, r0, #3
 800184e:	0312      	lsls	r2, r2, #12
 8001850:	4210      	tst	r0, r2
 8001852:	d006      	beq.n	8001862 <__aeabi_dadd+0x56e>
 8001854:	08fc      	lsrs	r4, r7, #3
 8001856:	4214      	tst	r4, r2
 8001858:	d103      	bne.n	8001862 <__aeabi_dadd+0x56e>
 800185a:	0020      	movs	r0, r4
 800185c:	08cb      	lsrs	r3, r1, #3
 800185e:	077a      	lsls	r2, r7, #29
 8001860:	4313      	orrs	r3, r2
 8001862:	0f5a      	lsrs	r2, r3, #29
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	0752      	lsls	r2, r2, #29
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	4313      	orrs	r3, r2
 800186c:	e690      	b.n	8001590 <__aeabi_dadd+0x29c>
 800186e:	4643      	mov	r3, r8
 8001870:	430b      	orrs	r3, r1
 8001872:	d100      	bne.n	8001876 <__aeabi_dadd+0x582>
 8001874:	e709      	b.n	800168a <__aeabi_dadd+0x396>
 8001876:	4643      	mov	r3, r8
 8001878:	4642      	mov	r2, r8
 800187a:	08c9      	lsrs	r1, r1, #3
 800187c:	075b      	lsls	r3, r3, #29
 800187e:	4655      	mov	r5, sl
 8001880:	430b      	orrs	r3, r1
 8001882:	08d0      	lsrs	r0, r2, #3
 8001884:	e666      	b.n	8001554 <__aeabi_dadd+0x260>
 8001886:	1acc      	subs	r4, r1, r3
 8001888:	42a1      	cmp	r1, r4
 800188a:	4189      	sbcs	r1, r1
 800188c:	1a3f      	subs	r7, r7, r0
 800188e:	4249      	negs	r1, r1
 8001890:	4655      	mov	r5, sl
 8001892:	2601      	movs	r6, #1
 8001894:	1a7f      	subs	r7, r7, r1
 8001896:	e57e      	b.n	8001396 <__aeabi_dadd+0xa2>
 8001898:	4642      	mov	r2, r8
 800189a:	1a5c      	subs	r4, r3, r1
 800189c:	1a87      	subs	r7, r0, r2
 800189e:	42a3      	cmp	r3, r4
 80018a0:	4192      	sbcs	r2, r2
 80018a2:	4252      	negs	r2, r2
 80018a4:	1abf      	subs	r7, r7, r2
 80018a6:	023a      	lsls	r2, r7, #8
 80018a8:	d53d      	bpl.n	8001926 <__aeabi_dadd+0x632>
 80018aa:	1acc      	subs	r4, r1, r3
 80018ac:	42a1      	cmp	r1, r4
 80018ae:	4189      	sbcs	r1, r1
 80018b0:	4643      	mov	r3, r8
 80018b2:	4249      	negs	r1, r1
 80018b4:	1a1f      	subs	r7, r3, r0
 80018b6:	4655      	mov	r5, sl
 80018b8:	1a7f      	subs	r7, r7, r1
 80018ba:	e595      	b.n	80013e8 <__aeabi_dadd+0xf4>
 80018bc:	077b      	lsls	r3, r7, #29
 80018be:	08c9      	lsrs	r1, r1, #3
 80018c0:	430b      	orrs	r3, r1
 80018c2:	08f8      	lsrs	r0, r7, #3
 80018c4:	e643      	b.n	800154e <__aeabi_dadd+0x25a>
 80018c6:	4644      	mov	r4, r8
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	430c      	orrs	r4, r1
 80018cc:	d130      	bne.n	8001930 <__aeabi_dadd+0x63c>
 80018ce:	0742      	lsls	r2, r0, #29
 80018d0:	4313      	orrs	r3, r2
 80018d2:	08c0      	lsrs	r0, r0, #3
 80018d4:	e65c      	b.n	8001590 <__aeabi_dadd+0x29c>
 80018d6:	077b      	lsls	r3, r7, #29
 80018d8:	08c9      	lsrs	r1, r1, #3
 80018da:	430b      	orrs	r3, r1
 80018dc:	08f8      	lsrs	r0, r7, #3
 80018de:	e639      	b.n	8001554 <__aeabi_dadd+0x260>
 80018e0:	185c      	adds	r4, r3, r1
 80018e2:	429c      	cmp	r4, r3
 80018e4:	419b      	sbcs	r3, r3
 80018e6:	4440      	add	r0, r8
 80018e8:	425b      	negs	r3, r3
 80018ea:	18c7      	adds	r7, r0, r3
 80018ec:	023b      	lsls	r3, r7, #8
 80018ee:	d400      	bmi.n	80018f2 <__aeabi_dadd+0x5fe>
 80018f0:	e625      	b.n	800153e <__aeabi_dadd+0x24a>
 80018f2:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <__aeabi_dadd+0x674>)
 80018f4:	2601      	movs	r6, #1
 80018f6:	401f      	ands	r7, r3
 80018f8:	e621      	b.n	800153e <__aeabi_dadd+0x24a>
 80018fa:	0004      	movs	r4, r0
 80018fc:	3a20      	subs	r2, #32
 80018fe:	40d4      	lsrs	r4, r2
 8001900:	4662      	mov	r2, ip
 8001902:	2a20      	cmp	r2, #32
 8001904:	d004      	beq.n	8001910 <__aeabi_dadd+0x61c>
 8001906:	2240      	movs	r2, #64	; 0x40
 8001908:	4666      	mov	r6, ip
 800190a:	1b92      	subs	r2, r2, r6
 800190c:	4090      	lsls	r0, r2
 800190e:	4303      	orrs	r3, r0
 8001910:	1e5a      	subs	r2, r3, #1
 8001912:	4193      	sbcs	r3, r2
 8001914:	431c      	orrs	r4, r3
 8001916:	e67e      	b.n	8001616 <__aeabi_dadd+0x322>
 8001918:	185c      	adds	r4, r3, r1
 800191a:	428c      	cmp	r4, r1
 800191c:	4189      	sbcs	r1, r1
 800191e:	4440      	add	r0, r8
 8001920:	4249      	negs	r1, r1
 8001922:	1847      	adds	r7, r0, r1
 8001924:	e6dd      	b.n	80016e2 <__aeabi_dadd+0x3ee>
 8001926:	0023      	movs	r3, r4
 8001928:	433b      	orrs	r3, r7
 800192a:	d100      	bne.n	800192e <__aeabi_dadd+0x63a>
 800192c:	e6ad      	b.n	800168a <__aeabi_dadd+0x396>
 800192e:	e606      	b.n	800153e <__aeabi_dadd+0x24a>
 8001930:	0744      	lsls	r4, r0, #29
 8001932:	4323      	orrs	r3, r4
 8001934:	2480      	movs	r4, #128	; 0x80
 8001936:	08c0      	lsrs	r0, r0, #3
 8001938:	0324      	lsls	r4, r4, #12
 800193a:	4220      	tst	r0, r4
 800193c:	d008      	beq.n	8001950 <__aeabi_dadd+0x65c>
 800193e:	4642      	mov	r2, r8
 8001940:	08d6      	lsrs	r6, r2, #3
 8001942:	4226      	tst	r6, r4
 8001944:	d104      	bne.n	8001950 <__aeabi_dadd+0x65c>
 8001946:	4655      	mov	r5, sl
 8001948:	0030      	movs	r0, r6
 800194a:	08cb      	lsrs	r3, r1, #3
 800194c:	0751      	lsls	r1, r2, #29
 800194e:	430b      	orrs	r3, r1
 8001950:	0f5a      	lsrs	r2, r3, #29
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	0752      	lsls	r2, r2, #29
 8001958:	4313      	orrs	r3, r2
 800195a:	e619      	b.n	8001590 <__aeabi_dadd+0x29c>
 800195c:	2300      	movs	r3, #0
 800195e:	4a01      	ldr	r2, [pc, #4]	; (8001964 <__aeabi_dadd+0x670>)
 8001960:	001f      	movs	r7, r3
 8001962:	e55e      	b.n	8001422 <__aeabi_dadd+0x12e>
 8001964:	000007ff 	.word	0x000007ff
 8001968:	ff7fffff 	.word	0xff7fffff

0800196c <__aeabi_ddiv>:
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	4657      	mov	r7, sl
 8001970:	464e      	mov	r6, r9
 8001972:	4645      	mov	r5, r8
 8001974:	46de      	mov	lr, fp
 8001976:	b5e0      	push	{r5, r6, r7, lr}
 8001978:	4681      	mov	r9, r0
 800197a:	0005      	movs	r5, r0
 800197c:	030c      	lsls	r4, r1, #12
 800197e:	0048      	lsls	r0, r1, #1
 8001980:	4692      	mov	sl, r2
 8001982:	001f      	movs	r7, r3
 8001984:	b085      	sub	sp, #20
 8001986:	0b24      	lsrs	r4, r4, #12
 8001988:	0d40      	lsrs	r0, r0, #21
 800198a:	0fce      	lsrs	r6, r1, #31
 800198c:	2800      	cmp	r0, #0
 800198e:	d100      	bne.n	8001992 <__aeabi_ddiv+0x26>
 8001990:	e156      	b.n	8001c40 <__aeabi_ddiv+0x2d4>
 8001992:	4bd4      	ldr	r3, [pc, #848]	; (8001ce4 <__aeabi_ddiv+0x378>)
 8001994:	4298      	cmp	r0, r3
 8001996:	d100      	bne.n	800199a <__aeabi_ddiv+0x2e>
 8001998:	e172      	b.n	8001c80 <__aeabi_ddiv+0x314>
 800199a:	0f6b      	lsrs	r3, r5, #29
 800199c:	00e4      	lsls	r4, r4, #3
 800199e:	431c      	orrs	r4, r3
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	4323      	orrs	r3, r4
 80019a6:	4698      	mov	r8, r3
 80019a8:	4bcf      	ldr	r3, [pc, #828]	; (8001ce8 <__aeabi_ddiv+0x37c>)
 80019aa:	00ed      	lsls	r5, r5, #3
 80019ac:	469b      	mov	fp, r3
 80019ae:	2300      	movs	r3, #0
 80019b0:	4699      	mov	r9, r3
 80019b2:	4483      	add	fp, r0
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	033c      	lsls	r4, r7, #12
 80019b8:	007b      	lsls	r3, r7, #1
 80019ba:	4650      	mov	r0, sl
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	0d5b      	lsrs	r3, r3, #21
 80019c0:	0fff      	lsrs	r7, r7, #31
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_ddiv+0x5c>
 80019c6:	e11f      	b.n	8001c08 <__aeabi_ddiv+0x29c>
 80019c8:	4ac6      	ldr	r2, [pc, #792]	; (8001ce4 <__aeabi_ddiv+0x378>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d100      	bne.n	80019d0 <__aeabi_ddiv+0x64>
 80019ce:	e162      	b.n	8001c96 <__aeabi_ddiv+0x32a>
 80019d0:	49c5      	ldr	r1, [pc, #788]	; (8001ce8 <__aeabi_ddiv+0x37c>)
 80019d2:	0f42      	lsrs	r2, r0, #29
 80019d4:	468c      	mov	ip, r1
 80019d6:	00e4      	lsls	r4, r4, #3
 80019d8:	4659      	mov	r1, fp
 80019da:	4314      	orrs	r4, r2
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	4463      	add	r3, ip
 80019e0:	0412      	lsls	r2, r2, #16
 80019e2:	1acb      	subs	r3, r1, r3
 80019e4:	4314      	orrs	r4, r2
 80019e6:	469b      	mov	fp, r3
 80019e8:	00c2      	lsls	r2, r0, #3
 80019ea:	2000      	movs	r0, #0
 80019ec:	0033      	movs	r3, r6
 80019ee:	407b      	eors	r3, r7
 80019f0:	469a      	mov	sl, r3
 80019f2:	464b      	mov	r3, r9
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d827      	bhi.n	8001a48 <__aeabi_ddiv+0xdc>
 80019f8:	49bc      	ldr	r1, [pc, #752]	; (8001cec <__aeabi_ddiv+0x380>)
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	58cb      	ldr	r3, [r1, r3]
 80019fe:	469f      	mov	pc, r3
 8001a00:	46b2      	mov	sl, r6
 8001a02:	9b00      	ldr	r3, [sp, #0]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d016      	beq.n	8001a36 <__aeabi_ddiv+0xca>
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_ddiv+0xa2>
 8001a0c:	e28e      	b.n	8001f2c <__aeabi_ddiv+0x5c0>
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d000      	beq.n	8001a14 <__aeabi_ddiv+0xa8>
 8001a12:	e0d9      	b.n	8001bc8 <__aeabi_ddiv+0x25c>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2400      	movs	r4, #0
 8001a18:	2500      	movs	r5, #0
 8001a1a:	4652      	mov	r2, sl
 8001a1c:	051b      	lsls	r3, r3, #20
 8001a1e:	4323      	orrs	r3, r4
 8001a20:	07d2      	lsls	r2, r2, #31
 8001a22:	4313      	orrs	r3, r2
 8001a24:	0028      	movs	r0, r5
 8001a26:	0019      	movs	r1, r3
 8001a28:	b005      	add	sp, #20
 8001a2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a2c:	46bb      	mov	fp, r7
 8001a2e:	46b2      	mov	sl, r6
 8001a30:	46a9      	mov	r9, r5
 8001a32:	46a0      	mov	r8, r4
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a36:	2400      	movs	r4, #0
 8001a38:	2500      	movs	r5, #0
 8001a3a:	4baa      	ldr	r3, [pc, #680]	; (8001ce4 <__aeabi_ddiv+0x378>)
 8001a3c:	e7ed      	b.n	8001a1a <__aeabi_ddiv+0xae>
 8001a3e:	46ba      	mov	sl, r7
 8001a40:	46a0      	mov	r8, r4
 8001a42:	0015      	movs	r5, r2
 8001a44:	9000      	str	r0, [sp, #0]
 8001a46:	e7dc      	b.n	8001a02 <__aeabi_ddiv+0x96>
 8001a48:	4544      	cmp	r4, r8
 8001a4a:	d200      	bcs.n	8001a4e <__aeabi_ddiv+0xe2>
 8001a4c:	e1c7      	b.n	8001dde <__aeabi_ddiv+0x472>
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_ddiv+0xe6>
 8001a50:	e1c2      	b.n	8001dd8 <__aeabi_ddiv+0x46c>
 8001a52:	2301      	movs	r3, #1
 8001a54:	425b      	negs	r3, r3
 8001a56:	469c      	mov	ip, r3
 8001a58:	002e      	movs	r6, r5
 8001a5a:	4640      	mov	r0, r8
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	44e3      	add	fp, ip
 8001a60:	0223      	lsls	r3, r4, #8
 8001a62:	0e14      	lsrs	r4, r2, #24
 8001a64:	431c      	orrs	r4, r3
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	4699      	mov	r9, r3
 8001a6a:	0423      	lsls	r3, r4, #16
 8001a6c:	0c1f      	lsrs	r7, r3, #16
 8001a6e:	0212      	lsls	r2, r2, #8
 8001a70:	4649      	mov	r1, r9
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	9701      	str	r7, [sp, #4]
 8001a76:	f7fe fbed 	bl	8000254 <__aeabi_uidivmod>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	437a      	muls	r2, r7
 8001a7e:	040b      	lsls	r3, r1, #16
 8001a80:	0c31      	lsrs	r1, r6, #16
 8001a82:	4680      	mov	r8, r0
 8001a84:	4319      	orrs	r1, r3
 8001a86:	428a      	cmp	r2, r1
 8001a88:	d907      	bls.n	8001a9a <__aeabi_ddiv+0x12e>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	425b      	negs	r3, r3
 8001a8e:	469c      	mov	ip, r3
 8001a90:	1909      	adds	r1, r1, r4
 8001a92:	44e0      	add	r8, ip
 8001a94:	428c      	cmp	r4, r1
 8001a96:	d800      	bhi.n	8001a9a <__aeabi_ddiv+0x12e>
 8001a98:	e207      	b.n	8001eaa <__aeabi_ddiv+0x53e>
 8001a9a:	1a88      	subs	r0, r1, r2
 8001a9c:	4649      	mov	r1, r9
 8001a9e:	f7fe fbd9 	bl	8000254 <__aeabi_uidivmod>
 8001aa2:	0409      	lsls	r1, r1, #16
 8001aa4:	468c      	mov	ip, r1
 8001aa6:	0431      	lsls	r1, r6, #16
 8001aa8:	4666      	mov	r6, ip
 8001aaa:	9a01      	ldr	r2, [sp, #4]
 8001aac:	0c09      	lsrs	r1, r1, #16
 8001aae:	4342      	muls	r2, r0
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4331      	orrs	r1, r6
 8001ab4:	428a      	cmp	r2, r1
 8001ab6:	d904      	bls.n	8001ac2 <__aeabi_ddiv+0x156>
 8001ab8:	1909      	adds	r1, r1, r4
 8001aba:	3b01      	subs	r3, #1
 8001abc:	428c      	cmp	r4, r1
 8001abe:	d800      	bhi.n	8001ac2 <__aeabi_ddiv+0x156>
 8001ac0:	e1ed      	b.n	8001e9e <__aeabi_ddiv+0x532>
 8001ac2:	1a88      	subs	r0, r1, r2
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	0412      	lsls	r2, r2, #16
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	4690      	mov	r8, r2
 8001acc:	4641      	mov	r1, r8
 8001ace:	9b00      	ldr	r3, [sp, #0]
 8001ad0:	040e      	lsls	r6, r1, #16
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	001f      	movs	r7, r3
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	0c36      	lsrs	r6, r6, #16
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	0c19      	lsrs	r1, r3, #16
 8001ae0:	000b      	movs	r3, r1
 8001ae2:	4373      	muls	r3, r6
 8001ae4:	0c12      	lsrs	r2, r2, #16
 8001ae6:	437e      	muls	r6, r7
 8001ae8:	9103      	str	r1, [sp, #12]
 8001aea:	4351      	muls	r1, r2
 8001aec:	437a      	muls	r2, r7
 8001aee:	0c1f      	lsrs	r7, r3, #16
 8001af0:	46bc      	mov	ip, r7
 8001af2:	1876      	adds	r6, r6, r1
 8001af4:	4466      	add	r6, ip
 8001af6:	42b1      	cmp	r1, r6
 8001af8:	d903      	bls.n	8001b02 <__aeabi_ddiv+0x196>
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	0249      	lsls	r1, r1, #9
 8001afe:	468c      	mov	ip, r1
 8001b00:	4462      	add	r2, ip
 8001b02:	0c31      	lsrs	r1, r6, #16
 8001b04:	188a      	adds	r2, r1, r2
 8001b06:	0431      	lsls	r1, r6, #16
 8001b08:	041e      	lsls	r6, r3, #16
 8001b0a:	0c36      	lsrs	r6, r6, #16
 8001b0c:	198e      	adds	r6, r1, r6
 8001b0e:	4290      	cmp	r0, r2
 8001b10:	d302      	bcc.n	8001b18 <__aeabi_ddiv+0x1ac>
 8001b12:	d112      	bne.n	8001b3a <__aeabi_ddiv+0x1ce>
 8001b14:	42b5      	cmp	r5, r6
 8001b16:	d210      	bcs.n	8001b3a <__aeabi_ddiv+0x1ce>
 8001b18:	4643      	mov	r3, r8
 8001b1a:	1e59      	subs	r1, r3, #1
 8001b1c:	9b00      	ldr	r3, [sp, #0]
 8001b1e:	469c      	mov	ip, r3
 8001b20:	4465      	add	r5, ip
 8001b22:	001f      	movs	r7, r3
 8001b24:	429d      	cmp	r5, r3
 8001b26:	419b      	sbcs	r3, r3
 8001b28:	425b      	negs	r3, r3
 8001b2a:	191b      	adds	r3, r3, r4
 8001b2c:	18c0      	adds	r0, r0, r3
 8001b2e:	4284      	cmp	r4, r0
 8001b30:	d200      	bcs.n	8001b34 <__aeabi_ddiv+0x1c8>
 8001b32:	e1a0      	b.n	8001e76 <__aeabi_ddiv+0x50a>
 8001b34:	d100      	bne.n	8001b38 <__aeabi_ddiv+0x1cc>
 8001b36:	e19b      	b.n	8001e70 <__aeabi_ddiv+0x504>
 8001b38:	4688      	mov	r8, r1
 8001b3a:	1bae      	subs	r6, r5, r6
 8001b3c:	42b5      	cmp	r5, r6
 8001b3e:	41ad      	sbcs	r5, r5
 8001b40:	1a80      	subs	r0, r0, r2
 8001b42:	426d      	negs	r5, r5
 8001b44:	1b40      	subs	r0, r0, r5
 8001b46:	4284      	cmp	r4, r0
 8001b48:	d100      	bne.n	8001b4c <__aeabi_ddiv+0x1e0>
 8001b4a:	e1d5      	b.n	8001ef8 <__aeabi_ddiv+0x58c>
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	f7fe fb81 	bl	8000254 <__aeabi_uidivmod>
 8001b52:	9a01      	ldr	r2, [sp, #4]
 8001b54:	040b      	lsls	r3, r1, #16
 8001b56:	4342      	muls	r2, r0
 8001b58:	0c31      	lsrs	r1, r6, #16
 8001b5a:	0005      	movs	r5, r0
 8001b5c:	4319      	orrs	r1, r3
 8001b5e:	428a      	cmp	r2, r1
 8001b60:	d900      	bls.n	8001b64 <__aeabi_ddiv+0x1f8>
 8001b62:	e16c      	b.n	8001e3e <__aeabi_ddiv+0x4d2>
 8001b64:	1a88      	subs	r0, r1, r2
 8001b66:	4649      	mov	r1, r9
 8001b68:	f7fe fb74 	bl	8000254 <__aeabi_uidivmod>
 8001b6c:	9a01      	ldr	r2, [sp, #4]
 8001b6e:	0436      	lsls	r6, r6, #16
 8001b70:	4342      	muls	r2, r0
 8001b72:	0409      	lsls	r1, r1, #16
 8001b74:	0c36      	lsrs	r6, r6, #16
 8001b76:	0003      	movs	r3, r0
 8001b78:	430e      	orrs	r6, r1
 8001b7a:	42b2      	cmp	r2, r6
 8001b7c:	d900      	bls.n	8001b80 <__aeabi_ddiv+0x214>
 8001b7e:	e153      	b.n	8001e28 <__aeabi_ddiv+0x4bc>
 8001b80:	9803      	ldr	r0, [sp, #12]
 8001b82:	1ab6      	subs	r6, r6, r2
 8001b84:	0002      	movs	r2, r0
 8001b86:	042d      	lsls	r5, r5, #16
 8001b88:	431d      	orrs	r5, r3
 8001b8a:	9f02      	ldr	r7, [sp, #8]
 8001b8c:	042b      	lsls	r3, r5, #16
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	435a      	muls	r2, r3
 8001b92:	437b      	muls	r3, r7
 8001b94:	469c      	mov	ip, r3
 8001b96:	0c29      	lsrs	r1, r5, #16
 8001b98:	4348      	muls	r0, r1
 8001b9a:	0c13      	lsrs	r3, r2, #16
 8001b9c:	4484      	add	ip, r0
 8001b9e:	4463      	add	r3, ip
 8001ba0:	4379      	muls	r1, r7
 8001ba2:	4298      	cmp	r0, r3
 8001ba4:	d903      	bls.n	8001bae <__aeabi_ddiv+0x242>
 8001ba6:	2080      	movs	r0, #128	; 0x80
 8001ba8:	0240      	lsls	r0, r0, #9
 8001baa:	4684      	mov	ip, r0
 8001bac:	4461      	add	r1, ip
 8001bae:	0c18      	lsrs	r0, r3, #16
 8001bb0:	0412      	lsls	r2, r2, #16
 8001bb2:	041b      	lsls	r3, r3, #16
 8001bb4:	0c12      	lsrs	r2, r2, #16
 8001bb6:	1841      	adds	r1, r0, r1
 8001bb8:	189b      	adds	r3, r3, r2
 8001bba:	428e      	cmp	r6, r1
 8001bbc:	d200      	bcs.n	8001bc0 <__aeabi_ddiv+0x254>
 8001bbe:	e0ff      	b.n	8001dc0 <__aeabi_ddiv+0x454>
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_ddiv+0x258>
 8001bc2:	e0fa      	b.n	8001dba <__aeabi_ddiv+0x44e>
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	431d      	orrs	r5, r3
 8001bc8:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <__aeabi_ddiv+0x384>)
 8001bca:	445a      	add	r2, fp
 8001bcc:	2a00      	cmp	r2, #0
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_ddiv+0x266>
 8001bd0:	e0aa      	b.n	8001d28 <__aeabi_ddiv+0x3bc>
 8001bd2:	076b      	lsls	r3, r5, #29
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_ddiv+0x26c>
 8001bd6:	e13d      	b.n	8001e54 <__aeabi_ddiv+0x4e8>
 8001bd8:	08ed      	lsrs	r5, r5, #3
 8001bda:	4643      	mov	r3, r8
 8001bdc:	01db      	lsls	r3, r3, #7
 8001bde:	d506      	bpl.n	8001bee <__aeabi_ddiv+0x282>
 8001be0:	4642      	mov	r2, r8
 8001be2:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <__aeabi_ddiv+0x388>)
 8001be4:	401a      	ands	r2, r3
 8001be6:	4690      	mov	r8, r2
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	00d2      	lsls	r2, r2, #3
 8001bec:	445a      	add	r2, fp
 8001bee:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <__aeabi_ddiv+0x38c>)
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	dd00      	ble.n	8001bf6 <__aeabi_ddiv+0x28a>
 8001bf4:	e71f      	b.n	8001a36 <__aeabi_ddiv+0xca>
 8001bf6:	4643      	mov	r3, r8
 8001bf8:	075b      	lsls	r3, r3, #29
 8001bfa:	431d      	orrs	r5, r3
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	0552      	lsls	r2, r2, #21
 8001c00:	025c      	lsls	r4, r3, #9
 8001c02:	0b24      	lsrs	r4, r4, #12
 8001c04:	0d53      	lsrs	r3, r2, #21
 8001c06:	e708      	b.n	8001a1a <__aeabi_ddiv+0xae>
 8001c08:	4652      	mov	r2, sl
 8001c0a:	4322      	orrs	r2, r4
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_ddiv+0x2a4>
 8001c0e:	e07b      	b.n	8001d08 <__aeabi_ddiv+0x39c>
 8001c10:	2c00      	cmp	r4, #0
 8001c12:	d100      	bne.n	8001c16 <__aeabi_ddiv+0x2aa>
 8001c14:	e0fa      	b.n	8001e0c <__aeabi_ddiv+0x4a0>
 8001c16:	0020      	movs	r0, r4
 8001c18:	f001 fa22 	bl	8003060 <__clzsi2>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	3a0b      	subs	r2, #11
 8001c20:	231d      	movs	r3, #29
 8001c22:	0001      	movs	r1, r0
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	4652      	mov	r2, sl
 8001c28:	3908      	subs	r1, #8
 8001c2a:	40da      	lsrs	r2, r3
 8001c2c:	408c      	lsls	r4, r1
 8001c2e:	4314      	orrs	r4, r2
 8001c30:	4652      	mov	r2, sl
 8001c32:	408a      	lsls	r2, r1
 8001c34:	4b31      	ldr	r3, [pc, #196]	; (8001cfc <__aeabi_ddiv+0x390>)
 8001c36:	4458      	add	r0, fp
 8001c38:	469b      	mov	fp, r3
 8001c3a:	4483      	add	fp, r0
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	e6d5      	b.n	80019ec <__aeabi_ddiv+0x80>
 8001c40:	464b      	mov	r3, r9
 8001c42:	4323      	orrs	r3, r4
 8001c44:	4698      	mov	r8, r3
 8001c46:	d044      	beq.n	8001cd2 <__aeabi_ddiv+0x366>
 8001c48:	2c00      	cmp	r4, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_ddiv+0x2e2>
 8001c4c:	e0ce      	b.n	8001dec <__aeabi_ddiv+0x480>
 8001c4e:	0020      	movs	r0, r4
 8001c50:	f001 fa06 	bl	8003060 <__clzsi2>
 8001c54:	0001      	movs	r1, r0
 8001c56:	0002      	movs	r2, r0
 8001c58:	390b      	subs	r1, #11
 8001c5a:	231d      	movs	r3, #29
 8001c5c:	1a5b      	subs	r3, r3, r1
 8001c5e:	4649      	mov	r1, r9
 8001c60:	0010      	movs	r0, r2
 8001c62:	40d9      	lsrs	r1, r3
 8001c64:	3808      	subs	r0, #8
 8001c66:	4084      	lsls	r4, r0
 8001c68:	000b      	movs	r3, r1
 8001c6a:	464d      	mov	r5, r9
 8001c6c:	4323      	orrs	r3, r4
 8001c6e:	4698      	mov	r8, r3
 8001c70:	4085      	lsls	r5, r0
 8001c72:	4823      	ldr	r0, [pc, #140]	; (8001d00 <__aeabi_ddiv+0x394>)
 8001c74:	1a83      	subs	r3, r0, r2
 8001c76:	469b      	mov	fp, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	e69a      	b.n	80019b6 <__aeabi_ddiv+0x4a>
 8001c80:	464b      	mov	r3, r9
 8001c82:	4323      	orrs	r3, r4
 8001c84:	4698      	mov	r8, r3
 8001c86:	d11d      	bne.n	8001cc4 <__aeabi_ddiv+0x358>
 8001c88:	2308      	movs	r3, #8
 8001c8a:	4699      	mov	r9, r3
 8001c8c:	3b06      	subs	r3, #6
 8001c8e:	2500      	movs	r5, #0
 8001c90:	4683      	mov	fp, r0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	e68f      	b.n	80019b6 <__aeabi_ddiv+0x4a>
 8001c96:	4652      	mov	r2, sl
 8001c98:	4322      	orrs	r2, r4
 8001c9a:	d109      	bne.n	8001cb0 <__aeabi_ddiv+0x344>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	4649      	mov	r1, r9
 8001ca0:	4319      	orrs	r1, r3
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <__aeabi_ddiv+0x398>)
 8001ca4:	4689      	mov	r9, r1
 8001ca6:	469c      	mov	ip, r3
 8001ca8:	2400      	movs	r4, #0
 8001caa:	2002      	movs	r0, #2
 8001cac:	44e3      	add	fp, ip
 8001cae:	e69d      	b.n	80019ec <__aeabi_ddiv+0x80>
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	464a      	mov	r2, r9
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <__aeabi_ddiv+0x398>)
 8001cb8:	4691      	mov	r9, r2
 8001cba:	469c      	mov	ip, r3
 8001cbc:	4652      	mov	r2, sl
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	44e3      	add	fp, ip
 8001cc2:	e693      	b.n	80019ec <__aeabi_ddiv+0x80>
 8001cc4:	230c      	movs	r3, #12
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	3b09      	subs	r3, #9
 8001cca:	46a0      	mov	r8, r4
 8001ccc:	4683      	mov	fp, r0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	e671      	b.n	80019b6 <__aeabi_ddiv+0x4a>
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	4699      	mov	r9, r3
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	469b      	mov	fp, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	2500      	movs	r5, #0
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	e669      	b.n	80019b6 <__aeabi_ddiv+0x4a>
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	000007ff 	.word	0x000007ff
 8001ce8:	fffffc01 	.word	0xfffffc01
 8001cec:	0800ccc4 	.word	0x0800ccc4
 8001cf0:	000003ff 	.word	0x000003ff
 8001cf4:	feffffff 	.word	0xfeffffff
 8001cf8:	000007fe 	.word	0x000007fe
 8001cfc:	000003f3 	.word	0x000003f3
 8001d00:	fffffc0d 	.word	0xfffffc0d
 8001d04:	fffff801 	.word	0xfffff801
 8001d08:	4649      	mov	r1, r9
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	4319      	orrs	r1, r3
 8001d0e:	4689      	mov	r9, r1
 8001d10:	2400      	movs	r4, #0
 8001d12:	2001      	movs	r0, #1
 8001d14:	e66a      	b.n	80019ec <__aeabi_ddiv+0x80>
 8001d16:	2300      	movs	r3, #0
 8001d18:	2480      	movs	r4, #128	; 0x80
 8001d1a:	469a      	mov	sl, r3
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	4b8a      	ldr	r3, [pc, #552]	; (8001f48 <__aeabi_ddiv+0x5dc>)
 8001d20:	0324      	lsls	r4, r4, #12
 8001d22:	e67a      	b.n	8001a1a <__aeabi_ddiv+0xae>
 8001d24:	2501      	movs	r5, #1
 8001d26:	426d      	negs	r5, r5
 8001d28:	2301      	movs	r3, #1
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	2b38      	cmp	r3, #56	; 0x38
 8001d2e:	dd00      	ble.n	8001d32 <__aeabi_ddiv+0x3c6>
 8001d30:	e670      	b.n	8001a14 <__aeabi_ddiv+0xa8>
 8001d32:	2b1f      	cmp	r3, #31
 8001d34:	dc00      	bgt.n	8001d38 <__aeabi_ddiv+0x3cc>
 8001d36:	e0bf      	b.n	8001eb8 <__aeabi_ddiv+0x54c>
 8001d38:	211f      	movs	r1, #31
 8001d3a:	4249      	negs	r1, r1
 8001d3c:	1a8a      	subs	r2, r1, r2
 8001d3e:	4641      	mov	r1, r8
 8001d40:	40d1      	lsrs	r1, r2
 8001d42:	000a      	movs	r2, r1
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d004      	beq.n	8001d52 <__aeabi_ddiv+0x3e6>
 8001d48:	4641      	mov	r1, r8
 8001d4a:	4b80      	ldr	r3, [pc, #512]	; (8001f4c <__aeabi_ddiv+0x5e0>)
 8001d4c:	445b      	add	r3, fp
 8001d4e:	4099      	lsls	r1, r3
 8001d50:	430d      	orrs	r5, r1
 8001d52:	1e6b      	subs	r3, r5, #1
 8001d54:	419d      	sbcs	r5, r3
 8001d56:	2307      	movs	r3, #7
 8001d58:	432a      	orrs	r2, r5
 8001d5a:	001d      	movs	r5, r3
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	4015      	ands	r5, r2
 8001d60:	4213      	tst	r3, r2
 8001d62:	d100      	bne.n	8001d66 <__aeabi_ddiv+0x3fa>
 8001d64:	e0d4      	b.n	8001f10 <__aeabi_ddiv+0x5a4>
 8001d66:	210f      	movs	r1, #15
 8001d68:	2300      	movs	r3, #0
 8001d6a:	4011      	ands	r1, r2
 8001d6c:	2904      	cmp	r1, #4
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_ddiv+0x406>
 8001d70:	e0cb      	b.n	8001f0a <__aeabi_ddiv+0x59e>
 8001d72:	1d11      	adds	r1, r2, #4
 8001d74:	4291      	cmp	r1, r2
 8001d76:	4192      	sbcs	r2, r2
 8001d78:	4252      	negs	r2, r2
 8001d7a:	189b      	adds	r3, r3, r2
 8001d7c:	000a      	movs	r2, r1
 8001d7e:	0219      	lsls	r1, r3, #8
 8001d80:	d400      	bmi.n	8001d84 <__aeabi_ddiv+0x418>
 8001d82:	e0c2      	b.n	8001f0a <__aeabi_ddiv+0x59e>
 8001d84:	2301      	movs	r3, #1
 8001d86:	2400      	movs	r4, #0
 8001d88:	2500      	movs	r5, #0
 8001d8a:	e646      	b.n	8001a1a <__aeabi_ddiv+0xae>
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	4641      	mov	r1, r8
 8001d90:	031b      	lsls	r3, r3, #12
 8001d92:	4219      	tst	r1, r3
 8001d94:	d008      	beq.n	8001da8 <__aeabi_ddiv+0x43c>
 8001d96:	421c      	tst	r4, r3
 8001d98:	d106      	bne.n	8001da8 <__aeabi_ddiv+0x43c>
 8001d9a:	431c      	orrs	r4, r3
 8001d9c:	0324      	lsls	r4, r4, #12
 8001d9e:	46ba      	mov	sl, r7
 8001da0:	0015      	movs	r5, r2
 8001da2:	4b69      	ldr	r3, [pc, #420]	; (8001f48 <__aeabi_ddiv+0x5dc>)
 8001da4:	0b24      	lsrs	r4, r4, #12
 8001da6:	e638      	b.n	8001a1a <__aeabi_ddiv+0xae>
 8001da8:	2480      	movs	r4, #128	; 0x80
 8001daa:	4643      	mov	r3, r8
 8001dac:	0324      	lsls	r4, r4, #12
 8001dae:	431c      	orrs	r4, r3
 8001db0:	0324      	lsls	r4, r4, #12
 8001db2:	46b2      	mov	sl, r6
 8001db4:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <__aeabi_ddiv+0x5dc>)
 8001db6:	0b24      	lsrs	r4, r4, #12
 8001db8:	e62f      	b.n	8001a1a <__aeabi_ddiv+0xae>
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d100      	bne.n	8001dc0 <__aeabi_ddiv+0x454>
 8001dbe:	e703      	b.n	8001bc8 <__aeabi_ddiv+0x25c>
 8001dc0:	19a6      	adds	r6, r4, r6
 8001dc2:	1e68      	subs	r0, r5, #1
 8001dc4:	42a6      	cmp	r6, r4
 8001dc6:	d200      	bcs.n	8001dca <__aeabi_ddiv+0x45e>
 8001dc8:	e08d      	b.n	8001ee6 <__aeabi_ddiv+0x57a>
 8001dca:	428e      	cmp	r6, r1
 8001dcc:	d200      	bcs.n	8001dd0 <__aeabi_ddiv+0x464>
 8001dce:	e0a3      	b.n	8001f18 <__aeabi_ddiv+0x5ac>
 8001dd0:	d100      	bne.n	8001dd4 <__aeabi_ddiv+0x468>
 8001dd2:	e0b3      	b.n	8001f3c <__aeabi_ddiv+0x5d0>
 8001dd4:	0005      	movs	r5, r0
 8001dd6:	e6f5      	b.n	8001bc4 <__aeabi_ddiv+0x258>
 8001dd8:	42aa      	cmp	r2, r5
 8001dda:	d900      	bls.n	8001dde <__aeabi_ddiv+0x472>
 8001ddc:	e639      	b.n	8001a52 <__aeabi_ddiv+0xe6>
 8001dde:	4643      	mov	r3, r8
 8001de0:	07de      	lsls	r6, r3, #31
 8001de2:	0858      	lsrs	r0, r3, #1
 8001de4:	086b      	lsrs	r3, r5, #1
 8001de6:	431e      	orrs	r6, r3
 8001de8:	07ed      	lsls	r5, r5, #31
 8001dea:	e639      	b.n	8001a60 <__aeabi_ddiv+0xf4>
 8001dec:	4648      	mov	r0, r9
 8001dee:	f001 f937 	bl	8003060 <__clzsi2>
 8001df2:	0001      	movs	r1, r0
 8001df4:	0002      	movs	r2, r0
 8001df6:	3115      	adds	r1, #21
 8001df8:	3220      	adds	r2, #32
 8001dfa:	291c      	cmp	r1, #28
 8001dfc:	dc00      	bgt.n	8001e00 <__aeabi_ddiv+0x494>
 8001dfe:	e72c      	b.n	8001c5a <__aeabi_ddiv+0x2ee>
 8001e00:	464b      	mov	r3, r9
 8001e02:	3808      	subs	r0, #8
 8001e04:	4083      	lsls	r3, r0
 8001e06:	2500      	movs	r5, #0
 8001e08:	4698      	mov	r8, r3
 8001e0a:	e732      	b.n	8001c72 <__aeabi_ddiv+0x306>
 8001e0c:	f001 f928 	bl	8003060 <__clzsi2>
 8001e10:	0003      	movs	r3, r0
 8001e12:	001a      	movs	r2, r3
 8001e14:	3215      	adds	r2, #21
 8001e16:	3020      	adds	r0, #32
 8001e18:	2a1c      	cmp	r2, #28
 8001e1a:	dc00      	bgt.n	8001e1e <__aeabi_ddiv+0x4b2>
 8001e1c:	e700      	b.n	8001c20 <__aeabi_ddiv+0x2b4>
 8001e1e:	4654      	mov	r4, sl
 8001e20:	3b08      	subs	r3, #8
 8001e22:	2200      	movs	r2, #0
 8001e24:	409c      	lsls	r4, r3
 8001e26:	e705      	b.n	8001c34 <__aeabi_ddiv+0x2c8>
 8001e28:	1936      	adds	r6, r6, r4
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	42b4      	cmp	r4, r6
 8001e2e:	d900      	bls.n	8001e32 <__aeabi_ddiv+0x4c6>
 8001e30:	e6a6      	b.n	8001b80 <__aeabi_ddiv+0x214>
 8001e32:	42b2      	cmp	r2, r6
 8001e34:	d800      	bhi.n	8001e38 <__aeabi_ddiv+0x4cc>
 8001e36:	e6a3      	b.n	8001b80 <__aeabi_ddiv+0x214>
 8001e38:	1e83      	subs	r3, r0, #2
 8001e3a:	1936      	adds	r6, r6, r4
 8001e3c:	e6a0      	b.n	8001b80 <__aeabi_ddiv+0x214>
 8001e3e:	1909      	adds	r1, r1, r4
 8001e40:	3d01      	subs	r5, #1
 8001e42:	428c      	cmp	r4, r1
 8001e44:	d900      	bls.n	8001e48 <__aeabi_ddiv+0x4dc>
 8001e46:	e68d      	b.n	8001b64 <__aeabi_ddiv+0x1f8>
 8001e48:	428a      	cmp	r2, r1
 8001e4a:	d800      	bhi.n	8001e4e <__aeabi_ddiv+0x4e2>
 8001e4c:	e68a      	b.n	8001b64 <__aeabi_ddiv+0x1f8>
 8001e4e:	1e85      	subs	r5, r0, #2
 8001e50:	1909      	adds	r1, r1, r4
 8001e52:	e687      	b.n	8001b64 <__aeabi_ddiv+0x1f8>
 8001e54:	230f      	movs	r3, #15
 8001e56:	402b      	ands	r3, r5
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d100      	bne.n	8001e5e <__aeabi_ddiv+0x4f2>
 8001e5c:	e6bc      	b.n	8001bd8 <__aeabi_ddiv+0x26c>
 8001e5e:	2305      	movs	r3, #5
 8001e60:	425b      	negs	r3, r3
 8001e62:	42ab      	cmp	r3, r5
 8001e64:	419b      	sbcs	r3, r3
 8001e66:	3504      	adds	r5, #4
 8001e68:	425b      	negs	r3, r3
 8001e6a:	08ed      	lsrs	r5, r5, #3
 8001e6c:	4498      	add	r8, r3
 8001e6e:	e6b4      	b.n	8001bda <__aeabi_ddiv+0x26e>
 8001e70:	42af      	cmp	r7, r5
 8001e72:	d900      	bls.n	8001e76 <__aeabi_ddiv+0x50a>
 8001e74:	e660      	b.n	8001b38 <__aeabi_ddiv+0x1cc>
 8001e76:	4282      	cmp	r2, r0
 8001e78:	d804      	bhi.n	8001e84 <__aeabi_ddiv+0x518>
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_ddiv+0x512>
 8001e7c:	e65c      	b.n	8001b38 <__aeabi_ddiv+0x1cc>
 8001e7e:	42ae      	cmp	r6, r5
 8001e80:	d800      	bhi.n	8001e84 <__aeabi_ddiv+0x518>
 8001e82:	e659      	b.n	8001b38 <__aeabi_ddiv+0x1cc>
 8001e84:	2302      	movs	r3, #2
 8001e86:	425b      	negs	r3, r3
 8001e88:	469c      	mov	ip, r3
 8001e8a:	9b00      	ldr	r3, [sp, #0]
 8001e8c:	44e0      	add	r8, ip
 8001e8e:	469c      	mov	ip, r3
 8001e90:	4465      	add	r5, ip
 8001e92:	429d      	cmp	r5, r3
 8001e94:	419b      	sbcs	r3, r3
 8001e96:	425b      	negs	r3, r3
 8001e98:	191b      	adds	r3, r3, r4
 8001e9a:	18c0      	adds	r0, r0, r3
 8001e9c:	e64d      	b.n	8001b3a <__aeabi_ddiv+0x1ce>
 8001e9e:	428a      	cmp	r2, r1
 8001ea0:	d800      	bhi.n	8001ea4 <__aeabi_ddiv+0x538>
 8001ea2:	e60e      	b.n	8001ac2 <__aeabi_ddiv+0x156>
 8001ea4:	1e83      	subs	r3, r0, #2
 8001ea6:	1909      	adds	r1, r1, r4
 8001ea8:	e60b      	b.n	8001ac2 <__aeabi_ddiv+0x156>
 8001eaa:	428a      	cmp	r2, r1
 8001eac:	d800      	bhi.n	8001eb0 <__aeabi_ddiv+0x544>
 8001eae:	e5f4      	b.n	8001a9a <__aeabi_ddiv+0x12e>
 8001eb0:	1e83      	subs	r3, r0, #2
 8001eb2:	4698      	mov	r8, r3
 8001eb4:	1909      	adds	r1, r1, r4
 8001eb6:	e5f0      	b.n	8001a9a <__aeabi_ddiv+0x12e>
 8001eb8:	4925      	ldr	r1, [pc, #148]	; (8001f50 <__aeabi_ddiv+0x5e4>)
 8001eba:	0028      	movs	r0, r5
 8001ebc:	4459      	add	r1, fp
 8001ebe:	408d      	lsls	r5, r1
 8001ec0:	4642      	mov	r2, r8
 8001ec2:	408a      	lsls	r2, r1
 8001ec4:	1e69      	subs	r1, r5, #1
 8001ec6:	418d      	sbcs	r5, r1
 8001ec8:	4641      	mov	r1, r8
 8001eca:	40d8      	lsrs	r0, r3
 8001ecc:	40d9      	lsrs	r1, r3
 8001ece:	4302      	orrs	r2, r0
 8001ed0:	432a      	orrs	r2, r5
 8001ed2:	000b      	movs	r3, r1
 8001ed4:	0751      	lsls	r1, r2, #29
 8001ed6:	d100      	bne.n	8001eda <__aeabi_ddiv+0x56e>
 8001ed8:	e751      	b.n	8001d7e <__aeabi_ddiv+0x412>
 8001eda:	210f      	movs	r1, #15
 8001edc:	4011      	ands	r1, r2
 8001ede:	2904      	cmp	r1, #4
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_ddiv+0x578>
 8001ee2:	e746      	b.n	8001d72 <__aeabi_ddiv+0x406>
 8001ee4:	e74b      	b.n	8001d7e <__aeabi_ddiv+0x412>
 8001ee6:	0005      	movs	r5, r0
 8001ee8:	428e      	cmp	r6, r1
 8001eea:	d000      	beq.n	8001eee <__aeabi_ddiv+0x582>
 8001eec:	e66a      	b.n	8001bc4 <__aeabi_ddiv+0x258>
 8001eee:	9a00      	ldr	r2, [sp, #0]
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d000      	beq.n	8001ef6 <__aeabi_ddiv+0x58a>
 8001ef4:	e666      	b.n	8001bc4 <__aeabi_ddiv+0x258>
 8001ef6:	e667      	b.n	8001bc8 <__aeabi_ddiv+0x25c>
 8001ef8:	4a16      	ldr	r2, [pc, #88]	; (8001f54 <__aeabi_ddiv+0x5e8>)
 8001efa:	445a      	add	r2, fp
 8001efc:	2a00      	cmp	r2, #0
 8001efe:	dc00      	bgt.n	8001f02 <__aeabi_ddiv+0x596>
 8001f00:	e710      	b.n	8001d24 <__aeabi_ddiv+0x3b8>
 8001f02:	2301      	movs	r3, #1
 8001f04:	2500      	movs	r5, #0
 8001f06:	4498      	add	r8, r3
 8001f08:	e667      	b.n	8001bda <__aeabi_ddiv+0x26e>
 8001f0a:	075d      	lsls	r5, r3, #29
 8001f0c:	025b      	lsls	r3, r3, #9
 8001f0e:	0b1c      	lsrs	r4, r3, #12
 8001f10:	08d2      	lsrs	r2, r2, #3
 8001f12:	2300      	movs	r3, #0
 8001f14:	4315      	orrs	r5, r2
 8001f16:	e580      	b.n	8001a1a <__aeabi_ddiv+0xae>
 8001f18:	9800      	ldr	r0, [sp, #0]
 8001f1a:	3d02      	subs	r5, #2
 8001f1c:	0042      	lsls	r2, r0, #1
 8001f1e:	4282      	cmp	r2, r0
 8001f20:	41bf      	sbcs	r7, r7
 8001f22:	427f      	negs	r7, r7
 8001f24:	193c      	adds	r4, r7, r4
 8001f26:	1936      	adds	r6, r6, r4
 8001f28:	9200      	str	r2, [sp, #0]
 8001f2a:	e7dd      	b.n	8001ee8 <__aeabi_ddiv+0x57c>
 8001f2c:	2480      	movs	r4, #128	; 0x80
 8001f2e:	4643      	mov	r3, r8
 8001f30:	0324      	lsls	r4, r4, #12
 8001f32:	431c      	orrs	r4, r3
 8001f34:	0324      	lsls	r4, r4, #12
 8001f36:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <__aeabi_ddiv+0x5dc>)
 8001f38:	0b24      	lsrs	r4, r4, #12
 8001f3a:	e56e      	b.n	8001a1a <__aeabi_ddiv+0xae>
 8001f3c:	9a00      	ldr	r2, [sp, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d3ea      	bcc.n	8001f18 <__aeabi_ddiv+0x5ac>
 8001f42:	0005      	movs	r5, r0
 8001f44:	e7d3      	b.n	8001eee <__aeabi_ddiv+0x582>
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	000007ff 	.word	0x000007ff
 8001f4c:	0000043e 	.word	0x0000043e
 8001f50:	0000041e 	.word	0x0000041e
 8001f54:	000003ff 	.word	0x000003ff

08001f58 <__eqdf2>:
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	464e      	mov	r6, r9
 8001f5c:	4645      	mov	r5, r8
 8001f5e:	46de      	mov	lr, fp
 8001f60:	4657      	mov	r7, sl
 8001f62:	4690      	mov	r8, r2
 8001f64:	b5e0      	push	{r5, r6, r7, lr}
 8001f66:	0017      	movs	r7, r2
 8001f68:	031a      	lsls	r2, r3, #12
 8001f6a:	0b12      	lsrs	r2, r2, #12
 8001f6c:	0005      	movs	r5, r0
 8001f6e:	4684      	mov	ip, r0
 8001f70:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <__eqdf2+0x80>)
 8001f72:	030e      	lsls	r6, r1, #12
 8001f74:	004c      	lsls	r4, r1, #1
 8001f76:	4691      	mov	r9, r2
 8001f78:	005a      	lsls	r2, r3, #1
 8001f7a:	0fdb      	lsrs	r3, r3, #31
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	0b36      	lsrs	r6, r6, #12
 8001f80:	0d64      	lsrs	r4, r4, #21
 8001f82:	0fc9      	lsrs	r1, r1, #31
 8001f84:	0d52      	lsrs	r2, r2, #21
 8001f86:	4284      	cmp	r4, r0
 8001f88:	d019      	beq.n	8001fbe <__eqdf2+0x66>
 8001f8a:	4282      	cmp	r2, r0
 8001f8c:	d010      	beq.n	8001fb0 <__eqdf2+0x58>
 8001f8e:	2001      	movs	r0, #1
 8001f90:	4294      	cmp	r4, r2
 8001f92:	d10e      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001f94:	454e      	cmp	r6, r9
 8001f96:	d10c      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001f98:	2001      	movs	r0, #1
 8001f9a:	45c4      	cmp	ip, r8
 8001f9c:	d109      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001f9e:	4559      	cmp	r1, fp
 8001fa0:	d017      	beq.n	8001fd2 <__eqdf2+0x7a>
 8001fa2:	2c00      	cmp	r4, #0
 8001fa4:	d105      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001fa6:	0030      	movs	r0, r6
 8001fa8:	4328      	orrs	r0, r5
 8001faa:	1e43      	subs	r3, r0, #1
 8001fac:	4198      	sbcs	r0, r3
 8001fae:	e000      	b.n	8001fb2 <__eqdf2+0x5a>
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb4:	46bb      	mov	fp, r7
 8001fb6:	46b2      	mov	sl, r6
 8001fb8:	46a9      	mov	r9, r5
 8001fba:	46a0      	mov	r8, r4
 8001fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fbe:	0033      	movs	r3, r6
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	432b      	orrs	r3, r5
 8001fc4:	d1f5      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001fc6:	42a2      	cmp	r2, r4
 8001fc8:	d1f3      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001fca:	464b      	mov	r3, r9
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	d1f0      	bne.n	8001fb2 <__eqdf2+0x5a>
 8001fd0:	e7e2      	b.n	8001f98 <__eqdf2+0x40>
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	e7ed      	b.n	8001fb2 <__eqdf2+0x5a>
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	000007ff 	.word	0x000007ff

08001fdc <__gedf2>:
 8001fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fde:	4647      	mov	r7, r8
 8001fe0:	46ce      	mov	lr, r9
 8001fe2:	0004      	movs	r4, r0
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	0016      	movs	r6, r2
 8001fe8:	031b      	lsls	r3, r3, #12
 8001fea:	0b1b      	lsrs	r3, r3, #12
 8001fec:	4d2d      	ldr	r5, [pc, #180]	; (80020a4 <__gedf2+0xc8>)
 8001fee:	004a      	lsls	r2, r1, #1
 8001ff0:	4699      	mov	r9, r3
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	0043      	lsls	r3, r0, #1
 8001ff6:	030f      	lsls	r7, r1, #12
 8001ff8:	46a4      	mov	ip, r4
 8001ffa:	46b0      	mov	r8, r6
 8001ffc:	0b3f      	lsrs	r7, r7, #12
 8001ffe:	0d52      	lsrs	r2, r2, #21
 8002000:	0fc9      	lsrs	r1, r1, #31
 8002002:	0d5b      	lsrs	r3, r3, #21
 8002004:	0fc0      	lsrs	r0, r0, #31
 8002006:	42aa      	cmp	r2, r5
 8002008:	d021      	beq.n	800204e <__gedf2+0x72>
 800200a:	42ab      	cmp	r3, r5
 800200c:	d013      	beq.n	8002036 <__gedf2+0x5a>
 800200e:	2a00      	cmp	r2, #0
 8002010:	d122      	bne.n	8002058 <__gedf2+0x7c>
 8002012:	433c      	orrs	r4, r7
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <__gedf2+0x42>
 8002018:	464d      	mov	r5, r9
 800201a:	432e      	orrs	r6, r5
 800201c:	d022      	beq.n	8002064 <__gedf2+0x88>
 800201e:	2c00      	cmp	r4, #0
 8002020:	d010      	beq.n	8002044 <__gedf2+0x68>
 8002022:	4281      	cmp	r1, r0
 8002024:	d022      	beq.n	800206c <__gedf2+0x90>
 8002026:	2002      	movs	r0, #2
 8002028:	3901      	subs	r1, #1
 800202a:	4008      	ands	r0, r1
 800202c:	3801      	subs	r0, #1
 800202e:	bcc0      	pop	{r6, r7}
 8002030:	46b9      	mov	r9, r7
 8002032:	46b0      	mov	r8, r6
 8002034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002036:	464d      	mov	r5, r9
 8002038:	432e      	orrs	r6, r5
 800203a:	d129      	bne.n	8002090 <__gedf2+0xb4>
 800203c:	2a00      	cmp	r2, #0
 800203e:	d1f0      	bne.n	8002022 <__gedf2+0x46>
 8002040:	433c      	orrs	r4, r7
 8002042:	d1ee      	bne.n	8002022 <__gedf2+0x46>
 8002044:	2800      	cmp	r0, #0
 8002046:	d1f2      	bne.n	800202e <__gedf2+0x52>
 8002048:	2001      	movs	r0, #1
 800204a:	4240      	negs	r0, r0
 800204c:	e7ef      	b.n	800202e <__gedf2+0x52>
 800204e:	003d      	movs	r5, r7
 8002050:	4325      	orrs	r5, r4
 8002052:	d11d      	bne.n	8002090 <__gedf2+0xb4>
 8002054:	4293      	cmp	r3, r2
 8002056:	d0ee      	beq.n	8002036 <__gedf2+0x5a>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1e2      	bne.n	8002022 <__gedf2+0x46>
 800205c:	464c      	mov	r4, r9
 800205e:	4326      	orrs	r6, r4
 8002060:	d1df      	bne.n	8002022 <__gedf2+0x46>
 8002062:	e7e0      	b.n	8002026 <__gedf2+0x4a>
 8002064:	2000      	movs	r0, #0
 8002066:	2c00      	cmp	r4, #0
 8002068:	d0e1      	beq.n	800202e <__gedf2+0x52>
 800206a:	e7dc      	b.n	8002026 <__gedf2+0x4a>
 800206c:	429a      	cmp	r2, r3
 800206e:	dc0a      	bgt.n	8002086 <__gedf2+0xaa>
 8002070:	dbe8      	blt.n	8002044 <__gedf2+0x68>
 8002072:	454f      	cmp	r7, r9
 8002074:	d8d7      	bhi.n	8002026 <__gedf2+0x4a>
 8002076:	d00e      	beq.n	8002096 <__gedf2+0xba>
 8002078:	2000      	movs	r0, #0
 800207a:	454f      	cmp	r7, r9
 800207c:	d2d7      	bcs.n	800202e <__gedf2+0x52>
 800207e:	2900      	cmp	r1, #0
 8002080:	d0e2      	beq.n	8002048 <__gedf2+0x6c>
 8002082:	0008      	movs	r0, r1
 8002084:	e7d3      	b.n	800202e <__gedf2+0x52>
 8002086:	4243      	negs	r3, r0
 8002088:	4158      	adcs	r0, r3
 800208a:	0040      	lsls	r0, r0, #1
 800208c:	3801      	subs	r0, #1
 800208e:	e7ce      	b.n	800202e <__gedf2+0x52>
 8002090:	2002      	movs	r0, #2
 8002092:	4240      	negs	r0, r0
 8002094:	e7cb      	b.n	800202e <__gedf2+0x52>
 8002096:	45c4      	cmp	ip, r8
 8002098:	d8c5      	bhi.n	8002026 <__gedf2+0x4a>
 800209a:	2000      	movs	r0, #0
 800209c:	45c4      	cmp	ip, r8
 800209e:	d2c6      	bcs.n	800202e <__gedf2+0x52>
 80020a0:	e7ed      	b.n	800207e <__gedf2+0xa2>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	000007ff 	.word	0x000007ff

080020a8 <__ledf2>:
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020aa:	4647      	mov	r7, r8
 80020ac:	46ce      	mov	lr, r9
 80020ae:	0004      	movs	r4, r0
 80020b0:	0018      	movs	r0, r3
 80020b2:	0016      	movs	r6, r2
 80020b4:	031b      	lsls	r3, r3, #12
 80020b6:	0b1b      	lsrs	r3, r3, #12
 80020b8:	4d2c      	ldr	r5, [pc, #176]	; (800216c <__ledf2+0xc4>)
 80020ba:	004a      	lsls	r2, r1, #1
 80020bc:	4699      	mov	r9, r3
 80020be:	b580      	push	{r7, lr}
 80020c0:	0043      	lsls	r3, r0, #1
 80020c2:	030f      	lsls	r7, r1, #12
 80020c4:	46a4      	mov	ip, r4
 80020c6:	46b0      	mov	r8, r6
 80020c8:	0b3f      	lsrs	r7, r7, #12
 80020ca:	0d52      	lsrs	r2, r2, #21
 80020cc:	0fc9      	lsrs	r1, r1, #31
 80020ce:	0d5b      	lsrs	r3, r3, #21
 80020d0:	0fc0      	lsrs	r0, r0, #31
 80020d2:	42aa      	cmp	r2, r5
 80020d4:	d00d      	beq.n	80020f2 <__ledf2+0x4a>
 80020d6:	42ab      	cmp	r3, r5
 80020d8:	d010      	beq.n	80020fc <__ledf2+0x54>
 80020da:	2a00      	cmp	r2, #0
 80020dc:	d127      	bne.n	800212e <__ledf2+0x86>
 80020de:	433c      	orrs	r4, r7
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d111      	bne.n	8002108 <__ledf2+0x60>
 80020e4:	464d      	mov	r5, r9
 80020e6:	432e      	orrs	r6, r5
 80020e8:	d10e      	bne.n	8002108 <__ledf2+0x60>
 80020ea:	2000      	movs	r0, #0
 80020ec:	2c00      	cmp	r4, #0
 80020ee:	d015      	beq.n	800211c <__ledf2+0x74>
 80020f0:	e00e      	b.n	8002110 <__ledf2+0x68>
 80020f2:	003d      	movs	r5, r7
 80020f4:	4325      	orrs	r5, r4
 80020f6:	d110      	bne.n	800211a <__ledf2+0x72>
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d118      	bne.n	800212e <__ledf2+0x86>
 80020fc:	464d      	mov	r5, r9
 80020fe:	432e      	orrs	r6, r5
 8002100:	d10b      	bne.n	800211a <__ledf2+0x72>
 8002102:	2a00      	cmp	r2, #0
 8002104:	d102      	bne.n	800210c <__ledf2+0x64>
 8002106:	433c      	orrs	r4, r7
 8002108:	2c00      	cmp	r4, #0
 800210a:	d00b      	beq.n	8002124 <__ledf2+0x7c>
 800210c:	4281      	cmp	r1, r0
 800210e:	d014      	beq.n	800213a <__ledf2+0x92>
 8002110:	2002      	movs	r0, #2
 8002112:	3901      	subs	r1, #1
 8002114:	4008      	ands	r0, r1
 8002116:	3801      	subs	r0, #1
 8002118:	e000      	b.n	800211c <__ledf2+0x74>
 800211a:	2002      	movs	r0, #2
 800211c:	bcc0      	pop	{r6, r7}
 800211e:	46b9      	mov	r9, r7
 8002120:	46b0      	mov	r8, r6
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002124:	2800      	cmp	r0, #0
 8002126:	d1f9      	bne.n	800211c <__ledf2+0x74>
 8002128:	2001      	movs	r0, #1
 800212a:	4240      	negs	r0, r0
 800212c:	e7f6      	b.n	800211c <__ledf2+0x74>
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ec      	bne.n	800210c <__ledf2+0x64>
 8002132:	464c      	mov	r4, r9
 8002134:	4326      	orrs	r6, r4
 8002136:	d1e9      	bne.n	800210c <__ledf2+0x64>
 8002138:	e7ea      	b.n	8002110 <__ledf2+0x68>
 800213a:	429a      	cmp	r2, r3
 800213c:	dd04      	ble.n	8002148 <__ledf2+0xa0>
 800213e:	4243      	negs	r3, r0
 8002140:	4158      	adcs	r0, r3
 8002142:	0040      	lsls	r0, r0, #1
 8002144:	3801      	subs	r0, #1
 8002146:	e7e9      	b.n	800211c <__ledf2+0x74>
 8002148:	429a      	cmp	r2, r3
 800214a:	dbeb      	blt.n	8002124 <__ledf2+0x7c>
 800214c:	454f      	cmp	r7, r9
 800214e:	d8df      	bhi.n	8002110 <__ledf2+0x68>
 8002150:	d006      	beq.n	8002160 <__ledf2+0xb8>
 8002152:	2000      	movs	r0, #0
 8002154:	454f      	cmp	r7, r9
 8002156:	d2e1      	bcs.n	800211c <__ledf2+0x74>
 8002158:	2900      	cmp	r1, #0
 800215a:	d0e5      	beq.n	8002128 <__ledf2+0x80>
 800215c:	0008      	movs	r0, r1
 800215e:	e7dd      	b.n	800211c <__ledf2+0x74>
 8002160:	45c4      	cmp	ip, r8
 8002162:	d8d5      	bhi.n	8002110 <__ledf2+0x68>
 8002164:	2000      	movs	r0, #0
 8002166:	45c4      	cmp	ip, r8
 8002168:	d2d8      	bcs.n	800211c <__ledf2+0x74>
 800216a:	e7f5      	b.n	8002158 <__ledf2+0xb0>
 800216c:	000007ff 	.word	0x000007ff

08002170 <__aeabi_dmul>:
 8002170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002172:	4657      	mov	r7, sl
 8002174:	464e      	mov	r6, r9
 8002176:	4645      	mov	r5, r8
 8002178:	46de      	mov	lr, fp
 800217a:	b5e0      	push	{r5, r6, r7, lr}
 800217c:	4698      	mov	r8, r3
 800217e:	030c      	lsls	r4, r1, #12
 8002180:	004b      	lsls	r3, r1, #1
 8002182:	0006      	movs	r6, r0
 8002184:	4692      	mov	sl, r2
 8002186:	b087      	sub	sp, #28
 8002188:	0b24      	lsrs	r4, r4, #12
 800218a:	0d5b      	lsrs	r3, r3, #21
 800218c:	0fcf      	lsrs	r7, r1, #31
 800218e:	2b00      	cmp	r3, #0
 8002190:	d100      	bne.n	8002194 <__aeabi_dmul+0x24>
 8002192:	e15c      	b.n	800244e <__aeabi_dmul+0x2de>
 8002194:	4ad9      	ldr	r2, [pc, #868]	; (80024fc <__aeabi_dmul+0x38c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d100      	bne.n	800219c <__aeabi_dmul+0x2c>
 800219a:	e175      	b.n	8002488 <__aeabi_dmul+0x318>
 800219c:	0f42      	lsrs	r2, r0, #29
 800219e:	00e4      	lsls	r4, r4, #3
 80021a0:	4314      	orrs	r4, r2
 80021a2:	2280      	movs	r2, #128	; 0x80
 80021a4:	0412      	lsls	r2, r2, #16
 80021a6:	4314      	orrs	r4, r2
 80021a8:	4ad5      	ldr	r2, [pc, #852]	; (8002500 <__aeabi_dmul+0x390>)
 80021aa:	00c5      	lsls	r5, r0, #3
 80021ac:	4694      	mov	ip, r2
 80021ae:	4463      	add	r3, ip
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2300      	movs	r3, #0
 80021b4:	4699      	mov	r9, r3
 80021b6:	469b      	mov	fp, r3
 80021b8:	4643      	mov	r3, r8
 80021ba:	4642      	mov	r2, r8
 80021bc:	031e      	lsls	r6, r3, #12
 80021be:	0fd2      	lsrs	r2, r2, #31
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4650      	mov	r0, sl
 80021c4:	4690      	mov	r8, r2
 80021c6:	0b36      	lsrs	r6, r6, #12
 80021c8:	0d5b      	lsrs	r3, r3, #21
 80021ca:	d100      	bne.n	80021ce <__aeabi_dmul+0x5e>
 80021cc:	e120      	b.n	8002410 <__aeabi_dmul+0x2a0>
 80021ce:	4acb      	ldr	r2, [pc, #812]	; (80024fc <__aeabi_dmul+0x38c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d100      	bne.n	80021d6 <__aeabi_dmul+0x66>
 80021d4:	e162      	b.n	800249c <__aeabi_dmul+0x32c>
 80021d6:	49ca      	ldr	r1, [pc, #808]	; (8002500 <__aeabi_dmul+0x390>)
 80021d8:	0f42      	lsrs	r2, r0, #29
 80021da:	468c      	mov	ip, r1
 80021dc:	9900      	ldr	r1, [sp, #0]
 80021de:	4463      	add	r3, ip
 80021e0:	00f6      	lsls	r6, r6, #3
 80021e2:	468c      	mov	ip, r1
 80021e4:	4316      	orrs	r6, r2
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	449c      	add	ip, r3
 80021ea:	0412      	lsls	r2, r2, #16
 80021ec:	4663      	mov	r3, ip
 80021ee:	4316      	orrs	r6, r2
 80021f0:	00c2      	lsls	r2, r0, #3
 80021f2:	2000      	movs	r0, #0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	9900      	ldr	r1, [sp, #0]
 80021f8:	4643      	mov	r3, r8
 80021fa:	3101      	adds	r1, #1
 80021fc:	468c      	mov	ip, r1
 80021fe:	4649      	mov	r1, r9
 8002200:	407b      	eors	r3, r7
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	290f      	cmp	r1, #15
 8002206:	d826      	bhi.n	8002256 <__aeabi_dmul+0xe6>
 8002208:	4bbe      	ldr	r3, [pc, #760]	; (8002504 <__aeabi_dmul+0x394>)
 800220a:	0089      	lsls	r1, r1, #2
 800220c:	5859      	ldr	r1, [r3, r1]
 800220e:	468f      	mov	pc, r1
 8002210:	4643      	mov	r3, r8
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	0034      	movs	r4, r6
 8002216:	0015      	movs	r5, r2
 8002218:	4683      	mov	fp, r0
 800221a:	465b      	mov	r3, fp
 800221c:	2b02      	cmp	r3, #2
 800221e:	d016      	beq.n	800224e <__aeabi_dmul+0xde>
 8002220:	2b03      	cmp	r3, #3
 8002222:	d100      	bne.n	8002226 <__aeabi_dmul+0xb6>
 8002224:	e203      	b.n	800262e <__aeabi_dmul+0x4be>
 8002226:	2b01      	cmp	r3, #1
 8002228:	d000      	beq.n	800222c <__aeabi_dmul+0xbc>
 800222a:	e0cd      	b.n	80023c8 <__aeabi_dmul+0x258>
 800222c:	2200      	movs	r2, #0
 800222e:	2400      	movs	r4, #0
 8002230:	2500      	movs	r5, #0
 8002232:	9b01      	ldr	r3, [sp, #4]
 8002234:	0512      	lsls	r2, r2, #20
 8002236:	4322      	orrs	r2, r4
 8002238:	07db      	lsls	r3, r3, #31
 800223a:	431a      	orrs	r2, r3
 800223c:	0028      	movs	r0, r5
 800223e:	0011      	movs	r1, r2
 8002240:	b007      	add	sp, #28
 8002242:	bcf0      	pop	{r4, r5, r6, r7}
 8002244:	46bb      	mov	fp, r7
 8002246:	46b2      	mov	sl, r6
 8002248:	46a9      	mov	r9, r5
 800224a:	46a0      	mov	r8, r4
 800224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224e:	2400      	movs	r4, #0
 8002250:	2500      	movs	r5, #0
 8002252:	4aaa      	ldr	r2, [pc, #680]	; (80024fc <__aeabi_dmul+0x38c>)
 8002254:	e7ed      	b.n	8002232 <__aeabi_dmul+0xc2>
 8002256:	0c28      	lsrs	r0, r5, #16
 8002258:	042d      	lsls	r5, r5, #16
 800225a:	0c2d      	lsrs	r5, r5, #16
 800225c:	002b      	movs	r3, r5
 800225e:	0c11      	lsrs	r1, r2, #16
 8002260:	0412      	lsls	r2, r2, #16
 8002262:	0c12      	lsrs	r2, r2, #16
 8002264:	4353      	muls	r3, r2
 8002266:	4698      	mov	r8, r3
 8002268:	0013      	movs	r3, r2
 800226a:	002f      	movs	r7, r5
 800226c:	4343      	muls	r3, r0
 800226e:	4699      	mov	r9, r3
 8002270:	434f      	muls	r7, r1
 8002272:	444f      	add	r7, r9
 8002274:	46bb      	mov	fp, r7
 8002276:	4647      	mov	r7, r8
 8002278:	000b      	movs	r3, r1
 800227a:	0c3f      	lsrs	r7, r7, #16
 800227c:	46ba      	mov	sl, r7
 800227e:	4343      	muls	r3, r0
 8002280:	44da      	add	sl, fp
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	45d1      	cmp	r9, sl
 8002286:	d904      	bls.n	8002292 <__aeabi_dmul+0x122>
 8002288:	2780      	movs	r7, #128	; 0x80
 800228a:	027f      	lsls	r7, r7, #9
 800228c:	46b9      	mov	r9, r7
 800228e:	444b      	add	r3, r9
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	4653      	mov	r3, sl
 8002294:	0c1b      	lsrs	r3, r3, #16
 8002296:	469b      	mov	fp, r3
 8002298:	4653      	mov	r3, sl
 800229a:	041f      	lsls	r7, r3, #16
 800229c:	4643      	mov	r3, r8
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	4698      	mov	r8, r3
 80022a4:	003b      	movs	r3, r7
 80022a6:	4443      	add	r3, r8
 80022a8:	9304      	str	r3, [sp, #16]
 80022aa:	0c33      	lsrs	r3, r6, #16
 80022ac:	0436      	lsls	r6, r6, #16
 80022ae:	0c36      	lsrs	r6, r6, #16
 80022b0:	4698      	mov	r8, r3
 80022b2:	0033      	movs	r3, r6
 80022b4:	4343      	muls	r3, r0
 80022b6:	4699      	mov	r9, r3
 80022b8:	4643      	mov	r3, r8
 80022ba:	4343      	muls	r3, r0
 80022bc:	002f      	movs	r7, r5
 80022be:	469a      	mov	sl, r3
 80022c0:	4643      	mov	r3, r8
 80022c2:	4377      	muls	r7, r6
 80022c4:	435d      	muls	r5, r3
 80022c6:	0c38      	lsrs	r0, r7, #16
 80022c8:	444d      	add	r5, r9
 80022ca:	1945      	adds	r5, r0, r5
 80022cc:	45a9      	cmp	r9, r5
 80022ce:	d903      	bls.n	80022d8 <__aeabi_dmul+0x168>
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	4699      	mov	r9, r3
 80022d6:	44ca      	add	sl, r9
 80022d8:	043f      	lsls	r7, r7, #16
 80022da:	0c28      	lsrs	r0, r5, #16
 80022dc:	0c3f      	lsrs	r7, r7, #16
 80022de:	042d      	lsls	r5, r5, #16
 80022e0:	19ed      	adds	r5, r5, r7
 80022e2:	0c27      	lsrs	r7, r4, #16
 80022e4:	0424      	lsls	r4, r4, #16
 80022e6:	0c24      	lsrs	r4, r4, #16
 80022e8:	0003      	movs	r3, r0
 80022ea:	0020      	movs	r0, r4
 80022ec:	4350      	muls	r0, r2
 80022ee:	437a      	muls	r2, r7
 80022f0:	4691      	mov	r9, r2
 80022f2:	003a      	movs	r2, r7
 80022f4:	4453      	add	r3, sl
 80022f6:	9305      	str	r3, [sp, #20]
 80022f8:	0c03      	lsrs	r3, r0, #16
 80022fa:	469a      	mov	sl, r3
 80022fc:	434a      	muls	r2, r1
 80022fe:	4361      	muls	r1, r4
 8002300:	4449      	add	r1, r9
 8002302:	4451      	add	r1, sl
 8002304:	44ab      	add	fp, r5
 8002306:	4589      	cmp	r9, r1
 8002308:	d903      	bls.n	8002312 <__aeabi_dmul+0x1a2>
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	4699      	mov	r9, r3
 8002310:	444a      	add	r2, r9
 8002312:	0400      	lsls	r0, r0, #16
 8002314:	0c0b      	lsrs	r3, r1, #16
 8002316:	0c00      	lsrs	r0, r0, #16
 8002318:	0409      	lsls	r1, r1, #16
 800231a:	1809      	adds	r1, r1, r0
 800231c:	0020      	movs	r0, r4
 800231e:	4699      	mov	r9, r3
 8002320:	4643      	mov	r3, r8
 8002322:	4370      	muls	r0, r6
 8002324:	435c      	muls	r4, r3
 8002326:	437e      	muls	r6, r7
 8002328:	435f      	muls	r7, r3
 800232a:	0c03      	lsrs	r3, r0, #16
 800232c:	4698      	mov	r8, r3
 800232e:	19a4      	adds	r4, r4, r6
 8002330:	4444      	add	r4, r8
 8002332:	444a      	add	r2, r9
 8002334:	9703      	str	r7, [sp, #12]
 8002336:	42a6      	cmp	r6, r4
 8002338:	d904      	bls.n	8002344 <__aeabi_dmul+0x1d4>
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	4698      	mov	r8, r3
 8002340:	4447      	add	r7, r8
 8002342:	9703      	str	r7, [sp, #12]
 8002344:	0423      	lsls	r3, r4, #16
 8002346:	9e02      	ldr	r6, [sp, #8]
 8002348:	469a      	mov	sl, r3
 800234a:	9b05      	ldr	r3, [sp, #20]
 800234c:	445e      	add	r6, fp
 800234e:	4698      	mov	r8, r3
 8002350:	42ae      	cmp	r6, r5
 8002352:	41ad      	sbcs	r5, r5
 8002354:	1876      	adds	r6, r6, r1
 8002356:	428e      	cmp	r6, r1
 8002358:	4189      	sbcs	r1, r1
 800235a:	0400      	lsls	r0, r0, #16
 800235c:	0c00      	lsrs	r0, r0, #16
 800235e:	4450      	add	r0, sl
 8002360:	4440      	add	r0, r8
 8002362:	426d      	negs	r5, r5
 8002364:	1947      	adds	r7, r0, r5
 8002366:	46b8      	mov	r8, r7
 8002368:	4693      	mov	fp, r2
 800236a:	4249      	negs	r1, r1
 800236c:	4689      	mov	r9, r1
 800236e:	44c3      	add	fp, r8
 8002370:	44d9      	add	r9, fp
 8002372:	4298      	cmp	r0, r3
 8002374:	4180      	sbcs	r0, r0
 8002376:	45a8      	cmp	r8, r5
 8002378:	41ad      	sbcs	r5, r5
 800237a:	4593      	cmp	fp, r2
 800237c:	4192      	sbcs	r2, r2
 800237e:	4589      	cmp	r9, r1
 8002380:	4189      	sbcs	r1, r1
 8002382:	426d      	negs	r5, r5
 8002384:	4240      	negs	r0, r0
 8002386:	4328      	orrs	r0, r5
 8002388:	0c24      	lsrs	r4, r4, #16
 800238a:	4252      	negs	r2, r2
 800238c:	4249      	negs	r1, r1
 800238e:	430a      	orrs	r2, r1
 8002390:	9b03      	ldr	r3, [sp, #12]
 8002392:	1900      	adds	r0, r0, r4
 8002394:	1880      	adds	r0, r0, r2
 8002396:	18c7      	adds	r7, r0, r3
 8002398:	464b      	mov	r3, r9
 800239a:	0ddc      	lsrs	r4, r3, #23
 800239c:	9b04      	ldr	r3, [sp, #16]
 800239e:	0275      	lsls	r5, r6, #9
 80023a0:	431d      	orrs	r5, r3
 80023a2:	1e6a      	subs	r2, r5, #1
 80023a4:	4195      	sbcs	r5, r2
 80023a6:	464b      	mov	r3, r9
 80023a8:	0df6      	lsrs	r6, r6, #23
 80023aa:	027f      	lsls	r7, r7, #9
 80023ac:	4335      	orrs	r5, r6
 80023ae:	025a      	lsls	r2, r3, #9
 80023b0:	433c      	orrs	r4, r7
 80023b2:	4315      	orrs	r5, r2
 80023b4:	01fb      	lsls	r3, r7, #7
 80023b6:	d400      	bmi.n	80023ba <__aeabi_dmul+0x24a>
 80023b8:	e11c      	b.n	80025f4 <__aeabi_dmul+0x484>
 80023ba:	2101      	movs	r1, #1
 80023bc:	086a      	lsrs	r2, r5, #1
 80023be:	400d      	ands	r5, r1
 80023c0:	4315      	orrs	r5, r2
 80023c2:	07e2      	lsls	r2, r4, #31
 80023c4:	4315      	orrs	r5, r2
 80023c6:	0864      	lsrs	r4, r4, #1
 80023c8:	494f      	ldr	r1, [pc, #316]	; (8002508 <__aeabi_dmul+0x398>)
 80023ca:	4461      	add	r1, ip
 80023cc:	2900      	cmp	r1, #0
 80023ce:	dc00      	bgt.n	80023d2 <__aeabi_dmul+0x262>
 80023d0:	e0b0      	b.n	8002534 <__aeabi_dmul+0x3c4>
 80023d2:	076b      	lsls	r3, r5, #29
 80023d4:	d009      	beq.n	80023ea <__aeabi_dmul+0x27a>
 80023d6:	220f      	movs	r2, #15
 80023d8:	402a      	ands	r2, r5
 80023da:	2a04      	cmp	r2, #4
 80023dc:	d005      	beq.n	80023ea <__aeabi_dmul+0x27a>
 80023de:	1d2a      	adds	r2, r5, #4
 80023e0:	42aa      	cmp	r2, r5
 80023e2:	41ad      	sbcs	r5, r5
 80023e4:	426d      	negs	r5, r5
 80023e6:	1964      	adds	r4, r4, r5
 80023e8:	0015      	movs	r5, r2
 80023ea:	01e3      	lsls	r3, r4, #7
 80023ec:	d504      	bpl.n	80023f8 <__aeabi_dmul+0x288>
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	4a46      	ldr	r2, [pc, #280]	; (800250c <__aeabi_dmul+0x39c>)
 80023f2:	00c9      	lsls	r1, r1, #3
 80023f4:	4014      	ands	r4, r2
 80023f6:	4461      	add	r1, ip
 80023f8:	4a45      	ldr	r2, [pc, #276]	; (8002510 <__aeabi_dmul+0x3a0>)
 80023fa:	4291      	cmp	r1, r2
 80023fc:	dd00      	ble.n	8002400 <__aeabi_dmul+0x290>
 80023fe:	e726      	b.n	800224e <__aeabi_dmul+0xde>
 8002400:	0762      	lsls	r2, r4, #29
 8002402:	08ed      	lsrs	r5, r5, #3
 8002404:	0264      	lsls	r4, r4, #9
 8002406:	0549      	lsls	r1, r1, #21
 8002408:	4315      	orrs	r5, r2
 800240a:	0b24      	lsrs	r4, r4, #12
 800240c:	0d4a      	lsrs	r2, r1, #21
 800240e:	e710      	b.n	8002232 <__aeabi_dmul+0xc2>
 8002410:	4652      	mov	r2, sl
 8002412:	4332      	orrs	r2, r6
 8002414:	d100      	bne.n	8002418 <__aeabi_dmul+0x2a8>
 8002416:	e07f      	b.n	8002518 <__aeabi_dmul+0x3a8>
 8002418:	2e00      	cmp	r6, #0
 800241a:	d100      	bne.n	800241e <__aeabi_dmul+0x2ae>
 800241c:	e0dc      	b.n	80025d8 <__aeabi_dmul+0x468>
 800241e:	0030      	movs	r0, r6
 8002420:	f000 fe1e 	bl	8003060 <__clzsi2>
 8002424:	0002      	movs	r2, r0
 8002426:	3a0b      	subs	r2, #11
 8002428:	231d      	movs	r3, #29
 800242a:	0001      	movs	r1, r0
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	4652      	mov	r2, sl
 8002430:	3908      	subs	r1, #8
 8002432:	40da      	lsrs	r2, r3
 8002434:	408e      	lsls	r6, r1
 8002436:	4316      	orrs	r6, r2
 8002438:	4652      	mov	r2, sl
 800243a:	408a      	lsls	r2, r1
 800243c:	9b00      	ldr	r3, [sp, #0]
 800243e:	4935      	ldr	r1, [pc, #212]	; (8002514 <__aeabi_dmul+0x3a4>)
 8002440:	1a18      	subs	r0, r3, r0
 8002442:	0003      	movs	r3, r0
 8002444:	468c      	mov	ip, r1
 8002446:	4463      	add	r3, ip
 8002448:	2000      	movs	r0, #0
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	e6d3      	b.n	80021f6 <__aeabi_dmul+0x86>
 800244e:	0025      	movs	r5, r4
 8002450:	4305      	orrs	r5, r0
 8002452:	d04a      	beq.n	80024ea <__aeabi_dmul+0x37a>
 8002454:	2c00      	cmp	r4, #0
 8002456:	d100      	bne.n	800245a <__aeabi_dmul+0x2ea>
 8002458:	e0b0      	b.n	80025bc <__aeabi_dmul+0x44c>
 800245a:	0020      	movs	r0, r4
 800245c:	f000 fe00 	bl	8003060 <__clzsi2>
 8002460:	0001      	movs	r1, r0
 8002462:	0002      	movs	r2, r0
 8002464:	390b      	subs	r1, #11
 8002466:	231d      	movs	r3, #29
 8002468:	0010      	movs	r0, r2
 800246a:	1a5b      	subs	r3, r3, r1
 800246c:	0031      	movs	r1, r6
 800246e:	0035      	movs	r5, r6
 8002470:	3808      	subs	r0, #8
 8002472:	4084      	lsls	r4, r0
 8002474:	40d9      	lsrs	r1, r3
 8002476:	4085      	lsls	r5, r0
 8002478:	430c      	orrs	r4, r1
 800247a:	4826      	ldr	r0, [pc, #152]	; (8002514 <__aeabi_dmul+0x3a4>)
 800247c:	1a83      	subs	r3, r0, r2
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2300      	movs	r3, #0
 8002482:	4699      	mov	r9, r3
 8002484:	469b      	mov	fp, r3
 8002486:	e697      	b.n	80021b8 <__aeabi_dmul+0x48>
 8002488:	0005      	movs	r5, r0
 800248a:	4325      	orrs	r5, r4
 800248c:	d126      	bne.n	80024dc <__aeabi_dmul+0x36c>
 800248e:	2208      	movs	r2, #8
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2302      	movs	r3, #2
 8002494:	2400      	movs	r4, #0
 8002496:	4691      	mov	r9, r2
 8002498:	469b      	mov	fp, r3
 800249a:	e68d      	b.n	80021b8 <__aeabi_dmul+0x48>
 800249c:	4652      	mov	r2, sl
 800249e:	9b00      	ldr	r3, [sp, #0]
 80024a0:	4332      	orrs	r2, r6
 80024a2:	d110      	bne.n	80024c6 <__aeabi_dmul+0x356>
 80024a4:	4915      	ldr	r1, [pc, #84]	; (80024fc <__aeabi_dmul+0x38c>)
 80024a6:	2600      	movs	r6, #0
 80024a8:	468c      	mov	ip, r1
 80024aa:	4463      	add	r3, ip
 80024ac:	4649      	mov	r1, r9
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2302      	movs	r3, #2
 80024b2:	4319      	orrs	r1, r3
 80024b4:	4689      	mov	r9, r1
 80024b6:	2002      	movs	r0, #2
 80024b8:	e69d      	b.n	80021f6 <__aeabi_dmul+0x86>
 80024ba:	465b      	mov	r3, fp
 80024bc:	9701      	str	r7, [sp, #4]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d000      	beq.n	80024c4 <__aeabi_dmul+0x354>
 80024c2:	e6ad      	b.n	8002220 <__aeabi_dmul+0xb0>
 80024c4:	e6c3      	b.n	800224e <__aeabi_dmul+0xde>
 80024c6:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <__aeabi_dmul+0x38c>)
 80024c8:	2003      	movs	r0, #3
 80024ca:	4694      	mov	ip, r2
 80024cc:	4463      	add	r3, ip
 80024ce:	464a      	mov	r2, r9
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2303      	movs	r3, #3
 80024d4:	431a      	orrs	r2, r3
 80024d6:	4691      	mov	r9, r2
 80024d8:	4652      	mov	r2, sl
 80024da:	e68c      	b.n	80021f6 <__aeabi_dmul+0x86>
 80024dc:	220c      	movs	r2, #12
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2303      	movs	r3, #3
 80024e2:	0005      	movs	r5, r0
 80024e4:	4691      	mov	r9, r2
 80024e6:	469b      	mov	fp, r3
 80024e8:	e666      	b.n	80021b8 <__aeabi_dmul+0x48>
 80024ea:	2304      	movs	r3, #4
 80024ec:	4699      	mov	r9, r3
 80024ee:	2300      	movs	r3, #0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	2400      	movs	r4, #0
 80024f6:	469b      	mov	fp, r3
 80024f8:	e65e      	b.n	80021b8 <__aeabi_dmul+0x48>
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	000007ff 	.word	0x000007ff
 8002500:	fffffc01 	.word	0xfffffc01
 8002504:	0800cd04 	.word	0x0800cd04
 8002508:	000003ff 	.word	0x000003ff
 800250c:	feffffff 	.word	0xfeffffff
 8002510:	000007fe 	.word	0x000007fe
 8002514:	fffffc0d 	.word	0xfffffc0d
 8002518:	4649      	mov	r1, r9
 800251a:	2301      	movs	r3, #1
 800251c:	4319      	orrs	r1, r3
 800251e:	4689      	mov	r9, r1
 8002520:	2600      	movs	r6, #0
 8002522:	2001      	movs	r0, #1
 8002524:	e667      	b.n	80021f6 <__aeabi_dmul+0x86>
 8002526:	2300      	movs	r3, #0
 8002528:	2480      	movs	r4, #128	; 0x80
 800252a:	2500      	movs	r5, #0
 800252c:	4a43      	ldr	r2, [pc, #268]	; (800263c <__aeabi_dmul+0x4cc>)
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	0324      	lsls	r4, r4, #12
 8002532:	e67e      	b.n	8002232 <__aeabi_dmul+0xc2>
 8002534:	2001      	movs	r0, #1
 8002536:	1a40      	subs	r0, r0, r1
 8002538:	2838      	cmp	r0, #56	; 0x38
 800253a:	dd00      	ble.n	800253e <__aeabi_dmul+0x3ce>
 800253c:	e676      	b.n	800222c <__aeabi_dmul+0xbc>
 800253e:	281f      	cmp	r0, #31
 8002540:	dd5b      	ble.n	80025fa <__aeabi_dmul+0x48a>
 8002542:	221f      	movs	r2, #31
 8002544:	0023      	movs	r3, r4
 8002546:	4252      	negs	r2, r2
 8002548:	1a51      	subs	r1, r2, r1
 800254a:	40cb      	lsrs	r3, r1
 800254c:	0019      	movs	r1, r3
 800254e:	2820      	cmp	r0, #32
 8002550:	d003      	beq.n	800255a <__aeabi_dmul+0x3ea>
 8002552:	4a3b      	ldr	r2, [pc, #236]	; (8002640 <__aeabi_dmul+0x4d0>)
 8002554:	4462      	add	r2, ip
 8002556:	4094      	lsls	r4, r2
 8002558:	4325      	orrs	r5, r4
 800255a:	1e6a      	subs	r2, r5, #1
 800255c:	4195      	sbcs	r5, r2
 800255e:	002a      	movs	r2, r5
 8002560:	430a      	orrs	r2, r1
 8002562:	2107      	movs	r1, #7
 8002564:	000d      	movs	r5, r1
 8002566:	2400      	movs	r4, #0
 8002568:	4015      	ands	r5, r2
 800256a:	4211      	tst	r1, r2
 800256c:	d05b      	beq.n	8002626 <__aeabi_dmul+0x4b6>
 800256e:	210f      	movs	r1, #15
 8002570:	2400      	movs	r4, #0
 8002572:	4011      	ands	r1, r2
 8002574:	2904      	cmp	r1, #4
 8002576:	d053      	beq.n	8002620 <__aeabi_dmul+0x4b0>
 8002578:	1d11      	adds	r1, r2, #4
 800257a:	4291      	cmp	r1, r2
 800257c:	4192      	sbcs	r2, r2
 800257e:	4252      	negs	r2, r2
 8002580:	18a4      	adds	r4, r4, r2
 8002582:	000a      	movs	r2, r1
 8002584:	0223      	lsls	r3, r4, #8
 8002586:	d54b      	bpl.n	8002620 <__aeabi_dmul+0x4b0>
 8002588:	2201      	movs	r2, #1
 800258a:	2400      	movs	r4, #0
 800258c:	2500      	movs	r5, #0
 800258e:	e650      	b.n	8002232 <__aeabi_dmul+0xc2>
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	031b      	lsls	r3, r3, #12
 8002594:	421c      	tst	r4, r3
 8002596:	d009      	beq.n	80025ac <__aeabi_dmul+0x43c>
 8002598:	421e      	tst	r6, r3
 800259a:	d107      	bne.n	80025ac <__aeabi_dmul+0x43c>
 800259c:	4333      	orrs	r3, r6
 800259e:	031c      	lsls	r4, r3, #12
 80025a0:	4643      	mov	r3, r8
 80025a2:	0015      	movs	r5, r2
 80025a4:	0b24      	lsrs	r4, r4, #12
 80025a6:	4a25      	ldr	r2, [pc, #148]	; (800263c <__aeabi_dmul+0x4cc>)
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	e642      	b.n	8002232 <__aeabi_dmul+0xc2>
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	0312      	lsls	r2, r2, #12
 80025b0:	4314      	orrs	r4, r2
 80025b2:	0324      	lsls	r4, r4, #12
 80025b4:	4a21      	ldr	r2, [pc, #132]	; (800263c <__aeabi_dmul+0x4cc>)
 80025b6:	0b24      	lsrs	r4, r4, #12
 80025b8:	9701      	str	r7, [sp, #4]
 80025ba:	e63a      	b.n	8002232 <__aeabi_dmul+0xc2>
 80025bc:	f000 fd50 	bl	8003060 <__clzsi2>
 80025c0:	0001      	movs	r1, r0
 80025c2:	0002      	movs	r2, r0
 80025c4:	3115      	adds	r1, #21
 80025c6:	3220      	adds	r2, #32
 80025c8:	291c      	cmp	r1, #28
 80025ca:	dc00      	bgt.n	80025ce <__aeabi_dmul+0x45e>
 80025cc:	e74b      	b.n	8002466 <__aeabi_dmul+0x2f6>
 80025ce:	0034      	movs	r4, r6
 80025d0:	3808      	subs	r0, #8
 80025d2:	2500      	movs	r5, #0
 80025d4:	4084      	lsls	r4, r0
 80025d6:	e750      	b.n	800247a <__aeabi_dmul+0x30a>
 80025d8:	f000 fd42 	bl	8003060 <__clzsi2>
 80025dc:	0003      	movs	r3, r0
 80025de:	001a      	movs	r2, r3
 80025e0:	3215      	adds	r2, #21
 80025e2:	3020      	adds	r0, #32
 80025e4:	2a1c      	cmp	r2, #28
 80025e6:	dc00      	bgt.n	80025ea <__aeabi_dmul+0x47a>
 80025e8:	e71e      	b.n	8002428 <__aeabi_dmul+0x2b8>
 80025ea:	4656      	mov	r6, sl
 80025ec:	3b08      	subs	r3, #8
 80025ee:	2200      	movs	r2, #0
 80025f0:	409e      	lsls	r6, r3
 80025f2:	e723      	b.n	800243c <__aeabi_dmul+0x2cc>
 80025f4:	9b00      	ldr	r3, [sp, #0]
 80025f6:	469c      	mov	ip, r3
 80025f8:	e6e6      	b.n	80023c8 <__aeabi_dmul+0x258>
 80025fa:	4912      	ldr	r1, [pc, #72]	; (8002644 <__aeabi_dmul+0x4d4>)
 80025fc:	0022      	movs	r2, r4
 80025fe:	4461      	add	r1, ip
 8002600:	002e      	movs	r6, r5
 8002602:	408d      	lsls	r5, r1
 8002604:	408a      	lsls	r2, r1
 8002606:	40c6      	lsrs	r6, r0
 8002608:	1e69      	subs	r1, r5, #1
 800260a:	418d      	sbcs	r5, r1
 800260c:	4332      	orrs	r2, r6
 800260e:	432a      	orrs	r2, r5
 8002610:	40c4      	lsrs	r4, r0
 8002612:	0753      	lsls	r3, r2, #29
 8002614:	d0b6      	beq.n	8002584 <__aeabi_dmul+0x414>
 8002616:	210f      	movs	r1, #15
 8002618:	4011      	ands	r1, r2
 800261a:	2904      	cmp	r1, #4
 800261c:	d1ac      	bne.n	8002578 <__aeabi_dmul+0x408>
 800261e:	e7b1      	b.n	8002584 <__aeabi_dmul+0x414>
 8002620:	0765      	lsls	r5, r4, #29
 8002622:	0264      	lsls	r4, r4, #9
 8002624:	0b24      	lsrs	r4, r4, #12
 8002626:	08d2      	lsrs	r2, r2, #3
 8002628:	4315      	orrs	r5, r2
 800262a:	2200      	movs	r2, #0
 800262c:	e601      	b.n	8002232 <__aeabi_dmul+0xc2>
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	0312      	lsls	r2, r2, #12
 8002632:	4314      	orrs	r4, r2
 8002634:	0324      	lsls	r4, r4, #12
 8002636:	4a01      	ldr	r2, [pc, #4]	; (800263c <__aeabi_dmul+0x4cc>)
 8002638:	0b24      	lsrs	r4, r4, #12
 800263a:	e5fa      	b.n	8002232 <__aeabi_dmul+0xc2>
 800263c:	000007ff 	.word	0x000007ff
 8002640:	0000043e 	.word	0x0000043e
 8002644:	0000041e 	.word	0x0000041e

08002648 <__aeabi_dsub>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	4657      	mov	r7, sl
 800264c:	464e      	mov	r6, r9
 800264e:	4645      	mov	r5, r8
 8002650:	46de      	mov	lr, fp
 8002652:	b5e0      	push	{r5, r6, r7, lr}
 8002654:	001e      	movs	r6, r3
 8002656:	0017      	movs	r7, r2
 8002658:	004a      	lsls	r2, r1, #1
 800265a:	030b      	lsls	r3, r1, #12
 800265c:	0d52      	lsrs	r2, r2, #21
 800265e:	0a5b      	lsrs	r3, r3, #9
 8002660:	4690      	mov	r8, r2
 8002662:	0f42      	lsrs	r2, r0, #29
 8002664:	431a      	orrs	r2, r3
 8002666:	0fcd      	lsrs	r5, r1, #31
 8002668:	4ccd      	ldr	r4, [pc, #820]	; (80029a0 <__aeabi_dsub+0x358>)
 800266a:	0331      	lsls	r1, r6, #12
 800266c:	00c3      	lsls	r3, r0, #3
 800266e:	4694      	mov	ip, r2
 8002670:	0070      	lsls	r0, r6, #1
 8002672:	0f7a      	lsrs	r2, r7, #29
 8002674:	0a49      	lsrs	r1, r1, #9
 8002676:	00ff      	lsls	r7, r7, #3
 8002678:	469a      	mov	sl, r3
 800267a:	46b9      	mov	r9, r7
 800267c:	0d40      	lsrs	r0, r0, #21
 800267e:	0ff6      	lsrs	r6, r6, #31
 8002680:	4311      	orrs	r1, r2
 8002682:	42a0      	cmp	r0, r4
 8002684:	d100      	bne.n	8002688 <__aeabi_dsub+0x40>
 8002686:	e0b1      	b.n	80027ec <__aeabi_dsub+0x1a4>
 8002688:	2201      	movs	r2, #1
 800268a:	4056      	eors	r6, r2
 800268c:	46b3      	mov	fp, r6
 800268e:	42b5      	cmp	r5, r6
 8002690:	d100      	bne.n	8002694 <__aeabi_dsub+0x4c>
 8002692:	e088      	b.n	80027a6 <__aeabi_dsub+0x15e>
 8002694:	4642      	mov	r2, r8
 8002696:	1a12      	subs	r2, r2, r0
 8002698:	2a00      	cmp	r2, #0
 800269a:	dc00      	bgt.n	800269e <__aeabi_dsub+0x56>
 800269c:	e0ae      	b.n	80027fc <__aeabi_dsub+0x1b4>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x5c>
 80026a2:	e0c1      	b.n	8002828 <__aeabi_dsub+0x1e0>
 80026a4:	48be      	ldr	r0, [pc, #760]	; (80029a0 <__aeabi_dsub+0x358>)
 80026a6:	4580      	cmp	r8, r0
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x64>
 80026aa:	e151      	b.n	8002950 <__aeabi_dsub+0x308>
 80026ac:	2080      	movs	r0, #128	; 0x80
 80026ae:	0400      	lsls	r0, r0, #16
 80026b0:	4301      	orrs	r1, r0
 80026b2:	2a38      	cmp	r2, #56	; 0x38
 80026b4:	dd00      	ble.n	80026b8 <__aeabi_dsub+0x70>
 80026b6:	e17b      	b.n	80029b0 <__aeabi_dsub+0x368>
 80026b8:	2a1f      	cmp	r2, #31
 80026ba:	dd00      	ble.n	80026be <__aeabi_dsub+0x76>
 80026bc:	e1ee      	b.n	8002a9c <__aeabi_dsub+0x454>
 80026be:	2020      	movs	r0, #32
 80026c0:	003e      	movs	r6, r7
 80026c2:	1a80      	subs	r0, r0, r2
 80026c4:	000c      	movs	r4, r1
 80026c6:	40d6      	lsrs	r6, r2
 80026c8:	40d1      	lsrs	r1, r2
 80026ca:	4087      	lsls	r7, r0
 80026cc:	4662      	mov	r2, ip
 80026ce:	4084      	lsls	r4, r0
 80026d0:	1a52      	subs	r2, r2, r1
 80026d2:	1e78      	subs	r0, r7, #1
 80026d4:	4187      	sbcs	r7, r0
 80026d6:	4694      	mov	ip, r2
 80026d8:	4334      	orrs	r4, r6
 80026da:	4327      	orrs	r7, r4
 80026dc:	1bdc      	subs	r4, r3, r7
 80026de:	42a3      	cmp	r3, r4
 80026e0:	419b      	sbcs	r3, r3
 80026e2:	4662      	mov	r2, ip
 80026e4:	425b      	negs	r3, r3
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	4699      	mov	r9, r3
 80026ea:	464b      	mov	r3, r9
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	d400      	bmi.n	80026f2 <__aeabi_dsub+0xaa>
 80026f0:	e118      	b.n	8002924 <__aeabi_dsub+0x2dc>
 80026f2:	464b      	mov	r3, r9
 80026f4:	0258      	lsls	r0, r3, #9
 80026f6:	0a43      	lsrs	r3, r0, #9
 80026f8:	4699      	mov	r9, r3
 80026fa:	464b      	mov	r3, r9
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d100      	bne.n	8002702 <__aeabi_dsub+0xba>
 8002700:	e137      	b.n	8002972 <__aeabi_dsub+0x32a>
 8002702:	4648      	mov	r0, r9
 8002704:	f000 fcac 	bl	8003060 <__clzsi2>
 8002708:	0001      	movs	r1, r0
 800270a:	3908      	subs	r1, #8
 800270c:	2320      	movs	r3, #32
 800270e:	0022      	movs	r2, r4
 8002710:	4648      	mov	r0, r9
 8002712:	1a5b      	subs	r3, r3, r1
 8002714:	40da      	lsrs	r2, r3
 8002716:	4088      	lsls	r0, r1
 8002718:	408c      	lsls	r4, r1
 800271a:	4643      	mov	r3, r8
 800271c:	4310      	orrs	r0, r2
 800271e:	4588      	cmp	r8, r1
 8002720:	dd00      	ble.n	8002724 <__aeabi_dsub+0xdc>
 8002722:	e136      	b.n	8002992 <__aeabi_dsub+0x34a>
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	1c4b      	adds	r3, r1, #1
 8002728:	2b1f      	cmp	r3, #31
 800272a:	dd00      	ble.n	800272e <__aeabi_dsub+0xe6>
 800272c:	e0ea      	b.n	8002904 <__aeabi_dsub+0x2bc>
 800272e:	2220      	movs	r2, #32
 8002730:	0026      	movs	r6, r4
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	0001      	movs	r1, r0
 8002736:	4094      	lsls	r4, r2
 8002738:	40de      	lsrs	r6, r3
 800273a:	40d8      	lsrs	r0, r3
 800273c:	2300      	movs	r3, #0
 800273e:	4091      	lsls	r1, r2
 8002740:	1e62      	subs	r2, r4, #1
 8002742:	4194      	sbcs	r4, r2
 8002744:	4681      	mov	r9, r0
 8002746:	4698      	mov	r8, r3
 8002748:	4331      	orrs	r1, r6
 800274a:	430c      	orrs	r4, r1
 800274c:	0763      	lsls	r3, r4, #29
 800274e:	d009      	beq.n	8002764 <__aeabi_dsub+0x11c>
 8002750:	230f      	movs	r3, #15
 8002752:	4023      	ands	r3, r4
 8002754:	2b04      	cmp	r3, #4
 8002756:	d005      	beq.n	8002764 <__aeabi_dsub+0x11c>
 8002758:	1d23      	adds	r3, r4, #4
 800275a:	42a3      	cmp	r3, r4
 800275c:	41a4      	sbcs	r4, r4
 800275e:	4264      	negs	r4, r4
 8002760:	44a1      	add	r9, r4
 8002762:	001c      	movs	r4, r3
 8002764:	464b      	mov	r3, r9
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	d400      	bmi.n	800276c <__aeabi_dsub+0x124>
 800276a:	e0de      	b.n	800292a <__aeabi_dsub+0x2e2>
 800276c:	4641      	mov	r1, r8
 800276e:	4b8c      	ldr	r3, [pc, #560]	; (80029a0 <__aeabi_dsub+0x358>)
 8002770:	3101      	adds	r1, #1
 8002772:	4299      	cmp	r1, r3
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x130>
 8002776:	e0e7      	b.n	8002948 <__aeabi_dsub+0x300>
 8002778:	464b      	mov	r3, r9
 800277a:	488a      	ldr	r0, [pc, #552]	; (80029a4 <__aeabi_dsub+0x35c>)
 800277c:	08e4      	lsrs	r4, r4, #3
 800277e:	4003      	ands	r3, r0
 8002780:	0018      	movs	r0, r3
 8002782:	0549      	lsls	r1, r1, #21
 8002784:	075b      	lsls	r3, r3, #29
 8002786:	0240      	lsls	r0, r0, #9
 8002788:	4323      	orrs	r3, r4
 800278a:	0d4a      	lsrs	r2, r1, #21
 800278c:	0b04      	lsrs	r4, r0, #12
 800278e:	0512      	lsls	r2, r2, #20
 8002790:	07ed      	lsls	r5, r5, #31
 8002792:	4322      	orrs	r2, r4
 8002794:	432a      	orrs	r2, r5
 8002796:	0018      	movs	r0, r3
 8002798:	0011      	movs	r1, r2
 800279a:	bcf0      	pop	{r4, r5, r6, r7}
 800279c:	46bb      	mov	fp, r7
 800279e:	46b2      	mov	sl, r6
 80027a0:	46a9      	mov	r9, r5
 80027a2:	46a0      	mov	r8, r4
 80027a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027a6:	4642      	mov	r2, r8
 80027a8:	1a12      	subs	r2, r2, r0
 80027aa:	2a00      	cmp	r2, #0
 80027ac:	dd52      	ble.n	8002854 <__aeabi_dsub+0x20c>
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d100      	bne.n	80027b4 <__aeabi_dsub+0x16c>
 80027b2:	e09c      	b.n	80028ee <__aeabi_dsub+0x2a6>
 80027b4:	45a0      	cmp	r8, r4
 80027b6:	d100      	bne.n	80027ba <__aeabi_dsub+0x172>
 80027b8:	e0ca      	b.n	8002950 <__aeabi_dsub+0x308>
 80027ba:	2080      	movs	r0, #128	; 0x80
 80027bc:	0400      	lsls	r0, r0, #16
 80027be:	4301      	orrs	r1, r0
 80027c0:	2a38      	cmp	r2, #56	; 0x38
 80027c2:	dd00      	ble.n	80027c6 <__aeabi_dsub+0x17e>
 80027c4:	e149      	b.n	8002a5a <__aeabi_dsub+0x412>
 80027c6:	2a1f      	cmp	r2, #31
 80027c8:	dc00      	bgt.n	80027cc <__aeabi_dsub+0x184>
 80027ca:	e197      	b.n	8002afc <__aeabi_dsub+0x4b4>
 80027cc:	0010      	movs	r0, r2
 80027ce:	000e      	movs	r6, r1
 80027d0:	3820      	subs	r0, #32
 80027d2:	40c6      	lsrs	r6, r0
 80027d4:	2a20      	cmp	r2, #32
 80027d6:	d004      	beq.n	80027e2 <__aeabi_dsub+0x19a>
 80027d8:	2040      	movs	r0, #64	; 0x40
 80027da:	1a82      	subs	r2, r0, r2
 80027dc:	4091      	lsls	r1, r2
 80027de:	430f      	orrs	r7, r1
 80027e0:	46b9      	mov	r9, r7
 80027e2:	464c      	mov	r4, r9
 80027e4:	1e62      	subs	r2, r4, #1
 80027e6:	4194      	sbcs	r4, r2
 80027e8:	4334      	orrs	r4, r6
 80027ea:	e13a      	b.n	8002a62 <__aeabi_dsub+0x41a>
 80027ec:	000a      	movs	r2, r1
 80027ee:	433a      	orrs	r2, r7
 80027f0:	d028      	beq.n	8002844 <__aeabi_dsub+0x1fc>
 80027f2:	46b3      	mov	fp, r6
 80027f4:	42b5      	cmp	r5, r6
 80027f6:	d02b      	beq.n	8002850 <__aeabi_dsub+0x208>
 80027f8:	4a6b      	ldr	r2, [pc, #428]	; (80029a8 <__aeabi_dsub+0x360>)
 80027fa:	4442      	add	r2, r8
 80027fc:	2a00      	cmp	r2, #0
 80027fe:	d05d      	beq.n	80028bc <__aeabi_dsub+0x274>
 8002800:	4642      	mov	r2, r8
 8002802:	4644      	mov	r4, r8
 8002804:	1a82      	subs	r2, r0, r2
 8002806:	2c00      	cmp	r4, #0
 8002808:	d000      	beq.n	800280c <__aeabi_dsub+0x1c4>
 800280a:	e0f5      	b.n	80029f8 <__aeabi_dsub+0x3b0>
 800280c:	4665      	mov	r5, ip
 800280e:	431d      	orrs	r5, r3
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x1cc>
 8002812:	e19c      	b.n	8002b4e <__aeabi_dsub+0x506>
 8002814:	1e55      	subs	r5, r2, #1
 8002816:	2a01      	cmp	r2, #1
 8002818:	d100      	bne.n	800281c <__aeabi_dsub+0x1d4>
 800281a:	e1fb      	b.n	8002c14 <__aeabi_dsub+0x5cc>
 800281c:	4c60      	ldr	r4, [pc, #384]	; (80029a0 <__aeabi_dsub+0x358>)
 800281e:	42a2      	cmp	r2, r4
 8002820:	d100      	bne.n	8002824 <__aeabi_dsub+0x1dc>
 8002822:	e1bd      	b.n	8002ba0 <__aeabi_dsub+0x558>
 8002824:	002a      	movs	r2, r5
 8002826:	e0f0      	b.n	8002a0a <__aeabi_dsub+0x3c2>
 8002828:	0008      	movs	r0, r1
 800282a:	4338      	orrs	r0, r7
 800282c:	d100      	bne.n	8002830 <__aeabi_dsub+0x1e8>
 800282e:	e0c3      	b.n	80029b8 <__aeabi_dsub+0x370>
 8002830:	1e50      	subs	r0, r2, #1
 8002832:	2a01      	cmp	r2, #1
 8002834:	d100      	bne.n	8002838 <__aeabi_dsub+0x1f0>
 8002836:	e1a8      	b.n	8002b8a <__aeabi_dsub+0x542>
 8002838:	4c59      	ldr	r4, [pc, #356]	; (80029a0 <__aeabi_dsub+0x358>)
 800283a:	42a2      	cmp	r2, r4
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x1f8>
 800283e:	e087      	b.n	8002950 <__aeabi_dsub+0x308>
 8002840:	0002      	movs	r2, r0
 8002842:	e736      	b.n	80026b2 <__aeabi_dsub+0x6a>
 8002844:	2201      	movs	r2, #1
 8002846:	4056      	eors	r6, r2
 8002848:	46b3      	mov	fp, r6
 800284a:	42b5      	cmp	r5, r6
 800284c:	d000      	beq.n	8002850 <__aeabi_dsub+0x208>
 800284e:	e721      	b.n	8002694 <__aeabi_dsub+0x4c>
 8002850:	4a55      	ldr	r2, [pc, #340]	; (80029a8 <__aeabi_dsub+0x360>)
 8002852:	4442      	add	r2, r8
 8002854:	2a00      	cmp	r2, #0
 8002856:	d100      	bne.n	800285a <__aeabi_dsub+0x212>
 8002858:	e0b5      	b.n	80029c6 <__aeabi_dsub+0x37e>
 800285a:	4642      	mov	r2, r8
 800285c:	4644      	mov	r4, r8
 800285e:	1a82      	subs	r2, r0, r2
 8002860:	2c00      	cmp	r4, #0
 8002862:	d100      	bne.n	8002866 <__aeabi_dsub+0x21e>
 8002864:	e138      	b.n	8002ad8 <__aeabi_dsub+0x490>
 8002866:	4e4e      	ldr	r6, [pc, #312]	; (80029a0 <__aeabi_dsub+0x358>)
 8002868:	42b0      	cmp	r0, r6
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x226>
 800286c:	e1de      	b.n	8002c2c <__aeabi_dsub+0x5e4>
 800286e:	2680      	movs	r6, #128	; 0x80
 8002870:	4664      	mov	r4, ip
 8002872:	0436      	lsls	r6, r6, #16
 8002874:	4334      	orrs	r4, r6
 8002876:	46a4      	mov	ip, r4
 8002878:	2a38      	cmp	r2, #56	; 0x38
 800287a:	dd00      	ble.n	800287e <__aeabi_dsub+0x236>
 800287c:	e196      	b.n	8002bac <__aeabi_dsub+0x564>
 800287e:	2a1f      	cmp	r2, #31
 8002880:	dd00      	ble.n	8002884 <__aeabi_dsub+0x23c>
 8002882:	e224      	b.n	8002cce <__aeabi_dsub+0x686>
 8002884:	2620      	movs	r6, #32
 8002886:	1ab4      	subs	r4, r6, r2
 8002888:	46a2      	mov	sl, r4
 800288a:	4664      	mov	r4, ip
 800288c:	4656      	mov	r6, sl
 800288e:	40b4      	lsls	r4, r6
 8002890:	46a1      	mov	r9, r4
 8002892:	001c      	movs	r4, r3
 8002894:	464e      	mov	r6, r9
 8002896:	40d4      	lsrs	r4, r2
 8002898:	4326      	orrs	r6, r4
 800289a:	0034      	movs	r4, r6
 800289c:	4656      	mov	r6, sl
 800289e:	40b3      	lsls	r3, r6
 80028a0:	1e5e      	subs	r6, r3, #1
 80028a2:	41b3      	sbcs	r3, r6
 80028a4:	431c      	orrs	r4, r3
 80028a6:	4663      	mov	r3, ip
 80028a8:	40d3      	lsrs	r3, r2
 80028aa:	18c9      	adds	r1, r1, r3
 80028ac:	19e4      	adds	r4, r4, r7
 80028ae:	42bc      	cmp	r4, r7
 80028b0:	41bf      	sbcs	r7, r7
 80028b2:	427f      	negs	r7, r7
 80028b4:	46b9      	mov	r9, r7
 80028b6:	4680      	mov	r8, r0
 80028b8:	4489      	add	r9, r1
 80028ba:	e0d8      	b.n	8002a6e <__aeabi_dsub+0x426>
 80028bc:	4640      	mov	r0, r8
 80028be:	4c3b      	ldr	r4, [pc, #236]	; (80029ac <__aeabi_dsub+0x364>)
 80028c0:	3001      	adds	r0, #1
 80028c2:	4220      	tst	r0, r4
 80028c4:	d000      	beq.n	80028c8 <__aeabi_dsub+0x280>
 80028c6:	e0b4      	b.n	8002a32 <__aeabi_dsub+0x3ea>
 80028c8:	4640      	mov	r0, r8
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d000      	beq.n	80028d0 <__aeabi_dsub+0x288>
 80028ce:	e144      	b.n	8002b5a <__aeabi_dsub+0x512>
 80028d0:	4660      	mov	r0, ip
 80028d2:	4318      	orrs	r0, r3
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x290>
 80028d6:	e190      	b.n	8002bfa <__aeabi_dsub+0x5b2>
 80028d8:	0008      	movs	r0, r1
 80028da:	4338      	orrs	r0, r7
 80028dc:	d000      	beq.n	80028e0 <__aeabi_dsub+0x298>
 80028de:	e1aa      	b.n	8002c36 <__aeabi_dsub+0x5ee>
 80028e0:	4661      	mov	r1, ip
 80028e2:	08db      	lsrs	r3, r3, #3
 80028e4:	0749      	lsls	r1, r1, #29
 80028e6:	430b      	orrs	r3, r1
 80028e8:	4661      	mov	r1, ip
 80028ea:	08cc      	lsrs	r4, r1, #3
 80028ec:	e027      	b.n	800293e <__aeabi_dsub+0x2f6>
 80028ee:	0008      	movs	r0, r1
 80028f0:	4338      	orrs	r0, r7
 80028f2:	d061      	beq.n	80029b8 <__aeabi_dsub+0x370>
 80028f4:	1e50      	subs	r0, r2, #1
 80028f6:	2a01      	cmp	r2, #1
 80028f8:	d100      	bne.n	80028fc <__aeabi_dsub+0x2b4>
 80028fa:	e139      	b.n	8002b70 <__aeabi_dsub+0x528>
 80028fc:	42a2      	cmp	r2, r4
 80028fe:	d027      	beq.n	8002950 <__aeabi_dsub+0x308>
 8002900:	0002      	movs	r2, r0
 8002902:	e75d      	b.n	80027c0 <__aeabi_dsub+0x178>
 8002904:	0002      	movs	r2, r0
 8002906:	391f      	subs	r1, #31
 8002908:	40ca      	lsrs	r2, r1
 800290a:	0011      	movs	r1, r2
 800290c:	2b20      	cmp	r3, #32
 800290e:	d003      	beq.n	8002918 <__aeabi_dsub+0x2d0>
 8002910:	2240      	movs	r2, #64	; 0x40
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	4098      	lsls	r0, r3
 8002916:	4304      	orrs	r4, r0
 8002918:	1e63      	subs	r3, r4, #1
 800291a:	419c      	sbcs	r4, r3
 800291c:	2300      	movs	r3, #0
 800291e:	4699      	mov	r9, r3
 8002920:	4698      	mov	r8, r3
 8002922:	430c      	orrs	r4, r1
 8002924:	0763      	lsls	r3, r4, #29
 8002926:	d000      	beq.n	800292a <__aeabi_dsub+0x2e2>
 8002928:	e712      	b.n	8002750 <__aeabi_dsub+0x108>
 800292a:	464b      	mov	r3, r9
 800292c:	464a      	mov	r2, r9
 800292e:	08e4      	lsrs	r4, r4, #3
 8002930:	075b      	lsls	r3, r3, #29
 8002932:	4323      	orrs	r3, r4
 8002934:	08d4      	lsrs	r4, r2, #3
 8002936:	4642      	mov	r2, r8
 8002938:	4919      	ldr	r1, [pc, #100]	; (80029a0 <__aeabi_dsub+0x358>)
 800293a:	428a      	cmp	r2, r1
 800293c:	d00e      	beq.n	800295c <__aeabi_dsub+0x314>
 800293e:	0324      	lsls	r4, r4, #12
 8002940:	0552      	lsls	r2, r2, #21
 8002942:	0b24      	lsrs	r4, r4, #12
 8002944:	0d52      	lsrs	r2, r2, #21
 8002946:	e722      	b.n	800278e <__aeabi_dsub+0x146>
 8002948:	000a      	movs	r2, r1
 800294a:	2400      	movs	r4, #0
 800294c:	2300      	movs	r3, #0
 800294e:	e71e      	b.n	800278e <__aeabi_dsub+0x146>
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	4662      	mov	r2, ip
 8002954:	0752      	lsls	r2, r2, #29
 8002956:	4313      	orrs	r3, r2
 8002958:	4662      	mov	r2, ip
 800295a:	08d4      	lsrs	r4, r2, #3
 800295c:	001a      	movs	r2, r3
 800295e:	4322      	orrs	r2, r4
 8002960:	d100      	bne.n	8002964 <__aeabi_dsub+0x31c>
 8002962:	e1fc      	b.n	8002d5e <__aeabi_dsub+0x716>
 8002964:	2280      	movs	r2, #128	; 0x80
 8002966:	0312      	lsls	r2, r2, #12
 8002968:	4314      	orrs	r4, r2
 800296a:	0324      	lsls	r4, r4, #12
 800296c:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <__aeabi_dsub+0x358>)
 800296e:	0b24      	lsrs	r4, r4, #12
 8002970:	e70d      	b.n	800278e <__aeabi_dsub+0x146>
 8002972:	0020      	movs	r0, r4
 8002974:	f000 fb74 	bl	8003060 <__clzsi2>
 8002978:	0001      	movs	r1, r0
 800297a:	3118      	adds	r1, #24
 800297c:	291f      	cmp	r1, #31
 800297e:	dc00      	bgt.n	8002982 <__aeabi_dsub+0x33a>
 8002980:	e6c4      	b.n	800270c <__aeabi_dsub+0xc4>
 8002982:	3808      	subs	r0, #8
 8002984:	4084      	lsls	r4, r0
 8002986:	4643      	mov	r3, r8
 8002988:	0020      	movs	r0, r4
 800298a:	2400      	movs	r4, #0
 800298c:	4588      	cmp	r8, r1
 800298e:	dc00      	bgt.n	8002992 <__aeabi_dsub+0x34a>
 8002990:	e6c8      	b.n	8002724 <__aeabi_dsub+0xdc>
 8002992:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <__aeabi_dsub+0x35c>)
 8002994:	1a5b      	subs	r3, r3, r1
 8002996:	4010      	ands	r0, r2
 8002998:	4698      	mov	r8, r3
 800299a:	4681      	mov	r9, r0
 800299c:	e6d6      	b.n	800274c <__aeabi_dsub+0x104>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff
 80029a8:	fffff801 	.word	0xfffff801
 80029ac:	000007fe 	.word	0x000007fe
 80029b0:	430f      	orrs	r7, r1
 80029b2:	1e7a      	subs	r2, r7, #1
 80029b4:	4197      	sbcs	r7, r2
 80029b6:	e691      	b.n	80026dc <__aeabi_dsub+0x94>
 80029b8:	4661      	mov	r1, ip
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	0749      	lsls	r1, r1, #29
 80029be:	430b      	orrs	r3, r1
 80029c0:	4661      	mov	r1, ip
 80029c2:	08cc      	lsrs	r4, r1, #3
 80029c4:	e7b8      	b.n	8002938 <__aeabi_dsub+0x2f0>
 80029c6:	4640      	mov	r0, r8
 80029c8:	4cd3      	ldr	r4, [pc, #844]	; (8002d18 <__aeabi_dsub+0x6d0>)
 80029ca:	3001      	adds	r0, #1
 80029cc:	4220      	tst	r0, r4
 80029ce:	d000      	beq.n	80029d2 <__aeabi_dsub+0x38a>
 80029d0:	e0a2      	b.n	8002b18 <__aeabi_dsub+0x4d0>
 80029d2:	4640      	mov	r0, r8
 80029d4:	2800      	cmp	r0, #0
 80029d6:	d000      	beq.n	80029da <__aeabi_dsub+0x392>
 80029d8:	e101      	b.n	8002bde <__aeabi_dsub+0x596>
 80029da:	4660      	mov	r0, ip
 80029dc:	4318      	orrs	r0, r3
 80029de:	d100      	bne.n	80029e2 <__aeabi_dsub+0x39a>
 80029e0:	e15e      	b.n	8002ca0 <__aeabi_dsub+0x658>
 80029e2:	0008      	movs	r0, r1
 80029e4:	4338      	orrs	r0, r7
 80029e6:	d000      	beq.n	80029ea <__aeabi_dsub+0x3a2>
 80029e8:	e15f      	b.n	8002caa <__aeabi_dsub+0x662>
 80029ea:	4661      	mov	r1, ip
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	0749      	lsls	r1, r1, #29
 80029f0:	430b      	orrs	r3, r1
 80029f2:	4661      	mov	r1, ip
 80029f4:	08cc      	lsrs	r4, r1, #3
 80029f6:	e7a2      	b.n	800293e <__aeabi_dsub+0x2f6>
 80029f8:	4dc8      	ldr	r5, [pc, #800]	; (8002d1c <__aeabi_dsub+0x6d4>)
 80029fa:	42a8      	cmp	r0, r5
 80029fc:	d100      	bne.n	8002a00 <__aeabi_dsub+0x3b8>
 80029fe:	e0cf      	b.n	8002ba0 <__aeabi_dsub+0x558>
 8002a00:	2580      	movs	r5, #128	; 0x80
 8002a02:	4664      	mov	r4, ip
 8002a04:	042d      	lsls	r5, r5, #16
 8002a06:	432c      	orrs	r4, r5
 8002a08:	46a4      	mov	ip, r4
 8002a0a:	2a38      	cmp	r2, #56	; 0x38
 8002a0c:	dc56      	bgt.n	8002abc <__aeabi_dsub+0x474>
 8002a0e:	2a1f      	cmp	r2, #31
 8002a10:	dd00      	ble.n	8002a14 <__aeabi_dsub+0x3cc>
 8002a12:	e0d1      	b.n	8002bb8 <__aeabi_dsub+0x570>
 8002a14:	2520      	movs	r5, #32
 8002a16:	001e      	movs	r6, r3
 8002a18:	1aad      	subs	r5, r5, r2
 8002a1a:	4664      	mov	r4, ip
 8002a1c:	40ab      	lsls	r3, r5
 8002a1e:	40ac      	lsls	r4, r5
 8002a20:	40d6      	lsrs	r6, r2
 8002a22:	1e5d      	subs	r5, r3, #1
 8002a24:	41ab      	sbcs	r3, r5
 8002a26:	4334      	orrs	r4, r6
 8002a28:	4323      	orrs	r3, r4
 8002a2a:	4664      	mov	r4, ip
 8002a2c:	40d4      	lsrs	r4, r2
 8002a2e:	1b09      	subs	r1, r1, r4
 8002a30:	e049      	b.n	8002ac6 <__aeabi_dsub+0x47e>
 8002a32:	4660      	mov	r0, ip
 8002a34:	1bdc      	subs	r4, r3, r7
 8002a36:	1a46      	subs	r6, r0, r1
 8002a38:	42a3      	cmp	r3, r4
 8002a3a:	4180      	sbcs	r0, r0
 8002a3c:	4240      	negs	r0, r0
 8002a3e:	4681      	mov	r9, r0
 8002a40:	0030      	movs	r0, r6
 8002a42:	464e      	mov	r6, r9
 8002a44:	1b80      	subs	r0, r0, r6
 8002a46:	4681      	mov	r9, r0
 8002a48:	0200      	lsls	r0, r0, #8
 8002a4a:	d476      	bmi.n	8002b3a <__aeabi_dsub+0x4f2>
 8002a4c:	464b      	mov	r3, r9
 8002a4e:	4323      	orrs	r3, r4
 8002a50:	d000      	beq.n	8002a54 <__aeabi_dsub+0x40c>
 8002a52:	e652      	b.n	80026fa <__aeabi_dsub+0xb2>
 8002a54:	2400      	movs	r4, #0
 8002a56:	2500      	movs	r5, #0
 8002a58:	e771      	b.n	800293e <__aeabi_dsub+0x2f6>
 8002a5a:	4339      	orrs	r1, r7
 8002a5c:	000c      	movs	r4, r1
 8002a5e:	1e62      	subs	r2, r4, #1
 8002a60:	4194      	sbcs	r4, r2
 8002a62:	18e4      	adds	r4, r4, r3
 8002a64:	429c      	cmp	r4, r3
 8002a66:	419b      	sbcs	r3, r3
 8002a68:	425b      	negs	r3, r3
 8002a6a:	4463      	add	r3, ip
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	464b      	mov	r3, r9
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	d400      	bmi.n	8002a76 <__aeabi_dsub+0x42e>
 8002a74:	e756      	b.n	8002924 <__aeabi_dsub+0x2dc>
 8002a76:	2301      	movs	r3, #1
 8002a78:	469c      	mov	ip, r3
 8002a7a:	4ba8      	ldr	r3, [pc, #672]	; (8002d1c <__aeabi_dsub+0x6d4>)
 8002a7c:	44e0      	add	r8, ip
 8002a7e:	4598      	cmp	r8, r3
 8002a80:	d038      	beq.n	8002af4 <__aeabi_dsub+0x4ac>
 8002a82:	464b      	mov	r3, r9
 8002a84:	48a6      	ldr	r0, [pc, #664]	; (8002d20 <__aeabi_dsub+0x6d8>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	4003      	ands	r3, r0
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	0863      	lsrs	r3, r4, #1
 8002a8e:	4014      	ands	r4, r2
 8002a90:	431c      	orrs	r4, r3
 8002a92:	07c3      	lsls	r3, r0, #31
 8002a94:	431c      	orrs	r4, r3
 8002a96:	0843      	lsrs	r3, r0, #1
 8002a98:	4699      	mov	r9, r3
 8002a9a:	e657      	b.n	800274c <__aeabi_dsub+0x104>
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	000e      	movs	r6, r1
 8002aa0:	3820      	subs	r0, #32
 8002aa2:	40c6      	lsrs	r6, r0
 8002aa4:	2a20      	cmp	r2, #32
 8002aa6:	d004      	beq.n	8002ab2 <__aeabi_dsub+0x46a>
 8002aa8:	2040      	movs	r0, #64	; 0x40
 8002aaa:	1a82      	subs	r2, r0, r2
 8002aac:	4091      	lsls	r1, r2
 8002aae:	430f      	orrs	r7, r1
 8002ab0:	46b9      	mov	r9, r7
 8002ab2:	464f      	mov	r7, r9
 8002ab4:	1e7a      	subs	r2, r7, #1
 8002ab6:	4197      	sbcs	r7, r2
 8002ab8:	4337      	orrs	r7, r6
 8002aba:	e60f      	b.n	80026dc <__aeabi_dsub+0x94>
 8002abc:	4662      	mov	r2, ip
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	1e5a      	subs	r2, r3, #1
 8002ac4:	4193      	sbcs	r3, r2
 8002ac6:	1afc      	subs	r4, r7, r3
 8002ac8:	42a7      	cmp	r7, r4
 8002aca:	41bf      	sbcs	r7, r7
 8002acc:	427f      	negs	r7, r7
 8002ace:	1bcb      	subs	r3, r1, r7
 8002ad0:	4699      	mov	r9, r3
 8002ad2:	465d      	mov	r5, fp
 8002ad4:	4680      	mov	r8, r0
 8002ad6:	e608      	b.n	80026ea <__aeabi_dsub+0xa2>
 8002ad8:	4666      	mov	r6, ip
 8002ada:	431e      	orrs	r6, r3
 8002adc:	d100      	bne.n	8002ae0 <__aeabi_dsub+0x498>
 8002ade:	e0be      	b.n	8002c5e <__aeabi_dsub+0x616>
 8002ae0:	1e56      	subs	r6, r2, #1
 8002ae2:	2a01      	cmp	r2, #1
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dsub+0x4a0>
 8002ae6:	e109      	b.n	8002cfc <__aeabi_dsub+0x6b4>
 8002ae8:	4c8c      	ldr	r4, [pc, #560]	; (8002d1c <__aeabi_dsub+0x6d4>)
 8002aea:	42a2      	cmp	r2, r4
 8002aec:	d100      	bne.n	8002af0 <__aeabi_dsub+0x4a8>
 8002aee:	e119      	b.n	8002d24 <__aeabi_dsub+0x6dc>
 8002af0:	0032      	movs	r2, r6
 8002af2:	e6c1      	b.n	8002878 <__aeabi_dsub+0x230>
 8002af4:	4642      	mov	r2, r8
 8002af6:	2400      	movs	r4, #0
 8002af8:	2300      	movs	r3, #0
 8002afa:	e648      	b.n	800278e <__aeabi_dsub+0x146>
 8002afc:	2020      	movs	r0, #32
 8002afe:	000c      	movs	r4, r1
 8002b00:	1a80      	subs	r0, r0, r2
 8002b02:	003e      	movs	r6, r7
 8002b04:	4087      	lsls	r7, r0
 8002b06:	4084      	lsls	r4, r0
 8002b08:	40d6      	lsrs	r6, r2
 8002b0a:	1e78      	subs	r0, r7, #1
 8002b0c:	4187      	sbcs	r7, r0
 8002b0e:	40d1      	lsrs	r1, r2
 8002b10:	4334      	orrs	r4, r6
 8002b12:	433c      	orrs	r4, r7
 8002b14:	448c      	add	ip, r1
 8002b16:	e7a4      	b.n	8002a62 <__aeabi_dsub+0x41a>
 8002b18:	4a80      	ldr	r2, [pc, #512]	; (8002d1c <__aeabi_dsub+0x6d4>)
 8002b1a:	4290      	cmp	r0, r2
 8002b1c:	d100      	bne.n	8002b20 <__aeabi_dsub+0x4d8>
 8002b1e:	e0e9      	b.n	8002cf4 <__aeabi_dsub+0x6ac>
 8002b20:	19df      	adds	r7, r3, r7
 8002b22:	429f      	cmp	r7, r3
 8002b24:	419b      	sbcs	r3, r3
 8002b26:	4461      	add	r1, ip
 8002b28:	425b      	negs	r3, r3
 8002b2a:	18c9      	adds	r1, r1, r3
 8002b2c:	07cc      	lsls	r4, r1, #31
 8002b2e:	087f      	lsrs	r7, r7, #1
 8002b30:	084b      	lsrs	r3, r1, #1
 8002b32:	4699      	mov	r9, r3
 8002b34:	4680      	mov	r8, r0
 8002b36:	433c      	orrs	r4, r7
 8002b38:	e6f4      	b.n	8002924 <__aeabi_dsub+0x2dc>
 8002b3a:	1afc      	subs	r4, r7, r3
 8002b3c:	42a7      	cmp	r7, r4
 8002b3e:	41bf      	sbcs	r7, r7
 8002b40:	4663      	mov	r3, ip
 8002b42:	427f      	negs	r7, r7
 8002b44:	1ac9      	subs	r1, r1, r3
 8002b46:	1bcb      	subs	r3, r1, r7
 8002b48:	4699      	mov	r9, r3
 8002b4a:	465d      	mov	r5, fp
 8002b4c:	e5d5      	b.n	80026fa <__aeabi_dsub+0xb2>
 8002b4e:	08ff      	lsrs	r7, r7, #3
 8002b50:	074b      	lsls	r3, r1, #29
 8002b52:	465d      	mov	r5, fp
 8002b54:	433b      	orrs	r3, r7
 8002b56:	08cc      	lsrs	r4, r1, #3
 8002b58:	e6ee      	b.n	8002938 <__aeabi_dsub+0x2f0>
 8002b5a:	4662      	mov	r2, ip
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	d000      	beq.n	8002b62 <__aeabi_dsub+0x51a>
 8002b60:	e082      	b.n	8002c68 <__aeabi_dsub+0x620>
 8002b62:	000b      	movs	r3, r1
 8002b64:	433b      	orrs	r3, r7
 8002b66:	d11b      	bne.n	8002ba0 <__aeabi_dsub+0x558>
 8002b68:	2480      	movs	r4, #128	; 0x80
 8002b6a:	2500      	movs	r5, #0
 8002b6c:	0324      	lsls	r4, r4, #12
 8002b6e:	e6f9      	b.n	8002964 <__aeabi_dsub+0x31c>
 8002b70:	19dc      	adds	r4, r3, r7
 8002b72:	429c      	cmp	r4, r3
 8002b74:	419b      	sbcs	r3, r3
 8002b76:	4461      	add	r1, ip
 8002b78:	4689      	mov	r9, r1
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	4499      	add	r9, r3
 8002b7e:	464b      	mov	r3, r9
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	d444      	bmi.n	8002c0e <__aeabi_dsub+0x5c6>
 8002b84:	2301      	movs	r3, #1
 8002b86:	4698      	mov	r8, r3
 8002b88:	e6cc      	b.n	8002924 <__aeabi_dsub+0x2dc>
 8002b8a:	1bdc      	subs	r4, r3, r7
 8002b8c:	4662      	mov	r2, ip
 8002b8e:	42a3      	cmp	r3, r4
 8002b90:	419b      	sbcs	r3, r3
 8002b92:	1a51      	subs	r1, r2, r1
 8002b94:	425b      	negs	r3, r3
 8002b96:	1acb      	subs	r3, r1, r3
 8002b98:	4699      	mov	r9, r3
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	4698      	mov	r8, r3
 8002b9e:	e5a4      	b.n	80026ea <__aeabi_dsub+0xa2>
 8002ba0:	08ff      	lsrs	r7, r7, #3
 8002ba2:	074b      	lsls	r3, r1, #29
 8002ba4:	465d      	mov	r5, fp
 8002ba6:	433b      	orrs	r3, r7
 8002ba8:	08cc      	lsrs	r4, r1, #3
 8002baa:	e6d7      	b.n	800295c <__aeabi_dsub+0x314>
 8002bac:	4662      	mov	r2, ip
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	0014      	movs	r4, r2
 8002bb2:	1e63      	subs	r3, r4, #1
 8002bb4:	419c      	sbcs	r4, r3
 8002bb6:	e679      	b.n	80028ac <__aeabi_dsub+0x264>
 8002bb8:	0015      	movs	r5, r2
 8002bba:	4664      	mov	r4, ip
 8002bbc:	3d20      	subs	r5, #32
 8002bbe:	40ec      	lsrs	r4, r5
 8002bc0:	46a0      	mov	r8, r4
 8002bc2:	2a20      	cmp	r2, #32
 8002bc4:	d005      	beq.n	8002bd2 <__aeabi_dsub+0x58a>
 8002bc6:	2540      	movs	r5, #64	; 0x40
 8002bc8:	4664      	mov	r4, ip
 8002bca:	1aaa      	subs	r2, r5, r2
 8002bcc:	4094      	lsls	r4, r2
 8002bce:	4323      	orrs	r3, r4
 8002bd0:	469a      	mov	sl, r3
 8002bd2:	4654      	mov	r4, sl
 8002bd4:	1e63      	subs	r3, r4, #1
 8002bd6:	419c      	sbcs	r4, r3
 8002bd8:	4643      	mov	r3, r8
 8002bda:	4323      	orrs	r3, r4
 8002bdc:	e773      	b.n	8002ac6 <__aeabi_dsub+0x47e>
 8002bde:	4662      	mov	r2, ip
 8002be0:	431a      	orrs	r2, r3
 8002be2:	d023      	beq.n	8002c2c <__aeabi_dsub+0x5e4>
 8002be4:	000a      	movs	r2, r1
 8002be6:	433a      	orrs	r2, r7
 8002be8:	d000      	beq.n	8002bec <__aeabi_dsub+0x5a4>
 8002bea:	e0a0      	b.n	8002d2e <__aeabi_dsub+0x6e6>
 8002bec:	4662      	mov	r2, ip
 8002bee:	08db      	lsrs	r3, r3, #3
 8002bf0:	0752      	lsls	r2, r2, #29
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	4662      	mov	r2, ip
 8002bf6:	08d4      	lsrs	r4, r2, #3
 8002bf8:	e6b0      	b.n	800295c <__aeabi_dsub+0x314>
 8002bfa:	000b      	movs	r3, r1
 8002bfc:	433b      	orrs	r3, r7
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x5ba>
 8002c00:	e728      	b.n	8002a54 <__aeabi_dsub+0x40c>
 8002c02:	08ff      	lsrs	r7, r7, #3
 8002c04:	074b      	lsls	r3, r1, #29
 8002c06:	465d      	mov	r5, fp
 8002c08:	433b      	orrs	r3, r7
 8002c0a:	08cc      	lsrs	r4, r1, #3
 8002c0c:	e697      	b.n	800293e <__aeabi_dsub+0x2f6>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	4698      	mov	r8, r3
 8002c12:	e736      	b.n	8002a82 <__aeabi_dsub+0x43a>
 8002c14:	1afc      	subs	r4, r7, r3
 8002c16:	42a7      	cmp	r7, r4
 8002c18:	41bf      	sbcs	r7, r7
 8002c1a:	4663      	mov	r3, ip
 8002c1c:	427f      	negs	r7, r7
 8002c1e:	1ac9      	subs	r1, r1, r3
 8002c20:	1bcb      	subs	r3, r1, r7
 8002c22:	4699      	mov	r9, r3
 8002c24:	2301      	movs	r3, #1
 8002c26:	465d      	mov	r5, fp
 8002c28:	4698      	mov	r8, r3
 8002c2a:	e55e      	b.n	80026ea <__aeabi_dsub+0xa2>
 8002c2c:	074b      	lsls	r3, r1, #29
 8002c2e:	08ff      	lsrs	r7, r7, #3
 8002c30:	433b      	orrs	r3, r7
 8002c32:	08cc      	lsrs	r4, r1, #3
 8002c34:	e692      	b.n	800295c <__aeabi_dsub+0x314>
 8002c36:	1bdc      	subs	r4, r3, r7
 8002c38:	4660      	mov	r0, ip
 8002c3a:	42a3      	cmp	r3, r4
 8002c3c:	41b6      	sbcs	r6, r6
 8002c3e:	1a40      	subs	r0, r0, r1
 8002c40:	4276      	negs	r6, r6
 8002c42:	1b80      	subs	r0, r0, r6
 8002c44:	4681      	mov	r9, r0
 8002c46:	0200      	lsls	r0, r0, #8
 8002c48:	d560      	bpl.n	8002d0c <__aeabi_dsub+0x6c4>
 8002c4a:	1afc      	subs	r4, r7, r3
 8002c4c:	42a7      	cmp	r7, r4
 8002c4e:	41bf      	sbcs	r7, r7
 8002c50:	4663      	mov	r3, ip
 8002c52:	427f      	negs	r7, r7
 8002c54:	1ac9      	subs	r1, r1, r3
 8002c56:	1bcb      	subs	r3, r1, r7
 8002c58:	4699      	mov	r9, r3
 8002c5a:	465d      	mov	r5, fp
 8002c5c:	e576      	b.n	800274c <__aeabi_dsub+0x104>
 8002c5e:	08ff      	lsrs	r7, r7, #3
 8002c60:	074b      	lsls	r3, r1, #29
 8002c62:	433b      	orrs	r3, r7
 8002c64:	08cc      	lsrs	r4, r1, #3
 8002c66:	e667      	b.n	8002938 <__aeabi_dsub+0x2f0>
 8002c68:	000a      	movs	r2, r1
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	433a      	orrs	r2, r7
 8002c6e:	d100      	bne.n	8002c72 <__aeabi_dsub+0x62a>
 8002c70:	e66f      	b.n	8002952 <__aeabi_dsub+0x30a>
 8002c72:	4662      	mov	r2, ip
 8002c74:	0752      	lsls	r2, r2, #29
 8002c76:	4313      	orrs	r3, r2
 8002c78:	4662      	mov	r2, ip
 8002c7a:	08d4      	lsrs	r4, r2, #3
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	0312      	lsls	r2, r2, #12
 8002c80:	4214      	tst	r4, r2
 8002c82:	d007      	beq.n	8002c94 <__aeabi_dsub+0x64c>
 8002c84:	08c8      	lsrs	r0, r1, #3
 8002c86:	4210      	tst	r0, r2
 8002c88:	d104      	bne.n	8002c94 <__aeabi_dsub+0x64c>
 8002c8a:	465d      	mov	r5, fp
 8002c8c:	0004      	movs	r4, r0
 8002c8e:	08fb      	lsrs	r3, r7, #3
 8002c90:	0749      	lsls	r1, r1, #29
 8002c92:	430b      	orrs	r3, r1
 8002c94:	0f5a      	lsrs	r2, r3, #29
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	08db      	lsrs	r3, r3, #3
 8002c9a:	0752      	lsls	r2, r2, #29
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	e65d      	b.n	800295c <__aeabi_dsub+0x314>
 8002ca0:	074b      	lsls	r3, r1, #29
 8002ca2:	08ff      	lsrs	r7, r7, #3
 8002ca4:	433b      	orrs	r3, r7
 8002ca6:	08cc      	lsrs	r4, r1, #3
 8002ca8:	e649      	b.n	800293e <__aeabi_dsub+0x2f6>
 8002caa:	19dc      	adds	r4, r3, r7
 8002cac:	429c      	cmp	r4, r3
 8002cae:	419b      	sbcs	r3, r3
 8002cb0:	4461      	add	r1, ip
 8002cb2:	4689      	mov	r9, r1
 8002cb4:	425b      	negs	r3, r3
 8002cb6:	4499      	add	r9, r3
 8002cb8:	464b      	mov	r3, r9
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	d400      	bmi.n	8002cc0 <__aeabi_dsub+0x678>
 8002cbe:	e631      	b.n	8002924 <__aeabi_dsub+0x2dc>
 8002cc0:	464a      	mov	r2, r9
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <__aeabi_dsub+0x6d8>)
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	4691      	mov	r9, r2
 8002cca:	4698      	mov	r8, r3
 8002ccc:	e62a      	b.n	8002924 <__aeabi_dsub+0x2dc>
 8002cce:	0016      	movs	r6, r2
 8002cd0:	4664      	mov	r4, ip
 8002cd2:	3e20      	subs	r6, #32
 8002cd4:	40f4      	lsrs	r4, r6
 8002cd6:	46a0      	mov	r8, r4
 8002cd8:	2a20      	cmp	r2, #32
 8002cda:	d005      	beq.n	8002ce8 <__aeabi_dsub+0x6a0>
 8002cdc:	2640      	movs	r6, #64	; 0x40
 8002cde:	4664      	mov	r4, ip
 8002ce0:	1ab2      	subs	r2, r6, r2
 8002ce2:	4094      	lsls	r4, r2
 8002ce4:	4323      	orrs	r3, r4
 8002ce6:	469a      	mov	sl, r3
 8002ce8:	4654      	mov	r4, sl
 8002cea:	1e63      	subs	r3, r4, #1
 8002cec:	419c      	sbcs	r4, r3
 8002cee:	4643      	mov	r3, r8
 8002cf0:	431c      	orrs	r4, r3
 8002cf2:	e5db      	b.n	80028ac <__aeabi_dsub+0x264>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	2400      	movs	r4, #0
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e548      	b.n	800278e <__aeabi_dsub+0x146>
 8002cfc:	19dc      	adds	r4, r3, r7
 8002cfe:	42bc      	cmp	r4, r7
 8002d00:	41bf      	sbcs	r7, r7
 8002d02:	4461      	add	r1, ip
 8002d04:	4689      	mov	r9, r1
 8002d06:	427f      	negs	r7, r7
 8002d08:	44b9      	add	r9, r7
 8002d0a:	e738      	b.n	8002b7e <__aeabi_dsub+0x536>
 8002d0c:	464b      	mov	r3, r9
 8002d0e:	4323      	orrs	r3, r4
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x6cc>
 8002d12:	e69f      	b.n	8002a54 <__aeabi_dsub+0x40c>
 8002d14:	e606      	b.n	8002924 <__aeabi_dsub+0x2dc>
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	000007fe 	.word	0x000007fe
 8002d1c:	000007ff 	.word	0x000007ff
 8002d20:	ff7fffff 	.word	0xff7fffff
 8002d24:	08ff      	lsrs	r7, r7, #3
 8002d26:	074b      	lsls	r3, r1, #29
 8002d28:	433b      	orrs	r3, r7
 8002d2a:	08cc      	lsrs	r4, r1, #3
 8002d2c:	e616      	b.n	800295c <__aeabi_dsub+0x314>
 8002d2e:	4662      	mov	r2, ip
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	0752      	lsls	r2, r2, #29
 8002d34:	4313      	orrs	r3, r2
 8002d36:	4662      	mov	r2, ip
 8002d38:	08d4      	lsrs	r4, r2, #3
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	0312      	lsls	r2, r2, #12
 8002d3e:	4214      	tst	r4, r2
 8002d40:	d007      	beq.n	8002d52 <__aeabi_dsub+0x70a>
 8002d42:	08c8      	lsrs	r0, r1, #3
 8002d44:	4210      	tst	r0, r2
 8002d46:	d104      	bne.n	8002d52 <__aeabi_dsub+0x70a>
 8002d48:	465d      	mov	r5, fp
 8002d4a:	0004      	movs	r4, r0
 8002d4c:	08fb      	lsrs	r3, r7, #3
 8002d4e:	0749      	lsls	r1, r1, #29
 8002d50:	430b      	orrs	r3, r1
 8002d52:	0f5a      	lsrs	r2, r3, #29
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	0752      	lsls	r2, r2, #29
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	e5fe      	b.n	800295c <__aeabi_dsub+0x314>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	4a01      	ldr	r2, [pc, #4]	; (8002d68 <__aeabi_dsub+0x720>)
 8002d62:	001c      	movs	r4, r3
 8002d64:	e513      	b.n	800278e <__aeabi_dsub+0x146>
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	000007ff 	.word	0x000007ff

08002d6c <__aeabi_dcmpun>:
 8002d6c:	b570      	push	{r4, r5, r6, lr}
 8002d6e:	0005      	movs	r5, r0
 8002d70:	480c      	ldr	r0, [pc, #48]	; (8002da4 <__aeabi_dcmpun+0x38>)
 8002d72:	031c      	lsls	r4, r3, #12
 8002d74:	0016      	movs	r6, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	030a      	lsls	r2, r1, #12
 8002d7a:	0049      	lsls	r1, r1, #1
 8002d7c:	0b12      	lsrs	r2, r2, #12
 8002d7e:	0d49      	lsrs	r1, r1, #21
 8002d80:	0b24      	lsrs	r4, r4, #12
 8002d82:	0d5b      	lsrs	r3, r3, #21
 8002d84:	4281      	cmp	r1, r0
 8002d86:	d008      	beq.n	8002d9a <__aeabi_dcmpun+0x2e>
 8002d88:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <__aeabi_dcmpun+0x38>)
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d103      	bne.n	8002d98 <__aeabi_dcmpun+0x2c>
 8002d90:	0020      	movs	r0, r4
 8002d92:	4330      	orrs	r0, r6
 8002d94:	1e43      	subs	r3, r0, #1
 8002d96:	4198      	sbcs	r0, r3
 8002d98:	bd70      	pop	{r4, r5, r6, pc}
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	432a      	orrs	r2, r5
 8002d9e:	d1fb      	bne.n	8002d98 <__aeabi_dcmpun+0x2c>
 8002da0:	e7f2      	b.n	8002d88 <__aeabi_dcmpun+0x1c>
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	000007ff 	.word	0x000007ff

08002da8 <__aeabi_d2iz>:
 8002da8:	000a      	movs	r2, r1
 8002daa:	b530      	push	{r4, r5, lr}
 8002dac:	4c13      	ldr	r4, [pc, #76]	; (8002dfc <__aeabi_d2iz+0x54>)
 8002dae:	0053      	lsls	r3, r2, #1
 8002db0:	0309      	lsls	r1, r1, #12
 8002db2:	0005      	movs	r5, r0
 8002db4:	0b09      	lsrs	r1, r1, #12
 8002db6:	2000      	movs	r0, #0
 8002db8:	0d5b      	lsrs	r3, r3, #21
 8002dba:	0fd2      	lsrs	r2, r2, #31
 8002dbc:	42a3      	cmp	r3, r4
 8002dbe:	dd04      	ble.n	8002dca <__aeabi_d2iz+0x22>
 8002dc0:	480f      	ldr	r0, [pc, #60]	; (8002e00 <__aeabi_d2iz+0x58>)
 8002dc2:	4283      	cmp	r3, r0
 8002dc4:	dd02      	ble.n	8002dcc <__aeabi_d2iz+0x24>
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <__aeabi_d2iz+0x5c>)
 8002dc8:	18d0      	adds	r0, r2, r3
 8002dca:	bd30      	pop	{r4, r5, pc}
 8002dcc:	2080      	movs	r0, #128	; 0x80
 8002dce:	0340      	lsls	r0, r0, #13
 8002dd0:	4301      	orrs	r1, r0
 8002dd2:	480d      	ldr	r0, [pc, #52]	; (8002e08 <__aeabi_d2iz+0x60>)
 8002dd4:	1ac0      	subs	r0, r0, r3
 8002dd6:	281f      	cmp	r0, #31
 8002dd8:	dd08      	ble.n	8002dec <__aeabi_d2iz+0x44>
 8002dda:	480c      	ldr	r0, [pc, #48]	; (8002e0c <__aeabi_d2iz+0x64>)
 8002ddc:	1ac3      	subs	r3, r0, r3
 8002dde:	40d9      	lsrs	r1, r3
 8002de0:	000b      	movs	r3, r1
 8002de2:	4258      	negs	r0, r3
 8002de4:	2a00      	cmp	r2, #0
 8002de6:	d1f0      	bne.n	8002dca <__aeabi_d2iz+0x22>
 8002de8:	0018      	movs	r0, r3
 8002dea:	e7ee      	b.n	8002dca <__aeabi_d2iz+0x22>
 8002dec:	4c08      	ldr	r4, [pc, #32]	; (8002e10 <__aeabi_d2iz+0x68>)
 8002dee:	40c5      	lsrs	r5, r0
 8002df0:	46a4      	mov	ip, r4
 8002df2:	4463      	add	r3, ip
 8002df4:	4099      	lsls	r1, r3
 8002df6:	000b      	movs	r3, r1
 8002df8:	432b      	orrs	r3, r5
 8002dfa:	e7f2      	b.n	8002de2 <__aeabi_d2iz+0x3a>
 8002dfc:	000003fe 	.word	0x000003fe
 8002e00:	0000041d 	.word	0x0000041d
 8002e04:	7fffffff 	.word	0x7fffffff
 8002e08:	00000433 	.word	0x00000433
 8002e0c:	00000413 	.word	0x00000413
 8002e10:	fffffbed 	.word	0xfffffbed

08002e14 <__aeabi_i2d>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	2800      	cmp	r0, #0
 8002e18:	d016      	beq.n	8002e48 <__aeabi_i2d+0x34>
 8002e1a:	17c3      	asrs	r3, r0, #31
 8002e1c:	18c5      	adds	r5, r0, r3
 8002e1e:	405d      	eors	r5, r3
 8002e20:	0fc4      	lsrs	r4, r0, #31
 8002e22:	0028      	movs	r0, r5
 8002e24:	f000 f91c 	bl	8003060 <__clzsi2>
 8002e28:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <__aeabi_i2d+0x5c>)
 8002e2a:	1a12      	subs	r2, r2, r0
 8002e2c:	280a      	cmp	r0, #10
 8002e2e:	dc16      	bgt.n	8002e5e <__aeabi_i2d+0x4a>
 8002e30:	0003      	movs	r3, r0
 8002e32:	002e      	movs	r6, r5
 8002e34:	3315      	adds	r3, #21
 8002e36:	409e      	lsls	r6, r3
 8002e38:	230b      	movs	r3, #11
 8002e3a:	1a18      	subs	r0, r3, r0
 8002e3c:	40c5      	lsrs	r5, r0
 8002e3e:	0552      	lsls	r2, r2, #21
 8002e40:	032d      	lsls	r5, r5, #12
 8002e42:	0b2d      	lsrs	r5, r5, #12
 8002e44:	0d53      	lsrs	r3, r2, #21
 8002e46:	e003      	b.n	8002e50 <__aeabi_i2d+0x3c>
 8002e48:	2400      	movs	r4, #0
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	2600      	movs	r6, #0
 8002e50:	051b      	lsls	r3, r3, #20
 8002e52:	432b      	orrs	r3, r5
 8002e54:	07e4      	lsls	r4, r4, #31
 8002e56:	4323      	orrs	r3, r4
 8002e58:	0030      	movs	r0, r6
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
 8002e5e:	380b      	subs	r0, #11
 8002e60:	4085      	lsls	r5, r0
 8002e62:	0552      	lsls	r2, r2, #21
 8002e64:	032d      	lsls	r5, r5, #12
 8002e66:	2600      	movs	r6, #0
 8002e68:	0b2d      	lsrs	r5, r5, #12
 8002e6a:	0d53      	lsrs	r3, r2, #21
 8002e6c:	e7f0      	b.n	8002e50 <__aeabi_i2d+0x3c>
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	0000041e 	.word	0x0000041e

08002e74 <__aeabi_ui2d>:
 8002e74:	b510      	push	{r4, lr}
 8002e76:	1e04      	subs	r4, r0, #0
 8002e78:	d010      	beq.n	8002e9c <__aeabi_ui2d+0x28>
 8002e7a:	f000 f8f1 	bl	8003060 <__clzsi2>
 8002e7e:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <__aeabi_ui2d+0x48>)
 8002e80:	1a1b      	subs	r3, r3, r0
 8002e82:	280a      	cmp	r0, #10
 8002e84:	dc11      	bgt.n	8002eaa <__aeabi_ui2d+0x36>
 8002e86:	220b      	movs	r2, #11
 8002e88:	0021      	movs	r1, r4
 8002e8a:	1a12      	subs	r2, r2, r0
 8002e8c:	40d1      	lsrs	r1, r2
 8002e8e:	3015      	adds	r0, #21
 8002e90:	030a      	lsls	r2, r1, #12
 8002e92:	055b      	lsls	r3, r3, #21
 8002e94:	4084      	lsls	r4, r0
 8002e96:	0b12      	lsrs	r2, r2, #12
 8002e98:	0d5b      	lsrs	r3, r3, #21
 8002e9a:	e001      	b.n	8002ea0 <__aeabi_ui2d+0x2c>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	051b      	lsls	r3, r3, #20
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	0020      	movs	r0, r4
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	bd10      	pop	{r4, pc}
 8002eaa:	0022      	movs	r2, r4
 8002eac:	380b      	subs	r0, #11
 8002eae:	4082      	lsls	r2, r0
 8002eb0:	055b      	lsls	r3, r3, #21
 8002eb2:	0312      	lsls	r2, r2, #12
 8002eb4:	2400      	movs	r4, #0
 8002eb6:	0b12      	lsrs	r2, r2, #12
 8002eb8:	0d5b      	lsrs	r3, r3, #21
 8002eba:	e7f1      	b.n	8002ea0 <__aeabi_ui2d+0x2c>
 8002ebc:	0000041e 	.word	0x0000041e

08002ec0 <__aeabi_f2d>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	0043      	lsls	r3, r0, #1
 8002ec4:	0246      	lsls	r6, r0, #9
 8002ec6:	0fc4      	lsrs	r4, r0, #31
 8002ec8:	20fe      	movs	r0, #254	; 0xfe
 8002eca:	0e1b      	lsrs	r3, r3, #24
 8002ecc:	1c59      	adds	r1, r3, #1
 8002ece:	0a75      	lsrs	r5, r6, #9
 8002ed0:	4208      	tst	r0, r1
 8002ed2:	d00c      	beq.n	8002eee <__aeabi_f2d+0x2e>
 8002ed4:	22e0      	movs	r2, #224	; 0xe0
 8002ed6:	0092      	lsls	r2, r2, #2
 8002ed8:	4694      	mov	ip, r2
 8002eda:	076d      	lsls	r5, r5, #29
 8002edc:	0b36      	lsrs	r6, r6, #12
 8002ede:	4463      	add	r3, ip
 8002ee0:	051b      	lsls	r3, r3, #20
 8002ee2:	4333      	orrs	r3, r6
 8002ee4:	07e4      	lsls	r4, r4, #31
 8002ee6:	4323      	orrs	r3, r4
 8002ee8:	0028      	movs	r0, r5
 8002eea:	0019      	movs	r1, r3
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d114      	bne.n	8002f1c <__aeabi_f2d+0x5c>
 8002ef2:	2d00      	cmp	r5, #0
 8002ef4:	d01b      	beq.n	8002f2e <__aeabi_f2d+0x6e>
 8002ef6:	0028      	movs	r0, r5
 8002ef8:	f000 f8b2 	bl	8003060 <__clzsi2>
 8002efc:	280a      	cmp	r0, #10
 8002efe:	dc1c      	bgt.n	8002f3a <__aeabi_f2d+0x7a>
 8002f00:	230b      	movs	r3, #11
 8002f02:	002e      	movs	r6, r5
 8002f04:	1a1b      	subs	r3, r3, r0
 8002f06:	40de      	lsrs	r6, r3
 8002f08:	0003      	movs	r3, r0
 8002f0a:	3315      	adds	r3, #21
 8002f0c:	409d      	lsls	r5, r3
 8002f0e:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <__aeabi_f2d+0x88>)
 8002f10:	0336      	lsls	r6, r6, #12
 8002f12:	1a12      	subs	r2, r2, r0
 8002f14:	0552      	lsls	r2, r2, #21
 8002f16:	0b36      	lsrs	r6, r6, #12
 8002f18:	0d53      	lsrs	r3, r2, #21
 8002f1a:	e7e1      	b.n	8002ee0 <__aeabi_f2d+0x20>
 8002f1c:	2d00      	cmp	r5, #0
 8002f1e:	d009      	beq.n	8002f34 <__aeabi_f2d+0x74>
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	0b36      	lsrs	r6, r6, #12
 8002f24:	0312      	lsls	r2, r2, #12
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <__aeabi_f2d+0x8c>)
 8002f28:	076d      	lsls	r5, r5, #29
 8002f2a:	4316      	orrs	r6, r2
 8002f2c:	e7d8      	b.n	8002ee0 <__aeabi_f2d+0x20>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2600      	movs	r6, #0
 8002f32:	e7d5      	b.n	8002ee0 <__aeabi_f2d+0x20>
 8002f34:	2600      	movs	r6, #0
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <__aeabi_f2d+0x8c>)
 8002f38:	e7d2      	b.n	8002ee0 <__aeabi_f2d+0x20>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	3b0b      	subs	r3, #11
 8002f3e:	409d      	lsls	r5, r3
 8002f40:	002e      	movs	r6, r5
 8002f42:	2500      	movs	r5, #0
 8002f44:	e7e3      	b.n	8002f0e <__aeabi_f2d+0x4e>
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	00000389 	.word	0x00000389
 8002f4c:	000007ff 	.word	0x000007ff

08002f50 <__aeabi_d2f>:
 8002f50:	0002      	movs	r2, r0
 8002f52:	004b      	lsls	r3, r1, #1
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	0d5b      	lsrs	r3, r3, #21
 8002f58:	030c      	lsls	r4, r1, #12
 8002f5a:	4e3d      	ldr	r6, [pc, #244]	; (8003050 <__aeabi_d2f+0x100>)
 8002f5c:	0a64      	lsrs	r4, r4, #9
 8002f5e:	0f40      	lsrs	r0, r0, #29
 8002f60:	1c5f      	adds	r7, r3, #1
 8002f62:	0fc9      	lsrs	r1, r1, #31
 8002f64:	4304      	orrs	r4, r0
 8002f66:	00d5      	lsls	r5, r2, #3
 8002f68:	4237      	tst	r7, r6
 8002f6a:	d00a      	beq.n	8002f82 <__aeabi_d2f+0x32>
 8002f6c:	4839      	ldr	r0, [pc, #228]	; (8003054 <__aeabi_d2f+0x104>)
 8002f6e:	181e      	adds	r6, r3, r0
 8002f70:	2efe      	cmp	r6, #254	; 0xfe
 8002f72:	dd16      	ble.n	8002fa2 <__aeabi_d2f+0x52>
 8002f74:	20ff      	movs	r0, #255	; 0xff
 8002f76:	2400      	movs	r4, #0
 8002f78:	05c0      	lsls	r0, r0, #23
 8002f7a:	4320      	orrs	r0, r4
 8002f7c:	07c9      	lsls	r1, r1, #31
 8002f7e:	4308      	orrs	r0, r1
 8002f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <__aeabi_d2f+0x44>
 8002f86:	432c      	orrs	r4, r5
 8002f88:	d026      	beq.n	8002fd8 <__aeabi_d2f+0x88>
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	0192      	lsls	r2, r2, #6
 8002f8e:	0a54      	lsrs	r4, r2, #9
 8002f90:	b2d8      	uxtb	r0, r3
 8002f92:	e7f1      	b.n	8002f78 <__aeabi_d2f+0x28>
 8002f94:	4325      	orrs	r5, r4
 8002f96:	d0ed      	beq.n	8002f74 <__aeabi_d2f+0x24>
 8002f98:	2080      	movs	r0, #128	; 0x80
 8002f9a:	03c0      	lsls	r0, r0, #15
 8002f9c:	4304      	orrs	r4, r0
 8002f9e:	20ff      	movs	r0, #255	; 0xff
 8002fa0:	e7ea      	b.n	8002f78 <__aeabi_d2f+0x28>
 8002fa2:	2e00      	cmp	r6, #0
 8002fa4:	dd1b      	ble.n	8002fde <__aeabi_d2f+0x8e>
 8002fa6:	0192      	lsls	r2, r2, #6
 8002fa8:	1e53      	subs	r3, r2, #1
 8002faa:	419a      	sbcs	r2, r3
 8002fac:	00e4      	lsls	r4, r4, #3
 8002fae:	0f6d      	lsrs	r5, r5, #29
 8002fb0:	4322      	orrs	r2, r4
 8002fb2:	432a      	orrs	r2, r5
 8002fb4:	0753      	lsls	r3, r2, #29
 8002fb6:	d048      	beq.n	800304a <__aeabi_d2f+0xfa>
 8002fb8:	230f      	movs	r3, #15
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_d2f+0x72>
 8002fc0:	3204      	adds	r2, #4
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	04db      	lsls	r3, r3, #19
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d03f      	beq.n	800304a <__aeabi_d2f+0xfa>
 8002fca:	1c70      	adds	r0, r6, #1
 8002fcc:	2efe      	cmp	r6, #254	; 0xfe
 8002fce:	d0d1      	beq.n	8002f74 <__aeabi_d2f+0x24>
 8002fd0:	0192      	lsls	r2, r2, #6
 8002fd2:	0a54      	lsrs	r4, r2, #9
 8002fd4:	b2c0      	uxtb	r0, r0
 8002fd6:	e7cf      	b.n	8002f78 <__aeabi_d2f+0x28>
 8002fd8:	2000      	movs	r0, #0
 8002fda:	2400      	movs	r4, #0
 8002fdc:	e7cc      	b.n	8002f78 <__aeabi_d2f+0x28>
 8002fde:	0032      	movs	r2, r6
 8002fe0:	3217      	adds	r2, #23
 8002fe2:	db22      	blt.n	800302a <__aeabi_d2f+0xda>
 8002fe4:	2080      	movs	r0, #128	; 0x80
 8002fe6:	0400      	lsls	r0, r0, #16
 8002fe8:	4320      	orrs	r0, r4
 8002fea:	241e      	movs	r4, #30
 8002fec:	1ba4      	subs	r4, r4, r6
 8002fee:	2c1f      	cmp	r4, #31
 8002ff0:	dd1d      	ble.n	800302e <__aeabi_d2f+0xde>
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	4252      	negs	r2, r2
 8002ff6:	1b96      	subs	r6, r2, r6
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	40f2      	lsrs	r2, r6
 8002ffc:	0016      	movs	r6, r2
 8002ffe:	2c20      	cmp	r4, #32
 8003000:	d004      	beq.n	800300c <__aeabi_d2f+0xbc>
 8003002:	4a15      	ldr	r2, [pc, #84]	; (8003058 <__aeabi_d2f+0x108>)
 8003004:	4694      	mov	ip, r2
 8003006:	4463      	add	r3, ip
 8003008:	4098      	lsls	r0, r3
 800300a:	4305      	orrs	r5, r0
 800300c:	002a      	movs	r2, r5
 800300e:	1e53      	subs	r3, r2, #1
 8003010:	419a      	sbcs	r2, r3
 8003012:	4332      	orrs	r2, r6
 8003014:	2600      	movs	r6, #0
 8003016:	0753      	lsls	r3, r2, #29
 8003018:	d1ce      	bne.n	8002fb8 <__aeabi_d2f+0x68>
 800301a:	2480      	movs	r4, #128	; 0x80
 800301c:	0013      	movs	r3, r2
 800301e:	04e4      	lsls	r4, r4, #19
 8003020:	2001      	movs	r0, #1
 8003022:	4023      	ands	r3, r4
 8003024:	4222      	tst	r2, r4
 8003026:	d1d3      	bne.n	8002fd0 <__aeabi_d2f+0x80>
 8003028:	e7b0      	b.n	8002f8c <__aeabi_d2f+0x3c>
 800302a:	2300      	movs	r3, #0
 800302c:	e7ad      	b.n	8002f8a <__aeabi_d2f+0x3a>
 800302e:	4a0b      	ldr	r2, [pc, #44]	; (800305c <__aeabi_d2f+0x10c>)
 8003030:	4694      	mov	ip, r2
 8003032:	002a      	movs	r2, r5
 8003034:	40e2      	lsrs	r2, r4
 8003036:	0014      	movs	r4, r2
 8003038:	002a      	movs	r2, r5
 800303a:	4463      	add	r3, ip
 800303c:	409a      	lsls	r2, r3
 800303e:	4098      	lsls	r0, r3
 8003040:	1e55      	subs	r5, r2, #1
 8003042:	41aa      	sbcs	r2, r5
 8003044:	4302      	orrs	r2, r0
 8003046:	4322      	orrs	r2, r4
 8003048:	e7e4      	b.n	8003014 <__aeabi_d2f+0xc4>
 800304a:	0033      	movs	r3, r6
 800304c:	e79e      	b.n	8002f8c <__aeabi_d2f+0x3c>
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	000007fe 	.word	0x000007fe
 8003054:	fffffc80 	.word	0xfffffc80
 8003058:	fffffca2 	.word	0xfffffca2
 800305c:	fffffc82 	.word	0xfffffc82

08003060 <__clzsi2>:
 8003060:	211c      	movs	r1, #28
 8003062:	2301      	movs	r3, #1
 8003064:	041b      	lsls	r3, r3, #16
 8003066:	4298      	cmp	r0, r3
 8003068:	d301      	bcc.n	800306e <__clzsi2+0xe>
 800306a:	0c00      	lsrs	r0, r0, #16
 800306c:	3910      	subs	r1, #16
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	4298      	cmp	r0, r3
 8003072:	d301      	bcc.n	8003078 <__clzsi2+0x18>
 8003074:	0a00      	lsrs	r0, r0, #8
 8003076:	3908      	subs	r1, #8
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	4298      	cmp	r0, r3
 800307c:	d301      	bcc.n	8003082 <__clzsi2+0x22>
 800307e:	0900      	lsrs	r0, r0, #4
 8003080:	3904      	subs	r1, #4
 8003082:	a202      	add	r2, pc, #8	; (adr r2, 800308c <__clzsi2+0x2c>)
 8003084:	5c10      	ldrb	r0, [r2, r0]
 8003086:	1840      	adds	r0, r0, r1
 8003088:	4770      	bx	lr
 800308a:	46c0      	nop			; (mov r8, r8)
 800308c:	02020304 	.word	0x02020304
 8003090:	01010101 	.word	0x01010101
	...

0800309c <new_motor>:

Motor *hbridge_motor;
int openloop_enabled = 0;

Motor *new_motor(GPIO_TypeDef *fwd_port, uint16_t fwd_pin, GPIO_TypeDef *bwd_port,
												uint16_t bwd_pin, TIM_HandleTypeDef *timer) {
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	0007      	movs	r7, r0
	Motor *motor = malloc(sizeof(Motor));
 80030a0:	2010      	movs	r0, #16
												uint16_t bwd_pin, TIM_HandleTypeDef *timer) {
 80030a2:	000d      	movs	r5, r1
 80030a4:	0016      	movs	r6, r2
 80030a6:	001c      	movs	r4, r3
	Motor *motor = malloc(sizeof(Motor));
 80030a8:	f006 fad8 	bl	800965c <malloc>
	motor->fwd_port = fwd_port;
	motor->bwd_port = bwd_port;
	motor->fwd_pin = fwd_pin;
	motor->bwd_pin = bwd_pin;
	motor->timer = timer;
 80030ac:	9b06      	ldr	r3, [sp, #24]
	motor->fwd_port = fwd_port;
 80030ae:	6007      	str	r7, [r0, #0]
	motor->bwd_port = bwd_port;
 80030b0:	6046      	str	r6, [r0, #4]
	motor->fwd_pin = fwd_pin;
 80030b2:	8185      	strh	r5, [r0, #12]
	motor->bwd_pin = bwd_pin;
 80030b4:	81c4      	strh	r4, [r0, #14]
	motor->timer = timer;
 80030b6:	6083      	str	r3, [r0, #8]
	return motor;
}
 80030b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)

080030bc <start>:


void start(Motor *motor, int channel) {
 80030bc:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(motor->timer, channel);
 80030be:	6880      	ldr	r0, [r0, #8]
 80030c0:	f004 fecc 	bl	8007e5c <HAL_TIM_PWM_Start>
}
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)

080030c8 <set_speed>:
// pwm clk freq = 8/(799 + 1) = 10 KHz
// ARR =  200 for a 20 ms period = 20 KHz
// for LA max duty cycle is 20%
// CRR = 20 us max
// speed ranges from -1 to 1
void set_speed(Motor *motor, double speed) {
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	0016      	movs	r6, r2
 80030cc:	001d      	movs	r5, r3
 80030ce:	0004      	movs	r4, r0
	// handles speed being > 1
//	if (fabs(speed) > 1) {
//		speed = fabs(speed) / speed;
//	}

	HAL_GPIO_WritePin(motor->fwd_port, motor->fwd_pin, (speed > 0));
 80030d0:	2300      	movs	r3, #0
 80030d2:	2200      	movs	r2, #0
 80030d4:	0029      	movs	r1, r5
 80030d6:	0030      	movs	r0, r6
 80030d8:	f7fd f9d6 	bl	8000488 <__aeabi_dcmpgt>
 80030dc:	0002      	movs	r2, r0
 80030de:	89a1      	ldrh	r1, [r4, #12]
 80030e0:	1e53      	subs	r3, r2, #1
 80030e2:	419a      	sbcs	r2, r3
 80030e4:	6820      	ldr	r0, [r4, #0]
 80030e6:	f002 fcc9 	bl	8005a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->bwd_port, motor->bwd_pin, (speed < 0));
 80030ea:	2300      	movs	r3, #0
 80030ec:	2200      	movs	r2, #0
 80030ee:	0029      	movs	r1, r5
 80030f0:	0030      	movs	r0, r6
 80030f2:	f7fd f9b5 	bl	8000460 <__aeabi_dcmplt>
 80030f6:	0002      	movs	r2, r0
 80030f8:	89e1      	ldrh	r1, [r4, #14]
 80030fa:	1e53      	subs	r3, r2, #1
 80030fc:	419a      	sbcs	r2, r3
 80030fe:	6860      	ldr	r0, [r4, #4]
 8003100:	f002 fcbc 	bl	8005a7c <HAL_GPIO_WritePin>
	if (speed == 0){
 8003104:	2200      	movs	r2, #0
 8003106:	2300      	movs	r3, #0
 8003108:	0030      	movs	r0, r6
 800310a:	0029      	movs	r1, r5
 800310c:	f7fd f9a2 	bl	8000454 <__aeabi_dcmpeq>
 8003110:	2800      	cmp	r0, #0
 8003112:	d10c      	bne.n	800312e <set_speed+0x66>
		// If speed = 0 then set both equal to each other for stop
		HAL_GPIO_WritePin(motor->fwd_port, motor->fwd_pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->bwd_port, motor->bwd_pin, GPIO_PIN_RESET);
	}
	motor->timer->Instance->CCR1 = fabs(speed) * max;
 8003114:	68a3      	ldr	r3, [r4, #8]
 8003116:	006d      	lsls	r5, r5, #1
 8003118:	2200      	movs	r2, #0
 800311a:	0030      	movs	r0, r6
 800311c:	681c      	ldr	r4, [r3, #0]
 800311e:	0869      	lsrs	r1, r5, #1
 8003120:	4b08      	ldr	r3, [pc, #32]	; (8003144 <set_speed+0x7c>)
 8003122:	f7ff f825 	bl	8002170 <__aeabi_dmul>
 8003126:	f7fd f9fd 	bl	8000524 <__aeabi_d2uiz>
 800312a:	6360      	str	r0, [r4, #52]	; 0x34
//	HAL_Delay(100);

}
 800312c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin(motor->fwd_port, motor->fwd_pin, GPIO_PIN_RESET);
 800312e:	89a1      	ldrh	r1, [r4, #12]
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	f002 fca2 	bl	8005a7c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->bwd_port, motor->bwd_pin, GPIO_PIN_RESET);
 8003138:	2200      	movs	r2, #0
 800313a:	89e1      	ldrh	r1, [r4, #14]
 800313c:	6860      	ldr	r0, [r4, #4]
 800313e:	f002 fc9d 	bl	8005a7c <HAL_GPIO_WritePin>
 8003142:	e7e7      	b.n	8003114 <set_speed+0x4c>
 8003144:	40640000 	.word	0x40640000

08003148 <receive_hbridge_cmd>:
int desPos;
int currPos;

void receive_hbridge_cmd(uint8_t *buffer) {
	// expects $CAROUSEL, <position>, <comma padding>
	char delim[] = ",";
 8003148:	232c      	movs	r3, #44	; 0x2c
void receive_hbridge_cmd(uint8_t *buffer) {
 800314a:	b570      	push	{r4, r5, r6, lr}
 800314c:	b082      	sub	sp, #8
	char delim[] = ",";
 800314e:	ae01      	add	r6, sp, #4
 8003150:	8033      	strh	r3, [r6, #0]
void receive_hbridge_cmd(uint8_t *buffer) {
 8003152:	0005      	movs	r5, r0
	//TODO verify how legal this is to do in C
	char *copy = (char *)malloc(strlen(buffer) + 1);
 8003154:	f7fc ffdc 	bl	8000110 <strlen>
 8003158:	3001      	adds	r0, #1
 800315a:	f006 fa7f 	bl	800965c <malloc>
 800315e:	1e04      	subs	r4, r0, #0
	if (copy == NULL) {
 8003160:	d00c      	beq.n	800317c <receive_hbridge_cmd+0x34>
	  return;
	}
	strncpy(copy, buffer,30);
 8003162:	221e      	movs	r2, #30
 8003164:	0029      	movs	r1, r5
 8003166:	f007 f817 	bl	800a198 <strncpy>
	const char *identifier =  strtok(copy, delim);
 800316a:	0031      	movs	r1, r6
 800316c:	0020      	movs	r0, r4
 800316e:	f007 f827 	bl	800a1c0 <strtok>
	if (!strcmp(identifier, "$CAROUSEL")) {
 8003172:	4907      	ldr	r1, [pc, #28]	; (8003190 <receive_hbridge_cmd+0x48>)
 8003174:	f7fc ffc2 	bl	80000fc <strcmp>
 8003178:	2800      	cmp	r0, #0
 800317a:	d001      	beq.n	8003180 <receive_hbridge_cmd+0x38>
		desPos = atoi(strtok(NULL, delim));
	}
}
 800317c:	b002      	add	sp, #8
 800317e:	bd70      	pop	{r4, r5, r6, pc}
		desPos = atoi(strtok(NULL, delim));
 8003180:	0031      	movs	r1, r6
 8003182:	f007 f81d 	bl	800a1c0 <strtok>
 8003186:	f006 fa39 	bl	80095fc <atoi>
 800318a:	4b02      	ldr	r3, [pc, #8]	; (8003194 <receive_hbridge_cmd+0x4c>)
 800318c:	6018      	str	r0, [r3, #0]
 800318e:	e7f5      	b.n	800317c <receive_hbridge_cmd+0x34>
 8003190:	0800cd44 	.word	0x0800cd44
 8003194:	20000290 	.word	0x20000290

08003198 <receive_carousel_openloop_cmd>:

void receive_carousel_openloop_cmd(uint8_t *buffer) {
	// expects $OPENCAROUSEL, <throttle>, <comma padding>
	char delim[] = ",";
 8003198:	232c      	movs	r3, #44	; 0x2c
void receive_carousel_openloop_cmd(uint8_t *buffer) {
 800319a:	b570      	push	{r4, r5, r6, lr}
 800319c:	b082      	sub	sp, #8
	char delim[] = ",";
 800319e:	ae01      	add	r6, sp, #4
 80031a0:	8033      	strh	r3, [r6, #0]
void receive_carousel_openloop_cmd(uint8_t *buffer) {
 80031a2:	0005      	movs	r5, r0
	char *copy = (char *)malloc(strlen(buffer) + 1);
 80031a4:	f7fc ffb4 	bl	8000110 <strlen>
 80031a8:	3001      	adds	r0, #1
 80031aa:	f006 fa57 	bl	800965c <malloc>
 80031ae:	1e04      	subs	r4, r0, #0
	if (copy == NULL) {
 80031b0:	d00c      	beq.n	80031cc <receive_carousel_openloop_cmd+0x34>
	  return;
	}
	strncpy(copy, buffer,30);
 80031b2:	221e      	movs	r2, #30
 80031b4:	0029      	movs	r1, r5
 80031b6:	f006 ffef 	bl	800a198 <strncpy>
	const char *identifier =  strtok(copy, delim);
 80031ba:	0031      	movs	r1, r6
 80031bc:	0020      	movs	r0, r4
 80031be:	f006 ffff 	bl	800a1c0 <strtok>
	if (!strcmp(identifier, "$OPENCAROUSEL")) {
 80031c2:	490c      	ldr	r1, [pc, #48]	; (80031f4 <receive_carousel_openloop_cmd+0x5c>)
 80031c4:	f7fc ff9a 	bl	80000fc <strcmp>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d001      	beq.n	80031d0 <receive_carousel_openloop_cmd+0x38>
		double throttle = (double)atoi(strtok(NULL, delim)) * 2.5;
		set_speed(hbridge_motor, throttle);

	}
}
 80031cc:	b002      	add	sp, #8
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
		double throttle = (double)atoi(strtok(NULL, delim)) * 2.5;
 80031d0:	0031      	movs	r1, r6
 80031d2:	f006 fff5 	bl	800a1c0 <strtok>
 80031d6:	f006 fa11 	bl	80095fc <atoi>
 80031da:	f7ff fe1b 	bl	8002e14 <__aeabi_i2d>
 80031de:	2200      	movs	r2, #0
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <receive_carousel_openloop_cmd+0x60>)
 80031e2:	f7fe ffc5 	bl	8002170 <__aeabi_dmul>
 80031e6:	000b      	movs	r3, r1
		set_speed(hbridge_motor, throttle);
 80031e8:	4904      	ldr	r1, [pc, #16]	; (80031fc <receive_carousel_openloop_cmd+0x64>)
		double throttle = (double)atoi(strtok(NULL, delim)) * 2.5;
 80031ea:	0002      	movs	r2, r0
		set_speed(hbridge_motor, throttle);
 80031ec:	6808      	ldr	r0, [r1, #0]
 80031ee:	f7ff ff6b 	bl	80030c8 <set_speed>
 80031f2:	e7eb      	b.n	80031cc <receive_carousel_openloop_cmd+0x34>
 80031f4:	0800cd50 	.word	0x0800cd50
 80031f8:	40040000 	.word	0x40040000
 80031fc:	20000294 	.word	0x20000294

08003200 <send_carousel_pos>:

void send_carousel_pos(UART_HandleTypeDef* huart){
 8003200:	b510      	push	{r4, lr}
	char string[20];
	sprintf((char *)string, "$CAROUSEL,%i,\n", currPos);
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <send_carousel_pos+0x30>)
void send_carousel_pos(UART_HandleTypeDef* huart){
 8003204:	b086      	sub	sp, #24
	sprintf((char *)string, "$CAROUSEL,%i,\n", currPos);
 8003206:	681a      	ldr	r2, [r3, #0]
void send_carousel_pos(UART_HandleTypeDef* huart){
 8003208:	0004      	movs	r4, r0
	sprintf((char *)string, "$CAROUSEL,%i,\n", currPos);
 800320a:	490a      	ldr	r1, [pc, #40]	; (8003234 <send_carousel_pos+0x34>)
 800320c:	a801      	add	r0, sp, #4
 800320e:	f006 ffa3 	bl	800a158 <siprintf>
	 HAL_Delay(300);
 8003212:	2096      	movs	r0, #150	; 0x96
 8003214:	0040      	lsls	r0, r0, #1
 8003216:	f001 fcab 	bl	8004b70 <HAL_Delay>
	HAL_UART_Transmit_IT(huart, (uint8_t *)string, sizeof(string));
 800321a:	2214      	movs	r2, #20
 800321c:	a901      	add	r1, sp, #4
 800321e:	0020      	movs	r0, r4
 8003220:	f005 fa04 	bl	800862c <HAL_UART_Transmit_IT>
	HAL_Delay(100);
 8003224:	2064      	movs	r0, #100	; 0x64
 8003226:	f001 fca3 	bl	8004b70 <HAL_Delay>
}
 800322a:	b006      	add	sp, #24
 800322c:	bd10      	pop	{r4, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	2000028c 	.word	0x2000028c
 8003234:	0800cd60 	.word	0x0800cd60

08003238 <handle_new_pos>:
void handle_new_pos(){
	if (currPos == 2){
 8003238:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <handle_new_pos+0x78>)
void handle_new_pos(){
 800323a:	b510      	push	{r4, lr}
	if (currPos == 2){
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d027      	beq.n	8003292 <handle_new_pos+0x5a>
		}
		else if (desPos == 2){
			set_speed(hbridge_motor, 0);
		}
	}
	else if (currPos == 1){
 8003242:	2b01      	cmp	r3, #1
 8003244:	d00f      	beq.n	8003266 <handle_new_pos+0x2e>
		}
		else{
			set_speed(hbridge_motor,0);
		}
	}
	else if (currPos == 0){
 8003246:	2b00      	cmp	r3, #0
 8003248:	d122      	bne.n	8003290 <handle_new_pos+0x58>
		if(desPos != 0){
 800324a:	4b1a      	ldr	r3, [pc, #104]	; (80032b4 <handle_new_pos+0x7c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d027      	beq.n	80032a2 <handle_new_pos+0x6a>
			set_speed(hbridge_motor, 2.5);
 8003252:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <handle_new_pos+0x80>)
	HAL_GPIO_WritePin(motor->fwd_port, motor->fwd_pin, (speed > 0));
 8003254:	2201      	movs	r2, #1
			set_speed(hbridge_motor, 2.5);
 8003256:	681c      	ldr	r4, [r3, #0]
	HAL_GPIO_WritePin(motor->fwd_port, motor->fwd_pin, (speed > 0));
 8003258:	89a1      	ldrh	r1, [r4, #12]
 800325a:	6820      	ldr	r0, [r4, #0]
 800325c:	f002 fc0e 	bl	8005a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->bwd_port, motor->bwd_pin, (speed < 0));
 8003260:	2200      	movs	r2, #0
 8003262:	89e1      	ldrh	r1, [r4, #14]
 8003264:	e00c      	b.n	8003280 <handle_new_pos+0x48>
		if(desPos != 1){
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <handle_new_pos+0x7c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d019      	beq.n	80032a2 <handle_new_pos+0x6a>
			set_speed(hbridge_motor, -2.5);
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <handle_new_pos+0x80>)
	HAL_GPIO_WritePin(motor->fwd_port, motor->fwd_pin, (speed > 0));
 8003270:	2200      	movs	r2, #0
			set_speed(hbridge_motor, -2.5);
 8003272:	681c      	ldr	r4, [r3, #0]
	HAL_GPIO_WritePin(motor->fwd_port, motor->fwd_pin, (speed > 0));
 8003274:	89a1      	ldrh	r1, [r4, #12]
 8003276:	6820      	ldr	r0, [r4, #0]
 8003278:	f002 fc00 	bl	8005a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->bwd_port, motor->bwd_pin, (speed < 0));
 800327c:	2201      	movs	r2, #1
 800327e:	89e1      	ldrh	r1, [r4, #14]
 8003280:	6860      	ldr	r0, [r4, #4]
 8003282:	f002 fbfb 	bl	8005a7c <HAL_GPIO_WritePin>
	motor->timer->Instance->CCR1 = fabs(speed) * max;
 8003286:	22c8      	movs	r2, #200	; 0xc8
 8003288:	68a3      	ldr	r3, [r4, #8]
 800328a:	0052      	lsls	r2, r2, #1
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	// TODO check if during travel you messed up and got unaligned
	// Alternatively, before travel go to 2, and on arrival go to one end and go to the desired position
	// *Assumes that you don't go past one of the end switches during travel
}
 8003290:	bd10      	pop	{r4, pc}
		if(desPos == 0){
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <handle_new_pos+0x7c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0e9      	beq.n	800326e <handle_new_pos+0x36>
		else if (desPos == 1){
 800329a:	2b01      	cmp	r3, #1
 800329c:	d0d9      	beq.n	8003252 <handle_new_pos+0x1a>
		else if (desPos == 2){
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d1f6      	bne.n	8003290 <handle_new_pos+0x58>
			set_speed(hbridge_motor, 0);
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <handle_new_pos+0x80>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	2300      	movs	r3, #0
 80032aa:	f7ff ff0d 	bl	80030c8 <set_speed>
 80032ae:	e7ef      	b.n	8003290 <handle_new_pos+0x58>
 80032b0:	2000028c 	.word	0x2000028c
 80032b4:	20000290 	.word	0x20000290
 80032b8:	20000294 	.word	0x20000294

080032bc <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback to be called after HAL_UART_RECEIVE_IT finishes getting data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80032bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032be:	46c6      	mov	lr, r8
 80032c0:	b500      	push	{lr}
	// Disable Interrupts
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80032c2:	201c      	movs	r0, #28
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80032c4:	b088      	sub	sp, #32
	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80032c6:	f002 f84b 	bl	8005360 <HAL_NVIC_DisableIRQ>

	// Copy the receive buffer into the command buffer.
	memcpy(message, Rx_data, sizeof(message));
 80032ca:	4d88      	ldr	r5, [pc, #544]	; (80034ec <HAL_UART_RxCpltCallback+0x230>)
 80032cc:	4c88      	ldr	r4, [pc, #544]	; (80034f0 <HAL_UART_RxCpltCallback+0x234>)
 80032ce:	002a      	movs	r2, r5
 80032d0:	0023      	movs	r3, r4
 80032d2:	ca43      	ldmia	r2!, {r0, r1, r6}
 80032d4:	c343      	stmia	r3!, {r0, r1, r6}
 80032d6:	ca43      	ldmia	r2!, {r0, r1, r6}
 80032d8:	c343      	stmia	r3!, {r0, r1, r6}
 80032da:	6811      	ldr	r1, [r2, #0]
	// Save the last command
	// Enable Interrupts
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032dc:	201c      	movs	r0, #28
	memcpy(message, Rx_data, sizeof(message));
 80032de:	6019      	str	r1, [r3, #0]
 80032e0:	8892      	ldrh	r2, [r2, #4]
 80032e2:	809a      	strh	r2, [r3, #4]
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032e4:	f002 f830 	bl	8005348 <HAL_NVIC_EnableIRQ>
	ret = HAL_UART_Receive_IT(JETSON_UART, Rx_data, 30);
 80032e8:	4e82      	ldr	r6, [pc, #520]	; (80034f4 <HAL_UART_RxCpltCallback+0x238>)
 80032ea:	221e      	movs	r2, #30
 80032ec:	0029      	movs	r1, r5
 80032ee:	0030      	movs	r0, r6
 80032f0:	f006 f94c 	bl	800958c <HAL_UART_Receive_IT>
}

// Clears the ORE and NE flags from the uart handler with delay
// TODO add better explanation why
void clear_flags(){
	__HAL_UART_CLEAR_OREFLAG(JETSON_UART);
 80032f4:	2208      	movs	r2, #8
	ret = HAL_UART_Receive_IT(JETSON_UART, Rx_data, 30);
 80032f6:	4b80      	ldr	r3, [pc, #512]	; (80034f8 <HAL_UART_RxCpltCallback+0x23c>)
 80032f8:	0005      	movs	r5, r0
 80032fa:	7018      	strb	r0, [r3, #0]
	__HAL_UART_CLEAR_OREFLAG(JETSON_UART);
 80032fc:	6833      	ldr	r3, [r6, #0]
 80032fe:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(JETSON_UART);
 8003300:	3a04      	subs	r2, #4
 8003302:	621a      	str	r2, [r3, #32]
	if (ret != HAL_OK) {
 8003304:	2800      	cmp	r0, #0
 8003306:	d001      	beq.n	800330c <HAL_UART_RxCpltCallback+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003308:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800330a:	e7fe      	b.n	800330a <HAL_UART_RxCpltCallback+0x4e>
	HAL_NVIC_ClearPendingIRQ(USART2_IRQn);
 800330c:	201c      	movs	r0, #28
 800330e:	f002 f851 	bl	80053b4 <HAL_NVIC_ClearPendingIRQ>
	int device = -1;
 8003312:	2301      	movs	r3, #1
 8003314:	425b      	negs	r3, r3
 8003316:	9303      	str	r3, [sp, #12]
	int enable = -1;
 8003318:	9304      	str	r3, [sp, #16]
	if(message[1] == 'M')
 800331a:	7863      	ldrb	r3, [r4, #1]
 800331c:	2b4d      	cmp	r3, #77	; 0x4d
 800331e:	d017      	beq.n	8003350 <HAL_UART_RxCpltCallback+0x94>
	else if(message[1] == 'A')
 8003320:	7863      	ldrb	r3, [r4, #1]
 8003322:	2b41      	cmp	r3, #65	; 0x41
 8003324:	d04f      	beq.n	80033c6 <HAL_UART_RxCpltCallback+0x10a>
	else if(message[1] == 'L')
 8003326:	7863      	ldrb	r3, [r4, #1]
 8003328:	2b4c      	cmp	r3, #76	; 0x4c
 800332a:	d05d      	beq.n	80033e8 <HAL_UART_RxCpltCallback+0x12c>
	int angles[3] = { -1, -1, -1 };
 800332c:	ad05      	add	r5, sp, #20
 800332e:	002a      	movs	r2, r5
 8003330:	4b72      	ldr	r3, [pc, #456]	; (80034fc <HAL_UART_RxCpltCallback+0x240>)
 8003332:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003334:	c243      	stmia	r2!, {r0, r1, r6}
	if(message[1] == 'S')
 8003336:	7863      	ldrb	r3, [r4, #1]
 8003338:	2b53      	cmp	r3, #83	; 0x53
 800333a:	d02e      	beq.n	800339a <HAL_UART_RxCpltCallback+0xde>
	if(message[1] == 'C'){
 800333c:	7863      	ldrb	r3, [r4, #1]
 800333e:	2b43      	cmp	r3, #67	; 0x43
 8003340:	d022      	beq.n	8003388 <HAL_UART_RxCpltCallback+0xcc>
	else if (message[1] == 'O') {
 8003342:	7863      	ldrb	r3, [r4, #1]
 8003344:	2b4f      	cmp	r3, #79	; 0x4f
 8003346:	d048      	beq.n	80033da <HAL_UART_RxCpltCallback+0x11e>
}
 8003348:	b008      	add	sp, #32
 800334a:	bc80      	pop	{r7}
 800334c:	46b8      	mov	r8, r7
 800334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		receive_mosfet_cmd(message,&device,&enable,mosfet_copy);
 8003350:	4b6b      	ldr	r3, [pc, #428]	; (8003500 <HAL_UART_RxCpltCallback+0x244>)
 8003352:	0020      	movs	r0, r4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	aa04      	add	r2, sp, #16
 8003358:	a903      	add	r1, sp, #12
 800335a:	f000 fcbd 	bl	8003cd8 <receive_mosfet_cmd>
		int d_m = device;
 800335e:	9b03      	ldr	r3, [sp, #12]
		if(d_m>=0 && d_m<=MOSFET_DEVICE_NUM)
 8003360:	2b0c      	cmp	r3, #12
 8003362:	d8e3      	bhi.n	800332c <HAL_UART_RxCpltCallback+0x70>
		  switch(d_m){
 8003364:	2b08      	cmp	r3, #8
 8003366:	d100      	bne.n	800336a <HAL_UART_RxCpltCallback+0xae>
 8003368:	e0a8      	b.n	80034bc <HAL_UART_RxCpltCallback+0x200>
 800336a:	2b09      	cmp	r3, #9
 800336c:	d100      	bne.n	8003370 <HAL_UART_RxCpltCallback+0xb4>
 800336e:	e08e      	b.n	800348e <HAL_UART_RxCpltCallback+0x1d2>
 8003370:	2b07      	cmp	r3, #7
 8003372:	d072      	beq.n	800345a <HAL_UART_RxCpltCallback+0x19e>
				  enable_pin(enable, port_array[d_m], pin_array[d_m]);
 8003374:	4a63      	ldr	r2, [pc, #396]	; (8003504 <HAL_UART_RxCpltCallback+0x248>)
 8003376:	0059      	lsls	r1, r3, #1
 8003378:	5a8a      	ldrh	r2, [r1, r2]
 800337a:	4963      	ldr	r1, [pc, #396]	; (8003508 <HAL_UART_RxCpltCallback+0x24c>)
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	5859      	ldr	r1, [r3, r1]
 8003380:	9804      	ldr	r0, [sp, #16]
 8003382:	f000 fc9b 	bl	8003cbc <enable_pin>
 8003386:	e7d1      	b.n	800332c <HAL_UART_RxCpltCallback+0x70>
		openloop_enabled = DISABLED;
 8003388:	2200      	movs	r2, #0
 800338a:	4b60      	ldr	r3, [pc, #384]	; (800350c <HAL_UART_RxCpltCallback+0x250>)
		receive_hbridge_cmd(message);
 800338c:	0020      	movs	r0, r4
		openloop_enabled = DISABLED;
 800338e:	601a      	str	r2, [r3, #0]
		receive_hbridge_cmd(message);
 8003390:	f7ff feda 	bl	8003148 <receive_hbridge_cmd>
		handle_new_pos();
 8003394:	f7ff ff50 	bl	8003238 <handle_new_pos>
 8003398:	e7d6      	b.n	8003348 <HAL_UART_RxCpltCallback+0x8c>
		receive_servo_cmd(message,&angles[0],&angles[1],&angles[2], servo_copy);
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <HAL_UART_RxCpltCallback+0x254>)
 800339c:	aa06      	add	r2, sp, #24
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0029      	movs	r1, r5
 80033a2:	0020      	movs	r0, r4
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	ab07      	add	r3, sp, #28
 80033a8:	f000 fdbe 	bl	8003f28 <receive_servo_cmd>
		write_angle(angles[DEVICE_OF_SERVO_0], 0);
 80033ac:	9807      	ldr	r0, [sp, #28]
 80033ae:	2100      	movs	r1, #0
 80033b0:	f000 fd9c 	bl	8003eec <write_angle>
		write_angle(angles[DEVICE_OF_SERVO_1], 1);
 80033b4:	9805      	ldr	r0, [sp, #20]
 80033b6:	2101      	movs	r1, #1
 80033b8:	f000 fd98 	bl	8003eec <write_angle>
		write_angle(angles[DEVICE_OF_SERVO_2], 2);
 80033bc:	2102      	movs	r1, #2
 80033be:	9806      	ldr	r0, [sp, #24]
 80033c0:	f000 fd94 	bl	8003eec <write_angle>
 80033c4:	e7ba      	b.n	800333c <HAL_UART_RxCpltCallback+0x80>
		receive_auto_shutoff_cmd(message,&auto_shutoff,auto_shut_copy);
 80033c6:	4b53      	ldr	r3, [pc, #332]	; (8003514 <HAL_UART_RxCpltCallback+0x258>)
 80033c8:	0020      	movs	r0, r4
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4952      	ldr	r1, [pc, #328]	; (8003518 <HAL_UART_RxCpltCallback+0x25c>)
 80033ce:	f000 fccb 	bl	8003d68 <receive_auto_shutoff_cmd>
		send_shutoff_info = 1;
 80033d2:	2201      	movs	r2, #1
 80033d4:	4b51      	ldr	r3, [pc, #324]	; (800351c <HAL_UART_RxCpltCallback+0x260>)
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	e7a8      	b.n	800332c <HAL_UART_RxCpltCallback+0x70>
		openloop_enabled = ENABLED;
 80033da:	2201      	movs	r2, #1
 80033dc:	4b4b      	ldr	r3, [pc, #300]	; (800350c <HAL_UART_RxCpltCallback+0x250>)
		receive_carousel_openloop_cmd(message);
 80033de:	0020      	movs	r0, r4
		openloop_enabled = ENABLED;
 80033e0:	601a      	str	r2, [r3, #0]
		receive_carousel_openloop_cmd(message);
 80033e2:	f7ff fed9 	bl	8003198 <receive_carousel_openloop_cmd>
}
 80033e6:	e7af      	b.n	8003348 <HAL_UART_RxCpltCallback+0x8c>
		enable_pin(DISABLED, port_array[RED_LED], pin_array[RED_LED]);
 80033e8:	4f46      	ldr	r7, [pc, #280]	; (8003504 <HAL_UART_RxCpltCallback+0x248>)
 80033ea:	4e47      	ldr	r6, [pc, #284]	; (8003508 <HAL_UART_RxCpltCallback+0x24c>)
 80033ec:	2000      	movs	r0, #0
 80033ee:	8aba      	ldrh	r2, [r7, #20]
 80033f0:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80033f2:	f000 fc63 	bl	8003cbc <enable_pin>
		enable_pin(DISABLED, port_array[GREEN_LED], pin_array[GREEN_LED]);
 80033f6:	2000      	movs	r0, #0
 80033f8:	893a      	ldrh	r2, [r7, #8]
 80033fa:	6931      	ldr	r1, [r6, #16]
 80033fc:	f000 fc5e 	bl	8003cbc <enable_pin>
		enable_pin(DISABLED, port_array[BLUE_LED], pin_array[BLUE_LED]);
 8003400:	2000      	movs	r0, #0
 8003402:	897a      	ldrh	r2, [r7, #10]
 8003404:	6971      	ldr	r1, [r6, #20]
 8003406:	f000 fc59 	bl	8003cbc <enable_pin>
		green_on = DISABLED;
 800340a:	4b45      	ldr	r3, [pc, #276]	; (8003520 <HAL_UART_RxCpltCallback+0x264>)
		receive_led_cmd(message,&led_state,auto_shut_copy);
 800340c:	0020      	movs	r0, r4
		green_on = DISABLED;
 800340e:	601d      	str	r5, [r3, #0]
 8003410:	4698      	mov	r8, r3
		ms_tick = 0;
 8003412:	4b44      	ldr	r3, [pc, #272]	; (8003524 <HAL_UART_RxCpltCallback+0x268>)
 8003414:	801d      	strh	r5, [r3, #0]
		receive_led_cmd(message,&led_state,auto_shut_copy);
 8003416:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <HAL_UART_RxCpltCallback+0x258>)
 8003418:	4d43      	ldr	r5, [pc, #268]	; (8003528 <HAL_UART_RxCpltCallback+0x26c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	0029      	movs	r1, r5
 800341e:	f000 fc83 	bl	8003d28 <receive_led_cmd>
		switch (led_state) {
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d010      	beq.n	800344a <HAL_UART_RxCpltCallback+0x18e>
 8003428:	2b02      	cmp	r3, #2
 800342a:	d008      	beq.n	800343e <HAL_UART_RxCpltCallback+0x182>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d000      	beq.n	8003432 <HAL_UART_RxCpltCallback+0x176>
 8003430:	e77c      	b.n	800332c <HAL_UART_RxCpltCallback+0x70>
			enable_pin(ENABLED, port_array[RED_LED], pin_array[RED_LED]);
 8003432:	2001      	movs	r0, #1
 8003434:	8aba      	ldrh	r2, [r7, #20]
 8003436:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003438:	f000 fc40 	bl	8003cbc <enable_pin>
			break;
 800343c:	e776      	b.n	800332c <HAL_UART_RxCpltCallback+0x70>
			enable_pin(ENABLED, port_array[BLUE_LED], pin_array[BLUE_LED]);
 800343e:	2001      	movs	r0, #1
 8003440:	897a      	ldrh	r2, [r7, #10]
 8003442:	6971      	ldr	r1, [r6, #20]
 8003444:	f000 fc3a 	bl	8003cbc <enable_pin>
			break;
 8003448:	e770      	b.n	800332c <HAL_UART_RxCpltCallback+0x70>
			green_on = ENABLED;
 800344a:	4642      	mov	r2, r8
 800344c:	6013      	str	r3, [r2, #0]
			enable_pin(ENABLED, port_array[GREEN_LED], pin_array[GREEN_LED]);
 800344e:	2001      	movs	r0, #1
 8003450:	893a      	ldrh	r2, [r7, #8]
 8003452:	6931      	ldr	r1, [r6, #16]
 8003454:	f000 fc32 	bl	8003cbc <enable_pin>
			break;
 8003458:	e768      	b.n	800332c <HAL_UART_RxCpltCallback+0x70>
				  if (!(auto_shutoff && curr_temps[INDEX_OF_THERMISTOR_0] >= max_temp)) {
 800345a:	4b2f      	ldr	r3, [pc, #188]	; (8003518 <HAL_UART_RxCpltCallback+0x25c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <HAL_UART_RxCpltCallback+0x1b6>
 8003462:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_UART_RxCpltCallback+0x270>)
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_UART_RxCpltCallback+0x274>)
 8003468:	6898      	ldr	r0, [r3, #8]
 800346a:	f7fd f851 	bl	8000510 <__aeabi_fcmpge>
 800346e:	2800      	cmp	r0, #0
 8003470:	d109      	bne.n	8003486 <HAL_UART_RxCpltCallback+0x1ca>
					  heater_state_0 = enable;
 8003472:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_UART_RxCpltCallback+0x278>)
 8003474:	9a04      	ldr	r2, [sp, #16]
					  enable_pin(heater_state_0, port_array[d_m], pin_array[d_m]);
 8003476:	9804      	ldr	r0, [sp, #16]
					  heater_state_0 = enable;
 8003478:	601a      	str	r2, [r3, #0]
					  enable_pin(heater_state_0, port_array[d_m], pin_array[d_m]);
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_UART_RxCpltCallback+0x248>)
 800347c:	89da      	ldrh	r2, [r3, #14]
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <HAL_UART_RxCpltCallback+0x24c>)
 8003480:	69d9      	ldr	r1, [r3, #28]
 8003482:	f000 fc1b 	bl	8003cbc <enable_pin>
				  send_heater_info = 1;
 8003486:	2201      	movs	r2, #1
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <HAL_UART_RxCpltCallback+0x27c>)
 800348a:	601a      	str	r2, [r3, #0]
				  break;
 800348c:	e74e      	b.n	800332c <HAL_UART_RxCpltCallback+0x70>
				  if (!(auto_shutoff && curr_temps[INDEX_OF_THERMISTOR_2] >= max_temp)) {
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <HAL_UART_RxCpltCallback+0x25c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_UART_RxCpltCallback+0x1ea>
 8003496:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_UART_RxCpltCallback+0x270>)
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_UART_RxCpltCallback+0x274>)
 800349c:	6858      	ldr	r0, [r3, #4]
 800349e:	f7fd f837 	bl	8000510 <__aeabi_fcmpge>
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d1ef      	bne.n	8003486 <HAL_UART_RxCpltCallback+0x1ca>
					  heater_state_2 = enable;
 80034a6:	9a04      	ldr	r2, [sp, #16]
 80034a8:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_UART_RxCpltCallback+0x280>)
					  enable_pin(heater_state_2, port_array[d_m], pin_array[d_m]);
 80034aa:	9804      	ldr	r0, [sp, #16]
					  heater_state_2 = enable;
 80034ac:	601a      	str	r2, [r3, #0]
					  enable_pin(heater_state_2, port_array[d_m], pin_array[d_m]);
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <HAL_UART_RxCpltCallback+0x248>)
 80034b0:	8a5a      	ldrh	r2, [r3, #18]
 80034b2:	4b15      	ldr	r3, [pc, #84]	; (8003508 <HAL_UART_RxCpltCallback+0x24c>)
 80034b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034b6:	f000 fc01 	bl	8003cbc <enable_pin>
 80034ba:	e7e4      	b.n	8003486 <HAL_UART_RxCpltCallback+0x1ca>
				  if (!(auto_shutoff && curr_temps[INDEX_OF_THERMISTOR_1] >= max_temp)) {
 80034bc:	4b16      	ldr	r3, [pc, #88]	; (8003518 <HAL_UART_RxCpltCallback+0x25c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_UART_RxCpltCallback+0x218>
 80034c4:	4b19      	ldr	r3, [pc, #100]	; (800352c <HAL_UART_RxCpltCallback+0x270>)
 80034c6:	6819      	ldr	r1, [r3, #0]
 80034c8:	4b19      	ldr	r3, [pc, #100]	; (8003530 <HAL_UART_RxCpltCallback+0x274>)
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	f7fd f820 	bl	8000510 <__aeabi_fcmpge>
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d1d8      	bne.n	8003486 <HAL_UART_RxCpltCallback+0x1ca>
					  heater_state_1 = enable;
 80034d4:	9a04      	ldr	r2, [sp, #16]
 80034d6:	4b1a      	ldr	r3, [pc, #104]	; (8003540 <HAL_UART_RxCpltCallback+0x284>)
					  enable_pin(heater_state_1, port_array[d_m], pin_array[d_m]);
 80034d8:	9804      	ldr	r0, [sp, #16]
					  heater_state_1 = enable;
 80034da:	601a      	str	r2, [r3, #0]
					  enable_pin(heater_state_1, port_array[d_m], pin_array[d_m]);
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_UART_RxCpltCallback+0x248>)
 80034de:	8a1a      	ldrh	r2, [r3, #16]
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <HAL_UART_RxCpltCallback+0x24c>)
 80034e2:	6a19      	ldr	r1, [r3, #32]
 80034e4:	f000 fbea 	bl	8003cbc <enable_pin>
 80034e8:	e7cd      	b.n	8003486 <HAL_UART_RxCpltCallback+0x1ca>
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	2000029c 	.word	0x2000029c
 80034f0:	2000053c 	.word	0x2000053c
 80034f4:	200004ac 	.word	0x200004ac
 80034f8:	2000055a 	.word	0x2000055a
 80034fc:	0800cbb8 	.word	0x0800cbb8
 8003500:	20000570 	.word	0x20000570
 8003504:	20000008 	.word	0x20000008
 8003508:	20000020 	.word	0x20000020
 800350c:	20000298 	.word	0x20000298
 8003510:	2000057c 	.word	0x2000057c
 8003514:	2000055c 	.word	0x2000055c
 8003518:	20000000 	.word	0x20000000
 800351c:	20000054 	.word	0x20000054
 8003520:	20000560 	.word	0x20000560
 8003524:	20000574 	.word	0x20000574
 8003528:	20000004 	.word	0x20000004
 800352c:	20000094 	.word	0x20000094
 8003530:	20000088 	.word	0x20000088
 8003534:	20000564 	.word	0x20000564
 8003538:	20000050 	.word	0x20000050
 800353c:	2000056c 	.word	0x2000056c
 8003540:	20000568 	.word	0x20000568

08003544 <HAL_UART_TxCpltCallback>:
}
 8003544:	4770      	bx	lr
 8003546:	46c0      	nop			; (mov r8, r8)

08003548 <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim6) {
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x10>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 800354a:	b510      	push	{r4, lr}
	if (htim == &htim6) {
 800354c:	4283      	cmp	r3, r0
 800354e:	d000      	beq.n	8003552 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8003550:	bd10      	pop	{r4, pc}
		LED_tick();
 8003552:	f000 fc6d 	bl	8003e30 <LED_tick>
}
 8003556:	e7fb      	b.n	8003550 <HAL_TIM_PeriodElapsedCallback+0x8>
 8003558:	20000460 	.word	0x20000460

0800355c <SystemClock_Config>:
{
 800355c:	b500      	push	{lr}
 800355e:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003560:	2234      	movs	r2, #52	; 0x34
 8003562:	2100      	movs	r1, #0
 8003564:	a805      	add	r0, sp, #20
 8003566:	f006 f88c 	bl	8009682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800356a:	2210      	movs	r2, #16
 800356c:	2100      	movs	r1, #0
 800356e:	a801      	add	r0, sp, #4
 8003570:	f006 f887 	bl	8009682 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003574:	2080      	movs	r0, #128	; 0x80
 8003576:	0080      	lsls	r0, r0, #2
 8003578:	f003 fdea 	bl	8007150 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800357c:	2302      	movs	r3, #2
 800357e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003580:	33fe      	adds	r3, #254	; 0xfe
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003582:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003584:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003586:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003588:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800358a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800358c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800358e:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003590:	f003 fe48 	bl	8007224 <HAL_RCC_OscConfig>
 8003594:	2800      	cmp	r0, #0
 8003596:	d001      	beq.n	800359c <SystemClock_Config+0x40>
 8003598:	b672      	cpsid	i
  while (1)
 800359a:	e7fe      	b.n	800359a <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800359c:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800359e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035a0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035a2:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80035a4:	2100      	movs	r1, #0
 80035a6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035a8:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80035aa:	f004 f8a7 	bl	80076fc <HAL_RCC_ClockConfig>
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d001      	beq.n	80035b6 <SystemClock_Config+0x5a>
 80035b2:	b672      	cpsid	i
  while (1)
 80035b4:	e7fe      	b.n	80035b4 <SystemClock_Config+0x58>
}
 80035b6:	b013      	add	sp, #76	; 0x4c
 80035b8:	bd00      	pop	{pc}
 80035ba:	46c0      	nop			; (mov r8, r8)

080035bc <main>:
{
 80035bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035be:	46ce      	mov	lr, r9
 80035c0:	4647      	mov	r7, r8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c2:	2601      	movs	r6, #1
{
 80035c4:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c6:	4cce      	ldr	r4, [pc, #824]	; (8003900 <main+0x344>)
{
 80035c8:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 80035ca:	f001 faab 	bl	8004b24 <HAL_Init>
  SystemClock_Config();
 80035ce:	f7ff ffc5 	bl	800355c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d2:	2214      	movs	r2, #20
 80035d4:	2100      	movs	r1, #0
 80035d6:	a80f      	add	r0, sp, #60	; 0x3c
 80035d8:	f006 f853 	bl	8009682 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035de:	2704      	movs	r7, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e0:	4333      	orrs	r3, r6
 80035e2:	6363      	str	r3, [r4, #52]	; 0x34
 80035e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_DEBUG_Pin|HBRIDGE_BWD_Pin|LED_RED_DEBUG_Pin, GPIO_PIN_RESET);
 80035e6:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e8:	4033      	ands	r3, r6
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	2302      	movs	r3, #2
 80035f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_DEBUG_Pin|HBRIDGE_BWD_Pin|LED_RED_DEBUG_Pin, GPIO_PIN_RESET);
 80035f2:	4dc4      	ldr	r5, [pc, #784]	; (8003904 <main+0x348>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035f4:	431a      	orrs	r2, r3
 80035f6:	6362      	str	r2, [r4, #52]	; 0x34
 80035f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_DEBUG_Pin|HBRIDGE_BWD_Pin|LED_RED_DEBUG_Pin, GPIO_PIN_RESET);
 80035fa:	0029      	movs	r1, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fc:	4013      	ands	r3, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035fe:	2208      	movs	r2, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003600:	9302      	str	r3, [sp, #8]
 8003602:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003604:	6b63      	ldr	r3, [r4, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_DEBUG_Pin|HBRIDGE_BWD_Pin|LED_RED_DEBUG_Pin, GPIO_PIN_RESET);
 8003606:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003608:	433b      	orrs	r3, r7
 800360a:	6363      	str	r3, [r4, #52]	; 0x34
 800360c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800360e:	4690      	mov	r8, r2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003610:	403b      	ands	r3, r7
 8003612:	9303      	str	r3, [sp, #12]
 8003614:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003616:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003618:	4313      	orrs	r3, r2
 800361a:	6363      	str	r3, [r4, #52]	; 0x34
 800361c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800361e:	4013      	ands	r3, r2
 8003620:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_DEBUG_Pin|HBRIDGE_BWD_Pin|LED_RED_DEBUG_Pin, GPIO_PIN_RESET);
 8003622:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003624:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, LED_BLUE_DEBUG_Pin|HBRIDGE_BWD_Pin|LED_RED_DEBUG_Pin, GPIO_PIN_RESET);
 8003626:	f002 fa29 	bl	8005a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MOSFET_12_Pin|MOSFET_11_Pin|MOSFET_10_Pin|MOSFET_4_Pin
 800362a:	4bb7      	ldr	r3, [pc, #732]	; (8003908 <main+0x34c>)
 800362c:	2200      	movs	r2, #0
 800362e:	0019      	movs	r1, r3
 8003630:	48b6      	ldr	r0, [pc, #728]	; (800390c <main+0x350>)
 8003632:	4699      	mov	r9, r3
 8003634:	f002 fa22 	bl	8005a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HBRIDGE_FWD_GPIO_Port, HBRIDGE_FWD_Pin, GPIO_PIN_RESET);
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	48b4      	ldr	r0, [pc, #720]	; (8003910 <main+0x354>)
 800363e:	f002 fa1d 	bl	8005a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, MOSFET_7_Pin|MOSFET_8_Pin, GPIO_PIN_RESET);
 8003642:	2200      	movs	r2, #0
 8003644:	210a      	movs	r1, #10
 8003646:	48b3      	ldr	r0, [pc, #716]	; (8003914 <main+0x358>)
 8003648:	f002 fa18 	bl	8005a7c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364c:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = LED_BLUE_DEBUG_Pin|HBRIDGE_BWD_Pin|LED_RED_DEBUG_Pin;
 800364e:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003652:	a90f      	add	r1, sp, #60	; 0x3c
 8003654:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003656:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365a:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365c:	f002 f876 	bl	800574c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOSFET_12_Pin|MOSFET_11_Pin|MOSFET_10_Pin|MOSFET_4_Pin
 8003660:	464b      	mov	r3, r9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003662:	48aa      	ldr	r0, [pc, #680]	; (800390c <main+0x350>)
 8003664:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = MOSFET_12_Pin|MOSFET_11_Pin|MOSFET_10_Pin|MOSFET_4_Pin
 8003666:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003668:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366e:	f002 f86d 	bl	800574c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HBRIDGE_FWD_Pin;
 8003672:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(HBRIDGE_FWD_GPIO_Port, &GPIO_InitStruct);
 8003674:	48a6      	ldr	r0, [pc, #664]	; (8003910 <main+0x354>)
 8003676:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = HBRIDGE_FWD_Pin;
 8003678:	4699      	mov	r9, r3
 800367a:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800367c:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(HBRIDGE_FWD_GPIO_Port, &GPIO_InitStruct);
 8003682:	f002 f863 	bl	800574c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOSFET_7_Pin|MOSFET_8_Pin;
 8003686:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003688:	48a2      	ldr	r0, [pc, #648]	; (8003914 <main+0x358>)
 800368a:	a90f      	add	r1, sp, #60	; 0x3c
  GPIO_InitStruct.Pin = MOSFET_7_Pin|MOSFET_8_Pin;
 800368c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368e:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003694:	f002 f85a 	bl	800574c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003698:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800369a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800369c:	4333      	orrs	r3, r6
 800369e:	63a3      	str	r3, [r4, #56]	; 0x38
 80036a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036a2:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036a4:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036a6:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036ac:	f001 fe1a 	bl	80052e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036b0:	2009      	movs	r0, #9
 80036b2:	f001 fe49 	bl	8005348 <HAL_NVIC_EnableIRQ>
  ADC_ChannelConfTypeDef sConfig = {0};
 80036b6:	220c      	movs	r2, #12
 80036b8:	2100      	movs	r1, #0
 80036ba:	a80f      	add	r0, sp, #60	; 0x3c
 80036bc:	f005 ffe1 	bl	8009682 <memset>
  hadc1.Instance = ADC1;
 80036c0:	4c95      	ldr	r4, [pc, #596]	; (8003918 <main+0x35c>)
 80036c2:	4b96      	ldr	r3, [pc, #600]	; (800391c <main+0x360>)
  hadc1.Init.NbrOfConversion = 3;
 80036c4:	2203      	movs	r2, #3
  hadc1.Instance = ADC1;
 80036c6:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	05db      	lsls	r3, r3, #23
 80036cc:	6063      	str	r3, [r4, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80036ce:	2380      	movs	r3, #128	; 0x80
 80036d0:	039b      	lsls	r3, r3, #14
 80036d2:	6123      	str	r3, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036d4:	2300      	movs	r3, #0
  hadc1.Init.NbrOfConversion = 3;
 80036d6:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80036d8:	321d      	adds	r2, #29
 80036da:	54a6      	strb	r6, [r4, r2]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80036dc:	320c      	adds	r2, #12
 80036de:	54a3      	strb	r3, [r4, r2]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036e0:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 80036e2:	3210      	adds	r2, #16
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036e4:	8325      	strh	r5, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036e6:	60a5      	str	r5, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036e8:	60e5      	str	r5, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036ea:	6167      	str	r7, [r4, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80036ec:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036ee:	6265      	str	r5, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036f0:	62a5      	str	r5, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036f2:	6325      	str	r5, [r4, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80036f4:	6365      	str	r5, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80036f6:	63a5      	str	r5, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80036f8:	54a3      	strb	r3, [r4, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80036fa:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036fc:	f001 fa4a 	bl	8004b94 <HAL_ADC_Init>
 8003700:	2800      	cmp	r0, #0
 8003702:	d001      	beq.n	8003708 <main+0x14c>
 8003704:	b672      	cpsid	i
  while (1)
 8003706:	e7fe      	b.n	8003706 <main+0x14a>
  sConfig.Channel = ADC_CHANNEL_3;
 8003708:	4b85      	ldr	r3, [pc, #532]	; (8003920 <main+0x364>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800370a:	9010      	str	r0, [sp, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800370c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800370e:	a90f      	add	r1, sp, #60	; 0x3c
 8003710:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8003712:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003714:	f001 fbec 	bl	8004ef0 <HAL_ADC_ConfigChannel>
 8003718:	2800      	cmp	r0, #0
 800371a:	d001      	beq.n	8003720 <main+0x164>
 800371c:	b672      	cpsid	i
  while (1)
 800371e:	e7fe      	b.n	800371e <main+0x162>
  sConfig.Channel = ADC_CHANNEL_4;
 8003720:	4b80      	ldr	r3, [pc, #512]	; (8003924 <main+0x368>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003722:	0020      	movs	r0, r4
 8003724:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Channel = ADC_CHANNEL_4;
 8003726:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003728:	9710      	str	r7, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800372a:	f001 fbe1 	bl	8004ef0 <HAL_ADC_ConfigChannel>
 800372e:	2800      	cmp	r0, #0
 8003730:	d001      	beq.n	8003736 <main+0x17a>
 8003732:	b672      	cpsid	i
  while (1)
 8003734:	e7fe      	b.n	8003734 <main+0x178>
  sConfig.Channel = ADC_CHANNEL_5;
 8003736:	4b7c      	ldr	r3, [pc, #496]	; (8003928 <main+0x36c>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003738:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_5;
 800373a:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800373c:	4643      	mov	r3, r8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800373e:	a90f      	add	r1, sp, #60	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003740:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003742:	f001 fbd5 	bl	8004ef0 <HAL_ADC_ConfigChannel>
 8003746:	2800      	cmp	r0, #0
 8003748:	d001      	beq.n	800374e <main+0x192>
 800374a:	b672      	cpsid	i
  while (1)
 800374c:	e7fe      	b.n	800374c <main+0x190>
  hi2c1.Instance = I2C1;
 800374e:	4c77      	ldr	r4, [pc, #476]	; (800392c <main+0x370>)
 8003750:	4b77      	ldr	r3, [pc, #476]	; (8003930 <main+0x374>)
  hi2c1.Init.OwnAddress1 = 0;
 8003752:	60a0      	str	r0, [r4, #8]
  hi2c1.Instance = I2C1;
 8003754:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003756:	4b77      	ldr	r3, [pc, #476]	; (8003934 <main+0x378>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003758:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800375a:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800375c:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800375e:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003760:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003762:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00303D5B;
 8003764:	6063      	str	r3, [r4, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003766:	60e6      	str	r6, [r4, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003768:	f002 fa7e 	bl	8005c68 <HAL_I2C_Init>
 800376c:	1e01      	subs	r1, r0, #0
 800376e:	d001      	beq.n	8003774 <main+0x1b8>
 8003770:	b672      	cpsid	i
  while (1)
 8003772:	e7fe      	b.n	8003772 <main+0x1b6>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003774:	0020      	movs	r0, r4
 8003776:	f003 fc9d 	bl	80070b4 <HAL_I2CEx_ConfigAnalogFilter>
 800377a:	1e01      	subs	r1, r0, #0
 800377c:	d001      	beq.n	8003782 <main+0x1c6>
 800377e:	b672      	cpsid	i
  while (1)
 8003780:	e7fe      	b.n	8003780 <main+0x1c4>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003782:	0020      	movs	r0, r4
 8003784:	f003 fcbe 	bl	8007104 <HAL_I2CEx_ConfigDigitalFilter>
 8003788:	1e05      	subs	r5, r0, #0
 800378a:	d001      	beq.n	8003790 <main+0x1d4>
 800378c:	b672      	cpsid	i
  while (1)
 800378e:	e7fe      	b.n	800378e <main+0x1d2>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003790:	0001      	movs	r1, r0
 8003792:	220c      	movs	r2, #12
 8003794:	a805      	add	r0, sp, #20
 8003796:	f005 ff74 	bl	8009682 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800379a:	221c      	movs	r2, #28
 800379c:	0029      	movs	r1, r5
 800379e:	a808      	add	r0, sp, #32
 80037a0:	f005 ff6f 	bl	8009682 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037a4:	2234      	movs	r2, #52	; 0x34
 80037a6:	0029      	movs	r1, r5
 80037a8:	a80f      	add	r0, sp, #60	; 0x3c
 80037aa:	f005 ff6a 	bl	8009682 <memset>
  htim1.Instance = TIM1;
 80037ae:	4c62      	ldr	r4, [pc, #392]	; (8003938 <main+0x37c>)
 80037b0:	4b62      	ldr	r3, [pc, #392]	; (800393c <main+0x380>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037b2:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 80037b4:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 1599;
 80037b6:	4b62      	ldr	r3, [pc, #392]	; (8003940 <main+0x384>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b8:	60a5      	str	r5, [r4, #8]
  htim1.Init.Prescaler = 1599;
 80037ba:	6063      	str	r3, [r4, #4]
  htim1.Init.Period = 201;
 80037bc:	23c9      	movs	r3, #201	; 0xc9
 80037be:	60e3      	str	r3, [r4, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037c0:	464b      	mov	r3, r9
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c2:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80037c4:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037c6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037c8:	f004 fc8a 	bl	80080e0 <HAL_TIM_PWM_Init>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d001      	beq.n	80037d4 <main+0x218>
 80037d0:	b672      	cpsid	i
  while (1)
 80037d2:	e7fe      	b.n	80037d2 <main+0x216>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d4:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80037d6:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d8:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037da:	a905      	add	r1, sp, #20
 80037dc:	0020      	movs	r0, r4
 80037de:	f004 fd7b 	bl	80082d8 <HAL_TIMEx_MasterConfigSynchronization>
 80037e2:	1e02      	subs	r2, r0, #0
 80037e4:	d001      	beq.n	80037ea <main+0x22e>
 80037e6:	b672      	cpsid	i
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <main+0x22c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037ea:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80037ec:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ee:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037f0:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037f2:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037f4:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037f6:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037f8:	a908      	add	r1, sp, #32
 80037fa:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037fc:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037fe:	f004 fcdf 	bl	80081c0 <HAL_TIM_PWM_ConfigChannel>
 8003802:	2800      	cmp	r0, #0
 8003804:	d001      	beq.n	800380a <main+0x24e>
 8003806:	b672      	cpsid	i
  while (1)
 8003808:	e7fe      	b.n	8003808 <main+0x24c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800380a:	2204      	movs	r2, #4
 800380c:	0020      	movs	r0, r4
 800380e:	a908      	add	r1, sp, #32
 8003810:	f004 fcd6 	bl	80081c0 <HAL_TIM_PWM_ConfigChannel>
 8003814:	2800      	cmp	r0, #0
 8003816:	d001      	beq.n	800381c <main+0x260>
 8003818:	b672      	cpsid	i
  while (1)
 800381a:	e7fe      	b.n	800381a <main+0x25e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800381c:	2208      	movs	r2, #8
 800381e:	0020      	movs	r0, r4
 8003820:	a908      	add	r1, sp, #32
 8003822:	f004 fccd 	bl	80081c0 <HAL_TIM_PWM_ConfigChannel>
 8003826:	2800      	cmp	r0, #0
 8003828:	d001      	beq.n	800382e <main+0x272>
 800382a:	b672      	cpsid	i
  while (1)
 800382c:	e7fe      	b.n	800382c <main+0x270>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800382e:	2380      	movs	r3, #128	; 0x80
 8003830:	019b      	lsls	r3, r3, #6
 8003832:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003834:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003836:	900f      	str	r0, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003838:	9010      	str	r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800383a:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 800383c:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800383e:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003840:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003842:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003844:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003846:	049b      	lsls	r3, r3, #18
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003848:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800384a:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800384c:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800384e:	a90f      	add	r1, sp, #60	; 0x3c
 8003850:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003852:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003854:	f004 fd7a 	bl	800834c <HAL_TIMEx_ConfigBreakDeadTime>
 8003858:	1e06      	subs	r6, r0, #0
 800385a:	d001      	beq.n	8003860 <main+0x2a4>
 800385c:	b672      	cpsid	i
  while (1)
 800385e:	e7fe      	b.n	800385e <main+0x2a2>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003860:	270c      	movs	r7, #12
  HAL_TIM_MspPostInit(&htim1);
 8003862:	0020      	movs	r0, r4
 8003864:	f000 fea8 	bl	80045b8 <HAL_TIM_MspPostInit>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003868:	003a      	movs	r2, r7
 800386a:	0031      	movs	r1, r6
 800386c:	a808      	add	r0, sp, #32
 800386e:	f005 ff08 	bl	8009682 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003872:	221c      	movs	r2, #28
 8003874:	0031      	movs	r1, r6
 8003876:	a80f      	add	r0, sp, #60	; 0x3c
 8003878:	f005 ff03 	bl	8009682 <memset>
  htim3.Instance = TIM3;
 800387c:	4d31      	ldr	r5, [pc, #196]	; (8003944 <main+0x388>)
 800387e:	4b32      	ldr	r3, [pc, #200]	; (8003948 <main+0x38c>)
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003880:	0028      	movs	r0, r5
  htim3.Instance = TIM3;
 8003882:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 3;
 8003884:	2303      	movs	r3, #3
 8003886:	606b      	str	r3, [r5, #4]
  htim3.Init.Period = 159;
 8003888:	339c      	adds	r3, #156	; 0x9c
 800388a:	60eb      	str	r3, [r5, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800388c:	3b1f      	subs	r3, #31
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388e:	60ae      	str	r6, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003890:	612e      	str	r6, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003892:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003894:	f004 fc24 	bl	80080e0 <HAL_TIM_PWM_Init>
 8003898:	2800      	cmp	r0, #0
 800389a:	d001      	beq.n	80038a0 <main+0x2e4>
 800389c:	b672      	cpsid	i
  while (1)
 800389e:	e7fe      	b.n	800389e <main+0x2e2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a0:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a2:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038a4:	a908      	add	r1, sp, #32
 80038a6:	0028      	movs	r0, r5
 80038a8:	f004 fd16 	bl	80082d8 <HAL_TIMEx_MasterConfigSynchronization>
 80038ac:	1e02      	subs	r2, r0, #0
 80038ae:	d001      	beq.n	80038b4 <main+0x2f8>
 80038b0:	b672      	cpsid	i
  while (1)
 80038b2:	e7fe      	b.n	80038b2 <main+0x2f6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038b4:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80038b6:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038b8:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ba:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038bc:	a90f      	add	r1, sp, #60	; 0x3c
 80038be:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038c0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038c2:	f004 fc7d 	bl	80081c0 <HAL_TIM_PWM_ConfigChannel>
 80038c6:	1e04      	subs	r4, r0, #0
 80038c8:	d001      	beq.n	80038ce <main+0x312>
 80038ca:	b672      	cpsid	i
  while (1)
 80038cc:	e7fe      	b.n	80038cc <main+0x310>
  HAL_TIM_MspPostInit(&htim3);
 80038ce:	0028      	movs	r0, r5
 80038d0:	f000 fe72 	bl	80045b8 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80038d4:	481d      	ldr	r0, [pc, #116]	; (800394c <main+0x390>)
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <main+0x394>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80038d8:	6084      	str	r4, [r0, #8]
  huart2.Instance = USART2;
 80038da:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 80038dc:	2396      	movs	r3, #150	; 0x96
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	6043      	str	r3, [r0, #4]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038e2:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038e4:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038e6:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038e8:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ea:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ec:	6204      	str	r4, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038ee:	6244      	str	r4, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038f0:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038f2:	f005 fd7b 	bl	80093ec <HAL_UART_Init>
 80038f6:	1e05      	subs	r5, r0, #0
 80038f8:	d02c      	beq.n	8003954 <main+0x398>
 80038fa:	b672      	cpsid	i
  while (1)
 80038fc:	e7fe      	b.n	80038fc <main+0x340>
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	40021000 	.word	0x40021000
 8003904:	00000482 	.word	0x00000482
 8003908:	00003e37 	.word	0x00003e37
 800390c:	50000400 	.word	0x50000400
 8003910:	50000800 	.word	0x50000800
 8003914:	50000c00 	.word	0x50000c00
 8003918:	200002bc 	.word	0x200002bc
 800391c:	40012400 	.word	0x40012400
 8003920:	0c000008 	.word	0x0c000008
 8003924:	10000010 	.word	0x10000010
 8003928:	14000020 	.word	0x14000020
 800392c:	2000037c 	.word	0x2000037c
 8003930:	40005400 	.word	0x40005400
 8003934:	00303d5b 	.word	0x00303d5b
 8003938:	200003c8 	.word	0x200003c8
 800393c:	40012c00 	.word	0x40012c00
 8003940:	0000063f 	.word	0x0000063f
 8003944:	20000414 	.word	0x20000414
 8003948:	40000400 	.word	0x40000400
 800394c:	200004ac 	.word	0x200004ac
 8003950:	40004400 	.word	0x40004400
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003954:	0001      	movs	r1, r0
 8003956:	003a      	movs	r2, r7
 8003958:	a80f      	add	r0, sp, #60	; 0x3c
 800395a:	f005 fe92 	bl	8009682 <memset>
  htim6.Instance = TIM6;
 800395e:	4c10      	ldr	r4, [pc, #64]	; (80039a0 <main+0x3e4>)
 8003960:	4b10      	ldr	r3, [pc, #64]	; (80039a4 <main+0x3e8>)
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003962:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 8003964:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 15;
 8003966:	230f      	movs	r3, #15
 8003968:	6063      	str	r3, [r4, #4]
  htim6.Init.Period = 1000;
 800396a:	23fa      	movs	r3, #250	; 0xfa
 800396c:	009b      	lsls	r3, r3, #2
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396e:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 1000;
 8003970:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003972:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003974:	f004 fb84 	bl	8008080 <HAL_TIM_Base_Init>
 8003978:	2800      	cmp	r0, #0
 800397a:	d001      	beq.n	8003980 <main+0x3c4>
 800397c:	b672      	cpsid	i
  while (1)
 800397e:	e7fe      	b.n	800397e <main+0x3c2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003980:	900f      	str	r0, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003982:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003984:	a90f      	add	r1, sp, #60	; 0x3c
 8003986:	0020      	movs	r0, r4
 8003988:	f004 fca6 	bl	80082d8 <HAL_TIMEx_MasterConfigSynchronization>
 800398c:	2800      	cmp	r0, #0
 800398e:	d001      	beq.n	8003994 <main+0x3d8>
 8003990:	b672      	cpsid	i
  while (1)
 8003992:	e7fe      	b.n	8003992 <main+0x3d6>
  main_preloop();
 8003994:	f000 f8e2 	bl	8003b5c <main_preloop>
	  main_loop();
 8003998:	f000 f808 	bl	80039ac <main_loop>
  while (1)
 800399c:	e7fc      	b.n	8003998 <main+0x3dc>
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	20000460 	.word	0x20000460
 80039a4:	40001000 	.word	0x40001000

080039a8 <Error_Handler>:
 80039a8:	b672      	cpsid	i
  while (1)
 80039aa:	e7fe      	b.n	80039aa <Error_Handler+0x2>

080039ac <main_loop>:
extern char* mosfet_copy;
extern char* servo_copy;

#define JETSON_UART &huart2

int main_loop(){
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	46de      	mov	lr, fp
 80039b0:	464e      	mov	r6, r9
 80039b2:	4657      	mov	r7, sl
 80039b4:	4645      	mov	r5, r8

#ifdef THERMISTOR_ENABLE
	// Read and send all thermistor data over Jetson UART
	send_thermistor_data(thermistors, JETSON_UART);
 80039b6:	4b59      	ldr	r3, [pc, #356]	; (8003b1c <main_loop+0x170>)
int main_loop(){
 80039b8:	b5e0      	push	{r5, r6, r7, lr}
	send_thermistor_data(thermistors, JETSON_UART);
 80039ba:	4e59      	ldr	r6, [pc, #356]	; (8003b20 <main_loop+0x174>)
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	0031      	movs	r1, r6
 80039c0:	f001 f816 	bl	80049f0 <send_thermistor_data>
	if (auto_shutoff){
 80039c4:	4b57      	ldr	r3, [pc, #348]	; (8003b24 <main_loop+0x178>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d13c      	bne.n	8003a46 <main_loop+0x9a>
 80039cc:	4b56      	ldr	r3, [pc, #344]	; (8003b28 <main_loop+0x17c>)
 80039ce:	4699      	mov	r9, r3
			}
		}
	}
#endif
#ifdef MOSFET_ENABLE
	if (send_heater_info) {
 80039d0:	464b      	mov	r3, r9
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d16e      	bne.n	8003ab6 <main_loop+0x10a>
		send_heater_info = 0;
		send_heater_state(&huart2, 0, heater_state_0);
		send_heater_state(&huart2, 1, heater_state_1);
		send_heater_state(&huart2, 2, heater_state_2);
	}
	if (send_shutoff_info) {
 80039d8:	4b54      	ldr	r3, [pc, #336]	; (8003b2c <main_loop+0x180>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2a00      	cmp	r2, #0
 80039de:	d164      	bne.n	8003aaa <main_loop+0xfe>
	}
#endif

#ifdef SPECTRAL_ENABLE

		initialize_spectral();
 80039e0:	f000 fca4 	bl	800432c <initialize_spectral>
	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 80039e4:	2324      	movs	r3, #36	; 0x24
 80039e6:	4699      	mov	r9, r3
 80039e8:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <main_loop+0x184>)
 80039ea:	4f52      	ldr	r7, [pc, #328]	; (8003b34 <main_loop+0x188>)
 80039ec:	4698      	mov	r8, r3
		// Before attempting read, check if that spectral device is ready
		if(!check_ready()){
//			initialize_spectral();
			continue;
		}
		if (get_spectral_data(spectral, spectral_data + (i * CHANNELS))) {
 80039ee:	4b52      	ldr	r3, [pc, #328]	; (8003b38 <main_loop+0x18c>)
 80039f0:	003c      	movs	r4, r7
 80039f2:	469a      	mov	sl, r3
 80039f4:	4d51      	ldr	r5, [pc, #324]	; (8003b3c <main_loop+0x190>)
 80039f6:	44b9      	add	r9, r7
		channel_select(mux, mux->channel_list[spectral_channels[i]]);
 80039f8:	4642      	mov	r2, r8
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	4694      	mov	ip, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4463      	add	r3, ip
 8003a04:	0010      	movs	r0, r2
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	f000 fa68 	bl	8003edc <channel_select>
		if(!check_ready()){
 8003a0c:	f000 fcb6 	bl	800437c <check_ready>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d006      	beq.n	8003a22 <main_loop+0x76>
		if (get_spectral_data(spectral, spectral_data + (i * CHANNELS))) {
 8003a14:	4653      	mov	r3, sl
 8003a16:	0021      	movs	r1, r4
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	f000 fc75 	bl	8004308 <get_spectral_data>
 8003a1e:	2800      	cmp	r0, #0
 8003a20:	d140      	bne.n	8003aa4 <main_loop+0xf8>
	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 8003a22:	340c      	adds	r4, #12
 8003a24:	3504      	adds	r5, #4
 8003a26:	454c      	cmp	r4, r9
 8003a28:	d1e6      	bne.n	80039f8 <main_loop+0x4c>
			initialize_spectral();
		}

	}
	send_spectral_data(spectral_data, &huart2);
 8003a2a:	0031      	movs	r1, r6
 8003a2c:	0038      	movs	r0, r7
 8003a2e:	f000 fb49 	bl	80040c4 <send_spectral_data>
	send_triad_data(triad_data, &huart2);
	HAL_Delay(10);
#endif

#ifdef HBRIDGE_MOTOR_ENABLE
    send_carousel_pos(&huart2);
 8003a32:	0030      	movs	r0, r6
 8003a34:	f7ff fbe4 	bl	8003200 <send_carousel_pos>
#endif
	return 0;
}
 8003a38:	2000      	movs	r0, #0
 8003a3a:	bcf0      	pop	{r4, r5, r6, r7}
 8003a3c:	46bb      	mov	fp, r7
 8003a3e:	46b2      	mov	sl, r6
 8003a40:	46a9      	mov	r9, r5
 8003a42:	46a0      	mov	r8, r4
 8003a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (curr_temps[i] >= max_temp){
 8003a46:	4b3e      	ldr	r3, [pc, #248]	; (8003b40 <main_loop+0x194>)
 8003a48:	2401      	movs	r4, #1
 8003a4a:	469a      	mov	sl, r3
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4d3d      	ldr	r5, [pc, #244]	; (8003b44 <main_loop+0x198>)
 8003a50:	4698      	mov	r8, r3
 8003a52:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <main_loop+0x17c>)
 8003a54:	4699      	mov	r9, r3
					  if (heater_state_1 == ENABLED) {
 8003a56:	4b3c      	ldr	r3, [pc, #240]	; (8003b48 <main_loop+0x19c>)
 8003a58:	469b      	mov	fp, r3
			if (curr_temps[i] >= max_temp){
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	6828      	ldr	r0, [r5, #0]
 8003a5e:	1e67      	subs	r7, r4, #1
 8003a60:	f7fc fd56 	bl	8000510 <__aeabi_fcmpge>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d007      	beq.n	8003a78 <main_loop+0xcc>
				switch(i){
 8003a68:	2f01      	cmp	r7, #1
 8003a6a:	d03a      	beq.n	8003ae2 <main_loop+0x136>
 8003a6c:	2f02      	cmp	r7, #2
 8003a6e:	d00b      	beq.n	8003a88 <main_loop+0xdc>
					  if (heater_state_2 == ENABLED) {
 8003a70:	4f36      	ldr	r7, [pc, #216]	; (8003b4c <main_loop+0x1a0>)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d047      	beq.n	8003b08 <main_loop+0x15c>
		for(int i = 0; i < THERMISTOR_DEVICES; ++i){
 8003a78:	2c03      	cmp	r4, #3
 8003a7a:	d0a9      	beq.n	80039d0 <main_loop+0x24>
			if (curr_temps[i] >= max_temp){
 8003a7c:	4653      	mov	r3, sl
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4698      	mov	r8, r3
 8003a82:	3504      	adds	r5, #4
 8003a84:	3401      	adds	r4, #1
 8003a86:	e7e8      	b.n	8003a5a <main_loop+0xae>
					  if (heater_state_0 == ENABLED) {
 8003a88:	4c31      	ldr	r4, [pc, #196]	; (8003b50 <main_loop+0x1a4>)
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d19f      	bne.n	80039d0 <main_loop+0x24>
						  send_heater_info = 1;
 8003a90:	464a      	mov	r2, r9
						  enable_pin(DISABLED, HEATER_0_GPIO_Port, HEATER_0_Pin);
 8003a92:	2000      	movs	r0, #0
						  send_heater_info = 1;
 8003a94:	6013      	str	r3, [r2, #0]
						  enable_pin(DISABLED, HEATER_0_GPIO_Port, HEATER_0_Pin);
 8003a96:	492f      	ldr	r1, [pc, #188]	; (8003b54 <main_loop+0x1a8>)
 8003a98:	2208      	movs	r2, #8
 8003a9a:	f000 f90f 	bl	8003cbc <enable_pin>
						  heater_state_0 = DISABLED;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	e795      	b.n	80039d0 <main_loop+0x24>
			initialize_spectral();
 8003aa4:	f000 fc42 	bl	800432c <initialize_spectral>
 8003aa8:	e7bb      	b.n	8003a22 <main_loop+0x76>
		send_shutoff_info = 0;
 8003aaa:	2200      	movs	r2, #0
		send_auto_shutoff_state(&huart2);
 8003aac:	0030      	movs	r0, r6
		send_shutoff_info = 0;
 8003aae:	601a      	str	r2, [r3, #0]
		send_auto_shutoff_state(&huart2);
 8003ab0:	f000 f97a 	bl	8003da8 <send_auto_shutoff_state>
 8003ab4:	e794      	b.n	80039e0 <main_loop+0x34>
		send_heater_info = 0;
 8003ab6:	464a      	mov	r2, r9
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6013      	str	r3, [r2, #0]
		send_heater_state(&huart2, 0, heater_state_0);
 8003abc:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <main_loop+0x1a4>)
 8003abe:	0030      	movs	r0, r6
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	f000 f992 	bl	8003dec <send_heater_state>
		send_heater_state(&huart2, 1, heater_state_1);
 8003ac8:	4b1f      	ldr	r3, [pc, #124]	; (8003b48 <main_loop+0x19c>)
 8003aca:	0030      	movs	r0, r6
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	2101      	movs	r1, #1
 8003ad0:	f000 f98c 	bl	8003dec <send_heater_state>
		send_heater_state(&huart2, 2, heater_state_2);
 8003ad4:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <main_loop+0x1a0>)
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	0030      	movs	r0, r6
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	f000 f986 	bl	8003dec <send_heater_state>
 8003ae0:	e77a      	b.n	80039d8 <main_loop+0x2c>
					  if (heater_state_1 == ENABLED) {
 8003ae2:	465b      	mov	r3, fp
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d1cb      	bne.n	8003a82 <main_loop+0xd6>
						  send_heater_info = 1;
 8003aea:	464a      	mov	r2, r9
 8003aec:	6013      	str	r3, [r2, #0]
						  enable_pin(DISABLED, HEATER_1_GPIO_Port, HEATER_1_Pin);
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	2000      	movs	r0, #0
 8003af2:	0152      	lsls	r2, r2, #5
 8003af4:	4918      	ldr	r1, [pc, #96]	; (8003b58 <main_loop+0x1ac>)
 8003af6:	f000 f8e1 	bl	8003cbc <enable_pin>
						  heater_state_1 = DISABLED;
 8003afa:	2300      	movs	r3, #0
 8003afc:	465a      	mov	r2, fp
 8003afe:	6013      	str	r3, [r2, #0]
			if (curr_temps[i] >= max_temp){
 8003b00:	4653      	mov	r3, sl
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4698      	mov	r8, r3
 8003b06:	e7bc      	b.n	8003a82 <main_loop+0xd6>
						  send_heater_info = 1;
 8003b08:	464a      	mov	r2, r9
						  enable_pin(DISABLED, HEATER_2_GPIO_Port, HEATER_2_Pin);
 8003b0a:	2000      	movs	r0, #0
						  send_heater_info = 1;
 8003b0c:	6013      	str	r3, [r2, #0]
						  enable_pin(DISABLED, HEATER_2_GPIO_Port, HEATER_2_Pin);
 8003b0e:	4912      	ldr	r1, [pc, #72]	; (8003b58 <main_loop+0x1ac>)
 8003b10:	2204      	movs	r2, #4
 8003b12:	f000 f8d3 	bl	8003cbc <enable_pin>
					  	  heater_state_2 = DISABLED;
 8003b16:	2300      	movs	r3, #0
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	e7ad      	b.n	8003a78 <main_loop+0xcc>
 8003b1c:	200005b4 	.word	0x200005b4
 8003b20:	200004ac 	.word	0x200004ac
 8003b24:	20000000 	.word	0x20000000
 8003b28:	20000050 	.word	0x20000050
 8003b2c:	20000054 	.word	0x20000054
 8003b30:	20000584 	.word	0x20000584
 8003b34:	2000058c 	.word	0x2000058c
 8003b38:	20000588 	.word	0x20000588
 8003b3c:	20000078 	.word	0x20000078
 8003b40:	20000094 	.word	0x20000094
 8003b44:	20000088 	.word	0x20000088
 8003b48:	20000568 	.word	0x20000568
 8003b4c:	2000056c 	.word	0x2000056c
 8003b50:	20000564 	.word	0x20000564
 8003b54:	50000c00 	.word	0x50000c00
 8003b58:	50000400 	.word	0x50000400

08003b5c <main_preloop>:
#include "main.h"
#include "main_loop.h"

#define JETSON_UART &huart2

int main_preloop(){
 8003b5c:	b570      	push	{r4, r5, r6, lr}
	HAL_UART_Receive_IT(JETSON_UART,Rx_data,30);
 8003b5e:	4d41      	ldr	r5, [pc, #260]	; (8003c64 <main_preloop+0x108>)
int main_preloop(){
 8003b60:	b082      	sub	sp, #8
	HAL_UART_Receive_IT(JETSON_UART,Rx_data,30);
 8003b62:	221e      	movs	r2, #30
 8003b64:	0028      	movs	r0, r5
 8003b66:	4940      	ldr	r1, [pc, #256]	; (8003c68 <main_preloop+0x10c>)
 8003b68:	f005 fd10 	bl	800958c <HAL_UART_Receive_IT>
#ifdef THERMISTOR_ENABLE
	thermistors = new_thermistors(ADC_CHANNEL_3, ADC_CHANNEL_4, ADC_CHANNEL_5);
 8003b6c:	4a3f      	ldr	r2, [pc, #252]	; (8003c6c <main_preloop+0x110>)
 8003b6e:	4940      	ldr	r1, [pc, #256]	; (8003c70 <main_preloop+0x114>)
 8003b70:	4840      	ldr	r0, [pc, #256]	; (8003c74 <main_preloop+0x118>)
 8003b72:	f000 fe31 	bl	80047d8 <new_thermistors>
 8003b76:	4b40      	ldr	r3, [pc, #256]	; (8003c78 <main_preloop+0x11c>)
 8003b78:	6018      	str	r0, [r3, #0]
#endif

#ifdef MOSFET_ENABLE
	HAL_TIM_Base_Start_IT(&htim6); // needed for LED timer
 8003b7a:	4840      	ldr	r0, [pc, #256]	; (8003c7c <main_preloop+0x120>)
 8003b7c:	f004 f8b0 	bl	8007ce0 <HAL_TIM_Base_Start_IT>
	mosfet_copy = (char *)malloc(30);
 8003b80:	201e      	movs	r0, #30
 8003b82:	f005 fd6b 	bl	800965c <malloc>
 8003b86:	4b3e      	ldr	r3, [pc, #248]	; (8003c80 <main_preloop+0x124>)
 8003b88:	6018      	str	r0, [r3, #0]
	auto_shut_copy = (char *)malloc(30);
 8003b8a:	201e      	movs	r0, #30
 8003b8c:	f005 fd66 	bl	800965c <malloc>
 8003b90:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <main_preloop+0x128>)
#endif

#ifdef MUX_ENABLE
  	i2c_bus = new_smbus(&hi2c1, JETSON_UART);
 8003b92:	4e3d      	ldr	r6, [pc, #244]	; (8003c88 <main_preloop+0x12c>)
	auto_shut_copy = (char *)malloc(30);
 8003b94:	6018      	str	r0, [r3, #0]
  	i2c_bus = new_smbus(&hi2c1, JETSON_UART);
 8003b96:	0029      	movs	r1, r5
 8003b98:	0030      	movs	r0, r6
 8003b9a:	f000 fa11 	bl	8003fc0 <new_smbus>
 8003b9e:	4c3b      	ldr	r4, [pc, #236]	; (8003c8c <main_preloop+0x130>)
  	i2c_bus_triad = new_smbus(&hi2c1, JETSON_UART);
 8003ba0:	0029      	movs	r1, r5
  	i2c_bus = new_smbus(&hi2c1, JETSON_UART);
 8003ba2:	6020      	str	r0, [r4, #0]
  	i2c_bus_triad = new_smbus(&hi2c1, JETSON_UART);
 8003ba4:	0030      	movs	r0, r6
 8003ba6:	f000 fa0b 	bl	8003fc0 <new_smbus>
 8003baa:	4e39      	ldr	r6, [pc, #228]	; (8003c90 <main_preloop+0x134>)
 8003bac:	6030      	str	r0, [r6, #0]
  	disable_DMA(i2c_bus);
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	f000 fa1a 	bl	8003fe8 <disable_DMA>
  	disable_DMA(i2c_bus_triad);
 8003bb4:	6830      	ldr	r0, [r6, #0]
 8003bb6:	f000 fa17 	bl	8003fe8 <disable_DMA>
  	mux = new_mux(i2c_bus);
 8003bba:	6820      	ldr	r0, [r4, #0]
 8003bbc:	f000 f970 	bl	8003ea0 <new_mux>
 8003bc0:	4d34      	ldr	r5, [pc, #208]	; (8003c94 <main_preloop+0x138>)
 8003bc2:	6028      	str	r0, [r5, #0]
  	mux_triad = new_mux(i2c_bus_triad);
 8003bc4:	6830      	ldr	r0, [r6, #0]
 8003bc6:	f000 f96b 	bl	8003ea0 <new_mux>
 8003bca:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <main_preloop+0x13c>)

#endif

#ifdef SERVO_ENABLE
  	write_angle(INITIAL_SERVO_0_ANGLE, 0);
 8003bcc:	2100      	movs	r1, #0
  	mux_triad = new_mux(i2c_bus_triad);
 8003bce:	6018      	str	r0, [r3, #0]
  	write_angle(INITIAL_SERVO_0_ANGLE, 0);
 8003bd0:	2050      	movs	r0, #80	; 0x50
 8003bd2:	f000 f98b 	bl	8003eec <write_angle>
	write_angle(INITIAL_SERVO_1_ANGLE, 1);
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	2064      	movs	r0, #100	; 0x64
 8003bda:	f000 f987 	bl	8003eec <write_angle>
	write_angle(INITIAL_SERVO_2_ANGLE, 2);
 8003bde:	2102      	movs	r1, #2
 8003be0:	2064      	movs	r0, #100	; 0x64
 8003be2:	f000 f983 	bl	8003eec <write_angle>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003be6:	4e2d      	ldr	r6, [pc, #180]	; (8003c9c <main_preloop+0x140>)
 8003be8:	2100      	movs	r1, #0
 8003bea:	0030      	movs	r0, r6
 8003bec:	f004 f936 	bl	8007e5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	0030      	movs	r0, r6
 8003bf4:	f004 f932 	bl	8007e5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003bf8:	2108      	movs	r1, #8
 8003bfa:	0030      	movs	r0, r6
 8003bfc:	f004 f92e 	bl	8007e5c <HAL_TIM_PWM_Start>
	servo_copy = (char *)malloc(30);
 8003c00:	201e      	movs	r0, #30
 8003c02:	f005 fd2b 	bl	800965c <malloc>
 8003c06:	4b26      	ldr	r3, [pc, #152]	; (8003ca0 <main_preloop+0x144>)
 8003c08:	6018      	str	r0, [r3, #0]
#endif

#ifdef SPECTRAL_ENABLE
	HAL_Delay(500);
 8003c0a:	20fa      	movs	r0, #250	; 0xfa
 8003c0c:	0040      	lsls	r0, r0, #1
 8003c0e:	f000 ffaf 	bl	8004b70 <HAL_Delay>

  	spectral_exists = 1;
 8003c12:	2201      	movs	r2, #1
 8003c14:	4b23      	ldr	r3, [pc, #140]	; (8003ca4 <main_preloop+0x148>)

	spectral = new_spectral(i2c_bus);
 8003c16:	6820      	ldr	r0, [r4, #0]
  	spectral_exists = 1;
 8003c18:	601a      	str	r2, [r3, #0]
	spectral = new_spectral(i2c_bus);
 8003c1a:	f000 fad7 	bl	80041cc <new_spectral>
 8003c1e:	4c22      	ldr	r4, [pc, #136]	; (8003ca8 <main_preloop+0x14c>)
 8003c20:	4b22      	ldr	r3, [pc, #136]	; (8003cac <main_preloop+0x150>)
 8003c22:	0026      	movs	r6, r4
 8003c24:	6018      	str	r0, [r3, #0]

	// adds all the spectral channels
	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 8003c26:	360c      	adds	r6, #12
		add_channel(mux, spectral_channels[i]);
 8003c28:	cc02      	ldmia	r4!, {r1}
 8003c2a:	6828      	ldr	r0, [r5, #0]
 8003c2c:	f000 f948 	bl	8003ec0 <add_channel>
	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 8003c30:	42b4      	cmp	r4, r6
 8003c32:	d1f9      	bne.n	8003c28 <main_preloop+0xcc>
	}

	initialize_spectral();
 8003c34:	f000 fb7a 	bl	800432c <initialize_spectral>

#endif

#ifdef HBRIDGE_MOTOR_ENABLE
	hbridge_motor = new_motor(HBRIDGE_FWD_GPIO_Port, HBRIDGE_FWD_Pin, HBRIDGE_BWD_GPIO_Port, HBRIDGE_BWD_Pin, &htim3);
 8003c38:	22a0      	movs	r2, #160	; 0xa0
 8003c3a:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <main_preloop+0x154>)
 8003c3c:	05d2      	lsls	r2, r2, #23
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	2380      	movs	r3, #128	; 0x80
 8003c44:	481b      	ldr	r0, [pc, #108]	; (8003cb4 <main_preloop+0x158>)
 8003c46:	f7ff fa29 	bl	800309c <new_motor>
 8003c4a:	4c1b      	ldr	r4, [pc, #108]	; (8003cb8 <main_preloop+0x15c>)
	start(hbridge_motor, TIM_CHANNEL_1);
 8003c4c:	2100      	movs	r1, #0
	hbridge_motor = new_motor(HBRIDGE_FWD_GPIO_Port, HBRIDGE_FWD_Pin, HBRIDGE_BWD_GPIO_Port, HBRIDGE_BWD_Pin, &htim3);
 8003c4e:	6020      	str	r0, [r4, #0]
	start(hbridge_motor, TIM_CHANNEL_1);
 8003c50:	f7ff fa34 	bl	80030bc <start>
	set_speed(hbridge_motor, 0);
 8003c54:	6820      	ldr	r0, [r4, #0]
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f7ff fa35 	bl	80030c8 <set_speed>

	initialize_triad();
#endif

	return 0;
}
 8003c5e:	2000      	movs	r0, #0
 8003c60:	b002      	add	sp, #8
 8003c62:	bd70      	pop	{r4, r5, r6, pc}
 8003c64:	200004ac 	.word	0x200004ac
 8003c68:	2000029c 	.word	0x2000029c
 8003c6c:	14000020 	.word	0x14000020
 8003c70:	10000010 	.word	0x10000010
 8003c74:	0c000008 	.word	0x0c000008
 8003c78:	200005b4 	.word	0x200005b4
 8003c7c:	20000460 	.word	0x20000460
 8003c80:	20000570 	.word	0x20000570
 8003c84:	2000055c 	.word	0x2000055c
 8003c88:	2000037c 	.word	0x2000037c
 8003c8c:	20000580 	.word	0x20000580
 8003c90:	200005c4 	.word	0x200005c4
 8003c94:	20000584 	.word	0x20000584
 8003c98:	200005c8 	.word	0x200005c8
 8003c9c:	200003c8 	.word	0x200003c8
 8003ca0:	2000057c 	.word	0x2000057c
 8003ca4:	20000578 	.word	0x20000578
 8003ca8:	20000078 	.word	0x20000078
 8003cac:	20000588 	.word	0x20000588
 8003cb0:	20000414 	.word	0x20000414
 8003cb4:	50000800 	.word	0x50000800
 8003cb8:	20000294 	.word	0x20000294

08003cbc <enable_pin>:

int led_state = NONE_STATE;
int green_on = DISABLED;
uint16_t ms_tick = 0;

void enable_pin(int enable, GPIO_TypeDef *port, uint16_t pin){
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	b510      	push	{r4, lr}
 8003cc0:	0008      	movs	r0, r1
 8003cc2:	0011      	movs	r1, r2
    if (enable){
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <enable_pin+0x14>
         HAL_GPIO_WritePin(port,pin, GPIO_PIN_SET);
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f001 fed7 	bl	8005a7c <HAL_GPIO_WritePin>
    }
    else {
        HAL_GPIO_WritePin(port,pin,GPIO_PIN_RESET);
    }
}
 8003cce:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(port,pin,GPIO_PIN_RESET);
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f001 fed3 	bl	8005a7c <HAL_GPIO_WritePin>
}
 8003cd6:	e7fa      	b.n	8003cce <enable_pin+0x12>

08003cd8 <receive_mosfet_cmd>:

void receive_mosfet_cmd(uint8_t *buffer, int *device,int*enable, char*mosfet_copy){
 8003cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cda:	001c      	movs	r4, r3

  //Change to string
  char delim[] = ",";
 8003cdc:	232c      	movs	r3, #44	; 0x2c
void receive_mosfet_cmd(uint8_t *buffer, int *device,int*enable, char*mosfet_copy){
 8003cde:	b083      	sub	sp, #12
  char delim[] = ",";
 8003ce0:	ad01      	add	r5, sp, #4
void receive_mosfet_cmd(uint8_t *buffer, int *device,int*enable, char*mosfet_copy){
 8003ce2:	000f      	movs	r7, r1
 8003ce4:	0016      	movs	r6, r2

  strncpy(mosfet_copy, buffer,30);
 8003ce6:	0001      	movs	r1, r0
 8003ce8:	221e      	movs	r2, #30
 8003cea:	0020      	movs	r0, r4
  char delim[] = ",";
 8003cec:	802b      	strh	r3, [r5, #0]
  strncpy(mosfet_copy, buffer,30);
 8003cee:	f006 fa53 	bl	800a198 <strncpy>
  if (mosfet_copy == NULL) {
  	return;
  }

  //Expected $MOSFET,<devicenum>,<enablenum>
  char *identifier = strtok(mosfet_copy,delim);
 8003cf2:	0029      	movs	r1, r5
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	f006 fa63 	bl	800a1c0 <strtok>
  if (!strcmp(identifier,"$MOSFET")){
 8003cfa:	490a      	ldr	r1, [pc, #40]	; (8003d24 <receive_mosfet_cmd+0x4c>)
 8003cfc:	f7fc f9fe 	bl	80000fc <strcmp>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d001      	beq.n	8003d08 <receive_mosfet_cmd+0x30>
	  *device = atoi(strtok(NULL,delim));
	  *enable = atoi(strtok(NULL,delim));
  }
}
 8003d04:	b003      	add	sp, #12
 8003d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  *device = atoi(strtok(NULL,delim));
 8003d08:	0029      	movs	r1, r5
 8003d0a:	f006 fa59 	bl	800a1c0 <strtok>
 8003d0e:	f005 fc75 	bl	80095fc <atoi>
	  *enable = atoi(strtok(NULL,delim));
 8003d12:	0029      	movs	r1, r5
	  *device = atoi(strtok(NULL,delim));
 8003d14:	6038      	str	r0, [r7, #0]
	  *enable = atoi(strtok(NULL,delim));
 8003d16:	2000      	movs	r0, #0
 8003d18:	f006 fa52 	bl	800a1c0 <strtok>
 8003d1c:	f005 fc6e 	bl	80095fc <atoi>
 8003d20:	6030      	str	r0, [r6, #0]
 8003d22:	e7ef      	b.n	8003d04 <receive_mosfet_cmd+0x2c>
 8003d24:	0800cd70 	.word	0x0800cd70

08003d28 <receive_led_cmd>:

void receive_led_cmd(uint8_t *buffer, int *color_state, char*led_copy){
 8003d28:	b570      	push	{r4, r5, r6, lr}
 8003d2a:	0014      	movs	r4, r2

  //Change to string
  char delim[] = ",";
 8003d2c:	232c      	movs	r3, #44	; 0x2c
void receive_led_cmd(uint8_t *buffer, int *color_state, char*led_copy){
 8003d2e:	b082      	sub	sp, #8

  strncpy(led_copy, buffer,30);
 8003d30:	221e      	movs	r2, #30
  char delim[] = ",";
 8003d32:	ae01      	add	r6, sp, #4
void receive_led_cmd(uint8_t *buffer, int *color_state, char*led_copy){
 8003d34:	000d      	movs	r5, r1
  strncpy(led_copy, buffer,30);
 8003d36:	0001      	movs	r1, r0
 8003d38:	0020      	movs	r0, r4
  char delim[] = ",";
 8003d3a:	8033      	strh	r3, [r6, #0]
  strncpy(led_copy, buffer,30);
 8003d3c:	f006 fa2c 	bl	800a198 <strncpy>
  if (led_copy == NULL) {
  	return;
  }

  //Expected $MOSFET,<devicenum>,<enablenum>
  char *identifier = strtok(led_copy,delim);
 8003d40:	0031      	movs	r1, r6
 8003d42:	0020      	movs	r0, r4
 8003d44:	f006 fa3c 	bl	800a1c0 <strtok>
  if (!strcmp(identifier,"$LED")){
 8003d48:	4906      	ldr	r1, [pc, #24]	; (8003d64 <receive_led_cmd+0x3c>)
 8003d4a:	f7fc f9d7 	bl	80000fc <strcmp>
 8003d4e:	2800      	cmp	r0, #0
 8003d50:	d001      	beq.n	8003d56 <receive_led_cmd+0x2e>
	  *color_state = atoi(strtok(NULL,delim));
  }
}
 8003d52:	b002      	add	sp, #8
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
	  *color_state = atoi(strtok(NULL,delim));
 8003d56:	0031      	movs	r1, r6
 8003d58:	f006 fa32 	bl	800a1c0 <strtok>
 8003d5c:	f005 fc4e 	bl	80095fc <atoi>
 8003d60:	6028      	str	r0, [r5, #0]
 8003d62:	e7f6      	b.n	8003d52 <receive_led_cmd+0x2a>
 8003d64:	0800cd78 	.word	0x0800cd78

08003d68 <receive_auto_shutoff_cmd>:

void receive_auto_shutoff_cmd(uint8_t *buffer, int *enable, char* shutdowncopy){
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	0014      	movs	r4, r2
	//Change to string
	char delim[] = ",";
 8003d6c:	232c      	movs	r3, #44	; 0x2c
void receive_auto_shutoff_cmd(uint8_t *buffer, int *enable, char* shutdowncopy){
 8003d6e:	b082      	sub	sp, #8

	strncpy(shutdowncopy, buffer,30);
 8003d70:	221e      	movs	r2, #30
	char delim[] = ",";
 8003d72:	ae01      	add	r6, sp, #4
void receive_auto_shutoff_cmd(uint8_t *buffer, int *enable, char* shutdowncopy){
 8003d74:	000d      	movs	r5, r1
	strncpy(shutdowncopy, buffer,30);
 8003d76:	0001      	movs	r1, r0
 8003d78:	0020      	movs	r0, r4
	char delim[] = ",";
 8003d7a:	8033      	strh	r3, [r6, #0]
	strncpy(shutdowncopy, buffer,30);
 8003d7c:	f006 fa0c 	bl	800a198 <strncpy>

	if (shutdowncopy == NULL) {
		return;
	}
	//Expected $AUTOSHUTOFF,<devicenum>,<enablenum>
	char *identifier = strtok(shutdowncopy,delim);
 8003d80:	0031      	movs	r1, r6
 8003d82:	0020      	movs	r0, r4
 8003d84:	f006 fa1c 	bl	800a1c0 <strtok>
	if (!strcmp(identifier,"$AUTOSHUTOFF")){
 8003d88:	4906      	ldr	r1, [pc, #24]	; (8003da4 <receive_auto_shutoff_cmd+0x3c>)
 8003d8a:	f7fc f9b7 	bl	80000fc <strcmp>
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d001      	beq.n	8003d96 <receive_auto_shutoff_cmd+0x2e>
		*enable = atoi(strtok(NULL,delim));
	}
}
 8003d92:	b002      	add	sp, #8
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
		*enable = atoi(strtok(NULL,delim));
 8003d96:	0031      	movs	r1, r6
 8003d98:	f006 fa12 	bl	800a1c0 <strtok>
 8003d9c:	f005 fc2e 	bl	80095fc <atoi>
 8003da0:	6028      	str	r0, [r5, #0]
 8003da2:	e7f6      	b.n	8003d92 <receive_auto_shutoff_cmd+0x2a>
 8003da4:	0800cd80 	.word	0x0800cd80

08003da8 <send_auto_shutoff_state>:
void send_auto_shutoff_state(UART_HandleTypeDef* huart){
	char string[30] = "";
 8003da8:	2300      	movs	r3, #0
void send_auto_shutoff_state(UART_HandleTypeDef* huart){
 8003daa:	b510      	push	{r4, lr}
 8003dac:	b088      	sub	sp, #32
 8003dae:	0004      	movs	r4, r0
	char string[30] = "";
 8003db0:	221a      	movs	r2, #26
 8003db2:	2100      	movs	r1, #0
 8003db4:	a801      	add	r0, sp, #4
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	f005 fc63 	bl	8009682 <memset>
	sprintf((char *)string, "$AUTOSHUTOFF,%i,\n",auto_shutoff);
 8003dbc:	4b09      	ldr	r3, [pc, #36]	; (8003de4 <send_auto_shutoff_state+0x3c>)
 8003dbe:	490a      	ldr	r1, [pc, #40]	; (8003de8 <send_auto_shutoff_state+0x40>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4668      	mov	r0, sp
 8003dc4:	f006 f9c8 	bl	800a158 <siprintf>
	HAL_Delay(300);
 8003dc8:	2096      	movs	r0, #150	; 0x96
 8003dca:	0040      	lsls	r0, r0, #1
 8003dcc:	f000 fed0 	bl	8004b70 <HAL_Delay>
	HAL_UART_Transmit_IT(huart, (uint8_t *)string, sizeof(string));
 8003dd0:	221e      	movs	r2, #30
 8003dd2:	4669      	mov	r1, sp
 8003dd4:	0020      	movs	r0, r4
 8003dd6:	f004 fc29 	bl	800862c <HAL_UART_Transmit_IT>
	HAL_Delay(15);
 8003dda:	200f      	movs	r0, #15
 8003ddc:	f000 fec8 	bl	8004b70 <HAL_Delay>
}
 8003de0:	b008      	add	sp, #32
 8003de2:	bd10      	pop	{r4, pc}
 8003de4:	20000000 	.word	0x20000000
 8003de8:	0800cd90 	.word	0x0800cd90

08003dec <send_heater_state>:

// Send the state of each heater(on/off)
// Changes on heater on/off
void send_heater_state(UART_HandleTypeDef* huart,int device,int enable){
 8003dec:	b570      	push	{r4, r5, r6, lr}
	char string[30] = "";
 8003dee:	2300      	movs	r3, #0
void send_heater_state(UART_HandleTypeDef* huart,int device,int enable){
 8003df0:	000d      	movs	r5, r1
 8003df2:	0016      	movs	r6, r2
 8003df4:	b088      	sub	sp, #32
 8003df6:	0004      	movs	r4, r0
	char string[30] = "";
 8003df8:	221a      	movs	r2, #26
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	a801      	add	r0, sp, #4
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	f005 fc3f 	bl	8009682 <memset>
	sprintf((char *)string, "$HEATER,%i,%i,\n",device,enable);
 8003e04:	0033      	movs	r3, r6
 8003e06:	002a      	movs	r2, r5
 8003e08:	4908      	ldr	r1, [pc, #32]	; (8003e2c <send_heater_state+0x40>)
 8003e0a:	4668      	mov	r0, sp
 8003e0c:	f006 f9a4 	bl	800a158 <siprintf>
	HAL_Delay(500);
 8003e10:	20fa      	movs	r0, #250	; 0xfa
 8003e12:	0040      	lsls	r0, r0, #1
 8003e14:	f000 feac 	bl	8004b70 <HAL_Delay>
	HAL_UART_Transmit_IT(huart, (uint8_t *)string, sizeof(string));
 8003e18:	221e      	movs	r2, #30
 8003e1a:	4669      	mov	r1, sp
 8003e1c:	0020      	movs	r0, r4
 8003e1e:	f004 fc05 	bl	800862c <HAL_UART_Transmit_IT>
	HAL_Delay(15);
 8003e22:	200f      	movs	r0, #15
 8003e24:	f000 fea4 	bl	8004b70 <HAL_Delay>
}
 8003e28:	b008      	add	sp, #32
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}
 8003e2c:	0800cda4 	.word	0x0800cda4

08003e30 <LED_tick>:

void LED_tick() {
	if (led_state != GREEN_STATE) {
 8003e30:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <LED_tick+0x58>)
void LED_tick() {
 8003e32:	b510      	push	{r4, lr}
	if (led_state != GREEN_STATE) {
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d115      	bne.n	8003e66 <LED_tick+0x36>
		return;
	}
	ms_tick += 1;
 8003e3a:	4b14      	ldr	r3, [pc, #80]	; (8003e8c <LED_tick+0x5c>)
	if (ms_tick >= 60000)
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <LED_tick+0x60>)
	ms_tick += 1;
 8003e3e:	8818      	ldrh	r0, [r3, #0]
 8003e40:	3001      	adds	r0, #1
 8003e42:	b280      	uxth	r0, r0
 8003e44:	8018      	strh	r0, [r3, #0]
	if (ms_tick >= 60000)
 8003e46:	4290      	cmp	r0, r2
 8003e48:	d90e      	bls.n	8003e68 <LED_tick+0x38>
	{
		// after 60 seconds, reset ms_tick so we don't get overflow
		ms_tick = 0;
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	801a      	strh	r2, [r3, #0]
	}
	int green_should_be_on = ms_tick % 2000 < 1000;
	if (green_should_be_on)
	{
		// in the middle of every even second, turn on
		if (green_on == ENABLED)
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <LED_tick+0x64>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	2a01      	cmp	r2, #1
 8003e54:	d007      	beq.n	8003e66 <LED_tick+0x36>
		{
			return;
		}
		green_on = ENABLED;
 8003e56:	2201      	movs	r2, #1
		// in the middle of every odd second, turn off
		if (green_on == DISABLED)
		{
			return;
		}
		green_on = DISABLED;
 8003e58:	601a      	str	r2, [r3, #0]
		enable_pin(DISABLED, port_array[GREEN_LED], pin_array[GREEN_LED]);
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <LED_tick+0x68>)
        HAL_GPIO_WritePin(port,pin,GPIO_PIN_RESET);
 8003e5c:	8919      	ldrh	r1, [r3, #8]
		enable_pin(DISABLED, port_array[GREEN_LED], pin_array[GREEN_LED]);
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <LED_tick+0x6c>)
        HAL_GPIO_WritePin(port,pin,GPIO_PIN_RESET);
 8003e60:	6918      	ldr	r0, [r3, #16]
 8003e62:	f001 fe0b 	bl	8005a7c <HAL_GPIO_WritePin>
	}
}
 8003e66:	bd10      	pop	{r4, pc}
	int green_should_be_on = ms_tick % 2000 < 1000;
 8003e68:	21fa      	movs	r1, #250	; 0xfa
 8003e6a:	00c9      	lsls	r1, r1, #3
 8003e6c:	f7fc f9f2 	bl	8000254 <__aeabi_uidivmod>
	if (green_should_be_on)
 8003e70:	23fa      	movs	r3, #250	; 0xfa
 8003e72:	b289      	uxth	r1, r1
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4299      	cmp	r1, r3
 8003e78:	d3e9      	bcc.n	8003e4e <LED_tick+0x1e>
		if (green_on == DISABLED)
 8003e7a:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <LED_tick+0x64>)
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	2a00      	cmp	r2, #0
 8003e80:	d0f1      	beq.n	8003e66 <LED_tick+0x36>
		green_on = DISABLED;
 8003e82:	2200      	movs	r2, #0
 8003e84:	e7e8      	b.n	8003e58 <LED_tick+0x28>
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	20000004 	.word	0x20000004
 8003e8c:	20000574 	.word	0x20000574
 8003e90:	0000ea5f 	.word	0x0000ea5f
 8003e94:	20000560 	.word	0x20000560
 8003e98:	20000008 	.word	0x20000008
 8003e9c:	20000020 	.word	0x20000020

08003ea0 <new_mux>:

int channel_map[8] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80 };
int spectral_exists = 0;
int triad_exists = 0;

Mux *new_mux(SMBus *i2c_bus) {
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	0005      	movs	r5, r0
    Mux *mux = malloc(sizeof(Mux));
 8003ea4:	2028      	movs	r0, #40	; 0x28
 8003ea6:	f005 fbd9 	bl	800965c <malloc>
    mux->i2c_bus = i2c_bus;
    for (int i = 0; i < 8; ++i) {
        mux->channel_list[i] = 0x00;
 8003eaa:	2220      	movs	r2, #32
    Mux *mux = malloc(sizeof(Mux));
 8003eac:	0004      	movs	r4, r0
        mux->channel_list[i] = 0x00;
 8003eae:	2100      	movs	r1, #0
    mux->i2c_bus = i2c_bus;
 8003eb0:	c020      	stmia	r0!, {r5}
        mux->channel_list[i] = 0x00;
 8003eb2:	f005 fbe6 	bl	8009682 <memset>
    }
    mux->channels_active = 0;
 8003eb6:	2300      	movs	r3, #0

    return mux;
}
 8003eb8:	0020      	movs	r0, r4
    mux->channels_active = 0;
 8003eba:	6263      	str	r3, [r4, #36]	; 0x24
}
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)

08003ec0 <add_channel>:

void add_channel(Mux *mux, int channel) {
    if (channel > 7) {
 8003ec0:	2907      	cmp	r1, #7
 8003ec2:	dc07      	bgt.n	8003ed4 <add_channel+0x14>
        return;
    }
    mux->channel_list[channel] = channel_map[channel];
 8003ec4:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <add_channel+0x18>)
 8003ec6:	0089      	lsls	r1, r1, #2
 8003ec8:	588a      	ldr	r2, [r1, r2]
 8003eca:	1843      	adds	r3, r0, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    mux->channels_active += 1;
 8003ece:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	6243      	str	r3, [r0, #36]	; 0x24
}
 8003ed4:	4770      	bx	lr
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	20000058 	.word	0x20000058

08003edc <channel_select>:

void channel_select(Mux *mux, int channel){
 8003edc:	b510      	push	{r4, lr}
    write_byte_data(mux->i2c_bus, I2C_MUX_ADDRESS, MUX_CMD, channel);
 8003ede:	b2cb      	uxtb	r3, r1
 8003ee0:	22cc      	movs	r2, #204	; 0xcc
 8003ee2:	2170      	movs	r1, #112	; 0x70
 8003ee4:	6800      	ldr	r0, [r0, #0]
 8003ee6:	f000 f8c9 	bl	800407c <write_byte_data>
}
 8003eea:	bd10      	pop	{r4, pc}

08003eec <write_angle>:
 *      Author: Sashreek
 */

#include "servo.h"

void write_angle(int angle, int servo_num){
 8003eec:	b510      	push	{r4, lr}

	if (servo_num == 0){
 8003eee:	2900      	cmp	r1, #0
 8003ef0:	d106      	bne.n	8003f00 <write_angle+0x14>
		TIM1->CCR1 = (angle/18)+15;
 8003ef2:	3112      	adds	r1, #18
 8003ef4:	f7fc f9b2 	bl	800025c <__divsi3>
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <write_angle+0x38>)
 8003efa:	300f      	adds	r0, #15
 8003efc:	6358      	str	r0, [r3, #52]	; 0x34
		TIM1->CCR2 = (angle/18)+15;
	}
	else if (servo_num == 2){
		TIM1->CCR3 = (angle/18)+15;
	}
}
 8003efe:	bd10      	pop	{r4, pc}
	else if (servo_num == 1){
 8003f00:	2901      	cmp	r1, #1
 8003f02:	d008      	beq.n	8003f16 <write_angle+0x2a>
	else if (servo_num == 2){
 8003f04:	2902      	cmp	r1, #2
 8003f06:	d1fa      	bne.n	8003efe <write_angle+0x12>
		TIM1->CCR3 = (angle/18)+15;
 8003f08:	3110      	adds	r1, #16
 8003f0a:	f7fc f9a7 	bl	800025c <__divsi3>
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <write_angle+0x38>)
 8003f10:	300f      	adds	r0, #15
 8003f12:	63d8      	str	r0, [r3, #60]	; 0x3c
}
 8003f14:	e7f3      	b.n	8003efe <write_angle+0x12>
		TIM1->CCR2 = (angle/18)+15;
 8003f16:	3111      	adds	r1, #17
 8003f18:	f7fc f9a0 	bl	800025c <__divsi3>
 8003f1c:	4b01      	ldr	r3, [pc, #4]	; (8003f24 <write_angle+0x38>)
 8003f1e:	300f      	adds	r0, #15
 8003f20:	6398      	str	r0, [r3, #56]	; 0x38
 8003f22:	e7ec      	b.n	8003efe <write_angle+0x12>
 8003f24:	40012c00 	.word	0x40012c00

08003f28 <receive_servo_cmd>:

char*servo_copy;

void receive_servo_cmd(uint8_t *buffer, int *angle_0, int *angle_1, int *angle_2, char*servo_copy){
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	001d      	movs	r5, r3

  //Change to string
  char delim[] = ",";
 8003f2c:	232c      	movs	r3, #44	; 0x2c
void receive_servo_cmd(uint8_t *buffer, int *angle_0, int *angle_1, int *angle_2, char*servo_copy){
 8003f2e:	b083      	sub	sp, #12
  char delim[] = ",";
 8003f30:	ac01      	add	r4, sp, #4
void receive_servo_cmd(uint8_t *buffer, int *angle_0, int *angle_1, int *angle_2, char*servo_copy){
 8003f32:	000f      	movs	r7, r1
 8003f34:	0016      	movs	r6, r2

  strncpy(servo_copy, buffer,30);
 8003f36:	0001      	movs	r1, r0
 8003f38:	221e      	movs	r2, #30
 8003f3a:	9808      	ldr	r0, [sp, #32]
  char delim[] = ",";
 8003f3c:	8023      	strh	r3, [r4, #0]
  strncpy(servo_copy, buffer,30);
 8003f3e:	f006 f92b 	bl	800a198 <strncpy>
  if (servo_copy == NULL) {
  	return;
  }

  //Expected $SERVO,<angle_0>,<angle_1>,<angle_2>
  char *identifier = strtok(servo_copy,delim);
 8003f42:	0021      	movs	r1, r4
 8003f44:	9808      	ldr	r0, [sp, #32]
 8003f46:	f006 f93b 	bl	800a1c0 <strtok>
  if (!strcmp(identifier,"$SERVO")){
 8003f4a:	490e      	ldr	r1, [pc, #56]	; (8003f84 <receive_servo_cmd+0x5c>)
 8003f4c:	f7fc f8d6 	bl	80000fc <strcmp>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d001      	beq.n	8003f58 <receive_servo_cmd+0x30>
	  *angle_0 = atoi(strtok(NULL,delim));
	  *angle_1 = atoi(strtok(NULL,delim));
	  *angle_2 = atoi(strtok(NULL,delim));
  }
}
 8003f54:	b003      	add	sp, #12
 8003f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  *angle_0 = atoi(strtok(NULL,delim));
 8003f58:	0021      	movs	r1, r4
 8003f5a:	f006 f931 	bl	800a1c0 <strtok>
 8003f5e:	f005 fb4d 	bl	80095fc <atoi>
	  *angle_1 = atoi(strtok(NULL,delim));
 8003f62:	0021      	movs	r1, r4
	  *angle_0 = atoi(strtok(NULL,delim));
 8003f64:	6038      	str	r0, [r7, #0]
	  *angle_1 = atoi(strtok(NULL,delim));
 8003f66:	2000      	movs	r0, #0
 8003f68:	f006 f92a 	bl	800a1c0 <strtok>
 8003f6c:	f005 fb46 	bl	80095fc <atoi>
	  *angle_2 = atoi(strtok(NULL,delim));
 8003f70:	0021      	movs	r1, r4
	  *angle_1 = atoi(strtok(NULL,delim));
 8003f72:	6030      	str	r0, [r6, #0]
	  *angle_2 = atoi(strtok(NULL,delim));
 8003f74:	2000      	movs	r0, #0
 8003f76:	f006 f923 	bl	800a1c0 <strtok>
 8003f7a:	f005 fb3f 	bl	80095fc <atoi>
 8003f7e:	6028      	str	r0, [r5, #0]
 8003f80:	e7e8      	b.n	8003f54 <receive_servo_cmd+0x2c>
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	0800cdb4 	.word	0x0800cdb4

08003f88 <_check_error.part.0>:
    }
    
    _check_error(smbus);
}

int _check_error(SMBus *smbus) {
 8003f88:	b570      	push	{r4, r5, r6, lr}
 8003f8a:	0004      	movs	r4, r0
    if (smbus->ret != HAL_OK) {
		reset(smbus);
    	//uint32_t errorCode = HAL_I2C_GetError(smbus->i2c);
		strcpy((char*)smbus->buf, "Err \r\n");
 8003f8c:	0025      	movs	r5, r4
    }
    return TRUE;
}

void reset(SMBus *smbus) {
    HAL_I2C_DeInit(smbus->i2c);
 8003f8e:	6800      	ldr	r0, [r0, #0]
 8003f90:	f001 fec4 	bl	8005d1c <HAL_I2C_DeInit>
		strcpy((char*)smbus->buf, "Err \r\n");
 8003f94:	3509      	adds	r5, #9
    HAL_I2C_Init(smbus->i2c);
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	f001 fe66 	bl	8005c68 <HAL_I2C_Init>
		strcpy((char*)smbus->buf, "Err \r\n");
 8003f9c:	0028      	movs	r0, r5
 8003f9e:	2207      	movs	r2, #7
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <_check_error.part.0+0x34>)
 8003fa2:	f005 fb65 	bl	8009670 <memcpy>
		HAL_UART_Transmit(smbus->uart, smbus->buf, strlen((char*)smbus->buf), 50);
 8003fa6:	0029      	movs	r1, r5
 8003fa8:	2332      	movs	r3, #50	; 0x32
 8003faa:	2206      	movs	r2, #6
 8003fac:	6860      	ldr	r0, [r4, #4]
 8003fae:	f005 f967 	bl	8009280 <HAL_UART_Transmit>
		HAL_Delay(10);
 8003fb2:	200a      	movs	r0, #10
 8003fb4:	f000 fddc 	bl	8004b70 <HAL_Delay>
}
 8003fb8:	2000      	movs	r0, #0
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	0800cdbc 	.word	0x0800cdbc

08003fc0 <new_smbus>:
SMBus *new_smbus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8003fc0:	b570      	push	{r4, r5, r6, lr}
 8003fc2:	0006      	movs	r6, r0
    SMBus *smbus = malloc(sizeof(SMBus));
 8003fc4:	2028      	movs	r0, #40	; 0x28
SMBus *new_smbus(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart) {
 8003fc6:	000d      	movs	r5, r1
    SMBus *smbus = malloc(sizeof(SMBus));
 8003fc8:	f005 fb48 	bl	800965c <malloc>
    smbus->DMA = TRUE;
 8003fcc:	2327      	movs	r3, #39	; 0x27
 8003fce:	2201      	movs	r2, #1
    SMBus *smbus = malloc(sizeof(SMBus));
 8003fd0:	0004      	movs	r4, r0
    smbus->i2c = hi2c;
 8003fd2:	6006      	str	r6, [r0, #0]
    smbus->uart = huart;
 8003fd4:	6045      	str	r5, [r0, #4]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8003fd6:	2100      	movs	r1, #0
    smbus->DMA = TRUE;
 8003fd8:	54c2      	strb	r2, [r0, r3]
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8003fda:	321d      	adds	r2, #29
 8003fdc:	3009      	adds	r0, #9
 8003fde:	f005 fb50 	bl	8009682 <memset>
}
 8003fe2:	0020      	movs	r0, r4
 8003fe4:	bd70      	pop	{r4, r5, r6, pc}
 8003fe6:	46c0      	nop			; (mov r8, r8)

08003fe8 <disable_DMA>:
    smbus->DMA = FALSE;
 8003fe8:	2327      	movs	r3, #39	; 0x27
 8003fea:	2200      	movs	r2, #0
 8003fec:	54c2      	strb	r2, [r0, r3]
}
 8003fee:	4770      	bx	lr

08003ff0 <read_byte_data>:
    if (!smbus->DMA) {
 8003ff0:	2327      	movs	r3, #39	; 0x27
long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 8003ff2:	b570      	push	{r4, r5, r6, lr}
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 50);
 8003ff4:	0006      	movs	r6, r0
    smbus->buf[0] = cmd;
 8003ff6:	7242      	strb	r2, [r0, #9]
    if (!smbus->DMA) {
 8003ff8:	5cc3      	ldrb	r3, [r0, r3]
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 50);
 8003ffa:	004d      	lsls	r5, r1, #1
long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 8003ffc:	0004      	movs	r4, r0
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 50);
 8003ffe:	0029      	movs	r1, r5
long read_byte_data(SMBus *smbus, uint8_t addr, char cmd) {
 8004000:	b082      	sub	sp, #8
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 50);
 8004002:	3609      	adds	r6, #9
    if (!smbus->DMA) {
 8004004:	2b00      	cmp	r3, #0
 8004006:	d11c      	bne.n	8004042 <read_byte_data+0x52>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 50);
 8004008:	3332      	adds	r3, #50	; 0x32
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	0032      	movs	r2, r6
 800400e:	6800      	ldr	r0, [r0, #0]
 8004010:	3b31      	subs	r3, #49	; 0x31
 8004012:	f001 fe9d 	bl	8005d50 <HAL_I2C_Master_Transmit>
 8004016:	7220      	strb	r0, [r4, #8]
    if (smbus->ret != HAL_OK) {
 8004018:	2800      	cmp	r0, #0
 800401a:	d11a      	bne.n	8004052 <read_byte_data+0x62>
    if (!smbus->DMA) {
 800401c:	2327      	movs	r3, #39	; 0x27
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 50);
 800401e:	2101      	movs	r1, #1
    if (!smbus->DMA) {
 8004020:	5ce3      	ldrb	r3, [r4, r3]
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 50);
 8004022:	4329      	orrs	r1, r5
    if (!smbus->DMA) {
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11d      	bne.n	8004064 <read_byte_data+0x74>
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 50);
 8004028:	3332      	adds	r3, #50	; 0x32
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	0032      	movs	r2, r6
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	3b31      	subs	r3, #49	; 0x31
 8004032:	f001 ff67 	bl	8005f04 <HAL_I2C_Master_Receive>
 8004036:	7220      	strb	r0, [r4, #8]
    if (smbus->ret != HAL_OK) {
 8004038:	2800      	cmp	r0, #0
 800403a:	d11b      	bne.n	8004074 <read_byte_data+0x84>
    return smbus->buf[0];
 800403c:	7a60      	ldrb	r0, [r4, #9]
}
 800403e:	b002      	add	sp, #8
 8004040:	bd70      	pop	{r4, r5, r6, pc}
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8004042:	2301      	movs	r3, #1
 8004044:	0032      	movs	r2, r6
 8004046:	6800      	ldr	r0, [r0, #0]
 8004048:	f002 f838 	bl	80060bc <HAL_I2C_Master_Transmit_DMA>
 800404c:	7220      	strb	r0, [r4, #8]
    if (smbus->ret != HAL_OK) {
 800404e:	2800      	cmp	r0, #0
 8004050:	d0e4      	beq.n	800401c <read_byte_data+0x2c>
 8004052:	0020      	movs	r0, r4
 8004054:	f7ff ff98 	bl	8003f88 <_check_error.part.0>
    if (!smbus->DMA) {
 8004058:	2327      	movs	r3, #39	; 0x27
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 50);
 800405a:	2101      	movs	r1, #1
    if (!smbus->DMA) {
 800405c:	5ce3      	ldrb	r3, [r4, r3]
        smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 1, 50);
 800405e:	4329      	orrs	r1, r5
    if (!smbus->DMA) {
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0e1      	beq.n	8004028 <read_byte_data+0x38>
        smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 1);
 8004064:	2301      	movs	r3, #1
 8004066:	0032      	movs	r2, r6
 8004068:	6820      	ldr	r0, [r4, #0]
 800406a:	f002 f8df 	bl	800622c <HAL_I2C_Master_Receive_DMA>
 800406e:	7220      	strb	r0, [r4, #8]
    if (smbus->ret != HAL_OK) {
 8004070:	2800      	cmp	r0, #0
 8004072:	d0e3      	beq.n	800403c <read_byte_data+0x4c>
 8004074:	0020      	movs	r0, r4
 8004076:	f7ff ff87 	bl	8003f88 <_check_error.part.0>
 800407a:	e7df      	b.n	800403c <read_byte_data+0x4c>

0800407c <write_byte_data>:
void write_byte_data(SMBus *smbus, uint8_t addr, char cmd, uint8_t data) {
 800407c:	b510      	push	{r4, lr}
    smbus->buf[1] = data;
 800407e:	7283      	strb	r3, [r0, #10]
    if (!smbus->DMA) {
 8004080:	2327      	movs	r3, #39	; 0x27
    smbus->buf[0] = cmd;
 8004082:	7242      	strb	r2, [r0, #9]
    if (!smbus->DMA) {
 8004084:	5cc3      	ldrb	r3, [r0, r3]
void write_byte_data(SMBus *smbus, uint8_t addr, char cmd, uint8_t data) {
 8004086:	0004      	movs	r4, r0
 8004088:	b082      	sub	sp, #8
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 2, 50);
 800408a:	0049      	lsls	r1, r1, #1
    if (!smbus->DMA) {
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10c      	bne.n	80040aa <write_byte_data+0x2e>
        smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 2, 50);
 8004090:	0002      	movs	r2, r0
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	6800      	ldr	r0, [r0, #0]
 8004098:	3b30      	subs	r3, #48	; 0x30
 800409a:	3209      	adds	r2, #9
 800409c:	f001 fe58 	bl	8005d50 <HAL_I2C_Master_Transmit>
 80040a0:	7220      	strb	r0, [r4, #8]
    if (smbus->ret != HAL_OK) {
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d10a      	bne.n	80040bc <write_byte_data+0x40>
}
 80040a6:	b002      	add	sp, #8
 80040a8:	bd10      	pop	{r4, pc}
        smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 2);
 80040aa:	0002      	movs	r2, r0
 80040ac:	2302      	movs	r3, #2
 80040ae:	6800      	ldr	r0, [r0, #0]
 80040b0:	3209      	adds	r2, #9
 80040b2:	f002 f803 	bl	80060bc <HAL_I2C_Master_Transmit_DMA>
 80040b6:	7220      	strb	r0, [r4, #8]
    if (smbus->ret != HAL_OK) {
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d0f4      	beq.n	80040a6 <write_byte_data+0x2a>
 80040bc:	0020      	movs	r0, r4
 80040be:	f7ff ff63 	bl	8003f88 <_check_error.part.0>
}
 80040c2:	e7f0      	b.n	80040a6 <write_byte_data+0x2a>

080040c4 <send_spectral_data>:
uint16_t spectral_data[SPECTRAL_DEVICES * CHANNELS];
Mux *mux;

//transmits the spectral data as a sentance
//$SPECTRAL,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,
void send_spectral_data(uint16_t *data, UART_HandleTypeDef * huart){
 80040c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c6:	46c6      	mov	lr, r8
	int channels = 6;
	int devices = SPECTRAL_DEVICES;

	char string[158] = "";
 80040c8:	2500      	movs	r5, #0
void send_spectral_data(uint16_t *data, UART_HandleTypeDef * huart){
 80040ca:	b500      	push	{lr}
 80040cc:	b0d4      	sub	sp, #336	; 0x150
 80040ce:	0006      	movs	r6, r0
	char string[158] = "";
 80040d0:	229a      	movs	r2, #154	; 0x9a
void send_spectral_data(uint16_t *data, UART_HandleTypeDef * huart){
 80040d2:	4688      	mov	r8, r1
	char string[158] = "";
 80040d4:	a82d      	add	r0, sp, #180	; 0xb4
 80040d6:	2100      	movs	r1, #0
 80040d8:	952c      	str	r5, [sp, #176]	; 0xb0

	uint8_t separated_data[36] = {0};
 80040da:	ac23      	add	r4, sp, #140	; 0x8c
	char string[158] = "";
 80040dc:	f005 fad1 	bl	8009682 <memset>
	uint8_t separated_data[36] = {0};
 80040e0:	2100      	movs	r1, #0
 80040e2:	2220      	movs	r2, #32
 80040e4:	a824      	add	r0, sp, #144	; 0x90
 80040e6:	9523      	str	r5, [sp, #140]	; 0x8c
 80040e8:	0027      	movs	r7, r4
 80040ea:	f005 faca 	bl	8009682 <memset>
 80040ee:	2100      	movs	r1, #0
 80040f0:	360c      	adds	r6, #12

	for (uint8_t i = 0; i < devices; ++i) {
		//uint8_t start = i * (channels*6) + 10;
		for (uint8_t j = 0; j < channels; ++j) {
 80040f2:	0033      	movs	r3, r6
void send_spectral_data(uint16_t *data, UART_HandleTypeDef * huart){
 80040f4:	003a      	movs	r2, r7
 80040f6:	3b0c      	subs	r3, #12

			//int temp = (i*2*channels) + (2*j) + 1;
			uint8_t msb = (data[i*channels + j] >> 8) & 0xff;
 80040f8:	8818      	ldrh	r0, [r3, #0]
		for (uint8_t j = 0; j < channels; ++j) {
 80040fa:	3302      	adds	r3, #2
			uint8_t msb = (data[i*channels + j] >> 8) & 0xff;
 80040fc:	0a05      	lsrs	r5, r0, #8
 80040fe:	7015      	strb	r5, [r2, #0]
			uint8_t lsb = (data[i*channels + j]) & 0xff;
 8004100:	7050      	strb	r0, [r2, #1]
		for (uint8_t j = 0; j < channels; ++j) {
 8004102:	3202      	adds	r2, #2
 8004104:	42b3      	cmp	r3, r6
 8004106:	d1f7      	bne.n	80040f8 <send_spectral_data+0x34>
	for (uint8_t i = 0; i < devices; ++i) {
 8004108:	330c      	adds	r3, #12
 800410a:	3106      	adds	r1, #6
 800410c:	001e      	movs	r6, r3
 800410e:	370c      	adds	r7, #12
 8004110:	2912      	cmp	r1, #18
 8004112:	d1ee      	bne.n	80040f2 <send_spectral_data+0x2e>
			  separated_data[0], separated_data[1], separated_data[2], separated_data[3], separated_data[4], separated_data[5], \
			  separated_data[6], separated_data[7], separated_data[8], separated_data[9], separated_data[10], separated_data[11], \
			  separated_data[12], separated_data[13], separated_data[14], separated_data[15], separated_data[16], separated_data[17], \
			  separated_data[18], separated_data[19], separated_data[20], separated_data[21], separated_data[22], separated_data[23], \
			  separated_data[24], separated_data[25], separated_data[26], separated_data[27], separated_data[28], separated_data[29], \
			  separated_data[30], separated_data[31], separated_data[32], separated_data[33], separated_data[34], separated_data[35]);
 8004114:	2123      	movs	r1, #35	; 0x23
	  sprintf((char *)string, "$SPECTRAL,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u, \r\n",\
 8004116:	5c61      	ldrb	r1, [r4, r1]
 8004118:	7863      	ldrb	r3, [r4, #1]
 800411a:	7822      	ldrb	r2, [r4, #0]
 800411c:	9121      	str	r1, [sp, #132]	; 0x84
			  separated_data[30], separated_data[31], separated_data[32], separated_data[33], separated_data[34], separated_data[35]);
 800411e:	2122      	movs	r1, #34	; 0x22
	  sprintf((char *)string, "$SPECTRAL,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u, \r\n",\
 8004120:	5c61      	ldrb	r1, [r4, r1]
 8004122:	a82c      	add	r0, sp, #176	; 0xb0
 8004124:	9120      	str	r1, [sp, #128]	; 0x80
			  separated_data[30], separated_data[31], separated_data[32], separated_data[33], separated_data[34], separated_data[35]);
 8004126:	2121      	movs	r1, #33	; 0x21
	  sprintf((char *)string, "$SPECTRAL,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u, \r\n",\
 8004128:	5c61      	ldrb	r1, [r4, r1]
 800412a:	911f      	str	r1, [sp, #124]	; 0x7c
			  separated_data[30], separated_data[31], separated_data[32], separated_data[33], separated_data[34], separated_data[35]);
 800412c:	2120      	movs	r1, #32
	  sprintf((char *)string, "$SPECTRAL,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u, \r\n",\
 800412e:	5c61      	ldrb	r1, [r4, r1]
 8004130:	911e      	str	r1, [sp, #120]	; 0x78
 8004132:	7fe1      	ldrb	r1, [r4, #31]
 8004134:	911d      	str	r1, [sp, #116]	; 0x74
 8004136:	7fa1      	ldrb	r1, [r4, #30]
 8004138:	911c      	str	r1, [sp, #112]	; 0x70
 800413a:	7f61      	ldrb	r1, [r4, #29]
 800413c:	911b      	str	r1, [sp, #108]	; 0x6c
 800413e:	7f21      	ldrb	r1, [r4, #28]
 8004140:	911a      	str	r1, [sp, #104]	; 0x68
 8004142:	7ee1      	ldrb	r1, [r4, #27]
 8004144:	9119      	str	r1, [sp, #100]	; 0x64
 8004146:	7ea1      	ldrb	r1, [r4, #26]
 8004148:	9118      	str	r1, [sp, #96]	; 0x60
 800414a:	7e61      	ldrb	r1, [r4, #25]
 800414c:	9117      	str	r1, [sp, #92]	; 0x5c
 800414e:	7e21      	ldrb	r1, [r4, #24]
 8004150:	9116      	str	r1, [sp, #88]	; 0x58
 8004152:	7de1      	ldrb	r1, [r4, #23]
 8004154:	9115      	str	r1, [sp, #84]	; 0x54
 8004156:	7da1      	ldrb	r1, [r4, #22]
 8004158:	9114      	str	r1, [sp, #80]	; 0x50
 800415a:	7d61      	ldrb	r1, [r4, #21]
 800415c:	9113      	str	r1, [sp, #76]	; 0x4c
 800415e:	7d21      	ldrb	r1, [r4, #20]
 8004160:	9112      	str	r1, [sp, #72]	; 0x48
 8004162:	7ce1      	ldrb	r1, [r4, #19]
 8004164:	9111      	str	r1, [sp, #68]	; 0x44
 8004166:	7ca1      	ldrb	r1, [r4, #18]
 8004168:	9110      	str	r1, [sp, #64]	; 0x40
 800416a:	7c61      	ldrb	r1, [r4, #17]
 800416c:	910f      	str	r1, [sp, #60]	; 0x3c
 800416e:	7c21      	ldrb	r1, [r4, #16]
 8004170:	910e      	str	r1, [sp, #56]	; 0x38
 8004172:	7be1      	ldrb	r1, [r4, #15]
 8004174:	910d      	str	r1, [sp, #52]	; 0x34
 8004176:	7ba1      	ldrb	r1, [r4, #14]
 8004178:	910c      	str	r1, [sp, #48]	; 0x30
 800417a:	7b61      	ldrb	r1, [r4, #13]
 800417c:	910b      	str	r1, [sp, #44]	; 0x2c
 800417e:	7b21      	ldrb	r1, [r4, #12]
 8004180:	910a      	str	r1, [sp, #40]	; 0x28
 8004182:	7ae1      	ldrb	r1, [r4, #11]
 8004184:	9109      	str	r1, [sp, #36]	; 0x24
 8004186:	7aa1      	ldrb	r1, [r4, #10]
 8004188:	9108      	str	r1, [sp, #32]
 800418a:	7a61      	ldrb	r1, [r4, #9]
 800418c:	9107      	str	r1, [sp, #28]
 800418e:	7a21      	ldrb	r1, [r4, #8]
 8004190:	9106      	str	r1, [sp, #24]
 8004192:	79e1      	ldrb	r1, [r4, #7]
 8004194:	9105      	str	r1, [sp, #20]
 8004196:	79a1      	ldrb	r1, [r4, #6]
 8004198:	9104      	str	r1, [sp, #16]
 800419a:	7961      	ldrb	r1, [r4, #5]
 800419c:	9103      	str	r1, [sp, #12]
 800419e:	7921      	ldrb	r1, [r4, #4]
 80041a0:	9102      	str	r1, [sp, #8]
 80041a2:	78e1      	ldrb	r1, [r4, #3]
 80041a4:	9101      	str	r1, [sp, #4]
 80041a6:	78a1      	ldrb	r1, [r4, #2]
 80041a8:	9100      	str	r1, [sp, #0]
 80041aa:	4907      	ldr	r1, [pc, #28]	; (80041c8 <send_spectral_data+0x104>)
 80041ac:	f005 ffd4 	bl	800a158 <siprintf>
	//char test[120];
	//sprintf((char *)test, "$SPECTRAL,3,4,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,\n");

	//HAL_UART_Transmit(huart, (uint8_t *)string, sizeof(string), 40);

	HAL_UART_Transmit_IT(huart, (uint8_t *)string, sizeof(string));
 80041b0:	229e      	movs	r2, #158	; 0x9e
 80041b2:	a92c      	add	r1, sp, #176	; 0xb0
 80041b4:	4640      	mov	r0, r8
 80041b6:	f004 fa39 	bl	800862c <HAL_UART_Transmit_IT>
	HAL_Delay(40);
 80041ba:	2028      	movs	r0, #40	; 0x28
 80041bc:	f000 fcd8 	bl	8004b70 <HAL_Delay>
}
 80041c0:	b054      	add	sp, #336	; 0x150
 80041c2:	bc80      	pop	{r7}
 80041c4:	46b8      	mov	r8, r7
 80041c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c8:	0800cdc4 	.word	0x0800cdc4

080041cc <new_spectral>:

// initalizes spectral object, adds bus to it
Spectral *new_spectral(SMBus *i2c_bus) {
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	0004      	movs	r4, r0
    Spectral *spectral = malloc(sizeof(Spectral));
 80041d0:	201c      	movs	r0, #28
 80041d2:	f005 fa43 	bl	800965c <malloc>
    spectral->i2c_bus = i2c_bus;
 80041d6:	0005      	movs	r5, r0
    Spectral *spectral = malloc(sizeof(Spectral));
 80041d8:	0007      	movs	r7, r0
    spectral->i2c_bus = i2c_bus;
 80041da:	c510      	stmia	r5!, {r4}
}

// creates a channel
Channel* _new_channel(uint8_t msb_r, uint8_t lsb_r) {
    Channel* ch = malloc(sizeof(Channel));
	ch->color_data = 0;
 80041dc:	2600      	movs	r6, #0
    spectral->i2c_bus = i2c_bus;
 80041de:	2409      	movs	r4, #9
    Channel* ch = malloc(sizeof(Channel));
 80041e0:	2004      	movs	r0, #4
 80041e2:	f005 fa3b 	bl	800965c <malloc>
		spectral->channels[i] = _new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 80041e6:	1e63      	subs	r3, r4, #1
	ch->lsb_register = lsb_r;
 80041e8:	7004      	strb	r4, [r0, #0]
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 80041ea:	3402      	adds	r4, #2
 80041ec:	b2e4      	uxtb	r4, r4
	ch->color_data = 0;
 80041ee:	8046      	strh	r6, [r0, #2]
	ch->msb_register = msb_r;
 80041f0:	7043      	strb	r3, [r0, #1]
		spectral->channels[i] = _new_channel(START_REG + (2 * i), START_REG + (2 * i) + 1);
 80041f2:	c501      	stmia	r5!, {r0}
	for (uint8_t i = 0; i < CHANNELS; ++i) {
 80041f4:	2c15      	cmp	r4, #21
 80041f6:	d1f3      	bne.n	80041e0 <new_spectral+0x14>
}
 80041f8:	0038      	movs	r0, r7
 80041fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080041fc <_virtual_write>:
void _virtual_write(Spectral *spectral, uint8_t v_reg, uint8_t data) {
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	0004      	movs	r4, r0
 8004200:	000e      	movs	r6, r1
 8004202:	0017      	movs	r7, r2
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8004204:	2502      	movs	r5, #2
 8004206:	e002      	b.n	800420e <_virtual_write+0x12>
		HAL_Delay(5);
 8004208:	2005      	movs	r0, #5
 800420a:	f000 fcb1 	bl	8004b70 <HAL_Delay>
		status = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800420e:	2200      	movs	r2, #0
 8004210:	2149      	movs	r1, #73	; 0x49
 8004212:	6820      	ldr	r0, [r4, #0]
 8004214:	f7ff feec 	bl	8003ff0 <read_byte_data>
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8004218:	4205      	tst	r5, r0
 800421a:	d1f5      	bne.n	8004208 <_virtual_write+0xc>
	write_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, (v_reg | 1 << 7));
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	2201      	movs	r2, #1
 8004220:	2149      	movs	r1, #73	; 0x49
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	4333      	orrs	r3, r6
 8004226:	f7ff ff29 	bl	800407c <write_byte_data>
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 800422a:	2502      	movs	r5, #2
 800422c:	e002      	b.n	8004234 <_virtual_write+0x38>
		HAL_Delay(5);
 800422e:	2005      	movs	r0, #5
 8004230:	f000 fc9e 	bl	8004b70 <HAL_Delay>
		status = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8004234:	2200      	movs	r2, #0
 8004236:	2149      	movs	r1, #73	; 0x49
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	f7ff fed9 	bl	8003ff0 <read_byte_data>
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 800423e:	4205      	tst	r5, r0
 8004240:	d1f5      	bne.n	800422e <_virtual_write+0x32>
	write_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, data);
 8004242:	003b      	movs	r3, r7
 8004244:	2201      	movs	r2, #1
 8004246:	2149      	movs	r1, #73	; 0x49
 8004248:	6820      	ldr	r0, [r4, #0]
 800424a:	f7ff ff17 	bl	800407c <write_byte_data>
}
 800424e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004250 <_virtual_read>:
uint8_t _virtual_read(Spectral *spectral, uint8_t v_reg) {
 8004250:	b570      	push	{r4, r5, r6, lr}
	status = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8004252:	2200      	movs	r2, #0
uint8_t _virtual_read(Spectral *spectral, uint8_t v_reg) {
 8004254:	0004      	movs	r4, r0
 8004256:	000e      	movs	r6, r1
	status = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8004258:	6800      	ldr	r0, [r0, #0]
 800425a:	2149      	movs	r1, #73	; 0x49
 800425c:	f7ff fec8 	bl	8003ff0 <read_byte_data>
	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8004260:	07c3      	lsls	r3, r0, #31
 8004262:	d424      	bmi.n	80042ae <_virtual_read+0x5e>
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8004264:	2502      	movs	r5, #2
 8004266:	e002      	b.n	800426e <_virtual_read+0x1e>
		HAL_Delay(5); //delay for 5 ms
 8004268:	2005      	movs	r0, #5
 800426a:	f000 fc81 	bl	8004b70 <HAL_Delay>
		status = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800426e:	2200      	movs	r2, #0
 8004270:	2149      	movs	r1, #73	; 0x49
 8004272:	6820      	ldr	r0, [r4, #0]
 8004274:	f7ff febc 	bl	8003ff0 <read_byte_data>
		if ((status & I2C_AS72XX_SLAVE_TX_VALID) == 0) {
 8004278:	4205      	tst	r5, r0
 800427a:	d1f5      	bne.n	8004268 <_virtual_read+0x18>
	write_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_WRITE_REG, v_reg);
 800427c:	0033      	movs	r3, r6
 800427e:	2201      	movs	r2, #1
 8004280:	2149      	movs	r1, #73	; 0x49
 8004282:	6820      	ldr	r0, [r4, #0]
 8004284:	f7ff fefa 	bl	800407c <write_byte_data>
		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 8004288:	2501      	movs	r5, #1
 800428a:	e002      	b.n	8004292 <_virtual_read+0x42>
		HAL_Delay(5); //delay for 5 ms
 800428c:	2005      	movs	r0, #5
 800428e:	f000 fc6f 	bl	8004b70 <HAL_Delay>
		status = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8004292:	2200      	movs	r2, #0
 8004294:	2149      	movs	r1, #73	; 0x49
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	f7ff feaa 	bl	8003ff0 <read_byte_data>
		if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
 800429c:	4205      	tst	r5, r0
 800429e:	d0f5      	beq.n	800428c <_virtual_read+0x3c>
	d = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 80042a0:	2202      	movs	r2, #2
 80042a2:	2149      	movs	r1, #73	; 0x49
 80042a4:	6820      	ldr	r0, [r4, #0]
 80042a6:	f7ff fea3 	bl	8003ff0 <read_byte_data>
	return d;
 80042aa:	b2c0      	uxtb	r0, r0
}
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
		d = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_READ_REG);
 80042ae:	2202      	movs	r2, #2
 80042b0:	2149      	movs	r1, #73	; 0x49
 80042b2:	6820      	ldr	r0, [r4, #0]
 80042b4:	f7ff fe9c 	bl	8003ff0 <read_byte_data>
 80042b8:	e7d4      	b.n	8004264 <_virtual_read+0x14>
 80042ba:	46c0      	nop			; (mov r8, r8)

080042bc <_get_channel_data>:
int _get_channel_data(Spectral *spectral) {
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	231c      	movs	r3, #28
 80042c0:	4647      	mov	r7, r8
 80042c2:	46ce      	mov	lr, r9
 80042c4:	4698      	mov	r8, r3
 80042c6:	0005      	movs	r5, r0
 80042c8:	b580      	push	{r7, lr}
 80042ca:	1d06      	adds	r6, r0, #4
 80042cc:	4480      	add	r8, r0
        Channel *temp = spectral->channels[i];
 80042ce:	6837      	ldr	r7, [r6, #0]
uint16_t _read_channel(Spectral *spectral, int channel) {
    return spectral->channels[channel]->color_data;
}

uint16_t _get_val(Spectral *spectral, uint8_t virtual_reg_l, uint8_t virtual_reg_h) {
    uint16_t high = (_virtual_read(spectral, virtual_reg_h) & 0xFF) << 8;
 80042d0:	0028      	movs	r0, r5
        temp->color_data = _get_val(spectral, temp->lsb_register, temp->msb_register);
 80042d2:	783b      	ldrb	r3, [r7, #0]
    uint16_t high = (_virtual_read(spectral, virtual_reg_h) & 0xFF) << 8;
 80042d4:	7879      	ldrb	r1, [r7, #1]
        temp->color_data = _get_val(spectral, temp->lsb_register, temp->msb_register);
 80042d6:	4699      	mov	r9, r3
    uint16_t high = (_virtual_read(spectral, virtual_reg_h) & 0xFF) << 8;
 80042d8:	f7ff ffba 	bl	8004250 <_virtual_read>
    return high | (_virtual_read(spectral, virtual_reg_l) & 0xFF);
 80042dc:	4649      	mov	r1, r9
    uint16_t high = (_virtual_read(spectral, virtual_reg_h) & 0xFF) << 8;
 80042de:	0004      	movs	r4, r0
    return high | (_virtual_read(spectral, virtual_reg_l) & 0xFF);
 80042e0:	0028      	movs	r0, r5
 80042e2:	f7ff ffb5 	bl	8004250 <_virtual_read>
    uint16_t high = (_virtual_read(spectral, virtual_reg_h) & 0xFF) << 8;
 80042e6:	0224      	lsls	r4, r4, #8
        if (spectral->i2c_bus->ret != HAL_OK) {
 80042e8:	682b      	ldr	r3, [r5, #0]
    return high | (_virtual_read(spectral, virtual_reg_l) & 0xFF);
 80042ea:	4304      	orrs	r4, r0
        temp->color_data = _get_val(spectral, temp->lsb_register, temp->msb_register);
 80042ec:	807c      	strh	r4, [r7, #2]
        if (spectral->i2c_bus->ret != HAL_OK) {
 80042ee:	7a1b      	ldrb	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d107      	bne.n	8004304 <_get_channel_data+0x48>
    for (uint8_t i = 0; i < CHANNELS; ++i) {
 80042f4:	3604      	adds	r6, #4
 80042f6:	4546      	cmp	r6, r8
 80042f8:	d1e9      	bne.n	80042ce <_get_channel_data+0x12>
    return 0;
 80042fa:	2000      	movs	r0, #0
}
 80042fc:	bcc0      	pop	{r6, r7}
 80042fe:	46b9      	mov	r9, r7
 8004300:	46b0      	mov	r8, r6
 8004302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	return 1;
 8004304:	2001      	movs	r0, #1
 8004306:	e7f9      	b.n	80042fc <_get_channel_data+0x40>

08004308 <get_spectral_data>:
int get_spectral_data(Spectral *spectral, uint16_t *data) {
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	000c      	movs	r4, r1
 800430c:	0005      	movs	r5, r0
	 int error = _get_channel_data(spectral);
 800430e:	f7ff ffd5 	bl	80042bc <_get_channel_data>
	 for (uint8_t i = 0; i < CHANNELS; ++i) {
 8004312:	0021      	movs	r1, r4
 8004314:	1d2b      	adds	r3, r5, #4
 8004316:	351c      	adds	r5, #28
		 data[i] = spectral->channels[i]->color_data;
 8004318:	cb10      	ldmia	r3!, {r4}
 800431a:	8864      	ldrh	r4, [r4, #2]
 800431c:	800c      	strh	r4, [r1, #0]
	 for (uint8_t i = 0; i < CHANNELS; ++i) {
 800431e:	3102      	adds	r1, #2
 8004320:	42ab      	cmp	r3, r5
 8004322:	d1f9      	bne.n	8004318 <get_spectral_data+0x10>
	 if (error) {
 8004324:	1e43      	subs	r3, r0, #1
 8004326:	4198      	sbcs	r0, r3
}
 8004328:	bd70      	pop	{r4, r5, r6, pc}
 800432a:	46c0      	nop			; (mov r8, r8)

0800432c <initialize_spectral>:
void _del_channel(Channel *channel) {
	free(channel);
}

// Sets up all channels
void initialize_spectral() {
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// opens all channels on the mux to listen
	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 800432e:	2400      	movs	r4, #0
 8004330:	4f10      	ldr	r7, [pc, #64]	; (8004374 <initialize_spectral+0x48>)
 8004332:	4e11      	ldr	r6, [pc, #68]	; (8004378 <initialize_spectral+0x4c>)
		channel_select(mux, mux->channel_list[i]);
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	00a3      	lsls	r3, r4, #2
 8004338:	4694      	mov	ip, r2
 800433a:	4463      	add	r3, ip
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	0010      	movs	r0, r2
 8004340:	f7ff fdcc 	bl	8003edc <channel_select>
		enable_spectral(spectral);
 8004344:	6835      	ldr	r5, [r6, #0]
    _virtual_write(spectral, CONTROL_SET_UP, 0x28);  // runs twice to account for status miss
 8004346:	2228      	movs	r2, #40	; 0x28
 8004348:	2104      	movs	r1, #4
 800434a:	0028      	movs	r0, r5
 800434c:	f7ff ff56 	bl	80041fc <_virtual_write>
    HAL_Delay(5);
 8004350:	2005      	movs	r0, #5
 8004352:	f000 fc0d 	bl	8004b70 <HAL_Delay>
    _virtual_write(spectral, CONTROL_SET_UP, 0x28);  // converts data bank to 2
 8004356:	2228      	movs	r2, #40	; 0x28
 8004358:	2104      	movs	r1, #4
 800435a:	0028      	movs	r0, r5
 800435c:	f7ff ff4e 	bl	80041fc <_virtual_write>
	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 8004360:	3401      	adds	r4, #1
    _virtual_write(spectral, INT_TIME, 0xFF);  // increases integration time
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	2105      	movs	r1, #5
 8004366:	0028      	movs	r0, r5
 8004368:	f7ff ff48 	bl	80041fc <_virtual_write>
	for (int i = 0; i < SPECTRAL_DEVICES; ++i) {
 800436c:	2c03      	cmp	r4, #3
 800436e:	d1e1      	bne.n	8004334 <initialize_spectral+0x8>
	}
}
 8004370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	20000584 	.word	0x20000584
 8004378:	20000588 	.word	0x20000588

0800437c <check_ready>:
// Assumes the channel is already selected on the mux
// 1 = Not Ready
// 0 = Ready
int check_ready(){
	uint8_t status;
	status = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <check_ready+0x18>)
int check_ready(){
 800437e:	b510      	push	{r4, lr}
	status = read_byte_data(spectral->i2c_bus, DEVICE_SLAVE_ADDRESS, I2C_AS72XX_SLAVE_STATUS_REG);
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	2149      	movs	r1, #73	; 0x49
 8004388:	f7ff fe32 	bl	8003ff0 <read_byte_data>
	if ((status & I2C_AS72XX_SLAVE_RX_VALID) != 0) {
		// d = nucleo_byte_read(I2C_AS72XX_SLAVE_READ_REG);
		return 0;
	}
	return 1;
}
 800438c:	2301      	movs	r3, #1
 800438e:	4383      	bics	r3, r0
 8004390:	0018      	movs	r0, r3
 8004392:	bd10      	pop	{r4, pc}
 8004394:	20000588 	.word	0x20000588

08004398 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004398:	2201      	movs	r2, #1
 800439a:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <HAL_MspInit+0x2c>)
{
 800439c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800439e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043a0:	4311      	orrs	r1, r2
 80043a2:	6419      	str	r1, [r3, #64]	; 0x40
 80043a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043a6:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 80043a8:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043aa:	9200      	str	r2, [sp, #0]
 80043ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b0:	0549      	lsls	r1, r1, #21
 80043b2:	430a      	orrs	r2, r1
 80043b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	400b      	ands	r3, r1
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043be:	b002      	add	sp, #8
 80043c0:	4770      	bx	lr
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	40021000 	.word	0x40021000

080043c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80043c8:	b530      	push	{r4, r5, lr}
 80043ca:	0004      	movs	r4, r0
 80043cc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ce:	2214      	movs	r2, #20
 80043d0:	2100      	movs	r1, #0
 80043d2:	a803      	add	r0, sp, #12
 80043d4:	f005 f955 	bl	8009682 <memset>
  if(hadc->Instance==ADC1)
 80043d8:	4b1f      	ldr	r3, [pc, #124]	; (8004458 <HAL_ADC_MspInit+0x90>)
 80043da:	6822      	ldr	r2, [r4, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043e0:	b009      	add	sp, #36	; 0x24
 80043e2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80043e4:	2080      	movs	r0, #128	; 0x80
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_ADC_MspInit+0x94>)
 80043e8:	0340      	lsls	r0, r0, #13
 80043ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043ec:	4301      	orrs	r1, r0
 80043ee:	6419      	str	r1, [r3, #64]	; 0x40
 80043f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f2:	4002      	ands	r2, r0
 80043f4:	9201      	str	r2, [sp, #4]
 80043f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043f8:	2201      	movs	r2, #1
 80043fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fc:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043fe:	4311      	orrs	r1, r2
 8004400:	6359      	str	r1, [r3, #52]	; 0x34
 8004402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004404:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004406:	401a      	ands	r2, r3
 8004408:	9202      	str	r2, [sp, #8]
 800440a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = THERMISTOR_1_Pin|THERMISTOR_2_Pin|THERMISTOR_0_Pin;
 800440c:	2338      	movs	r3, #56	; 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800440e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = THERMISTOR_1_Pin|THERMISTOR_2_Pin|THERMISTOR_0_Pin;
 8004410:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004412:	3b35      	subs	r3, #53	; 0x35
 8004414:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004416:	f001 f999 	bl	800574c <HAL_GPIO_Init>
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800441a:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 800441c:	4d10      	ldr	r5, [pc, #64]	; (8004460 <HAL_ADC_MspInit+0x98>)
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_ADC_MspInit+0x9c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004420:	612a      	str	r2, [r5, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004422:	3281      	adds	r2, #129	; 0x81
 8004424:	32ff      	adds	r2, #255	; 0xff
 8004426:	616a      	str	r2, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004428:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 800442a:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800442c:	2305      	movs	r3, #5
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800442e:	0112      	lsls	r2, r2, #4
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004430:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004432:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004434:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004436:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004438:	0028      	movs	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800443a:	60ab      	str	r3, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800443c:	60eb      	str	r3, [r5, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800443e:	61ea      	str	r2, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004440:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004442:	f000 ffe5 	bl	8005410 <HAL_DMA_Init>
 8004446:	2800      	cmp	r0, #0
 8004448:	d102      	bne.n	8004450 <HAL_ADC_MspInit+0x88>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800444a:	6525      	str	r5, [r4, #80]	; 0x50
 800444c:	62ac      	str	r4, [r5, #40]	; 0x28
}
 800444e:	e7c7      	b.n	80043e0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8004450:	f7ff faaa 	bl	80039a8 <Error_Handler>
 8004454:	e7f9      	b.n	800444a <HAL_ADC_MspInit+0x82>
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	40012400 	.word	0x40012400
 800445c:	40021000 	.word	0x40021000
 8004460:	20000320 	.word	0x20000320
 8004464:	40020008 	.word	0x40020008

08004468 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004468:	b510      	push	{r4, lr}
 800446a:	0004      	movs	r4, r0
 800446c:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446e:	2214      	movs	r2, #20
 8004470:	2100      	movs	r1, #0
 8004472:	a803      	add	r0, sp, #12
 8004474:	f005 f905 	bl	8009682 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004478:	2218      	movs	r2, #24
 800447a:	2100      	movs	r1, #0
 800447c:	a808      	add	r0, sp, #32
 800447e:	f005 f900 	bl	8009682 <memset>
  if(hi2c->Instance==I2C1)
 8004482:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <HAL_I2C_MspInit+0x80>)
 8004484:	6822      	ldr	r2, [r4, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <HAL_I2C_MspInit+0x26>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800448a:	b00e      	add	sp, #56	; 0x38
 800448c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800448e:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004490:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004492:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004494:	f003 fa3c 	bl	8007910 <HAL_RCCEx_PeriphCLKConfig>
 8004498:	2800      	cmp	r0, #0
 800449a:	d121      	bne.n	80044e0 <HAL_I2C_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800449c:	2302      	movs	r3, #2
 800449e:	4c13      	ldr	r4, [pc, #76]	; (80044ec <HAL_I2C_MspInit+0x84>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a0:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a4:	4812      	ldr	r0, [pc, #72]	; (80044f0 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a6:	431a      	orrs	r2, r3
 80044a8:	6362      	str	r2, [r4, #52]	; 0x34
 80044aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80044ac:	4013      	ands	r3, r2
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MUX_SDA_Pin|MUX_SCL_Pin;
 80044b2:	23c0      	movs	r3, #192	; 0xc0
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044b8:	3b6f      	subs	r3, #111	; 0x6f
 80044ba:	3bff      	subs	r3, #255	; 0xff
 80044bc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80044c4:	3306      	adds	r3, #6
 80044c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c8:	f001 f940 	bl	800574c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80044d0:	0389      	lsls	r1, r1, #14
 80044d2:	430a      	orrs	r2, r1
 80044d4:	63e2      	str	r2, [r4, #60]	; 0x3c
 80044d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80044d8:	400b      	ands	r3, r1
 80044da:	9302      	str	r3, [sp, #8]
 80044dc:	9b02      	ldr	r3, [sp, #8]
}
 80044de:	e7d4      	b.n	800448a <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80044e0:	f7ff fa62 	bl	80039a8 <Error_Handler>
 80044e4:	e7da      	b.n	800449c <HAL_I2C_MspInit+0x34>
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	40005400 	.word	0x40005400
 80044ec:	40021000 	.word	0x40021000
 80044f0:	50000400 	.word	0x50000400

080044f4 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 80044f4:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <HAL_I2C_MspDeInit+0x2c>)
 80044f6:	6802      	ldr	r2, [r0, #0]
{
 80044f8:	b510      	push	{r4, lr}
  if(hi2c->Instance==I2C1)
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d000      	beq.n	8004500 <HAL_I2C_MspDeInit+0xc>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80044fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004500:	4a08      	ldr	r2, [pc, #32]	; (8004524 <HAL_I2C_MspDeInit+0x30>)
 8004502:	4909      	ldr	r1, [pc, #36]	; (8004528 <HAL_I2C_MspDeInit+0x34>)
 8004504:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(MUX_SDA_GPIO_Port, MUX_SDA_Pin);
 8004506:	4809      	ldr	r0, [pc, #36]	; (800452c <HAL_I2C_MspDeInit+0x38>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004508:	400b      	ands	r3, r1
 800450a:	63d3      	str	r3, [r2, #60]	; 0x3c
    HAL_GPIO_DeInit(MUX_SDA_GPIO_Port, MUX_SDA_Pin);
 800450c:	2180      	movs	r1, #128	; 0x80
 800450e:	f001 fa29 	bl	8005964 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(MUX_SCL_GPIO_Port, MUX_SCL_Pin);
 8004512:	2180      	movs	r1, #128	; 0x80
 8004514:	4805      	ldr	r0, [pc, #20]	; (800452c <HAL_I2C_MspDeInit+0x38>)
 8004516:	0049      	lsls	r1, r1, #1
 8004518:	f001 fa24 	bl	8005964 <HAL_GPIO_DeInit>
}
 800451c:	e7ef      	b.n	80044fe <HAL_I2C_MspDeInit+0xa>
 800451e:	46c0      	nop			; (mov r8, r8)
 8004520:	40005400 	.word	0x40005400
 8004524:	40021000 	.word	0x40021000
 8004528:	ffdfffff 	.word	0xffdfffff
 800452c:	50000400 	.word	0x50000400

08004530 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8004530:	6803      	ldr	r3, [r0, #0]
 8004532:	4a0f      	ldr	r2, [pc, #60]	; (8004570 <HAL_TIM_PWM_MspInit+0x40>)
{
 8004534:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00e      	beq.n	8004558 <HAL_TIM_PWM_MspInit+0x28>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM3)
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_TIM_PWM_MspInit+0x44>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d001      	beq.n	8004544 <HAL_TIM_PWM_MspInit+0x14>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004540:	b002      	add	sp, #8
 8004542:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004544:	2302      	movs	r3, #2
 8004546:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <HAL_TIM_PWM_MspInit+0x48>)
 8004548:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800454a:	4319      	orrs	r1, r3
 800454c:	63d1      	str	r1, [r2, #60]	; 0x3c
 800454e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004550:	4013      	ands	r3, r2
 8004552:	9301      	str	r3, [sp, #4]
 8004554:	9b01      	ldr	r3, [sp, #4]
}
 8004556:	e7f3      	b.n	8004540 <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004558:	2080      	movs	r0, #128	; 0x80
 800455a:	4a07      	ldr	r2, [pc, #28]	; (8004578 <HAL_TIM_PWM_MspInit+0x48>)
 800455c:	0100      	lsls	r0, r0, #4
 800455e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004560:	4301      	orrs	r1, r0
 8004562:	6411      	str	r1, [r2, #64]	; 0x40
 8004564:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004566:	4003      	ands	r3, r0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	9b00      	ldr	r3, [sp, #0]
 800456c:	e7e8      	b.n	8004540 <HAL_TIM_PWM_MspInit+0x10>
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40000400 	.word	0x40000400
 8004578:	40021000 	.word	0x40021000

0800457c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800457c:	b500      	push	{lr}
  if(htim_base->Instance==TIM6)
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <HAL_TIM_Base_MspInit+0x34>)
 8004580:	6802      	ldr	r2, [r0, #0]
{
 8004582:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM6)
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_TIM_Base_MspInit+0x10>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004588:	b003      	add	sp, #12
 800458a:	bd00      	pop	{pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 800458c:	2310      	movs	r3, #16
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <HAL_TIM_Base_MspInit+0x38>)
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004590:	2011      	movs	r0, #17
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004592:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004594:	4319      	orrs	r1, r3
 8004596:	63d1      	str	r1, [r2, #60]	; 0x3c
 8004598:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800459a:	2100      	movs	r1, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 800459c:	4013      	ands	r3, r2
 800459e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80045a0:	2200      	movs	r2, #0
    __HAL_RCC_TIM6_CLK_ENABLE();
 80045a2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80045a4:	f000 fe9e 	bl	80052e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80045a8:	2011      	movs	r0, #17
 80045aa:	f000 fecd 	bl	8005348 <HAL_NVIC_EnableIRQ>
}
 80045ae:	e7eb      	b.n	8004588 <HAL_TIM_Base_MspInit+0xc>
 80045b0:	40001000 	.word	0x40001000
 80045b4:	40021000 	.word	0x40021000

080045b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80045b8:	b530      	push	{r4, r5, lr}
 80045ba:	0004      	movs	r4, r0
 80045bc:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045be:	2214      	movs	r2, #20
 80045c0:	2100      	movs	r1, #0
 80045c2:	a803      	add	r0, sp, #12
 80045c4:	f005 f85d 	bl	8009682 <memset>
  if(htim->Instance==TIM1)
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	4a21      	ldr	r2, [pc, #132]	; (8004650 <HAL_TIM_MspPostInit+0x98>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 80045d0:	4a20      	ldr	r2, [pc, #128]	; (8004654 <HAL_TIM_MspPostInit+0x9c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d028      	beq.n	8004628 <HAL_TIM_MspPostInit+0x70>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80045d6:	b009      	add	sp, #36	; 0x24
 80045d8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045da:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045dc:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045de:	4b1e      	ldr	r3, [pc, #120]	; (8004658 <HAL_TIM_MspPostInit+0xa0>)
    HAL_GPIO_Init(SERVO_PWM_0_GPIO_Port, &GPIO_InitStruct);
 80045e0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(SERVO_PWM_0_GPIO_Port, &GPIO_InitStruct);
 80045e4:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e6:	432a      	orrs	r2, r5
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
 80045ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(SERVO_PWM_0_GPIO_Port, &GPIO_InitStruct);
 80045ec:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ee:	402a      	ands	r2, r5
 80045f0:	9200      	str	r2, [sp, #0]
 80045f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045f6:	4322      	orrs	r2, r4
 80045f8:	635a      	str	r2, [r3, #52]	; 0x34
 80045fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045fc:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045fe:	4023      	ands	r3, r4
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = SERVO_PWM_0_Pin;
 8004604:	2380      	movs	r3, #128	; 0x80
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800460a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(SERVO_PWM_0_GPIO_Port, &GPIO_InitStruct);
 800460c:	f001 f89e 	bl	800574c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SERVO_PWM_1_Pin|SERVO_PWM_2_Pin;
 8004610:	2348      	movs	r3, #72	; 0x48
 8004612:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004614:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004616:	4811      	ldr	r0, [pc, #68]	; (800465c <HAL_TIM_MspPostInit+0xa4>)
 8004618:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800461c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800461e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004620:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004622:	f001 f893 	bl	800574c <HAL_GPIO_Init>
 8004626:	e7d6      	b.n	80045d6 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004628:	2301      	movs	r3, #1
 800462a:	4a0b      	ldr	r2, [pc, #44]	; (8004658 <HAL_TIM_MspPostInit+0xa0>)
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 800462c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800462e:	6b51      	ldr	r1, [r2, #52]	; 0x34
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 8004630:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004632:	4319      	orrs	r1, r3
 8004634:	6351      	str	r1, [r2, #52]	; 0x34
 8004636:	6b52      	ldr	r2, [r2, #52]	; 0x34
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 8004638:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800463a:	401a      	ands	r2, r3
 800463c:	9202      	str	r2, [sp, #8]
 800463e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = HBRIDGE_PWM_Pin;
 8004640:	2240      	movs	r2, #64	; 0x40
 8004642:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	3a3e      	subs	r2, #62	; 0x3e
 8004646:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004648:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(HBRIDGE_PWM_GPIO_Port, &GPIO_InitStruct);
 800464a:	f001 f87f 	bl	800574c <HAL_GPIO_Init>
}
 800464e:	e7c2      	b.n	80045d6 <HAL_TIM_MspPostInit+0x1e>
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	40021000 	.word	0x40021000
 800465c:	50000400 	.word	0x50000400

08004660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004660:	b510      	push	{r4, lr}
 8004662:	0004      	movs	r4, r0
 8004664:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004666:	2214      	movs	r2, #20
 8004668:	2100      	movs	r1, #0
 800466a:	a803      	add	r0, sp, #12
 800466c:	f005 f809 	bl	8009682 <memset>
  if(huart->Instance==USART2)
 8004670:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_UART_MspInit+0x68>)
 8004672:	6822      	ldr	r2, [r4, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004678:	b008      	add	sp, #32
 800467a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800467c:	2080      	movs	r0, #128	; 0x80
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <HAL_UART_MspInit+0x6c>)
 8004680:	0280      	lsls	r0, r0, #10
 8004682:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004684:	4301      	orrs	r1, r0
 8004686:	63d9      	str	r1, [r3, #60]	; 0x3c
 8004688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468a:	4002      	ands	r2, r0
 800468c:	9201      	str	r2, [sp, #4]
 800468e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004690:	2201      	movs	r2, #1
 8004692:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004694:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004696:	4311      	orrs	r1, r2
 8004698:	6359      	str	r1, [r3, #52]	; 0x34
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800469e:	4013      	ands	r3, r2
 80046a0:	9302      	str	r3, [sp, #8]
 80046a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <HAL_UART_MspInit+0x70>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80046a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046aa:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80046ac:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ae:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b0:	f001 f84c 	bl	800574c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80046b4:	2200      	movs	r2, #0
 80046b6:	2100      	movs	r1, #0
 80046b8:	201c      	movs	r0, #28
 80046ba:	f000 fe13 	bl	80052e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046be:	201c      	movs	r0, #28
 80046c0:	f000 fe42 	bl	8005348 <HAL_NVIC_EnableIRQ>
}
 80046c4:	e7d8      	b.n	8004678 <HAL_UART_MspInit+0x18>
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	40004400 	.word	0x40004400
 80046cc:	40021000 	.word	0x40021000
 80046d0:	00008004 	.word	0x00008004

080046d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046d4:	e7fe      	b.n	80046d4 <NMI_Handler>
 80046d6:	46c0      	nop			; (mov r8, r8)

080046d8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046d8:	e7fe      	b.n	80046d8 <HardFault_Handler>
 80046da:	46c0      	nop			; (mov r8, r8)

080046dc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80046dc:	4770      	bx	lr
 80046de:	46c0      	nop			; (mov r8, r8)

080046e0 <PendSV_Handler>:
 80046e0:	4770      	bx	lr
 80046e2:	46c0      	nop			; (mov r8, r8)

080046e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046e6:	f000 fa31 	bl	8004b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046ea:	bd10      	pop	{r4, pc}

080046ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80046ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046ee:	4802      	ldr	r0, [pc, #8]	; (80046f8 <DMA1_Channel1_IRQHandler+0xc>)
 80046f0:	f000 ffcc 	bl	800568c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80046f4:	bd10      	pop	{r4, pc}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	20000320 	.word	0x20000320

080046fc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global Interrupts.
  */
void TIM6_IRQHandler(void)
{
 80046fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80046fe:	4802      	ldr	r0, [pc, #8]	; (8004708 <TIM6_IRQHandler+0xc>)
 8004700:	f003 fbb8 	bl	8007e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004704:	bd10      	pop	{r4, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	20000460 	.word	0x20000460

0800470c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800470c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800470e:	4802      	ldr	r0, [pc, #8]	; (8004718 <USART2_IRQHandler+0xc>)
 8004710:	f004 f808 	bl	8008724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004714:	bd10      	pop	{r4, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	200004ac 	.word	0x200004ac

0800471c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 800471c:	2001      	movs	r0, #1
 800471e:	4770      	bx	lr

08004720 <_kill>:

int _kill(int pid, int sig)
{
 8004720:	b510      	push	{r4, lr}
	errno = EINVAL;
 8004722:	f004 ff71 	bl	8009608 <__errno>
 8004726:	2316      	movs	r3, #22
 8004728:	6003      	str	r3, [r0, #0]
	return -1;
 800472a:	2001      	movs	r0, #1
}
 800472c:	4240      	negs	r0, r0
 800472e:	bd10      	pop	{r4, pc}

08004730 <_exit>:

void _exit (int status)
{
 8004730:	b510      	push	{r4, lr}
	errno = EINVAL;
 8004732:	f004 ff69 	bl	8009608 <__errno>
 8004736:	2316      	movs	r3, #22
 8004738:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 800473a:	e7fe      	b.n	800473a <_exit+0xa>

0800473c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800473c:	b570      	push	{r4, r5, r6, lr}
 800473e:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004740:	dd07      	ble.n	8004752 <_read+0x16>
 8004742:	000c      	movs	r4, r1
 8004744:	188d      	adds	r5, r1, r2
	{
		*ptr++ = __io_getchar();
 8004746:	e000      	b.n	800474a <_read+0xe>
 8004748:	bf00      	nop
 800474a:	7020      	strb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800474c:	3401      	adds	r4, #1
 800474e:	42ac      	cmp	r4, r5
 8004750:	d1f9      	bne.n	8004746 <_read+0xa>
	}

return len;
}
 8004752:	0030      	movs	r0, r6
 8004754:	bd70      	pop	{r4, r5, r6, pc}
 8004756:	46c0      	nop			; (mov r8, r8)

08004758 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	1e16      	subs	r6, r2, #0
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800475c:	dd07      	ble.n	800476e <_write+0x16>
 800475e:	000c      	movs	r4, r1
 8004760:	188d      	adds	r5, r1, r2
	{
		__io_putchar(*ptr++);
 8004762:	7820      	ldrb	r0, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004764:	3401      	adds	r4, #1
		__io_putchar(*ptr++);
 8004766:	e000      	b.n	800476a <_write+0x12>
 8004768:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800476a:	42ac      	cmp	r4, r5
 800476c:	d1f9      	bne.n	8004762 <_write+0xa>
	}
	return len;
}
 800476e:	0030      	movs	r0, r6
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	46c0      	nop			; (mov r8, r8)

08004774 <_close>:

int _close(int file)
{
	return -1;
 8004774:	2001      	movs	r0, #1
}
 8004776:	4240      	negs	r0, r0
 8004778:	4770      	bx	lr
 800477a:	46c0      	nop			; (mov r8, r8)

0800477c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800477c:	2380      	movs	r3, #128	; 0x80
 800477e:	019b      	lsls	r3, r3, #6
	return 0;
}
 8004780:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004782:	604b      	str	r3, [r1, #4]
}
 8004784:	4770      	bx	lr
 8004786:	46c0      	nop			; (mov r8, r8)

08004788 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004788:	2001      	movs	r0, #1
 800478a:	4770      	bx	lr

0800478c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800478c:	2000      	movs	r0, #0
 800478e:	4770      	bx	lr

08004790 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004790:	490c      	ldr	r1, [pc, #48]	; (80047c4 <_sbrk+0x34>)
 8004792:	4a0d      	ldr	r2, [pc, #52]	; (80047c8 <_sbrk+0x38>)
{
 8004794:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004796:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004798:	490c      	ldr	r1, [pc, #48]	; (80047cc <_sbrk+0x3c>)
{
 800479a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800479c:	6808      	ldr	r0, [r1, #0]
 800479e:	2800      	cmp	r0, #0
 80047a0:	d004      	beq.n	80047ac <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047a2:	18c3      	adds	r3, r0, r3
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d806      	bhi.n	80047b6 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80047a8:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 80047aa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80047ac:	4808      	ldr	r0, [pc, #32]	; (80047d0 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 80047ae:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 80047b0:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d9f8      	bls.n	80047a8 <_sbrk+0x18>
    errno = ENOMEM;
 80047b6:	f004 ff27 	bl	8009608 <__errno>
 80047ba:	230c      	movs	r3, #12
 80047bc:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80047be:	2001      	movs	r0, #1
 80047c0:	4240      	negs	r0, r0
 80047c2:	e7f2      	b.n	80047aa <_sbrk+0x1a>
 80047c4:	00000400 	.word	0x00000400
 80047c8:	20004800 	.word	0x20004800
 80047cc:	200005b0 	.word	0x200005b0
 80047d0:	200005e0 	.word	0x200005e0

080047d4 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047d4:	4770      	bx	lr
 80047d6:	46c0      	nop			; (mov r8, r8)

080047d8 <new_thermistors>:
// Public Functions
//
///////////////////


Thermistors* new_thermistors(uint32_t channel0, uint32_t channel1, uint32_t channel2){
 80047d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047da:	46ce      	mov	lr, r9
 80047dc:	4647      	mov	r7, r8
 80047de:	b580      	push	{r7, lr}
 80047e0:	4681      	mov	r9, r0
 80047e2:	b091      	sub	sp, #68	; 0x44
    Thermistors* therms = (Thermistors*) malloc(sizeof(Thermistors));
 80047e4:	2060      	movs	r0, #96	; 0x60
Thermistors* new_thermistors(uint32_t channel0, uint32_t channel1, uint32_t channel2){
 80047e6:	4688      	mov	r8, r1
 80047e8:	0017      	movs	r7, r2
    Thermistors* therms = (Thermistors*) malloc(sizeof(Thermistors));
 80047ea:	f004 ff37 	bl	800965c <malloc>
 80047ee:	0005      	movs	r5, r0

    float temp_const_array[4][4] = {{3.3570420E-03, 2.5214848E-04, 3.3743283E-06, -6.4957311E-08},
 80047f0:	2240      	movs	r2, #64	; 0x40
 80047f2:	4668      	mov	r0, sp
 80047f4:	002e      	movs	r6, r5
 80047f6:	4914      	ldr	r1, [pc, #80]	; (8004848 <new_thermistors+0x70>)
 80047f8:	f004 ff3a 	bl	8009670 <memcpy>
                                  {3.3540170E-03, 2.5617244E-04, 2.1400943E-06, -7.2405219E-08},
                                  {3.3530481E-03, 2.5420230E-04, 1.1431163E-06, -6.9383563E-08},
                                  {3.3536166E-03, 2.5377200E-04, 8.5433271E-07, -8.7912262E-08}};

    for(int i = 0; i < 4; ++i){
 80047fc:	466c      	mov	r4, sp
 80047fe:	002b      	movs	r3, r5
 8004800:	3640      	adds	r6, #64	; 0x40
        for(int j = 0; j < 4; ++j){
            therms->constant_array[i][j] = temp_const_array[i][j];
 8004802:	6822      	ldr	r2, [r4, #0]
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	6862      	ldr	r2, [r4, #4]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	68a2      	ldr	r2, [r4, #8]
 800480c:	609a      	str	r2, [r3, #8]
 800480e:	68e2      	ldr	r2, [r4, #12]
    for(int i = 0; i < 4; ++i){
 8004810:	3410      	adds	r4, #16
            therms->constant_array[i][j] = temp_const_array[i][j];
 8004812:	60da      	str	r2, [r3, #12]
    for(int i = 0; i < 4; ++i){
 8004814:	3310      	adds	r3, #16
 8004816:	42b3      	cmp	r3, r6
 8004818:	d1f3      	bne.n	8004802 <new_thermistors+0x2a>
        }
    }
    HAL_ADC_Start_DMA(&hadc1,value,3);
 800481a:	2203      	movs	r2, #3
 800481c:	490b      	ldr	r1, [pc, #44]	; (800484c <new_thermistors+0x74>)
 800481e:	480c      	ldr	r0, [pc, #48]	; (8004850 <new_thermistors+0x78>)
 8004820:	f000 fd06 	bl	8005230 <HAL_ADC_Start_DMA>
    // NOTE make sure you set these to whatever your resistor values are
    therms->R1_vals[0] = 10000; therms->R1_vals[1] = 10000; therms->R1_vals[2] = 10000;
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <new_thermistors+0x7c>)
    therms->R25 = 10000;

    therms->adc_pins[0] = channel0; therms->adc_pins[1] = channel1; therms->adc_pins[2] = channel2;

    return therms;
}
 8004826:	0028      	movs	r0, r5
    therms->R1_vals[0] = 10000; therms->R1_vals[1] = 10000; therms->R1_vals[2] = 10000;
 8004828:	64eb      	str	r3, [r5, #76]	; 0x4c
 800482a:	652b      	str	r3, [r5, #80]	; 0x50
 800482c:	656b      	str	r3, [r5, #84]	; 0x54
    therms->R25 = 10000;
 800482e:	65eb      	str	r3, [r5, #92]	; 0x5c
    therms->adc_pins[0] = channel0; therms->adc_pins[1] = channel1; therms->adc_pins[2] = channel2;
 8004830:	464b      	mov	r3, r9
 8004832:	642b      	str	r3, [r5, #64]	; 0x40
 8004834:	4643      	mov	r3, r8
    therms->V1 = 3.3;
 8004836:	4a08      	ldr	r2, [pc, #32]	; (8004858 <new_thermistors+0x80>)
    therms->adc_pins[0] = channel0; therms->adc_pins[1] = channel1; therms->adc_pins[2] = channel2;
 8004838:	646b      	str	r3, [r5, #68]	; 0x44
    therms->V1 = 3.3;
 800483a:	65aa      	str	r2, [r5, #88]	; 0x58
    therms->adc_pins[0] = channel0; therms->adc_pins[1] = channel1; therms->adc_pins[2] = channel2;
 800483c:	64af      	str	r7, [r5, #72]	; 0x48
}
 800483e:	b011      	add	sp, #68	; 0x44
 8004840:	bcc0      	pop	{r6, r7}
 8004842:	46b9      	mov	r9, r7
 8004844:	46b0      	mov	r8, r6
 8004846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004848:	0800cbc4 	.word	0x0800cbc4
 800484c:	200005b8 	.word	0x200005b8
 8004850:	200002bc 	.word	0x200002bc
 8004854:	00002710 	.word	0x00002710
 8004858:	40533333 	.word	0x40533333

0800485c <get_temp>:




float get_temp(const uint8_t which_therm, const Thermistors* therms){
 800485c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800485e:	46c6      	mov	lr, r8
	// done to avoid sending infinity/nan
	if (raw_data >= 4095) raw_data = 4094;

    // Logic to get actual Voltage from 12 bit string
    // NOTE pretty sure it is 12 bit that's what HAL says in documentation, but could be wrong
    float curr_volt = (raw_data * therms->V1) / (float)4095; // 2^12 - 1= 4095 (12 bit string  )
 8004860:	4a58      	ldr	r2, [pc, #352]	; (80049c4 <get_temp+0x168>)
	uint32_t raw_data = value[which_therm];
 8004862:	0083      	lsls	r3, r0, #2
float get_temp(const uint8_t which_therm, const Thermistors* therms){
 8004864:	0004      	movs	r4, r0
    float curr_volt = (raw_data * therms->V1) / (float)4095; // 2^12 - 1= 4095 (12 bit string  )
 8004866:	58d0      	ldr	r0, [r2, r3]
 8004868:	4b57      	ldr	r3, [pc, #348]	; (80049c8 <get_temp+0x16c>)
float get_temp(const uint8_t which_therm, const Thermistors* therms){
 800486a:	000d      	movs	r5, r1
 800486c:	b500      	push	{lr}
    float curr_volt = (raw_data * therms->V1) / (float)4095; // 2^12 - 1= 4095 (12 bit string  )
 800486e:	6d8f      	ldr	r7, [r1, #88]	; 0x58
 8004870:	4298      	cmp	r0, r3
 8004872:	d900      	bls.n	8004876 <get_temp+0x1a>
 8004874:	0018      	movs	r0, r3
 8004876:	f7fc fcfb 	bl	8001270 <__aeabi_ui2f>
 800487a:	1c39      	adds	r1, r7, #0
 800487c:	f7fc f9d6 	bl	8000c2c <__aeabi_fmul>
 8004880:	4952      	ldr	r1, [pc, #328]	; (80049cc <get_temp+0x170>)
 8004882:	f7fc f80b 	bl	800089c <__aeabi_fdiv>

    // Circuit math to get temperature from voltage
    float Rt = ((float)therms->R1_vals[which_therm] * curr_volt) / (therms->V1 - curr_volt);
 8004886:	3412      	adds	r4, #18
 8004888:	00a4      	lsls	r4, r4, #2
 800488a:	192c      	adds	r4, r5, r4
    float curr_volt = (raw_data * therms->V1) / (float)4095; // 2^12 - 1= 4095 (12 bit string  )
 800488c:	1c06      	adds	r6, r0, #0
    float Rt = ((float)therms->R1_vals[which_therm] * curr_volt) / (therms->V1 - curr_volt);
 800488e:	6860      	ldr	r0, [r4, #4]
 8004890:	f7fc fca0 	bl	80011d4 <__aeabi_i2f>
 8004894:	1c31      	adds	r1, r6, #0
 8004896:	f7fc f9c9 	bl	8000c2c <__aeabi_fmul>
 800489a:	1c31      	adds	r1, r6, #0
 800489c:	1c04      	adds	r4, r0, #0
 800489e:	1c38      	adds	r0, r7, #0
 80048a0:	f7fc faea 	bl	8000e78 <__aeabi_fsub>
 80048a4:	1c01      	adds	r1, r0, #0
 80048a6:	1c20      	adds	r0, r4, #0
 80048a8:	f7fb fff8 	bl	800089c <__aeabi_fdiv>

    uint8_t const_set;
    if(Rt < 692600 && Rt >= 32770){
 80048ac:	4948      	ldr	r1, [pc, #288]	; (80049d0 <get_temp+0x174>)
    float Rt = ((float)therms->R1_vals[which_therm] * curr_volt) / (therms->V1 - curr_volt);
 80048ae:	1c04      	adds	r4, r0, #0
    if(Rt < 692600 && Rt >= 32770){
 80048b0:	f7fb fe10 	bl	80004d4 <__aeabi_fcmplt>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d049      	beq.n	800494c <get_temp+0xf0>
 80048b8:	4946      	ldr	r1, [pc, #280]	; (80049d4 <get_temp+0x178>)
 80048ba:	1c20      	adds	r0, r4, #0
 80048bc:	f7fb fe28 	bl	8000510 <__aeabi_fcmpge>
 80048c0:	2300      	movs	r3, #0
 80048c2:	4698      	mov	r8, r3
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d041      	beq.n	800494c <get_temp+0xf0>
    } else if (Rt < 681.6 && Rt >= 187){
        const_set = 3;
    } else {
        // TODO error out cause OOB temp
    }
    float lnRt_over_R25 = log(Rt/therms->R25);
 80048c8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 80048ca:	f7fc fc83 	bl	80011d4 <__aeabi_i2f>
 80048ce:	1c01      	adds	r1, r0, #0
 80048d0:	1c20      	adds	r0, r4, #0
 80048d2:	f7fb ffe3 	bl	800089c <__aeabi_fdiv>
 80048d6:	f7fe faf3 	bl	8002ec0 <__aeabi_f2d>
 80048da:	f007 ff75 	bl	800c7c8 <log>
 80048de:	f7fe fb37 	bl	8002f50 <__aeabi_d2f>

    float one_over_T = therms->constant_array[const_set][0] + (therms->constant_array[const_set][1] * lnRt_over_R25)
 80048e2:	4643      	mov	r3, r8
 80048e4:	011e      	lsls	r6, r3, #4
 80048e6:	19af      	adds	r7, r5, r6
 80048e8:	6879      	ldr	r1, [r7, #4]
    float lnRt_over_R25 = log(Rt/therms->R25);
 80048ea:	1c04      	adds	r4, r0, #0
    float one_over_T = therms->constant_array[const_set][0] + (therms->constant_array[const_set][1] * lnRt_over_R25)
 80048ec:	f7fc f99e 	bl	8000c2c <__aeabi_fmul>
 80048f0:	5971      	ldr	r1, [r6, r5]
 80048f2:	f7fb fe35 	bl	8000560 <__aeabi_fadd>
                     + (therms->constant_array[const_set][2] * lnRt_over_R25 * lnRt_over_R25)
 80048f6:	68b9      	ldr	r1, [r7, #8]
    float one_over_T = therms->constant_array[const_set][0] + (therms->constant_array[const_set][1] * lnRt_over_R25)
 80048f8:	1c05      	adds	r5, r0, #0
                     + (therms->constant_array[const_set][2] * lnRt_over_R25 * lnRt_over_R25)
 80048fa:	1c20      	adds	r0, r4, #0
 80048fc:	f7fc f996 	bl	8000c2c <__aeabi_fmul>
 8004900:	1c21      	adds	r1, r4, #0
 8004902:	f7fc f993 	bl	8000c2c <__aeabi_fmul>
 8004906:	1c01      	adds	r1, r0, #0
 8004908:	1c28      	adds	r0, r5, #0
 800490a:	f7fb fe29 	bl	8000560 <__aeabi_fadd>
                     + (therms->constant_array[const_set][3] * lnRt_over_R25 * lnRt_over_R25 * lnRt_over_R25);
 800490e:	68f9      	ldr	r1, [r7, #12]
                     + (therms->constant_array[const_set][2] * lnRt_over_R25 * lnRt_over_R25)
 8004910:	1c05      	adds	r5, r0, #0
                     + (therms->constant_array[const_set][3] * lnRt_over_R25 * lnRt_over_R25 * lnRt_over_R25);
 8004912:	1c20      	adds	r0, r4, #0
 8004914:	f7fc f98a 	bl	8000c2c <__aeabi_fmul>
 8004918:	1c21      	adds	r1, r4, #0
 800491a:	f7fc f987 	bl	8000c2c <__aeabi_fmul>
 800491e:	1c21      	adds	r1, r4, #0
 8004920:	f7fc f984 	bl	8000c2c <__aeabi_fmul>
 8004924:	1c01      	adds	r1, r0, #0
    float one_over_T = therms->constant_array[const_set][0] + (therms->constant_array[const_set][1] * lnRt_over_R25)
 8004926:	1c28      	adds	r0, r5, #0
 8004928:	f7fb fe1a 	bl	8000560 <__aeabi_fadd>
 800492c:	1c01      	adds	r1, r0, #0
    return (1 / one_over_T) - 272.15;
 800492e:	20fe      	movs	r0, #254	; 0xfe
 8004930:	0580      	lsls	r0, r0, #22
 8004932:	f7fb ffb3 	bl	800089c <__aeabi_fdiv>
 8004936:	f7fe fac3 	bl	8002ec0 <__aeabi_f2d>
 800493a:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <get_temp+0x17c>)
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <get_temp+0x180>)
 800493e:	f7fd fe83 	bl	8002648 <__aeabi_dsub>
 8004942:	f7fe fb05 	bl	8002f50 <__aeabi_d2f>
}
 8004946:	bc80      	pop	{r7}
 8004948:	46b8      	mov	r8, r7
 800494a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (Rt < 32770 && Rt >= 3599){
 800494c:	4921      	ldr	r1, [pc, #132]	; (80049d4 <get_temp+0x178>)
 800494e:	1c20      	adds	r0, r4, #0
 8004950:	f7fb fdc0 	bl	80004d4 <__aeabi_fcmplt>
 8004954:	2800      	cmp	r0, #0
 8004956:	d007      	beq.n	8004968 <get_temp+0x10c>
 8004958:	4921      	ldr	r1, [pc, #132]	; (80049e0 <get_temp+0x184>)
 800495a:	1c20      	adds	r0, r4, #0
 800495c:	f7fb fdd8 	bl	8000510 <__aeabi_fcmpge>
 8004960:	2301      	movs	r3, #1
 8004962:	4698      	mov	r8, r3
 8004964:	2800      	cmp	r0, #0
 8004966:	d1af      	bne.n	80048c8 <get_temp+0x6c>
    } else if (Rt < 3599 && Rt >= 681.6){
 8004968:	491d      	ldr	r1, [pc, #116]	; (80049e0 <get_temp+0x184>)
 800496a:	1c20      	adds	r0, r4, #0
 800496c:	f7fb fdb2 	bl	80004d4 <__aeabi_fcmplt>
 8004970:	2800      	cmp	r0, #0
 8004972:	d117      	bne.n	80049a4 <get_temp+0x148>
 8004974:	1c20      	adds	r0, r4, #0
 8004976:	f7fe faa3 	bl	8002ec0 <__aeabi_f2d>
 800497a:	0006      	movs	r6, r0
 800497c:	000f      	movs	r7, r1
    } else if (Rt < 681.6 && Rt >= 187){
 800497e:	0030      	movs	r0, r6
 8004980:	0039      	movs	r1, r7
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <get_temp+0x188>)
 8004984:	4b18      	ldr	r3, [pc, #96]	; (80049e8 <get_temp+0x18c>)
 8004986:	f7fb fd6b 	bl	8000460 <__aeabi_dcmplt>
 800498a:	2800      	cmp	r0, #0
 800498c:	d007      	beq.n	800499e <get_temp+0x142>
 800498e:	4917      	ldr	r1, [pc, #92]	; (80049ec <get_temp+0x190>)
 8004990:	1c20      	adds	r0, r4, #0
 8004992:	f7fb fdbd 	bl	8000510 <__aeabi_fcmpge>
 8004996:	2303      	movs	r3, #3
 8004998:	4698      	mov	r8, r3
 800499a:	2800      	cmp	r0, #0
 800499c:	d194      	bne.n	80048c8 <get_temp+0x6c>
    float one_over_T = therms->constant_array[const_set][0] + (therms->constant_array[const_set][1] * lnRt_over_R25)
 800499e:	2300      	movs	r3, #0
 80049a0:	4698      	mov	r8, r3
 80049a2:	e791      	b.n	80048c8 <get_temp+0x6c>
    } else if (Rt < 3599 && Rt >= 681.6){
 80049a4:	1c20      	adds	r0, r4, #0
 80049a6:	f7fe fa8b 	bl	8002ec0 <__aeabi_f2d>
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <get_temp+0x18c>)
 80049ac:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <get_temp+0x188>)
 80049ae:	0006      	movs	r6, r0
 80049b0:	000f      	movs	r7, r1
 80049b2:	f7fb fd73 	bl	800049c <__aeabi_dcmpge>
 80049b6:	2302      	movs	r3, #2
 80049b8:	4698      	mov	r8, r3
 80049ba:	2800      	cmp	r0, #0
 80049bc:	d000      	beq.n	80049c0 <get_temp+0x164>
 80049be:	e783      	b.n	80048c8 <get_temp+0x6c>
 80049c0:	e7dd      	b.n	800497e <get_temp+0x122>
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	200005b8 	.word	0x200005b8
 80049c8:	00000ffe 	.word	0x00000ffe
 80049cc:	457ff000 	.word	0x457ff000
 80049d0:	49291780 	.word	0x49291780
 80049d4:	47000200 	.word	0x47000200
 80049d8:	66666666 	.word	0x66666666
 80049dc:	40710266 	.word	0x40710266
 80049e0:	4560f000 	.word	0x4560f000
 80049e4:	cccccccd 	.word	0xcccccccd
 80049e8:	40854ccc 	.word	0x40854ccc
 80049ec:	433b0000 	.word	0x433b0000

080049f0 <send_thermistor_data>:

void deleteThermistors(Thermistors* thermistors){
    free(thermistors);
}

void send_thermistor_data(Thermistors* therms, UART_HandleTypeDef* huart){
 80049f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f2:	46c6      	mov	lr, r8
 80049f4:	b500      	push	{lr}
 80049f6:	0006      	movs	r6, r0
 80049f8:	4688      	mov	r8, r1
  HAL_ADC_Start_DMA(&hadc1,value,3);
 80049fa:	2203      	movs	r2, #3
 80049fc:	491d      	ldr	r1, [pc, #116]	; (8004a74 <send_thermistor_data+0x84>)
 80049fe:	481e      	ldr	r0, [pc, #120]	; (8004a78 <send_thermistor_data+0x88>)
void send_thermistor_data(Thermistors* therms, UART_HandleTypeDef* huart){
 8004a00:	b092      	sub	sp, #72	; 0x48
  HAL_ADC_Start_DMA(&hadc1,value,3);
 8004a02:	f000 fc15 	bl	8005230 <HAL_ADC_Start_DMA>
  for(int t = 0; t < 3; t++){
 8004a06:	4f1d      	ldr	r7, [pc, #116]	; (8004a7c <send_thermistor_data+0x8c>)
 8004a08:	2400      	movs	r4, #0
 8004a0a:	003d      	movs	r5, r7
    curr_temps[t] = get_temp(t, therms);
 8004a0c:	b2e0      	uxtb	r0, r4
 8004a0e:	0031      	movs	r1, r6
 8004a10:	f7ff ff24 	bl	800485c <get_temp>
  for(int t = 0; t < 3; t++){
 8004a14:	3401      	adds	r4, #1
    curr_temps[t] = get_temp(t, therms);
 8004a16:	c501      	stmia	r5!, {r0}
  for(int t = 0; t < 3; t++){
 8004a18:	2c03      	cmp	r4, #3
 8004a1a:	d1f7      	bne.n	8004a0c <send_thermistor_data+0x1c>

  }

  char string[50] = "";
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	222e      	movs	r2, #46	; 0x2e
 8004a20:	2100      	movs	r1, #0
 8004a22:	a806      	add	r0, sp, #24
 8004a24:	9305      	str	r3, [sp, #20]
 8004a26:	f004 fe2c 	bl	8009682 <memset>

  sprintf((char *)string, "$THERMISTOR,%f,%f,%f,\n", curr_temps[THERMISTOR_OF_HEATER_0],
 8004a2a:	68b8      	ldr	r0, [r7, #8]
 8004a2c:	f7fe fa48 	bl	8002ec0 <__aeabi_f2d>
 8004a30:	0004      	movs	r4, r0
 8004a32:	6838      	ldr	r0, [r7, #0]
 8004a34:	000d      	movs	r5, r1
 8004a36:	f7fe fa43 	bl	8002ec0 <__aeabi_f2d>
 8004a3a:	9002      	str	r0, [sp, #8]
 8004a3c:	9103      	str	r1, [sp, #12]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe fa3e 	bl	8002ec0 <__aeabi_f2d>
 8004a44:	002b      	movs	r3, r5
 8004a46:	0022      	movs	r2, r4
 8004a48:	9000      	str	r0, [sp, #0]
 8004a4a:	9101      	str	r1, [sp, #4]
 8004a4c:	490c      	ldr	r1, [pc, #48]	; (8004a80 <send_thermistor_data+0x90>)
 8004a4e:	a805      	add	r0, sp, #20
 8004a50:	f005 fb82 	bl	800a158 <siprintf>
		  curr_temps[THERMISTOR_OF_HEATER_1], curr_temps[THERMISTOR_OF_HEATER_2]);
  //HAL_UART_Transmit(huart, (uint8_t *)string, sizeof(string), 15);
  HAL_Delay(300);
 8004a54:	2096      	movs	r0, #150	; 0x96
 8004a56:	0040      	lsls	r0, r0, #1
 8004a58:	f000 f88a 	bl	8004b70 <HAL_Delay>
  HAL_UART_Transmit_IT(huart, (uint8_t *)string, sizeof(string));
 8004a5c:	2232      	movs	r2, #50	; 0x32
 8004a5e:	a905      	add	r1, sp, #20
 8004a60:	4640      	mov	r0, r8
 8004a62:	f003 fde3 	bl	800862c <HAL_UART_Transmit_IT>
  HAL_Delay(15);
 8004a66:	200f      	movs	r0, #15
 8004a68:	f000 f882 	bl	8004b70 <HAL_Delay>
  // Delay before Clearing flags so beaglebone can successfully read the
//  HAL_Delay(100);


}
 8004a6c:	b012      	add	sp, #72	; 0x48
 8004a6e:	bc80      	pop	{r7}
 8004a70:	46b8      	mov	r8, r7
 8004a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a74:	200005b8 	.word	0x200005b8
 8004a78:	200002bc 	.word	0x200002bc
 8004a7c:	20000088 	.word	0x20000088
 8004a80:	0800cea0 	.word	0x0800cea0

08004a84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
   ldr   r0, =_estack
 8004a84:	480d      	ldr	r0, [pc, #52]	; (8004abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a86:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a88:	f7ff fea4 	bl	80047d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a8c:	480c      	ldr	r0, [pc, #48]	; (8004ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a8e:	490d      	ldr	r1, [pc, #52]	; (8004ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a90:	4a0d      	ldr	r2, [pc, #52]	; (8004ac8 <LoopForever+0xe>)
  movs r3, #0
 8004a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a94:	e002      	b.n	8004a9c <LoopCopyDataInit>

08004a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a9a:	3304      	adds	r3, #4

08004a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004aa0:	d3f9      	bcc.n	8004a96 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aa2:	4a0a      	ldr	r2, [pc, #40]	; (8004acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004aa4:	4c0a      	ldr	r4, [pc, #40]	; (8004ad0 <LoopForever+0x16>)
  movs r3, #0
 8004aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aa8:	e001      	b.n	8004aae <LoopFillZerobss>

08004aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aac:	3204      	adds	r2, #4

08004aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ab0:	d3fb      	bcc.n	8004aaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004ab2:	f004 fdaf 	bl	8009614 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004ab6:	f7fe fd81 	bl	80035bc <main>

08004aba <LoopForever>:

LoopForever:
  b LoopForever
 8004aba:	e7fe      	b.n	8004aba <LoopForever>
   ldr   r0, =_estack
 8004abc:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8004ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ac4:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8004ac8:	0800d36c 	.word	0x0800d36c
  ldr r2, =_sbss
 8004acc:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8004ad0:	200005e0 	.word	0x200005e0

08004ad4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ad4:	e7fe      	b.n	8004ad4 <ADC1_IRQHandler>
	...

08004ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ad8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004ada:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <HAL_InitTick+0x40>)
{
 8004adc:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8004ade:	7819      	ldrb	r1, [r3, #0]
 8004ae0:	2900      	cmp	r1, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ae4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004ae6:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004ae8:	20fa      	movs	r0, #250	; 0xfa
 8004aea:	0080      	lsls	r0, r0, #2
 8004aec:	f7fb fb2c 	bl	8000148 <__udivsi3>
 8004af0:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_InitTick+0x44>)
 8004af2:	0001      	movs	r1, r0
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	f7fb fb27 	bl	8000148 <__udivsi3>
 8004afa:	f000 fc41 	bl	8005380 <HAL_SYSTICK_Config>
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b02:	2c03      	cmp	r4, #3
 8004b04:	d8ee      	bhi.n	8004ae4 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b06:	3801      	subs	r0, #1
 8004b08:	2200      	movs	r2, #0
 8004b0a:	0021      	movs	r1, r4
 8004b0c:	f000 fbea 	bl	80052e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b10:	4b03      	ldr	r3, [pc, #12]	; (8004b20 <HAL_InitTick+0x48>)
 8004b12:	2000      	movs	r0, #0
 8004b14:	601c      	str	r4, [r3, #0]
  return status;
 8004b16:	e7e6      	b.n	8004ae6 <HAL_InitTick+0xe>
 8004b18:	20000098 	.word	0x20000098
 8004b1c:	20000084 	.word	0x20000084
 8004b20:	2000009c 	.word	0x2000009c

08004b24 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	4a08      	ldr	r2, [pc, #32]	; (8004b48 <HAL_Init+0x24>)
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	6811      	ldr	r1, [r2, #0]
{
 8004b2c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b2e:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b30:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b32:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b34:	f7ff ffd0 	bl	8004ad8 <HAL_InitTick>
 8004b38:	1e04      	subs	r4, r0, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8004b3c:	2401      	movs	r4, #1
}
 8004b3e:	0020      	movs	r0, r4
 8004b40:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8004b42:	f7ff fc29 	bl	8004398 <HAL_MspInit>
 8004b46:	e7fa      	b.n	8004b3e <HAL_Init+0x1a>
 8004b48:	40022000 	.word	0x40022000

08004b4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004b4c:	4a03      	ldr	r2, [pc, #12]	; (8004b5c <HAL_IncTick+0x10>)
 8004b4e:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <HAL_IncTick+0x14>)
 8004b50:	6811      	ldr	r1, [r2, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	185b      	adds	r3, r3, r1
 8004b56:	6013      	str	r3, [r2, #0]
}
 8004b58:	4770      	bx	lr
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	200005cc 	.word	0x200005cc
 8004b60:	20000098 	.word	0x20000098

08004b64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004b64:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <HAL_GetTick+0x8>)
 8004b66:	6818      	ldr	r0, [r3, #0]
}
 8004b68:	4770      	bx	lr
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	200005cc 	.word	0x200005cc

08004b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b74:	f7ff fff6 	bl	8004b64 <HAL_GetTick>
 8004b78:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b7a:	1c63      	adds	r3, r4, #1
 8004b7c:	d002      	beq.n	8004b84 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b7e:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <HAL_Delay+0x20>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b84:	f7ff ffee 	bl	8004b64 <HAL_GetTick>
 8004b88:	1b40      	subs	r0, r0, r5
 8004b8a:	42a0      	cmp	r0, r4
 8004b8c:	d3fa      	bcc.n	8004b84 <HAL_Delay+0x14>
  {
  }
}
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	20000098 	.word	0x20000098

08004b94 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b96:	46d6      	mov	lr, sl
 8004b98:	464f      	mov	r7, r9
 8004b9a:	4646      	mov	r6, r8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004b9c:	2300      	movs	r3, #0
{
 8004b9e:	b5c0      	push	{r6, r7, lr}
 8004ba0:	b082      	sub	sp, #8
 8004ba2:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8004ba4:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ba6:	d100      	bne.n	8004baa <HAL_ADC_Init+0x16>
 8004ba8:	e0f2      	b.n	8004d90 <HAL_ADC_Init+0x1fc>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004baa:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8004bac:	2d00      	cmp	r5, #0
 8004bae:	d100      	bne.n	8004bb2 <HAL_ADC_Init+0x1e>
 8004bb0:	e0e4      	b.n	8004d7c <HAL_ADC_Init+0x1e8>
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004bb2:	2380      	movs	r3, #128	; 0x80

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bb4:	6825      	ldr	r5, [r4, #0]
 8004bb6:	055b      	lsls	r3, r3, #21
 8004bb8:	68aa      	ldr	r2, [r5, #8]
 8004bba:	421a      	tst	r2, r3
 8004bbc:	d115      	bne.n	8004bea <HAL_ADC_Init+0x56>
  MODIFY_REG(ADCx->CR,
 8004bbe:	68aa      	ldr	r2, [r5, #8]
 8004bc0:	4994      	ldr	r1, [pc, #592]	; (8004e14 <HAL_ADC_Init+0x280>)
 8004bc2:	400a      	ands	r2, r1
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60ab      	str	r3, [r5, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bc8:	4b93      	ldr	r3, [pc, #588]	; (8004e18 <HAL_ADC_Init+0x284>)
 8004bca:	4994      	ldr	r1, [pc, #592]	; (8004e1c <HAL_ADC_Init+0x288>)
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	f7fb fabb 	bl	8000148 <__udivsi3>
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	0040      	lsls	r0, r0, #1
 8004bd6:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <HAL_ADC_Init+0x56>
    {
      wait_loop_index--;
 8004bde:	9b01      	ldr	r3, [sp, #4]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004be4:	9b01      	ldr	r3, [sp, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f9      	bne.n	8004bde <HAL_ADC_Init+0x4a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004bea:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bec:	2000      	movs	r0, #0
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	d400      	bmi.n	8004bf4 <HAL_ADC_Init+0x60>
 8004bf2:	e0b5      	b.n	8004d60 <HAL_ADC_Init+0x1cc>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bf4:	68ab      	ldr	r3, [r5, #8]
 8004bf6:	075b      	lsls	r3, r3, #29
 8004bf8:	d50b      	bpl.n	8004c12 <HAL_ADC_Init+0x7e>
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bfa:	6da3      	ldr	r3, [r4, #88]	; 0x58

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfc:	2210      	movs	r2, #16

    tmp_hal_status = HAL_ERROR;
 8004bfe:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c02:	4313      	orrs	r3, r2
 8004c04:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  return tmp_hal_status;
}
 8004c06:	b002      	add	sp, #8
 8004c08:	bce0      	pop	{r5, r6, r7}
 8004c0a:	46ba      	mov	sl, r7
 8004c0c:	46b1      	mov	r9, r6
 8004c0e:	46a8      	mov	r8, r5
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c12:	2210      	movs	r2, #16
 8004c14:	0016      	movs	r6, r2
 8004c16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c18:	401e      	ands	r6, r3
 8004c1a:	421a      	tst	r2, r3
 8004c1c:	d1ee      	bne.n	8004bfc <HAL_ADC_Init+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8004c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c20:	4a7f      	ldr	r2, [pc, #508]	; (8004e20 <HAL_ADC_Init+0x28c>)
  uint32_t tmpCFGR2 = 0UL;
 8004c22:	2700      	movs	r7, #0
    ADC_STATE_CLR_SET(hadc->State,
 8004c24:	4013      	ands	r3, r2
 8004c26:	3206      	adds	r2, #6
 8004c28:	32ff      	adds	r2, #255	; 0xff
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c2e:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c30:	07db      	lsls	r3, r3, #31
 8004c32:	d436      	bmi.n	8004ca2 <HAL_ADC_Init+0x10e>
      if (hadc->Init.OversamplingMode == ENABLE)
 8004c34:	213c      	movs	r1, #60	; 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8004c36:	68eb      	ldr	r3, [r5, #12]
 8004c38:	3216      	adds	r2, #22
 8004c3a:	4393      	bics	r3, r2
 8004c3c:	68a2      	ldr	r2, [r4, #8]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c3e:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60eb      	str	r3, [r5, #12]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c44:	6863      	ldr	r3, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8004c46:	5c61      	ldrb	r1, [r4, r1]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004c48:	4698      	mov	r8, r3
 8004c4a:	0f9b      	lsrs	r3, r3, #30
 8004c4c:	079b      	lsls	r3, r3, #30
 8004c4e:	4699      	mov	r9, r3
 8004c50:	431f      	orrs	r7, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 8004c52:	2901      	cmp	r1, #1
 8004c54:	d108      	bne.n	8004c68 <HAL_ADC_Init+0xd4>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004c56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004c5e:	4317      	orrs	r7, r2
 8004c60:	431f      	orrs	r7, r3
 8004c62:	464b      	mov	r3, r9
 8004c64:	431f      	orrs	r7, r3
 8004c66:	430f      	orrs	r7, r1
      MODIFY_REG(hadc->Instance->CFGR2,
 8004c68:	692b      	ldr	r3, [r5, #16]
 8004c6a:	496e      	ldr	r1, [pc, #440]	; (8004e24 <HAL_ADC_Init+0x290>)
 8004c6c:	400b      	ands	r3, r1
 8004c6e:	433b      	orrs	r3, r7
 8004c70:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004c72:	4643      	mov	r3, r8
 8004c74:	2180      	movs	r1, #128	; 0x80
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	085b      	lsrs	r3, r3, #1
 8004c7a:	05c9      	lsls	r1, r1, #23
 8004c7c:	428b      	cmp	r3, r1
 8004c7e:	d010      	beq.n	8004ca2 <HAL_ADC_Init+0x10e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004c80:	2380      	movs	r3, #128	; 0x80
 8004c82:	061b      	lsls	r3, r3, #24
 8004c84:	4598      	cmp	r8, r3
 8004c86:	d00c      	beq.n	8004ca2 <HAL_ADC_Init+0x10e>
        MODIFY_REG(ADC1_COMMON->CCR,
 8004c88:	4967      	ldr	r1, [pc, #412]	; (8004e28 <HAL_ADC_Init+0x294>)
 8004c8a:	4a68      	ldr	r2, [pc, #416]	; (8004e2c <HAL_ADC_Init+0x298>)
 8004c8c:	680b      	ldr	r3, [r1, #0]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	22f0      	movs	r2, #240	; 0xf0
 8004c92:	4699      	mov	r9, r3
 8004c94:	4643      	mov	r3, r8
 8004c96:	0392      	lsls	r2, r2, #14
 8004c98:	4013      	ands	r3, r2
 8004c9a:	001a      	movs	r2, r3
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	600a      	str	r2, [r1, #0]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004ca2:	7e22      	ldrb	r2, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004ca4:	7e63      	ldrb	r3, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004ca6:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004ca8:	03db      	lsls	r3, r3, #15
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004caa:	6b21      	ldr	r1, [r4, #48]	; 0x30
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004cac:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004cae:	7ea3      	ldrb	r3, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004cb0:	468a      	mov	sl, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004cb2:	4698      	mov	r8, r3
 8004cb4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_ADC_Init+0x12c>
 8004cba:	2180      	movs	r1, #128	; 0x80
 8004cbc:	0149      	lsls	r1, r1, #5
 8004cbe:	468a      	mov	sl, r1
 8004cc0:	68e1      	ldr	r1, [r4, #12]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	469c      	mov	ip, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db5c      	blt.n	8004d88 <HAL_ADC_Init+0x1f4>
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	039b      	lsls	r3, r3, #14
 8004cd2:	4699      	mov	r9, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cd4:	232c      	movs	r3, #44	; 0x2c
 8004cd6:	5ce3      	ldrb	r3, [r4, r3]
 8004cd8:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	4652      	mov	r2, sl
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	464a      	mov	r2, r9
 8004ce2:	4313      	orrs	r3, r2
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	4691      	mov	r9, r2
 8004ce8:	5ca2      	ldrb	r2, [r4, r2]
 8004cea:	4692      	mov	sl, r2
 8004cec:	2a01      	cmp	r2, #1
 8004cee:	d06f      	beq.n	8004dd0 <HAL_ADC_Init+0x23c>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004cf2:	2a00      	cmp	r2, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_ADC_Init+0x16e>
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004cf6:	21e0      	movs	r1, #224	; 0xe0
 8004cf8:	0049      	lsls	r1, r1, #1
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR1,
 8004d02:	68ea      	ldr	r2, [r5, #12]
 8004d04:	494a      	ldr	r1, [pc, #296]	; (8004e30 <HAL_ADC_Init+0x29c>)
 8004d06:	400a      	ands	r2, r1
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	60ea      	str	r2, [r5, #12]
    MODIFY_REG(hadc->Instance->CFGR2,
 8004d0c:	692a      	ldr	r2, [r5, #16]
 8004d0e:	4949      	ldr	r1, [pc, #292]	; (8004e34 <HAL_ADC_Init+0x2a0>)
 8004d10:	400a      	ands	r2, r1
  MODIFY_REG(ADCx->SMPR,
 8004d12:	2107      	movs	r1, #7
 8004d14:	4317      	orrs	r7, r2
 8004d16:	612f      	str	r7, [r5, #16]
 8004d18:	2770      	movs	r7, #112	; 0x70
 8004d1a:	696a      	ldr	r2, [r5, #20]
 8004d1c:	438a      	bics	r2, r1
 8004d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d20:	430a      	orrs	r2, r1
 8004d22:	616a      	str	r2, [r5, #20]
 8004d24:	6969      	ldr	r1, [r5, #20]
 8004d26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d28:	43b9      	bics	r1, r7
 8004d2a:	0112      	lsls	r2, r2, #4
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	616a      	str	r2, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004d30:	4662      	mov	r2, ip
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	d12e      	bne.n	8004d94 <HAL_ADC_Init+0x200>
      SET_BIT(hadc->Instance->CHSELR,
 8004d36:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004d38:	3a10      	subs	r2, #16
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	62aa      	str	r2, [r5, #40]	; 0x28
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8004d3e:	68ea      	ldr	r2, [r5, #12]
 8004d40:	493d      	ldr	r1, [pc, #244]	; (8004e38 <HAL_ADC_Init+0x2a4>)
 8004d42:	400a      	ands	r2, r1
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d04a      	beq.n	8004dde <HAL_ADC_Init+0x24a>
      ADC_STATE_CLR_SET(hadc->State,
 8004d48:	2212      	movs	r2, #18
 8004d4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 8004d4c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8004d4e:	4393      	bics	r3, r2
 8004d50:	3a02      	subs	r2, #2
 8004d52:	4313      	orrs	r3, r2
 8004d54:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d58:	3a0f      	subs	r2, #15
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8004d5e:	e752      	b.n	8004c06 <HAL_ADC_Init+0x72>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d60:	2210      	movs	r2, #16
 8004d62:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8004d64:	3001      	adds	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d66:	4313      	orrs	r3, r2
 8004d68:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d6c:	3a0f      	subs	r2, #15
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004d72:	68ab      	ldr	r3, [r5, #8]
 8004d74:	075b      	lsls	r3, r3, #29
 8004d76:	d400      	bmi.n	8004d7a <HAL_ADC_Init+0x1e6>
 8004d78:	e74b      	b.n	8004c12 <HAL_ADC_Init+0x7e>
 8004d7a:	e73e      	b.n	8004bfa <HAL_ADC_Init+0x66>
    HAL_ADC_MspInit(hadc);
 8004d7c:	f7ff fb24 	bl	80043c8 <HAL_ADC_MspInit>
    hadc->Lock = HAL_UNLOCKED;
 8004d80:	2354      	movs	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8004d82:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8004d84:	54e5      	strb	r5, [r4, r3]
 8004d86:	e714      	b.n	8004bb2 <HAL_ADC_Init+0x1e>
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	4699      	mov	r9, r3
 8004d8e:	e7a1      	b.n	8004cd4 <HAL_ADC_Init+0x140>
    return HAL_ERROR;
 8004d90:	2001      	movs	r0, #1
 8004d92:	e738      	b.n	8004c06 <HAL_ADC_Init+0x72>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d94:	2280      	movs	r2, #128	; 0x80
 8004d96:	0392      	lsls	r2, r2, #14
 8004d98:	4594      	cmp	ip, r2
 8004d9a:	d1d0      	bne.n	8004d3e <HAL_ADC_Init+0x1aa>
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8004d9c:	220f      	movs	r2, #15
 8004d9e:	4694      	mov	ip, r2
 8004da0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004da2:	000f      	movs	r7, r1
 8004da4:	00b2      	lsls	r2, r6, #2
 8004da6:	40d7      	lsrs	r7, r2
 8004da8:	003a      	movs	r2, r7
 8004daa:	4667      	mov	r7, ip
 8004dac:	403a      	ands	r2, r7
 8004dae:	2a0f      	cmp	r2, #15
 8004db0:	d027      	beq.n	8004e02 <HAL_ADC_Init+0x26e>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8004db2:	3601      	adds	r6, #1
 8004db4:	2e08      	cmp	r6, #8
 8004db6:	d1f4      	bne.n	8004da2 <HAL_ADC_Init+0x20e>
        MODIFY_REG(hadc->Instance->CHSELR,
 8004db8:	261c      	movs	r6, #28
 8004dba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8004dbc:	69e2      	ldr	r2, [r4, #28]
 8004dbe:	3a01      	subs	r2, #1
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	4016      	ands	r6, r2
 8004dc4:	2210      	movs	r2, #16
 8004dc6:	4252      	negs	r2, r2
 8004dc8:	40b2      	lsls	r2, r6
 8004dca:	4311      	orrs	r1, r2
 8004dcc:	62a9      	str	r1, [r5, #40]	; 0x28
 8004dce:	e7b6      	b.n	8004d3e <HAL_ADC_Init+0x1aa>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	2900      	cmp	r1, #0
 8004dd4:	d10c      	bne.n	8004df0 <HAL_ADC_Init+0x25c>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004dd6:	2280      	movs	r2, #128	; 0x80
 8004dd8:	0252      	lsls	r2, r2, #9
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	e788      	b.n	8004cf0 <HAL_ADC_Init+0x15c>
      ADC_CLEAR_ERRORCODE(hadc);
 8004dde:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004de0:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8004de2:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8004de4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004de6:	4393      	bics	r3, r2
 8004de8:	3a02      	subs	r2, #2
 8004dea:	4313      	orrs	r3, r2
 8004dec:	65a3      	str	r3, [r4, #88]	; 0x58
 8004dee:	e70a      	b.n	8004c06 <HAL_ADC_Init+0x72>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004df0:	464a      	mov	r2, r9
 8004df2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004df4:	430a      	orrs	r2, r1
 8004df6:	65a2      	str	r2, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df8:	4652      	mov	r2, sl
 8004dfa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	65e2      	str	r2, [r4, #92]	; 0x5c
 8004e00:	e776      	b.n	8004cf0 <HAL_ADC_Init+0x15c>
      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8004e02:	2e01      	cmp	r6, #1
 8004e04:	d1d8      	bne.n	8004db8 <HAL_ADC_Init+0x224>
        SET_BIT(hadc->Instance->CHSELR,
 8004e06:	2210      	movs	r2, #16
 8004e08:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004e0a:	4252      	negs	r2, r2
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	62aa      	str	r2, [r5, #40]	; 0x28
 8004e10:	e795      	b.n	8004d3e <HAL_ADC_Init+0x1aa>
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	6fffffe8 	.word	0x6fffffe8
 8004e18:	20000084 	.word	0x20000084
 8004e1c:	00030d40 	.word	0x00030d40
 8004e20:	fffffefd 	.word	0xfffffefd
 8004e24:	1ffffc02 	.word	0x1ffffc02
 8004e28:	40012708 	.word	0x40012708
 8004e2c:	ffc3ffff 	.word	0xffc3ffff
 8004e30:	fffe0219 	.word	0xfffe0219
 8004e34:	dffffc02 	.word	0xdffffc02
 8004e38:	833fffe7 	.word	0x833fffe7

08004e3c <HAL_ADC_ConvCpltCallback>:
 8004e3c:	4770      	bx	lr
 8004e3e:	46c0      	nop			; (mov r8, r8)

08004e40 <HAL_ADC_ConvHalfCpltCallback>:
 8004e40:	4770      	bx	lr
 8004e42:	46c0      	nop			; (mov r8, r8)

08004e44 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e44:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e46:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004e48:	f7ff fffa 	bl	8004e40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)

08004e50 <HAL_ADC_ErrorCallback>:
 8004e50:	4770      	bx	lr
 8004e52:	46c0      	nop			; (mov r8, r8)

08004e54 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e54:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e56:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004e58:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e5a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e60:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004e62:	3a3c      	subs	r2, #60	; 0x3c
 8004e64:	4313      	orrs	r3, r2
 8004e66:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e68:	f7ff fff2 	bl	8004e50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)

08004e70 <ADC_DMAConvCplt>:
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e70:	2150      	movs	r1, #80	; 0x50
{
 8004e72:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e74:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8004e76:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004e78:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004e7a:	4211      	tst	r1, r2
 8004e7c:	d10d      	bne.n	8004e9a <ADC_DMAConvCplt+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4313      	orrs	r3, r2
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004e86:	22c0      	movs	r2, #192	; 0xc0
 8004e88:	6583      	str	r3, [r0, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e8a:	6803      	ldr	r3, [r0, #0]
 8004e8c:	0112      	lsls	r2, r2, #4
 8004e8e:	68d9      	ldr	r1, [r3, #12]
 8004e90:	4211      	tst	r1, r2
 8004e92:	d00a      	beq.n	8004eaa <ADC_DMAConvCplt+0x3a>
    HAL_ADC_ConvCpltCallback(hadc);
 8004e94:	f7ff ffd2 	bl	8004e3c <HAL_ADC_ConvCpltCallback>
}
 8004e98:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e9a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004e9c:	06d2      	lsls	r2, r2, #27
 8004e9e:	d416      	bmi.n	8004ece <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ea0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ea6:	4790      	blx	r2
}
 8004ea8:	e7f6      	b.n	8004e98 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004eaa:	7e82      	ldrb	r2, [r0, #26]
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	d1f1      	bne.n	8004e94 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	0712      	lsls	r2, r2, #28
 8004eb4:	d5ee      	bpl.n	8004e94 <ADC_DMAConvCplt+0x24>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	0752      	lsls	r2, r2, #29
 8004eba:	d50b      	bpl.n	8004ed4 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	6583      	str	r3, [r0, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8004ec6:	3a1f      	subs	r2, #31
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	65c3      	str	r3, [r0, #92]	; 0x5c
 8004ecc:	e7e2      	b.n	8004e94 <ADC_DMAConvCplt+0x24>
      HAL_ADC_ErrorCallback(hadc);
 8004ece:	f7ff ffbf 	bl	8004e50 <HAL_ADC_ErrorCallback>
 8004ed2:	e7e1      	b.n	8004e98 <ADC_DMAConvCplt+0x28>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004ed4:	210c      	movs	r1, #12
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	438a      	bics	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8004edc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004ede:	4a03      	ldr	r2, [pc, #12]	; (8004eec <ADC_DMAConvCplt+0x7c>)
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	3204      	adds	r2, #4
 8004ee4:	32ff      	adds	r2, #255	; 0xff
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	6583      	str	r3, [r0, #88]	; 0x58
 8004eea:	e7d3      	b.n	8004e94 <ADC_DMAConvCplt+0x24>
 8004eec:	fffffefe 	.word	0xfffffefe

08004ef0 <HAL_ADC_ConfigChannel>:
{
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	4645      	mov	r5, r8
 8004ef4:	46de      	mov	lr, fp
 8004ef6:	4657      	mov	r7, sl
 8004ef8:	464e      	mov	r6, r9
  __IO uint32_t wait_loop_index = 0UL;
 8004efa:	2300      	movs	r3, #0
{
 8004efc:	b5e0      	push	{r5, r6, r7, lr}
 8004efe:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8004f00:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8004f02:	3354      	adds	r3, #84	; 0x54
 8004f04:	5cc2      	ldrb	r2, [r0, r3]
{
 8004f06:	0004      	movs	r4, r0
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004f08:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8004f0a:	2a01      	cmp	r2, #1
 8004f0c:	d100      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x20>
 8004f0e:	e091      	b.n	8005034 <HAL_ADC_ConfigChannel+0x144>
 8004f10:	2001      	movs	r0, #1
 8004f12:	2204      	movs	r2, #4
 8004f14:	54e0      	strb	r0, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	689e      	ldr	r6, [r3, #8]
 8004f1a:	4232      	tst	r2, r6
 8004f1c:	d00d      	beq.n	8004f3a <HAL_ADC_ConfigChannel+0x4a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f20:	321c      	adds	r2, #28
 8004f22:	4313      	orrs	r3, r2
 8004f24:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 8004f26:	2354      	movs	r3, #84	; 0x54
 8004f28:	2200      	movs	r2, #0
 8004f2a:	54e2      	strb	r2, [r4, r3]
}
 8004f2c:	b005      	add	sp, #20
 8004f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8004f30:	46bb      	mov	fp, r7
 8004f32:	46b2      	mov	sl, r6
 8004f34:	46a9      	mov	r9, r5
 8004f36:	46a0      	mov	r8, r4
 8004f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8004f3a:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004f3c:	4395      	bics	r5, r2
    if (pConfig->Rank != ADC_RANK_NONE)
 8004f3e:	2e02      	cmp	r6, #2
 8004f40:	d05c      	beq.n	8004ffc <HAL_ADC_ConfigChannel+0x10c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004f42:	2780      	movs	r7, #128	; 0x80
 8004f44:	063f      	lsls	r7, r7, #24
 8004f46:	42bd      	cmp	r5, r7
 8004f48:	d051      	beq.n	8004fee <HAL_ADC_ConfigChannel+0xfe>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004f4a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004f4c:	270f      	movs	r7, #15
 8004f4e:	46aa      	mov	sl, r5
 8004f50:	251f      	movs	r5, #31
 8004f52:	46ac      	mov	ip, r5
 8004f54:	4035      	ands	r5, r6
 8004f56:	40af      	lsls	r7, r5
 8004f58:	46a9      	mov	r9, r5
 8004f5a:	43fd      	mvns	r5, r7
 8004f5c:	9500      	str	r5, [sp, #0]
 8004f5e:	4655      	mov	r5, sl
 8004f60:	43bd      	bics	r5, r7
 8004f62:	46a8      	mov	r8, r5
 8004f64:	680d      	ldr	r5, [r1, #0]
 8004f66:	9701      	str	r7, [sp, #4]
 8004f68:	036f      	lsls	r7, r5, #13
 8004f6a:	d16c      	bne.n	8005046 <HAL_ADC_ConfigChannel+0x156>
 8004f6c:	4660      	mov	r0, ip
 8004f6e:	0eaa      	lsrs	r2, r5, #26
 8004f70:	4010      	ands	r0, r2
 8004f72:	0002      	movs	r2, r0
 8004f74:	4648      	mov	r0, r9
 8004f76:	4082      	lsls	r2, r0
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4310      	orrs	r0, r2
 8004f7c:	4680      	mov	r8, r0
 8004f7e:	4642      	mov	r2, r8
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004f80:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004f82:	6622      	str	r2, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004f84:	69e2      	ldr	r2, [r4, #28]
 8004f86:	3601      	adds	r6, #1
 8004f88:	4296      	cmp	r6, r2
 8004f8a:	d808      	bhi.n	8004f9e <HAL_ADC_ConfigChannel+0xae>
  MODIFY_REG(ADCx->CHSELR,
 8004f8c:	464e      	mov	r6, r9
 8004f8e:	00aa      	lsls	r2, r5, #2
 8004f90:	0f12      	lsrs	r2, r2, #28
 8004f92:	40b2      	lsls	r2, r6
 8004f94:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f96:	9e00      	ldr	r6, [sp, #0]
 8004f98:	4030      	ands	r0, r6
 8004f9a:	4302      	orrs	r2, r0
 8004f9c:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 8004f9e:	0228      	lsls	r0, r5, #8
 8004fa0:	688a      	ldr	r2, [r1, #8]
 8004fa2:	0001      	movs	r1, r0
 8004fa4:	695e      	ldr	r6, [r3, #20]
 8004fa6:	4002      	ands	r2, r0
 8004fa8:	4866      	ldr	r0, [pc, #408]	; (8005144 <HAL_ADC_ConfigChannel+0x254>)
 8004faa:	438e      	bics	r6, r1
 8004fac:	4002      	ands	r2, r0
 8004fae:	4332      	orrs	r2, r6
 8004fb0:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004fb2:	2d00      	cmp	r5, #0
 8004fb4:	db01      	blt.n	8004fba <HAL_ADC_ConfigChannel+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fb6:	2000      	movs	r0, #0
}
 8004fb8:	e7b5      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x36>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004fba:	21e0      	movs	r1, #224	; 0xe0
 8004fbc:	4862      	ldr	r0, [pc, #392]	; (8005148 <HAL_ADC_ConfigChannel+0x258>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004fbe:	4a63      	ldr	r2, [pc, #396]	; (800514c <HAL_ADC_ConfigChannel+0x25c>)
 8004fc0:	6803      	ldr	r3, [r0, #0]
 8004fc2:	0449      	lsls	r1, r1, #17
 8004fc4:	4019      	ands	r1, r3
 8004fc6:	4295      	cmp	r5, r2
 8004fc8:	d051      	beq.n	800506e <HAL_ADC_ConfigChannel+0x17e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fca:	4a61      	ldr	r2, [pc, #388]	; (8005150 <HAL_ADC_ConfigChannel+0x260>)
 8004fcc:	4295      	cmp	r5, r2
 8004fce:	d045      	beq.n	800505c <HAL_ADC_ConfigChannel+0x16c>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004fd0:	4a60      	ldr	r2, [pc, #384]	; (8005154 <HAL_ADC_ConfigChannel+0x264>)
 8004fd2:	4295      	cmp	r5, r2
 8004fd4:	d1ef      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0xc6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fd6:	2580      	movs	r5, #128	; 0x80
 8004fd8:	03ed      	lsls	r5, r5, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004fda:	422b      	tst	r3, r5
 8004fdc:	d1eb      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004fde:	6802      	ldr	r2, [r0, #0]
 8004fe0:	4b5d      	ldr	r3, [pc, #372]	; (8005158 <HAL_ADC_ConfigChannel+0x268>)
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	4315      	orrs	r5, r2
 8004fe8:	6005      	str	r5, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fea:	2000      	movs	r0, #0
}
 8004fec:	e79b      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x36>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004fee:	680d      	ldr	r5, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004ff0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004ff2:	036a      	lsls	r2, r5, #13
 8004ff4:	0b52      	lsrs	r2, r2, #13
 8004ff6:	4302      	orrs	r2, r0
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ffa:	e7d0      	b.n	8004f9e <HAL_ADC_ConfigChannel+0xae>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004ffc:	2280      	movs	r2, #128	; 0x80
 8004ffe:	0612      	lsls	r2, r2, #24
 8005000:	4295      	cmp	r5, r2
 8005002:	d019      	beq.n	8005038 <HAL_ADC_ConfigChannel+0x148>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005004:	680a      	ldr	r2, [r1, #0]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005006:	2a00      	cmp	r2, #0
 8005008:	dad5      	bge.n	8004fb6 <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800500a:	494f      	ldr	r1, [pc, #316]	; (8005148 <HAL_ADC_ConfigChannel+0x258>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800500c:	484f      	ldr	r0, [pc, #316]	; (800514c <HAL_ADC_ConfigChannel+0x25c>)
 800500e:	680b      	ldr	r3, [r1, #0]
 8005010:	4282      	cmp	r2, r0
 8005012:	d029      	beq.n	8005068 <HAL_ADC_ConfigChannel+0x178>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005014:	484e      	ldr	r0, [pc, #312]	; (8005150 <HAL_ADC_ConfigChannel+0x260>)
 8005016:	4282      	cmp	r2, r0
 8005018:	d04c      	beq.n	80050b4 <HAL_ADC_ConfigChannel+0x1c4>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800501a:	484e      	ldr	r0, [pc, #312]	; (8005154 <HAL_ADC_ConfigChannel+0x264>)
 800501c:	4282      	cmp	r2, r0
 800501e:	d1ca      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0xc6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005020:	20c0      	movs	r0, #192	; 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005022:	680a      	ldr	r2, [r1, #0]
 8005024:	0440      	lsls	r0, r0, #17
 8005026:	4003      	ands	r3, r0
 8005028:	484b      	ldr	r0, [pc, #300]	; (8005158 <HAL_ADC_ConfigChannel+0x268>)
 800502a:	4002      	ands	r2, r0
 800502c:	4313      	orrs	r3, r2
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800502e:	2000      	movs	r0, #0
 8005030:	600b      	str	r3, [r1, #0]
 8005032:	e778      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x36>
  __HAL_LOCK(hadc);
 8005034:	2002      	movs	r0, #2
 8005036:	e779      	b.n	8004f2c <HAL_ADC_ConfigChannel+0x3c>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005038:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800503a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800503c:	0350      	lsls	r0, r2, #13
 800503e:	0b40      	lsrs	r0, r0, #13
 8005040:	4381      	bics	r1, r0
 8005042:	6299      	str	r1, [r3, #40]	; 0x28
}
 8005044:	e7df      	b.n	8005006 <HAL_ADC_ConfigChannel+0x116>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005046:	4228      	tst	r0, r5
 8005048:	d199      	bne.n	8004f7e <HAL_ADC_ConfigChannel+0x8e>
 800504a:	2702      	movs	r7, #2
 800504c:	422f      	tst	r7, r5
 800504e:	d02d      	beq.n	80050ac <HAL_ADC_ConfigChannel+0x1bc>
 8005050:	464a      	mov	r2, r9
 8005052:	4090      	lsls	r0, r2
 8005054:	4642      	mov	r2, r8
 8005056:	4302      	orrs	r2, r0
 8005058:	4690      	mov	r8, r2
 800505a:	e790      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x8e>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800505c:	2580      	movs	r5, #128	; 0x80
 800505e:	046d      	lsls	r5, r5, #17
 8005060:	422b      	tst	r3, r5
 8005062:	d0bc      	beq.n	8004fde <HAL_ADC_ConfigChannel+0xee>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005064:	2000      	movs	r0, #0
 8005066:	e75e      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x36>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005068:	20a0      	movs	r0, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800506a:	680a      	ldr	r2, [r1, #0]
 800506c:	e7da      	b.n	8005024 <HAL_ADC_ConfigChannel+0x134>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800506e:	2580      	movs	r5, #128	; 0x80
 8005070:	042d      	lsls	r5, r5, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005072:	422b      	tst	r3, r5
 8005074:	d19f      	bne.n	8004fb6 <HAL_ADC_ConfigChannel+0xc6>
 8005076:	6802      	ldr	r2, [r0, #0]
 8005078:	4b37      	ldr	r3, [pc, #220]	; (8005158 <HAL_ADC_ConfigChannel+0x268>)
 800507a:	401a      	ands	r2, r3
 800507c:	430a      	orrs	r2, r1
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800507e:	4b37      	ldr	r3, [pc, #220]	; (800515c <HAL_ADC_ConfigChannel+0x26c>)
 8005080:	4315      	orrs	r5, r2
 8005082:	6005      	str	r5, [r0, #0]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	4936      	ldr	r1, [pc, #216]	; (8005160 <HAL_ADC_ConfigChannel+0x270>)
 8005088:	f7fb f85e 	bl	8000148 <__udivsi3>
 800508c:	3001      	adds	r0, #1
 800508e:	0043      	lsls	r3, r0, #1
 8005090:	181b      	adds	r3, r3, r0
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8005096:	9b03      	ldr	r3, [sp, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d08c      	beq.n	8004fb6 <HAL_ADC_ConfigChannel+0xc6>
            wait_loop_index--;
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	3b01      	subs	r3, #1
 80050a0:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 80050a2:	9b03      	ldr	r3, [sp, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1f9      	bne.n	800509c <HAL_ADC_ConfigChannel+0x1ac>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050a8:	2000      	movs	r0, #0
 80050aa:	e73c      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x36>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80050ac:	422a      	tst	r2, r5
 80050ae:	d005      	beq.n	80050bc <HAL_ADC_ConfigChannel+0x1cc>
 80050b0:	003a      	movs	r2, r7
 80050b2:	e75f      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050b4:	20c0      	movs	r0, #192	; 0xc0
 80050b6:	680a      	ldr	r2, [r1, #0]
 80050b8:	0400      	lsls	r0, r0, #16
 80050ba:	e7b4      	b.n	8005026 <HAL_ADC_ConfigChannel+0x136>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80050bc:	072a      	lsls	r2, r5, #28
 80050be:	d501      	bpl.n	80050c4 <HAL_ADC_ConfigChannel+0x1d4>
 80050c0:	2203      	movs	r2, #3
 80050c2:	e757      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 80050c4:	06ea      	lsls	r2, r5, #27
 80050c6:	d501      	bpl.n	80050cc <HAL_ADC_ConfigChannel+0x1dc>
 80050c8:	2204      	movs	r2, #4
 80050ca:	e753      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 80050cc:	06aa      	lsls	r2, r5, #26
 80050ce:	d501      	bpl.n	80050d4 <HAL_ADC_ConfigChannel+0x1e4>
 80050d0:	2205      	movs	r2, #5
 80050d2:	e74f      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 80050d4:	066a      	lsls	r2, r5, #25
 80050d6:	d501      	bpl.n	80050dc <HAL_ADC_ConfigChannel+0x1ec>
 80050d8:	2206      	movs	r2, #6
 80050da:	e74b      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 80050dc:	062a      	lsls	r2, r5, #24
 80050de:	d501      	bpl.n	80050e4 <HAL_ADC_ConfigChannel+0x1f4>
 80050e0:	2207      	movs	r2, #7
 80050e2:	e747      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 80050e4:	05ea      	lsls	r2, r5, #23
 80050e6:	d501      	bpl.n	80050ec <HAL_ADC_ConfigChannel+0x1fc>
 80050e8:	2208      	movs	r2, #8
 80050ea:	e743      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 80050ec:	05aa      	lsls	r2, r5, #22
 80050ee:	d501      	bpl.n	80050f4 <HAL_ADC_ConfigChannel+0x204>
 80050f0:	2209      	movs	r2, #9
 80050f2:	e73f      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 80050f4:	056a      	lsls	r2, r5, #21
 80050f6:	d501      	bpl.n	80050fc <HAL_ADC_ConfigChannel+0x20c>
 80050f8:	220a      	movs	r2, #10
 80050fa:	e73b      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 80050fc:	052a      	lsls	r2, r5, #20
 80050fe:	d501      	bpl.n	8005104 <HAL_ADC_ConfigChannel+0x214>
 8005100:	220b      	movs	r2, #11
 8005102:	e737      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 8005104:	04ea      	lsls	r2, r5, #19
 8005106:	d501      	bpl.n	800510c <HAL_ADC_ConfigChannel+0x21c>
 8005108:	220c      	movs	r2, #12
 800510a:	e733      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 800510c:	04aa      	lsls	r2, r5, #18
 800510e:	d501      	bpl.n	8005114 <HAL_ADC_ConfigChannel+0x224>
 8005110:	220d      	movs	r2, #13
 8005112:	e72f      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 8005114:	046a      	lsls	r2, r5, #17
 8005116:	d501      	bpl.n	800511c <HAL_ADC_ConfigChannel+0x22c>
 8005118:	220e      	movs	r2, #14
 800511a:	e72b      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 800511c:	042a      	lsls	r2, r5, #16
 800511e:	d504      	bpl.n	800512a <HAL_ADC_ConfigChannel+0x23a>
 8005120:	4652      	mov	r2, sl
 8005122:	9801      	ldr	r0, [sp, #4]
 8005124:	4302      	orrs	r2, r0
 8005126:	4690      	mov	r8, r2
 8005128:	e729      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x8e>
 800512a:	03ea      	lsls	r2, r5, #15
 800512c:	d501      	bpl.n	8005132 <HAL_ADC_ConfigChannel+0x242>
 800512e:	2210      	movs	r2, #16
 8005130:	e720      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 8005132:	03aa      	lsls	r2, r5, #14
 8005134:	d501      	bpl.n	800513a <HAL_ADC_ConfigChannel+0x24a>
 8005136:	2211      	movs	r2, #17
 8005138:	e71c      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 800513a:	036a      	lsls	r2, r5, #13
 800513c:	d400      	bmi.n	8005140 <HAL_ADC_ConfigChannel+0x250>
 800513e:	e71e      	b.n	8004f7e <HAL_ADC_ConfigChannel+0x8e>
 8005140:	2212      	movs	r2, #18
 8005142:	e717      	b.n	8004f74 <HAL_ADC_ConfigChannel+0x84>
 8005144:	07ffff00 	.word	0x07ffff00
 8005148:	40012708 	.word	0x40012708
 800514c:	b0001000 	.word	0xb0001000
 8005150:	b8004000 	.word	0xb8004000
 8005154:	b4002000 	.word	0xb4002000
 8005158:	fe3fffff 	.word	0xfe3fffff
 800515c:	20000084 	.word	0x20000084
 8005160:	00030d40 	.word	0x00030d40

08005164 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8005164:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005166:	2201      	movs	r2, #1
{
 8005168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800516c:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800516e:	6803      	ldr	r3, [r0, #0]
{
 8005170:	0004      	movs	r4, r0
 8005172:	6899      	ldr	r1, [r3, #8]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005174:	420a      	tst	r2, r1
 8005176:	d11f      	bne.n	80051b8 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005178:	6898      	ldr	r0, [r3, #8]
 800517a:	4928      	ldr	r1, [pc, #160]	; (800521c <ADC_Enable+0xb8>)
 800517c:	4208      	tst	r0, r1
 800517e:	d11e      	bne.n	80051be <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8005180:	6899      	ldr	r1, [r3, #8]
 8005182:	4827      	ldr	r0, [pc, #156]	; (8005220 <ADC_Enable+0xbc>)
 8005184:	4001      	ands	r1, r0
 8005186:	430a      	orrs	r2, r1
 8005188:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800518a:	4b26      	ldr	r3, [pc, #152]	; (8005224 <ADC_Enable+0xc0>)
 800518c:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	d50f      	bpl.n	80051b2 <ADC_Enable+0x4e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005192:	4b25      	ldr	r3, [pc, #148]	; (8005228 <ADC_Enable+0xc4>)
 8005194:	4925      	ldr	r1, [pc, #148]	; (800522c <ADC_Enable+0xc8>)
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	f7fa ffd6 	bl	8000148 <__udivsi3>
 800519c:	3001      	adds	r0, #1
 800519e:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80051a0:	9b01      	ldr	r3, [sp, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <ADC_Enable+0x4e>
        wait_loop_index--;
 80051a6:	9b01      	ldr	r3, [sp, #4]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80051ac:	9b01      	ldr	r3, [sp, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f9      	bne.n	80051a6 <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80051b2:	7e63      	ldrb	r3, [r4, #25]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d10b      	bne.n	80051d0 <ADC_Enable+0x6c>
  return HAL_OK;
 80051b8:	2000      	movs	r0, #0
}
 80051ba:	b003      	add	sp, #12
 80051bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051be:	2110      	movs	r1, #16
 80051c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80051c2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c4:	430b      	orrs	r3, r1
 80051c6:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80051ca:	431a      	orrs	r2, r3
 80051cc:	65e2      	str	r2, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80051ce:	e7f4      	b.n	80051ba <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 80051d0:	f7ff fcc8 	bl	8004b64 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051d4:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80051d6:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	07d2      	lsls	r2, r2, #31
 80051dc:	d4ec      	bmi.n	80051b8 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051de:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 80051e0:	4f0f      	ldr	r7, [pc, #60]	; (8005220 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80051e2:	689a      	ldr	r2, [r3, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051e4:	4215      	tst	r5, r2
 80051e6:	d103      	bne.n	80051f0 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 80051e8:	689a      	ldr	r2, [r3, #8]
 80051ea:	403a      	ands	r2, r7
 80051ec:	432a      	orrs	r2, r5
 80051ee:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051f0:	f7ff fcb8 	bl	8004b64 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051f4:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051f6:	1b80      	subs	r0, r0, r6
 80051f8:	2802      	cmp	r0, #2
 80051fa:	d902      	bls.n	8005202 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4215      	tst	r5, r2
 8005200:	d003      	beq.n	800520a <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4215      	tst	r5, r2
 8005206:	d0ec      	beq.n	80051e2 <ADC_Enable+0x7e>
 8005208:	e7d6      	b.n	80051b8 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800520a:	2210      	movs	r2, #16
 800520c:	6da3      	ldr	r3, [r4, #88]	; 0x58
            return HAL_ERROR;
 800520e:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005210:	4313      	orrs	r3, r2
 8005212:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005214:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005216:	431d      	orrs	r5, r3
 8005218:	65e5      	str	r5, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800521a:	e7ce      	b.n	80051ba <ADC_Enable+0x56>
 800521c:	80000017 	.word	0x80000017
 8005220:	7fffffe8 	.word	0x7fffffe8
 8005224:	40012708 	.word	0x40012708
 8005228:	20000084 	.word	0x20000084
 800522c:	00030d40 	.word	0x00030d40

08005230 <HAL_ADC_Start_DMA>:
{
 8005230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005232:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005234:	6805      	ldr	r5, [r0, #0]
{
 8005236:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005238:	68ae      	ldr	r6, [r5, #8]
 800523a:	4688      	mov	r8, r1
 800523c:	0017      	movs	r7, r2
    tmp_hal_status = HAL_BUSY;
 800523e:	2002      	movs	r0, #2
{
 8005240:	b500      	push	{lr}
 8005242:	0773      	lsls	r3, r6, #29
 8005244:	d414      	bmi.n	8005270 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8005246:	2254      	movs	r2, #84	; 0x54
 8005248:	5ca3      	ldrb	r3, [r4, r2]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d010      	beq.n	8005270 <HAL_ADC_Start_DMA+0x40>
 800524e:	2301      	movs	r3, #1
 8005250:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8005252:	68ea      	ldr	r2, [r5, #12]
 8005254:	4213      	tst	r3, r2
 8005256:	d106      	bne.n	8005266 <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005258:	68aa      	ldr	r2, [r5, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800525a:	4213      	tst	r3, r2
 800525c:	d131      	bne.n	80052c2 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800525e:	2201      	movs	r2, #1
 8005260:	68eb      	ldr	r3, [r5, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8005266:	0020      	movs	r0, r4
 8005268:	f7ff ff7c 	bl	8005164 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800526c:	2800      	cmp	r0, #0
 800526e:	d002      	beq.n	8005276 <HAL_ADC_Start_DMA+0x46>
}
 8005270:	bc80      	pop	{r7}
 8005272:	46b8      	mov	r8, r7
 8005274:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8005276:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800527a:	6d25      	ldr	r5, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 800527c:	401a      	ands	r2, r3
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4313      	orrs	r3, r2
 8005284:	65a3      	str	r3, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005286:	4b13      	ldr	r3, [pc, #76]	; (80052d4 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8005288:	65e0      	str	r0, [r4, #92]	; 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800528a:	62eb      	str	r3, [r5, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800528c:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800528e:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005290:	632b      	str	r3, [r5, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005294:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005296:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005298:	231c      	movs	r3, #28
 800529a:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 800529c:	3338      	adds	r3, #56	; 0x38
 800529e:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80052a0:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052a2:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80052a4:	4313      	orrs	r3, r2
 80052a6:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052a8:	4642      	mov	r2, r8
 80052aa:	003b      	movs	r3, r7
 80052ac:	3140      	adds	r1, #64	; 0x40
 80052ae:	f000 f927 	bl	8005500 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80052b2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80052b4:	490a      	ldr	r1, [pc, #40]	; (80052e0 <HAL_ADC_Start_DMA+0xb0>)
 80052b6:	6893      	ldr	r3, [r2, #8]
 80052b8:	400b      	ands	r3, r1
 80052ba:	2104      	movs	r1, #4
 80052bc:	430b      	orrs	r3, r1
 80052be:	6093      	str	r3, [r2, #8]
}
 80052c0:	e7d6      	b.n	8005270 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 80052c2:	68ab      	ldr	r3, [r5, #8]
 80052c4:	4a06      	ldr	r2, [pc, #24]	; (80052e0 <HAL_ADC_Start_DMA+0xb0>)
 80052c6:	4013      	ands	r3, r2
 80052c8:	4318      	orrs	r0, r3
 80052ca:	60a8      	str	r0, [r5, #8]
}
 80052cc:	e7c7      	b.n	800525e <HAL_ADC_Start_DMA+0x2e>
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	fffff0fe 	.word	0xfffff0fe
 80052d4:	08004e71 	.word	0x08004e71
 80052d8:	08004e45 	.word	0x08004e45
 80052dc:	08004e55 	.word	0x08004e55
 80052e0:	7fffffe8 	.word	0x7fffffe8

080052e4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e4:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80052e6:	2800      	cmp	r0, #0
 80052e8:	db14      	blt.n	8005314 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80052ea:	4b15      	ldr	r3, [pc, #84]	; (8005340 <HAL_NVIC_SetPriority+0x5c>)
 80052ec:	2203      	movs	r2, #3
 80052ee:	469c      	mov	ip, r3
 80052f0:	23ff      	movs	r3, #255	; 0xff
 80052f2:	0884      	lsrs	r4, r0, #2
 80052f4:	4010      	ands	r0, r2
 80052f6:	001a      	movs	r2, r3
 80052f8:	26c0      	movs	r6, #192	; 0xc0
 80052fa:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80052fc:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80052fe:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005300:	400b      	ands	r3, r1
 8005302:	4083      	lsls	r3, r0
 8005304:	00a4      	lsls	r4, r4, #2
 8005306:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005308:	00b6      	lsls	r6, r6, #2
 800530a:	59a5      	ldr	r5, [r4, r6]
 800530c:	4395      	bics	r5, r2
 800530e:	432b      	orrs	r3, r5
 8005310:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8005312:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005314:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <HAL_NVIC_SetPriority+0x60>)
 8005316:	230f      	movs	r3, #15
 8005318:	4694      	mov	ip, r2
 800531a:	2203      	movs	r2, #3
 800531c:	4003      	ands	r3, r0
 800531e:	4010      	ands	r0, r2
 8005320:	32fc      	adds	r2, #252	; 0xfc
 8005322:	0015      	movs	r5, r2
 8005324:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005326:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005328:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800532a:	400a      	ands	r2, r1
 800532c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800532e:	3b08      	subs	r3, #8
 8005330:	089b      	lsrs	r3, r3, #2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4463      	add	r3, ip
 8005336:	69dc      	ldr	r4, [r3, #28]
 8005338:	43ac      	bics	r4, r5
 800533a:	4322      	orrs	r2, r4
 800533c:	61da      	str	r2, [r3, #28]
 800533e:	e7e8      	b.n	8005312 <HAL_NVIC_SetPriority+0x2e>
 8005340:	e000e100 	.word	0xe000e100
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005348:	2800      	cmp	r0, #0
 800534a:	db05      	blt.n	8005358 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800534c:	231f      	movs	r3, #31
 800534e:	4018      	ands	r0, r3
 8005350:	3b1e      	subs	r3, #30
 8005352:	4083      	lsls	r3, r0
 8005354:	4a01      	ldr	r2, [pc, #4]	; (800535c <HAL_NVIC_EnableIRQ+0x14>)
 8005356:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005358:	4770      	bx	lr
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	e000e100 	.word	0xe000e100

08005360 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005360:	2800      	cmp	r0, #0
 8005362:	db0a      	blt.n	800537a <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005364:	231f      	movs	r3, #31
 8005366:	4018      	ands	r0, r3
 8005368:	3b1e      	subs	r3, #30
 800536a:	4083      	lsls	r3, r0
 800536c:	2280      	movs	r2, #128	; 0x80
 800536e:	4903      	ldr	r1, [pc, #12]	; (800537c <HAL_NVIC_DisableIRQ+0x1c>)
 8005370:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005372:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005376:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800537a:	4770      	bx	lr
 800537c:	e000e100 	.word	0xe000e100

08005380 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005380:	2280      	movs	r2, #128	; 0x80
 8005382:	1e43      	subs	r3, r0, #1
 8005384:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8005386:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005388:	4293      	cmp	r3, r2
 800538a:	d20e      	bcs.n	80053aa <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800538c:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800538e:	4a07      	ldr	r2, [pc, #28]	; (80053ac <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005390:	4807      	ldr	r0, [pc, #28]	; (80053b0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005392:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005394:	6a03      	ldr	r3, [r0, #32]
 8005396:	0609      	lsls	r1, r1, #24
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	430b      	orrs	r3, r1
 800539e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80053a2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80053a4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80053a6:	3307      	adds	r3, #7
 80053a8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80053aa:	4770      	bx	lr
 80053ac:	e000e010 	.word	0xe000e010
 80053b0:	e000ed00 	.word	0xe000ed00

080053b4 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80053b4:	2800      	cmp	r0, #0
 80053b6:	db07      	blt.n	80053c8 <HAL_NVIC_ClearPendingIRQ+0x14>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053b8:	231f      	movs	r3, #31
 80053ba:	22c0      	movs	r2, #192	; 0xc0
 80053bc:	4018      	ands	r0, r3
 80053be:	3b1e      	subs	r3, #30
 80053c0:	4083      	lsls	r3, r0
 80053c2:	4902      	ldr	r1, [pc, #8]	; (80053cc <HAL_NVIC_ClearPendingIRQ+0x18>)
 80053c4:	0052      	lsls	r2, r2, #1
 80053c6:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80053c8:	4770      	bx	lr
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	e000e100 	.word	0xe000e100

080053d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053d2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80053d4:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 80053d6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80053d8:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80053da:	2c00      	cmp	r4, #0
 80053dc:	d002      	beq.n	80053e4 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053de:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80053e0:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80053e2:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80053e4:	251c      	movs	r5, #28
 80053e6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80053e8:	4e08      	ldr	r6, [pc, #32]	; (800540c <DMA_SetConfig+0x3c>)
 80053ea:	4025      	ands	r5, r4
 80053ec:	2401      	movs	r4, #1
 80053ee:	40ac      	lsls	r4, r5
 80053f0:	6877      	ldr	r7, [r6, #4]
 80053f2:	433c      	orrs	r4, r7
 80053f4:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053f6:	6804      	ldr	r4, [r0, #0]
 80053f8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053fa:	6883      	ldr	r3, [r0, #8]
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d002      	beq.n	8005406 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005400:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005402:	60e2      	str	r2, [r4, #12]
  }
}
 8005404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8005406:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005408:	60e1      	str	r1, [r4, #12]
 800540a:	e7fb      	b.n	8005404 <DMA_SetConfig+0x34>
 800540c:	40020000 	.word	0x40020000

08005410 <HAL_DMA_Init>:
{
 8005410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005412:	46c6      	mov	lr, r8
 8005414:	0004      	movs	r4, r0
 8005416:	b500      	push	{lr}
  if (hdma == NULL)
 8005418:	2800      	cmp	r0, #0
 800541a:	d062      	beq.n	80054e2 <HAL_DMA_Init+0xd2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800541c:	6805      	ldr	r5, [r0, #0]
 800541e:	4b32      	ldr	r3, [pc, #200]	; (80054e8 <HAL_DMA_Init+0xd8>)
 8005420:	2114      	movs	r1, #20
 8005422:	18e8      	adds	r0, r5, r3
 8005424:	f7fa fe90 	bl	8000148 <__udivsi3>
 8005428:	0083      	lsls	r3, r0, #2
 800542a:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800542c:	2202      	movs	r2, #2
 800542e:	2325      	movs	r3, #37	; 0x25
 8005430:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <HAL_DMA_Init+0xdc>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005436:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005438:	4013      	ands	r3, r2
 800543a:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800543c:	68e3      	ldr	r3, [r4, #12]
 800543e:	6921      	ldr	r1, [r4, #16]
 8005440:	4333      	orrs	r3, r6
 8005442:	430b      	orrs	r3, r1
 8005444:	6961      	ldr	r1, [r4, #20]
 8005446:	682a      	ldr	r2, [r5, #0]
 8005448:	430b      	orrs	r3, r1
 800544a:	69a1      	ldr	r1, [r4, #24]
 800544c:	430b      	orrs	r3, r1
 800544e:	69e1      	ldr	r1, [r4, #28]
 8005450:	430b      	orrs	r3, r1
 8005452:	6a21      	ldr	r1, [r4, #32]
 8005454:	430b      	orrs	r3, r1
 8005456:	4313      	orrs	r3, r2
 8005458:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800545a:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <HAL_DMA_Init+0xe0>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800545c:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800545e:	469c      	mov	ip, r3
 8005460:	4460      	add	r0, ip
 8005462:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005464:	20ff      	movs	r0, #255	; 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005466:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005468:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800546a:	64a3      	str	r3, [r4, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800546c:	6467      	str	r7, [r4, #68]	; 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800546e:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005470:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005472:	f7fa fe69 	bl	8000148 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005476:	231f      	movs	r3, #31
 8005478:	2201      	movs	r2, #1
 800547a:	4003      	ands	r3, r0
 800547c:	0010      	movs	r0, r2
 800547e:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005480:	2380      	movs	r3, #128	; 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005482:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	429e      	cmp	r6, r3
 8005488:	d021      	beq.n	80054ce <HAL_DMA_Init+0xbe>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800548a:	233f      	movs	r3, #63	; 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800548c:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800548e:	6861      	ldr	r1, [r4, #4]
 8005490:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005492:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005494:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005496:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005498:	2903      	cmp	r1, #3
 800549a:	d81d      	bhi.n	80054d8 <HAL_DMA_Init+0xc8>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800549c:	2003      	movs	r0, #3
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800549e:	4916      	ldr	r1, [pc, #88]	; (80054f8 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054a0:	4d16      	ldr	r5, [pc, #88]	; (80054fc <HAL_DMA_Init+0xec>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054a2:	1859      	adds	r1, r3, r1
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80054a4:	3b01      	subs	r3, #1
 80054a6:	4003      	ands	r3, r0
 80054a8:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054aa:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054ac:	0089      	lsls	r1, r1, #2
 80054ae:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054b0:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80054b2:	65a2      	str	r2, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054b4:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054b6:	606a      	str	r2, [r5, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054b8:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 80054ba:	2225      	movs	r2, #37	; 0x25
 80054bc:	2101      	movs	r1, #1
  return HAL_OK;
 80054be:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054c0:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80054c2:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80054c4:	3a01      	subs	r2, #1
 80054c6:	54a3      	strb	r3, [r4, r2]
}
 80054c8:	bc80      	pop	{r7}
 80054ca:	46b8      	mov	r8, r7
 80054cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80054ce:	2300      	movs	r3, #0
 80054d0:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80054d2:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054d4:	4643      	mov	r3, r8
 80054d6:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80054dc:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80054de:	65a3      	str	r3, [r4, #88]	; 0x58
 80054e0:	e7ea      	b.n	80054b8 <HAL_DMA_Init+0xa8>
    return HAL_ERROR;
 80054e2:	2001      	movs	r0, #1
 80054e4:	e7f0      	b.n	80054c8 <HAL_DMA_Init+0xb8>
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	bffdfff8 	.word	0xbffdfff8
 80054ec:	ffff800f 	.word	0xffff800f
 80054f0:	10008200 	.word	0x10008200
 80054f4:	40020880 	.word	0x40020880
 80054f8:	1000823f 	.word	0x1000823f
 80054fc:	40020940 	.word	0x40020940

08005500 <HAL_DMA_Start_IT>:
{
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8005504:	2024      	movs	r0, #36	; 0x24
 8005506:	5c25      	ldrb	r5, [r4, r0]
 8005508:	2d01      	cmp	r5, #1
 800550a:	d036      	beq.n	800557a <HAL_DMA_Start_IT+0x7a>
 800550c:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 800550e:	2625      	movs	r6, #37	; 0x25
  __HAL_LOCK(hdma);
 8005510:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8005512:	5da5      	ldrb	r5, [r4, r6]
 8005514:	b2ef      	uxtb	r7, r5
 8005516:	2d01      	cmp	r5, #1
 8005518:	d005      	beq.n	8005526 <HAL_DMA_Start_IT+0x26>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800551e:	2300      	movs	r3, #0
 8005520:	5423      	strb	r3, [r4, r0]
    status = HAL_ERROR;
 8005522:	2001      	movs	r0, #1
}
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8005526:	3822      	subs	r0, #34	; 0x22
 8005528:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800552a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800552c:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800552e:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8005530:	6828      	ldr	r0, [r5, #0]
 8005532:	43b8      	bics	r0, r7
 8005534:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005536:	0020      	movs	r0, r4
 8005538:	f7ff ff4a 	bl	80053d0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800553c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01d      	beq.n	800557e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005542:	210e      	movs	r1, #14
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800554c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800554e:	6811      	ldr	r1, [r2, #0]
 8005550:	03c9      	lsls	r1, r1, #15
 8005552:	d504      	bpl.n	800555e <HAL_DMA_Start_IT+0x5e>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	6810      	ldr	r0, [r2, #0]
 8005558:	0049      	lsls	r1, r1, #1
 800555a:	4301      	orrs	r1, r0
 800555c:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800555e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005560:	2a00      	cmp	r2, #0
 8005562:	d004      	beq.n	800556e <HAL_DMA_Start_IT+0x6e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005564:	2180      	movs	r1, #128	; 0x80
 8005566:	6810      	ldr	r0, [r2, #0]
 8005568:	0049      	lsls	r1, r1, #1
 800556a:	4301      	orrs	r1, r0
 800556c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800556e:	2101      	movs	r1, #1
 8005570:	681a      	ldr	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005572:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	e7d4      	b.n	8005524 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 800557a:	2002      	movs	r0, #2
 800557c:	e7d2      	b.n	8005524 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800557e:	2104      	movs	r1, #4
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	438a      	bics	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	3106      	adds	r1, #6
 800558c:	430a      	orrs	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e7dc      	b.n	800554c <HAL_DMA_Start_IT+0x4c>
 8005592:	46c0      	nop			; (mov r8, r8)

08005594 <HAL_DMA_Abort>:
{
 8005594:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8005596:	2800      	cmp	r0, #0
 8005598:	d034      	beq.n	8005604 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800559a:	2325      	movs	r3, #37	; 0x25
 800559c:	5cc3      	ldrb	r3, [r0, r3]
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d129      	bne.n	80055f6 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a2:	210e      	movs	r1, #14
 80055a4:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055a6:	4c18      	ldr	r4, [pc, #96]	; (8005608 <HAL_DMA_Abort+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055a8:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80055aa:	6c06      	ldr	r6, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ac:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055ae:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055b0:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80055b2:	680b      	ldr	r3, [r1, #0]
 80055b4:	4023      	ands	r3, r4
 80055b6:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80055b8:	2301      	movs	r3, #1
 80055ba:	6811      	ldr	r1, [r2, #0]
 80055bc:	4399      	bics	r1, r3
 80055be:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80055c0:	221c      	movs	r2, #28
 80055c2:	4032      	ands	r2, r6
 80055c4:	4093      	lsls	r3, r2
 80055c6:	4911      	ldr	r1, [pc, #68]	; (800560c <HAL_DMA_Abort+0x78>)
 80055c8:	684d      	ldr	r5, [r1, #4]
 80055ca:	432b      	orrs	r3, r5
 80055cc:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055ce:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80055d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80055d2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80055d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d005      	beq.n	80055e6 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4014      	ands	r4, r2
 80055de:	601c      	str	r4, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055e0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80055e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80055e4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80055e6:	2325      	movs	r3, #37	; 0x25
 80055e8:	2201      	movs	r2, #1
 80055ea:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80055ec:	2200      	movs	r2, #0
 80055ee:	3b01      	subs	r3, #1
 80055f0:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80055f2:	2000      	movs	r0, #0
}
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055f6:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80055f8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055fa:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80055fc:	3320      	adds	r3, #32
 80055fe:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8005600:	2001      	movs	r0, #1
 8005602:	e7f7      	b.n	80055f4 <HAL_DMA_Abort+0x60>
    return HAL_ERROR;
 8005604:	2001      	movs	r0, #1
 8005606:	e7f5      	b.n	80055f4 <HAL_DMA_Abort+0x60>
 8005608:	fffffeff 	.word	0xfffffeff
 800560c:	40020000 	.word	0x40020000

08005610 <HAL_DMA_Abort_IT>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005610:	2325      	movs	r3, #37	; 0x25
{
 8005612:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005614:	5cc3      	ldrb	r3, [r0, r3]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d003      	beq.n	8005622 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800561a:	2304      	movs	r3, #4
 800561c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800561e:	2001      	movs	r0, #1
}
 8005620:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005622:	210e      	movs	r1, #14
 8005624:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005626:	4c17      	ldr	r4, [pc, #92]	; (8005684 <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005628:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800562a:	6c06      	ldr	r6, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800562c:	438b      	bics	r3, r1
 800562e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8005630:	2301      	movs	r3, #1
 8005632:	6811      	ldr	r1, [r2, #0]
 8005634:	4399      	bics	r1, r3
 8005636:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005638:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800563a:	680a      	ldr	r2, [r1, #0]
 800563c:	4022      	ands	r2, r4
 800563e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005640:	221c      	movs	r2, #28
 8005642:	4032      	ands	r2, r6
 8005644:	4093      	lsls	r3, r2
 8005646:	4910      	ldr	r1, [pc, #64]	; (8005688 <HAL_DMA_Abort_IT+0x78>)
 8005648:	684d      	ldr	r5, [r1, #4]
 800564a:	432b      	orrs	r3, r5
 800564c:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800564e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005650:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005652:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8005654:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005656:	2b00      	cmp	r3, #0
 8005658:	d005      	beq.n	8005666 <HAL_DMA_Abort_IT+0x56>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4022      	ands	r2, r4
 800565e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005660:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005662:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8005664:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005666:	2325      	movs	r3, #37	; 0x25
 8005668:	2201      	movs	r2, #1
 800566a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800566c:	2200      	movs	r2, #0
 800566e:	3b01      	subs	r3, #1
 8005670:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8005672:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8005678:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800567a:	2000      	movs	r0, #0
 800567c:	e7d0      	b.n	8005620 <HAL_DMA_Abort_IT+0x10>
 800567e:	2000      	movs	r0, #0
 8005680:	e7ce      	b.n	8005620 <HAL_DMA_Abort_IT+0x10>
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	fffffeff 	.word	0xfffffeff
 8005688:	40020000 	.word	0x40020000

0800568c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = DMA1->ISR;
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <HAL_DMA_IRQHandler+0xb4>)
{
 800568e:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8005690:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005692:	2504      	movs	r5, #4
 8005694:	231c      	movs	r3, #28
 8005696:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8005698:	6801      	ldr	r1, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800569a:	4023      	ands	r3, r4
 800569c:	002c      	movs	r4, r5
 800569e:	409c      	lsls	r4, r3
  uint32_t source_it = hdma->Instance->CCR;
 80056a0:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80056a2:	4222      	tst	r2, r4
 80056a4:	d010      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x3c>
 80056a6:	4235      	tst	r5, r6
 80056a8:	d00e      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056aa:	680b      	ldr	r3, [r1, #0]
 80056ac:	069b      	lsls	r3, r3, #26
 80056ae:	d402      	bmi.n	80056b6 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056b0:	680b      	ldr	r3, [r1, #0]
 80056b2:	43ab      	bics	r3, r5
 80056b4:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80056b6:	4b22      	ldr	r3, [pc, #136]	; (8005740 <HAL_DMA_IRQHandler+0xb4>)
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	4314      	orrs	r4, r2
 80056bc:	605c      	str	r4, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80056be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d000      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80056c4:	4798      	blx	r3
}
 80056c6:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80056c8:	2502      	movs	r5, #2
 80056ca:	002c      	movs	r4, r5
 80056cc:	409c      	lsls	r4, r3
 80056ce:	4222      	tst	r2, r4
 80056d0:	d017      	beq.n	8005702 <HAL_DMA_IRQHandler+0x76>
 80056d2:	4235      	tst	r5, r6
 80056d4:	d015      	beq.n	8005702 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056d6:	680b      	ldr	r3, [r1, #0]
 80056d8:	069b      	lsls	r3, r3, #26
 80056da:	d406      	bmi.n	80056ea <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056dc:	220a      	movs	r2, #10
 80056de:	680b      	ldr	r3, [r1, #0]
 80056e0:	4393      	bics	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80056e4:	2325      	movs	r3, #37	; 0x25
 80056e6:	3a09      	subs	r2, #9
 80056e8:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <HAL_DMA_IRQHandler+0xb4>)
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	4314      	orrs	r4, r2
 80056f0:	605c      	str	r4, [r3, #4]
      __HAL_UNLOCK(hdma);
 80056f2:	2200      	movs	r2, #0
 80056f4:	2324      	movs	r3, #36	; 0x24
 80056f6:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80056f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0e3      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 80056fe:	4798      	blx	r3
  return;
 8005700:	e7e1      	b.n	80056c6 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005702:	2408      	movs	r4, #8
 8005704:	0025      	movs	r5, r4
 8005706:	409d      	lsls	r5, r3
 8005708:	422a      	tst	r2, r5
 800570a:	d0dc      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x3a>
 800570c:	4234      	tst	r4, r6
 800570e:	d0da      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005710:	680a      	ldr	r2, [r1, #0]
 8005712:	3406      	adds	r4, #6
 8005714:	43a2      	bics	r2, r4
 8005716:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8005718:	2201      	movs	r2, #1
 800571a:	0015      	movs	r5, r2
 800571c:	409d      	lsls	r5, r3
 800571e:	002b      	movs	r3, r5
 8005720:	4907      	ldr	r1, [pc, #28]	; (8005740 <HAL_DMA_IRQHandler+0xb4>)
 8005722:	684c      	ldr	r4, [r1, #4]
 8005724:	4323      	orrs	r3, r4
 8005726:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005728:	2325      	movs	r3, #37	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800572a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800572c:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800572e:	2200      	movs	r2, #0
 8005730:	3b01      	subs	r3, #1
 8005732:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8005734:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005736:	2b00      	cmp	r3, #0
 8005738:	d0c5      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 800573a:	4798      	blx	r3
  return;
 800573c:	e7c3      	b.n	80056c6 <HAL_DMA_IRQHandler+0x3a>
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	40020000 	.word	0x40020000

08005744 <HAL_DMA_GetState>:
  return hdma->State;
 8005744:	2325      	movs	r3, #37	; 0x25
 8005746:	5cc0      	ldrb	r0, [r0, r3]
 8005748:	b2c0      	uxtb	r0, r0
}
 800574a:	4770      	bx	lr

0800574c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800574c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800574e:	46de      	mov	lr, fp
 8005750:	4657      	mov	r7, sl
 8005752:	464e      	mov	r6, r9
 8005754:	4645      	mov	r5, r8
 8005756:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005758:	680c      	ldr	r4, [r1, #0]
{
 800575a:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800575c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800575e:	2300      	movs	r3, #0
{
 8005760:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005762:	2c00      	cmp	r4, #0
 8005764:	d07e      	beq.n	8005864 <HAL_GPIO_Init+0x118>
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005766:	497b      	ldr	r1, [pc, #492]	; (8005954 <HAL_GPIO_Init+0x208>)
 8005768:	468b      	mov	fp, r1
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800576a:	4661      	mov	r1, ip
 800576c:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800576e:	2601      	movs	r6, #1
 8005770:	0021      	movs	r1, r4
 8005772:	409e      	lsls	r6, r3
 8005774:	4031      	ands	r1, r6
 8005776:	468a      	mov	sl, r1
    if (iocurrent != 0x00u)
 8005778:	4234      	tst	r4, r6
 800577a:	d06d      	beq.n	8005858 <HAL_GPIO_Init+0x10c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800577c:	9d01      	ldr	r5, [sp, #4]
 800577e:	6869      	ldr	r1, [r5, #4]
 8005780:	2503      	movs	r5, #3
 8005782:	400d      	ands	r5, r1
 8005784:	46ac      	mov	ip, r5
 8005786:	3d01      	subs	r5, #1
 8005788:	2d01      	cmp	r5, #1
 800578a:	d800      	bhi.n	800578e <HAL_GPIO_Init+0x42>
 800578c:	e071      	b.n	8005872 <HAL_GPIO_Init+0x126>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800578e:	4665      	mov	r5, ip
 8005790:	2d03      	cmp	r5, #3
 8005792:	d000      	beq.n	8005796 <HAL_GPIO_Init+0x4a>
 8005794:	e0b5      	b.n	8005902 <HAL_GPIO_Init+0x1b6>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005796:	4666      	mov	r6, ip
 8005798:	4096      	lsls	r6, r2
 800579a:	43f5      	mvns	r5, r6
 800579c:	9500      	str	r5, [sp, #0]
      temp = GPIOx->MODER;
 800579e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057a0:	9d00      	ldr	r5, [sp, #0]
 80057a2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057a4:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80057a6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057a8:	25c0      	movs	r5, #192	; 0xc0
 80057aa:	02ad      	lsls	r5, r5, #10
 80057ac:	4229      	tst	r1, r5
 80057ae:	d053      	beq.n	8005858 <HAL_GPIO_Init+0x10c>
        temp = EXTI->EXTICR[position >> 2u];
 80057b0:	4e68      	ldr	r6, [pc, #416]	; (8005954 <HAL_GPIO_Init+0x208>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80057b2:	2703      	movs	r7, #3
 80057b4:	46b4      	mov	ip, r6
        temp = EXTI->EXTICR[position >> 2u];
 80057b6:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80057b8:	401f      	ands	r7, r3
 80057ba:	00ff      	lsls	r7, r7, #3
 80057bc:	00ad      	lsls	r5, r5, #2
 80057be:	4465      	add	r5, ip
 80057c0:	46bc      	mov	ip, r7
        temp = EXTI->EXTICR[position >> 2u];
 80057c2:	6e2e      	ldr	r6, [r5, #96]	; 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80057c4:	270f      	movs	r7, #15
        temp = EXTI->EXTICR[position >> 2u];
 80057c6:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80057c8:	4666      	mov	r6, ip
 80057ca:	40b7      	lsls	r7, r6
 80057cc:	003e      	movs	r6, r7
 80057ce:	464f      	mov	r7, r9
 80057d0:	43b7      	bics	r7, r6
 80057d2:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80057d4:	27a0      	movs	r7, #160	; 0xa0
 80057d6:	05ff      	lsls	r7, r7, #23
 80057d8:	42b8      	cmp	r0, r7
 80057da:	d012      	beq.n	8005802 <HAL_GPIO_Init+0xb6>
 80057dc:	4f5e      	ldr	r7, [pc, #376]	; (8005958 <HAL_GPIO_Init+0x20c>)
 80057de:	42b8      	cmp	r0, r7
 80057e0:	d100      	bne.n	80057e4 <HAL_GPIO_Init+0x98>
 80057e2:	e0a7      	b.n	8005934 <HAL_GPIO_Init+0x1e8>
 80057e4:	4f5d      	ldr	r7, [pc, #372]	; (800595c <HAL_GPIO_Init+0x210>)
 80057e6:	42b8      	cmp	r0, r7
 80057e8:	d100      	bne.n	80057ec <HAL_GPIO_Init+0xa0>
 80057ea:	e0ab      	b.n	8005944 <HAL_GPIO_Init+0x1f8>
 80057ec:	4f5c      	ldr	r7, [pc, #368]	; (8005960 <HAL_GPIO_Init+0x214>)
 80057ee:	42b8      	cmp	r0, r7
 80057f0:	d100      	bne.n	80057f4 <HAL_GPIO_Init+0xa8>
 80057f2:	e098      	b.n	8005926 <HAL_GPIO_Init+0x1da>
 80057f4:	4666      	mov	r6, ip
 80057f6:	2705      	movs	r7, #5
 80057f8:	40b7      	lsls	r7, r6
 80057fa:	003e      	movs	r6, r7
 80057fc:	464f      	mov	r7, r9
 80057fe:	4337      	orrs	r7, r6
 8005800:	46b9      	mov	r9, r7
        EXTI->EXTICR[position >> 2u] = temp;
 8005802:	464e      	mov	r6, r9
 8005804:	662e      	str	r6, [r5, #96]	; 0x60
        temp = EXTI->IMR1;
 8005806:	2680      	movs	r6, #128	; 0x80
 8005808:	465d      	mov	r5, fp
 800580a:	59ad      	ldr	r5, [r5, r6]
        temp &= ~(iocurrent);
 800580c:	4656      	mov	r6, sl
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800580e:	2780      	movs	r7, #128	; 0x80
        temp &= ~(iocurrent);
 8005810:	43f6      	mvns	r6, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005812:	027f      	lsls	r7, r7, #9
        temp &= ~(iocurrent);
 8005814:	46b0      	mov	r8, r6
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005816:	4239      	tst	r1, r7
 8005818:	d000      	beq.n	800581c <HAL_GPIO_Init+0xd0>
 800581a:	e081      	b.n	8005920 <HAL_GPIO_Init+0x1d4>
        temp &= ~(iocurrent);
 800581c:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800581e:	465f      	mov	r7, fp
 8005820:	2680      	movs	r6, #128	; 0x80
 8005822:	51bd      	str	r5, [r7, r6]

        temp = EXTI->EMR1;
 8005824:	2584      	movs	r5, #132	; 0x84
 8005826:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005828:	038e      	lsls	r6, r1, #14
 800582a:	d500      	bpl.n	800582e <HAL_GPIO_Init+0xe2>
 800582c:	e075      	b.n	800591a <HAL_GPIO_Init+0x1ce>
        temp &= ~(iocurrent);
 800582e:	4646      	mov	r6, r8
 8005830:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8005832:	2684      	movs	r6, #132	; 0x84
 8005834:	46b4      	mov	ip, r6
 8005836:	465e      	mov	r6, fp
 8005838:	4667      	mov	r7, ip
 800583a:	51f5      	str	r5, [r6, r7]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800583c:	6835      	ldr	r5, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800583e:	02ce      	lsls	r6, r1, #11
 8005840:	d468      	bmi.n	8005914 <HAL_GPIO_Init+0x1c8>
        temp &= ~(iocurrent);
 8005842:	4646      	mov	r6, r8
 8005844:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005846:	465e      	mov	r6, fp
 8005848:	6035      	str	r5, [r6, #0]

        temp = EXTI->FTSR1;
 800584a:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800584c:	0289      	lsls	r1, r1, #10
 800584e:	d45d      	bmi.n	800590c <HAL_GPIO_Init+0x1c0>
        temp &= ~(iocurrent);
 8005850:	4641      	mov	r1, r8
 8005852:	400d      	ands	r5, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005854:	4659      	mov	r1, fp
 8005856:	604d      	str	r5, [r1, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005858:	0021      	movs	r1, r4
      }
    }

    position++;
 800585a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800585c:	40d9      	lsrs	r1, r3
 800585e:	3202      	adds	r2, #2
 8005860:	2900      	cmp	r1, #0
 8005862:	d184      	bne.n	800576e <HAL_GPIO_Init+0x22>
  }
}
 8005864:	b003      	add	sp, #12
 8005866:	bcf0      	pop	{r4, r5, r6, r7}
 8005868:	46bb      	mov	fp, r7
 800586a:	46b2      	mov	sl, r6
 800586c:	46a9      	mov	r9, r5
 800586e:	46a0      	mov	r8, r4
 8005870:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8005872:	6885      	ldr	r5, [r0, #8]
 8005874:	46a8      	mov	r8, r5
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005876:	2503      	movs	r5, #3
 8005878:	4095      	lsls	r5, r2
 800587a:	43ef      	mvns	r7, r5
 800587c:	9700      	str	r7, [sp, #0]
 800587e:	4647      	mov	r7, r8
 8005880:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005882:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005884:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005886:	68ef      	ldr	r7, [r5, #12]
 8005888:	4097      	lsls	r7, r2
 800588a:	46b8      	mov	r8, r7
 800588c:	464f      	mov	r7, r9
 800588e:	4645      	mov	r5, r8
 8005890:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8005892:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8005894:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005896:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005898:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800589a:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800589c:	090e      	lsrs	r6, r1, #4
 800589e:	402e      	ands	r6, r5
 80058a0:	409e      	lsls	r6, r3
 80058a2:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80058a4:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80058a6:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80058a8:	9d00      	ldr	r5, [sp, #0]
 80058aa:	402e      	ands	r6, r5
 80058ac:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80058ae:	9d01      	ldr	r5, [sp, #4]
 80058b0:	4647      	mov	r7, r8
 80058b2:	68ae      	ldr	r6, [r5, #8]
 80058b4:	4096      	lsls	r6, r2
 80058b6:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80058b8:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ba:	4667      	mov	r7, ip
 80058bc:	4666      	mov	r6, ip
 80058be:	4096      	lsls	r6, r2
 80058c0:	2f02      	cmp	r7, #2
 80058c2:	d000      	beq.n	80058c6 <HAL_GPIO_Init+0x17a>
 80058c4:	e76b      	b.n	800579e <HAL_GPIO_Init+0x52>
        temp = GPIOx->AFR[position >> 3u];
 80058c6:	08dd      	lsrs	r5, r3, #3
 80058c8:	00ad      	lsls	r5, r5, #2
 80058ca:	46ac      	mov	ip, r5
 80058cc:	4484      	add	ip, r0
 80058ce:	4665      	mov	r5, ip
 80058d0:	6a2d      	ldr	r5, [r5, #32]
 80058d2:	46a9      	mov	r9, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058d4:	2507      	movs	r5, #7
 80058d6:	002f      	movs	r7, r5
 80058d8:	401f      	ands	r7, r3
 80058da:	00bd      	lsls	r5, r7, #2
 80058dc:	270f      	movs	r7, #15
 80058de:	46a8      	mov	r8, r5
 80058e0:	40af      	lsls	r7, r5
 80058e2:	464d      	mov	r5, r9
 80058e4:	43bd      	bics	r5, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80058e6:	4647      	mov	r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058e8:	46a9      	mov	r9, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80058ea:	9d01      	ldr	r5, [sp, #4]
 80058ec:	692d      	ldr	r5, [r5, #16]
 80058ee:	40bd      	lsls	r5, r7
 80058f0:	46a8      	mov	r8, r5
 80058f2:	464d      	mov	r5, r9
 80058f4:	4647      	mov	r7, r8
 80058f6:	433d      	orrs	r5, r7
 80058f8:	46a9      	mov	r9, r5
        GPIOx->AFR[position >> 3u] = temp;
 80058fa:	4665      	mov	r5, ip
 80058fc:	464f      	mov	r7, r9
 80058fe:	622f      	str	r7, [r5, #32]
 8005900:	e74d      	b.n	800579e <HAL_GPIO_Init+0x52>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005902:	2503      	movs	r5, #3
 8005904:	4095      	lsls	r5, r2
 8005906:	43ed      	mvns	r5, r5
 8005908:	9500      	str	r5, [sp, #0]
 800590a:	e7cc      	b.n	80058a6 <HAL_GPIO_Init+0x15a>
          temp |= iocurrent;
 800590c:	4651      	mov	r1, sl
 800590e:	4329      	orrs	r1, r5
 8005910:	000d      	movs	r5, r1
 8005912:	e79f      	b.n	8005854 <HAL_GPIO_Init+0x108>
          temp |= iocurrent;
 8005914:	4656      	mov	r6, sl
 8005916:	4335      	orrs	r5, r6
 8005918:	e795      	b.n	8005846 <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 800591a:	4656      	mov	r6, sl
 800591c:	4335      	orrs	r5, r6
 800591e:	e788      	b.n	8005832 <HAL_GPIO_Init+0xe6>
          temp |= iocurrent;
 8005920:	4656      	mov	r6, sl
 8005922:	4335      	orrs	r5, r6
 8005924:	e77b      	b.n	800581e <HAL_GPIO_Init+0xd2>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005926:	4667      	mov	r7, ip
 8005928:	2603      	movs	r6, #3
 800592a:	40be      	lsls	r6, r7
 800592c:	464f      	mov	r7, r9
 800592e:	4337      	orrs	r7, r6
 8005930:	46b9      	mov	r9, r7
 8005932:	e766      	b.n	8005802 <HAL_GPIO_Init+0xb6>
 8005934:	4666      	mov	r6, ip
 8005936:	2701      	movs	r7, #1
 8005938:	40b7      	lsls	r7, r6
 800593a:	003e      	movs	r6, r7
 800593c:	464f      	mov	r7, r9
 800593e:	4337      	orrs	r7, r6
 8005940:	46b9      	mov	r9, r7
 8005942:	e75e      	b.n	8005802 <HAL_GPIO_Init+0xb6>
 8005944:	4667      	mov	r7, ip
 8005946:	2602      	movs	r6, #2
 8005948:	40be      	lsls	r6, r7
 800594a:	464f      	mov	r7, r9
 800594c:	4337      	orrs	r7, r6
 800594e:	46b9      	mov	r9, r7
 8005950:	e757      	b.n	8005802 <HAL_GPIO_Init+0xb6>
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	40021800 	.word	0x40021800
 8005958:	50000400 	.word	0x50000400
 800595c:	50000800 	.word	0x50000800
 8005960:	50000c00 	.word	0x50000c00

08005964 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005966:	46de      	mov	lr, fp
 8005968:	4657      	mov	r7, sl
 800596a:	464e      	mov	r6, r9
 800596c:	4645      	mov	r5, r8
 800596e:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00u;
 8005970:	2300      	movs	r3, #0
{
 8005972:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005974:	2900      	cmp	r1, #0
 8005976:	d065      	beq.n	8005a44 <HAL_GPIO_DeInit+0xe0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005978:	2201      	movs	r2, #1
 800597a:	4691      	mov	r9, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800597c:	3202      	adds	r2, #2
 800597e:	4693      	mov	fp, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005980:	4a3a      	ldr	r2, [pc, #232]	; (8005a6c <HAL_GPIO_DeInit+0x108>)
 8005982:	4694      	mov	ip, r2
 8005984:	e044      	b.n	8005a10 <HAL_GPIO_DeInit+0xac>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8005986:	4c3a      	ldr	r4, [pc, #232]	; (8005a70 <HAL_GPIO_DeInit+0x10c>)
 8005988:	42a0      	cmp	r0, r4
 800598a:	d062      	beq.n	8005a52 <HAL_GPIO_DeInit+0xee>
 800598c:	4c39      	ldr	r4, [pc, #228]	; (8005a74 <HAL_GPIO_DeInit+0x110>)
 800598e:	42a0      	cmp	r0, r4
 8005990:	d063      	beq.n	8005a5a <HAL_GPIO_DeInit+0xf6>
 8005992:	4c39      	ldr	r4, [pc, #228]	; (8005a78 <HAL_GPIO_DeInit+0x114>)
 8005994:	42a0      	cmp	r0, r4
 8005996:	d064      	beq.n	8005a62 <HAL_GPIO_DeInit+0xfe>
 8005998:	2405      	movs	r4, #5
 800599a:	40ac      	lsls	r4, r5
 800599c:	0025      	movs	r5, r4
 800599e:	42ae      	cmp	r6, r5
 80059a0:	d114      	bne.n	80059cc <HAL_GPIO_DeInit+0x68>
        EXTI->IMR1 &= ~(iocurrent);
 80059a2:	2480      	movs	r4, #128	; 0x80
 80059a4:	4665      	mov	r5, ip
 80059a6:	4666      	mov	r6, ip
 80059a8:	592d      	ldr	r5, [r5, r4]
 80059aa:	43bd      	bics	r5, r7
 80059ac:	5135      	str	r5, [r6, r4]
        EXTI->EMR1 &= ~(iocurrent);
 80059ae:	3404      	adds	r4, #4
 80059b0:	5935      	ldr	r5, [r6, r4]
 80059b2:	43bd      	bics	r5, r7
 80059b4:	5135      	str	r5, [r6, r4]
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
        EXTI->FTSR1 &= ~(iocurrent);

        tmp = 0x0FuL << (8u * (position & 0x03u));
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80059b6:	4644      	mov	r4, r8
        EXTI->RTSR1 &= ~(iocurrent);
 80059b8:	6835      	ldr	r5, [r6, #0]
 80059ba:	43bd      	bics	r5, r7
 80059bc:	6035      	str	r5, [r6, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80059be:	6875      	ldr	r5, [r6, #4]
 80059c0:	43bd      	bics	r5, r7
 80059c2:	6075      	str	r5, [r6, #4]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80059c4:	9e01      	ldr	r6, [sp, #4]
 80059c6:	6e35      	ldr	r5, [r6, #96]	; 0x60
 80059c8:	43a5      	bics	r5, r4
 80059ca:	6635      	str	r5, [r6, #96]	; 0x60
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80059cc:	465e      	mov	r6, fp
 80059ce:	005d      	lsls	r5, r3, #1
 80059d0:	40ae      	lsls	r6, r5
 80059d2:	6804      	ldr	r4, [r0, #0]
 80059d4:	0035      	movs	r5, r6
 80059d6:	4334      	orrs	r4, r6
 80059d8:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80059da:	08dc      	lsrs	r4, r3, #3
 80059dc:	00a4      	lsls	r4, r4, #2
 80059de:	1904      	adds	r4, r0, r4
 80059e0:	6a26      	ldr	r6, [r4, #32]
 80059e2:	2707      	movs	r7, #7
 80059e4:	46b0      	mov	r8, r6
 80059e6:	260f      	movs	r6, #15
 80059e8:	401f      	ands	r7, r3
 80059ea:	00bf      	lsls	r7, r7, #2
 80059ec:	40be      	lsls	r6, r7
 80059ee:	0037      	movs	r7, r6
 80059f0:	4646      	mov	r6, r8
 80059f2:	43be      	bics	r6, r7
 80059f4:	6226      	str	r6, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059f6:	6884      	ldr	r4, [r0, #8]
 80059f8:	43ac      	bics	r4, r5
 80059fa:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80059fc:	6844      	ldr	r4, [r0, #4]
 80059fe:	4394      	bics	r4, r2
 8005a00:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005a02:	68c2      	ldr	r2, [r0, #12]
 8005a04:	43aa      	bics	r2, r5
 8005a06:	60c2      	str	r2, [r0, #12]
  while ((GPIO_Pin >> position) != 0x00u)
 8005a08:	000a      	movs	r2, r1
    }

    position++;
 8005a0a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8005a0c:	40da      	lsrs	r2, r3
 8005a0e:	d019      	beq.n	8005a44 <HAL_GPIO_DeInit+0xe0>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005a10:	464a      	mov	r2, r9
 8005a12:	000f      	movs	r7, r1
 8005a14:	409a      	lsls	r2, r3
 8005a16:	4017      	ands	r7, r2
    if (iocurrent != 0x00u)
 8005a18:	4211      	tst	r1, r2
 8005a1a:	d0f5      	beq.n	8005a08 <HAL_GPIO_DeInit+0xa4>
      tmp = EXTI->EXTICR[position >> 2u];
 8005a1c:	4d13      	ldr	r5, [pc, #76]	; (8005a6c <HAL_GPIO_DeInit+0x108>)
 8005a1e:	089c      	lsrs	r4, r3, #2
 8005a20:	46a8      	mov	r8, r5
 8005a22:	00a4      	lsls	r4, r4, #2
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8005a24:	465d      	mov	r5, fp
 8005a26:	4444      	add	r4, r8
      tmp = EXTI->EXTICR[position >> 2u];
 8005a28:	6e26      	ldr	r6, [r4, #96]	; 0x60
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8005a2a:	9401      	str	r4, [sp, #4]
 8005a2c:	240f      	movs	r4, #15
 8005a2e:	401d      	ands	r5, r3
 8005a30:	00ed      	lsls	r5, r5, #3
 8005a32:	40ac      	lsls	r4, r5
 8005a34:	46a0      	mov	r8, r4
 8005a36:	4026      	ands	r6, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8005a38:	24a0      	movs	r4, #160	; 0xa0
 8005a3a:	05e4      	lsls	r4, r4, #23
 8005a3c:	42a0      	cmp	r0, r4
 8005a3e:	d1a2      	bne.n	8005986 <HAL_GPIO_DeInit+0x22>
 8005a40:	2500      	movs	r5, #0
 8005a42:	e7ac      	b.n	800599e <HAL_GPIO_DeInit+0x3a>
  }
}
 8005a44:	b003      	add	sp, #12
 8005a46:	bcf0      	pop	{r4, r5, r6, r7}
 8005a48:	46bb      	mov	fp, r7
 8005a4a:	46b2      	mov	sl, r6
 8005a4c:	46a9      	mov	r9, r5
 8005a4e:	46a0      	mov	r8, r4
 8005a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8005a52:	464c      	mov	r4, r9
 8005a54:	40ac      	lsls	r4, r5
 8005a56:	0025      	movs	r5, r4
 8005a58:	e7a1      	b.n	800599e <HAL_GPIO_DeInit+0x3a>
 8005a5a:	2402      	movs	r4, #2
 8005a5c:	40ac      	lsls	r4, r5
 8005a5e:	0025      	movs	r5, r4
 8005a60:	e79d      	b.n	800599e <HAL_GPIO_DeInit+0x3a>
 8005a62:	465c      	mov	r4, fp
 8005a64:	40ac      	lsls	r4, r5
 8005a66:	0025      	movs	r5, r4
 8005a68:	e799      	b.n	800599e <HAL_GPIO_DeInit+0x3a>
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	40021800 	.word	0x40021800
 8005a70:	50000400 	.word	0x50000400
 8005a74:	50000800 	.word	0x50000800
 8005a78:	50000c00 	.word	0x50000c00

08005a7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	d001      	beq.n	8005a84 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a80:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a82:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a84:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005a86:	e7fc      	b.n	8005a82 <HAL_GPIO_WritePin+0x6>

08005a88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8a:	46c6      	mov	lr, r8
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a8c:	6804      	ldr	r4, [r0, #0]
{
 8005a8e:	0007      	movs	r7, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a90:	69a3      	ldr	r3, [r4, #24]
{
 8005a92:	000d      	movs	r5, r1
 8005a94:	4690      	mov	r8, r2
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8005a96:	2000      	movs	r0, #0
{
 8005a98:	b500      	push	{lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a9a:	06db      	lsls	r3, r3, #27
 8005a9c:	d529      	bpl.n	8005af2 <I2C_IsAcknowledgeFailed+0x6a>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a9e:	6863      	ldr	r3, [r4, #4]
 8005aa0:	019b      	lsls	r3, r3, #6
 8005aa2:	d529      	bpl.n	8005af8 <I2C_IsAcknowledgeFailed+0x70>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aa4:	2620      	movs	r6, #32
 8005aa6:	e001      	b.n	8005aac <I2C_IsAcknowledgeFailed+0x24>
      if (Timeout != HAL_MAX_DELAY)
 8005aa8:	1c6b      	adds	r3, r5, #1
 8005aaa:	d12b      	bne.n	8005b04 <I2C_IsAcknowledgeFailed+0x7c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005aac:	69a3      	ldr	r3, [r4, #24]
 8005aae:	421e      	tst	r6, r3
 8005ab0:	d0fa      	beq.n	8005aa8 <I2C_IsAcknowledgeFailed+0x20>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab2:	2310      	movs	r3, #16
 8005ab4:	61e3      	str	r3, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab6:	61e6      	str	r6, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ab8:	69a3      	ldr	r3, [r4, #24]
 8005aba:	079b      	lsls	r3, r3, #30
 8005abc:	d501      	bpl.n	8005ac2 <I2C_IsAcknowledgeFailed+0x3a>
    hi2c->Instance->TXDR = 0x00U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	69a2      	ldr	r2, [r4, #24]
 8005ac6:	4213      	tst	r3, r2
 8005ac8:	d102      	bne.n	8005ad0 <I2C_IsAcknowledgeFailed+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005aca:	69a2      	ldr	r2, [r4, #24]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61a3      	str	r3, [r4, #24]
    I2C_RESET_CR2(hi2c);
 8005ad0:	6863      	ldr	r3, [r4, #4]
 8005ad2:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <I2C_IsAcknowledgeFailed+0x9c>)
 8005ad4:	4013      	ands	r3, r2
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ad6:	2204      	movs	r2, #4
    I2C_RESET_CR2(hi2c);
 8005ad8:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005adc:	4313      	orrs	r3, r2
 8005ade:	647b      	str	r3, [r7, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	2341      	movs	r3, #65	; 0x41
 8005ae2:	321c      	adds	r2, #28
 8005ae4:	54fa      	strb	r2, [r7, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae6:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005ae8:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aea:	3222      	adds	r2, #34	; 0x22
 8005aec:	54bb      	strb	r3, [r7, r2]
    __HAL_UNLOCK(hi2c);
 8005aee:	3a02      	subs	r2, #2
 8005af0:	54bb      	strb	r3, [r7, r2]
}
 8005af2:	bc80      	pop	{r7}
 8005af4:	46b8      	mov	r8, r7
 8005af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	6862      	ldr	r2, [r4, #4]
 8005afc:	01db      	lsls	r3, r3, #7
 8005afe:	4313      	orrs	r3, r2
 8005b00:	6063      	str	r3, [r4, #4]
 8005b02:	e7cf      	b.n	8005aa4 <I2C_IsAcknowledgeFailed+0x1c>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b04:	f7ff f82e 	bl	8004b64 <HAL_GetTick>
 8005b08:	4643      	mov	r3, r8
 8005b0a:	1ac0      	subs	r0, r0, r3
 8005b0c:	4285      	cmp	r5, r0
 8005b0e:	d303      	bcc.n	8005b18 <I2C_IsAcknowledgeFailed+0x90>
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	d001      	beq.n	8005b18 <I2C_IsAcknowledgeFailed+0x90>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b14:	683c      	ldr	r4, [r7, #0]
 8005b16:	e7c9      	b.n	8005aac <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b18:	2220      	movs	r2, #32
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	647b      	str	r3, [r7, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b20:	2341      	movs	r3, #65	; 0x41
 8005b22:	e7df      	b.n	8005ae4 <I2C_IsAcknowledgeFailed+0x5c>
 8005b24:	fe00e800 	.word	0xfe00e800

08005b28 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	0004      	movs	r4, r0
 8005b2c:	000d      	movs	r5, r1
 8005b2e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b30:	2702      	movs	r7, #2
 8005b32:	e008      	b.n	8005b46 <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b34:	0032      	movs	r2, r6
 8005b36:	0029      	movs	r1, r5
 8005b38:	0020      	movs	r0, r4
 8005b3a:	f7ff ffa5 	bl	8005a88 <I2C_IsAcknowledgeFailed>
 8005b3e:	2800      	cmp	r0, #0
 8005b40:	d107      	bne.n	8005b52 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8005b42:	1c6b      	adds	r3, r5, #1
 8005b44:	d107      	bne.n	8005b56 <I2C_WaitOnTXISFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	421f      	tst	r7, r3
 8005b4c:	d0f2      	beq.n	8005b34 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 8005b4e:	2000      	movs	r0, #0
}
 8005b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8005b52:	2001      	movs	r0, #1
 8005b54:	e7fc      	b.n	8005b50 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b56:	f7ff f805 	bl	8004b64 <HAL_GetTick>
 8005b5a:	1b80      	subs	r0, r0, r6
 8005b5c:	42a8      	cmp	r0, r5
 8005b5e:	d801      	bhi.n	8005b64 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8005b60:	2d00      	cmp	r5, #0
 8005b62:	d1f0      	bne.n	8005b46 <I2C_WaitOnTXISFlagUntilTimeout+0x1e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b64:	2220      	movs	r2, #32
 8005b66:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8005b68:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b6e:	2341      	movs	r3, #65	; 0x41
 8005b70:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	3222      	adds	r2, #34	; 0x22
 8005b76:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8005b78:	3a02      	subs	r2, #2
 8005b7a:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8005b7c:	e7e8      	b.n	8005b50 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
 8005b7e:	46c0      	nop			; (mov r8, r8)

08005b80 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	0005      	movs	r5, r0
 8005b84:	000c      	movs	r4, r1
 8005b86:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b88:	2720      	movs	r7, #32
 8005b8a:	e00d      	b.n	8005ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b8c:	0032      	movs	r2, r6
 8005b8e:	0021      	movs	r1, r4
 8005b90:	0028      	movs	r0, r5
 8005b92:	f7ff ff79 	bl	8005a88 <I2C_IsAcknowledgeFailed>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d119      	bne.n	8005bce <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9a:	f7fe ffe3 	bl	8004b64 <HAL_GetTick>
 8005b9e:	1b80      	subs	r0, r0, r6
 8005ba0:	42a0      	cmp	r0, r4
 8005ba2:	d807      	bhi.n	8005bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8005ba4:	2c00      	cmp	r4, #0
 8005ba6:	d005      	beq.n	8005bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	421f      	tst	r7, r3
 8005bae:	d0ed      	beq.n	8005b8c <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
  return HAL_OK;
 8005bb0:	2000      	movs	r0, #0
}
 8005bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005bb8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bbe:	2341      	movs	r3, #65	; 0x41
 8005bc0:	54ea      	strb	r2, [r5, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	3222      	adds	r2, #34	; 0x22
 8005bc6:	54ab      	strb	r3, [r5, r2]
        __HAL_UNLOCK(hi2c);
 8005bc8:	3a02      	subs	r2, #2
 8005bca:	54ab      	strb	r3, [r5, r2]
        return HAL_ERROR;
 8005bcc:	e7f1      	b.n	8005bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
      return HAL_ERROR;
 8005bce:	2001      	movs	r0, #1
 8005bd0:	e7ef      	b.n	8005bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8005bd2:	46c0      	nop			; (mov r8, r8)

08005bd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bd6:	2320      	movs	r3, #32
{
 8005bd8:	46c6      	mov	lr, r8
 8005bda:	0004      	movs	r4, r0
 8005bdc:	000d      	movs	r5, r1
 8005bde:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005be0:	2704      	movs	r7, #4
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005be2:	4698      	mov	r8, r3
{
 8005be4:	b500      	push	{lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005be6:	e012      	b.n	8005c0e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be8:	0032      	movs	r2, r6
 8005bea:	0029      	movs	r1, r5
 8005bec:	0020      	movs	r0, r4
 8005bee:	f7ff ff4b 	bl	8005a88 <I2C_IsAcknowledgeFailed>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d11e      	bne.n	8005c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x60>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bf6:	4641      	mov	r1, r8
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	4211      	tst	r1, r2
 8005bfe:	d11b      	bne.n	8005c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c00:	f7fe ffb0 	bl	8004b64 <HAL_GetTick>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	42a8      	cmp	r0, r5
 8005c08:	d809      	bhi.n	8005c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005c0a:	2d00      	cmp	r5, #0
 8005c0c:	d007      	beq.n	8005c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	421f      	tst	r7, r3
 8005c14:	d0e8      	beq.n	8005be8 <I2C_WaitOnRXNEFlagUntilTimeout+0x14>
        return HAL_OK;
 8005c16:	2000      	movs	r0, #0
}
 8005c18:	bc80      	pop	{r7}
 8005c1a:	46b8      	mov	r8, r7
 8005c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c1e:	2220      	movs	r2, #32
 8005c20:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005c22:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c24:	4313      	orrs	r3, r2
 8005c26:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c28:	2341      	movs	r3, #65	; 0x41
 8005c2a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8005c32:	e7f1      	b.n	8005c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8005c34:	2001      	movs	r0, #1
 8005c36:	e7ef      	b.n	8005c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	4217      	tst	r7, r2
 8005c3c:	d002      	beq.n	8005c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
 8005c3e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d1e8      	bne.n	8005c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x42>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c44:	2120      	movs	r1, #32
 8005c46:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	4806      	ldr	r0, [pc, #24]	; (8005c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
 8005c4c:	4002      	ands	r2, r0
 8005c4e:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c50:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8005c52:	2241      	movs	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c54:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c56:	54a1      	strb	r1, [r4, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c58:	3201      	adds	r2, #1
 8005c5a:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8005c5c:	3a02      	subs	r2, #2
        return HAL_ERROR;
 8005c5e:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8005c60:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8005c62:	e7d9      	b.n	8005c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
 8005c64:	fe00e800 	.word	0xfe00e800

08005c68 <HAL_I2C_Init>:
{
 8005c68:	b510      	push	{r4, lr}
 8005c6a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8005c6c:	d04d      	beq.n	8005d0a <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c6e:	2341      	movs	r3, #65	; 0x41
 8005c70:	5cc3      	ldrb	r3, [r0, r3]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d043      	beq.n	8005d00 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c78:	2341      	movs	r3, #65	; 0x41
 8005c7a:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8005c7c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c7e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	438a      	bics	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c88:	6861      	ldr	r1, [r4, #4]
 8005c8a:	4a21      	ldr	r2, [pc, #132]	; (8005d10 <HAL_I2C_Init+0xa8>)
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	4920      	ldr	r1, [pc, #128]	; (8005d14 <HAL_I2C_Init+0xac>)
 8005c94:	400a      	ands	r2, r1
 8005c96:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c98:	68e2      	ldr	r2, [r4, #12]
 8005c9a:	2a01      	cmp	r2, #1
 8005c9c:	d02a      	beq.n	8005cf4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005c9e:	2184      	movs	r1, #132	; 0x84
 8005ca0:	68a0      	ldr	r0, [r4, #8]
 8005ca2:	0209      	lsls	r1, r1, #8
 8005ca4:	4301      	orrs	r1, r0
 8005ca6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ca8:	2a02      	cmp	r2, #2
 8005caa:	d102      	bne.n	8005cb2 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cac:	2280      	movs	r2, #128	; 0x80
 8005cae:	0112      	lsls	r2, r2, #4
 8005cb0:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cb2:	6859      	ldr	r1, [r3, #4]
 8005cb4:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 8005cb6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	4915      	ldr	r1, [pc, #84]	; (8005d14 <HAL_I2C_Init+0xac>)
 8005cc0:	400a      	ands	r2, r1
 8005cc2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cc4:	6961      	ldr	r1, [r4, #20]
 8005cc6:	6922      	ldr	r2, [r4, #16]
 8005cc8:	430a      	orrs	r2, r1
                             (hi2c->Init.OwnAddress2Masks << 8));
 8005cca:	69a1      	ldr	r1, [r4, #24]
 8005ccc:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005cd2:	6a21      	ldr	r1, [r4, #32]
 8005cd4:	69e2      	ldr	r2, [r4, #28]
 8005cd6:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8005cd8:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005cda:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce2:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	2241      	movs	r2, #65	; 0x41
 8005ce6:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cec:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cee:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf0:	54a3      	strb	r3, [r4, r2]
}
 8005cf2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cf4:	2280      	movs	r2, #128	; 0x80
 8005cf6:	68a1      	ldr	r1, [r4, #8]
 8005cf8:	0212      	lsls	r2, r2, #8
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cfe:	e7d8      	b.n	8005cb2 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8005d00:	3340      	adds	r3, #64	; 0x40
 8005d02:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8005d04:	f7fe fbb0 	bl	8004468 <HAL_I2C_MspInit>
 8005d08:	e7b6      	b.n	8005c78 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	e7f1      	b.n	8005cf2 <HAL_I2C_Init+0x8a>
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	f0ffffff 	.word	0xf0ffffff
 8005d14:	ffff7fff 	.word	0xffff7fff
 8005d18:	02008000 	.word	0x02008000

08005d1c <HAL_I2C_DeInit>:
{
 8005d1c:	b570      	push	{r4, r5, r6, lr}
 8005d1e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8005d20:	d013      	beq.n	8005d4a <HAL_I2C_DeInit+0x2e>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d22:	2541      	movs	r5, #65	; 0x41
 8005d24:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8005d26:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d28:	5543      	strb	r3, [r0, r5]
  __HAL_I2C_DISABLE(hi2c);
 8005d2a:	6802      	ldr	r2, [r0, #0]
 8005d2c:	6813      	ldr	r3, [r2, #0]
 8005d2e:	438b      	bics	r3, r1
 8005d30:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005d32:	f7fe fbdf 	bl	80044f4 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d36:	2300      	movs	r3, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d38:	2242      	movs	r2, #66	; 0x42
  return HAL_OK;
 8005d3a:	2000      	movs	r0, #0
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d3c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005d3e:	5563      	strb	r3, [r4, r5]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d40:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d42:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hi2c);
 8005d44:	3a02      	subs	r2, #2
 8005d46:	54a3      	strb	r3, [r4, r2]
}
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	e7fc      	b.n	8005d48 <HAL_I2C_DeInit+0x2c>
 8005d4e:	46c0      	nop			; (mov r8, r8)

08005d50 <HAL_I2C_Master_Transmit>:
{
 8005d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d52:	46d6      	mov	lr, sl
 8005d54:	464f      	mov	r7, r9
 8005d56:	4646      	mov	r6, r8
 8005d58:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5a:	2341      	movs	r3, #65	; 0x41
{
 8005d5c:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5e:	5cc3      	ldrb	r3, [r0, r3]
{
 8005d60:	0004      	movs	r4, r0
 8005d62:	4688      	mov	r8, r1
 8005d64:	4692      	mov	sl, r2
 8005d66:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d173      	bne.n	8005e54 <HAL_I2C_Master_Transmit+0x104>
    __HAL_LOCK(hi2c);
 8005d6c:	3320      	adds	r3, #32
 8005d6e:	5cc2      	ldrb	r2, [r0, r3]
 8005d70:	2a01      	cmp	r2, #1
 8005d72:	d06f      	beq.n	8005e54 <HAL_I2C_Master_Transmit+0x104>
 8005d74:	2201      	movs	r2, #1
 8005d76:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8005d78:	f7fe fef4 	bl	8004b64 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d7c:	2780      	movs	r7, #128	; 0x80
    tickstart = HAL_GetTick();
 8005d7e:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d80:	023f      	lsls	r7, r7, #8
 8005d82:	e005      	b.n	8005d90 <HAL_I2C_Master_Transmit+0x40>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d84:	f7fe feee 	bl	8004b64 <HAL_GetTick>
 8005d88:	1b80      	subs	r0, r0, r6
 8005d8a:	2819      	cmp	r0, #25
 8005d8c:	d900      	bls.n	8005d90 <HAL_I2C_Master_Transmit+0x40>
 8005d8e:	e067      	b.n	8005e60 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	6993      	ldr	r3, [r2, #24]
 8005d94:	0019      	movs	r1, r3
 8005d96:	4039      	ands	r1, r7
 8005d98:	423b      	tst	r3, r7
 8005d9a:	d1f3      	bne.n	8005d84 <HAL_I2C_Master_Transmit+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d9c:	2341      	movs	r3, #65	; 0x41
 8005d9e:	2021      	movs	r0, #33	; 0x21
 8005da0:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005da2:	3301      	adds	r3, #1
 8005da4:	3811      	subs	r0, #17
 8005da6:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8005da8:	4653      	mov	r3, sl
 8005daa:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dac:	464b      	mov	r3, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dae:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8005db0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005db2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005db4:	6361      	str	r1, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005db6:	2bff      	cmp	r3, #255	; 0xff
 8005db8:	d900      	bls.n	8005dbc <HAL_I2C_Master_Transmit+0x6c>
 8005dba:	e071      	b.n	8005ea0 <HAL_I2C_Master_Transmit+0x150>
      hi2c->XferSize = hi2c->XferCount;
 8005dbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005dbe:	494b      	ldr	r1, [pc, #300]	; (8005eec <HAL_I2C_Master_Transmit+0x19c>)
 8005dc0:	6850      	ldr	r0, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8005dc2:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8005dc4:	4008      	ands	r0, r1
 8005dc6:	4641      	mov	r1, r8
 8005dc8:	0589      	lsls	r1, r1, #22
      hi2c->XferSize = hi2c->XferCount;
 8005dca:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005dcc:	0d8f      	lsrs	r7, r1, #22
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	4338      	orrs	r0, r7
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	4303      	orrs	r3, r0
 8005dd6:	4846      	ldr	r0, [pc, #280]	; (8005ef0 <HAL_I2C_Master_Transmit+0x1a0>)
 8005dd8:	4303      	orrs	r3, r0
 8005dda:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8005ddc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005dde:	0d8a      	lsrs	r2, r1, #22
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005de0:	2780      	movs	r7, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2,
 8005de2:	4690      	mov	r8, r2
    while (hi2c->XferCount > 0U)
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d103      	bne.n	8005df0 <HAL_I2C_Master_Transmit+0xa0>
 8005de8:	e01f      	b.n	8005e2a <HAL_I2C_Master_Transmit+0xda>
 8005dea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01c      	beq.n	8005e2a <HAL_I2C_Master_Transmit+0xda>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005df0:	0032      	movs	r2, r6
 8005df2:	0029      	movs	r1, r5
 8005df4:	0020      	movs	r0, r4
 8005df6:	f7ff fe97 	bl	8005b28 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d13b      	bne.n	8005e76 <HAL_I2C_Master_Transmit+0x126>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8005e04:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e06:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005e08:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005e0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005e12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e14:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e1c:	2900      	cmp	r1, #0
 8005e1e:	d0e4      	beq.n	8005dea <HAL_I2C_Master_Transmit+0x9a>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d02c      	beq.n	8005e7e <HAL_I2C_Master_Transmit+0x12e>
    while (hi2c->XferCount > 0U)
 8005e24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e2      	bne.n	8005df0 <HAL_I2C_Master_Transmit+0xa0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2a:	0032      	movs	r2, r6
 8005e2c:	0029      	movs	r1, r5
 8005e2e:	0020      	movs	r0, r4
 8005e30:	f7ff fea6 	bl	8005b80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d11e      	bne.n	8005e76 <HAL_I2C_Master_Transmit+0x126>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e38:	2120      	movs	r1, #32
 8005e3a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005e3c:	4d2d      	ldr	r5, [pc, #180]	; (8005ef4 <HAL_I2C_Master_Transmit+0x1a4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e3e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	402a      	ands	r2, r5
 8005e44:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e46:	2341      	movs	r3, #65	; 0x41
 8005e48:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8005e4e:	3b02      	subs	r3, #2
 8005e50:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8005e52:	e000      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x106>
    return HAL_BUSY;
 8005e54:	2002      	movs	r0, #2
}
 8005e56:	bce0      	pop	{r5, r6, r7}
 8005e58:	46ba      	mov	sl, r7
 8005e5a:	46b1      	mov	r9, r6
 8005e5c:	46a8      	mov	r8, r5
 8005e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e60:	2220      	movs	r2, #32
 8005e62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005e64:	4313      	orrs	r3, r2
 8005e66:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e68:	2341      	movs	r3, #65	; 0x41
 8005e6a:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	3222      	adds	r2, #34	; 0x22
 8005e70:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8005e72:	3a02      	subs	r2, #2
 8005e74:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8005e76:	2001      	movs	r0, #1
 8005e78:	e7ed      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x106>
    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	1c6b      	adds	r3, r5, #1
 8005e7c:	d11d      	bne.n	8005eba <HAL_I2C_Master_Transmit+0x16a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e7e:	6993      	ldr	r3, [r2, #24]
 8005e80:	421f      	tst	r7, r3
 8005e82:	d0fa      	beq.n	8005e7a <HAL_I2C_Master_Transmit+0x12a>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e86:	2bff      	cmp	r3, #255	; 0xff
 8005e88:	d920      	bls.n	8005ecc <HAL_I2C_Master_Transmit+0x17c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e8a:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8005e8c:	491a      	ldr	r1, [pc, #104]	; (8005ef8 <HAL_I2C_Master_Transmit+0x1a8>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e8e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005e90:	6853      	ldr	r3, [r2, #4]
 8005e92:	400b      	ands	r3, r1
 8005e94:	4641      	mov	r1, r8
 8005e96:	430b      	orrs	r3, r1
 8005e98:	4918      	ldr	r1, [pc, #96]	; (8005efc <HAL_I2C_Master_Transmit+0x1ac>)
 8005e9a:	430b      	orrs	r3, r1
 8005e9c:	6053      	str	r3, [r2, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005e9e:	e7a4      	b.n	8005dea <HAL_I2C_Master_Transmit+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ea0:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8005ea2:	4912      	ldr	r1, [pc, #72]	; (8005eec <HAL_I2C_Master_Transmit+0x19c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ea4:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005ea6:	6853      	ldr	r3, [r2, #4]
 8005ea8:	400b      	ands	r3, r1
 8005eaa:	4641      	mov	r1, r8
 8005eac:	0589      	lsls	r1, r1, #22
 8005eae:	0d88      	lsrs	r0, r1, #22
 8005eb0:	4303      	orrs	r3, r0
 8005eb2:	4813      	ldr	r0, [pc, #76]	; (8005f00 <HAL_I2C_Master_Transmit+0x1b0>)
 8005eb4:	4303      	orrs	r3, r0
 8005eb6:	6053      	str	r3, [r2, #4]
}
 8005eb8:	e790      	b.n	8005ddc <HAL_I2C_Master_Transmit+0x8c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eba:	f7fe fe53 	bl	8004b64 <HAL_GetTick>
 8005ebe:	1b80      	subs	r0, r0, r6
 8005ec0:	4285      	cmp	r5, r0
 8005ec2:	d3cd      	bcc.n	8005e60 <HAL_I2C_Master_Transmit+0x110>
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	d0cb      	beq.n	8005e60 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	e7d8      	b.n	8005e7e <HAL_I2C_Master_Transmit+0x12e>
          hi2c->XferSize = hi2c->XferCount;
 8005ecc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005ece:	480a      	ldr	r0, [pc, #40]	; (8005ef8 <HAL_I2C_Master_Transmit+0x1a8>)
 8005ed0:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8005ed2:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8005ed4:	4001      	ands	r1, r0
 8005ed6:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8005ed8:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	4301      	orrs	r1, r0
 8005ede:	041b      	lsls	r3, r3, #16
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	2180      	movs	r1, #128	; 0x80
 8005ee4:	0489      	lsls	r1, r1, #18
 8005ee6:	430b      	orrs	r3, r1
 8005ee8:	6053      	str	r3, [r2, #4]
}
 8005eea:	e77e      	b.n	8005dea <HAL_I2C_Master_Transmit+0x9a>
 8005eec:	fc009800 	.word	0xfc009800
 8005ef0:	82002000 	.word	0x82002000
 8005ef4:	fe00e800 	.word	0xfe00e800
 8005ef8:	fc009c00 	.word	0xfc009c00
 8005efc:	01ff0000 	.word	0x01ff0000
 8005f00:	81ff2000 	.word	0x81ff2000

08005f04 <HAL_I2C_Master_Receive>:
{
 8005f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f06:	46d6      	mov	lr, sl
 8005f08:	464f      	mov	r7, r9
 8005f0a:	4646      	mov	r6, r8
 8005f0c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f0e:	2341      	movs	r3, #65	; 0x41
{
 8005f10:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f12:	5cc3      	ldrb	r3, [r0, r3]
{
 8005f14:	0004      	movs	r4, r0
 8005f16:	4688      	mov	r8, r1
 8005f18:	4692      	mov	sl, r2
 8005f1a:	9d08      	ldr	r5, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d000      	beq.n	8005f22 <HAL_I2C_Master_Receive+0x1e>
 8005f20:	e089      	b.n	8006036 <HAL_I2C_Master_Receive+0x132>
    __HAL_LOCK(hi2c);
 8005f22:	3320      	adds	r3, #32
 8005f24:	5cc2      	ldrb	r2, [r0, r3]
 8005f26:	2a01      	cmp	r2, #1
 8005f28:	d100      	bne.n	8005f2c <HAL_I2C_Master_Receive+0x28>
 8005f2a:	e084      	b.n	8006036 <HAL_I2C_Master_Receive+0x132>
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8005f30:	f7fe fe18 	bl	8004b64 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f34:	2780      	movs	r7, #128	; 0x80
    tickstart = HAL_GetTick();
 8005f36:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f38:	023f      	lsls	r7, r7, #8
 8005f3a:	e005      	b.n	8005f48 <HAL_I2C_Master_Receive+0x44>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f3c:	f7fe fe12 	bl	8004b64 <HAL_GetTick>
 8005f40:	1b80      	subs	r0, r0, r6
 8005f42:	2819      	cmp	r0, #25
 8005f44:	d900      	bls.n	8005f48 <HAL_I2C_Master_Receive+0x44>
 8005f46:	e083      	b.n	8006050 <HAL_I2C_Master_Receive+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f48:	6822      	ldr	r2, [r4, #0]
 8005f4a:	6993      	ldr	r3, [r2, #24]
 8005f4c:	0019      	movs	r1, r3
 8005f4e:	4039      	ands	r1, r7
 8005f50:	423b      	tst	r3, r7
 8005f52:	d1f3      	bne.n	8005f3c <HAL_I2C_Master_Receive+0x38>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f54:	2341      	movs	r3, #65	; 0x41
 8005f56:	2022      	movs	r0, #34	; 0x22
 8005f58:	54e0      	strb	r0, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	3812      	subs	r0, #18
 8005f5e:	54e0      	strb	r0, [r4, r3]
    hi2c->pBuffPtr  = pData;
 8005f60:	4653      	mov	r3, sl
 8005f62:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f64:	464b      	mov	r3, r9
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f66:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8005f68:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f6c:	6361      	str	r1, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f6e:	2bff      	cmp	r3, #255	; 0xff
 8005f70:	d900      	bls.n	8005f74 <HAL_I2C_Master_Receive+0x70>
 8005f72:	e07a      	b.n	800606a <HAL_I2C_Master_Receive+0x166>
      hi2c->XferSize = hi2c->XferCount;
 8005f74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8005f76:	494b      	ldr	r1, [pc, #300]	; (80060a4 <HAL_I2C_Master_Receive+0x1a0>)
 8005f78:	6850      	ldr	r0, [r2, #4]
      hi2c->XferSize = hi2c->XferCount;
 8005f7a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 8005f7c:	4008      	ands	r0, r1
 8005f7e:	4641      	mov	r1, r8
 8005f80:	0589      	lsls	r1, r1, #22
      hi2c->XferSize = hi2c->XferCount;
 8005f82:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005f84:	0d8f      	lsrs	r7, r1, #22
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	4338      	orrs	r0, r7
 8005f8a:	041b      	lsls	r3, r3, #16
 8005f8c:	4303      	orrs	r3, r0
 8005f8e:	4846      	ldr	r0, [pc, #280]	; (80060a8 <HAL_I2C_Master_Receive+0x1a4>)
 8005f90:	4303      	orrs	r3, r0
 8005f92:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8005f94:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d038      	beq.n	800600c <HAL_I2C_Master_Receive+0x108>
  MODIFY_REG(hi2c->Instance->CR2,
 8005f9a:	0d8b      	lsrs	r3, r1, #22
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f9c:	2780      	movs	r7, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2,
 8005f9e:	4698      	mov	r8, r3
 8005fa0:	e002      	b.n	8005fa8 <HAL_I2C_Master_Receive+0xa4>
    while (hi2c->XferCount > 0U)
 8005fa2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d031      	beq.n	800600c <HAL_I2C_Master_Receive+0x108>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa8:	0032      	movs	r2, r6
 8005faa:	0029      	movs	r1, r5
 8005fac:	0020      	movs	r0, r4
 8005fae:	f7ff fe11 	bl	8005bd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	d157      	bne.n	8006066 <HAL_I2C_Master_Receive+0x162>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8005fbe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8005fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005fc2:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005fc4:	3301      	adds	r3, #1
      hi2c->XferCount--;
 8005fc6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8005fc8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005fca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005fcc:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005fce:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	d0e3      	beq.n	8005fa2 <HAL_I2C_Master_Receive+0x9e>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e1      	bne.n	8005fa2 <HAL_I2C_Master_Receive+0x9e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fde:	6822      	ldr	r2, [r4, #0]
 8005fe0:	e001      	b.n	8005fe6 <HAL_I2C_Master_Receive+0xe2>
    if (Timeout != HAL_MAX_DELAY)
 8005fe2:	1c6b      	adds	r3, r5, #1
 8005fe4:	d12d      	bne.n	8006042 <HAL_I2C_Master_Receive+0x13e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fe6:	6993      	ldr	r3, [r2, #24]
 8005fe8:	421f      	tst	r7, r3
 8005fea:	d0fa      	beq.n	8005fe2 <HAL_I2C_Master_Receive+0xde>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fee:	2bff      	cmp	r3, #255	; 0xff
 8005ff0:	d948      	bls.n	8006084 <HAL_I2C_Master_Receive+0x180>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ff2:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8005ff4:	492d      	ldr	r1, [pc, #180]	; (80060ac <HAL_I2C_Master_Receive+0x1a8>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ff6:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8005ff8:	6853      	ldr	r3, [r2, #4]
 8005ffa:	400b      	ands	r3, r1
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	430b      	orrs	r3, r1
 8006000:	492b      	ldr	r1, [pc, #172]	; (80060b0 <HAL_I2C_Master_Receive+0x1ac>)
 8006002:	430b      	orrs	r3, r1
 8006004:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8006006:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1cd      	bne.n	8005fa8 <HAL_I2C_Master_Receive+0xa4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800600c:	0032      	movs	r2, r6
 800600e:	0029      	movs	r1, r5
 8006010:	0020      	movs	r0, r4
 8006012:	f7ff fdb5 	bl	8005b80 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006016:	2800      	cmp	r0, #0
 8006018:	d125      	bne.n	8006066 <HAL_I2C_Master_Receive+0x162>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800601a:	2120      	movs	r1, #32
 800601c:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800601e:	4d25      	ldr	r5, [pc, #148]	; (80060b4 <HAL_I2C_Master_Receive+0x1b0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006020:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	402a      	ands	r2, r5
 8006026:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006028:	2341      	movs	r3, #65	; 0x41
 800602a:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800602c:	3301      	adds	r3, #1
 800602e:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8006030:	3b02      	subs	r3, #2
 8006032:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8006034:	e000      	b.n	8006038 <HAL_I2C_Master_Receive+0x134>
    return HAL_BUSY;
 8006036:	2002      	movs	r0, #2
}
 8006038:	bce0      	pop	{r5, r6, r7}
 800603a:	46ba      	mov	sl, r7
 800603c:	46b1      	mov	r9, r6
 800603e:	46a8      	mov	r8, r5
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006042:	f7fe fd8f 	bl	8004b64 <HAL_GetTick>
 8006046:	1b80      	subs	r0, r0, r6
 8006048:	4285      	cmp	r5, r0
 800604a:	d301      	bcc.n	8006050 <HAL_I2C_Master_Receive+0x14c>
 800604c:	2d00      	cmp	r5, #0
 800604e:	d1c6      	bne.n	8005fde <HAL_I2C_Master_Receive+0xda>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006050:	2220      	movs	r2, #32
 8006052:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006054:	4313      	orrs	r3, r2
 8006056:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006058:	2341      	movs	r3, #65	; 0x41
 800605a:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800605c:	2300      	movs	r3, #0
 800605e:	3222      	adds	r2, #34	; 0x22
 8006060:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8006062:	3a02      	subs	r2, #2
 8006064:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8006066:	2001      	movs	r0, #1
 8006068:	e7e6      	b.n	8006038 <HAL_I2C_Master_Receive+0x134>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800606a:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 800606c:	490d      	ldr	r1, [pc, #52]	; (80060a4 <HAL_I2C_Master_Receive+0x1a0>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800606e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8006070:	6853      	ldr	r3, [r2, #4]
 8006072:	400b      	ands	r3, r1
 8006074:	4641      	mov	r1, r8
 8006076:	0589      	lsls	r1, r1, #22
 8006078:	0d88      	lsrs	r0, r1, #22
 800607a:	4303      	orrs	r3, r0
 800607c:	480e      	ldr	r0, [pc, #56]	; (80060b8 <HAL_I2C_Master_Receive+0x1b4>)
 800607e:	4303      	orrs	r3, r0
 8006080:	6053      	str	r3, [r2, #4]
}
 8006082:	e787      	b.n	8005f94 <HAL_I2C_Master_Receive+0x90>
          hi2c->XferSize = hi2c->XferCount;
 8006084:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8006086:	4809      	ldr	r0, [pc, #36]	; (80060ac <HAL_I2C_Master_Receive+0x1a8>)
 8006088:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 800608a:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 800608c:	4001      	ands	r1, r0
 800608e:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8006090:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8006092:	b2db      	uxtb	r3, r3
 8006094:	4301      	orrs	r1, r0
 8006096:	041b      	lsls	r3, r3, #16
 8006098:	430b      	orrs	r3, r1
 800609a:	2180      	movs	r1, #128	; 0x80
 800609c:	0489      	lsls	r1, r1, #18
 800609e:	430b      	orrs	r3, r1
 80060a0:	6053      	str	r3, [r2, #4]
}
 80060a2:	e77e      	b.n	8005fa2 <HAL_I2C_Master_Receive+0x9e>
 80060a4:	fc009800 	.word	0xfc009800
 80060a8:	82002400 	.word	0x82002400
 80060ac:	fc009c00 	.word	0xfc009c00
 80060b0:	01ff0000 	.word	0x01ff0000
 80060b4:	fe00e800 	.word	0xfe00e800
 80060b8:	81ff2400 	.word	0x81ff2400

080060bc <HAL_I2C_Master_Transmit_DMA>:
{
 80060bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060be:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c0:	2041      	movs	r0, #65	; 0x41
{
 80060c2:	46d6      	mov	lr, sl
 80060c4:	464f      	mov	r7, r9
 80060c6:	4646      	mov	r6, r8
 80060c8:	000d      	movs	r5, r1
 80060ca:	0011      	movs	r1, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060cc:	5c22      	ldrb	r2, [r4, r0]
{
 80060ce:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d0:	2a20      	cmp	r2, #32
 80060d2:	d136      	bne.n	8006142 <HAL_I2C_Master_Transmit_DMA+0x86>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	2780      	movs	r7, #128	; 0x80
 80060d8:	6996      	ldr	r6, [r2, #24]
 80060da:	023f      	lsls	r7, r7, #8
 80060dc:	46b4      	mov	ip, r6
 80060de:	403e      	ands	r6, r7
 80060e0:	46b2      	mov	sl, r6
 80060e2:	4666      	mov	r6, ip
 80060e4:	423e      	tst	r6, r7
 80060e6:	d12c      	bne.n	8006142 <HAL_I2C_Master_Transmit_DMA+0x86>
    __HAL_LOCK(hi2c);
 80060e8:	2640      	movs	r6, #64	; 0x40
 80060ea:	5da7      	ldrb	r7, [r4, r6]
 80060ec:	2f01      	cmp	r7, #1
 80060ee:	d028      	beq.n	8006142 <HAL_I2C_Master_Transmit_DMA+0x86>
 80060f0:	2701      	movs	r7, #1
 80060f2:	55a7      	strb	r7, [r4, r6]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80060f4:	3720      	adds	r7, #32
 80060f6:	5427      	strb	r7, [r4, r0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060f8:	3001      	adds	r0, #1
 80060fa:	3f11      	subs	r7, #17
 80060fc:	5427      	strb	r7, [r4, r0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060fe:	4650      	mov	r0, sl
 8006100:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8006102:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006104:	4b40      	ldr	r3, [pc, #256]	; (8006208 <HAL_I2C_Master_Transmit_DMA+0x14c>)
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006106:	4f41      	ldr	r7, [pc, #260]	; (800620c <HAL_I2C_Master_Transmit_DMA+0x150>)
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006108:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800610a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800610c:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800610e:	6367      	str	r7, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006110:	2bff      	cmp	r3, #255	; 0xff
 8006112:	d81c      	bhi.n	800614e <HAL_I2C_Master_Transmit_DMA+0x92>
      hi2c->XferSize = hi2c->XferCount;
 8006114:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006116:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 8006118:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 800611a:	2b00      	cmp	r3, #0
 800611c:	d160      	bne.n	80061e0 <HAL_I2C_Master_Transmit_DMA+0x124>
      hi2c->XferISR = I2C_Master_ISR_IT;
 800611e:	493c      	ldr	r1, [pc, #240]	; (8006210 <HAL_I2C_Master_Transmit_DMA+0x154>)
  MODIFY_REG(hi2c->Instance->CR2,
 8006120:	6850      	ldr	r0, [r2, #4]
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006122:	6361      	str	r1, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8006124:	493b      	ldr	r1, [pc, #236]	; (8006214 <HAL_I2C_Master_Transmit_DMA+0x158>)
 8006126:	05ad      	lsls	r5, r5, #22
 8006128:	4008      	ands	r0, r1
 800612a:	0dad      	lsrs	r5, r5, #22
 800612c:	493a      	ldr	r1, [pc, #232]	; (8006218 <HAL_I2C_Master_Transmit_DMA+0x15c>)
 800612e:	4305      	orrs	r5, r0
 8006130:	430d      	orrs	r5, r1
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006132:	21f2      	movs	r1, #242	; 0xf2
  MODIFY_REG(hi2c->Instance->CR2,
 8006134:	6055      	str	r5, [r2, #4]
      __HAL_UNLOCK(hi2c);
 8006136:	55a3      	strb	r3, [r4, r6]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006138:	6813      	ldr	r3, [r2, #0]
    return HAL_OK;
 800613a:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800613c:	430b      	orrs	r3, r1
 800613e:	6013      	str	r3, [r2, #0]
}
 8006140:	e000      	b.n	8006144 <HAL_I2C_Master_Transmit_DMA+0x88>
    return HAL_BUSY;
 8006142:	2002      	movs	r0, #2
}
 8006144:	bce0      	pop	{r5, r6, r7}
 8006146:	46ba      	mov	sl, r7
 8006148:	46b1      	mov	r9, r6
 800614a:	46a8      	mov	r8, r5
 800614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      xfermode = I2C_RELOAD_MODE;
 800614e:	2080      	movs	r0, #128	; 0x80
 8006150:	23ff      	movs	r3, #255	; 0xff
 8006152:	0440      	lsls	r0, r0, #17
 8006154:	4681      	mov	r9, r0
 8006156:	8523      	strh	r3, [r4, #40]	; 0x28
      if (hi2c->hdmatx != NULL)
 8006158:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800615a:	2800      	cmp	r0, #0
 800615c:	d047      	beq.n	80061ee <HAL_I2C_Master_Transmit_DMA+0x132>
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800615e:	4e2f      	ldr	r6, [pc, #188]	; (800621c <HAL_I2C_Master_Transmit_DMA+0x160>)
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8006160:	3228      	adds	r2, #40	; 0x28
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006162:	62c6      	str	r6, [r0, #44]	; 0x2c
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006164:	4e2e      	ldr	r6, [pc, #184]	; (8006220 <HAL_I2C_Master_Transmit_DMA+0x164>)
 8006166:	6346      	str	r6, [r0, #52]	; 0x34
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006168:	2600      	movs	r6, #0
 800616a:	6306      	str	r6, [r0, #48]	; 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800616c:	6386      	str	r6, [r0, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800616e:	f7ff f9c7 	bl	8005500 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8006172:	2800      	cmp	r0, #0
 8006174:	d127      	bne.n	80061c6 <HAL_I2C_Master_Transmit_DMA+0x10a>
  MODIFY_REG(hi2c->Instance->CR2,
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	05ad      	lsls	r5, r5, #22
 800617a:	6859      	ldr	r1, [r3, #4]
 800617c:	0dad      	lsrs	r5, r5, #22
 800617e:	468c      	mov	ip, r1
 8006180:	4649      	mov	r1, r9
 8006182:	4666      	mov	r6, ip
 8006184:	430d      	orrs	r5, r1
 8006186:	4923      	ldr	r1, [pc, #140]	; (8006214 <HAL_I2C_Master_Transmit_DMA+0x158>)
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8006188:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800618a:	4031      	ands	r1, r6
 800618c:	430d      	orrs	r5, r1
 800618e:	b2d1      	uxtb	r1, r2
 8006190:	0409      	lsls	r1, r1, #16
 8006192:	430d      	orrs	r5, r1
 8006194:	4923      	ldr	r1, [pc, #140]	; (8006224 <HAL_I2C_Master_Transmit_DMA+0x168>)
 8006196:	430d      	orrs	r5, r1
 8006198:	605d      	str	r5, [r3, #4]
        hi2c->XferCount -= hi2c->XferSize;
 800619a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800619c:	1a8a      	subs	r2, r1, r2
 800619e:	b292      	uxth	r2, r2
 80061a0:	8562      	strh	r2, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 80061a2:	2240      	movs	r2, #64	; 0x40
 80061a4:	54a0      	strb	r0, [r4, r2]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80061a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80061a8:	42ba      	cmp	r2, r7
 80061aa:	d01d      	beq.n	80061e8 <HAL_I2C_Master_Transmit_DMA+0x12c>
 80061ac:	491e      	ldr	r1, [pc, #120]	; (8006228 <HAL_I2C_Master_Transmit_DMA+0x16c>)
 80061ae:	428a      	cmp	r2, r1
 80061b0:	d01a      	beq.n	80061e8 <HAL_I2C_Master_Transmit_DMA+0x12c>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80061b2:	4656      	mov	r6, sl
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4316      	orrs	r6, r2
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80061b8:	2280      	movs	r2, #128	; 0x80
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80061ba:	601e      	str	r6, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80061bc:	6819      	ldr	r1, [r3, #0]
 80061be:	01d2      	lsls	r2, r2, #7
 80061c0:	430a      	orrs	r2, r1
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e7be      	b.n	8006144 <HAL_I2C_Master_Transmit_DMA+0x88>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061c6:	2341      	movs	r3, #65	; 0x41
 80061c8:	2220      	movs	r2, #32
 80061ca:	54e2      	strb	r2, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80061cc:	2210      	movs	r2, #16
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061ce:	3301      	adds	r3, #1
 80061d0:	54e6      	strb	r6, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80061d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80061d4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80061d6:	4313      	orrs	r3, r2
 80061d8:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80061da:	2340      	movs	r3, #64	; 0x40
 80061dc:	54e6      	strb	r6, [r4, r3]
        return HAL_ERROR;
 80061de:	e7b1      	b.n	8006144 <HAL_I2C_Master_Transmit_DMA+0x88>
      xfermode = I2C_AUTOEND_MODE;
 80061e0:	2080      	movs	r0, #128	; 0x80
 80061e2:	0480      	lsls	r0, r0, #18
 80061e4:	4681      	mov	r9, r0
 80061e6:	e7b7      	b.n	8006158 <HAL_I2C_Master_Transmit_DMA+0x9c>
 80061e8:	2290      	movs	r2, #144	; 0x90
 80061ea:	4692      	mov	sl, r2
 80061ec:	e7e1      	b.n	80061b2 <HAL_I2C_Master_Transmit_DMA+0xf6>
        hi2c->State     = HAL_I2C_STATE_READY;
 80061ee:	2341      	movs	r3, #65	; 0x41
 80061f0:	2220      	movs	r2, #32
 80061f2:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80061f4:	3301      	adds	r3, #1
 80061f6:	54e0      	strb	r0, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80061f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80061fa:	3260      	adds	r2, #96	; 0x60
 80061fc:	4313      	orrs	r3, r2
 80061fe:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006200:	2340      	movs	r3, #64	; 0x40
 8006202:	54e0      	strb	r0, [r4, r3]
        return HAL_ERROR;
 8006204:	2001      	movs	r0, #1
 8006206:	e79d      	b.n	8006144 <HAL_I2C_Master_Transmit_DMA+0x88>
 8006208:	ffff0000 	.word	0xffff0000
 800620c:	08006df9 	.word	0x08006df9
 8006210:	08006b21 	.word	0x08006b21
 8006214:	fc009800 	.word	0xfc009800
 8006218:	82002000 	.word	0x82002000
 800621c:	08006f79 	.word	0x08006f79
 8006220:	08006f61 	.word	0x08006f61
 8006224:	80002000 	.word	0x80002000
 8006228:	08006cb1 	.word	0x08006cb1

0800622c <HAL_I2C_Master_Receive_DMA>:
{
 800622c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622e:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006230:	2041      	movs	r0, #65	; 0x41
{
 8006232:	46d6      	mov	lr, sl
 8006234:	464f      	mov	r7, r9
 8006236:	4646      	mov	r6, r8
 8006238:	000d      	movs	r5, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 800623a:	5c21      	ldrb	r1, [r4, r0]
{
 800623c:	b5c0      	push	{r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800623e:	2920      	cmp	r1, #32
 8006240:	d136      	bne.n	80062b0 <HAL_I2C_Master_Receive_DMA+0x84>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006242:	6821      	ldr	r1, [r4, #0]
 8006244:	2780      	movs	r7, #128	; 0x80
 8006246:	698e      	ldr	r6, [r1, #24]
 8006248:	023f      	lsls	r7, r7, #8
 800624a:	46b4      	mov	ip, r6
 800624c:	403e      	ands	r6, r7
 800624e:	46b2      	mov	sl, r6
 8006250:	4666      	mov	r6, ip
 8006252:	423e      	tst	r6, r7
 8006254:	d12c      	bne.n	80062b0 <HAL_I2C_Master_Receive_DMA+0x84>
    __HAL_LOCK(hi2c);
 8006256:	2640      	movs	r6, #64	; 0x40
 8006258:	5da7      	ldrb	r7, [r4, r6]
 800625a:	2f01      	cmp	r7, #1
 800625c:	d028      	beq.n	80062b0 <HAL_I2C_Master_Receive_DMA+0x84>
 800625e:	2701      	movs	r7, #1
 8006260:	55a7      	strb	r7, [r4, r6]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006262:	3721      	adds	r7, #33	; 0x21
 8006264:	5427      	strb	r7, [r4, r0]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006266:	3001      	adds	r0, #1
 8006268:	3f12      	subs	r7, #18
 800626a:	5427      	strb	r7, [r4, r0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800626c:	4650      	mov	r0, sl
 800626e:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount   = Size;
 8006270:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006272:	4b41      	ldr	r3, [pc, #260]	; (8006378 <HAL_I2C_Master_Receive_DMA+0x14c>)
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006274:	4f41      	ldr	r7, [pc, #260]	; (800637c <HAL_I2C_Master_Receive_DMA+0x150>)
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006276:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006278:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800627a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800627c:	6367      	str	r7, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800627e:	2bff      	cmp	r3, #255	; 0xff
 8006280:	d81c      	bhi.n	80062bc <HAL_I2C_Master_Receive_DMA+0x90>
      hi2c->XferSize = hi2c->XferCount;
 8006282:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006284:	b29b      	uxth	r3, r3
      xfermode = I2C_AUTOEND_MODE;
 8006286:	8523      	strh	r3, [r4, #40]	; 0x28
    if (hi2c->XferSize > 0U)
 8006288:	2b00      	cmp	r3, #0
 800628a:	d160      	bne.n	800634e <HAL_I2C_Master_Receive_DMA+0x122>
      hi2c->XferISR = I2C_Master_ISR_IT;
 800628c:	4a3c      	ldr	r2, [pc, #240]	; (8006380 <HAL_I2C_Master_Receive_DMA+0x154>)
  MODIFY_REG(hi2c->Instance->CR2,
 800628e:	483d      	ldr	r0, [pc, #244]	; (8006384 <HAL_I2C_Master_Receive_DMA+0x158>)
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006290:	6362      	str	r2, [r4, #52]	; 0x34
  MODIFY_REG(hi2c->Instance->CR2,
 8006292:	684a      	ldr	r2, [r1, #4]
 8006294:	05ad      	lsls	r5, r5, #22
 8006296:	4002      	ands	r2, r0
 8006298:	0dad      	lsrs	r5, r5, #22
 800629a:	4315      	orrs	r5, r2
 800629c:	4a3a      	ldr	r2, [pc, #232]	; (8006388 <HAL_I2C_Master_Receive_DMA+0x15c>)
    return HAL_OK;
 800629e:	2000      	movs	r0, #0
  MODIFY_REG(hi2c->Instance->CR2,
 80062a0:	4315      	orrs	r5, r2
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80062a2:	22f2      	movs	r2, #242	; 0xf2
  MODIFY_REG(hi2c->Instance->CR2,
 80062a4:	604d      	str	r5, [r1, #4]
      __HAL_UNLOCK(hi2c);
 80062a6:	55a3      	strb	r3, [r4, r6]
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80062a8:	680b      	ldr	r3, [r1, #0]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	600b      	str	r3, [r1, #0]
}
 80062ae:	e000      	b.n	80062b2 <HAL_I2C_Master_Receive_DMA+0x86>
    return HAL_BUSY;
 80062b0:	2002      	movs	r0, #2
}
 80062b2:	bce0      	pop	{r5, r6, r7}
 80062b4:	46ba      	mov	sl, r7
 80062b6:	46b1      	mov	r9, r6
 80062b8:	46a8      	mov	r8, r5
 80062ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      xfermode = I2C_RELOAD_MODE;
 80062bc:	2080      	movs	r0, #128	; 0x80
 80062be:	23ff      	movs	r3, #255	; 0xff
 80062c0:	0440      	lsls	r0, r0, #17
 80062c2:	4681      	mov	r9, r0
 80062c4:	8523      	strh	r3, [r4, #40]	; 0x28
      if (hi2c->hdmarx != NULL)
 80062c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d047      	beq.n	800635c <HAL_I2C_Master_Receive_DMA+0x130>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80062cc:	4e2f      	ldr	r6, [pc, #188]	; (800638c <HAL_I2C_Master_Receive_DMA+0x160>)
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80062ce:	3124      	adds	r1, #36	; 0x24
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80062d0:	62c6      	str	r6, [r0, #44]	; 0x2c
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80062d2:	4e2f      	ldr	r6, [pc, #188]	; (8006390 <HAL_I2C_Master_Receive_DMA+0x164>)
 80062d4:	6346      	str	r6, [r0, #52]	; 0x34
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80062d6:	2600      	movs	r6, #0
 80062d8:	6306      	str	r6, [r0, #48]	; 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80062da:	6386      	str	r6, [r0, #56]	; 0x38
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80062dc:	f7ff f910 	bl	8005500 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d127      	bne.n	8006334 <HAL_I2C_Master_Receive_DMA+0x108>
  MODIFY_REG(hi2c->Instance->CR2,
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	05ad      	lsls	r5, r5, #22
 80062e8:	6859      	ldr	r1, [r3, #4]
 80062ea:	0dad      	lsrs	r5, r5, #22
 80062ec:	468c      	mov	ip, r1
 80062ee:	4649      	mov	r1, r9
 80062f0:	4666      	mov	r6, ip
 80062f2:	430d      	orrs	r5, r1
 80062f4:	4923      	ldr	r1, [pc, #140]	; (8006384 <HAL_I2C_Master_Receive_DMA+0x158>)
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80062f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 80062f8:	4031      	ands	r1, r6
 80062fa:	430d      	orrs	r5, r1
 80062fc:	b2d1      	uxtb	r1, r2
 80062fe:	0409      	lsls	r1, r1, #16
 8006300:	430d      	orrs	r5, r1
 8006302:	4924      	ldr	r1, [pc, #144]	; (8006394 <HAL_I2C_Master_Receive_DMA+0x168>)
 8006304:	430d      	orrs	r5, r1
 8006306:	605d      	str	r5, [r3, #4]
        hi2c->XferCount -= hi2c->XferSize;
 8006308:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800630a:	1a8a      	subs	r2, r1, r2
 800630c:	b292      	uxth	r2, r2
 800630e:	8562      	strh	r2, [r4, #42]	; 0x2a
        __HAL_UNLOCK(hi2c);
 8006310:	2240      	movs	r2, #64	; 0x40
 8006312:	54a0      	strb	r0, [r4, r2]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006314:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006316:	42ba      	cmp	r2, r7
 8006318:	d01d      	beq.n	8006356 <HAL_I2C_Master_Receive_DMA+0x12a>
 800631a:	491f      	ldr	r1, [pc, #124]	; (8006398 <HAL_I2C_Master_Receive_DMA+0x16c>)
 800631c:	428a      	cmp	r2, r1
 800631e:	d01a      	beq.n	8006356 <HAL_I2C_Master_Receive_DMA+0x12a>
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006320:	4656      	mov	r6, sl
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	4316      	orrs	r6, r2
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006326:	2280      	movs	r2, #128	; 0x80
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006328:	601e      	str	r6, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800632a:	6819      	ldr	r1, [r3, #0]
 800632c:	0212      	lsls	r2, r2, #8
 800632e:	430a      	orrs	r2, r1
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e7be      	b.n	80062b2 <HAL_I2C_Master_Receive_DMA+0x86>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006334:	2341      	movs	r3, #65	; 0x41
 8006336:	2220      	movs	r2, #32
 8006338:	54e2      	strb	r2, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800633a:	2210      	movs	r2, #16
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800633c:	3301      	adds	r3, #1
 800633e:	54e6      	strb	r6, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006340:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8006342:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006344:	4313      	orrs	r3, r2
 8006346:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006348:	2340      	movs	r3, #64	; 0x40
 800634a:	54e6      	strb	r6, [r4, r3]
        return HAL_ERROR;
 800634c:	e7b1      	b.n	80062b2 <HAL_I2C_Master_Receive_DMA+0x86>
      xfermode = I2C_AUTOEND_MODE;
 800634e:	2080      	movs	r0, #128	; 0x80
 8006350:	0480      	lsls	r0, r0, #18
 8006352:	4681      	mov	r9, r0
 8006354:	e7b7      	b.n	80062c6 <HAL_I2C_Master_Receive_DMA+0x9a>
 8006356:	2290      	movs	r2, #144	; 0x90
 8006358:	4692      	mov	sl, r2
 800635a:	e7e1      	b.n	8006320 <HAL_I2C_Master_Receive_DMA+0xf4>
        hi2c->State     = HAL_I2C_STATE_READY;
 800635c:	2341      	movs	r3, #65	; 0x41
 800635e:	2220      	movs	r2, #32
 8006360:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006362:	3301      	adds	r3, #1
 8006364:	54e0      	strb	r0, [r4, r3]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006366:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006368:	3260      	adds	r2, #96	; 0x60
 800636a:	4313      	orrs	r3, r2
 800636c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800636e:	2340      	movs	r3, #64	; 0x40
 8006370:	54e0      	strb	r0, [r4, r3]
        return HAL_ERROR;
 8006372:	2001      	movs	r0, #1
 8006374:	e79d      	b.n	80062b2 <HAL_I2C_Master_Receive_DMA+0x86>
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	ffff0000 	.word	0xffff0000
 800637c:	08006df9 	.word	0x08006df9
 8006380:	08006b21 	.word	0x08006b21
 8006384:	fc009800 	.word	0xfc009800
 8006388:	82002400 	.word	0x82002400
 800638c:	08007019 	.word	0x08007019
 8006390:	08006f61 	.word	0x08006f61
 8006394:	80002400 	.word	0x80002400
 8006398:	08006cb1 	.word	0x08006cb1

0800639c <HAL_I2C_MasterTxCpltCallback>:
 800639c:	4770      	bx	lr
 800639e:	46c0      	nop			; (mov r8, r8)

080063a0 <HAL_I2C_MasterRxCpltCallback>:
 80063a0:	4770      	bx	lr
 80063a2:	46c0      	nop			; (mov r8, r8)

080063a4 <I2C_ITMasterSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a4:	2342      	movs	r3, #66	; 0x42
 80063a6:	2200      	movs	r2, #0
 80063a8:	54c2      	strb	r2, [r0, r3]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063aa:	3b01      	subs	r3, #1
 80063ac:	5cc1      	ldrb	r1, [r0, r3]
{
 80063ae:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063b0:	2921      	cmp	r1, #33	; 0x21
 80063b2:	d117      	bne.n	80063e4 <I2C_ITMasterSeqCplt+0x40>
    hi2c->State         = HAL_I2C_STATE_READY;
 80063b4:	3901      	subs	r1, #1
 80063b6:	54c1      	strb	r1, [r0, r3]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80063b8:	390f      	subs	r1, #15
 80063ba:	6301      	str	r1, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80063bc:	6342      	str	r2, [r0, #52]	; 0x34
  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80063be:	5cc1      	ldrb	r1, [r0, r3]
 80063c0:	3b19      	subs	r3, #25
 80063c2:	400b      	ands	r3, r1
 80063c4:	3b28      	subs	r3, #40	; 0x28
 80063c6:	4259      	negs	r1, r3
 80063c8:	414b      	adcs	r3, r1
 80063ca:	21b0      	movs	r1, #176	; 0xb0
 80063cc:	425b      	negs	r3, r3
 80063ce:	400b      	ands	r3, r1
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80063d0:	6801      	ldr	r1, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80063d2:	3bf3      	subs	r3, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80063d4:	680c      	ldr	r4, [r1, #0]
 80063d6:	4023      	ands	r3, r4
 80063d8:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 80063da:	2340      	movs	r3, #64	; 0x40
 80063dc:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80063de:	f7ff ffdd 	bl	800639c <HAL_I2C_MasterTxCpltCallback>
}
 80063e2:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_READY;
 80063e4:	2120      	movs	r1, #32
 80063e6:	54c1      	strb	r1, [r0, r3]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063e8:	390e      	subs	r1, #14
 80063ea:	6301      	str	r1, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80063ec:	6342      	str	r2, [r0, #52]	; 0x34
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80063ee:	5cc1      	ldrb	r1, [r0, r3]
 80063f0:	2328      	movs	r3, #40	; 0x28
 80063f2:	400b      	ands	r3, r1
 80063f4:	3b28      	subs	r3, #40	; 0x28
 80063f6:	4259      	negs	r1, r3
 80063f8:	414b      	adcs	r3, r1
 80063fa:	21b0      	movs	r1, #176	; 0xb0
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80063fc:	6804      	ldr	r4, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80063fe:	425b      	negs	r3, r3
 8006400:	400b      	ands	r3, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006402:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006404:	3bf5      	subs	r3, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006406:	400b      	ands	r3, r1
 8006408:	6023      	str	r3, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800640a:	2340      	movs	r3, #64	; 0x40
 800640c:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800640e:	f7ff ffc7 	bl	80063a0 <HAL_I2C_MasterRxCpltCallback>
}
 8006412:	e7e6      	b.n	80063e2 <I2C_ITMasterSeqCplt+0x3e>

08006414 <HAL_I2C_SlaveTxCpltCallback>:
 8006414:	4770      	bx	lr
 8006416:	46c0      	nop			; (mov r8, r8)

08006418 <HAL_I2C_SlaveRxCpltCallback>:
 8006418:	4770      	bx	lr
 800641a:	46c0      	nop			; (mov r8, r8)

0800641c <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800641c:	2142      	movs	r1, #66	; 0x42
{
 800641e:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006420:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006422:	6803      	ldr	r3, [r0, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006426:	5444      	strb	r4, [r0, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006428:	3941      	subs	r1, #65	; 0x41
 800642a:	0454      	lsls	r4, r2, #17
 800642c:	d50b      	bpl.n	8006446 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4920      	ldr	r1, [pc, #128]	; (80064b4 <I2C_ITSlaveSeqCplt+0x98>)
 8006432:	400a      	ands	r2, r1
 8006434:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006436:	2141      	movs	r1, #65	; 0x41
 8006438:	5c42      	ldrb	r2, [r0, r1]
 800643a:	2a29      	cmp	r2, #41	; 0x29
 800643c:	d00e      	beq.n	800645c <I2C_ITSlaveSeqCplt+0x40>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800643e:	5c42      	ldrb	r2, [r0, r1]
 8006440:	2a2a      	cmp	r2, #42	; 0x2a
 8006442:	d021      	beq.n	8006488 <I2C_ITSlaveSeqCplt+0x6c>
}
 8006444:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006446:	0bd2      	lsrs	r2, r2, #15
 8006448:	4211      	tst	r1, r2
 800644a:	d0f4      	beq.n	8006436 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	491a      	ldr	r1, [pc, #104]	; (80064b8 <I2C_ITSlaveSeqCplt+0x9c>)
 8006450:	400a      	ands	r2, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006452:	2141      	movs	r1, #65	; 0x41
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006454:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006456:	5c42      	ldrb	r2, [r0, r1]
 8006458:	2a29      	cmp	r2, #41	; 0x29
 800645a:	d1f0      	bne.n	800643e <I2C_ITSlaveSeqCplt+0x22>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800645c:	2421      	movs	r4, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800645e:	3a01      	subs	r2, #1
 8006460:	5442      	strb	r2, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006462:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006464:	5c41      	ldrb	r1, [r0, r1]
 8006466:	400a      	ands	r2, r1
 8006468:	3a28      	subs	r2, #40	; 0x28
 800646a:	4251      	negs	r1, r2
 800646c:	414a      	adcs	r2, r1
 800646e:	21b0      	movs	r1, #176	; 0xb0
 8006470:	4252      	negs	r2, r2
 8006472:	400a      	ands	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006474:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006476:	3af3      	subs	r2, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006478:	400a      	ands	r2, r1
 800647a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800647c:	2340      	movs	r3, #64	; 0x40
 800647e:	2200      	movs	r2, #0
 8006480:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006482:	f7ff ffc7 	bl	8006414 <HAL_I2C_SlaveTxCpltCallback>
 8006486:	e7dd      	b.n	8006444 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006488:	2422      	movs	r4, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800648a:	3a02      	subs	r2, #2
 800648c:	5442      	strb	r2, [r0, r1]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800648e:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006490:	5c41      	ldrb	r1, [r0, r1]
 8006492:	400a      	ands	r2, r1
 8006494:	3a28      	subs	r2, #40	; 0x28
 8006496:	4251      	negs	r1, r2
 8006498:	414a      	adcs	r2, r1
 800649a:	21b0      	movs	r1, #176	; 0xb0
 800649c:	4252      	negs	r2, r2
 800649e:	400a      	ands	r2, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80064a0:	6819      	ldr	r1, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80064a2:	3af5      	subs	r2, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80064a4:	400a      	ands	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80064a8:	2340      	movs	r3, #64	; 0x40
 80064aa:	2200      	movs	r2, #0
 80064ac:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064ae:	f7ff ffb3 	bl	8006418 <HAL_I2C_SlaveRxCpltCallback>
}
 80064b2:	e7c7      	b.n	8006444 <I2C_ITSlaveSeqCplt+0x28>
 80064b4:	ffffbfff 	.word	0xffffbfff
 80064b8:	ffff7fff 	.word	0xffff7fff

080064bc <HAL_I2C_AddrCallback>:
}
 80064bc:	4770      	bx	lr
 80064be:	46c0      	nop			; (mov r8, r8)

080064c0 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80064c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c2:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80064c4:	26fe      	movs	r6, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 80064c6:	6803      	ldr	r3, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064c8:	68c5      	ldr	r5, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80064ca:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80064cc:	699a      	ldr	r2, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 80064ce:	03c9      	lsls	r1, r1, #15
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80064d0:	0c12      	lsrs	r2, r2, #16
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80064d2:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 80064d4:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80064d6:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 80064d8:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80064da:	4032      	ands	r2, r6
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064dc:	2d02      	cmp	r5, #2
 80064de:	d113      	bne.n	8006508 <I2C_ITAddrCplt.part.0+0x48>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80064e0:	05a4      	lsls	r4, r4, #22
 80064e2:	0da5      	lsrs	r5, r4, #22
 80064e4:	46ac      	mov	ip, r5
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80064e6:	2506      	movs	r5, #6
 80064e8:	0f64      	lsrs	r4, r4, #29
 80064ea:	4054      	eors	r4, r2
 80064ec:	002a      	movs	r2, r5
 80064ee:	4022      	ands	r2, r4
 80064f0:	4690      	mov	r8, r2
 80064f2:	4225      	tst	r5, r4
 80064f4:	d112      	bne.n	800651c <I2C_ITAddrCplt.part.0+0x5c>
        hi2c->AddrEventCount++;
 80064f6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80064f8:	3401      	adds	r4, #1
 80064fa:	6484      	str	r4, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80064fc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80064fe:	2a02      	cmp	r2, #2
 8006500:	d018      	beq.n	8006534 <I2C_ITAddrCplt.part.0+0x74>
}
 8006502:	bc80      	pop	{r7}
 8006504:	46b8      	mov	r8, r7
 8006506:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006508:	25b8      	movs	r5, #184	; 0xb8
 800650a:	681c      	ldr	r4, [r3, #0]
 800650c:	43ac      	bics	r4, r5
 800650e:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8006510:	2340      	movs	r3, #64	; 0x40
 8006512:	2400      	movs	r4, #0
 8006514:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006516:	f7ff ffd1 	bl	80064bc <HAL_I2C_AddrCallback>
}
 800651a:	e7f2      	b.n	8006502 <I2C_ITAddrCplt.part.0+0x42>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800651c:	24b8      	movs	r4, #184	; 0xb8
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	43a2      	bics	r2, r4
 8006522:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8006524:	2340      	movs	r3, #64	; 0x40
 8006526:	2200      	movs	r2, #0
 8006528:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800652a:	0032      	movs	r2, r6
 800652c:	403a      	ands	r2, r7
 800652e:	f7ff ffc5 	bl	80064bc <HAL_I2C_AddrCallback>
 8006532:	e7e6      	b.n	8006502 <I2C_ITAddrCplt.part.0+0x42>
          hi2c->AddrEventCount = 0U;
 8006534:	4642      	mov	r2, r8
 8006536:	6482      	str	r2, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006538:	2208      	movs	r2, #8
 800653a:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 800653c:	4642      	mov	r2, r8
 800653e:	2340      	movs	r3, #64	; 0x40
 8006540:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006542:	4662      	mov	r2, ip
 8006544:	f7ff ffba 	bl	80064bc <HAL_I2C_AddrCallback>
 8006548:	e7db      	b.n	8006502 <I2C_ITAddrCplt.part.0+0x42>
 800654a:	46c0      	nop			; (mov r8, r8)

0800654c <HAL_I2C_ListenCpltCallback>:
 800654c:	4770      	bx	lr
 800654e:	46c0      	nop			; (mov r8, r8)

08006550 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006550:	4b18      	ldr	r3, [pc, #96]	; (80065b4 <I2C_ITListenCplt+0x64>)
  hi2c->State = HAL_I2C_STATE_READY;
 8006552:	2241      	movs	r2, #65	; 0x41
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006554:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8006556:	b510      	push	{r4, lr}
  hi2c->PreviousState = I2C_STATE_NONE;
 8006558:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800655a:	2420      	movs	r4, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 800655c:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800655e:	5484      	strb	r4, [r0, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006560:	3201      	adds	r2, #1
 8006562:	5483      	strb	r3, [r0, r2]
  hi2c->XferISR = NULL;
 8006564:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006566:	074b      	lsls	r3, r1, #29
 8006568:	d513      	bpl.n	8006592 <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800656a:	6803      	ldr	r3, [r0, #0]
 800656c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8006572:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006574:	3301      	adds	r3, #1
 8006576:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006578:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d009      	beq.n	8006592 <I2C_ITListenCplt+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800657e:	2204      	movs	r2, #4
      hi2c->XferSize--;
 8006580:	3b01      	subs	r3, #1
 8006582:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8006584:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8006586:	3b01      	subs	r3, #1
 8006588:	b29b      	uxth	r3, r3
 800658a:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800658c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800658e:	4313      	orrs	r3, r2
 8006590:	6443      	str	r3, [r0, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006592:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006594:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006596:	5cc2      	ldrb	r2, [r0, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006598:	5cc3      	ldrb	r3, [r0, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800659a:	6803      	ldr	r3, [r0, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	438a      	bics	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a2:	2210      	movs	r2, #16
 80065a4:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80065a6:	2340      	movs	r3, #64	; 0x40
 80065a8:	2200      	movs	r2, #0
 80065aa:	54c2      	strb	r2, [r0, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 80065ac:	f7ff ffce 	bl	800654c <HAL_I2C_ListenCpltCallback>
}
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	ffff0000 	.word	0xffff0000

080065b8 <HAL_I2C_MemTxCpltCallback>:
 80065b8:	4770      	bx	lr
 80065ba:	46c0      	nop			; (mov r8, r8)

080065bc <HAL_I2C_MemRxCpltCallback>:
 80065bc:	4770      	bx	lr
 80065be:	46c0      	nop			; (mov r8, r8)

080065c0 <HAL_I2C_ErrorCallback>:
 80065c0:	4770      	bx	lr
 80065c2:	46c0      	nop			; (mov r8, r8)

080065c4 <HAL_I2C_AbortCpltCallback>:
 80065c4:	4770      	bx	lr
 80065c6:	46c0      	nop			; (mov r8, r8)

080065c8 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80065c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 80065ca:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 80065cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065d2:	2200      	movs	r2, #0
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 80065d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065dc:	2200      	movs	r2, #0
 80065de:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065e0:	2341      	movs	r3, #65	; 0x41
 80065e2:	5cc2      	ldrb	r2, [r0, r3]
 80065e4:	2a60      	cmp	r2, #96	; 0x60
 80065e6:	d006      	beq.n	80065f6 <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 80065e8:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80065ea:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80065ec:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80065ee:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80065f0:	f7ff ffe6 	bl	80065c0 <HAL_I2C_ErrorCallback>
}
 80065f4:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80065f6:	3a40      	subs	r2, #64	; 0x40
 80065f8:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 80065fa:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80065fc:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80065fe:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006600:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8006602:	f7ff ffdf 	bl	80065c4 <HAL_I2C_AbortCpltCallback>
}
 8006606:	e7f5      	b.n	80065f4 <I2C_DMAAbort+0x2c>

08006608 <I2C_ITError>:
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006608:	2242      	movs	r2, #66	; 0x42
{
 800660a:	b570      	push	{r4, r5, r6, lr}
 800660c:	0004      	movs	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800660e:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006610:	2041      	movs	r0, #65	; 0x41
 8006612:	5c23      	ldrb	r3, [r4, r0]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006614:	54a5      	strb	r5, [r4, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006616:	4a45      	ldr	r2, [pc, #276]	; (800672c <I2C_ITError+0x124>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006618:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800661a:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800661c:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800661e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006620:	430a      	orrs	r2, r1
 8006622:	6462      	str	r2, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006624:	2b02      	cmp	r3, #2
 8006626:	d835      	bhi.n	8006694 <I2C_ITError+0x8c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006628:	2228      	movs	r2, #40	; 0x28
 800662a:	5c23      	ldrb	r3, [r4, r0]
 800662c:	4013      	ands	r3, r2
 800662e:	3b28      	subs	r3, #40	; 0x28
 8006630:	4259      	negs	r1, r3
 8006632:	414b      	adcs	r3, r1
 8006634:	21af      	movs	r1, #175	; 0xaf
 8006636:	425b      	negs	r3, r3
 8006638:	438b      	bics	r3, r1
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800663a:	5c21      	ldrb	r1, [r4, r0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800663c:	33f6      	adds	r3, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800663e:	43db      	mvns	r3, r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006640:	400a      	ands	r2, r1
 8006642:	2a28      	cmp	r2, #40	; 0x28
 8006644:	d001      	beq.n	800664a <I2C_ITError+0x42>
 8006646:	23f7      	movs	r3, #247	; 0xf7
 8006648:	425b      	negs	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800664a:	6822      	ldr	r2, [r4, #0]
 800664c:	6811      	ldr	r1, [r2, #0]
 800664e:	400b      	ands	r3, r1
 8006650:	6013      	str	r3, [r2, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006652:	2128      	movs	r1, #40	; 0x28
 8006654:	2341      	movs	r3, #65	; 0x41
 8006656:	54e1      	strb	r1, [r4, r3]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006658:	4b35      	ldr	r3, [pc, #212]	; (8006730 <I2C_ITError+0x128>)
 800665a:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800665c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800665e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006660:	2800      	cmp	r0, #0
 8006662:	d004      	beq.n	800666e <I2C_ITError+0x66>
 8006664:	0019      	movs	r1, r3
 8006666:	2510      	movs	r5, #16
 8006668:	3911      	subs	r1, #17
 800666a:	43a9      	bics	r1, r5
 800666c:	d021      	beq.n	80066b2 <I2C_ITError+0xaa>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800666e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006670:	2800      	cmp	r0, #0
 8006672:	d003      	beq.n	800667c <I2C_ITError+0x74>
 8006674:	2110      	movs	r1, #16
 8006676:	3b12      	subs	r3, #18
 8006678:	438b      	bics	r3, r1
 800667a:	d02f      	beq.n	80066dc <I2C_ITError+0xd4>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800667c:	2341      	movs	r3, #65	; 0x41
 800667e:	5ce2      	ldrb	r2, [r4, r3]
 8006680:	2a60      	cmp	r2, #96	; 0x60
 8006682:	d049      	beq.n	8006718 <I2C_ITError+0x110>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006684:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8006686:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006688:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 800668a:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800668c:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800668e:	f7ff ff97 	bl	80065c0 <HAL_I2C_ErrorCallback>
}
 8006692:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006694:	21fe      	movs	r1, #254	; 0xfe
 8006696:	6822      	ldr	r2, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006698:	5c23      	ldrb	r3, [r4, r0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800669a:	5c23      	ldrb	r3, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800669c:	6813      	ldr	r3, [r2, #0]
 800669e:	438b      	bics	r3, r1
 80066a0:	6013      	str	r3, [r2, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80066a2:	5c23      	ldrb	r3, [r4, r0]
 80066a4:	2b60      	cmp	r3, #96	; 0x60
 80066a6:	d001      	beq.n	80066ac <I2C_ITError+0xa4>
      hi2c->State         = HAL_I2C_STATE_READY;
 80066a8:	2320      	movs	r3, #32
 80066aa:	5423      	strb	r3, [r4, r0]
    hi2c->XferISR       = NULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	6363      	str	r3, [r4, #52]	; 0x34
 80066b0:	e7d4      	b.n	800665c <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	045b      	lsls	r3, r3, #17
 80066b6:	d42a      	bmi.n	800670e <I2C_ITError+0x106>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066b8:	f7ff f844 	bl	8005744 <HAL_DMA_GetState>
 80066bc:	2801      	cmp	r0, #1
 80066be:	d0dd      	beq.n	800667c <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80066c2:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <I2C_ITError+0x12c>)
      __HAL_UNLOCK(hi2c);
 80066c4:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066c6:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80066c8:	2340      	movs	r3, #64	; 0x40
 80066ca:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066cc:	f7fe ffa0 	bl	8005610 <HAL_DMA_Abort_IT>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d0de      	beq.n	8006692 <I2C_ITError+0x8a>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066d4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80066d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066d8:	4798      	blx	r3
 80066da:	e7da      	b.n	8006692 <I2C_ITError+0x8a>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80066dc:	6813      	ldr	r3, [r2, #0]
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	d503      	bpl.n	80066ea <I2C_ITError+0xe2>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	4914      	ldr	r1, [pc, #80]	; (8006738 <I2C_ITError+0x130>)
 80066e6:	400b      	ands	r3, r1
 80066e8:	6013      	str	r3, [r2, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066ea:	f7ff f82b 	bl	8005744 <HAL_DMA_GetState>
 80066ee:	2801      	cmp	r0, #1
 80066f0:	d0c4      	beq.n	800667c <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80066f2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80066f4:	4b0f      	ldr	r3, [pc, #60]	; (8006734 <I2C_ITError+0x12c>)
      __HAL_UNLOCK(hi2c);
 80066f6:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80066f8:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 80066fa:	2340      	movs	r3, #64	; 0x40
 80066fc:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80066fe:	f7fe ff87 	bl	8005610 <HAL_DMA_Abort_IT>
 8006702:	2800      	cmp	r0, #0
 8006704:	d0c5      	beq.n	8006692 <I2C_ITError+0x8a>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006706:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006708:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800670a:	4798      	blx	r3
 800670c:	e7c1      	b.n	8006692 <I2C_ITError+0x8a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800670e:	6813      	ldr	r3, [r2, #0]
 8006710:	490a      	ldr	r1, [pc, #40]	; (800673c <I2C_ITError+0x134>)
 8006712:	400b      	ands	r3, r1
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	e7cf      	b.n	80066b8 <I2C_ITError+0xb0>
    hi2c->State = HAL_I2C_STATE_READY;
 8006718:	3a40      	subs	r2, #64	; 0x40
 800671a:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800671c:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 800671e:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8006720:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006722:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8006724:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8006726:	f7ff ff4d 	bl	80065c4 <HAL_I2C_AbortCpltCallback>
}
 800672a:	e7b2      	b.n	8006692 <I2C_ITError+0x8a>
 800672c:	ffff0000 	.word	0xffff0000
 8006730:	08006899 	.word	0x08006899
 8006734:	080065c9 	.word	0x080065c9
 8006738:	ffff7fff 	.word	0xffff7fff
 800673c:	ffffbfff 	.word	0xffffbfff

08006740 <I2C_ITSlaveCplt>:
{
 8006740:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006742:	6803      	ldr	r3, [r0, #0]
{
 8006744:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006746:	2041      	movs	r0, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006748:	2620      	movs	r6, #32
{
 800674a:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800674c:	6819      	ldr	r1, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800674e:	5c22      	ldrb	r2, [r4, r0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006750:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006752:	3e18      	subs	r6, #24
 8006754:	43b2      	bics	r2, r6
 8006756:	2a21      	cmp	r2, #33	; 0x21
 8006758:	d051      	beq.n	80067fe <I2C_ITSlaveCplt+0xbe>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800675a:	2a22      	cmp	r2, #34	; 0x22
 800675c:	d100      	bne.n	8006760 <I2C_ITSlaveCplt+0x20>
 800675e:	e075      	b.n	800684c <I2C_ITSlaveCplt+0x10c>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006760:	2280      	movs	r2, #128	; 0x80
 8006762:	6858      	ldr	r0, [r3, #4]
 8006764:	0212      	lsls	r2, r2, #8
 8006766:	4302      	orrs	r2, r0
 8006768:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	4846      	ldr	r0, [pc, #280]	; (8006888 <I2C_ITSlaveCplt+0x148>)
 800676e:	4002      	ands	r2, r0
 8006770:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	0792      	lsls	r2, r2, #30
 8006776:	d501      	bpl.n	800677c <I2C_ITSlaveCplt+0x3c>
    hi2c->Instance->TXDR = 0x00U;
 8006778:	2200      	movs	r2, #0
 800677a:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800677c:	2201      	movs	r2, #1
 800677e:	6998      	ldr	r0, [r3, #24]
 8006780:	4202      	tst	r2, r0
 8006782:	d102      	bne.n	800678a <I2C_ITSlaveCplt+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006784:	6998      	ldr	r0, [r3, #24]
 8006786:	4302      	orrs	r2, r0
 8006788:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800678a:	2201      	movs	r2, #1
 800678c:	0448      	lsls	r0, r1, #17
 800678e:	d53d      	bpl.n	800680c <I2C_ITSlaveCplt+0xcc>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	493e      	ldr	r1, [pc, #248]	; (800688c <I2C_ITSlaveCplt+0x14c>)
 8006794:	400a      	ands	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8006798:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800679a:	2a00      	cmp	r2, #0
 800679c:	d003      	beq.n	80067a6 <I2C_ITSlaveCplt+0x66>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800679e:	6812      	ldr	r2, [r2, #0]
 80067a0:	6852      	ldr	r2, [r2, #4]
 80067a2:	b292      	uxth	r2, r2
 80067a4:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80067a6:	076a      	lsls	r2, r5, #29
 80067a8:	d50a      	bpl.n	80067c0 <I2C_ITSlaveCplt+0x80>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80067aa:	2204      	movs	r2, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80067ae:	4395      	bics	r5, r2
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067b2:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 80067b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067b6:	3301      	adds	r3, #1
 80067b8:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80067ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d13e      	bne.n	800683e <I2C_ITSlaveCplt+0xfe>
  if (hi2c->XferCount != 0U)
 80067c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <I2C_ITSlaveCplt+0x8e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067c6:	2204      	movs	r2, #4
 80067c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80067ca:	4313      	orrs	r3, r2
 80067cc:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	2242      	movs	r2, #66	; 0x42
 80067d2:	54a3      	strb	r3, [r4, r2]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067d4:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 80067d6:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067d8:	2e00      	cmp	r6, #0
 80067da:	d13e      	bne.n	800685a <I2C_ITSlaveCplt+0x11a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80067dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067de:	4d2c      	ldr	r5, [pc, #176]	; (8006890 <I2C_ITSlaveCplt+0x150>)
 80067e0:	42ab      	cmp	r3, r5
 80067e2:	d11e      	bne.n	8006822 <I2C_ITSlaveCplt+0xe2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067e4:	2341      	movs	r3, #65	; 0x41
 80067e6:	5ce2      	ldrb	r2, [r4, r3]
 80067e8:	2a22      	cmp	r2, #34	; 0x22
 80067ea:	d043      	beq.n	8006874 <I2C_ITSlaveCplt+0x134>
    hi2c->State = HAL_I2C_STATE_READY;
 80067ec:	2220      	movs	r2, #32
 80067ee:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80067f0:	2340      	movs	r3, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80067f2:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067f4:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80067f6:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067f8:	f7ff fe0c 	bl	8006414 <HAL_I2C_SlaveTxCpltCallback>
}
 80067fc:	bd70      	pop	{r4, r5, r6, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80067fe:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	36f2      	adds	r6, #242	; 0xf2
 8006804:	43b0      	bics	r0, r6
 8006806:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006808:	6322      	str	r2, [r4, #48]	; 0x30
 800680a:	e7a9      	b.n	8006760 <I2C_ITSlaveCplt+0x20>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800680c:	0bc9      	lsrs	r1, r1, #15
 800680e:	420a      	tst	r2, r1
 8006810:	d0c9      	beq.n	80067a6 <I2C_ITSlaveCplt+0x66>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	491f      	ldr	r1, [pc, #124]	; (8006894 <I2C_ITSlaveCplt+0x154>)
 8006816:	400a      	ands	r2, r1
 8006818:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800681a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800681c:	2a00      	cmp	r2, #0
 800681e:	d1be      	bne.n	800679e <I2C_ITSlaveCplt+0x5e>
 8006820:	e7c1      	b.n	80067a6 <I2C_ITSlaveCplt+0x66>
    I2C_ITSlaveSeqCplt(hi2c);
 8006822:	0020      	movs	r0, r4
 8006824:	f7ff fdfa 	bl	800641c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8006828:	2341      	movs	r3, #65	; 0x41
 800682a:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800682c:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800682e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8006830:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 8006832:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8006834:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8006836:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006838:	f7ff fe88 	bl	800654c <HAL_I2C_ListenCpltCallback>
 800683c:	e7de      	b.n	80067fc <I2C_ITSlaveCplt+0xbc>
      hi2c->XferSize--;
 800683e:	3b01      	subs	r3, #1
 8006840:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006842:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006844:	3b01      	subs	r3, #1
 8006846:	b29b      	uxth	r3, r3
 8006848:	8563      	strh	r3, [r4, #42]	; 0x2a
 800684a:	e7b9      	b.n	80067c0 <I2C_ITSlaveCplt+0x80>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800684c:	26fc      	movs	r6, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800684e:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	43b0      	bics	r0, r6
 8006854:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006856:	6322      	str	r2, [r4, #48]	; 0x30
 8006858:	e782      	b.n	8006760 <I2C_ITSlaveCplt+0x20>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800685a:	0020      	movs	r0, r4
 800685c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800685e:	f7ff fed3 	bl	8006608 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006862:	2341      	movs	r3, #65	; 0x41
 8006864:	5ce3      	ldrb	r3, [r4, r3]
 8006866:	2b28      	cmp	r3, #40	; 0x28
 8006868:	d1c8      	bne.n	80067fc <I2C_ITSlaveCplt+0xbc>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800686a:	0029      	movs	r1, r5
 800686c:	0020      	movs	r0, r4
 800686e:	f7ff fe6f 	bl	8006550 <I2C_ITListenCplt>
 8006872:	e7c3      	b.n	80067fc <I2C_ITSlaveCplt+0xbc>
    hi2c->State = HAL_I2C_STATE_READY;
 8006874:	3a02      	subs	r2, #2
 8006876:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8006878:	3b01      	subs	r3, #1
    hi2c->PreviousState = I2C_STATE_NONE;
 800687a:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800687c:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800687e:	54e6      	strb	r6, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006880:	f7ff fdca 	bl	8006418 <HAL_I2C_SlaveRxCpltCallback>
 8006884:	e7ba      	b.n	80067fc <I2C_ITSlaveCplt+0xbc>
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	fe00e800 	.word	0xfe00e800
 800688c:	ffffbfff 	.word	0xffffbfff
 8006890:	ffff0000 	.word	0xffff0000
 8006894:	ffff7fff 	.word	0xffff7fff

08006898 <I2C_Slave_ISR_IT>:
{
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 800689c:	2240      	movs	r2, #64	; 0x40
 800689e:	5c83      	ldrb	r3, [r0, r2]
{
 80068a0:	0004      	movs	r4, r0
 80068a2:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 80068a4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d100      	bne.n	80068ac <I2C_Slave_ISR_IT+0x14>
 80068aa:	e075      	b.n	8006998 <I2C_Slave_ISR_IT+0x100>
 80068ac:	2301      	movs	r3, #1
 80068ae:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068b0:	094a      	lsrs	r2, r1, #5
 80068b2:	4213      	tst	r3, r2
 80068b4:	d002      	beq.n	80068bc <I2C_Slave_ISR_IT+0x24>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80068b6:	0972      	lsrs	r2, r6, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80068b8:	4213      	tst	r3, r2
 80068ba:	d14e      	bne.n	800695a <I2C_Slave_ISR_IT+0xc2>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068bc:	2301      	movs	r3, #1
 80068be:	06ea      	lsls	r2, r5, #27
 80068c0:	d517      	bpl.n	80068f2 <I2C_Slave_ISR_IT+0x5a>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068c2:	0932      	lsrs	r2, r6, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80068c4:	4213      	tst	r3, r2
 80068c6:	d014      	beq.n	80068f2 <I2C_Slave_ISR_IT+0x5a>
    if (hi2c->XferCount == 0U)
 80068c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d14b      	bne.n	8006966 <I2C_Slave_ISR_IT+0xce>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80068ce:	3341      	adds	r3, #65	; 0x41
 80068d0:	5ce3      	ldrb	r3, [r4, r3]
 80068d2:	2b28      	cmp	r3, #40	; 0x28
 80068d4:	d100      	bne.n	80068d8 <I2C_Slave_ISR_IT+0x40>
 80068d6:	e06f      	b.n	80069b8 <I2C_Slave_ISR_IT+0x120>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80068d8:	2341      	movs	r3, #65	; 0x41
 80068da:	5ce3      	ldrb	r3, [r4, r3]
 80068dc:	2b29      	cmp	r3, #41	; 0x29
 80068de:	d100      	bne.n	80068e2 <I2C_Slave_ISR_IT+0x4a>
 80068e0:	e074      	b.n	80069cc <I2C_Slave_ISR_IT+0x134>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e2:	2210      	movs	r2, #16
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80068e8:	2340      	movs	r3, #64	; 0x40
 80068ea:	2200      	movs	r2, #0
  return HAL_OK;
 80068ec:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 80068ee:	54e2      	strb	r2, [r4, r3]
}
 80068f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80068f2:	2301      	movs	r3, #1
 80068f4:	076a      	lsls	r2, r5, #29
 80068f6:	d415      	bmi.n	8006924 <I2C_Slave_ISR_IT+0x8c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068f8:	2301      	movs	r3, #1
 80068fa:	072a      	lsls	r2, r5, #28
 80068fc:	d502      	bpl.n	8006904 <I2C_Slave_ISR_IT+0x6c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80068fe:	08f2      	lsrs	r2, r6, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006900:	4213      	tst	r3, r2
 8006902:	d13f      	bne.n	8006984 <I2C_Slave_ISR_IT+0xec>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006904:	2301      	movs	r3, #1
 8006906:	07aa      	lsls	r2, r5, #30
 8006908:	d5ee      	bpl.n	80068e8 <I2C_Slave_ISR_IT+0x50>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800690a:	0876      	lsrs	r6, r6, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800690c:	4233      	tst	r3, r6
 800690e:	d0eb      	beq.n	80068e8 <I2C_Slave_ISR_IT+0x50>
    if (hi2c->XferCount > 0U)
 8006910:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006912:	2b00      	cmp	r3, #0
 8006914:	d142      	bne.n	800699c <I2C_Slave_ISR_IT+0x104>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006916:	4b39      	ldr	r3, [pc, #228]	; (80069fc <I2C_Slave_ISR_IT+0x164>)
 8006918:	421f      	tst	r7, r3
 800691a:	d1e5      	bne.n	80068e8 <I2C_Slave_ISR_IT+0x50>
        I2C_ITSlaveSeqCplt(hi2c);
 800691c:	0020      	movs	r0, r4
 800691e:	f7ff fd7d 	bl	800641c <I2C_ITSlaveSeqCplt>
 8006922:	e7e1      	b.n	80068e8 <I2C_Slave_ISR_IT+0x50>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006924:	08b2      	lsrs	r2, r6, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006926:	4213      	tst	r3, r2
 8006928:	d0e6      	beq.n	80068f8 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
 800692a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00d      	beq.n	800694c <I2C_Slave_ISR_IT+0xb4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8006938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800693a:	3301      	adds	r3, #1
 800693c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800693e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006940:	3b01      	subs	r3, #1
 8006942:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006944:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006946:	3b01      	subs	r3, #1
 8006948:	b29b      	uxth	r3, r3
 800694a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800694c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1ca      	bne.n	80068e8 <I2C_Slave_ISR_IT+0x50>
 8006952:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <I2C_Slave_ISR_IT+0x168>)
 8006954:	429f      	cmp	r7, r3
 8006956:	d0c7      	beq.n	80068e8 <I2C_Slave_ISR_IT+0x50>
 8006958:	e7e0      	b.n	800691c <I2C_Slave_ISR_IT+0x84>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800695a:	f7ff fef1 	bl	8006740 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800695e:	2301      	movs	r3, #1
 8006960:	06ea      	lsls	r2, r5, #27
 8006962:	d5c6      	bpl.n	80068f2 <I2C_Slave_ISR_IT+0x5a>
 8006964:	e7ad      	b.n	80068c2 <I2C_Slave_ISR_IT+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006966:	2210      	movs	r2, #16
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800696c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800696e:	3a0c      	subs	r2, #12
 8006970:	4313      	orrs	r3, r2
 8006972:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006974:	4b21      	ldr	r3, [pc, #132]	; (80069fc <I2C_Slave_ISR_IT+0x164>)
 8006976:	421f      	tst	r7, r3
 8006978:	d1b6      	bne.n	80068e8 <I2C_Slave_ISR_IT+0x50>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800697a:	0020      	movs	r0, r4
 800697c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800697e:	f7ff fe43 	bl	8006608 <I2C_ITError>
 8006982:	e7b1      	b.n	80068e8 <I2C_Slave_ISR_IT+0x50>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006984:	3340      	adds	r3, #64	; 0x40
 8006986:	5ce2      	ldrb	r2, [r4, r3]
 8006988:	3b19      	subs	r3, #25
 800698a:	4013      	ands	r3, r2
 800698c:	2b28      	cmp	r3, #40	; 0x28
 800698e:	d031      	beq.n	80069f4 <I2C_Slave_ISR_IT+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006990:	2208      	movs	r2, #8
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006996:	e7a7      	b.n	80068e8 <I2C_Slave_ISR_IT+0x50>
  __HAL_LOCK(hi2c);
 8006998:	2002      	movs	r0, #2
 800699a:	e7a9      	b.n	80068f0 <I2C_Slave_ISR_IT+0x58>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800699c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800699e:	6822      	ldr	r2, [r4, #0]
 80069a0:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80069a2:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069a4:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80069a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80069a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80069b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80069b2:	3b01      	subs	r3, #1
 80069b4:	8523      	strh	r3, [r4, #40]	; 0x28
 80069b6:	e797      	b.n	80068e8 <I2C_Slave_ISR_IT+0x50>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80069b8:	2380      	movs	r3, #128	; 0x80
 80069ba:	049b      	lsls	r3, r3, #18
 80069bc:	429f      	cmp	r7, r3
 80069be:	d000      	beq.n	80069c2 <I2C_Slave_ISR_IT+0x12a>
 80069c0:	e78a      	b.n	80068d8 <I2C_Slave_ISR_IT+0x40>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80069c2:	0029      	movs	r1, r5
 80069c4:	0020      	movs	r0, r4
 80069c6:	f7ff fdc3 	bl	8006550 <I2C_ITListenCplt>
 80069ca:	e78d      	b.n	80068e8 <I2C_Slave_ISR_IT+0x50>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <I2C_Slave_ISR_IT+0x168>)
 80069ce:	429f      	cmp	r7, r3
 80069d0:	d100      	bne.n	80069d4 <I2C_Slave_ISR_IT+0x13c>
 80069d2:	e786      	b.n	80068e2 <I2C_Slave_ISR_IT+0x4a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d4:	2210      	movs	r2, #16
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069da:	699a      	ldr	r2, [r3, #24]
 80069dc:	0792      	lsls	r2, r2, #30
 80069de:	d501      	bpl.n	80069e4 <I2C_Slave_ISR_IT+0x14c>
    hi2c->Instance->TXDR = 0x00U;
 80069e0:	2200      	movs	r2, #0
 80069e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069e4:	2201      	movs	r2, #1
 80069e6:	6999      	ldr	r1, [r3, #24]
 80069e8:	420a      	tst	r2, r1
 80069ea:	d197      	bne.n	800691c <I2C_Slave_ISR_IT+0x84>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069ec:	6999      	ldr	r1, [r3, #24]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	619a      	str	r2, [r3, #24]
 80069f2:	e793      	b.n	800691c <I2C_Slave_ISR_IT+0x84>
 80069f4:	0020      	movs	r0, r4
 80069f6:	f7ff fd63 	bl	80064c0 <I2C_ITAddrCplt.part.0>
 80069fa:	e775      	b.n	80068e8 <I2C_Slave_ISR_IT+0x50>
 80069fc:	feffffff 	.word	0xfeffffff
 8006a00:	ffff0000 	.word	0xffff0000

08006a04 <I2C_ITMasterCplt>:
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a04:	2220      	movs	r2, #32
{
 8006a06:	b510      	push	{r4, lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a08:	6803      	ldr	r3, [r0, #0]
{
 8006a0a:	b082      	sub	sp, #8
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a0c:	61da      	str	r2, [r3, #28]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a0e:	3221      	adds	r2, #33	; 0x21
 8006a10:	5c84      	ldrb	r4, [r0, r2]
 8006a12:	2c21      	cmp	r4, #33	; 0x21
 8006a14:	d04a      	beq.n	8006aac <I2C_ITMasterCplt+0xa8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a16:	5c84      	ldrb	r4, [r0, r2]
 8006a18:	2c22      	cmp	r4, #34	; 0x22
 8006a1a:	d065      	beq.n	8006ae8 <I2C_ITMasterCplt+0xe4>
  I2C_RESET_CR2(hi2c);
 8006a1c:	685a      	ldr	r2, [r3, #4]
 8006a1e:	4c3e      	ldr	r4, [pc, #248]	; (8006b18 <I2C_ITMasterCplt+0x114>)
 8006a20:	4022      	ands	r2, r4
 8006a22:	605a      	str	r2, [r3, #4]
  hi2c->XferISR       = NULL;
 8006a24:	2200      	movs	r2, #0
 8006a26:	6342      	str	r2, [r0, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a28:	4a3c      	ldr	r2, [pc, #240]	; (8006b1c <I2C_ITMasterCplt+0x118>)
 8006a2a:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006a2c:	06ca      	lsls	r2, r1, #27
 8006a2e:	d505      	bpl.n	8006a3c <I2C_ITMasterCplt+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a30:	2210      	movs	r2, #16
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a32:	2404      	movs	r4, #4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a34:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a36:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a38:	4322      	orrs	r2, r4
 8006a3a:	6442      	str	r2, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006a3c:	2241      	movs	r2, #65	; 0x41
 8006a3e:	5c82      	ldrb	r2, [r0, r2]
 8006a40:	2a60      	cmp	r2, #96	; 0x60
 8006a42:	d02b      	beq.n	8006a9c <I2C_ITMasterCplt+0x98>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	0792      	lsls	r2, r2, #30
 8006a48:	d501      	bpl.n	8006a4e <I2C_ITMasterCplt+0x4a>
    hi2c->Instance->TXDR = 0x00U;
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a4e:	2201      	movs	r2, #1
 8006a50:	6999      	ldr	r1, [r3, #24]
 8006a52:	420a      	tst	r2, r1
 8006a54:	d102      	bne.n	8006a5c <I2C_ITMasterCplt+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a56:	6999      	ldr	r1, [r3, #24]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	619a      	str	r2, [r3, #24]
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006a5c:	2341      	movs	r3, #65	; 0x41
  tmperror = hi2c->ErrorCode;
 8006a5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006a60:	5cc1      	ldrb	r1, [r0, r3]
 8006a62:	2960      	cmp	r1, #96	; 0x60
 8006a64:	d001      	beq.n	8006a6a <I2C_ITMasterCplt+0x66>
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	d004      	beq.n	8006a74 <I2C_ITMasterCplt+0x70>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a6a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006a6c:	f7ff fdcc 	bl	8006608 <I2C_ITError>
}
 8006a70:	b002      	add	sp, #8
 8006a72:	bd10      	pop	{r4, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a74:	5cc1      	ldrb	r1, [r0, r3]
 8006a76:	2921      	cmp	r1, #33	; 0x21
 8006a78:	d028      	beq.n	8006acc <I2C_ITMasterCplt+0xc8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a7a:	5cc1      	ldrb	r1, [r0, r3]
 8006a7c:	2922      	cmp	r1, #34	; 0x22
 8006a7e:	d1f7      	bne.n	8006a70 <I2C_ITMasterCplt+0x6c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a80:	3902      	subs	r1, #2
 8006a82:	54c1      	strb	r1, [r0, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a84:	2342      	movs	r3, #66	; 0x42
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a86:	6302      	str	r2, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a88:	5cc1      	ldrb	r1, [r0, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8a:	54c2      	strb	r2, [r0, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a8c:	b2cc      	uxtb	r4, r1
 8006a8e:	2940      	cmp	r1, #64	; 0x40
 8006a90:	d03e      	beq.n	8006b10 <I2C_ITMasterCplt+0x10c>
      __HAL_UNLOCK(hi2c);
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	54c2      	strb	r2, [r0, r3]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a96:	f7ff fc83 	bl	80063a0 <HAL_I2C_MasterRxCpltCallback>
}
 8006a9a:	e7e9      	b.n	8006a70 <I2C_ITMasterCplt+0x6c>
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006a9c:	074a      	lsls	r2, r1, #29
 8006a9e:	d5d1      	bpl.n	8006a44 <I2C_ITMasterCplt+0x40>
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006aa0:	22ff      	movs	r2, #255	; 0xff
 8006aa2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006aa4:	400a      	ands	r2, r1
 8006aa6:	9201      	str	r2, [sp, #4]
    UNUSED(tmpreg);
 8006aa8:	9a01      	ldr	r2, [sp, #4]
 8006aaa:	e7cb      	b.n	8006a44 <I2C_ITMasterCplt+0x40>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006aac:	5c84      	ldrb	r4, [r0, r2]
 8006aae:	3a19      	subs	r2, #25
 8006ab0:	4022      	ands	r2, r4
 8006ab2:	3a28      	subs	r2, #40	; 0x28
 8006ab4:	4254      	negs	r4, r2
 8006ab6:	4162      	adcs	r2, r4
 8006ab8:	24b0      	movs	r4, #176	; 0xb0
 8006aba:	4252      	negs	r2, r2
 8006abc:	4022      	ands	r2, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006abe:	681c      	ldr	r4, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ac0:	3af3      	subs	r2, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ac2:	4022      	ands	r2, r4
 8006ac4:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006ac6:	2211      	movs	r2, #17
 8006ac8:	6302      	str	r2, [r0, #48]	; 0x30
 8006aca:	e7a7      	b.n	8006a1c <I2C_ITMasterCplt+0x18>
    hi2c->State = HAL_I2C_STATE_READY;
 8006acc:	3901      	subs	r1, #1
 8006ace:	54c1      	strb	r1, [r0, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ad0:	2342      	movs	r3, #66	; 0x42
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ad2:	6302      	str	r2, [r0, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ad4:	5cc1      	ldrb	r1, [r0, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad6:	54c2      	strb	r2, [r0, r3]
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ad8:	b2cc      	uxtb	r4, r1
 8006ada:	2940      	cmp	r1, #64	; 0x40
 8006adc:	d014      	beq.n	8006b08 <I2C_ITMasterCplt+0x104>
      __HAL_UNLOCK(hi2c);
 8006ade:	2340      	movs	r3, #64	; 0x40
 8006ae0:	54c2      	strb	r2, [r0, r3]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ae2:	f7ff fc5b 	bl	800639c <HAL_I2C_MasterTxCpltCallback>
 8006ae6:	e7c3      	b.n	8006a70 <I2C_ITMasterCplt+0x6c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006ae8:	5c84      	ldrb	r4, [r0, r2]
 8006aea:	2228      	movs	r2, #40	; 0x28
 8006aec:	4022      	ands	r2, r4
 8006aee:	3a28      	subs	r2, #40	; 0x28
 8006af0:	4254      	negs	r4, r2
 8006af2:	4162      	adcs	r2, r4
 8006af4:	24b0      	movs	r4, #176	; 0xb0
 8006af6:	4252      	negs	r2, r2
 8006af8:	4022      	ands	r2, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006afa:	681c      	ldr	r4, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006afc:	3af5      	subs	r2, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006afe:	4022      	ands	r2, r4
 8006b00:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b02:	2212      	movs	r2, #18
 8006b04:	6302      	str	r2, [r0, #48]	; 0x30
 8006b06:	e789      	b.n	8006a1c <I2C_ITMasterCplt+0x18>
      __HAL_UNLOCK(hi2c);
 8006b08:	5502      	strb	r2, [r0, r4]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006b0a:	f7ff fd55 	bl	80065b8 <HAL_I2C_MemTxCpltCallback>
 8006b0e:	e7af      	b.n	8006a70 <I2C_ITMasterCplt+0x6c>
      __HAL_UNLOCK(hi2c);
 8006b10:	5502      	strb	r2, [r0, r4]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b12:	f7ff fd53 	bl	80065bc <HAL_I2C_MemRxCpltCallback>
 8006b16:	e7ab      	b.n	8006a70 <I2C_ITMasterCplt+0x6c>
 8006b18:	fe00e800 	.word	0xfe00e800
 8006b1c:	ffff0000 	.word	0xffff0000

08006b20 <I2C_Master_ISR_IT>:
{
 8006b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b22:	46ce      	mov	lr, r9
 8006b24:	4647      	mov	r7, r8
 8006b26:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8006b28:	2240      	movs	r2, #64	; 0x40
{
 8006b2a:	b580      	push	{r7, lr}
  __HAL_LOCK(hi2c);
 8006b2c:	5c83      	ldrb	r3, [r0, r2]
{
 8006b2e:	0004      	movs	r4, r0
 8006b30:	000d      	movs	r5, r1
  __HAL_LOCK(hi2c);
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d100      	bne.n	8006b38 <I2C_Master_ISR_IT+0x18>
 8006b36:	e090      	b.n	8006c5a <I2C_Master_ISR_IT+0x13a>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b3c:	090a      	lsrs	r2, r1, #4
 8006b3e:	4213      	tst	r3, r2
 8006b40:	d002      	beq.n	8006b48 <I2C_Master_ISR_IT+0x28>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b42:	0932      	lsrs	r2, r6, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b44:	4213      	tst	r3, r2
 8006b46:	d162      	bne.n	8006c0e <I2C_Master_ISR_IT+0xee>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b48:	2301      	movs	r3, #1
 8006b4a:	076a      	lsls	r2, r5, #29
 8006b4c:	d520      	bpl.n	8006b90 <I2C_Master_ISR_IT+0x70>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006b4e:	08b2      	lsrs	r2, r6, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b50:	4213      	tst	r3, r2
 8006b52:	d01d      	beq.n	8006b90 <I2C_Master_ISR_IT+0x70>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006b54:	3303      	adds	r3, #3
 8006b56:	439d      	bics	r5, r3
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b58:	6823      	ldr	r3, [r4, #0]
 8006b5a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8006b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hi2c->pBuffPtr++;
 8006b62:	3301      	adds	r3, #1
 8006b64:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferSize--;
 8006b66:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferCount--;
 8006b6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	8563      	strh	r3, [r4, #42]	; 0x2a
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b74:	2301      	movs	r3, #1
 8006b76:	06aa      	lsls	r2, r5, #26
 8006b78:	d502      	bpl.n	8006b80 <I2C_Master_ISR_IT+0x60>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b7a:	0976      	lsrs	r6, r6, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b7c:	4233      	tst	r3, r6
 8006b7e:	d167      	bne.n	8006c50 <I2C_Master_ISR_IT+0x130>
  __HAL_UNLOCK(hi2c);
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	2200      	movs	r2, #0
  return HAL_OK;
 8006b84:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8006b86:	54e2      	strb	r2, [r4, r3]
}
 8006b88:	bcc0      	pop	{r6, r7}
 8006b8a:	46b9      	mov	r9, r7
 8006b8c:	46b0      	mov	r8, r6
 8006b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006b90:	2301      	movs	r3, #1
 8006b92:	07aa      	lsls	r2, r5, #30
 8006b94:	d41c      	bmi.n	8006bd0 <I2C_Master_ISR_IT+0xb0>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b96:	2301      	movs	r3, #1
 8006b98:	062a      	lsls	r2, r5, #24
 8006b9a:	d521      	bpl.n	8006be0 <I2C_Master_ISR_IT+0xc0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b9c:	09b2      	lsrs	r2, r6, #6
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006b9e:	4213      	tst	r3, r2
 8006ba0:	d0e8      	beq.n	8006b74 <I2C_Master_ISR_IT+0x54>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ba2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d046      	beq.n	8006c36 <I2C_Master_ISR_IT+0x116>
 8006ba8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d143      	bne.n	8006c36 <I2C_Master_ISR_IT+0x116>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006bae:	6821      	ldr	r1, [r4, #0]
 8006bb0:	684b      	ldr	r3, [r1, #4]
 8006bb2:	059b      	lsls	r3, r3, #22
 8006bb4:	0d9a      	lsrs	r2, r3, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bb8:	2bff      	cmp	r3, #255	; 0xff
 8006bba:	d950      	bls.n	8006c5e <I2C_Master_ISR_IT+0x13e>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bbc:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8006bbe:	4839      	ldr	r0, [pc, #228]	; (8006ca4 <I2C_Master_ISR_IT+0x184>)
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bc0:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8006bc2:	684b      	ldr	r3, [r1, #4]
 8006bc4:	4003      	ands	r3, r0
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	4a37      	ldr	r2, [pc, #220]	; (8006ca8 <I2C_Master_ISR_IT+0x188>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	604b      	str	r3, [r1, #4]
}
 8006bce:	e7d1      	b.n	8006b74 <I2C_Master_ISR_IT+0x54>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006bd0:	0872      	lsrs	r2, r6, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bd2:	4213      	tst	r3, r2
 8006bd4:	d0df      	beq.n	8006b96 <I2C_Master_ISR_IT+0x76>
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	7819      	ldrb	r1, [r3, #0]
 8006bdc:	6291      	str	r1, [r2, #40]	; 0x28
 8006bde:	e7c0      	b.n	8006b62 <I2C_Master_ISR_IT+0x42>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006be0:	09aa      	lsrs	r2, r5, #6
 8006be2:	4213      	tst	r3, r2
 8006be4:	d0c6      	beq.n	8006b74 <I2C_Master_ISR_IT+0x54>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006be6:	09b2      	lsrs	r2, r6, #6
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006be8:	4213      	tst	r3, r2
 8006bea:	d0c3      	beq.n	8006b74 <I2C_Master_ISR_IT+0x54>
    if (hi2c->XferCount == 0U)
 8006bec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d129      	bne.n	8006c46 <I2C_Master_ISR_IT+0x126>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	0192      	lsls	r2, r2, #6
 8006bf8:	d4bc      	bmi.n	8006b74 <I2C_Master_ISR_IT+0x54>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006bfa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006bfc:	4a2b      	ldr	r2, [pc, #172]	; (8006cac <I2C_Master_ISR_IT+0x18c>)
 8006bfe:	4291      	cmp	r1, r2
 8006c00:	d11d      	bne.n	8006c3e <I2C_Master_ISR_IT+0x11e>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c02:	2280      	movs	r2, #128	; 0x80
 8006c04:	6859      	ldr	r1, [r3, #4]
 8006c06:	01d2      	lsls	r2, r2, #7
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	e7b2      	b.n	8006b74 <I2C_Master_ISR_IT+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c0e:	2210      	movs	r2, #16
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c10:	2104      	movs	r1, #4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c12:	6803      	ldr	r3, [r0, #0]
 8006c14:	61da      	str	r2, [r3, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c16:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	6442      	str	r2, [r0, #68]	; 0x44
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c1c:	699a      	ldr	r2, [r3, #24]
 8006c1e:	0792      	lsls	r2, r2, #30
 8006c20:	d501      	bpl.n	8006c26 <I2C_Master_ISR_IT+0x106>
    hi2c->Instance->TXDR = 0x00U;
 8006c22:	2200      	movs	r2, #0
 8006c24:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c26:	2201      	movs	r2, #1
 8006c28:	6999      	ldr	r1, [r3, #24]
 8006c2a:	420a      	tst	r2, r1
 8006c2c:	d1a2      	bne.n	8006b74 <I2C_Master_ISR_IT+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c2e:	6999      	ldr	r1, [r3, #24]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	619a      	str	r2, [r3, #24]
 8006c34:	e79e      	b.n	8006b74 <I2C_Master_ISR_IT+0x54>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	019b      	lsls	r3, r3, #6
 8006c3c:	d403      	bmi.n	8006c46 <I2C_Master_ISR_IT+0x126>
        I2C_ITMasterSeqCplt(hi2c);
 8006c3e:	0020      	movs	r0, r4
 8006c40:	f7ff fbb0 	bl	80063a4 <I2C_ITMasterSeqCplt>
 8006c44:	e796      	b.n	8006b74 <I2C_Master_ISR_IT+0x54>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006c46:	2140      	movs	r1, #64	; 0x40
 8006c48:	0020      	movs	r0, r4
 8006c4a:	f7ff fcdd 	bl	8006608 <I2C_ITError>
 8006c4e:	e791      	b.n	8006b74 <I2C_Master_ISR_IT+0x54>
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006c50:	0029      	movs	r1, r5
 8006c52:	0020      	movs	r0, r4
 8006c54:	f7ff fed6 	bl	8006a04 <I2C_ITMasterCplt>
 8006c58:	e792      	b.n	8006b80 <I2C_Master_ISR_IT+0x60>
  __HAL_LOCK(hi2c);
 8006c5a:	2002      	movs	r0, #2
 8006c5c:	e794      	b.n	8006b88 <I2C_Master_ISR_IT+0x68>
        hi2c->XferSize = hi2c->XferCount;
 8006c5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006c60:	4812      	ldr	r0, [pc, #72]	; (8006cac <I2C_Master_ISR_IT+0x18c>)
 8006c62:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	8523      	strh	r3, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006c68:	4287      	cmp	r7, r0
 8006c6a:	d00f      	beq.n	8006c8c <I2C_Master_ISR_IT+0x16c>
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006c6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  MODIFY_REG(hi2c->Instance->CR2,
 8006c6e:	b2db      	uxtb	r3, r3
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006c70:	4681      	mov	r9, r0
  MODIFY_REG(hi2c->Instance->CR2,
 8006c72:	6848      	ldr	r0, [r1, #4]
 8006c74:	041b      	lsls	r3, r3, #16
 8006c76:	4680      	mov	r8, r0
 8006c78:	4647      	mov	r7, r8
 8006c7a:	480a      	ldr	r0, [pc, #40]	; (8006ca4 <I2C_Master_ISR_IT+0x184>)
 8006c7c:	4007      	ands	r7, r0
 8006c7e:	0038      	movs	r0, r7
 8006c80:	464f      	mov	r7, r9
 8006c82:	4338      	orrs	r0, r7
 8006c84:	4303      	orrs	r3, r0
 8006c86:	4313      	orrs	r3, r2
 8006c88:	604b      	str	r3, [r1, #4]
}
 8006c8a:	e773      	b.n	8006b74 <I2C_Master_ISR_IT+0x54>
  MODIFY_REG(hi2c->Instance->CR2,
 8006c8c:	6848      	ldr	r0, [r1, #4]
 8006c8e:	4f05      	ldr	r7, [pc, #20]	; (8006ca4 <I2C_Master_ISR_IT+0x184>)
 8006c90:	4038      	ands	r0, r7
 8006c92:	4302      	orrs	r2, r0
 8006c94:	b2d8      	uxtb	r0, r3
 8006c96:	0400      	lsls	r0, r0, #16
 8006c98:	4310      	orrs	r0, r2
 8006c9a:	2280      	movs	r2, #128	; 0x80
 8006c9c:	0492      	lsls	r2, r2, #18
 8006c9e:	4310      	orrs	r0, r2
 8006ca0:	6048      	str	r0, [r1, #4]
}
 8006ca2:	e767      	b.n	8006b74 <I2C_Master_ISR_IT+0x54>
 8006ca4:	fc009c00 	.word	0xfc009c00
 8006ca8:	01ff0000 	.word	0x01ff0000
 8006cac:	ffff0000 	.word	0xffff0000

08006cb0 <I2C_Slave_ISR_DMA>:
{
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	0015      	movs	r5, r2
  __HAL_LOCK(hi2c);
 8006cb4:	2240      	movs	r2, #64	; 0x40
 8006cb6:	5c83      	ldrb	r3, [r0, r2]
{
 8006cb8:	0004      	movs	r4, r0
 8006cba:	000e      	movs	r6, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 8006cbc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d100      	bne.n	8006cc4 <I2C_Slave_ISR_DMA+0x14>
 8006cc2:	e083      	b.n	8006dcc <I2C_Slave_ISR_DMA+0x11c>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006cc8:	094a      	lsrs	r2, r1, #5
 8006cca:	4213      	tst	r3, r2
 8006ccc:	d002      	beq.n	8006cd4 <I2C_Slave_ISR_DMA+0x24>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006cce:	096a      	lsrs	r2, r5, #5
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006cd0:	4213      	tst	r3, r2
 8006cd2:	d132      	bne.n	8006d3a <I2C_Slave_ISR_DMA+0x8a>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	06f2      	lsls	r2, r6, #27
 8006cd8:	d51a      	bpl.n	8006d10 <I2C_Slave_ISR_DMA+0x60>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006cda:	092a      	lsrs	r2, r5, #4
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006cdc:	4213      	tst	r3, r2
 8006cde:	d017      	beq.n	8006d10 <I2C_Slave_ISR_DMA+0x60>
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	0ba9      	lsrs	r1, r5, #14
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006ce4:	0bed      	lsrs	r5, r5, #15
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006ce6:	4008      	ands	r0, r1
 8006ce8:	4329      	orrs	r1, r5
 8006cea:	420b      	tst	r3, r1
 8006cec:	d02b      	beq.n	8006d46 <I2C_Slave_ISR_DMA+0x96>
      if (hi2c->hdmarx != NULL)
 8006cee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006cf0:	2a00      	cmp	r2, #0
 8006cf2:	d02c      	beq.n	8006d4e <I2C_Slave_ISR_DMA+0x9e>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006cf4:	422b      	tst	r3, r5
 8006cf6:	d02a      	beq.n	8006d4e <I2C_Slave_ISR_DMA+0x9e>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8006cf8:	6813      	ldr	r3, [r2, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d126      	bne.n	8006d4e <I2C_Slave_ISR_DMA+0x9e>
      if (hi2c->hdmatx != NULL)
 8006d00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d02c      	beq.n	8006d60 <I2C_Slave_ISR_DMA+0xb0>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d02a      	beq.n	8006d60 <I2C_Slave_ISR_DMA+0xb0>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	e027      	b.n	8006d60 <I2C_Slave_ISR_DMA+0xb0>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d10:	2301      	movs	r3, #1
 8006d12:	0732      	lsls	r2, r6, #28
 8006d14:	d404      	bmi.n	8006d20 <I2C_Slave_ISR_DMA+0x70>
  __HAL_UNLOCK(hi2c);
 8006d16:	2340      	movs	r3, #64	; 0x40
 8006d18:	2200      	movs	r2, #0
  return HAL_OK;
 8006d1a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8006d1c:	54e2      	strb	r2, [r4, r3]
}
 8006d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006d20:	08ed      	lsrs	r5, r5, #3
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006d22:	422b      	tst	r3, r5
 8006d24:	d0f7      	beq.n	8006d16 <I2C_Slave_ISR_DMA+0x66>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d26:	3340      	adds	r3, #64	; 0x40
 8006d28:	5ce2      	ldrb	r2, [r4, r3]
 8006d2a:	3b19      	subs	r3, #25
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b28      	cmp	r3, #40	; 0x28
 8006d30:	d050      	beq.n	8006dd4 <I2C_Slave_ISR_DMA+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d32:	2208      	movs	r2, #8
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006d38:	e7ed      	b.n	8006d16 <I2C_Slave_ISR_DMA+0x66>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006d3a:	f7ff fd01 	bl	8006740 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006d3e:	2301      	movs	r3, #1
 8006d40:	06f2      	lsls	r2, r6, #27
 8006d42:	d5e5      	bpl.n	8006d10 <I2C_Slave_ISR_DMA+0x60>
 8006d44:	e7c9      	b.n	8006cda <I2C_Slave_ISR_DMA+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d46:	2210      	movs	r2, #16
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	61da      	str	r2, [r3, #28]
 8006d4c:	e7e3      	b.n	8006d16 <I2C_Slave_ISR_DMA+0x66>
      if (hi2c->hdmatx != NULL)
 8006d4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d023      	beq.n	8006d9c <I2C_Slave_ISR_DMA+0xec>
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d021      	beq.n	8006d9c <I2C_Slave_ISR_DMA+0xec>
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d11d      	bne.n	8006d9c <I2C_Slave_ISR_DMA+0xec>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006d60:	2341      	movs	r3, #65	; 0x41
 8006d62:	5ce3      	ldrb	r3, [r4, r3]
 8006d64:	2b28      	cmp	r3, #40	; 0x28
 8006d66:	d039      	beq.n	8006ddc <I2C_Slave_ISR_DMA+0x12c>
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006d68:	2341      	movs	r3, #65	; 0x41
 8006d6a:	5ce3      	ldrb	r3, [r4, r3]
 8006d6c:	2b29      	cmp	r3, #41	; 0x29
 8006d6e:	d1ea      	bne.n	8006d46 <I2C_Slave_ISR_DMA+0x96>
 8006d70:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <I2C_Slave_ISR_DMA+0x140>)
 8006d72:	429f      	cmp	r7, r3
 8006d74:	d0e7      	beq.n	8006d46 <I2C_Slave_ISR_DMA+0x96>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d76:	2210      	movs	r2, #16
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	0792      	lsls	r2, r2, #30
 8006d80:	d501      	bpl.n	8006d86 <I2C_Slave_ISR_DMA+0xd6>
    hi2c->Instance->TXDR = 0x00U;
 8006d82:	2200      	movs	r2, #0
 8006d84:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d86:	2201      	movs	r2, #1
 8006d88:	6999      	ldr	r1, [r3, #24]
 8006d8a:	420a      	tst	r2, r1
 8006d8c:	d102      	bne.n	8006d94 <I2C_Slave_ISR_DMA+0xe4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d8e:	6999      	ldr	r1, [r3, #24]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	619a      	str	r2, [r3, #24]
          I2C_ITSlaveSeqCplt(hi2c);
 8006d94:	0020      	movs	r0, r4
 8006d96:	f7ff fb41 	bl	800641c <I2C_ITSlaveSeqCplt>
 8006d9a:	e7bc      	b.n	8006d16 <I2C_Slave_ISR_DMA+0x66>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006da2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006da4:	3a0c      	subs	r2, #12
 8006da6:	4313      	orrs	r3, r2
 8006da8:	6463      	str	r3, [r4, #68]	; 0x44
        tmpstate = hi2c->State;
 8006daa:	2341      	movs	r3, #65	; 0x41
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006dac:	4a11      	ldr	r2, [pc, #68]	; (8006df4 <I2C_Slave_ISR_DMA+0x144>)
        tmpstate = hi2c->State;
 8006dae:	5ce3      	ldrb	r3, [r4, r3]
 8006db0:	b2db      	uxtb	r3, r3
        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006db2:	4217      	tst	r7, r2
 8006db4:	d1af      	bne.n	8006d16 <I2C_Slave_ISR_DMA+0x66>
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006db6:	2208      	movs	r2, #8
 8006db8:	4393      	bics	r3, r2
 8006dba:	2b21      	cmp	r3, #33	; 0x21
 8006dbc:	d008      	beq.n	8006dd0 <I2C_Slave_ISR_DMA+0x120>
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006dbe:	2b22      	cmp	r3, #34	; 0x22
 8006dc0:	d006      	beq.n	8006dd0 <I2C_Slave_ISR_DMA+0x120>
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006dc2:	0020      	movs	r0, r4
 8006dc4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006dc6:	f7ff fc1f 	bl	8006608 <I2C_ITError>
 8006dca:	e7a4      	b.n	8006d16 <I2C_Slave_ISR_DMA+0x66>
  __HAL_LOCK(hi2c);
 8006dcc:	2002      	movs	r0, #2
 8006dce:	e7a6      	b.n	8006d1e <I2C_Slave_ISR_DMA+0x6e>
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006dd0:	6323      	str	r3, [r4, #48]	; 0x30
 8006dd2:	e7f6      	b.n	8006dc2 <I2C_Slave_ISR_DMA+0x112>
 8006dd4:	0020      	movs	r0, r4
 8006dd6:	f7ff fb73 	bl	80064c0 <I2C_ITAddrCplt.part.0>
 8006dda:	e79c      	b.n	8006d16 <I2C_Slave_ISR_DMA+0x66>
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	049b      	lsls	r3, r3, #18
 8006de0:	429f      	cmp	r7, r3
 8006de2:	d1c1      	bne.n	8006d68 <I2C_Slave_ISR_DMA+0xb8>
          I2C_ITListenCplt(hi2c, ITFlags);
 8006de4:	0031      	movs	r1, r6
 8006de6:	0020      	movs	r0, r4
 8006de8:	f7ff fbb2 	bl	8006550 <I2C_ITListenCplt>
 8006dec:	e793      	b.n	8006d16 <I2C_Slave_ISR_DMA+0x66>
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	ffff0000 	.word	0xffff0000
 8006df4:	feffffff 	.word	0xfeffffff

08006df8 <I2C_Master_ISR_DMA>:
{
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006dfa:	2340      	movs	r3, #64	; 0x40
{
 8006dfc:	0004      	movs	r4, r0
  __HAL_LOCK(hi2c);
 8006dfe:	5cc0      	ldrb	r0, [r0, r3]
 8006e00:	2801      	cmp	r0, #1
 8006e02:	d100      	bne.n	8006e06 <I2C_Master_ISR_DMA+0xe>
 8006e04:	e084      	b.n	8006f10 <I2C_Master_ISR_DMA+0x118>
 8006e06:	2001      	movs	r0, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e08:	090d      	lsrs	r5, r1, #4
  __HAL_LOCK(hi2c);
 8006e0a:	54e0      	strb	r0, [r4, r3]
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e0c:	4228      	tst	r0, r5
 8006e0e:	d029      	beq.n	8006e64 <I2C_Master_ISR_DMA+0x6c>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e10:	0915      	lsrs	r5, r2, #4
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e12:	4228      	tst	r0, r5
 8006e14:	d026      	beq.n	8006e64 <I2C_Master_ISR_DMA+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e16:	2110      	movs	r1, #16
 8006e18:	6822      	ldr	r2, [r4, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e1a:	3003      	adds	r0, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e1c:	61d1      	str	r1, [r2, #28]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e1e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e20:	4301      	orrs	r1, r0
 8006e22:	6461      	str	r1, [r4, #68]	; 0x44
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006e24:	484a      	ldr	r0, [pc, #296]	; (8006f50 <I2C_Master_ISR_DMA+0x158>)
 8006e26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e28:	4281      	cmp	r1, r0
 8006e2a:	d100      	bne.n	8006e2e <I2C_Master_ISR_DMA+0x36>
 8006e2c:	e06e      	b.n	8006f0c <I2C_Master_ISR_DMA+0x114>
 8006e2e:	4849      	ldr	r0, [pc, #292]	; (8006f54 <I2C_Master_ISR_DMA+0x15c>)
      tmpisr |= I2C_IT_STOPI;
 8006e30:	1a09      	subs	r1, r1, r0
 8006e32:	4248      	negs	r0, r1
 8006e34:	4141      	adcs	r1, r0
 8006e36:	4249      	negs	r1, r1
 8006e38:	400b      	ands	r3, r1
 8006e3a:	3320      	adds	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006e3c:	6811      	ldr	r1, [r2, #0]
 8006e3e:	430b      	orrs	r3, r1
 8006e40:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e42:	6993      	ldr	r3, [r2, #24]
 8006e44:	079b      	lsls	r3, r3, #30
 8006e46:	d501      	bpl.n	8006e4c <I2C_Master_ISR_DMA+0x54>
    hi2c->Instance->TXDR = 0x00U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6293      	str	r3, [r2, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	6991      	ldr	r1, [r2, #24]
 8006e50:	420b      	tst	r3, r1
 8006e52:	d102      	bne.n	8006e5a <I2C_Master_ISR_DMA+0x62>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e54:	6991      	ldr	r1, [r2, #24]
 8006e56:	430b      	orrs	r3, r1
 8006e58:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(hi2c);
 8006e5a:	2340      	movs	r3, #64	; 0x40
 8006e5c:	2200      	movs	r2, #0
  return HAL_OK;
 8006e5e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8006e60:	54e2      	strb	r2, [r4, r3]
}
 8006e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006e64:	2301      	movs	r3, #1
 8006e66:	0608      	lsls	r0, r1, #24
 8006e68:	d52f      	bpl.n	8006eca <I2C_Master_ISR_DMA+0xd2>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006e6a:	0990      	lsrs	r0, r2, #6
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006e6c:	4203      	tst	r3, r0
 8006e6e:	d043      	beq.n	8006ef8 <I2C_Master_ISR_DMA+0x100>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006e70:	2140      	movs	r1, #64	; 0x40
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	438a      	bics	r2, r1
 8006e78:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006e7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006e7c:	2a00      	cmp	r2, #0
 8006e7e:	d049      	beq.n	8006f14 <I2C_Master_ISR_DMA+0x11c>
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	0592      	lsls	r2, r2, #22
 8006e84:	0d91      	lsrs	r1, r2, #22
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006e88:	2aff      	cmp	r2, #255	; 0xff
 8006e8a:	d84f      	bhi.n	8006f2c <I2C_Master_ISR_DMA+0x134>
        hi2c->XferSize = hi2c->XferCount;
 8006e8c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e8e:	4a32      	ldr	r2, [pc, #200]	; (8006f58 <I2C_Master_ISR_DMA+0x160>)
 8006e90:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        hi2c->XferSize = hi2c->XferCount;
 8006e92:	b280      	uxth	r0, r0
 8006e94:	8520      	strh	r0, [r4, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e96:	4295      	cmp	r5, r2
 8006e98:	d055      	beq.n	8006f46 <I2C_Master_ISR_DMA+0x14e>
  MODIFY_REG(hi2c->Instance->CR2,
 8006e9a:	b2c5      	uxtb	r5, r0
          xfermode = hi2c->XferOptions;
 8006e9c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
  MODIFY_REG(hi2c->Instance->CR2,
 8006e9e:	042d      	lsls	r5, r5, #16
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	4e2e      	ldr	r6, [pc, #184]	; (8006f5c <I2C_Master_ISR_DMA+0x164>)
 8006ea4:	4032      	ands	r2, r6
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	433a      	orrs	r2, r7
 8006eaa:	432a      	orrs	r2, r5
 8006eac:	605a      	str	r2, [r3, #4]
      hi2c->XferCount -= hi2c->XferSize;
 8006eae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8006eb0:	1a12      	subs	r2, r2, r0
 8006eb2:	b292      	uxth	r2, r2
 8006eb4:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006eb6:	2241      	movs	r2, #65	; 0x41
 8006eb8:	5ca2      	ldrb	r2, [r4, r2]
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006eba:	6819      	ldr	r1, [r3, #0]
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ebc:	2a22      	cmp	r2, #34	; 0x22
 8006ebe:	d03d      	beq.n	8006f3c <I2C_Master_ISR_DMA+0x144>
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006ec0:	2280      	movs	r2, #128	; 0x80
 8006ec2:	01d2      	lsls	r2, r2, #7
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	e7c7      	b.n	8006e5a <I2C_Master_ISR_DMA+0x62>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006eca:	0988      	lsrs	r0, r1, #6
 8006ecc:	4203      	tst	r3, r0
 8006ece:	d013      	beq.n	8006ef8 <I2C_Master_ISR_DMA+0x100>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ed0:	0990      	lsrs	r0, r2, #6
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ed2:	4203      	tst	r3, r0
 8006ed4:	d010      	beq.n	8006ef8 <I2C_Master_ISR_DMA+0x100>
    if (hi2c->XferCount == 0U)
 8006ed6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d122      	bne.n	8006f22 <I2C_Master_ISR_DMA+0x12a>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	0192      	lsls	r2, r2, #6
 8006ee2:	d4ba      	bmi.n	8006e5a <I2C_Master_ISR_DMA+0x62>
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006ee4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006ee6:	4a1c      	ldr	r2, [pc, #112]	; (8006f58 <I2C_Master_ISR_DMA+0x160>)
 8006ee8:	4291      	cmp	r1, r2
 8006eea:	d116      	bne.n	8006f1a <I2C_Master_ISR_DMA+0x122>
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006eec:	2280      	movs	r2, #128	; 0x80
 8006eee:	6859      	ldr	r1, [r3, #4]
 8006ef0:	01d2      	lsls	r2, r2, #7
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
 8006ef6:	e7b0      	b.n	8006e5a <I2C_Master_ISR_DMA+0x62>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ef8:	2301      	movs	r3, #1
 8006efa:	0688      	lsls	r0, r1, #26
 8006efc:	d5ad      	bpl.n	8006e5a <I2C_Master_ISR_DMA+0x62>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006efe:	0952      	lsrs	r2, r2, #5
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006f00:	4213      	tst	r3, r2
 8006f02:	d0aa      	beq.n	8006e5a <I2C_Master_ISR_DMA+0x62>
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006f04:	0020      	movs	r0, r4
 8006f06:	f7ff fd7d 	bl	8006a04 <I2C_ITMasterCplt>
 8006f0a:	e7a6      	b.n	8006e5a <I2C_Master_ISR_DMA+0x62>
 8006f0c:	2360      	movs	r3, #96	; 0x60
 8006f0e:	e795      	b.n	8006e3c <I2C_Master_ISR_DMA+0x44>
  __HAL_LOCK(hi2c);
 8006f10:	2002      	movs	r0, #2
 8006f12:	e7a6      	b.n	8006e62 <I2C_Master_ISR_DMA+0x6a>
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	019b      	lsls	r3, r3, #6
 8006f18:	d403      	bmi.n	8006f22 <I2C_Master_ISR_DMA+0x12a>
        I2C_ITMasterSeqCplt(hi2c);
 8006f1a:	0020      	movs	r0, r4
 8006f1c:	f7ff fa42 	bl	80063a4 <I2C_ITMasterSeqCplt>
 8006f20:	e79b      	b.n	8006e5a <I2C_Master_ISR_DMA+0x62>
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006f22:	2140      	movs	r1, #64	; 0x40
 8006f24:	0020      	movs	r0, r4
 8006f26:	f7ff fb6f 	bl	8006608 <I2C_ITError>
 8006f2a:	e796      	b.n	8006e5a <I2C_Master_ISR_DMA+0x62>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f2c:	22ff      	movs	r2, #255	; 0xff
 8006f2e:	25ff      	movs	r5, #255	; 0xff
        xfermode = I2C_RELOAD_MODE;
 8006f30:	2780      	movs	r7, #128	; 0x80
 8006f32:	20ff      	movs	r0, #255	; 0xff
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f34:	8522      	strh	r2, [r4, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006f36:	042d      	lsls	r5, r5, #16
 8006f38:	047f      	lsls	r7, r7, #17
 8006f3a:	e7b1      	b.n	8006ea0 <I2C_Master_ISR_DMA+0xa8>
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006f3c:	2280      	movs	r2, #128	; 0x80
 8006f3e:	0212      	lsls	r2, r2, #8
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e789      	b.n	8006e5a <I2C_Master_ISR_DMA+0x62>
          xfermode = I2C_AUTOEND_MODE;
 8006f46:	2780      	movs	r7, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2,
 8006f48:	b2c5      	uxtb	r5, r0
 8006f4a:	042d      	lsls	r5, r5, #16
          xfermode = I2C_AUTOEND_MODE;
 8006f4c:	04bf      	lsls	r7, r7, #18
 8006f4e:	e7a7      	b.n	8006ea0 <I2C_Master_ISR_DMA+0xa8>
 8006f50:	08006df9 	.word	0x08006df9
 8006f54:	08006cb1 	.word	0x08006cb1
 8006f58:	ffff0000 	.word	0xffff0000
 8006f5c:	fc009c00 	.word	0xfc009c00

08006f60 <I2C_DMAError>:
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f60:	2380      	movs	r3, #128	; 0x80
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f62:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8006f64:	b510      	push	{r4, lr}
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f66:	6802      	ldr	r2, [r0, #0]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	6851      	ldr	r1, [r2, #4]
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6053      	str	r3, [r2, #4]
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006f70:	2110      	movs	r1, #16
 8006f72:	f7ff fb49 	bl	8006608 <I2C_ITError>
}
 8006f76:	bd10      	pop	{r4, pc}

08006f78 <I2C_DMAMasterTransmitCplt>:
{
 8006f78:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006f7a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f7c:	4923      	ldr	r1, [pc, #140]	; (800700c <I2C_DMAMasterTransmitCplt+0x94>)
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	6813      	ldr	r3, [r2, #0]
 8006f82:	400b      	ands	r3, r1
 8006f84:	6013      	str	r3, [r2, #0]
  if (hi2c->XferCount == 0U)
 8006f86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10d      	bne.n	8006fa8 <I2C_DMAMasterTransmitCplt+0x30>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006f8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f8e:	4920      	ldr	r1, [pc, #128]	; (8007010 <I2C_DMAMasterTransmitCplt+0x98>)
 8006f90:	428b      	cmp	r3, r1
 8006f92:	d037      	beq.n	8007004 <I2C_DMAMasterTransmitCplt+0x8c>
 8006f94:	491f      	ldr	r1, [pc, #124]	; (8007014 <I2C_DMAMasterTransmitCplt+0x9c>)
      tmpisr |= I2C_IT_STOPI;
 8006f96:	1a5b      	subs	r3, r3, r1
 8006f98:	4259      	negs	r1, r3
 8006f9a:	414b      	adcs	r3, r1
 8006f9c:	019b      	lsls	r3, r3, #6
 8006f9e:	3320      	adds	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006fa0:	6811      	ldr	r1, [r2, #0]
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	6013      	str	r3, [r2, #0]
}
 8006fa6:	bd10      	pop	{r4, pc}
    hi2c->pBuffPtr += hi2c->XferSize;
 8006fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006faa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8006fac:	469c      	mov	ip, r3
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8006fb0:	4461      	add	r1, ip
 8006fb2:	6261      	str	r1, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fb4:	2bff      	cmp	r3, #255	; 0xff
 8006fb6:	d817      	bhi.n	8006fe8 <I2C_DMAMasterTransmitCplt+0x70>
      hi2c->XferSize = hi2c->XferCount;
 8006fb8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006fba:	3228      	adds	r2, #40	; 0x28
      hi2c->XferSize = hi2c->XferCount;
 8006fbc:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006fbe:	0003      	movs	r3, r0
 8006fc0:	8520      	strh	r0, [r4, #40]	; 0x28
 8006fc2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006fc4:	f7fe fa9c 	bl	8005500 <HAL_DMA_Start_IT>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d116      	bne.n	8006ffa <I2C_DMAMasterTransmitCplt+0x82>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fce:	4a10      	ldr	r2, [pc, #64]	; (8007010 <I2C_DMAMasterTransmitCplt+0x98>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d019      	beq.n	8007008 <I2C_DMAMasterTransmitCplt+0x90>
 8006fd4:	4a0f      	ldr	r2, [pc, #60]	; (8007014 <I2C_DMAMasterTransmitCplt+0x9c>)
 8006fd6:	1a9b      	subs	r3, r3, r2
 8006fd8:	425a      	negs	r2, r3
 8006fda:	4153      	adcs	r3, r2
 8006fdc:	019b      	lsls	r3, r3, #6
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006fde:	6821      	ldr	r1, [r4, #0]
 8006fe0:	680a      	ldr	r2, [r1, #0]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	600b      	str	r3, [r1, #0]
}
 8006fe6:	e7de      	b.n	8006fa6 <I2C_DMAMasterTransmitCplt+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fe8:	20ff      	movs	r0, #255	; 0xff
 8006fea:	23ff      	movs	r3, #255	; 0xff
 8006fec:	8520      	strh	r0, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006fee:	3228      	adds	r2, #40	; 0x28
 8006ff0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006ff2:	f7fe fa85 	bl	8005500 <HAL_DMA_Start_IT>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d0e8      	beq.n	8006fcc <I2C_DMAMasterTransmitCplt+0x54>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006ffa:	2110      	movs	r1, #16
 8006ffc:	0020      	movs	r0, r4
 8006ffe:	f7ff fb03 	bl	8006608 <I2C_ITError>
 8007002:	e7d0      	b.n	8006fa6 <I2C_DMAMasterTransmitCplt+0x2e>
 8007004:	2360      	movs	r3, #96	; 0x60
 8007006:	e7cb      	b.n	8006fa0 <I2C_DMAMasterTransmitCplt+0x28>
      tmpisr |= I2C_IT_TCI;
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	e7e8      	b.n	8006fde <I2C_DMAMasterTransmitCplt+0x66>
 800700c:	ffffbfff 	.word	0xffffbfff
 8007010:	08006df9 	.word	0x08006df9
 8007014:	08006cb1 	.word	0x08006cb1

08007018 <I2C_DMAMasterReceiveCplt>:
{
 8007018:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800701a:	6a84      	ldr	r4, [r0, #40]	; 0x28
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800701c:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <I2C_DMAMasterReceiveCplt+0x90>)
 800701e:	6821      	ldr	r1, [r4, #0]
 8007020:	680b      	ldr	r3, [r1, #0]
 8007022:	4013      	ands	r3, r2
 8007024:	600b      	str	r3, [r1, #0]
  if (hi2c->XferCount == 0U)
 8007026:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10d      	bne.n	8007048 <I2C_DMAMasterReceiveCplt+0x30>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800702c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800702e:	4a1f      	ldr	r2, [pc, #124]	; (80070ac <I2C_DMAMasterReceiveCplt+0x94>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d034      	beq.n	800709e <I2C_DMAMasterReceiveCplt+0x86>
 8007034:	4a1e      	ldr	r2, [pc, #120]	; (80070b0 <I2C_DMAMasterReceiveCplt+0x98>)
      tmpisr |= I2C_IT_STOPI;
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	425a      	negs	r2, r3
 800703a:	4153      	adcs	r3, r2
 800703c:	019b      	lsls	r3, r3, #6
 800703e:	3320      	adds	r3, #32
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007040:	680a      	ldr	r2, [r1, #0]
 8007042:	4313      	orrs	r3, r2
 8007044:	600b      	str	r3, [r1, #0]
}
 8007046:	bd10      	pop	{r4, pc}
    hi2c->pBuffPtr += hi2c->XferSize;
 8007048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800704a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800704c:	469c      	mov	ip, r3
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800704e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr += hi2c->XferSize;
 8007050:	4462      	add	r2, ip
 8007052:	6262      	str	r2, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007054:	2bff      	cmp	r3, #255	; 0xff
 8007056:	d814      	bhi.n	8007082 <I2C_DMAMasterReceiveCplt+0x6a>
      hi2c->XferSize = hi2c->XferCount;
 8007058:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800705a:	3124      	adds	r1, #36	; 0x24
      hi2c->XferSize = hi2c->XferCount;
 800705c:	b280      	uxth	r0, r0
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800705e:	0003      	movs	r3, r0
 8007060:	8520      	strh	r0, [r4, #40]	; 0x28
 8007062:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007064:	f7fe fa4c 	bl	8005500 <HAL_DMA_Start_IT>
 8007068:	2800      	cmp	r0, #0
 800706a:	d113      	bne.n	8007094 <I2C_DMAMasterReceiveCplt+0x7c>
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800706c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800706e:	4a0f      	ldr	r2, [pc, #60]	; (80070ac <I2C_DMAMasterReceiveCplt+0x94>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d016      	beq.n	80070a2 <I2C_DMAMasterReceiveCplt+0x8a>
 8007074:	4a0e      	ldr	r2, [pc, #56]	; (80070b0 <I2C_DMAMasterReceiveCplt+0x98>)
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007076:	6821      	ldr	r1, [r4, #0]
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	425a      	negs	r2, r3
 800707c:	4153      	adcs	r3, r2
 800707e:	019b      	lsls	r3, r3, #6
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007080:	e7de      	b.n	8007040 <I2C_DMAMasterReceiveCplt+0x28>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007082:	20ff      	movs	r0, #255	; 0xff
 8007084:	23ff      	movs	r3, #255	; 0xff
 8007086:	8520      	strh	r0, [r4, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007088:	3124      	adds	r1, #36	; 0x24
 800708a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800708c:	f7fe fa38 	bl	8005500 <HAL_DMA_Start_IT>
 8007090:	2800      	cmp	r0, #0
 8007092:	d0eb      	beq.n	800706c <I2C_DMAMasterReceiveCplt+0x54>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007094:	2110      	movs	r1, #16
 8007096:	0020      	movs	r0, r4
 8007098:	f7ff fab6 	bl	8006608 <I2C_ITError>
 800709c:	e7d3      	b.n	8007046 <I2C_DMAMasterReceiveCplt+0x2e>
 800709e:	2360      	movs	r3, #96	; 0x60
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80070a0:	e7ce      	b.n	8007040 <I2C_DMAMasterReceiveCplt+0x28>
      tmpisr |= I2C_IT_TCI;
 80070a2:	2340      	movs	r3, #64	; 0x40
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80070a4:	6821      	ldr	r1, [r4, #0]
 80070a6:	e7cb      	b.n	8007040 <I2C_DMAMasterReceiveCplt+0x28>
 80070a8:	ffff7fff 	.word	0xffff7fff
 80070ac:	08006df9 	.word	0x08006df9
 80070b0:	08006cb1 	.word	0x08006cb1

080070b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070b6:	2541      	movs	r5, #65	; 0x41
 80070b8:	5d43      	ldrb	r3, [r0, r5]
{
 80070ba:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070bc:	b2de      	uxtb	r6, r3
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d11b      	bne.n	80070fa <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070c2:	2740      	movs	r7, #64	; 0x40
 80070c4:	5dc3      	ldrb	r3, [r0, r7]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d017      	beq.n	80070fa <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070ca:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80070cc:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80070ce:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80070d0:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 80070d2:	6803      	ldr	r3, [r0, #0]
 80070d4:	681c      	ldr	r4, [r3, #0]
 80070d6:	438c      	bics	r4, r1
 80070d8:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070da:	681c      	ldr	r4, [r3, #0]
 80070dc:	4908      	ldr	r1, [pc, #32]	; (8007100 <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 80070de:	400c      	ands	r4, r1
 80070e0:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	4311      	orrs	r1, r2
 80070e6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070e8:	4661      	mov	r1, ip
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070f0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80070f2:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 80070f4:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 80070f6:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80070f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80070fa:	2002      	movs	r0, #2
 80070fc:	e7fc      	b.n	80070f8 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	ffffefff 	.word	0xffffefff

08007104 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007104:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007106:	2541      	movs	r5, #65	; 0x41
 8007108:	5d43      	ldrb	r3, [r0, r5]
 800710a:	b2de      	uxtb	r6, r3
 800710c:	2b20      	cmp	r3, #32
 800710e:	d11a      	bne.n	8007146 <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007110:	2740      	movs	r7, #64	; 0x40
 8007112:	5dc3      	ldrb	r3, [r0, r7]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d016      	beq.n	8007146 <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007118:	2324      	movs	r3, #36	; 0x24
 800711a:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800711c:	3b23      	subs	r3, #35	; 0x23
 800711e:	469c      	mov	ip, r3
 8007120:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007122:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8007124:	6822      	ldr	r2, [r4, #0]
 8007126:	439a      	bics	r2, r3
 8007128:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 800712a:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800712c:	4b07      	ldr	r3, [pc, #28]	; (800714c <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 800712e:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8007130:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 8007132:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8007134:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	4313      	orrs	r3, r2
 800713a:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800713c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800713e:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8007140:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8007142:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8007146:	2002      	movs	r0, #2
 8007148:	e7fc      	b.n	8007144 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 800714a:	46c0      	nop			; (mov r8, r8)
 800714c:	fffff0ff 	.word	0xfffff0ff

08007150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007150:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007152:	4c13      	ldr	r4, [pc, #76]	; (80071a0 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8007154:	4a13      	ldr	r2, [pc, #76]	; (80071a4 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8007156:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8007158:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800715a:	4013      	ands	r3, r2
 800715c:	4303      	orrs	r3, r0
 800715e:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007160:	2380      	movs	r3, #128	; 0x80
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4298      	cmp	r0, r3
 8007166:	d001      	beq.n	800716c <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8007168:	0028      	movs	r0, r5
 800716a:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800716c:	4b0e      	ldr	r3, [pc, #56]	; (80071a8 <HAL_PWREx_ControlVoltageScaling+0x58>)
 800716e:	490f      	ldr	r1, [pc, #60]	; (80071ac <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	0058      	lsls	r0, r3, #1
 8007174:	18c0      	adds	r0, r0, r3
 8007176:	0040      	lsls	r0, r0, #1
 8007178:	f7f8 ffe6 	bl	8000148 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800717c:	2280      	movs	r2, #128	; 0x80
 800717e:	6963      	ldr	r3, [r4, #20]
 8007180:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007182:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007184:	4213      	tst	r3, r2
 8007186:	d102      	bne.n	800718e <HAL_PWREx_ControlVoltageScaling+0x3e>
 8007188:	e7ee      	b.n	8007168 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 800718a:	2800      	cmp	r0, #0
 800718c:	d005      	beq.n	800719a <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800718e:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8007190:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007192:	4213      	tst	r3, r2
 8007194:	d1f9      	bne.n	800718a <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8007196:	2500      	movs	r5, #0
 8007198:	e7e6      	b.n	8007168 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 800719a:	2503      	movs	r5, #3
 800719c:	e7e4      	b.n	8007168 <HAL_PWREx_ControlVoltageScaling+0x18>
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	40007000 	.word	0x40007000
 80071a4:	fffff9ff 	.word	0xfffff9ff
 80071a8:	20000084 	.word	0x20000084
 80071ac:	000f4240 	.word	0x000f4240

080071b0 <HAL_RCC_GetSysClockFreq.part.0>:
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071b0:	2038      	movs	r0, #56	; 0x38
 80071b2:	4b19      	ldr	r3, [pc, #100]	; (8007218 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80071b4:	b510      	push	{r4, lr}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	4002      	ands	r2, r0
 80071ba:	2a10      	cmp	r2, #16
 80071bc:	d00d      	beq.n	80071da <HAL_RCC_GetSysClockFreq.part.0+0x2a>
        break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
    sysclockfreq = pllvco / pllr;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	4002      	ands	r2, r0
 80071c2:	2a20      	cmp	r2, #32
 80071c4:	d01f      	beq.n	8007206 <HAL_RCC_GetSysClockFreq.part.0+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	4018      	ands	r0, r3
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
  }
  else
  {
    sysclockfreq = 0U;
 80071ca:	3818      	subs	r0, #24
 80071cc:	4243      	negs	r3, r0
 80071ce:	4158      	adcs	r0, r3
 80071d0:	23fa      	movs	r3, #250	; 0xfa
 80071d2:	4240      	negs	r0, r0
 80071d4:	01db      	lsls	r3, r3, #7
 80071d6:	4018      	ands	r0, r3
  }

  return sysclockfreq;
}
 80071d8:	bd10      	pop	{r4, pc}
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80071da:	68da      	ldr	r2, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071dc:	68d9      	ldr	r1, [r3, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80071de:	43d2      	mvns	r2, r2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80071e0:	68d8      	ldr	r0, [r3, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071e2:	0649      	lsls	r1, r1, #25
 80071e4:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80071e6:	0440      	lsls	r0, r0, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071e8:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80071ea:	0e44      	lsrs	r4, r0, #25
    switch (pllsource)
 80071ec:	0792      	lsls	r2, r2, #30
 80071ee:	d00d      	beq.n	800720c <HAL_RCC_GetSysClockFreq.part.0+0x5c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80071f0:	480a      	ldr	r0, [pc, #40]	; (800721c <HAL_RCC_GetSysClockFreq.part.0+0x6c>)
 80071f2:	f7f8 ffa9 	bl	8000148 <__udivsi3>
 80071f6:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <HAL_RCC_GetSysClockFreq.part.0+0x68>)
 80071fa:	68d9      	ldr	r1, [r3, #12]
 80071fc:	0f49      	lsrs	r1, r1, #29
 80071fe:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8007200:	f7f8 ffa2 	bl	8000148 <__udivsi3>
 8007204:	e7e8      	b.n	80071d8 <HAL_RCC_GetSysClockFreq.part.0+0x28>
    sysclockfreq = LSE_VALUE;
 8007206:	2080      	movs	r0, #128	; 0x80
 8007208:	0200      	lsls	r0, r0, #8
 800720a:	e7e5      	b.n	80071d8 <HAL_RCC_GetSysClockFreq.part.0+0x28>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800720c:	4804      	ldr	r0, [pc, #16]	; (8007220 <HAL_RCC_GetSysClockFreq.part.0+0x70>)
 800720e:	f7f8 ff9b 	bl	8000148 <__udivsi3>
 8007212:	4360      	muls	r0, r4
        break;
 8007214:	e7f0      	b.n	80071f8 <HAL_RCC_GetSysClockFreq.part.0+0x48>
 8007216:	46c0      	nop			; (mov r8, r8)
 8007218:	40021000 	.word	0x40021000
 800721c:	00f42400 	.word	0x00f42400
 8007220:	007a1200 	.word	0x007a1200

08007224 <HAL_RCC_OscConfig>:
{
 8007224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007226:	46ce      	mov	lr, r9
 8007228:	4647      	mov	r7, r8
 800722a:	b580      	push	{r7, lr}
 800722c:	0004      	movs	r4, r0
 800722e:	b083      	sub	sp, #12
  if (RCC_OscInitStruct == NULL)
 8007230:	2800      	cmp	r0, #0
 8007232:	d100      	bne.n	8007236 <HAL_RCC_OscConfig+0x12>
 8007234:	e0f9      	b.n	800742a <HAL_RCC_OscConfig+0x206>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007236:	6803      	ldr	r3, [r0, #0]
 8007238:	07da      	lsls	r2, r3, #31
 800723a:	d531      	bpl.n	80072a0 <HAL_RCC_OscConfig+0x7c>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800723c:	2238      	movs	r2, #56	; 0x38
 800723e:	49c5      	ldr	r1, [pc, #788]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 8007240:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007242:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007244:	4002      	ands	r2, r0
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007246:	2a10      	cmp	r2, #16
 8007248:	d100      	bne.n	800724c <HAL_RCC_OscConfig+0x28>
 800724a:	e0f4      	b.n	8007436 <HAL_RCC_OscConfig+0x212>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800724c:	2a08      	cmp	r2, #8
 800724e:	d100      	bne.n	8007252 <HAL_RCC_OscConfig+0x2e>
 8007250:	e0f5      	b.n	800743e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007252:	2280      	movs	r2, #128	; 0x80
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	0252      	lsls	r2, r2, #9
 8007258:	4293      	cmp	r3, r2
 800725a:	d100      	bne.n	800725e <HAL_RCC_OscConfig+0x3a>
 800725c:	e102      	b.n	8007464 <HAL_RCC_OscConfig+0x240>
 800725e:	21a0      	movs	r1, #160	; 0xa0
 8007260:	02c9      	lsls	r1, r1, #11
 8007262:	428b      	cmp	r3, r1
 8007264:	d100      	bne.n	8007268 <HAL_RCC_OscConfig+0x44>
 8007266:	e1d6      	b.n	8007616 <HAL_RCC_OscConfig+0x3f2>
 8007268:	4dba      	ldr	r5, [pc, #744]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 800726a:	49bb      	ldr	r1, [pc, #748]	; (8007558 <HAL_RCC_OscConfig+0x334>)
 800726c:	682a      	ldr	r2, [r5, #0]
 800726e:	400a      	ands	r2, r1
 8007270:	602a      	str	r2, [r5, #0]
 8007272:	682a      	ldr	r2, [r5, #0]
 8007274:	49b9      	ldr	r1, [pc, #740]	; (800755c <HAL_RCC_OscConfig+0x338>)
 8007276:	400a      	ands	r2, r1
 8007278:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800727a:	2b00      	cmp	r3, #0
 800727c:	d000      	beq.n	8007280 <HAL_RCC_OscConfig+0x5c>
 800727e:	e0f5      	b.n	800746c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 8007280:	f7fd fc70 	bl	8004b64 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007284:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8007286:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007288:	02bf      	lsls	r7, r7, #10
 800728a:	e005      	b.n	8007298 <HAL_RCC_OscConfig+0x74>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800728c:	f7fd fc6a 	bl	8004b64 <HAL_GetTick>
 8007290:	1b80      	subs	r0, r0, r6
 8007292:	2864      	cmp	r0, #100	; 0x64
 8007294:	d900      	bls.n	8007298 <HAL_RCC_OscConfig+0x74>
 8007296:	e13d      	b.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	423b      	tst	r3, r7
 800729c:	d1f6      	bne.n	800728c <HAL_RCC_OscConfig+0x68>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	079a      	lsls	r2, r3, #30
 80072a2:	d52c      	bpl.n	80072fe <HAL_RCC_OscConfig+0xda>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072a4:	2338      	movs	r3, #56	; 0x38
 80072a6:	4aab      	ldr	r2, [pc, #684]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 80072a8:	6891      	ldr	r1, [r2, #8]
 80072aa:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80072ac:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80072ae:	2b10      	cmp	r3, #16
 80072b0:	d100      	bne.n	80072b4 <HAL_RCC_OscConfig+0x90>
 80072b2:	e0ec      	b.n	800748e <HAL_RCC_OscConfig+0x26a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d000      	beq.n	80072ba <HAL_RCC_OscConfig+0x96>
 80072b8:	e0ee      	b.n	8007498 <HAL_RCC_OscConfig+0x274>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	055b      	lsls	r3, r3, #21
 80072be:	d500      	bpl.n	80072c2 <HAL_RCC_OscConfig+0x9e>
 80072c0:	e0af      	b.n	8007422 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c2:	6851      	ldr	r1, [r2, #4]
 80072c4:	6963      	ldr	r3, [r4, #20]
 80072c6:	48a6      	ldr	r0, [pc, #664]	; (8007560 <HAL_RCC_OscConfig+0x33c>)
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	4001      	ands	r1, r0
 80072cc:	430b      	orrs	r3, r1
 80072ce:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80072d0:	4aa0      	ldr	r2, [pc, #640]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 80072d2:	49a4      	ldr	r1, [pc, #656]	; (8007564 <HAL_RCC_OscConfig+0x340>)
 80072d4:	6813      	ldr	r3, [r2, #0]
 80072d6:	400b      	ands	r3, r1
 80072d8:	6921      	ldr	r1, [r4, #16]
 80072da:	430b      	orrs	r3, r1
 80072dc:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80072de:	6813      	ldr	r3, [r2, #0]
 80072e0:	4aa1      	ldr	r2, [pc, #644]	; (8007568 <HAL_RCC_OscConfig+0x344>)
 80072e2:	049b      	lsls	r3, r3, #18
 80072e4:	0f5b      	lsrs	r3, r3, #29
 80072e6:	40da      	lsrs	r2, r3
 80072e8:	0013      	movs	r3, r2
 80072ea:	4aa0      	ldr	r2, [pc, #640]	; (800756c <HAL_RCC_OscConfig+0x348>)
 80072ec:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80072ee:	4ba0      	ldr	r3, [pc, #640]	; (8007570 <HAL_RCC_OscConfig+0x34c>)
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	f7fd fbf1 	bl	8004ad8 <HAL_InitTick>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d000      	beq.n	80072fc <HAL_RCC_OscConfig+0xd8>
 80072fa:	e096      	b.n	800742a <HAL_RCC_OscConfig+0x206>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	071a      	lsls	r2, r3, #28
 8007300:	d471      	bmi.n	80073e6 <HAL_RCC_OscConfig+0x1c2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007302:	075b      	lsls	r3, r3, #29
 8007304:	d545      	bpl.n	8007392 <HAL_RCC_OscConfig+0x16e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007306:	2338      	movs	r3, #56	; 0x38
 8007308:	4a92      	ldr	r2, [pc, #584]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 800730a:	6891      	ldr	r1, [r2, #8]
 800730c:	400b      	ands	r3, r1
 800730e:	2b20      	cmp	r3, #32
 8007310:	d100      	bne.n	8007314 <HAL_RCC_OscConfig+0xf0>
 8007312:	e0e7      	b.n	80074e4 <HAL_RCC_OscConfig+0x2c0>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007314:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8007316:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007318:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800731a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800731c:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800731e:	4219      	tst	r1, r3
 8007320:	d108      	bne.n	8007334 <HAL_RCC_OscConfig+0x110>
        __HAL_RCC_PWR_CLK_ENABLE();
 8007322:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8007324:	4319      	orrs	r1, r3
 8007326:	63d1      	str	r1, [r2, #60]	; 0x3c
 8007328:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800732a:	4013      	ands	r3, r2
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8007330:	2301      	movs	r3, #1
 8007332:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007334:	2780      	movs	r7, #128	; 0x80
 8007336:	4e8f      	ldr	r6, [pc, #572]	; (8007574 <HAL_RCC_OscConfig+0x350>)
 8007338:	007f      	lsls	r7, r7, #1
 800733a:	6833      	ldr	r3, [r6, #0]
 800733c:	423b      	tst	r3, r7
 800733e:	d100      	bne.n	8007342 <HAL_RCC_OscConfig+0x11e>
 8007340:	e0d9      	b.n	80074f6 <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007342:	68a3      	ldr	r3, [r4, #8]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d100      	bne.n	800734a <HAL_RCC_OscConfig+0x126>
 8007348:	e128      	b.n	800759c <HAL_RCC_OscConfig+0x378>
 800734a:	2b05      	cmp	r3, #5
 800734c:	d100      	bne.n	8007350 <HAL_RCC_OscConfig+0x12c>
 800734e:	e1bf      	b.n	80076d0 <HAL_RCC_OscConfig+0x4ac>
 8007350:	2101      	movs	r1, #1
 8007352:	4e80      	ldr	r6, [pc, #512]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 8007354:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8007356:	438a      	bics	r2, r1
 8007358:	65f2      	str	r2, [r6, #92]	; 0x5c
 800735a:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 800735c:	3103      	adds	r1, #3
 800735e:	438a      	bics	r2, r1
 8007360:	65f2      	str	r2, [r6, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007362:	2b00      	cmp	r3, #0
 8007364:	d000      	beq.n	8007368 <HAL_RCC_OscConfig+0x144>
 8007366:	e11d      	b.n	80075a4 <HAL_RCC_OscConfig+0x380>
        tickstart = HAL_GetTick();
 8007368:	f7fd fbfc 	bl	8004b64 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800736c:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 800736e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007370:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007372:	4d81      	ldr	r5, [pc, #516]	; (8007578 <HAL_RCC_OscConfig+0x354>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007374:	e005      	b.n	8007382 <HAL_RCC_OscConfig+0x15e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007376:	f7fd fbf5 	bl	8004b64 <HAL_GetTick>
 800737a:	1bc0      	subs	r0, r0, r7
 800737c:	42a8      	cmp	r0, r5
 800737e:	d900      	bls.n	8007382 <HAL_RCC_OscConfig+0x15e>
 8007380:	e0c8      	b.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007382:	4642      	mov	r2, r8
 8007384:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8007386:	421a      	tst	r2, r3
 8007388:	d1f5      	bne.n	8007376 <HAL_RCC_OscConfig+0x152>
      if (pwrclkchanged == SET)
 800738a:	464b      	mov	r3, r9
 800738c:	2b01      	cmp	r3, #1
 800738e:	d100      	bne.n	8007392 <HAL_RCC_OscConfig+0x16e>
 8007390:	e15a      	b.n	8007648 <HAL_RCC_OscConfig+0x424>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007392:	69e3      	ldr	r3, [r4, #28]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d024      	beq.n	80073e2 <HAL_RCC_OscConfig+0x1be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007398:	2238      	movs	r2, #56	; 0x38
 800739a:	4d6e      	ldr	r5, [pc, #440]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 800739c:	68a9      	ldr	r1, [r5, #8]
 800739e:	400a      	ands	r2, r1
 80073a0:	2a10      	cmp	r2, #16
 80073a2:	d100      	bne.n	80073a6 <HAL_RCC_OscConfig+0x182>
 80073a4:	e110      	b.n	80075c8 <HAL_RCC_OscConfig+0x3a4>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d100      	bne.n	80073ac <HAL_RCC_OscConfig+0x188>
 80073aa:	e153      	b.n	8007654 <HAL_RCC_OscConfig+0x430>
        __HAL_RCC_PLL_DISABLE();
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	4a73      	ldr	r2, [pc, #460]	; (800757c <HAL_RCC_OscConfig+0x358>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073b0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80073b2:	4013      	ands	r3, r2
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80073b4:	2203      	movs	r2, #3
        __HAL_RCC_PLL_DISABLE();
 80073b6:	602b      	str	r3, [r5, #0]
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80073b8:	68eb      	ldr	r3, [r5, #12]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073ba:	04b6      	lsls	r6, r6, #18
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80073bc:	4393      	bics	r3, r2
 80073be:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80073c0:	68eb      	ldr	r3, [r5, #12]
 80073c2:	4a6f      	ldr	r2, [pc, #444]	; (8007580 <HAL_RCC_OscConfig+0x35c>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80073c8:	f7fd fbcc 	bl	8004b64 <HAL_GetTick>
 80073cc:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073ce:	e005      	b.n	80073dc <HAL_RCC_OscConfig+0x1b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d0:	f7fd fbc8 	bl	8004b64 <HAL_GetTick>
 80073d4:	1b00      	subs	r0, r0, r4
 80073d6:	2802      	cmp	r0, #2
 80073d8:	d900      	bls.n	80073dc <HAL_RCC_OscConfig+0x1b8>
 80073da:	e09b      	b.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	4233      	tst	r3, r6
 80073e0:	d1f6      	bne.n	80073d0 <HAL_RCC_OscConfig+0x1ac>
  return HAL_OK;
 80073e2:	2000      	movs	r0, #0
 80073e4:	e022      	b.n	800742c <HAL_RCC_OscConfig+0x208>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80073e6:	2238      	movs	r2, #56	; 0x38
 80073e8:	4d5a      	ldr	r5, [pc, #360]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 80073ea:	68a9      	ldr	r1, [r5, #8]
 80073ec:	400a      	ands	r2, r1
 80073ee:	2a18      	cmp	r2, #24
 80073f0:	d02f      	beq.n	8007452 <HAL_RCC_OscConfig+0x22e>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80073f2:	69a3      	ldr	r3, [r4, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d100      	bne.n	80073fa <HAL_RCC_OscConfig+0x1d6>
 80073f8:	e08e      	b.n	8007518 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_LSI_ENABLE();
 80073fa:	2201      	movs	r2, #1
 80073fc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073fe:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8007400:	4313      	orrs	r3, r2
 8007402:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007404:	f7fd fbae 	bl	8004b64 <HAL_GetTick>
 8007408:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800740a:	e005      	b.n	8007418 <HAL_RCC_OscConfig+0x1f4>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800740c:	f7fd fbaa 	bl	8004b64 <HAL_GetTick>
 8007410:	1b80      	subs	r0, r0, r6
 8007412:	2802      	cmp	r0, #2
 8007414:	d900      	bls.n	8007418 <HAL_RCC_OscConfig+0x1f4>
 8007416:	e07d      	b.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007418:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800741a:	421f      	tst	r7, r3
 800741c:	d0f6      	beq.n	800740c <HAL_RCC_OscConfig+0x1e8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	e76f      	b.n	8007302 <HAL_RCC_OscConfig+0xde>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007422:	68e3      	ldr	r3, [r4, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d000      	beq.n	800742a <HAL_RCC_OscConfig+0x206>
 8007428:	e74b      	b.n	80072c2 <HAL_RCC_OscConfig+0x9e>
    return HAL_ERROR;
 800742a:	2001      	movs	r0, #1
}
 800742c:	b003      	add	sp, #12
 800742e:	bcc0      	pop	{r6, r7}
 8007430:	46b9      	mov	r9, r7
 8007432:	46b0      	mov	r8, r6
 8007434:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007436:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007438:	078a      	lsls	r2, r1, #30
 800743a:	d000      	beq.n	800743e <HAL_RCC_OscConfig+0x21a>
 800743c:	e709      	b.n	8007252 <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800743e:	4a45      	ldr	r2, [pc, #276]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 8007440:	6812      	ldr	r2, [r2, #0]
 8007442:	0392      	lsls	r2, r2, #14
 8007444:	d400      	bmi.n	8007448 <HAL_RCC_OscConfig+0x224>
 8007446:	e72b      	b.n	80072a0 <HAL_RCC_OscConfig+0x7c>
 8007448:	6862      	ldr	r2, [r4, #4]
 800744a:	2a00      	cmp	r2, #0
 800744c:	d000      	beq.n	8007450 <HAL_RCC_OscConfig+0x22c>
 800744e:	e727      	b.n	80072a0 <HAL_RCC_OscConfig+0x7c>
 8007450:	e7eb      	b.n	800742a <HAL_RCC_OscConfig+0x206>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8007452:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8007454:	0792      	lsls	r2, r2, #30
 8007456:	d400      	bmi.n	800745a <HAL_RCC_OscConfig+0x236>
 8007458:	e753      	b.n	8007302 <HAL_RCC_OscConfig+0xde>
 800745a:	69a2      	ldr	r2, [r4, #24]
 800745c:	2a00      	cmp	r2, #0
 800745e:	d000      	beq.n	8007462 <HAL_RCC_OscConfig+0x23e>
 8007460:	e74f      	b.n	8007302 <HAL_RCC_OscConfig+0xde>
 8007462:	e7e2      	b.n	800742a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007464:	4a3b      	ldr	r2, [pc, #236]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 8007466:	6811      	ldr	r1, [r2, #0]
 8007468:	430b      	orrs	r3, r1
 800746a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800746c:	f7fd fb7a 	bl	8004b64 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007470:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8007472:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007474:	4f37      	ldr	r7, [pc, #220]	; (8007554 <HAL_RCC_OscConfig+0x330>)
 8007476:	02b6      	lsls	r6, r6, #10
 8007478:	e004      	b.n	8007484 <HAL_RCC_OscConfig+0x260>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800747a:	f7fd fb73 	bl	8004b64 <HAL_GetTick>
 800747e:	1b40      	subs	r0, r0, r5
 8007480:	2864      	cmp	r0, #100	; 0x64
 8007482:	d847      	bhi.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	4233      	tst	r3, r6
 8007488:	d0f7      	beq.n	800747a <HAL_RCC_OscConfig+0x256>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	e708      	b.n	80072a0 <HAL_RCC_OscConfig+0x7c>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800748e:	3b0d      	subs	r3, #13
 8007490:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007492:	2b02      	cmp	r3, #2
 8007494:	d100      	bne.n	8007498 <HAL_RCC_OscConfig+0x274>
 8007496:	e0c8      	b.n	800762a <HAL_RCC_OscConfig+0x406>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007498:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800749a:	4d2e      	ldr	r5, [pc, #184]	; (8007554 <HAL_RCC_OscConfig+0x330>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800749c:	2b00      	cmp	r3, #0
 800749e:	d04e      	beq.n	800753e <HAL_RCC_OscConfig+0x31a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	4a30      	ldr	r2, [pc, #192]	; (8007564 <HAL_RCC_OscConfig+0x340>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074a4:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80074a6:	4013      	ands	r3, r2
 80074a8:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074aa:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80074ac:	4313      	orrs	r3, r2
 80074ae:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80074b0:	2380      	movs	r3, #128	; 0x80
 80074b2:	682a      	ldr	r2, [r5, #0]
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	4313      	orrs	r3, r2
 80074b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80074ba:	f7fd fb53 	bl	8004b64 <HAL_GetTick>
 80074be:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074c0:	e004      	b.n	80074cc <HAL_RCC_OscConfig+0x2a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074c2:	f7fd fb4f 	bl	8004b64 <HAL_GetTick>
 80074c6:	1b80      	subs	r0, r0, r6
 80074c8:	2802      	cmp	r0, #2
 80074ca:	d823      	bhi.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	423b      	tst	r3, r7
 80074d0:	d0f7      	beq.n	80074c2 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074d2:	686a      	ldr	r2, [r5, #4]
 80074d4:	6963      	ldr	r3, [r4, #20]
 80074d6:	4922      	ldr	r1, [pc, #136]	; (8007560 <HAL_RCC_OscConfig+0x33c>)
 80074d8:	021b      	lsls	r3, r3, #8
 80074da:	400a      	ands	r2, r1
 80074dc:	4313      	orrs	r3, r2
 80074de:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	e70c      	b.n	80072fe <HAL_RCC_OscConfig+0xda>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80074e4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80074e6:	079b      	lsls	r3, r3, #30
 80074e8:	d400      	bmi.n	80074ec <HAL_RCC_OscConfig+0x2c8>
 80074ea:	e752      	b.n	8007392 <HAL_RCC_OscConfig+0x16e>
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d000      	beq.n	80074f4 <HAL_RCC_OscConfig+0x2d0>
 80074f2:	e74e      	b.n	8007392 <HAL_RCC_OscConfig+0x16e>
 80074f4:	e799      	b.n	800742a <HAL_RCC_OscConfig+0x206>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074f6:	6833      	ldr	r3, [r6, #0]
 80074f8:	433b      	orrs	r3, r7
 80074fa:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80074fc:	f7fd fb32 	bl	8004b64 <HAL_GetTick>
 8007500:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007502:	6833      	ldr	r3, [r6, #0]
 8007504:	423b      	tst	r3, r7
 8007506:	d000      	beq.n	800750a <HAL_RCC_OscConfig+0x2e6>
 8007508:	e71b      	b.n	8007342 <HAL_RCC_OscConfig+0x11e>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800750a:	f7fd fb2b 	bl	8004b64 <HAL_GetTick>
 800750e:	1b40      	subs	r0, r0, r5
 8007510:	2802      	cmp	r0, #2
 8007512:	d9f6      	bls.n	8007502 <HAL_RCC_OscConfig+0x2de>
            return HAL_TIMEOUT;
 8007514:	2003      	movs	r0, #3
 8007516:	e789      	b.n	800742c <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_LSI_DISABLE();
 8007518:	2201      	movs	r2, #1
 800751a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800751c:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 800751e:	4393      	bics	r3, r2
 8007520:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007522:	f7fd fb1f 	bl	8004b64 <HAL_GetTick>
 8007526:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007528:	e004      	b.n	8007534 <HAL_RCC_OscConfig+0x310>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800752a:	f7fd fb1b 	bl	8004b64 <HAL_GetTick>
 800752e:	1b80      	subs	r0, r0, r6
 8007530:	2802      	cmp	r0, #2
 8007532:	d8ef      	bhi.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007534:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8007536:	421f      	tst	r7, r3
 8007538:	d1f7      	bne.n	800752a <HAL_RCC_OscConfig+0x306>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	e6e1      	b.n	8007302 <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	4a10      	ldr	r2, [pc, #64]	; (8007584 <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007542:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8007544:	4013      	ands	r3, r2
 8007546:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007548:	f7fd fb0c 	bl	8004b64 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800754c:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 800754e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007550:	e01f      	b.n	8007592 <HAL_RCC_OscConfig+0x36e>
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	40021000 	.word	0x40021000
 8007558:	fffeffff 	.word	0xfffeffff
 800755c:	fffbffff 	.word	0xfffbffff
 8007560:	ffff80ff 	.word	0xffff80ff
 8007564:	ffffc7ff 	.word	0xffffc7ff
 8007568:	00f42400 	.word	0x00f42400
 800756c:	20000084 	.word	0x20000084
 8007570:	2000009c 	.word	0x2000009c
 8007574:	40007000 	.word	0x40007000
 8007578:	00001388 	.word	0x00001388
 800757c:	feffffff 	.word	0xfeffffff
 8007580:	effeffff 	.word	0xeffeffff
 8007584:	fffffeff 	.word	0xfffffeff
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007588:	f7fd faec 	bl	8004b64 <HAL_GetTick>
 800758c:	1b80      	subs	r0, r0, r6
 800758e:	2802      	cmp	r0, #2
 8007590:	d8c0      	bhi.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007592:	682b      	ldr	r3, [r5, #0]
 8007594:	423b      	tst	r3, r7
 8007596:	d1f7      	bne.n	8007588 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	e6b0      	b.n	80072fe <HAL_RCC_OscConfig+0xda>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800759c:	4951      	ldr	r1, [pc, #324]	; (80076e4 <HAL_RCC_OscConfig+0x4c0>)
 800759e:	6dca      	ldr	r2, [r1, #92]	; 0x5c
 80075a0:	4313      	orrs	r3, r2
 80075a2:	65cb      	str	r3, [r1, #92]	; 0x5c
        tickstart = HAL_GetTick();
 80075a4:	f7fd fade 	bl	8004b64 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075a8:	4b4e      	ldr	r3, [pc, #312]	; (80076e4 <HAL_RCC_OscConfig+0x4c0>)
        tickstart = HAL_GetTick();
 80075aa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075ac:	4698      	mov	r8, r3
 80075ae:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b0:	4d4d      	ldr	r5, [pc, #308]	; (80076e8 <HAL_RCC_OscConfig+0x4c4>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075b2:	e004      	b.n	80075be <HAL_RCC_OscConfig+0x39a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075b4:	f7fd fad6 	bl	8004b64 <HAL_GetTick>
 80075b8:	1b80      	subs	r0, r0, r6
 80075ba:	42a8      	cmp	r0, r5
 80075bc:	d8aa      	bhi.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075be:	4643      	mov	r3, r8
 80075c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c2:	421f      	tst	r7, r3
 80075c4:	d0f6      	beq.n	80075b4 <HAL_RCC_OscConfig+0x390>
 80075c6:	e6e0      	b.n	800738a <HAL_RCC_OscConfig+0x166>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d100      	bne.n	80075ce <HAL_RCC_OscConfig+0x3aa>
 80075cc:	e72d      	b.n	800742a <HAL_RCC_OscConfig+0x206>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ce:	2303      	movs	r3, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80075d0:	68ea      	ldr	r2, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d2:	6a21      	ldr	r1, [r4, #32]
 80075d4:	4013      	ands	r3, r2
 80075d6:	428b      	cmp	r3, r1
 80075d8:	d000      	beq.n	80075dc <HAL_RCC_OscConfig+0x3b8>
 80075da:	e726      	b.n	800742a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075dc:	2370      	movs	r3, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075de:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075e0:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075e2:	428b      	cmp	r3, r1
 80075e4:	d000      	beq.n	80075e8 <HAL_RCC_OscConfig+0x3c4>
 80075e6:	e720      	b.n	800742a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075e8:	21fe      	movs	r1, #254	; 0xfe
 80075ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80075ec:	01c9      	lsls	r1, r1, #7
 80075ee:	4011      	ands	r1, r2
 80075f0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80075f2:	4299      	cmp	r1, r3
 80075f4:	d000      	beq.n	80075f8 <HAL_RCC_OscConfig+0x3d4>
 80075f6:	e718      	b.n	800742a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075f8:	23f8      	movs	r3, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80075fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80075fc:	039b      	lsls	r3, r3, #14
 80075fe:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007600:	428b      	cmp	r3, r1
 8007602:	d000      	beq.n	8007606 <HAL_RCC_OscConfig+0x3e2>
 8007604:	e711      	b.n	800742a <HAL_RCC_OscConfig+0x206>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007606:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007608:	0f52      	lsrs	r2, r2, #29
 800760a:	0752      	lsls	r2, r2, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800760c:	429a      	cmp	r2, r3
 800760e:	d000      	beq.n	8007612 <HAL_RCC_OscConfig+0x3ee>
 8007610:	e70b      	b.n	800742a <HAL_RCC_OscConfig+0x206>
  return HAL_OK;
 8007612:	2000      	movs	r0, #0
 8007614:	e70a      	b.n	800742c <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007616:	2180      	movs	r1, #128	; 0x80
 8007618:	4b32      	ldr	r3, [pc, #200]	; (80076e4 <HAL_RCC_OscConfig+0x4c0>)
 800761a:	02c9      	lsls	r1, r1, #11
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	4301      	orrs	r1, r0
 8007620:	6019      	str	r1, [r3, #0]
 8007622:	6819      	ldr	r1, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007628:	e720      	b.n	800746c <HAL_RCC_OscConfig+0x248>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	055b      	lsls	r3, r3, #21
 800762e:	d503      	bpl.n	8007638 <HAL_RCC_OscConfig+0x414>
 8007630:	68e3      	ldr	r3, [r4, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d100      	bne.n	8007638 <HAL_RCC_OscConfig+0x414>
 8007636:	e6f8      	b.n	800742a <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007638:	6851      	ldr	r1, [r2, #4]
 800763a:	6963      	ldr	r3, [r4, #20]
 800763c:	482b      	ldr	r0, [pc, #172]	; (80076ec <HAL_RCC_OscConfig+0x4c8>)
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	4001      	ands	r1, r0
 8007642:	430b      	orrs	r3, r1
 8007644:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007646:	e652      	b.n	80072ee <HAL_RCC_OscConfig+0xca>
        __HAL_RCC_PWR_CLK_DISABLE();
 8007648:	4a26      	ldr	r2, [pc, #152]	; (80076e4 <HAL_RCC_OscConfig+0x4c0>)
 800764a:	4929      	ldr	r1, [pc, #164]	; (80076f0 <HAL_RCC_OscConfig+0x4cc>)
 800764c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800764e:	400b      	ands	r3, r1
 8007650:	63d3      	str	r3, [r2, #60]	; 0x3c
 8007652:	e69e      	b.n	8007392 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL_DISABLE();
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	4a27      	ldr	r2, [pc, #156]	; (80076f4 <HAL_RCC_OscConfig+0x4d0>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007658:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800765a:	4013      	ands	r3, r2
 800765c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800765e:	f7fd fa81 	bl	8004b64 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007662:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8007664:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007666:	e005      	b.n	8007674 <HAL_RCC_OscConfig+0x450>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007668:	f7fd fa7c 	bl	8004b64 <HAL_GetTick>
 800766c:	1b80      	subs	r0, r0, r6
 800766e:	2802      	cmp	r0, #2
 8007670:	d900      	bls.n	8007674 <HAL_RCC_OscConfig+0x450>
 8007672:	e74f      	b.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	423b      	tst	r3, r7
 8007678:	d1f6      	bne.n	8007668 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800767a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800767c:	6a23      	ldr	r3, [r4, #32]
 800767e:	68ea      	ldr	r2, [r5, #12]
 8007680:	430b      	orrs	r3, r1
 8007682:	491d      	ldr	r1, [pc, #116]	; (80076f8 <HAL_RCC_OscConfig+0x4d4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007684:	4e17      	ldr	r6, [pc, #92]	; (80076e4 <HAL_RCC_OscConfig+0x4c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007686:	400a      	ands	r2, r1
 8007688:	4313      	orrs	r3, r2
 800768a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800768c:	4313      	orrs	r3, r2
 800768e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007690:	4313      	orrs	r3, r2
 8007692:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007694:	0212      	lsls	r2, r2, #8
 8007696:	4313      	orrs	r3, r2
 8007698:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800769a:	2380      	movs	r3, #128	; 0x80
 800769c:	682a      	ldr	r2, [r5, #0]
 800769e:	045b      	lsls	r3, r3, #17
 80076a0:	4313      	orrs	r3, r2
 80076a2:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	68ea      	ldr	r2, [r5, #12]
 80076a8:	055b      	lsls	r3, r3, #21
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80076ae:	f7fd fa59 	bl	8004b64 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076b2:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80076b4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076b6:	04ad      	lsls	r5, r5, #18
 80076b8:	e005      	b.n	80076c6 <HAL_RCC_OscConfig+0x4a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ba:	f7fd fa53 	bl	8004b64 <HAL_GetTick>
 80076be:	1b00      	subs	r0, r0, r4
 80076c0:	2802      	cmp	r0, #2
 80076c2:	d900      	bls.n	80076c6 <HAL_RCC_OscConfig+0x4a2>
 80076c4:	e726      	b.n	8007514 <HAL_RCC_OscConfig+0x2f0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076c6:	6833      	ldr	r3, [r6, #0]
 80076c8:	422b      	tst	r3, r5
 80076ca:	d0f6      	beq.n	80076ba <HAL_RCC_OscConfig+0x496>
  return HAL_OK;
 80076cc:	2000      	movs	r0, #0
 80076ce:	e6ad      	b.n	800742c <HAL_RCC_OscConfig+0x208>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076d0:	2104      	movs	r1, #4
 80076d2:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <HAL_RCC_OscConfig+0x4c0>)
 80076d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076d6:	430a      	orrs	r2, r1
 80076d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80076da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80076dc:	3903      	subs	r1, #3
 80076de:	430a      	orrs	r2, r1
 80076e0:	65da      	str	r2, [r3, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80076e2:	e75f      	b.n	80075a4 <HAL_RCC_OscConfig+0x380>
 80076e4:	40021000 	.word	0x40021000
 80076e8:	00001388 	.word	0x00001388
 80076ec:	ffff80ff 	.word	0xffff80ff
 80076f0:	efffffff 	.word	0xefffffff
 80076f4:	feffffff 	.word	0xfeffffff
 80076f8:	1fc1808c 	.word	0x1fc1808c

080076fc <HAL_RCC_ClockConfig>:
{
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	46ce      	mov	lr, r9
 8007700:	4647      	mov	r7, r8
 8007702:	0005      	movs	r5, r0
 8007704:	000c      	movs	r4, r1
 8007706:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8007708:	2800      	cmp	r0, #0
 800770a:	d027      	beq.n	800775c <HAL_RCC_ClockConfig+0x60>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800770c:	2207      	movs	r2, #7
 800770e:	4e5e      	ldr	r6, [pc, #376]	; (8007888 <HAL_RCC_ClockConfig+0x18c>)
 8007710:	6833      	ldr	r3, [r6, #0]
 8007712:	4013      	ands	r3, r2
 8007714:	428b      	cmp	r3, r1
 8007716:	d200      	bcs.n	800771a <HAL_RCC_ClockConfig+0x1e>
 8007718:	e06e      	b.n	80077f8 <HAL_RCC_ClockConfig+0xfc>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800771a:	682b      	ldr	r3, [r5, #0]
 800771c:	079a      	lsls	r2, r3, #30
 800771e:	d50e      	bpl.n	800773e <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007720:	075a      	lsls	r2, r3, #29
 8007722:	d505      	bpl.n	8007730 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007724:	22e0      	movs	r2, #224	; 0xe0
 8007726:	4959      	ldr	r1, [pc, #356]	; (800788c <HAL_RCC_ClockConfig+0x190>)
 8007728:	01d2      	lsls	r2, r2, #7
 800772a:	6888      	ldr	r0, [r1, #8]
 800772c:	4302      	orrs	r2, r0
 800772e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007730:	4956      	ldr	r1, [pc, #344]	; (800788c <HAL_RCC_ClockConfig+0x190>)
 8007732:	4857      	ldr	r0, [pc, #348]	; (8007890 <HAL_RCC_ClockConfig+0x194>)
 8007734:	688a      	ldr	r2, [r1, #8]
 8007736:	4002      	ands	r2, r0
 8007738:	68a8      	ldr	r0, [r5, #8]
 800773a:	4302      	orrs	r2, r0
 800773c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800773e:	07db      	lsls	r3, r3, #31
 8007740:	d52e      	bpl.n	80077a0 <HAL_RCC_ClockConfig+0xa4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007742:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007744:	4a51      	ldr	r2, [pc, #324]	; (800788c <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007746:	2b01      	cmp	r3, #1
 8007748:	d100      	bne.n	800774c <HAL_RCC_ClockConfig+0x50>
 800774a:	e08a      	b.n	8007862 <HAL_RCC_ClockConfig+0x166>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800774c:	2b02      	cmp	r3, #2
 800774e:	d00a      	beq.n	8007766 <HAL_RCC_ClockConfig+0x6a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007750:	2b00      	cmp	r3, #0
 8007752:	d000      	beq.n	8007756 <HAL_RCC_ClockConfig+0x5a>
 8007754:	e089      	b.n	800786a <HAL_RCC_ClockConfig+0x16e>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	0552      	lsls	r2, r2, #21
 800775a:	d407      	bmi.n	800776c <HAL_RCC_ClockConfig+0x70>
    return HAL_ERROR;
 800775c:	2001      	movs	r0, #1
}
 800775e:	bcc0      	pop	{r6, r7}
 8007760:	46b9      	mov	r9, r7
 8007762:	46b0      	mov	r8, r6
 8007764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	0192      	lsls	r2, r2, #6
 800776a:	d5f7      	bpl.n	800775c <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800776c:	2107      	movs	r1, #7
 800776e:	4e47      	ldr	r6, [pc, #284]	; (800788c <HAL_RCC_ClockConfig+0x190>)
 8007770:	68b2      	ldr	r2, [r6, #8]
 8007772:	438a      	bics	r2, r1
 8007774:	4313      	orrs	r3, r2
 8007776:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007778:	f7fd f9f4 	bl	8004b64 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800777c:	2338      	movs	r3, #56	; 0x38
 800777e:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007780:	4b44      	ldr	r3, [pc, #272]	; (8007894 <HAL_RCC_ClockConfig+0x198>)
    tickstart = HAL_GetTick();
 8007782:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007784:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007786:	e004      	b.n	8007792 <HAL_RCC_ClockConfig+0x96>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007788:	f7fd f9ec 	bl	8004b64 <HAL_GetTick>
 800778c:	1bc0      	subs	r0, r0, r7
 800778e:	4548      	cmp	r0, r9
 8007790:	d848      	bhi.n	8007824 <HAL_RCC_ClockConfig+0x128>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007792:	4643      	mov	r3, r8
 8007794:	68b2      	ldr	r2, [r6, #8]
 8007796:	401a      	ands	r2, r3
 8007798:	686b      	ldr	r3, [r5, #4]
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	429a      	cmp	r2, r3
 800779e:	d1f3      	bne.n	8007788 <HAL_RCC_ClockConfig+0x8c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077a0:	2207      	movs	r2, #7
 80077a2:	4e39      	ldr	r6, [pc, #228]	; (8007888 <HAL_RCC_ClockConfig+0x18c>)
 80077a4:	6833      	ldr	r3, [r6, #0]
 80077a6:	4013      	ands	r3, r2
 80077a8:	42a3      	cmp	r3, r4
 80077aa:	d843      	bhi.n	8007834 <HAL_RCC_ClockConfig+0x138>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	075b      	lsls	r3, r3, #29
 80077b0:	d506      	bpl.n	80077c0 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80077b2:	4a36      	ldr	r2, [pc, #216]	; (800788c <HAL_RCC_ClockConfig+0x190>)
 80077b4:	4938      	ldr	r1, [pc, #224]	; (8007898 <HAL_RCC_ClockConfig+0x19c>)
 80077b6:	6893      	ldr	r3, [r2, #8]
 80077b8:	400b      	ands	r3, r1
 80077ba:	68e9      	ldr	r1, [r5, #12]
 80077bc:	430b      	orrs	r3, r1
 80077be:	6093      	str	r3, [r2, #8]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80077c0:	2338      	movs	r3, #56	; 0x38
 80077c2:	4a32      	ldr	r2, [pc, #200]	; (800788c <HAL_RCC_ClockConfig+0x190>)
 80077c4:	6891      	ldr	r1, [r2, #8]
 80077c6:	420b      	tst	r3, r1
 80077c8:	d02e      	beq.n	8007828 <HAL_RCC_ClockConfig+0x12c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80077ca:	6892      	ldr	r2, [r2, #8]
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d057      	beq.n	8007882 <HAL_RCC_ClockConfig+0x186>
 80077d2:	f7ff fced 	bl	80071b0 <HAL_RCC_GetSysClockFreq.part.0>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80077d6:	4b2d      	ldr	r3, [pc, #180]	; (800788c <HAL_RCC_ClockConfig+0x190>)
 80077d8:	4a30      	ldr	r2, [pc, #192]	; (800789c <HAL_RCC_ClockConfig+0x1a0>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	051b      	lsls	r3, r3, #20
 80077de:	0f1b      	lsrs	r3, r3, #28
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	589b      	ldr	r3, [r3, r2]
 80077e4:	221f      	movs	r2, #31
 80077e6:	4013      	ands	r3, r2
 80077e8:	40d8      	lsrs	r0, r3
 80077ea:	4b2d      	ldr	r3, [pc, #180]	; (80078a0 <HAL_RCC_ClockConfig+0x1a4>)
 80077ec:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80077ee:	4b2d      	ldr	r3, [pc, #180]	; (80078a4 <HAL_RCC_ClockConfig+0x1a8>)
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f7fd f971 	bl	8004ad8 <HAL_InitTick>
 80077f6:	e7b2      	b.n	800775e <HAL_RCC_ClockConfig+0x62>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f8:	6833      	ldr	r3, [r6, #0]
 80077fa:	4393      	bics	r3, r2
 80077fc:	430b      	orrs	r3, r1
 80077fe:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007800:	f7fd f9b0 	bl	8004b64 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007804:	2307      	movs	r3, #7
 8007806:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007808:	4b22      	ldr	r3, [pc, #136]	; (8007894 <HAL_RCC_ClockConfig+0x198>)
    tickstart = HAL_GetTick();
 800780a:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800780c:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800780e:	4642      	mov	r2, r8
 8007810:	6833      	ldr	r3, [r6, #0]
 8007812:	4013      	ands	r3, r2
 8007814:	42a3      	cmp	r3, r4
 8007816:	d100      	bne.n	800781a <HAL_RCC_ClockConfig+0x11e>
 8007818:	e77f      	b.n	800771a <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800781a:	f7fd f9a3 	bl	8004b64 <HAL_GetTick>
 800781e:	1bc0      	subs	r0, r0, r7
 8007820:	4548      	cmp	r0, r9
 8007822:	d9f4      	bls.n	800780e <HAL_RCC_ClockConfig+0x112>
        return HAL_TIMEOUT;
 8007824:	2003      	movs	r0, #3
 8007826:	e79a      	b.n	800775e <HAL_RCC_ClockConfig+0x62>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007828:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 800782a:	481f      	ldr	r0, [pc, #124]	; (80078a8 <HAL_RCC_ClockConfig+0x1ac>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800782c:	049b      	lsls	r3, r3, #18
 800782e:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007830:	40d8      	lsrs	r0, r3
 8007832:	e7d0      	b.n	80077d6 <HAL_RCC_ClockConfig+0xda>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007834:	6833      	ldr	r3, [r6, #0]
 8007836:	4393      	bics	r3, r2
 8007838:	4323      	orrs	r3, r4
 800783a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800783c:	f7fd f992 	bl	8004b64 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007840:	2307      	movs	r3, #7
 8007842:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007844:	4b13      	ldr	r3, [pc, #76]	; (8007894 <HAL_RCC_ClockConfig+0x198>)
    tickstart = HAL_GetTick();
 8007846:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007848:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800784a:	4642      	mov	r2, r8
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	4013      	ands	r3, r2
 8007850:	42a3      	cmp	r3, r4
 8007852:	d0ab      	beq.n	80077ac <HAL_RCC_ClockConfig+0xb0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007854:	f7fd f986 	bl	8004b64 <HAL_GetTick>
 8007858:	1bc0      	subs	r0, r0, r7
 800785a:	4548      	cmp	r0, r9
 800785c:	d9f5      	bls.n	800784a <HAL_RCC_ClockConfig+0x14e>
        return HAL_TIMEOUT;
 800785e:	2003      	movs	r0, #3
 8007860:	e77d      	b.n	800775e <HAL_RCC_ClockConfig+0x62>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	0392      	lsls	r2, r2, #14
 8007866:	d481      	bmi.n	800776c <HAL_RCC_ClockConfig+0x70>
 8007868:	e778      	b.n	800775c <HAL_RCC_ClockConfig+0x60>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800786a:	2b03      	cmp	r3, #3
 800786c:	d004      	beq.n	8007878 <HAL_RCC_ClockConfig+0x17c>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800786e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007870:	0792      	lsls	r2, r2, #30
 8007872:	d500      	bpl.n	8007876 <HAL_RCC_ClockConfig+0x17a>
 8007874:	e77a      	b.n	800776c <HAL_RCC_ClockConfig+0x70>
 8007876:	e771      	b.n	800775c <HAL_RCC_ClockConfig+0x60>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007878:	6e12      	ldr	r2, [r2, #96]	; 0x60
 800787a:	0792      	lsls	r2, r2, #30
 800787c:	d500      	bpl.n	8007880 <HAL_RCC_ClockConfig+0x184>
 800787e:	e775      	b.n	800776c <HAL_RCC_ClockConfig+0x70>
 8007880:	e76c      	b.n	800775c <HAL_RCC_ClockConfig+0x60>
    sysclockfreq = HSE_VALUE;
 8007882:	480a      	ldr	r0, [pc, #40]	; (80078ac <HAL_RCC_ClockConfig+0x1b0>)
 8007884:	e7a7      	b.n	80077d6 <HAL_RCC_ClockConfig+0xda>
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	40022000 	.word	0x40022000
 800788c:	40021000 	.word	0x40021000
 8007890:	fffff0ff 	.word	0xfffff0ff
 8007894:	00001388 	.word	0x00001388
 8007898:	ffff8fff 	.word	0xffff8fff
 800789c:	0800ce40 	.word	0x0800ce40
 80078a0:	20000084 	.word	0x20000084
 80078a4:	2000009c 	.word	0x2000009c
 80078a8:	00f42400 	.word	0x00f42400
 80078ac:	007a1200 	.word	0x007a1200

080078b0 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078b0:	2338      	movs	r3, #56	; 0x38
 80078b2:	4a0a      	ldr	r2, [pc, #40]	; (80078dc <HAL_RCC_GetSysClockFreq+0x2c>)
{
 80078b4:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078b6:	6891      	ldr	r1, [r2, #8]
 80078b8:	420b      	tst	r3, r1
 80078ba:	d105      	bne.n	80078c8 <HAL_RCC_GetSysClockFreq+0x18>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80078bc:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 80078be:	4808      	ldr	r0, [pc, #32]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x30>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80078c0:	049b      	lsls	r3, r3, #18
 80078c2:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80078c4:	40d8      	lsrs	r0, r3
}
 80078c6:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078c8:	6892      	ldr	r2, [r2, #8]
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d002      	beq.n	80078d6 <HAL_RCC_GetSysClockFreq+0x26>
 80078d0:	f7ff fc6e 	bl	80071b0 <HAL_RCC_GetSysClockFreq.part.0>
 80078d4:	e7f7      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80078d6:	4803      	ldr	r0, [pc, #12]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x34>)
  return sysclockfreq;
 80078d8:	e7f5      	b.n	80078c6 <HAL_RCC_GetSysClockFreq+0x16>
 80078da:	46c0      	nop			; (mov r8, r8)
 80078dc:	40021000 	.word	0x40021000
 80078e0:	00f42400 	.word	0x00f42400
 80078e4:	007a1200 	.word	0x007a1200

080078e8 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80078e8:	4b06      	ldr	r3, [pc, #24]	; (8007904 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80078ea:	4a07      	ldr	r2, [pc, #28]	; (8007908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	045b      	lsls	r3, r3, #17
 80078f0:	0f5b      	lsrs	r3, r3, #29
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	589b      	ldr	r3, [r3, r2]
 80078f6:	221f      	movs	r2, #31
 80078f8:	4013      	ands	r3, r2
 80078fa:	4a04      	ldr	r2, [pc, #16]	; (800790c <HAL_RCC_GetPCLK1Freq+0x24>)
 80078fc:	6810      	ldr	r0, [r2, #0]
 80078fe:	40d8      	lsrs	r0, r3
}
 8007900:	4770      	bx	lr
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	40021000 	.word	0x40021000
 8007908:	0800ce80 	.word	0x0800ce80
 800790c:	20000084 	.word	0x20000084

08007910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007912:	46ce      	mov	lr, r9
 8007914:	4647      	mov	r7, r8
 8007916:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007918:	6803      	ldr	r3, [r0, #0]
{
 800791a:	0004      	movs	r4, r0
 800791c:	b083      	sub	sp, #12
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800791e:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007920:	039a      	lsls	r2, r3, #14
 8007922:	d54f      	bpl.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007924:	2280      	movs	r2, #128	; 0x80
 8007926:	4b51      	ldr	r3, [pc, #324]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007928:	0552      	lsls	r2, r2, #21
 800792a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800792c:	4680      	mov	r8, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800792e:	4211      	tst	r1, r2
 8007930:	d100      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8007932:	e078      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007934:	2780      	movs	r7, #128	; 0x80
 8007936:	4d4e      	ldr	r5, [pc, #312]	; (8007a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007938:	007f      	lsls	r7, r7, #1
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	433b      	orrs	r3, r7
 800793e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007940:	f7fd f910 	bl	8004b64 <HAL_GetTick>
 8007944:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007946:	e005      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007948:	f7fd f90c 	bl	8004b64 <HAL_GetTick>
 800794c:	1b80      	subs	r0, r0, r6
 800794e:	2802      	cmp	r0, #2
 8007950:	d900      	bls.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007952:	e072      	b.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	423b      	tst	r3, r7
 8007958:	d0f6      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x38>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800795a:	4d44      	ldr	r5, [pc, #272]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800795c:	23c0      	movs	r3, #192	; 0xc0
 800795e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	0011      	movs	r1, r2
 8007964:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007966:	421a      	tst	r2, r3
 8007968:	d020      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800796a:	6960      	ldr	r0, [r4, #20]
 800796c:	4288      	cmp	r0, r1
 800796e:	d01e      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007970:	2280      	movs	r2, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007972:	6de9      	ldr	r1, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8007974:	6dee      	ldr	r6, [r5, #92]	; 0x5c
 8007976:	0252      	lsls	r2, r2, #9
 8007978:	4332      	orrs	r2, r6
 800797a:	65ea      	str	r2, [r5, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800797c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800797e:	4b3d      	ldr	r3, [pc, #244]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007980:	4e3d      	ldr	r6, [pc, #244]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007982:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007984:	4032      	ands	r2, r6
 8007986:	65ea      	str	r2, [r5, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007988:	65eb      	str	r3, [r5, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800798a:	07cb      	lsls	r3, r1, #31
 800798c:	d56c      	bpl.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798e:	f7fd f8e9 	bl	8004b64 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007992:	4b3a      	ldr	r3, [pc, #232]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
        tickstart = HAL_GetTick();
 8007994:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007996:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007998:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800799a:	e004      	b.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800799c:	f7fd f8e2 	bl	8004b64 <HAL_GetTick>
 80079a0:	1b80      	subs	r0, r0, r6
 80079a2:	4548      	cmp	r0, r9
 80079a4:	d849      	bhi.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80079a6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80079a8:	421f      	tst	r7, r3
 80079aa:	d0f7      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079ac:	6961      	ldr	r1, [r4, #20]
 80079ae:	4a2f      	ldr	r2, [pc, #188]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80079b0:	4830      	ldr	r0, [pc, #192]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80079b2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80079b4:	4003      	ands	r3, r0
 80079b6:	430b      	orrs	r3, r1
 80079b8:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079ba:	4643      	mov	r3, r8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80079bc:	2000      	movs	r0, #0
    if (pwrclkchanged == SET)
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d03f      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x132>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	07da      	lsls	r2, r3, #31
 80079c6:	d506      	bpl.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079c8:	2503      	movs	r5, #3
 80079ca:	4928      	ldr	r1, [pc, #160]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80079cc:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80079ce:	43aa      	bics	r2, r5
 80079d0:	6865      	ldr	r5, [r4, #4]
 80079d2:	432a      	orrs	r2, r5
 80079d4:	654a      	str	r2, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079d6:	069a      	lsls	r2, r3, #26
 80079d8:	d506      	bpl.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079da:	4924      	ldr	r1, [pc, #144]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80079dc:	4d28      	ldr	r5, [pc, #160]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80079de:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80079e0:	402a      	ands	r2, r5
 80079e2:	68a5      	ldr	r5, [r4, #8]
 80079e4:	432a      	orrs	r2, r5
 80079e6:	654a      	str	r2, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079e8:	045a      	lsls	r2, r3, #17
 80079ea:	d50a      	bpl.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079ec:	491f      	ldr	r1, [pc, #124]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80079ee:	6925      	ldr	r5, [r4, #16]
 80079f0:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	0892      	lsrs	r2, r2, #2
 80079f6:	432a      	orrs	r2, r5
 80079f8:	654a      	str	r2, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80079fa:	2280      	movs	r2, #128	; 0x80
 80079fc:	05d2      	lsls	r2, r2, #23
 80079fe:	4295      	cmp	r5, r2
 8007a00:	d026      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007a02:	051b      	lsls	r3, r3, #20
 8007a04:	d50a      	bpl.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8007a06:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007a08:	68e1      	ldr	r1, [r4, #12]
 8007a0a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007a0c:	4c1d      	ldr	r4, [pc, #116]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8007a0e:	4023      	ands	r3, r4
 8007a10:	430b      	orrs	r3, r1
 8007a12:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007a14:	2380      	movs	r3, #128	; 0x80
 8007a16:	01db      	lsls	r3, r3, #7
 8007a18:	4299      	cmp	r1, r3
 8007a1a:	d01f      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8007a1c:	b003      	add	sp, #12
 8007a1e:	bcc0      	pop	{r6, r7}
 8007a20:	46b9      	mov	r9, r7
 8007a22:	46b0      	mov	r8, r6
 8007a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a26:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007a28:	4311      	orrs	r1, r2
 8007a2a:	63d9      	str	r1, [r3, #60]	; 0x3c
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	401a      	ands	r2, r3
 8007a30:	9201      	str	r2, [sp, #4]
 8007a32:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007a34:	2301      	movs	r3, #1
 8007a36:	4698      	mov	r8, r3
 8007a38:	e77c      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if (pwrclkchanged == SET)
 8007a3a:	4643      	mov	r3, r8
        ret = HAL_TIMEOUT;
 8007a3c:	2003      	movs	r0, #3
    if (pwrclkchanged == SET)
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d1bf      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a42:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007a44:	4910      	ldr	r1, [pc, #64]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8007a46:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8007a48:	400b      	ands	r3, r1
 8007a4a:	63d3      	str	r3, [r2, #60]	; 0x3c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	e7b9      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007a50:	2280      	movs	r2, #128	; 0x80
 8007a52:	68cd      	ldr	r5, [r1, #12]
 8007a54:	0252      	lsls	r2, r2, #9
 8007a56:	432a      	orrs	r2, r5
 8007a58:	60ca      	str	r2, [r1, #12]
 8007a5a:	e7d2      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007a5c:	2380      	movs	r3, #128	; 0x80
 8007a5e:	68d1      	ldr	r1, [r2, #12]
 8007a60:	025b      	lsls	r3, r3, #9
 8007a62:	430b      	orrs	r3, r1
 8007a64:	60d3      	str	r3, [r2, #12]
  return status;
 8007a66:	e7d9      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007a68:	0001      	movs	r1, r0
 8007a6a:	e7a0      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007a6c:	40021000 	.word	0x40021000
 8007a70:	40007000 	.word	0x40007000
 8007a74:	fffffcff 	.word	0xfffffcff
 8007a78:	fffeffff 	.word	0xfffeffff
 8007a7c:	00001388 	.word	0x00001388
 8007a80:	ffffcfff 	.word	0xffffcfff
 8007a84:	ffff3fff 	.word	0xffff3fff
 8007a88:	efffffff 	.word	0xefffffff

08007a8c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	6a03      	ldr	r3, [r0, #32]
{
 8007a90:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a92:	4393      	bics	r3, r2
 8007a94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a98:	4d13      	ldr	r5, [pc, #76]	; (8007ae8 <TIM_OC1_SetConfig+0x5c>)
  tmpcr2 =  TIMx->CR2;
 8007a9a:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007a9c:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a9e:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa0:	680d      	ldr	r5, [r1, #0]
 8007aa2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aa4:	2502      	movs	r5, #2
 8007aa6:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007aa8:	688d      	ldr	r5, [r1, #8]
 8007aaa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007aac:	4d0f      	ldr	r5, [pc, #60]	; (8007aec <TIM_OC1_SetConfig+0x60>)
 8007aae:	42a8      	cmp	r0, r5
 8007ab0:	d008      	beq.n	8007ac4 <TIM_OC1_SetConfig+0x38>
 8007ab2:	4d0f      	ldr	r5, [pc, #60]	; (8007af0 <TIM_OC1_SetConfig+0x64>)
 8007ab4:	42a8      	cmp	r0, r5
 8007ab6:	d005      	beq.n	8007ac4 <TIM_OC1_SetConfig+0x38>
 8007ab8:	4d0e      	ldr	r5, [pc, #56]	; (8007af4 <TIM_OC1_SetConfig+0x68>)
 8007aba:	42a8      	cmp	r0, r5
 8007abc:	d002      	beq.n	8007ac4 <TIM_OC1_SetConfig+0x38>
 8007abe:	4d0e      	ldr	r5, [pc, #56]	; (8007af8 <TIM_OC1_SetConfig+0x6c>)
 8007ac0:	42a8      	cmp	r0, r5
 8007ac2:	d10b      	bne.n	8007adc <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ac4:	2508      	movs	r5, #8
 8007ac6:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ac8:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007aca:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8007acc:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ace:	2504      	movs	r5, #4
 8007ad0:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ad2:	4d0a      	ldr	r5, [pc, #40]	; (8007afc <TIM_OC1_SetConfig+0x70>)
 8007ad4:	402a      	ands	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad6:	694d      	ldr	r5, [r1, #20]
 8007ad8:	4335      	orrs	r5, r6
 8007ada:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007adc:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ade:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007ae0:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8007ae2:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae4:	6203      	str	r3, [r0, #32]
}
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	fffeff8c 	.word	0xfffeff8c
 8007aec:	40012c00 	.word	0x40012c00
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40014400 	.word	0x40014400
 8007af8:	40014800 	.word	0x40014800
 8007afc:	fffffcff 	.word	0xfffffcff

08007b00 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b00:	6a03      	ldr	r3, [r0, #32]
 8007b02:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <TIM_OC3_SetConfig+0x64>)
{
 8007b04:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b06:	4013      	ands	r3, r2
 8007b08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b0c:	4c16      	ldr	r4, [pc, #88]	; (8007b68 <TIM_OC3_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 8007b0e:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8007b10:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b12:	4025      	ands	r5, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b14:	680c      	ldr	r4, [r1, #0]
 8007b16:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b18:	4c14      	ldr	r4, [pc, #80]	; (8007b6c <TIM_OC3_SetConfig+0x6c>)
 8007b1a:	4023      	ands	r3, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b1c:	688c      	ldr	r4, [r1, #8]
 8007b1e:	0224      	lsls	r4, r4, #8
 8007b20:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b22:	4c13      	ldr	r4, [pc, #76]	; (8007b70 <TIM_OC3_SetConfig+0x70>)
 8007b24:	42a0      	cmp	r0, r4
 8007b26:	d015      	beq.n	8007b54 <TIM_OC3_SetConfig+0x54>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b28:	4c12      	ldr	r4, [pc, #72]	; (8007b74 <TIM_OC3_SetConfig+0x74>)
 8007b2a:	42a0      	cmp	r0, r4
 8007b2c:	d005      	beq.n	8007b3a <TIM_OC3_SetConfig+0x3a>
 8007b2e:	4c12      	ldr	r4, [pc, #72]	; (8007b78 <TIM_OC3_SetConfig+0x78>)
 8007b30:	42a0      	cmp	r0, r4
 8007b32:	d002      	beq.n	8007b3a <TIM_OC3_SetConfig+0x3a>
 8007b34:	4c11      	ldr	r4, [pc, #68]	; (8007b7c <TIM_OC3_SetConfig+0x7c>)
 8007b36:	42a0      	cmp	r0, r4
 8007b38:	d106      	bne.n	8007b48 <TIM_OC3_SetConfig+0x48>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b3a:	4c11      	ldr	r4, [pc, #68]	; (8007b80 <TIM_OC3_SetConfig+0x80>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b3c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b3e:	4014      	ands	r4, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b40:	698a      	ldr	r2, [r1, #24]
 8007b42:	4332      	orrs	r2, r6
 8007b44:	0112      	lsls	r2, r2, #4
 8007b46:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b48:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b4a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007b4c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8007b4e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b50:	6203      	str	r3, [r0, #32]
}
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b54:	4c0b      	ldr	r4, [pc, #44]	; (8007b84 <TIM_OC3_SetConfig+0x84>)
 8007b56:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b58:	68cb      	ldr	r3, [r1, #12]
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b5e:	4c0a      	ldr	r4, [pc, #40]	; (8007b88 <TIM_OC3_SetConfig+0x88>)
 8007b60:	4023      	ands	r3, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b62:	e7ea      	b.n	8007b3a <TIM_OC3_SetConfig+0x3a>
 8007b64:	fffffeff 	.word	0xfffffeff
 8007b68:	fffeff8c 	.word	0xfffeff8c
 8007b6c:	fffffdff 	.word	0xfffffdff
 8007b70:	40012c00 	.word	0x40012c00
 8007b74:	40014000 	.word	0x40014000
 8007b78:	40014400 	.word	0x40014400
 8007b7c:	40014800 	.word	0x40014800
 8007b80:	ffffcfff 	.word	0xffffcfff
 8007b84:	fffff7ff 	.word	0xfffff7ff
 8007b88:	fffffbff 	.word	0xfffffbff

08007b8c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b8c:	6a03      	ldr	r3, [r0, #32]
 8007b8e:	4a14      	ldr	r2, [pc, #80]	; (8007be0 <TIM_OC4_SetConfig+0x54>)
{
 8007b90:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b92:	4013      	ands	r3, r2
 8007b94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b96:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b98:	4d12      	ldr	r5, [pc, #72]	; (8007be4 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8007b9a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8007b9c:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b9e:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ba0:	680d      	ldr	r5, [r1, #0]
 8007ba2:	022d      	lsls	r5, r5, #8
 8007ba4:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ba6:	4d10      	ldr	r5, [pc, #64]	; (8007be8 <TIM_OC4_SetConfig+0x5c>)
 8007ba8:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007baa:	688a      	ldr	r2, [r1, #8]
 8007bac:	0312      	lsls	r2, r2, #12
 8007bae:	432a      	orrs	r2, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb0:	4d0e      	ldr	r5, [pc, #56]	; (8007bec <TIM_OC4_SetConfig+0x60>)
 8007bb2:	42a8      	cmp	r0, r5
 8007bb4:	d008      	beq.n	8007bc8 <TIM_OC4_SetConfig+0x3c>
 8007bb6:	4d0e      	ldr	r5, [pc, #56]	; (8007bf0 <TIM_OC4_SetConfig+0x64>)
 8007bb8:	42a8      	cmp	r0, r5
 8007bba:	d005      	beq.n	8007bc8 <TIM_OC4_SetConfig+0x3c>
 8007bbc:	4d0d      	ldr	r5, [pc, #52]	; (8007bf4 <TIM_OC4_SetConfig+0x68>)
 8007bbe:	42a8      	cmp	r0, r5
 8007bc0:	d002      	beq.n	8007bc8 <TIM_OC4_SetConfig+0x3c>
 8007bc2:	4d0d      	ldr	r5, [pc, #52]	; (8007bf8 <TIM_OC4_SetConfig+0x6c>)
 8007bc4:	42a8      	cmp	r0, r5
 8007bc6:	d104      	bne.n	8007bd2 <TIM_OC4_SetConfig+0x46>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bc8:	4d0c      	ldr	r5, [pc, #48]	; (8007bfc <TIM_OC4_SetConfig+0x70>)
 8007bca:	402b      	ands	r3, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bcc:	694d      	ldr	r5, [r1, #20]
 8007bce:	01ad      	lsls	r5, r5, #6
 8007bd0:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd2:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bd4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8007bd6:	61c4      	str	r4, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8007bd8:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bda:	6202      	str	r2, [r0, #32]
}
 8007bdc:	bd30      	pop	{r4, r5, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	ffffefff 	.word	0xffffefff
 8007be4:	feff8cff 	.word	0xfeff8cff
 8007be8:	ffffdfff 	.word	0xffffdfff
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800
 8007bfc:	ffffbfff 	.word	0xffffbfff

08007c00 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c00:	6a03      	ldr	r3, [r0, #32]
 8007c02:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <TIM_OC5_SetConfig+0x50>)
{
 8007c04:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c06:	4013      	ands	r3, r2
 8007c08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0a:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c0c:	4d11      	ldr	r5, [pc, #68]	; (8007c54 <TIM_OC5_SetConfig+0x54>)
  tmpcr2 =  TIMx->CR2;
 8007c0e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8007c10:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c12:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c14:	680d      	ldr	r5, [r1, #0]
 8007c16:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c18:	4d0f      	ldr	r5, [pc, #60]	; (8007c58 <TIM_OC5_SetConfig+0x58>)
 8007c1a:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c1c:	688a      	ldr	r2, [r1, #8]
 8007c1e:	0412      	lsls	r2, r2, #16
 8007c20:	432a      	orrs	r2, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c22:	4d0e      	ldr	r5, [pc, #56]	; (8007c5c <TIM_OC5_SetConfig+0x5c>)
 8007c24:	42a8      	cmp	r0, r5
 8007c26:	d008      	beq.n	8007c3a <TIM_OC5_SetConfig+0x3a>
 8007c28:	4d0d      	ldr	r5, [pc, #52]	; (8007c60 <TIM_OC5_SetConfig+0x60>)
 8007c2a:	42a8      	cmp	r0, r5
 8007c2c:	d005      	beq.n	8007c3a <TIM_OC5_SetConfig+0x3a>
 8007c2e:	4d0d      	ldr	r5, [pc, #52]	; (8007c64 <TIM_OC5_SetConfig+0x64>)
 8007c30:	42a8      	cmp	r0, r5
 8007c32:	d002      	beq.n	8007c3a <TIM_OC5_SetConfig+0x3a>
 8007c34:	4d0c      	ldr	r5, [pc, #48]	; (8007c68 <TIM_OC5_SetConfig+0x68>)
 8007c36:	42a8      	cmp	r0, r5
 8007c38:	d104      	bne.n	8007c44 <TIM_OC5_SetConfig+0x44>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c3a:	4d05      	ldr	r5, [pc, #20]	; (8007c50 <TIM_OC5_SetConfig+0x50>)
 8007c3c:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c3e:	694d      	ldr	r5, [r1, #20]
 8007c40:	022d      	lsls	r5, r5, #8
 8007c42:	432b      	orrs	r3, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c44:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c46:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007c48:	6544      	str	r4, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8007c4a:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4c:	6202      	str	r2, [r0, #32]
}
 8007c4e:	bd30      	pop	{r4, r5, pc}
 8007c50:	fffeffff 	.word	0xfffeffff
 8007c54:	fffeff8f 	.word	0xfffeff8f
 8007c58:	fffdffff 	.word	0xfffdffff
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	40014000 	.word	0x40014000
 8007c64:	40014400 	.word	0x40014400
 8007c68:	40014800 	.word	0x40014800

08007c6c <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c6c:	6a03      	ldr	r3, [r0, #32]
 8007c6e:	4a14      	ldr	r2, [pc, #80]	; (8007cc0 <TIM_OC6_SetConfig+0x54>)
{
 8007c70:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c72:	4013      	ands	r3, r2
 8007c74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	6a02      	ldr	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c78:	4d12      	ldr	r5, [pc, #72]	; (8007cc4 <TIM_OC6_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 8007c7a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8007c7c:	6d44      	ldr	r4, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c7e:	402c      	ands	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c80:	680d      	ldr	r5, [r1, #0]
 8007c82:	022d      	lsls	r5, r5, #8
 8007c84:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c86:	4d10      	ldr	r5, [pc, #64]	; (8007cc8 <TIM_OC6_SetConfig+0x5c>)
 8007c88:	4015      	ands	r5, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c8a:	688a      	ldr	r2, [r1, #8]
 8007c8c:	0512      	lsls	r2, r2, #20
 8007c8e:	432a      	orrs	r2, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c90:	4d0e      	ldr	r5, [pc, #56]	; (8007ccc <TIM_OC6_SetConfig+0x60>)
 8007c92:	42a8      	cmp	r0, r5
 8007c94:	d008      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x3c>
 8007c96:	4d0e      	ldr	r5, [pc, #56]	; (8007cd0 <TIM_OC6_SetConfig+0x64>)
 8007c98:	42a8      	cmp	r0, r5
 8007c9a:	d005      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x3c>
 8007c9c:	4d0d      	ldr	r5, [pc, #52]	; (8007cd4 <TIM_OC6_SetConfig+0x68>)
 8007c9e:	42a8      	cmp	r0, r5
 8007ca0:	d002      	beq.n	8007ca8 <TIM_OC6_SetConfig+0x3c>
 8007ca2:	4d0d      	ldr	r5, [pc, #52]	; (8007cd8 <TIM_OC6_SetConfig+0x6c>)
 8007ca4:	42a8      	cmp	r0, r5
 8007ca6:	d104      	bne.n	8007cb2 <TIM_OC6_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca8:	4d0c      	ldr	r5, [pc, #48]	; (8007cdc <TIM_OC6_SetConfig+0x70>)
 8007caa:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cac:	694d      	ldr	r5, [r1, #20]
 8007cae:	02ad      	lsls	r5, r5, #10
 8007cb0:	432b      	orrs	r3, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb2:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cb4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8007cb6:	6544      	str	r4, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8007cb8:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cba:	6202      	str	r2, [r0, #32]
}
 8007cbc:	bd30      	pop	{r4, r5, pc}
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	ffefffff 	.word	0xffefffff
 8007cc4:	feff8fff 	.word	0xfeff8fff
 8007cc8:	ffdfffff 	.word	0xffdfffff
 8007ccc:	40012c00 	.word	0x40012c00
 8007cd0:	40014000 	.word	0x40014000
 8007cd4:	40014400 	.word	0x40014400
 8007cd8:	40014800 	.word	0x40014800
 8007cdc:	fffbffff 	.word	0xfffbffff

08007ce0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8007ce0:	223d      	movs	r2, #61	; 0x3d
 8007ce2:	5c81      	ldrb	r1, [r0, r2]
{
 8007ce4:	0003      	movs	r3, r0
    return HAL_ERROR;
 8007ce6:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8007ce8:	2901      	cmp	r1, #1
 8007cea:	d112      	bne.n	8007d12 <HAL_TIM_Base_Start_IT+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 8007cec:	3101      	adds	r1, #1
 8007cee:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	4302      	orrs	r2, r0
 8007cf6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf8:	4a0e      	ldr	r2, [pc, #56]	; (8007d34 <HAL_TIM_Base_Start_IT+0x54>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d00a      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x34>
 8007cfe:	4a0e      	ldr	r2, [pc, #56]	; (8007d38 <HAL_TIM_Base_Start_IT+0x58>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x34>
 8007d04:	4a0d      	ldr	r2, [pc, #52]	; (8007d3c <HAL_TIM_Base_Start_IT+0x5c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d004      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	4310      	orrs	r0, r2
 8007d0e:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8007d10:	2000      	movs	r0, #0
}
 8007d12:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	490a      	ldr	r1, [pc, #40]	; (8007d40 <HAL_TIM_Base_Start_IT+0x60>)
 8007d18:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1a:	2a06      	cmp	r2, #6
 8007d1c:	d008      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x50>
 8007d1e:	3907      	subs	r1, #7
 8007d20:	428a      	cmp	r2, r1
 8007d22:	d005      	beq.n	8007d30 <HAL_TIM_Base_Start_IT+0x50>
      __HAL_TIM_ENABLE(htim);
 8007d24:	2101      	movs	r1, #1
 8007d26:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8007d28:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	e7f0      	b.n	8007d12 <HAL_TIM_Base_Start_IT+0x32>
  return HAL_OK;
 8007d30:	2000      	movs	r0, #0
 8007d32:	e7ee      	b.n	8007d12 <HAL_TIM_Base_Start_IT+0x32>
 8007d34:	40012c00 	.word	0x40012c00
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	00010007 	.word	0x00010007

08007d44 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d13a      	bne.n	8007dbe <HAL_TIM_OC_Start+0x7a>
 8007d48:	233e      	movs	r3, #62	; 0x3e
 8007d4a:	5cc2      	ldrb	r2, [r0, r3]
 8007d4c:	2a01      	cmp	r2, #1
 8007d4e:	d125      	bne.n	8007d9c <HAL_TIM_OC_Start+0x58>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d50:	2202      	movs	r2, #2
 8007d52:	54c2      	strb	r2, [r0, r3]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d54:	221f      	movs	r2, #31
 8007d56:	4011      	ands	r1, r2
 8007d58:	3a1e      	subs	r2, #30
 8007d5a:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d5c:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d5e:	6a19      	ldr	r1, [r3, #32]
 8007d60:	4391      	bics	r1, r2
 8007d62:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d64:	6a19      	ldr	r1, [r3, #32]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d6a:	4a36      	ldr	r2, [pc, #216]	; (8007e44 <HAL_TIM_OC_Start+0x100>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d017      	beq.n	8007da0 <HAL_TIM_OC_Start+0x5c>
 8007d70:	4a35      	ldr	r2, [pc, #212]	; (8007e48 <HAL_TIM_OC_Start+0x104>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d014      	beq.n	8007da0 <HAL_TIM_OC_Start+0x5c>
 8007d76:	4a35      	ldr	r2, [pc, #212]	; (8007e4c <HAL_TIM_OC_Start+0x108>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d042      	beq.n	8007e02 <HAL_TIM_OC_Start+0xbe>
 8007d7c:	4a34      	ldr	r2, [pc, #208]	; (8007e50 <HAL_TIM_OC_Start+0x10c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d03f      	beq.n	8007e02 <HAL_TIM_OC_Start+0xbe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d82:	4a34      	ldr	r2, [pc, #208]	; (8007e54 <HAL_TIM_OC_Start+0x110>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d010      	beq.n	8007daa <HAL_TIM_OC_Start+0x66>
    __HAL_TIM_ENABLE(htim);
 8007d88:	2101      	movs	r1, #1
 8007d8a:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8007d8c:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	e004      	b.n	8007d9e <HAL_TIM_OC_Start+0x5a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d94:	233f      	movs	r3, #63	; 0x3f
 8007d96:	5cc2      	ldrb	r2, [r0, r3]
 8007d98:	2a01      	cmp	r2, #1
 8007d9a:	d0d9      	beq.n	8007d50 <HAL_TIM_OC_Start+0xc>
    return HAL_ERROR;
 8007d9c:	2001      	movs	r0, #1
}
 8007d9e:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8007da0:	2280      	movs	r2, #128	; 0x80
 8007da2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007da4:	0212      	lsls	r2, r2, #8
 8007da6:	430a      	orrs	r2, r1
 8007da8:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	492a      	ldr	r1, [pc, #168]	; (8007e58 <HAL_TIM_OC_Start+0x114>)
 8007dae:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db0:	2a06      	cmp	r2, #6
 8007db2:	d002      	beq.n	8007dba <HAL_TIM_OC_Start+0x76>
 8007db4:	3907      	subs	r1, #7
 8007db6:	428a      	cmp	r2, r1
 8007db8:	d1e6      	bne.n	8007d88 <HAL_TIM_OC_Start+0x44>
  return HAL_OK;
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e7ef      	b.n	8007d9e <HAL_TIM_OC_Start+0x5a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dbe:	2904      	cmp	r1, #4
 8007dc0:	d0e8      	beq.n	8007d94 <HAL_TIM_OC_Start+0x50>
 8007dc2:	2908      	cmp	r1, #8
 8007dc4:	d028      	beq.n	8007e18 <HAL_TIM_OC_Start+0xd4>
 8007dc6:	290c      	cmp	r1, #12
 8007dc8:	d014      	beq.n	8007df4 <HAL_TIM_OC_Start+0xb0>
 8007dca:	2910      	cmp	r1, #16
 8007dcc:	d033      	beq.n	8007e36 <HAL_TIM_OC_Start+0xf2>
 8007dce:	2343      	movs	r3, #67	; 0x43
 8007dd0:	5cc3      	ldrb	r3, [r0, r3]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	1e5a      	subs	r2, r3, #1
 8007dd6:	4193      	sbcs	r3, r2
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1de      	bne.n	8007d9c <HAL_TIM_OC_Start+0x58>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dde:	2908      	cmp	r1, #8
 8007de0:	d021      	beq.n	8007e26 <HAL_TIM_OC_Start+0xe2>
 8007de2:	290c      	cmp	r1, #12
 8007de4:	d023      	beq.n	8007e2e <HAL_TIM_OC_Start+0xea>
 8007de6:	2343      	movs	r3, #67	; 0x43
 8007de8:	2910      	cmp	r1, #16
 8007dea:	d1b1      	bne.n	8007d50 <HAL_TIM_OC_Start+0xc>
 8007dec:	2342      	movs	r3, #66	; 0x42
 8007dee:	2202      	movs	r2, #2
 8007df0:	54c2      	strb	r2, [r0, r3]
 8007df2:	e7af      	b.n	8007d54 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007df4:	2341      	movs	r3, #65	; 0x41
 8007df6:	5cc3      	ldrb	r3, [r0, r3]
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	1e5a      	subs	r2, r3, #1
 8007dfc:	4193      	sbcs	r3, r2
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	e7eb      	b.n	8007dda <HAL_TIM_OC_Start+0x96>
    __HAL_TIM_MOE_ENABLE(htim);
 8007e02:	2280      	movs	r2, #128	; 0x80
 8007e04:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007e06:	0212      	lsls	r2, r2, #8
 8007e08:	430a      	orrs	r2, r1
    __HAL_TIM_ENABLE(htim);
 8007e0a:	2101      	movs	r1, #1
    __HAL_TIM_MOE_ENABLE(htim);
 8007e0c:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_TIM_ENABLE(htim);
 8007e0e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8007e10:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8007e12:	430a      	orrs	r2, r1
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	e7c2      	b.n	8007d9e <HAL_TIM_OC_Start+0x5a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	5cc3      	ldrb	r3, [r0, r3]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	1e5a      	subs	r2, r3, #1
 8007e20:	4193      	sbcs	r3, r2
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	e7d9      	b.n	8007dda <HAL_TIM_OC_Start+0x96>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e26:	2340      	movs	r3, #64	; 0x40
 8007e28:	2202      	movs	r2, #2
 8007e2a:	54c2      	strb	r2, [r0, r3]
 8007e2c:	e792      	b.n	8007d54 <HAL_TIM_OC_Start+0x10>
 8007e2e:	2341      	movs	r3, #65	; 0x41
 8007e30:	2202      	movs	r2, #2
 8007e32:	54c2      	strb	r2, [r0, r3]
 8007e34:	e78e      	b.n	8007d54 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e36:	2342      	movs	r3, #66	; 0x42
 8007e38:	5cc3      	ldrb	r3, [r0, r3]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	1e5a      	subs	r2, r3, #1
 8007e3e:	4193      	sbcs	r3, r2
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	e7ca      	b.n	8007dda <HAL_TIM_OC_Start+0x96>
 8007e44:	40012c00 	.word	0x40012c00
 8007e48:	40014000 	.word	0x40014000
 8007e4c:	40014400 	.word	0x40014400
 8007e50:	40014800 	.word	0x40014800
 8007e54:	40000400 	.word	0x40000400
 8007e58:	00010007 	.word	0x00010007

08007e5c <HAL_TIM_PWM_Start>:
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	f7ff ff71 	bl	8007d44 <HAL_TIM_OC_Start>
 8007e62:	bd10      	pop	{r4, pc}

08007e64 <HAL_TIM_OC_DelayElapsedCallback>:
 8007e64:	4770      	bx	lr
 8007e66:	46c0      	nop			; (mov r8, r8)

08007e68 <HAL_TIM_IC_CaptureCallback>:
 8007e68:	4770      	bx	lr
 8007e6a:	46c0      	nop			; (mov r8, r8)

08007e6c <HAL_TIM_PWM_PulseFinishedCallback>:
 8007e6c:	4770      	bx	lr
 8007e6e:	46c0      	nop			; (mov r8, r8)

08007e70 <HAL_TIM_TriggerCallback>:
 8007e70:	4770      	bx	lr
 8007e72:	46c0      	nop			; (mov r8, r8)

08007e74 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e74:	2202      	movs	r2, #2
 8007e76:	6803      	ldr	r3, [r0, #0]
{
 8007e78:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e7a:	6919      	ldr	r1, [r3, #16]
{
 8007e7c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e7e:	420a      	tst	r2, r1
 8007e80:	d003      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x16>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e82:	68d9      	ldr	r1, [r3, #12]
 8007e84:	420a      	tst	r2, r1
 8007e86:	d000      	beq.n	8007e8a <HAL_TIM_IRQHandler+0x16>
 8007e88:	e06e      	b.n	8007f68 <HAL_TIM_IRQHandler+0xf4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e8a:	2204      	movs	r2, #4
 8007e8c:	6919      	ldr	r1, [r3, #16]
 8007e8e:	420a      	tst	r2, r1
 8007e90:	d002      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x24>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e92:	68d9      	ldr	r1, [r3, #12]
 8007e94:	420a      	tst	r2, r1
 8007e96:	d154      	bne.n	8007f42 <HAL_TIM_IRQHandler+0xce>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e98:	2208      	movs	r2, #8
 8007e9a:	6919      	ldr	r1, [r3, #16]
 8007e9c:	420a      	tst	r2, r1
 8007e9e:	d002      	beq.n	8007ea6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ea0:	68d9      	ldr	r1, [r3, #12]
 8007ea2:	420a      	tst	r2, r1
 8007ea4:	d13c      	bne.n	8007f20 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ea6:	2210      	movs	r2, #16
 8007ea8:	6919      	ldr	r1, [r3, #16]
 8007eaa:	420a      	tst	r2, r1
 8007eac:	d002      	beq.n	8007eb4 <HAL_TIM_IRQHandler+0x40>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007eae:	68d9      	ldr	r1, [r3, #12]
 8007eb0:	420a      	tst	r2, r1
 8007eb2:	d122      	bne.n	8007efa <HAL_TIM_IRQHandler+0x86>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	6919      	ldr	r1, [r3, #16]
 8007eb8:	420a      	tst	r2, r1
 8007eba:	d002      	beq.n	8007ec2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ebc:	68d9      	ldr	r1, [r3, #12]
 8007ebe:	420a      	tst	r2, r1
 8007ec0:	d168      	bne.n	8007f94 <HAL_TIM_IRQHandler+0x120>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ec2:	2280      	movs	r2, #128	; 0x80
 8007ec4:	6919      	ldr	r1, [r3, #16]
 8007ec6:	420a      	tst	r2, r1
 8007ec8:	d002      	beq.n	8007ed0 <HAL_TIM_IRQHandler+0x5c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eca:	68d9      	ldr	r1, [r3, #12]
 8007ecc:	420a      	tst	r2, r1
 8007ece:	d168      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0x12e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ed0:	691a      	ldr	r2, [r3, #16]
 8007ed2:	05d2      	lsls	r2, r2, #23
 8007ed4:	d502      	bpl.n	8007edc <HAL_TIM_IRQHandler+0x68>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ed6:	68da      	ldr	r2, [r3, #12]
 8007ed8:	0612      	lsls	r2, r2, #24
 8007eda:	d46a      	bmi.n	8007fb2 <HAL_TIM_IRQHandler+0x13e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007edc:	2240      	movs	r2, #64	; 0x40
 8007ede:	6919      	ldr	r1, [r3, #16]
 8007ee0:	420a      	tst	r2, r1
 8007ee2:	d002      	beq.n	8007eea <HAL_TIM_IRQHandler+0x76>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ee4:	68d9      	ldr	r1, [r3, #12]
 8007ee6:	420a      	tst	r2, r1
 8007ee8:	d16a      	bne.n	8007fc0 <HAL_TIM_IRQHandler+0x14c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007eea:	2220      	movs	r2, #32
 8007eec:	6919      	ldr	r1, [r3, #16]
 8007eee:	420a      	tst	r2, r1
 8007ef0:	d002      	beq.n	8007ef8 <HAL_TIM_IRQHandler+0x84>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ef2:	68d9      	ldr	r1, [r3, #12]
 8007ef4:	420a      	tst	r2, r1
 8007ef6:	d147      	bne.n	8007f88 <HAL_TIM_IRQHandler+0x114>
}
 8007ef8:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007efa:	3a21      	subs	r2, #33	; 0x21
 8007efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007efe:	3219      	adds	r2, #25
 8007f00:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f02:	69da      	ldr	r2, [r3, #28]
 8007f04:	23c0      	movs	r3, #192	; 0xc0
 8007f06:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007f08:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f0a:	421a      	tst	r2, r3
 8007f0c:	d168      	bne.n	8007fe0 <HAL_TIM_IRQHandler+0x16c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f0e:	f7ff ffa9 	bl	8007e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f12:	0020      	movs	r0, r4
 8007f14:	f7ff ffaa 	bl	8007e6c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	e7c9      	b.n	8007eb4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f20:	3a11      	subs	r2, #17
 8007f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f24:	320d      	adds	r2, #13
 8007f26:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f28:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f2c:	079b      	lsls	r3, r3, #30
 8007f2e:	d154      	bne.n	8007fda <HAL_TIM_IRQHandler+0x166>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f30:	f7ff ff98 	bl	8007e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f34:	0020      	movs	r0, r4
 8007f36:	f7ff ff99 	bl	8007e6c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	e7b1      	b.n	8007ea6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f42:	3a09      	subs	r2, #9
 8007f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f46:	3207      	adds	r2, #7
 8007f48:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f4a:	699a      	ldr	r2, [r3, #24]
 8007f4c:	23c0      	movs	r3, #192	; 0xc0
 8007f4e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007f50:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f52:	421a      	tst	r2, r3
 8007f54:	d13e      	bne.n	8007fd4 <HAL_TIM_IRQHandler+0x160>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f56:	f7ff ff85 	bl	8007e64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f5a:	0020      	movs	r0, r4
 8007f5c:	f7ff ff86 	bl	8007e6c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f60:	2300      	movs	r3, #0
 8007f62:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f64:	6823      	ldr	r3, [r4, #0]
 8007f66:	e797      	b.n	8007e98 <HAL_TIM_IRQHandler+0x24>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f68:	3a05      	subs	r2, #5
 8007f6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f6c:	3204      	adds	r2, #4
 8007f6e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	079b      	lsls	r3, r3, #30
 8007f74:	d12b      	bne.n	8007fce <HAL_TIM_IRQHandler+0x15a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f76:	f7ff ff75 	bl	8007e64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f7a:	0020      	movs	r0, r4
 8007f7c:	f7ff ff76 	bl	8007e6c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f80:	2300      	movs	r3, #0
 8007f82:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	e780      	b.n	8007e8a <HAL_TIM_IRQHandler+0x16>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f88:	3a41      	subs	r2, #65	; 0x41
      HAL_TIMEx_CommutCallback(htim);
 8007f8a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007f8e:	f000 fa3d 	bl	800840c <HAL_TIMEx_CommutCallback>
}
 8007f92:	e7b1      	b.n	8007ef8 <HAL_TIM_IRQHandler+0x84>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f94:	3a03      	subs	r2, #3
 8007f96:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f98:	0020      	movs	r0, r4
 8007f9a:	f7fb fad5 	bl	8003548 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	e78f      	b.n	8007ec2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fa2:	3a02      	subs	r2, #2
 8007fa4:	3aff      	subs	r2, #255	; 0xff
 8007fa6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007fa8:	0020      	movs	r0, r4
 8007faa:	f000 fa31 	bl	8008410 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	e78e      	b.n	8007ed0 <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fb2:	4a0d      	ldr	r2, [pc, #52]	; (8007fe8 <HAL_TIM_IRQHandler+0x174>)
      HAL_TIMEx_Break2Callback(htim);
 8007fb4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fb6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007fb8:	f000 fa2c 	bl	8008414 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	e78d      	b.n	8007edc <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fc0:	3a81      	subs	r2, #129	; 0x81
 8007fc2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007fc4:	0020      	movs	r0, r4
 8007fc6:	f7ff ff53 	bl	8007e70 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fca:	6823      	ldr	r3, [r4, #0]
 8007fcc:	e78d      	b.n	8007eea <HAL_TIM_IRQHandler+0x76>
          HAL_TIM_IC_CaptureCallback(htim);
 8007fce:	f7ff ff4b 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007fd2:	e7d5      	b.n	8007f80 <HAL_TIM_IRQHandler+0x10c>
        HAL_TIM_IC_CaptureCallback(htim);
 8007fd4:	f7ff ff48 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007fd8:	e7c2      	b.n	8007f60 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8007fda:	f7ff ff45 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007fde:	e7ac      	b.n	8007f3a <HAL_TIM_IRQHandler+0xc6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe0:	f7ff ff42 	bl	8007e68 <HAL_TIM_IC_CaptureCallback>
 8007fe4:	e798      	b.n	8007f18 <HAL_TIM_IRQHandler+0xa4>
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	fffffeff 	.word	0xfffffeff

08007fec <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fec:	4a1d      	ldr	r2, [pc, #116]	; (8008064 <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 8007fee:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff0:	4290      	cmp	r0, r2
 8007ff2:	d023      	beq.n	800803c <TIM_Base_SetConfig+0x50>
 8007ff4:	4a1c      	ldr	r2, [pc, #112]	; (8008068 <TIM_Base_SetConfig+0x7c>)
 8007ff6:	4290      	cmp	r0, r2
 8007ff8:	d017      	beq.n	800802a <TIM_Base_SetConfig+0x3e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ffa:	4a1c      	ldr	r2, [pc, #112]	; (800806c <TIM_Base_SetConfig+0x80>)
 8007ffc:	4290      	cmp	r0, r2
 8007ffe:	d018      	beq.n	8008032 <TIM_Base_SetConfig+0x46>
 8008000:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <TIM_Base_SetConfig+0x84>)
 8008002:	4290      	cmp	r0, r2
 8008004:	d01e      	beq.n	8008044 <TIM_Base_SetConfig+0x58>
 8008006:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <TIM_Base_SetConfig+0x88>)
 8008008:	4290      	cmp	r0, r2
 800800a:	d01b      	beq.n	8008044 <TIM_Base_SetConfig+0x58>
 800800c:	4a1a      	ldr	r2, [pc, #104]	; (8008078 <TIM_Base_SetConfig+0x8c>)
 800800e:	4290      	cmp	r0, r2
 8008010:	d018      	beq.n	8008044 <TIM_Base_SetConfig+0x58>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008012:	2280      	movs	r2, #128	; 0x80
 8008014:	4393      	bics	r3, r2
 8008016:	694a      	ldr	r2, [r1, #20]
 8008018:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800801a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800801c:	688b      	ldr	r3, [r1, #8]
 800801e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008020:	680b      	ldr	r3, [r1, #0]
 8008022:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008024:	2301      	movs	r3, #1
 8008026:	6143      	str	r3, [r0, #20]
}
 8008028:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800802a:	2270      	movs	r2, #112	; 0x70
 800802c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800802e:	684a      	ldr	r2, [r1, #4]
 8008030:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008032:	4a12      	ldr	r2, [pc, #72]	; (800807c <TIM_Base_SetConfig+0x90>)
 8008034:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008036:	68ca      	ldr	r2, [r1, #12]
 8008038:	4313      	orrs	r3, r2
 800803a:	e7ea      	b.n	8008012 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800803c:	2270      	movs	r2, #112	; 0x70
 800803e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8008040:	684a      	ldr	r2, [r1, #4]
 8008042:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8008044:	4a0d      	ldr	r2, [pc, #52]	; (800807c <TIM_Base_SetConfig+0x90>)
 8008046:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008048:	68ca      	ldr	r2, [r1, #12]
 800804a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800804c:	2280      	movs	r2, #128	; 0x80
 800804e:	4393      	bics	r3, r2
 8008050:	694a      	ldr	r2, [r1, #20]
 8008052:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8008054:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008056:	688b      	ldr	r3, [r1, #8]
 8008058:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800805a:	680b      	ldr	r3, [r1, #0]
 800805c:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800805e:	690b      	ldr	r3, [r1, #16]
 8008060:	6303      	str	r3, [r0, #48]	; 0x30
 8008062:	e7df      	b.n	8008024 <TIM_Base_SetConfig+0x38>
 8008064:	40012c00 	.word	0x40012c00
 8008068:	40000400 	.word	0x40000400
 800806c:	40002000 	.word	0x40002000
 8008070:	40014000 	.word	0x40014000
 8008074:	40014400 	.word	0x40014400
 8008078:	40014800 	.word	0x40014800
 800807c:	fffffcff 	.word	0xfffffcff

08008080 <HAL_TIM_Base_Init>:
{
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8008084:	d02a      	beq.n	80080dc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008086:	233d      	movs	r3, #61	; 0x3d
 8008088:	5cc3      	ldrb	r3, [r0, r3]
 800808a:	b2da      	uxtb	r2, r3
 800808c:	2b00      	cmp	r3, #0
 800808e:	d020      	beq.n	80080d2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008090:	2302      	movs	r3, #2
 8008092:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008094:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8008096:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008098:	c901      	ldmia	r1!, {r0}
 800809a:	f7ff ffa7 	bl	8007fec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800809e:	2301      	movs	r3, #1
 80080a0:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 80080a2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080a4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a6:	3a0a      	subs	r2, #10
 80080a8:	54a3      	strb	r3, [r4, r2]
 80080aa:	3201      	adds	r2, #1
 80080ac:	54a3      	strb	r3, [r4, r2]
 80080ae:	3201      	adds	r2, #1
 80080b0:	54a3      	strb	r3, [r4, r2]
 80080b2:	3201      	adds	r2, #1
 80080b4:	54a3      	strb	r3, [r4, r2]
 80080b6:	3201      	adds	r2, #1
 80080b8:	54a3      	strb	r3, [r4, r2]
 80080ba:	3201      	adds	r2, #1
 80080bc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080be:	3201      	adds	r2, #1
 80080c0:	54a3      	strb	r3, [r4, r2]
 80080c2:	3201      	adds	r2, #1
 80080c4:	54a3      	strb	r3, [r4, r2]
 80080c6:	3201      	adds	r2, #1
 80080c8:	54a3      	strb	r3, [r4, r2]
 80080ca:	3201      	adds	r2, #1
 80080cc:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80080ce:	5563      	strb	r3, [r4, r5]
}
 80080d0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80080d2:	333c      	adds	r3, #60	; 0x3c
 80080d4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80080d6:	f7fc fa51 	bl	800457c <HAL_TIM_Base_MspInit>
 80080da:	e7d9      	b.n	8008090 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80080dc:	2001      	movs	r0, #1
 80080de:	e7f7      	b.n	80080d0 <HAL_TIM_Base_Init+0x50>

080080e0 <HAL_TIM_PWM_Init>:
{
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80080e4:	d02a      	beq.n	800813c <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80080e6:	233d      	movs	r3, #61	; 0x3d
 80080e8:	5cc3      	ldrb	r3, [r0, r3]
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d020      	beq.n	8008132 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	2302      	movs	r3, #2
 80080f2:	253d      	movs	r5, #61	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f4:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80080f6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f8:	c901      	ldmia	r1!, {r0}
 80080fa:	f7ff ff77 	bl	8007fec <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080fe:	2301      	movs	r3, #1
 8008100:	2248      	movs	r2, #72	; 0x48
  return HAL_OK;
 8008102:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008104:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008106:	3a0a      	subs	r2, #10
 8008108:	54a3      	strb	r3, [r4, r2]
 800810a:	3201      	adds	r2, #1
 800810c:	54a3      	strb	r3, [r4, r2]
 800810e:	3201      	adds	r2, #1
 8008110:	54a3      	strb	r3, [r4, r2]
 8008112:	3201      	adds	r2, #1
 8008114:	54a3      	strb	r3, [r4, r2]
 8008116:	3201      	adds	r2, #1
 8008118:	54a3      	strb	r3, [r4, r2]
 800811a:	3201      	adds	r2, #1
 800811c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800811e:	3201      	adds	r2, #1
 8008120:	54a3      	strb	r3, [r4, r2]
 8008122:	3201      	adds	r2, #1
 8008124:	54a3      	strb	r3, [r4, r2]
 8008126:	3201      	adds	r2, #1
 8008128:	54a3      	strb	r3, [r4, r2]
 800812a:	3201      	adds	r2, #1
 800812c:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800812e:	5563      	strb	r3, [r4, r5]
}
 8008130:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8008132:	333c      	adds	r3, #60	; 0x3c
 8008134:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 8008136:	f7fc f9fb 	bl	8004530 <HAL_TIM_PWM_MspInit>
 800813a:	e7d9      	b.n	80080f0 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 800813c:	2001      	movs	r0, #1
 800813e:	e7f7      	b.n	8008130 <HAL_TIM_PWM_Init+0x50>

08008140 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008140:	2210      	movs	r2, #16
 8008142:	6a03      	ldr	r3, [r0, #32]
{
 8008144:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008146:	4393      	bics	r3, r2
 8008148:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800814a:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800814c:	4c16      	ldr	r4, [pc, #88]	; (80081a8 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 800814e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008150:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008152:	4025      	ands	r5, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008154:	680c      	ldr	r4, [r1, #0]
 8008156:	0224      	lsls	r4, r4, #8
 8008158:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 800815a:	2420      	movs	r4, #32
 800815c:	43a2      	bics	r2, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800815e:	688c      	ldr	r4, [r1, #8]
 8008160:	0124      	lsls	r4, r4, #4
 8008162:	4322      	orrs	r2, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008164:	4c11      	ldr	r4, [pc, #68]	; (80081ac <TIM_OC2_SetConfig+0x6c>)
 8008166:	42a0      	cmp	r0, r4
 8008168:	d015      	beq.n	8008196 <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800816a:	4c11      	ldr	r4, [pc, #68]	; (80081b0 <TIM_OC2_SetConfig+0x70>)
 800816c:	42a0      	cmp	r0, r4
 800816e:	d005      	beq.n	800817c <TIM_OC2_SetConfig+0x3c>
 8008170:	4c10      	ldr	r4, [pc, #64]	; (80081b4 <TIM_OC2_SetConfig+0x74>)
 8008172:	42a0      	cmp	r0, r4
 8008174:	d002      	beq.n	800817c <TIM_OC2_SetConfig+0x3c>
 8008176:	4c10      	ldr	r4, [pc, #64]	; (80081b8 <TIM_OC2_SetConfig+0x78>)
 8008178:	42a0      	cmp	r0, r4
 800817a:	d106      	bne.n	800818a <TIM_OC2_SetConfig+0x4a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800817c:	4e0f      	ldr	r6, [pc, #60]	; (80081bc <TIM_OC2_SetConfig+0x7c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800817e:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008180:	401e      	ands	r6, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008182:	698b      	ldr	r3, [r1, #24]
 8008184:	4323      	orrs	r3, r4
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4333      	orrs	r3, r6
  TIMx->CR2 = tmpcr2;
 800818a:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800818c:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800818e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8008190:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8008192:	6202      	str	r2, [r0, #32]
}
 8008194:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer &= ~TIM_CCER_CC2NP;
 8008196:	2480      	movs	r4, #128	; 0x80
 8008198:	43a2      	bics	r2, r4
 800819a:	0014      	movs	r4, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800819c:	68ca      	ldr	r2, [r1, #12]
 800819e:	0112      	lsls	r2, r2, #4
 80081a0:	4322      	orrs	r2, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 80081a2:	2440      	movs	r4, #64	; 0x40
 80081a4:	43a2      	bics	r2, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081a6:	e7e9      	b.n	800817c <TIM_OC2_SetConfig+0x3c>
 80081a8:	feff8cff 	.word	0xfeff8cff
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40014000 	.word	0x40014000
 80081b4:	40014400 	.word	0x40014400
 80081b8:	40014800 	.word	0x40014800
 80081bc:	fffff3ff 	.word	0xfffff3ff

080081c0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80081c0:	233c      	movs	r3, #60	; 0x3c
{
 80081c2:	b570      	push	{r4, r5, r6, lr}
 80081c4:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80081c6:	5cc1      	ldrb	r1, [r0, r3]
{
 80081c8:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80081ca:	2901      	cmp	r1, #1
 80081cc:	d100      	bne.n	80081d0 <HAL_TIM_PWM_ConfigChannel+0x10>
 80081ce:	e07d      	b.n	80082cc <HAL_TIM_PWM_ConfigChannel+0x10c>
 80081d0:	2101      	movs	r1, #1
 80081d2:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80081d4:	2a14      	cmp	r2, #20
 80081d6:	d814      	bhi.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x42>
 80081d8:	4b3d      	ldr	r3, [pc, #244]	; (80082d0 <HAL_TIM_PWM_ConfigChannel+0x110>)
 80081da:	0092      	lsls	r2, r2, #2
 80081dc:	589b      	ldr	r3, [r3, r2]
 80081de:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e0:	0029      	movs	r1, r5
 80081e2:	6800      	ldr	r0, [r0, #0]
 80081e4:	f7ff fc52 	bl	8007a8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081e8:	2108      	movs	r1, #8
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081f2:	699a      	ldr	r2, [r3, #24]
 80081f4:	3904      	subs	r1, #4
 80081f6:	438a      	bics	r2, r1
 80081f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	6929      	ldr	r1, [r5, #16]
 80081fe:	430a      	orrs	r2, r1
 8008200:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008202:	233c      	movs	r3, #60	; 0x3c
 8008204:	2200      	movs	r2, #0
  return HAL_OK;
 8008206:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8008208:	54e2      	strb	r2, [r4, r3]
}
 800820a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800820c:	0029      	movs	r1, r5
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	f7ff fd2c 	bl	8007c6c <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008214:	2280      	movs	r2, #128	; 0x80
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	0112      	lsls	r2, r2, #4
 800821a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800821c:	430a      	orrs	r2, r1
 800821e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008222:	492c      	ldr	r1, [pc, #176]	; (80082d4 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8008224:	400a      	ands	r2, r1
 8008226:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008228:	692a      	ldr	r2, [r5, #16]
 800822a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800822c:	0212      	lsls	r2, r2, #8
 800822e:	430a      	orrs	r2, r1
 8008230:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008232:	e7e6      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x42>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008234:	0029      	movs	r1, r5
 8008236:	6800      	ldr	r0, [r0, #0]
 8008238:	f7ff ff82 	bl	8008140 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800823c:	2280      	movs	r2, #128	; 0x80
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	0112      	lsls	r2, r2, #4
 8008242:	6999      	ldr	r1, [r3, #24]
 8008244:	430a      	orrs	r2, r1
 8008246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	4922      	ldr	r1, [pc, #136]	; (80082d4 <HAL_TIM_PWM_ConfigChannel+0x114>)
 800824c:	400a      	ands	r2, r1
 800824e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008250:	692a      	ldr	r2, [r5, #16]
 8008252:	6999      	ldr	r1, [r3, #24]
 8008254:	0212      	lsls	r2, r2, #8
 8008256:	430a      	orrs	r2, r1
 8008258:	619a      	str	r2, [r3, #24]
      break;
 800825a:	e7d2      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x42>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800825c:	0029      	movs	r1, r5
 800825e:	6800      	ldr	r0, [r0, #0]
 8008260:	f7ff fc4e 	bl	8007b00 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008264:	2108      	movs	r1, #8
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	69da      	ldr	r2, [r3, #28]
 800826a:	430a      	orrs	r2, r1
 800826c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	3904      	subs	r1, #4
 8008272:	438a      	bics	r2, r1
 8008274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008276:	69da      	ldr	r2, [r3, #28]
 8008278:	6929      	ldr	r1, [r5, #16]
 800827a:	430a      	orrs	r2, r1
 800827c:	61da      	str	r2, [r3, #28]
      break;
 800827e:	e7c0      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008280:	0029      	movs	r1, r5
 8008282:	6800      	ldr	r0, [r0, #0]
 8008284:	f7ff fc82 	bl	8007b8c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008288:	2280      	movs	r2, #128	; 0x80
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	0112      	lsls	r2, r2, #4
 800828e:	69d9      	ldr	r1, [r3, #28]
 8008290:	430a      	orrs	r2, r1
 8008292:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008294:	69da      	ldr	r2, [r3, #28]
 8008296:	490f      	ldr	r1, [pc, #60]	; (80082d4 <HAL_TIM_PWM_ConfigChannel+0x114>)
 8008298:	400a      	ands	r2, r1
 800829a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800829c:	692a      	ldr	r2, [r5, #16]
 800829e:	69d9      	ldr	r1, [r3, #28]
 80082a0:	0212      	lsls	r2, r2, #8
 80082a2:	430a      	orrs	r2, r1
 80082a4:	61da      	str	r2, [r3, #28]
      break;
 80082a6:	e7ac      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x42>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082a8:	0029      	movs	r1, r5
 80082aa:	6800      	ldr	r0, [r0, #0]
 80082ac:	f7ff fca8 	bl	8007c00 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082b0:	2108      	movs	r1, #8
 80082b2:	6823      	ldr	r3, [r4, #0]
 80082b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082b6:	430a      	orrs	r2, r1
 80082b8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082bc:	3904      	subs	r1, #4
 80082be:	438a      	bics	r2, r1
 80082c0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082c4:	6929      	ldr	r1, [r5, #16]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082ca:	e79a      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x42>
  __HAL_LOCK(htim);
 80082cc:	2002      	movs	r0, #2
 80082ce:	e79c      	b.n	800820a <HAL_TIM_PWM_ConfigChannel+0x4a>
 80082d0:	0800ceb8 	.word	0x0800ceb8
 80082d4:	fffffbff 	.word	0xfffffbff

080082d8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082d8:	233c      	movs	r3, #60	; 0x3c
{
 80082da:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80082dc:	5cc3      	ldrb	r3, [r0, r3]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d02a      	beq.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082e2:	233d      	movs	r3, #61	; 0x3d
 80082e4:	2202      	movs	r2, #2
 80082e6:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082e8:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082ea:	4d14      	ldr	r5, [pc, #80]	; (800833c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 80082ec:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80082ee:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082f0:	42aa      	cmp	r2, r5
 80082f2:	d017      	beq.n	8008324 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082f4:	2570      	movs	r5, #112	; 0x70
 80082f6:	43ab      	bics	r3, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082f8:	680d      	ldr	r5, [r1, #0]
 80082fa:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082fc:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fe:	4b10      	ldr	r3, [pc, #64]	; (8008340 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8008300:	429a      	cmp	r2, r3
 8008302:	d002      	beq.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8008304:	4b0f      	ldr	r3, [pc, #60]	; (8008344 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8008306:	429a      	cmp	r2, r3
 8008308:	d104      	bne.n	8008314 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800830a:	2380      	movs	r3, #128	; 0x80
 800830c:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800830e:	688b      	ldr	r3, [r1, #8]
 8008310:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008312:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008314:	233d      	movs	r3, #61	; 0x3d
 8008316:	2201      	movs	r2, #1
 8008318:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800831a:	2200      	movs	r2, #0
 800831c:	3b01      	subs	r3, #1
 800831e:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8008320:	2000      	movs	r0, #0
}
 8008322:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008324:	4d08      	ldr	r5, [pc, #32]	; (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 8008326:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008328:	684d      	ldr	r5, [r1, #4]
 800832a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800832c:	2570      	movs	r5, #112	; 0x70
 800832e:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008330:	680d      	ldr	r5, [r1, #0]
 8008332:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008334:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008336:	e7e8      	b.n	800830a <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 8008338:	2002      	movs	r0, #2
 800833a:	e7f2      	b.n	8008322 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800833c:	40012c00 	.word	0x40012c00
 8008340:	40000400 	.word	0x40000400
 8008344:	40014000 	.word	0x40014000
 8008348:	ff0fffff 	.word	0xff0fffff

0800834c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800834c:	233c      	movs	r3, #60	; 0x3c
{
 800834e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8008350:	5cc3      	ldrb	r3, [r0, r3]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d03d      	beq.n	80083d2 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008356:	68ca      	ldr	r2, [r1, #12]
 8008358:	4b1f      	ldr	r3, [pc, #124]	; (80083d8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800835a:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800835c:	4013      	ands	r3, r2
 800835e:	688a      	ldr	r2, [r1, #8]
 8008360:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008362:	4a1e      	ldr	r2, [pc, #120]	; (80083dc <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8008364:	4013      	ands	r3, r2
 8008366:	684a      	ldr	r2, [r1, #4]
 8008368:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800836a:	4a1d      	ldr	r2, [pc, #116]	; (80083e0 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 800836c:	4013      	ands	r3, r2
 800836e:	680a      	ldr	r2, [r1, #0]
 8008370:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008372:	4a1c      	ldr	r2, [pc, #112]	; (80083e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8008374:	4013      	ands	r3, r2
 8008376:	690a      	ldr	r2, [r1, #16]
 8008378:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800837a:	4a1b      	ldr	r2, [pc, #108]	; (80083e8 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 800837c:	4013      	ands	r3, r2
 800837e:	694a      	ldr	r2, [r1, #20]
 8008380:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008382:	4a1a      	ldr	r2, [pc, #104]	; (80083ec <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8008384:	4013      	ands	r3, r2
 8008386:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8008388:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800838a:	4a19      	ldr	r2, [pc, #100]	; (80083f0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 800838c:	4013      	ands	r3, r2
 800838e:	698a      	ldr	r2, [r1, #24]
 8008390:	0412      	lsls	r2, r2, #16
 8008392:	4313      	orrs	r3, r2
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008394:	4a17      	ldr	r2, [pc, #92]	; (80083f4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8008396:	4294      	cmp	r4, r2
 8008398:	d005      	beq.n	80083a6 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800839a:	6463      	str	r3, [r4, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800839c:	2200      	movs	r2, #0
 800839e:	233c      	movs	r3, #60	; 0x3c
 80083a0:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80083a2:	2000      	movs	r0, #0
}
 80083a4:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80083a6:	4a14      	ldr	r2, [pc, #80]	; (80083f8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	69ca      	ldr	r2, [r1, #28]
 80083ac:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80083ae:	4a13      	ldr	r2, [pc, #76]	; (80083fc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80083b4:	0512      	lsls	r2, r2, #20
 80083b6:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083b8:	4a11      	ldr	r2, [pc, #68]	; (8008400 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	6a0a      	ldr	r2, [r1, #32]
 80083be:	4313      	orrs	r3, r2
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083c0:	4a10      	ldr	r2, [pc, #64]	; (8008404 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80083c6:	4313      	orrs	r3, r2
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80083c8:	4a0f      	ldr	r2, [pc, #60]	; (8008408 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80083ca:	401a      	ands	r2, r3
 80083cc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80083ce:	4313      	orrs	r3, r2
 80083d0:	e7e3      	b.n	800839a <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
  __HAL_LOCK(htim);
 80083d2:	2002      	movs	r0, #2
 80083d4:	e7e6      	b.n	80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	fffffcff 	.word	0xfffffcff
 80083dc:	fffffbff 	.word	0xfffffbff
 80083e0:	fffff7ff 	.word	0xfffff7ff
 80083e4:	ffffefff 	.word	0xffffefff
 80083e8:	ffffdfff 	.word	0xffffdfff
 80083ec:	ffffbfff 	.word	0xffffbfff
 80083f0:	fff0ffff 	.word	0xfff0ffff
 80083f4:	40012c00 	.word	0x40012c00
 80083f8:	efffffff 	.word	0xefffffff
 80083fc:	ff0fffff 	.word	0xff0fffff
 8008400:	feffffff 	.word	0xfeffffff
 8008404:	fdffffff 	.word	0xfdffffff
 8008408:	dfffffff 	.word	0xdfffffff

0800840c <HAL_TIMEx_CommutCallback>:
 800840c:	4770      	bx	lr
 800840e:	46c0      	nop			; (mov r8, r8)

08008410 <HAL_TIMEx_BreakCallback>:
 8008410:	4770      	bx	lr
 8008412:	46c0      	nop			; (mov r8, r8)

08008414 <HAL_TIMEx_Break2Callback>:
 8008414:	4770      	bx	lr
 8008416:	46c0      	nop			; (mov r8, r8)

08008418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008418:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800841a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800841e:	2201      	movs	r2, #1
 8008420:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008424:	6801      	ldr	r1, [r0, #0]
 8008426:	4d13      	ldr	r5, [pc, #76]	; (8008474 <UART_EndRxTransfer+0x5c>)
 8008428:	680b      	ldr	r3, [r1, #0]
 800842a:	402b      	ands	r3, r5
 800842c:	600b      	str	r3, [r1, #0]
 800842e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008432:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008436:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800843a:	6802      	ldr	r2, [r0, #0]
 800843c:	4c0e      	ldr	r4, [pc, #56]	; (8008478 <UART_EndRxTransfer+0x60>)
 800843e:	6893      	ldr	r3, [r2, #8]
 8008440:	4023      	ands	r3, r4
 8008442:	6093      	str	r3, [r2, #8]
 8008444:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008448:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800844a:	2b01      	cmp	r3, #1
 800844c:	d10a      	bne.n	8008464 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800844e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008452:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008456:	2410      	movs	r4, #16
 8008458:	6802      	ldr	r2, [r0, #0]
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	43a3      	bics	r3, r4
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008464:	2388      	movs	r3, #136	; 0x88
 8008466:	2220      	movs	r2, #32
 8008468:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800846a:	2300      	movs	r3, #0
 800846c:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800846e:	6703      	str	r3, [r0, #112]	; 0x70
}
 8008470:	bd30      	pop	{r4, r5, pc}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	fffffedf 	.word	0xfffffedf
 8008478:	effffffe 	.word	0xeffffffe

0800847c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800847c:	2384      	movs	r3, #132	; 0x84
 800847e:	58c3      	ldr	r3, [r0, r3]
{
 8008480:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008482:	2b21      	cmp	r3, #33	; 0x21
 8008484:	d000      	beq.n	8008488 <UART_TxISR_16BIT+0xc>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008486:	bd10      	pop	{r4, pc}
    if (huart->TxXferCount == 0U)
 8008488:	3335      	adds	r3, #53	; 0x35
 800848a:	5ac2      	ldrh	r2, [r0, r3]
 800848c:	2a00      	cmp	r2, #0
 800848e:	d117      	bne.n	80084c0 <UART_TxISR_16BIT+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008490:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008494:	3201      	adds	r2, #1
 8008496:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800849a:	2480      	movs	r4, #128	; 0x80
 800849c:	6801      	ldr	r1, [r0, #0]
 800849e:	680b      	ldr	r3, [r1, #0]
 80084a0:	43a3      	bics	r3, r4
 80084a2:	600b      	str	r3, [r1, #0]
 80084a4:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ac:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084b0:	6802      	ldr	r2, [r0, #0]
 80084b2:	2040      	movs	r0, #64	; 0x40
 80084b4:	6813      	ldr	r3, [r2, #0]
 80084b6:	4303      	orrs	r3, r0
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	f381 8810 	msr	PRIMASK, r1
}
 80084be:	e7e2      	b.n	8008486 <UART_TxISR_16BIT+0xa>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80084c0:	6d01      	ldr	r1, [r0, #80]	; 0x50
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80084c2:	6804      	ldr	r4, [r0, #0]
 80084c4:	880a      	ldrh	r2, [r1, #0]
      huart->pTxBuffPtr += 2U;
 80084c6:	3102      	adds	r1, #2
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80084c8:	05d2      	lsls	r2, r2, #23
 80084ca:	0dd2      	lsrs	r2, r2, #23
 80084cc:	62a2      	str	r2, [r4, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80084ce:	6501      	str	r1, [r0, #80]	; 0x50
      huart->TxXferCount--;
 80084d0:	5ac2      	ldrh	r2, [r0, r3]
 80084d2:	3a01      	subs	r2, #1
 80084d4:	b292      	uxth	r2, r2
 80084d6:	52c2      	strh	r2, [r0, r3]
}
 80084d8:	e7d5      	b.n	8008486 <UART_TxISR_16BIT+0xa>
 80084da:	46c0      	nop			; (mov r8, r8)

080084dc <UART_TxISR_8BIT_FIFOEN>:
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084dc:	2384      	movs	r3, #132	; 0x84
 80084de:	58c3      	ldr	r3, [r0, r3]
{
 80084e0:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80084e2:	2b21      	cmp	r3, #33	; 0x21
 80084e4:	d000      	beq.n	80084e8 <UART_TxISR_8BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80084e8:	3349      	adds	r3, #73	; 0x49
 80084ea:	5ac3      	ldrh	r3, [r0, r3]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0fa      	beq.n	80084e6 <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 80084f0:	2456      	movs	r4, #86	; 0x56
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80084f2:	2580      	movs	r5, #128	; 0x80
 80084f4:	e010      	b.n	8008518 <UART_TxISR_8BIT_FIFOEN+0x3c>
 80084f6:	6802      	ldr	r2, [r0, #0]
 80084f8:	69d1      	ldr	r1, [r2, #28]
 80084fa:	420d      	tst	r5, r1
 80084fc:	d008      	beq.n	8008510 <UART_TxISR_8BIT_FIFOEN+0x34>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80084fe:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8008500:	780e      	ldrb	r6, [r1, #0]
        huart->pTxBuffPtr++;
 8008502:	3101      	adds	r1, #1
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008504:	6296      	str	r6, [r2, #40]	; 0x28
        huart->pTxBuffPtr++;
 8008506:	6501      	str	r1, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8008508:	5b02      	ldrh	r2, [r0, r4]
 800850a:	3a01      	subs	r2, #1
 800850c:	b292      	uxth	r2, r2
 800850e:	5302      	strh	r2, [r0, r4]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008510:	3b01      	subs	r3, #1
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0e6      	beq.n	80084e6 <UART_TxISR_8BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8008518:	5b02      	ldrh	r2, [r0, r4]
 800851a:	2a00      	cmp	r2, #0
 800851c:	d1eb      	bne.n	80084f6 <UART_TxISR_8BIT_FIFOEN+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800851e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008522:	3201      	adds	r2, #1
 8008524:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008528:	6801      	ldr	r1, [r0, #0]
 800852a:	4d09      	ldr	r5, [pc, #36]	; (8008550 <UART_TxISR_8BIT_FIFOEN+0x74>)
 800852c:	688b      	ldr	r3, [r1, #8]
 800852e:	402b      	ands	r3, r5
 8008530:	608b      	str	r3, [r1, #8]
 8008532:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008536:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800853e:	6802      	ldr	r2, [r0, #0]
 8008540:	2040      	movs	r0, #64	; 0x40
 8008542:	6813      	ldr	r3, [r2, #0]
 8008544:	4303      	orrs	r3, r0
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	f381 8810 	msr	PRIMASK, r1
}
 800854c:	e7cb      	b.n	80084e6 <UART_TxISR_8BIT_FIFOEN+0xa>
 800854e:	46c0      	nop			; (mov r8, r8)
 8008550:	ff7fffff 	.word	0xff7fffff

08008554 <UART_TxISR_16BIT_FIFOEN>:
{
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008554:	2384      	movs	r3, #132	; 0x84
 8008556:	58c3      	ldr	r3, [r0, r3]
{
 8008558:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800855a:	2b21      	cmp	r3, #33	; 0x21
 800855c:	d000      	beq.n	8008560 <UART_TxISR_16BIT_FIFOEN+0xc>
      {
        /* Nothing to do */
      }
    }
  }
}
 800855e:	bd70      	pop	{r4, r5, r6, pc}
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008560:	3349      	adds	r3, #73	; 0x49
 8008562:	5ac3      	ldrh	r3, [r0, r3]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d0fa      	beq.n	800855e <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8008568:	2556      	movs	r5, #86	; 0x56
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800856a:	2680      	movs	r6, #128	; 0x80
 800856c:	e012      	b.n	8008594 <UART_TxISR_16BIT_FIFOEN+0x40>
 800856e:	6801      	ldr	r1, [r0, #0]
 8008570:	69ca      	ldr	r2, [r1, #28]
 8008572:	4216      	tst	r6, r2
 8008574:	d00a      	beq.n	800858c <UART_TxISR_16BIT_FIFOEN+0x38>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8008576:	6d04      	ldr	r4, [r0, #80]	; 0x50
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008578:	8822      	ldrh	r2, [r4, #0]
        huart->pTxBuffPtr += 2U;
 800857a:	3402      	adds	r4, #2
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800857c:	05d2      	lsls	r2, r2, #23
 800857e:	0dd2      	lsrs	r2, r2, #23
 8008580:	628a      	str	r2, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008582:	6504      	str	r4, [r0, #80]	; 0x50
        huart->TxXferCount--;
 8008584:	5b42      	ldrh	r2, [r0, r5]
 8008586:	3a01      	subs	r2, #1
 8008588:	b292      	uxth	r2, r2
 800858a:	5342      	strh	r2, [r0, r5]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800858c:	3b01      	subs	r3, #1
 800858e:	b29b      	uxth	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0e4      	beq.n	800855e <UART_TxISR_16BIT_FIFOEN+0xa>
      if (huart->TxXferCount == 0U)
 8008594:	5b42      	ldrh	r2, [r0, r5]
 8008596:	2a00      	cmp	r2, #0
 8008598:	d1e9      	bne.n	800856e <UART_TxISR_16BIT_FIFOEN+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859e:	3201      	adds	r2, #1
 80085a0:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80085a4:	6801      	ldr	r1, [r0, #0]
 80085a6:	4d09      	ldr	r5, [pc, #36]	; (80085cc <UART_TxISR_16BIT_FIFOEN+0x78>)
 80085a8:	688b      	ldr	r3, [r1, #8]
 80085aa:	402b      	ands	r3, r5
 80085ac:	608b      	str	r3, [r1, #8]
 80085ae:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b6:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085ba:	6802      	ldr	r2, [r0, #0]
 80085bc:	2040      	movs	r0, #64	; 0x40
 80085be:	6813      	ldr	r3, [r2, #0]
 80085c0:	4303      	orrs	r3, r0
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	f381 8810 	msr	PRIMASK, r1
}
 80085c8:	e7c9      	b.n	800855e <UART_TxISR_16BIT_FIFOEN+0xa>
 80085ca:	46c0      	nop			; (mov r8, r8)
 80085cc:	ff7fffff 	.word	0xff7fffff

080085d0 <UART_TxISR_8BIT>:
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085d0:	2384      	movs	r3, #132	; 0x84
 80085d2:	58c3      	ldr	r3, [r0, r3]
{
 80085d4:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085d6:	2b21      	cmp	r3, #33	; 0x21
 80085d8:	d000      	beq.n	80085dc <UART_TxISR_8BIT+0xc>
}
 80085da:	bd30      	pop	{r4, r5, pc}
    if (huart->TxXferCount == 0U)
 80085dc:	3335      	adds	r3, #53	; 0x35
 80085de:	5ac2      	ldrh	r2, [r0, r3]
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	d117      	bne.n	8008614 <UART_TxISR_8BIT+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e8:	3201      	adds	r2, #1
 80085ea:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80085ee:	2580      	movs	r5, #128	; 0x80
 80085f0:	6801      	ldr	r1, [r0, #0]
 80085f2:	680b      	ldr	r3, [r1, #0]
 80085f4:	43ab      	bics	r3, r5
 80085f6:	600b      	str	r3, [r1, #0]
 80085f8:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085fc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008600:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008604:	6802      	ldr	r2, [r0, #0]
 8008606:	2040      	movs	r0, #64	; 0x40
 8008608:	6813      	ldr	r3, [r2, #0]
 800860a:	4303      	orrs	r3, r0
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	f381 8810 	msr	PRIMASK, r1
}
 8008612:	e7e2      	b.n	80085da <UART_TxISR_8BIT+0xa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008614:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008616:	6801      	ldr	r1, [r0, #0]
 8008618:	7814      	ldrb	r4, [r2, #0]
      huart->pTxBuffPtr++;
 800861a:	3201      	adds	r2, #1
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800861c:	628c      	str	r4, [r1, #40]	; 0x28
      huart->pTxBuffPtr++;
 800861e:	6502      	str	r2, [r0, #80]	; 0x50
      huart->TxXferCount--;
 8008620:	5ac2      	ldrh	r2, [r0, r3]
 8008622:	3a01      	subs	r2, #1
 8008624:	b292      	uxth	r2, r2
 8008626:	52c2      	strh	r2, [r0, r3]
}
 8008628:	e7d7      	b.n	80085da <UART_TxISR_8BIT+0xa>
 800862a:	46c0      	nop			; (mov r8, r8)

0800862c <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 800862c:	2384      	movs	r3, #132	; 0x84
 800862e:	58c3      	ldr	r3, [r0, r3]
{
 8008630:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8008632:	2b20      	cmp	r3, #32
 8008634:	d13b      	bne.n	80086ae <HAL_UART_Transmit_IT+0x82>
    if ((pData == NULL) || (Size == 0U))
 8008636:	2900      	cmp	r1, #0
 8008638:	d037      	beq.n	80086aa <HAL_UART_Transmit_IT+0x7e>
 800863a:	2a00      	cmp	r2, #0
 800863c:	d035      	beq.n	80086aa <HAL_UART_Transmit_IT+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800863e:	2480      	movs	r4, #128	; 0x80
 8008640:	6883      	ldr	r3, [r0, #8]
 8008642:	0164      	lsls	r4, r4, #5
 8008644:	42a3      	cmp	r3, r4
 8008646:	d02b      	beq.n	80086a0 <HAL_UART_Transmit_IT+0x74>
    __HAL_LOCK(huart);
 8008648:	2480      	movs	r4, #128	; 0x80
 800864a:	5d05      	ldrb	r5, [r0, r4]
 800864c:	2d01      	cmp	r5, #1
 800864e:	d02e      	beq.n	80086ae <HAL_UART_Transmit_IT+0x82>
 8008650:	2501      	movs	r5, #1
 8008652:	5505      	strb	r5, [r0, r4]
    huart->pTxBuffPtr  = pData;
 8008654:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008656:	2154      	movs	r1, #84	; 0x54
 8008658:	5242      	strh	r2, [r0, r1]
    huart->TxXferCount = Size;
 800865a:	3102      	adds	r1, #2
 800865c:	5242      	strh	r2, [r0, r1]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800865e:	228c      	movs	r2, #140	; 0x8c
 8008660:	2100      	movs	r1, #0
 8008662:	5081      	str	r1, [r0, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008664:	3a08      	subs	r2, #8
 8008666:	3121      	adds	r1, #33	; 0x21
 8008668:	5081      	str	r1, [r0, r2]
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800866a:	2280      	movs	r2, #128	; 0x80
 800866c:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800866e:	0592      	lsls	r2, r2, #22
 8008670:	4291      	cmp	r1, r2
 8008672:	d01e      	beq.n	80086b2 <HAL_UART_Transmit_IT+0x86>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008674:	2280      	movs	r2, #128	; 0x80
 8008676:	0152      	lsls	r2, r2, #5
 8008678:	4293      	cmp	r3, r2
 800867a:	d032      	beq.n	80086e2 <HAL_UART_Transmit_IT+0xb6>
        huart->TxISR = UART_TxISR_8BIT;
 800867c:	4b1e      	ldr	r3, [pc, #120]	; (80086f8 <HAL_UART_Transmit_IT+0xcc>)
 800867e:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 8008680:	2180      	movs	r1, #128	; 0x80
 8008682:	2300      	movs	r3, #0
 8008684:	5443      	strb	r3, [r0, r1]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008686:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800868a:	3301      	adds	r3, #1
 800868c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008690:	6802      	ldr	r2, [r0, #0]
 8008692:	6813      	ldr	r3, [r2, #0]
 8008694:	430b      	orrs	r3, r1
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	f384 8810 	msr	PRIMASK, r4
    return HAL_OK;
 800869c:	2000      	movs	r0, #0
}
 800869e:	e005      	b.n	80086ac <HAL_UART_Transmit_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086a0:	6904      	ldr	r4, [r0, #16]
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	d1d0      	bne.n	8008648 <HAL_UART_Transmit_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80086a6:	07cc      	lsls	r4, r1, #31
 80086a8:	d5ce      	bpl.n	8008648 <HAL_UART_Transmit_IT+0x1c>
      return HAL_ERROR;
 80086aa:	2001      	movs	r0, #1
}
 80086ac:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 80086ae:	2002      	movs	r0, #2
 80086b0:	e7fc      	b.n	80086ac <HAL_UART_Transmit_IT+0x80>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086b2:	2280      	movs	r2, #128	; 0x80
 80086b4:	0152      	lsls	r2, r2, #5
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d018      	beq.n	80086ec <HAL_UART_Transmit_IT+0xc0>
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80086ba:	4b10      	ldr	r3, [pc, #64]	; (80086fc <HAL_UART_Transmit_IT+0xd0>)
 80086bc:	6743      	str	r3, [r0, #116]	; 0x74
      __HAL_UNLOCK(huart);
 80086be:	2200      	movs	r2, #0
 80086c0:	2380      	movs	r3, #128	; 0x80
 80086c2:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c8:	3b7f      	subs	r3, #127	; 0x7f
 80086ca:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80086ce:	2380      	movs	r3, #128	; 0x80
 80086d0:	6802      	ldr	r2, [r0, #0]
 80086d2:	041b      	lsls	r3, r3, #16
 80086d4:	6890      	ldr	r0, [r2, #8]
 80086d6:	4303      	orrs	r3, r0
 80086d8:	6093      	str	r3, [r2, #8]
 80086da:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80086de:	2000      	movs	r0, #0
}
 80086e0:	e7e4      	b.n	80086ac <HAL_UART_Transmit_IT+0x80>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086e2:	6903      	ldr	r3, [r0, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1c9      	bne.n	800867c <HAL_UART_Transmit_IT+0x50>
        huart->TxISR = UART_TxISR_16BIT;
 80086e8:	4b05      	ldr	r3, [pc, #20]	; (8008700 <HAL_UART_Transmit_IT+0xd4>)
 80086ea:	e7c8      	b.n	800867e <HAL_UART_Transmit_IT+0x52>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086ec:	6903      	ldr	r3, [r0, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e3      	bne.n	80086ba <HAL_UART_Transmit_IT+0x8e>
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80086f2:	4b04      	ldr	r3, [pc, #16]	; (8008704 <HAL_UART_Transmit_IT+0xd8>)
 80086f4:	e7e2      	b.n	80086bc <HAL_UART_Transmit_IT+0x90>
 80086f6:	46c0      	nop			; (mov r8, r8)
 80086f8:	080085d1 	.word	0x080085d1
 80086fc:	080084dd 	.word	0x080084dd
 8008700:	0800847d 	.word	0x0800847d
 8008704:	08008555 	.word	0x08008555

08008708 <HAL_UART_ErrorCallback>:
 8008708:	4770      	bx	lr
 800870a:	46c0      	nop			; (mov r8, r8)

0800870c <UART_DMAAbortOnError>:
  huart->RxXferCount = 0U;
 800870c:	2300      	movs	r3, #0
 800870e:	225e      	movs	r2, #94	; 0x5e
{
 8008710:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008712:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8008714:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8008716:	3a08      	subs	r2, #8
 8008718:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 800871a:	f7ff fff5 	bl	8008708 <HAL_UART_ErrorCallback>
}
 800871e:	bd10      	pop	{r4, pc}

08008720 <HAL_UARTEx_RxEventCallback>:
}
 8008720:	4770      	bx	lr
 8008722:	46c0      	nop			; (mov r8, r8)

08008724 <HAL_UART_IRQHandler>:
{
 8008724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008726:	46d6      	mov	lr, sl
 8008728:	464f      	mov	r7, r9
 800872a:	4646      	mov	r6, r8
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800872c:	6802      	ldr	r2, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800872e:	4db3      	ldr	r5, [pc, #716]	; (80089fc <HAL_UART_IRQHandler+0x2d8>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008730:	69d3      	ldr	r3, [r2, #28]
{
 8008732:	0004      	movs	r4, r0
 8008734:	b5c0      	push	{r6, r7, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008736:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008738:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 800873a:	422b      	tst	r3, r5
 800873c:	d100      	bne.n	8008740 <HAL_UART_IRQHandler+0x1c>
 800873e:	e0c4      	b.n	80088ca <HAL_UART_IRQHandler+0x1a6>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008740:	4eaf      	ldr	r6, [pc, #700]	; (8008a00 <HAL_UART_IRQHandler+0x2dc>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008742:	4db0      	ldr	r5, [pc, #704]	; (8008a04 <HAL_UART_IRQHandler+0x2e0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008744:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008746:	4005      	ands	r5, r0
 8008748:	4335      	orrs	r5, r6
 800874a:	d152      	bne.n	80087f2 <HAL_UART_IRQHandler+0xce>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800874c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800874e:	2d01      	cmp	r5, #1
 8008750:	d025      	beq.n	800879e <HAL_UART_IRQHandler+0x7a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008752:	2580      	movs	r5, #128	; 0x80
 8008754:	036d      	lsls	r5, r5, #13
 8008756:	422b      	tst	r3, r5
 8008758:	d002      	beq.n	8008760 <HAL_UART_IRQHandler+0x3c>
 800875a:	024e      	lsls	r6, r1, #9
 800875c:	d500      	bpl.n	8008760 <HAL_UART_IRQHandler+0x3c>
 800875e:	e0db      	b.n	8008918 <HAL_UART_IRQHandler+0x1f4>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008760:	2280      	movs	r2, #128	; 0x80
 8008762:	421a      	tst	r2, r3
 8008764:	d006      	beq.n	8008774 <HAL_UART_IRQHandler+0x50>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008766:	2580      	movs	r5, #128	; 0x80
 8008768:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800876a:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800876c:	4029      	ands	r1, r5
 800876e:	4311      	orrs	r1, r2
 8008770:	d000      	beq.n	8008774 <HAL_UART_IRQHandler+0x50>
 8008772:	e0ca      	b.n	800890a <HAL_UART_IRQHandler+0x1e6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008774:	2240      	movs	r2, #64	; 0x40
 8008776:	421a      	tst	r2, r3
 8008778:	d002      	beq.n	8008780 <HAL_UART_IRQHandler+0x5c>
 800877a:	4202      	tst	r2, r0
 800877c:	d000      	beq.n	8008780 <HAL_UART_IRQHandler+0x5c>
 800877e:	e0d4      	b.n	800892a <HAL_UART_IRQHandler+0x206>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008780:	021a      	lsls	r2, r3, #8
 8008782:	d502      	bpl.n	800878a <HAL_UART_IRQHandler+0x66>
 8008784:	0042      	lsls	r2, r0, #1
 8008786:	d500      	bpl.n	800878a <HAL_UART_IRQHandler+0x66>
 8008788:	e0e3      	b.n	8008952 <HAL_UART_IRQHandler+0x22e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800878a:	01db      	lsls	r3, r3, #7
 800878c:	d502      	bpl.n	8008794 <HAL_UART_IRQHandler+0x70>
 800878e:	2800      	cmp	r0, #0
 8008790:	da00      	bge.n	8008794 <HAL_UART_IRQHandler+0x70>
 8008792:	e12a      	b.n	80089ea <HAL_UART_IRQHandler+0x2c6>
}
 8008794:	bce0      	pop	{r5, r6, r7}
 8008796:	46ba      	mov	sl, r7
 8008798:	46b1      	mov	r9, r6
 800879a:	46a8      	mov	r8, r5
 800879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800879e:	2610      	movs	r6, #16
 80087a0:	421e      	tst	r6, r3
 80087a2:	d0d6      	beq.n	8008752 <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087a4:	4206      	tst	r6, r0
 80087a6:	d0d4      	beq.n	8008752 <HAL_UART_IRQHandler+0x2e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	0018      	movs	r0, r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087ac:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ae:	6892      	ldr	r2, [r2, #8]
 80087b0:	4010      	ands	r0, r2
 80087b2:	4213      	tst	r3, r2
 80087b4:	d100      	bne.n	80087b8 <HAL_UART_IRQHandler+0x94>
 80087b6:	e0d7      	b.n	8008968 <HAL_UART_IRQHandler+0x244>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087b8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80087ba:	6810      	ldr	r0, [r2, #0]
 80087bc:	6842      	ldr	r2, [r0, #4]
 80087be:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	d0e7      	beq.n	8008794 <HAL_UART_IRQHandler+0x70>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087c4:	215c      	movs	r1, #92	; 0x5c
 80087c6:	468a      	mov	sl, r1
 80087c8:	5a61      	ldrh	r1, [r4, r1]
 80087ca:	4291      	cmp	r1, r2
 80087cc:	d9e2      	bls.n	8008794 <HAL_UART_IRQHandler+0x70>
        huart->RxXferCount = nb_remaining_rx_data;
 80087ce:	275e      	movs	r7, #94	; 0x5e
 80087d0:	53e2      	strh	r2, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80087d2:	2220      	movs	r2, #32
 80087d4:	0017      	movs	r7, r2
 80087d6:	6800      	ldr	r0, [r0, #0]
 80087d8:	4007      	ands	r7, r0
 80087da:	46bc      	mov	ip, r7
 80087dc:	4202      	tst	r2, r0
 80087de:	d100      	bne.n	80087e2 <HAL_UART_IRQHandler+0xbe>
 80087e0:	e118      	b.n	8008a14 <HAL_UART_IRQHandler+0x2f0>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087e2:	235e      	movs	r3, #94	; 0x5e
 80087e4:	5ae3      	ldrh	r3, [r4, r3]
 80087e6:	0020      	movs	r0, r4
 80087e8:	1ac9      	subs	r1, r1, r3
 80087ea:	b289      	uxth	r1, r1
 80087ec:	f7ff ff98 	bl	8008720 <HAL_UARTEx_RxEventCallback>
 80087f0:	e7d0      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087f2:	2501      	movs	r5, #1
 80087f4:	421d      	tst	r5, r3
 80087f6:	d008      	beq.n	800880a <HAL_UART_IRQHandler+0xe6>
 80087f8:	05c7      	lsls	r7, r0, #23
 80087fa:	d506      	bpl.n	800880a <HAL_UART_IRQHandler+0xe6>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087fc:	278c      	movs	r7, #140	; 0x8c
 80087fe:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008800:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008802:	59e7      	ldr	r7, [r4, r7]
 8008804:	433d      	orrs	r5, r7
 8008806:	4667      	mov	r7, ip
 8008808:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800880a:	2502      	movs	r5, #2
 800880c:	421d      	tst	r5, r3
 800880e:	d06b      	beq.n	80088e8 <HAL_UART_IRQHandler+0x1c4>
 8008810:	07cf      	lsls	r7, r1, #31
 8008812:	d50b      	bpl.n	800882c <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008814:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008816:	358a      	adds	r5, #138	; 0x8a
 8008818:	2704      	movs	r7, #4
 800881a:	46ac      	mov	ip, r5
 800881c:	5965      	ldr	r5, [r4, r5]
 800881e:	46b8      	mov	r8, r7
 8008820:	433d      	orrs	r5, r7
 8008822:	4667      	mov	r7, ip
 8008824:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008826:	4645      	mov	r5, r8
 8008828:	421d      	tst	r5, r3
 800882a:	d161      	bne.n	80088f0 <HAL_UART_IRQHandler+0x1cc>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800882c:	2708      	movs	r7, #8
 800882e:	421f      	tst	r7, r3
 8008830:	d008      	beq.n	8008844 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008832:	2520      	movs	r5, #32
 8008834:	4005      	ands	r5, r0
 8008836:	432e      	orrs	r6, r5
 8008838:	d004      	beq.n	8008844 <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800883a:	268c      	movs	r6, #140	; 0x8c
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800883c:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800883e:	59a5      	ldr	r5, [r4, r6]
 8008840:	432f      	orrs	r7, r5
 8008842:	51a7      	str	r7, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008844:	2580      	movs	r5, #128	; 0x80
 8008846:	012d      	lsls	r5, r5, #4
 8008848:	422b      	tst	r3, r5
 800884a:	d007      	beq.n	800885c <HAL_UART_IRQHandler+0x138>
 800884c:	0146      	lsls	r6, r0, #5
 800884e:	d505      	bpl.n	800885c <HAL_UART_IRQHandler+0x138>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008850:	268c      	movs	r6, #140	; 0x8c
 8008852:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008854:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008856:	59a5      	ldr	r5, [r4, r6]
 8008858:	433d      	orrs	r5, r7
 800885a:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800885c:	258c      	movs	r5, #140	; 0x8c
 800885e:	5965      	ldr	r5, [r4, r5]
 8008860:	2d00      	cmp	r5, #0
 8008862:	d097      	beq.n	8008794 <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008864:	2520      	movs	r5, #32
 8008866:	421d      	tst	r5, r3
 8008868:	d005      	beq.n	8008876 <HAL_UART_IRQHandler+0x152>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800886a:	4005      	ands	r5, r0
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800886c:	2080      	movs	r0, #128	; 0x80
 800886e:	0540      	lsls	r0, r0, #21
 8008870:	4001      	ands	r1, r0
 8008872:	430d      	orrs	r5, r1
 8008874:	d171      	bne.n	800895a <HAL_UART_IRQHandler+0x236>
      errorcode = huart->ErrorCode;
 8008876:	268c      	movs	r6, #140	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008878:	2740      	movs	r7, #64	; 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800887a:	2328      	movs	r3, #40	; 0x28
      errorcode = huart->ErrorCode;
 800887c:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800887e:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008880:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008882:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 8008884:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008886:	431d      	orrs	r5, r3
 8008888:	d100      	bne.n	800888c <HAL_UART_IRQHandler+0x168>
 800888a:	e0b2      	b.n	80089f2 <HAL_UART_IRQHandler+0x2ce>
        UART_EndRxTransfer(huart);
 800888c:	f7ff fdc4 	bl	8008418 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	421f      	tst	r7, r3
 8008896:	d044      	beq.n	8008922 <HAL_UART_IRQHandler+0x1fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008898:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800889c:	2301      	movs	r3, #1
 800889e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	6893      	ldr	r3, [r2, #8]
 80088a6:	43bb      	bics	r3, r7
 80088a8:	6093      	str	r3, [r2, #8]
 80088aa:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 80088ae:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d036      	beq.n	8008922 <HAL_UART_IRQHandler+0x1fe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088b4:	4b54      	ldr	r3, [pc, #336]	; (8008a08 <HAL_UART_IRQHandler+0x2e4>)
 80088b6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088b8:	f7fc feaa 	bl	8005610 <HAL_DMA_Abort_IT>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d100      	bne.n	80088c2 <HAL_UART_IRQHandler+0x19e>
 80088c0:	e768      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088c2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80088c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80088c6:	4798      	blx	r3
 80088c8:	e764      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088ca:	2520      	movs	r5, #32
 80088cc:	421d      	tst	r5, r3
 80088ce:	d100      	bne.n	80088d2 <HAL_UART_IRQHandler+0x1ae>
 80088d0:	e73c      	b.n	800874c <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088d2:	2680      	movs	r6, #128	; 0x80
 80088d4:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088d6:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088d8:	400e      	ands	r6, r1
 80088da:	4335      	orrs	r5, r6
 80088dc:	d100      	bne.n	80088e0 <HAL_UART_IRQHandler+0x1bc>
 80088de:	e735      	b.n	800874c <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 80088e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d115      	bne.n	8008912 <HAL_UART_IRQHandler+0x1ee>
 80088e6:	e755      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088e8:	075d      	lsls	r5, r3, #29
 80088ea:	d59f      	bpl.n	800882c <HAL_UART_IRQHandler+0x108>
 80088ec:	07cd      	lsls	r5, r1, #31
 80088ee:	d59d      	bpl.n	800882c <HAL_UART_IRQHandler+0x108>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088f0:	2504      	movs	r5, #4
 80088f2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088f4:	3588      	adds	r5, #136	; 0x88
 80088f6:	46a9      	mov	r9, r5
 80088f8:	5965      	ldr	r5, [r4, r5]
 80088fa:	46a8      	mov	r8, r5
 80088fc:	2502      	movs	r5, #2
 80088fe:	4647      	mov	r7, r8
 8008900:	432f      	orrs	r7, r5
 8008902:	003d      	movs	r5, r7
 8008904:	464f      	mov	r7, r9
 8008906:	51e5      	str	r5, [r4, r7]
 8008908:	e790      	b.n	800882c <HAL_UART_IRQHandler+0x108>
    if (huart->TxISR != NULL)
 800890a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800890c:	2b00      	cmp	r3, #0
 800890e:	d100      	bne.n	8008912 <HAL_UART_IRQHandler+0x1ee>
 8008910:	e740      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 8008912:	0020      	movs	r0, r4
 8008914:	4798      	blx	r3
 8008916:	e73d      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_WakeupCallback(huart);
 8008918:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800891a:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800891c:	f000 fe68 	bl	80095f0 <HAL_UARTEx_WakeupCallback>
    return;
 8008920:	e738      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
            HAL_UART_ErrorCallback(huart);
 8008922:	0020      	movs	r0, r4
 8008924:	f7ff fef0 	bl	8008708 <HAL_UART_ErrorCallback>
 8008928:	e734      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800892a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800892e:	2301      	movs	r3, #1
 8008930:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008934:	6821      	ldr	r1, [r4, #0]
 8008936:	680b      	ldr	r3, [r1, #0]
 8008938:	4393      	bics	r3, r2
 800893a:	600b      	str	r3, [r1, #0]
 800893c:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008940:	2384      	movs	r3, #132	; 0x84
 8008942:	3a20      	subs	r2, #32
 8008944:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008946:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008948:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 800894a:	6763      	str	r3, [r4, #116]	; 0x74
  HAL_UART_TxCpltCallback(huart);
 800894c:	f7fa fdfa 	bl	8003544 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008950:	e720      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008952:	0020      	movs	r0, r4
 8008954:	f000 fe50 	bl	80095f8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8008958:	e71c      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
        if (huart->RxISR != NULL)
 800895a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800895c:	2b00      	cmp	r3, #0
 800895e:	d08a      	beq.n	8008876 <HAL_UART_IRQHandler+0x152>
          huart->RxISR(huart);
 8008960:	0020      	movs	r0, r4
 8008962:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	e786      	b.n	8008876 <HAL_UART_IRQHandler+0x152>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008968:	225e      	movs	r2, #94	; 0x5e
 800896a:	5aa3      	ldrh	r3, [r4, r2]
      if ((huart->RxXferCount > 0U)
 800896c:	5aa2      	ldrh	r2, [r4, r2]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800896e:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8008970:	2a00      	cmp	r2, #0
 8008972:	d100      	bne.n	8008976 <HAL_UART_IRQHandler+0x252>
 8008974:	e70e      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008976:	225c      	movs	r2, #92	; 0x5c
 8008978:	5aa1      	ldrh	r1, [r4, r2]
 800897a:	1ac9      	subs	r1, r1, r3
 800897c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800897e:	2900      	cmp	r1, #0
 8008980:	d100      	bne.n	8008984 <HAL_UART_IRQHandler+0x260>
 8008982:	e707      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008984:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008988:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	4699      	mov	r9, r3
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4698      	mov	r8, r3
 8008994:	4642      	mov	r2, r8
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <HAL_UART_IRQHandler+0x2e8>)
 8008998:	401a      	ands	r2, r3
 800899a:	0013      	movs	r3, r2
 800899c:	464a      	mov	r2, r9
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089a4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a8:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	4699      	mov	r9, r3
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	4698      	mov	r8, r3
 80089b4:	4642      	mov	r2, r8
 80089b6:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <HAL_UART_IRQHandler+0x2ec>)
 80089b8:	401a      	ands	r2, r3
 80089ba:	0013      	movs	r3, r2
 80089bc:	464a      	mov	r2, r9
 80089be:	6093      	str	r3, [r2, #8]
 80089c0:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 80089c4:	2388      	movs	r3, #136	; 0x88
 80089c6:	2220      	movs	r2, #32
 80089c8:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ca:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80089cc:	6720      	str	r0, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d2:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d6:	6822      	ldr	r2, [r4, #0]
 80089d8:	6813      	ldr	r3, [r2, #0]
 80089da:	43b3      	bics	r3, r6
 80089dc:	6013      	str	r3, [r2, #0]
 80089de:	f380 8810 	msr	PRIMASK, r0
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089e2:	0020      	movs	r0, r4
 80089e4:	f7ff fe9c 	bl	8008720 <HAL_UARTEx_RxEventCallback>
 80089e8:	e6d4      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089ea:	0020      	movs	r0, r4
 80089ec:	f000 fe02 	bl	80095f4 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80089f0:	e6d0      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
        HAL_UART_ErrorCallback(huart);
 80089f2:	f7ff fe89 	bl	8008708 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f6:	51a5      	str	r5, [r4, r6]
 80089f8:	e6cc      	b.n	8008794 <HAL_UART_IRQHandler+0x70>
 80089fa:	46c0      	nop			; (mov r8, r8)
 80089fc:	0000080f 	.word	0x0000080f
 8008a00:	10000001 	.word	0x10000001
 8008a04:	04000120 	.word	0x04000120
 8008a08:	0800870d 	.word	0x0800870d
 8008a0c:	fffffedf 	.word	0xfffffedf
 8008a10:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a14:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a18:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	4f17      	ldr	r7, [pc, #92]	; (8008a7c <HAL_UART_IRQHandler+0x358>)
 8008a20:	6801      	ldr	r1, [r0, #0]
 8008a22:	4039      	ands	r1, r7
 8008a24:	6001      	str	r1, [r0, #0]
 8008a26:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a2a:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a2e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a32:	6820      	ldr	r0, [r4, #0]
 8008a34:	6881      	ldr	r1, [r0, #8]
 8008a36:	43a9      	bics	r1, r5
 8008a38:	6081      	str	r1, [r0, #8]
 8008a3a:	f388 8810 	msr	PRIMASK, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a3e:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a42:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a46:	6820      	ldr	r0, [r4, #0]
 8008a48:	6881      	ldr	r1, [r0, #8]
 8008a4a:	4399      	bics	r1, r3
 8008a4c:	6081      	str	r1, [r0, #8]
 8008a4e:	f388 8810 	msr	PRIMASK, r8
          huart->RxState = HAL_UART_STATE_READY;
 8008a52:	3348      	adds	r3, #72	; 0x48
 8008a54:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a56:	4663      	mov	r3, ip
 8008a58:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a5a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a5e:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a62:	6822      	ldr	r2, [r4, #0]
 8008a64:	6813      	ldr	r3, [r2, #0]
 8008a66:	43b3      	bics	r3, r6
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a6e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8008a70:	f7fc fd90 	bl	8005594 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a74:	4653      	mov	r3, sl
 8008a76:	5ae1      	ldrh	r1, [r4, r3]
 8008a78:	e6b3      	b.n	80087e2 <HAL_UART_IRQHandler+0xbe>
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	fffffeff 	.word	0xfffffeff

08008a80 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a80:	2388      	movs	r3, #136	; 0x88
 8008a82:	58c2      	ldr	r2, [r0, r3]
{
 8008a84:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a86:	2a22      	cmp	r2, #34	; 0x22
 8008a88:	d005      	beq.n	8008a96 <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a8a:	2108      	movs	r1, #8
 8008a8c:	6802      	ldr	r2, [r0, #0]
 8008a8e:	6993      	ldr	r3, [r2, #24]
 8008a90:	430b      	orrs	r3, r1
 8008a92:	6193      	str	r3, [r2, #24]
  }
}
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
  uint16_t uhMask = huart->Mask;
 8008a96:	2160      	movs	r1, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a98:	6802      	ldr	r2, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a9a:	5a41      	ldrh	r1, [r0, r1]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a9e:	400a      	ands	r2, r1
 8008aa0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8008aa2:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8008aa4:	215e      	movs	r1, #94	; 0x5e
    huart->pRxBuffPtr++;
 8008aa6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008aac:	5a42      	ldrh	r2, [r0, r1]
 8008aae:	3a01      	subs	r2, #1
 8008ab0:	b292      	uxth	r2, r2
 8008ab2:	5242      	strh	r2, [r0, r1]
    if (huart->RxXferCount == 0U)
 8008ab4:	5a42      	ldrh	r2, [r0, r1]
 8008ab6:	b294      	uxth	r4, r2
 8008ab8:	2a00      	cmp	r2, #0
 8008aba:	d1eb      	bne.n	8008a94 <UART_RxISR_8BIT+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008abc:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac0:	395d      	subs	r1, #93	; 0x5d
 8008ac2:	f381 8810 	msr	PRIMASK, r1
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ac6:	6805      	ldr	r5, [r0, #0]
 8008ac8:	4e17      	ldr	r6, [pc, #92]	; (8008b28 <UART_RxISR_8BIT+0xa8>)
 8008aca:	682a      	ldr	r2, [r5, #0]
 8008acc:	4032      	ands	r2, r6
 8008ace:	602a      	str	r2, [r5, #0]
 8008ad0:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ad4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad8:	f381 8810 	msr	PRIMASK, r1
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008adc:	6805      	ldr	r5, [r0, #0]
 8008ade:	68aa      	ldr	r2, [r5, #8]
 8008ae0:	438a      	bics	r2, r1
 8008ae2:	60aa      	str	r2, [r5, #8]
 8008ae4:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8008ae8:	2220      	movs	r2, #32
 8008aea:	50c2      	str	r2, [r0, r3]
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aec:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8008aee:	6704      	str	r4, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d115      	bne.n	8008b20 <UART_RxISR_8BIT+0xa0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af4:	66c4      	str	r4, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008afa:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008afe:	6801      	ldr	r1, [r0, #0]
 8008b00:	3a10      	subs	r2, #16
 8008b02:	680b      	ldr	r3, [r1, #0]
 8008b04:	4393      	bics	r3, r2
 8008b06:	600b      	str	r3, [r1, #0]
 8008b08:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b0c:	6803      	ldr	r3, [r0, #0]
 8008b0e:	69d9      	ldr	r1, [r3, #28]
 8008b10:	420a      	tst	r2, r1
 8008b12:	d000      	beq.n	8008b16 <UART_RxISR_8BIT+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b14:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b16:	235c      	movs	r3, #92	; 0x5c
 8008b18:	5ac1      	ldrh	r1, [r0, r3]
 8008b1a:	f7ff fe01 	bl	8008720 <HAL_UARTEx_RxEventCallback>
 8008b1e:	e7b9      	b.n	8008a94 <UART_RxISR_8BIT+0x14>
        HAL_UART_RxCpltCallback(huart);
 8008b20:	f7fa fbcc 	bl	80032bc <HAL_UART_RxCpltCallback>
 8008b24:	e7b6      	b.n	8008a94 <UART_RxISR_8BIT+0x14>
 8008b26:	46c0      	nop			; (mov r8, r8)
 8008b28:	fffffedf 	.word	0xfffffedf

08008b2c <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b2c:	2388      	movs	r3, #136	; 0x88
 8008b2e:	58c2      	ldr	r2, [r0, r3]
{
 8008b30:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b32:	2a22      	cmp	r2, #34	; 0x22
 8008b34:	d005      	beq.n	8008b42 <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b36:	2108      	movs	r1, #8
 8008b38:	6802      	ldr	r2, [r0, #0]
 8008b3a:	6993      	ldr	r3, [r2, #24]
 8008b3c:	430b      	orrs	r3, r1
 8008b3e:	6193      	str	r3, [r2, #24]
  }
}
 8008b40:	bd70      	pop	{r4, r5, r6, pc}
  uint16_t uhMask = huart->Mask;
 8008b42:	2460      	movs	r4, #96	; 0x60
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b44:	6802      	ldr	r2, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b46:	5b04      	ldrh	r4, [r0, r4]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b48:	6a51      	ldr	r1, [r2, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b4a:	6d82      	ldr	r2, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b4c:	4021      	ands	r1, r4
 8008b4e:	8011      	strh	r1, [r2, #0]
    huart->RxXferCount--;
 8008b50:	215e      	movs	r1, #94	; 0x5e
    huart->pRxBuffPtr += 2U;
 8008b52:	3202      	adds	r2, #2
 8008b54:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008b56:	5a42      	ldrh	r2, [r0, r1]
 8008b58:	3a01      	subs	r2, #1
 8008b5a:	b292      	uxth	r2, r2
 8008b5c:	5242      	strh	r2, [r0, r1]
    if (huart->RxXferCount == 0U)
 8008b5e:	5a42      	ldrh	r2, [r0, r1]
 8008b60:	b294      	uxth	r4, r2
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	d1ec      	bne.n	8008b40 <UART_RxISR_16BIT+0x14>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b66:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b6a:	395d      	subs	r1, #93	; 0x5d
 8008b6c:	f381 8810 	msr	PRIMASK, r1
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b70:	6805      	ldr	r5, [r0, #0]
 8008b72:	4e17      	ldr	r6, [pc, #92]	; (8008bd0 <UART_RxISR_16BIT+0xa4>)
 8008b74:	682a      	ldr	r2, [r5, #0]
 8008b76:	4032      	ands	r2, r6
 8008b78:	602a      	str	r2, [r5, #0]
 8008b7a:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b7e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b82:	f381 8810 	msr	PRIMASK, r1
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b86:	6805      	ldr	r5, [r0, #0]
 8008b88:	68aa      	ldr	r2, [r5, #8]
 8008b8a:	438a      	bics	r2, r1
 8008b8c:	60aa      	str	r2, [r5, #8]
 8008b8e:	f38c 8810 	msr	PRIMASK, ip
      huart->RxState = HAL_UART_STATE_READY;
 8008b92:	2220      	movs	r2, #32
 8008b94:	50c2      	str	r2, [r0, r3]
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b96:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
      huart->RxISR = NULL;
 8008b98:	6704      	str	r4, [r0, #112]	; 0x70
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d115      	bne.n	8008bca <UART_RxISR_16BIT+0x9e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9e:	66c4      	str	r4, [r0, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ba0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba4:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba8:	6801      	ldr	r1, [r0, #0]
 8008baa:	3a10      	subs	r2, #16
 8008bac:	680b      	ldr	r3, [r1, #0]
 8008bae:	4393      	bics	r3, r2
 8008bb0:	600b      	str	r3, [r1, #0]
 8008bb2:	f384 8810 	msr	PRIMASK, r4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bb6:	6803      	ldr	r3, [r0, #0]
 8008bb8:	69d9      	ldr	r1, [r3, #28]
 8008bba:	420a      	tst	r2, r1
 8008bbc:	d000      	beq.n	8008bc0 <UART_RxISR_16BIT+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bbe:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bc0:	235c      	movs	r3, #92	; 0x5c
 8008bc2:	5ac1      	ldrh	r1, [r0, r3]
 8008bc4:	f7ff fdac 	bl	8008720 <HAL_UARTEx_RxEventCallback>
 8008bc8:	e7ba      	b.n	8008b40 <UART_RxISR_16BIT+0x14>
        HAL_UART_RxCpltCallback(huart);
 8008bca:	f7fa fb77 	bl	80032bc <HAL_UART_RxCpltCallback>
 8008bce:	e7b7      	b.n	8008b40 <UART_RxISR_16BIT+0x14>
 8008bd0:	fffffedf 	.word	0xfffffedf

08008bd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bd6:	6803      	ldr	r3, [r0, #0]
{
 8008bd8:	464e      	mov	r6, r9
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bda:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bdc:	681a      	ldr	r2, [r3, #0]
{
 8008bde:	0004      	movs	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008be0:	4691      	mov	r9, r2
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008be2:	2288      	movs	r2, #136	; 0x88
{
 8008be4:	46de      	mov	lr, fp
 8008be6:	4657      	mov	r7, sl
 8008be8:	4645      	mov	r5, r8
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008bea:	6898      	ldr	r0, [r3, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bec:	58a2      	ldr	r2, [r4, r2]
{
 8008bee:	b5e0      	push	{r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bf0:	2a22      	cmp	r2, #34	; 0x22
 8008bf2:	d009      	beq.n	8008c08 <UART_RxISR_8BIT_FIFOEN+0x34>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bf4:	2108      	movs	r1, #8
 8008bf6:	699a      	ldr	r2, [r3, #24]
 8008bf8:	430a      	orrs	r2, r1
 8008bfa:	619a      	str	r2, [r3, #24]
  }
}
 8008bfc:	bcf0      	pop	{r4, r5, r6, r7}
 8008bfe:	46bb      	mov	fp, r7
 8008c00:	46b2      	mov	sl, r6
 8008c02:	46a9      	mov	r9, r5
 8008c04:	46a0      	mov	r8, r4
 8008c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 8008c08:	3246      	adds	r2, #70	; 0x46
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c0a:	5aa2      	ldrh	r2, [r4, r2]
 8008c0c:	2a00      	cmp	r2, #0
 8008c0e:	d100      	bne.n	8008c12 <UART_RxISR_8BIT_FIFOEN+0x3e>
 8008c10:	e0b6      	b.n	8008d80 <UART_RxISR_8BIT_FIFOEN+0x1ac>
 8008c12:	068a      	lsls	r2, r1, #26
 8008c14:	d400      	bmi.n	8008c18 <UART_RxISR_8BIT_FIFOEN+0x44>
 8008c16:	e08e      	b.n	8008d36 <UART_RxISR_8BIT_FIFOEN+0x162>
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c18:	2260      	movs	r2, #96	; 0x60
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c1a:	2601      	movs	r6, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c1c:	5ca2      	ldrb	r2, [r4, r2]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c1e:	4030      	ands	r0, r6
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c20:	4692      	mov	sl, r2
      huart->RxXferCount--;
 8008c22:	255e      	movs	r5, #94	; 0x5e
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c24:	4680      	mov	r8, r0
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c26:	4652      	mov	r2, sl
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008c2e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8008c30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c32:	3301      	adds	r3, #1
 8008c34:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008c36:	5b63      	ldrh	r3, [r4, r5]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	5363      	strh	r3, [r4, r5]
      isrflags = READ_REG(huart->Instance->ISR);
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	69df      	ldr	r7, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c42:	077a      	lsls	r2, r7, #29
 8008c44:	d023      	beq.n	8008c8e <UART_RxISR_8BIT_FIFOEN+0xba>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c46:	423e      	tst	r6, r7
 8008c48:	d007      	beq.n	8008c5a <UART_RxISR_8BIT_FIFOEN+0x86>
 8008c4a:	464a      	mov	r2, r9
 8008c4c:	05d2      	lsls	r2, r2, #23
 8008c4e:	d504      	bpl.n	8008c5a <UART_RxISR_8BIT_FIFOEN+0x86>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c50:	218c      	movs	r1, #140	; 0x8c
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c52:	621e      	str	r6, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c54:	5862      	ldr	r2, [r4, r1]
 8008c56:	4332      	orrs	r2, r6
 8008c58:	5062      	str	r2, [r4, r1]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	423a      	tst	r2, r7
 8008c5e:	d054      	beq.n	8008d0a <UART_RxISR_8BIT_FIFOEN+0x136>
 8008c60:	4641      	mov	r1, r8
 8008c62:	2900      	cmp	r1, #0
 8008c64:	d00e      	beq.n	8008c84 <UART_RxISR_8BIT_FIFOEN+0xb0>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c66:	208c      	movs	r0, #140	; 0x8c
 8008c68:	2104      	movs	r1, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c6a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c6c:	5822      	ldr	r2, [r4, r0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	5022      	str	r2, [r4, r0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c72:	4239      	tst	r1, r7
 8008c74:	d006      	beq.n	8008c84 <UART_RxISR_8BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c76:	2204      	movs	r2, #4
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c78:	2102      	movs	r1, #2
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c7a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c7c:	3288      	adds	r2, #136	; 0x88
 8008c7e:	58a3      	ldr	r3, [r4, r2]
 8008c80:	430b      	orrs	r3, r1
 8008c82:	50a3      	str	r3, [r4, r2]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c84:	238c      	movs	r3, #140	; 0x8c
 8008c86:	469b      	mov	fp, r3
 8008c88:	58e3      	ldr	r3, [r4, r3]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d147      	bne.n	8008d1e <UART_RxISR_8BIT_FIFOEN+0x14a>
      if (huart->RxXferCount == 0U)
 8008c8e:	5b63      	ldrh	r3, [r4, r5]
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	4693      	mov	fp, r2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d134      	bne.n	8008d02 <UART_RxISR_8BIT_FIFOEN+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c98:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c9c:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ca0:	6821      	ldr	r1, [r4, #0]
 8008ca2:	4a39      	ldr	r2, [pc, #228]	; (8008d88 <UART_RxISR_8BIT_FIFOEN+0x1b4>)
 8008ca4:	680b      	ldr	r3, [r1, #0]
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	600b      	str	r3, [r1, #0]
 8008caa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb2:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cb6:	6821      	ldr	r1, [r4, #0]
 8008cb8:	4a34      	ldr	r2, [pc, #208]	; (8008d8c <UART_RxISR_8BIT_FIFOEN+0x1b8>)
 8008cba:	688b      	ldr	r3, [r1, #8]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	608b      	str	r3, [r1, #8]
 8008cc0:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8008cc4:	2388      	movs	r3, #136	; 0x88
 8008cc6:	2120      	movs	r1, #32
 8008cc8:	50e1      	str	r1, [r4, r3]
        huart->RxISR = NULL;
 8008cca:	465b      	mov	r3, fp
 8008ccc:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d12b      	bne.n	8008d2c <UART_RxISR_8BIT_FIFOEN+0x158>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd4:	465a      	mov	r2, fp
 8008cd6:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cd8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cdc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce0:	2210      	movs	r2, #16
 8008ce2:	6821      	ldr	r1, [r4, #0]
 8008ce4:	680b      	ldr	r3, [r1, #0]
 8008ce6:	4393      	bics	r3, r2
 8008ce8:	600b      	str	r3, [r1, #0]
 8008cea:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	69d9      	ldr	r1, [r3, #28]
 8008cf2:	420a      	tst	r2, r1
 8008cf4:	d000      	beq.n	8008cf8 <UART_RxISR_8BIT_FIFOEN+0x124>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cf6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cf8:	235c      	movs	r3, #92	; 0x5c
 8008cfa:	0020      	movs	r0, r4
 8008cfc:	5ae1      	ldrh	r1, [r4, r3]
 8008cfe:	f7ff fd0f 	bl	8008720 <HAL_UARTEx_RxEventCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d02:	06bb      	lsls	r3, r7, #26
 8008d04:	d517      	bpl.n	8008d36 <UART_RxISR_8BIT_FIFOEN+0x162>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d06:	6823      	ldr	r3, [r4, #0]
 8008d08:	e78d      	b.n	8008c26 <UART_RxISR_8BIT_FIFOEN+0x52>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d0a:	077a      	lsls	r2, r7, #29
 8008d0c:	d5ba      	bpl.n	8008c84 <UART_RxISR_8BIT_FIFOEN+0xb0>
 8008d0e:	4642      	mov	r2, r8
 8008d10:	2a00      	cmp	r2, #0
 8008d12:	d1b0      	bne.n	8008c76 <UART_RxISR_8BIT_FIFOEN+0xa2>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d14:	238c      	movs	r3, #140	; 0x8c
 8008d16:	469b      	mov	fp, r3
 8008d18:	58e3      	ldr	r3, [r4, r3]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0b7      	beq.n	8008c8e <UART_RxISR_8BIT_FIFOEN+0xba>
          HAL_UART_ErrorCallback(huart);
 8008d1e:	0020      	movs	r0, r4
 8008d20:	f7ff fcf2 	bl	8008708 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	465a      	mov	r2, fp
 8008d28:	50a3      	str	r3, [r4, r2]
 8008d2a:	e7b0      	b.n	8008c8e <UART_RxISR_8BIT_FIFOEN+0xba>
          HAL_UART_RxCpltCallback(huart);
 8008d2c:	0020      	movs	r0, r4
 8008d2e:	f7fa fac5 	bl	80032bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d32:	06bb      	lsls	r3, r7, #26
 8008d34:	d4e7      	bmi.n	8008d06 <UART_RxISR_8BIT_FIFOEN+0x132>
    rxdatacount = huart->RxXferCount;
 8008d36:	235e      	movs	r3, #94	; 0x5e
 8008d38:	5ae3      	ldrh	r3, [r4, r3]
 8008d3a:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d100      	bne.n	8008d42 <UART_RxISR_8BIT_FIFOEN+0x16e>
 8008d40:	e75c      	b.n	8008bfc <UART_RxISR_8BIT_FIFOEN+0x28>
 8008d42:	2368      	movs	r3, #104	; 0x68
 8008d44:	5ae3      	ldrh	r3, [r4, r3]
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d800      	bhi.n	8008d4c <UART_RxISR_8BIT_FIFOEN+0x178>
 8008d4a:	e757      	b.n	8008bfc <UART_RxISR_8BIT_FIFOEN+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d4c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d50:	2201      	movs	r2, #1
 8008d52:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d56:	6821      	ldr	r1, [r4, #0]
 8008d58:	4d0d      	ldr	r5, [pc, #52]	; (8008d90 <UART_RxISR_8BIT_FIFOEN+0x1bc>)
 8008d5a:	688b      	ldr	r3, [r1, #8]
 8008d5c:	402b      	ands	r3, r5
 8008d5e:	608b      	str	r3, [r1, #8]
 8008d60:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_8BIT;
 8008d64:	4b0b      	ldr	r3, [pc, #44]	; (8008d94 <UART_RxISR_8BIT_FIFOEN+0x1c0>)
 8008d66:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d68:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d70:	2020      	movs	r0, #32
 8008d72:	6822      	ldr	r2, [r4, #0]
 8008d74:	6813      	ldr	r3, [r2, #0]
 8008d76:	4303      	orrs	r3, r0
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	f381 8810 	msr	PRIMASK, r1
}
 8008d7e:	e73d      	b.n	8008bfc <UART_RxISR_8BIT_FIFOEN+0x28>
    rxdatacount = huart->RxXferCount;
 8008d80:	235e      	movs	r3, #94	; 0x5e
 8008d82:	5ae3      	ldrh	r3, [r4, r3]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d84:	e73a      	b.n	8008bfc <UART_RxISR_8BIT_FIFOEN+0x28>
 8008d86:	46c0      	nop			; (mov r8, r8)
 8008d88:	fffffeff 	.word	0xfffffeff
 8008d8c:	effffffe 	.word	0xeffffffe
 8008d90:	efffffff 	.word	0xefffffff
 8008d94:	08008a81 	.word	0x08008a81

08008d98 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d98:	6802      	ldr	r2, [r0, #0]
{
 8008d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d9c:	69d1      	ldr	r1, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d9e:	6813      	ldr	r3, [r2, #0]
{
 8008da0:	464e      	mov	r6, r9
 8008da2:	0004      	movs	r4, r0
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008da4:	4699      	mov	r9, r3
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008da6:	2388      	movs	r3, #136	; 0x88
{
 8008da8:	46de      	mov	lr, fp
 8008daa:	4657      	mov	r7, sl
 8008dac:	4645      	mov	r5, r8
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dae:	6890      	ldr	r0, [r2, #8]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008db0:	58e3      	ldr	r3, [r4, r3]
{
 8008db2:	b5e0      	push	{r5, r6, r7, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008db4:	2b22      	cmp	r3, #34	; 0x22
 8008db6:	d009      	beq.n	8008dcc <UART_RxISR_16BIT_FIFOEN+0x34>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008db8:	2108      	movs	r1, #8
 8008dba:	6993      	ldr	r3, [r2, #24]
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	6193      	str	r3, [r2, #24]
  }
}
 8008dc0:	bcf0      	pop	{r4, r5, r6, r7}
 8008dc2:	46bb      	mov	fp, r7
 8008dc4:	46b2      	mov	sl, r6
 8008dc6:	46a9      	mov	r9, r5
 8008dc8:	46a0      	mov	r8, r4
 8008dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    nb_rx_data = huart->NbRxDataToProcess;
 8008dcc:	3346      	adds	r3, #70	; 0x46
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dce:	5ae3      	ldrh	r3, [r4, r3]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d100      	bne.n	8008dd6 <UART_RxISR_16BIT_FIFOEN+0x3e>
 8008dd4:	e0b4      	b.n	8008f40 <UART_RxISR_16BIT_FIFOEN+0x1a8>
 8008dd6:	068b      	lsls	r3, r1, #26
 8008dd8:	d400      	bmi.n	8008ddc <UART_RxISR_16BIT_FIFOEN+0x44>
 8008dda:	e08c      	b.n	8008ef6 <UART_RxISR_16BIT_FIFOEN+0x15e>
  uint16_t  uhMask = huart->Mask;
 8008ddc:	2360      	movs	r3, #96	; 0x60
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dde:	2601      	movs	r6, #1
  uint16_t  uhMask = huart->Mask;
 8008de0:	5ae3      	ldrh	r3, [r4, r3]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008de2:	4030      	ands	r0, r6
  uint16_t  uhMask = huart->Mask;
 8008de4:	469a      	mov	sl, r3
      huart->RxXferCount--;
 8008de6:	255e      	movs	r5, #94	; 0x5e
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008de8:	4680      	mov	r8, r0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008dea:	4650      	mov	r0, sl
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dec:	6a51      	ldr	r1, [r2, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8008df0:	4001      	ands	r1, r0
 8008df2:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008df4:	3302      	adds	r3, #2
 8008df6:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008df8:	5b63      	ldrh	r3, [r4, r5]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	5363      	strh	r3, [r4, r5]
      isrflags = READ_REG(huart->Instance->ISR);
 8008e00:	69d7      	ldr	r7, [r2, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e02:	077b      	lsls	r3, r7, #29
 8008e04:	d023      	beq.n	8008e4e <UART_RxISR_16BIT_FIFOEN+0xb6>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e06:	423e      	tst	r6, r7
 8008e08:	d007      	beq.n	8008e1a <UART_RxISR_16BIT_FIFOEN+0x82>
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	05db      	lsls	r3, r3, #23
 8008e0e:	d504      	bpl.n	8008e1a <UART_RxISR_16BIT_FIFOEN+0x82>
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e10:	218c      	movs	r1, #140	; 0x8c
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e12:	6216      	str	r6, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e14:	5863      	ldr	r3, [r4, r1]
 8008e16:	4333      	orrs	r3, r6
 8008e18:	5063      	str	r3, [r4, r1]
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	423b      	tst	r3, r7
 8008e1e:	d054      	beq.n	8008eca <UART_RxISR_16BIT_FIFOEN+0x132>
 8008e20:	4641      	mov	r1, r8
 8008e22:	2900      	cmp	r1, #0
 8008e24:	d00e      	beq.n	8008e44 <UART_RxISR_16BIT_FIFOEN+0xac>
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e26:	208c      	movs	r0, #140	; 0x8c
 8008e28:	2104      	movs	r1, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e2a:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e2c:	5823      	ldr	r3, [r4, r0]
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	5023      	str	r3, [r4, r0]
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e32:	4239      	tst	r1, r7
 8008e34:	d006      	beq.n	8008e44 <UART_RxISR_16BIT_FIFOEN+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e36:	2304      	movs	r3, #4
 8008e38:	6213      	str	r3, [r2, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e3a:	228c      	movs	r2, #140	; 0x8c
 8008e3c:	2102      	movs	r1, #2
 8008e3e:	58a3      	ldr	r3, [r4, r2]
 8008e40:	430b      	orrs	r3, r1
 8008e42:	50a3      	str	r3, [r4, r2]
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e44:	238c      	movs	r3, #140	; 0x8c
 8008e46:	469b      	mov	fp, r3
 8008e48:	58e3      	ldr	r3, [r4, r3]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d147      	bne.n	8008ede <UART_RxISR_16BIT_FIFOEN+0x146>
      if (huart->RxXferCount == 0U)
 8008e4e:	5b63      	ldrh	r3, [r4, r5]
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	4693      	mov	fp, r2
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d134      	bne.n	8008ec2 <UART_RxISR_16BIT_FIFOEN+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e58:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e5c:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e60:	6821      	ldr	r1, [r4, #0]
 8008e62:	4a39      	ldr	r2, [pc, #228]	; (8008f48 <UART_RxISR_16BIT_FIFOEN+0x1b0>)
 8008e64:	680b      	ldr	r3, [r1, #0]
 8008e66:	4013      	ands	r3, r2
 8008e68:	600b      	str	r3, [r1, #0]
 8008e6a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e6e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e72:	f386 8810 	msr	PRIMASK, r6
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e76:	6821      	ldr	r1, [r4, #0]
 8008e78:	4a34      	ldr	r2, [pc, #208]	; (8008f4c <UART_RxISR_16BIT_FIFOEN+0x1b4>)
 8008e7a:	688b      	ldr	r3, [r1, #8]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	608b      	str	r3, [r1, #8]
 8008e80:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8008e84:	2388      	movs	r3, #136	; 0x88
 8008e86:	2120      	movs	r1, #32
 8008e88:	50e1      	str	r1, [r4, r3]
        huart->RxISR = NULL;
 8008e8a:	465b      	mov	r3, fp
 8008e8c:	6723      	str	r3, [r4, #112]	; 0x70
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d12b      	bne.n	8008eec <UART_RxISR_16BIT_FIFOEN+0x154>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e94:	465a      	mov	r2, fp
 8008e96:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e98:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ea0:	2210      	movs	r2, #16
 8008ea2:	6821      	ldr	r1, [r4, #0]
 8008ea4:	680b      	ldr	r3, [r1, #0]
 8008ea6:	4393      	bics	r3, r2
 8008ea8:	600b      	str	r3, [r1, #0]
 8008eaa:	f380 8810 	msr	PRIMASK, r0
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	69d9      	ldr	r1, [r3, #28]
 8008eb2:	420a      	tst	r2, r1
 8008eb4:	d000      	beq.n	8008eb8 <UART_RxISR_16BIT_FIFOEN+0x120>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eb6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008eb8:	235c      	movs	r3, #92	; 0x5c
 8008eba:	0020      	movs	r0, r4
 8008ebc:	5ae1      	ldrh	r1, [r4, r3]
 8008ebe:	f7ff fc2f 	bl	8008720 <HAL_UARTEx_RxEventCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ec2:	06bb      	lsls	r3, r7, #26
 8008ec4:	d517      	bpl.n	8008ef6 <UART_RxISR_16BIT_FIFOEN+0x15e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ec6:	6822      	ldr	r2, [r4, #0]
 8008ec8:	e78f      	b.n	8008dea <UART_RxISR_16BIT_FIFOEN+0x52>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eca:	077b      	lsls	r3, r7, #29
 8008ecc:	d5ba      	bpl.n	8008e44 <UART_RxISR_16BIT_FIFOEN+0xac>
 8008ece:	4643      	mov	r3, r8
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1b0      	bne.n	8008e36 <UART_RxISR_16BIT_FIFOEN+0x9e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ed4:	238c      	movs	r3, #140	; 0x8c
 8008ed6:	469b      	mov	fp, r3
 8008ed8:	58e3      	ldr	r3, [r4, r3]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0b7      	beq.n	8008e4e <UART_RxISR_16BIT_FIFOEN+0xb6>
          HAL_UART_ErrorCallback(huart);
 8008ede:	0020      	movs	r0, r4
 8008ee0:	f7ff fc12 	bl	8008708 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	465a      	mov	r2, fp
 8008ee8:	50a3      	str	r3, [r4, r2]
 8008eea:	e7b0      	b.n	8008e4e <UART_RxISR_16BIT_FIFOEN+0xb6>
          HAL_UART_RxCpltCallback(huart);
 8008eec:	0020      	movs	r0, r4
 8008eee:	f7fa f9e5 	bl	80032bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ef2:	06bb      	lsls	r3, r7, #26
 8008ef4:	d4e7      	bmi.n	8008ec6 <UART_RxISR_16BIT_FIFOEN+0x12e>
    rxdatacount = huart->RxXferCount;
 8008ef6:	235e      	movs	r3, #94	; 0x5e
 8008ef8:	5ae3      	ldrh	r3, [r4, r3]
 8008efa:	b29a      	uxth	r2, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d100      	bne.n	8008f02 <UART_RxISR_16BIT_FIFOEN+0x16a>
 8008f00:	e75e      	b.n	8008dc0 <UART_RxISR_16BIT_FIFOEN+0x28>
 8008f02:	2368      	movs	r3, #104	; 0x68
 8008f04:	5ae3      	ldrh	r3, [r4, r3]
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d800      	bhi.n	8008f0c <UART_RxISR_16BIT_FIFOEN+0x174>
 8008f0a:	e759      	b.n	8008dc0 <UART_RxISR_16BIT_FIFOEN+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f0c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f10:	2201      	movs	r2, #1
 8008f12:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f16:	6821      	ldr	r1, [r4, #0]
 8008f18:	4d0d      	ldr	r5, [pc, #52]	; (8008f50 <UART_RxISR_16BIT_FIFOEN+0x1b8>)
 8008f1a:	688b      	ldr	r3, [r1, #8]
 8008f1c:	402b      	ands	r3, r5
 8008f1e:	608b      	str	r3, [r1, #8]
 8008f20:	f380 8810 	msr	PRIMASK, r0
      huart->RxISR = UART_RxISR_16BIT;
 8008f24:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <UART_RxISR_16BIT_FIFOEN+0x1bc>)
 8008f26:	6723      	str	r3, [r4, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f28:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f2c:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f30:	2020      	movs	r0, #32
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	6813      	ldr	r3, [r2, #0]
 8008f36:	4303      	orrs	r3, r0
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	f381 8810 	msr	PRIMASK, r1
}
 8008f3e:	e73f      	b.n	8008dc0 <UART_RxISR_16BIT_FIFOEN+0x28>
    rxdatacount = huart->RxXferCount;
 8008f40:	235e      	movs	r3, #94	; 0x5e
 8008f42:	5ae3      	ldrh	r3, [r4, r3]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f44:	e73c      	b.n	8008dc0 <UART_RxISR_16BIT_FIFOEN+0x28>
 8008f46:	46c0      	nop			; (mov r8, r8)
 8008f48:	fffffeff 	.word	0xfffffeff
 8008f4c:	effffffe 	.word	0xeffffffe
 8008f50:	efffffff 	.word	0xefffffff
 8008f54:	08008b2d 	.word	0x08008b2d

08008f58 <UART_SetConfig>:
{
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f5c:	6925      	ldr	r5, [r4, #16]
 8008f5e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f60:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f62:	432a      	orrs	r2, r5
 8008f64:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f66:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f68:	69c0      	ldr	r0, [r0, #28]
 8008f6a:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f6c:	4d48      	ldr	r5, [pc, #288]	; (8009090 <UART_SetConfig+0x138>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f6e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f70:	4029      	ands	r1, r5
 8008f72:	430a      	orrs	r2, r1
 8008f74:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	4946      	ldr	r1, [pc, #280]	; (8009094 <UART_SetConfig+0x13c>)
    tmpreg |= huart->Init.OneBitSampling;
 8008f7a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f7c:	400a      	ands	r2, r1
 8008f7e:	68e1      	ldr	r1, [r4, #12]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	605a      	str	r2, [r3, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8008f84:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f86:	6899      	ldr	r1, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8008f88:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f8a:	4d43      	ldr	r5, [pc, #268]	; (8009098 <UART_SetConfig+0x140>)
 8008f8c:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f8e:	250f      	movs	r5, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f90:	430a      	orrs	r2, r1
 8008f92:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f96:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f98:	43aa      	bics	r2, r5
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f9e:	4a3f      	ldr	r2, [pc, #252]	; (800909c <UART_SetConfig+0x144>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d009      	beq.n	8008fb8 <UART_SetConfig+0x60>
 8008fa4:	4a3e      	ldr	r2, [pc, #248]	; (80090a0 <UART_SetConfig+0x148>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00d      	beq.n	8008fc6 <UART_SetConfig+0x6e>
    switch (clocksource)
 8008faa:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
 8008fac:	4b3d      	ldr	r3, [pc, #244]	; (80090a4 <UART_SetConfig+0x14c>)
 8008fae:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8008fb4:	6763      	str	r3, [r4, #116]	; 0x74
}
 8008fb6:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008fb8:	4b3b      	ldr	r3, [pc, #236]	; (80090a8 <UART_SetConfig+0x150>)
 8008fba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d909      	bls.n	8008fda <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fc6:	2380      	movs	r3, #128	; 0x80
 8008fc8:	021b      	lsls	r3, r3, #8
 8008fca:	4298      	cmp	r0, r3
 8008fcc:	d035      	beq.n	800903a <UART_SetConfig+0xe2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fce:	f7fe fc8b 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d023      	beq.n	800901e <UART_SetConfig+0xc6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008fd8:	e00d      	b.n	8008ff6 <UART_SetConfig+0x9e>
 8008fda:	4a34      	ldr	r2, [pc, #208]	; (80090ac <UART_SetConfig+0x154>)
 8008fdc:	5cd2      	ldrb	r2, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fde:	2380      	movs	r3, #128	; 0x80
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	4298      	cmp	r0, r3
 8008fe4:	d024      	beq.n	8009030 <UART_SetConfig+0xd8>
    switch (clocksource)
 8008fe6:	2a04      	cmp	r2, #4
 8008fe8:	d01b      	beq.n	8009022 <UART_SetConfig+0xca>
 8008fea:	d81d      	bhi.n	8009028 <UART_SetConfig+0xd0>
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	d0ee      	beq.n	8008fce <UART_SetConfig+0x76>
 8008ff0:	2a02      	cmp	r2, #2
 8008ff2:	d1da      	bne.n	8008faa <UART_SetConfig+0x52>
        pclk = (uint32_t) HSI_VALUE;
 8008ff4:	482e      	ldr	r0, [pc, #184]	; (80090b0 <UART_SetConfig+0x158>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ff6:	4b2f      	ldr	r3, [pc, #188]	; (80090b4 <UART_SetConfig+0x15c>)
 8008ff8:	0049      	lsls	r1, r1, #1
 8008ffa:	5ac9      	ldrh	r1, [r1, r3]
 8008ffc:	f7f7 f8a4 	bl	8000148 <__udivsi3>
 8009000:	6865      	ldr	r5, [r4, #4]
 8009002:	086b      	lsrs	r3, r5, #1
 8009004:	18c0      	adds	r0, r0, r3
 8009006:	0029      	movs	r1, r5
 8009008:	f7f7 f89e 	bl	8000148 <__udivsi3>
 800900c:	0400      	lsls	r0, r0, #16
 800900e:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009010:	0002      	movs	r2, r0
 8009012:	4b29      	ldr	r3, [pc, #164]	; (80090b8 <UART_SetConfig+0x160>)
 8009014:	3a10      	subs	r2, #16
 8009016:	429a      	cmp	r2, r3
 8009018:	d8c7      	bhi.n	8008faa <UART_SetConfig+0x52>
        huart->Instance->BRR = usartdiv;
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	60d8      	str	r0, [r3, #12]
 800901e:	2000      	movs	r0, #0
 8009020:	e7c4      	b.n	8008fac <UART_SetConfig+0x54>
        pclk = HAL_RCC_GetSysClockFreq();
 8009022:	f7fe fc45 	bl	80078b0 <HAL_RCC_GetSysClockFreq>
        break;
 8009026:	e7d4      	b.n	8008fd2 <UART_SetConfig+0x7a>
    switch (clocksource)
 8009028:	0018      	movs	r0, r3
 800902a:	2a08      	cmp	r2, #8
 800902c:	d0e3      	beq.n	8008ff6 <UART_SetConfig+0x9e>
 800902e:	e7bc      	b.n	8008faa <UART_SetConfig+0x52>
    switch (clocksource)
 8009030:	2a04      	cmp	r2, #4
 8009032:	d02a      	beq.n	800908a <UART_SetConfig+0x132>
 8009034:	d826      	bhi.n	8009084 <UART_SetConfig+0x12c>
 8009036:	2a00      	cmp	r2, #0
 8009038:	d11f      	bne.n	800907a <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 800903a:	f7fe fc55 	bl	80078e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800903e:	2800      	cmp	r0, #0
 8009040:	d0ed      	beq.n	800901e <UART_SetConfig+0xc6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009042:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009044:	4b1b      	ldr	r3, [pc, #108]	; (80090b4 <UART_SetConfig+0x15c>)
 8009046:	0049      	lsls	r1, r1, #1
 8009048:	5ac9      	ldrh	r1, [r1, r3]
 800904a:	f7f7 f87d 	bl	8000148 <__udivsi3>
 800904e:	6865      	ldr	r5, [r4, #4]
 8009050:	0040      	lsls	r0, r0, #1
 8009052:	086b      	lsrs	r3, r5, #1
 8009054:	0029      	movs	r1, r5
 8009056:	18c0      	adds	r0, r0, r3
 8009058:	f7f7 f876 	bl	8000148 <__udivsi3>
 800905c:	0403      	lsls	r3, r0, #16
 800905e:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009060:	4915      	ldr	r1, [pc, #84]	; (80090b8 <UART_SetConfig+0x160>)
 8009062:	3a10      	subs	r2, #16
 8009064:	428a      	cmp	r2, r1
 8009066:	d8a0      	bhi.n	8008faa <UART_SetConfig+0x52>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009068:	4a14      	ldr	r2, [pc, #80]	; (80090bc <UART_SetConfig+0x164>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800906a:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800906c:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800906e:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8009070:	6822      	ldr	r2, [r4, #0]
 8009072:	4318      	orrs	r0, r3
 8009074:	60d0      	str	r0, [r2, #12]
 8009076:	2000      	movs	r0, #0
 8009078:	e798      	b.n	8008fac <UART_SetConfig+0x54>
    switch (clocksource)
 800907a:	2a02      	cmp	r2, #2
 800907c:	d000      	beq.n	8009080 <UART_SetConfig+0x128>
 800907e:	e794      	b.n	8008faa <UART_SetConfig+0x52>
 8009080:	480b      	ldr	r0, [pc, #44]	; (80090b0 <UART_SetConfig+0x158>)
 8009082:	e7df      	b.n	8009044 <UART_SetConfig+0xec>
 8009084:	2a08      	cmp	r2, #8
 8009086:	d0dd      	beq.n	8009044 <UART_SetConfig+0xec>
 8009088:	e78f      	b.n	8008faa <UART_SetConfig+0x52>
        pclk = HAL_RCC_GetSysClockFreq();
 800908a:	f7fe fc11 	bl	80078b0 <HAL_RCC_GetSysClockFreq>
        break;
 800908e:	e7d6      	b.n	800903e <UART_SetConfig+0xe6>
 8009090:	cfff69f3 	.word	0xcfff69f3
 8009094:	ffffcfff 	.word	0xffffcfff
 8009098:	11fff4ff 	.word	0x11fff4ff
 800909c:	40013800 	.word	0x40013800
 80090a0:	40004400 	.word	0x40004400
 80090a4:	00010001 	.word	0x00010001
 80090a8:	40021000 	.word	0x40021000
 80090ac:	0800cf0c 	.word	0x0800cf0c
 80090b0:	00f42400 	.word	0x00f42400
 80090b4:	0800cf10 	.word	0x0800cf10
 80090b8:	0000ffef 	.word	0x0000ffef
 80090bc:	0000fff0 	.word	0x0000fff0

080090c0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80090c2:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090c4:	07da      	lsls	r2, r3, #31
 80090c6:	d506      	bpl.n	80090d6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090c8:	6801      	ldr	r1, [r0, #0]
 80090ca:	4c28      	ldr	r4, [pc, #160]	; (800916c <UART_AdvFeatureConfig+0xac>)
 80090cc:	684a      	ldr	r2, [r1, #4]
 80090ce:	4022      	ands	r2, r4
 80090d0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80090d2:	4322      	orrs	r2, r4
 80090d4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090d6:	079a      	lsls	r2, r3, #30
 80090d8:	d506      	bpl.n	80090e8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090da:	6801      	ldr	r1, [r0, #0]
 80090dc:	4c24      	ldr	r4, [pc, #144]	; (8009170 <UART_AdvFeatureConfig+0xb0>)
 80090de:	684a      	ldr	r2, [r1, #4]
 80090e0:	4022      	ands	r2, r4
 80090e2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80090e4:	4322      	orrs	r2, r4
 80090e6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090e8:	075a      	lsls	r2, r3, #29
 80090ea:	d506      	bpl.n	80090fa <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090ec:	6801      	ldr	r1, [r0, #0]
 80090ee:	4c21      	ldr	r4, [pc, #132]	; (8009174 <UART_AdvFeatureConfig+0xb4>)
 80090f0:	684a      	ldr	r2, [r1, #4]
 80090f2:	4022      	ands	r2, r4
 80090f4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80090f6:	4322      	orrs	r2, r4
 80090f8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80090fa:	071a      	lsls	r2, r3, #28
 80090fc:	d506      	bpl.n	800910c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80090fe:	6801      	ldr	r1, [r0, #0]
 8009100:	4c1d      	ldr	r4, [pc, #116]	; (8009178 <UART_AdvFeatureConfig+0xb8>)
 8009102:	684a      	ldr	r2, [r1, #4]
 8009104:	4022      	ands	r2, r4
 8009106:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8009108:	4322      	orrs	r2, r4
 800910a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800910c:	06da      	lsls	r2, r3, #27
 800910e:	d506      	bpl.n	800911e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009110:	6801      	ldr	r1, [r0, #0]
 8009112:	4c1a      	ldr	r4, [pc, #104]	; (800917c <UART_AdvFeatureConfig+0xbc>)
 8009114:	688a      	ldr	r2, [r1, #8]
 8009116:	4022      	ands	r2, r4
 8009118:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800911a:	4322      	orrs	r2, r4
 800911c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800911e:	069a      	lsls	r2, r3, #26
 8009120:	d506      	bpl.n	8009130 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009122:	6801      	ldr	r1, [r0, #0]
 8009124:	4c16      	ldr	r4, [pc, #88]	; (8009180 <UART_AdvFeatureConfig+0xc0>)
 8009126:	688a      	ldr	r2, [r1, #8]
 8009128:	4022      	ands	r2, r4
 800912a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800912c:	4322      	orrs	r2, r4
 800912e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009130:	065a      	lsls	r2, r3, #25
 8009132:	d50a      	bpl.n	800914a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009134:	6801      	ldr	r1, [r0, #0]
 8009136:	4d13      	ldr	r5, [pc, #76]	; (8009184 <UART_AdvFeatureConfig+0xc4>)
 8009138:	684a      	ldr	r2, [r1, #4]
 800913a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800913c:	402a      	ands	r2, r5
 800913e:	4322      	orrs	r2, r4
 8009140:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009142:	2280      	movs	r2, #128	; 0x80
 8009144:	0352      	lsls	r2, r2, #13
 8009146:	4294      	cmp	r4, r2
 8009148:	d009      	beq.n	800915e <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800914a:	061b      	lsls	r3, r3, #24
 800914c:	d506      	bpl.n	800915c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800914e:	6802      	ldr	r2, [r0, #0]
 8009150:	490d      	ldr	r1, [pc, #52]	; (8009188 <UART_AdvFeatureConfig+0xc8>)
 8009152:	6853      	ldr	r3, [r2, #4]
 8009154:	400b      	ands	r3, r1
 8009156:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8009158:	430b      	orrs	r3, r1
 800915a:	6053      	str	r3, [r2, #4]
}
 800915c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800915e:	684a      	ldr	r2, [r1, #4]
 8009160:	4c0a      	ldr	r4, [pc, #40]	; (800918c <UART_AdvFeatureConfig+0xcc>)
 8009162:	4022      	ands	r2, r4
 8009164:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009166:	4322      	orrs	r2, r4
 8009168:	604a      	str	r2, [r1, #4]
 800916a:	e7ee      	b.n	800914a <UART_AdvFeatureConfig+0x8a>
 800916c:	fffdffff 	.word	0xfffdffff
 8009170:	fffeffff 	.word	0xfffeffff
 8009174:	fffbffff 	.word	0xfffbffff
 8009178:	ffff7fff 	.word	0xffff7fff
 800917c:	ffffefff 	.word	0xffffefff
 8009180:	ffffdfff 	.word	0xffffdfff
 8009184:	ffefffff 	.word	0xffefffff
 8009188:	fff7ffff 	.word	0xfff7ffff
 800918c:	ff9fffff 	.word	0xff9fffff

08009190 <UART_WaitOnFlagUntilTimeout>:
{
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	4657      	mov	r7, sl
 8009194:	464e      	mov	r6, r9
 8009196:	4645      	mov	r5, r8
 8009198:	46de      	mov	lr, fp
 800919a:	b5e0      	push	{r5, r6, r7, lr}
 800919c:	0016      	movs	r6, r2
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800919e:	2204      	movs	r2, #4
 80091a0:	4692      	mov	sl, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091a2:	2280      	movs	r2, #128	; 0x80
 80091a4:	0112      	lsls	r2, r2, #4
{
 80091a6:	4699      	mov	r9, r3
 80091a8:	4680      	mov	r8, r0
 80091aa:	000d      	movs	r5, r1
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091ac:	4693      	mov	fp, r2
{
 80091ae:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b0:	6803      	ldr	r3, [r0, #0]
 80091b2:	e001      	b.n	80091b8 <UART_WaitOnFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 80091b4:	1c7a      	adds	r2, r7, #1
 80091b6:	d10d      	bne.n	80091d4 <UART_WaitOnFlagUntilTimeout+0x44>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b8:	69dc      	ldr	r4, [r3, #28]
 80091ba:	402c      	ands	r4, r5
 80091bc:	1b64      	subs	r4, r4, r5
 80091be:	4262      	negs	r2, r4
 80091c0:	4154      	adcs	r4, r2
 80091c2:	42b4      	cmp	r4, r6
 80091c4:	d0f6      	beq.n	80091b4 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80091c6:	2000      	movs	r0, #0
}
 80091c8:	bcf0      	pop	{r4, r5, r6, r7}
 80091ca:	46bb      	mov	fp, r7
 80091cc:	46b2      	mov	sl, r6
 80091ce:	46a9      	mov	r9, r5
 80091d0:	46a0      	mov	r8, r4
 80091d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091d4:	f7fb fcc6 	bl	8004b64 <HAL_GetTick>
 80091d8:	464b      	mov	r3, r9
 80091da:	1ac0      	subs	r0, r0, r3
 80091dc:	42b8      	cmp	r0, r7
 80091de:	d831      	bhi.n	8009244 <UART_WaitOnFlagUntilTimeout+0xb4>
 80091e0:	2f00      	cmp	r7, #0
 80091e2:	d02f      	beq.n	8009244 <UART_WaitOnFlagUntilTimeout+0xb4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091e4:	4643      	mov	r3, r8
 80091e6:	4651      	mov	r1, sl
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	4211      	tst	r1, r2
 80091ee:	d0e3      	beq.n	80091b8 <UART_WaitOnFlagUntilTimeout+0x28>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091f0:	4659      	mov	r1, fp
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	420a      	tst	r2, r1
 80091f6:	d0df      	beq.n	80091b8 <UART_WaitOnFlagUntilTimeout+0x28>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091f8:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091fe:	2201      	movs	r2, #1
 8009200:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009204:	4643      	mov	r3, r8
 8009206:	6819      	ldr	r1, [r3, #0]
 8009208:	4c1c      	ldr	r4, [pc, #112]	; (800927c <UART_WaitOnFlagUntilTimeout+0xec>)
 800920a:	680b      	ldr	r3, [r1, #0]
 800920c:	4023      	ands	r3, r4
 800920e:	600b      	str	r3, [r1, #0]
 8009210:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009214:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009218:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921c:	4643      	mov	r3, r8
 800921e:	6819      	ldr	r1, [r3, #0]
 8009220:	688b      	ldr	r3, [r1, #8]
 8009222:	4393      	bics	r3, r2
 8009224:	608b      	str	r3, [r1, #8]
 8009226:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 800922a:	2320      	movs	r3, #32
 800922c:	4641      	mov	r1, r8
 800922e:	3283      	adds	r2, #131	; 0x83
 8009230:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8009232:	3204      	adds	r2, #4
 8009234:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009236:	3204      	adds	r2, #4
 8009238:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 800923a:	2200      	movs	r2, #0
 800923c:	3360      	adds	r3, #96	; 0x60
          return HAL_TIMEOUT;
 800923e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8009240:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8009242:	e7c1      	b.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009244:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009248:	2201      	movs	r2, #1
 800924a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800924e:	4643      	mov	r3, r8
 8009250:	6819      	ldr	r1, [r3, #0]
 8009252:	4c0a      	ldr	r4, [pc, #40]	; (800927c <UART_WaitOnFlagUntilTimeout+0xec>)
 8009254:	680b      	ldr	r3, [r1, #0]
 8009256:	4023      	ands	r3, r4
 8009258:	600b      	str	r3, [r1, #0]
 800925a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800925e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009262:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009266:	4643      	mov	r3, r8
 8009268:	6819      	ldr	r1, [r3, #0]
 800926a:	688b      	ldr	r3, [r1, #8]
 800926c:	4393      	bics	r3, r2
 800926e:	608b      	str	r3, [r1, #8]
 8009270:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8009274:	2320      	movs	r3, #32
 8009276:	4641      	mov	r1, r8
 8009278:	3283      	adds	r2, #131	; 0x83
 800927a:	e7db      	b.n	8009234 <UART_WaitOnFlagUntilTimeout+0xa4>
 800927c:	fffffe5f 	.word	0xfffffe5f

08009280 <HAL_UART_Transmit>:
{
 8009280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009282:	4647      	mov	r7, r8
 8009284:	46ce      	mov	lr, r9
 8009286:	b580      	push	{r7, lr}
 8009288:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800928a:	2384      	movs	r3, #132	; 0x84
 800928c:	58c3      	ldr	r3, [r0, r3]
{
 800928e:	0004      	movs	r4, r0
 8009290:	000d      	movs	r5, r1
 8009292:	0016      	movs	r6, r2
 8009294:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8009296:	2b20      	cmp	r3, #32
 8009298:	d156      	bne.n	8009348 <HAL_UART_Transmit+0xc8>
    if ((pData == NULL) || (Size == 0U))
 800929a:	2900      	cmp	r1, #0
 800929c:	d04e      	beq.n	800933c <HAL_UART_Transmit+0xbc>
 800929e:	2a00      	cmp	r2, #0
 80092a0:	d04c      	beq.n	800933c <HAL_UART_Transmit+0xbc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092a2:	2380      	movs	r3, #128	; 0x80
 80092a4:	6882      	ldr	r2, [r0, #8]
 80092a6:	015b      	lsls	r3, r3, #5
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d042      	beq.n	8009332 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 80092ac:	2380      	movs	r3, #128	; 0x80
 80092ae:	5ce2      	ldrb	r2, [r4, r3]
 80092b0:	2a01      	cmp	r2, #1
 80092b2:	d049      	beq.n	8009348 <HAL_UART_Transmit+0xc8>
 80092b4:	2201      	movs	r2, #1
 80092b6:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b8:	2200      	movs	r2, #0
 80092ba:	330c      	adds	r3, #12
 80092bc:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092be:	3b08      	subs	r3, #8
 80092c0:	3221      	adds	r2, #33	; 0x21
 80092c2:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 80092c4:	f7fb fc4e 	bl	8004b64 <HAL_GetTick>
    huart->TxXferSize  = Size;
 80092c8:	2354      	movs	r3, #84	; 0x54
      pdata16bits = NULL;
 80092ca:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 80092cc:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 80092ce:	3302      	adds	r3, #2
 80092d0:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d2:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 80092d4:	4691      	mov	r9, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d6:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80092d8:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092da:	015b      	lsls	r3, r3, #5
 80092dc:	429a      	cmp	r2, r3
 80092de:	d035      	beq.n	800934c <HAL_UART_Transmit+0xcc>
    __HAL_UNLOCK(huart);
 80092e0:	2380      	movs	r3, #128	; 0x80
 80092e2:	2200      	movs	r2, #0
 80092e4:	54e2      	strb	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 80092e6:	3b2a      	subs	r3, #42	; 0x2a
 80092e8:	5ae3      	ldrh	r3, [r4, r3]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d036      	beq.n	800935c <HAL_UART_Transmit+0xdc>
      huart->TxXferCount--;
 80092ee:	2656      	movs	r6, #86	; 0x56
 80092f0:	e00a      	b.n	8009308 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092f2:	782a      	ldrb	r2, [r5, #0]
 80092f4:	6823      	ldr	r3, [r4, #0]
        pdata8bits++;
 80092f6:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80092f8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80092fa:	5ba2      	ldrh	r2, [r4, r6]
 80092fc:	3a01      	subs	r2, #1
 80092fe:	b292      	uxth	r2, r2
 8009300:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 8009302:	5ba3      	ldrh	r3, [r4, r6]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d029      	beq.n	800935c <HAL_UART_Transmit+0xdc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009308:	4643      	mov	r3, r8
 800930a:	2200      	movs	r2, #0
 800930c:	2180      	movs	r1, #128	; 0x80
 800930e:	0020      	movs	r0, r4
 8009310:	9700      	str	r7, [sp, #0]
 8009312:	f7ff ff3d 	bl	8009190 <UART_WaitOnFlagUntilTimeout>
 8009316:	2800      	cmp	r0, #0
 8009318:	d11e      	bne.n	8009358 <HAL_UART_Transmit+0xd8>
      if (pdata8bits == NULL)
 800931a:	2d00      	cmp	r5, #0
 800931c:	d1e9      	bne.n	80092f2 <HAL_UART_Transmit+0x72>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800931e:	464b      	mov	r3, r9
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	6822      	ldr	r2, [r4, #0]
 8009324:	05db      	lsls	r3, r3, #23
 8009326:	0ddb      	lsrs	r3, r3, #23
 8009328:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800932a:	2302      	movs	r3, #2
 800932c:	469c      	mov	ip, r3
 800932e:	44e1      	add	r9, ip
 8009330:	e7e3      	b.n	80092fa <HAL_UART_Transmit+0x7a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009332:	6903      	ldr	r3, [r0, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1b9      	bne.n	80092ac <HAL_UART_Transmit+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8009338:	07cb      	lsls	r3, r1, #31
 800933a:	d5b7      	bpl.n	80092ac <HAL_UART_Transmit+0x2c>
      return  HAL_ERROR;
 800933c:	2001      	movs	r0, #1
}
 800933e:	b003      	add	sp, #12
 8009340:	bcc0      	pop	{r6, r7}
 8009342:	46b9      	mov	r9, r7
 8009344:	46b0      	mov	r8, r6
 8009346:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009348:	2002      	movs	r0, #2
 800934a:	e7f8      	b.n	800933e <HAL_UART_Transmit+0xbe>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800934c:	6923      	ldr	r3, [r4, #16]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1c6      	bne.n	80092e0 <HAL_UART_Transmit+0x60>
 8009352:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8009354:	2500      	movs	r5, #0
 8009356:	e7c3      	b.n	80092e0 <HAL_UART_Transmit+0x60>
        return HAL_TIMEOUT;
 8009358:	2003      	movs	r0, #3
 800935a:	e7f0      	b.n	800933e <HAL_UART_Transmit+0xbe>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800935c:	4643      	mov	r3, r8
 800935e:	2200      	movs	r2, #0
 8009360:	2140      	movs	r1, #64	; 0x40
 8009362:	0020      	movs	r0, r4
 8009364:	9700      	str	r7, [sp, #0]
 8009366:	f7ff ff13 	bl	8009190 <UART_WaitOnFlagUntilTimeout>
 800936a:	2800      	cmp	r0, #0
 800936c:	d1f4      	bne.n	8009358 <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 800936e:	2384      	movs	r3, #132	; 0x84
 8009370:	2220      	movs	r2, #32
 8009372:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8009374:	e7e3      	b.n	800933e <HAL_UART_Transmit+0xbe>
 8009376:	46c0      	nop			; (mov r8, r8)

08009378 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009378:	238c      	movs	r3, #140	; 0x8c
 800937a:	2200      	movs	r2, #0
{
 800937c:	b530      	push	{r4, r5, lr}
 800937e:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009380:	50c2      	str	r2, [r0, r3]
{
 8009382:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 8009384:	f7fb fbee 	bl	8004b64 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009388:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800938a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	0712      	lsls	r2, r2, #28
 8009390:	d40e      	bmi.n	80093b0 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	075b      	lsls	r3, r3, #29
 8009396:	d41a      	bmi.n	80093ce <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8009398:	2320      	movs	r3, #32
 800939a:	2284      	movs	r2, #132	; 0x84
 800939c:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800939e:	3204      	adds	r2, #4
 80093a0:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a2:	2300      	movs	r3, #0
  return HAL_OK;
 80093a4:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 80093a6:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a8:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 80093aa:	54a3      	strb	r3, [r4, r2]
}
 80093ac:	b003      	add	sp, #12
 80093ae:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093b0:	2180      	movs	r1, #128	; 0x80
 80093b2:	4b0d      	ldr	r3, [pc, #52]	; (80093e8 <UART_CheckIdleState+0x70>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	0389      	lsls	r1, r1, #14
 80093ba:	0003      	movs	r3, r0
 80093bc:	0020      	movs	r0, r4
 80093be:	f7ff fee7 	bl	8009190 <UART_WaitOnFlagUntilTimeout>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d10e      	bne.n	80093e4 <UART_CheckIdleState+0x6c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	075b      	lsls	r3, r3, #29
 80093cc:	d5e4      	bpl.n	8009398 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ce:	2180      	movs	r1, #128	; 0x80
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <UART_CheckIdleState+0x70>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	0020      	movs	r0, r4
 80093d8:	002b      	movs	r3, r5
 80093da:	03c9      	lsls	r1, r1, #15
 80093dc:	f7ff fed8 	bl	8009190 <UART_WaitOnFlagUntilTimeout>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d0d9      	beq.n	8009398 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80093e4:	2003      	movs	r0, #3
 80093e6:	e7e1      	b.n	80093ac <UART_CheckIdleState+0x34>
 80093e8:	01ffffff 	.word	0x01ffffff

080093ec <HAL_UART_Init>:
{
 80093ec:	b510      	push	{r4, lr}
 80093ee:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80093f0:	d028      	beq.n	8009444 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80093f2:	2384      	movs	r3, #132	; 0x84
 80093f4:	58c3      	ldr	r3, [r0, r3]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d026      	beq.n	8009448 <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 80093fa:	2384      	movs	r3, #132	; 0x84
 80093fc:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80093fe:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8009400:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8009402:	6822      	ldr	r2, [r4, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009404:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8009406:	6813      	ldr	r3, [r2, #0]
 8009408:	438b      	bics	r3, r1
 800940a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800940c:	f7ff fda4 	bl	8008f58 <UART_SetConfig>
 8009410:	2801      	cmp	r0, #1
 8009412:	d017      	beq.n	8009444 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009416:	2b00      	cmp	r3, #0
 8009418:	d110      	bne.n	800943c <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800941a:	6823      	ldr	r3, [r4, #0]
 800941c:	490d      	ldr	r1, [pc, #52]	; (8009454 <HAL_UART_Init+0x68>)
 800941e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8009420:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009422:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009424:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009428:	689a      	ldr	r2, [r3, #8]
 800942a:	438a      	bics	r2, r1
 800942c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	3929      	subs	r1, #41	; 0x29
 8009432:	430a      	orrs	r2, r1
 8009434:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8009436:	f7ff ff9f 	bl	8009378 <UART_CheckIdleState>
}
 800943a:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800943c:	0020      	movs	r0, r4
 800943e:	f7ff fe3f 	bl	80090c0 <UART_AdvFeatureConfig>
 8009442:	e7ea      	b.n	800941a <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8009444:	2001      	movs	r0, #1
 8009446:	e7f8      	b.n	800943a <HAL_UART_Init+0x4e>
    huart->Lock = HAL_UNLOCKED;
 8009448:	2280      	movs	r2, #128	; 0x80
 800944a:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800944c:	f7fb f908 	bl	8004660 <HAL_UART_MspInit>
 8009450:	e7d3      	b.n	80093fa <HAL_UART_Init+0xe>
 8009452:	46c0      	nop			; (mov r8, r8)
 8009454:	ffffb7ff 	.word	0xffffb7ff

08009458 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8009458:	235c      	movs	r3, #92	; 0x5c
{
 800945a:	b530      	push	{r4, r5, lr}
  huart->pRxBuffPtr  = pData;
 800945c:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 800945e:	2480      	movs	r4, #128	; 0x80
  huart->RxISR       = NULL;
 8009460:	2100      	movs	r1, #0
  huart->RxXferSize  = Size;
 8009462:	52c2      	strh	r2, [r0, r3]
  huart->RxXferCount = Size;
 8009464:	3302      	adds	r3, #2
 8009466:	52c2      	strh	r2, [r0, r3]
  UART_MASK_COMPUTATION(huart);
 8009468:	6883      	ldr	r3, [r0, #8]
  huart->RxISR       = NULL;
 800946a:	6701      	str	r1, [r0, #112]	; 0x70
  UART_MASK_COMPUTATION(huart);
 800946c:	0164      	lsls	r4, r4, #5
 800946e:	42a3      	cmp	r3, r4
 8009470:	d047      	beq.n	8009502 <UART_Start_Receive_IT+0xaa>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d035      	beq.n	80094e2 <UART_Start_Receive_IT+0x8a>
 8009476:	2480      	movs	r4, #128	; 0x80
 8009478:	0564      	lsls	r4, r4, #21
 800947a:	42a3      	cmp	r3, r4
 800947c:	d100      	bne.n	8009480 <UART_Start_Receive_IT+0x28>
 800947e:	e073      	b.n	8009568 <UART_Start_Receive_IT+0x110>
 8009480:	2360      	movs	r3, #96	; 0x60
 8009482:	52c1      	strh	r1, [r0, r3]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009484:	238c      	movs	r3, #140	; 0x8c
 8009486:	2100      	movs	r1, #0
 8009488:	50c1      	str	r1, [r0, r3]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800948a:	3b04      	subs	r3, #4
 800948c:	3122      	adds	r1, #34	; 0x22
 800948e:	50c1      	str	r1, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009490:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009494:	2401      	movs	r4, #1
 8009496:	f384 8810 	msr	PRIMASK, r4
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949a:	6801      	ldr	r1, [r0, #0]
 800949c:	688b      	ldr	r3, [r1, #8]
 800949e:	4323      	orrs	r3, r4
 80094a0:	608b      	str	r3, [r1, #8]
 80094a2:	f38c 8810 	msr	PRIMASK, ip
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80094a6:	2380      	movs	r3, #128	; 0x80
 80094a8:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80094aa:	059b      	lsls	r3, r3, #22
 80094ac:	4299      	cmp	r1, r3
 80094ae:	d02f      	beq.n	8009510 <UART_Start_Receive_IT+0xb8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094b0:	2380      	movs	r3, #128	; 0x80
 80094b2:	6882      	ldr	r2, [r0, #8]
 80094b4:	015b      	lsls	r3, r3, #5
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d01a      	beq.n	80094f0 <UART_Start_Receive_IT+0x98>
      huart->RxISR = UART_RxISR_8BIT;
 80094ba:	4b2f      	ldr	r3, [pc, #188]	; (8009578 <UART_Start_Receive_IT+0x120>)
 80094bc:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 80094be:	2200      	movs	r2, #0
 80094c0:	2380      	movs	r3, #128	; 0x80
 80094c2:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094c8:	3b7f      	subs	r3, #127	; 0x7f
 80094ca:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80094ce:	6802      	ldr	r2, [r0, #0]
 80094d0:	3320      	adds	r3, #32
 80094d2:	6810      	ldr	r0, [r2, #0]
 80094d4:	33ff      	adds	r3, #255	; 0xff
 80094d6:	4303      	orrs	r3, r0
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	f381 8810 	msr	PRIMASK, r1
}
 80094de:	2000      	movs	r0, #0
 80094e0:	bd30      	pop	{r4, r5, pc}
  UART_MASK_COMPUTATION(huart);
 80094e2:	6903      	ldr	r3, [r0, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d108      	bne.n	80094fa <UART_Start_Receive_IT+0xa2>
 80094e8:	2360      	movs	r3, #96	; 0x60
 80094ea:	21ff      	movs	r1, #255	; 0xff
 80094ec:	52c1      	strh	r1, [r0, r3]
 80094ee:	e7c9      	b.n	8009484 <UART_Start_Receive_IT+0x2c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094f0:	6903      	ldr	r3, [r0, #16]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e1      	bne.n	80094ba <UART_Start_Receive_IT+0x62>
      huart->RxISR = UART_RxISR_16BIT;
 80094f6:	4b21      	ldr	r3, [pc, #132]	; (800957c <UART_Start_Receive_IT+0x124>)
 80094f8:	e7e0      	b.n	80094bc <UART_Start_Receive_IT+0x64>
  UART_MASK_COMPUTATION(huart);
 80094fa:	2360      	movs	r3, #96	; 0x60
 80094fc:	217f      	movs	r1, #127	; 0x7f
 80094fe:	52c1      	strh	r1, [r0, r3]
 8009500:	e7c0      	b.n	8009484 <UART_Start_Receive_IT+0x2c>
 8009502:	6903      	ldr	r3, [r0, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1ef      	bne.n	80094e8 <UART_Start_Receive_IT+0x90>
 8009508:	491d      	ldr	r1, [pc, #116]	; (8009580 <UART_Start_Receive_IT+0x128>)
 800950a:	3360      	adds	r3, #96	; 0x60
 800950c:	52c1      	strh	r1, [r0, r3]
 800950e:	e7b9      	b.n	8009484 <UART_Start_Receive_IT+0x2c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009510:	2368      	movs	r3, #104	; 0x68
 8009512:	5ac3      	ldrh	r3, [r0, r3]
 8009514:	4293      	cmp	r3, r2
 8009516:	d8cb      	bhi.n	80094b0 <UART_Start_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009518:	2380      	movs	r3, #128	; 0x80
 800951a:	6882      	ldr	r2, [r0, #8]
 800951c:	015b      	lsls	r3, r3, #5
 800951e:	429a      	cmp	r2, r3
 8009520:	d01d      	beq.n	800955e <UART_Start_Receive_IT+0x106>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009522:	4b18      	ldr	r3, [pc, #96]	; (8009584 <UART_Start_Receive_IT+0x12c>)
 8009524:	6703      	str	r3, [r0, #112]	; 0x70
    __HAL_UNLOCK(huart);
 8009526:	2200      	movs	r2, #0
 8009528:	2380      	movs	r3, #128	; 0x80
 800952a:	54c2      	strb	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800952c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009530:	3201      	adds	r2, #1
 8009532:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009536:	6801      	ldr	r1, [r0, #0]
 8009538:	3380      	adds	r3, #128	; 0x80
 800953a:	680d      	ldr	r5, [r1, #0]
 800953c:	432b      	orrs	r3, r5
 800953e:	600b      	str	r3, [r1, #0]
 8009540:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009544:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009548:	f382 8810 	msr	PRIMASK, r2
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800954c:	2380      	movs	r3, #128	; 0x80
 800954e:	6802      	ldr	r2, [r0, #0]
 8009550:	055b      	lsls	r3, r3, #21
 8009552:	6890      	ldr	r0, [r2, #8]
 8009554:	4303      	orrs	r3, r0
 8009556:	6093      	str	r3, [r2, #8]
 8009558:	f381 8810 	msr	PRIMASK, r1
}
 800955c:	e7bf      	b.n	80094de <UART_Start_Receive_IT+0x86>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800955e:	6903      	ldr	r3, [r0, #16]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1de      	bne.n	8009522 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009564:	4b08      	ldr	r3, [pc, #32]	; (8009588 <UART_Start_Receive_IT+0x130>)
 8009566:	e7dd      	b.n	8009524 <UART_Start_Receive_IT+0xcc>
  UART_MASK_COMPUTATION(huart);
 8009568:	6903      	ldr	r3, [r0, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0c5      	beq.n	80094fa <UART_Start_Receive_IT+0xa2>
 800956e:	2360      	movs	r3, #96	; 0x60
 8009570:	213f      	movs	r1, #63	; 0x3f
 8009572:	52c1      	strh	r1, [r0, r3]
 8009574:	e786      	b.n	8009484 <UART_Start_Receive_IT+0x2c>
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	08008a81 	.word	0x08008a81
 800957c:	08008b2d 	.word	0x08008b2d
 8009580:	000001ff 	.word	0x000001ff
 8009584:	08008bd5 	.word	0x08008bd5
 8009588:	08008d99 	.word	0x08008d99

0800958c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800958c:	2388      	movs	r3, #136	; 0x88
 800958e:	58c3      	ldr	r3, [r0, r3]
{
 8009590:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009592:	2b20      	cmp	r3, #32
 8009594:	d12a      	bne.n	80095ec <HAL_UART_Receive_IT+0x60>
    if ((pData == NULL) || (Size == 0U))
 8009596:	2900      	cmp	r1, #0
 8009598:	d026      	beq.n	80095e8 <HAL_UART_Receive_IT+0x5c>
 800959a:	2a00      	cmp	r2, #0
 800959c:	d024      	beq.n	80095e8 <HAL_UART_Receive_IT+0x5c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800959e:	2380      	movs	r3, #128	; 0x80
 80095a0:	6884      	ldr	r4, [r0, #8]
 80095a2:	015b      	lsls	r3, r3, #5
 80095a4:	429c      	cmp	r4, r3
 80095a6:	d01a      	beq.n	80095de <HAL_UART_Receive_IT+0x52>
    __HAL_LOCK(huart);
 80095a8:	2380      	movs	r3, #128	; 0x80
 80095aa:	5cc4      	ldrb	r4, [r0, r3]
 80095ac:	2c01      	cmp	r4, #1
 80095ae:	d01d      	beq.n	80095ec <HAL_UART_Receive_IT+0x60>
 80095b0:	2401      	movs	r4, #1
 80095b2:	54c4      	strb	r4, [r0, r3]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b4:	2300      	movs	r3, #0
 80095b6:	66c3      	str	r3, [r0, #108]	; 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80095b8:	6803      	ldr	r3, [r0, #0]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	d50b      	bpl.n	80095d8 <HAL_UART_Receive_IT+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095c0:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095c4:	f384 8810 	msr	PRIMASK, r4
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80095c8:	2380      	movs	r3, #128	; 0x80
 80095ca:	6804      	ldr	r4, [r0, #0]
 80095cc:	04db      	lsls	r3, r3, #19
 80095ce:	6825      	ldr	r5, [r4, #0]
 80095d0:	432b      	orrs	r3, r5
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_IT(huart, pData, Size));
 80095d8:	f7ff ff3e 	bl	8009458 <UART_Start_Receive_IT>
 80095dc:	e005      	b.n	80095ea <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095de:	6903      	ldr	r3, [r0, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e1      	bne.n	80095a8 <HAL_UART_Receive_IT+0x1c>
      if ((((uint32_t)pData) & 1U) != 0U)
 80095e4:	07cb      	lsls	r3, r1, #31
 80095e6:	d5df      	bpl.n	80095a8 <HAL_UART_Receive_IT+0x1c>
      return HAL_ERROR;
 80095e8:	2001      	movs	r0, #1
}
 80095ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80095ec:	2002      	movs	r0, #2
 80095ee:	e7fc      	b.n	80095ea <HAL_UART_Receive_IT+0x5e>

080095f0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095f0:	4770      	bx	lr
 80095f2:	46c0      	nop			; (mov r8, r8)

080095f4 <HAL_UARTEx_RxFifoFullCallback>:
 80095f4:	4770      	bx	lr
 80095f6:	46c0      	nop			; (mov r8, r8)

080095f8 <HAL_UARTEx_TxFifoEmptyCallback>:
 80095f8:	4770      	bx	lr
 80095fa:	46c0      	nop			; (mov r8, r8)

080095fc <atoi>:
 80095fc:	b510      	push	{r4, lr}
 80095fe:	220a      	movs	r2, #10
 8009600:	2100      	movs	r1, #0
 8009602:	f000 fecf 	bl	800a3a4 <strtol>
 8009606:	bd10      	pop	{r4, pc}

08009608 <__errno>:
 8009608:	4b01      	ldr	r3, [pc, #4]	; (8009610 <__errno+0x8>)
 800960a:	6818      	ldr	r0, [r3, #0]
 800960c:	4770      	bx	lr
 800960e:	46c0      	nop			; (mov r8, r8)
 8009610:	200000a0 	.word	0x200000a0

08009614 <__libc_init_array>:
 8009614:	b570      	push	{r4, r5, r6, lr}
 8009616:	2600      	movs	r6, #0
 8009618:	4d0c      	ldr	r5, [pc, #48]	; (800964c <__libc_init_array+0x38>)
 800961a:	4c0d      	ldr	r4, [pc, #52]	; (8009650 <__libc_init_array+0x3c>)
 800961c:	1b64      	subs	r4, r4, r5
 800961e:	10a4      	asrs	r4, r4, #2
 8009620:	42a6      	cmp	r6, r4
 8009622:	d109      	bne.n	8009638 <__libc_init_array+0x24>
 8009624:	2600      	movs	r6, #0
 8009626:	f003 fabb 	bl	800cba0 <_init>
 800962a:	4d0a      	ldr	r5, [pc, #40]	; (8009654 <__libc_init_array+0x40>)
 800962c:	4c0a      	ldr	r4, [pc, #40]	; (8009658 <__libc_init_array+0x44>)
 800962e:	1b64      	subs	r4, r4, r5
 8009630:	10a4      	asrs	r4, r4, #2
 8009632:	42a6      	cmp	r6, r4
 8009634:	d105      	bne.n	8009642 <__libc_init_array+0x2e>
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	00b3      	lsls	r3, r6, #2
 800963a:	58eb      	ldr	r3, [r5, r3]
 800963c:	4798      	blx	r3
 800963e:	3601      	adds	r6, #1
 8009640:	e7ee      	b.n	8009620 <__libc_init_array+0xc>
 8009642:	00b3      	lsls	r3, r6, #2
 8009644:	58eb      	ldr	r3, [r5, r3]
 8009646:	4798      	blx	r3
 8009648:	3601      	adds	r6, #1
 800964a:	e7f2      	b.n	8009632 <__libc_init_array+0x1e>
 800964c:	0800d364 	.word	0x0800d364
 8009650:	0800d364 	.word	0x0800d364
 8009654:	0800d364 	.word	0x0800d364
 8009658:	0800d368 	.word	0x0800d368

0800965c <malloc>:
 800965c:	b510      	push	{r4, lr}
 800965e:	4b03      	ldr	r3, [pc, #12]	; (800966c <malloc+0x10>)
 8009660:	0001      	movs	r1, r0
 8009662:	6818      	ldr	r0, [r3, #0]
 8009664:	f000 f882 	bl	800976c <_malloc_r>
 8009668:	bd10      	pop	{r4, pc}
 800966a:	46c0      	nop			; (mov r8, r8)
 800966c:	200000a0 	.word	0x200000a0

08009670 <memcpy>:
 8009670:	2300      	movs	r3, #0
 8009672:	b510      	push	{r4, lr}
 8009674:	429a      	cmp	r2, r3
 8009676:	d100      	bne.n	800967a <memcpy+0xa>
 8009678:	bd10      	pop	{r4, pc}
 800967a:	5ccc      	ldrb	r4, [r1, r3]
 800967c:	54c4      	strb	r4, [r0, r3]
 800967e:	3301      	adds	r3, #1
 8009680:	e7f8      	b.n	8009674 <memcpy+0x4>

08009682 <memset>:
 8009682:	0003      	movs	r3, r0
 8009684:	1882      	adds	r2, r0, r2
 8009686:	4293      	cmp	r3, r2
 8009688:	d100      	bne.n	800968c <memset+0xa>
 800968a:	4770      	bx	lr
 800968c:	7019      	strb	r1, [r3, #0]
 800968e:	3301      	adds	r3, #1
 8009690:	e7f9      	b.n	8009686 <memset+0x4>
	...

08009694 <_free_r>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	0005      	movs	r5, r0
 8009698:	2900      	cmp	r1, #0
 800969a:	d010      	beq.n	80096be <_free_r+0x2a>
 800969c:	1f0c      	subs	r4, r1, #4
 800969e:	6823      	ldr	r3, [r4, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	da00      	bge.n	80096a6 <_free_r+0x12>
 80096a4:	18e4      	adds	r4, r4, r3
 80096a6:	0028      	movs	r0, r5
 80096a8:	f001 fd6c 	bl	800b184 <__malloc_lock>
 80096ac:	4a1d      	ldr	r2, [pc, #116]	; (8009724 <_free_r+0x90>)
 80096ae:	6813      	ldr	r3, [r2, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d105      	bne.n	80096c0 <_free_r+0x2c>
 80096b4:	6063      	str	r3, [r4, #4]
 80096b6:	6014      	str	r4, [r2, #0]
 80096b8:	0028      	movs	r0, r5
 80096ba:	f001 fd6b 	bl	800b194 <__malloc_unlock>
 80096be:	bd70      	pop	{r4, r5, r6, pc}
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	d908      	bls.n	80096d6 <_free_r+0x42>
 80096c4:	6821      	ldr	r1, [r4, #0]
 80096c6:	1860      	adds	r0, r4, r1
 80096c8:	4283      	cmp	r3, r0
 80096ca:	d1f3      	bne.n	80096b4 <_free_r+0x20>
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	1841      	adds	r1, r0, r1
 80096d2:	6021      	str	r1, [r4, #0]
 80096d4:	e7ee      	b.n	80096b4 <_free_r+0x20>
 80096d6:	001a      	movs	r2, r3
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <_free_r+0x4e>
 80096de:	42a3      	cmp	r3, r4
 80096e0:	d9f9      	bls.n	80096d6 <_free_r+0x42>
 80096e2:	6811      	ldr	r1, [r2, #0]
 80096e4:	1850      	adds	r0, r2, r1
 80096e6:	42a0      	cmp	r0, r4
 80096e8:	d10b      	bne.n	8009702 <_free_r+0x6e>
 80096ea:	6820      	ldr	r0, [r4, #0]
 80096ec:	1809      	adds	r1, r1, r0
 80096ee:	1850      	adds	r0, r2, r1
 80096f0:	6011      	str	r1, [r2, #0]
 80096f2:	4283      	cmp	r3, r0
 80096f4:	d1e0      	bne.n	80096b8 <_free_r+0x24>
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	1841      	adds	r1, r0, r1
 80096fc:	6011      	str	r1, [r2, #0]
 80096fe:	6053      	str	r3, [r2, #4]
 8009700:	e7da      	b.n	80096b8 <_free_r+0x24>
 8009702:	42a0      	cmp	r0, r4
 8009704:	d902      	bls.n	800970c <_free_r+0x78>
 8009706:	230c      	movs	r3, #12
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	e7d5      	b.n	80096b8 <_free_r+0x24>
 800970c:	6821      	ldr	r1, [r4, #0]
 800970e:	1860      	adds	r0, r4, r1
 8009710:	4283      	cmp	r3, r0
 8009712:	d103      	bne.n	800971c <_free_r+0x88>
 8009714:	6818      	ldr	r0, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	1841      	adds	r1, r0, r1
 800971a:	6021      	str	r1, [r4, #0]
 800971c:	6063      	str	r3, [r4, #4]
 800971e:	6054      	str	r4, [r2, #4]
 8009720:	e7ca      	b.n	80096b8 <_free_r+0x24>
 8009722:	46c0      	nop			; (mov r8, r8)
 8009724:	200005d0 	.word	0x200005d0

08009728 <sbrk_aligned>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	4e0f      	ldr	r6, [pc, #60]	; (8009768 <sbrk_aligned+0x40>)
 800972c:	000d      	movs	r5, r1
 800972e:	6831      	ldr	r1, [r6, #0]
 8009730:	0004      	movs	r4, r0
 8009732:	2900      	cmp	r1, #0
 8009734:	d102      	bne.n	800973c <sbrk_aligned+0x14>
 8009736:	f000 fcfd 	bl	800a134 <_sbrk_r>
 800973a:	6030      	str	r0, [r6, #0]
 800973c:	0029      	movs	r1, r5
 800973e:	0020      	movs	r0, r4
 8009740:	f000 fcf8 	bl	800a134 <_sbrk_r>
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	d00a      	beq.n	800975e <sbrk_aligned+0x36>
 8009748:	2303      	movs	r3, #3
 800974a:	1cc5      	adds	r5, r0, #3
 800974c:	439d      	bics	r5, r3
 800974e:	42a8      	cmp	r0, r5
 8009750:	d007      	beq.n	8009762 <sbrk_aligned+0x3a>
 8009752:	1a29      	subs	r1, r5, r0
 8009754:	0020      	movs	r0, r4
 8009756:	f000 fced 	bl	800a134 <_sbrk_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	d101      	bne.n	8009762 <sbrk_aligned+0x3a>
 800975e:	2501      	movs	r5, #1
 8009760:	426d      	negs	r5, r5
 8009762:	0028      	movs	r0, r5
 8009764:	bd70      	pop	{r4, r5, r6, pc}
 8009766:	46c0      	nop			; (mov r8, r8)
 8009768:	200005d4 	.word	0x200005d4

0800976c <_malloc_r>:
 800976c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800976e:	2203      	movs	r2, #3
 8009770:	1ccb      	adds	r3, r1, #3
 8009772:	4393      	bics	r3, r2
 8009774:	3308      	adds	r3, #8
 8009776:	0006      	movs	r6, r0
 8009778:	001f      	movs	r7, r3
 800977a:	2b0c      	cmp	r3, #12
 800977c:	d232      	bcs.n	80097e4 <_malloc_r+0x78>
 800977e:	270c      	movs	r7, #12
 8009780:	42b9      	cmp	r1, r7
 8009782:	d831      	bhi.n	80097e8 <_malloc_r+0x7c>
 8009784:	0030      	movs	r0, r6
 8009786:	f001 fcfd 	bl	800b184 <__malloc_lock>
 800978a:	4d32      	ldr	r5, [pc, #200]	; (8009854 <_malloc_r+0xe8>)
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	001c      	movs	r4, r3
 8009790:	2c00      	cmp	r4, #0
 8009792:	d12e      	bne.n	80097f2 <_malloc_r+0x86>
 8009794:	0039      	movs	r1, r7
 8009796:	0030      	movs	r0, r6
 8009798:	f7ff ffc6 	bl	8009728 <sbrk_aligned>
 800979c:	0004      	movs	r4, r0
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	d11e      	bne.n	80097e0 <_malloc_r+0x74>
 80097a2:	682c      	ldr	r4, [r5, #0]
 80097a4:	0025      	movs	r5, r4
 80097a6:	2d00      	cmp	r5, #0
 80097a8:	d14a      	bne.n	8009840 <_malloc_r+0xd4>
 80097aa:	6823      	ldr	r3, [r4, #0]
 80097ac:	0029      	movs	r1, r5
 80097ae:	18e3      	adds	r3, r4, r3
 80097b0:	0030      	movs	r0, r6
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	f000 fcbe 	bl	800a134 <_sbrk_r>
 80097b8:	9b01      	ldr	r3, [sp, #4]
 80097ba:	4283      	cmp	r3, r0
 80097bc:	d143      	bne.n	8009846 <_malloc_r+0xda>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	3703      	adds	r7, #3
 80097c2:	1aff      	subs	r7, r7, r3
 80097c4:	2303      	movs	r3, #3
 80097c6:	439f      	bics	r7, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	2f0c      	cmp	r7, #12
 80097cc:	d200      	bcs.n	80097d0 <_malloc_r+0x64>
 80097ce:	270c      	movs	r7, #12
 80097d0:	0039      	movs	r1, r7
 80097d2:	0030      	movs	r0, r6
 80097d4:	f7ff ffa8 	bl	8009728 <sbrk_aligned>
 80097d8:	1c43      	adds	r3, r0, #1
 80097da:	d034      	beq.n	8009846 <_malloc_r+0xda>
 80097dc:	6823      	ldr	r3, [r4, #0]
 80097de:	19df      	adds	r7, r3, r7
 80097e0:	6027      	str	r7, [r4, #0]
 80097e2:	e013      	b.n	800980c <_malloc_r+0xa0>
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dacb      	bge.n	8009780 <_malloc_r+0x14>
 80097e8:	230c      	movs	r3, #12
 80097ea:	2500      	movs	r5, #0
 80097ec:	6033      	str	r3, [r6, #0]
 80097ee:	0028      	movs	r0, r5
 80097f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	1bd1      	subs	r1, r2, r7
 80097f6:	d420      	bmi.n	800983a <_malloc_r+0xce>
 80097f8:	290b      	cmp	r1, #11
 80097fa:	d917      	bls.n	800982c <_malloc_r+0xc0>
 80097fc:	19e2      	adds	r2, r4, r7
 80097fe:	6027      	str	r7, [r4, #0]
 8009800:	42a3      	cmp	r3, r4
 8009802:	d111      	bne.n	8009828 <_malloc_r+0xbc>
 8009804:	602a      	str	r2, [r5, #0]
 8009806:	6863      	ldr	r3, [r4, #4]
 8009808:	6011      	str	r1, [r2, #0]
 800980a:	6053      	str	r3, [r2, #4]
 800980c:	0030      	movs	r0, r6
 800980e:	0025      	movs	r5, r4
 8009810:	f001 fcc0 	bl	800b194 <__malloc_unlock>
 8009814:	2207      	movs	r2, #7
 8009816:	350b      	adds	r5, #11
 8009818:	1d23      	adds	r3, r4, #4
 800981a:	4395      	bics	r5, r2
 800981c:	1aea      	subs	r2, r5, r3
 800981e:	429d      	cmp	r5, r3
 8009820:	d0e5      	beq.n	80097ee <_malloc_r+0x82>
 8009822:	1b5b      	subs	r3, r3, r5
 8009824:	50a3      	str	r3, [r4, r2]
 8009826:	e7e2      	b.n	80097ee <_malloc_r+0x82>
 8009828:	605a      	str	r2, [r3, #4]
 800982a:	e7ec      	b.n	8009806 <_malloc_r+0x9a>
 800982c:	6862      	ldr	r2, [r4, #4]
 800982e:	42a3      	cmp	r3, r4
 8009830:	d101      	bne.n	8009836 <_malloc_r+0xca>
 8009832:	602a      	str	r2, [r5, #0]
 8009834:	e7ea      	b.n	800980c <_malloc_r+0xa0>
 8009836:	605a      	str	r2, [r3, #4]
 8009838:	e7e8      	b.n	800980c <_malloc_r+0xa0>
 800983a:	0023      	movs	r3, r4
 800983c:	6864      	ldr	r4, [r4, #4]
 800983e:	e7a7      	b.n	8009790 <_malloc_r+0x24>
 8009840:	002c      	movs	r4, r5
 8009842:	686d      	ldr	r5, [r5, #4]
 8009844:	e7af      	b.n	80097a6 <_malloc_r+0x3a>
 8009846:	230c      	movs	r3, #12
 8009848:	0030      	movs	r0, r6
 800984a:	6033      	str	r3, [r6, #0]
 800984c:	f001 fca2 	bl	800b194 <__malloc_unlock>
 8009850:	e7cd      	b.n	80097ee <_malloc_r+0x82>
 8009852:	46c0      	nop			; (mov r8, r8)
 8009854:	200005d0 	.word	0x200005d0

08009858 <__cvt>:
 8009858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800985a:	001e      	movs	r6, r3
 800985c:	2300      	movs	r3, #0
 800985e:	0014      	movs	r4, r2
 8009860:	b08b      	sub	sp, #44	; 0x2c
 8009862:	429e      	cmp	r6, r3
 8009864:	da04      	bge.n	8009870 <__cvt+0x18>
 8009866:	2180      	movs	r1, #128	; 0x80
 8009868:	0609      	lsls	r1, r1, #24
 800986a:	1873      	adds	r3, r6, r1
 800986c:	001e      	movs	r6, r3
 800986e:	232d      	movs	r3, #45	; 0x2d
 8009870:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009872:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009874:	7013      	strb	r3, [r2, #0]
 8009876:	2320      	movs	r3, #32
 8009878:	2203      	movs	r2, #3
 800987a:	439f      	bics	r7, r3
 800987c:	2f46      	cmp	r7, #70	; 0x46
 800987e:	d007      	beq.n	8009890 <__cvt+0x38>
 8009880:	003b      	movs	r3, r7
 8009882:	3b45      	subs	r3, #69	; 0x45
 8009884:	4259      	negs	r1, r3
 8009886:	414b      	adcs	r3, r1
 8009888:	9910      	ldr	r1, [sp, #64]	; 0x40
 800988a:	3a01      	subs	r2, #1
 800988c:	18cb      	adds	r3, r1, r3
 800988e:	9310      	str	r3, [sp, #64]	; 0x40
 8009890:	ab09      	add	r3, sp, #36	; 0x24
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	ab08      	add	r3, sp, #32
 8009896:	9303      	str	r3, [sp, #12]
 8009898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800989a:	9200      	str	r2, [sp, #0]
 800989c:	9302      	str	r3, [sp, #8]
 800989e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098a0:	0022      	movs	r2, r4
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	0033      	movs	r3, r6
 80098a6:	f000 fe33 	bl	800a510 <_dtoa_r>
 80098aa:	0005      	movs	r5, r0
 80098ac:	2f47      	cmp	r7, #71	; 0x47
 80098ae:	d102      	bne.n	80098b6 <__cvt+0x5e>
 80098b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098b2:	07db      	lsls	r3, r3, #31
 80098b4:	d528      	bpl.n	8009908 <__cvt+0xb0>
 80098b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098b8:	18eb      	adds	r3, r5, r3
 80098ba:	9307      	str	r3, [sp, #28]
 80098bc:	2f46      	cmp	r7, #70	; 0x46
 80098be:	d114      	bne.n	80098ea <__cvt+0x92>
 80098c0:	782b      	ldrb	r3, [r5, #0]
 80098c2:	2b30      	cmp	r3, #48	; 0x30
 80098c4:	d10c      	bne.n	80098e0 <__cvt+0x88>
 80098c6:	2200      	movs	r2, #0
 80098c8:	2300      	movs	r3, #0
 80098ca:	0020      	movs	r0, r4
 80098cc:	0031      	movs	r1, r6
 80098ce:	f7f6 fdc1 	bl	8000454 <__aeabi_dcmpeq>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d104      	bne.n	80098e0 <__cvt+0x88>
 80098d6:	2301      	movs	r3, #1
 80098d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098da:	1a9b      	subs	r3, r3, r2
 80098dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098e2:	9a07      	ldr	r2, [sp, #28]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	18d3      	adds	r3, r2, r3
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	2200      	movs	r2, #0
 80098ec:	2300      	movs	r3, #0
 80098ee:	0020      	movs	r0, r4
 80098f0:	0031      	movs	r1, r6
 80098f2:	f7f6 fdaf 	bl	8000454 <__aeabi_dcmpeq>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d001      	beq.n	80098fe <__cvt+0xa6>
 80098fa:	9b07      	ldr	r3, [sp, #28]
 80098fc:	9309      	str	r3, [sp, #36]	; 0x24
 80098fe:	2230      	movs	r2, #48	; 0x30
 8009900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009902:	9907      	ldr	r1, [sp, #28]
 8009904:	428b      	cmp	r3, r1
 8009906:	d306      	bcc.n	8009916 <__cvt+0xbe>
 8009908:	0028      	movs	r0, r5
 800990a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800990e:	1b5b      	subs	r3, r3, r5
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	b00b      	add	sp, #44	; 0x2c
 8009914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009916:	1c59      	adds	r1, r3, #1
 8009918:	9109      	str	r1, [sp, #36]	; 0x24
 800991a:	701a      	strb	r2, [r3, #0]
 800991c:	e7f0      	b.n	8009900 <__cvt+0xa8>

0800991e <__exponent>:
 800991e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009920:	1c83      	adds	r3, r0, #2
 8009922:	b087      	sub	sp, #28
 8009924:	9303      	str	r3, [sp, #12]
 8009926:	0005      	movs	r5, r0
 8009928:	000c      	movs	r4, r1
 800992a:	232b      	movs	r3, #43	; 0x2b
 800992c:	7002      	strb	r2, [r0, #0]
 800992e:	2900      	cmp	r1, #0
 8009930:	da01      	bge.n	8009936 <__exponent+0x18>
 8009932:	424c      	negs	r4, r1
 8009934:	3302      	adds	r3, #2
 8009936:	706b      	strb	r3, [r5, #1]
 8009938:	2c09      	cmp	r4, #9
 800993a:	dd31      	ble.n	80099a0 <__exponent+0x82>
 800993c:	270a      	movs	r7, #10
 800993e:	ab04      	add	r3, sp, #16
 8009940:	1dde      	adds	r6, r3, #7
 8009942:	0020      	movs	r0, r4
 8009944:	0039      	movs	r1, r7
 8009946:	9601      	str	r6, [sp, #4]
 8009948:	f7f6 fd6e 	bl	8000428 <__aeabi_idivmod>
 800994c:	3e01      	subs	r6, #1
 800994e:	3130      	adds	r1, #48	; 0x30
 8009950:	0020      	movs	r0, r4
 8009952:	7031      	strb	r1, [r6, #0]
 8009954:	0039      	movs	r1, r7
 8009956:	9402      	str	r4, [sp, #8]
 8009958:	f7f6 fc80 	bl	800025c <__divsi3>
 800995c:	9b02      	ldr	r3, [sp, #8]
 800995e:	0004      	movs	r4, r0
 8009960:	2b63      	cmp	r3, #99	; 0x63
 8009962:	dcee      	bgt.n	8009942 <__exponent+0x24>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	3430      	adds	r4, #48	; 0x30
 8009968:	1e9a      	subs	r2, r3, #2
 800996a:	0013      	movs	r3, r2
 800996c:	9903      	ldr	r1, [sp, #12]
 800996e:	7014      	strb	r4, [r2, #0]
 8009970:	a804      	add	r0, sp, #16
 8009972:	3007      	adds	r0, #7
 8009974:	4298      	cmp	r0, r3
 8009976:	d80e      	bhi.n	8009996 <__exponent+0x78>
 8009978:	ab04      	add	r3, sp, #16
 800997a:	3307      	adds	r3, #7
 800997c:	2000      	movs	r0, #0
 800997e:	429a      	cmp	r2, r3
 8009980:	d804      	bhi.n	800998c <__exponent+0x6e>
 8009982:	ab04      	add	r3, sp, #16
 8009984:	3009      	adds	r0, #9
 8009986:	18c0      	adds	r0, r0, r3
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	1ac0      	subs	r0, r0, r3
 800998c:	9b03      	ldr	r3, [sp, #12]
 800998e:	1818      	adds	r0, r3, r0
 8009990:	1b40      	subs	r0, r0, r5
 8009992:	b007      	add	sp, #28
 8009994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009996:	7818      	ldrb	r0, [r3, #0]
 8009998:	3301      	adds	r3, #1
 800999a:	7008      	strb	r0, [r1, #0]
 800999c:	3101      	adds	r1, #1
 800999e:	e7e7      	b.n	8009970 <__exponent+0x52>
 80099a0:	2330      	movs	r3, #48	; 0x30
 80099a2:	18e4      	adds	r4, r4, r3
 80099a4:	70ab      	strb	r3, [r5, #2]
 80099a6:	1d28      	adds	r0, r5, #4
 80099a8:	70ec      	strb	r4, [r5, #3]
 80099aa:	e7f1      	b.n	8009990 <__exponent+0x72>

080099ac <_printf_float>:
 80099ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ae:	b095      	sub	sp, #84	; 0x54
 80099b0:	000c      	movs	r4, r1
 80099b2:	9209      	str	r2, [sp, #36]	; 0x24
 80099b4:	001e      	movs	r6, r3
 80099b6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80099b8:	0007      	movs	r7, r0
 80099ba:	f001 fbd3 	bl	800b164 <_localeconv_r>
 80099be:	6803      	ldr	r3, [r0, #0]
 80099c0:	0018      	movs	r0, r3
 80099c2:	930c      	str	r3, [sp, #48]	; 0x30
 80099c4:	f7f6 fba4 	bl	8000110 <strlen>
 80099c8:	2300      	movs	r3, #0
 80099ca:	9312      	str	r3, [sp, #72]	; 0x48
 80099cc:	7e23      	ldrb	r3, [r4, #24]
 80099ce:	2207      	movs	r2, #7
 80099d0:	930a      	str	r3, [sp, #40]	; 0x28
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	900e      	str	r0, [sp, #56]	; 0x38
 80099d6:	930d      	str	r3, [sp, #52]	; 0x34
 80099d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	05c9      	lsls	r1, r1, #23
 80099de:	d547      	bpl.n	8009a70 <_printf_float+0xc4>
 80099e0:	189b      	adds	r3, r3, r2
 80099e2:	4393      	bics	r3, r2
 80099e4:	001a      	movs	r2, r3
 80099e6:	3208      	adds	r2, #8
 80099e8:	602a      	str	r2, [r5, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	64a2      	str	r2, [r4, #72]	; 0x48
 80099f0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80099f2:	2201      	movs	r2, #1
 80099f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80099f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80099f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80099fa:	006b      	lsls	r3, r5, #1
 80099fc:	085b      	lsrs	r3, r3, #1
 80099fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a02:	4ba7      	ldr	r3, [pc, #668]	; (8009ca0 <_printf_float+0x2f4>)
 8009a04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a06:	4252      	negs	r2, r2
 8009a08:	f7f9 f9b0 	bl	8002d6c <__aeabi_dcmpun>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d131      	bne.n	8009a74 <_printf_float+0xc8>
 8009a10:	2201      	movs	r2, #1
 8009a12:	4ba3      	ldr	r3, [pc, #652]	; (8009ca0 <_printf_float+0x2f4>)
 8009a14:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a18:	4252      	negs	r2, r2
 8009a1a:	f7f6 fd2b 	bl	8000474 <__aeabi_dcmple>
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d128      	bne.n	8009a74 <_printf_float+0xc8>
 8009a22:	2200      	movs	r2, #0
 8009a24:	2300      	movs	r3, #0
 8009a26:	0029      	movs	r1, r5
 8009a28:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009a2a:	f7f6 fd19 	bl	8000460 <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d003      	beq.n	8009a3a <_printf_float+0x8e>
 8009a32:	0023      	movs	r3, r4
 8009a34:	222d      	movs	r2, #45	; 0x2d
 8009a36:	3343      	adds	r3, #67	; 0x43
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3c:	4d99      	ldr	r5, [pc, #612]	; (8009ca4 <_printf_float+0x2f8>)
 8009a3e:	2b47      	cmp	r3, #71	; 0x47
 8009a40:	d900      	bls.n	8009a44 <_printf_float+0x98>
 8009a42:	4d99      	ldr	r5, [pc, #612]	; (8009ca8 <_printf_float+0x2fc>)
 8009a44:	2303      	movs	r3, #3
 8009a46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a48:	6123      	str	r3, [r4, #16]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	439a      	bics	r2, r3
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6022      	str	r2, [r4, #0]
 8009a52:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a56:	0021      	movs	r1, r4
 8009a58:	0038      	movs	r0, r7
 8009a5a:	9600      	str	r6, [sp, #0]
 8009a5c:	aa13      	add	r2, sp, #76	; 0x4c
 8009a5e:	f000 f9e7 	bl	8009e30 <_printf_common>
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	d000      	beq.n	8009a68 <_printf_float+0xbc>
 8009a66:	e0a2      	b.n	8009bae <_printf_float+0x202>
 8009a68:	2001      	movs	r0, #1
 8009a6a:	4240      	negs	r0, r0
 8009a6c:	b015      	add	sp, #84	; 0x54
 8009a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a70:	3307      	adds	r3, #7
 8009a72:	e7b6      	b.n	80099e2 <_printf_float+0x36>
 8009a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a76:	002b      	movs	r3, r5
 8009a78:	0010      	movs	r0, r2
 8009a7a:	0029      	movs	r1, r5
 8009a7c:	f7f9 f976 	bl	8002d6c <__aeabi_dcmpun>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d00b      	beq.n	8009a9c <_printf_float+0xf0>
 8009a84:	2d00      	cmp	r5, #0
 8009a86:	da03      	bge.n	8009a90 <_printf_float+0xe4>
 8009a88:	0023      	movs	r3, r4
 8009a8a:	222d      	movs	r2, #45	; 0x2d
 8009a8c:	3343      	adds	r3, #67	; 0x43
 8009a8e:	701a      	strb	r2, [r3, #0]
 8009a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a92:	4d86      	ldr	r5, [pc, #536]	; (8009cac <_printf_float+0x300>)
 8009a94:	2b47      	cmp	r3, #71	; 0x47
 8009a96:	d9d5      	bls.n	8009a44 <_printf_float+0x98>
 8009a98:	4d85      	ldr	r5, [pc, #532]	; (8009cb0 <_printf_float+0x304>)
 8009a9a:	e7d3      	b.n	8009a44 <_printf_float+0x98>
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	4391      	bics	r1, r2
 8009aa4:	910f      	str	r1, [sp, #60]	; 0x3c
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	d149      	bne.n	8009b3e <_printf_float+0x192>
 8009aaa:	3307      	adds	r3, #7
 8009aac:	6063      	str	r3, [r4, #4]
 8009aae:	2380      	movs	r3, #128	; 0x80
 8009ab0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	9206      	str	r2, [sp, #24]
 8009aba:	aa12      	add	r2, sp, #72	; 0x48
 8009abc:	9205      	str	r2, [sp, #20]
 8009abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac0:	a908      	add	r1, sp, #32
 8009ac2:	9204      	str	r2, [sp, #16]
 8009ac4:	aa11      	add	r2, sp, #68	; 0x44
 8009ac6:	9203      	str	r2, [sp, #12]
 8009ac8:	2223      	movs	r2, #35	; 0x23
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	9301      	str	r3, [sp, #4]
 8009ace:	6863      	ldr	r3, [r4, #4]
 8009ad0:	1852      	adds	r2, r2, r1
 8009ad2:	9202      	str	r2, [sp, #8]
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	0038      	movs	r0, r7
 8009ad8:	002b      	movs	r3, r5
 8009ada:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009adc:	f7ff febc 	bl	8009858 <__cvt>
 8009ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ae2:	0005      	movs	r5, r0
 8009ae4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ae6:	2b47      	cmp	r3, #71	; 0x47
 8009ae8:	d108      	bne.n	8009afc <_printf_float+0x150>
 8009aea:	1ccb      	adds	r3, r1, #3
 8009aec:	db02      	blt.n	8009af4 <_printf_float+0x148>
 8009aee:	6863      	ldr	r3, [r4, #4]
 8009af0:	4299      	cmp	r1, r3
 8009af2:	dd48      	ble.n	8009b86 <_printf_float+0x1da>
 8009af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af6:	3b02      	subs	r3, #2
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	930a      	str	r3, [sp, #40]	; 0x28
 8009afc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afe:	2b65      	cmp	r3, #101	; 0x65
 8009b00:	d824      	bhi.n	8009b4c <_printf_float+0x1a0>
 8009b02:	0020      	movs	r0, r4
 8009b04:	001a      	movs	r2, r3
 8009b06:	3901      	subs	r1, #1
 8009b08:	3050      	adds	r0, #80	; 0x50
 8009b0a:	9111      	str	r1, [sp, #68]	; 0x44
 8009b0c:	f7ff ff07 	bl	800991e <__exponent>
 8009b10:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b12:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b14:	1813      	adds	r3, r2, r0
 8009b16:	6123      	str	r3, [r4, #16]
 8009b18:	2a01      	cmp	r2, #1
 8009b1a:	dc02      	bgt.n	8009b22 <_printf_float+0x176>
 8009b1c:	6822      	ldr	r2, [r4, #0]
 8009b1e:	07d2      	lsls	r2, r2, #31
 8009b20:	d501      	bpl.n	8009b26 <_printf_float+0x17a>
 8009b22:	3301      	adds	r3, #1
 8009b24:	6123      	str	r3, [r4, #16]
 8009b26:	2323      	movs	r3, #35	; 0x23
 8009b28:	aa08      	add	r2, sp, #32
 8009b2a:	189b      	adds	r3, r3, r2
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d100      	bne.n	8009b34 <_printf_float+0x188>
 8009b32:	e78f      	b.n	8009a54 <_printf_float+0xa8>
 8009b34:	0023      	movs	r3, r4
 8009b36:	222d      	movs	r2, #45	; 0x2d
 8009b38:	3343      	adds	r3, #67	; 0x43
 8009b3a:	701a      	strb	r2, [r3, #0]
 8009b3c:	e78a      	b.n	8009a54 <_printf_float+0xa8>
 8009b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b40:	2a47      	cmp	r2, #71	; 0x47
 8009b42:	d1b4      	bne.n	8009aae <_printf_float+0x102>
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1b2      	bne.n	8009aae <_printf_float+0x102>
 8009b48:	3301      	adds	r3, #1
 8009b4a:	e7af      	b.n	8009aac <_printf_float+0x100>
 8009b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4e:	2b66      	cmp	r3, #102	; 0x66
 8009b50:	d11b      	bne.n	8009b8a <_printf_float+0x1de>
 8009b52:	6863      	ldr	r3, [r4, #4]
 8009b54:	2900      	cmp	r1, #0
 8009b56:	dd0d      	ble.n	8009b74 <_printf_float+0x1c8>
 8009b58:	6121      	str	r1, [r4, #16]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d102      	bne.n	8009b64 <_printf_float+0x1b8>
 8009b5e:	6822      	ldr	r2, [r4, #0]
 8009b60:	07d2      	lsls	r2, r2, #31
 8009b62:	d502      	bpl.n	8009b6a <_printf_float+0x1be>
 8009b64:	3301      	adds	r3, #1
 8009b66:	1859      	adds	r1, r3, r1
 8009b68:	6121      	str	r1, [r4, #16]
 8009b6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b6c:	65a3      	str	r3, [r4, #88]	; 0x58
 8009b6e:	2300      	movs	r3, #0
 8009b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b72:	e7d8      	b.n	8009b26 <_printf_float+0x17a>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d103      	bne.n	8009b80 <_printf_float+0x1d4>
 8009b78:	2201      	movs	r2, #1
 8009b7a:	6821      	ldr	r1, [r4, #0]
 8009b7c:	4211      	tst	r1, r2
 8009b7e:	d000      	beq.n	8009b82 <_printf_float+0x1d6>
 8009b80:	1c9a      	adds	r2, r3, #2
 8009b82:	6122      	str	r2, [r4, #16]
 8009b84:	e7f1      	b.n	8009b6a <_printf_float+0x1be>
 8009b86:	2367      	movs	r3, #103	; 0x67
 8009b88:	930a      	str	r3, [sp, #40]	; 0x28
 8009b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	db06      	blt.n	8009ba0 <_printf_float+0x1f4>
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	6123      	str	r3, [r4, #16]
 8009b96:	07d2      	lsls	r2, r2, #31
 8009b98:	d5e7      	bpl.n	8009b6a <_printf_float+0x1be>
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	e7e4      	b.n	8009b6a <_printf_float+0x1be>
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dc01      	bgt.n	8009baa <_printf_float+0x1fe>
 8009ba6:	1849      	adds	r1, r1, r1
 8009ba8:	1ac9      	subs	r1, r1, r3
 8009baa:	1852      	adds	r2, r2, r1
 8009bac:	e7e9      	b.n	8009b82 <_printf_float+0x1d6>
 8009bae:	6822      	ldr	r2, [r4, #0]
 8009bb0:	0553      	lsls	r3, r2, #21
 8009bb2:	d407      	bmi.n	8009bc4 <_printf_float+0x218>
 8009bb4:	6923      	ldr	r3, [r4, #16]
 8009bb6:	002a      	movs	r2, r5
 8009bb8:	0038      	movs	r0, r7
 8009bba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bbc:	47b0      	blx	r6
 8009bbe:	1c43      	adds	r3, r0, #1
 8009bc0:	d128      	bne.n	8009c14 <_printf_float+0x268>
 8009bc2:	e751      	b.n	8009a68 <_printf_float+0xbc>
 8009bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc6:	2b65      	cmp	r3, #101	; 0x65
 8009bc8:	d800      	bhi.n	8009bcc <_printf_float+0x220>
 8009bca:	e0e1      	b.n	8009d90 <_printf_float+0x3e4>
 8009bcc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009bce:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	f7f6 fc3e 	bl	8000454 <__aeabi_dcmpeq>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d031      	beq.n	8009c40 <_printf_float+0x294>
 8009bdc:	2301      	movs	r3, #1
 8009bde:	0038      	movs	r0, r7
 8009be0:	4a34      	ldr	r2, [pc, #208]	; (8009cb4 <_printf_float+0x308>)
 8009be2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009be4:	47b0      	blx	r6
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	d100      	bne.n	8009bec <_printf_float+0x240>
 8009bea:	e73d      	b.n	8009a68 <_printf_float+0xbc>
 8009bec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	db02      	blt.n	8009bfa <_printf_float+0x24e>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	07db      	lsls	r3, r3, #31
 8009bf8:	d50c      	bpl.n	8009c14 <_printf_float+0x268>
 8009bfa:	0038      	movs	r0, r7
 8009bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c02:	47b0      	blx	r6
 8009c04:	2500      	movs	r5, #0
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d100      	bne.n	8009c0c <_printf_float+0x260>
 8009c0a:	e72d      	b.n	8009a68 <_printf_float+0xbc>
 8009c0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	42ab      	cmp	r3, r5
 8009c12:	dc0a      	bgt.n	8009c2a <_printf_float+0x27e>
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	079b      	lsls	r3, r3, #30
 8009c18:	d500      	bpl.n	8009c1c <_printf_float+0x270>
 8009c1a:	e106      	b.n	8009e2a <_printf_float+0x47e>
 8009c1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c1e:	68e0      	ldr	r0, [r4, #12]
 8009c20:	4298      	cmp	r0, r3
 8009c22:	db00      	blt.n	8009c26 <_printf_float+0x27a>
 8009c24:	e722      	b.n	8009a6c <_printf_float+0xc0>
 8009c26:	0018      	movs	r0, r3
 8009c28:	e720      	b.n	8009a6c <_printf_float+0xc0>
 8009c2a:	0022      	movs	r2, r4
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	0038      	movs	r0, r7
 8009c30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c32:	321a      	adds	r2, #26
 8009c34:	47b0      	blx	r6
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d100      	bne.n	8009c3c <_printf_float+0x290>
 8009c3a:	e715      	b.n	8009a68 <_printf_float+0xbc>
 8009c3c:	3501      	adds	r5, #1
 8009c3e:	e7e5      	b.n	8009c0c <_printf_float+0x260>
 8009c40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	dc38      	bgt.n	8009cb8 <_printf_float+0x30c>
 8009c46:	2301      	movs	r3, #1
 8009c48:	0038      	movs	r0, r7
 8009c4a:	4a1a      	ldr	r2, [pc, #104]	; (8009cb4 <_printf_float+0x308>)
 8009c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c4e:	47b0      	blx	r6
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d100      	bne.n	8009c56 <_printf_float+0x2aa>
 8009c54:	e708      	b.n	8009a68 <_printf_float+0xbc>
 8009c56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	d102      	bne.n	8009c64 <_printf_float+0x2b8>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	07db      	lsls	r3, r3, #31
 8009c62:	d5d7      	bpl.n	8009c14 <_printf_float+0x268>
 8009c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c66:	0038      	movs	r0, r7
 8009c68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c6c:	47b0      	blx	r6
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	d100      	bne.n	8009c74 <_printf_float+0x2c8>
 8009c72:	e6f9      	b.n	8009a68 <_printf_float+0xbc>
 8009c74:	2300      	movs	r3, #0
 8009c76:	930a      	str	r3, [sp, #40]	; 0x28
 8009c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c7c:	425b      	negs	r3, r3
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	dc01      	bgt.n	8009c86 <_printf_float+0x2da>
 8009c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c84:	e797      	b.n	8009bb6 <_printf_float+0x20a>
 8009c86:	0022      	movs	r2, r4
 8009c88:	2301      	movs	r3, #1
 8009c8a:	0038      	movs	r0, r7
 8009c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c8e:	321a      	adds	r2, #26
 8009c90:	47b0      	blx	r6
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d100      	bne.n	8009c98 <_printf_float+0x2ec>
 8009c96:	e6e7      	b.n	8009a68 <_printf_float+0xbc>
 8009c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	e7eb      	b.n	8009c76 <_printf_float+0x2ca>
 8009c9e:	46c0      	nop			; (mov r8, r8)
 8009ca0:	7fefffff 	.word	0x7fefffff
 8009ca4:	0800cf2c 	.word	0x0800cf2c
 8009ca8:	0800cf30 	.word	0x0800cf30
 8009cac:	0800cf34 	.word	0x0800cf34
 8009cb0:	0800cf38 	.word	0x0800cf38
 8009cb4:	0800cf3c 	.word	0x0800cf3c
 8009cb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cbc:	920a      	str	r2, [sp, #40]	; 0x28
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	dd00      	ble.n	8009cc4 <_printf_float+0x318>
 8009cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8009cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	dc3c      	bgt.n	8009d44 <_printf_float+0x398>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8009cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	17db      	asrs	r3, r3, #31
 8009cd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cda:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cde:	4013      	ands	r3, r2
 8009ce0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	dc34      	bgt.n	8009d54 <_printf_float+0x3a8>
 8009cea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	db3d      	blt.n	8009d6e <_printf_float+0x3c2>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	07db      	lsls	r3, r3, #31
 8009cf6:	d43a      	bmi.n	8009d6e <_printf_float+0x3c2>
 8009cf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cfc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	1a52      	subs	r2, r2, r1
 8009d02:	920a      	str	r2, [sp, #40]	; 0x28
 8009d04:	429a      	cmp	r2, r3
 8009d06:	dd00      	ble.n	8009d0a <_printf_float+0x35e>
 8009d08:	930a      	str	r3, [sp, #40]	; 0x28
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	dc36      	bgt.n	8009d7e <_printf_float+0x3d2>
 8009d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d12:	2500      	movs	r5, #0
 8009d14:	43db      	mvns	r3, r3
 8009d16:	17db      	asrs	r3, r3, #31
 8009d18:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d24:	400a      	ands	r2, r1
 8009d26:	1a9b      	subs	r3, r3, r2
 8009d28:	42ab      	cmp	r3, r5
 8009d2a:	dc00      	bgt.n	8009d2e <_printf_float+0x382>
 8009d2c:	e772      	b.n	8009c14 <_printf_float+0x268>
 8009d2e:	0022      	movs	r2, r4
 8009d30:	2301      	movs	r3, #1
 8009d32:	0038      	movs	r0, r7
 8009d34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d36:	321a      	adds	r2, #26
 8009d38:	47b0      	blx	r6
 8009d3a:	1c43      	adds	r3, r0, #1
 8009d3c:	d100      	bne.n	8009d40 <_printf_float+0x394>
 8009d3e:	e693      	b.n	8009a68 <_printf_float+0xbc>
 8009d40:	3501      	adds	r5, #1
 8009d42:	e7ea      	b.n	8009d1a <_printf_float+0x36e>
 8009d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d46:	002a      	movs	r2, r5
 8009d48:	0038      	movs	r0, r7
 8009d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d4c:	47b0      	blx	r6
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	d1bb      	bne.n	8009cca <_printf_float+0x31e>
 8009d52:	e689      	b.n	8009a68 <_printf_float+0xbc>
 8009d54:	0022      	movs	r2, r4
 8009d56:	2301      	movs	r3, #1
 8009d58:	0038      	movs	r0, r7
 8009d5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d5c:	321a      	adds	r2, #26
 8009d5e:	47b0      	blx	r6
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d100      	bne.n	8009d66 <_printf_float+0x3ba>
 8009d64:	e680      	b.n	8009a68 <_printf_float+0xbc>
 8009d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d68:	3301      	adds	r3, #1
 8009d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8009d6c:	e7b3      	b.n	8009cd6 <_printf_float+0x32a>
 8009d6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d70:	0038      	movs	r0, r7
 8009d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d76:	47b0      	blx	r6
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d1bd      	bne.n	8009cf8 <_printf_float+0x34c>
 8009d7c:	e674      	b.n	8009a68 <_printf_float+0xbc>
 8009d7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d80:	0038      	movs	r0, r7
 8009d82:	18ea      	adds	r2, r5, r3
 8009d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d88:	47b0      	blx	r6
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d1c0      	bne.n	8009d10 <_printf_float+0x364>
 8009d8e:	e66b      	b.n	8009a68 <_printf_float+0xbc>
 8009d90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	dc02      	bgt.n	8009d9c <_printf_float+0x3f0>
 8009d96:	2301      	movs	r3, #1
 8009d98:	421a      	tst	r2, r3
 8009d9a:	d034      	beq.n	8009e06 <_printf_float+0x45a>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	002a      	movs	r2, r5
 8009da0:	0038      	movs	r0, r7
 8009da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009da4:	47b0      	blx	r6
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d100      	bne.n	8009dac <_printf_float+0x400>
 8009daa:	e65d      	b.n	8009a68 <_printf_float+0xbc>
 8009dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dae:	0038      	movs	r0, r7
 8009db0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009db2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009db4:	47b0      	blx	r6
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	d100      	bne.n	8009dbc <_printf_float+0x410>
 8009dba:	e655      	b.n	8009a68 <_printf_float+0xbc>
 8009dbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009dbe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	f7f6 fb46 	bl	8000454 <__aeabi_dcmpeq>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d11a      	bne.n	8009e02 <_printf_float+0x456>
 8009dcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dce:	1c6a      	adds	r2, r5, #1
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	0038      	movs	r0, r7
 8009dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dd6:	47b0      	blx	r6
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d10e      	bne.n	8009dfa <_printf_float+0x44e>
 8009ddc:	e644      	b.n	8009a68 <_printf_float+0xbc>
 8009dde:	0022      	movs	r2, r4
 8009de0:	2301      	movs	r3, #1
 8009de2:	0038      	movs	r0, r7
 8009de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009de6:	321a      	adds	r2, #26
 8009de8:	47b0      	blx	r6
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d100      	bne.n	8009df0 <_printf_float+0x444>
 8009dee:	e63b      	b.n	8009a68 <_printf_float+0xbc>
 8009df0:	3501      	adds	r5, #1
 8009df2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009df4:	3b01      	subs	r3, #1
 8009df6:	42ab      	cmp	r3, r5
 8009df8:	dcf1      	bgt.n	8009dde <_printf_float+0x432>
 8009dfa:	0022      	movs	r2, r4
 8009dfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dfe:	3250      	adds	r2, #80	; 0x50
 8009e00:	e6da      	b.n	8009bb8 <_printf_float+0x20c>
 8009e02:	2500      	movs	r5, #0
 8009e04:	e7f5      	b.n	8009df2 <_printf_float+0x446>
 8009e06:	002a      	movs	r2, r5
 8009e08:	e7e3      	b.n	8009dd2 <_printf_float+0x426>
 8009e0a:	0022      	movs	r2, r4
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	0038      	movs	r0, r7
 8009e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e12:	3219      	adds	r2, #25
 8009e14:	47b0      	blx	r6
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	d100      	bne.n	8009e1c <_printf_float+0x470>
 8009e1a:	e625      	b.n	8009a68 <_printf_float+0xbc>
 8009e1c:	3501      	adds	r5, #1
 8009e1e:	68e3      	ldr	r3, [r4, #12]
 8009e20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e22:	1a9b      	subs	r3, r3, r2
 8009e24:	42ab      	cmp	r3, r5
 8009e26:	dcf0      	bgt.n	8009e0a <_printf_float+0x45e>
 8009e28:	e6f8      	b.n	8009c1c <_printf_float+0x270>
 8009e2a:	2500      	movs	r5, #0
 8009e2c:	e7f7      	b.n	8009e1e <_printf_float+0x472>
 8009e2e:	46c0      	nop			; (mov r8, r8)

08009e30 <_printf_common>:
 8009e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e32:	0015      	movs	r5, r2
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	688a      	ldr	r2, [r1, #8]
 8009e38:	690b      	ldr	r3, [r1, #16]
 8009e3a:	000c      	movs	r4, r1
 8009e3c:	9000      	str	r0, [sp, #0]
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	da00      	bge.n	8009e44 <_printf_common+0x14>
 8009e42:	0013      	movs	r3, r2
 8009e44:	0022      	movs	r2, r4
 8009e46:	602b      	str	r3, [r5, #0]
 8009e48:	3243      	adds	r2, #67	; 0x43
 8009e4a:	7812      	ldrb	r2, [r2, #0]
 8009e4c:	2a00      	cmp	r2, #0
 8009e4e:	d001      	beq.n	8009e54 <_printf_common+0x24>
 8009e50:	3301      	adds	r3, #1
 8009e52:	602b      	str	r3, [r5, #0]
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	069b      	lsls	r3, r3, #26
 8009e58:	d502      	bpl.n	8009e60 <_printf_common+0x30>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	602b      	str	r3, [r5, #0]
 8009e60:	6822      	ldr	r2, [r4, #0]
 8009e62:	2306      	movs	r3, #6
 8009e64:	0017      	movs	r7, r2
 8009e66:	401f      	ands	r7, r3
 8009e68:	421a      	tst	r2, r3
 8009e6a:	d027      	beq.n	8009ebc <_printf_common+0x8c>
 8009e6c:	0023      	movs	r3, r4
 8009e6e:	3343      	adds	r3, #67	; 0x43
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	1e5a      	subs	r2, r3, #1
 8009e74:	4193      	sbcs	r3, r2
 8009e76:	6822      	ldr	r2, [r4, #0]
 8009e78:	0692      	lsls	r2, r2, #26
 8009e7a:	d430      	bmi.n	8009ede <_printf_common+0xae>
 8009e7c:	0022      	movs	r2, r4
 8009e7e:	9901      	ldr	r1, [sp, #4]
 8009e80:	9800      	ldr	r0, [sp, #0]
 8009e82:	9e08      	ldr	r6, [sp, #32]
 8009e84:	3243      	adds	r2, #67	; 0x43
 8009e86:	47b0      	blx	r6
 8009e88:	1c43      	adds	r3, r0, #1
 8009e8a:	d025      	beq.n	8009ed8 <_printf_common+0xa8>
 8009e8c:	2306      	movs	r3, #6
 8009e8e:	6820      	ldr	r0, [r4, #0]
 8009e90:	682a      	ldr	r2, [r5, #0]
 8009e92:	68e1      	ldr	r1, [r4, #12]
 8009e94:	2500      	movs	r5, #0
 8009e96:	4003      	ands	r3, r0
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d103      	bne.n	8009ea4 <_printf_common+0x74>
 8009e9c:	1a8d      	subs	r5, r1, r2
 8009e9e:	43eb      	mvns	r3, r5
 8009ea0:	17db      	asrs	r3, r3, #31
 8009ea2:	401d      	ands	r5, r3
 8009ea4:	68a3      	ldr	r3, [r4, #8]
 8009ea6:	6922      	ldr	r2, [r4, #16]
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	dd01      	ble.n	8009eb0 <_printf_common+0x80>
 8009eac:	1a9b      	subs	r3, r3, r2
 8009eae:	18ed      	adds	r5, r5, r3
 8009eb0:	2700      	movs	r7, #0
 8009eb2:	42bd      	cmp	r5, r7
 8009eb4:	d120      	bne.n	8009ef8 <_printf_common+0xc8>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	e010      	b.n	8009edc <_printf_common+0xac>
 8009eba:	3701      	adds	r7, #1
 8009ebc:	68e3      	ldr	r3, [r4, #12]
 8009ebe:	682a      	ldr	r2, [r5, #0]
 8009ec0:	1a9b      	subs	r3, r3, r2
 8009ec2:	42bb      	cmp	r3, r7
 8009ec4:	ddd2      	ble.n	8009e6c <_printf_common+0x3c>
 8009ec6:	0022      	movs	r2, r4
 8009ec8:	2301      	movs	r3, #1
 8009eca:	9901      	ldr	r1, [sp, #4]
 8009ecc:	9800      	ldr	r0, [sp, #0]
 8009ece:	9e08      	ldr	r6, [sp, #32]
 8009ed0:	3219      	adds	r2, #25
 8009ed2:	47b0      	blx	r6
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d1f0      	bne.n	8009eba <_printf_common+0x8a>
 8009ed8:	2001      	movs	r0, #1
 8009eda:	4240      	negs	r0, r0
 8009edc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ede:	2030      	movs	r0, #48	; 0x30
 8009ee0:	18e1      	adds	r1, r4, r3
 8009ee2:	3143      	adds	r1, #67	; 0x43
 8009ee4:	7008      	strb	r0, [r1, #0]
 8009ee6:	0021      	movs	r1, r4
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	3145      	adds	r1, #69	; 0x45
 8009eec:	7809      	ldrb	r1, [r1, #0]
 8009eee:	18a2      	adds	r2, r4, r2
 8009ef0:	3243      	adds	r2, #67	; 0x43
 8009ef2:	3302      	adds	r3, #2
 8009ef4:	7011      	strb	r1, [r2, #0]
 8009ef6:	e7c1      	b.n	8009e7c <_printf_common+0x4c>
 8009ef8:	0022      	movs	r2, r4
 8009efa:	2301      	movs	r3, #1
 8009efc:	9901      	ldr	r1, [sp, #4]
 8009efe:	9800      	ldr	r0, [sp, #0]
 8009f00:	9e08      	ldr	r6, [sp, #32]
 8009f02:	321a      	adds	r2, #26
 8009f04:	47b0      	blx	r6
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d0e6      	beq.n	8009ed8 <_printf_common+0xa8>
 8009f0a:	3701      	adds	r7, #1
 8009f0c:	e7d1      	b.n	8009eb2 <_printf_common+0x82>
	...

08009f10 <_printf_i>:
 8009f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f12:	b08b      	sub	sp, #44	; 0x2c
 8009f14:	9206      	str	r2, [sp, #24]
 8009f16:	000a      	movs	r2, r1
 8009f18:	3243      	adds	r2, #67	; 0x43
 8009f1a:	9307      	str	r3, [sp, #28]
 8009f1c:	9005      	str	r0, [sp, #20]
 8009f1e:	9204      	str	r2, [sp, #16]
 8009f20:	7e0a      	ldrb	r2, [r1, #24]
 8009f22:	000c      	movs	r4, r1
 8009f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f26:	2a78      	cmp	r2, #120	; 0x78
 8009f28:	d807      	bhi.n	8009f3a <_printf_i+0x2a>
 8009f2a:	2a62      	cmp	r2, #98	; 0x62
 8009f2c:	d809      	bhi.n	8009f42 <_printf_i+0x32>
 8009f2e:	2a00      	cmp	r2, #0
 8009f30:	d100      	bne.n	8009f34 <_printf_i+0x24>
 8009f32:	e0c1      	b.n	800a0b8 <_printf_i+0x1a8>
 8009f34:	2a58      	cmp	r2, #88	; 0x58
 8009f36:	d100      	bne.n	8009f3a <_printf_i+0x2a>
 8009f38:	e08c      	b.n	800a054 <_printf_i+0x144>
 8009f3a:	0026      	movs	r6, r4
 8009f3c:	3642      	adds	r6, #66	; 0x42
 8009f3e:	7032      	strb	r2, [r6, #0]
 8009f40:	e022      	b.n	8009f88 <_printf_i+0x78>
 8009f42:	0010      	movs	r0, r2
 8009f44:	3863      	subs	r0, #99	; 0x63
 8009f46:	2815      	cmp	r0, #21
 8009f48:	d8f7      	bhi.n	8009f3a <_printf_i+0x2a>
 8009f4a:	f7f6 f8f3 	bl	8000134 <__gnu_thumb1_case_shi>
 8009f4e:	0016      	.short	0x0016
 8009f50:	fff6001f 	.word	0xfff6001f
 8009f54:	fff6fff6 	.word	0xfff6fff6
 8009f58:	001ffff6 	.word	0x001ffff6
 8009f5c:	fff6fff6 	.word	0xfff6fff6
 8009f60:	fff6fff6 	.word	0xfff6fff6
 8009f64:	003600a8 	.word	0x003600a8
 8009f68:	fff6009a 	.word	0xfff6009a
 8009f6c:	00b9fff6 	.word	0x00b9fff6
 8009f70:	0036fff6 	.word	0x0036fff6
 8009f74:	fff6fff6 	.word	0xfff6fff6
 8009f78:	009e      	.short	0x009e
 8009f7a:	0026      	movs	r6, r4
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	3642      	adds	r6, #66	; 0x42
 8009f80:	1d11      	adds	r1, r2, #4
 8009f82:	6019      	str	r1, [r3, #0]
 8009f84:	6813      	ldr	r3, [r2, #0]
 8009f86:	7033      	strb	r3, [r6, #0]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e0a7      	b.n	800a0dc <_printf_i+0x1cc>
 8009f8c:	6808      	ldr	r0, [r1, #0]
 8009f8e:	6819      	ldr	r1, [r3, #0]
 8009f90:	1d0a      	adds	r2, r1, #4
 8009f92:	0605      	lsls	r5, r0, #24
 8009f94:	d50b      	bpl.n	8009fae <_printf_i+0x9e>
 8009f96:	680d      	ldr	r5, [r1, #0]
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	2d00      	cmp	r5, #0
 8009f9c:	da03      	bge.n	8009fa6 <_printf_i+0x96>
 8009f9e:	232d      	movs	r3, #45	; 0x2d
 8009fa0:	9a04      	ldr	r2, [sp, #16]
 8009fa2:	426d      	negs	r5, r5
 8009fa4:	7013      	strb	r3, [r2, #0]
 8009fa6:	4b61      	ldr	r3, [pc, #388]	; (800a12c <_printf_i+0x21c>)
 8009fa8:	270a      	movs	r7, #10
 8009faa:	9303      	str	r3, [sp, #12]
 8009fac:	e01b      	b.n	8009fe6 <_printf_i+0xd6>
 8009fae:	680d      	ldr	r5, [r1, #0]
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	0641      	lsls	r1, r0, #25
 8009fb4:	d5f1      	bpl.n	8009f9a <_printf_i+0x8a>
 8009fb6:	b22d      	sxth	r5, r5
 8009fb8:	e7ef      	b.n	8009f9a <_printf_i+0x8a>
 8009fba:	680d      	ldr	r5, [r1, #0]
 8009fbc:	6819      	ldr	r1, [r3, #0]
 8009fbe:	1d08      	adds	r0, r1, #4
 8009fc0:	6018      	str	r0, [r3, #0]
 8009fc2:	062e      	lsls	r6, r5, #24
 8009fc4:	d501      	bpl.n	8009fca <_printf_i+0xba>
 8009fc6:	680d      	ldr	r5, [r1, #0]
 8009fc8:	e003      	b.n	8009fd2 <_printf_i+0xc2>
 8009fca:	066d      	lsls	r5, r5, #25
 8009fcc:	d5fb      	bpl.n	8009fc6 <_printf_i+0xb6>
 8009fce:	680d      	ldr	r5, [r1, #0]
 8009fd0:	b2ad      	uxth	r5, r5
 8009fd2:	4b56      	ldr	r3, [pc, #344]	; (800a12c <_printf_i+0x21c>)
 8009fd4:	2708      	movs	r7, #8
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	2a6f      	cmp	r2, #111	; 0x6f
 8009fda:	d000      	beq.n	8009fde <_printf_i+0xce>
 8009fdc:	3702      	adds	r7, #2
 8009fde:	0023      	movs	r3, r4
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	3343      	adds	r3, #67	; 0x43
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	6863      	ldr	r3, [r4, #4]
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	db03      	blt.n	8009ff6 <_printf_i+0xe6>
 8009fee:	2204      	movs	r2, #4
 8009ff0:	6821      	ldr	r1, [r4, #0]
 8009ff2:	4391      	bics	r1, r2
 8009ff4:	6021      	str	r1, [r4, #0]
 8009ff6:	2d00      	cmp	r5, #0
 8009ff8:	d102      	bne.n	800a000 <_printf_i+0xf0>
 8009ffa:	9e04      	ldr	r6, [sp, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00c      	beq.n	800a01a <_printf_i+0x10a>
 800a000:	9e04      	ldr	r6, [sp, #16]
 800a002:	0028      	movs	r0, r5
 800a004:	0039      	movs	r1, r7
 800a006:	f7f6 f925 	bl	8000254 <__aeabi_uidivmod>
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	3e01      	subs	r6, #1
 800a00e:	5c5b      	ldrb	r3, [r3, r1]
 800a010:	7033      	strb	r3, [r6, #0]
 800a012:	002b      	movs	r3, r5
 800a014:	0005      	movs	r5, r0
 800a016:	429f      	cmp	r7, r3
 800a018:	d9f3      	bls.n	800a002 <_printf_i+0xf2>
 800a01a:	2f08      	cmp	r7, #8
 800a01c:	d109      	bne.n	800a032 <_printf_i+0x122>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	07db      	lsls	r3, r3, #31
 800a022:	d506      	bpl.n	800a032 <_printf_i+0x122>
 800a024:	6863      	ldr	r3, [r4, #4]
 800a026:	6922      	ldr	r2, [r4, #16]
 800a028:	4293      	cmp	r3, r2
 800a02a:	dc02      	bgt.n	800a032 <_printf_i+0x122>
 800a02c:	2330      	movs	r3, #48	; 0x30
 800a02e:	3e01      	subs	r6, #1
 800a030:	7033      	strb	r3, [r6, #0]
 800a032:	9b04      	ldr	r3, [sp, #16]
 800a034:	1b9b      	subs	r3, r3, r6
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	9b07      	ldr	r3, [sp, #28]
 800a03a:	0021      	movs	r1, r4
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	9805      	ldr	r0, [sp, #20]
 800a040:	9b06      	ldr	r3, [sp, #24]
 800a042:	aa09      	add	r2, sp, #36	; 0x24
 800a044:	f7ff fef4 	bl	8009e30 <_printf_common>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d14c      	bne.n	800a0e6 <_printf_i+0x1d6>
 800a04c:	2001      	movs	r0, #1
 800a04e:	4240      	negs	r0, r0
 800a050:	b00b      	add	sp, #44	; 0x2c
 800a052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a054:	3145      	adds	r1, #69	; 0x45
 800a056:	700a      	strb	r2, [r1, #0]
 800a058:	4a34      	ldr	r2, [pc, #208]	; (800a12c <_printf_i+0x21c>)
 800a05a:	9203      	str	r2, [sp, #12]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	6821      	ldr	r1, [r4, #0]
 800a060:	ca20      	ldmia	r2!, {r5}
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	0608      	lsls	r0, r1, #24
 800a066:	d516      	bpl.n	800a096 <_printf_i+0x186>
 800a068:	07cb      	lsls	r3, r1, #31
 800a06a:	d502      	bpl.n	800a072 <_printf_i+0x162>
 800a06c:	2320      	movs	r3, #32
 800a06e:	4319      	orrs	r1, r3
 800a070:	6021      	str	r1, [r4, #0]
 800a072:	2710      	movs	r7, #16
 800a074:	2d00      	cmp	r5, #0
 800a076:	d1b2      	bne.n	8009fde <_printf_i+0xce>
 800a078:	2320      	movs	r3, #32
 800a07a:	6822      	ldr	r2, [r4, #0]
 800a07c:	439a      	bics	r2, r3
 800a07e:	6022      	str	r2, [r4, #0]
 800a080:	e7ad      	b.n	8009fde <_printf_i+0xce>
 800a082:	2220      	movs	r2, #32
 800a084:	6809      	ldr	r1, [r1, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	6022      	str	r2, [r4, #0]
 800a08a:	0022      	movs	r2, r4
 800a08c:	2178      	movs	r1, #120	; 0x78
 800a08e:	3245      	adds	r2, #69	; 0x45
 800a090:	7011      	strb	r1, [r2, #0]
 800a092:	4a27      	ldr	r2, [pc, #156]	; (800a130 <_printf_i+0x220>)
 800a094:	e7e1      	b.n	800a05a <_printf_i+0x14a>
 800a096:	0648      	lsls	r0, r1, #25
 800a098:	d5e6      	bpl.n	800a068 <_printf_i+0x158>
 800a09a:	b2ad      	uxth	r5, r5
 800a09c:	e7e4      	b.n	800a068 <_printf_i+0x158>
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	680d      	ldr	r5, [r1, #0]
 800a0a2:	1d10      	adds	r0, r2, #4
 800a0a4:	6949      	ldr	r1, [r1, #20]
 800a0a6:	6018      	str	r0, [r3, #0]
 800a0a8:	6813      	ldr	r3, [r2, #0]
 800a0aa:	062e      	lsls	r6, r5, #24
 800a0ac:	d501      	bpl.n	800a0b2 <_printf_i+0x1a2>
 800a0ae:	6019      	str	r1, [r3, #0]
 800a0b0:	e002      	b.n	800a0b8 <_printf_i+0x1a8>
 800a0b2:	066d      	lsls	r5, r5, #25
 800a0b4:	d5fb      	bpl.n	800a0ae <_printf_i+0x19e>
 800a0b6:	8019      	strh	r1, [r3, #0]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9e04      	ldr	r6, [sp, #16]
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	e7bb      	b.n	800a038 <_printf_i+0x128>
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	1d11      	adds	r1, r2, #4
 800a0c4:	6019      	str	r1, [r3, #0]
 800a0c6:	6816      	ldr	r6, [r2, #0]
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	0030      	movs	r0, r6
 800a0cc:	6862      	ldr	r2, [r4, #4]
 800a0ce:	f001 f84d 	bl	800b16c <memchr>
 800a0d2:	2800      	cmp	r0, #0
 800a0d4:	d001      	beq.n	800a0da <_printf_i+0x1ca>
 800a0d6:	1b80      	subs	r0, r0, r6
 800a0d8:	6060      	str	r0, [r4, #4]
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	6123      	str	r3, [r4, #16]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9a04      	ldr	r2, [sp, #16]
 800a0e2:	7013      	strb	r3, [r2, #0]
 800a0e4:	e7a8      	b.n	800a038 <_printf_i+0x128>
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	0032      	movs	r2, r6
 800a0ea:	9906      	ldr	r1, [sp, #24]
 800a0ec:	9805      	ldr	r0, [sp, #20]
 800a0ee:	9d07      	ldr	r5, [sp, #28]
 800a0f0:	47a8      	blx	r5
 800a0f2:	1c43      	adds	r3, r0, #1
 800a0f4:	d0aa      	beq.n	800a04c <_printf_i+0x13c>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	079b      	lsls	r3, r3, #30
 800a0fa:	d415      	bmi.n	800a128 <_printf_i+0x218>
 800a0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fe:	68e0      	ldr	r0, [r4, #12]
 800a100:	4298      	cmp	r0, r3
 800a102:	daa5      	bge.n	800a050 <_printf_i+0x140>
 800a104:	0018      	movs	r0, r3
 800a106:	e7a3      	b.n	800a050 <_printf_i+0x140>
 800a108:	0022      	movs	r2, r4
 800a10a:	2301      	movs	r3, #1
 800a10c:	9906      	ldr	r1, [sp, #24]
 800a10e:	9805      	ldr	r0, [sp, #20]
 800a110:	9e07      	ldr	r6, [sp, #28]
 800a112:	3219      	adds	r2, #25
 800a114:	47b0      	blx	r6
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	d098      	beq.n	800a04c <_printf_i+0x13c>
 800a11a:	3501      	adds	r5, #1
 800a11c:	68e3      	ldr	r3, [r4, #12]
 800a11e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a120:	1a9b      	subs	r3, r3, r2
 800a122:	42ab      	cmp	r3, r5
 800a124:	dcf0      	bgt.n	800a108 <_printf_i+0x1f8>
 800a126:	e7e9      	b.n	800a0fc <_printf_i+0x1ec>
 800a128:	2500      	movs	r5, #0
 800a12a:	e7f7      	b.n	800a11c <_printf_i+0x20c>
 800a12c:	0800cf3e 	.word	0x0800cf3e
 800a130:	0800cf4f 	.word	0x0800cf4f

0800a134 <_sbrk_r>:
 800a134:	2300      	movs	r3, #0
 800a136:	b570      	push	{r4, r5, r6, lr}
 800a138:	4d06      	ldr	r5, [pc, #24]	; (800a154 <_sbrk_r+0x20>)
 800a13a:	0004      	movs	r4, r0
 800a13c:	0008      	movs	r0, r1
 800a13e:	602b      	str	r3, [r5, #0]
 800a140:	f7fa fb26 	bl	8004790 <_sbrk>
 800a144:	1c43      	adds	r3, r0, #1
 800a146:	d103      	bne.n	800a150 <_sbrk_r+0x1c>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d000      	beq.n	800a150 <_sbrk_r+0x1c>
 800a14e:	6023      	str	r3, [r4, #0]
 800a150:	bd70      	pop	{r4, r5, r6, pc}
 800a152:	46c0      	nop			; (mov r8, r8)
 800a154:	200005d8 	.word	0x200005d8

0800a158 <siprintf>:
 800a158:	b40e      	push	{r1, r2, r3}
 800a15a:	b500      	push	{lr}
 800a15c:	490b      	ldr	r1, [pc, #44]	; (800a18c <siprintf+0x34>)
 800a15e:	b09c      	sub	sp, #112	; 0x70
 800a160:	ab1d      	add	r3, sp, #116	; 0x74
 800a162:	9002      	str	r0, [sp, #8]
 800a164:	9006      	str	r0, [sp, #24]
 800a166:	9107      	str	r1, [sp, #28]
 800a168:	9104      	str	r1, [sp, #16]
 800a16a:	4809      	ldr	r0, [pc, #36]	; (800a190 <siprintf+0x38>)
 800a16c:	4909      	ldr	r1, [pc, #36]	; (800a194 <siprintf+0x3c>)
 800a16e:	cb04      	ldmia	r3!, {r2}
 800a170:	9105      	str	r1, [sp, #20]
 800a172:	6800      	ldr	r0, [r0, #0]
 800a174:	a902      	add	r1, sp, #8
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	f001 fc3e 	bl	800b9f8 <_svfiprintf_r>
 800a17c:	2300      	movs	r3, #0
 800a17e:	9a02      	ldr	r2, [sp, #8]
 800a180:	7013      	strb	r3, [r2, #0]
 800a182:	b01c      	add	sp, #112	; 0x70
 800a184:	bc08      	pop	{r3}
 800a186:	b003      	add	sp, #12
 800a188:	4718      	bx	r3
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	7fffffff 	.word	0x7fffffff
 800a190:	200000a0 	.word	0x200000a0
 800a194:	ffff0208 	.word	0xffff0208

0800a198 <strncpy>:
 800a198:	0003      	movs	r3, r0
 800a19a:	b530      	push	{r4, r5, lr}
 800a19c:	001d      	movs	r5, r3
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	d006      	beq.n	800a1b0 <strncpy+0x18>
 800a1a2:	780c      	ldrb	r4, [r1, #0]
 800a1a4:	3a01      	subs	r2, #1
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	702c      	strb	r4, [r5, #0]
 800a1aa:	3101      	adds	r1, #1
 800a1ac:	2c00      	cmp	r4, #0
 800a1ae:	d1f5      	bne.n	800a19c <strncpy+0x4>
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	189a      	adds	r2, r3, r2
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d100      	bne.n	800a1ba <strncpy+0x22>
 800a1b8:	bd30      	pop	{r4, r5, pc}
 800a1ba:	7019      	strb	r1, [r3, #0]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	e7f9      	b.n	800a1b4 <strncpy+0x1c>

0800a1c0 <strtok>:
 800a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c2:	4b16      	ldr	r3, [pc, #88]	; (800a21c <strtok+0x5c>)
 800a1c4:	0005      	movs	r5, r0
 800a1c6:	681f      	ldr	r7, [r3, #0]
 800a1c8:	000e      	movs	r6, r1
 800a1ca:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800a1cc:	2c00      	cmp	r4, #0
 800a1ce:	d11d      	bne.n	800a20c <strtok+0x4c>
 800a1d0:	2050      	movs	r0, #80	; 0x50
 800a1d2:	f7ff fa43 	bl	800965c <malloc>
 800a1d6:	1e02      	subs	r2, r0, #0
 800a1d8:	65b8      	str	r0, [r7, #88]	; 0x58
 800a1da:	d104      	bne.n	800a1e6 <strtok+0x26>
 800a1dc:	2157      	movs	r1, #87	; 0x57
 800a1de:	4b10      	ldr	r3, [pc, #64]	; (800a220 <strtok+0x60>)
 800a1e0:	4810      	ldr	r0, [pc, #64]	; (800a224 <strtok+0x64>)
 800a1e2:	f000 f8eb 	bl	800a3bc <__assert_func>
 800a1e6:	6004      	str	r4, [r0, #0]
 800a1e8:	6044      	str	r4, [r0, #4]
 800a1ea:	6084      	str	r4, [r0, #8]
 800a1ec:	60c4      	str	r4, [r0, #12]
 800a1ee:	6104      	str	r4, [r0, #16]
 800a1f0:	6144      	str	r4, [r0, #20]
 800a1f2:	6184      	str	r4, [r0, #24]
 800a1f4:	6284      	str	r4, [r0, #40]	; 0x28
 800a1f6:	62c4      	str	r4, [r0, #44]	; 0x2c
 800a1f8:	6304      	str	r4, [r0, #48]	; 0x30
 800a1fa:	6344      	str	r4, [r0, #52]	; 0x34
 800a1fc:	6384      	str	r4, [r0, #56]	; 0x38
 800a1fe:	63c4      	str	r4, [r0, #60]	; 0x3c
 800a200:	6404      	str	r4, [r0, #64]	; 0x40
 800a202:	6444      	str	r4, [r0, #68]	; 0x44
 800a204:	6484      	str	r4, [r0, #72]	; 0x48
 800a206:	64c4      	str	r4, [r0, #76]	; 0x4c
 800a208:	7704      	strb	r4, [r0, #28]
 800a20a:	6244      	str	r4, [r0, #36]	; 0x24
 800a20c:	0031      	movs	r1, r6
 800a20e:	0028      	movs	r0, r5
 800a210:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a212:	2301      	movs	r3, #1
 800a214:	f000 f808 	bl	800a228 <__strtok_r>
 800a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a21a:	46c0      	nop			; (mov r8, r8)
 800a21c:	200000a0 	.word	0x200000a0
 800a220:	0800cf60 	.word	0x0800cf60
 800a224:	0800cf77 	.word	0x0800cf77

0800a228 <__strtok_r>:
 800a228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d102      	bne.n	800a234 <__strtok_r+0xc>
 800a22e:	6810      	ldr	r0, [r2, #0]
 800a230:	2800      	cmp	r0, #0
 800a232:	d013      	beq.n	800a25c <__strtok_r+0x34>
 800a234:	0004      	movs	r4, r0
 800a236:	0020      	movs	r0, r4
 800a238:	000e      	movs	r6, r1
 800a23a:	7805      	ldrb	r5, [r0, #0]
 800a23c:	3401      	adds	r4, #1
 800a23e:	7837      	ldrb	r7, [r6, #0]
 800a240:	2f00      	cmp	r7, #0
 800a242:	d104      	bne.n	800a24e <__strtok_r+0x26>
 800a244:	2d00      	cmp	r5, #0
 800a246:	d10f      	bne.n	800a268 <__strtok_r+0x40>
 800a248:	0028      	movs	r0, r5
 800a24a:	6015      	str	r5, [r2, #0]
 800a24c:	e006      	b.n	800a25c <__strtok_r+0x34>
 800a24e:	3601      	adds	r6, #1
 800a250:	42bd      	cmp	r5, r7
 800a252:	d1f4      	bne.n	800a23e <__strtok_r+0x16>
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1ee      	bne.n	800a236 <__strtok_r+0xe>
 800a258:	6014      	str	r4, [r2, #0]
 800a25a:	7003      	strb	r3, [r0, #0]
 800a25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a25e:	002f      	movs	r7, r5
 800a260:	e00f      	b.n	800a282 <__strtok_r+0x5a>
 800a262:	3301      	adds	r3, #1
 800a264:	2e00      	cmp	r6, #0
 800a266:	d104      	bne.n	800a272 <__strtok_r+0x4a>
 800a268:	0023      	movs	r3, r4
 800a26a:	3401      	adds	r4, #1
 800a26c:	781d      	ldrb	r5, [r3, #0]
 800a26e:	0027      	movs	r7, r4
 800a270:	000b      	movs	r3, r1
 800a272:	781e      	ldrb	r6, [r3, #0]
 800a274:	42b5      	cmp	r5, r6
 800a276:	d1f4      	bne.n	800a262 <__strtok_r+0x3a>
 800a278:	2d00      	cmp	r5, #0
 800a27a:	d0f0      	beq.n	800a25e <__strtok_r+0x36>
 800a27c:	2300      	movs	r3, #0
 800a27e:	3c01      	subs	r4, #1
 800a280:	7023      	strb	r3, [r4, #0]
 800a282:	6017      	str	r7, [r2, #0]
 800a284:	e7ea      	b.n	800a25c <__strtok_r+0x34>
	...

0800a288 <_strtol_l.constprop.0>:
 800a288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a28a:	b087      	sub	sp, #28
 800a28c:	001e      	movs	r6, r3
 800a28e:	9005      	str	r0, [sp, #20]
 800a290:	9101      	str	r1, [sp, #4]
 800a292:	9202      	str	r2, [sp, #8]
 800a294:	2b01      	cmp	r3, #1
 800a296:	d045      	beq.n	800a324 <_strtol_l.constprop.0+0x9c>
 800a298:	000b      	movs	r3, r1
 800a29a:	2e24      	cmp	r6, #36	; 0x24
 800a29c:	d842      	bhi.n	800a324 <_strtol_l.constprop.0+0x9c>
 800a29e:	4a3f      	ldr	r2, [pc, #252]	; (800a39c <_strtol_l.constprop.0+0x114>)
 800a2a0:	2108      	movs	r1, #8
 800a2a2:	4694      	mov	ip, r2
 800a2a4:	001a      	movs	r2, r3
 800a2a6:	4660      	mov	r0, ip
 800a2a8:	7814      	ldrb	r4, [r2, #0]
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	5d00      	ldrb	r0, [r0, r4]
 800a2ae:	001d      	movs	r5, r3
 800a2b0:	0007      	movs	r7, r0
 800a2b2:	400f      	ands	r7, r1
 800a2b4:	4208      	tst	r0, r1
 800a2b6:	d1f5      	bne.n	800a2a4 <_strtol_l.constprop.0+0x1c>
 800a2b8:	2c2d      	cmp	r4, #45	; 0x2d
 800a2ba:	d13a      	bne.n	800a332 <_strtol_l.constprop.0+0xaa>
 800a2bc:	2701      	movs	r7, #1
 800a2be:	781c      	ldrb	r4, [r3, #0]
 800a2c0:	1c95      	adds	r5, r2, #2
 800a2c2:	2e00      	cmp	r6, #0
 800a2c4:	d065      	beq.n	800a392 <_strtol_l.constprop.0+0x10a>
 800a2c6:	2e10      	cmp	r6, #16
 800a2c8:	d109      	bne.n	800a2de <_strtol_l.constprop.0+0x56>
 800a2ca:	2c30      	cmp	r4, #48	; 0x30
 800a2cc:	d107      	bne.n	800a2de <_strtol_l.constprop.0+0x56>
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	782b      	ldrb	r3, [r5, #0]
 800a2d2:	4393      	bics	r3, r2
 800a2d4:	2b58      	cmp	r3, #88	; 0x58
 800a2d6:	d157      	bne.n	800a388 <_strtol_l.constprop.0+0x100>
 800a2d8:	2610      	movs	r6, #16
 800a2da:	786c      	ldrb	r4, [r5, #1]
 800a2dc:	3502      	adds	r5, #2
 800a2de:	4b30      	ldr	r3, [pc, #192]	; (800a3a0 <_strtol_l.constprop.0+0x118>)
 800a2e0:	0031      	movs	r1, r6
 800a2e2:	18fb      	adds	r3, r7, r3
 800a2e4:	0018      	movs	r0, r3
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	f7f5 ffb4 	bl	8000254 <__aeabi_uidivmod>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	4684      	mov	ip, r0
 800a2f2:	0018      	movs	r0, r3
 800a2f4:	9104      	str	r1, [sp, #16]
 800a2f6:	4252      	negs	r2, r2
 800a2f8:	0021      	movs	r1, r4
 800a2fa:	3930      	subs	r1, #48	; 0x30
 800a2fc:	2909      	cmp	r1, #9
 800a2fe:	d81d      	bhi.n	800a33c <_strtol_l.constprop.0+0xb4>
 800a300:	000c      	movs	r4, r1
 800a302:	42a6      	cmp	r6, r4
 800a304:	dd28      	ble.n	800a358 <_strtol_l.constprop.0+0xd0>
 800a306:	2b00      	cmp	r3, #0
 800a308:	db24      	blt.n	800a354 <_strtol_l.constprop.0+0xcc>
 800a30a:	0013      	movs	r3, r2
 800a30c:	4584      	cmp	ip, r0
 800a30e:	d306      	bcc.n	800a31e <_strtol_l.constprop.0+0x96>
 800a310:	d102      	bne.n	800a318 <_strtol_l.constprop.0+0x90>
 800a312:	9904      	ldr	r1, [sp, #16]
 800a314:	42a1      	cmp	r1, r4
 800a316:	db02      	blt.n	800a31e <_strtol_l.constprop.0+0x96>
 800a318:	2301      	movs	r3, #1
 800a31a:	4370      	muls	r0, r6
 800a31c:	1820      	adds	r0, r4, r0
 800a31e:	782c      	ldrb	r4, [r5, #0]
 800a320:	3501      	adds	r5, #1
 800a322:	e7e9      	b.n	800a2f8 <_strtol_l.constprop.0+0x70>
 800a324:	f7ff f970 	bl	8009608 <__errno>
 800a328:	2316      	movs	r3, #22
 800a32a:	6003      	str	r3, [r0, #0]
 800a32c:	2000      	movs	r0, #0
 800a32e:	b007      	add	sp, #28
 800a330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a332:	2c2b      	cmp	r4, #43	; 0x2b
 800a334:	d1c5      	bne.n	800a2c2 <_strtol_l.constprop.0+0x3a>
 800a336:	781c      	ldrb	r4, [r3, #0]
 800a338:	1c95      	adds	r5, r2, #2
 800a33a:	e7c2      	b.n	800a2c2 <_strtol_l.constprop.0+0x3a>
 800a33c:	0021      	movs	r1, r4
 800a33e:	3941      	subs	r1, #65	; 0x41
 800a340:	2919      	cmp	r1, #25
 800a342:	d801      	bhi.n	800a348 <_strtol_l.constprop.0+0xc0>
 800a344:	3c37      	subs	r4, #55	; 0x37
 800a346:	e7dc      	b.n	800a302 <_strtol_l.constprop.0+0x7a>
 800a348:	0021      	movs	r1, r4
 800a34a:	3961      	subs	r1, #97	; 0x61
 800a34c:	2919      	cmp	r1, #25
 800a34e:	d803      	bhi.n	800a358 <_strtol_l.constprop.0+0xd0>
 800a350:	3c57      	subs	r4, #87	; 0x57
 800a352:	e7d6      	b.n	800a302 <_strtol_l.constprop.0+0x7a>
 800a354:	0013      	movs	r3, r2
 800a356:	e7e2      	b.n	800a31e <_strtol_l.constprop.0+0x96>
 800a358:	2b00      	cmp	r3, #0
 800a35a:	da09      	bge.n	800a370 <_strtol_l.constprop.0+0xe8>
 800a35c:	2322      	movs	r3, #34	; 0x22
 800a35e:	9a05      	ldr	r2, [sp, #20]
 800a360:	9803      	ldr	r0, [sp, #12]
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	9b02      	ldr	r3, [sp, #8]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0e1      	beq.n	800a32e <_strtol_l.constprop.0+0xa6>
 800a36a:	1e6b      	subs	r3, r5, #1
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	e007      	b.n	800a380 <_strtol_l.constprop.0+0xf8>
 800a370:	2f00      	cmp	r7, #0
 800a372:	d000      	beq.n	800a376 <_strtol_l.constprop.0+0xee>
 800a374:	4240      	negs	r0, r0
 800a376:	9a02      	ldr	r2, [sp, #8]
 800a378:	2a00      	cmp	r2, #0
 800a37a:	d0d8      	beq.n	800a32e <_strtol_l.constprop.0+0xa6>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1f4      	bne.n	800a36a <_strtol_l.constprop.0+0xe2>
 800a380:	9b02      	ldr	r3, [sp, #8]
 800a382:	9a01      	ldr	r2, [sp, #4]
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	e7d2      	b.n	800a32e <_strtol_l.constprop.0+0xa6>
 800a388:	2430      	movs	r4, #48	; 0x30
 800a38a:	2e00      	cmp	r6, #0
 800a38c:	d1a7      	bne.n	800a2de <_strtol_l.constprop.0+0x56>
 800a38e:	3608      	adds	r6, #8
 800a390:	e7a5      	b.n	800a2de <_strtol_l.constprop.0+0x56>
 800a392:	2c30      	cmp	r4, #48	; 0x30
 800a394:	d09b      	beq.n	800a2ce <_strtol_l.constprop.0+0x46>
 800a396:	260a      	movs	r6, #10
 800a398:	e7a1      	b.n	800a2de <_strtol_l.constprop.0+0x56>
 800a39a:	46c0      	nop			; (mov r8, r8)
 800a39c:	0800d011 	.word	0x0800d011
 800a3a0:	7fffffff 	.word	0x7fffffff

0800a3a4 <strtol>:
 800a3a4:	b510      	push	{r4, lr}
 800a3a6:	0013      	movs	r3, r2
 800a3a8:	000a      	movs	r2, r1
 800a3aa:	0001      	movs	r1, r0
 800a3ac:	4802      	ldr	r0, [pc, #8]	; (800a3b8 <strtol+0x14>)
 800a3ae:	6800      	ldr	r0, [r0, #0]
 800a3b0:	f7ff ff6a 	bl	800a288 <_strtol_l.constprop.0>
 800a3b4:	bd10      	pop	{r4, pc}
 800a3b6:	46c0      	nop			; (mov r8, r8)
 800a3b8:	200000a0 	.word	0x200000a0

0800a3bc <__assert_func>:
 800a3bc:	b530      	push	{r4, r5, lr}
 800a3be:	0014      	movs	r4, r2
 800a3c0:	001a      	movs	r2, r3
 800a3c2:	4b09      	ldr	r3, [pc, #36]	; (800a3e8 <__assert_func+0x2c>)
 800a3c4:	0005      	movs	r5, r0
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	b085      	sub	sp, #20
 800a3ca:	68d8      	ldr	r0, [r3, #12]
 800a3cc:	4b07      	ldr	r3, [pc, #28]	; (800a3ec <__assert_func+0x30>)
 800a3ce:	2c00      	cmp	r4, #0
 800a3d0:	d101      	bne.n	800a3d6 <__assert_func+0x1a>
 800a3d2:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <__assert_func+0x34>)
 800a3d4:	001c      	movs	r4, r3
 800a3d6:	9301      	str	r3, [sp, #4]
 800a3d8:	9100      	str	r1, [sp, #0]
 800a3da:	002b      	movs	r3, r5
 800a3dc:	4905      	ldr	r1, [pc, #20]	; (800a3f4 <__assert_func+0x38>)
 800a3de:	9402      	str	r4, [sp, #8]
 800a3e0:	f000 feb0 	bl	800b144 <fiprintf>
 800a3e4:	f001 fe38 	bl	800c058 <abort>
 800a3e8:	200000a0 	.word	0x200000a0
 800a3ec:	0800cfd4 	.word	0x0800cfd4
 800a3f0:	0800d00f 	.word	0x0800d00f
 800a3f4:	0800cfe1 	.word	0x0800cfe1

0800a3f8 <quorem>:
 800a3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3fa:	0006      	movs	r6, r0
 800a3fc:	690b      	ldr	r3, [r1, #16]
 800a3fe:	6932      	ldr	r2, [r6, #16]
 800a400:	b087      	sub	sp, #28
 800a402:	2000      	movs	r0, #0
 800a404:	9103      	str	r1, [sp, #12]
 800a406:	429a      	cmp	r2, r3
 800a408:	db65      	blt.n	800a4d6 <quorem+0xde>
 800a40a:	3b01      	subs	r3, #1
 800a40c:	009c      	lsls	r4, r3, #2
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	000b      	movs	r3, r1
 800a412:	3314      	adds	r3, #20
 800a414:	9305      	str	r3, [sp, #20]
 800a416:	191b      	adds	r3, r3, r4
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	0033      	movs	r3, r6
 800a41c:	3314      	adds	r3, #20
 800a41e:	9302      	str	r3, [sp, #8]
 800a420:	191c      	adds	r4, r3, r4
 800a422:	9b04      	ldr	r3, [sp, #16]
 800a424:	6827      	ldr	r7, [r4, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	0038      	movs	r0, r7
 800a42a:	1c5d      	adds	r5, r3, #1
 800a42c:	0029      	movs	r1, r5
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	f7f5 fe8a 	bl	8000148 <__udivsi3>
 800a434:	9001      	str	r0, [sp, #4]
 800a436:	42af      	cmp	r7, r5
 800a438:	d324      	bcc.n	800a484 <quorem+0x8c>
 800a43a:	2500      	movs	r5, #0
 800a43c:	46ac      	mov	ip, r5
 800a43e:	9802      	ldr	r0, [sp, #8]
 800a440:	9f05      	ldr	r7, [sp, #20]
 800a442:	cf08      	ldmia	r7!, {r3}
 800a444:	9a01      	ldr	r2, [sp, #4]
 800a446:	b299      	uxth	r1, r3
 800a448:	4351      	muls	r1, r2
 800a44a:	0c1b      	lsrs	r3, r3, #16
 800a44c:	4353      	muls	r3, r2
 800a44e:	1949      	adds	r1, r1, r5
 800a450:	0c0a      	lsrs	r2, r1, #16
 800a452:	189b      	adds	r3, r3, r2
 800a454:	6802      	ldr	r2, [r0, #0]
 800a456:	b289      	uxth	r1, r1
 800a458:	b292      	uxth	r2, r2
 800a45a:	4462      	add	r2, ip
 800a45c:	1a52      	subs	r2, r2, r1
 800a45e:	6801      	ldr	r1, [r0, #0]
 800a460:	0c1d      	lsrs	r5, r3, #16
 800a462:	0c09      	lsrs	r1, r1, #16
 800a464:	b29b      	uxth	r3, r3
 800a466:	1acb      	subs	r3, r1, r3
 800a468:	1411      	asrs	r1, r2, #16
 800a46a:	185b      	adds	r3, r3, r1
 800a46c:	1419      	asrs	r1, r3, #16
 800a46e:	b292      	uxth	r2, r2
 800a470:	041b      	lsls	r3, r3, #16
 800a472:	431a      	orrs	r2, r3
 800a474:	9b04      	ldr	r3, [sp, #16]
 800a476:	468c      	mov	ip, r1
 800a478:	c004      	stmia	r0!, {r2}
 800a47a:	42bb      	cmp	r3, r7
 800a47c:	d2e1      	bcs.n	800a442 <quorem+0x4a>
 800a47e:	6823      	ldr	r3, [r4, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d030      	beq.n	800a4e6 <quorem+0xee>
 800a484:	0030      	movs	r0, r6
 800a486:	9903      	ldr	r1, [sp, #12]
 800a488:	f001 f910 	bl	800b6ac <__mcmp>
 800a48c:	2800      	cmp	r0, #0
 800a48e:	db21      	blt.n	800a4d4 <quorem+0xdc>
 800a490:	0030      	movs	r0, r6
 800a492:	2400      	movs	r4, #0
 800a494:	9b01      	ldr	r3, [sp, #4]
 800a496:	9903      	ldr	r1, [sp, #12]
 800a498:	3301      	adds	r3, #1
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	3014      	adds	r0, #20
 800a49e:	3114      	adds	r1, #20
 800a4a0:	6803      	ldr	r3, [r0, #0]
 800a4a2:	c920      	ldmia	r1!, {r5}
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	1914      	adds	r4, r2, r4
 800a4a8:	b2aa      	uxth	r2, r5
 800a4aa:	1aa2      	subs	r2, r4, r2
 800a4ac:	0c1b      	lsrs	r3, r3, #16
 800a4ae:	0c2d      	lsrs	r5, r5, #16
 800a4b0:	1414      	asrs	r4, r2, #16
 800a4b2:	1b5b      	subs	r3, r3, r5
 800a4b4:	191b      	adds	r3, r3, r4
 800a4b6:	141c      	asrs	r4, r3, #16
 800a4b8:	b292      	uxth	r2, r2
 800a4ba:	041b      	lsls	r3, r3, #16
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	c008      	stmia	r0!, {r3}
 800a4c0:	9b04      	ldr	r3, [sp, #16]
 800a4c2:	428b      	cmp	r3, r1
 800a4c4:	d2ec      	bcs.n	800a4a0 <quorem+0xa8>
 800a4c6:	9b00      	ldr	r3, [sp, #0]
 800a4c8:	9a02      	ldr	r2, [sp, #8]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	18d3      	adds	r3, r2, r3
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	2a00      	cmp	r2, #0
 800a4d2:	d015      	beq.n	800a500 <quorem+0x108>
 800a4d4:	9801      	ldr	r0, [sp, #4]
 800a4d6:	b007      	add	sp, #28
 800a4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <quorem+0xf6>
 800a4e0:	9b00      	ldr	r3, [sp, #0]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	9b02      	ldr	r3, [sp, #8]
 800a4e8:	3c04      	subs	r4, #4
 800a4ea:	42a3      	cmp	r3, r4
 800a4ec:	d3f5      	bcc.n	800a4da <quorem+0xe2>
 800a4ee:	9b00      	ldr	r3, [sp, #0]
 800a4f0:	6133      	str	r3, [r6, #16]
 800a4f2:	e7c7      	b.n	800a484 <quorem+0x8c>
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	2a00      	cmp	r2, #0
 800a4f8:	d106      	bne.n	800a508 <quorem+0x110>
 800a4fa:	9a00      	ldr	r2, [sp, #0]
 800a4fc:	3a01      	subs	r2, #1
 800a4fe:	9200      	str	r2, [sp, #0]
 800a500:	9a02      	ldr	r2, [sp, #8]
 800a502:	3b04      	subs	r3, #4
 800a504:	429a      	cmp	r2, r3
 800a506:	d3f5      	bcc.n	800a4f4 <quorem+0xfc>
 800a508:	9b00      	ldr	r3, [sp, #0]
 800a50a:	6133      	str	r3, [r6, #16]
 800a50c:	e7e2      	b.n	800a4d4 <quorem+0xdc>
	...

0800a510 <_dtoa_r>:
 800a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a512:	b09d      	sub	sp, #116	; 0x74
 800a514:	9202      	str	r2, [sp, #8]
 800a516:	9303      	str	r3, [sp, #12]
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	9c03      	ldr	r4, [sp, #12]
 800a51c:	9308      	str	r3, [sp, #32]
 800a51e:	9409      	str	r4, [sp, #36]	; 0x24
 800a520:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a522:	0007      	movs	r7, r0
 800a524:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a526:	2c00      	cmp	r4, #0
 800a528:	d10e      	bne.n	800a548 <_dtoa_r+0x38>
 800a52a:	2010      	movs	r0, #16
 800a52c:	f7ff f896 	bl	800965c <malloc>
 800a530:	1e02      	subs	r2, r0, #0
 800a532:	6278      	str	r0, [r7, #36]	; 0x24
 800a534:	d104      	bne.n	800a540 <_dtoa_r+0x30>
 800a536:	21ea      	movs	r1, #234	; 0xea
 800a538:	4bc7      	ldr	r3, [pc, #796]	; (800a858 <_dtoa_r+0x348>)
 800a53a:	48c8      	ldr	r0, [pc, #800]	; (800a85c <_dtoa_r+0x34c>)
 800a53c:	f7ff ff3e 	bl	800a3bc <__assert_func>
 800a540:	6044      	str	r4, [r0, #4]
 800a542:	6084      	str	r4, [r0, #8]
 800a544:	6004      	str	r4, [r0, #0]
 800a546:	60c4      	str	r4, [r0, #12]
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	6819      	ldr	r1, [r3, #0]
 800a54c:	2900      	cmp	r1, #0
 800a54e:	d00a      	beq.n	800a566 <_dtoa_r+0x56>
 800a550:	685a      	ldr	r2, [r3, #4]
 800a552:	2301      	movs	r3, #1
 800a554:	4093      	lsls	r3, r2
 800a556:	604a      	str	r2, [r1, #4]
 800a558:	608b      	str	r3, [r1, #8]
 800a55a:	0038      	movs	r0, r7
 800a55c:	f000 fe66 	bl	800b22c <_Bfree>
 800a560:	2200      	movs	r2, #0
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	da20      	bge.n	800a5ae <_dtoa_r+0x9e>
 800a56c:	2301      	movs	r3, #1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	9b03      	ldr	r3, [sp, #12]
 800a572:	005b      	lsls	r3, r3, #1
 800a574:	085b      	lsrs	r3, r3, #1
 800a576:	9309      	str	r3, [sp, #36]	; 0x24
 800a578:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a57a:	4bb9      	ldr	r3, [pc, #740]	; (800a860 <_dtoa_r+0x350>)
 800a57c:	4ab8      	ldr	r2, [pc, #736]	; (800a860 <_dtoa_r+0x350>)
 800a57e:	402b      	ands	r3, r5
 800a580:	4293      	cmp	r3, r2
 800a582:	d117      	bne.n	800a5b4 <_dtoa_r+0xa4>
 800a584:	4bb7      	ldr	r3, [pc, #732]	; (800a864 <_dtoa_r+0x354>)
 800a586:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a588:	0328      	lsls	r0, r5, #12
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	9b02      	ldr	r3, [sp, #8]
 800a58e:	0b00      	lsrs	r0, r0, #12
 800a590:	4318      	orrs	r0, r3
 800a592:	d101      	bne.n	800a598 <_dtoa_r+0x88>
 800a594:	f000 fdbf 	bl	800b116 <_dtoa_r+0xc06>
 800a598:	48b3      	ldr	r0, [pc, #716]	; (800a868 <_dtoa_r+0x358>)
 800a59a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a59c:	9006      	str	r0, [sp, #24]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d002      	beq.n	800a5a8 <_dtoa_r+0x98>
 800a5a2:	4bb2      	ldr	r3, [pc, #712]	; (800a86c <_dtoa_r+0x35c>)
 800a5a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	9806      	ldr	r0, [sp, #24]
 800a5aa:	b01d      	add	sp, #116	; 0x74
 800a5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	602b      	str	r3, [r5, #0]
 800a5b2:	e7e1      	b.n	800a578 <_dtoa_r+0x68>
 800a5b4:	9b08      	ldr	r3, [sp, #32]
 800a5b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a5b8:	9312      	str	r3, [sp, #72]	; 0x48
 800a5ba:	9413      	str	r4, [sp, #76]	; 0x4c
 800a5bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a5be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f7f5 ff46 	bl	8000454 <__aeabi_dcmpeq>
 800a5c8:	1e04      	subs	r4, r0, #0
 800a5ca:	d009      	beq.n	800a5e0 <_dtoa_r+0xd0>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a5d0:	6013      	str	r3, [r2, #0]
 800a5d2:	4ba7      	ldr	r3, [pc, #668]	; (800a870 <_dtoa_r+0x360>)
 800a5d4:	9306      	str	r3, [sp, #24]
 800a5d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d0e5      	beq.n	800a5a8 <_dtoa_r+0x98>
 800a5dc:	4ba5      	ldr	r3, [pc, #660]	; (800a874 <_dtoa_r+0x364>)
 800a5de:	e7e1      	b.n	800a5a4 <_dtoa_r+0x94>
 800a5e0:	ab1a      	add	r3, sp, #104	; 0x68
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	ab1b      	add	r3, sp, #108	; 0x6c
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	0038      	movs	r0, r7
 800a5ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a5ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5ee:	f001 f911 	bl	800b814 <__d2b>
 800a5f2:	006e      	lsls	r6, r5, #1
 800a5f4:	9005      	str	r0, [sp, #20]
 800a5f6:	0d76      	lsrs	r6, r6, #21
 800a5f8:	d100      	bne.n	800a5fc <_dtoa_r+0xec>
 800a5fa:	e07c      	b.n	800a6f6 <_dtoa_r+0x1e6>
 800a5fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a5fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a600:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a602:	4a9d      	ldr	r2, [pc, #628]	; (800a878 <_dtoa_r+0x368>)
 800a604:	031b      	lsls	r3, r3, #12
 800a606:	0b1b      	lsrs	r3, r3, #12
 800a608:	431a      	orrs	r2, r3
 800a60a:	0011      	movs	r1, r2
 800a60c:	4b9b      	ldr	r3, [pc, #620]	; (800a87c <_dtoa_r+0x36c>)
 800a60e:	9418      	str	r4, [sp, #96]	; 0x60
 800a610:	18f6      	adds	r6, r6, r3
 800a612:	2200      	movs	r2, #0
 800a614:	4b9a      	ldr	r3, [pc, #616]	; (800a880 <_dtoa_r+0x370>)
 800a616:	f7f8 f817 	bl	8002648 <__aeabi_dsub>
 800a61a:	4a9a      	ldr	r2, [pc, #616]	; (800a884 <_dtoa_r+0x374>)
 800a61c:	4b9a      	ldr	r3, [pc, #616]	; (800a888 <_dtoa_r+0x378>)
 800a61e:	f7f7 fda7 	bl	8002170 <__aeabi_dmul>
 800a622:	4a9a      	ldr	r2, [pc, #616]	; (800a88c <_dtoa_r+0x37c>)
 800a624:	4b9a      	ldr	r3, [pc, #616]	; (800a890 <_dtoa_r+0x380>)
 800a626:	f7f6 fe65 	bl	80012f4 <__aeabi_dadd>
 800a62a:	0004      	movs	r4, r0
 800a62c:	0030      	movs	r0, r6
 800a62e:	000d      	movs	r5, r1
 800a630:	f7f8 fbf0 	bl	8002e14 <__aeabi_i2d>
 800a634:	4a97      	ldr	r2, [pc, #604]	; (800a894 <_dtoa_r+0x384>)
 800a636:	4b98      	ldr	r3, [pc, #608]	; (800a898 <_dtoa_r+0x388>)
 800a638:	f7f7 fd9a 	bl	8002170 <__aeabi_dmul>
 800a63c:	0002      	movs	r2, r0
 800a63e:	000b      	movs	r3, r1
 800a640:	0020      	movs	r0, r4
 800a642:	0029      	movs	r1, r5
 800a644:	f7f6 fe56 	bl	80012f4 <__aeabi_dadd>
 800a648:	0004      	movs	r4, r0
 800a64a:	000d      	movs	r5, r1
 800a64c:	f7f8 fbac 	bl	8002da8 <__aeabi_d2iz>
 800a650:	2200      	movs	r2, #0
 800a652:	9002      	str	r0, [sp, #8]
 800a654:	2300      	movs	r3, #0
 800a656:	0020      	movs	r0, r4
 800a658:	0029      	movs	r1, r5
 800a65a:	f7f5 ff01 	bl	8000460 <__aeabi_dcmplt>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d00b      	beq.n	800a67a <_dtoa_r+0x16a>
 800a662:	9802      	ldr	r0, [sp, #8]
 800a664:	f7f8 fbd6 	bl	8002e14 <__aeabi_i2d>
 800a668:	002b      	movs	r3, r5
 800a66a:	0022      	movs	r2, r4
 800a66c:	f7f5 fef2 	bl	8000454 <__aeabi_dcmpeq>
 800a670:	4243      	negs	r3, r0
 800a672:	4158      	adcs	r0, r3
 800a674:	9b02      	ldr	r3, [sp, #8]
 800a676:	1a1b      	subs	r3, r3, r0
 800a678:	9302      	str	r3, [sp, #8]
 800a67a:	2301      	movs	r3, #1
 800a67c:	9316      	str	r3, [sp, #88]	; 0x58
 800a67e:	9b02      	ldr	r3, [sp, #8]
 800a680:	2b16      	cmp	r3, #22
 800a682:	d80f      	bhi.n	800a6a4 <_dtoa_r+0x194>
 800a684:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a686:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a688:	00da      	lsls	r2, r3, #3
 800a68a:	4b84      	ldr	r3, [pc, #528]	; (800a89c <_dtoa_r+0x38c>)
 800a68c:	189b      	adds	r3, r3, r2
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f7f5 fee5 	bl	8000460 <__aeabi_dcmplt>
 800a696:	2800      	cmp	r0, #0
 800a698:	d049      	beq.n	800a72e <_dtoa_r+0x21e>
 800a69a:	9b02      	ldr	r3, [sp, #8]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	9316      	str	r3, [sp, #88]	; 0x58
 800a6a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a6a6:	1b9e      	subs	r6, r3, r6
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a6ac:	0033      	movs	r3, r6
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	930d      	str	r3, [sp, #52]	; 0x34
 800a6b2:	d504      	bpl.n	800a6be <_dtoa_r+0x1ae>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	1b9b      	subs	r3, r3, r6
 800a6b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	930d      	str	r3, [sp, #52]	; 0x34
 800a6be:	9b02      	ldr	r3, [sp, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	db36      	blt.n	800a732 <_dtoa_r+0x222>
 800a6c4:	9a02      	ldr	r2, [sp, #8]
 800a6c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c8:	4694      	mov	ip, r2
 800a6ca:	4463      	add	r3, ip
 800a6cc:	930d      	str	r3, [sp, #52]	; 0x34
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9215      	str	r2, [sp, #84]	; 0x54
 800a6d2:	930e      	str	r3, [sp, #56]	; 0x38
 800a6d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6d6:	2401      	movs	r4, #1
 800a6d8:	2b09      	cmp	r3, #9
 800a6da:	d864      	bhi.n	800a7a6 <_dtoa_r+0x296>
 800a6dc:	2b05      	cmp	r3, #5
 800a6de:	dd02      	ble.n	800a6e6 <_dtoa_r+0x1d6>
 800a6e0:	2400      	movs	r4, #0
 800a6e2:	3b04      	subs	r3, #4
 800a6e4:	9322      	str	r3, [sp, #136]	; 0x88
 800a6e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6e8:	1e98      	subs	r0, r3, #2
 800a6ea:	2803      	cmp	r0, #3
 800a6ec:	d864      	bhi.n	800a7b8 <_dtoa_r+0x2a8>
 800a6ee:	f7f5 fd17 	bl	8000120 <__gnu_thumb1_case_uqi>
 800a6f2:	3829      	.short	0x3829
 800a6f4:	5836      	.short	0x5836
 800a6f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a6f8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a6fa:	189e      	adds	r6, r3, r2
 800a6fc:	4b68      	ldr	r3, [pc, #416]	; (800a8a0 <_dtoa_r+0x390>)
 800a6fe:	18f2      	adds	r2, r6, r3
 800a700:	2a20      	cmp	r2, #32
 800a702:	dd0f      	ble.n	800a724 <_dtoa_r+0x214>
 800a704:	2340      	movs	r3, #64	; 0x40
 800a706:	1a9b      	subs	r3, r3, r2
 800a708:	409d      	lsls	r5, r3
 800a70a:	4b66      	ldr	r3, [pc, #408]	; (800a8a4 <_dtoa_r+0x394>)
 800a70c:	9802      	ldr	r0, [sp, #8]
 800a70e:	18f3      	adds	r3, r6, r3
 800a710:	40d8      	lsrs	r0, r3
 800a712:	4328      	orrs	r0, r5
 800a714:	f7f8 fbae 	bl	8002e74 <__aeabi_ui2d>
 800a718:	2301      	movs	r3, #1
 800a71a:	4c63      	ldr	r4, [pc, #396]	; (800a8a8 <_dtoa_r+0x398>)
 800a71c:	3e01      	subs	r6, #1
 800a71e:	1909      	adds	r1, r1, r4
 800a720:	9318      	str	r3, [sp, #96]	; 0x60
 800a722:	e776      	b.n	800a612 <_dtoa_r+0x102>
 800a724:	2320      	movs	r3, #32
 800a726:	9802      	ldr	r0, [sp, #8]
 800a728:	1a9b      	subs	r3, r3, r2
 800a72a:	4098      	lsls	r0, r3
 800a72c:	e7f2      	b.n	800a714 <_dtoa_r+0x204>
 800a72e:	9016      	str	r0, [sp, #88]	; 0x58
 800a730:	e7b8      	b.n	800a6a4 <_dtoa_r+0x194>
 800a732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a734:	9a02      	ldr	r2, [sp, #8]
 800a736:	1a9b      	subs	r3, r3, r2
 800a738:	930a      	str	r3, [sp, #40]	; 0x28
 800a73a:	4253      	negs	r3, r2
 800a73c:	930e      	str	r3, [sp, #56]	; 0x38
 800a73e:	2300      	movs	r3, #0
 800a740:	9315      	str	r3, [sp, #84]	; 0x54
 800a742:	e7c7      	b.n	800a6d4 <_dtoa_r+0x1c4>
 800a744:	2300      	movs	r3, #0
 800a746:	930f      	str	r3, [sp, #60]	; 0x3c
 800a748:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a74a:	930c      	str	r3, [sp, #48]	; 0x30
 800a74c:	9307      	str	r3, [sp, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	dc13      	bgt.n	800a77a <_dtoa_r+0x26a>
 800a752:	2301      	movs	r3, #1
 800a754:	001a      	movs	r2, r3
 800a756:	930c      	str	r3, [sp, #48]	; 0x30
 800a758:	9307      	str	r3, [sp, #28]
 800a75a:	9223      	str	r2, [sp, #140]	; 0x8c
 800a75c:	e00d      	b.n	800a77a <_dtoa_r+0x26a>
 800a75e:	2301      	movs	r3, #1
 800a760:	e7f1      	b.n	800a746 <_dtoa_r+0x236>
 800a762:	2300      	movs	r3, #0
 800a764:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a766:	930f      	str	r3, [sp, #60]	; 0x3c
 800a768:	4694      	mov	ip, r2
 800a76a:	9b02      	ldr	r3, [sp, #8]
 800a76c:	4463      	add	r3, ip
 800a76e:	930c      	str	r3, [sp, #48]	; 0x30
 800a770:	3301      	adds	r3, #1
 800a772:	9307      	str	r3, [sp, #28]
 800a774:	2b00      	cmp	r3, #0
 800a776:	dc00      	bgt.n	800a77a <_dtoa_r+0x26a>
 800a778:	2301      	movs	r3, #1
 800a77a:	2200      	movs	r2, #0
 800a77c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a77e:	6042      	str	r2, [r0, #4]
 800a780:	3204      	adds	r2, #4
 800a782:	0015      	movs	r5, r2
 800a784:	3514      	adds	r5, #20
 800a786:	6841      	ldr	r1, [r0, #4]
 800a788:	429d      	cmp	r5, r3
 800a78a:	d919      	bls.n	800a7c0 <_dtoa_r+0x2b0>
 800a78c:	0038      	movs	r0, r7
 800a78e:	f000 fd09 	bl	800b1a4 <_Balloc>
 800a792:	9006      	str	r0, [sp, #24]
 800a794:	2800      	cmp	r0, #0
 800a796:	d117      	bne.n	800a7c8 <_dtoa_r+0x2b8>
 800a798:	21d5      	movs	r1, #213	; 0xd5
 800a79a:	0002      	movs	r2, r0
 800a79c:	4b43      	ldr	r3, [pc, #268]	; (800a8ac <_dtoa_r+0x39c>)
 800a79e:	0049      	lsls	r1, r1, #1
 800a7a0:	e6cb      	b.n	800a53a <_dtoa_r+0x2a>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e7de      	b.n	800a764 <_dtoa_r+0x254>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	940f      	str	r4, [sp, #60]	; 0x3c
 800a7aa:	9322      	str	r3, [sp, #136]	; 0x88
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a7b0:	9307      	str	r3, [sp, #28]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	3313      	adds	r3, #19
 800a7b6:	e7d0      	b.n	800a75a <_dtoa_r+0x24a>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7bc:	3b02      	subs	r3, #2
 800a7be:	e7f6      	b.n	800a7ae <_dtoa_r+0x29e>
 800a7c0:	3101      	adds	r1, #1
 800a7c2:	6041      	str	r1, [r0, #4]
 800a7c4:	0052      	lsls	r2, r2, #1
 800a7c6:	e7dc      	b.n	800a782 <_dtoa_r+0x272>
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ca:	9a06      	ldr	r2, [sp, #24]
 800a7cc:	601a      	str	r2, [r3, #0]
 800a7ce:	9b07      	ldr	r3, [sp, #28]
 800a7d0:	2b0e      	cmp	r3, #14
 800a7d2:	d900      	bls.n	800a7d6 <_dtoa_r+0x2c6>
 800a7d4:	e0eb      	b.n	800a9ae <_dtoa_r+0x49e>
 800a7d6:	2c00      	cmp	r4, #0
 800a7d8:	d100      	bne.n	800a7dc <_dtoa_r+0x2cc>
 800a7da:	e0e8      	b.n	800a9ae <_dtoa_r+0x49e>
 800a7dc:	9b02      	ldr	r3, [sp, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	dd68      	ble.n	800a8b4 <_dtoa_r+0x3a4>
 800a7e2:	001a      	movs	r2, r3
 800a7e4:	210f      	movs	r1, #15
 800a7e6:	4b2d      	ldr	r3, [pc, #180]	; (800a89c <_dtoa_r+0x38c>)
 800a7e8:	400a      	ands	r2, r1
 800a7ea:	00d2      	lsls	r2, r2, #3
 800a7ec:	189b      	adds	r3, r3, r2
 800a7ee:	681d      	ldr	r5, [r3, #0]
 800a7f0:	685e      	ldr	r6, [r3, #4]
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	111c      	asrs	r4, r3, #4
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	9310      	str	r3, [sp, #64]	; 0x40
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	05db      	lsls	r3, r3, #23
 800a7fe:	d50b      	bpl.n	800a818 <_dtoa_r+0x308>
 800a800:	4b2b      	ldr	r3, [pc, #172]	; (800a8b0 <_dtoa_r+0x3a0>)
 800a802:	400c      	ands	r4, r1
 800a804:	6a1a      	ldr	r2, [r3, #32]
 800a806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a808:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a80a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a80c:	f7f7 f8ae 	bl	800196c <__aeabi_ddiv>
 800a810:	2303      	movs	r3, #3
 800a812:	9008      	str	r0, [sp, #32]
 800a814:	9109      	str	r1, [sp, #36]	; 0x24
 800a816:	9310      	str	r3, [sp, #64]	; 0x40
 800a818:	4b25      	ldr	r3, [pc, #148]	; (800a8b0 <_dtoa_r+0x3a0>)
 800a81a:	9314      	str	r3, [sp, #80]	; 0x50
 800a81c:	2c00      	cmp	r4, #0
 800a81e:	d108      	bne.n	800a832 <_dtoa_r+0x322>
 800a820:	9808      	ldr	r0, [sp, #32]
 800a822:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a824:	002a      	movs	r2, r5
 800a826:	0033      	movs	r3, r6
 800a828:	f7f7 f8a0 	bl	800196c <__aeabi_ddiv>
 800a82c:	9008      	str	r0, [sp, #32]
 800a82e:	9109      	str	r1, [sp, #36]	; 0x24
 800a830:	e05c      	b.n	800a8ec <_dtoa_r+0x3dc>
 800a832:	2301      	movs	r3, #1
 800a834:	421c      	tst	r4, r3
 800a836:	d00b      	beq.n	800a850 <_dtoa_r+0x340>
 800a838:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a83a:	0028      	movs	r0, r5
 800a83c:	3301      	adds	r3, #1
 800a83e:	9310      	str	r3, [sp, #64]	; 0x40
 800a840:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a842:	0031      	movs	r1, r6
 800a844:	681a      	ldr	r2, [r3, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f7f7 fc92 	bl	8002170 <__aeabi_dmul>
 800a84c:	0005      	movs	r5, r0
 800a84e:	000e      	movs	r6, r1
 800a850:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a852:	1064      	asrs	r4, r4, #1
 800a854:	3308      	adds	r3, #8
 800a856:	e7e0      	b.n	800a81a <_dtoa_r+0x30a>
 800a858:	0800cf60 	.word	0x0800cf60
 800a85c:	0800d11e 	.word	0x0800d11e
 800a860:	7ff00000 	.word	0x7ff00000
 800a864:	0000270f 	.word	0x0000270f
 800a868:	0800d11a 	.word	0x0800d11a
 800a86c:	0800d11d 	.word	0x0800d11d
 800a870:	0800cf3c 	.word	0x0800cf3c
 800a874:	0800cf3d 	.word	0x0800cf3d
 800a878:	3ff00000 	.word	0x3ff00000
 800a87c:	fffffc01 	.word	0xfffffc01
 800a880:	3ff80000 	.word	0x3ff80000
 800a884:	636f4361 	.word	0x636f4361
 800a888:	3fd287a7 	.word	0x3fd287a7
 800a88c:	8b60c8b3 	.word	0x8b60c8b3
 800a890:	3fc68a28 	.word	0x3fc68a28
 800a894:	509f79fb 	.word	0x509f79fb
 800a898:	3fd34413 	.word	0x3fd34413
 800a89c:	0800d210 	.word	0x0800d210
 800a8a0:	00000432 	.word	0x00000432
 800a8a4:	00000412 	.word	0x00000412
 800a8a8:	fe100000 	.word	0xfe100000
 800a8ac:	0800d179 	.word	0x0800d179
 800a8b0:	0800d1e8 	.word	0x0800d1e8
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	9310      	str	r3, [sp, #64]	; 0x40
 800a8b8:	9b02      	ldr	r3, [sp, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d016      	beq.n	800a8ec <_dtoa_r+0x3dc>
 800a8be:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a8c0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a8c2:	425c      	negs	r4, r3
 800a8c4:	230f      	movs	r3, #15
 800a8c6:	4ab6      	ldr	r2, [pc, #728]	; (800aba0 <_dtoa_r+0x690>)
 800a8c8:	4023      	ands	r3, r4
 800a8ca:	00db      	lsls	r3, r3, #3
 800a8cc:	18d3      	adds	r3, r2, r3
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f7f7 fc4d 	bl	8002170 <__aeabi_dmul>
 800a8d6:	2601      	movs	r6, #1
 800a8d8:	2300      	movs	r3, #0
 800a8da:	9008      	str	r0, [sp, #32]
 800a8dc:	9109      	str	r1, [sp, #36]	; 0x24
 800a8de:	4db1      	ldr	r5, [pc, #708]	; (800aba4 <_dtoa_r+0x694>)
 800a8e0:	1124      	asrs	r4, r4, #4
 800a8e2:	2c00      	cmp	r4, #0
 800a8e4:	d000      	beq.n	800a8e8 <_dtoa_r+0x3d8>
 800a8e6:	e094      	b.n	800aa12 <_dtoa_r+0x502>
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d19f      	bne.n	800a82c <_dtoa_r+0x31c>
 800a8ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d100      	bne.n	800a8f4 <_dtoa_r+0x3e4>
 800a8f2:	e09b      	b.n	800aa2c <_dtoa_r+0x51c>
 800a8f4:	9c08      	ldr	r4, [sp, #32]
 800a8f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	0020      	movs	r0, r4
 800a8fc:	0029      	movs	r1, r5
 800a8fe:	4baa      	ldr	r3, [pc, #680]	; (800aba8 <_dtoa_r+0x698>)
 800a900:	f7f5 fdae 	bl	8000460 <__aeabi_dcmplt>
 800a904:	2800      	cmp	r0, #0
 800a906:	d100      	bne.n	800a90a <_dtoa_r+0x3fa>
 800a908:	e090      	b.n	800aa2c <_dtoa_r+0x51c>
 800a90a:	9b07      	ldr	r3, [sp, #28]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d100      	bne.n	800a912 <_dtoa_r+0x402>
 800a910:	e08c      	b.n	800aa2c <_dtoa_r+0x51c>
 800a912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a914:	2b00      	cmp	r3, #0
 800a916:	dd46      	ble.n	800a9a6 <_dtoa_r+0x496>
 800a918:	9b02      	ldr	r3, [sp, #8]
 800a91a:	2200      	movs	r2, #0
 800a91c:	0020      	movs	r0, r4
 800a91e:	0029      	movs	r1, r5
 800a920:	1e5e      	subs	r6, r3, #1
 800a922:	4ba2      	ldr	r3, [pc, #648]	; (800abac <_dtoa_r+0x69c>)
 800a924:	f7f7 fc24 	bl	8002170 <__aeabi_dmul>
 800a928:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a92a:	9008      	str	r0, [sp, #32]
 800a92c:	9109      	str	r1, [sp, #36]	; 0x24
 800a92e:	3301      	adds	r3, #1
 800a930:	9310      	str	r3, [sp, #64]	; 0x40
 800a932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a934:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a936:	9c08      	ldr	r4, [sp, #32]
 800a938:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a93a:	9314      	str	r3, [sp, #80]	; 0x50
 800a93c:	f7f8 fa6a 	bl	8002e14 <__aeabi_i2d>
 800a940:	0022      	movs	r2, r4
 800a942:	002b      	movs	r3, r5
 800a944:	f7f7 fc14 	bl	8002170 <__aeabi_dmul>
 800a948:	2200      	movs	r2, #0
 800a94a:	4b99      	ldr	r3, [pc, #612]	; (800abb0 <_dtoa_r+0x6a0>)
 800a94c:	f7f6 fcd2 	bl	80012f4 <__aeabi_dadd>
 800a950:	9010      	str	r0, [sp, #64]	; 0x40
 800a952:	9111      	str	r1, [sp, #68]	; 0x44
 800a954:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a956:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a958:	9208      	str	r2, [sp, #32]
 800a95a:	9309      	str	r3, [sp, #36]	; 0x24
 800a95c:	4a95      	ldr	r2, [pc, #596]	; (800abb4 <_dtoa_r+0x6a4>)
 800a95e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a960:	4694      	mov	ip, r2
 800a962:	4463      	add	r3, ip
 800a964:	9317      	str	r3, [sp, #92]	; 0x5c
 800a966:	9309      	str	r3, [sp, #36]	; 0x24
 800a968:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d161      	bne.n	800aa32 <_dtoa_r+0x522>
 800a96e:	2200      	movs	r2, #0
 800a970:	0020      	movs	r0, r4
 800a972:	0029      	movs	r1, r5
 800a974:	4b90      	ldr	r3, [pc, #576]	; (800abb8 <_dtoa_r+0x6a8>)
 800a976:	f7f7 fe67 	bl	8002648 <__aeabi_dsub>
 800a97a:	9a08      	ldr	r2, [sp, #32]
 800a97c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a97e:	0004      	movs	r4, r0
 800a980:	000d      	movs	r5, r1
 800a982:	f7f5 fd81 	bl	8000488 <__aeabi_dcmpgt>
 800a986:	2800      	cmp	r0, #0
 800a988:	d000      	beq.n	800a98c <_dtoa_r+0x47c>
 800a98a:	e2af      	b.n	800aeec <_dtoa_r+0x9dc>
 800a98c:	488b      	ldr	r0, [pc, #556]	; (800abbc <_dtoa_r+0x6ac>)
 800a98e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a990:	4684      	mov	ip, r0
 800a992:	4461      	add	r1, ip
 800a994:	000b      	movs	r3, r1
 800a996:	0020      	movs	r0, r4
 800a998:	0029      	movs	r1, r5
 800a99a:	9a08      	ldr	r2, [sp, #32]
 800a99c:	f7f5 fd60 	bl	8000460 <__aeabi_dcmplt>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d000      	beq.n	800a9a6 <_dtoa_r+0x496>
 800a9a4:	e29f      	b.n	800aee6 <_dtoa_r+0x9d6>
 800a9a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9a8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a9aa:	9308      	str	r3, [sp, #32]
 800a9ac:	9409      	str	r4, [sp, #36]	; 0x24
 800a9ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	da00      	bge.n	800a9b6 <_dtoa_r+0x4a6>
 800a9b4:	e172      	b.n	800ac9c <_dtoa_r+0x78c>
 800a9b6:	9a02      	ldr	r2, [sp, #8]
 800a9b8:	2a0e      	cmp	r2, #14
 800a9ba:	dd00      	ble.n	800a9be <_dtoa_r+0x4ae>
 800a9bc:	e16e      	b.n	800ac9c <_dtoa_r+0x78c>
 800a9be:	4b78      	ldr	r3, [pc, #480]	; (800aba0 <_dtoa_r+0x690>)
 800a9c0:	00d2      	lsls	r2, r2, #3
 800a9c2:	189b      	adds	r3, r3, r2
 800a9c4:	685c      	ldr	r4, [r3, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	930a      	str	r3, [sp, #40]	; 0x28
 800a9ca:	940b      	str	r4, [sp, #44]	; 0x2c
 800a9cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	db00      	blt.n	800a9d4 <_dtoa_r+0x4c4>
 800a9d2:	e0f7      	b.n	800abc4 <_dtoa_r+0x6b4>
 800a9d4:	9b07      	ldr	r3, [sp, #28]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	dd00      	ble.n	800a9dc <_dtoa_r+0x4cc>
 800a9da:	e0f3      	b.n	800abc4 <_dtoa_r+0x6b4>
 800a9dc:	d000      	beq.n	800a9e0 <_dtoa_r+0x4d0>
 800a9de:	e282      	b.n	800aee6 <_dtoa_r+0x9d6>
 800a9e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	4b74      	ldr	r3, [pc, #464]	; (800abb8 <_dtoa_r+0x6a8>)
 800a9e8:	f7f7 fbc2 	bl	8002170 <__aeabi_dmul>
 800a9ec:	9a08      	ldr	r2, [sp, #32]
 800a9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f0:	f7f5 fd54 	bl	800049c <__aeabi_dcmpge>
 800a9f4:	9e07      	ldr	r6, [sp, #28]
 800a9f6:	0035      	movs	r5, r6
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d000      	beq.n	800a9fe <_dtoa_r+0x4ee>
 800a9fc:	e259      	b.n	800aeb2 <_dtoa_r+0x9a2>
 800a9fe:	9b06      	ldr	r3, [sp, #24]
 800aa00:	9a06      	ldr	r2, [sp, #24]
 800aa02:	3301      	adds	r3, #1
 800aa04:	9308      	str	r3, [sp, #32]
 800aa06:	2331      	movs	r3, #49	; 0x31
 800aa08:	7013      	strb	r3, [r2, #0]
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	9302      	str	r3, [sp, #8]
 800aa10:	e254      	b.n	800aebc <_dtoa_r+0x9ac>
 800aa12:	4234      	tst	r4, r6
 800aa14:	d007      	beq.n	800aa26 <_dtoa_r+0x516>
 800aa16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa18:	3301      	adds	r3, #1
 800aa1a:	9310      	str	r3, [sp, #64]	; 0x40
 800aa1c:	682a      	ldr	r2, [r5, #0]
 800aa1e:	686b      	ldr	r3, [r5, #4]
 800aa20:	f7f7 fba6 	bl	8002170 <__aeabi_dmul>
 800aa24:	0033      	movs	r3, r6
 800aa26:	1064      	asrs	r4, r4, #1
 800aa28:	3508      	adds	r5, #8
 800aa2a:	e75a      	b.n	800a8e2 <_dtoa_r+0x3d2>
 800aa2c:	9e02      	ldr	r6, [sp, #8]
 800aa2e:	9b07      	ldr	r3, [sp, #28]
 800aa30:	e780      	b.n	800a934 <_dtoa_r+0x424>
 800aa32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa34:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800aa36:	1e5a      	subs	r2, r3, #1
 800aa38:	4b59      	ldr	r3, [pc, #356]	; (800aba0 <_dtoa_r+0x690>)
 800aa3a:	00d2      	lsls	r2, r2, #3
 800aa3c:	189b      	adds	r3, r3, r2
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	2900      	cmp	r1, #0
 800aa44:	d051      	beq.n	800aaea <_dtoa_r+0x5da>
 800aa46:	2000      	movs	r0, #0
 800aa48:	495d      	ldr	r1, [pc, #372]	; (800abc0 <_dtoa_r+0x6b0>)
 800aa4a:	f7f6 ff8f 	bl	800196c <__aeabi_ddiv>
 800aa4e:	9a08      	ldr	r2, [sp, #32]
 800aa50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa52:	f7f7 fdf9 	bl	8002648 <__aeabi_dsub>
 800aa56:	9a06      	ldr	r2, [sp, #24]
 800aa58:	9b06      	ldr	r3, [sp, #24]
 800aa5a:	4694      	mov	ip, r2
 800aa5c:	9317      	str	r3, [sp, #92]	; 0x5c
 800aa5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa60:	9010      	str	r0, [sp, #64]	; 0x40
 800aa62:	9111      	str	r1, [sp, #68]	; 0x44
 800aa64:	4463      	add	r3, ip
 800aa66:	9319      	str	r3, [sp, #100]	; 0x64
 800aa68:	0029      	movs	r1, r5
 800aa6a:	0020      	movs	r0, r4
 800aa6c:	f7f8 f99c 	bl	8002da8 <__aeabi_d2iz>
 800aa70:	9014      	str	r0, [sp, #80]	; 0x50
 800aa72:	f7f8 f9cf 	bl	8002e14 <__aeabi_i2d>
 800aa76:	0002      	movs	r2, r0
 800aa78:	000b      	movs	r3, r1
 800aa7a:	0020      	movs	r0, r4
 800aa7c:	0029      	movs	r1, r5
 800aa7e:	f7f7 fde3 	bl	8002648 <__aeabi_dsub>
 800aa82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aa84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aa86:	3301      	adds	r3, #1
 800aa88:	9308      	str	r3, [sp, #32]
 800aa8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa8c:	0004      	movs	r4, r0
 800aa8e:	3330      	adds	r3, #48	; 0x30
 800aa90:	7013      	strb	r3, [r2, #0]
 800aa92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aa94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa96:	000d      	movs	r5, r1
 800aa98:	f7f5 fce2 	bl	8000460 <__aeabi_dcmplt>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	d175      	bne.n	800ab8c <_dtoa_r+0x67c>
 800aaa0:	0022      	movs	r2, r4
 800aaa2:	002b      	movs	r3, r5
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	4940      	ldr	r1, [pc, #256]	; (800aba8 <_dtoa_r+0x698>)
 800aaa8:	f7f7 fdce 	bl	8002648 <__aeabi_dsub>
 800aaac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aaae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aab0:	f7f5 fcd6 	bl	8000460 <__aeabi_dcmplt>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d000      	beq.n	800aaba <_dtoa_r+0x5aa>
 800aab8:	e0d2      	b.n	800ac60 <_dtoa_r+0x750>
 800aaba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aabc:	9a08      	ldr	r2, [sp, #32]
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d100      	bne.n	800aac4 <_dtoa_r+0x5b4>
 800aac2:	e770      	b.n	800a9a6 <_dtoa_r+0x496>
 800aac4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800aac6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800aac8:	2200      	movs	r2, #0
 800aaca:	4b38      	ldr	r3, [pc, #224]	; (800abac <_dtoa_r+0x69c>)
 800aacc:	f7f7 fb50 	bl	8002170 <__aeabi_dmul>
 800aad0:	4b36      	ldr	r3, [pc, #216]	; (800abac <_dtoa_r+0x69c>)
 800aad2:	9010      	str	r0, [sp, #64]	; 0x40
 800aad4:	9111      	str	r1, [sp, #68]	; 0x44
 800aad6:	2200      	movs	r2, #0
 800aad8:	0020      	movs	r0, r4
 800aada:	0029      	movs	r1, r5
 800aadc:	f7f7 fb48 	bl	8002170 <__aeabi_dmul>
 800aae0:	9b08      	ldr	r3, [sp, #32]
 800aae2:	0004      	movs	r4, r0
 800aae4:	000d      	movs	r5, r1
 800aae6:	9317      	str	r3, [sp, #92]	; 0x5c
 800aae8:	e7be      	b.n	800aa68 <_dtoa_r+0x558>
 800aaea:	9808      	ldr	r0, [sp, #32]
 800aaec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaee:	f7f7 fb3f 	bl	8002170 <__aeabi_dmul>
 800aaf2:	9a06      	ldr	r2, [sp, #24]
 800aaf4:	9b06      	ldr	r3, [sp, #24]
 800aaf6:	4694      	mov	ip, r2
 800aaf8:	9308      	str	r3, [sp, #32]
 800aafa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aafc:	9010      	str	r0, [sp, #64]	; 0x40
 800aafe:	9111      	str	r1, [sp, #68]	; 0x44
 800ab00:	4463      	add	r3, ip
 800ab02:	9319      	str	r3, [sp, #100]	; 0x64
 800ab04:	0029      	movs	r1, r5
 800ab06:	0020      	movs	r0, r4
 800ab08:	f7f8 f94e 	bl	8002da8 <__aeabi_d2iz>
 800ab0c:	9017      	str	r0, [sp, #92]	; 0x5c
 800ab0e:	f7f8 f981 	bl	8002e14 <__aeabi_i2d>
 800ab12:	0002      	movs	r2, r0
 800ab14:	000b      	movs	r3, r1
 800ab16:	0020      	movs	r0, r4
 800ab18:	0029      	movs	r1, r5
 800ab1a:	f7f7 fd95 	bl	8002648 <__aeabi_dsub>
 800ab1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab20:	9a08      	ldr	r2, [sp, #32]
 800ab22:	3330      	adds	r3, #48	; 0x30
 800ab24:	7013      	strb	r3, [r2, #0]
 800ab26:	0013      	movs	r3, r2
 800ab28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	0004      	movs	r4, r0
 800ab2e:	000d      	movs	r5, r1
 800ab30:	9308      	str	r3, [sp, #32]
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d12c      	bne.n	800ab90 <_dtoa_r+0x680>
 800ab36:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab38:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab3a:	9a06      	ldr	r2, [sp, #24]
 800ab3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab3e:	4694      	mov	ip, r2
 800ab40:	4463      	add	r3, ip
 800ab42:	2200      	movs	r2, #0
 800ab44:	9308      	str	r3, [sp, #32]
 800ab46:	4b1e      	ldr	r3, [pc, #120]	; (800abc0 <_dtoa_r+0x6b0>)
 800ab48:	f7f6 fbd4 	bl	80012f4 <__aeabi_dadd>
 800ab4c:	0002      	movs	r2, r0
 800ab4e:	000b      	movs	r3, r1
 800ab50:	0020      	movs	r0, r4
 800ab52:	0029      	movs	r1, r5
 800ab54:	f7f5 fc98 	bl	8000488 <__aeabi_dcmpgt>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d000      	beq.n	800ab5e <_dtoa_r+0x64e>
 800ab5c:	e080      	b.n	800ac60 <_dtoa_r+0x750>
 800ab5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab62:	2000      	movs	r0, #0
 800ab64:	4916      	ldr	r1, [pc, #88]	; (800abc0 <_dtoa_r+0x6b0>)
 800ab66:	f7f7 fd6f 	bl	8002648 <__aeabi_dsub>
 800ab6a:	0002      	movs	r2, r0
 800ab6c:	000b      	movs	r3, r1
 800ab6e:	0020      	movs	r0, r4
 800ab70:	0029      	movs	r1, r5
 800ab72:	f7f5 fc75 	bl	8000460 <__aeabi_dcmplt>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d100      	bne.n	800ab7c <_dtoa_r+0x66c>
 800ab7a:	e714      	b.n	800a9a6 <_dtoa_r+0x496>
 800ab7c:	9b08      	ldr	r3, [sp, #32]
 800ab7e:	001a      	movs	r2, r3
 800ab80:	3a01      	subs	r2, #1
 800ab82:	9208      	str	r2, [sp, #32]
 800ab84:	7812      	ldrb	r2, [r2, #0]
 800ab86:	2a30      	cmp	r2, #48	; 0x30
 800ab88:	d0f8      	beq.n	800ab7c <_dtoa_r+0x66c>
 800ab8a:	9308      	str	r3, [sp, #32]
 800ab8c:	9602      	str	r6, [sp, #8]
 800ab8e:	e055      	b.n	800ac3c <_dtoa_r+0x72c>
 800ab90:	2200      	movs	r2, #0
 800ab92:	4b06      	ldr	r3, [pc, #24]	; (800abac <_dtoa_r+0x69c>)
 800ab94:	f7f7 faec 	bl	8002170 <__aeabi_dmul>
 800ab98:	0004      	movs	r4, r0
 800ab9a:	000d      	movs	r5, r1
 800ab9c:	e7b2      	b.n	800ab04 <_dtoa_r+0x5f4>
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	0800d210 	.word	0x0800d210
 800aba4:	0800d1e8 	.word	0x0800d1e8
 800aba8:	3ff00000 	.word	0x3ff00000
 800abac:	40240000 	.word	0x40240000
 800abb0:	401c0000 	.word	0x401c0000
 800abb4:	fcc00000 	.word	0xfcc00000
 800abb8:	40140000 	.word	0x40140000
 800abbc:	7cc00000 	.word	0x7cc00000
 800abc0:	3fe00000 	.word	0x3fe00000
 800abc4:	9b07      	ldr	r3, [sp, #28]
 800abc6:	9e06      	ldr	r6, [sp, #24]
 800abc8:	3b01      	subs	r3, #1
 800abca:	199b      	adds	r3, r3, r6
 800abcc:	930c      	str	r3, [sp, #48]	; 0x30
 800abce:	9c08      	ldr	r4, [sp, #32]
 800abd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800abd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd6:	0020      	movs	r0, r4
 800abd8:	0029      	movs	r1, r5
 800abda:	f7f6 fec7 	bl	800196c <__aeabi_ddiv>
 800abde:	f7f8 f8e3 	bl	8002da8 <__aeabi_d2iz>
 800abe2:	9007      	str	r0, [sp, #28]
 800abe4:	f7f8 f916 	bl	8002e14 <__aeabi_i2d>
 800abe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abec:	f7f7 fac0 	bl	8002170 <__aeabi_dmul>
 800abf0:	0002      	movs	r2, r0
 800abf2:	000b      	movs	r3, r1
 800abf4:	0020      	movs	r0, r4
 800abf6:	0029      	movs	r1, r5
 800abf8:	f7f7 fd26 	bl	8002648 <__aeabi_dsub>
 800abfc:	0033      	movs	r3, r6
 800abfe:	9a07      	ldr	r2, [sp, #28]
 800ac00:	3601      	adds	r6, #1
 800ac02:	3230      	adds	r2, #48	; 0x30
 800ac04:	701a      	strb	r2, [r3, #0]
 800ac06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac08:	9608      	str	r6, [sp, #32]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d139      	bne.n	800ac82 <_dtoa_r+0x772>
 800ac0e:	0002      	movs	r2, r0
 800ac10:	000b      	movs	r3, r1
 800ac12:	f7f6 fb6f 	bl	80012f4 <__aeabi_dadd>
 800ac16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac1a:	0004      	movs	r4, r0
 800ac1c:	000d      	movs	r5, r1
 800ac1e:	f7f5 fc33 	bl	8000488 <__aeabi_dcmpgt>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d11b      	bne.n	800ac5e <_dtoa_r+0x74e>
 800ac26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac2a:	0020      	movs	r0, r4
 800ac2c:	0029      	movs	r1, r5
 800ac2e:	f7f5 fc11 	bl	8000454 <__aeabi_dcmpeq>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d002      	beq.n	800ac3c <_dtoa_r+0x72c>
 800ac36:	9b07      	ldr	r3, [sp, #28]
 800ac38:	07db      	lsls	r3, r3, #31
 800ac3a:	d410      	bmi.n	800ac5e <_dtoa_r+0x74e>
 800ac3c:	0038      	movs	r0, r7
 800ac3e:	9905      	ldr	r1, [sp, #20]
 800ac40:	f000 faf4 	bl	800b22c <_Bfree>
 800ac44:	2300      	movs	r3, #0
 800ac46:	9a08      	ldr	r2, [sp, #32]
 800ac48:	9802      	ldr	r0, [sp, #8]
 800ac4a:	7013      	strb	r3, [r2, #0]
 800ac4c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ac4e:	3001      	adds	r0, #1
 800ac50:	6018      	str	r0, [r3, #0]
 800ac52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d100      	bne.n	800ac5a <_dtoa_r+0x74a>
 800ac58:	e4a6      	b.n	800a5a8 <_dtoa_r+0x98>
 800ac5a:	601a      	str	r2, [r3, #0]
 800ac5c:	e4a4      	b.n	800a5a8 <_dtoa_r+0x98>
 800ac5e:	9e02      	ldr	r6, [sp, #8]
 800ac60:	9b08      	ldr	r3, [sp, #32]
 800ac62:	9308      	str	r3, [sp, #32]
 800ac64:	3b01      	subs	r3, #1
 800ac66:	781a      	ldrb	r2, [r3, #0]
 800ac68:	2a39      	cmp	r2, #57	; 0x39
 800ac6a:	d106      	bne.n	800ac7a <_dtoa_r+0x76a>
 800ac6c:	9a06      	ldr	r2, [sp, #24]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d1f7      	bne.n	800ac62 <_dtoa_r+0x752>
 800ac72:	2230      	movs	r2, #48	; 0x30
 800ac74:	9906      	ldr	r1, [sp, #24]
 800ac76:	3601      	adds	r6, #1
 800ac78:	700a      	strb	r2, [r1, #0]
 800ac7a:	781a      	ldrb	r2, [r3, #0]
 800ac7c:	3201      	adds	r2, #1
 800ac7e:	701a      	strb	r2, [r3, #0]
 800ac80:	e784      	b.n	800ab8c <_dtoa_r+0x67c>
 800ac82:	2200      	movs	r2, #0
 800ac84:	4baa      	ldr	r3, [pc, #680]	; (800af30 <_dtoa_r+0xa20>)
 800ac86:	f7f7 fa73 	bl	8002170 <__aeabi_dmul>
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	0004      	movs	r4, r0
 800ac90:	000d      	movs	r5, r1
 800ac92:	f7f5 fbdf 	bl	8000454 <__aeabi_dcmpeq>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d09b      	beq.n	800abd2 <_dtoa_r+0x6c2>
 800ac9a:	e7cf      	b.n	800ac3c <_dtoa_r+0x72c>
 800ac9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac9e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aca0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aca2:	2d00      	cmp	r5, #0
 800aca4:	d012      	beq.n	800accc <_dtoa_r+0x7bc>
 800aca6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aca8:	2a01      	cmp	r2, #1
 800acaa:	dc66      	bgt.n	800ad7a <_dtoa_r+0x86a>
 800acac:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800acae:	2a00      	cmp	r2, #0
 800acb0:	d05d      	beq.n	800ad6e <_dtoa_r+0x85e>
 800acb2:	4aa0      	ldr	r2, [pc, #640]	; (800af34 <_dtoa_r+0xa24>)
 800acb4:	189b      	adds	r3, r3, r2
 800acb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acb8:	2101      	movs	r1, #1
 800acba:	18d2      	adds	r2, r2, r3
 800acbc:	920a      	str	r2, [sp, #40]	; 0x28
 800acbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acc0:	0038      	movs	r0, r7
 800acc2:	18d3      	adds	r3, r2, r3
 800acc4:	930d      	str	r3, [sp, #52]	; 0x34
 800acc6:	f000 fb61 	bl	800b38c <__i2b>
 800acca:	0005      	movs	r5, r0
 800accc:	2c00      	cmp	r4, #0
 800acce:	dd0e      	ble.n	800acee <_dtoa_r+0x7de>
 800acd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	dd0b      	ble.n	800acee <_dtoa_r+0x7de>
 800acd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acd8:	0023      	movs	r3, r4
 800acda:	4294      	cmp	r4, r2
 800acdc:	dd00      	ble.n	800ace0 <_dtoa_r+0x7d0>
 800acde:	0013      	movs	r3, r2
 800ace0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ace2:	1ae4      	subs	r4, r4, r3
 800ace4:	1ad2      	subs	r2, r2, r3
 800ace6:	920a      	str	r2, [sp, #40]	; 0x28
 800ace8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	930d      	str	r3, [sp, #52]	; 0x34
 800acee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d01f      	beq.n	800ad34 <_dtoa_r+0x824>
 800acf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d054      	beq.n	800ada4 <_dtoa_r+0x894>
 800acfa:	2e00      	cmp	r6, #0
 800acfc:	dd11      	ble.n	800ad22 <_dtoa_r+0x812>
 800acfe:	0029      	movs	r1, r5
 800ad00:	0032      	movs	r2, r6
 800ad02:	0038      	movs	r0, r7
 800ad04:	f000 fc08 	bl	800b518 <__pow5mult>
 800ad08:	9a05      	ldr	r2, [sp, #20]
 800ad0a:	0001      	movs	r1, r0
 800ad0c:	0005      	movs	r5, r0
 800ad0e:	0038      	movs	r0, r7
 800ad10:	f000 fb52 	bl	800b3b8 <__multiply>
 800ad14:	9905      	ldr	r1, [sp, #20]
 800ad16:	9014      	str	r0, [sp, #80]	; 0x50
 800ad18:	0038      	movs	r0, r7
 800ad1a:	f000 fa87 	bl	800b22c <_Bfree>
 800ad1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad20:	9305      	str	r3, [sp, #20]
 800ad22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad24:	1b9a      	subs	r2, r3, r6
 800ad26:	42b3      	cmp	r3, r6
 800ad28:	d004      	beq.n	800ad34 <_dtoa_r+0x824>
 800ad2a:	0038      	movs	r0, r7
 800ad2c:	9905      	ldr	r1, [sp, #20]
 800ad2e:	f000 fbf3 	bl	800b518 <__pow5mult>
 800ad32:	9005      	str	r0, [sp, #20]
 800ad34:	2101      	movs	r1, #1
 800ad36:	0038      	movs	r0, r7
 800ad38:	f000 fb28 	bl	800b38c <__i2b>
 800ad3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ad3e:	0006      	movs	r6, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	dd31      	ble.n	800ada8 <_dtoa_r+0x898>
 800ad44:	001a      	movs	r2, r3
 800ad46:	0001      	movs	r1, r0
 800ad48:	0038      	movs	r0, r7
 800ad4a:	f000 fbe5 	bl	800b518 <__pow5mult>
 800ad4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad50:	0006      	movs	r6, r0
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	dd2d      	ble.n	800adb2 <_dtoa_r+0x8a2>
 800ad56:	2300      	movs	r3, #0
 800ad58:	930e      	str	r3, [sp, #56]	; 0x38
 800ad5a:	6933      	ldr	r3, [r6, #16]
 800ad5c:	3303      	adds	r3, #3
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	18f3      	adds	r3, r6, r3
 800ad62:	6858      	ldr	r0, [r3, #4]
 800ad64:	f000 faca 	bl	800b2fc <__hi0bits>
 800ad68:	2320      	movs	r3, #32
 800ad6a:	1a18      	subs	r0, r3, r0
 800ad6c:	e039      	b.n	800ade2 <_dtoa_r+0x8d2>
 800ad6e:	2336      	movs	r3, #54	; 0x36
 800ad70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad72:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ad74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad76:	1a9b      	subs	r3, r3, r2
 800ad78:	e79d      	b.n	800acb6 <_dtoa_r+0x7a6>
 800ad7a:	9b07      	ldr	r3, [sp, #28]
 800ad7c:	1e5e      	subs	r6, r3, #1
 800ad7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad80:	42b3      	cmp	r3, r6
 800ad82:	db07      	blt.n	800ad94 <_dtoa_r+0x884>
 800ad84:	1b9e      	subs	r6, r3, r6
 800ad86:	9b07      	ldr	r3, [sp, #28]
 800ad88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	da93      	bge.n	800acb6 <_dtoa_r+0x7a6>
 800ad8e:	1ae4      	subs	r4, r4, r3
 800ad90:	2300      	movs	r3, #0
 800ad92:	e790      	b.n	800acb6 <_dtoa_r+0x7a6>
 800ad94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad98:	1af3      	subs	r3, r6, r3
 800ad9a:	18d3      	adds	r3, r2, r3
 800ad9c:	960e      	str	r6, [sp, #56]	; 0x38
 800ad9e:	9315      	str	r3, [sp, #84]	; 0x54
 800ada0:	2600      	movs	r6, #0
 800ada2:	e7f0      	b.n	800ad86 <_dtoa_r+0x876>
 800ada4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ada6:	e7c0      	b.n	800ad2a <_dtoa_r+0x81a>
 800ada8:	2300      	movs	r3, #0
 800adaa:	930e      	str	r3, [sp, #56]	; 0x38
 800adac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adae:	2b01      	cmp	r3, #1
 800adb0:	dc13      	bgt.n	800adda <_dtoa_r+0x8ca>
 800adb2:	2300      	movs	r3, #0
 800adb4:	930e      	str	r3, [sp, #56]	; 0x38
 800adb6:	9b08      	ldr	r3, [sp, #32]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10e      	bne.n	800adda <_dtoa_r+0x8ca>
 800adbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adbe:	031b      	lsls	r3, r3, #12
 800adc0:	d10b      	bne.n	800adda <_dtoa_r+0x8ca>
 800adc2:	4b5d      	ldr	r3, [pc, #372]	; (800af38 <_dtoa_r+0xa28>)
 800adc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc6:	4213      	tst	r3, r2
 800adc8:	d007      	beq.n	800adda <_dtoa_r+0x8ca>
 800adca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adcc:	3301      	adds	r3, #1
 800adce:	930a      	str	r3, [sp, #40]	; 0x28
 800add0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add2:	3301      	adds	r3, #1
 800add4:	930d      	str	r3, [sp, #52]	; 0x34
 800add6:	2301      	movs	r3, #1
 800add8:	930e      	str	r3, [sp, #56]	; 0x38
 800adda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800addc:	2001      	movs	r0, #1
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1bb      	bne.n	800ad5a <_dtoa_r+0x84a>
 800ade2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ade4:	221f      	movs	r2, #31
 800ade6:	1818      	adds	r0, r3, r0
 800ade8:	0003      	movs	r3, r0
 800adea:	4013      	ands	r3, r2
 800adec:	4210      	tst	r0, r2
 800adee:	d046      	beq.n	800ae7e <_dtoa_r+0x96e>
 800adf0:	3201      	adds	r2, #1
 800adf2:	1ad2      	subs	r2, r2, r3
 800adf4:	2a04      	cmp	r2, #4
 800adf6:	dd3f      	ble.n	800ae78 <_dtoa_r+0x968>
 800adf8:	221c      	movs	r2, #28
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adfe:	18e4      	adds	r4, r4, r3
 800ae00:	18d2      	adds	r2, r2, r3
 800ae02:	920a      	str	r2, [sp, #40]	; 0x28
 800ae04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae06:	18d3      	adds	r3, r2, r3
 800ae08:	930d      	str	r3, [sp, #52]	; 0x34
 800ae0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dd05      	ble.n	800ae1c <_dtoa_r+0x90c>
 800ae10:	001a      	movs	r2, r3
 800ae12:	0038      	movs	r0, r7
 800ae14:	9905      	ldr	r1, [sp, #20]
 800ae16:	f000 fbdb 	bl	800b5d0 <__lshift>
 800ae1a:	9005      	str	r0, [sp, #20]
 800ae1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	dd05      	ble.n	800ae2e <_dtoa_r+0x91e>
 800ae22:	0031      	movs	r1, r6
 800ae24:	001a      	movs	r2, r3
 800ae26:	0038      	movs	r0, r7
 800ae28:	f000 fbd2 	bl	800b5d0 <__lshift>
 800ae2c:	0006      	movs	r6, r0
 800ae2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d026      	beq.n	800ae82 <_dtoa_r+0x972>
 800ae34:	0031      	movs	r1, r6
 800ae36:	9805      	ldr	r0, [sp, #20]
 800ae38:	f000 fc38 	bl	800b6ac <__mcmp>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	da20      	bge.n	800ae82 <_dtoa_r+0x972>
 800ae40:	9b02      	ldr	r3, [sp, #8]
 800ae42:	220a      	movs	r2, #10
 800ae44:	3b01      	subs	r3, #1
 800ae46:	9302      	str	r3, [sp, #8]
 800ae48:	0038      	movs	r0, r7
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	9905      	ldr	r1, [sp, #20]
 800ae4e:	f000 fa11 	bl	800b274 <__multadd>
 800ae52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae54:	9005      	str	r0, [sp, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d100      	bne.n	800ae5c <_dtoa_r+0x94c>
 800ae5a:	e166      	b.n	800b12a <_dtoa_r+0xc1a>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	0029      	movs	r1, r5
 800ae60:	220a      	movs	r2, #10
 800ae62:	0038      	movs	r0, r7
 800ae64:	f000 fa06 	bl	800b274 <__multadd>
 800ae68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae6a:	0005      	movs	r5, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	dc47      	bgt.n	800af00 <_dtoa_r+0x9f0>
 800ae70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	dc0d      	bgt.n	800ae92 <_dtoa_r+0x982>
 800ae76:	e043      	b.n	800af00 <_dtoa_r+0x9f0>
 800ae78:	2a04      	cmp	r2, #4
 800ae7a:	d0c6      	beq.n	800ae0a <_dtoa_r+0x8fa>
 800ae7c:	0013      	movs	r3, r2
 800ae7e:	331c      	adds	r3, #28
 800ae80:	e7bc      	b.n	800adfc <_dtoa_r+0x8ec>
 800ae82:	9b07      	ldr	r3, [sp, #28]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dc35      	bgt.n	800aef4 <_dtoa_r+0x9e4>
 800ae88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	dd32      	ble.n	800aef4 <_dtoa_r+0x9e4>
 800ae8e:	9b07      	ldr	r3, [sp, #28]
 800ae90:	930c      	str	r3, [sp, #48]	; 0x30
 800ae92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10c      	bne.n	800aeb2 <_dtoa_r+0x9a2>
 800ae98:	0031      	movs	r1, r6
 800ae9a:	2205      	movs	r2, #5
 800ae9c:	0038      	movs	r0, r7
 800ae9e:	f000 f9e9 	bl	800b274 <__multadd>
 800aea2:	0006      	movs	r6, r0
 800aea4:	0001      	movs	r1, r0
 800aea6:	9805      	ldr	r0, [sp, #20]
 800aea8:	f000 fc00 	bl	800b6ac <__mcmp>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	dd00      	ble.n	800aeb2 <_dtoa_r+0x9a2>
 800aeb0:	e5a5      	b.n	800a9fe <_dtoa_r+0x4ee>
 800aeb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aeb4:	43db      	mvns	r3, r3
 800aeb6:	9302      	str	r3, [sp, #8]
 800aeb8:	9b06      	ldr	r3, [sp, #24]
 800aeba:	9308      	str	r3, [sp, #32]
 800aebc:	2400      	movs	r4, #0
 800aebe:	0031      	movs	r1, r6
 800aec0:	0038      	movs	r0, r7
 800aec2:	f000 f9b3 	bl	800b22c <_Bfree>
 800aec6:	2d00      	cmp	r5, #0
 800aec8:	d100      	bne.n	800aecc <_dtoa_r+0x9bc>
 800aeca:	e6b7      	b.n	800ac3c <_dtoa_r+0x72c>
 800aecc:	2c00      	cmp	r4, #0
 800aece:	d005      	beq.n	800aedc <_dtoa_r+0x9cc>
 800aed0:	42ac      	cmp	r4, r5
 800aed2:	d003      	beq.n	800aedc <_dtoa_r+0x9cc>
 800aed4:	0021      	movs	r1, r4
 800aed6:	0038      	movs	r0, r7
 800aed8:	f000 f9a8 	bl	800b22c <_Bfree>
 800aedc:	0029      	movs	r1, r5
 800aede:	0038      	movs	r0, r7
 800aee0:	f000 f9a4 	bl	800b22c <_Bfree>
 800aee4:	e6aa      	b.n	800ac3c <_dtoa_r+0x72c>
 800aee6:	2600      	movs	r6, #0
 800aee8:	0035      	movs	r5, r6
 800aeea:	e7e2      	b.n	800aeb2 <_dtoa_r+0x9a2>
 800aeec:	9602      	str	r6, [sp, #8]
 800aeee:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800aef0:	0035      	movs	r5, r6
 800aef2:	e584      	b.n	800a9fe <_dtoa_r+0x4ee>
 800aef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d100      	bne.n	800aefc <_dtoa_r+0x9ec>
 800aefa:	e0ce      	b.n	800b09a <_dtoa_r+0xb8a>
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	930c      	str	r3, [sp, #48]	; 0x30
 800af00:	2c00      	cmp	r4, #0
 800af02:	dd05      	ble.n	800af10 <_dtoa_r+0xa00>
 800af04:	0029      	movs	r1, r5
 800af06:	0022      	movs	r2, r4
 800af08:	0038      	movs	r0, r7
 800af0a:	f000 fb61 	bl	800b5d0 <__lshift>
 800af0e:	0005      	movs	r5, r0
 800af10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af12:	0028      	movs	r0, r5
 800af14:	2b00      	cmp	r3, #0
 800af16:	d022      	beq.n	800af5e <_dtoa_r+0xa4e>
 800af18:	0038      	movs	r0, r7
 800af1a:	6869      	ldr	r1, [r5, #4]
 800af1c:	f000 f942 	bl	800b1a4 <_Balloc>
 800af20:	1e04      	subs	r4, r0, #0
 800af22:	d10f      	bne.n	800af44 <_dtoa_r+0xa34>
 800af24:	0002      	movs	r2, r0
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <_dtoa_r+0xa2c>)
 800af28:	4905      	ldr	r1, [pc, #20]	; (800af40 <_dtoa_r+0xa30>)
 800af2a:	f7ff fb06 	bl	800a53a <_dtoa_r+0x2a>
 800af2e:	46c0      	nop			; (mov r8, r8)
 800af30:	40240000 	.word	0x40240000
 800af34:	00000433 	.word	0x00000433
 800af38:	7ff00000 	.word	0x7ff00000
 800af3c:	0800d179 	.word	0x0800d179
 800af40:	000002ea 	.word	0x000002ea
 800af44:	0029      	movs	r1, r5
 800af46:	692b      	ldr	r3, [r5, #16]
 800af48:	310c      	adds	r1, #12
 800af4a:	1c9a      	adds	r2, r3, #2
 800af4c:	0092      	lsls	r2, r2, #2
 800af4e:	300c      	adds	r0, #12
 800af50:	f7fe fb8e 	bl	8009670 <memcpy>
 800af54:	2201      	movs	r2, #1
 800af56:	0021      	movs	r1, r4
 800af58:	0038      	movs	r0, r7
 800af5a:	f000 fb39 	bl	800b5d0 <__lshift>
 800af5e:	9b06      	ldr	r3, [sp, #24]
 800af60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af62:	930a      	str	r3, [sp, #40]	; 0x28
 800af64:	3b01      	subs	r3, #1
 800af66:	189b      	adds	r3, r3, r2
 800af68:	2201      	movs	r2, #1
 800af6a:	002c      	movs	r4, r5
 800af6c:	0005      	movs	r5, r0
 800af6e:	9314      	str	r3, [sp, #80]	; 0x50
 800af70:	9b08      	ldr	r3, [sp, #32]
 800af72:	4013      	ands	r3, r2
 800af74:	930f      	str	r3, [sp, #60]	; 0x3c
 800af76:	0031      	movs	r1, r6
 800af78:	9805      	ldr	r0, [sp, #20]
 800af7a:	f7ff fa3d 	bl	800a3f8 <quorem>
 800af7e:	0003      	movs	r3, r0
 800af80:	0021      	movs	r1, r4
 800af82:	3330      	adds	r3, #48	; 0x30
 800af84:	900d      	str	r0, [sp, #52]	; 0x34
 800af86:	9805      	ldr	r0, [sp, #20]
 800af88:	9307      	str	r3, [sp, #28]
 800af8a:	f000 fb8f 	bl	800b6ac <__mcmp>
 800af8e:	002a      	movs	r2, r5
 800af90:	900e      	str	r0, [sp, #56]	; 0x38
 800af92:	0031      	movs	r1, r6
 800af94:	0038      	movs	r0, r7
 800af96:	f000 fba5 	bl	800b6e4 <__mdiff>
 800af9a:	68c3      	ldr	r3, [r0, #12]
 800af9c:	9008      	str	r0, [sp, #32]
 800af9e:	9310      	str	r3, [sp, #64]	; 0x40
 800afa0:	2301      	movs	r3, #1
 800afa2:	930c      	str	r3, [sp, #48]	; 0x30
 800afa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d104      	bne.n	800afb4 <_dtoa_r+0xaa4>
 800afaa:	0001      	movs	r1, r0
 800afac:	9805      	ldr	r0, [sp, #20]
 800afae:	f000 fb7d 	bl	800b6ac <__mcmp>
 800afb2:	900c      	str	r0, [sp, #48]	; 0x30
 800afb4:	0038      	movs	r0, r7
 800afb6:	9908      	ldr	r1, [sp, #32]
 800afb8:	f000 f938 	bl	800b22c <_Bfree>
 800afbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afc0:	3301      	adds	r3, #1
 800afc2:	9308      	str	r3, [sp, #32]
 800afc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afc6:	4313      	orrs	r3, r2
 800afc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800afca:	4313      	orrs	r3, r2
 800afcc:	d10c      	bne.n	800afe8 <_dtoa_r+0xad8>
 800afce:	9b07      	ldr	r3, [sp, #28]
 800afd0:	2b39      	cmp	r3, #57	; 0x39
 800afd2:	d026      	beq.n	800b022 <_dtoa_r+0xb12>
 800afd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dd02      	ble.n	800afe0 <_dtoa_r+0xad0>
 800afda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afdc:	3331      	adds	r3, #49	; 0x31
 800afde:	9307      	str	r3, [sp, #28]
 800afe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afe2:	9a07      	ldr	r2, [sp, #28]
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	e76a      	b.n	800aebe <_dtoa_r+0x9ae>
 800afe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afea:	2b00      	cmp	r3, #0
 800afec:	db04      	blt.n	800aff8 <_dtoa_r+0xae8>
 800afee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aff0:	4313      	orrs	r3, r2
 800aff2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aff4:	4313      	orrs	r3, r2
 800aff6:	d11f      	bne.n	800b038 <_dtoa_r+0xb28>
 800aff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800affa:	2b00      	cmp	r3, #0
 800affc:	ddf0      	ble.n	800afe0 <_dtoa_r+0xad0>
 800affe:	9905      	ldr	r1, [sp, #20]
 800b000:	2201      	movs	r2, #1
 800b002:	0038      	movs	r0, r7
 800b004:	f000 fae4 	bl	800b5d0 <__lshift>
 800b008:	0031      	movs	r1, r6
 800b00a:	9005      	str	r0, [sp, #20]
 800b00c:	f000 fb4e 	bl	800b6ac <__mcmp>
 800b010:	2800      	cmp	r0, #0
 800b012:	dc03      	bgt.n	800b01c <_dtoa_r+0xb0c>
 800b014:	d1e4      	bne.n	800afe0 <_dtoa_r+0xad0>
 800b016:	9b07      	ldr	r3, [sp, #28]
 800b018:	07db      	lsls	r3, r3, #31
 800b01a:	d5e1      	bpl.n	800afe0 <_dtoa_r+0xad0>
 800b01c:	9b07      	ldr	r3, [sp, #28]
 800b01e:	2b39      	cmp	r3, #57	; 0x39
 800b020:	d1db      	bne.n	800afda <_dtoa_r+0xaca>
 800b022:	2339      	movs	r3, #57	; 0x39
 800b024:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b026:	7013      	strb	r3, [r2, #0]
 800b028:	9b08      	ldr	r3, [sp, #32]
 800b02a:	9308      	str	r3, [sp, #32]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	2a39      	cmp	r2, #57	; 0x39
 800b032:	d068      	beq.n	800b106 <_dtoa_r+0xbf6>
 800b034:	3201      	adds	r2, #1
 800b036:	e7d5      	b.n	800afe4 <_dtoa_r+0xad4>
 800b038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dd07      	ble.n	800b04e <_dtoa_r+0xb3e>
 800b03e:	9b07      	ldr	r3, [sp, #28]
 800b040:	2b39      	cmp	r3, #57	; 0x39
 800b042:	d0ee      	beq.n	800b022 <_dtoa_r+0xb12>
 800b044:	9b07      	ldr	r3, [sp, #28]
 800b046:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b048:	3301      	adds	r3, #1
 800b04a:	7013      	strb	r3, [r2, #0]
 800b04c:	e737      	b.n	800aebe <_dtoa_r+0x9ae>
 800b04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b050:	9a07      	ldr	r2, [sp, #28]
 800b052:	701a      	strb	r2, [r3, #0]
 800b054:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b056:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b058:	4293      	cmp	r3, r2
 800b05a:	d03e      	beq.n	800b0da <_dtoa_r+0xbca>
 800b05c:	2300      	movs	r3, #0
 800b05e:	220a      	movs	r2, #10
 800b060:	9905      	ldr	r1, [sp, #20]
 800b062:	0038      	movs	r0, r7
 800b064:	f000 f906 	bl	800b274 <__multadd>
 800b068:	2300      	movs	r3, #0
 800b06a:	9005      	str	r0, [sp, #20]
 800b06c:	220a      	movs	r2, #10
 800b06e:	0021      	movs	r1, r4
 800b070:	0038      	movs	r0, r7
 800b072:	42ac      	cmp	r4, r5
 800b074:	d106      	bne.n	800b084 <_dtoa_r+0xb74>
 800b076:	f000 f8fd 	bl	800b274 <__multadd>
 800b07a:	0004      	movs	r4, r0
 800b07c:	0005      	movs	r5, r0
 800b07e:	9b08      	ldr	r3, [sp, #32]
 800b080:	930a      	str	r3, [sp, #40]	; 0x28
 800b082:	e778      	b.n	800af76 <_dtoa_r+0xa66>
 800b084:	f000 f8f6 	bl	800b274 <__multadd>
 800b088:	0029      	movs	r1, r5
 800b08a:	0004      	movs	r4, r0
 800b08c:	2300      	movs	r3, #0
 800b08e:	220a      	movs	r2, #10
 800b090:	0038      	movs	r0, r7
 800b092:	f000 f8ef 	bl	800b274 <__multadd>
 800b096:	0005      	movs	r5, r0
 800b098:	e7f1      	b.n	800b07e <_dtoa_r+0xb6e>
 800b09a:	9b07      	ldr	r3, [sp, #28]
 800b09c:	930c      	str	r3, [sp, #48]	; 0x30
 800b09e:	2400      	movs	r4, #0
 800b0a0:	0031      	movs	r1, r6
 800b0a2:	9805      	ldr	r0, [sp, #20]
 800b0a4:	f7ff f9a8 	bl	800a3f8 <quorem>
 800b0a8:	9b06      	ldr	r3, [sp, #24]
 800b0aa:	3030      	adds	r0, #48	; 0x30
 800b0ac:	5518      	strb	r0, [r3, r4]
 800b0ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0b0:	3401      	adds	r4, #1
 800b0b2:	9007      	str	r0, [sp, #28]
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	dd07      	ble.n	800b0c8 <_dtoa_r+0xbb8>
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	220a      	movs	r2, #10
 800b0bc:	0038      	movs	r0, r7
 800b0be:	9905      	ldr	r1, [sp, #20]
 800b0c0:	f000 f8d8 	bl	800b274 <__multadd>
 800b0c4:	9005      	str	r0, [sp, #20]
 800b0c6:	e7eb      	b.n	800b0a0 <_dtoa_r+0xb90>
 800b0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ca:	2001      	movs	r0, #1
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	dd00      	ble.n	800b0d2 <_dtoa_r+0xbc2>
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	2400      	movs	r4, #0
 800b0d4:	9b06      	ldr	r3, [sp, #24]
 800b0d6:	181b      	adds	r3, r3, r0
 800b0d8:	9308      	str	r3, [sp, #32]
 800b0da:	9905      	ldr	r1, [sp, #20]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	0038      	movs	r0, r7
 800b0e0:	f000 fa76 	bl	800b5d0 <__lshift>
 800b0e4:	0031      	movs	r1, r6
 800b0e6:	9005      	str	r0, [sp, #20]
 800b0e8:	f000 fae0 	bl	800b6ac <__mcmp>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	dc9b      	bgt.n	800b028 <_dtoa_r+0xb18>
 800b0f0:	d102      	bne.n	800b0f8 <_dtoa_r+0xbe8>
 800b0f2:	9b07      	ldr	r3, [sp, #28]
 800b0f4:	07db      	lsls	r3, r3, #31
 800b0f6:	d497      	bmi.n	800b028 <_dtoa_r+0xb18>
 800b0f8:	9b08      	ldr	r3, [sp, #32]
 800b0fa:	9308      	str	r3, [sp, #32]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	781a      	ldrb	r2, [r3, #0]
 800b100:	2a30      	cmp	r2, #48	; 0x30
 800b102:	d0fa      	beq.n	800b0fa <_dtoa_r+0xbea>
 800b104:	e6db      	b.n	800aebe <_dtoa_r+0x9ae>
 800b106:	9a06      	ldr	r2, [sp, #24]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d18e      	bne.n	800b02a <_dtoa_r+0xb1a>
 800b10c:	9b02      	ldr	r3, [sp, #8]
 800b10e:	3301      	adds	r3, #1
 800b110:	9302      	str	r3, [sp, #8]
 800b112:	2331      	movs	r3, #49	; 0x31
 800b114:	e799      	b.n	800b04a <_dtoa_r+0xb3a>
 800b116:	4b09      	ldr	r3, [pc, #36]	; (800b13c <_dtoa_r+0xc2c>)
 800b118:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b11a:	9306      	str	r3, [sp, #24]
 800b11c:	4b08      	ldr	r3, [pc, #32]	; (800b140 <_dtoa_r+0xc30>)
 800b11e:	2a00      	cmp	r2, #0
 800b120:	d001      	beq.n	800b126 <_dtoa_r+0xc16>
 800b122:	f7ff fa3f 	bl	800a5a4 <_dtoa_r+0x94>
 800b126:	f7ff fa3f 	bl	800a5a8 <_dtoa_r+0x98>
 800b12a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	dcb6      	bgt.n	800b09e <_dtoa_r+0xb8e>
 800b130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b132:	2b02      	cmp	r3, #2
 800b134:	dd00      	ble.n	800b138 <_dtoa_r+0xc28>
 800b136:	e6ac      	b.n	800ae92 <_dtoa_r+0x982>
 800b138:	e7b1      	b.n	800b09e <_dtoa_r+0xb8e>
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	0800d111 	.word	0x0800d111
 800b140:	0800d119 	.word	0x0800d119

0800b144 <fiprintf>:
 800b144:	b40e      	push	{r1, r2, r3}
 800b146:	b503      	push	{r0, r1, lr}
 800b148:	0001      	movs	r1, r0
 800b14a:	ab03      	add	r3, sp, #12
 800b14c:	4804      	ldr	r0, [pc, #16]	; (800b160 <fiprintf+0x1c>)
 800b14e:	cb04      	ldmia	r3!, {r2}
 800b150:	6800      	ldr	r0, [r0, #0]
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	f000 fd78 	bl	800bc48 <_vfiprintf_r>
 800b158:	b002      	add	sp, #8
 800b15a:	bc08      	pop	{r3}
 800b15c:	b003      	add	sp, #12
 800b15e:	4718      	bx	r3
 800b160:	200000a0 	.word	0x200000a0

0800b164 <_localeconv_r>:
 800b164:	4800      	ldr	r0, [pc, #0]	; (800b168 <_localeconv_r+0x4>)
 800b166:	4770      	bx	lr
 800b168:	200001f4 	.word	0x200001f4

0800b16c <memchr>:
 800b16c:	b2c9      	uxtb	r1, r1
 800b16e:	1882      	adds	r2, r0, r2
 800b170:	4290      	cmp	r0, r2
 800b172:	d101      	bne.n	800b178 <memchr+0xc>
 800b174:	2000      	movs	r0, #0
 800b176:	4770      	bx	lr
 800b178:	7803      	ldrb	r3, [r0, #0]
 800b17a:	428b      	cmp	r3, r1
 800b17c:	d0fb      	beq.n	800b176 <memchr+0xa>
 800b17e:	3001      	adds	r0, #1
 800b180:	e7f6      	b.n	800b170 <memchr+0x4>
	...

0800b184 <__malloc_lock>:
 800b184:	b510      	push	{r4, lr}
 800b186:	4802      	ldr	r0, [pc, #8]	; (800b190 <__malloc_lock+0xc>)
 800b188:	f001 f93d 	bl	800c406 <__retarget_lock_acquire_recursive>
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	46c0      	nop			; (mov r8, r8)
 800b190:	200005dc 	.word	0x200005dc

0800b194 <__malloc_unlock>:
 800b194:	b510      	push	{r4, lr}
 800b196:	4802      	ldr	r0, [pc, #8]	; (800b1a0 <__malloc_unlock+0xc>)
 800b198:	f001 f936 	bl	800c408 <__retarget_lock_release_recursive>
 800b19c:	bd10      	pop	{r4, pc}
 800b19e:	46c0      	nop			; (mov r8, r8)
 800b1a0:	200005dc 	.word	0x200005dc

0800b1a4 <_Balloc>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b1a8:	0006      	movs	r6, r0
 800b1aa:	000c      	movs	r4, r1
 800b1ac:	2d00      	cmp	r5, #0
 800b1ae:	d10e      	bne.n	800b1ce <_Balloc+0x2a>
 800b1b0:	2010      	movs	r0, #16
 800b1b2:	f7fe fa53 	bl	800965c <malloc>
 800b1b6:	1e02      	subs	r2, r0, #0
 800b1b8:	6270      	str	r0, [r6, #36]	; 0x24
 800b1ba:	d104      	bne.n	800b1c6 <_Balloc+0x22>
 800b1bc:	2166      	movs	r1, #102	; 0x66
 800b1be:	4b19      	ldr	r3, [pc, #100]	; (800b224 <_Balloc+0x80>)
 800b1c0:	4819      	ldr	r0, [pc, #100]	; (800b228 <_Balloc+0x84>)
 800b1c2:	f7ff f8fb 	bl	800a3bc <__assert_func>
 800b1c6:	6045      	str	r5, [r0, #4]
 800b1c8:	6085      	str	r5, [r0, #8]
 800b1ca:	6005      	str	r5, [r0, #0]
 800b1cc:	60c5      	str	r5, [r0, #12]
 800b1ce:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800b1d0:	68eb      	ldr	r3, [r5, #12]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d013      	beq.n	800b1fe <_Balloc+0x5a>
 800b1d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b1d8:	00a2      	lsls	r2, r4, #2
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	189b      	adds	r3, r3, r2
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	2800      	cmp	r0, #0
 800b1e2:	d118      	bne.n	800b216 <_Balloc+0x72>
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	000d      	movs	r5, r1
 800b1e8:	40a5      	lsls	r5, r4
 800b1ea:	1d6a      	adds	r2, r5, #5
 800b1ec:	0030      	movs	r0, r6
 800b1ee:	0092      	lsls	r2, r2, #2
 800b1f0:	f000 fb74 	bl	800b8dc <_calloc_r>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d00c      	beq.n	800b212 <_Balloc+0x6e>
 800b1f8:	6044      	str	r4, [r0, #4]
 800b1fa:	6085      	str	r5, [r0, #8]
 800b1fc:	e00d      	b.n	800b21a <_Balloc+0x76>
 800b1fe:	2221      	movs	r2, #33	; 0x21
 800b200:	2104      	movs	r1, #4
 800b202:	0030      	movs	r0, r6
 800b204:	f000 fb6a 	bl	800b8dc <_calloc_r>
 800b208:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b20a:	60e8      	str	r0, [r5, #12]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1e1      	bne.n	800b1d6 <_Balloc+0x32>
 800b212:	2000      	movs	r0, #0
 800b214:	bd70      	pop	{r4, r5, r6, pc}
 800b216:	6802      	ldr	r2, [r0, #0]
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	2300      	movs	r3, #0
 800b21c:	6103      	str	r3, [r0, #16]
 800b21e:	60c3      	str	r3, [r0, #12]
 800b220:	e7f8      	b.n	800b214 <_Balloc+0x70>
 800b222:	46c0      	nop			; (mov r8, r8)
 800b224:	0800cf60 	.word	0x0800cf60
 800b228:	0800d18a 	.word	0x0800d18a

0800b22c <_Bfree>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b230:	0005      	movs	r5, r0
 800b232:	000c      	movs	r4, r1
 800b234:	2e00      	cmp	r6, #0
 800b236:	d10e      	bne.n	800b256 <_Bfree+0x2a>
 800b238:	2010      	movs	r0, #16
 800b23a:	f7fe fa0f 	bl	800965c <malloc>
 800b23e:	1e02      	subs	r2, r0, #0
 800b240:	6268      	str	r0, [r5, #36]	; 0x24
 800b242:	d104      	bne.n	800b24e <_Bfree+0x22>
 800b244:	218a      	movs	r1, #138	; 0x8a
 800b246:	4b09      	ldr	r3, [pc, #36]	; (800b26c <_Bfree+0x40>)
 800b248:	4809      	ldr	r0, [pc, #36]	; (800b270 <_Bfree+0x44>)
 800b24a:	f7ff f8b7 	bl	800a3bc <__assert_func>
 800b24e:	6046      	str	r6, [r0, #4]
 800b250:	6086      	str	r6, [r0, #8]
 800b252:	6006      	str	r6, [r0, #0]
 800b254:	60c6      	str	r6, [r0, #12]
 800b256:	2c00      	cmp	r4, #0
 800b258:	d007      	beq.n	800b26a <_Bfree+0x3e>
 800b25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b25c:	6862      	ldr	r2, [r4, #4]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	0092      	lsls	r2, r2, #2
 800b262:	189b      	adds	r3, r3, r2
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	6022      	str	r2, [r4, #0]
 800b268:	601c      	str	r4, [r3, #0]
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	0800cf60 	.word	0x0800cf60
 800b270:	0800d18a 	.word	0x0800d18a

0800b274 <__multadd>:
 800b274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b276:	000e      	movs	r6, r1
 800b278:	9001      	str	r0, [sp, #4]
 800b27a:	000c      	movs	r4, r1
 800b27c:	001d      	movs	r5, r3
 800b27e:	2000      	movs	r0, #0
 800b280:	690f      	ldr	r7, [r1, #16]
 800b282:	3614      	adds	r6, #20
 800b284:	6833      	ldr	r3, [r6, #0]
 800b286:	3001      	adds	r0, #1
 800b288:	b299      	uxth	r1, r3
 800b28a:	4351      	muls	r1, r2
 800b28c:	0c1b      	lsrs	r3, r3, #16
 800b28e:	4353      	muls	r3, r2
 800b290:	1949      	adds	r1, r1, r5
 800b292:	0c0d      	lsrs	r5, r1, #16
 800b294:	195b      	adds	r3, r3, r5
 800b296:	0c1d      	lsrs	r5, r3, #16
 800b298:	b289      	uxth	r1, r1
 800b29a:	041b      	lsls	r3, r3, #16
 800b29c:	185b      	adds	r3, r3, r1
 800b29e:	c608      	stmia	r6!, {r3}
 800b2a0:	4287      	cmp	r7, r0
 800b2a2:	dcef      	bgt.n	800b284 <__multadd+0x10>
 800b2a4:	2d00      	cmp	r5, #0
 800b2a6:	d022      	beq.n	800b2ee <__multadd+0x7a>
 800b2a8:	68a3      	ldr	r3, [r4, #8]
 800b2aa:	42bb      	cmp	r3, r7
 800b2ac:	dc19      	bgt.n	800b2e2 <__multadd+0x6e>
 800b2ae:	6863      	ldr	r3, [r4, #4]
 800b2b0:	9801      	ldr	r0, [sp, #4]
 800b2b2:	1c59      	adds	r1, r3, #1
 800b2b4:	f7ff ff76 	bl	800b1a4 <_Balloc>
 800b2b8:	1e06      	subs	r6, r0, #0
 800b2ba:	d105      	bne.n	800b2c8 <__multadd+0x54>
 800b2bc:	0002      	movs	r2, r0
 800b2be:	21b5      	movs	r1, #181	; 0xb5
 800b2c0:	4b0c      	ldr	r3, [pc, #48]	; (800b2f4 <__multadd+0x80>)
 800b2c2:	480d      	ldr	r0, [pc, #52]	; (800b2f8 <__multadd+0x84>)
 800b2c4:	f7ff f87a 	bl	800a3bc <__assert_func>
 800b2c8:	0021      	movs	r1, r4
 800b2ca:	6923      	ldr	r3, [r4, #16]
 800b2cc:	310c      	adds	r1, #12
 800b2ce:	1c9a      	adds	r2, r3, #2
 800b2d0:	0092      	lsls	r2, r2, #2
 800b2d2:	300c      	adds	r0, #12
 800b2d4:	f7fe f9cc 	bl	8009670 <memcpy>
 800b2d8:	0021      	movs	r1, r4
 800b2da:	9801      	ldr	r0, [sp, #4]
 800b2dc:	f7ff ffa6 	bl	800b22c <_Bfree>
 800b2e0:	0034      	movs	r4, r6
 800b2e2:	1d3b      	adds	r3, r7, #4
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	18e3      	adds	r3, r4, r3
 800b2e8:	605d      	str	r5, [r3, #4]
 800b2ea:	1c7b      	adds	r3, r7, #1
 800b2ec:	6123      	str	r3, [r4, #16]
 800b2ee:	0020      	movs	r0, r4
 800b2f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2f2:	46c0      	nop			; (mov r8, r8)
 800b2f4:	0800d179 	.word	0x0800d179
 800b2f8:	0800d18a 	.word	0x0800d18a

0800b2fc <__hi0bits>:
 800b2fc:	0003      	movs	r3, r0
 800b2fe:	0c02      	lsrs	r2, r0, #16
 800b300:	2000      	movs	r0, #0
 800b302:	4282      	cmp	r2, r0
 800b304:	d101      	bne.n	800b30a <__hi0bits+0xe>
 800b306:	041b      	lsls	r3, r3, #16
 800b308:	3010      	adds	r0, #16
 800b30a:	0e1a      	lsrs	r2, r3, #24
 800b30c:	d101      	bne.n	800b312 <__hi0bits+0x16>
 800b30e:	3008      	adds	r0, #8
 800b310:	021b      	lsls	r3, r3, #8
 800b312:	0f1a      	lsrs	r2, r3, #28
 800b314:	d101      	bne.n	800b31a <__hi0bits+0x1e>
 800b316:	3004      	adds	r0, #4
 800b318:	011b      	lsls	r3, r3, #4
 800b31a:	0f9a      	lsrs	r2, r3, #30
 800b31c:	d101      	bne.n	800b322 <__hi0bits+0x26>
 800b31e:	3002      	adds	r0, #2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	2b00      	cmp	r3, #0
 800b324:	db03      	blt.n	800b32e <__hi0bits+0x32>
 800b326:	3001      	adds	r0, #1
 800b328:	005b      	lsls	r3, r3, #1
 800b32a:	d400      	bmi.n	800b32e <__hi0bits+0x32>
 800b32c:	2020      	movs	r0, #32
 800b32e:	4770      	bx	lr

0800b330 <__lo0bits>:
 800b330:	6803      	ldr	r3, [r0, #0]
 800b332:	0002      	movs	r2, r0
 800b334:	2107      	movs	r1, #7
 800b336:	0018      	movs	r0, r3
 800b338:	4008      	ands	r0, r1
 800b33a:	420b      	tst	r3, r1
 800b33c:	d00d      	beq.n	800b35a <__lo0bits+0x2a>
 800b33e:	3906      	subs	r1, #6
 800b340:	2000      	movs	r0, #0
 800b342:	420b      	tst	r3, r1
 800b344:	d105      	bne.n	800b352 <__lo0bits+0x22>
 800b346:	3002      	adds	r0, #2
 800b348:	4203      	tst	r3, r0
 800b34a:	d003      	beq.n	800b354 <__lo0bits+0x24>
 800b34c:	40cb      	lsrs	r3, r1
 800b34e:	0008      	movs	r0, r1
 800b350:	6013      	str	r3, [r2, #0]
 800b352:	4770      	bx	lr
 800b354:	089b      	lsrs	r3, r3, #2
 800b356:	6013      	str	r3, [r2, #0]
 800b358:	e7fb      	b.n	800b352 <__lo0bits+0x22>
 800b35a:	b299      	uxth	r1, r3
 800b35c:	2900      	cmp	r1, #0
 800b35e:	d101      	bne.n	800b364 <__lo0bits+0x34>
 800b360:	2010      	movs	r0, #16
 800b362:	0c1b      	lsrs	r3, r3, #16
 800b364:	b2d9      	uxtb	r1, r3
 800b366:	2900      	cmp	r1, #0
 800b368:	d101      	bne.n	800b36e <__lo0bits+0x3e>
 800b36a:	3008      	adds	r0, #8
 800b36c:	0a1b      	lsrs	r3, r3, #8
 800b36e:	0719      	lsls	r1, r3, #28
 800b370:	d101      	bne.n	800b376 <__lo0bits+0x46>
 800b372:	3004      	adds	r0, #4
 800b374:	091b      	lsrs	r3, r3, #4
 800b376:	0799      	lsls	r1, r3, #30
 800b378:	d101      	bne.n	800b37e <__lo0bits+0x4e>
 800b37a:	3002      	adds	r0, #2
 800b37c:	089b      	lsrs	r3, r3, #2
 800b37e:	07d9      	lsls	r1, r3, #31
 800b380:	d4e9      	bmi.n	800b356 <__lo0bits+0x26>
 800b382:	3001      	adds	r0, #1
 800b384:	085b      	lsrs	r3, r3, #1
 800b386:	d1e6      	bne.n	800b356 <__lo0bits+0x26>
 800b388:	2020      	movs	r0, #32
 800b38a:	e7e2      	b.n	800b352 <__lo0bits+0x22>

0800b38c <__i2b>:
 800b38c:	b510      	push	{r4, lr}
 800b38e:	000c      	movs	r4, r1
 800b390:	2101      	movs	r1, #1
 800b392:	f7ff ff07 	bl	800b1a4 <_Balloc>
 800b396:	2800      	cmp	r0, #0
 800b398:	d106      	bne.n	800b3a8 <__i2b+0x1c>
 800b39a:	21a0      	movs	r1, #160	; 0xa0
 800b39c:	0002      	movs	r2, r0
 800b39e:	4b04      	ldr	r3, [pc, #16]	; (800b3b0 <__i2b+0x24>)
 800b3a0:	4804      	ldr	r0, [pc, #16]	; (800b3b4 <__i2b+0x28>)
 800b3a2:	0049      	lsls	r1, r1, #1
 800b3a4:	f7ff f80a 	bl	800a3bc <__assert_func>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	6144      	str	r4, [r0, #20]
 800b3ac:	6103      	str	r3, [r0, #16]
 800b3ae:	bd10      	pop	{r4, pc}
 800b3b0:	0800d179 	.word	0x0800d179
 800b3b4:	0800d18a 	.word	0x0800d18a

0800b3b8 <__multiply>:
 800b3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ba:	690b      	ldr	r3, [r1, #16]
 800b3bc:	0014      	movs	r4, r2
 800b3be:	6912      	ldr	r2, [r2, #16]
 800b3c0:	000d      	movs	r5, r1
 800b3c2:	b089      	sub	sp, #36	; 0x24
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	da01      	bge.n	800b3cc <__multiply+0x14>
 800b3c8:	0025      	movs	r5, r4
 800b3ca:	000c      	movs	r4, r1
 800b3cc:	692f      	ldr	r7, [r5, #16]
 800b3ce:	6926      	ldr	r6, [r4, #16]
 800b3d0:	6869      	ldr	r1, [r5, #4]
 800b3d2:	19bb      	adds	r3, r7, r6
 800b3d4:	9302      	str	r3, [sp, #8]
 800b3d6:	68ab      	ldr	r3, [r5, #8]
 800b3d8:	19ba      	adds	r2, r7, r6
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	da00      	bge.n	800b3e0 <__multiply+0x28>
 800b3de:	3101      	adds	r1, #1
 800b3e0:	f7ff fee0 	bl	800b1a4 <_Balloc>
 800b3e4:	9001      	str	r0, [sp, #4]
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d106      	bne.n	800b3f8 <__multiply+0x40>
 800b3ea:	215e      	movs	r1, #94	; 0x5e
 800b3ec:	0002      	movs	r2, r0
 800b3ee:	4b48      	ldr	r3, [pc, #288]	; (800b510 <__multiply+0x158>)
 800b3f0:	4848      	ldr	r0, [pc, #288]	; (800b514 <__multiply+0x15c>)
 800b3f2:	31ff      	adds	r1, #255	; 0xff
 800b3f4:	f7fe ffe2 	bl	800a3bc <__assert_func>
 800b3f8:	9b01      	ldr	r3, [sp, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	3314      	adds	r3, #20
 800b3fe:	469c      	mov	ip, r3
 800b400:	19bb      	adds	r3, r7, r6
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	4463      	add	r3, ip
 800b406:	9303      	str	r3, [sp, #12]
 800b408:	4663      	mov	r3, ip
 800b40a:	9903      	ldr	r1, [sp, #12]
 800b40c:	428b      	cmp	r3, r1
 800b40e:	d32c      	bcc.n	800b46a <__multiply+0xb2>
 800b410:	002b      	movs	r3, r5
 800b412:	0022      	movs	r2, r4
 800b414:	3314      	adds	r3, #20
 800b416:	00bf      	lsls	r7, r7, #2
 800b418:	3214      	adds	r2, #20
 800b41a:	9306      	str	r3, [sp, #24]
 800b41c:	00b6      	lsls	r6, r6, #2
 800b41e:	19db      	adds	r3, r3, r7
 800b420:	9304      	str	r3, [sp, #16]
 800b422:	1993      	adds	r3, r2, r6
 800b424:	9307      	str	r3, [sp, #28]
 800b426:	2304      	movs	r3, #4
 800b428:	9305      	str	r3, [sp, #20]
 800b42a:	002b      	movs	r3, r5
 800b42c:	9904      	ldr	r1, [sp, #16]
 800b42e:	3315      	adds	r3, #21
 800b430:	9200      	str	r2, [sp, #0]
 800b432:	4299      	cmp	r1, r3
 800b434:	d305      	bcc.n	800b442 <__multiply+0x8a>
 800b436:	1b4b      	subs	r3, r1, r5
 800b438:	3b15      	subs	r3, #21
 800b43a:	089b      	lsrs	r3, r3, #2
 800b43c:	3301      	adds	r3, #1
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	9305      	str	r3, [sp, #20]
 800b442:	9b07      	ldr	r3, [sp, #28]
 800b444:	9a00      	ldr	r2, [sp, #0]
 800b446:	429a      	cmp	r2, r3
 800b448:	d311      	bcc.n	800b46e <__multiply+0xb6>
 800b44a:	9b02      	ldr	r3, [sp, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	dd06      	ble.n	800b45e <__multiply+0xa6>
 800b450:	9b03      	ldr	r3, [sp, #12]
 800b452:	3b04      	subs	r3, #4
 800b454:	9303      	str	r3, [sp, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d053      	beq.n	800b506 <__multiply+0x14e>
 800b45e:	9b01      	ldr	r3, [sp, #4]
 800b460:	9a02      	ldr	r2, [sp, #8]
 800b462:	0018      	movs	r0, r3
 800b464:	611a      	str	r2, [r3, #16]
 800b466:	b009      	add	sp, #36	; 0x24
 800b468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b46a:	c304      	stmia	r3!, {r2}
 800b46c:	e7cd      	b.n	800b40a <__multiply+0x52>
 800b46e:	9b00      	ldr	r3, [sp, #0]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	b298      	uxth	r0, r3
 800b474:	2800      	cmp	r0, #0
 800b476:	d01b      	beq.n	800b4b0 <__multiply+0xf8>
 800b478:	4667      	mov	r7, ip
 800b47a:	2400      	movs	r4, #0
 800b47c:	9e06      	ldr	r6, [sp, #24]
 800b47e:	ce02      	ldmia	r6!, {r1}
 800b480:	683a      	ldr	r2, [r7, #0]
 800b482:	b28b      	uxth	r3, r1
 800b484:	4343      	muls	r3, r0
 800b486:	b292      	uxth	r2, r2
 800b488:	189b      	adds	r3, r3, r2
 800b48a:	191b      	adds	r3, r3, r4
 800b48c:	0c0c      	lsrs	r4, r1, #16
 800b48e:	4344      	muls	r4, r0
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	0c11      	lsrs	r1, r2, #16
 800b494:	1861      	adds	r1, r4, r1
 800b496:	0c1c      	lsrs	r4, r3, #16
 800b498:	1909      	adds	r1, r1, r4
 800b49a:	0c0c      	lsrs	r4, r1, #16
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	0409      	lsls	r1, r1, #16
 800b4a0:	430b      	orrs	r3, r1
 800b4a2:	c708      	stmia	r7!, {r3}
 800b4a4:	9b04      	ldr	r3, [sp, #16]
 800b4a6:	42b3      	cmp	r3, r6
 800b4a8:	d8e9      	bhi.n	800b47e <__multiply+0xc6>
 800b4aa:	4663      	mov	r3, ip
 800b4ac:	9a05      	ldr	r2, [sp, #20]
 800b4ae:	509c      	str	r4, [r3, r2]
 800b4b0:	9b00      	ldr	r3, [sp, #0]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	0c1e      	lsrs	r6, r3, #16
 800b4b6:	d020      	beq.n	800b4fa <__multiply+0x142>
 800b4b8:	4663      	mov	r3, ip
 800b4ba:	002c      	movs	r4, r5
 800b4bc:	4660      	mov	r0, ip
 800b4be:	2700      	movs	r7, #0
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3414      	adds	r4, #20
 800b4c4:	6822      	ldr	r2, [r4, #0]
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	b291      	uxth	r1, r2
 800b4ca:	4371      	muls	r1, r6
 800b4cc:	6802      	ldr	r2, [r0, #0]
 800b4ce:	0c12      	lsrs	r2, r2, #16
 800b4d0:	1889      	adds	r1, r1, r2
 800b4d2:	19cf      	adds	r7, r1, r7
 800b4d4:	0439      	lsls	r1, r7, #16
 800b4d6:	430b      	orrs	r3, r1
 800b4d8:	6003      	str	r3, [r0, #0]
 800b4da:	cc02      	ldmia	r4!, {r1}
 800b4dc:	6843      	ldr	r3, [r0, #4]
 800b4de:	0c09      	lsrs	r1, r1, #16
 800b4e0:	4371      	muls	r1, r6
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	0c3f      	lsrs	r7, r7, #16
 800b4e6:	18cb      	adds	r3, r1, r3
 800b4e8:	9a04      	ldr	r2, [sp, #16]
 800b4ea:	19db      	adds	r3, r3, r7
 800b4ec:	0c1f      	lsrs	r7, r3, #16
 800b4ee:	3004      	adds	r0, #4
 800b4f0:	42a2      	cmp	r2, r4
 800b4f2:	d8e7      	bhi.n	800b4c4 <__multiply+0x10c>
 800b4f4:	4662      	mov	r2, ip
 800b4f6:	9905      	ldr	r1, [sp, #20]
 800b4f8:	5053      	str	r3, [r2, r1]
 800b4fa:	9b00      	ldr	r3, [sp, #0]
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	2304      	movs	r3, #4
 800b502:	449c      	add	ip, r3
 800b504:	e79d      	b.n	800b442 <__multiply+0x8a>
 800b506:	9b02      	ldr	r3, [sp, #8]
 800b508:	3b01      	subs	r3, #1
 800b50a:	9302      	str	r3, [sp, #8]
 800b50c:	e79d      	b.n	800b44a <__multiply+0x92>
 800b50e:	46c0      	nop			; (mov r8, r8)
 800b510:	0800d179 	.word	0x0800d179
 800b514:	0800d18a 	.word	0x0800d18a

0800b518 <__pow5mult>:
 800b518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b51a:	2303      	movs	r3, #3
 800b51c:	0015      	movs	r5, r2
 800b51e:	0007      	movs	r7, r0
 800b520:	000e      	movs	r6, r1
 800b522:	401a      	ands	r2, r3
 800b524:	421d      	tst	r5, r3
 800b526:	d008      	beq.n	800b53a <__pow5mult+0x22>
 800b528:	4925      	ldr	r1, [pc, #148]	; (800b5c0 <__pow5mult+0xa8>)
 800b52a:	3a01      	subs	r2, #1
 800b52c:	0092      	lsls	r2, r2, #2
 800b52e:	5852      	ldr	r2, [r2, r1]
 800b530:	2300      	movs	r3, #0
 800b532:	0031      	movs	r1, r6
 800b534:	f7ff fe9e 	bl	800b274 <__multadd>
 800b538:	0006      	movs	r6, r0
 800b53a:	10ad      	asrs	r5, r5, #2
 800b53c:	d03d      	beq.n	800b5ba <__pow5mult+0xa2>
 800b53e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b540:	2c00      	cmp	r4, #0
 800b542:	d10f      	bne.n	800b564 <__pow5mult+0x4c>
 800b544:	2010      	movs	r0, #16
 800b546:	f7fe f889 	bl	800965c <malloc>
 800b54a:	1e02      	subs	r2, r0, #0
 800b54c:	6278      	str	r0, [r7, #36]	; 0x24
 800b54e:	d105      	bne.n	800b55c <__pow5mult+0x44>
 800b550:	21d7      	movs	r1, #215	; 0xd7
 800b552:	4b1c      	ldr	r3, [pc, #112]	; (800b5c4 <__pow5mult+0xac>)
 800b554:	481c      	ldr	r0, [pc, #112]	; (800b5c8 <__pow5mult+0xb0>)
 800b556:	0049      	lsls	r1, r1, #1
 800b558:	f7fe ff30 	bl	800a3bc <__assert_func>
 800b55c:	6044      	str	r4, [r0, #4]
 800b55e:	6084      	str	r4, [r0, #8]
 800b560:	6004      	str	r4, [r0, #0]
 800b562:	60c4      	str	r4, [r0, #12]
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	689c      	ldr	r4, [r3, #8]
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	2c00      	cmp	r4, #0
 800b56c:	d108      	bne.n	800b580 <__pow5mult+0x68>
 800b56e:	0038      	movs	r0, r7
 800b570:	4916      	ldr	r1, [pc, #88]	; (800b5cc <__pow5mult+0xb4>)
 800b572:	f7ff ff0b 	bl	800b38c <__i2b>
 800b576:	9b01      	ldr	r3, [sp, #4]
 800b578:	0004      	movs	r4, r0
 800b57a:	6098      	str	r0, [r3, #8]
 800b57c:	2300      	movs	r3, #0
 800b57e:	6003      	str	r3, [r0, #0]
 800b580:	2301      	movs	r3, #1
 800b582:	421d      	tst	r5, r3
 800b584:	d00a      	beq.n	800b59c <__pow5mult+0x84>
 800b586:	0031      	movs	r1, r6
 800b588:	0022      	movs	r2, r4
 800b58a:	0038      	movs	r0, r7
 800b58c:	f7ff ff14 	bl	800b3b8 <__multiply>
 800b590:	0031      	movs	r1, r6
 800b592:	9001      	str	r0, [sp, #4]
 800b594:	0038      	movs	r0, r7
 800b596:	f7ff fe49 	bl	800b22c <_Bfree>
 800b59a:	9e01      	ldr	r6, [sp, #4]
 800b59c:	106d      	asrs	r5, r5, #1
 800b59e:	d00c      	beq.n	800b5ba <__pow5mult+0xa2>
 800b5a0:	6820      	ldr	r0, [r4, #0]
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d107      	bne.n	800b5b6 <__pow5mult+0x9e>
 800b5a6:	0022      	movs	r2, r4
 800b5a8:	0021      	movs	r1, r4
 800b5aa:	0038      	movs	r0, r7
 800b5ac:	f7ff ff04 	bl	800b3b8 <__multiply>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	6020      	str	r0, [r4, #0]
 800b5b4:	6003      	str	r3, [r0, #0]
 800b5b6:	0004      	movs	r4, r0
 800b5b8:	e7e2      	b.n	800b580 <__pow5mult+0x68>
 800b5ba:	0030      	movs	r0, r6
 800b5bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b5be:	46c0      	nop			; (mov r8, r8)
 800b5c0:	0800d2d8 	.word	0x0800d2d8
 800b5c4:	0800cf60 	.word	0x0800cf60
 800b5c8:	0800d18a 	.word	0x0800d18a
 800b5cc:	00000271 	.word	0x00000271

0800b5d0 <__lshift>:
 800b5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5d2:	000c      	movs	r4, r1
 800b5d4:	0017      	movs	r7, r2
 800b5d6:	6923      	ldr	r3, [r4, #16]
 800b5d8:	1155      	asrs	r5, r2, #5
 800b5da:	b087      	sub	sp, #28
 800b5dc:	18eb      	adds	r3, r5, r3
 800b5de:	9302      	str	r3, [sp, #8]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	9301      	str	r3, [sp, #4]
 800b5e4:	6849      	ldr	r1, [r1, #4]
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	9004      	str	r0, [sp, #16]
 800b5ea:	9a01      	ldr	r2, [sp, #4]
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	db10      	blt.n	800b612 <__lshift+0x42>
 800b5f0:	9804      	ldr	r0, [sp, #16]
 800b5f2:	f7ff fdd7 	bl	800b1a4 <_Balloc>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	0002      	movs	r2, r0
 800b5fa:	0006      	movs	r6, r0
 800b5fc:	0019      	movs	r1, r3
 800b5fe:	3214      	adds	r2, #20
 800b600:	4298      	cmp	r0, r3
 800b602:	d10c      	bne.n	800b61e <__lshift+0x4e>
 800b604:	21da      	movs	r1, #218	; 0xda
 800b606:	0002      	movs	r2, r0
 800b608:	4b26      	ldr	r3, [pc, #152]	; (800b6a4 <__lshift+0xd4>)
 800b60a:	4827      	ldr	r0, [pc, #156]	; (800b6a8 <__lshift+0xd8>)
 800b60c:	31ff      	adds	r1, #255	; 0xff
 800b60e:	f7fe fed5 	bl	800a3bc <__assert_func>
 800b612:	3101      	adds	r1, #1
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	e7e8      	b.n	800b5ea <__lshift+0x1a>
 800b618:	0098      	lsls	r0, r3, #2
 800b61a:	5011      	str	r1, [r2, r0]
 800b61c:	3301      	adds	r3, #1
 800b61e:	42ab      	cmp	r3, r5
 800b620:	dbfa      	blt.n	800b618 <__lshift+0x48>
 800b622:	43eb      	mvns	r3, r5
 800b624:	17db      	asrs	r3, r3, #31
 800b626:	401d      	ands	r5, r3
 800b628:	211f      	movs	r1, #31
 800b62a:	0023      	movs	r3, r4
 800b62c:	0038      	movs	r0, r7
 800b62e:	00ad      	lsls	r5, r5, #2
 800b630:	1955      	adds	r5, r2, r5
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	3314      	adds	r3, #20
 800b636:	0092      	lsls	r2, r2, #2
 800b638:	4008      	ands	r0, r1
 800b63a:	4684      	mov	ip, r0
 800b63c:	189a      	adds	r2, r3, r2
 800b63e:	420f      	tst	r7, r1
 800b640:	d02a      	beq.n	800b698 <__lshift+0xc8>
 800b642:	3101      	adds	r1, #1
 800b644:	1a09      	subs	r1, r1, r0
 800b646:	9105      	str	r1, [sp, #20]
 800b648:	2100      	movs	r1, #0
 800b64a:	9503      	str	r5, [sp, #12]
 800b64c:	4667      	mov	r7, ip
 800b64e:	6818      	ldr	r0, [r3, #0]
 800b650:	40b8      	lsls	r0, r7
 800b652:	4301      	orrs	r1, r0
 800b654:	9803      	ldr	r0, [sp, #12]
 800b656:	c002      	stmia	r0!, {r1}
 800b658:	cb02      	ldmia	r3!, {r1}
 800b65a:	9003      	str	r0, [sp, #12]
 800b65c:	9805      	ldr	r0, [sp, #20]
 800b65e:	40c1      	lsrs	r1, r0
 800b660:	429a      	cmp	r2, r3
 800b662:	d8f3      	bhi.n	800b64c <__lshift+0x7c>
 800b664:	0020      	movs	r0, r4
 800b666:	3015      	adds	r0, #21
 800b668:	2304      	movs	r3, #4
 800b66a:	4282      	cmp	r2, r0
 800b66c:	d304      	bcc.n	800b678 <__lshift+0xa8>
 800b66e:	1b13      	subs	r3, r2, r4
 800b670:	3b15      	subs	r3, #21
 800b672:	089b      	lsrs	r3, r3, #2
 800b674:	3301      	adds	r3, #1
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	50e9      	str	r1, [r5, r3]
 800b67a:	2900      	cmp	r1, #0
 800b67c:	d002      	beq.n	800b684 <__lshift+0xb4>
 800b67e:	9b02      	ldr	r3, [sp, #8]
 800b680:	3302      	adds	r3, #2
 800b682:	9301      	str	r3, [sp, #4]
 800b684:	9b01      	ldr	r3, [sp, #4]
 800b686:	9804      	ldr	r0, [sp, #16]
 800b688:	3b01      	subs	r3, #1
 800b68a:	0021      	movs	r1, r4
 800b68c:	6133      	str	r3, [r6, #16]
 800b68e:	f7ff fdcd 	bl	800b22c <_Bfree>
 800b692:	0030      	movs	r0, r6
 800b694:	b007      	add	sp, #28
 800b696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b698:	cb02      	ldmia	r3!, {r1}
 800b69a:	c502      	stmia	r5!, {r1}
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d8fb      	bhi.n	800b698 <__lshift+0xc8>
 800b6a0:	e7f0      	b.n	800b684 <__lshift+0xb4>
 800b6a2:	46c0      	nop			; (mov r8, r8)
 800b6a4:	0800d179 	.word	0x0800d179
 800b6a8:	0800d18a 	.word	0x0800d18a

0800b6ac <__mcmp>:
 800b6ac:	6902      	ldr	r2, [r0, #16]
 800b6ae:	690b      	ldr	r3, [r1, #16]
 800b6b0:	b530      	push	{r4, r5, lr}
 800b6b2:	0004      	movs	r4, r0
 800b6b4:	1ad0      	subs	r0, r2, r3
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d10d      	bne.n	800b6d6 <__mcmp+0x2a>
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	3414      	adds	r4, #20
 800b6be:	3114      	adds	r1, #20
 800b6c0:	18e2      	adds	r2, r4, r3
 800b6c2:	18c9      	adds	r1, r1, r3
 800b6c4:	3a04      	subs	r2, #4
 800b6c6:	3904      	subs	r1, #4
 800b6c8:	6815      	ldr	r5, [r2, #0]
 800b6ca:	680b      	ldr	r3, [r1, #0]
 800b6cc:	429d      	cmp	r5, r3
 800b6ce:	d003      	beq.n	800b6d8 <__mcmp+0x2c>
 800b6d0:	2001      	movs	r0, #1
 800b6d2:	429d      	cmp	r5, r3
 800b6d4:	d303      	bcc.n	800b6de <__mcmp+0x32>
 800b6d6:	bd30      	pop	{r4, r5, pc}
 800b6d8:	4294      	cmp	r4, r2
 800b6da:	d3f3      	bcc.n	800b6c4 <__mcmp+0x18>
 800b6dc:	e7fb      	b.n	800b6d6 <__mcmp+0x2a>
 800b6de:	4240      	negs	r0, r0
 800b6e0:	e7f9      	b.n	800b6d6 <__mcmp+0x2a>
	...

0800b6e4 <__mdiff>:
 800b6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6e6:	000e      	movs	r6, r1
 800b6e8:	0007      	movs	r7, r0
 800b6ea:	0011      	movs	r1, r2
 800b6ec:	0030      	movs	r0, r6
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	0014      	movs	r4, r2
 800b6f2:	f7ff ffdb 	bl	800b6ac <__mcmp>
 800b6f6:	1e05      	subs	r5, r0, #0
 800b6f8:	d110      	bne.n	800b71c <__mdiff+0x38>
 800b6fa:	0001      	movs	r1, r0
 800b6fc:	0038      	movs	r0, r7
 800b6fe:	f7ff fd51 	bl	800b1a4 <_Balloc>
 800b702:	1e02      	subs	r2, r0, #0
 800b704:	d104      	bne.n	800b710 <__mdiff+0x2c>
 800b706:	4b40      	ldr	r3, [pc, #256]	; (800b808 <__mdiff+0x124>)
 800b708:	4940      	ldr	r1, [pc, #256]	; (800b80c <__mdiff+0x128>)
 800b70a:	4841      	ldr	r0, [pc, #260]	; (800b810 <__mdiff+0x12c>)
 800b70c:	f7fe fe56 	bl	800a3bc <__assert_func>
 800b710:	2301      	movs	r3, #1
 800b712:	6145      	str	r5, [r0, #20]
 800b714:	6103      	str	r3, [r0, #16]
 800b716:	0010      	movs	r0, r2
 800b718:	b007      	add	sp, #28
 800b71a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b71c:	2301      	movs	r3, #1
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	2800      	cmp	r0, #0
 800b722:	db04      	blt.n	800b72e <__mdiff+0x4a>
 800b724:	0023      	movs	r3, r4
 800b726:	0034      	movs	r4, r6
 800b728:	001e      	movs	r6, r3
 800b72a:	2300      	movs	r3, #0
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	0038      	movs	r0, r7
 800b730:	6861      	ldr	r1, [r4, #4]
 800b732:	f7ff fd37 	bl	800b1a4 <_Balloc>
 800b736:	1e02      	subs	r2, r0, #0
 800b738:	d103      	bne.n	800b742 <__mdiff+0x5e>
 800b73a:	2190      	movs	r1, #144	; 0x90
 800b73c:	4b32      	ldr	r3, [pc, #200]	; (800b808 <__mdiff+0x124>)
 800b73e:	0089      	lsls	r1, r1, #2
 800b740:	e7e3      	b.n	800b70a <__mdiff+0x26>
 800b742:	9b01      	ldr	r3, [sp, #4]
 800b744:	2700      	movs	r7, #0
 800b746:	60c3      	str	r3, [r0, #12]
 800b748:	6920      	ldr	r0, [r4, #16]
 800b74a:	3414      	adds	r4, #20
 800b74c:	9401      	str	r4, [sp, #4]
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	0084      	lsls	r4, r0, #2
 800b752:	191b      	adds	r3, r3, r4
 800b754:	0034      	movs	r4, r6
 800b756:	9302      	str	r3, [sp, #8]
 800b758:	6933      	ldr	r3, [r6, #16]
 800b75a:	3414      	adds	r4, #20
 800b75c:	0099      	lsls	r1, r3, #2
 800b75e:	1863      	adds	r3, r4, r1
 800b760:	9303      	str	r3, [sp, #12]
 800b762:	0013      	movs	r3, r2
 800b764:	3314      	adds	r3, #20
 800b766:	469c      	mov	ip, r3
 800b768:	9305      	str	r3, [sp, #20]
 800b76a:	9b01      	ldr	r3, [sp, #4]
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	cc02      	ldmia	r4!, {r1}
 800b772:	cb20      	ldmia	r3!, {r5}
 800b774:	9304      	str	r3, [sp, #16]
 800b776:	b2ab      	uxth	r3, r5
 800b778:	19df      	adds	r7, r3, r7
 800b77a:	b28b      	uxth	r3, r1
 800b77c:	1afb      	subs	r3, r7, r3
 800b77e:	0c09      	lsrs	r1, r1, #16
 800b780:	0c2d      	lsrs	r5, r5, #16
 800b782:	1a6d      	subs	r5, r5, r1
 800b784:	1419      	asrs	r1, r3, #16
 800b786:	186d      	adds	r5, r5, r1
 800b788:	4661      	mov	r1, ip
 800b78a:	142f      	asrs	r7, r5, #16
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	042d      	lsls	r5, r5, #16
 800b790:	432b      	orrs	r3, r5
 800b792:	c108      	stmia	r1!, {r3}
 800b794:	9b03      	ldr	r3, [sp, #12]
 800b796:	468c      	mov	ip, r1
 800b798:	42a3      	cmp	r3, r4
 800b79a:	d8e8      	bhi.n	800b76e <__mdiff+0x8a>
 800b79c:	0031      	movs	r1, r6
 800b79e:	9c03      	ldr	r4, [sp, #12]
 800b7a0:	3115      	adds	r1, #21
 800b7a2:	2304      	movs	r3, #4
 800b7a4:	428c      	cmp	r4, r1
 800b7a6:	d304      	bcc.n	800b7b2 <__mdiff+0xce>
 800b7a8:	1ba3      	subs	r3, r4, r6
 800b7aa:	3b15      	subs	r3, #21
 800b7ac:	089b      	lsrs	r3, r3, #2
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	9901      	ldr	r1, [sp, #4]
 800b7b4:	18cc      	adds	r4, r1, r3
 800b7b6:	9905      	ldr	r1, [sp, #20]
 800b7b8:	0026      	movs	r6, r4
 800b7ba:	18cb      	adds	r3, r1, r3
 800b7bc:	469c      	mov	ip, r3
 800b7be:	9902      	ldr	r1, [sp, #8]
 800b7c0:	428e      	cmp	r6, r1
 800b7c2:	d310      	bcc.n	800b7e6 <__mdiff+0x102>
 800b7c4:	9e02      	ldr	r6, [sp, #8]
 800b7c6:	1ee1      	subs	r1, r4, #3
 800b7c8:	2500      	movs	r5, #0
 800b7ca:	428e      	cmp	r6, r1
 800b7cc:	d304      	bcc.n	800b7d8 <__mdiff+0xf4>
 800b7ce:	0031      	movs	r1, r6
 800b7d0:	3103      	adds	r1, #3
 800b7d2:	1b0c      	subs	r4, r1, r4
 800b7d4:	08a4      	lsrs	r4, r4, #2
 800b7d6:	00a5      	lsls	r5, r4, #2
 800b7d8:	195b      	adds	r3, r3, r5
 800b7da:	3b04      	subs	r3, #4
 800b7dc:	6819      	ldr	r1, [r3, #0]
 800b7de:	2900      	cmp	r1, #0
 800b7e0:	d00f      	beq.n	800b802 <__mdiff+0x11e>
 800b7e2:	6110      	str	r0, [r2, #16]
 800b7e4:	e797      	b.n	800b716 <__mdiff+0x32>
 800b7e6:	ce02      	ldmia	r6!, {r1}
 800b7e8:	b28d      	uxth	r5, r1
 800b7ea:	19ed      	adds	r5, r5, r7
 800b7ec:	0c0f      	lsrs	r7, r1, #16
 800b7ee:	1429      	asrs	r1, r5, #16
 800b7f0:	1879      	adds	r1, r7, r1
 800b7f2:	140f      	asrs	r7, r1, #16
 800b7f4:	b2ad      	uxth	r5, r5
 800b7f6:	0409      	lsls	r1, r1, #16
 800b7f8:	430d      	orrs	r5, r1
 800b7fa:	4661      	mov	r1, ip
 800b7fc:	c120      	stmia	r1!, {r5}
 800b7fe:	468c      	mov	ip, r1
 800b800:	e7dd      	b.n	800b7be <__mdiff+0xda>
 800b802:	3801      	subs	r0, #1
 800b804:	e7e9      	b.n	800b7da <__mdiff+0xf6>
 800b806:	46c0      	nop			; (mov r8, r8)
 800b808:	0800d179 	.word	0x0800d179
 800b80c:	00000232 	.word	0x00000232
 800b810:	0800d18a 	.word	0x0800d18a

0800b814 <__d2b>:
 800b814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b816:	2101      	movs	r1, #1
 800b818:	0014      	movs	r4, r2
 800b81a:	001e      	movs	r6, r3
 800b81c:	9f08      	ldr	r7, [sp, #32]
 800b81e:	f7ff fcc1 	bl	800b1a4 <_Balloc>
 800b822:	1e05      	subs	r5, r0, #0
 800b824:	d105      	bne.n	800b832 <__d2b+0x1e>
 800b826:	0002      	movs	r2, r0
 800b828:	4b26      	ldr	r3, [pc, #152]	; (800b8c4 <__d2b+0xb0>)
 800b82a:	4927      	ldr	r1, [pc, #156]	; (800b8c8 <__d2b+0xb4>)
 800b82c:	4827      	ldr	r0, [pc, #156]	; (800b8cc <__d2b+0xb8>)
 800b82e:	f7fe fdc5 	bl	800a3bc <__assert_func>
 800b832:	0333      	lsls	r3, r6, #12
 800b834:	0076      	lsls	r6, r6, #1
 800b836:	0b1b      	lsrs	r3, r3, #12
 800b838:	0d76      	lsrs	r6, r6, #21
 800b83a:	d124      	bne.n	800b886 <__d2b+0x72>
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	2c00      	cmp	r4, #0
 800b840:	d027      	beq.n	800b892 <__d2b+0x7e>
 800b842:	4668      	mov	r0, sp
 800b844:	9400      	str	r4, [sp, #0]
 800b846:	f7ff fd73 	bl	800b330 <__lo0bits>
 800b84a:	9c00      	ldr	r4, [sp, #0]
 800b84c:	2800      	cmp	r0, #0
 800b84e:	d01e      	beq.n	800b88e <__d2b+0x7a>
 800b850:	9b01      	ldr	r3, [sp, #4]
 800b852:	2120      	movs	r1, #32
 800b854:	001a      	movs	r2, r3
 800b856:	1a09      	subs	r1, r1, r0
 800b858:	408a      	lsls	r2, r1
 800b85a:	40c3      	lsrs	r3, r0
 800b85c:	4322      	orrs	r2, r4
 800b85e:	616a      	str	r2, [r5, #20]
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	9c01      	ldr	r4, [sp, #4]
 800b864:	61ac      	str	r4, [r5, #24]
 800b866:	1e63      	subs	r3, r4, #1
 800b868:	419c      	sbcs	r4, r3
 800b86a:	3401      	adds	r4, #1
 800b86c:	612c      	str	r4, [r5, #16]
 800b86e:	2e00      	cmp	r6, #0
 800b870:	d018      	beq.n	800b8a4 <__d2b+0x90>
 800b872:	4b17      	ldr	r3, [pc, #92]	; (800b8d0 <__d2b+0xbc>)
 800b874:	18f6      	adds	r6, r6, r3
 800b876:	2335      	movs	r3, #53	; 0x35
 800b878:	1836      	adds	r6, r6, r0
 800b87a:	1a18      	subs	r0, r3, r0
 800b87c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87e:	603e      	str	r6, [r7, #0]
 800b880:	6018      	str	r0, [r3, #0]
 800b882:	0028      	movs	r0, r5
 800b884:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b886:	2280      	movs	r2, #128	; 0x80
 800b888:	0352      	lsls	r2, r2, #13
 800b88a:	4313      	orrs	r3, r2
 800b88c:	e7d6      	b.n	800b83c <__d2b+0x28>
 800b88e:	616c      	str	r4, [r5, #20]
 800b890:	e7e7      	b.n	800b862 <__d2b+0x4e>
 800b892:	a801      	add	r0, sp, #4
 800b894:	f7ff fd4c 	bl	800b330 <__lo0bits>
 800b898:	2401      	movs	r4, #1
 800b89a:	9b01      	ldr	r3, [sp, #4]
 800b89c:	612c      	str	r4, [r5, #16]
 800b89e:	616b      	str	r3, [r5, #20]
 800b8a0:	3020      	adds	r0, #32
 800b8a2:	e7e4      	b.n	800b86e <__d2b+0x5a>
 800b8a4:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <__d2b+0xc0>)
 800b8a6:	18c0      	adds	r0, r0, r3
 800b8a8:	4b0b      	ldr	r3, [pc, #44]	; (800b8d8 <__d2b+0xc4>)
 800b8aa:	6038      	str	r0, [r7, #0]
 800b8ac:	18e3      	adds	r3, r4, r3
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	18eb      	adds	r3, r5, r3
 800b8b2:	6958      	ldr	r0, [r3, #20]
 800b8b4:	f7ff fd22 	bl	800b2fc <__hi0bits>
 800b8b8:	0164      	lsls	r4, r4, #5
 800b8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8bc:	1a24      	subs	r4, r4, r0
 800b8be:	601c      	str	r4, [r3, #0]
 800b8c0:	e7df      	b.n	800b882 <__d2b+0x6e>
 800b8c2:	46c0      	nop			; (mov r8, r8)
 800b8c4:	0800d179 	.word	0x0800d179
 800b8c8:	0000030a 	.word	0x0000030a
 800b8cc:	0800d18a 	.word	0x0800d18a
 800b8d0:	fffffbcd 	.word	0xfffffbcd
 800b8d4:	fffffbce 	.word	0xfffffbce
 800b8d8:	3fffffff 	.word	0x3fffffff

0800b8dc <_calloc_r>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	0c13      	lsrs	r3, r2, #16
 800b8e0:	0c0d      	lsrs	r5, r1, #16
 800b8e2:	d11e      	bne.n	800b922 <_calloc_r+0x46>
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10c      	bne.n	800b902 <_calloc_r+0x26>
 800b8e8:	b289      	uxth	r1, r1
 800b8ea:	b294      	uxth	r4, r2
 800b8ec:	434c      	muls	r4, r1
 800b8ee:	0021      	movs	r1, r4
 800b8f0:	f7fd ff3c 	bl	800976c <_malloc_r>
 800b8f4:	1e05      	subs	r5, r0, #0
 800b8f6:	d01b      	beq.n	800b930 <_calloc_r+0x54>
 800b8f8:	0022      	movs	r2, r4
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	f7fd fec1 	bl	8009682 <memset>
 800b900:	e016      	b.n	800b930 <_calloc_r+0x54>
 800b902:	1c1d      	adds	r5, r3, #0
 800b904:	1c0b      	adds	r3, r1, #0
 800b906:	b292      	uxth	r2, r2
 800b908:	b289      	uxth	r1, r1
 800b90a:	b29c      	uxth	r4, r3
 800b90c:	4351      	muls	r1, r2
 800b90e:	b2ab      	uxth	r3, r5
 800b910:	4363      	muls	r3, r4
 800b912:	0c0c      	lsrs	r4, r1, #16
 800b914:	191c      	adds	r4, r3, r4
 800b916:	0c22      	lsrs	r2, r4, #16
 800b918:	d107      	bne.n	800b92a <_calloc_r+0x4e>
 800b91a:	0424      	lsls	r4, r4, #16
 800b91c:	b289      	uxth	r1, r1
 800b91e:	430c      	orrs	r4, r1
 800b920:	e7e5      	b.n	800b8ee <_calloc_r+0x12>
 800b922:	2b00      	cmp	r3, #0
 800b924:	d101      	bne.n	800b92a <_calloc_r+0x4e>
 800b926:	1c13      	adds	r3, r2, #0
 800b928:	e7ed      	b.n	800b906 <_calloc_r+0x2a>
 800b92a:	230c      	movs	r3, #12
 800b92c:	2500      	movs	r5, #0
 800b92e:	6003      	str	r3, [r0, #0]
 800b930:	0028      	movs	r0, r5
 800b932:	bd70      	pop	{r4, r5, r6, pc}

0800b934 <__ssputs_r>:
 800b934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b936:	688e      	ldr	r6, [r1, #8]
 800b938:	b085      	sub	sp, #20
 800b93a:	0007      	movs	r7, r0
 800b93c:	000c      	movs	r4, r1
 800b93e:	9203      	str	r2, [sp, #12]
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	429e      	cmp	r6, r3
 800b944:	d83c      	bhi.n	800b9c0 <__ssputs_r+0x8c>
 800b946:	2390      	movs	r3, #144	; 0x90
 800b948:	898a      	ldrh	r2, [r1, #12]
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	421a      	tst	r2, r3
 800b94e:	d034      	beq.n	800b9ba <__ssputs_r+0x86>
 800b950:	6909      	ldr	r1, [r1, #16]
 800b952:	6823      	ldr	r3, [r4, #0]
 800b954:	6960      	ldr	r0, [r4, #20]
 800b956:	1a5b      	subs	r3, r3, r1
 800b958:	9302      	str	r3, [sp, #8]
 800b95a:	2303      	movs	r3, #3
 800b95c:	4343      	muls	r3, r0
 800b95e:	0fdd      	lsrs	r5, r3, #31
 800b960:	18ed      	adds	r5, r5, r3
 800b962:	9b01      	ldr	r3, [sp, #4]
 800b964:	9802      	ldr	r0, [sp, #8]
 800b966:	3301      	adds	r3, #1
 800b968:	181b      	adds	r3, r3, r0
 800b96a:	106d      	asrs	r5, r5, #1
 800b96c:	42ab      	cmp	r3, r5
 800b96e:	d900      	bls.n	800b972 <__ssputs_r+0x3e>
 800b970:	001d      	movs	r5, r3
 800b972:	0553      	lsls	r3, r2, #21
 800b974:	d532      	bpl.n	800b9dc <__ssputs_r+0xa8>
 800b976:	0029      	movs	r1, r5
 800b978:	0038      	movs	r0, r7
 800b97a:	f7fd fef7 	bl	800976c <_malloc_r>
 800b97e:	1e06      	subs	r6, r0, #0
 800b980:	d109      	bne.n	800b996 <__ssputs_r+0x62>
 800b982:	230c      	movs	r3, #12
 800b984:	603b      	str	r3, [r7, #0]
 800b986:	2340      	movs	r3, #64	; 0x40
 800b988:	2001      	movs	r0, #1
 800b98a:	89a2      	ldrh	r2, [r4, #12]
 800b98c:	4240      	negs	r0, r0
 800b98e:	4313      	orrs	r3, r2
 800b990:	81a3      	strh	r3, [r4, #12]
 800b992:	b005      	add	sp, #20
 800b994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b996:	9a02      	ldr	r2, [sp, #8]
 800b998:	6921      	ldr	r1, [r4, #16]
 800b99a:	f7fd fe69 	bl	8009670 <memcpy>
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	4a14      	ldr	r2, [pc, #80]	; (800b9f4 <__ssputs_r+0xc0>)
 800b9a2:	401a      	ands	r2, r3
 800b9a4:	2380      	movs	r3, #128	; 0x80
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	81a3      	strh	r3, [r4, #12]
 800b9aa:	9b02      	ldr	r3, [sp, #8]
 800b9ac:	6126      	str	r6, [r4, #16]
 800b9ae:	18f6      	adds	r6, r6, r3
 800b9b0:	6026      	str	r6, [r4, #0]
 800b9b2:	6165      	str	r5, [r4, #20]
 800b9b4:	9e01      	ldr	r6, [sp, #4]
 800b9b6:	1aed      	subs	r5, r5, r3
 800b9b8:	60a5      	str	r5, [r4, #8]
 800b9ba:	9b01      	ldr	r3, [sp, #4]
 800b9bc:	429e      	cmp	r6, r3
 800b9be:	d900      	bls.n	800b9c2 <__ssputs_r+0x8e>
 800b9c0:	9e01      	ldr	r6, [sp, #4]
 800b9c2:	0032      	movs	r2, r6
 800b9c4:	9903      	ldr	r1, [sp, #12]
 800b9c6:	6820      	ldr	r0, [r4, #0]
 800b9c8:	f000 fd9e 	bl	800c508 <memmove>
 800b9cc:	68a3      	ldr	r3, [r4, #8]
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	1b9b      	subs	r3, r3, r6
 800b9d2:	60a3      	str	r3, [r4, #8]
 800b9d4:	6823      	ldr	r3, [r4, #0]
 800b9d6:	199e      	adds	r6, r3, r6
 800b9d8:	6026      	str	r6, [r4, #0]
 800b9da:	e7da      	b.n	800b992 <__ssputs_r+0x5e>
 800b9dc:	002a      	movs	r2, r5
 800b9de:	0038      	movs	r0, r7
 800b9e0:	f000 fda5 	bl	800c52e <_realloc_r>
 800b9e4:	1e06      	subs	r6, r0, #0
 800b9e6:	d1e0      	bne.n	800b9aa <__ssputs_r+0x76>
 800b9e8:	0038      	movs	r0, r7
 800b9ea:	6921      	ldr	r1, [r4, #16]
 800b9ec:	f7fd fe52 	bl	8009694 <_free_r>
 800b9f0:	e7c7      	b.n	800b982 <__ssputs_r+0x4e>
 800b9f2:	46c0      	nop			; (mov r8, r8)
 800b9f4:	fffffb7f 	.word	0xfffffb7f

0800b9f8 <_svfiprintf_r>:
 800b9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9fa:	b0a1      	sub	sp, #132	; 0x84
 800b9fc:	9003      	str	r0, [sp, #12]
 800b9fe:	001d      	movs	r5, r3
 800ba00:	898b      	ldrh	r3, [r1, #12]
 800ba02:	000f      	movs	r7, r1
 800ba04:	0016      	movs	r6, r2
 800ba06:	061b      	lsls	r3, r3, #24
 800ba08:	d511      	bpl.n	800ba2e <_svfiprintf_r+0x36>
 800ba0a:	690b      	ldr	r3, [r1, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10e      	bne.n	800ba2e <_svfiprintf_r+0x36>
 800ba10:	2140      	movs	r1, #64	; 0x40
 800ba12:	f7fd feab 	bl	800976c <_malloc_r>
 800ba16:	6038      	str	r0, [r7, #0]
 800ba18:	6138      	str	r0, [r7, #16]
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d105      	bne.n	800ba2a <_svfiprintf_r+0x32>
 800ba1e:	230c      	movs	r3, #12
 800ba20:	9a03      	ldr	r2, [sp, #12]
 800ba22:	3801      	subs	r0, #1
 800ba24:	6013      	str	r3, [r2, #0]
 800ba26:	b021      	add	sp, #132	; 0x84
 800ba28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba2a:	2340      	movs	r3, #64	; 0x40
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	2300      	movs	r3, #0
 800ba30:	ac08      	add	r4, sp, #32
 800ba32:	6163      	str	r3, [r4, #20]
 800ba34:	3320      	adds	r3, #32
 800ba36:	7663      	strb	r3, [r4, #25]
 800ba38:	3310      	adds	r3, #16
 800ba3a:	76a3      	strb	r3, [r4, #26]
 800ba3c:	9507      	str	r5, [sp, #28]
 800ba3e:	0035      	movs	r5, r6
 800ba40:	782b      	ldrb	r3, [r5, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <_svfiprintf_r+0x52>
 800ba46:	2b25      	cmp	r3, #37	; 0x25
 800ba48:	d147      	bne.n	800bada <_svfiprintf_r+0xe2>
 800ba4a:	1bab      	subs	r3, r5, r6
 800ba4c:	9305      	str	r3, [sp, #20]
 800ba4e:	42b5      	cmp	r5, r6
 800ba50:	d00c      	beq.n	800ba6c <_svfiprintf_r+0x74>
 800ba52:	0032      	movs	r2, r6
 800ba54:	0039      	movs	r1, r7
 800ba56:	9803      	ldr	r0, [sp, #12]
 800ba58:	f7ff ff6c 	bl	800b934 <__ssputs_r>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d100      	bne.n	800ba62 <_svfiprintf_r+0x6a>
 800ba60:	e0ae      	b.n	800bbc0 <_svfiprintf_r+0x1c8>
 800ba62:	6962      	ldr	r2, [r4, #20]
 800ba64:	9b05      	ldr	r3, [sp, #20]
 800ba66:	4694      	mov	ip, r2
 800ba68:	4463      	add	r3, ip
 800ba6a:	6163      	str	r3, [r4, #20]
 800ba6c:	782b      	ldrb	r3, [r5, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d100      	bne.n	800ba74 <_svfiprintf_r+0x7c>
 800ba72:	e0a5      	b.n	800bbc0 <_svfiprintf_r+0x1c8>
 800ba74:	2201      	movs	r2, #1
 800ba76:	2300      	movs	r3, #0
 800ba78:	4252      	negs	r2, r2
 800ba7a:	6062      	str	r2, [r4, #4]
 800ba7c:	a904      	add	r1, sp, #16
 800ba7e:	3254      	adds	r2, #84	; 0x54
 800ba80:	1852      	adds	r2, r2, r1
 800ba82:	1c6e      	adds	r6, r5, #1
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	60e3      	str	r3, [r4, #12]
 800ba88:	60a3      	str	r3, [r4, #8]
 800ba8a:	7013      	strb	r3, [r2, #0]
 800ba8c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ba8e:	2205      	movs	r2, #5
 800ba90:	7831      	ldrb	r1, [r6, #0]
 800ba92:	4854      	ldr	r0, [pc, #336]	; (800bbe4 <_svfiprintf_r+0x1ec>)
 800ba94:	f7ff fb6a 	bl	800b16c <memchr>
 800ba98:	1c75      	adds	r5, r6, #1
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d11f      	bne.n	800bade <_svfiprintf_r+0xe6>
 800ba9e:	6822      	ldr	r2, [r4, #0]
 800baa0:	06d3      	lsls	r3, r2, #27
 800baa2:	d504      	bpl.n	800baae <_svfiprintf_r+0xb6>
 800baa4:	2353      	movs	r3, #83	; 0x53
 800baa6:	a904      	add	r1, sp, #16
 800baa8:	185b      	adds	r3, r3, r1
 800baaa:	2120      	movs	r1, #32
 800baac:	7019      	strb	r1, [r3, #0]
 800baae:	0713      	lsls	r3, r2, #28
 800bab0:	d504      	bpl.n	800babc <_svfiprintf_r+0xc4>
 800bab2:	2353      	movs	r3, #83	; 0x53
 800bab4:	a904      	add	r1, sp, #16
 800bab6:	185b      	adds	r3, r3, r1
 800bab8:	212b      	movs	r1, #43	; 0x2b
 800baba:	7019      	strb	r1, [r3, #0]
 800babc:	7833      	ldrb	r3, [r6, #0]
 800babe:	2b2a      	cmp	r3, #42	; 0x2a
 800bac0:	d016      	beq.n	800baf0 <_svfiprintf_r+0xf8>
 800bac2:	0035      	movs	r5, r6
 800bac4:	2100      	movs	r1, #0
 800bac6:	200a      	movs	r0, #10
 800bac8:	68e3      	ldr	r3, [r4, #12]
 800baca:	782a      	ldrb	r2, [r5, #0]
 800bacc:	1c6e      	adds	r6, r5, #1
 800bace:	3a30      	subs	r2, #48	; 0x30
 800bad0:	2a09      	cmp	r2, #9
 800bad2:	d94e      	bls.n	800bb72 <_svfiprintf_r+0x17a>
 800bad4:	2900      	cmp	r1, #0
 800bad6:	d111      	bne.n	800bafc <_svfiprintf_r+0x104>
 800bad8:	e017      	b.n	800bb0a <_svfiprintf_r+0x112>
 800bada:	3501      	adds	r5, #1
 800badc:	e7b0      	b.n	800ba40 <_svfiprintf_r+0x48>
 800bade:	4b41      	ldr	r3, [pc, #260]	; (800bbe4 <_svfiprintf_r+0x1ec>)
 800bae0:	6822      	ldr	r2, [r4, #0]
 800bae2:	1ac0      	subs	r0, r0, r3
 800bae4:	2301      	movs	r3, #1
 800bae6:	4083      	lsls	r3, r0
 800bae8:	4313      	orrs	r3, r2
 800baea:	002e      	movs	r6, r5
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	e7ce      	b.n	800ba8e <_svfiprintf_r+0x96>
 800baf0:	9b07      	ldr	r3, [sp, #28]
 800baf2:	1d19      	adds	r1, r3, #4
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	9107      	str	r1, [sp, #28]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	db01      	blt.n	800bb00 <_svfiprintf_r+0x108>
 800bafc:	930b      	str	r3, [sp, #44]	; 0x2c
 800bafe:	e004      	b.n	800bb0a <_svfiprintf_r+0x112>
 800bb00:	425b      	negs	r3, r3
 800bb02:	60e3      	str	r3, [r4, #12]
 800bb04:	2302      	movs	r3, #2
 800bb06:	4313      	orrs	r3, r2
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	782b      	ldrb	r3, [r5, #0]
 800bb0c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb0e:	d10a      	bne.n	800bb26 <_svfiprintf_r+0x12e>
 800bb10:	786b      	ldrb	r3, [r5, #1]
 800bb12:	2b2a      	cmp	r3, #42	; 0x2a
 800bb14:	d135      	bne.n	800bb82 <_svfiprintf_r+0x18a>
 800bb16:	9b07      	ldr	r3, [sp, #28]
 800bb18:	3502      	adds	r5, #2
 800bb1a:	1d1a      	adds	r2, r3, #4
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	9207      	str	r2, [sp, #28]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	db2b      	blt.n	800bb7c <_svfiprintf_r+0x184>
 800bb24:	9309      	str	r3, [sp, #36]	; 0x24
 800bb26:	4e30      	ldr	r6, [pc, #192]	; (800bbe8 <_svfiprintf_r+0x1f0>)
 800bb28:	2203      	movs	r2, #3
 800bb2a:	0030      	movs	r0, r6
 800bb2c:	7829      	ldrb	r1, [r5, #0]
 800bb2e:	f7ff fb1d 	bl	800b16c <memchr>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d006      	beq.n	800bb44 <_svfiprintf_r+0x14c>
 800bb36:	2340      	movs	r3, #64	; 0x40
 800bb38:	1b80      	subs	r0, r0, r6
 800bb3a:	4083      	lsls	r3, r0
 800bb3c:	6822      	ldr	r2, [r4, #0]
 800bb3e:	3501      	adds	r5, #1
 800bb40:	4313      	orrs	r3, r2
 800bb42:	6023      	str	r3, [r4, #0]
 800bb44:	7829      	ldrb	r1, [r5, #0]
 800bb46:	2206      	movs	r2, #6
 800bb48:	4828      	ldr	r0, [pc, #160]	; (800bbec <_svfiprintf_r+0x1f4>)
 800bb4a:	1c6e      	adds	r6, r5, #1
 800bb4c:	7621      	strb	r1, [r4, #24]
 800bb4e:	f7ff fb0d 	bl	800b16c <memchr>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d03c      	beq.n	800bbd0 <_svfiprintf_r+0x1d8>
 800bb56:	4b26      	ldr	r3, [pc, #152]	; (800bbf0 <_svfiprintf_r+0x1f8>)
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d125      	bne.n	800bba8 <_svfiprintf_r+0x1b0>
 800bb5c:	2207      	movs	r2, #7
 800bb5e:	9b07      	ldr	r3, [sp, #28]
 800bb60:	3307      	adds	r3, #7
 800bb62:	4393      	bics	r3, r2
 800bb64:	3308      	adds	r3, #8
 800bb66:	9307      	str	r3, [sp, #28]
 800bb68:	6963      	ldr	r3, [r4, #20]
 800bb6a:	9a04      	ldr	r2, [sp, #16]
 800bb6c:	189b      	adds	r3, r3, r2
 800bb6e:	6163      	str	r3, [r4, #20]
 800bb70:	e765      	b.n	800ba3e <_svfiprintf_r+0x46>
 800bb72:	4343      	muls	r3, r0
 800bb74:	0035      	movs	r5, r6
 800bb76:	2101      	movs	r1, #1
 800bb78:	189b      	adds	r3, r3, r2
 800bb7a:	e7a6      	b.n	800baca <_svfiprintf_r+0xd2>
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	425b      	negs	r3, r3
 800bb80:	e7d0      	b.n	800bb24 <_svfiprintf_r+0x12c>
 800bb82:	2300      	movs	r3, #0
 800bb84:	200a      	movs	r0, #10
 800bb86:	001a      	movs	r2, r3
 800bb88:	3501      	adds	r5, #1
 800bb8a:	6063      	str	r3, [r4, #4]
 800bb8c:	7829      	ldrb	r1, [r5, #0]
 800bb8e:	1c6e      	adds	r6, r5, #1
 800bb90:	3930      	subs	r1, #48	; 0x30
 800bb92:	2909      	cmp	r1, #9
 800bb94:	d903      	bls.n	800bb9e <_svfiprintf_r+0x1a6>
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d0c5      	beq.n	800bb26 <_svfiprintf_r+0x12e>
 800bb9a:	9209      	str	r2, [sp, #36]	; 0x24
 800bb9c:	e7c3      	b.n	800bb26 <_svfiprintf_r+0x12e>
 800bb9e:	4342      	muls	r2, r0
 800bba0:	0035      	movs	r5, r6
 800bba2:	2301      	movs	r3, #1
 800bba4:	1852      	adds	r2, r2, r1
 800bba6:	e7f1      	b.n	800bb8c <_svfiprintf_r+0x194>
 800bba8:	ab07      	add	r3, sp, #28
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	003a      	movs	r2, r7
 800bbae:	0021      	movs	r1, r4
 800bbb0:	4b10      	ldr	r3, [pc, #64]	; (800bbf4 <_svfiprintf_r+0x1fc>)
 800bbb2:	9803      	ldr	r0, [sp, #12]
 800bbb4:	f7fd fefa 	bl	80099ac <_printf_float>
 800bbb8:	9004      	str	r0, [sp, #16]
 800bbba:	9b04      	ldr	r3, [sp, #16]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	d1d3      	bne.n	800bb68 <_svfiprintf_r+0x170>
 800bbc0:	89bb      	ldrh	r3, [r7, #12]
 800bbc2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bbc4:	065b      	lsls	r3, r3, #25
 800bbc6:	d400      	bmi.n	800bbca <_svfiprintf_r+0x1d2>
 800bbc8:	e72d      	b.n	800ba26 <_svfiprintf_r+0x2e>
 800bbca:	2001      	movs	r0, #1
 800bbcc:	4240      	negs	r0, r0
 800bbce:	e72a      	b.n	800ba26 <_svfiprintf_r+0x2e>
 800bbd0:	ab07      	add	r3, sp, #28
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	003a      	movs	r2, r7
 800bbd6:	0021      	movs	r1, r4
 800bbd8:	4b06      	ldr	r3, [pc, #24]	; (800bbf4 <_svfiprintf_r+0x1fc>)
 800bbda:	9803      	ldr	r0, [sp, #12]
 800bbdc:	f7fe f998 	bl	8009f10 <_printf_i>
 800bbe0:	e7ea      	b.n	800bbb8 <_svfiprintf_r+0x1c0>
 800bbe2:	46c0      	nop			; (mov r8, r8)
 800bbe4:	0800d2e4 	.word	0x0800d2e4
 800bbe8:	0800d2ea 	.word	0x0800d2ea
 800bbec:	0800d2ee 	.word	0x0800d2ee
 800bbf0:	080099ad 	.word	0x080099ad
 800bbf4:	0800b935 	.word	0x0800b935

0800bbf8 <__sfputc_r>:
 800bbf8:	6893      	ldr	r3, [r2, #8]
 800bbfa:	b510      	push	{r4, lr}
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	6093      	str	r3, [r2, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	da04      	bge.n	800bc0e <__sfputc_r+0x16>
 800bc04:	6994      	ldr	r4, [r2, #24]
 800bc06:	42a3      	cmp	r3, r4
 800bc08:	db07      	blt.n	800bc1a <__sfputc_r+0x22>
 800bc0a:	290a      	cmp	r1, #10
 800bc0c:	d005      	beq.n	800bc1a <__sfputc_r+0x22>
 800bc0e:	6813      	ldr	r3, [r2, #0]
 800bc10:	1c58      	adds	r0, r3, #1
 800bc12:	6010      	str	r0, [r2, #0]
 800bc14:	7019      	strb	r1, [r3, #0]
 800bc16:	0008      	movs	r0, r1
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	f000 f94f 	bl	800bebc <__swbuf_r>
 800bc1e:	0001      	movs	r1, r0
 800bc20:	e7f9      	b.n	800bc16 <__sfputc_r+0x1e>

0800bc22 <__sfputs_r>:
 800bc22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc24:	0006      	movs	r6, r0
 800bc26:	000f      	movs	r7, r1
 800bc28:	0014      	movs	r4, r2
 800bc2a:	18d5      	adds	r5, r2, r3
 800bc2c:	42ac      	cmp	r4, r5
 800bc2e:	d101      	bne.n	800bc34 <__sfputs_r+0x12>
 800bc30:	2000      	movs	r0, #0
 800bc32:	e007      	b.n	800bc44 <__sfputs_r+0x22>
 800bc34:	7821      	ldrb	r1, [r4, #0]
 800bc36:	003a      	movs	r2, r7
 800bc38:	0030      	movs	r0, r6
 800bc3a:	f7ff ffdd 	bl	800bbf8 <__sfputc_r>
 800bc3e:	3401      	adds	r4, #1
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d1f3      	bne.n	800bc2c <__sfputs_r+0xa>
 800bc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc48 <_vfiprintf_r>:
 800bc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4a:	b0a1      	sub	sp, #132	; 0x84
 800bc4c:	0006      	movs	r6, r0
 800bc4e:	000c      	movs	r4, r1
 800bc50:	001f      	movs	r7, r3
 800bc52:	9203      	str	r2, [sp, #12]
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d004      	beq.n	800bc62 <_vfiprintf_r+0x1a>
 800bc58:	6983      	ldr	r3, [r0, #24]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <_vfiprintf_r+0x1a>
 800bc5e:	f000 fb31 	bl	800c2c4 <__sinit>
 800bc62:	4b8e      	ldr	r3, [pc, #568]	; (800be9c <_vfiprintf_r+0x254>)
 800bc64:	429c      	cmp	r4, r3
 800bc66:	d11c      	bne.n	800bca2 <_vfiprintf_r+0x5a>
 800bc68:	6874      	ldr	r4, [r6, #4]
 800bc6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc6c:	07db      	lsls	r3, r3, #31
 800bc6e:	d405      	bmi.n	800bc7c <_vfiprintf_r+0x34>
 800bc70:	89a3      	ldrh	r3, [r4, #12]
 800bc72:	059b      	lsls	r3, r3, #22
 800bc74:	d402      	bmi.n	800bc7c <_vfiprintf_r+0x34>
 800bc76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc78:	f000 fbc5 	bl	800c406 <__retarget_lock_acquire_recursive>
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	071b      	lsls	r3, r3, #28
 800bc80:	d502      	bpl.n	800bc88 <_vfiprintf_r+0x40>
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d11d      	bne.n	800bcc4 <_vfiprintf_r+0x7c>
 800bc88:	0021      	movs	r1, r4
 800bc8a:	0030      	movs	r0, r6
 800bc8c:	f000 f96c 	bl	800bf68 <__swsetup_r>
 800bc90:	2800      	cmp	r0, #0
 800bc92:	d017      	beq.n	800bcc4 <_vfiprintf_r+0x7c>
 800bc94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc96:	07db      	lsls	r3, r3, #31
 800bc98:	d50d      	bpl.n	800bcb6 <_vfiprintf_r+0x6e>
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	4240      	negs	r0, r0
 800bc9e:	b021      	add	sp, #132	; 0x84
 800bca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bca2:	4b7f      	ldr	r3, [pc, #508]	; (800bea0 <_vfiprintf_r+0x258>)
 800bca4:	429c      	cmp	r4, r3
 800bca6:	d101      	bne.n	800bcac <_vfiprintf_r+0x64>
 800bca8:	68b4      	ldr	r4, [r6, #8]
 800bcaa:	e7de      	b.n	800bc6a <_vfiprintf_r+0x22>
 800bcac:	4b7d      	ldr	r3, [pc, #500]	; (800bea4 <_vfiprintf_r+0x25c>)
 800bcae:	429c      	cmp	r4, r3
 800bcb0:	d1db      	bne.n	800bc6a <_vfiprintf_r+0x22>
 800bcb2:	68f4      	ldr	r4, [r6, #12]
 800bcb4:	e7d9      	b.n	800bc6a <_vfiprintf_r+0x22>
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	059b      	lsls	r3, r3, #22
 800bcba:	d4ee      	bmi.n	800bc9a <_vfiprintf_r+0x52>
 800bcbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcbe:	f000 fba3 	bl	800c408 <__retarget_lock_release_recursive>
 800bcc2:	e7ea      	b.n	800bc9a <_vfiprintf_r+0x52>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	ad08      	add	r5, sp, #32
 800bcc8:	616b      	str	r3, [r5, #20]
 800bcca:	3320      	adds	r3, #32
 800bccc:	766b      	strb	r3, [r5, #25]
 800bcce:	3310      	adds	r3, #16
 800bcd0:	76ab      	strb	r3, [r5, #26]
 800bcd2:	9707      	str	r7, [sp, #28]
 800bcd4:	9f03      	ldr	r7, [sp, #12]
 800bcd6:	783b      	ldrb	r3, [r7, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d001      	beq.n	800bce0 <_vfiprintf_r+0x98>
 800bcdc:	2b25      	cmp	r3, #37	; 0x25
 800bcde:	d14e      	bne.n	800bd7e <_vfiprintf_r+0x136>
 800bce0:	9b03      	ldr	r3, [sp, #12]
 800bce2:	1afb      	subs	r3, r7, r3
 800bce4:	9305      	str	r3, [sp, #20]
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	429f      	cmp	r7, r3
 800bcea:	d00d      	beq.n	800bd08 <_vfiprintf_r+0xc0>
 800bcec:	9b05      	ldr	r3, [sp, #20]
 800bcee:	0021      	movs	r1, r4
 800bcf0:	0030      	movs	r0, r6
 800bcf2:	9a03      	ldr	r2, [sp, #12]
 800bcf4:	f7ff ff95 	bl	800bc22 <__sfputs_r>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d100      	bne.n	800bcfe <_vfiprintf_r+0xb6>
 800bcfc:	e0b5      	b.n	800be6a <_vfiprintf_r+0x222>
 800bcfe:	696a      	ldr	r2, [r5, #20]
 800bd00:	9b05      	ldr	r3, [sp, #20]
 800bd02:	4694      	mov	ip, r2
 800bd04:	4463      	add	r3, ip
 800bd06:	616b      	str	r3, [r5, #20]
 800bd08:	783b      	ldrb	r3, [r7, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d100      	bne.n	800bd10 <_vfiprintf_r+0xc8>
 800bd0e:	e0ac      	b.n	800be6a <_vfiprintf_r+0x222>
 800bd10:	2201      	movs	r2, #1
 800bd12:	1c7b      	adds	r3, r7, #1
 800bd14:	9303      	str	r3, [sp, #12]
 800bd16:	2300      	movs	r3, #0
 800bd18:	4252      	negs	r2, r2
 800bd1a:	606a      	str	r2, [r5, #4]
 800bd1c:	a904      	add	r1, sp, #16
 800bd1e:	3254      	adds	r2, #84	; 0x54
 800bd20:	1852      	adds	r2, r2, r1
 800bd22:	602b      	str	r3, [r5, #0]
 800bd24:	60eb      	str	r3, [r5, #12]
 800bd26:	60ab      	str	r3, [r5, #8]
 800bd28:	7013      	strb	r3, [r2, #0]
 800bd2a:	65ab      	str	r3, [r5, #88]	; 0x58
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	2205      	movs	r2, #5
 800bd30:	7819      	ldrb	r1, [r3, #0]
 800bd32:	485d      	ldr	r0, [pc, #372]	; (800bea8 <_vfiprintf_r+0x260>)
 800bd34:	f7ff fa1a 	bl	800b16c <memchr>
 800bd38:	9b03      	ldr	r3, [sp, #12]
 800bd3a:	1c5f      	adds	r7, r3, #1
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d120      	bne.n	800bd82 <_vfiprintf_r+0x13a>
 800bd40:	682a      	ldr	r2, [r5, #0]
 800bd42:	06d3      	lsls	r3, r2, #27
 800bd44:	d504      	bpl.n	800bd50 <_vfiprintf_r+0x108>
 800bd46:	2353      	movs	r3, #83	; 0x53
 800bd48:	a904      	add	r1, sp, #16
 800bd4a:	185b      	adds	r3, r3, r1
 800bd4c:	2120      	movs	r1, #32
 800bd4e:	7019      	strb	r1, [r3, #0]
 800bd50:	0713      	lsls	r3, r2, #28
 800bd52:	d504      	bpl.n	800bd5e <_vfiprintf_r+0x116>
 800bd54:	2353      	movs	r3, #83	; 0x53
 800bd56:	a904      	add	r1, sp, #16
 800bd58:	185b      	adds	r3, r3, r1
 800bd5a:	212b      	movs	r1, #43	; 0x2b
 800bd5c:	7019      	strb	r1, [r3, #0]
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	2b2a      	cmp	r3, #42	; 0x2a
 800bd64:	d016      	beq.n	800bd94 <_vfiprintf_r+0x14c>
 800bd66:	2100      	movs	r1, #0
 800bd68:	68eb      	ldr	r3, [r5, #12]
 800bd6a:	9f03      	ldr	r7, [sp, #12]
 800bd6c:	783a      	ldrb	r2, [r7, #0]
 800bd6e:	1c78      	adds	r0, r7, #1
 800bd70:	3a30      	subs	r2, #48	; 0x30
 800bd72:	4684      	mov	ip, r0
 800bd74:	2a09      	cmp	r2, #9
 800bd76:	d94f      	bls.n	800be18 <_vfiprintf_r+0x1d0>
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	d111      	bne.n	800bda0 <_vfiprintf_r+0x158>
 800bd7c:	e017      	b.n	800bdae <_vfiprintf_r+0x166>
 800bd7e:	3701      	adds	r7, #1
 800bd80:	e7a9      	b.n	800bcd6 <_vfiprintf_r+0x8e>
 800bd82:	4b49      	ldr	r3, [pc, #292]	; (800bea8 <_vfiprintf_r+0x260>)
 800bd84:	682a      	ldr	r2, [r5, #0]
 800bd86:	1ac0      	subs	r0, r0, r3
 800bd88:	2301      	movs	r3, #1
 800bd8a:	4083      	lsls	r3, r0
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	602b      	str	r3, [r5, #0]
 800bd90:	9703      	str	r7, [sp, #12]
 800bd92:	e7cb      	b.n	800bd2c <_vfiprintf_r+0xe4>
 800bd94:	9b07      	ldr	r3, [sp, #28]
 800bd96:	1d19      	adds	r1, r3, #4
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	9107      	str	r1, [sp, #28]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	db01      	blt.n	800bda4 <_vfiprintf_r+0x15c>
 800bda0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bda2:	e004      	b.n	800bdae <_vfiprintf_r+0x166>
 800bda4:	425b      	negs	r3, r3
 800bda6:	60eb      	str	r3, [r5, #12]
 800bda8:	2302      	movs	r3, #2
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	602b      	str	r3, [r5, #0]
 800bdae:	783b      	ldrb	r3, [r7, #0]
 800bdb0:	2b2e      	cmp	r3, #46	; 0x2e
 800bdb2:	d10a      	bne.n	800bdca <_vfiprintf_r+0x182>
 800bdb4:	787b      	ldrb	r3, [r7, #1]
 800bdb6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdb8:	d137      	bne.n	800be2a <_vfiprintf_r+0x1e2>
 800bdba:	9b07      	ldr	r3, [sp, #28]
 800bdbc:	3702      	adds	r7, #2
 800bdbe:	1d1a      	adds	r2, r3, #4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	9207      	str	r2, [sp, #28]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	db2d      	blt.n	800be24 <_vfiprintf_r+0x1dc>
 800bdc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdca:	2203      	movs	r2, #3
 800bdcc:	7839      	ldrb	r1, [r7, #0]
 800bdce:	4837      	ldr	r0, [pc, #220]	; (800beac <_vfiprintf_r+0x264>)
 800bdd0:	f7ff f9cc 	bl	800b16c <memchr>
 800bdd4:	2800      	cmp	r0, #0
 800bdd6:	d007      	beq.n	800bde8 <_vfiprintf_r+0x1a0>
 800bdd8:	4b34      	ldr	r3, [pc, #208]	; (800beac <_vfiprintf_r+0x264>)
 800bdda:	682a      	ldr	r2, [r5, #0]
 800bddc:	1ac0      	subs	r0, r0, r3
 800bdde:	2340      	movs	r3, #64	; 0x40
 800bde0:	4083      	lsls	r3, r0
 800bde2:	4313      	orrs	r3, r2
 800bde4:	3701      	adds	r7, #1
 800bde6:	602b      	str	r3, [r5, #0]
 800bde8:	7839      	ldrb	r1, [r7, #0]
 800bdea:	1c7b      	adds	r3, r7, #1
 800bdec:	2206      	movs	r2, #6
 800bdee:	4830      	ldr	r0, [pc, #192]	; (800beb0 <_vfiprintf_r+0x268>)
 800bdf0:	9303      	str	r3, [sp, #12]
 800bdf2:	7629      	strb	r1, [r5, #24]
 800bdf4:	f7ff f9ba 	bl	800b16c <memchr>
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d045      	beq.n	800be88 <_vfiprintf_r+0x240>
 800bdfc:	4b2d      	ldr	r3, [pc, #180]	; (800beb4 <_vfiprintf_r+0x26c>)
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d127      	bne.n	800be52 <_vfiprintf_r+0x20a>
 800be02:	2207      	movs	r2, #7
 800be04:	9b07      	ldr	r3, [sp, #28]
 800be06:	3307      	adds	r3, #7
 800be08:	4393      	bics	r3, r2
 800be0a:	3308      	adds	r3, #8
 800be0c:	9307      	str	r3, [sp, #28]
 800be0e:	696b      	ldr	r3, [r5, #20]
 800be10:	9a04      	ldr	r2, [sp, #16]
 800be12:	189b      	adds	r3, r3, r2
 800be14:	616b      	str	r3, [r5, #20]
 800be16:	e75d      	b.n	800bcd4 <_vfiprintf_r+0x8c>
 800be18:	210a      	movs	r1, #10
 800be1a:	434b      	muls	r3, r1
 800be1c:	4667      	mov	r7, ip
 800be1e:	189b      	adds	r3, r3, r2
 800be20:	3909      	subs	r1, #9
 800be22:	e7a3      	b.n	800bd6c <_vfiprintf_r+0x124>
 800be24:	2301      	movs	r3, #1
 800be26:	425b      	negs	r3, r3
 800be28:	e7ce      	b.n	800bdc8 <_vfiprintf_r+0x180>
 800be2a:	2300      	movs	r3, #0
 800be2c:	001a      	movs	r2, r3
 800be2e:	3701      	adds	r7, #1
 800be30:	606b      	str	r3, [r5, #4]
 800be32:	7839      	ldrb	r1, [r7, #0]
 800be34:	1c78      	adds	r0, r7, #1
 800be36:	3930      	subs	r1, #48	; 0x30
 800be38:	4684      	mov	ip, r0
 800be3a:	2909      	cmp	r1, #9
 800be3c:	d903      	bls.n	800be46 <_vfiprintf_r+0x1fe>
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d0c3      	beq.n	800bdca <_vfiprintf_r+0x182>
 800be42:	9209      	str	r2, [sp, #36]	; 0x24
 800be44:	e7c1      	b.n	800bdca <_vfiprintf_r+0x182>
 800be46:	230a      	movs	r3, #10
 800be48:	435a      	muls	r2, r3
 800be4a:	4667      	mov	r7, ip
 800be4c:	1852      	adds	r2, r2, r1
 800be4e:	3b09      	subs	r3, #9
 800be50:	e7ef      	b.n	800be32 <_vfiprintf_r+0x1ea>
 800be52:	ab07      	add	r3, sp, #28
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	0022      	movs	r2, r4
 800be58:	0029      	movs	r1, r5
 800be5a:	0030      	movs	r0, r6
 800be5c:	4b16      	ldr	r3, [pc, #88]	; (800beb8 <_vfiprintf_r+0x270>)
 800be5e:	f7fd fda5 	bl	80099ac <_printf_float>
 800be62:	9004      	str	r0, [sp, #16]
 800be64:	9b04      	ldr	r3, [sp, #16]
 800be66:	3301      	adds	r3, #1
 800be68:	d1d1      	bne.n	800be0e <_vfiprintf_r+0x1c6>
 800be6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be6c:	07db      	lsls	r3, r3, #31
 800be6e:	d405      	bmi.n	800be7c <_vfiprintf_r+0x234>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	059b      	lsls	r3, r3, #22
 800be74:	d402      	bmi.n	800be7c <_vfiprintf_r+0x234>
 800be76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be78:	f000 fac6 	bl	800c408 <__retarget_lock_release_recursive>
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	065b      	lsls	r3, r3, #25
 800be80:	d500      	bpl.n	800be84 <_vfiprintf_r+0x23c>
 800be82:	e70a      	b.n	800bc9a <_vfiprintf_r+0x52>
 800be84:	980d      	ldr	r0, [sp, #52]	; 0x34
 800be86:	e70a      	b.n	800bc9e <_vfiprintf_r+0x56>
 800be88:	ab07      	add	r3, sp, #28
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	0022      	movs	r2, r4
 800be8e:	0029      	movs	r1, r5
 800be90:	0030      	movs	r0, r6
 800be92:	4b09      	ldr	r3, [pc, #36]	; (800beb8 <_vfiprintf_r+0x270>)
 800be94:	f7fe f83c 	bl	8009f10 <_printf_i>
 800be98:	e7e3      	b.n	800be62 <_vfiprintf_r+0x21a>
 800be9a:	46c0      	nop			; (mov r8, r8)
 800be9c:	0800d318 	.word	0x0800d318
 800bea0:	0800d338 	.word	0x0800d338
 800bea4:	0800d2f8 	.word	0x0800d2f8
 800bea8:	0800d2e4 	.word	0x0800d2e4
 800beac:	0800d2ea 	.word	0x0800d2ea
 800beb0:	0800d2ee 	.word	0x0800d2ee
 800beb4:	080099ad 	.word	0x080099ad
 800beb8:	0800bc23 	.word	0x0800bc23

0800bebc <__swbuf_r>:
 800bebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bebe:	0005      	movs	r5, r0
 800bec0:	000e      	movs	r6, r1
 800bec2:	0014      	movs	r4, r2
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d004      	beq.n	800bed2 <__swbuf_r+0x16>
 800bec8:	6983      	ldr	r3, [r0, #24]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <__swbuf_r+0x16>
 800bece:	f000 f9f9 	bl	800c2c4 <__sinit>
 800bed2:	4b22      	ldr	r3, [pc, #136]	; (800bf5c <__swbuf_r+0xa0>)
 800bed4:	429c      	cmp	r4, r3
 800bed6:	d12e      	bne.n	800bf36 <__swbuf_r+0x7a>
 800bed8:	686c      	ldr	r4, [r5, #4]
 800beda:	69a3      	ldr	r3, [r4, #24]
 800bedc:	60a3      	str	r3, [r4, #8]
 800bede:	89a3      	ldrh	r3, [r4, #12]
 800bee0:	071b      	lsls	r3, r3, #28
 800bee2:	d532      	bpl.n	800bf4a <__swbuf_r+0x8e>
 800bee4:	6923      	ldr	r3, [r4, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d02f      	beq.n	800bf4a <__swbuf_r+0x8e>
 800beea:	6823      	ldr	r3, [r4, #0]
 800beec:	6922      	ldr	r2, [r4, #16]
 800beee:	b2f7      	uxtb	r7, r6
 800bef0:	1a98      	subs	r0, r3, r2
 800bef2:	6963      	ldr	r3, [r4, #20]
 800bef4:	b2f6      	uxtb	r6, r6
 800bef6:	4283      	cmp	r3, r0
 800bef8:	dc05      	bgt.n	800bf06 <__swbuf_r+0x4a>
 800befa:	0021      	movs	r1, r4
 800befc:	0028      	movs	r0, r5
 800befe:	f000 f93f 	bl	800c180 <_fflush_r>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d127      	bne.n	800bf56 <__swbuf_r+0x9a>
 800bf06:	68a3      	ldr	r3, [r4, #8]
 800bf08:	3001      	adds	r0, #1
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	60a3      	str	r3, [r4, #8]
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	1c5a      	adds	r2, r3, #1
 800bf12:	6022      	str	r2, [r4, #0]
 800bf14:	701f      	strb	r7, [r3, #0]
 800bf16:	6963      	ldr	r3, [r4, #20]
 800bf18:	4283      	cmp	r3, r0
 800bf1a:	d004      	beq.n	800bf26 <__swbuf_r+0x6a>
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	07db      	lsls	r3, r3, #31
 800bf20:	d507      	bpl.n	800bf32 <__swbuf_r+0x76>
 800bf22:	2e0a      	cmp	r6, #10
 800bf24:	d105      	bne.n	800bf32 <__swbuf_r+0x76>
 800bf26:	0021      	movs	r1, r4
 800bf28:	0028      	movs	r0, r5
 800bf2a:	f000 f929 	bl	800c180 <_fflush_r>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d111      	bne.n	800bf56 <__swbuf_r+0x9a>
 800bf32:	0030      	movs	r0, r6
 800bf34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf36:	4b0a      	ldr	r3, [pc, #40]	; (800bf60 <__swbuf_r+0xa4>)
 800bf38:	429c      	cmp	r4, r3
 800bf3a:	d101      	bne.n	800bf40 <__swbuf_r+0x84>
 800bf3c:	68ac      	ldr	r4, [r5, #8]
 800bf3e:	e7cc      	b.n	800beda <__swbuf_r+0x1e>
 800bf40:	4b08      	ldr	r3, [pc, #32]	; (800bf64 <__swbuf_r+0xa8>)
 800bf42:	429c      	cmp	r4, r3
 800bf44:	d1c9      	bne.n	800beda <__swbuf_r+0x1e>
 800bf46:	68ec      	ldr	r4, [r5, #12]
 800bf48:	e7c7      	b.n	800beda <__swbuf_r+0x1e>
 800bf4a:	0021      	movs	r1, r4
 800bf4c:	0028      	movs	r0, r5
 800bf4e:	f000 f80b 	bl	800bf68 <__swsetup_r>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d0c9      	beq.n	800beea <__swbuf_r+0x2e>
 800bf56:	2601      	movs	r6, #1
 800bf58:	4276      	negs	r6, r6
 800bf5a:	e7ea      	b.n	800bf32 <__swbuf_r+0x76>
 800bf5c:	0800d318 	.word	0x0800d318
 800bf60:	0800d338 	.word	0x0800d338
 800bf64:	0800d2f8 	.word	0x0800d2f8

0800bf68 <__swsetup_r>:
 800bf68:	4b37      	ldr	r3, [pc, #220]	; (800c048 <__swsetup_r+0xe0>)
 800bf6a:	b570      	push	{r4, r5, r6, lr}
 800bf6c:	681d      	ldr	r5, [r3, #0]
 800bf6e:	0006      	movs	r6, r0
 800bf70:	000c      	movs	r4, r1
 800bf72:	2d00      	cmp	r5, #0
 800bf74:	d005      	beq.n	800bf82 <__swsetup_r+0x1a>
 800bf76:	69ab      	ldr	r3, [r5, #24]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d102      	bne.n	800bf82 <__swsetup_r+0x1a>
 800bf7c:	0028      	movs	r0, r5
 800bf7e:	f000 f9a1 	bl	800c2c4 <__sinit>
 800bf82:	4b32      	ldr	r3, [pc, #200]	; (800c04c <__swsetup_r+0xe4>)
 800bf84:	429c      	cmp	r4, r3
 800bf86:	d10f      	bne.n	800bfa8 <__swsetup_r+0x40>
 800bf88:	686c      	ldr	r4, [r5, #4]
 800bf8a:	230c      	movs	r3, #12
 800bf8c:	5ee2      	ldrsh	r2, [r4, r3]
 800bf8e:	b293      	uxth	r3, r2
 800bf90:	0711      	lsls	r1, r2, #28
 800bf92:	d42d      	bmi.n	800bff0 <__swsetup_r+0x88>
 800bf94:	06d9      	lsls	r1, r3, #27
 800bf96:	d411      	bmi.n	800bfbc <__swsetup_r+0x54>
 800bf98:	2309      	movs	r3, #9
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	6033      	str	r3, [r6, #0]
 800bf9e:	3337      	adds	r3, #55	; 0x37
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	4240      	negs	r0, r0
 800bfa6:	bd70      	pop	{r4, r5, r6, pc}
 800bfa8:	4b29      	ldr	r3, [pc, #164]	; (800c050 <__swsetup_r+0xe8>)
 800bfaa:	429c      	cmp	r4, r3
 800bfac:	d101      	bne.n	800bfb2 <__swsetup_r+0x4a>
 800bfae:	68ac      	ldr	r4, [r5, #8]
 800bfb0:	e7eb      	b.n	800bf8a <__swsetup_r+0x22>
 800bfb2:	4b28      	ldr	r3, [pc, #160]	; (800c054 <__swsetup_r+0xec>)
 800bfb4:	429c      	cmp	r4, r3
 800bfb6:	d1e8      	bne.n	800bf8a <__swsetup_r+0x22>
 800bfb8:	68ec      	ldr	r4, [r5, #12]
 800bfba:	e7e6      	b.n	800bf8a <__swsetup_r+0x22>
 800bfbc:	075b      	lsls	r3, r3, #29
 800bfbe:	d513      	bpl.n	800bfe8 <__swsetup_r+0x80>
 800bfc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfc2:	2900      	cmp	r1, #0
 800bfc4:	d008      	beq.n	800bfd8 <__swsetup_r+0x70>
 800bfc6:	0023      	movs	r3, r4
 800bfc8:	3344      	adds	r3, #68	; 0x44
 800bfca:	4299      	cmp	r1, r3
 800bfcc:	d002      	beq.n	800bfd4 <__swsetup_r+0x6c>
 800bfce:	0030      	movs	r0, r6
 800bfd0:	f7fd fb60 	bl	8009694 <_free_r>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	6363      	str	r3, [r4, #52]	; 0x34
 800bfd8:	2224      	movs	r2, #36	; 0x24
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	4393      	bics	r3, r2
 800bfde:	81a3      	strh	r3, [r4, #12]
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	6063      	str	r3, [r4, #4]
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	6023      	str	r3, [r4, #0]
 800bfe8:	2308      	movs	r3, #8
 800bfea:	89a2      	ldrh	r2, [r4, #12]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	6923      	ldr	r3, [r4, #16]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10b      	bne.n	800c00e <__swsetup_r+0xa6>
 800bff6:	21a0      	movs	r1, #160	; 0xa0
 800bff8:	2280      	movs	r2, #128	; 0x80
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	0089      	lsls	r1, r1, #2
 800bffe:	0092      	lsls	r2, r2, #2
 800c000:	400b      	ands	r3, r1
 800c002:	4293      	cmp	r3, r2
 800c004:	d003      	beq.n	800c00e <__swsetup_r+0xa6>
 800c006:	0021      	movs	r1, r4
 800c008:	0030      	movs	r0, r6
 800c00a:	f000 fa27 	bl	800c45c <__smakebuf_r>
 800c00e:	220c      	movs	r2, #12
 800c010:	5ea3      	ldrsh	r3, [r4, r2]
 800c012:	2001      	movs	r0, #1
 800c014:	001a      	movs	r2, r3
 800c016:	b299      	uxth	r1, r3
 800c018:	4002      	ands	r2, r0
 800c01a:	4203      	tst	r3, r0
 800c01c:	d00f      	beq.n	800c03e <__swsetup_r+0xd6>
 800c01e:	2200      	movs	r2, #0
 800c020:	60a2      	str	r2, [r4, #8]
 800c022:	6962      	ldr	r2, [r4, #20]
 800c024:	4252      	negs	r2, r2
 800c026:	61a2      	str	r2, [r4, #24]
 800c028:	2000      	movs	r0, #0
 800c02a:	6922      	ldr	r2, [r4, #16]
 800c02c:	4282      	cmp	r2, r0
 800c02e:	d1ba      	bne.n	800bfa6 <__swsetup_r+0x3e>
 800c030:	060a      	lsls	r2, r1, #24
 800c032:	d5b8      	bpl.n	800bfa6 <__swsetup_r+0x3e>
 800c034:	2240      	movs	r2, #64	; 0x40
 800c036:	4313      	orrs	r3, r2
 800c038:	81a3      	strh	r3, [r4, #12]
 800c03a:	3801      	subs	r0, #1
 800c03c:	e7b3      	b.n	800bfa6 <__swsetup_r+0x3e>
 800c03e:	0788      	lsls	r0, r1, #30
 800c040:	d400      	bmi.n	800c044 <__swsetup_r+0xdc>
 800c042:	6962      	ldr	r2, [r4, #20]
 800c044:	60a2      	str	r2, [r4, #8]
 800c046:	e7ef      	b.n	800c028 <__swsetup_r+0xc0>
 800c048:	200000a0 	.word	0x200000a0
 800c04c:	0800d318 	.word	0x0800d318
 800c050:	0800d338 	.word	0x0800d338
 800c054:	0800d2f8 	.word	0x0800d2f8

0800c058 <abort>:
 800c058:	2006      	movs	r0, #6
 800c05a:	b510      	push	{r4, lr}
 800c05c:	f000 fac0 	bl	800c5e0 <raise>
 800c060:	2001      	movs	r0, #1
 800c062:	f7f8 fb65 	bl	8004730 <_exit>
	...

0800c068 <__sflush_r>:
 800c068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c06a:	898b      	ldrh	r3, [r1, #12]
 800c06c:	0005      	movs	r5, r0
 800c06e:	000c      	movs	r4, r1
 800c070:	071a      	lsls	r2, r3, #28
 800c072:	d45f      	bmi.n	800c134 <__sflush_r+0xcc>
 800c074:	684a      	ldr	r2, [r1, #4]
 800c076:	2a00      	cmp	r2, #0
 800c078:	dc04      	bgt.n	800c084 <__sflush_r+0x1c>
 800c07a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c07c:	2a00      	cmp	r2, #0
 800c07e:	dc01      	bgt.n	800c084 <__sflush_r+0x1c>
 800c080:	2000      	movs	r0, #0
 800c082:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c084:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c086:	2f00      	cmp	r7, #0
 800c088:	d0fa      	beq.n	800c080 <__sflush_r+0x18>
 800c08a:	2200      	movs	r2, #0
 800c08c:	2180      	movs	r1, #128	; 0x80
 800c08e:	682e      	ldr	r6, [r5, #0]
 800c090:	602a      	str	r2, [r5, #0]
 800c092:	001a      	movs	r2, r3
 800c094:	0149      	lsls	r1, r1, #5
 800c096:	400a      	ands	r2, r1
 800c098:	420b      	tst	r3, r1
 800c09a:	d034      	beq.n	800c106 <__sflush_r+0x9e>
 800c09c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	075b      	lsls	r3, r3, #29
 800c0a2:	d506      	bpl.n	800c0b2 <__sflush_r+0x4a>
 800c0a4:	6863      	ldr	r3, [r4, #4]
 800c0a6:	1ac0      	subs	r0, r0, r3
 800c0a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <__sflush_r+0x4a>
 800c0ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0b0:	1ac0      	subs	r0, r0, r3
 800c0b2:	0002      	movs	r2, r0
 800c0b4:	6a21      	ldr	r1, [r4, #32]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	0028      	movs	r0, r5
 800c0ba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c0bc:	47b8      	blx	r7
 800c0be:	89a1      	ldrh	r1, [r4, #12]
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d106      	bne.n	800c0d2 <__sflush_r+0x6a>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	2b1d      	cmp	r3, #29
 800c0c8:	d831      	bhi.n	800c12e <__sflush_r+0xc6>
 800c0ca:	4a2c      	ldr	r2, [pc, #176]	; (800c17c <__sflush_r+0x114>)
 800c0cc:	40da      	lsrs	r2, r3
 800c0ce:	07d3      	lsls	r3, r2, #31
 800c0d0:	d52d      	bpl.n	800c12e <__sflush_r+0xc6>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	6063      	str	r3, [r4, #4]
 800c0d6:	6923      	ldr	r3, [r4, #16]
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	04cb      	lsls	r3, r1, #19
 800c0dc:	d505      	bpl.n	800c0ea <__sflush_r+0x82>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	d102      	bne.n	800c0e8 <__sflush_r+0x80>
 800c0e2:	682b      	ldr	r3, [r5, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d100      	bne.n	800c0ea <__sflush_r+0x82>
 800c0e8:	6560      	str	r0, [r4, #84]	; 0x54
 800c0ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0ec:	602e      	str	r6, [r5, #0]
 800c0ee:	2900      	cmp	r1, #0
 800c0f0:	d0c6      	beq.n	800c080 <__sflush_r+0x18>
 800c0f2:	0023      	movs	r3, r4
 800c0f4:	3344      	adds	r3, #68	; 0x44
 800c0f6:	4299      	cmp	r1, r3
 800c0f8:	d002      	beq.n	800c100 <__sflush_r+0x98>
 800c0fa:	0028      	movs	r0, r5
 800c0fc:	f7fd faca 	bl	8009694 <_free_r>
 800c100:	2000      	movs	r0, #0
 800c102:	6360      	str	r0, [r4, #52]	; 0x34
 800c104:	e7bd      	b.n	800c082 <__sflush_r+0x1a>
 800c106:	2301      	movs	r3, #1
 800c108:	0028      	movs	r0, r5
 800c10a:	6a21      	ldr	r1, [r4, #32]
 800c10c:	47b8      	blx	r7
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	d1c5      	bne.n	800c09e <__sflush_r+0x36>
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d0c2      	beq.n	800c09e <__sflush_r+0x36>
 800c118:	2b1d      	cmp	r3, #29
 800c11a:	d001      	beq.n	800c120 <__sflush_r+0xb8>
 800c11c:	2b16      	cmp	r3, #22
 800c11e:	d101      	bne.n	800c124 <__sflush_r+0xbc>
 800c120:	602e      	str	r6, [r5, #0]
 800c122:	e7ad      	b.n	800c080 <__sflush_r+0x18>
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	89a2      	ldrh	r2, [r4, #12]
 800c128:	4313      	orrs	r3, r2
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	e7a9      	b.n	800c082 <__sflush_r+0x1a>
 800c12e:	2340      	movs	r3, #64	; 0x40
 800c130:	430b      	orrs	r3, r1
 800c132:	e7fa      	b.n	800c12a <__sflush_r+0xc2>
 800c134:	690f      	ldr	r7, [r1, #16]
 800c136:	2f00      	cmp	r7, #0
 800c138:	d0a2      	beq.n	800c080 <__sflush_r+0x18>
 800c13a:	680a      	ldr	r2, [r1, #0]
 800c13c:	600f      	str	r7, [r1, #0]
 800c13e:	1bd2      	subs	r2, r2, r7
 800c140:	9201      	str	r2, [sp, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	079b      	lsls	r3, r3, #30
 800c146:	d100      	bne.n	800c14a <__sflush_r+0xe2>
 800c148:	694a      	ldr	r2, [r1, #20]
 800c14a:	60a2      	str	r2, [r4, #8]
 800c14c:	9b01      	ldr	r3, [sp, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dc00      	bgt.n	800c154 <__sflush_r+0xec>
 800c152:	e795      	b.n	800c080 <__sflush_r+0x18>
 800c154:	003a      	movs	r2, r7
 800c156:	0028      	movs	r0, r5
 800c158:	9b01      	ldr	r3, [sp, #4]
 800c15a:	6a21      	ldr	r1, [r4, #32]
 800c15c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c15e:	47b0      	blx	r6
 800c160:	2800      	cmp	r0, #0
 800c162:	dc06      	bgt.n	800c172 <__sflush_r+0x10a>
 800c164:	2340      	movs	r3, #64	; 0x40
 800c166:	2001      	movs	r0, #1
 800c168:	89a2      	ldrh	r2, [r4, #12]
 800c16a:	4240      	negs	r0, r0
 800c16c:	4313      	orrs	r3, r2
 800c16e:	81a3      	strh	r3, [r4, #12]
 800c170:	e787      	b.n	800c082 <__sflush_r+0x1a>
 800c172:	9b01      	ldr	r3, [sp, #4]
 800c174:	183f      	adds	r7, r7, r0
 800c176:	1a1b      	subs	r3, r3, r0
 800c178:	9301      	str	r3, [sp, #4]
 800c17a:	e7e7      	b.n	800c14c <__sflush_r+0xe4>
 800c17c:	20400001 	.word	0x20400001

0800c180 <_fflush_r>:
 800c180:	690b      	ldr	r3, [r1, #16]
 800c182:	b570      	push	{r4, r5, r6, lr}
 800c184:	0005      	movs	r5, r0
 800c186:	000c      	movs	r4, r1
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d102      	bne.n	800c192 <_fflush_r+0x12>
 800c18c:	2500      	movs	r5, #0
 800c18e:	0028      	movs	r0, r5
 800c190:	bd70      	pop	{r4, r5, r6, pc}
 800c192:	2800      	cmp	r0, #0
 800c194:	d004      	beq.n	800c1a0 <_fflush_r+0x20>
 800c196:	6983      	ldr	r3, [r0, #24]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <_fflush_r+0x20>
 800c19c:	f000 f892 	bl	800c2c4 <__sinit>
 800c1a0:	4b14      	ldr	r3, [pc, #80]	; (800c1f4 <_fflush_r+0x74>)
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	d11b      	bne.n	800c1de <_fflush_r+0x5e>
 800c1a6:	686c      	ldr	r4, [r5, #4]
 800c1a8:	220c      	movs	r2, #12
 800c1aa:	5ea3      	ldrsh	r3, [r4, r2]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d0ed      	beq.n	800c18c <_fflush_r+0xc>
 800c1b0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1b2:	07d2      	lsls	r2, r2, #31
 800c1b4:	d404      	bmi.n	800c1c0 <_fflush_r+0x40>
 800c1b6:	059b      	lsls	r3, r3, #22
 800c1b8:	d402      	bmi.n	800c1c0 <_fflush_r+0x40>
 800c1ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1bc:	f000 f923 	bl	800c406 <__retarget_lock_acquire_recursive>
 800c1c0:	0028      	movs	r0, r5
 800c1c2:	0021      	movs	r1, r4
 800c1c4:	f7ff ff50 	bl	800c068 <__sflush_r>
 800c1c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ca:	0005      	movs	r5, r0
 800c1cc:	07db      	lsls	r3, r3, #31
 800c1ce:	d4de      	bmi.n	800c18e <_fflush_r+0xe>
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	059b      	lsls	r3, r3, #22
 800c1d4:	d4db      	bmi.n	800c18e <_fflush_r+0xe>
 800c1d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1d8:	f000 f916 	bl	800c408 <__retarget_lock_release_recursive>
 800c1dc:	e7d7      	b.n	800c18e <_fflush_r+0xe>
 800c1de:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <_fflush_r+0x78>)
 800c1e0:	429c      	cmp	r4, r3
 800c1e2:	d101      	bne.n	800c1e8 <_fflush_r+0x68>
 800c1e4:	68ac      	ldr	r4, [r5, #8]
 800c1e6:	e7df      	b.n	800c1a8 <_fflush_r+0x28>
 800c1e8:	4b04      	ldr	r3, [pc, #16]	; (800c1fc <_fflush_r+0x7c>)
 800c1ea:	429c      	cmp	r4, r3
 800c1ec:	d1dc      	bne.n	800c1a8 <_fflush_r+0x28>
 800c1ee:	68ec      	ldr	r4, [r5, #12]
 800c1f0:	e7da      	b.n	800c1a8 <_fflush_r+0x28>
 800c1f2:	46c0      	nop			; (mov r8, r8)
 800c1f4:	0800d318 	.word	0x0800d318
 800c1f8:	0800d338 	.word	0x0800d338
 800c1fc:	0800d2f8 	.word	0x0800d2f8

0800c200 <std>:
 800c200:	2300      	movs	r3, #0
 800c202:	b510      	push	{r4, lr}
 800c204:	0004      	movs	r4, r0
 800c206:	6003      	str	r3, [r0, #0]
 800c208:	6043      	str	r3, [r0, #4]
 800c20a:	6083      	str	r3, [r0, #8]
 800c20c:	8181      	strh	r1, [r0, #12]
 800c20e:	6643      	str	r3, [r0, #100]	; 0x64
 800c210:	0019      	movs	r1, r3
 800c212:	81c2      	strh	r2, [r0, #14]
 800c214:	6103      	str	r3, [r0, #16]
 800c216:	6143      	str	r3, [r0, #20]
 800c218:	6183      	str	r3, [r0, #24]
 800c21a:	2208      	movs	r2, #8
 800c21c:	305c      	adds	r0, #92	; 0x5c
 800c21e:	f7fd fa30 	bl	8009682 <memset>
 800c222:	4b05      	ldr	r3, [pc, #20]	; (800c238 <std+0x38>)
 800c224:	6224      	str	r4, [r4, #32]
 800c226:	6263      	str	r3, [r4, #36]	; 0x24
 800c228:	4b04      	ldr	r3, [pc, #16]	; (800c23c <std+0x3c>)
 800c22a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c22c:	4b04      	ldr	r3, [pc, #16]	; (800c240 <std+0x40>)
 800c22e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c230:	4b04      	ldr	r3, [pc, #16]	; (800c244 <std+0x44>)
 800c232:	6323      	str	r3, [r4, #48]	; 0x30
 800c234:	bd10      	pop	{r4, pc}
 800c236:	46c0      	nop			; (mov r8, r8)
 800c238:	0800c621 	.word	0x0800c621
 800c23c:	0800c649 	.word	0x0800c649
 800c240:	0800c681 	.word	0x0800c681
 800c244:	0800c6ad 	.word	0x0800c6ad

0800c248 <_cleanup_r>:
 800c248:	b510      	push	{r4, lr}
 800c24a:	4902      	ldr	r1, [pc, #8]	; (800c254 <_cleanup_r+0xc>)
 800c24c:	f000 f8ba 	bl	800c3c4 <_fwalk_reent>
 800c250:	bd10      	pop	{r4, pc}
 800c252:	46c0      	nop			; (mov r8, r8)
 800c254:	0800c181 	.word	0x0800c181

0800c258 <__sfmoreglue>:
 800c258:	b570      	push	{r4, r5, r6, lr}
 800c25a:	2568      	movs	r5, #104	; 0x68
 800c25c:	1e4a      	subs	r2, r1, #1
 800c25e:	4355      	muls	r5, r2
 800c260:	000e      	movs	r6, r1
 800c262:	0029      	movs	r1, r5
 800c264:	3174      	adds	r1, #116	; 0x74
 800c266:	f7fd fa81 	bl	800976c <_malloc_r>
 800c26a:	1e04      	subs	r4, r0, #0
 800c26c:	d008      	beq.n	800c280 <__sfmoreglue+0x28>
 800c26e:	2100      	movs	r1, #0
 800c270:	002a      	movs	r2, r5
 800c272:	6001      	str	r1, [r0, #0]
 800c274:	6046      	str	r6, [r0, #4]
 800c276:	300c      	adds	r0, #12
 800c278:	60a0      	str	r0, [r4, #8]
 800c27a:	3268      	adds	r2, #104	; 0x68
 800c27c:	f7fd fa01 	bl	8009682 <memset>
 800c280:	0020      	movs	r0, r4
 800c282:	bd70      	pop	{r4, r5, r6, pc}

0800c284 <__sfp_lock_acquire>:
 800c284:	b510      	push	{r4, lr}
 800c286:	4802      	ldr	r0, [pc, #8]	; (800c290 <__sfp_lock_acquire+0xc>)
 800c288:	f000 f8bd 	bl	800c406 <__retarget_lock_acquire_recursive>
 800c28c:	bd10      	pop	{r4, pc}
 800c28e:	46c0      	nop			; (mov r8, r8)
 800c290:	200005dd 	.word	0x200005dd

0800c294 <__sfp_lock_release>:
 800c294:	b510      	push	{r4, lr}
 800c296:	4802      	ldr	r0, [pc, #8]	; (800c2a0 <__sfp_lock_release+0xc>)
 800c298:	f000 f8b6 	bl	800c408 <__retarget_lock_release_recursive>
 800c29c:	bd10      	pop	{r4, pc}
 800c29e:	46c0      	nop			; (mov r8, r8)
 800c2a0:	200005dd 	.word	0x200005dd

0800c2a4 <__sinit_lock_acquire>:
 800c2a4:	b510      	push	{r4, lr}
 800c2a6:	4802      	ldr	r0, [pc, #8]	; (800c2b0 <__sinit_lock_acquire+0xc>)
 800c2a8:	f000 f8ad 	bl	800c406 <__retarget_lock_acquire_recursive>
 800c2ac:	bd10      	pop	{r4, pc}
 800c2ae:	46c0      	nop			; (mov r8, r8)
 800c2b0:	200005de 	.word	0x200005de

0800c2b4 <__sinit_lock_release>:
 800c2b4:	b510      	push	{r4, lr}
 800c2b6:	4802      	ldr	r0, [pc, #8]	; (800c2c0 <__sinit_lock_release+0xc>)
 800c2b8:	f000 f8a6 	bl	800c408 <__retarget_lock_release_recursive>
 800c2bc:	bd10      	pop	{r4, pc}
 800c2be:	46c0      	nop			; (mov r8, r8)
 800c2c0:	200005de 	.word	0x200005de

0800c2c4 <__sinit>:
 800c2c4:	b513      	push	{r0, r1, r4, lr}
 800c2c6:	0004      	movs	r4, r0
 800c2c8:	f7ff ffec 	bl	800c2a4 <__sinit_lock_acquire>
 800c2cc:	69a3      	ldr	r3, [r4, #24]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <__sinit+0x14>
 800c2d2:	f7ff ffef 	bl	800c2b4 <__sinit_lock_release>
 800c2d6:	bd13      	pop	{r0, r1, r4, pc}
 800c2d8:	64a3      	str	r3, [r4, #72]	; 0x48
 800c2da:	64e3      	str	r3, [r4, #76]	; 0x4c
 800c2dc:	6523      	str	r3, [r4, #80]	; 0x50
 800c2de:	4b13      	ldr	r3, [pc, #76]	; (800c32c <__sinit+0x68>)
 800c2e0:	4a13      	ldr	r2, [pc, #76]	; (800c330 <__sinit+0x6c>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2e6:	9301      	str	r3, [sp, #4]
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	d101      	bne.n	800c2f0 <__sinit+0x2c>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	61a3      	str	r3, [r4, #24]
 800c2f0:	0020      	movs	r0, r4
 800c2f2:	f000 f81f 	bl	800c334 <__sfp>
 800c2f6:	6060      	str	r0, [r4, #4]
 800c2f8:	0020      	movs	r0, r4
 800c2fa:	f000 f81b 	bl	800c334 <__sfp>
 800c2fe:	60a0      	str	r0, [r4, #8]
 800c300:	0020      	movs	r0, r4
 800c302:	f000 f817 	bl	800c334 <__sfp>
 800c306:	2200      	movs	r2, #0
 800c308:	2104      	movs	r1, #4
 800c30a:	60e0      	str	r0, [r4, #12]
 800c30c:	6860      	ldr	r0, [r4, #4]
 800c30e:	f7ff ff77 	bl	800c200 <std>
 800c312:	2201      	movs	r2, #1
 800c314:	2109      	movs	r1, #9
 800c316:	68a0      	ldr	r0, [r4, #8]
 800c318:	f7ff ff72 	bl	800c200 <std>
 800c31c:	2202      	movs	r2, #2
 800c31e:	2112      	movs	r1, #18
 800c320:	68e0      	ldr	r0, [r4, #12]
 800c322:	f7ff ff6d 	bl	800c200 <std>
 800c326:	2301      	movs	r3, #1
 800c328:	61a3      	str	r3, [r4, #24]
 800c32a:	e7d2      	b.n	800c2d2 <__sinit+0xe>
 800c32c:	0800cf28 	.word	0x0800cf28
 800c330:	0800c249 	.word	0x0800c249

0800c334 <__sfp>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	0007      	movs	r7, r0
 800c338:	f7ff ffa4 	bl	800c284 <__sfp_lock_acquire>
 800c33c:	4b1f      	ldr	r3, [pc, #124]	; (800c3bc <__sfp+0x88>)
 800c33e:	681e      	ldr	r6, [r3, #0]
 800c340:	69b3      	ldr	r3, [r6, #24]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d102      	bne.n	800c34c <__sfp+0x18>
 800c346:	0030      	movs	r0, r6
 800c348:	f7ff ffbc 	bl	800c2c4 <__sinit>
 800c34c:	3648      	adds	r6, #72	; 0x48
 800c34e:	68b4      	ldr	r4, [r6, #8]
 800c350:	6873      	ldr	r3, [r6, #4]
 800c352:	3b01      	subs	r3, #1
 800c354:	d504      	bpl.n	800c360 <__sfp+0x2c>
 800c356:	6833      	ldr	r3, [r6, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d022      	beq.n	800c3a2 <__sfp+0x6e>
 800c35c:	6836      	ldr	r6, [r6, #0]
 800c35e:	e7f6      	b.n	800c34e <__sfp+0x1a>
 800c360:	220c      	movs	r2, #12
 800c362:	5ea5      	ldrsh	r5, [r4, r2]
 800c364:	2d00      	cmp	r5, #0
 800c366:	d11a      	bne.n	800c39e <__sfp+0x6a>
 800c368:	0020      	movs	r0, r4
 800c36a:	4b15      	ldr	r3, [pc, #84]	; (800c3c0 <__sfp+0x8c>)
 800c36c:	3058      	adds	r0, #88	; 0x58
 800c36e:	60e3      	str	r3, [r4, #12]
 800c370:	6665      	str	r5, [r4, #100]	; 0x64
 800c372:	f000 f847 	bl	800c404 <__retarget_lock_init_recursive>
 800c376:	f7ff ff8d 	bl	800c294 <__sfp_lock_release>
 800c37a:	0020      	movs	r0, r4
 800c37c:	2208      	movs	r2, #8
 800c37e:	0029      	movs	r1, r5
 800c380:	6025      	str	r5, [r4, #0]
 800c382:	60a5      	str	r5, [r4, #8]
 800c384:	6065      	str	r5, [r4, #4]
 800c386:	6125      	str	r5, [r4, #16]
 800c388:	6165      	str	r5, [r4, #20]
 800c38a:	61a5      	str	r5, [r4, #24]
 800c38c:	305c      	adds	r0, #92	; 0x5c
 800c38e:	f7fd f978 	bl	8009682 <memset>
 800c392:	6365      	str	r5, [r4, #52]	; 0x34
 800c394:	63a5      	str	r5, [r4, #56]	; 0x38
 800c396:	64a5      	str	r5, [r4, #72]	; 0x48
 800c398:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c39a:	0020      	movs	r0, r4
 800c39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c39e:	3468      	adds	r4, #104	; 0x68
 800c3a0:	e7d7      	b.n	800c352 <__sfp+0x1e>
 800c3a2:	2104      	movs	r1, #4
 800c3a4:	0038      	movs	r0, r7
 800c3a6:	f7ff ff57 	bl	800c258 <__sfmoreglue>
 800c3aa:	1e04      	subs	r4, r0, #0
 800c3ac:	6030      	str	r0, [r6, #0]
 800c3ae:	d1d5      	bne.n	800c35c <__sfp+0x28>
 800c3b0:	f7ff ff70 	bl	800c294 <__sfp_lock_release>
 800c3b4:	230c      	movs	r3, #12
 800c3b6:	603b      	str	r3, [r7, #0]
 800c3b8:	e7ef      	b.n	800c39a <__sfp+0x66>
 800c3ba:	46c0      	nop			; (mov r8, r8)
 800c3bc:	0800cf28 	.word	0x0800cf28
 800c3c0:	ffff0001 	.word	0xffff0001

0800c3c4 <_fwalk_reent>:
 800c3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3c6:	0004      	movs	r4, r0
 800c3c8:	0006      	movs	r6, r0
 800c3ca:	2700      	movs	r7, #0
 800c3cc:	9101      	str	r1, [sp, #4]
 800c3ce:	3448      	adds	r4, #72	; 0x48
 800c3d0:	6863      	ldr	r3, [r4, #4]
 800c3d2:	68a5      	ldr	r5, [r4, #8]
 800c3d4:	9300      	str	r3, [sp, #0]
 800c3d6:	9b00      	ldr	r3, [sp, #0]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	d504      	bpl.n	800c3e8 <_fwalk_reent+0x24>
 800c3de:	6824      	ldr	r4, [r4, #0]
 800c3e0:	2c00      	cmp	r4, #0
 800c3e2:	d1f5      	bne.n	800c3d0 <_fwalk_reent+0xc>
 800c3e4:	0038      	movs	r0, r7
 800c3e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3e8:	89ab      	ldrh	r3, [r5, #12]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d908      	bls.n	800c400 <_fwalk_reent+0x3c>
 800c3ee:	220e      	movs	r2, #14
 800c3f0:	5eab      	ldrsh	r3, [r5, r2]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	d004      	beq.n	800c400 <_fwalk_reent+0x3c>
 800c3f6:	0029      	movs	r1, r5
 800c3f8:	0030      	movs	r0, r6
 800c3fa:	9b01      	ldr	r3, [sp, #4]
 800c3fc:	4798      	blx	r3
 800c3fe:	4307      	orrs	r7, r0
 800c400:	3568      	adds	r5, #104	; 0x68
 800c402:	e7e8      	b.n	800c3d6 <_fwalk_reent+0x12>

0800c404 <__retarget_lock_init_recursive>:
 800c404:	4770      	bx	lr

0800c406 <__retarget_lock_acquire_recursive>:
 800c406:	4770      	bx	lr

0800c408 <__retarget_lock_release_recursive>:
 800c408:	4770      	bx	lr
	...

0800c40c <__swhatbuf_r>:
 800c40c:	b570      	push	{r4, r5, r6, lr}
 800c40e:	000e      	movs	r6, r1
 800c410:	001d      	movs	r5, r3
 800c412:	230e      	movs	r3, #14
 800c414:	5ec9      	ldrsh	r1, [r1, r3]
 800c416:	0014      	movs	r4, r2
 800c418:	b096      	sub	sp, #88	; 0x58
 800c41a:	2900      	cmp	r1, #0
 800c41c:	da08      	bge.n	800c430 <__swhatbuf_r+0x24>
 800c41e:	220c      	movs	r2, #12
 800c420:	5eb3      	ldrsh	r3, [r6, r2]
 800c422:	2200      	movs	r2, #0
 800c424:	602a      	str	r2, [r5, #0]
 800c426:	061b      	lsls	r3, r3, #24
 800c428:	d411      	bmi.n	800c44e <__swhatbuf_r+0x42>
 800c42a:	2380      	movs	r3, #128	; 0x80
 800c42c:	00db      	lsls	r3, r3, #3
 800c42e:	e00f      	b.n	800c450 <__swhatbuf_r+0x44>
 800c430:	466a      	mov	r2, sp
 800c432:	f000 f975 	bl	800c720 <_fstat_r>
 800c436:	2800      	cmp	r0, #0
 800c438:	dbf1      	blt.n	800c41e <__swhatbuf_r+0x12>
 800c43a:	23f0      	movs	r3, #240	; 0xf0
 800c43c:	9901      	ldr	r1, [sp, #4]
 800c43e:	021b      	lsls	r3, r3, #8
 800c440:	4019      	ands	r1, r3
 800c442:	4b05      	ldr	r3, [pc, #20]	; (800c458 <__swhatbuf_r+0x4c>)
 800c444:	18c9      	adds	r1, r1, r3
 800c446:	424b      	negs	r3, r1
 800c448:	4159      	adcs	r1, r3
 800c44a:	6029      	str	r1, [r5, #0]
 800c44c:	e7ed      	b.n	800c42a <__swhatbuf_r+0x1e>
 800c44e:	2340      	movs	r3, #64	; 0x40
 800c450:	2000      	movs	r0, #0
 800c452:	6023      	str	r3, [r4, #0]
 800c454:	b016      	add	sp, #88	; 0x58
 800c456:	bd70      	pop	{r4, r5, r6, pc}
 800c458:	ffffe000 	.word	0xffffe000

0800c45c <__smakebuf_r>:
 800c45c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c45e:	2602      	movs	r6, #2
 800c460:	898b      	ldrh	r3, [r1, #12]
 800c462:	0005      	movs	r5, r0
 800c464:	000c      	movs	r4, r1
 800c466:	4233      	tst	r3, r6
 800c468:	d006      	beq.n	800c478 <__smakebuf_r+0x1c>
 800c46a:	0023      	movs	r3, r4
 800c46c:	3347      	adds	r3, #71	; 0x47
 800c46e:	6023      	str	r3, [r4, #0]
 800c470:	6123      	str	r3, [r4, #16]
 800c472:	2301      	movs	r3, #1
 800c474:	6163      	str	r3, [r4, #20]
 800c476:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c478:	466a      	mov	r2, sp
 800c47a:	ab01      	add	r3, sp, #4
 800c47c:	f7ff ffc6 	bl	800c40c <__swhatbuf_r>
 800c480:	9900      	ldr	r1, [sp, #0]
 800c482:	0007      	movs	r7, r0
 800c484:	0028      	movs	r0, r5
 800c486:	f7fd f971 	bl	800976c <_malloc_r>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d108      	bne.n	800c4a0 <__smakebuf_r+0x44>
 800c48e:	220c      	movs	r2, #12
 800c490:	5ea3      	ldrsh	r3, [r4, r2]
 800c492:	059a      	lsls	r2, r3, #22
 800c494:	d4ef      	bmi.n	800c476 <__smakebuf_r+0x1a>
 800c496:	2203      	movs	r2, #3
 800c498:	4393      	bics	r3, r2
 800c49a:	431e      	orrs	r6, r3
 800c49c:	81a6      	strh	r6, [r4, #12]
 800c49e:	e7e4      	b.n	800c46a <__smakebuf_r+0xe>
 800c4a0:	4b0f      	ldr	r3, [pc, #60]	; (800c4e0 <__smakebuf_r+0x84>)
 800c4a2:	62ab      	str	r3, [r5, #40]	; 0x28
 800c4a4:	2380      	movs	r3, #128	; 0x80
 800c4a6:	89a2      	ldrh	r2, [r4, #12]
 800c4a8:	6020      	str	r0, [r4, #0]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	81a3      	strh	r3, [r4, #12]
 800c4ae:	9b00      	ldr	r3, [sp, #0]
 800c4b0:	6120      	str	r0, [r4, #16]
 800c4b2:	6163      	str	r3, [r4, #20]
 800c4b4:	9b01      	ldr	r3, [sp, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00d      	beq.n	800c4d6 <__smakebuf_r+0x7a>
 800c4ba:	0028      	movs	r0, r5
 800c4bc:	230e      	movs	r3, #14
 800c4be:	5ee1      	ldrsh	r1, [r4, r3]
 800c4c0:	f000 f940 	bl	800c744 <_isatty_r>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	d006      	beq.n	800c4d6 <__smakebuf_r+0x7a>
 800c4c8:	2203      	movs	r2, #3
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	4393      	bics	r3, r2
 800c4ce:	001a      	movs	r2, r3
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	81a3      	strh	r3, [r4, #12]
 800c4d6:	89a0      	ldrh	r0, [r4, #12]
 800c4d8:	4307      	orrs	r7, r0
 800c4da:	81a7      	strh	r7, [r4, #12]
 800c4dc:	e7cb      	b.n	800c476 <__smakebuf_r+0x1a>
 800c4de:	46c0      	nop			; (mov r8, r8)
 800c4e0:	0800c249 	.word	0x0800c249

0800c4e4 <__ascii_mbtowc>:
 800c4e4:	b082      	sub	sp, #8
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	d100      	bne.n	800c4ec <__ascii_mbtowc+0x8>
 800c4ea:	a901      	add	r1, sp, #4
 800c4ec:	1e10      	subs	r0, r2, #0
 800c4ee:	d006      	beq.n	800c4fe <__ascii_mbtowc+0x1a>
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d006      	beq.n	800c502 <__ascii_mbtowc+0x1e>
 800c4f4:	7813      	ldrb	r3, [r2, #0]
 800c4f6:	600b      	str	r3, [r1, #0]
 800c4f8:	7810      	ldrb	r0, [r2, #0]
 800c4fa:	1e43      	subs	r3, r0, #1
 800c4fc:	4198      	sbcs	r0, r3
 800c4fe:	b002      	add	sp, #8
 800c500:	4770      	bx	lr
 800c502:	2002      	movs	r0, #2
 800c504:	4240      	negs	r0, r0
 800c506:	e7fa      	b.n	800c4fe <__ascii_mbtowc+0x1a>

0800c508 <memmove>:
 800c508:	b510      	push	{r4, lr}
 800c50a:	4288      	cmp	r0, r1
 800c50c:	d902      	bls.n	800c514 <memmove+0xc>
 800c50e:	188b      	adds	r3, r1, r2
 800c510:	4298      	cmp	r0, r3
 800c512:	d303      	bcc.n	800c51c <memmove+0x14>
 800c514:	2300      	movs	r3, #0
 800c516:	e007      	b.n	800c528 <memmove+0x20>
 800c518:	5c8b      	ldrb	r3, [r1, r2]
 800c51a:	5483      	strb	r3, [r0, r2]
 800c51c:	3a01      	subs	r2, #1
 800c51e:	d2fb      	bcs.n	800c518 <memmove+0x10>
 800c520:	bd10      	pop	{r4, pc}
 800c522:	5ccc      	ldrb	r4, [r1, r3]
 800c524:	54c4      	strb	r4, [r0, r3]
 800c526:	3301      	adds	r3, #1
 800c528:	429a      	cmp	r2, r3
 800c52a:	d1fa      	bne.n	800c522 <memmove+0x1a>
 800c52c:	e7f8      	b.n	800c520 <memmove+0x18>

0800c52e <_realloc_r>:
 800c52e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c530:	0007      	movs	r7, r0
 800c532:	000e      	movs	r6, r1
 800c534:	0014      	movs	r4, r2
 800c536:	2900      	cmp	r1, #0
 800c538:	d105      	bne.n	800c546 <_realloc_r+0x18>
 800c53a:	0011      	movs	r1, r2
 800c53c:	f7fd f916 	bl	800976c <_malloc_r>
 800c540:	0005      	movs	r5, r0
 800c542:	0028      	movs	r0, r5
 800c544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c546:	2a00      	cmp	r2, #0
 800c548:	d103      	bne.n	800c552 <_realloc_r+0x24>
 800c54a:	f7fd f8a3 	bl	8009694 <_free_r>
 800c54e:	0025      	movs	r5, r4
 800c550:	e7f7      	b.n	800c542 <_realloc_r+0x14>
 800c552:	f000 f91d 	bl	800c790 <_malloc_usable_size_r>
 800c556:	9001      	str	r0, [sp, #4]
 800c558:	4284      	cmp	r4, r0
 800c55a:	d803      	bhi.n	800c564 <_realloc_r+0x36>
 800c55c:	0035      	movs	r5, r6
 800c55e:	0843      	lsrs	r3, r0, #1
 800c560:	42a3      	cmp	r3, r4
 800c562:	d3ee      	bcc.n	800c542 <_realloc_r+0x14>
 800c564:	0021      	movs	r1, r4
 800c566:	0038      	movs	r0, r7
 800c568:	f7fd f900 	bl	800976c <_malloc_r>
 800c56c:	1e05      	subs	r5, r0, #0
 800c56e:	d0e8      	beq.n	800c542 <_realloc_r+0x14>
 800c570:	9b01      	ldr	r3, [sp, #4]
 800c572:	0022      	movs	r2, r4
 800c574:	429c      	cmp	r4, r3
 800c576:	d900      	bls.n	800c57a <_realloc_r+0x4c>
 800c578:	001a      	movs	r2, r3
 800c57a:	0031      	movs	r1, r6
 800c57c:	0028      	movs	r0, r5
 800c57e:	f7fd f877 	bl	8009670 <memcpy>
 800c582:	0031      	movs	r1, r6
 800c584:	0038      	movs	r0, r7
 800c586:	f7fd f885 	bl	8009694 <_free_r>
 800c58a:	e7da      	b.n	800c542 <_realloc_r+0x14>

0800c58c <_raise_r>:
 800c58c:	b570      	push	{r4, r5, r6, lr}
 800c58e:	0004      	movs	r4, r0
 800c590:	000d      	movs	r5, r1
 800c592:	291f      	cmp	r1, #31
 800c594:	d904      	bls.n	800c5a0 <_raise_r+0x14>
 800c596:	2316      	movs	r3, #22
 800c598:	6003      	str	r3, [r0, #0]
 800c59a:	2001      	movs	r0, #1
 800c59c:	4240      	negs	r0, r0
 800c59e:	bd70      	pop	{r4, r5, r6, pc}
 800c5a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d004      	beq.n	800c5b0 <_raise_r+0x24>
 800c5a6:	008a      	lsls	r2, r1, #2
 800c5a8:	189b      	adds	r3, r3, r2
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	2a00      	cmp	r2, #0
 800c5ae:	d108      	bne.n	800c5c2 <_raise_r+0x36>
 800c5b0:	0020      	movs	r0, r4
 800c5b2:	f000 f831 	bl	800c618 <_getpid_r>
 800c5b6:	002a      	movs	r2, r5
 800c5b8:	0001      	movs	r1, r0
 800c5ba:	0020      	movs	r0, r4
 800c5bc:	f000 f81a 	bl	800c5f4 <_kill_r>
 800c5c0:	e7ed      	b.n	800c59e <_raise_r+0x12>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	2a01      	cmp	r2, #1
 800c5c6:	d0ea      	beq.n	800c59e <_raise_r+0x12>
 800c5c8:	1c51      	adds	r1, r2, #1
 800c5ca:	d103      	bne.n	800c5d4 <_raise_r+0x48>
 800c5cc:	2316      	movs	r3, #22
 800c5ce:	3001      	adds	r0, #1
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	e7e4      	b.n	800c59e <_raise_r+0x12>
 800c5d4:	2400      	movs	r4, #0
 800c5d6:	0028      	movs	r0, r5
 800c5d8:	601c      	str	r4, [r3, #0]
 800c5da:	4790      	blx	r2
 800c5dc:	0020      	movs	r0, r4
 800c5de:	e7de      	b.n	800c59e <_raise_r+0x12>

0800c5e0 <raise>:
 800c5e0:	b510      	push	{r4, lr}
 800c5e2:	4b03      	ldr	r3, [pc, #12]	; (800c5f0 <raise+0x10>)
 800c5e4:	0001      	movs	r1, r0
 800c5e6:	6818      	ldr	r0, [r3, #0]
 800c5e8:	f7ff ffd0 	bl	800c58c <_raise_r>
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	46c0      	nop			; (mov r8, r8)
 800c5f0:	200000a0 	.word	0x200000a0

0800c5f4 <_kill_r>:
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	b570      	push	{r4, r5, r6, lr}
 800c5f8:	4d06      	ldr	r5, [pc, #24]	; (800c614 <_kill_r+0x20>)
 800c5fa:	0004      	movs	r4, r0
 800c5fc:	0008      	movs	r0, r1
 800c5fe:	0011      	movs	r1, r2
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	f7f8 f88d 	bl	8004720 <_kill>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d103      	bne.n	800c612 <_kill_r+0x1e>
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d000      	beq.n	800c612 <_kill_r+0x1e>
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	200005d8 	.word	0x200005d8

0800c618 <_getpid_r>:
 800c618:	b510      	push	{r4, lr}
 800c61a:	f7f8 f87f 	bl	800471c <_getpid>
 800c61e:	bd10      	pop	{r4, pc}

0800c620 <__sread>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	000c      	movs	r4, r1
 800c624:	250e      	movs	r5, #14
 800c626:	5f49      	ldrsh	r1, [r1, r5]
 800c628:	f000 f8ba 	bl	800c7a0 <_read_r>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	db03      	blt.n	800c638 <__sread+0x18>
 800c630:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c632:	181b      	adds	r3, r3, r0
 800c634:	6563      	str	r3, [r4, #84]	; 0x54
 800c636:	bd70      	pop	{r4, r5, r6, pc}
 800c638:	89a3      	ldrh	r3, [r4, #12]
 800c63a:	4a02      	ldr	r2, [pc, #8]	; (800c644 <__sread+0x24>)
 800c63c:	4013      	ands	r3, r2
 800c63e:	81a3      	strh	r3, [r4, #12]
 800c640:	e7f9      	b.n	800c636 <__sread+0x16>
 800c642:	46c0      	nop			; (mov r8, r8)
 800c644:	ffffefff 	.word	0xffffefff

0800c648 <__swrite>:
 800c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64a:	001f      	movs	r7, r3
 800c64c:	898b      	ldrh	r3, [r1, #12]
 800c64e:	0005      	movs	r5, r0
 800c650:	000c      	movs	r4, r1
 800c652:	0016      	movs	r6, r2
 800c654:	05db      	lsls	r3, r3, #23
 800c656:	d505      	bpl.n	800c664 <__swrite+0x1c>
 800c658:	230e      	movs	r3, #14
 800c65a:	5ec9      	ldrsh	r1, [r1, r3]
 800c65c:	2200      	movs	r2, #0
 800c65e:	2302      	movs	r3, #2
 800c660:	f000 f882 	bl	800c768 <_lseek_r>
 800c664:	89a3      	ldrh	r3, [r4, #12]
 800c666:	4a05      	ldr	r2, [pc, #20]	; (800c67c <__swrite+0x34>)
 800c668:	0028      	movs	r0, r5
 800c66a:	4013      	ands	r3, r2
 800c66c:	81a3      	strh	r3, [r4, #12]
 800c66e:	0032      	movs	r2, r6
 800c670:	230e      	movs	r3, #14
 800c672:	5ee1      	ldrsh	r1, [r4, r3]
 800c674:	003b      	movs	r3, r7
 800c676:	f000 f82d 	bl	800c6d4 <_write_r>
 800c67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c67c:	ffffefff 	.word	0xffffefff

0800c680 <__sseek>:
 800c680:	b570      	push	{r4, r5, r6, lr}
 800c682:	000c      	movs	r4, r1
 800c684:	250e      	movs	r5, #14
 800c686:	5f49      	ldrsh	r1, [r1, r5]
 800c688:	f000 f86e 	bl	800c768 <_lseek_r>
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	1c42      	adds	r2, r0, #1
 800c690:	d103      	bne.n	800c69a <__sseek+0x1a>
 800c692:	4a05      	ldr	r2, [pc, #20]	; (800c6a8 <__sseek+0x28>)
 800c694:	4013      	ands	r3, r2
 800c696:	81a3      	strh	r3, [r4, #12]
 800c698:	bd70      	pop	{r4, r5, r6, pc}
 800c69a:	2280      	movs	r2, #128	; 0x80
 800c69c:	0152      	lsls	r2, r2, #5
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	6560      	str	r0, [r4, #84]	; 0x54
 800c6a4:	e7f8      	b.n	800c698 <__sseek+0x18>
 800c6a6:	46c0      	nop			; (mov r8, r8)
 800c6a8:	ffffefff 	.word	0xffffefff

0800c6ac <__sclose>:
 800c6ac:	b510      	push	{r4, lr}
 800c6ae:	230e      	movs	r3, #14
 800c6b0:	5ec9      	ldrsh	r1, [r1, r3]
 800c6b2:	f000 f823 	bl	800c6fc <_close_r>
 800c6b6:	bd10      	pop	{r4, pc}

0800c6b8 <__ascii_wctomb>:
 800c6b8:	0003      	movs	r3, r0
 800c6ba:	1e08      	subs	r0, r1, #0
 800c6bc:	d005      	beq.n	800c6ca <__ascii_wctomb+0x12>
 800c6be:	2aff      	cmp	r2, #255	; 0xff
 800c6c0:	d904      	bls.n	800c6cc <__ascii_wctomb+0x14>
 800c6c2:	228a      	movs	r2, #138	; 0x8a
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	4240      	negs	r0, r0
 800c6ca:	4770      	bx	lr
 800c6cc:	2001      	movs	r0, #1
 800c6ce:	700a      	strb	r2, [r1, #0]
 800c6d0:	e7fb      	b.n	800c6ca <__ascii_wctomb+0x12>
	...

0800c6d4 <_write_r>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	0004      	movs	r4, r0
 800c6d8:	0008      	movs	r0, r1
 800c6da:	0011      	movs	r1, r2
 800c6dc:	001a      	movs	r2, r3
 800c6de:	2300      	movs	r3, #0
 800c6e0:	4d05      	ldr	r5, [pc, #20]	; (800c6f8 <_write_r+0x24>)
 800c6e2:	602b      	str	r3, [r5, #0]
 800c6e4:	f7f8 f838 	bl	8004758 <_write>
 800c6e8:	1c43      	adds	r3, r0, #1
 800c6ea:	d103      	bne.n	800c6f4 <_write_r+0x20>
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d000      	beq.n	800c6f4 <_write_r+0x20>
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	bd70      	pop	{r4, r5, r6, pc}
 800c6f6:	46c0      	nop			; (mov r8, r8)
 800c6f8:	200005d8 	.word	0x200005d8

0800c6fc <_close_r>:
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	b570      	push	{r4, r5, r6, lr}
 800c700:	4d06      	ldr	r5, [pc, #24]	; (800c71c <_close_r+0x20>)
 800c702:	0004      	movs	r4, r0
 800c704:	0008      	movs	r0, r1
 800c706:	602b      	str	r3, [r5, #0]
 800c708:	f7f8 f834 	bl	8004774 <_close>
 800c70c:	1c43      	adds	r3, r0, #1
 800c70e:	d103      	bne.n	800c718 <_close_r+0x1c>
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d000      	beq.n	800c718 <_close_r+0x1c>
 800c716:	6023      	str	r3, [r4, #0]
 800c718:	bd70      	pop	{r4, r5, r6, pc}
 800c71a:	46c0      	nop			; (mov r8, r8)
 800c71c:	200005d8 	.word	0x200005d8

0800c720 <_fstat_r>:
 800c720:	2300      	movs	r3, #0
 800c722:	b570      	push	{r4, r5, r6, lr}
 800c724:	4d06      	ldr	r5, [pc, #24]	; (800c740 <_fstat_r+0x20>)
 800c726:	0004      	movs	r4, r0
 800c728:	0008      	movs	r0, r1
 800c72a:	0011      	movs	r1, r2
 800c72c:	602b      	str	r3, [r5, #0]
 800c72e:	f7f8 f825 	bl	800477c <_fstat>
 800c732:	1c43      	adds	r3, r0, #1
 800c734:	d103      	bne.n	800c73e <_fstat_r+0x1e>
 800c736:	682b      	ldr	r3, [r5, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d000      	beq.n	800c73e <_fstat_r+0x1e>
 800c73c:	6023      	str	r3, [r4, #0]
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	200005d8 	.word	0x200005d8

0800c744 <_isatty_r>:
 800c744:	2300      	movs	r3, #0
 800c746:	b570      	push	{r4, r5, r6, lr}
 800c748:	4d06      	ldr	r5, [pc, #24]	; (800c764 <_isatty_r+0x20>)
 800c74a:	0004      	movs	r4, r0
 800c74c:	0008      	movs	r0, r1
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	f7f8 f81a 	bl	8004788 <_isatty>
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d103      	bne.n	800c760 <_isatty_r+0x1c>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d000      	beq.n	800c760 <_isatty_r+0x1c>
 800c75e:	6023      	str	r3, [r4, #0]
 800c760:	bd70      	pop	{r4, r5, r6, pc}
 800c762:	46c0      	nop			; (mov r8, r8)
 800c764:	200005d8 	.word	0x200005d8

0800c768 <_lseek_r>:
 800c768:	b570      	push	{r4, r5, r6, lr}
 800c76a:	0004      	movs	r4, r0
 800c76c:	0008      	movs	r0, r1
 800c76e:	0011      	movs	r1, r2
 800c770:	001a      	movs	r2, r3
 800c772:	2300      	movs	r3, #0
 800c774:	4d05      	ldr	r5, [pc, #20]	; (800c78c <_lseek_r+0x24>)
 800c776:	602b      	str	r3, [r5, #0]
 800c778:	f7f8 f808 	bl	800478c <_lseek>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d103      	bne.n	800c788 <_lseek_r+0x20>
 800c780:	682b      	ldr	r3, [r5, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d000      	beq.n	800c788 <_lseek_r+0x20>
 800c786:	6023      	str	r3, [r4, #0]
 800c788:	bd70      	pop	{r4, r5, r6, pc}
 800c78a:	46c0      	nop			; (mov r8, r8)
 800c78c:	200005d8 	.word	0x200005d8

0800c790 <_malloc_usable_size_r>:
 800c790:	1f0b      	subs	r3, r1, #4
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	1f18      	subs	r0, r3, #4
 800c796:	2b00      	cmp	r3, #0
 800c798:	da01      	bge.n	800c79e <_malloc_usable_size_r+0xe>
 800c79a:	580b      	ldr	r3, [r1, r0]
 800c79c:	18c0      	adds	r0, r0, r3
 800c79e:	4770      	bx	lr

0800c7a0 <_read_r>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	0004      	movs	r4, r0
 800c7a4:	0008      	movs	r0, r1
 800c7a6:	0011      	movs	r1, r2
 800c7a8:	001a      	movs	r2, r3
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	4d05      	ldr	r5, [pc, #20]	; (800c7c4 <_read_r+0x24>)
 800c7ae:	602b      	str	r3, [r5, #0]
 800c7b0:	f7f7 ffc4 	bl	800473c <_read>
 800c7b4:	1c43      	adds	r3, r0, #1
 800c7b6:	d103      	bne.n	800c7c0 <_read_r+0x20>
 800c7b8:	682b      	ldr	r3, [r5, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d000      	beq.n	800c7c0 <_read_r+0x20>
 800c7be:	6023      	str	r3, [r4, #0]
 800c7c0:	bd70      	pop	{r4, r5, r6, pc}
 800c7c2:	46c0      	nop			; (mov r8, r8)
 800c7c4:	200005d8 	.word	0x200005d8

0800c7c8 <log>:
 800c7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ca:	0004      	movs	r4, r0
 800c7cc:	000d      	movs	r5, r1
 800c7ce:	f000 f831 	bl	800c834 <__ieee754_log>
 800c7d2:	0022      	movs	r2, r4
 800c7d4:	0006      	movs	r6, r0
 800c7d6:	000f      	movs	r7, r1
 800c7d8:	002b      	movs	r3, r5
 800c7da:	0020      	movs	r0, r4
 800c7dc:	0029      	movs	r1, r5
 800c7de:	f7f6 fac5 	bl	8002d6c <__aeabi_dcmpun>
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d115      	bne.n	800c812 <log+0x4a>
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	0020      	movs	r0, r4
 800c7ec:	0029      	movs	r1, r5
 800c7ee:	f7f3 fe4b 	bl	8000488 <__aeabi_dcmpgt>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d10d      	bne.n	800c812 <log+0x4a>
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	0020      	movs	r0, r4
 800c7fc:	0029      	movs	r1, r5
 800c7fe:	f7f3 fe29 	bl	8000454 <__aeabi_dcmpeq>
 800c802:	2800      	cmp	r0, #0
 800c804:	d008      	beq.n	800c818 <log+0x50>
 800c806:	f7fc feff 	bl	8009608 <__errno>
 800c80a:	2322      	movs	r3, #34	; 0x22
 800c80c:	2600      	movs	r6, #0
 800c80e:	4f07      	ldr	r7, [pc, #28]	; (800c82c <log+0x64>)
 800c810:	6003      	str	r3, [r0, #0]
 800c812:	0030      	movs	r0, r6
 800c814:	0039      	movs	r1, r7
 800c816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c818:	f7fc fef6 	bl	8009608 <__errno>
 800c81c:	2321      	movs	r3, #33	; 0x21
 800c81e:	6003      	str	r3, [r0, #0]
 800c820:	4803      	ldr	r0, [pc, #12]	; (800c830 <log+0x68>)
 800c822:	f000 f9b7 	bl	800cb94 <nan>
 800c826:	0006      	movs	r6, r0
 800c828:	000f      	movs	r7, r1
 800c82a:	e7f2      	b.n	800c812 <log+0x4a>
 800c82c:	fff00000 	.word	0xfff00000
 800c830:	0800d00f 	.word	0x0800d00f

0800c834 <__ieee754_log>:
 800c834:	2280      	movs	r2, #128	; 0x80
 800c836:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c838:	000b      	movs	r3, r1
 800c83a:	b08d      	sub	sp, #52	; 0x34
 800c83c:	0352      	lsls	r2, r2, #13
 800c83e:	4291      	cmp	r1, r2
 800c840:	da22      	bge.n	800c888 <__ieee754_log+0x54>
 800c842:	004a      	lsls	r2, r1, #1
 800c844:	0852      	lsrs	r2, r2, #1
 800c846:	4302      	orrs	r2, r0
 800c848:	d107      	bne.n	800c85a <__ieee754_log+0x26>
 800c84a:	2200      	movs	r2, #0
 800c84c:	2300      	movs	r3, #0
 800c84e:	2000      	movs	r0, #0
 800c850:	49b3      	ldr	r1, [pc, #716]	; (800cb20 <__ieee754_log+0x2ec>)
 800c852:	f7f5 f88b 	bl	800196c <__aeabi_ddiv>
 800c856:	b00d      	add	sp, #52	; 0x34
 800c858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c85a:	2900      	cmp	r1, #0
 800c85c:	da05      	bge.n	800c86a <__ieee754_log+0x36>
 800c85e:	0002      	movs	r2, r0
 800c860:	f7f5 fef2 	bl	8002648 <__aeabi_dsub>
 800c864:	2200      	movs	r2, #0
 800c866:	2300      	movs	r3, #0
 800c868:	e7f3      	b.n	800c852 <__ieee754_log+0x1e>
 800c86a:	4bae      	ldr	r3, [pc, #696]	; (800cb24 <__ieee754_log+0x2f0>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	f7f5 fc7f 	bl	8002170 <__aeabi_dmul>
 800c872:	2436      	movs	r4, #54	; 0x36
 800c874:	000b      	movs	r3, r1
 800c876:	4264      	negs	r4, r4
 800c878:	4aab      	ldr	r2, [pc, #684]	; (800cb28 <__ieee754_log+0x2f4>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	dd06      	ble.n	800c88c <__ieee754_log+0x58>
 800c87e:	0002      	movs	r2, r0
 800c880:	000b      	movs	r3, r1
 800c882:	f7f4 fd37 	bl	80012f4 <__aeabi_dadd>
 800c886:	e7e6      	b.n	800c856 <__ieee754_log+0x22>
 800c888:	2400      	movs	r4, #0
 800c88a:	e7f5      	b.n	800c878 <__ieee754_log+0x44>
 800c88c:	4da7      	ldr	r5, [pc, #668]	; (800cb2c <__ieee754_log+0x2f8>)
 800c88e:	151a      	asrs	r2, r3, #20
 800c890:	1952      	adds	r2, r2, r5
 800c892:	1912      	adds	r2, r2, r4
 800c894:	031b      	lsls	r3, r3, #12
 800c896:	4ca6      	ldr	r4, [pc, #664]	; (800cb30 <__ieee754_log+0x2fc>)
 800c898:	0b1b      	lsrs	r3, r3, #12
 800c89a:	9302      	str	r3, [sp, #8]
 800c89c:	191c      	adds	r4, r3, r4
 800c89e:	2380      	movs	r3, #128	; 0x80
 800c8a0:	035b      	lsls	r3, r3, #13
 800c8a2:	4023      	ands	r3, r4
 800c8a4:	4ca3      	ldr	r4, [pc, #652]	; (800cb34 <__ieee754_log+0x300>)
 800c8a6:	9d02      	ldr	r5, [sp, #8]
 800c8a8:	405c      	eors	r4, r3
 800c8aa:	151b      	asrs	r3, r3, #20
 800c8ac:	189b      	adds	r3, r3, r2
 800c8ae:	4325      	orrs	r5, r4
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	9300      	str	r3, [sp, #0]
 800c8b4:	0029      	movs	r1, r5
 800c8b6:	4b9f      	ldr	r3, [pc, #636]	; (800cb34 <__ieee754_log+0x300>)
 800c8b8:	f7f5 fec6 	bl	8002648 <__aeabi_dsub>
 800c8bc:	9b02      	ldr	r3, [sp, #8]
 800c8be:	0006      	movs	r6, r0
 800c8c0:	3302      	adds	r3, #2
 800c8c2:	031b      	lsls	r3, r3, #12
 800c8c4:	000f      	movs	r7, r1
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	0b1b      	lsrs	r3, r3, #12
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	dc64      	bgt.n	800c998 <__ieee754_log+0x164>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	f7f3 fdc0 	bl	8000454 <__aeabi_dcmpeq>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	d019      	beq.n	800c90c <__ieee754_log+0xd8>
 800c8d8:	9b00      	ldr	r3, [sp, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d100      	bne.n	800c8e0 <__ieee754_log+0xac>
 800c8de:	e11c      	b.n	800cb1a <__ieee754_log+0x2e6>
 800c8e0:	0018      	movs	r0, r3
 800c8e2:	f7f6 fa97 	bl	8002e14 <__aeabi_i2d>
 800c8e6:	4a94      	ldr	r2, [pc, #592]	; (800cb38 <__ieee754_log+0x304>)
 800c8e8:	4b94      	ldr	r3, [pc, #592]	; (800cb3c <__ieee754_log+0x308>)
 800c8ea:	0004      	movs	r4, r0
 800c8ec:	000d      	movs	r5, r1
 800c8ee:	f7f5 fc3f 	bl	8002170 <__aeabi_dmul>
 800c8f2:	4a93      	ldr	r2, [pc, #588]	; (800cb40 <__ieee754_log+0x30c>)
 800c8f4:	0006      	movs	r6, r0
 800c8f6:	000f      	movs	r7, r1
 800c8f8:	4b92      	ldr	r3, [pc, #584]	; (800cb44 <__ieee754_log+0x310>)
 800c8fa:	0020      	movs	r0, r4
 800c8fc:	0029      	movs	r1, r5
 800c8fe:	f7f5 fc37 	bl	8002170 <__aeabi_dmul>
 800c902:	0002      	movs	r2, r0
 800c904:	000b      	movs	r3, r1
 800c906:	0030      	movs	r0, r6
 800c908:	0039      	movs	r1, r7
 800c90a:	e7ba      	b.n	800c882 <__ieee754_log+0x4e>
 800c90c:	4a8e      	ldr	r2, [pc, #568]	; (800cb48 <__ieee754_log+0x314>)
 800c90e:	4b8f      	ldr	r3, [pc, #572]	; (800cb4c <__ieee754_log+0x318>)
 800c910:	0030      	movs	r0, r6
 800c912:	0039      	movs	r1, r7
 800c914:	f7f5 fc2c 	bl	8002170 <__aeabi_dmul>
 800c918:	0002      	movs	r2, r0
 800c91a:	000b      	movs	r3, r1
 800c91c:	2000      	movs	r0, #0
 800c91e:	498c      	ldr	r1, [pc, #560]	; (800cb50 <__ieee754_log+0x31c>)
 800c920:	f7f5 fe92 	bl	8002648 <__aeabi_dsub>
 800c924:	0032      	movs	r2, r6
 800c926:	0004      	movs	r4, r0
 800c928:	000d      	movs	r5, r1
 800c92a:	003b      	movs	r3, r7
 800c92c:	0030      	movs	r0, r6
 800c92e:	0039      	movs	r1, r7
 800c930:	f7f5 fc1e 	bl	8002170 <__aeabi_dmul>
 800c934:	000b      	movs	r3, r1
 800c936:	0002      	movs	r2, r0
 800c938:	0029      	movs	r1, r5
 800c93a:	0020      	movs	r0, r4
 800c93c:	f7f5 fc18 	bl	8002170 <__aeabi_dmul>
 800c940:	9b00      	ldr	r3, [sp, #0]
 800c942:	9002      	str	r0, [sp, #8]
 800c944:	9103      	str	r1, [sp, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d106      	bne.n	800c958 <__ieee754_log+0x124>
 800c94a:	0002      	movs	r2, r0
 800c94c:	000b      	movs	r3, r1
 800c94e:	0030      	movs	r0, r6
 800c950:	0039      	movs	r1, r7
 800c952:	f7f5 fe79 	bl	8002648 <__aeabi_dsub>
 800c956:	e77e      	b.n	800c856 <__ieee754_log+0x22>
 800c958:	9800      	ldr	r0, [sp, #0]
 800c95a:	f7f6 fa5b 	bl	8002e14 <__aeabi_i2d>
 800c95e:	4a76      	ldr	r2, [pc, #472]	; (800cb38 <__ieee754_log+0x304>)
 800c960:	4b76      	ldr	r3, [pc, #472]	; (800cb3c <__ieee754_log+0x308>)
 800c962:	0004      	movs	r4, r0
 800c964:	000d      	movs	r5, r1
 800c966:	f7f5 fc03 	bl	8002170 <__aeabi_dmul>
 800c96a:	4a75      	ldr	r2, [pc, #468]	; (800cb40 <__ieee754_log+0x30c>)
 800c96c:	9000      	str	r0, [sp, #0]
 800c96e:	9101      	str	r1, [sp, #4]
 800c970:	4b74      	ldr	r3, [pc, #464]	; (800cb44 <__ieee754_log+0x310>)
 800c972:	0020      	movs	r0, r4
 800c974:	0029      	movs	r1, r5
 800c976:	f7f5 fbfb 	bl	8002170 <__aeabi_dmul>
 800c97a:	0002      	movs	r2, r0
 800c97c:	000b      	movs	r3, r1
 800c97e:	9802      	ldr	r0, [sp, #8]
 800c980:	9903      	ldr	r1, [sp, #12]
 800c982:	f7f5 fe61 	bl	8002648 <__aeabi_dsub>
 800c986:	0032      	movs	r2, r6
 800c988:	003b      	movs	r3, r7
 800c98a:	f7f5 fe5d 	bl	8002648 <__aeabi_dsub>
 800c98e:	0002      	movs	r2, r0
 800c990:	000b      	movs	r3, r1
 800c992:	9800      	ldr	r0, [sp, #0]
 800c994:	9901      	ldr	r1, [sp, #4]
 800c996:	e7dc      	b.n	800c952 <__ieee754_log+0x11e>
 800c998:	2380      	movs	r3, #128	; 0x80
 800c99a:	05db      	lsls	r3, r3, #23
 800c99c:	f7f4 fcaa 	bl	80012f4 <__aeabi_dadd>
 800c9a0:	0002      	movs	r2, r0
 800c9a2:	000b      	movs	r3, r1
 800c9a4:	0030      	movs	r0, r6
 800c9a6:	0039      	movs	r1, r7
 800c9a8:	f7f4 ffe0 	bl	800196c <__aeabi_ddiv>
 800c9ac:	9004      	str	r0, [sp, #16]
 800c9ae:	9105      	str	r1, [sp, #20]
 800c9b0:	9800      	ldr	r0, [sp, #0]
 800c9b2:	f7f6 fa2f 	bl	8002e14 <__aeabi_i2d>
 800c9b6:	9a04      	ldr	r2, [sp, #16]
 800c9b8:	9b05      	ldr	r3, [sp, #20]
 800c9ba:	9006      	str	r0, [sp, #24]
 800c9bc:	9107      	str	r1, [sp, #28]
 800c9be:	0010      	movs	r0, r2
 800c9c0:	0019      	movs	r1, r3
 800c9c2:	f7f5 fbd5 	bl	8002170 <__aeabi_dmul>
 800c9c6:	4a63      	ldr	r2, [pc, #396]	; (800cb54 <__ieee754_log+0x320>)
 800c9c8:	9b02      	ldr	r3, [sp, #8]
 800c9ca:	4694      	mov	ip, r2
 800c9cc:	4463      	add	r3, ip
 800c9ce:	0002      	movs	r2, r0
 800c9d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c9d2:	000b      	movs	r3, r1
 800c9d4:	9008      	str	r0, [sp, #32]
 800c9d6:	9109      	str	r1, [sp, #36]	; 0x24
 800c9d8:	f7f5 fbca 	bl	8002170 <__aeabi_dmul>
 800c9dc:	0004      	movs	r4, r0
 800c9de:	000d      	movs	r5, r1
 800c9e0:	4a5d      	ldr	r2, [pc, #372]	; (800cb58 <__ieee754_log+0x324>)
 800c9e2:	4b5e      	ldr	r3, [pc, #376]	; (800cb5c <__ieee754_log+0x328>)
 800c9e4:	f7f5 fbc4 	bl	8002170 <__aeabi_dmul>
 800c9e8:	4a5d      	ldr	r2, [pc, #372]	; (800cb60 <__ieee754_log+0x32c>)
 800c9ea:	4b5e      	ldr	r3, [pc, #376]	; (800cb64 <__ieee754_log+0x330>)
 800c9ec:	f7f4 fc82 	bl	80012f4 <__aeabi_dadd>
 800c9f0:	0022      	movs	r2, r4
 800c9f2:	002b      	movs	r3, r5
 800c9f4:	f7f5 fbbc 	bl	8002170 <__aeabi_dmul>
 800c9f8:	4a5b      	ldr	r2, [pc, #364]	; (800cb68 <__ieee754_log+0x334>)
 800c9fa:	4b5c      	ldr	r3, [pc, #368]	; (800cb6c <__ieee754_log+0x338>)
 800c9fc:	f7f4 fc7a 	bl	80012f4 <__aeabi_dadd>
 800ca00:	0022      	movs	r2, r4
 800ca02:	002b      	movs	r3, r5
 800ca04:	f7f5 fbb4 	bl	8002170 <__aeabi_dmul>
 800ca08:	4a59      	ldr	r2, [pc, #356]	; (800cb70 <__ieee754_log+0x33c>)
 800ca0a:	4b5a      	ldr	r3, [pc, #360]	; (800cb74 <__ieee754_log+0x340>)
 800ca0c:	f7f4 fc72 	bl	80012f4 <__aeabi_dadd>
 800ca10:	9a08      	ldr	r2, [sp, #32]
 800ca12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca14:	f7f5 fbac 	bl	8002170 <__aeabi_dmul>
 800ca18:	4a57      	ldr	r2, [pc, #348]	; (800cb78 <__ieee754_log+0x344>)
 800ca1a:	9008      	str	r0, [sp, #32]
 800ca1c:	9109      	str	r1, [sp, #36]	; 0x24
 800ca1e:	4b57      	ldr	r3, [pc, #348]	; (800cb7c <__ieee754_log+0x348>)
 800ca20:	0020      	movs	r0, r4
 800ca22:	0029      	movs	r1, r5
 800ca24:	f7f5 fba4 	bl	8002170 <__aeabi_dmul>
 800ca28:	4a55      	ldr	r2, [pc, #340]	; (800cb80 <__ieee754_log+0x34c>)
 800ca2a:	4b56      	ldr	r3, [pc, #344]	; (800cb84 <__ieee754_log+0x350>)
 800ca2c:	f7f4 fc62 	bl	80012f4 <__aeabi_dadd>
 800ca30:	0022      	movs	r2, r4
 800ca32:	002b      	movs	r3, r5
 800ca34:	f7f5 fb9c 	bl	8002170 <__aeabi_dmul>
 800ca38:	4a53      	ldr	r2, [pc, #332]	; (800cb88 <__ieee754_log+0x354>)
 800ca3a:	4b54      	ldr	r3, [pc, #336]	; (800cb8c <__ieee754_log+0x358>)
 800ca3c:	f7f4 fc5a 	bl	80012f4 <__aeabi_dadd>
 800ca40:	0022      	movs	r2, r4
 800ca42:	002b      	movs	r3, r5
 800ca44:	f7f5 fb94 	bl	8002170 <__aeabi_dmul>
 800ca48:	0002      	movs	r2, r0
 800ca4a:	000b      	movs	r3, r1
 800ca4c:	9808      	ldr	r0, [sp, #32]
 800ca4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca50:	f7f4 fc50 	bl	80012f4 <__aeabi_dadd>
 800ca54:	9a02      	ldr	r2, [sp, #8]
 800ca56:	4b4e      	ldr	r3, [pc, #312]	; (800cb90 <__ieee754_log+0x35c>)
 800ca58:	0004      	movs	r4, r0
 800ca5a:	1a9b      	subs	r3, r3, r2
 800ca5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca5e:	000d      	movs	r5, r1
 800ca60:	4313      	orrs	r3, r2
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	dd34      	ble.n	800cad0 <__ieee754_log+0x29c>
 800ca66:	2200      	movs	r2, #0
 800ca68:	4b39      	ldr	r3, [pc, #228]	; (800cb50 <__ieee754_log+0x31c>)
 800ca6a:	0030      	movs	r0, r6
 800ca6c:	0039      	movs	r1, r7
 800ca6e:	f7f5 fb7f 	bl	8002170 <__aeabi_dmul>
 800ca72:	0032      	movs	r2, r6
 800ca74:	003b      	movs	r3, r7
 800ca76:	f7f5 fb7b 	bl	8002170 <__aeabi_dmul>
 800ca7a:	0002      	movs	r2, r0
 800ca7c:	000b      	movs	r3, r1
 800ca7e:	9002      	str	r0, [sp, #8]
 800ca80:	9103      	str	r1, [sp, #12]
 800ca82:	0020      	movs	r0, r4
 800ca84:	0029      	movs	r1, r5
 800ca86:	f7f4 fc35 	bl	80012f4 <__aeabi_dadd>
 800ca8a:	9a04      	ldr	r2, [sp, #16]
 800ca8c:	9b05      	ldr	r3, [sp, #20]
 800ca8e:	f7f5 fb6f 	bl	8002170 <__aeabi_dmul>
 800ca92:	9b00      	ldr	r3, [sp, #0]
 800ca94:	0004      	movs	r4, r0
 800ca96:	000d      	movs	r5, r1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d106      	bne.n	800caaa <__ieee754_log+0x276>
 800ca9c:	0002      	movs	r2, r0
 800ca9e:	000b      	movs	r3, r1
 800caa0:	9802      	ldr	r0, [sp, #8]
 800caa2:	9903      	ldr	r1, [sp, #12]
 800caa4:	f7f5 fdd0 	bl	8002648 <__aeabi_dsub>
 800caa8:	e74f      	b.n	800c94a <__ieee754_log+0x116>
 800caaa:	4a23      	ldr	r2, [pc, #140]	; (800cb38 <__ieee754_log+0x304>)
 800caac:	4b23      	ldr	r3, [pc, #140]	; (800cb3c <__ieee754_log+0x308>)
 800caae:	9806      	ldr	r0, [sp, #24]
 800cab0:	9907      	ldr	r1, [sp, #28]
 800cab2:	f7f5 fb5d 	bl	8002170 <__aeabi_dmul>
 800cab6:	4a22      	ldr	r2, [pc, #136]	; (800cb40 <__ieee754_log+0x30c>)
 800cab8:	9000      	str	r0, [sp, #0]
 800caba:	9101      	str	r1, [sp, #4]
 800cabc:	9806      	ldr	r0, [sp, #24]
 800cabe:	9907      	ldr	r1, [sp, #28]
 800cac0:	4b20      	ldr	r3, [pc, #128]	; (800cb44 <__ieee754_log+0x310>)
 800cac2:	f7f5 fb55 	bl	8002170 <__aeabi_dmul>
 800cac6:	0022      	movs	r2, r4
 800cac8:	002b      	movs	r3, r5
 800caca:	f7f4 fc13 	bl	80012f4 <__aeabi_dadd>
 800cace:	e754      	b.n	800c97a <__ieee754_log+0x146>
 800cad0:	0002      	movs	r2, r0
 800cad2:	000b      	movs	r3, r1
 800cad4:	0030      	movs	r0, r6
 800cad6:	0039      	movs	r1, r7
 800cad8:	f7f5 fdb6 	bl	8002648 <__aeabi_dsub>
 800cadc:	9a04      	ldr	r2, [sp, #16]
 800cade:	9b05      	ldr	r3, [sp, #20]
 800cae0:	f7f5 fb46 	bl	8002170 <__aeabi_dmul>
 800cae4:	9b00      	ldr	r3, [sp, #0]
 800cae6:	0004      	movs	r4, r0
 800cae8:	000d      	movs	r5, r1
 800caea:	2b00      	cmp	r3, #0
 800caec:	d102      	bne.n	800caf4 <__ieee754_log+0x2c0>
 800caee:	0002      	movs	r2, r0
 800caf0:	000b      	movs	r3, r1
 800caf2:	e72c      	b.n	800c94e <__ieee754_log+0x11a>
 800caf4:	4a10      	ldr	r2, [pc, #64]	; (800cb38 <__ieee754_log+0x304>)
 800caf6:	4b11      	ldr	r3, [pc, #68]	; (800cb3c <__ieee754_log+0x308>)
 800caf8:	9806      	ldr	r0, [sp, #24]
 800cafa:	9907      	ldr	r1, [sp, #28]
 800cafc:	f7f5 fb38 	bl	8002170 <__aeabi_dmul>
 800cb00:	4a0f      	ldr	r2, [pc, #60]	; (800cb40 <__ieee754_log+0x30c>)
 800cb02:	9000      	str	r0, [sp, #0]
 800cb04:	9101      	str	r1, [sp, #4]
 800cb06:	9806      	ldr	r0, [sp, #24]
 800cb08:	9907      	ldr	r1, [sp, #28]
 800cb0a:	4b0e      	ldr	r3, [pc, #56]	; (800cb44 <__ieee754_log+0x310>)
 800cb0c:	f7f5 fb30 	bl	8002170 <__aeabi_dmul>
 800cb10:	0002      	movs	r2, r0
 800cb12:	000b      	movs	r3, r1
 800cb14:	0020      	movs	r0, r4
 800cb16:	0029      	movs	r1, r5
 800cb18:	e733      	b.n	800c982 <__ieee754_log+0x14e>
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	2100      	movs	r1, #0
 800cb1e:	e69a      	b.n	800c856 <__ieee754_log+0x22>
 800cb20:	c3500000 	.word	0xc3500000
 800cb24:	43500000 	.word	0x43500000
 800cb28:	7fefffff 	.word	0x7fefffff
 800cb2c:	fffffc01 	.word	0xfffffc01
 800cb30:	00095f64 	.word	0x00095f64
 800cb34:	3ff00000 	.word	0x3ff00000
 800cb38:	fee00000 	.word	0xfee00000
 800cb3c:	3fe62e42 	.word	0x3fe62e42
 800cb40:	35793c76 	.word	0x35793c76
 800cb44:	3dea39ef 	.word	0x3dea39ef
 800cb48:	55555555 	.word	0x55555555
 800cb4c:	3fd55555 	.word	0x3fd55555
 800cb50:	3fe00000 	.word	0x3fe00000
 800cb54:	fff9eb86 	.word	0xfff9eb86
 800cb58:	df3e5244 	.word	0xdf3e5244
 800cb5c:	3fc2f112 	.word	0x3fc2f112
 800cb60:	96cb03de 	.word	0x96cb03de
 800cb64:	3fc74664 	.word	0x3fc74664
 800cb68:	94229359 	.word	0x94229359
 800cb6c:	3fd24924 	.word	0x3fd24924
 800cb70:	55555593 	.word	0x55555593
 800cb74:	3fe55555 	.word	0x3fe55555
 800cb78:	d078c69f 	.word	0xd078c69f
 800cb7c:	3fc39a09 	.word	0x3fc39a09
 800cb80:	1d8e78af 	.word	0x1d8e78af
 800cb84:	3fcc71c5 	.word	0x3fcc71c5
 800cb88:	9997fa04 	.word	0x9997fa04
 800cb8c:	3fd99999 	.word	0x3fd99999
 800cb90:	0006b851 	.word	0x0006b851

0800cb94 <nan>:
 800cb94:	2000      	movs	r0, #0
 800cb96:	4901      	ldr	r1, [pc, #4]	; (800cb9c <nan+0x8>)
 800cb98:	4770      	bx	lr
 800cb9a:	46c0      	nop			; (mov r8, r8)
 800cb9c:	7ff80000 	.word	0x7ff80000

0800cba0 <_init>:
 800cba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba2:	46c0      	nop			; (mov r8, r8)
 800cba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cba6:	bc08      	pop	{r3}
 800cba8:	469e      	mov	lr, r3
 800cbaa:	4770      	bx	lr

0800cbac <_fini>:
 800cbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbae:	46c0      	nop			; (mov r8, r8)
 800cbb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb2:	bc08      	pop	{r3}
 800cbb4:	469e      	mov	lr, r3
 800cbb6:	4770      	bx	lr
