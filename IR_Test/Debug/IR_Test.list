
IR_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002868  08002868  00012868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028bc  080028bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  080028d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  080028d0  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008fe2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184c  00000000  00000000  00029016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002a868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014981  00000000  00000000  0002ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad67  00000000  00000000  00040401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084225  00000000  00000000  0004b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf38d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002160  00000000  00000000  000cf3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	2000000c 	.word	0x2000000c
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08002850 	.word	0x08002850

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000010 	.word	0x20000010
 80000f8:	08002850 	.word	0x08002850

080000fc <__udivsi3>:
 80000fc:	2200      	movs	r2, #0
 80000fe:	0843      	lsrs	r3, r0, #1
 8000100:	428b      	cmp	r3, r1
 8000102:	d374      	bcc.n	80001ee <__udivsi3+0xf2>
 8000104:	0903      	lsrs	r3, r0, #4
 8000106:	428b      	cmp	r3, r1
 8000108:	d35f      	bcc.n	80001ca <__udivsi3+0xce>
 800010a:	0a03      	lsrs	r3, r0, #8
 800010c:	428b      	cmp	r3, r1
 800010e:	d344      	bcc.n	800019a <__udivsi3+0x9e>
 8000110:	0b03      	lsrs	r3, r0, #12
 8000112:	428b      	cmp	r3, r1
 8000114:	d328      	bcc.n	8000168 <__udivsi3+0x6c>
 8000116:	0c03      	lsrs	r3, r0, #16
 8000118:	428b      	cmp	r3, r1
 800011a:	d30d      	bcc.n	8000138 <__udivsi3+0x3c>
 800011c:	22ff      	movs	r2, #255	; 0xff
 800011e:	0209      	lsls	r1, r1, #8
 8000120:	ba12      	rev	r2, r2
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d302      	bcc.n	800012e <__udivsi3+0x32>
 8000128:	1212      	asrs	r2, r2, #8
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	d065      	beq.n	80001fa <__udivsi3+0xfe>
 800012e:	0b03      	lsrs	r3, r0, #12
 8000130:	428b      	cmp	r3, r1
 8000132:	d319      	bcc.n	8000168 <__udivsi3+0x6c>
 8000134:	e000      	b.n	8000138 <__udivsi3+0x3c>
 8000136:	0a09      	lsrs	r1, r1, #8
 8000138:	0bc3      	lsrs	r3, r0, #15
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x46>
 800013e:	03cb      	lsls	r3, r1, #15
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0b83      	lsrs	r3, r0, #14
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x52>
 800014a:	038b      	lsls	r3, r1, #14
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b43      	lsrs	r3, r0, #13
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x5e>
 8000156:	034b      	lsls	r3, r1, #13
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b03      	lsrs	r3, r0, #12
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x6a>
 8000162:	030b      	lsls	r3, r1, #12
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0ac3      	lsrs	r3, r0, #11
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x76>
 800016e:	02cb      	lsls	r3, r1, #11
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0a83      	lsrs	r3, r0, #10
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x82>
 800017a:	028b      	lsls	r3, r1, #10
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a43      	lsrs	r3, r0, #9
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x8e>
 8000186:	024b      	lsls	r3, r1, #9
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a03      	lsrs	r3, r0, #8
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x9a>
 8000192:	020b      	lsls	r3, r1, #8
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	d2cd      	bcs.n	8000136 <__udivsi3+0x3a>
 800019a:	09c3      	lsrs	r3, r0, #7
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xa8>
 80001a0:	01cb      	lsls	r3, r1, #7
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0983      	lsrs	r3, r0, #6
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xb4>
 80001ac:	018b      	lsls	r3, r1, #6
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0943      	lsrs	r3, r0, #5
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xc0>
 80001b8:	014b      	lsls	r3, r1, #5
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0903      	lsrs	r3, r0, #4
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xcc>
 80001c4:	010b      	lsls	r3, r1, #4
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	08c3      	lsrs	r3, r0, #3
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xd8>
 80001d0:	00cb      	lsls	r3, r1, #3
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0883      	lsrs	r3, r0, #2
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xe4>
 80001dc:	008b      	lsls	r3, r1, #2
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0843      	lsrs	r3, r0, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xf0>
 80001e8:	004b      	lsls	r3, r1, #1
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	1a41      	subs	r1, r0, r1
 80001f0:	d200      	bcs.n	80001f4 <__udivsi3+0xf8>
 80001f2:	4601      	mov	r1, r0
 80001f4:	4152      	adcs	r2, r2
 80001f6:	4610      	mov	r0, r2
 80001f8:	4770      	bx	lr
 80001fa:	e7ff      	b.n	80001fc <__udivsi3+0x100>
 80001fc:	b501      	push	{r0, lr}
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 f806 	bl	8000210 <__aeabi_idiv0>
 8000204:	bd02      	pop	{r1, pc}
 8000206:	46c0      	nop			; (mov r8, r8)

08000208 <__aeabi_uidivmod>:
 8000208:	2900      	cmp	r1, #0
 800020a:	d0f7      	beq.n	80001fc <__udivsi3+0x100>
 800020c:	e776      	b.n	80000fc <__udivsi3>
 800020e:	4770      	bx	lr

08000210 <__aeabi_idiv0>:
 8000210:	4770      	bx	lr
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <ADC_Select_CH>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH(uint32_t inChannel)
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b087      	sub	sp, #28
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	  /** Configure Regular Channel
	  */
	  switch(inChannel){
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	3b03      	subs	r3, #3
 8000220:	2b04      	cmp	r3, #4
 8000222:	d813      	bhi.n	800024c <ADC_Select_CH+0x38>
 8000224:	009a      	lsls	r2, r3, #2
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <ADC_Select_CH+0x78>)
 8000228:	18d3      	adds	r3, r2, r3
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	469f      	mov	pc, r3

	  case 3:
		  inChannel = ADC_CHANNEL_3;
 800022e:	4b18      	ldr	r3, [pc, #96]	; (8000290 <ADC_Select_CH+0x7c>)
 8000230:	607b      	str	r3, [r7, #4]
		  break;
 8000232:	e00b      	b.n	800024c <ADC_Select_CH+0x38>
	  case 4:
		  inChannel = ADC_CHANNEL_4;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <ADC_Select_CH+0x80>)
 8000236:	607b      	str	r3, [r7, #4]
	  	  break;
 8000238:	e008      	b.n	800024c <ADC_Select_CH+0x38>
	  case 5:
		  inChannel = ADC_CHANNEL_5;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <ADC_Select_CH+0x84>)
 800023c:	607b      	str	r3, [r7, #4]
		  break;
 800023e:	e005      	b.n	800024c <ADC_Select_CH+0x38>
	  case 6:
		  inChannel = ADC_CHANNEL_6;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <ADC_Select_CH+0x88>)
 8000242:	607b      	str	r3, [r7, #4]
		  break;
 8000244:	e002      	b.n	800024c <ADC_Select_CH+0x38>
	  case 7:
		  inChannel = ADC_CHANNEL_7;
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <ADC_Select_CH+0x8c>)
 8000248:	607b      	str	r3, [r7, #4]
		  break;
 800024a:	46c0      	nop			; (mov r8, r8)
	  }
	  ADC_ChannelConfTypeDef sConfig = {0};
 800024c:	240c      	movs	r4, #12
 800024e:	193b      	adds	r3, r7, r4
 8000250:	0018      	movs	r0, r3
 8000252:	230c      	movs	r3, #12
 8000254:	001a      	movs	r2, r3
 8000256:	2100      	movs	r1, #0
 8000258:	f002 faf2 	bl	8002840 <memset>
	  sConfig.Channel = inChannel;
 800025c:	193b      	adds	r3, r7, r4
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]

	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
	  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026e:	193a      	adds	r2, r7, r4
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <ADC_Select_CH+0x90>)
 8000272:	0011      	movs	r1, r2
 8000274:	0018      	movs	r0, r3
 8000276:	f000 ff7d 	bl	8001174 <HAL_ADC_ConfigChannel>
 800027a:	1e03      	subs	r3, r0, #0
 800027c:	d001      	beq.n	8000282 <ADC_Select_CH+0x6e>
	  {
	    Error_Handler();
 800027e:	f000 f975 	bl	800056c <Error_Handler>
	  }
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b007      	add	sp, #28
 8000288:	bd90      	pop	{r4, r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	08002868 	.word	0x08002868
 8000290:	0c000008 	.word	0x0c000008
 8000294:	10000010 	.word	0x10000010
 8000298:	14000020 	.word	0x14000020
 800029c:	18000040 	.word	0x18000040
 80002a0:	1c000080 	.word	0x1c000080
 80002a4:	20000028 	.word	0x20000028

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ae:	f000 fa5d 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b2:	f000 f839 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b6:	f000 f913 	bl	80004e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80002ba:	f000 f87d 	bl	80003b8 <MX_ADC1_Init>
  MX_I2C2_Init();
 80002be:	f000 f8cf 	bl	8000460 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
	  uint32_t i = 3;
 80002c2:	2303      	movs	r3, #3
 80002c4:	617b      	str	r3, [r7, #20]
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
		  buffer[i-3] = HAL_ADC_GetValue(&hadc1);
		  HAL_ADC_Stop(&hadc1);
		  HAL_Delay(100);
	  }*/
	  	  HAL_Delay(1000);
 80002c6:	23fa      	movs	r3, #250	; 0xfa
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fad4 	bl	8000878 <HAL_Delay>
	  	  ADC_Select_CH(i);
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	0018      	movs	r0, r3
 80002d4:	f7ff ff9e 	bl	8000214 <ADC_Select_CH>
	  	  HAL_ADC_Start(&hadc1);
 80002d8:	4b12      	ldr	r3, [pc, #72]	; (8000324 <main+0x7c>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fe20 	bl	8000f20 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002e0:	2301      	movs	r3, #1
 80002e2:	425a      	negs	r2, r3
 80002e4:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <main+0x7c>)
 80002e6:	0011      	movs	r1, r2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fea3 	bl	8001034 <HAL_ADC_PollForConversion>
	  	  buffer[i-3] = HAL_ADC_GetValue(&hadc1);
 80002ee:	4b0d      	ldr	r3, [pc, #52]	; (8000324 <main+0x7c>)
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 ff33 	bl	800115c <HAL_ADC_GetValue>
 80002f6:	0001      	movs	r1, r0
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	1eda      	subs	r2, r3, #3
 80002fc:	b289      	uxth	r1, r1
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	0052      	lsls	r2, r2, #1
 8000302:	52d1      	strh	r1, [r2, r3]
		  HAL_ADC_Stop(&hadc1);
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <main+0x7c>)
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fe58 	bl	8000fbc <HAL_ADC_Stop>
		  buffer[6] = 19;
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2213      	movs	r2, #19
 8000310:	819a      	strh	r2, [r3, #12]
		  ++i;
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	3301      	adds	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
		  if(i>7)i=3;
 8000318:	697b      	ldr	r3, [r7, #20]
 800031a:	2b07      	cmp	r3, #7
 800031c:	d9d3      	bls.n	80002c6 <main+0x1e>
 800031e:	2303      	movs	r3, #3
 8000320:	617b      	str	r3, [r7, #20]
	  	  HAL_Delay(1000);
 8000322:	e7d0      	b.n	80002c6 <main+0x1e>
 8000324:	20000028 	.word	0x20000028

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b093      	sub	sp, #76	; 0x4c
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	2414      	movs	r4, #20
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	2334      	movs	r3, #52	; 0x34
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f002 fa81 	bl	8002840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	0018      	movs	r0, r3
 8000342:	2310      	movs	r3, #16
 8000344:	001a      	movs	r2, r3
 8000346:	2100      	movs	r1, #0
 8000348:	f002 fa7a 	bl	8002840 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fd71 	bl	8001e38 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2202      	movs	r2, #2
 800035a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035c:	193b      	adds	r3, r7, r4
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	0052      	lsls	r2, r2, #1
 8000362:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000364:	193b      	adds	r3, r7, r4
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036a:	193b      	adds	r3, r7, r4
 800036c:	2240      	movs	r2, #64	; 0x40
 800036e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000370:	193b      	adds	r3, r7, r4
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	193b      	adds	r3, r7, r4
 8000378:	0018      	movs	r0, r3
 800037a:	f001 fd9d 	bl	8001eb8 <HAL_RCC_OscConfig>
 800037e:	1e03      	subs	r3, r0, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000382:	f000 f8f3 	bl	800056c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2207      	movs	r2, #7
 800038a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2100      	movs	r1, #0
 80003a2:	0018      	movs	r0, r3
 80003a4:	f002 f89e 	bl	80024e4 <HAL_RCC_ClockConfig>
 80003a8:	1e03      	subs	r3, r0, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003ac:	f000 f8de 	bl	800056c <Error_Handler>
  }
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	b013      	add	sp, #76	; 0x4c
 80003b6:	bd90      	pop	{r4, r7, pc}

080003b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	0018      	movs	r0, r3
 80003c2:	230c      	movs	r3, #12
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f002 fa3a 	bl	8002840 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003cc:	4b22      	ldr	r3, [pc, #136]	; (8000458 <MX_ADC1_Init+0xa0>)
 80003ce:	4a23      	ldr	r2, [pc, #140]	; (800045c <MX_ADC1_Init+0xa4>)
 80003d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80003d2:	4b21      	ldr	r3, [pc, #132]	; (8000458 <MX_ADC1_Init+0xa0>)
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	05d2      	lsls	r2, r2, #23
 80003d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003da:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <MX_ADC1_Init+0xa0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e0:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <MX_ADC1_Init+0xa0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_ADC1_Init+0xa0>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_ADC1_Init+0xa0>)
 80003ee:	2204      	movs	r2, #4
 80003f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_ADC1_Init+0xa0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_ADC1_Init+0xa0>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003fe:	4b16      	ldr	r3, [pc, #88]	; (8000458 <MX_ADC1_Init+0xa0>)
 8000400:	2200      	movs	r2, #0
 8000402:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <MX_ADC1_Init+0xa0>)
 8000406:	2201      	movs	r2, #1
 8000408:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800040a:	4b13      	ldr	r3, [pc, #76]	; (8000458 <MX_ADC1_Init+0xa0>)
 800040c:	2200      	movs	r2, #0
 800040e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_ADC1_Init+0xa0>)
 8000412:	2200      	movs	r2, #0
 8000414:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MX_ADC1_Init+0xa0>)
 8000418:	222c      	movs	r2, #44	; 0x2c
 800041a:	2100      	movs	r1, #0
 800041c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_ADC1_Init+0xa0>)
 8000420:	2200      	movs	r2, #0
 8000422:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_ADC1_Init+0xa0>)
 8000426:	2200      	movs	r2, #0
 8000428:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_ADC1_Init+0xa0>)
 800042c:	2200      	movs	r2, #0
 800042e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_ADC1_Init+0xa0>)
 8000432:	223c      	movs	r2, #60	; 0x3c
 8000434:	2100      	movs	r1, #0
 8000436:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000438:	4b07      	ldr	r3, [pc, #28]	; (8000458 <MX_ADC1_Init+0xa0>)
 800043a:	2200      	movs	r2, #0
 800043c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_ADC1_Init+0xa0>)
 8000440:	0018      	movs	r0, r3
 8000442:	f000 fb8f 	bl	8000b64 <HAL_ADC_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d001      	beq.n	800044e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800044a:	f000 f88f 	bl	800056c <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000028 	.word	0x20000028
 800045c:	40012400 	.word	0x40012400

08000460 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_I2C2_Init+0x74>)
 8000466:	4a1c      	ldr	r2, [pc, #112]	; (80004d8 <MX_I2C2_Init+0x78>)
 8000468:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800046a:	4b1a      	ldr	r3, [pc, #104]	; (80004d4 <MX_I2C2_Init+0x74>)
 800046c:	4a1b      	ldr	r2, [pc, #108]	; (80004dc <MX_I2C2_Init+0x7c>)
 800046e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <MX_I2C2_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <MX_I2C2_Init+0x74>)
 8000478:	2201      	movs	r2, #1
 800047a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <MX_I2C2_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000482:	4b14      	ldr	r3, [pc, #80]	; (80004d4 <MX_I2C2_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_I2C2_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_I2C2_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_I2C2_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_I2C2_Init+0x74>)
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fb9d 	bl	8001bdc <HAL_I2C_Init>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004a6:	f000 f861 	bl	800056c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MX_I2C2_Init+0x74>)
 80004ac:	2100      	movs	r1, #0
 80004ae:	0018      	movs	r0, r3
 80004b0:	f001 fc2a 	bl	8001d08 <HAL_I2CEx_ConfigAnalogFilter>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004b8:	f000 f858 	bl	800056c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <MX_I2C2_Init+0x74>)
 80004be:	2100      	movs	r1, #0
 80004c0:	0018      	movs	r0, r3
 80004c2:	f001 fc6d 	bl	8001da0 <HAL_I2CEx_ConfigDigitalFilter>
 80004c6:	1e03      	subs	r3, r0, #0
 80004c8:	d001      	beq.n	80004ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004ca:	f000 f84f 	bl	800056c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000008c 	.word	0x2000008c
 80004d8:	40005800 	.word	0x40005800
 80004dc:	00303d5b 	.word	0x00303d5b

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b089      	sub	sp, #36	; 0x24
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	240c      	movs	r4, #12
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	0018      	movs	r0, r3
 80004ec:	2314      	movs	r3, #20
 80004ee:	001a      	movs	r2, r3
 80004f0:	2100      	movs	r1, #0
 80004f2:	f002 f9a5 	bl	8002840 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_GPIO_Init+0x88>)
 80004f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_GPIO_Init+0x88>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	430a      	orrs	r2, r1
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_GPIO_Init+0x88>)
 8000504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000506:	2201      	movs	r2, #1
 8000508:	4013      	ands	r3, r2
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_GPIO_Init+0x88>)
 8000510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MX_GPIO_Init+0x88>)
 8000514:	2102      	movs	r1, #2
 8000516:	430a      	orrs	r2, r1
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_GPIO_Init+0x88>)
 800051c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800051e:	2202      	movs	r2, #2
 8000520:	4013      	ands	r3, r2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000526:	2380      	movs	r3, #128	; 0x80
 8000528:	0219      	lsls	r1, r3, #8
 800052a:	23a0      	movs	r3, #160	; 0xa0
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2200      	movs	r2, #0
 8000530:	0018      	movs	r0, r3
 8000532:	f001 fb35 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0212      	lsls	r2, r2, #8
 800053c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2201      	movs	r2, #1
 8000542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	193b      	adds	r3, r7, r4
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000550:	193a      	adds	r2, r7, r4
 8000552:	23a0      	movs	r3, #160	; 0xa0
 8000554:	05db      	lsls	r3, r3, #23
 8000556:	0011      	movs	r1, r2
 8000558:	0018      	movs	r0, r3
 800055a:	f001 f9bd 	bl	80018d8 <HAL_GPIO_Init>

}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b009      	add	sp, #36	; 0x24
 8000564:	bd90      	pop	{r4, r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	40021000 	.word	0x40021000

0800056c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000570:	b672      	cpsid	i
}
 8000572:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000574:	e7fe      	b.n	8000574 <Error_Handler+0x8>
	...

08000578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057e:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <HAL_MspInit+0x44>)
 8000580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <HAL_MspInit+0x44>)
 8000584:	2101      	movs	r1, #1
 8000586:	430a      	orrs	r2, r1
 8000588:	641a      	str	r2, [r3, #64]	; 0x40
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_MspInit+0x44>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	2201      	movs	r2, #1
 8000590:	4013      	ands	r3, r2
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <HAL_MspInit+0x44>)
 8000598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <HAL_MspInit+0x44>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	0549      	lsls	r1, r1, #21
 80005a0:	430a      	orrs	r2, r1
 80005a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_MspInit+0x44>)
 80005a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	055b      	lsls	r3, r3, #21
 80005ac:	4013      	ands	r3, r2
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b002      	add	sp, #8
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000

080005c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b08b      	sub	sp, #44	; 0x2c
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c8:	2414      	movs	r4, #20
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	0018      	movs	r0, r3
 80005ce:	2314      	movs	r3, #20
 80005d0:	001a      	movs	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	f002 f934 	bl	8002840 <memset>
  if(hadc->Instance==ADC1)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a18      	ldr	r2, [pc, #96]	; (8000640 <HAL_ADC_MspInit+0x80>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d129      	bne.n	8000636 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80005e2:	4b18      	ldr	r3, [pc, #96]	; (8000644 <HAL_ADC_MspInit+0x84>)
 80005e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <HAL_ADC_MspInit+0x84>)
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	0349      	lsls	r1, r1, #13
 80005ec:	430a      	orrs	r2, r1
 80005ee:	641a      	str	r2, [r3, #64]	; 0x40
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <HAL_ADC_MspInit+0x84>)
 80005f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	035b      	lsls	r3, r3, #13
 80005f8:	4013      	ands	r3, r2
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <HAL_ADC_MspInit+0x84>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000602:	4b10      	ldr	r3, [pc, #64]	; (8000644 <HAL_ADC_MspInit+0x84>)
 8000604:	2101      	movs	r1, #1
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <HAL_ADC_MspInit+0x84>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	2201      	movs	r2, #1
 8000610:	4013      	ands	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000616:	193b      	adds	r3, r7, r4
 8000618:	22f9      	movs	r2, #249	; 0xf9
 800061a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2203      	movs	r2, #3
 8000620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	193a      	adds	r2, r7, r4
 800062a:	23a0      	movs	r3, #160	; 0xa0
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f001 f951 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b00b      	add	sp, #44	; 0x2c
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40012400 	.word	0x40012400
 8000644:	40021000 	.word	0x40021000

08000648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b08b      	sub	sp, #44	; 0x2c
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	2414      	movs	r4, #20
 8000652:	193b      	adds	r3, r7, r4
 8000654:	0018      	movs	r0, r3
 8000656:	2314      	movs	r3, #20
 8000658:	001a      	movs	r2, r3
 800065a:	2100      	movs	r1, #0
 800065c:	f002 f8f0 	bl	8002840 <memset>
  if(hi2c->Instance==I2C2)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <HAL_I2C_MspInit+0x8c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d130      	bne.n	80006cc <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 800066c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 8000670:	2102      	movs	r1, #2
 8000672:	430a      	orrs	r2, r1
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067a:	2202      	movs	r2, #2
 800067c:	4013      	ands	r3, r2
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	22c0      	movs	r2, #192	; 0xc0
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800068a:	0021      	movs	r1, r4
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2212      	movs	r2, #18
 8000690:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2206      	movs	r2, #6
 80006a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <HAL_I2C_MspInit+0x94>)
 80006a8:	0019      	movs	r1, r3
 80006aa:	0010      	movs	r0, r2
 80006ac:	f001 f914 	bl	80018d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 80006b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	03c9      	lsls	r1, r1, #15
 80006ba:	430a      	orrs	r2, r1
 80006bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_I2C_MspInit+0x90>)
 80006c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006c2:	2380      	movs	r3, #128	; 0x80
 80006c4:	03db      	lsls	r3, r3, #15
 80006c6:	4013      	ands	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	b00b      	add	sp, #44	; 0x2c
 80006d2:	bd90      	pop	{r4, r7, pc}
 80006d4:	40005800 	.word	0x40005800
 80006d8:	40021000 	.word	0x40021000
 80006dc:	50000400 	.word	0x50000400

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006f0:	46c0      	nop			; (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f89c 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	46c0      	nop			; (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800071c:	f7ff fff7 	bl	800070e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	; (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	; (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f002 f857 	bl	80027f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800074a:	f7ff fdad 	bl	80002a8 <main>

0800074e <LoopForever>:

LoopForever:
  b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800075c:	080028c4 	.word	0x080028c4
  ldr r2, =_sbss
 8000760:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000764:	200000dc 	.word	0x200000dc

08000768 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_IRQHandler>
	...

0800076c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <HAL_Init+0x3c>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <HAL_Init+0x3c>)
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	0049      	lsls	r1, r1, #1
 8000782:	430a      	orrs	r2, r1
 8000784:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000786:	2000      	movs	r0, #0
 8000788:	f000 f810 	bl	80007ac <HAL_InitTick>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d003      	beq.n	8000798 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
 8000796:	e001      	b.n	800079c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000798:	f7ff feee 	bl	8000578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781b      	ldrb	r3, [r3, #0]
}
 80007a0:	0018      	movs	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007b4:	230f      	movs	r3, #15
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007bc:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <HAL_InitTick+0x88>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d02b      	beq.n	800081c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <HAL_InitTick+0x8c>)
 80007c6:	681c      	ldr	r4, [r3, #0]
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <HAL_InitTick+0x88>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	0019      	movs	r1, r3
 80007ce:	23fa      	movs	r3, #250	; 0xfa
 80007d0:	0098      	lsls	r0, r3, #2
 80007d2:	f7ff fc93 	bl	80000fc <__udivsi3>
 80007d6:	0003      	movs	r3, r0
 80007d8:	0019      	movs	r1, r3
 80007da:	0020      	movs	r0, r4
 80007dc:	f7ff fc8e 	bl	80000fc <__udivsi3>
 80007e0:	0003      	movs	r3, r0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 f86b 	bl	80018be <HAL_SYSTICK_Config>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d112      	bne.n	8000812 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b03      	cmp	r3, #3
 80007f0:	d80a      	bhi.n	8000808 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	2301      	movs	r3, #1
 80007f6:	425b      	negs	r3, r3
 80007f8:	2200      	movs	r2, #0
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 f84a 	bl	8001894 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <HAL_InitTick+0x90>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	e00d      	b.n	8000824 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000808:	230f      	movs	r3, #15
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	e008      	b.n	8000824 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000812:	230f      	movs	r3, #15
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
 800081a:	e003      	b.n	8000824 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800081c:	230f      	movs	r3, #15
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	781b      	ldrb	r3, [r3, #0]
}
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	b005      	add	sp, #20
 8000830:	bd90      	pop	{r4, r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	20000008 	.word	0x20000008
 8000838:	20000000 	.word	0x20000000
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	001a      	movs	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	18d2      	adds	r2, r2, r3
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	601a      	str	r2, [r3, #0]
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	20000008 	.word	0x20000008
 8000860:	200000d8 	.word	0x200000d8

08000864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	200000d8 	.word	0x200000d8

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff fff0 	bl	8000864 <HAL_GetTick>
 8000884:	0003      	movs	r3, r0
 8000886:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3301      	adds	r3, #1
 8000890:	d005      	beq.n	800089e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_Delay+0x44>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	001a      	movs	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	189b      	adds	r3, r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	f7ff ffe0 	bl	8000864 <HAL_GetTick>
 80008a4:	0002      	movs	r2, r0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f7      	bhi.n	80008a0 <HAL_Delay+0x28>
  {
  }
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b004      	add	sp, #16
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000008 	.word	0x20000008

080008c0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80008d0:	401a      	ands	r2, r3
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	431a      	orrs	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	601a      	str	r2, [r3, #0]
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	b002      	add	sp, #8
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	fe3fffff 	.word	0xfe3fffff

080008e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	23e0      	movs	r3, #224	; 0xe0
 80008f6:	045b      	lsls	r3, r3, #17
 80008f8:	4013      	ands	r3, r2
}
 80008fa:	0018      	movs	r0, r3
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b002      	add	sp, #8
 8000900:	bd80      	pop	{r7, pc}

08000902 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b084      	sub	sp, #16
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	2104      	movs	r1, #4
 8000916:	400a      	ands	r2, r1
 8000918:	2107      	movs	r1, #7
 800091a:	4091      	lsls	r1, r2
 800091c:	000a      	movs	r2, r1
 800091e:	43d2      	mvns	r2, r2
 8000920:	401a      	ands	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2104      	movs	r1, #4
 8000926:	400b      	ands	r3, r1
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	4099      	lsls	r1, r3
 800092c:	000b      	movs	r3, r1
 800092e:	431a      	orrs	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	b004      	add	sp, #16
 800093a:	bd80      	pop	{r7, pc}

0800093c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	23c0      	movs	r3, #192	; 0xc0
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	4013      	ands	r3, r2
 800094e:	d101      	bne.n	8000954 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000950:	2301      	movs	r3, #1
 8000952:	e000      	b.n	8000956 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000954:	2300      	movs	r3, #0
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}

0800095e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b084      	sub	sp, #16
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	211f      	movs	r1, #31
 8000972:	400a      	ands	r2, r1
 8000974:	210f      	movs	r1, #15
 8000976:	4091      	lsls	r1, r2
 8000978:	000a      	movs	r2, r1
 800097a:	43d2      	mvns	r2, r2
 800097c:	401a      	ands	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	0e9b      	lsrs	r3, r3, #26
 8000982:	210f      	movs	r1, #15
 8000984:	4019      	ands	r1, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	201f      	movs	r0, #31
 800098a:	4003      	ands	r3, r0
 800098c:	4099      	lsls	r1, r3
 800098e:	000b      	movs	r3, r1
 8000990:	431a      	orrs	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b004      	add	sp, #16
 800099c:	bd80      	pop	{r7, pc}

0800099e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	035b      	lsls	r3, r3, #13
 80009b0:	0b5b      	lsrs	r3, r3, #13
 80009b2:	431a      	orrs	r2, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b002      	add	sp, #8
 80009be:	bd80      	pop	{r7, pc}

080009c0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	683a      	ldr	r2, [r7, #0]
 80009d0:	0352      	lsls	r2, r2, #13
 80009d2:	0b52      	lsrs	r2, r2, #13
 80009d4:	43d2      	mvns	r2, r2
 80009d6:	401a      	ands	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	b002      	add	sp, #8
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	0212      	lsls	r2, r2, #8
 80009f8:	43d2      	mvns	r2, r2
 80009fa:	401a      	ands	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	400b      	ands	r3, r1
 8000a04:	4904      	ldr	r1, [pc, #16]	; (8000a18 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000a06:	400b      	ands	r3, r1
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b004      	add	sp, #16
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	07ffff00 	.word	0x07ffff00

08000a1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <LL_ADC_EnableInternalRegulator+0x24>)
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	2280      	movs	r2, #128	; 0x80
 8000a2e:	0552      	lsls	r2, r2, #21
 8000a30:	431a      	orrs	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b002      	add	sp, #8
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	6fffffe8 	.word	0x6fffffe8

08000a44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	055b      	lsls	r3, r3, #21
 8000a54:	401a      	ands	r2, r3
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	055b      	lsls	r3, r3, #21
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d101      	bne.n	8000a62 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e000      	b.n	8000a64 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <LL_ADC_Enable+0x20>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	7fffffe8 	.word	0x7fffffe8

08000a90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <LL_ADC_Disable+0x20>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	7fffffe8 	.word	0x7fffffe8

08000ab4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d101      	bne.n	8000acc <LL_ADC_IsEnabled+0x18>
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e000      	b.n	8000ace <LL_ADC_IsEnabled+0x1a>
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	0018      	movs	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b002      	add	sp, #8
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d101      	bne.n	8000aee <LL_ADC_IsDisableOngoing+0x18>
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <LL_ADC_IsDisableOngoing+0x1a>
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b002      	add	sp, #8
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <LL_ADC_REG_StartConversion+0x20>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	2204      	movs	r2, #4
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b002      	add	sp, #8
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	7fffffe8 	.word	0x7fffffe8

08000b1c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <LL_ADC_REG_StopConversion+0x20>)
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b002      	add	sp, #8
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	7fffffe8 	.word	0x7fffffe8

08000b40 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d101      	bne.n	8000b58 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b54:	2301      	movs	r3, #1
 8000b56:	e000      	b.n	8000b5a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6c:	231f      	movs	r3, #31
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d101      	bne.n	8000b8a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e1b1      	b.n	8000eee <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10a      	bne.n	8000ba8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fd13 	bl	80005c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2254      	movs	r2, #84	; 0x54
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ff49 	bl	8000a44 <LL_ADC_IsInternalRegulatorEnabled>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d115      	bne.n	8000be2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff ff2e 	bl	8000a1c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000bc0:	4bcd      	ldr	r3, [pc, #820]	; (8000ef8 <HAL_ADC_Init+0x394>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	49cd      	ldr	r1, [pc, #820]	; (8000efc <HAL_ADC_Init+0x398>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fa98 	bl	80000fc <__udivsi3>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	3301      	adds	r3, #1
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bd4:	e002      	b.n	8000bdc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f9      	bne.n	8000bd6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff ff2c 	bl	8000a44 <LL_ADC_IsInternalRegulatorEnabled>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d10f      	bne.n	8000c10 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c00:	2201      	movs	r2, #1
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000c08:	231f      	movs	r3, #31
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff ff93 	bl	8000b40 <LL_ADC_REG_IsConversionOngoing>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	2210      	movs	r2, #16
 8000c24:	4013      	ands	r3, r2
 8000c26:	d000      	beq.n	8000c2a <HAL_ADC_Init+0xc6>
 8000c28:	e154      	b.n	8000ed4 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d000      	beq.n	8000c32 <HAL_ADC_Init+0xce>
 8000c30:	e150      	b.n	8000ed4 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	4ab2      	ldr	r2, [pc, #712]	; (8000f00 <HAL_ADC_Init+0x39c>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff ff34 	bl	8000ab4 <LL_ADC_IsEnabled>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d156      	bne.n	8000cfe <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2218      	movs	r2, #24
 8000c58:	4393      	bics	r3, r2
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	0f9b      	lsrs	r3, r3, #30
 8000c6e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c74:	4313      	orrs	r3, r2
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	223c      	movs	r2, #60	; 0x3c
 8000c80:	5c9b      	ldrb	r3, [r3, r2]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d111      	bne.n	8000caa <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	0f9b      	lsrs	r3, r3, #30
 8000c8c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000c92:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000c98:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000c9e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	4a94      	ldr	r2, [pc, #592]	; (8000f04 <HAL_ADC_Init+0x3a0>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	23c0      	movs	r3, #192	; 0xc0
 8000cc6:	061b      	lsls	r3, r3, #24
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d018      	beq.n	8000cfe <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d012      	beq.n	8000cfe <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	061b      	lsls	r3, r3, #24
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d00c      	beq.n	8000cfe <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000ce4:	4b88      	ldr	r3, [pc, #544]	; (8000f08 <HAL_ADC_Init+0x3a4>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a88      	ldr	r2, [pc, #544]	; (8000f0c <HAL_ADC_Init+0x3a8>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	0019      	movs	r1, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	23f0      	movs	r3, #240	; 0xf0
 8000cf4:	039b      	lsls	r3, r3, #14
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	4b83      	ldr	r3, [pc, #524]	; (8000f08 <HAL_ADC_Init+0x3a4>)
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7e1b      	ldrb	r3, [r3, #24]
 8000d02:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7e5b      	ldrb	r3, [r3, #25]
 8000d08:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	7e9b      	ldrb	r3, [r3, #26]
 8000d10:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000d12:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <HAL_ADC_Init+0x1be>
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	015b      	lsls	r3, r3, #5
 8000d20:	e000      	b.n	8000d24 <HAL_ADC_Init+0x1c0>
 8000d22:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000d24:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000d2a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da04      	bge.n	8000d3e <HAL_ADC_Init+0x1da>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	085b      	lsrs	r3, r3, #1
 8000d3c:	e001      	b.n	8000d42 <HAL_ADC_Init+0x1de>
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8000d42:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	212c      	movs	r1, #44	; 0x2c
 8000d48:	5c5b      	ldrb	r3, [r3, r1]
 8000d4a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000d4c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2220      	movs	r2, #32
 8000d58:	5c9b      	ldrb	r3, [r3, r2]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d115      	bne.n	8000d8a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7e9b      	ldrb	r3, [r3, #26]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
 8000d70:	e00b      	b.n	8000d8a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	2220      	movs	r2, #32
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d82:	2201      	movs	r2, #1
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00a      	beq.n	8000da8 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d96:	23e0      	movs	r3, #224	; 0xe0
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000da0:	4313      	orrs	r3, r2
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <HAL_ADC_Init+0x3ac>)
 8000db0:	4013      	ands	r3, r2
 8000db2:	0019      	movs	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	4a53      	ldr	r2, [pc, #332]	; (8000f14 <HAL_ADC_Init+0x3b0>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f7ff fd8f 	bl	8000902 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dec:	494a      	ldr	r1, [pc, #296]	; (8000f18 <HAL_ADC_Init+0x3b4>)
 8000dee:	001a      	movs	r2, r3
 8000df0:	f7ff fd87 	bl	8000902 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2110      	movs	r1, #16
 8000e08:	4249      	negs	r1, r1
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	629a      	str	r2, [r3, #40]	; 0x28
 8000e0e:	e03a      	b.n	8000e86 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	039b      	lsls	r3, r3, #14
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d134      	bne.n	8000e86 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	e00c      	b.n	8000e3c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	40da      	lsrs	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	220f      	movs	r2, #15
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b0f      	cmp	r3, #15
 8000e34:	d006      	beq.n	8000e44 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	2b07      	cmp	r3, #7
 8000e40:	d9ef      	bls.n	8000e22 <HAL_ADC_Init+0x2be>
 8000e42:	e000      	b.n	8000e46 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8000e44:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d109      	bne.n	8000e60 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2110      	movs	r1, #16
 8000e58:	4249      	negs	r1, r1
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
 8000e5e:	e012      	b.n	8000e86 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	221c      	movs	r2, #28
 8000e70:	4013      	ands	r3, r2
 8000e72:	2210      	movs	r2, #16
 8000e74:	4252      	negs	r2, r2
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0011      	movs	r1, r2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	430a      	orrs	r2, r1
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <HAL_ADC_Init+0x3b8>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d10b      	bne.n	8000eae <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4393      	bics	r3, r2
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000eac:	e01c      	b.n	8000ee8 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	2212      	movs	r2, #18
 8000eb4:	4393      	bics	r3, r2
 8000eb6:	2210      	movs	r2, #16
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000ed2:	e009      	b.n	8000ee8 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed8:	2210      	movs	r2, #16
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000ee0:	231f      	movs	r3, #31
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000ee8:	231f      	movs	r3, #31
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	781b      	ldrb	r3, [r3, #0]
}
 8000eee:	0018      	movs	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b008      	add	sp, #32
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	00030d40 	.word	0x00030d40
 8000f00:	fffffefd 	.word	0xfffffefd
 8000f04:	1ffffc02 	.word	0x1ffffc02
 8000f08:	40012708 	.word	0x40012708
 8000f0c:	ffc3ffff 	.word	0xffc3ffff
 8000f10:	fffe0219 	.word	0xfffe0219
 8000f14:	dffffc02 	.word	0xdffffc02
 8000f18:	07ffff04 	.word	0x07ffff04
 8000f1c:	833fffe7 	.word	0x833fffe7

08000f20 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff fe07 	bl	8000b40 <LL_ADC_REG_IsConversionOngoing>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d135      	bne.n	8000fa2 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2254      	movs	r2, #84	; 0x54
 8000f3a:	5c9b      	ldrb	r3, [r3, r2]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d101      	bne.n	8000f44 <HAL_ADC_Start+0x24>
 8000f40:	2302      	movs	r3, #2
 8000f42:	e035      	b.n	8000fb0 <HAL_ADC_Start+0x90>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2254      	movs	r2, #84	; 0x54
 8000f48:	2101      	movs	r1, #1
 8000f4a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f4c:	250f      	movs	r5, #15
 8000f4e:	197c      	adds	r4, r7, r5
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 fb28 	bl	80015a8 <ADC_Enable>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f5c:	197b      	adds	r3, r7, r5
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d119      	bne.n	8000f98 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <HAL_ADC_Start+0x98>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	0052      	lsls	r2, r2, #1
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	221c      	movs	r2, #28
 8000f82:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2254      	movs	r2, #84	; 0x54
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff fdb1 	bl	8000af8 <LL_ADC_REG_StartConversion>
 8000f96:	e008      	b.n	8000faa <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2254      	movs	r2, #84	; 0x54
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	5499      	strb	r1, [r3, r2]
 8000fa0:	e003      	b.n	8000faa <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	781b      	ldrb	r3, [r3, #0]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b004      	add	sp, #16
 8000fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb8:	fffff0fe 	.word	0xfffff0fe

08000fbc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2254      	movs	r2, #84	; 0x54
 8000fc8:	5c9b      	ldrb	r3, [r3, r2]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Stop+0x16>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e029      	b.n	8001026 <HAL_ADC_Stop+0x6a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2254      	movs	r2, #84	; 0x54
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000fda:	250f      	movs	r5, #15
 8000fdc:	197c      	adds	r4, r7, r5
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 fa9f 	bl	8001524 <ADC_ConversionStop>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000fea:	197b      	adds	r3, r7, r5
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d112      	bne.n	8001018 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000ff2:	197c      	adds	r4, r7, r5
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f000 fb5c 	bl	80016b4 <ADC_Disable>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001000:	197b      	adds	r3, r7, r5
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d107      	bne.n	8001018 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_ADC_Stop+0x74>)
 800100e:	4013      	ands	r3, r2
 8001010:	2201      	movs	r2, #1
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2254      	movs	r2, #84	; 0x54
 800101c:	2100      	movs	r1, #0
 800101e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001020:	230f      	movs	r3, #15
 8001022:	18fb      	adds	r3, r7, r3
 8001024:	781b      	ldrb	r3, [r3, #0]
}
 8001026:	0018      	movs	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	b004      	add	sp, #16
 800102c:	bdb0      	pop	{r4, r5, r7, pc}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	fffffefe 	.word	0xfffffefe

08001034 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	2b08      	cmp	r3, #8
 8001044:	d102      	bne.n	800104c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8001046:	2308      	movs	r3, #8
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e00f      	b.n	800106c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	d007      	beq.n	8001068 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105c:	2220      	movs	r2, #32
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e072      	b.n	800114e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001068:	2304      	movs	r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800106c:	f7ff fbfa 	bl	8000864 <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001074:	e01f      	b.n	80010b6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	d01c      	beq.n	80010b6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800107c:	f7ff fbf2 	bl	8000864 <HAL_GetTick>
 8001080:	0002      	movs	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	429a      	cmp	r2, r3
 800108a:	d302      	bcc.n	8001092 <HAL_ADC_PollForConversion+0x5e>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d111      	bne.n	80010b6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	4013      	ands	r3, r2
 800109c:	d10b      	bne.n	80010b6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	2204      	movs	r2, #4
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2254      	movs	r2, #84	; 0x54
 80010ae:	2100      	movs	r1, #0
 80010b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e04b      	b.n	800114e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	4013      	ands	r3, r2
 80010c0:	d0d9      	beq.n	8001076 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff fc31 	bl	800093c <LL_ADC_REG_IsTriggerSourceSWStart>
 80010da:	1e03      	subs	r3, r0, #0
 80010dc:	d02e      	beq.n	800113c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7e9b      	ldrb	r3, [r3, #26]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d12a      	bne.n	800113c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2208      	movs	r2, #8
 80010ee:	4013      	ands	r3, r2
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d123      	bne.n	800113c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff fd21 	bl	8000b40 <LL_ADC_REG_IsConversionOngoing>
 80010fe:	1e03      	subs	r3, r0, #0
 8001100:	d110      	bne.n	8001124 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	210c      	movs	r1, #12
 800110e:	438a      	bics	r2, r1
 8001110:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_ADC_PollForConversion+0x124>)
 8001118:	4013      	ands	r3, r2
 800111a:	2201      	movs	r2, #1
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	659a      	str	r2, [r3, #88]	; 0x58
 8001122:	e00b      	b.n	800113c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	2220      	movs	r2, #32
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001134:	2201      	movs	r2, #1
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7e1b      	ldrb	r3, [r3, #24]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d103      	bne.n	800114c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	220c      	movs	r2, #12
 800114a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b004      	add	sp, #16
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	fffffefe 	.word	0xfffffefe

0800115c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800117e:	2317      	movs	r3, #23
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2254      	movs	r2, #84	; 0x54
 800118e:	5c9b      	ldrb	r3, [r3, r2]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_ADC_ConfigChannel+0x24>
 8001194:	2302      	movs	r3, #2
 8001196:	e1c0      	b.n	800151a <HAL_ADC_ConfigChannel+0x3a6>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2254      	movs	r2, #84	; 0x54
 800119c:	2101      	movs	r1, #1
 800119e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fccb 	bl	8000b40 <LL_ADC_REG_IsConversionOngoing>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d000      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0x3c>
 80011ae:	e1a3      	b.n	80014f8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d100      	bne.n	80011ba <HAL_ADC_ConfigChannel+0x46>
 80011b8:	e143      	b.n	8001442 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	2380      	movs	r3, #128	; 0x80
 80011c0:	061b      	lsls	r3, r3, #24
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d004      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80011ca:	4ac1      	ldr	r2, [pc, #772]	; (80014d0 <HAL_ADC_ConfigChannel+0x35c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d108      	bne.n	80011e2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0019      	movs	r1, r3
 80011da:	0010      	movs	r0, r2
 80011dc:	f7ff fbdf 	bl	800099e <LL_ADC_REG_SetSequencerChAdd>
 80011e0:	e0c9      	b.n	8001376 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	211f      	movs	r1, #31
 80011ec:	400b      	ands	r3, r1
 80011ee:	210f      	movs	r1, #15
 80011f0:	4099      	lsls	r1, r3
 80011f2:	000b      	movs	r3, r1
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4013      	ands	r3, r2
 80011f8:	0019      	movs	r1, r3
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	035b      	lsls	r3, r3, #13
 8001200:	0b5b      	lsrs	r3, r3, #13
 8001202:	d105      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x9c>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0e9b      	lsrs	r3, r3, #26
 800120a:	221f      	movs	r2, #31
 800120c:	4013      	ands	r3, r2
 800120e:	e098      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2201      	movs	r2, #1
 8001216:	4013      	ands	r3, r2
 8001218:	d000      	beq.n	800121c <HAL_ADC_ConfigChannel+0xa8>
 800121a:	e091      	b.n	8001340 <HAL_ADC_ConfigChannel+0x1cc>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2202      	movs	r2, #2
 8001222:	4013      	ands	r3, r2
 8001224:	d000      	beq.n	8001228 <HAL_ADC_ConfigChannel+0xb4>
 8001226:	e089      	b.n	800133c <HAL_ADC_ConfigChannel+0x1c8>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2204      	movs	r2, #4
 800122e:	4013      	ands	r3, r2
 8001230:	d000      	beq.n	8001234 <HAL_ADC_ConfigChannel+0xc0>
 8001232:	e081      	b.n	8001338 <HAL_ADC_ConfigChannel+0x1c4>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2208      	movs	r2, #8
 800123a:	4013      	ands	r3, r2
 800123c:	d000      	beq.n	8001240 <HAL_ADC_ConfigChannel+0xcc>
 800123e:	e079      	b.n	8001334 <HAL_ADC_ConfigChannel+0x1c0>
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2210      	movs	r2, #16
 8001246:	4013      	ands	r3, r2
 8001248:	d000      	beq.n	800124c <HAL_ADC_ConfigChannel+0xd8>
 800124a:	e071      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1bc>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2220      	movs	r2, #32
 8001252:	4013      	ands	r3, r2
 8001254:	d000      	beq.n	8001258 <HAL_ADC_ConfigChannel+0xe4>
 8001256:	e069      	b.n	800132c <HAL_ADC_ConfigChannel+0x1b8>
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2240      	movs	r2, #64	; 0x40
 800125e:	4013      	ands	r3, r2
 8001260:	d000      	beq.n	8001264 <HAL_ADC_ConfigChannel+0xf0>
 8001262:	e061      	b.n	8001328 <HAL_ADC_ConfigChannel+0x1b4>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	4013      	ands	r3, r2
 800126c:	d000      	beq.n	8001270 <HAL_ADC_ConfigChannel+0xfc>
 800126e:	e059      	b.n	8001324 <HAL_ADC_ConfigChannel+0x1b0>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4013      	ands	r3, r2
 800127a:	d151      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x1ac>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d149      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1a8>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4013      	ands	r3, r2
 8001292:	d141      	bne.n	8001318 <HAL_ADC_ConfigChannel+0x1a4>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4013      	ands	r3, r2
 800129e:	d139      	bne.n	8001314 <HAL_ADC_ConfigChannel+0x1a0>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	015b      	lsls	r3, r3, #5
 80012a8:	4013      	ands	r3, r2
 80012aa:	d131      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x19c>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	019b      	lsls	r3, r3, #6
 80012b4:	4013      	ands	r3, r2
 80012b6:	d129      	bne.n	800130c <HAL_ADC_ConfigChannel+0x198>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	01db      	lsls	r3, r3, #7
 80012c0:	4013      	ands	r3, r2
 80012c2:	d121      	bne.n	8001308 <HAL_ADC_ConfigChannel+0x194>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	4013      	ands	r3, r2
 80012ce:	d119      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x190>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	025b      	lsls	r3, r3, #9
 80012d8:	4013      	ands	r3, r2
 80012da:	d111      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x18c>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	029b      	lsls	r3, r3, #10
 80012e4:	4013      	ands	r3, r2
 80012e6:	d109      	bne.n	80012fc <HAL_ADC_ConfigChannel+0x188>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	02db      	lsls	r3, r3, #11
 80012f0:	4013      	ands	r3, r2
 80012f2:	d001      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0x184>
 80012f4:	2312      	movs	r3, #18
 80012f6:	e024      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 80012f8:	2300      	movs	r3, #0
 80012fa:	e022      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 80012fc:	2311      	movs	r3, #17
 80012fe:	e020      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001300:	2310      	movs	r3, #16
 8001302:	e01e      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001304:	230f      	movs	r3, #15
 8001306:	e01c      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001308:	230e      	movs	r3, #14
 800130a:	e01a      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 800130c:	230d      	movs	r3, #13
 800130e:	e018      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001310:	230c      	movs	r3, #12
 8001312:	e016      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001314:	230b      	movs	r3, #11
 8001316:	e014      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001318:	230a      	movs	r3, #10
 800131a:	e012      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 800131c:	2309      	movs	r3, #9
 800131e:	e010      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001320:	2308      	movs	r3, #8
 8001322:	e00e      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001324:	2307      	movs	r3, #7
 8001326:	e00c      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001328:	2306      	movs	r3, #6
 800132a:	e00a      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 800132c:	2305      	movs	r3, #5
 800132e:	e008      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001330:	2304      	movs	r3, #4
 8001332:	e006      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001334:	2303      	movs	r3, #3
 8001336:	e004      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001338:	2302      	movs	r3, #2
 800133a:	e002      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <HAL_ADC_ConfigChannel+0x1ce>
 8001340:	2300      	movs	r3, #0
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	6852      	ldr	r2, [r2, #4]
 8001346:	201f      	movs	r0, #31
 8001348:	4002      	ands	r2, r0
 800134a:	4093      	lsls	r3, r2
 800134c:	000a      	movs	r2, r1
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	429a      	cmp	r2, r3
 8001362:	d808      	bhi.n	8001376 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	6859      	ldr	r1, [r3, #4]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	001a      	movs	r2, r3
 8001372:	f7ff faf4 	bl	800095e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6819      	ldr	r1, [r3, #0]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	001a      	movs	r2, r3
 8001384:	f7ff fb2e 	bl	80009e4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db00      	blt.n	8001392 <HAL_ADC_ConfigChannel+0x21e>
 8001390:	e0bc      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001392:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <HAL_ADC_ConfigChannel+0x360>)
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff faa7 	bl	80008e8 <LL_ADC_GetCommonPathInternalCh>
 800139a:	0003      	movs	r3, r0
 800139c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a4d      	ldr	r2, [pc, #308]	; (80014d8 <HAL_ADC_ConfigChannel+0x364>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d122      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013b0:	d11d      	bne.n	80013ee <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	0412      	lsls	r2, r2, #16
 80013b8:	4313      	orrs	r3, r2
 80013ba:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <HAL_ADC_ConfigChannel+0x360>)
 80013bc:	0019      	movs	r1, r3
 80013be:	0010      	movs	r0, r2
 80013c0:	f7ff fa7e 	bl	80008c0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013c4:	4b45      	ldr	r3, [pc, #276]	; (80014dc <HAL_ADC_ConfigChannel+0x368>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4945      	ldr	r1, [pc, #276]	; (80014e0 <HAL_ADC_ConfigChannel+0x36c>)
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7fe fe96 	bl	80000fc <__udivsi3>
 80013d0:	0003      	movs	r3, r0
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	0013      	movs	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	189b      	adds	r3, r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80013de:	e002      	b.n	80013e6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f9      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80013ec:	e08e      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <HAL_ADC_ConfigChannel+0x370>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d10e      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x2a2>
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	045b      	lsls	r3, r3, #17
 80013fe:	4013      	ands	r3, r2
 8001400:	d109      	bne.n	8001416 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	0452      	lsls	r2, r2, #17
 8001408:	4313      	orrs	r3, r2
 800140a:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_ADC_ConfigChannel+0x360>)
 800140c:	0019      	movs	r1, r3
 800140e:	0010      	movs	r0, r2
 8001410:	f7ff fa56 	bl	80008c0 <LL_ADC_SetCommonPathInternalCh>
 8001414:	e07a      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a33      	ldr	r2, [pc, #204]	; (80014e8 <HAL_ADC_ConfigChannel+0x374>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d000      	beq.n	8001422 <HAL_ADC_ConfigChannel+0x2ae>
 8001420:	e074      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	03db      	lsls	r3, r3, #15
 8001428:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800142a:	d000      	beq.n	800142e <HAL_ADC_ConfigChannel+0x2ba>
 800142c:	e06e      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	03d2      	lsls	r2, r2, #15
 8001434:	4313      	orrs	r3, r2
 8001436:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_ADC_ConfigChannel+0x360>)
 8001438:	0019      	movs	r1, r3
 800143a:	0010      	movs	r0, r2
 800143c:	f7ff fa40 	bl	80008c0 <LL_ADC_SetCommonPathInternalCh>
 8001440:	e064      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	429a      	cmp	r2, r3
 800144c:	d004      	beq.n	8001458 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_ADC_ConfigChannel+0x35c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d107      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0019      	movs	r1, r3
 8001462:	0010      	movs	r0, r2
 8001464:	f7ff faac 	bl	80009c0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	da4d      	bge.n	800150c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_ADC_ConfigChannel+0x360>)
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff fa38 	bl	80008e8 <LL_ADC_GetCommonPathInternalCh>
 8001478:	0003      	movs	r3, r0
 800147a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a15      	ldr	r2, [pc, #84]	; (80014d8 <HAL_ADC_ConfigChannel+0x364>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d108      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_ADC_ConfigChannel+0x378>)
 800148a:	4013      	ands	r3, r2
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_ADC_ConfigChannel+0x360>)
 800148e:	0019      	movs	r1, r3
 8001490:	0010      	movs	r0, r2
 8001492:	f7ff fa15 	bl	80008c0 <LL_ADC_SetCommonPathInternalCh>
 8001496:	e039      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_ADC_ConfigChannel+0x370>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d108      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_ADC_ConfigChannel+0x37c>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <HAL_ADC_ConfigChannel+0x360>)
 80014aa:	0019      	movs	r1, r3
 80014ac:	0010      	movs	r0, r2
 80014ae:	f7ff fa07 	bl	80008c0 <LL_ADC_SetCommonPathInternalCh>
 80014b2:	e02b      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_ADC_ConfigChannel+0x374>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d126      	bne.n	800150c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <HAL_ADC_ConfigChannel+0x380>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	4a03      	ldr	r2, [pc, #12]	; (80014d4 <HAL_ADC_ConfigChannel+0x360>)
 80014c6:	0019      	movs	r1, r3
 80014c8:	0010      	movs	r0, r2
 80014ca:	f7ff f9f9 	bl	80008c0 <LL_ADC_SetCommonPathInternalCh>
 80014ce:	e01d      	b.n	800150c <HAL_ADC_ConfigChannel+0x398>
 80014d0:	80000004 	.word	0x80000004
 80014d4:	40012708 	.word	0x40012708
 80014d8:	b0001000 	.word	0xb0001000
 80014dc:	20000000 	.word	0x20000000
 80014e0:	00030d40 	.word	0x00030d40
 80014e4:	b8004000 	.word	0xb8004000
 80014e8:	b4002000 	.word	0xb4002000
 80014ec:	ff7fffff 	.word	0xff7fffff
 80014f0:	feffffff 	.word	0xfeffffff
 80014f4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	2220      	movs	r2, #32
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001504:	2317      	movs	r3, #23
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2254      	movs	r2, #84	; 0x54
 8001510:	2100      	movs	r1, #0
 8001512:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001514:	2317      	movs	r3, #23
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	781b      	ldrb	r3, [r3, #0]
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b006      	add	sp, #24
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)

08001524 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fb05 	bl	8000b40 <LL_ADC_REG_IsConversionOngoing>
 8001536:	1e03      	subs	r3, r0, #0
 8001538:	d031      	beq.n	800159e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff fac9 	bl	8000ad6 <LL_ADC_IsDisableOngoing>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d104      	bne.n	8001552 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fae5 	bl	8000b1c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001552:	f7ff f987 	bl	8000864 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800155a:	e01a      	b.n	8001592 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800155c:	f7ff f982 	bl	8000864 <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d913      	bls.n	8001592 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2204      	movs	r2, #4
 8001572:	4013      	ands	r3, r2
 8001574:	d00d      	beq.n	8001592 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	2210      	movs	r2, #16
 800157c:	431a      	orrs	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	2201      	movs	r2, #1
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e006      	b.n	80015a0 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d1de      	bne.n	800155c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b004      	add	sp, #16
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff fa7b 	bl	8000ab4 <LL_ADC_IsEnabled>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d000      	beq.n	80015c4 <ADC_Enable+0x1c>
 80015c2:	e069      	b.n	8001698 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	4a36      	ldr	r2, [pc, #216]	; (80016a4 <ADC_Enable+0xfc>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	d00d      	beq.n	80015ec <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	2210      	movs	r2, #16
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2201      	movs	r2, #1
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e056      	b.n	800169a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fa3b 	bl	8000a6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <ADC_Enable+0x100>)
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff f975 	bl	80008e8 <LL_ADC_GetCommonPathInternalCh>
 80015fe:	0002      	movs	r2, r0
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	4013      	ands	r3, r2
 8001606:	d00f      	beq.n	8001628 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <ADC_Enable+0x104>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4928      	ldr	r1, [pc, #160]	; (80016b0 <ADC_Enable+0x108>)
 800160e:	0018      	movs	r0, r3
 8001610:	f7fe fd74 	bl	80000fc <__udivsi3>
 8001614:	0003      	movs	r3, r0
 8001616:	3301      	adds	r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800161a:	e002      	b.n	8001622 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3b01      	subs	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f9      	bne.n	800161c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7e5b      	ldrb	r3, [r3, #25]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d033      	beq.n	8001698 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001630:	f7ff f918 	bl	8000864 <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001638:	e027      	b.n	800168a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	0018      	movs	r0, r3
 8001640:	f7ff fa38 	bl	8000ab4 <LL_ADC_IsEnabled>
 8001644:	1e03      	subs	r3, r0, #0
 8001646:	d104      	bne.n	8001652 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	0018      	movs	r0, r3
 800164e:	f7ff fa0d 	bl	8000a6c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001652:	f7ff f907 	bl	8000864 <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d914      	bls.n	800168a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2201      	movs	r2, #1
 8001668:	4013      	ands	r3, r2
 800166a:	2b01      	cmp	r3, #1
 800166c:	d00d      	beq.n	800168a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001672:	2210      	movs	r2, #16
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167e:	2201      	movs	r2, #1
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e007      	b.n	800169a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2201      	movs	r2, #1
 8001692:	4013      	ands	r3, r2
 8001694:	2b01      	cmp	r3, #1
 8001696:	d1d0      	bne.n	800163a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b004      	add	sp, #16
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	80000017 	.word	0x80000017
 80016a8:	40012708 	.word	0x40012708
 80016ac:	20000000 	.word	0x20000000
 80016b0:	00030d40 	.word	0x00030d40

080016b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff fa08 	bl	8000ad6 <LL_ADC_IsDisableOngoing>
 80016c6:	0003      	movs	r3, r0
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f7ff f9f0 	bl	8000ab4 <LL_ADC_IsEnabled>
 80016d4:	1e03      	subs	r3, r0, #0
 80016d6:	d046      	beq.n	8001766 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d143      	bne.n	8001766 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2205      	movs	r2, #5
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d10d      	bne.n	8001708 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff f9cd 	bl	8000a90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2203      	movs	r2, #3
 80016fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016fe:	f7ff f8b1 	bl	8000864 <HAL_GetTick>
 8001702:	0003      	movs	r3, r0
 8001704:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001706:	e028      	b.n	800175a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170c:	2210      	movs	r2, #16
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001718:	2201      	movs	r2, #1
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e021      	b.n	8001768 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001724:	f7ff f89e 	bl	8000864 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d913      	bls.n	800175a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2201      	movs	r2, #1
 800173a:	4013      	ands	r3, r2
 800173c:	d00d      	beq.n	800175a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	2210      	movs	r2, #16
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	2201      	movs	r2, #1
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e006      	b.n	8001768 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	d1de      	bne.n	8001724 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	b004      	add	sp, #16
 800176e:	bd80      	pop	{r7, pc}

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	0002      	movs	r2, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b7f      	cmp	r3, #127	; 0x7f
 8001784:	d828      	bhi.n	80017d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001786:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <__NVIC_SetPriority+0xd4>)
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b25b      	sxtb	r3, r3
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	33c0      	adds	r3, #192	; 0xc0
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	589b      	ldr	r3, [r3, r2]
 8001796:	1dfa      	adds	r2, r7, #7
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	0011      	movs	r1, r2
 800179c:	2203      	movs	r2, #3
 800179e:	400a      	ands	r2, r1
 80017a0:	00d2      	lsls	r2, r2, #3
 80017a2:	21ff      	movs	r1, #255	; 0xff
 80017a4:	4091      	lsls	r1, r2
 80017a6:	000a      	movs	r2, r1
 80017a8:	43d2      	mvns	r2, r2
 80017aa:	401a      	ands	r2, r3
 80017ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	019b      	lsls	r3, r3, #6
 80017b2:	22ff      	movs	r2, #255	; 0xff
 80017b4:	401a      	ands	r2, r3
 80017b6:	1dfb      	adds	r3, r7, #7
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	0018      	movs	r0, r3
 80017bc:	2303      	movs	r3, #3
 80017be:	4003      	ands	r3, r0
 80017c0:	00db      	lsls	r3, r3, #3
 80017c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c4:	481f      	ldr	r0, [pc, #124]	; (8001844 <__NVIC_SetPriority+0xd4>)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25b      	sxtb	r3, r3
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	430a      	orrs	r2, r1
 80017d0:	33c0      	adds	r3, #192	; 0xc0
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017d6:	e031      	b.n	800183c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <__NVIC_SetPriority+0xd8>)
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	0019      	movs	r1, r3
 80017e0:	230f      	movs	r3, #15
 80017e2:	400b      	ands	r3, r1
 80017e4:	3b08      	subs	r3, #8
 80017e6:	089b      	lsrs	r3, r3, #2
 80017e8:	3306      	adds	r3, #6
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	18d3      	adds	r3, r2, r3
 80017ee:	3304      	adds	r3, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	1dfa      	adds	r2, r7, #7
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	0011      	movs	r1, r2
 80017f8:	2203      	movs	r2, #3
 80017fa:	400a      	ands	r2, r1
 80017fc:	00d2      	lsls	r2, r2, #3
 80017fe:	21ff      	movs	r1, #255	; 0xff
 8001800:	4091      	lsls	r1, r2
 8001802:	000a      	movs	r2, r1
 8001804:	43d2      	mvns	r2, r2
 8001806:	401a      	ands	r2, r3
 8001808:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	019b      	lsls	r3, r3, #6
 800180e:	22ff      	movs	r2, #255	; 0xff
 8001810:	401a      	ands	r2, r3
 8001812:	1dfb      	adds	r3, r7, #7
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	0018      	movs	r0, r3
 8001818:	2303      	movs	r3, #3
 800181a:	4003      	ands	r3, r0
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <__NVIC_SetPriority+0xd8>)
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	001c      	movs	r4, r3
 8001828:	230f      	movs	r3, #15
 800182a:	4023      	ands	r3, r4
 800182c:	3b08      	subs	r3, #8
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	430a      	orrs	r2, r1
 8001832:	3306      	adds	r3, #6
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	18c3      	adds	r3, r0, r3
 8001838:	3304      	adds	r3, #4
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b003      	add	sp, #12
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	045b      	lsls	r3, r3, #17
 800185c:	429a      	cmp	r2, r3
 800185e:	d301      	bcc.n	8001864 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001860:	2301      	movs	r3, #1
 8001862:	e010      	b.n	8001886 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <SysTick_Config+0x44>)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	3a01      	subs	r2, #1
 800186a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186c:	2301      	movs	r3, #1
 800186e:	425b      	negs	r3, r3
 8001870:	2103      	movs	r1, #3
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff ff7c 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SysTick_Config+0x44>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187e:	4b04      	ldr	r3, [pc, #16]	; (8001890 <SysTick_Config+0x44>)
 8001880:	2207      	movs	r2, #7
 8001882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001884:	2300      	movs	r3, #0
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	e000e010 	.word	0xe000e010

08001894 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60b9      	str	r1, [r7, #8]
 800189c:	607a      	str	r2, [r7, #4]
 800189e:	210f      	movs	r1, #15
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	1c02      	adds	r2, r0, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	0011      	movs	r1, r2
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff ff5d 	bl	8001770 <__NVIC_SetPriority>
}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff ffbf 	bl	800184c <SysTick_Config>
 80018ce:	0003      	movs	r3, r0
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b002      	add	sp, #8
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e147      	b.n	8001b78 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4091      	lsls	r1, r2
 80018f2:	000a      	movs	r2, r1
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d100      	bne.n	8001900 <HAL_GPIO_Init+0x28>
 80018fe:	e138      	b.n	8001b72 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	4013      	ands	r3, r2
 8001908:	2b01      	cmp	r3, #1
 800190a:	d005      	beq.n	8001918 <HAL_GPIO_Init+0x40>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	4013      	ands	r3, r2
 8001914:	2b02      	cmp	r3, #2
 8001916:	d130      	bne.n	800197a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	43da      	mvns	r2, r3
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	409a      	lsls	r2, r3
 800193a:	0013      	movs	r3, r2
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800194e:	2201      	movs	r2, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	43da      	mvns	r2, r3
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	2201      	movs	r2, #1
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
 800196c:	0013      	movs	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2203      	movs	r2, #3
 8001980:	4013      	ands	r3, r2
 8001982:	2b03      	cmp	r3, #3
 8001984:	d017      	beq.n	80019b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	409a      	lsls	r2, r3
 8001994:	0013      	movs	r3, r2
 8001996:	43da      	mvns	r2, r3
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	409a      	lsls	r2, r3
 80019a8:	0013      	movs	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2203      	movs	r2, #3
 80019bc:	4013      	ands	r3, r2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d123      	bne.n	8001a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	58d3      	ldr	r3, [r2, r3]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2207      	movs	r2, #7
 80019d4:	4013      	ands	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	691a      	ldr	r2, [r3, #16]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2107      	movs	r1, #7
 80019ee:	400b      	ands	r3, r1
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	6939      	ldr	r1, [r7, #16]
 8001a08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2203      	movs	r2, #3
 8001a28:	401a      	ands	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	23c0      	movs	r3, #192	; 0xc0
 8001a44:	029b      	lsls	r3, r3, #10
 8001a46:	4013      	ands	r3, r2
 8001a48:	d100      	bne.n	8001a4c <HAL_GPIO_Init+0x174>
 8001a4a:	e092      	b.n	8001b72 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a4c:	4a50      	ldr	r2, [pc, #320]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	3318      	adds	r3, #24
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	589b      	ldr	r3, [r3, r2]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	220f      	movs	r2, #15
 8001a64:	409a      	lsls	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	23a0      	movs	r3, #160	; 0xa0
 8001a74:	05db      	lsls	r3, r3, #23
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x1ca>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <HAL_GPIO_Init+0x2bc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x1c6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a44      	ldr	r2, [pc, #272]	; (8001b98 <HAL_GPIO_Init+0x2c0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x1c2>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a43      	ldr	r2, [pc, #268]	; (8001b9c <HAL_GPIO_Init+0x2c4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x1be>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x1cc>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x1cc>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x1cc>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x1cc>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	2103      	movs	r1, #3
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	00d2      	lsls	r2, r2, #3
 8001aac:	4093      	lsls	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ab4:	4936      	ldr	r1, [pc, #216]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3318      	adds	r3, #24
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ac2:	4a33      	ldr	r2, [pc, #204]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	58d3      	ldr	r3, [r2, r3]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	43da      	mvns	r2, r3
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	025b      	lsls	r3, r3, #9
 8001adc:	4013      	ands	r3, r2
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae8:	4929      	ldr	r1, [pc, #164]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001aea:	2280      	movs	r2, #128	; 0x80
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001af2:	2384      	movs	r3, #132	; 0x84
 8001af4:	58d3      	ldr	r3, [r2, r3]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43da      	mvns	r2, r3
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	029b      	lsls	r3, r3, #10
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b16:	491e      	ldr	r1, [pc, #120]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b18:	2284      	movs	r2, #132	; 0x84
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43da      	mvns	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	035b      	lsls	r3, r3, #13
 8001b36:	4013      	ands	r3, r2
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43da      	mvns	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	039b      	lsls	r3, r3, #14
 8001b60:	4013      	ands	r3, r2
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	40da      	lsrs	r2, r3
 8001b80:	1e13      	subs	r3, r2, #0
 8001b82:	d000      	beq.n	8001b86 <HAL_GPIO_Init+0x2ae>
 8001b84:	e6b0      	b.n	80018e8 <HAL_GPIO_Init+0x10>
  }
}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b006      	add	sp, #24
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021800 	.word	0x40021800
 8001b94:	50000400 	.word	0x50000400
 8001b98:	50000800 	.word	0x50000800
 8001b9c:	50000c00 	.word	0x50000c00

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	0008      	movs	r0, r1
 8001baa:	0011      	movs	r1, r2
 8001bac:	1cbb      	adds	r3, r7, #2
 8001bae:	1c02      	adds	r2, r0, #0
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	1c7b      	adds	r3, r7, #1
 8001bb4:	1c0a      	adds	r2, r1, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb8:	1c7b      	adds	r3, r7, #1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bca:	1cbb      	adds	r3, r7, #2
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b002      	add	sp, #8
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e082      	b.n	8001cf4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2241      	movs	r2, #65	; 0x41
 8001bf2:	5c9b      	ldrb	r3, [r3, r2]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2240      	movs	r2, #64	; 0x40
 8001bfe:	2100      	movs	r1, #0
 8001c00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7fe fd1f 	bl	8000648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2241      	movs	r2, #65	; 0x41
 8001c0e:	2124      	movs	r1, #36	; 0x24
 8001c10:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	438a      	bics	r2, r1
 8001c20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4934      	ldr	r1, [pc, #208]	; (8001cfc <HAL_I2C_Init+0x120>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4931      	ldr	r1, [pc, #196]	; (8001d00 <HAL_I2C_Init+0x124>)
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d108      	bne.n	8001c5a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0209      	lsls	r1, r1, #8
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	e007      	b.n	8001c6a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2184      	movs	r1, #132	; 0x84
 8001c64:	0209      	lsls	r1, r1, #8
 8001c66:	430a      	orrs	r2, r1
 8001c68:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d104      	bne.n	8001c7c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	491f      	ldr	r1, [pc, #124]	; (8001d04 <HAL_I2C_Init+0x128>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	491a      	ldr	r1, [pc, #104]	; (8001d00 <HAL_I2C_Init+0x124>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69d9      	ldr	r1, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2241      	movs	r2, #65	; 0x41
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2242      	movs	r2, #66	; 0x42
 8001cee:	2100      	movs	r1, #0
 8001cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	f0ffffff 	.word	0xf0ffffff
 8001d00:	ffff7fff 	.word	0xffff7fff
 8001d04:	02008000 	.word	0x02008000

08001d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2241      	movs	r2, #65	; 0x41
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d138      	bne.n	8001d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2240      	movs	r2, #64	; 0x40
 8001d22:	5c9b      	ldrb	r3, [r3, r2]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e032      	b.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2240      	movs	r2, #64	; 0x40
 8001d30:	2101      	movs	r1, #1
 8001d32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2241      	movs	r2, #65	; 0x41
 8001d38:	2124      	movs	r1, #36	; 0x24
 8001d3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2101      	movs	r1, #1
 8001d48:	438a      	bics	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4911      	ldr	r1, [pc, #68]	; (8001d9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d58:	400a      	ands	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2101      	movs	r1, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2241      	movs	r2, #65	; 0x41
 8001d80:	2120      	movs	r1, #32
 8001d82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2240      	movs	r2, #64	; 0x40
 8001d88:	2100      	movs	r1, #0
 8001d8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e000      	b.n	8001d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
  }
}
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b002      	add	sp, #8
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	ffffefff 	.word	0xffffefff

08001da0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2241      	movs	r2, #65	; 0x41
 8001dae:	5c9b      	ldrb	r3, [r3, r2]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b20      	cmp	r3, #32
 8001db4:	d139      	bne.n	8001e2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2240      	movs	r2, #64	; 0x40
 8001dba:	5c9b      	ldrb	r3, [r3, r2]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e033      	b.n	8001e2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	2101      	movs	r1, #1
 8001dca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2241      	movs	r2, #65	; 0x41
 8001dd0:	2124      	movs	r1, #36	; 0x24
 8001dd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2241      	movs	r2, #65	; 0x41
 8001e1a:	2120      	movs	r1, #32
 8001e1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2240      	movs	r2, #64	; 0x40
 8001e22:	2100      	movs	r1, #0
 8001e24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e2a:	2302      	movs	r3, #2
  }
}
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b004      	add	sp, #16
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	fffff0ff 	.word	0xfffff0ff

08001e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a19      	ldr	r2, [pc, #100]	; (8001eac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d11f      	bne.n	8001e9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	0013      	movs	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	189b      	adds	r3, r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4912      	ldr	r1, [pc, #72]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7fe f946 	bl	80000fc <__udivsi3>
 8001e70:	0003      	movs	r3, r0
 8001e72:	3301      	adds	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e76:	e008      	b.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3b01      	subs	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e001      	b.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e009      	b.n	8001e9e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e8c:	695a      	ldr	r2, [r3, #20]
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	401a      	ands	r2, r3
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	fffff9ff 	.word	0xfffff9ff
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	000f4240 	.word	0x000f4240

08001eb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e2f9      	b.n	80024be <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d100      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x1e>
 8001ed4:	e07c      	b.n	8001fd0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed6:	4bc3      	ldr	r3, [pc, #780]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2238      	movs	r2, #56	; 0x38
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee0:	4bc0      	ldr	r3, [pc, #768]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3e>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d10b      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	4bb9      	ldr	r3, [pc, #740]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	029b      	lsls	r3, r3, #10
 8001f04:	4013      	ands	r3, r2
 8001f06:	d062      	beq.n	8001fce <HAL_RCC_OscConfig+0x116>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d15e      	bne.n	8001fce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e2d4      	b.n	80024be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	2380      	movs	r3, #128	; 0x80
 8001f1a:	025b      	lsls	r3, r3, #9
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x78>
 8001f20:	4bb0      	ldr	r3, [pc, #704]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4baf      	ldr	r3, [pc, #700]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f26:	2180      	movs	r1, #128	; 0x80
 8001f28:	0249      	lsls	r1, r1, #9
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e020      	b.n	8001f72 <HAL_RCC_OscConfig+0xba>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	23a0      	movs	r3, #160	; 0xa0
 8001f36:	02db      	lsls	r3, r3, #11
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10e      	bne.n	8001f5a <HAL_RCC_OscConfig+0xa2>
 8001f3c:	4ba9      	ldr	r3, [pc, #676]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4ba8      	ldr	r3, [pc, #672]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	02c9      	lsls	r1, r1, #11
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	4ba6      	ldr	r3, [pc, #664]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4ba5      	ldr	r3, [pc, #660]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f50:	2180      	movs	r1, #128	; 0x80
 8001f52:	0249      	lsls	r1, r1, #9
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e00b      	b.n	8001f72 <HAL_RCC_OscConfig+0xba>
 8001f5a:	4ba2      	ldr	r3, [pc, #648]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4ba1      	ldr	r3, [pc, #644]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	49a1      	ldr	r1, [pc, #644]	; (80021e8 <HAL_RCC_OscConfig+0x330>)
 8001f62:	400a      	ands	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	4b9f      	ldr	r3, [pc, #636]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b9e      	ldr	r3, [pc, #632]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f6c:	499f      	ldr	r1, [pc, #636]	; (80021ec <HAL_RCC_OscConfig+0x334>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d014      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7fe fc73 	bl	8000864 <HAL_GetTick>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f84:	f7fe fc6e 	bl	8000864 <HAL_GetTick>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e293      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f96:	4b93      	ldr	r3, [pc, #588]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	029b      	lsls	r3, r3, #10
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0xcc>
 8001fa2:	e015      	b.n	8001fd0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7fe fc5e 	bl	8000864 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fae:	f7fe fc59 	bl	8000864 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b64      	cmp	r3, #100	; 0x64
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e27e      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc0:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	; 0x80
 8001fc6:	029b      	lsls	r3, r3, #10
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d1f0      	bne.n	8001fae <HAL_RCC_OscConfig+0xf6>
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d100      	bne.n	8001fdc <HAL_RCC_OscConfig+0x124>
 8001fda:	e099      	b.n	8002110 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fdc:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2238      	movs	r2, #56	; 0x38
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2203      	movs	r2, #3
 8001fec:	4013      	ands	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d102      	bne.n	8001ffc <HAL_RCC_OscConfig+0x144>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d002      	beq.n	8002002 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d135      	bne.n	800206e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002002:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4013      	ands	r3, r2
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x162>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e251      	b.n	80024be <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a74      	ldr	r2, [pc, #464]	; (80021f0 <HAL_RCC_OscConfig+0x338>)
 8002020:	4013      	ands	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	021a      	lsls	r2, r3, #8
 800202a:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d112      	bne.n	800205c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002036:	4b6b      	ldr	r3, [pc, #428]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <HAL_RCC_OscConfig+0x33c>)
 800203c:	4013      	ands	r3, r2
 800203e:	0019      	movs	r1, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800204a:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	0adb      	lsrs	r3, r3, #11
 8002050:	2207      	movs	r2, #7
 8002052:	4013      	ands	r3, r2
 8002054:	4a68      	ldr	r2, [pc, #416]	; (80021f8 <HAL_RCC_OscConfig+0x340>)
 8002056:	40da      	lsrs	r2, r3
 8002058:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCC_OscConfig+0x344>)
 800205a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_OscConfig+0x348>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	0018      	movs	r0, r3
 8002062:	f7fe fba3 	bl	80007ac <HAL_InitTick>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d051      	beq.n	800210e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e227      	b.n	80024be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d030      	beq.n	80020d8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002076:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5e      	ldr	r2, [pc, #376]	; (80021f4 <HAL_RCC_OscConfig+0x33c>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800208a:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b55      	ldr	r3, [pc, #340]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	0049      	lsls	r1, r1, #1
 8002094:	430a      	orrs	r2, r1
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe fbe4 	bl	8000864 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a2:	f7fe fbdf 	bl	8000864 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e204      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b4:	4b4b      	ldr	r3, [pc, #300]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c0:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	4a4a      	ldr	r2, [pc, #296]	; (80021f0 <HAL_RCC_OscConfig+0x338>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	0019      	movs	r1, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	021a      	lsls	r2, r3, #8
 80020d0:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e01b      	b.n	8002110 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80020d8:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 80020de:	4949      	ldr	r1, [pc, #292]	; (8002204 <HAL_RCC_OscConfig+0x34c>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe fbbe 	bl	8000864 <HAL_GetTick>
 80020e8:	0003      	movs	r3, r0
 80020ea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ee:	f7fe fbb9 	bl	8000864 <HAL_GetTick>
 80020f2:	0002      	movs	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1de      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002100:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4013      	ands	r3, r2
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x236>
 800210c:	e000      	b.n	8002110 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800210e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2208      	movs	r2, #8
 8002116:	4013      	ands	r3, r2
 8002118:	d047      	beq.n	80021aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800211a:	4b32      	ldr	r3, [pc, #200]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2238      	movs	r2, #56	; 0x38
 8002120:	4013      	ands	r3, r2
 8002122:	2b18      	cmp	r3, #24
 8002124:	d10a      	bne.n	800213c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002126:	4b2f      	ldr	r3, [pc, #188]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212a:	2202      	movs	r2, #2
 800212c:	4013      	ands	r3, r2
 800212e:	d03c      	beq.n	80021aa <HAL_RCC_OscConfig+0x2f2>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d138      	bne.n	80021aa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e1c0      	b.n	80024be <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d019      	beq.n	8002178 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 8002146:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800214a:	2101      	movs	r1, #1
 800214c:	430a      	orrs	r2, r1
 800214e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe fb88 	bl	8000864 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800215a:	f7fe fb83 	bl	8000864 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1a8      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	2202      	movs	r2, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d0f1      	beq.n	800215a <HAL_RCC_OscConfig+0x2a2>
 8002176:	e018      	b.n	80021aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800217a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 800217e:	2101      	movs	r1, #1
 8002180:	438a      	bics	r2, r1
 8002182:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fb6e 	bl	8000864 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218e:	f7fe fb69 	bl	8000864 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e18e      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	2202      	movs	r2, #2
 80021a6:	4013      	ands	r3, r2
 80021a8:	d1f1      	bne.n	800218e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2204      	movs	r2, #4
 80021b0:	4013      	ands	r3, r2
 80021b2:	d100      	bne.n	80021b6 <HAL_RCC_OscConfig+0x2fe>
 80021b4:	e0c6      	b.n	8002344 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b6:	231f      	movs	r3, #31
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2238      	movs	r2, #56	; 0x38
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d11e      	bne.n	8002208 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80021ca:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_RCC_OscConfig+0x32c>)
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2202      	movs	r2, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	d100      	bne.n	80021d6 <HAL_RCC_OscConfig+0x31e>
 80021d4:	e0b6      	b.n	8002344 <HAL_RCC_OscConfig+0x48c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d000      	beq.n	80021e0 <HAL_RCC_OscConfig+0x328>
 80021de:	e0b1      	b.n	8002344 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e16c      	b.n	80024be <HAL_RCC_OscConfig+0x606>
 80021e4:	40021000 	.word	0x40021000
 80021e8:	fffeffff 	.word	0xfffeffff
 80021ec:	fffbffff 	.word	0xfffbffff
 80021f0:	ffff80ff 	.word	0xffff80ff
 80021f4:	ffffc7ff 	.word	0xffffc7ff
 80021f8:	00f42400 	.word	0x00f42400
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000004 	.word	0x20000004
 8002204:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002208:	4baf      	ldr	r3, [pc, #700]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800220a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	055b      	lsls	r3, r3, #21
 8002210:	4013      	ands	r3, r2
 8002212:	d101      	bne.n	8002218 <HAL_RCC_OscConfig+0x360>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x362>
 8002218:	2300      	movs	r3, #0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d011      	beq.n	8002242 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800221e:	4baa      	ldr	r3, [pc, #680]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002222:	4ba9      	ldr	r3, [pc, #676]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	0549      	lsls	r1, r1, #21
 8002228:	430a      	orrs	r2, r1
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c
 800222c:	4ba6      	ldr	r3, [pc, #664]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800222e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	055b      	lsls	r3, r3, #21
 8002234:	4013      	ands	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800223a:	231f      	movs	r3, #31
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002242:	4ba2      	ldr	r3, [pc, #648]	; (80024cc <HAL_RCC_OscConfig+0x614>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4013      	ands	r3, r2
 800224c:	d11a      	bne.n	8002284 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224e:	4b9f      	ldr	r3, [pc, #636]	; (80024cc <HAL_RCC_OscConfig+0x614>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b9e      	ldr	r3, [pc, #632]	; (80024cc <HAL_RCC_OscConfig+0x614>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0049      	lsls	r1, r1, #1
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800225c:	f7fe fb02 	bl	8000864 <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fafd 	bl	8000864 <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e122      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002278:	4b94      	ldr	r3, [pc, #592]	; (80024cc <HAL_RCC_OscConfig+0x614>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4013      	ands	r3, r2
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x3e2>
 800228c:	4b8e      	ldr	r3, [pc, #568]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800228e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002290:	4b8d      	ldr	r3, [pc, #564]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002292:	2101      	movs	r1, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	65da      	str	r2, [r3, #92]	; 0x5c
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x41c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b05      	cmp	r3, #5
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x404>
 80022a2:	4b89      	ldr	r3, [pc, #548]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022a6:	4b88      	ldr	r3, [pc, #544]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022a8:	2104      	movs	r1, #4
 80022aa:	430a      	orrs	r2, r1
 80022ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80022ae:	4b86      	ldr	r3, [pc, #536]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022b2:	4b85      	ldr	r3, [pc, #532]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0x41c>
 80022bc:	4b82      	ldr	r3, [pc, #520]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022c0:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022c2:	2101      	movs	r1, #1
 80022c4:	438a      	bics	r2, r1
 80022c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80022c8:	4b7f      	ldr	r3, [pc, #508]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022cc:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022ce:	2104      	movs	r1, #4
 80022d0:	438a      	bics	r2, r1
 80022d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d014      	beq.n	8002306 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022dc:	f7fe fac2 	bl	8000864 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e4:	e009      	b.n	80022fa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fabd 	bl	8000864 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	4a77      	ldr	r2, [pc, #476]	; (80024d0 <HAL_RCC_OscConfig+0x618>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e0e1      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	2202      	movs	r2, #2
 8002300:	4013      	ands	r3, r2
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x42e>
 8002304:	e013      	b.n	800232e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe faad 	bl	8000864 <HAL_GetTick>
 800230a:	0003      	movs	r3, r0
 800230c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800230e:	e009      	b.n	8002324 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002310:	f7fe faa8 	bl	8000864 <HAL_GetTick>
 8002314:	0002      	movs	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	4a6d      	ldr	r2, [pc, #436]	; (80024d0 <HAL_RCC_OscConfig+0x618>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0cc      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002324:	4b68      	ldr	r3, [pc, #416]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2202      	movs	r2, #2
 800232a:	4013      	ands	r3, r2
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800232e:	231f      	movs	r3, #31
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002338:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800233a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800233c:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800233e:	4965      	ldr	r1, [pc, #404]	; (80024d4 <HAL_RCC_OscConfig+0x61c>)
 8002340:	400a      	ands	r2, r1
 8002342:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d100      	bne.n	800234e <HAL_RCC_OscConfig+0x496>
 800234c:	e0b6      	b.n	80024bc <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234e:	4b5e      	ldr	r3, [pc, #376]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2238      	movs	r2, #56	; 0x38
 8002354:	4013      	ands	r3, r2
 8002356:	2b10      	cmp	r3, #16
 8002358:	d100      	bne.n	800235c <HAL_RCC_OscConfig+0x4a4>
 800235a:	e07e      	b.n	800245a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d153      	bne.n	800240c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b58      	ldr	r3, [pc, #352]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800236a:	495b      	ldr	r1, [pc, #364]	; (80024d8 <HAL_RCC_OscConfig+0x620>)
 800236c:	400a      	ands	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fa78 	bl	8000864 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe fa73 	bl	8000864 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e098      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238c:	4b4e      	ldr	r3, [pc, #312]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	049b      	lsls	r3, r3, #18
 8002394:	4013      	ands	r3, r2
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002398:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a4f      	ldr	r2, [pc, #316]	; (80024dc <HAL_RCC_OscConfig+0x624>)
 800239e:	4013      	ands	r3, r2
 80023a0:	0019      	movs	r1, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1a      	ldr	r2, [r3, #32]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	431a      	orrs	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	431a      	orrs	r2, r3
 80023c0:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80023cc:	2180      	movs	r1, #128	; 0x80
 80023ce:	0449      	lsls	r1, r1, #17
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80023d4:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	0549      	lsls	r1, r1, #21
 80023de:	430a      	orrs	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fa3f 	bl	8000864 <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ec:	f7fe fa3a 	bl	8000864 <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e05f      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	049b      	lsls	r3, r3, #18
 8002406:	4013      	ands	r3, r2
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x534>
 800240a:	e057      	b.n	80024bc <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800240c:	4b2e      	ldr	r3, [pc, #184]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002412:	4931      	ldr	r1, [pc, #196]	; (80024d8 <HAL_RCC_OscConfig+0x620>)
 8002414:	400a      	ands	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800241e:	2103      	movs	r1, #3
 8002420:	438a      	bics	r2, r1
 8002422:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800242a:	492d      	ldr	r1, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x628>)
 800242c:	400a      	ands	r2, r1
 800242e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fa18 	bl	8000864 <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fa13 	bl	8000864 <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e038      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	049b      	lsls	r3, r3, #18
 8002454:	4013      	ands	r3, r2
 8002456:	d1f0      	bne.n	800243a <HAL_RCC_OscConfig+0x582>
 8002458:	e030      	b.n	80024bc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e02b      	b.n	80024be <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_RCC_OscConfig+0x610>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2203      	movs	r2, #3
 8002470:	401a      	ands	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	429a      	cmp	r2, r3
 8002478:	d11e      	bne.n	80024b8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2270      	movs	r2, #112	; 0x70
 800247e:	401a      	ands	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d117      	bne.n	80024b8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	23fe      	movs	r3, #254	; 0xfe
 800248c:	01db      	lsls	r3, r3, #7
 800248e:	401a      	ands	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d10e      	bne.n	80024b8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	23f8      	movs	r3, #248	; 0xf8
 800249e:	039b      	lsls	r3, r3, #14
 80024a0:	401a      	ands	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	0f5b      	lsrs	r3, r3, #29
 80024ae:	075a      	lsls	r2, r3, #29
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b008      	add	sp, #32
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40007000 	.word	0x40007000
 80024d0:	00001388 	.word	0x00001388
 80024d4:	efffffff 	.word	0xefffffff
 80024d8:	feffffff 	.word	0xfeffffff
 80024dc:	1fc1808c 	.word	0x1fc1808c
 80024e0:	effeffff 	.word	0xeffeffff

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0e9      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f8:	4b76      	ldr	r3, [pc, #472]	; (80026d4 <HAL_RCC_ClockConfig+0x1f0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2207      	movs	r2, #7
 80024fe:	4013      	ands	r3, r2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d91e      	bls.n	8002544 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b73      	ldr	r3, [pc, #460]	; (80026d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2207      	movs	r2, #7
 800250c:	4393      	bics	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	4b70      	ldr	r3, [pc, #448]	; (80026d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002518:	f7fe f9a4 	bl	8000864 <HAL_GetTick>
 800251c:	0003      	movs	r3, r0
 800251e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002520:	e009      	b.n	8002536 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002522:	f7fe f99f 	bl	8000864 <HAL_GetTick>
 8002526:	0002      	movs	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	4a6a      	ldr	r2, [pc, #424]	; (80026d8 <HAL_RCC_ClockConfig+0x1f4>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0ca      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002536:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2207      	movs	r2, #7
 800253c:	4013      	ands	r3, r2
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d015      	beq.n	800257a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d006      	beq.n	8002566 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002558:	4b60      	ldr	r3, [pc, #384]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 800255e:	21e0      	movs	r1, #224	; 0xe0
 8002560:	01c9      	lsls	r1, r1, #7
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002566:	4b5d      	ldr	r3, [pc, #372]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4a5d      	ldr	r2, [pc, #372]	; (80026e0 <HAL_RCC_ClockConfig+0x1fc>)
 800256c:	4013      	ands	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 8002576:	430a      	orrs	r2, r1
 8002578:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2201      	movs	r2, #1
 8002580:	4013      	ands	r3, r2
 8002582:	d057      	beq.n	8002634 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d107      	bne.n	800259c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	; 0x80
 8002592:	029b      	lsls	r3, r3, #10
 8002594:	4013      	ands	r3, r2
 8002596:	d12b      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e097      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a4:	4b4d      	ldr	r3, [pc, #308]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	049b      	lsls	r3, r3, #18
 80025ac:	4013      	ands	r3, r2
 80025ae:	d11f      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e08b      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025bc:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4013      	ands	r3, r2
 80025c6:	d113      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e07f      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d106      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025d4:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 80025d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d8:	2202      	movs	r2, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	d108      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e074      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e06d      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f0:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2207      	movs	r2, #7
 80025f6:	4393      	bics	r3, r2
 80025f8:	0019      	movs	r1, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	4b37      	ldr	r3, [pc, #220]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 8002600:	430a      	orrs	r2, r1
 8002602:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe f92e 	bl	8000864 <HAL_GetTick>
 8002608:	0003      	movs	r3, r0
 800260a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260c:	e009      	b.n	8002622 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260e:	f7fe f929 	bl	8000864 <HAL_GetTick>
 8002612:	0002      	movs	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	4a2f      	ldr	r2, [pc, #188]	; (80026d8 <HAL_RCC_ClockConfig+0x1f4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e054      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2238      	movs	r2, #56	; 0x38
 8002628:	401a      	ands	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	429a      	cmp	r2, r3
 8002632:	d1ec      	bne.n	800260e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002634:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2207      	movs	r2, #7
 800263a:	4013      	ands	r3, r2
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d21e      	bcs.n	8002680 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2207      	movs	r2, #7
 8002648:	4393      	bics	r3, r2
 800264a:	0019      	movs	r1, r3
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_RCC_ClockConfig+0x1f0>)
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002654:	f7fe f906 	bl	8000864 <HAL_GetTick>
 8002658:	0003      	movs	r3, r0
 800265a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800265c:	e009      	b.n	8002672 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800265e:	f7fe f901 	bl	8000864 <HAL_GetTick>
 8002662:	0002      	movs	r2, r0
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_RCC_ClockConfig+0x1f4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e02c      	b.n	80026cc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2207      	movs	r2, #7
 8002678:	4013      	ands	r3, r2
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d1ee      	bne.n	800265e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2204      	movs	r2, #4
 8002686:	4013      	ands	r3, r2
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <HAL_RCC_ClockConfig+0x200>)
 8002690:	4013      	ands	r3, r2
 8002692:	0019      	movs	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 800269a:	430a      	orrs	r2, r1
 800269c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800269e:	f000 f829 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026a2:	0001      	movs	r1, r0
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_RCC_ClockConfig+0x1f8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	220f      	movs	r2, #15
 80026ac:	401a      	ands	r2, r3
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_RCC_ClockConfig+0x204>)
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	58d3      	ldr	r3, [r2, r3]
 80026b4:	221f      	movs	r2, #31
 80026b6:	4013      	ands	r3, r2
 80026b8:	000a      	movs	r2, r1
 80026ba:	40da      	lsrs	r2, r3
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x208>)
 80026be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_ClockConfig+0x20c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7fe f871 	bl	80007ac <HAL_InitTick>
 80026ca:	0003      	movs	r3, r0
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b004      	add	sp, #16
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40022000 	.word	0x40022000
 80026d8:	00001388 	.word	0x00001388
 80026dc:	40021000 	.word	0x40021000
 80026e0:	fffff0ff 	.word	0xfffff0ff
 80026e4:	ffff8fff 	.word	0xffff8fff
 80026e8:	0800287c 	.word	0x0800287c
 80026ec:	20000000 	.word	0x20000000
 80026f0:	20000004 	.word	0x20000004

080026f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fa:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2238      	movs	r2, #56	; 0x38
 8002700:	4013      	ands	r3, r2
 8002702:	d10f      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002704:	4b39      	ldr	r3, [pc, #228]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0adb      	lsrs	r3, r3, #11
 800270a:	2207      	movs	r2, #7
 800270c:	4013      	ands	r3, r2
 800270e:	2201      	movs	r2, #1
 8002710:	409a      	lsls	r2, r3
 8002712:	0013      	movs	r3, r2
 8002714:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	4835      	ldr	r0, [pc, #212]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800271a:	f7fd fcef 	bl	80000fc <__udivsi3>
 800271e:	0003      	movs	r3, r0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	e05d      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002724:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2238      	movs	r2, #56	; 0x38
 800272a:	4013      	ands	r3, r2
 800272c:	2b08      	cmp	r3, #8
 800272e:	d102      	bne.n	8002736 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e054      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2238      	movs	r2, #56	; 0x38
 800273c:	4013      	ands	r3, r2
 800273e:	2b10      	cmp	r3, #16
 8002740:	d138      	bne.n	80027b4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2203      	movs	r2, #3
 8002748:	4013      	ands	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	2207      	movs	r2, #7
 8002754:	4013      	ands	r3, r2
 8002756:	3301      	adds	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2b03      	cmp	r3, #3
 800275e:	d10d      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	4824      	ldr	r0, [pc, #144]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002764:	f7fd fcca 	bl	80000fc <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	0019      	movs	r1, r3
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	227f      	movs	r2, #127	; 0x7f
 8002774:	4013      	ands	r3, r2
 8002776:	434b      	muls	r3, r1
 8002778:	617b      	str	r3, [r7, #20]
        break;
 800277a:	e00d      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	481c      	ldr	r0, [pc, #112]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002780:	f7fd fcbc 	bl	80000fc <__udivsi3>
 8002784:	0003      	movs	r3, r0
 8002786:	0019      	movs	r1, r3
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	227f      	movs	r2, #127	; 0x7f
 8002790:	4013      	ands	r3, r2
 8002792:	434b      	muls	r3, r1
 8002794:	617b      	str	r3, [r7, #20]
        break;
 8002796:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002798:	4b14      	ldr	r3, [pc, #80]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0f5b      	lsrs	r3, r3, #29
 800279e:	2207      	movs	r2, #7
 80027a0:	4013      	ands	r3, r2
 80027a2:	3301      	adds	r3, #1
 80027a4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	6978      	ldr	r0, [r7, #20]
 80027aa:	f7fd fca7 	bl	80000fc <__udivsi3>
 80027ae:	0003      	movs	r3, r0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	e015      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027b4:	4b0d      	ldr	r3, [pc, #52]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2238      	movs	r2, #56	; 0x38
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d103      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2238      	movs	r2, #56	; 0x38
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b18      	cmp	r3, #24
 80027d2:	d103      	bne.n	80027dc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80027d4:	23fa      	movs	r3, #250	; 0xfa
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e001      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027e0:	693b      	ldr	r3, [r7, #16]
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b006      	add	sp, #24
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	40021000 	.word	0x40021000
 80027f0:	00f42400 	.word	0x00f42400
 80027f4:	007a1200 	.word	0x007a1200

080027f8 <__libc_init_array>:
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	2600      	movs	r6, #0
 80027fc:	4d0c      	ldr	r5, [pc, #48]	; (8002830 <__libc_init_array+0x38>)
 80027fe:	4c0d      	ldr	r4, [pc, #52]	; (8002834 <__libc_init_array+0x3c>)
 8002800:	1b64      	subs	r4, r4, r5
 8002802:	10a4      	asrs	r4, r4, #2
 8002804:	42a6      	cmp	r6, r4
 8002806:	d109      	bne.n	800281c <__libc_init_array+0x24>
 8002808:	2600      	movs	r6, #0
 800280a:	f000 f821 	bl	8002850 <_init>
 800280e:	4d0a      	ldr	r5, [pc, #40]	; (8002838 <__libc_init_array+0x40>)
 8002810:	4c0a      	ldr	r4, [pc, #40]	; (800283c <__libc_init_array+0x44>)
 8002812:	1b64      	subs	r4, r4, r5
 8002814:	10a4      	asrs	r4, r4, #2
 8002816:	42a6      	cmp	r6, r4
 8002818:	d105      	bne.n	8002826 <__libc_init_array+0x2e>
 800281a:	bd70      	pop	{r4, r5, r6, pc}
 800281c:	00b3      	lsls	r3, r6, #2
 800281e:	58eb      	ldr	r3, [r5, r3]
 8002820:	4798      	blx	r3
 8002822:	3601      	adds	r6, #1
 8002824:	e7ee      	b.n	8002804 <__libc_init_array+0xc>
 8002826:	00b3      	lsls	r3, r6, #2
 8002828:	58eb      	ldr	r3, [r5, r3]
 800282a:	4798      	blx	r3
 800282c:	3601      	adds	r6, #1
 800282e:	e7f2      	b.n	8002816 <__libc_init_array+0x1e>
 8002830:	080028bc 	.word	0x080028bc
 8002834:	080028bc 	.word	0x080028bc
 8002838:	080028bc 	.word	0x080028bc
 800283c:	080028c0 	.word	0x080028c0

08002840 <memset>:
 8002840:	0003      	movs	r3, r0
 8002842:	1882      	adds	r2, r0, r2
 8002844:	4293      	cmp	r3, r2
 8002846:	d100      	bne.n	800284a <memset+0xa>
 8002848:	4770      	bx	lr
 800284a:	7019      	strb	r1, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	e7f9      	b.n	8002844 <memset+0x4>

08002850 <_init>:
 8002850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002856:	bc08      	pop	{r3}
 8002858:	469e      	mov	lr, r3
 800285a:	4770      	bx	lr

0800285c <_fini>:
 800285c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002862:	bc08      	pop	{r3}
 8002864:	469e      	mov	lr, r3
 8002866:	4770      	bx	lr
