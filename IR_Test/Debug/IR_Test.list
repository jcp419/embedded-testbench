
IR_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008374  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08008428  08008428  00018428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c4  080088c4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  080088c4  080088c4  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080088c4  080088c4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088c8  080088c8  000188c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080088cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200001f0  08008abc  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08008abc  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a889  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de6  00000000  00000000  0002aaa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002c888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002d348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001635e  00000000  00000000  0002dd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c789  00000000  00000000  0004406e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899b8  00000000  00000000  000507f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da1af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003600  00000000  00000000  000da200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	200001f0 	.word	0x200001f0
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08008410 	.word	0x08008410

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	200001f4 	.word	0x200001f4
 80000f8:	08008410 	.word	0x08008410

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_uqi>:
 800010c:	b402      	push	{r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	5c09      	ldrb	r1, [r1, r0]
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	448e      	add	lr, r1
 800011a:	bc02      	pop	{r1}
 800011c:	4770      	bx	lr
 800011e:	46c0      	nop			; (mov r8, r8)

08000120 <__gnu_thumb1_case_shi>:
 8000120:	b403      	push	{r0, r1}
 8000122:	4671      	mov	r1, lr
 8000124:	0849      	lsrs	r1, r1, #1
 8000126:	0040      	lsls	r0, r0, #1
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	5e09      	ldrsh	r1, [r1, r0]
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	448e      	add	lr, r1
 8000130:	bc03      	pop	{r0, r1}
 8000132:	4770      	bx	lr

08000134 <__udivsi3>:
 8000134:	2200      	movs	r2, #0
 8000136:	0843      	lsrs	r3, r0, #1
 8000138:	428b      	cmp	r3, r1
 800013a:	d374      	bcc.n	8000226 <__udivsi3+0xf2>
 800013c:	0903      	lsrs	r3, r0, #4
 800013e:	428b      	cmp	r3, r1
 8000140:	d35f      	bcc.n	8000202 <__udivsi3+0xce>
 8000142:	0a03      	lsrs	r3, r0, #8
 8000144:	428b      	cmp	r3, r1
 8000146:	d344      	bcc.n	80001d2 <__udivsi3+0x9e>
 8000148:	0b03      	lsrs	r3, r0, #12
 800014a:	428b      	cmp	r3, r1
 800014c:	d328      	bcc.n	80001a0 <__udivsi3+0x6c>
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d30d      	bcc.n	8000170 <__udivsi3+0x3c>
 8000154:	22ff      	movs	r2, #255	; 0xff
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	ba12      	rev	r2, r2
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d302      	bcc.n	8000166 <__udivsi3+0x32>
 8000160:	1212      	asrs	r2, r2, #8
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	d065      	beq.n	8000232 <__udivsi3+0xfe>
 8000166:	0b03      	lsrs	r3, r0, #12
 8000168:	428b      	cmp	r3, r1
 800016a:	d319      	bcc.n	80001a0 <__udivsi3+0x6c>
 800016c:	e000      	b.n	8000170 <__udivsi3+0x3c>
 800016e:	0a09      	lsrs	r1, r1, #8
 8000170:	0bc3      	lsrs	r3, r0, #15
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x46>
 8000176:	03cb      	lsls	r3, r1, #15
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b83      	lsrs	r3, r0, #14
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x52>
 8000182:	038b      	lsls	r3, r1, #14
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b43      	lsrs	r3, r0, #13
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x5e>
 800018e:	034b      	lsls	r3, r1, #13
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b03      	lsrs	r3, r0, #12
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x6a>
 800019a:	030b      	lsls	r3, r1, #12
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0ac3      	lsrs	r3, r0, #11
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x76>
 80001a6:	02cb      	lsls	r3, r1, #11
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a83      	lsrs	r3, r0, #10
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x82>
 80001b2:	028b      	lsls	r3, r1, #10
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a43      	lsrs	r3, r0, #9
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x8e>
 80001be:	024b      	lsls	r3, r1, #9
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a03      	lsrs	r3, r0, #8
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x9a>
 80001ca:	020b      	lsls	r3, r1, #8
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	d2cd      	bcs.n	800016e <__udivsi3+0x3a>
 80001d2:	09c3      	lsrs	r3, r0, #7
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xa8>
 80001d8:	01cb      	lsls	r3, r1, #7
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0983      	lsrs	r3, r0, #6
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xb4>
 80001e4:	018b      	lsls	r3, r1, #6
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0943      	lsrs	r3, r0, #5
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xc0>
 80001f0:	014b      	lsls	r3, r1, #5
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0903      	lsrs	r3, r0, #4
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xcc>
 80001fc:	010b      	lsls	r3, r1, #4
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	08c3      	lsrs	r3, r0, #3
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xd8>
 8000208:	00cb      	lsls	r3, r1, #3
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0883      	lsrs	r3, r0, #2
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xe4>
 8000214:	008b      	lsls	r3, r1, #2
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0843      	lsrs	r3, r0, #1
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xf0>
 8000220:	004b      	lsls	r3, r1, #1
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	1a41      	subs	r1, r0, r1
 8000228:	d200      	bcs.n	800022c <__udivsi3+0xf8>
 800022a:	4601      	mov	r1, r0
 800022c:	4152      	adcs	r2, r2
 800022e:	4610      	mov	r0, r2
 8000230:	4770      	bx	lr
 8000232:	e7ff      	b.n	8000234 <__udivsi3+0x100>
 8000234:	b501      	push	{r0, lr}
 8000236:	2000      	movs	r0, #0
 8000238:	f000 f8f0 	bl	800041c <__aeabi_idiv0>
 800023c:	bd02      	pop	{r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_uidivmod>:
 8000240:	2900      	cmp	r1, #0
 8000242:	d0f7      	beq.n	8000234 <__udivsi3+0x100>
 8000244:	e776      	b.n	8000134 <__udivsi3>
 8000246:	4770      	bx	lr

08000248 <__divsi3>:
 8000248:	4603      	mov	r3, r0
 800024a:	430b      	orrs	r3, r1
 800024c:	d47f      	bmi.n	800034e <__divsi3+0x106>
 800024e:	2200      	movs	r2, #0
 8000250:	0843      	lsrs	r3, r0, #1
 8000252:	428b      	cmp	r3, r1
 8000254:	d374      	bcc.n	8000340 <__divsi3+0xf8>
 8000256:	0903      	lsrs	r3, r0, #4
 8000258:	428b      	cmp	r3, r1
 800025a:	d35f      	bcc.n	800031c <__divsi3+0xd4>
 800025c:	0a03      	lsrs	r3, r0, #8
 800025e:	428b      	cmp	r3, r1
 8000260:	d344      	bcc.n	80002ec <__divsi3+0xa4>
 8000262:	0b03      	lsrs	r3, r0, #12
 8000264:	428b      	cmp	r3, r1
 8000266:	d328      	bcc.n	80002ba <__divsi3+0x72>
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d30d      	bcc.n	800028a <__divsi3+0x42>
 800026e:	22ff      	movs	r2, #255	; 0xff
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	ba12      	rev	r2, r2
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__divsi3+0x38>
 800027a:	1212      	asrs	r2, r2, #8
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	d065      	beq.n	800034c <__divsi3+0x104>
 8000280:	0b03      	lsrs	r3, r0, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d319      	bcc.n	80002ba <__divsi3+0x72>
 8000286:	e000      	b.n	800028a <__divsi3+0x42>
 8000288:	0a09      	lsrs	r1, r1, #8
 800028a:	0bc3      	lsrs	r3, r0, #15
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x4c>
 8000290:	03cb      	lsls	r3, r1, #15
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b83      	lsrs	r3, r0, #14
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x58>
 800029c:	038b      	lsls	r3, r1, #14
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b43      	lsrs	r3, r0, #13
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x64>
 80002a8:	034b      	lsls	r3, r1, #13
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b03      	lsrs	r3, r0, #12
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x70>
 80002b4:	030b      	lsls	r3, r1, #12
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0ac3      	lsrs	r3, r0, #11
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x7c>
 80002c0:	02cb      	lsls	r3, r1, #11
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a83      	lsrs	r3, r0, #10
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x88>
 80002cc:	028b      	lsls	r3, r1, #10
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a43      	lsrs	r3, r0, #9
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x94>
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a03      	lsrs	r3, r0, #8
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0xa0>
 80002e4:	020b      	lsls	r3, r1, #8
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	d2cd      	bcs.n	8000288 <__divsi3+0x40>
 80002ec:	09c3      	lsrs	r3, r0, #7
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xae>
 80002f2:	01cb      	lsls	r3, r1, #7
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0983      	lsrs	r3, r0, #6
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xba>
 80002fe:	018b      	lsls	r3, r1, #6
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0943      	lsrs	r3, r0, #5
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xc6>
 800030a:	014b      	lsls	r3, r1, #5
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0903      	lsrs	r3, r0, #4
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xd2>
 8000316:	010b      	lsls	r3, r1, #4
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	08c3      	lsrs	r3, r0, #3
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xde>
 8000322:	00cb      	lsls	r3, r1, #3
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0883      	lsrs	r3, r0, #2
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xea>
 800032e:	008b      	lsls	r3, r1, #2
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0843      	lsrs	r3, r0, #1
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xf6>
 800033a:	004b      	lsls	r3, r1, #1
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	1a41      	subs	r1, r0, r1
 8000342:	d200      	bcs.n	8000346 <__divsi3+0xfe>
 8000344:	4601      	mov	r1, r0
 8000346:	4152      	adcs	r2, r2
 8000348:	4610      	mov	r0, r2
 800034a:	4770      	bx	lr
 800034c:	e05d      	b.n	800040a <__divsi3+0x1c2>
 800034e:	0fca      	lsrs	r2, r1, #31
 8000350:	d000      	beq.n	8000354 <__divsi3+0x10c>
 8000352:	4249      	negs	r1, r1
 8000354:	1003      	asrs	r3, r0, #32
 8000356:	d300      	bcc.n	800035a <__divsi3+0x112>
 8000358:	4240      	negs	r0, r0
 800035a:	4053      	eors	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	469c      	mov	ip, r3
 8000360:	0903      	lsrs	r3, r0, #4
 8000362:	428b      	cmp	r3, r1
 8000364:	d32d      	bcc.n	80003c2 <__divsi3+0x17a>
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d312      	bcc.n	8000392 <__divsi3+0x14a>
 800036c:	22fc      	movs	r2, #252	; 0xfc
 800036e:	0189      	lsls	r1, r1, #6
 8000370:	ba12      	rev	r2, r2
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d30c      	bcc.n	8000392 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d308      	bcc.n	8000392 <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d304      	bcc.n	8000392 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	d03a      	beq.n	8000402 <__divsi3+0x1ba>
 800038c:	1192      	asrs	r2, r2, #6
 800038e:	e000      	b.n	8000392 <__divsi3+0x14a>
 8000390:	0989      	lsrs	r1, r1, #6
 8000392:	09c3      	lsrs	r3, r0, #7
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x154>
 8000398:	01cb      	lsls	r3, r1, #7
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0983      	lsrs	r3, r0, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x160>
 80003a4:	018b      	lsls	r3, r1, #6
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0943      	lsrs	r3, r0, #5
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x16c>
 80003b0:	014b      	lsls	r3, r1, #5
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0903      	lsrs	r3, r0, #4
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x178>
 80003bc:	010b      	lsls	r3, r1, #4
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	08c3      	lsrs	r3, r0, #3
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x184>
 80003c8:	00cb      	lsls	r3, r1, #3
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0883      	lsrs	r3, r0, #2
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x190>
 80003d4:	008b      	lsls	r3, r1, #2
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	d2d9      	bcs.n	8000390 <__divsi3+0x148>
 80003dc:	0843      	lsrs	r3, r0, #1
 80003de:	428b      	cmp	r3, r1
 80003e0:	d301      	bcc.n	80003e6 <__divsi3+0x19e>
 80003e2:	004b      	lsls	r3, r1, #1
 80003e4:	1ac0      	subs	r0, r0, r3
 80003e6:	4152      	adcs	r2, r2
 80003e8:	1a41      	subs	r1, r0, r1
 80003ea:	d200      	bcs.n	80003ee <__divsi3+0x1a6>
 80003ec:	4601      	mov	r1, r0
 80003ee:	4663      	mov	r3, ip
 80003f0:	4152      	adcs	r2, r2
 80003f2:	105b      	asrs	r3, r3, #1
 80003f4:	4610      	mov	r0, r2
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x1b4>
 80003f8:	4240      	negs	r0, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d500      	bpl.n	8000400 <__divsi3+0x1b8>
 80003fe:	4249      	negs	r1, r1
 8000400:	4770      	bx	lr
 8000402:	4663      	mov	r3, ip
 8000404:	105b      	asrs	r3, r3, #1
 8000406:	d300      	bcc.n	800040a <__divsi3+0x1c2>
 8000408:	4240      	negs	r0, r0
 800040a:	b501      	push	{r0, lr}
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f805 	bl	800041c <__aeabi_idiv0>
 8000412:	bd02      	pop	{r1, pc}

08000414 <__aeabi_idivmod>:
 8000414:	2900      	cmp	r1, #0
 8000416:	d0f8      	beq.n	800040a <__divsi3+0x1c2>
 8000418:	e716      	b.n	8000248 <__divsi3>
 800041a:	4770      	bx	lr

0800041c <__aeabi_idiv0>:
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_cdrcmple>:
 8000420:	4684      	mov	ip, r0
 8000422:	0010      	movs	r0, r2
 8000424:	4662      	mov	r2, ip
 8000426:	468c      	mov	ip, r1
 8000428:	0019      	movs	r1, r3
 800042a:	4663      	mov	r3, ip
 800042c:	e000      	b.n	8000430 <__aeabi_cdcmpeq>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdcmpeq>:
 8000430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000432:	f000 ff0d 	bl	8001250 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	d401      	bmi.n	800043e <__aeabi_cdcmpeq+0xe>
 800043a:	2100      	movs	r1, #0
 800043c:	42c8      	cmn	r0, r1
 800043e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000440 <__aeabi_dcmpeq>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fe5d 	bl	8001100 <__eqdf2>
 8000446:	4240      	negs	r0, r0
 8000448:	3001      	adds	r0, #1
 800044a:	bd10      	pop	{r4, pc}

0800044c <__aeabi_dcmplt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 feff 	bl	8001250 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	db01      	blt.n	800045a <__aeabi_dcmplt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_dcmple>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fef5 	bl	8001250 <__ledf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dd01      	ble.n	800046e <__aeabi_dcmple+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_dcmpgt>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 fe85 	bl	8001184 <__gedf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	dc01      	bgt.n	8000482 <__aeabi_dcmpgt+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_dcmpge>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fe7b 	bl	8001184 <__gedf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	da01      	bge.n	8000496 <__aeabi_dcmpge+0xe>
 8000492:	2000      	movs	r0, #0
 8000494:	bd10      	pop	{r4, pc}
 8000496:	2001      	movs	r0, #1
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_dadd>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	464f      	mov	r7, r9
 80004a0:	4646      	mov	r6, r8
 80004a2:	46d6      	mov	lr, sl
 80004a4:	000d      	movs	r5, r1
 80004a6:	0004      	movs	r4, r0
 80004a8:	b5c0      	push	{r6, r7, lr}
 80004aa:	001f      	movs	r7, r3
 80004ac:	0011      	movs	r1, r2
 80004ae:	0328      	lsls	r0, r5, #12
 80004b0:	0f62      	lsrs	r2, r4, #29
 80004b2:	0a40      	lsrs	r0, r0, #9
 80004b4:	4310      	orrs	r0, r2
 80004b6:	007a      	lsls	r2, r7, #1
 80004b8:	0d52      	lsrs	r2, r2, #21
 80004ba:	00e3      	lsls	r3, r4, #3
 80004bc:	033c      	lsls	r4, r7, #12
 80004be:	4691      	mov	r9, r2
 80004c0:	0a64      	lsrs	r4, r4, #9
 80004c2:	0ffa      	lsrs	r2, r7, #31
 80004c4:	0f4f      	lsrs	r7, r1, #29
 80004c6:	006e      	lsls	r6, r5, #1
 80004c8:	4327      	orrs	r7, r4
 80004ca:	4692      	mov	sl, r2
 80004cc:	46b8      	mov	r8, r7
 80004ce:	0d76      	lsrs	r6, r6, #21
 80004d0:	0fed      	lsrs	r5, r5, #31
 80004d2:	00c9      	lsls	r1, r1, #3
 80004d4:	4295      	cmp	r5, r2
 80004d6:	d100      	bne.n	80004da <__aeabi_dadd+0x3e>
 80004d8:	e099      	b.n	800060e <__aeabi_dadd+0x172>
 80004da:	464c      	mov	r4, r9
 80004dc:	1b34      	subs	r4, r6, r4
 80004de:	46a4      	mov	ip, r4
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_dadd+0x4a>
 80004e4:	e07c      	b.n	80005e0 <__aeabi_dadd+0x144>
 80004e6:	464a      	mov	r2, r9
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_dadd+0x52>
 80004ec:	e0b8      	b.n	8000660 <__aeabi_dadd+0x1c4>
 80004ee:	4ac5      	ldr	r2, [pc, #788]	; (8000804 <__aeabi_dadd+0x368>)
 80004f0:	4296      	cmp	r6, r2
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x5a>
 80004f4:	e11c      	b.n	8000730 <__aeabi_dadd+0x294>
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	003c      	movs	r4, r7
 80004fa:	0412      	lsls	r2, r2, #16
 80004fc:	4314      	orrs	r4, r2
 80004fe:	46a0      	mov	r8, r4
 8000500:	4662      	mov	r2, ip
 8000502:	2a38      	cmp	r2, #56	; 0x38
 8000504:	dd00      	ble.n	8000508 <__aeabi_dadd+0x6c>
 8000506:	e161      	b.n	80007cc <__aeabi_dadd+0x330>
 8000508:	2a1f      	cmp	r2, #31
 800050a:	dd00      	ble.n	800050e <__aeabi_dadd+0x72>
 800050c:	e1cc      	b.n	80008a8 <__aeabi_dadd+0x40c>
 800050e:	4664      	mov	r4, ip
 8000510:	2220      	movs	r2, #32
 8000512:	1b12      	subs	r2, r2, r4
 8000514:	4644      	mov	r4, r8
 8000516:	4094      	lsls	r4, r2
 8000518:	000f      	movs	r7, r1
 800051a:	46a1      	mov	r9, r4
 800051c:	4664      	mov	r4, ip
 800051e:	4091      	lsls	r1, r2
 8000520:	40e7      	lsrs	r7, r4
 8000522:	464c      	mov	r4, r9
 8000524:	1e4a      	subs	r2, r1, #1
 8000526:	4191      	sbcs	r1, r2
 8000528:	433c      	orrs	r4, r7
 800052a:	4642      	mov	r2, r8
 800052c:	4321      	orrs	r1, r4
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	1a80      	subs	r0, r0, r2
 8000534:	1a5c      	subs	r4, r3, r1
 8000536:	42a3      	cmp	r3, r4
 8000538:	419b      	sbcs	r3, r3
 800053a:	425f      	negs	r7, r3
 800053c:	1bc7      	subs	r7, r0, r7
 800053e:	023b      	lsls	r3, r7, #8
 8000540:	d400      	bmi.n	8000544 <__aeabi_dadd+0xa8>
 8000542:	e0d0      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000544:	027f      	lsls	r7, r7, #9
 8000546:	0a7f      	lsrs	r7, r7, #9
 8000548:	2f00      	cmp	r7, #0
 800054a:	d100      	bne.n	800054e <__aeabi_dadd+0xb2>
 800054c:	e0ff      	b.n	800074e <__aeabi_dadd+0x2b2>
 800054e:	0038      	movs	r0, r7
 8000550:	f001 fd8a 	bl	8002068 <__clzsi2>
 8000554:	0001      	movs	r1, r0
 8000556:	3908      	subs	r1, #8
 8000558:	2320      	movs	r3, #32
 800055a:	0022      	movs	r2, r4
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	408f      	lsls	r7, r1
 8000560:	40da      	lsrs	r2, r3
 8000562:	408c      	lsls	r4, r1
 8000564:	4317      	orrs	r7, r2
 8000566:	42b1      	cmp	r1, r6
 8000568:	da00      	bge.n	800056c <__aeabi_dadd+0xd0>
 800056a:	e0ff      	b.n	800076c <__aeabi_dadd+0x2d0>
 800056c:	1b89      	subs	r1, r1, r6
 800056e:	1c4b      	adds	r3, r1, #1
 8000570:	2b1f      	cmp	r3, #31
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xda>
 8000574:	e0a8      	b.n	80006c8 <__aeabi_dadd+0x22c>
 8000576:	2220      	movs	r2, #32
 8000578:	0039      	movs	r1, r7
 800057a:	1ad2      	subs	r2, r2, r3
 800057c:	0020      	movs	r0, r4
 800057e:	4094      	lsls	r4, r2
 8000580:	4091      	lsls	r1, r2
 8000582:	40d8      	lsrs	r0, r3
 8000584:	1e62      	subs	r2, r4, #1
 8000586:	4194      	sbcs	r4, r2
 8000588:	40df      	lsrs	r7, r3
 800058a:	2600      	movs	r6, #0
 800058c:	4301      	orrs	r1, r0
 800058e:	430c      	orrs	r4, r1
 8000590:	0763      	lsls	r3, r4, #29
 8000592:	d009      	beq.n	80005a8 <__aeabi_dadd+0x10c>
 8000594:	230f      	movs	r3, #15
 8000596:	4023      	ands	r3, r4
 8000598:	2b04      	cmp	r3, #4
 800059a:	d005      	beq.n	80005a8 <__aeabi_dadd+0x10c>
 800059c:	1d23      	adds	r3, r4, #4
 800059e:	42a3      	cmp	r3, r4
 80005a0:	41a4      	sbcs	r4, r4
 80005a2:	4264      	negs	r4, r4
 80005a4:	193f      	adds	r7, r7, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	023b      	lsls	r3, r7, #8
 80005aa:	d400      	bmi.n	80005ae <__aeabi_dadd+0x112>
 80005ac:	e09e      	b.n	80006ec <__aeabi_dadd+0x250>
 80005ae:	4b95      	ldr	r3, [pc, #596]	; (8000804 <__aeabi_dadd+0x368>)
 80005b0:	3601      	adds	r6, #1
 80005b2:	429e      	cmp	r6, r3
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x11c>
 80005b6:	e0b7      	b.n	8000728 <__aeabi_dadd+0x28c>
 80005b8:	4a93      	ldr	r2, [pc, #588]	; (8000808 <__aeabi_dadd+0x36c>)
 80005ba:	08e4      	lsrs	r4, r4, #3
 80005bc:	4017      	ands	r7, r2
 80005be:	077b      	lsls	r3, r7, #29
 80005c0:	0571      	lsls	r1, r6, #21
 80005c2:	027f      	lsls	r7, r7, #9
 80005c4:	4323      	orrs	r3, r4
 80005c6:	0b3f      	lsrs	r7, r7, #12
 80005c8:	0d4a      	lsrs	r2, r1, #21
 80005ca:	0512      	lsls	r2, r2, #20
 80005cc:	433a      	orrs	r2, r7
 80005ce:	07ed      	lsls	r5, r5, #31
 80005d0:	432a      	orrs	r2, r5
 80005d2:	0018      	movs	r0, r3
 80005d4:	0011      	movs	r1, r2
 80005d6:	bce0      	pop	{r5, r6, r7}
 80005d8:	46ba      	mov	sl, r7
 80005da:	46b1      	mov	r9, r6
 80005dc:	46a8      	mov	r8, r5
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d04b      	beq.n	800067c <__aeabi_dadd+0x1e0>
 80005e4:	464c      	mov	r4, r9
 80005e6:	1ba4      	subs	r4, r4, r6
 80005e8:	46a4      	mov	ip, r4
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_dadd+0x154>
 80005ee:	e123      	b.n	8000838 <__aeabi_dadd+0x39c>
 80005f0:	0004      	movs	r4, r0
 80005f2:	431c      	orrs	r4, r3
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x15c>
 80005f6:	e1af      	b.n	8000958 <__aeabi_dadd+0x4bc>
 80005f8:	4662      	mov	r2, ip
 80005fa:	1e54      	subs	r4, r2, #1
 80005fc:	2a01      	cmp	r2, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x166>
 8000600:	e215      	b.n	8000a2e <__aeabi_dadd+0x592>
 8000602:	4d80      	ldr	r5, [pc, #512]	; (8000804 <__aeabi_dadd+0x368>)
 8000604:	45ac      	cmp	ip, r5
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x16e>
 8000608:	e1c8      	b.n	800099c <__aeabi_dadd+0x500>
 800060a:	46a4      	mov	ip, r4
 800060c:	e11b      	b.n	8000846 <__aeabi_dadd+0x3aa>
 800060e:	464a      	mov	r2, r9
 8000610:	1ab2      	subs	r2, r6, r2
 8000612:	4694      	mov	ip, r2
 8000614:	2a00      	cmp	r2, #0
 8000616:	dc00      	bgt.n	800061a <__aeabi_dadd+0x17e>
 8000618:	e0ac      	b.n	8000774 <__aeabi_dadd+0x2d8>
 800061a:	464a      	mov	r2, r9
 800061c:	2a00      	cmp	r2, #0
 800061e:	d043      	beq.n	80006a8 <__aeabi_dadd+0x20c>
 8000620:	4a78      	ldr	r2, [pc, #480]	; (8000804 <__aeabi_dadd+0x368>)
 8000622:	4296      	cmp	r6, r2
 8000624:	d100      	bne.n	8000628 <__aeabi_dadd+0x18c>
 8000626:	e1af      	b.n	8000988 <__aeabi_dadd+0x4ec>
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	003c      	movs	r4, r7
 800062c:	0412      	lsls	r2, r2, #16
 800062e:	4314      	orrs	r4, r2
 8000630:	46a0      	mov	r8, r4
 8000632:	4662      	mov	r2, ip
 8000634:	2a38      	cmp	r2, #56	; 0x38
 8000636:	dc67      	bgt.n	8000708 <__aeabi_dadd+0x26c>
 8000638:	2a1f      	cmp	r2, #31
 800063a:	dc00      	bgt.n	800063e <__aeabi_dadd+0x1a2>
 800063c:	e15f      	b.n	80008fe <__aeabi_dadd+0x462>
 800063e:	4647      	mov	r7, r8
 8000640:	3a20      	subs	r2, #32
 8000642:	40d7      	lsrs	r7, r2
 8000644:	4662      	mov	r2, ip
 8000646:	2a20      	cmp	r2, #32
 8000648:	d005      	beq.n	8000656 <__aeabi_dadd+0x1ba>
 800064a:	4664      	mov	r4, ip
 800064c:	2240      	movs	r2, #64	; 0x40
 800064e:	1b12      	subs	r2, r2, r4
 8000650:	4644      	mov	r4, r8
 8000652:	4094      	lsls	r4, r2
 8000654:	4321      	orrs	r1, r4
 8000656:	1e4a      	subs	r2, r1, #1
 8000658:	4191      	sbcs	r1, r2
 800065a:	000c      	movs	r4, r1
 800065c:	433c      	orrs	r4, r7
 800065e:	e057      	b.n	8000710 <__aeabi_dadd+0x274>
 8000660:	003a      	movs	r2, r7
 8000662:	430a      	orrs	r2, r1
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x1cc>
 8000666:	e105      	b.n	8000874 <__aeabi_dadd+0x3d8>
 8000668:	0022      	movs	r2, r4
 800066a:	3a01      	subs	r2, #1
 800066c:	2c01      	cmp	r4, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1d6>
 8000670:	e182      	b.n	8000978 <__aeabi_dadd+0x4dc>
 8000672:	4c64      	ldr	r4, [pc, #400]	; (8000804 <__aeabi_dadd+0x368>)
 8000674:	45a4      	cmp	ip, r4
 8000676:	d05b      	beq.n	8000730 <__aeabi_dadd+0x294>
 8000678:	4694      	mov	ip, r2
 800067a:	e741      	b.n	8000500 <__aeabi_dadd+0x64>
 800067c:	4c63      	ldr	r4, [pc, #396]	; (800080c <__aeabi_dadd+0x370>)
 800067e:	1c77      	adds	r7, r6, #1
 8000680:	4227      	tst	r7, r4
 8000682:	d000      	beq.n	8000686 <__aeabi_dadd+0x1ea>
 8000684:	e0c4      	b.n	8000810 <__aeabi_dadd+0x374>
 8000686:	0004      	movs	r4, r0
 8000688:	431c      	orrs	r4, r3
 800068a:	2e00      	cmp	r6, #0
 800068c:	d000      	beq.n	8000690 <__aeabi_dadd+0x1f4>
 800068e:	e169      	b.n	8000964 <__aeabi_dadd+0x4c8>
 8000690:	2c00      	cmp	r4, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1fa>
 8000694:	e1bf      	b.n	8000a16 <__aeabi_dadd+0x57a>
 8000696:	4644      	mov	r4, r8
 8000698:	430c      	orrs	r4, r1
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x202>
 800069c:	e1d0      	b.n	8000a40 <__aeabi_dadd+0x5a4>
 800069e:	0742      	lsls	r2, r0, #29
 80006a0:	08db      	lsrs	r3, r3, #3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	08c0      	lsrs	r0, r0, #3
 80006a6:	e029      	b.n	80006fc <__aeabi_dadd+0x260>
 80006a8:	003a      	movs	r2, r7
 80006aa:	430a      	orrs	r2, r1
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x214>
 80006ae:	e170      	b.n	8000992 <__aeabi_dadd+0x4f6>
 80006b0:	4662      	mov	r2, ip
 80006b2:	4664      	mov	r4, ip
 80006b4:	3a01      	subs	r2, #1
 80006b6:	2c01      	cmp	r4, #1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x220>
 80006ba:	e0e0      	b.n	800087e <__aeabi_dadd+0x3e2>
 80006bc:	4c51      	ldr	r4, [pc, #324]	; (8000804 <__aeabi_dadd+0x368>)
 80006be:	45a4      	cmp	ip, r4
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x228>
 80006c2:	e161      	b.n	8000988 <__aeabi_dadd+0x4ec>
 80006c4:	4694      	mov	ip, r2
 80006c6:	e7b4      	b.n	8000632 <__aeabi_dadd+0x196>
 80006c8:	003a      	movs	r2, r7
 80006ca:	391f      	subs	r1, #31
 80006cc:	40ca      	lsrs	r2, r1
 80006ce:	0011      	movs	r1, r2
 80006d0:	2b20      	cmp	r3, #32
 80006d2:	d003      	beq.n	80006dc <__aeabi_dadd+0x240>
 80006d4:	2240      	movs	r2, #64	; 0x40
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	409f      	lsls	r7, r3
 80006da:	433c      	orrs	r4, r7
 80006dc:	1e63      	subs	r3, r4, #1
 80006de:	419c      	sbcs	r4, r3
 80006e0:	2700      	movs	r7, #0
 80006e2:	2600      	movs	r6, #0
 80006e4:	430c      	orrs	r4, r1
 80006e6:	0763      	lsls	r3, r4, #29
 80006e8:	d000      	beq.n	80006ec <__aeabi_dadd+0x250>
 80006ea:	e753      	b.n	8000594 <__aeabi_dadd+0xf8>
 80006ec:	46b4      	mov	ip, r6
 80006ee:	08e4      	lsrs	r4, r4, #3
 80006f0:	077b      	lsls	r3, r7, #29
 80006f2:	4323      	orrs	r3, r4
 80006f4:	08f8      	lsrs	r0, r7, #3
 80006f6:	4a43      	ldr	r2, [pc, #268]	; (8000804 <__aeabi_dadd+0x368>)
 80006f8:	4594      	cmp	ip, r2
 80006fa:	d01d      	beq.n	8000738 <__aeabi_dadd+0x29c>
 80006fc:	4662      	mov	r2, ip
 80006fe:	0307      	lsls	r7, r0, #12
 8000700:	0552      	lsls	r2, r2, #21
 8000702:	0b3f      	lsrs	r7, r7, #12
 8000704:	0d52      	lsrs	r2, r2, #21
 8000706:	e760      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000708:	4644      	mov	r4, r8
 800070a:	430c      	orrs	r4, r1
 800070c:	1e62      	subs	r2, r4, #1
 800070e:	4194      	sbcs	r4, r2
 8000710:	18e4      	adds	r4, r4, r3
 8000712:	429c      	cmp	r4, r3
 8000714:	419b      	sbcs	r3, r3
 8000716:	425f      	negs	r7, r3
 8000718:	183f      	adds	r7, r7, r0
 800071a:	023b      	lsls	r3, r7, #8
 800071c:	d5e3      	bpl.n	80006e6 <__aeabi_dadd+0x24a>
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <__aeabi_dadd+0x368>)
 8000720:	3601      	adds	r6, #1
 8000722:	429e      	cmp	r6, r3
 8000724:	d000      	beq.n	8000728 <__aeabi_dadd+0x28c>
 8000726:	e0b5      	b.n	8000894 <__aeabi_dadd+0x3f8>
 8000728:	0032      	movs	r2, r6
 800072a:	2700      	movs	r7, #0
 800072c:	2300      	movs	r3, #0
 800072e:	e74c      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000730:	0742      	lsls	r2, r0, #29
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	4313      	orrs	r3, r2
 8000736:	08c0      	lsrs	r0, r0, #3
 8000738:	001a      	movs	r2, r3
 800073a:	4302      	orrs	r2, r0
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x2a4>
 800073e:	e1e1      	b.n	8000b04 <__aeabi_dadd+0x668>
 8000740:	2780      	movs	r7, #128	; 0x80
 8000742:	033f      	lsls	r7, r7, #12
 8000744:	4307      	orrs	r7, r0
 8000746:	033f      	lsls	r7, r7, #12
 8000748:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <__aeabi_dadd+0x368>)
 800074a:	0b3f      	lsrs	r7, r7, #12
 800074c:	e73d      	b.n	80005ca <__aeabi_dadd+0x12e>
 800074e:	0020      	movs	r0, r4
 8000750:	f001 fc8a 	bl	8002068 <__clzsi2>
 8000754:	0001      	movs	r1, r0
 8000756:	3118      	adds	r1, #24
 8000758:	291f      	cmp	r1, #31
 800075a:	dc00      	bgt.n	800075e <__aeabi_dadd+0x2c2>
 800075c:	e6fc      	b.n	8000558 <__aeabi_dadd+0xbc>
 800075e:	3808      	subs	r0, #8
 8000760:	4084      	lsls	r4, r0
 8000762:	0027      	movs	r7, r4
 8000764:	2400      	movs	r4, #0
 8000766:	42b1      	cmp	r1, r6
 8000768:	db00      	blt.n	800076c <__aeabi_dadd+0x2d0>
 800076a:	e6ff      	b.n	800056c <__aeabi_dadd+0xd0>
 800076c:	4a26      	ldr	r2, [pc, #152]	; (8000808 <__aeabi_dadd+0x36c>)
 800076e:	1a76      	subs	r6, r6, r1
 8000770:	4017      	ands	r7, r2
 8000772:	e70d      	b.n	8000590 <__aeabi_dadd+0xf4>
 8000774:	2a00      	cmp	r2, #0
 8000776:	d02f      	beq.n	80007d8 <__aeabi_dadd+0x33c>
 8000778:	464a      	mov	r2, r9
 800077a:	1b92      	subs	r2, r2, r6
 800077c:	4694      	mov	ip, r2
 800077e:	2e00      	cmp	r6, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0x2e8>
 8000782:	e0ad      	b.n	80008e0 <__aeabi_dadd+0x444>
 8000784:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <__aeabi_dadd+0x368>)
 8000786:	4591      	cmp	r9, r2
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x2f0>
 800078a:	e10f      	b.n	80009ac <__aeabi_dadd+0x510>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0412      	lsls	r2, r2, #16
 8000790:	4310      	orrs	r0, r2
 8000792:	4662      	mov	r2, ip
 8000794:	2a38      	cmp	r2, #56	; 0x38
 8000796:	dd00      	ble.n	800079a <__aeabi_dadd+0x2fe>
 8000798:	e10f      	b.n	80009ba <__aeabi_dadd+0x51e>
 800079a:	2a1f      	cmp	r2, #31
 800079c:	dd00      	ble.n	80007a0 <__aeabi_dadd+0x304>
 800079e:	e180      	b.n	8000aa2 <__aeabi_dadd+0x606>
 80007a0:	4664      	mov	r4, ip
 80007a2:	2220      	movs	r2, #32
 80007a4:	001e      	movs	r6, r3
 80007a6:	1b12      	subs	r2, r2, r4
 80007a8:	4667      	mov	r7, ip
 80007aa:	0004      	movs	r4, r0
 80007ac:	4093      	lsls	r3, r2
 80007ae:	4094      	lsls	r4, r2
 80007b0:	40fe      	lsrs	r6, r7
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	4193      	sbcs	r3, r2
 80007b6:	40f8      	lsrs	r0, r7
 80007b8:	4334      	orrs	r4, r6
 80007ba:	431c      	orrs	r4, r3
 80007bc:	4480      	add	r8, r0
 80007be:	1864      	adds	r4, r4, r1
 80007c0:	428c      	cmp	r4, r1
 80007c2:	41bf      	sbcs	r7, r7
 80007c4:	427f      	negs	r7, r7
 80007c6:	464e      	mov	r6, r9
 80007c8:	4447      	add	r7, r8
 80007ca:	e7a6      	b.n	800071a <__aeabi_dadd+0x27e>
 80007cc:	4642      	mov	r2, r8
 80007ce:	430a      	orrs	r2, r1
 80007d0:	0011      	movs	r1, r2
 80007d2:	1e4a      	subs	r2, r1, #1
 80007d4:	4191      	sbcs	r1, r2
 80007d6:	e6ad      	b.n	8000534 <__aeabi_dadd+0x98>
 80007d8:	4c0c      	ldr	r4, [pc, #48]	; (800080c <__aeabi_dadd+0x370>)
 80007da:	1c72      	adds	r2, r6, #1
 80007dc:	4222      	tst	r2, r4
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x346>
 80007e0:	e0a1      	b.n	8000926 <__aeabi_dadd+0x48a>
 80007e2:	0002      	movs	r2, r0
 80007e4:	431a      	orrs	r2, r3
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d000      	beq.n	80007ec <__aeabi_dadd+0x350>
 80007ea:	e0fa      	b.n	80009e2 <__aeabi_dadd+0x546>
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x356>
 80007f0:	e145      	b.n	8000a7e <__aeabi_dadd+0x5e2>
 80007f2:	003a      	movs	r2, r7
 80007f4:	430a      	orrs	r2, r1
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x35e>
 80007f8:	e146      	b.n	8000a88 <__aeabi_dadd+0x5ec>
 80007fa:	0742      	lsls	r2, r0, #29
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	4313      	orrs	r3, r2
 8000800:	08c0      	lsrs	r0, r0, #3
 8000802:	e77b      	b.n	80006fc <__aeabi_dadd+0x260>
 8000804:	000007ff 	.word	0x000007ff
 8000808:	ff7fffff 	.word	0xff7fffff
 800080c:	000007fe 	.word	0x000007fe
 8000810:	4647      	mov	r7, r8
 8000812:	1a5c      	subs	r4, r3, r1
 8000814:	1bc2      	subs	r2, r0, r7
 8000816:	42a3      	cmp	r3, r4
 8000818:	41bf      	sbcs	r7, r7
 800081a:	427f      	negs	r7, r7
 800081c:	46b9      	mov	r9, r7
 800081e:	0017      	movs	r7, r2
 8000820:	464a      	mov	r2, r9
 8000822:	1abf      	subs	r7, r7, r2
 8000824:	023a      	lsls	r2, r7, #8
 8000826:	d500      	bpl.n	800082a <__aeabi_dadd+0x38e>
 8000828:	e08d      	b.n	8000946 <__aeabi_dadd+0x4aa>
 800082a:	0023      	movs	r3, r4
 800082c:	433b      	orrs	r3, r7
 800082e:	d000      	beq.n	8000832 <__aeabi_dadd+0x396>
 8000830:	e68a      	b.n	8000548 <__aeabi_dadd+0xac>
 8000832:	2000      	movs	r0, #0
 8000834:	2500      	movs	r5, #0
 8000836:	e761      	b.n	80006fc <__aeabi_dadd+0x260>
 8000838:	4cb4      	ldr	r4, [pc, #720]	; (8000b0c <__aeabi_dadd+0x670>)
 800083a:	45a1      	cmp	r9, r4
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x3a4>
 800083e:	e0ad      	b.n	800099c <__aeabi_dadd+0x500>
 8000840:	2480      	movs	r4, #128	; 0x80
 8000842:	0424      	lsls	r4, r4, #16
 8000844:	4320      	orrs	r0, r4
 8000846:	4664      	mov	r4, ip
 8000848:	2c38      	cmp	r4, #56	; 0x38
 800084a:	dc3d      	bgt.n	80008c8 <__aeabi_dadd+0x42c>
 800084c:	4662      	mov	r2, ip
 800084e:	2c1f      	cmp	r4, #31
 8000850:	dd00      	ble.n	8000854 <__aeabi_dadd+0x3b8>
 8000852:	e0b7      	b.n	80009c4 <__aeabi_dadd+0x528>
 8000854:	2520      	movs	r5, #32
 8000856:	001e      	movs	r6, r3
 8000858:	1b2d      	subs	r5, r5, r4
 800085a:	0004      	movs	r4, r0
 800085c:	40ab      	lsls	r3, r5
 800085e:	40ac      	lsls	r4, r5
 8000860:	40d6      	lsrs	r6, r2
 8000862:	40d0      	lsrs	r0, r2
 8000864:	4642      	mov	r2, r8
 8000866:	1e5d      	subs	r5, r3, #1
 8000868:	41ab      	sbcs	r3, r5
 800086a:	4334      	orrs	r4, r6
 800086c:	1a12      	subs	r2, r2, r0
 800086e:	4690      	mov	r8, r2
 8000870:	4323      	orrs	r3, r4
 8000872:	e02c      	b.n	80008ce <__aeabi_dadd+0x432>
 8000874:	0742      	lsls	r2, r0, #29
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	4313      	orrs	r3, r2
 800087a:	08c0      	lsrs	r0, r0, #3
 800087c:	e73b      	b.n	80006f6 <__aeabi_dadd+0x25a>
 800087e:	185c      	adds	r4, r3, r1
 8000880:	429c      	cmp	r4, r3
 8000882:	419b      	sbcs	r3, r3
 8000884:	4440      	add	r0, r8
 8000886:	425b      	negs	r3, r3
 8000888:	18c7      	adds	r7, r0, r3
 800088a:	2601      	movs	r6, #1
 800088c:	023b      	lsls	r3, r7, #8
 800088e:	d400      	bmi.n	8000892 <__aeabi_dadd+0x3f6>
 8000890:	e729      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000892:	2602      	movs	r6, #2
 8000894:	4a9e      	ldr	r2, [pc, #632]	; (8000b10 <__aeabi_dadd+0x674>)
 8000896:	0863      	lsrs	r3, r4, #1
 8000898:	4017      	ands	r7, r2
 800089a:	2201      	movs	r2, #1
 800089c:	4014      	ands	r4, r2
 800089e:	431c      	orrs	r4, r3
 80008a0:	07fb      	lsls	r3, r7, #31
 80008a2:	431c      	orrs	r4, r3
 80008a4:	087f      	lsrs	r7, r7, #1
 80008a6:	e673      	b.n	8000590 <__aeabi_dadd+0xf4>
 80008a8:	4644      	mov	r4, r8
 80008aa:	3a20      	subs	r2, #32
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	4662      	mov	r2, ip
 80008b0:	2a20      	cmp	r2, #32
 80008b2:	d005      	beq.n	80008c0 <__aeabi_dadd+0x424>
 80008b4:	4667      	mov	r7, ip
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	1bd2      	subs	r2, r2, r7
 80008ba:	4647      	mov	r7, r8
 80008bc:	4097      	lsls	r7, r2
 80008be:	4339      	orrs	r1, r7
 80008c0:	1e4a      	subs	r2, r1, #1
 80008c2:	4191      	sbcs	r1, r2
 80008c4:	4321      	orrs	r1, r4
 80008c6:	e635      	b.n	8000534 <__aeabi_dadd+0x98>
 80008c8:	4303      	orrs	r3, r0
 80008ca:	1e58      	subs	r0, r3, #1
 80008cc:	4183      	sbcs	r3, r0
 80008ce:	1acc      	subs	r4, r1, r3
 80008d0:	42a1      	cmp	r1, r4
 80008d2:	41bf      	sbcs	r7, r7
 80008d4:	4643      	mov	r3, r8
 80008d6:	427f      	negs	r7, r7
 80008d8:	4655      	mov	r5, sl
 80008da:	464e      	mov	r6, r9
 80008dc:	1bdf      	subs	r7, r3, r7
 80008de:	e62e      	b.n	800053e <__aeabi_dadd+0xa2>
 80008e0:	0002      	movs	r2, r0
 80008e2:	431a      	orrs	r2, r3
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x44c>
 80008e6:	e0bd      	b.n	8000a64 <__aeabi_dadd+0x5c8>
 80008e8:	4662      	mov	r2, ip
 80008ea:	4664      	mov	r4, ip
 80008ec:	3a01      	subs	r2, #1
 80008ee:	2c01      	cmp	r4, #1
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x458>
 80008f2:	e0e5      	b.n	8000ac0 <__aeabi_dadd+0x624>
 80008f4:	4c85      	ldr	r4, [pc, #532]	; (8000b0c <__aeabi_dadd+0x670>)
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d058      	beq.n	80009ac <__aeabi_dadd+0x510>
 80008fa:	4694      	mov	ip, r2
 80008fc:	e749      	b.n	8000792 <__aeabi_dadd+0x2f6>
 80008fe:	4664      	mov	r4, ip
 8000900:	2220      	movs	r2, #32
 8000902:	1b12      	subs	r2, r2, r4
 8000904:	4644      	mov	r4, r8
 8000906:	4094      	lsls	r4, r2
 8000908:	000f      	movs	r7, r1
 800090a:	46a1      	mov	r9, r4
 800090c:	4664      	mov	r4, ip
 800090e:	4091      	lsls	r1, r2
 8000910:	40e7      	lsrs	r7, r4
 8000912:	464c      	mov	r4, r9
 8000914:	1e4a      	subs	r2, r1, #1
 8000916:	4191      	sbcs	r1, r2
 8000918:	433c      	orrs	r4, r7
 800091a:	4642      	mov	r2, r8
 800091c:	430c      	orrs	r4, r1
 800091e:	4661      	mov	r1, ip
 8000920:	40ca      	lsrs	r2, r1
 8000922:	1880      	adds	r0, r0, r2
 8000924:	e6f4      	b.n	8000710 <__aeabi_dadd+0x274>
 8000926:	4c79      	ldr	r4, [pc, #484]	; (8000b0c <__aeabi_dadd+0x670>)
 8000928:	42a2      	cmp	r2, r4
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x492>
 800092c:	e6fd      	b.n	800072a <__aeabi_dadd+0x28e>
 800092e:	1859      	adds	r1, r3, r1
 8000930:	4299      	cmp	r1, r3
 8000932:	419b      	sbcs	r3, r3
 8000934:	4440      	add	r0, r8
 8000936:	425f      	negs	r7, r3
 8000938:	19c7      	adds	r7, r0, r7
 800093a:	07fc      	lsls	r4, r7, #31
 800093c:	0849      	lsrs	r1, r1, #1
 800093e:	0016      	movs	r6, r2
 8000940:	430c      	orrs	r4, r1
 8000942:	087f      	lsrs	r7, r7, #1
 8000944:	e6cf      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000946:	1acc      	subs	r4, r1, r3
 8000948:	42a1      	cmp	r1, r4
 800094a:	41bf      	sbcs	r7, r7
 800094c:	4643      	mov	r3, r8
 800094e:	427f      	negs	r7, r7
 8000950:	1a18      	subs	r0, r3, r0
 8000952:	4655      	mov	r5, sl
 8000954:	1bc7      	subs	r7, r0, r7
 8000956:	e5f7      	b.n	8000548 <__aeabi_dadd+0xac>
 8000958:	08c9      	lsrs	r1, r1, #3
 800095a:	077b      	lsls	r3, r7, #29
 800095c:	4655      	mov	r5, sl
 800095e:	430b      	orrs	r3, r1
 8000960:	08f8      	lsrs	r0, r7, #3
 8000962:	e6c8      	b.n	80006f6 <__aeabi_dadd+0x25a>
 8000964:	2c00      	cmp	r4, #0
 8000966:	d000      	beq.n	800096a <__aeabi_dadd+0x4ce>
 8000968:	e081      	b.n	8000a6e <__aeabi_dadd+0x5d2>
 800096a:	4643      	mov	r3, r8
 800096c:	430b      	orrs	r3, r1
 800096e:	d115      	bne.n	800099c <__aeabi_dadd+0x500>
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	2500      	movs	r5, #0
 8000974:	0300      	lsls	r0, r0, #12
 8000976:	e6e3      	b.n	8000740 <__aeabi_dadd+0x2a4>
 8000978:	1a5c      	subs	r4, r3, r1
 800097a:	42a3      	cmp	r3, r4
 800097c:	419b      	sbcs	r3, r3
 800097e:	1bc7      	subs	r7, r0, r7
 8000980:	425b      	negs	r3, r3
 8000982:	2601      	movs	r6, #1
 8000984:	1aff      	subs	r7, r7, r3
 8000986:	e5da      	b.n	800053e <__aeabi_dadd+0xa2>
 8000988:	0742      	lsls	r2, r0, #29
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	4313      	orrs	r3, r2
 800098e:	08c0      	lsrs	r0, r0, #3
 8000990:	e6d2      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000992:	0742      	lsls	r2, r0, #29
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	4313      	orrs	r3, r2
 8000998:	08c0      	lsrs	r0, r0, #3
 800099a:	e6ac      	b.n	80006f6 <__aeabi_dadd+0x25a>
 800099c:	4643      	mov	r3, r8
 800099e:	4642      	mov	r2, r8
 80009a0:	08c9      	lsrs	r1, r1, #3
 80009a2:	075b      	lsls	r3, r3, #29
 80009a4:	4655      	mov	r5, sl
 80009a6:	430b      	orrs	r3, r1
 80009a8:	08d0      	lsrs	r0, r2, #3
 80009aa:	e6c5      	b.n	8000738 <__aeabi_dadd+0x29c>
 80009ac:	4643      	mov	r3, r8
 80009ae:	4642      	mov	r2, r8
 80009b0:	075b      	lsls	r3, r3, #29
 80009b2:	08c9      	lsrs	r1, r1, #3
 80009b4:	430b      	orrs	r3, r1
 80009b6:	08d0      	lsrs	r0, r2, #3
 80009b8:	e6be      	b.n	8000738 <__aeabi_dadd+0x29c>
 80009ba:	4303      	orrs	r3, r0
 80009bc:	001c      	movs	r4, r3
 80009be:	1e63      	subs	r3, r4, #1
 80009c0:	419c      	sbcs	r4, r3
 80009c2:	e6fc      	b.n	80007be <__aeabi_dadd+0x322>
 80009c4:	0002      	movs	r2, r0
 80009c6:	3c20      	subs	r4, #32
 80009c8:	40e2      	lsrs	r2, r4
 80009ca:	0014      	movs	r4, r2
 80009cc:	4662      	mov	r2, ip
 80009ce:	2a20      	cmp	r2, #32
 80009d0:	d003      	beq.n	80009da <__aeabi_dadd+0x53e>
 80009d2:	2540      	movs	r5, #64	; 0x40
 80009d4:	1aad      	subs	r5, r5, r2
 80009d6:	40a8      	lsls	r0, r5
 80009d8:	4303      	orrs	r3, r0
 80009da:	1e58      	subs	r0, r3, #1
 80009dc:	4183      	sbcs	r3, r0
 80009de:	4323      	orrs	r3, r4
 80009e0:	e775      	b.n	80008ce <__aeabi_dadd+0x432>
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d0e2      	beq.n	80009ac <__aeabi_dadd+0x510>
 80009e6:	003a      	movs	r2, r7
 80009e8:	430a      	orrs	r2, r1
 80009ea:	d0cd      	beq.n	8000988 <__aeabi_dadd+0x4ec>
 80009ec:	0742      	lsls	r2, r0, #29
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	08c0      	lsrs	r0, r0, #3
 80009f6:	0312      	lsls	r2, r2, #12
 80009f8:	4210      	tst	r0, r2
 80009fa:	d006      	beq.n	8000a0a <__aeabi_dadd+0x56e>
 80009fc:	08fc      	lsrs	r4, r7, #3
 80009fe:	4214      	tst	r4, r2
 8000a00:	d103      	bne.n	8000a0a <__aeabi_dadd+0x56e>
 8000a02:	0020      	movs	r0, r4
 8000a04:	08cb      	lsrs	r3, r1, #3
 8000a06:	077a      	lsls	r2, r7, #29
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	0f5a      	lsrs	r2, r3, #29
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	0752      	lsls	r2, r2, #29
 8000a10:	08db      	lsrs	r3, r3, #3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	e690      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000a16:	4643      	mov	r3, r8
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x582>
 8000a1c:	e709      	b.n	8000832 <__aeabi_dadd+0x396>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	4642      	mov	r2, r8
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	075b      	lsls	r3, r3, #29
 8000a26:	4655      	mov	r5, sl
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	08d0      	lsrs	r0, r2, #3
 8000a2c:	e666      	b.n	80006fc <__aeabi_dadd+0x260>
 8000a2e:	1acc      	subs	r4, r1, r3
 8000a30:	42a1      	cmp	r1, r4
 8000a32:	4189      	sbcs	r1, r1
 8000a34:	1a3f      	subs	r7, r7, r0
 8000a36:	4249      	negs	r1, r1
 8000a38:	4655      	mov	r5, sl
 8000a3a:	2601      	movs	r6, #1
 8000a3c:	1a7f      	subs	r7, r7, r1
 8000a3e:	e57e      	b.n	800053e <__aeabi_dadd+0xa2>
 8000a40:	4642      	mov	r2, r8
 8000a42:	1a5c      	subs	r4, r3, r1
 8000a44:	1a87      	subs	r7, r0, r2
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	4192      	sbcs	r2, r2
 8000a4a:	4252      	negs	r2, r2
 8000a4c:	1abf      	subs	r7, r7, r2
 8000a4e:	023a      	lsls	r2, r7, #8
 8000a50:	d53d      	bpl.n	8000ace <__aeabi_dadd+0x632>
 8000a52:	1acc      	subs	r4, r1, r3
 8000a54:	42a1      	cmp	r1, r4
 8000a56:	4189      	sbcs	r1, r1
 8000a58:	4643      	mov	r3, r8
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	1a1f      	subs	r7, r3, r0
 8000a5e:	4655      	mov	r5, sl
 8000a60:	1a7f      	subs	r7, r7, r1
 8000a62:	e595      	b.n	8000590 <__aeabi_dadd+0xf4>
 8000a64:	077b      	lsls	r3, r7, #29
 8000a66:	08c9      	lsrs	r1, r1, #3
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	08f8      	lsrs	r0, r7, #3
 8000a6c:	e643      	b.n	80006f6 <__aeabi_dadd+0x25a>
 8000a6e:	4644      	mov	r4, r8
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	430c      	orrs	r4, r1
 8000a74:	d130      	bne.n	8000ad8 <__aeabi_dadd+0x63c>
 8000a76:	0742      	lsls	r2, r0, #29
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e65c      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000a7e:	077b      	lsls	r3, r7, #29
 8000a80:	08c9      	lsrs	r1, r1, #3
 8000a82:	430b      	orrs	r3, r1
 8000a84:	08f8      	lsrs	r0, r7, #3
 8000a86:	e639      	b.n	80006fc <__aeabi_dadd+0x260>
 8000a88:	185c      	adds	r4, r3, r1
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	419b      	sbcs	r3, r3
 8000a8e:	4440      	add	r0, r8
 8000a90:	425b      	negs	r3, r3
 8000a92:	18c7      	adds	r7, r0, r3
 8000a94:	023b      	lsls	r3, r7, #8
 8000a96:	d400      	bmi.n	8000a9a <__aeabi_dadd+0x5fe>
 8000a98:	e625      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <__aeabi_dadd+0x674>)
 8000a9c:	2601      	movs	r6, #1
 8000a9e:	401f      	ands	r7, r3
 8000aa0:	e621      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000aa2:	0004      	movs	r4, r0
 8000aa4:	3a20      	subs	r2, #32
 8000aa6:	40d4      	lsrs	r4, r2
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	2a20      	cmp	r2, #32
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_dadd+0x61c>
 8000aae:	2240      	movs	r2, #64	; 0x40
 8000ab0:	4666      	mov	r6, ip
 8000ab2:	1b92      	subs	r2, r2, r6
 8000ab4:	4090      	lsls	r0, r2
 8000ab6:	4303      	orrs	r3, r0
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	431c      	orrs	r4, r3
 8000abe:	e67e      	b.n	80007be <__aeabi_dadd+0x322>
 8000ac0:	185c      	adds	r4, r3, r1
 8000ac2:	428c      	cmp	r4, r1
 8000ac4:	4189      	sbcs	r1, r1
 8000ac6:	4440      	add	r0, r8
 8000ac8:	4249      	negs	r1, r1
 8000aca:	1847      	adds	r7, r0, r1
 8000acc:	e6dd      	b.n	800088a <__aeabi_dadd+0x3ee>
 8000ace:	0023      	movs	r3, r4
 8000ad0:	433b      	orrs	r3, r7
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x63a>
 8000ad4:	e6ad      	b.n	8000832 <__aeabi_dadd+0x396>
 8000ad6:	e606      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000ad8:	0744      	lsls	r4, r0, #29
 8000ada:	4323      	orrs	r3, r4
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	08c0      	lsrs	r0, r0, #3
 8000ae0:	0324      	lsls	r4, r4, #12
 8000ae2:	4220      	tst	r0, r4
 8000ae4:	d008      	beq.n	8000af8 <__aeabi_dadd+0x65c>
 8000ae6:	4642      	mov	r2, r8
 8000ae8:	08d6      	lsrs	r6, r2, #3
 8000aea:	4226      	tst	r6, r4
 8000aec:	d104      	bne.n	8000af8 <__aeabi_dadd+0x65c>
 8000aee:	4655      	mov	r5, sl
 8000af0:	0030      	movs	r0, r6
 8000af2:	08cb      	lsrs	r3, r1, #3
 8000af4:	0751      	lsls	r1, r2, #29
 8000af6:	430b      	orrs	r3, r1
 8000af8:	0f5a      	lsrs	r2, r3, #29
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	0752      	lsls	r2, r2, #29
 8000b00:	4313      	orrs	r3, r2
 8000b02:	e619      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000b04:	2300      	movs	r3, #0
 8000b06:	4a01      	ldr	r2, [pc, #4]	; (8000b0c <__aeabi_dadd+0x670>)
 8000b08:	001f      	movs	r7, r3
 8000b0a:	e55e      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000b0c:	000007ff 	.word	0x000007ff
 8000b10:	ff7fffff 	.word	0xff7fffff

08000b14 <__aeabi_ddiv>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	4657      	mov	r7, sl
 8000b18:	464e      	mov	r6, r9
 8000b1a:	4645      	mov	r5, r8
 8000b1c:	46de      	mov	lr, fp
 8000b1e:	b5e0      	push	{r5, r6, r7, lr}
 8000b20:	4681      	mov	r9, r0
 8000b22:	0005      	movs	r5, r0
 8000b24:	030c      	lsls	r4, r1, #12
 8000b26:	0048      	lsls	r0, r1, #1
 8000b28:	4692      	mov	sl, r2
 8000b2a:	001f      	movs	r7, r3
 8000b2c:	b085      	sub	sp, #20
 8000b2e:	0b24      	lsrs	r4, r4, #12
 8000b30:	0d40      	lsrs	r0, r0, #21
 8000b32:	0fce      	lsrs	r6, r1, #31
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_ddiv+0x26>
 8000b38:	e156      	b.n	8000de8 <__aeabi_ddiv+0x2d4>
 8000b3a:	4bd4      	ldr	r3, [pc, #848]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000b3c:	4298      	cmp	r0, r3
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_ddiv+0x2e>
 8000b40:	e172      	b.n	8000e28 <__aeabi_ddiv+0x314>
 8000b42:	0f6b      	lsrs	r3, r5, #29
 8000b44:	00e4      	lsls	r4, r4, #3
 8000b46:	431c      	orrs	r4, r3
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	041b      	lsls	r3, r3, #16
 8000b4c:	4323      	orrs	r3, r4
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4bcf      	ldr	r3, [pc, #828]	; (8000e90 <__aeabi_ddiv+0x37c>)
 8000b52:	00ed      	lsls	r5, r5, #3
 8000b54:	469b      	mov	fp, r3
 8000b56:	2300      	movs	r3, #0
 8000b58:	4699      	mov	r9, r3
 8000b5a:	4483      	add	fp, r0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	033c      	lsls	r4, r7, #12
 8000b60:	007b      	lsls	r3, r7, #1
 8000b62:	4650      	mov	r0, sl
 8000b64:	0b24      	lsrs	r4, r4, #12
 8000b66:	0d5b      	lsrs	r3, r3, #21
 8000b68:	0fff      	lsrs	r7, r7, #31
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_ddiv+0x5c>
 8000b6e:	e11f      	b.n	8000db0 <__aeabi_ddiv+0x29c>
 8000b70:	4ac6      	ldr	r2, [pc, #792]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d100      	bne.n	8000b78 <__aeabi_ddiv+0x64>
 8000b76:	e162      	b.n	8000e3e <__aeabi_ddiv+0x32a>
 8000b78:	49c5      	ldr	r1, [pc, #788]	; (8000e90 <__aeabi_ddiv+0x37c>)
 8000b7a:	0f42      	lsrs	r2, r0, #29
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	00e4      	lsls	r4, r4, #3
 8000b80:	4659      	mov	r1, fp
 8000b82:	4314      	orrs	r4, r2
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	4463      	add	r3, ip
 8000b88:	0412      	lsls	r2, r2, #16
 8000b8a:	1acb      	subs	r3, r1, r3
 8000b8c:	4314      	orrs	r4, r2
 8000b8e:	469b      	mov	fp, r3
 8000b90:	00c2      	lsls	r2, r0, #3
 8000b92:	2000      	movs	r0, #0
 8000b94:	0033      	movs	r3, r6
 8000b96:	407b      	eors	r3, r7
 8000b98:	469a      	mov	sl, r3
 8000b9a:	464b      	mov	r3, r9
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d827      	bhi.n	8000bf0 <__aeabi_ddiv+0xdc>
 8000ba0:	49bc      	ldr	r1, [pc, #752]	; (8000e94 <__aeabi_ddiv+0x380>)
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	58cb      	ldr	r3, [r1, r3]
 8000ba6:	469f      	mov	pc, r3
 8000ba8:	46b2      	mov	sl, r6
 8000baa:	9b00      	ldr	r3, [sp, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d016      	beq.n	8000bde <__aeabi_ddiv+0xca>
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_ddiv+0xa2>
 8000bb4:	e28e      	b.n	80010d4 <__aeabi_ddiv+0x5c0>
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_ddiv+0xa8>
 8000bba:	e0d9      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2400      	movs	r4, #0
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	051b      	lsls	r3, r3, #20
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	07d2      	lsls	r2, r2, #31
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	0028      	movs	r0, r5
 8000bce:	0019      	movs	r1, r3
 8000bd0:	b005      	add	sp, #20
 8000bd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd4:	46bb      	mov	fp, r7
 8000bd6:	46b2      	mov	sl, r6
 8000bd8:	46a9      	mov	r9, r5
 8000bda:	46a0      	mov	r8, r4
 8000bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bde:	2400      	movs	r4, #0
 8000be0:	2500      	movs	r5, #0
 8000be2:	4baa      	ldr	r3, [pc, #680]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000be4:	e7ed      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000be6:	46ba      	mov	sl, r7
 8000be8:	46a0      	mov	r8, r4
 8000bea:	0015      	movs	r5, r2
 8000bec:	9000      	str	r0, [sp, #0]
 8000bee:	e7dc      	b.n	8000baa <__aeabi_ddiv+0x96>
 8000bf0:	4544      	cmp	r4, r8
 8000bf2:	d200      	bcs.n	8000bf6 <__aeabi_ddiv+0xe2>
 8000bf4:	e1c7      	b.n	8000f86 <__aeabi_ddiv+0x472>
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_ddiv+0xe6>
 8000bf8:	e1c2      	b.n	8000f80 <__aeabi_ddiv+0x46c>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	469c      	mov	ip, r3
 8000c00:	002e      	movs	r6, r5
 8000c02:	4640      	mov	r0, r8
 8000c04:	2500      	movs	r5, #0
 8000c06:	44e3      	add	fp, ip
 8000c08:	0223      	lsls	r3, r4, #8
 8000c0a:	0e14      	lsrs	r4, r2, #24
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	0c1b      	lsrs	r3, r3, #16
 8000c10:	4699      	mov	r9, r3
 8000c12:	0423      	lsls	r3, r4, #16
 8000c14:	0c1f      	lsrs	r7, r3, #16
 8000c16:	0212      	lsls	r2, r2, #8
 8000c18:	4649      	mov	r1, r9
 8000c1a:	9200      	str	r2, [sp, #0]
 8000c1c:	9701      	str	r7, [sp, #4]
 8000c1e:	f7ff fb0f 	bl	8000240 <__aeabi_uidivmod>
 8000c22:	0002      	movs	r2, r0
 8000c24:	437a      	muls	r2, r7
 8000c26:	040b      	lsls	r3, r1, #16
 8000c28:	0c31      	lsrs	r1, r6, #16
 8000c2a:	4680      	mov	r8, r0
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	428a      	cmp	r2, r1
 8000c30:	d907      	bls.n	8000c42 <__aeabi_ddiv+0x12e>
 8000c32:	2301      	movs	r3, #1
 8000c34:	425b      	negs	r3, r3
 8000c36:	469c      	mov	ip, r3
 8000c38:	1909      	adds	r1, r1, r4
 8000c3a:	44e0      	add	r8, ip
 8000c3c:	428c      	cmp	r4, r1
 8000c3e:	d800      	bhi.n	8000c42 <__aeabi_ddiv+0x12e>
 8000c40:	e207      	b.n	8001052 <__aeabi_ddiv+0x53e>
 8000c42:	1a88      	subs	r0, r1, r2
 8000c44:	4649      	mov	r1, r9
 8000c46:	f7ff fafb 	bl	8000240 <__aeabi_uidivmod>
 8000c4a:	0409      	lsls	r1, r1, #16
 8000c4c:	468c      	mov	ip, r1
 8000c4e:	0431      	lsls	r1, r6, #16
 8000c50:	4666      	mov	r6, ip
 8000c52:	9a01      	ldr	r2, [sp, #4]
 8000c54:	0c09      	lsrs	r1, r1, #16
 8000c56:	4342      	muls	r2, r0
 8000c58:	0003      	movs	r3, r0
 8000c5a:	4331      	orrs	r1, r6
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	d904      	bls.n	8000c6a <__aeabi_ddiv+0x156>
 8000c60:	1909      	adds	r1, r1, r4
 8000c62:	3b01      	subs	r3, #1
 8000c64:	428c      	cmp	r4, r1
 8000c66:	d800      	bhi.n	8000c6a <__aeabi_ddiv+0x156>
 8000c68:	e1ed      	b.n	8001046 <__aeabi_ddiv+0x532>
 8000c6a:	1a88      	subs	r0, r1, r2
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	0412      	lsls	r2, r2, #16
 8000c70:	431a      	orrs	r2, r3
 8000c72:	4690      	mov	r8, r2
 8000c74:	4641      	mov	r1, r8
 8000c76:	9b00      	ldr	r3, [sp, #0]
 8000c78:	040e      	lsls	r6, r1, #16
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	001f      	movs	r7, r3
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	041b      	lsls	r3, r3, #16
 8000c86:	0c19      	lsrs	r1, r3, #16
 8000c88:	000b      	movs	r3, r1
 8000c8a:	4373      	muls	r3, r6
 8000c8c:	0c12      	lsrs	r2, r2, #16
 8000c8e:	437e      	muls	r6, r7
 8000c90:	9103      	str	r1, [sp, #12]
 8000c92:	4351      	muls	r1, r2
 8000c94:	437a      	muls	r2, r7
 8000c96:	0c1f      	lsrs	r7, r3, #16
 8000c98:	46bc      	mov	ip, r7
 8000c9a:	1876      	adds	r6, r6, r1
 8000c9c:	4466      	add	r6, ip
 8000c9e:	42b1      	cmp	r1, r6
 8000ca0:	d903      	bls.n	8000caa <__aeabi_ddiv+0x196>
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	0249      	lsls	r1, r1, #9
 8000ca6:	468c      	mov	ip, r1
 8000ca8:	4462      	add	r2, ip
 8000caa:	0c31      	lsrs	r1, r6, #16
 8000cac:	188a      	adds	r2, r1, r2
 8000cae:	0431      	lsls	r1, r6, #16
 8000cb0:	041e      	lsls	r6, r3, #16
 8000cb2:	0c36      	lsrs	r6, r6, #16
 8000cb4:	198e      	adds	r6, r1, r6
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d302      	bcc.n	8000cc0 <__aeabi_ddiv+0x1ac>
 8000cba:	d112      	bne.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8000cbc:	42b5      	cmp	r5, r6
 8000cbe:	d210      	bcs.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8000cc0:	4643      	mov	r3, r8
 8000cc2:	1e59      	subs	r1, r3, #1
 8000cc4:	9b00      	ldr	r3, [sp, #0]
 8000cc6:	469c      	mov	ip, r3
 8000cc8:	4465      	add	r5, ip
 8000cca:	001f      	movs	r7, r3
 8000ccc:	429d      	cmp	r5, r3
 8000cce:	419b      	sbcs	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	191b      	adds	r3, r3, r4
 8000cd4:	18c0      	adds	r0, r0, r3
 8000cd6:	4284      	cmp	r4, r0
 8000cd8:	d200      	bcs.n	8000cdc <__aeabi_ddiv+0x1c8>
 8000cda:	e1a0      	b.n	800101e <__aeabi_ddiv+0x50a>
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_ddiv+0x1cc>
 8000cde:	e19b      	b.n	8001018 <__aeabi_ddiv+0x504>
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	1bae      	subs	r6, r5, r6
 8000ce4:	42b5      	cmp	r5, r6
 8000ce6:	41ad      	sbcs	r5, r5
 8000ce8:	1a80      	subs	r0, r0, r2
 8000cea:	426d      	negs	r5, r5
 8000cec:	1b40      	subs	r0, r0, r5
 8000cee:	4284      	cmp	r4, r0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_ddiv+0x1e0>
 8000cf2:	e1d5      	b.n	80010a0 <__aeabi_ddiv+0x58c>
 8000cf4:	4649      	mov	r1, r9
 8000cf6:	f7ff faa3 	bl	8000240 <__aeabi_uidivmod>
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	040b      	lsls	r3, r1, #16
 8000cfe:	4342      	muls	r2, r0
 8000d00:	0c31      	lsrs	r1, r6, #16
 8000d02:	0005      	movs	r5, r0
 8000d04:	4319      	orrs	r1, r3
 8000d06:	428a      	cmp	r2, r1
 8000d08:	d900      	bls.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000d0a:	e16c      	b.n	8000fe6 <__aeabi_ddiv+0x4d2>
 8000d0c:	1a88      	subs	r0, r1, r2
 8000d0e:	4649      	mov	r1, r9
 8000d10:	f7ff fa96 	bl	8000240 <__aeabi_uidivmod>
 8000d14:	9a01      	ldr	r2, [sp, #4]
 8000d16:	0436      	lsls	r6, r6, #16
 8000d18:	4342      	muls	r2, r0
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	0c36      	lsrs	r6, r6, #16
 8000d1e:	0003      	movs	r3, r0
 8000d20:	430e      	orrs	r6, r1
 8000d22:	42b2      	cmp	r2, r6
 8000d24:	d900      	bls.n	8000d28 <__aeabi_ddiv+0x214>
 8000d26:	e153      	b.n	8000fd0 <__aeabi_ddiv+0x4bc>
 8000d28:	9803      	ldr	r0, [sp, #12]
 8000d2a:	1ab6      	subs	r6, r6, r2
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	042d      	lsls	r5, r5, #16
 8000d30:	431d      	orrs	r5, r3
 8000d32:	9f02      	ldr	r7, [sp, #8]
 8000d34:	042b      	lsls	r3, r5, #16
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	435a      	muls	r2, r3
 8000d3a:	437b      	muls	r3, r7
 8000d3c:	469c      	mov	ip, r3
 8000d3e:	0c29      	lsrs	r1, r5, #16
 8000d40:	4348      	muls	r0, r1
 8000d42:	0c13      	lsrs	r3, r2, #16
 8000d44:	4484      	add	ip, r0
 8000d46:	4463      	add	r3, ip
 8000d48:	4379      	muls	r1, r7
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d903      	bls.n	8000d56 <__aeabi_ddiv+0x242>
 8000d4e:	2080      	movs	r0, #128	; 0x80
 8000d50:	0240      	lsls	r0, r0, #9
 8000d52:	4684      	mov	ip, r0
 8000d54:	4461      	add	r1, ip
 8000d56:	0c18      	lsrs	r0, r3, #16
 8000d58:	0412      	lsls	r2, r2, #16
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	0c12      	lsrs	r2, r2, #16
 8000d5e:	1841      	adds	r1, r0, r1
 8000d60:	189b      	adds	r3, r3, r2
 8000d62:	428e      	cmp	r6, r1
 8000d64:	d200      	bcs.n	8000d68 <__aeabi_ddiv+0x254>
 8000d66:	e0ff      	b.n	8000f68 <__aeabi_ddiv+0x454>
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x258>
 8000d6a:	e0fa      	b.n	8000f62 <__aeabi_ddiv+0x44e>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	431d      	orrs	r5, r3
 8000d70:	4a49      	ldr	r2, [pc, #292]	; (8000e98 <__aeabi_ddiv+0x384>)
 8000d72:	445a      	add	r2, fp
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	dc00      	bgt.n	8000d7a <__aeabi_ddiv+0x266>
 8000d78:	e0aa      	b.n	8000ed0 <__aeabi_ddiv+0x3bc>
 8000d7a:	076b      	lsls	r3, r5, #29
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_ddiv+0x26c>
 8000d7e:	e13d      	b.n	8000ffc <__aeabi_ddiv+0x4e8>
 8000d80:	08ed      	lsrs	r5, r5, #3
 8000d82:	4643      	mov	r3, r8
 8000d84:	01db      	lsls	r3, r3, #7
 8000d86:	d506      	bpl.n	8000d96 <__aeabi_ddiv+0x282>
 8000d88:	4642      	mov	r2, r8
 8000d8a:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <__aeabi_ddiv+0x388>)
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	4690      	mov	r8, r2
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	00d2      	lsls	r2, r2, #3
 8000d94:	445a      	add	r2, fp
 8000d96:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <__aeabi_ddiv+0x38c>)
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_ddiv+0x28a>
 8000d9c:	e71f      	b.n	8000bde <__aeabi_ddiv+0xca>
 8000d9e:	4643      	mov	r3, r8
 8000da0:	075b      	lsls	r3, r3, #29
 8000da2:	431d      	orrs	r5, r3
 8000da4:	4643      	mov	r3, r8
 8000da6:	0552      	lsls	r2, r2, #21
 8000da8:	025c      	lsls	r4, r3, #9
 8000daa:	0b24      	lsrs	r4, r4, #12
 8000dac:	0d53      	lsrs	r3, r2, #21
 8000dae:	e708      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000db0:	4652      	mov	r2, sl
 8000db2:	4322      	orrs	r2, r4
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x2a4>
 8000db6:	e07b      	b.n	8000eb0 <__aeabi_ddiv+0x39c>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_ddiv+0x2aa>
 8000dbc:	e0fa      	b.n	8000fb4 <__aeabi_ddiv+0x4a0>
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f001 f952 	bl	8002068 <__clzsi2>
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	3a0b      	subs	r2, #11
 8000dc8:	231d      	movs	r3, #29
 8000dca:	0001      	movs	r1, r0
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	4652      	mov	r2, sl
 8000dd0:	3908      	subs	r1, #8
 8000dd2:	40da      	lsrs	r2, r3
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	4314      	orrs	r4, r2
 8000dd8:	4652      	mov	r2, sl
 8000dda:	408a      	lsls	r2, r1
 8000ddc:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <__aeabi_ddiv+0x390>)
 8000dde:	4458      	add	r0, fp
 8000de0:	469b      	mov	fp, r3
 8000de2:	4483      	add	fp, r0
 8000de4:	2000      	movs	r0, #0
 8000de6:	e6d5      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000de8:	464b      	mov	r3, r9
 8000dea:	4323      	orrs	r3, r4
 8000dec:	4698      	mov	r8, r3
 8000dee:	d044      	beq.n	8000e7a <__aeabi_ddiv+0x366>
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0x2e2>
 8000df4:	e0ce      	b.n	8000f94 <__aeabi_ddiv+0x480>
 8000df6:	0020      	movs	r0, r4
 8000df8:	f001 f936 	bl	8002068 <__clzsi2>
 8000dfc:	0001      	movs	r1, r0
 8000dfe:	0002      	movs	r2, r0
 8000e00:	390b      	subs	r1, #11
 8000e02:	231d      	movs	r3, #29
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	4649      	mov	r1, r9
 8000e08:	0010      	movs	r0, r2
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	3808      	subs	r0, #8
 8000e0e:	4084      	lsls	r4, r0
 8000e10:	000b      	movs	r3, r1
 8000e12:	464d      	mov	r5, r9
 8000e14:	4323      	orrs	r3, r4
 8000e16:	4698      	mov	r8, r3
 8000e18:	4085      	lsls	r5, r0
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <__aeabi_ddiv+0x394>)
 8000e1c:	1a83      	subs	r3, r0, r2
 8000e1e:	469b      	mov	fp, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	4699      	mov	r9, r3
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	e69a      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e28:	464b      	mov	r3, r9
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	d11d      	bne.n	8000e6c <__aeabi_ddiv+0x358>
 8000e30:	2308      	movs	r3, #8
 8000e32:	4699      	mov	r9, r3
 8000e34:	3b06      	subs	r3, #6
 8000e36:	2500      	movs	r5, #0
 8000e38:	4683      	mov	fp, r0
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	e68f      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e3e:	4652      	mov	r2, sl
 8000e40:	4322      	orrs	r2, r4
 8000e42:	d109      	bne.n	8000e58 <__aeabi_ddiv+0x344>
 8000e44:	2302      	movs	r3, #2
 8000e46:	4649      	mov	r1, r9
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <__aeabi_ddiv+0x398>)
 8000e4c:	4689      	mov	r9, r1
 8000e4e:	469c      	mov	ip, r3
 8000e50:	2400      	movs	r4, #0
 8000e52:	2002      	movs	r0, #2
 8000e54:	44e3      	add	fp, ip
 8000e56:	e69d      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	464a      	mov	r2, r9
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <__aeabi_ddiv+0x398>)
 8000e60:	4691      	mov	r9, r2
 8000e62:	469c      	mov	ip, r3
 8000e64:	4652      	mov	r2, sl
 8000e66:	2003      	movs	r0, #3
 8000e68:	44e3      	add	fp, ip
 8000e6a:	e693      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	4699      	mov	r9, r3
 8000e70:	3b09      	subs	r3, #9
 8000e72:	46a0      	mov	r8, r4
 8000e74:	4683      	mov	fp, r0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	e671      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	2300      	movs	r3, #0
 8000e80:	469b      	mov	fp, r3
 8000e82:	3301      	adds	r3, #1
 8000e84:	2500      	movs	r5, #0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e669      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	000007ff 	.word	0x000007ff
 8000e90:	fffffc01 	.word	0xfffffc01
 8000e94:	08008428 	.word	0x08008428
 8000e98:	000003ff 	.word	0x000003ff
 8000e9c:	feffffff 	.word	0xfeffffff
 8000ea0:	000007fe 	.word	0x000007fe
 8000ea4:	000003f3 	.word	0x000003f3
 8000ea8:	fffffc0d 	.word	0xfffffc0d
 8000eac:	fffff801 	.word	0xfffff801
 8000eb0:	4649      	mov	r1, r9
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	4319      	orrs	r1, r3
 8000eb6:	4689      	mov	r9, r1
 8000eb8:	2400      	movs	r4, #0
 8000eba:	2001      	movs	r0, #1
 8000ebc:	e66a      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2480      	movs	r4, #128	; 0x80
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	4b8a      	ldr	r3, [pc, #552]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000ec8:	0324      	lsls	r4, r4, #12
 8000eca:	e67a      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000ecc:	2501      	movs	r5, #1
 8000ece:	426d      	negs	r5, r5
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	2b38      	cmp	r3, #56	; 0x38
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_ddiv+0x3c6>
 8000ed8:	e670      	b.n	8000bbc <__aeabi_ddiv+0xa8>
 8000eda:	2b1f      	cmp	r3, #31
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_ddiv+0x3cc>
 8000ede:	e0bf      	b.n	8001060 <__aeabi_ddiv+0x54c>
 8000ee0:	211f      	movs	r1, #31
 8000ee2:	4249      	negs	r1, r1
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	4641      	mov	r1, r8
 8000ee8:	40d1      	lsrs	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	2b20      	cmp	r3, #32
 8000eee:	d004      	beq.n	8000efa <__aeabi_ddiv+0x3e6>
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <__aeabi_ddiv+0x5e0>)
 8000ef4:	445b      	add	r3, fp
 8000ef6:	4099      	lsls	r1, r3
 8000ef8:	430d      	orrs	r5, r1
 8000efa:	1e6b      	subs	r3, r5, #1
 8000efc:	419d      	sbcs	r5, r3
 8000efe:	2307      	movs	r3, #7
 8000f00:	432a      	orrs	r2, r5
 8000f02:	001d      	movs	r5, r3
 8000f04:	2400      	movs	r4, #0
 8000f06:	4015      	ands	r5, r2
 8000f08:	4213      	tst	r3, r2
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_ddiv+0x3fa>
 8000f0c:	e0d4      	b.n	80010b8 <__aeabi_ddiv+0x5a4>
 8000f0e:	210f      	movs	r1, #15
 8000f10:	2300      	movs	r3, #0
 8000f12:	4011      	ands	r1, r2
 8000f14:	2904      	cmp	r1, #4
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x406>
 8000f18:	e0cb      	b.n	80010b2 <__aeabi_ddiv+0x59e>
 8000f1a:	1d11      	adds	r1, r2, #4
 8000f1c:	4291      	cmp	r1, r2
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	4252      	negs	r2, r2
 8000f22:	189b      	adds	r3, r3, r2
 8000f24:	000a      	movs	r2, r1
 8000f26:	0219      	lsls	r1, r3, #8
 8000f28:	d400      	bmi.n	8000f2c <__aeabi_ddiv+0x418>
 8000f2a:	e0c2      	b.n	80010b2 <__aeabi_ddiv+0x59e>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	2400      	movs	r4, #0
 8000f30:	2500      	movs	r5, #0
 8000f32:	e646      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	4641      	mov	r1, r8
 8000f38:	031b      	lsls	r3, r3, #12
 8000f3a:	4219      	tst	r1, r3
 8000f3c:	d008      	beq.n	8000f50 <__aeabi_ddiv+0x43c>
 8000f3e:	421c      	tst	r4, r3
 8000f40:	d106      	bne.n	8000f50 <__aeabi_ddiv+0x43c>
 8000f42:	431c      	orrs	r4, r3
 8000f44:	0324      	lsls	r4, r4, #12
 8000f46:	46ba      	mov	sl, r7
 8000f48:	0015      	movs	r5, r2
 8000f4a:	4b69      	ldr	r3, [pc, #420]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000f4c:	0b24      	lsrs	r4, r4, #12
 8000f4e:	e638      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f50:	2480      	movs	r4, #128	; 0x80
 8000f52:	4643      	mov	r3, r8
 8000f54:	0324      	lsls	r4, r4, #12
 8000f56:	431c      	orrs	r4, r3
 8000f58:	0324      	lsls	r4, r4, #12
 8000f5a:	46b2      	mov	sl, r6
 8000f5c:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000f5e:	0b24      	lsrs	r4, r4, #12
 8000f60:	e62f      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x454>
 8000f66:	e703      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 8000f68:	19a6      	adds	r6, r4, r6
 8000f6a:	1e68      	subs	r0, r5, #1
 8000f6c:	42a6      	cmp	r6, r4
 8000f6e:	d200      	bcs.n	8000f72 <__aeabi_ddiv+0x45e>
 8000f70:	e08d      	b.n	800108e <__aeabi_ddiv+0x57a>
 8000f72:	428e      	cmp	r6, r1
 8000f74:	d200      	bcs.n	8000f78 <__aeabi_ddiv+0x464>
 8000f76:	e0a3      	b.n	80010c0 <__aeabi_ddiv+0x5ac>
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x468>
 8000f7a:	e0b3      	b.n	80010e4 <__aeabi_ddiv+0x5d0>
 8000f7c:	0005      	movs	r5, r0
 8000f7e:	e6f5      	b.n	8000d6c <__aeabi_ddiv+0x258>
 8000f80:	42aa      	cmp	r2, r5
 8000f82:	d900      	bls.n	8000f86 <__aeabi_ddiv+0x472>
 8000f84:	e639      	b.n	8000bfa <__aeabi_ddiv+0xe6>
 8000f86:	4643      	mov	r3, r8
 8000f88:	07de      	lsls	r6, r3, #31
 8000f8a:	0858      	lsrs	r0, r3, #1
 8000f8c:	086b      	lsrs	r3, r5, #1
 8000f8e:	431e      	orrs	r6, r3
 8000f90:	07ed      	lsls	r5, r5, #31
 8000f92:	e639      	b.n	8000c08 <__aeabi_ddiv+0xf4>
 8000f94:	4648      	mov	r0, r9
 8000f96:	f001 f867 	bl	8002068 <__clzsi2>
 8000f9a:	0001      	movs	r1, r0
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	3115      	adds	r1, #21
 8000fa0:	3220      	adds	r2, #32
 8000fa2:	291c      	cmp	r1, #28
 8000fa4:	dc00      	bgt.n	8000fa8 <__aeabi_ddiv+0x494>
 8000fa6:	e72c      	b.n	8000e02 <__aeabi_ddiv+0x2ee>
 8000fa8:	464b      	mov	r3, r9
 8000faa:	3808      	subs	r0, #8
 8000fac:	4083      	lsls	r3, r0
 8000fae:	2500      	movs	r5, #0
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	e732      	b.n	8000e1a <__aeabi_ddiv+0x306>
 8000fb4:	f001 f858 	bl	8002068 <__clzsi2>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	001a      	movs	r2, r3
 8000fbc:	3215      	adds	r2, #21
 8000fbe:	3020      	adds	r0, #32
 8000fc0:	2a1c      	cmp	r2, #28
 8000fc2:	dc00      	bgt.n	8000fc6 <__aeabi_ddiv+0x4b2>
 8000fc4:	e700      	b.n	8000dc8 <__aeabi_ddiv+0x2b4>
 8000fc6:	4654      	mov	r4, sl
 8000fc8:	3b08      	subs	r3, #8
 8000fca:	2200      	movs	r2, #0
 8000fcc:	409c      	lsls	r4, r3
 8000fce:	e705      	b.n	8000ddc <__aeabi_ddiv+0x2c8>
 8000fd0:	1936      	adds	r6, r6, r4
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	42b4      	cmp	r4, r6
 8000fd6:	d900      	bls.n	8000fda <__aeabi_ddiv+0x4c6>
 8000fd8:	e6a6      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fda:	42b2      	cmp	r2, r6
 8000fdc:	d800      	bhi.n	8000fe0 <__aeabi_ddiv+0x4cc>
 8000fde:	e6a3      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fe0:	1e83      	subs	r3, r0, #2
 8000fe2:	1936      	adds	r6, r6, r4
 8000fe4:	e6a0      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fe6:	1909      	adds	r1, r1, r4
 8000fe8:	3d01      	subs	r5, #1
 8000fea:	428c      	cmp	r4, r1
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x4dc>
 8000fee:	e68d      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ff0:	428a      	cmp	r2, r1
 8000ff2:	d800      	bhi.n	8000ff6 <__aeabi_ddiv+0x4e2>
 8000ff4:	e68a      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ff6:	1e85      	subs	r5, r0, #2
 8000ff8:	1909      	adds	r1, r1, r4
 8000ffa:	e687      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	402b      	ands	r3, r5
 8001000:	2b04      	cmp	r3, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x4f2>
 8001004:	e6bc      	b.n	8000d80 <__aeabi_ddiv+0x26c>
 8001006:	2305      	movs	r3, #5
 8001008:	425b      	negs	r3, r3
 800100a:	42ab      	cmp	r3, r5
 800100c:	419b      	sbcs	r3, r3
 800100e:	3504      	adds	r5, #4
 8001010:	425b      	negs	r3, r3
 8001012:	08ed      	lsrs	r5, r5, #3
 8001014:	4498      	add	r8, r3
 8001016:	e6b4      	b.n	8000d82 <__aeabi_ddiv+0x26e>
 8001018:	42af      	cmp	r7, r5
 800101a:	d900      	bls.n	800101e <__aeabi_ddiv+0x50a>
 800101c:	e660      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 800101e:	4282      	cmp	r2, r0
 8001020:	d804      	bhi.n	800102c <__aeabi_ddiv+0x518>
 8001022:	d000      	beq.n	8001026 <__aeabi_ddiv+0x512>
 8001024:	e65c      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 8001026:	42ae      	cmp	r6, r5
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x518>
 800102a:	e659      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 800102c:	2302      	movs	r3, #2
 800102e:	425b      	negs	r3, r3
 8001030:	469c      	mov	ip, r3
 8001032:	9b00      	ldr	r3, [sp, #0]
 8001034:	44e0      	add	r8, ip
 8001036:	469c      	mov	ip, r3
 8001038:	4465      	add	r5, ip
 800103a:	429d      	cmp	r5, r3
 800103c:	419b      	sbcs	r3, r3
 800103e:	425b      	negs	r3, r3
 8001040:	191b      	adds	r3, r3, r4
 8001042:	18c0      	adds	r0, r0, r3
 8001044:	e64d      	b.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8001046:	428a      	cmp	r2, r1
 8001048:	d800      	bhi.n	800104c <__aeabi_ddiv+0x538>
 800104a:	e60e      	b.n	8000c6a <__aeabi_ddiv+0x156>
 800104c:	1e83      	subs	r3, r0, #2
 800104e:	1909      	adds	r1, r1, r4
 8001050:	e60b      	b.n	8000c6a <__aeabi_ddiv+0x156>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x544>
 8001056:	e5f4      	b.n	8000c42 <__aeabi_ddiv+0x12e>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	4698      	mov	r8, r3
 800105c:	1909      	adds	r1, r1, r4
 800105e:	e5f0      	b.n	8000c42 <__aeabi_ddiv+0x12e>
 8001060:	4925      	ldr	r1, [pc, #148]	; (80010f8 <__aeabi_ddiv+0x5e4>)
 8001062:	0028      	movs	r0, r5
 8001064:	4459      	add	r1, fp
 8001066:	408d      	lsls	r5, r1
 8001068:	4642      	mov	r2, r8
 800106a:	408a      	lsls	r2, r1
 800106c:	1e69      	subs	r1, r5, #1
 800106e:	418d      	sbcs	r5, r1
 8001070:	4641      	mov	r1, r8
 8001072:	40d8      	lsrs	r0, r3
 8001074:	40d9      	lsrs	r1, r3
 8001076:	4302      	orrs	r2, r0
 8001078:	432a      	orrs	r2, r5
 800107a:	000b      	movs	r3, r1
 800107c:	0751      	lsls	r1, r2, #29
 800107e:	d100      	bne.n	8001082 <__aeabi_ddiv+0x56e>
 8001080:	e751      	b.n	8000f26 <__aeabi_ddiv+0x412>
 8001082:	210f      	movs	r1, #15
 8001084:	4011      	ands	r1, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d000      	beq.n	800108c <__aeabi_ddiv+0x578>
 800108a:	e746      	b.n	8000f1a <__aeabi_ddiv+0x406>
 800108c:	e74b      	b.n	8000f26 <__aeabi_ddiv+0x412>
 800108e:	0005      	movs	r5, r0
 8001090:	428e      	cmp	r6, r1
 8001092:	d000      	beq.n	8001096 <__aeabi_ddiv+0x582>
 8001094:	e66a      	b.n	8000d6c <__aeabi_ddiv+0x258>
 8001096:	9a00      	ldr	r2, [sp, #0]
 8001098:	4293      	cmp	r3, r2
 800109a:	d000      	beq.n	800109e <__aeabi_ddiv+0x58a>
 800109c:	e666      	b.n	8000d6c <__aeabi_ddiv+0x258>
 800109e:	e667      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <__aeabi_ddiv+0x5e8>)
 80010a2:	445a      	add	r2, fp
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_ddiv+0x596>
 80010a8:	e710      	b.n	8000ecc <__aeabi_ddiv+0x3b8>
 80010aa:	2301      	movs	r3, #1
 80010ac:	2500      	movs	r5, #0
 80010ae:	4498      	add	r8, r3
 80010b0:	e667      	b.n	8000d82 <__aeabi_ddiv+0x26e>
 80010b2:	075d      	lsls	r5, r3, #29
 80010b4:	025b      	lsls	r3, r3, #9
 80010b6:	0b1c      	lsrs	r4, r3, #12
 80010b8:	08d2      	lsrs	r2, r2, #3
 80010ba:	2300      	movs	r3, #0
 80010bc:	4315      	orrs	r5, r2
 80010be:	e580      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 80010c0:	9800      	ldr	r0, [sp, #0]
 80010c2:	3d02      	subs	r5, #2
 80010c4:	0042      	lsls	r2, r0, #1
 80010c6:	4282      	cmp	r2, r0
 80010c8:	41bf      	sbcs	r7, r7
 80010ca:	427f      	negs	r7, r7
 80010cc:	193c      	adds	r4, r7, r4
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	e7dd      	b.n	8001090 <__aeabi_ddiv+0x57c>
 80010d4:	2480      	movs	r4, #128	; 0x80
 80010d6:	4643      	mov	r3, r8
 80010d8:	0324      	lsls	r4, r4, #12
 80010da:	431c      	orrs	r4, r3
 80010dc:	0324      	lsls	r4, r4, #12
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 80010e0:	0b24      	lsrs	r4, r4, #12
 80010e2:	e56e      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 80010e4:	9a00      	ldr	r2, [sp, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3ea      	bcc.n	80010c0 <__aeabi_ddiv+0x5ac>
 80010ea:	0005      	movs	r5, r0
 80010ec:	e7d3      	b.n	8001096 <__aeabi_ddiv+0x582>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	000007ff 	.word	0x000007ff
 80010f4:	0000043e 	.word	0x0000043e
 80010f8:	0000041e 	.word	0x0000041e
 80010fc:	000003ff 	.word	0x000003ff

08001100 <__eqdf2>:
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	464e      	mov	r6, r9
 8001104:	4645      	mov	r5, r8
 8001106:	46de      	mov	lr, fp
 8001108:	4657      	mov	r7, sl
 800110a:	4690      	mov	r8, r2
 800110c:	b5e0      	push	{r5, r6, r7, lr}
 800110e:	0017      	movs	r7, r2
 8001110:	031a      	lsls	r2, r3, #12
 8001112:	0b12      	lsrs	r2, r2, #12
 8001114:	0005      	movs	r5, r0
 8001116:	4684      	mov	ip, r0
 8001118:	4819      	ldr	r0, [pc, #100]	; (8001180 <__eqdf2+0x80>)
 800111a:	030e      	lsls	r6, r1, #12
 800111c:	004c      	lsls	r4, r1, #1
 800111e:	4691      	mov	r9, r2
 8001120:	005a      	lsls	r2, r3, #1
 8001122:	0fdb      	lsrs	r3, r3, #31
 8001124:	469b      	mov	fp, r3
 8001126:	0b36      	lsrs	r6, r6, #12
 8001128:	0d64      	lsrs	r4, r4, #21
 800112a:	0fc9      	lsrs	r1, r1, #31
 800112c:	0d52      	lsrs	r2, r2, #21
 800112e:	4284      	cmp	r4, r0
 8001130:	d019      	beq.n	8001166 <__eqdf2+0x66>
 8001132:	4282      	cmp	r2, r0
 8001134:	d010      	beq.n	8001158 <__eqdf2+0x58>
 8001136:	2001      	movs	r0, #1
 8001138:	4294      	cmp	r4, r2
 800113a:	d10e      	bne.n	800115a <__eqdf2+0x5a>
 800113c:	454e      	cmp	r6, r9
 800113e:	d10c      	bne.n	800115a <__eqdf2+0x5a>
 8001140:	2001      	movs	r0, #1
 8001142:	45c4      	cmp	ip, r8
 8001144:	d109      	bne.n	800115a <__eqdf2+0x5a>
 8001146:	4559      	cmp	r1, fp
 8001148:	d017      	beq.n	800117a <__eqdf2+0x7a>
 800114a:	2c00      	cmp	r4, #0
 800114c:	d105      	bne.n	800115a <__eqdf2+0x5a>
 800114e:	0030      	movs	r0, r6
 8001150:	4328      	orrs	r0, r5
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	4198      	sbcs	r0, r3
 8001156:	e000      	b.n	800115a <__eqdf2+0x5a>
 8001158:	2001      	movs	r0, #1
 800115a:	bcf0      	pop	{r4, r5, r6, r7}
 800115c:	46bb      	mov	fp, r7
 800115e:	46b2      	mov	sl, r6
 8001160:	46a9      	mov	r9, r5
 8001162:	46a0      	mov	r8, r4
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	0033      	movs	r3, r6
 8001168:	2001      	movs	r0, #1
 800116a:	432b      	orrs	r3, r5
 800116c:	d1f5      	bne.n	800115a <__eqdf2+0x5a>
 800116e:	42a2      	cmp	r2, r4
 8001170:	d1f3      	bne.n	800115a <__eqdf2+0x5a>
 8001172:	464b      	mov	r3, r9
 8001174:	433b      	orrs	r3, r7
 8001176:	d1f0      	bne.n	800115a <__eqdf2+0x5a>
 8001178:	e7e2      	b.n	8001140 <__eqdf2+0x40>
 800117a:	2000      	movs	r0, #0
 800117c:	e7ed      	b.n	800115a <__eqdf2+0x5a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff

08001184 <__gedf2>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	4647      	mov	r7, r8
 8001188:	46ce      	mov	lr, r9
 800118a:	0004      	movs	r4, r0
 800118c:	0018      	movs	r0, r3
 800118e:	0016      	movs	r6, r2
 8001190:	031b      	lsls	r3, r3, #12
 8001192:	0b1b      	lsrs	r3, r3, #12
 8001194:	4d2d      	ldr	r5, [pc, #180]	; (800124c <__gedf2+0xc8>)
 8001196:	004a      	lsls	r2, r1, #1
 8001198:	4699      	mov	r9, r3
 800119a:	b580      	push	{r7, lr}
 800119c:	0043      	lsls	r3, r0, #1
 800119e:	030f      	lsls	r7, r1, #12
 80011a0:	46a4      	mov	ip, r4
 80011a2:	46b0      	mov	r8, r6
 80011a4:	0b3f      	lsrs	r7, r7, #12
 80011a6:	0d52      	lsrs	r2, r2, #21
 80011a8:	0fc9      	lsrs	r1, r1, #31
 80011aa:	0d5b      	lsrs	r3, r3, #21
 80011ac:	0fc0      	lsrs	r0, r0, #31
 80011ae:	42aa      	cmp	r2, r5
 80011b0:	d021      	beq.n	80011f6 <__gedf2+0x72>
 80011b2:	42ab      	cmp	r3, r5
 80011b4:	d013      	beq.n	80011de <__gedf2+0x5a>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d122      	bne.n	8001200 <__gedf2+0x7c>
 80011ba:	433c      	orrs	r4, r7
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <__gedf2+0x42>
 80011c0:	464d      	mov	r5, r9
 80011c2:	432e      	orrs	r6, r5
 80011c4:	d022      	beq.n	800120c <__gedf2+0x88>
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	d010      	beq.n	80011ec <__gedf2+0x68>
 80011ca:	4281      	cmp	r1, r0
 80011cc:	d022      	beq.n	8001214 <__gedf2+0x90>
 80011ce:	2002      	movs	r0, #2
 80011d0:	3901      	subs	r1, #1
 80011d2:	4008      	ands	r0, r1
 80011d4:	3801      	subs	r0, #1
 80011d6:	bcc0      	pop	{r6, r7}
 80011d8:	46b9      	mov	r9, r7
 80011da:	46b0      	mov	r8, r6
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	464d      	mov	r5, r9
 80011e0:	432e      	orrs	r6, r5
 80011e2:	d129      	bne.n	8001238 <__gedf2+0xb4>
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d1f0      	bne.n	80011ca <__gedf2+0x46>
 80011e8:	433c      	orrs	r4, r7
 80011ea:	d1ee      	bne.n	80011ca <__gedf2+0x46>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1f2      	bne.n	80011d6 <__gedf2+0x52>
 80011f0:	2001      	movs	r0, #1
 80011f2:	4240      	negs	r0, r0
 80011f4:	e7ef      	b.n	80011d6 <__gedf2+0x52>
 80011f6:	003d      	movs	r5, r7
 80011f8:	4325      	orrs	r5, r4
 80011fa:	d11d      	bne.n	8001238 <__gedf2+0xb4>
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d0ee      	beq.n	80011de <__gedf2+0x5a>
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e2      	bne.n	80011ca <__gedf2+0x46>
 8001204:	464c      	mov	r4, r9
 8001206:	4326      	orrs	r6, r4
 8001208:	d1df      	bne.n	80011ca <__gedf2+0x46>
 800120a:	e7e0      	b.n	80011ce <__gedf2+0x4a>
 800120c:	2000      	movs	r0, #0
 800120e:	2c00      	cmp	r4, #0
 8001210:	d0e1      	beq.n	80011d6 <__gedf2+0x52>
 8001212:	e7dc      	b.n	80011ce <__gedf2+0x4a>
 8001214:	429a      	cmp	r2, r3
 8001216:	dc0a      	bgt.n	800122e <__gedf2+0xaa>
 8001218:	dbe8      	blt.n	80011ec <__gedf2+0x68>
 800121a:	454f      	cmp	r7, r9
 800121c:	d8d7      	bhi.n	80011ce <__gedf2+0x4a>
 800121e:	d00e      	beq.n	800123e <__gedf2+0xba>
 8001220:	2000      	movs	r0, #0
 8001222:	454f      	cmp	r7, r9
 8001224:	d2d7      	bcs.n	80011d6 <__gedf2+0x52>
 8001226:	2900      	cmp	r1, #0
 8001228:	d0e2      	beq.n	80011f0 <__gedf2+0x6c>
 800122a:	0008      	movs	r0, r1
 800122c:	e7d3      	b.n	80011d6 <__gedf2+0x52>
 800122e:	4243      	negs	r3, r0
 8001230:	4158      	adcs	r0, r3
 8001232:	0040      	lsls	r0, r0, #1
 8001234:	3801      	subs	r0, #1
 8001236:	e7ce      	b.n	80011d6 <__gedf2+0x52>
 8001238:	2002      	movs	r0, #2
 800123a:	4240      	negs	r0, r0
 800123c:	e7cb      	b.n	80011d6 <__gedf2+0x52>
 800123e:	45c4      	cmp	ip, r8
 8001240:	d8c5      	bhi.n	80011ce <__gedf2+0x4a>
 8001242:	2000      	movs	r0, #0
 8001244:	45c4      	cmp	ip, r8
 8001246:	d2c6      	bcs.n	80011d6 <__gedf2+0x52>
 8001248:	e7ed      	b.n	8001226 <__gedf2+0xa2>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	000007ff 	.word	0x000007ff

08001250 <__ledf2>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	4647      	mov	r7, r8
 8001254:	46ce      	mov	lr, r9
 8001256:	0004      	movs	r4, r0
 8001258:	0018      	movs	r0, r3
 800125a:	0016      	movs	r6, r2
 800125c:	031b      	lsls	r3, r3, #12
 800125e:	0b1b      	lsrs	r3, r3, #12
 8001260:	4d2c      	ldr	r5, [pc, #176]	; (8001314 <__ledf2+0xc4>)
 8001262:	004a      	lsls	r2, r1, #1
 8001264:	4699      	mov	r9, r3
 8001266:	b580      	push	{r7, lr}
 8001268:	0043      	lsls	r3, r0, #1
 800126a:	030f      	lsls	r7, r1, #12
 800126c:	46a4      	mov	ip, r4
 800126e:	46b0      	mov	r8, r6
 8001270:	0b3f      	lsrs	r7, r7, #12
 8001272:	0d52      	lsrs	r2, r2, #21
 8001274:	0fc9      	lsrs	r1, r1, #31
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	0fc0      	lsrs	r0, r0, #31
 800127a:	42aa      	cmp	r2, r5
 800127c:	d00d      	beq.n	800129a <__ledf2+0x4a>
 800127e:	42ab      	cmp	r3, r5
 8001280:	d010      	beq.n	80012a4 <__ledf2+0x54>
 8001282:	2a00      	cmp	r2, #0
 8001284:	d127      	bne.n	80012d6 <__ledf2+0x86>
 8001286:	433c      	orrs	r4, r7
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <__ledf2+0x60>
 800128c:	464d      	mov	r5, r9
 800128e:	432e      	orrs	r6, r5
 8001290:	d10e      	bne.n	80012b0 <__ledf2+0x60>
 8001292:	2000      	movs	r0, #0
 8001294:	2c00      	cmp	r4, #0
 8001296:	d015      	beq.n	80012c4 <__ledf2+0x74>
 8001298:	e00e      	b.n	80012b8 <__ledf2+0x68>
 800129a:	003d      	movs	r5, r7
 800129c:	4325      	orrs	r5, r4
 800129e:	d110      	bne.n	80012c2 <__ledf2+0x72>
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d118      	bne.n	80012d6 <__ledf2+0x86>
 80012a4:	464d      	mov	r5, r9
 80012a6:	432e      	orrs	r6, r5
 80012a8:	d10b      	bne.n	80012c2 <__ledf2+0x72>
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d102      	bne.n	80012b4 <__ledf2+0x64>
 80012ae:	433c      	orrs	r4, r7
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d00b      	beq.n	80012cc <__ledf2+0x7c>
 80012b4:	4281      	cmp	r1, r0
 80012b6:	d014      	beq.n	80012e2 <__ledf2+0x92>
 80012b8:	2002      	movs	r0, #2
 80012ba:	3901      	subs	r1, #1
 80012bc:	4008      	ands	r0, r1
 80012be:	3801      	subs	r0, #1
 80012c0:	e000      	b.n	80012c4 <__ledf2+0x74>
 80012c2:	2002      	movs	r0, #2
 80012c4:	bcc0      	pop	{r6, r7}
 80012c6:	46b9      	mov	r9, r7
 80012c8:	46b0      	mov	r8, r6
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1f9      	bne.n	80012c4 <__ledf2+0x74>
 80012d0:	2001      	movs	r0, #1
 80012d2:	4240      	negs	r0, r0
 80012d4:	e7f6      	b.n	80012c4 <__ledf2+0x74>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ec      	bne.n	80012b4 <__ledf2+0x64>
 80012da:	464c      	mov	r4, r9
 80012dc:	4326      	orrs	r6, r4
 80012de:	d1e9      	bne.n	80012b4 <__ledf2+0x64>
 80012e0:	e7ea      	b.n	80012b8 <__ledf2+0x68>
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dd04      	ble.n	80012f0 <__ledf2+0xa0>
 80012e6:	4243      	negs	r3, r0
 80012e8:	4158      	adcs	r0, r3
 80012ea:	0040      	lsls	r0, r0, #1
 80012ec:	3801      	subs	r0, #1
 80012ee:	e7e9      	b.n	80012c4 <__ledf2+0x74>
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbeb      	blt.n	80012cc <__ledf2+0x7c>
 80012f4:	454f      	cmp	r7, r9
 80012f6:	d8df      	bhi.n	80012b8 <__ledf2+0x68>
 80012f8:	d006      	beq.n	8001308 <__ledf2+0xb8>
 80012fa:	2000      	movs	r0, #0
 80012fc:	454f      	cmp	r7, r9
 80012fe:	d2e1      	bcs.n	80012c4 <__ledf2+0x74>
 8001300:	2900      	cmp	r1, #0
 8001302:	d0e5      	beq.n	80012d0 <__ledf2+0x80>
 8001304:	0008      	movs	r0, r1
 8001306:	e7dd      	b.n	80012c4 <__ledf2+0x74>
 8001308:	45c4      	cmp	ip, r8
 800130a:	d8d5      	bhi.n	80012b8 <__ledf2+0x68>
 800130c:	2000      	movs	r0, #0
 800130e:	45c4      	cmp	ip, r8
 8001310:	d2d8      	bcs.n	80012c4 <__ledf2+0x74>
 8001312:	e7f5      	b.n	8001300 <__ledf2+0xb0>
 8001314:	000007ff 	.word	0x000007ff

08001318 <__aeabi_dmul>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	4657      	mov	r7, sl
 800131c:	464e      	mov	r6, r9
 800131e:	4645      	mov	r5, r8
 8001320:	46de      	mov	lr, fp
 8001322:	b5e0      	push	{r5, r6, r7, lr}
 8001324:	4698      	mov	r8, r3
 8001326:	030c      	lsls	r4, r1, #12
 8001328:	004b      	lsls	r3, r1, #1
 800132a:	0006      	movs	r6, r0
 800132c:	4692      	mov	sl, r2
 800132e:	b087      	sub	sp, #28
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	0d5b      	lsrs	r3, r3, #21
 8001334:	0fcf      	lsrs	r7, r1, #31
 8001336:	2b00      	cmp	r3, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x24>
 800133a:	e15c      	b.n	80015f6 <__aeabi_dmul+0x2de>
 800133c:	4ad9      	ldr	r2, [pc, #868]	; (80016a4 <__aeabi_dmul+0x38c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x2c>
 8001342:	e175      	b.n	8001630 <__aeabi_dmul+0x318>
 8001344:	0f42      	lsrs	r2, r0, #29
 8001346:	00e4      	lsls	r4, r4, #3
 8001348:	4314      	orrs	r4, r2
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	0412      	lsls	r2, r2, #16
 800134e:	4314      	orrs	r4, r2
 8001350:	4ad5      	ldr	r2, [pc, #852]	; (80016a8 <__aeabi_dmul+0x390>)
 8001352:	00c5      	lsls	r5, r0, #3
 8001354:	4694      	mov	ip, r2
 8001356:	4463      	add	r3, ip
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	4699      	mov	r9, r3
 800135e:	469b      	mov	fp, r3
 8001360:	4643      	mov	r3, r8
 8001362:	4642      	mov	r2, r8
 8001364:	031e      	lsls	r6, r3, #12
 8001366:	0fd2      	lsrs	r2, r2, #31
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4650      	mov	r0, sl
 800136c:	4690      	mov	r8, r2
 800136e:	0b36      	lsrs	r6, r6, #12
 8001370:	0d5b      	lsrs	r3, r3, #21
 8001372:	d100      	bne.n	8001376 <__aeabi_dmul+0x5e>
 8001374:	e120      	b.n	80015b8 <__aeabi_dmul+0x2a0>
 8001376:	4acb      	ldr	r2, [pc, #812]	; (80016a4 <__aeabi_dmul+0x38c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d100      	bne.n	800137e <__aeabi_dmul+0x66>
 800137c:	e162      	b.n	8001644 <__aeabi_dmul+0x32c>
 800137e:	49ca      	ldr	r1, [pc, #808]	; (80016a8 <__aeabi_dmul+0x390>)
 8001380:	0f42      	lsrs	r2, r0, #29
 8001382:	468c      	mov	ip, r1
 8001384:	9900      	ldr	r1, [sp, #0]
 8001386:	4463      	add	r3, ip
 8001388:	00f6      	lsls	r6, r6, #3
 800138a:	468c      	mov	ip, r1
 800138c:	4316      	orrs	r6, r2
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	449c      	add	ip, r3
 8001392:	0412      	lsls	r2, r2, #16
 8001394:	4663      	mov	r3, ip
 8001396:	4316      	orrs	r6, r2
 8001398:	00c2      	lsls	r2, r0, #3
 800139a:	2000      	movs	r0, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	9900      	ldr	r1, [sp, #0]
 80013a0:	4643      	mov	r3, r8
 80013a2:	3101      	adds	r1, #1
 80013a4:	468c      	mov	ip, r1
 80013a6:	4649      	mov	r1, r9
 80013a8:	407b      	eors	r3, r7
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	290f      	cmp	r1, #15
 80013ae:	d826      	bhi.n	80013fe <__aeabi_dmul+0xe6>
 80013b0:	4bbe      	ldr	r3, [pc, #760]	; (80016ac <__aeabi_dmul+0x394>)
 80013b2:	0089      	lsls	r1, r1, #2
 80013b4:	5859      	ldr	r1, [r3, r1]
 80013b6:	468f      	mov	pc, r1
 80013b8:	4643      	mov	r3, r8
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	0034      	movs	r4, r6
 80013be:	0015      	movs	r5, r2
 80013c0:	4683      	mov	fp, r0
 80013c2:	465b      	mov	r3, fp
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d016      	beq.n	80013f6 <__aeabi_dmul+0xde>
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d100      	bne.n	80013ce <__aeabi_dmul+0xb6>
 80013cc:	e203      	b.n	80017d6 <__aeabi_dmul+0x4be>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d000      	beq.n	80013d4 <__aeabi_dmul+0xbc>
 80013d2:	e0cd      	b.n	8001570 <__aeabi_dmul+0x258>
 80013d4:	2200      	movs	r2, #0
 80013d6:	2400      	movs	r4, #0
 80013d8:	2500      	movs	r5, #0
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	0512      	lsls	r2, r2, #20
 80013de:	4322      	orrs	r2, r4
 80013e0:	07db      	lsls	r3, r3, #31
 80013e2:	431a      	orrs	r2, r3
 80013e4:	0028      	movs	r0, r5
 80013e6:	0011      	movs	r1, r2
 80013e8:	b007      	add	sp, #28
 80013ea:	bcf0      	pop	{r4, r5, r6, r7}
 80013ec:	46bb      	mov	fp, r7
 80013ee:	46b2      	mov	sl, r6
 80013f0:	46a9      	mov	r9, r5
 80013f2:	46a0      	mov	r8, r4
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	2400      	movs	r4, #0
 80013f8:	2500      	movs	r5, #0
 80013fa:	4aaa      	ldr	r2, [pc, #680]	; (80016a4 <__aeabi_dmul+0x38c>)
 80013fc:	e7ed      	b.n	80013da <__aeabi_dmul+0xc2>
 80013fe:	0c28      	lsrs	r0, r5, #16
 8001400:	042d      	lsls	r5, r5, #16
 8001402:	0c2d      	lsrs	r5, r5, #16
 8001404:	002b      	movs	r3, r5
 8001406:	0c11      	lsrs	r1, r2, #16
 8001408:	0412      	lsls	r2, r2, #16
 800140a:	0c12      	lsrs	r2, r2, #16
 800140c:	4353      	muls	r3, r2
 800140e:	4698      	mov	r8, r3
 8001410:	0013      	movs	r3, r2
 8001412:	002f      	movs	r7, r5
 8001414:	4343      	muls	r3, r0
 8001416:	4699      	mov	r9, r3
 8001418:	434f      	muls	r7, r1
 800141a:	444f      	add	r7, r9
 800141c:	46bb      	mov	fp, r7
 800141e:	4647      	mov	r7, r8
 8001420:	000b      	movs	r3, r1
 8001422:	0c3f      	lsrs	r7, r7, #16
 8001424:	46ba      	mov	sl, r7
 8001426:	4343      	muls	r3, r0
 8001428:	44da      	add	sl, fp
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	45d1      	cmp	r9, sl
 800142e:	d904      	bls.n	800143a <__aeabi_dmul+0x122>
 8001430:	2780      	movs	r7, #128	; 0x80
 8001432:	027f      	lsls	r7, r7, #9
 8001434:	46b9      	mov	r9, r7
 8001436:	444b      	add	r3, r9
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	4653      	mov	r3, sl
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	469b      	mov	fp, r3
 8001440:	4653      	mov	r3, sl
 8001442:	041f      	lsls	r7, r3, #16
 8001444:	4643      	mov	r3, r8
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	4698      	mov	r8, r3
 800144c:	003b      	movs	r3, r7
 800144e:	4443      	add	r3, r8
 8001450:	9304      	str	r3, [sp, #16]
 8001452:	0c33      	lsrs	r3, r6, #16
 8001454:	0436      	lsls	r6, r6, #16
 8001456:	0c36      	lsrs	r6, r6, #16
 8001458:	4698      	mov	r8, r3
 800145a:	0033      	movs	r3, r6
 800145c:	4343      	muls	r3, r0
 800145e:	4699      	mov	r9, r3
 8001460:	4643      	mov	r3, r8
 8001462:	4343      	muls	r3, r0
 8001464:	002f      	movs	r7, r5
 8001466:	469a      	mov	sl, r3
 8001468:	4643      	mov	r3, r8
 800146a:	4377      	muls	r7, r6
 800146c:	435d      	muls	r5, r3
 800146e:	0c38      	lsrs	r0, r7, #16
 8001470:	444d      	add	r5, r9
 8001472:	1945      	adds	r5, r0, r5
 8001474:	45a9      	cmp	r9, r5
 8001476:	d903      	bls.n	8001480 <__aeabi_dmul+0x168>
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	4699      	mov	r9, r3
 800147e:	44ca      	add	sl, r9
 8001480:	043f      	lsls	r7, r7, #16
 8001482:	0c28      	lsrs	r0, r5, #16
 8001484:	0c3f      	lsrs	r7, r7, #16
 8001486:	042d      	lsls	r5, r5, #16
 8001488:	19ed      	adds	r5, r5, r7
 800148a:	0c27      	lsrs	r7, r4, #16
 800148c:	0424      	lsls	r4, r4, #16
 800148e:	0c24      	lsrs	r4, r4, #16
 8001490:	0003      	movs	r3, r0
 8001492:	0020      	movs	r0, r4
 8001494:	4350      	muls	r0, r2
 8001496:	437a      	muls	r2, r7
 8001498:	4691      	mov	r9, r2
 800149a:	003a      	movs	r2, r7
 800149c:	4453      	add	r3, sl
 800149e:	9305      	str	r3, [sp, #20]
 80014a0:	0c03      	lsrs	r3, r0, #16
 80014a2:	469a      	mov	sl, r3
 80014a4:	434a      	muls	r2, r1
 80014a6:	4361      	muls	r1, r4
 80014a8:	4449      	add	r1, r9
 80014aa:	4451      	add	r1, sl
 80014ac:	44ab      	add	fp, r5
 80014ae:	4589      	cmp	r9, r1
 80014b0:	d903      	bls.n	80014ba <__aeabi_dmul+0x1a2>
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	4699      	mov	r9, r3
 80014b8:	444a      	add	r2, r9
 80014ba:	0400      	lsls	r0, r0, #16
 80014bc:	0c0b      	lsrs	r3, r1, #16
 80014be:	0c00      	lsrs	r0, r0, #16
 80014c0:	0409      	lsls	r1, r1, #16
 80014c2:	1809      	adds	r1, r1, r0
 80014c4:	0020      	movs	r0, r4
 80014c6:	4699      	mov	r9, r3
 80014c8:	4643      	mov	r3, r8
 80014ca:	4370      	muls	r0, r6
 80014cc:	435c      	muls	r4, r3
 80014ce:	437e      	muls	r6, r7
 80014d0:	435f      	muls	r7, r3
 80014d2:	0c03      	lsrs	r3, r0, #16
 80014d4:	4698      	mov	r8, r3
 80014d6:	19a4      	adds	r4, r4, r6
 80014d8:	4444      	add	r4, r8
 80014da:	444a      	add	r2, r9
 80014dc:	9703      	str	r7, [sp, #12]
 80014de:	42a6      	cmp	r6, r4
 80014e0:	d904      	bls.n	80014ec <__aeabi_dmul+0x1d4>
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4698      	mov	r8, r3
 80014e8:	4447      	add	r7, r8
 80014ea:	9703      	str	r7, [sp, #12]
 80014ec:	0423      	lsls	r3, r4, #16
 80014ee:	9e02      	ldr	r6, [sp, #8]
 80014f0:	469a      	mov	sl, r3
 80014f2:	9b05      	ldr	r3, [sp, #20]
 80014f4:	445e      	add	r6, fp
 80014f6:	4698      	mov	r8, r3
 80014f8:	42ae      	cmp	r6, r5
 80014fa:	41ad      	sbcs	r5, r5
 80014fc:	1876      	adds	r6, r6, r1
 80014fe:	428e      	cmp	r6, r1
 8001500:	4189      	sbcs	r1, r1
 8001502:	0400      	lsls	r0, r0, #16
 8001504:	0c00      	lsrs	r0, r0, #16
 8001506:	4450      	add	r0, sl
 8001508:	4440      	add	r0, r8
 800150a:	426d      	negs	r5, r5
 800150c:	1947      	adds	r7, r0, r5
 800150e:	46b8      	mov	r8, r7
 8001510:	4693      	mov	fp, r2
 8001512:	4249      	negs	r1, r1
 8001514:	4689      	mov	r9, r1
 8001516:	44c3      	add	fp, r8
 8001518:	44d9      	add	r9, fp
 800151a:	4298      	cmp	r0, r3
 800151c:	4180      	sbcs	r0, r0
 800151e:	45a8      	cmp	r8, r5
 8001520:	41ad      	sbcs	r5, r5
 8001522:	4593      	cmp	fp, r2
 8001524:	4192      	sbcs	r2, r2
 8001526:	4589      	cmp	r9, r1
 8001528:	4189      	sbcs	r1, r1
 800152a:	426d      	negs	r5, r5
 800152c:	4240      	negs	r0, r0
 800152e:	4328      	orrs	r0, r5
 8001530:	0c24      	lsrs	r4, r4, #16
 8001532:	4252      	negs	r2, r2
 8001534:	4249      	negs	r1, r1
 8001536:	430a      	orrs	r2, r1
 8001538:	9b03      	ldr	r3, [sp, #12]
 800153a:	1900      	adds	r0, r0, r4
 800153c:	1880      	adds	r0, r0, r2
 800153e:	18c7      	adds	r7, r0, r3
 8001540:	464b      	mov	r3, r9
 8001542:	0ddc      	lsrs	r4, r3, #23
 8001544:	9b04      	ldr	r3, [sp, #16]
 8001546:	0275      	lsls	r5, r6, #9
 8001548:	431d      	orrs	r5, r3
 800154a:	1e6a      	subs	r2, r5, #1
 800154c:	4195      	sbcs	r5, r2
 800154e:	464b      	mov	r3, r9
 8001550:	0df6      	lsrs	r6, r6, #23
 8001552:	027f      	lsls	r7, r7, #9
 8001554:	4335      	orrs	r5, r6
 8001556:	025a      	lsls	r2, r3, #9
 8001558:	433c      	orrs	r4, r7
 800155a:	4315      	orrs	r5, r2
 800155c:	01fb      	lsls	r3, r7, #7
 800155e:	d400      	bmi.n	8001562 <__aeabi_dmul+0x24a>
 8001560:	e11c      	b.n	800179c <__aeabi_dmul+0x484>
 8001562:	2101      	movs	r1, #1
 8001564:	086a      	lsrs	r2, r5, #1
 8001566:	400d      	ands	r5, r1
 8001568:	4315      	orrs	r5, r2
 800156a:	07e2      	lsls	r2, r4, #31
 800156c:	4315      	orrs	r5, r2
 800156e:	0864      	lsrs	r4, r4, #1
 8001570:	494f      	ldr	r1, [pc, #316]	; (80016b0 <__aeabi_dmul+0x398>)
 8001572:	4461      	add	r1, ip
 8001574:	2900      	cmp	r1, #0
 8001576:	dc00      	bgt.n	800157a <__aeabi_dmul+0x262>
 8001578:	e0b0      	b.n	80016dc <__aeabi_dmul+0x3c4>
 800157a:	076b      	lsls	r3, r5, #29
 800157c:	d009      	beq.n	8001592 <__aeabi_dmul+0x27a>
 800157e:	220f      	movs	r2, #15
 8001580:	402a      	ands	r2, r5
 8001582:	2a04      	cmp	r2, #4
 8001584:	d005      	beq.n	8001592 <__aeabi_dmul+0x27a>
 8001586:	1d2a      	adds	r2, r5, #4
 8001588:	42aa      	cmp	r2, r5
 800158a:	41ad      	sbcs	r5, r5
 800158c:	426d      	negs	r5, r5
 800158e:	1964      	adds	r4, r4, r5
 8001590:	0015      	movs	r5, r2
 8001592:	01e3      	lsls	r3, r4, #7
 8001594:	d504      	bpl.n	80015a0 <__aeabi_dmul+0x288>
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <__aeabi_dmul+0x39c>)
 800159a:	00c9      	lsls	r1, r1, #3
 800159c:	4014      	ands	r4, r2
 800159e:	4461      	add	r1, ip
 80015a0:	4a45      	ldr	r2, [pc, #276]	; (80016b8 <__aeabi_dmul+0x3a0>)
 80015a2:	4291      	cmp	r1, r2
 80015a4:	dd00      	ble.n	80015a8 <__aeabi_dmul+0x290>
 80015a6:	e726      	b.n	80013f6 <__aeabi_dmul+0xde>
 80015a8:	0762      	lsls	r2, r4, #29
 80015aa:	08ed      	lsrs	r5, r5, #3
 80015ac:	0264      	lsls	r4, r4, #9
 80015ae:	0549      	lsls	r1, r1, #21
 80015b0:	4315      	orrs	r5, r2
 80015b2:	0b24      	lsrs	r4, r4, #12
 80015b4:	0d4a      	lsrs	r2, r1, #21
 80015b6:	e710      	b.n	80013da <__aeabi_dmul+0xc2>
 80015b8:	4652      	mov	r2, sl
 80015ba:	4332      	orrs	r2, r6
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dmul+0x2a8>
 80015be:	e07f      	b.n	80016c0 <__aeabi_dmul+0x3a8>
 80015c0:	2e00      	cmp	r6, #0
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dmul+0x2ae>
 80015c4:	e0dc      	b.n	8001780 <__aeabi_dmul+0x468>
 80015c6:	0030      	movs	r0, r6
 80015c8:	f000 fd4e 	bl	8002068 <__clzsi2>
 80015cc:	0002      	movs	r2, r0
 80015ce:	3a0b      	subs	r2, #11
 80015d0:	231d      	movs	r3, #29
 80015d2:	0001      	movs	r1, r0
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	4652      	mov	r2, sl
 80015d8:	3908      	subs	r1, #8
 80015da:	40da      	lsrs	r2, r3
 80015dc:	408e      	lsls	r6, r1
 80015de:	4316      	orrs	r6, r2
 80015e0:	4652      	mov	r2, sl
 80015e2:	408a      	lsls	r2, r1
 80015e4:	9b00      	ldr	r3, [sp, #0]
 80015e6:	4935      	ldr	r1, [pc, #212]	; (80016bc <__aeabi_dmul+0x3a4>)
 80015e8:	1a18      	subs	r0, r3, r0
 80015ea:	0003      	movs	r3, r0
 80015ec:	468c      	mov	ip, r1
 80015ee:	4463      	add	r3, ip
 80015f0:	2000      	movs	r0, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	e6d3      	b.n	800139e <__aeabi_dmul+0x86>
 80015f6:	0025      	movs	r5, r4
 80015f8:	4305      	orrs	r5, r0
 80015fa:	d04a      	beq.n	8001692 <__aeabi_dmul+0x37a>
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d100      	bne.n	8001602 <__aeabi_dmul+0x2ea>
 8001600:	e0b0      	b.n	8001764 <__aeabi_dmul+0x44c>
 8001602:	0020      	movs	r0, r4
 8001604:	f000 fd30 	bl	8002068 <__clzsi2>
 8001608:	0001      	movs	r1, r0
 800160a:	0002      	movs	r2, r0
 800160c:	390b      	subs	r1, #11
 800160e:	231d      	movs	r3, #29
 8001610:	0010      	movs	r0, r2
 8001612:	1a5b      	subs	r3, r3, r1
 8001614:	0031      	movs	r1, r6
 8001616:	0035      	movs	r5, r6
 8001618:	3808      	subs	r0, #8
 800161a:	4084      	lsls	r4, r0
 800161c:	40d9      	lsrs	r1, r3
 800161e:	4085      	lsls	r5, r0
 8001620:	430c      	orrs	r4, r1
 8001622:	4826      	ldr	r0, [pc, #152]	; (80016bc <__aeabi_dmul+0x3a4>)
 8001624:	1a83      	subs	r3, r0, r2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	4699      	mov	r9, r3
 800162c:	469b      	mov	fp, r3
 800162e:	e697      	b.n	8001360 <__aeabi_dmul+0x48>
 8001630:	0005      	movs	r5, r0
 8001632:	4325      	orrs	r5, r4
 8001634:	d126      	bne.n	8001684 <__aeabi_dmul+0x36c>
 8001636:	2208      	movs	r2, #8
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2302      	movs	r3, #2
 800163c:	2400      	movs	r4, #0
 800163e:	4691      	mov	r9, r2
 8001640:	469b      	mov	fp, r3
 8001642:	e68d      	b.n	8001360 <__aeabi_dmul+0x48>
 8001644:	4652      	mov	r2, sl
 8001646:	9b00      	ldr	r3, [sp, #0]
 8001648:	4332      	orrs	r2, r6
 800164a:	d110      	bne.n	800166e <__aeabi_dmul+0x356>
 800164c:	4915      	ldr	r1, [pc, #84]	; (80016a4 <__aeabi_dmul+0x38c>)
 800164e:	2600      	movs	r6, #0
 8001650:	468c      	mov	ip, r1
 8001652:	4463      	add	r3, ip
 8001654:	4649      	mov	r1, r9
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2302      	movs	r3, #2
 800165a:	4319      	orrs	r1, r3
 800165c:	4689      	mov	r9, r1
 800165e:	2002      	movs	r0, #2
 8001660:	e69d      	b.n	800139e <__aeabi_dmul+0x86>
 8001662:	465b      	mov	r3, fp
 8001664:	9701      	str	r7, [sp, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d000      	beq.n	800166c <__aeabi_dmul+0x354>
 800166a:	e6ad      	b.n	80013c8 <__aeabi_dmul+0xb0>
 800166c:	e6c3      	b.n	80013f6 <__aeabi_dmul+0xde>
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <__aeabi_dmul+0x38c>)
 8001670:	2003      	movs	r0, #3
 8001672:	4694      	mov	ip, r2
 8001674:	4463      	add	r3, ip
 8001676:	464a      	mov	r2, r9
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2303      	movs	r3, #3
 800167c:	431a      	orrs	r2, r3
 800167e:	4691      	mov	r9, r2
 8001680:	4652      	mov	r2, sl
 8001682:	e68c      	b.n	800139e <__aeabi_dmul+0x86>
 8001684:	220c      	movs	r2, #12
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2303      	movs	r3, #3
 800168a:	0005      	movs	r5, r0
 800168c:	4691      	mov	r9, r2
 800168e:	469b      	mov	fp, r3
 8001690:	e666      	b.n	8001360 <__aeabi_dmul+0x48>
 8001692:	2304      	movs	r3, #4
 8001694:	4699      	mov	r9, r3
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	2400      	movs	r4, #0
 800169e:	469b      	mov	fp, r3
 80016a0:	e65e      	b.n	8001360 <__aeabi_dmul+0x48>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	000007ff 	.word	0x000007ff
 80016a8:	fffffc01 	.word	0xfffffc01
 80016ac:	08008468 	.word	0x08008468
 80016b0:	000003ff 	.word	0x000003ff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	fffffc0d 	.word	0xfffffc0d
 80016c0:	4649      	mov	r1, r9
 80016c2:	2301      	movs	r3, #1
 80016c4:	4319      	orrs	r1, r3
 80016c6:	4689      	mov	r9, r1
 80016c8:	2600      	movs	r6, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	e667      	b.n	800139e <__aeabi_dmul+0x86>
 80016ce:	2300      	movs	r3, #0
 80016d0:	2480      	movs	r4, #128	; 0x80
 80016d2:	2500      	movs	r5, #0
 80016d4:	4a43      	ldr	r2, [pc, #268]	; (80017e4 <__aeabi_dmul+0x4cc>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	0324      	lsls	r4, r4, #12
 80016da:	e67e      	b.n	80013da <__aeabi_dmul+0xc2>
 80016dc:	2001      	movs	r0, #1
 80016de:	1a40      	subs	r0, r0, r1
 80016e0:	2838      	cmp	r0, #56	; 0x38
 80016e2:	dd00      	ble.n	80016e6 <__aeabi_dmul+0x3ce>
 80016e4:	e676      	b.n	80013d4 <__aeabi_dmul+0xbc>
 80016e6:	281f      	cmp	r0, #31
 80016e8:	dd5b      	ble.n	80017a2 <__aeabi_dmul+0x48a>
 80016ea:	221f      	movs	r2, #31
 80016ec:	0023      	movs	r3, r4
 80016ee:	4252      	negs	r2, r2
 80016f0:	1a51      	subs	r1, r2, r1
 80016f2:	40cb      	lsrs	r3, r1
 80016f4:	0019      	movs	r1, r3
 80016f6:	2820      	cmp	r0, #32
 80016f8:	d003      	beq.n	8001702 <__aeabi_dmul+0x3ea>
 80016fa:	4a3b      	ldr	r2, [pc, #236]	; (80017e8 <__aeabi_dmul+0x4d0>)
 80016fc:	4462      	add	r2, ip
 80016fe:	4094      	lsls	r4, r2
 8001700:	4325      	orrs	r5, r4
 8001702:	1e6a      	subs	r2, r5, #1
 8001704:	4195      	sbcs	r5, r2
 8001706:	002a      	movs	r2, r5
 8001708:	430a      	orrs	r2, r1
 800170a:	2107      	movs	r1, #7
 800170c:	000d      	movs	r5, r1
 800170e:	2400      	movs	r4, #0
 8001710:	4015      	ands	r5, r2
 8001712:	4211      	tst	r1, r2
 8001714:	d05b      	beq.n	80017ce <__aeabi_dmul+0x4b6>
 8001716:	210f      	movs	r1, #15
 8001718:	2400      	movs	r4, #0
 800171a:	4011      	ands	r1, r2
 800171c:	2904      	cmp	r1, #4
 800171e:	d053      	beq.n	80017c8 <__aeabi_dmul+0x4b0>
 8001720:	1d11      	adds	r1, r2, #4
 8001722:	4291      	cmp	r1, r2
 8001724:	4192      	sbcs	r2, r2
 8001726:	4252      	negs	r2, r2
 8001728:	18a4      	adds	r4, r4, r2
 800172a:	000a      	movs	r2, r1
 800172c:	0223      	lsls	r3, r4, #8
 800172e:	d54b      	bpl.n	80017c8 <__aeabi_dmul+0x4b0>
 8001730:	2201      	movs	r2, #1
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	e650      	b.n	80013da <__aeabi_dmul+0xc2>
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	031b      	lsls	r3, r3, #12
 800173c:	421c      	tst	r4, r3
 800173e:	d009      	beq.n	8001754 <__aeabi_dmul+0x43c>
 8001740:	421e      	tst	r6, r3
 8001742:	d107      	bne.n	8001754 <__aeabi_dmul+0x43c>
 8001744:	4333      	orrs	r3, r6
 8001746:	031c      	lsls	r4, r3, #12
 8001748:	4643      	mov	r3, r8
 800174a:	0015      	movs	r5, r2
 800174c:	0b24      	lsrs	r4, r4, #12
 800174e:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <__aeabi_dmul+0x4cc>)
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	e642      	b.n	80013da <__aeabi_dmul+0xc2>
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0312      	lsls	r2, r2, #12
 8001758:	4314      	orrs	r4, r2
 800175a:	0324      	lsls	r4, r4, #12
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <__aeabi_dmul+0x4cc>)
 800175e:	0b24      	lsrs	r4, r4, #12
 8001760:	9701      	str	r7, [sp, #4]
 8001762:	e63a      	b.n	80013da <__aeabi_dmul+0xc2>
 8001764:	f000 fc80 	bl	8002068 <__clzsi2>
 8001768:	0001      	movs	r1, r0
 800176a:	0002      	movs	r2, r0
 800176c:	3115      	adds	r1, #21
 800176e:	3220      	adds	r2, #32
 8001770:	291c      	cmp	r1, #28
 8001772:	dc00      	bgt.n	8001776 <__aeabi_dmul+0x45e>
 8001774:	e74b      	b.n	800160e <__aeabi_dmul+0x2f6>
 8001776:	0034      	movs	r4, r6
 8001778:	3808      	subs	r0, #8
 800177a:	2500      	movs	r5, #0
 800177c:	4084      	lsls	r4, r0
 800177e:	e750      	b.n	8001622 <__aeabi_dmul+0x30a>
 8001780:	f000 fc72 	bl	8002068 <__clzsi2>
 8001784:	0003      	movs	r3, r0
 8001786:	001a      	movs	r2, r3
 8001788:	3215      	adds	r2, #21
 800178a:	3020      	adds	r0, #32
 800178c:	2a1c      	cmp	r2, #28
 800178e:	dc00      	bgt.n	8001792 <__aeabi_dmul+0x47a>
 8001790:	e71e      	b.n	80015d0 <__aeabi_dmul+0x2b8>
 8001792:	4656      	mov	r6, sl
 8001794:	3b08      	subs	r3, #8
 8001796:	2200      	movs	r2, #0
 8001798:	409e      	lsls	r6, r3
 800179a:	e723      	b.n	80015e4 <__aeabi_dmul+0x2cc>
 800179c:	9b00      	ldr	r3, [sp, #0]
 800179e:	469c      	mov	ip, r3
 80017a0:	e6e6      	b.n	8001570 <__aeabi_dmul+0x258>
 80017a2:	4912      	ldr	r1, [pc, #72]	; (80017ec <__aeabi_dmul+0x4d4>)
 80017a4:	0022      	movs	r2, r4
 80017a6:	4461      	add	r1, ip
 80017a8:	002e      	movs	r6, r5
 80017aa:	408d      	lsls	r5, r1
 80017ac:	408a      	lsls	r2, r1
 80017ae:	40c6      	lsrs	r6, r0
 80017b0:	1e69      	subs	r1, r5, #1
 80017b2:	418d      	sbcs	r5, r1
 80017b4:	4332      	orrs	r2, r6
 80017b6:	432a      	orrs	r2, r5
 80017b8:	40c4      	lsrs	r4, r0
 80017ba:	0753      	lsls	r3, r2, #29
 80017bc:	d0b6      	beq.n	800172c <__aeabi_dmul+0x414>
 80017be:	210f      	movs	r1, #15
 80017c0:	4011      	ands	r1, r2
 80017c2:	2904      	cmp	r1, #4
 80017c4:	d1ac      	bne.n	8001720 <__aeabi_dmul+0x408>
 80017c6:	e7b1      	b.n	800172c <__aeabi_dmul+0x414>
 80017c8:	0765      	lsls	r5, r4, #29
 80017ca:	0264      	lsls	r4, r4, #9
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	08d2      	lsrs	r2, r2, #3
 80017d0:	4315      	orrs	r5, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	e601      	b.n	80013da <__aeabi_dmul+0xc2>
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	0312      	lsls	r2, r2, #12
 80017da:	4314      	orrs	r4, r2
 80017dc:	0324      	lsls	r4, r4, #12
 80017de:	4a01      	ldr	r2, [pc, #4]	; (80017e4 <__aeabi_dmul+0x4cc>)
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	e5fa      	b.n	80013da <__aeabi_dmul+0xc2>
 80017e4:	000007ff 	.word	0x000007ff
 80017e8:	0000043e 	.word	0x0000043e
 80017ec:	0000041e 	.word	0x0000041e

080017f0 <__aeabi_dsub>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	4657      	mov	r7, sl
 80017f4:	464e      	mov	r6, r9
 80017f6:	4645      	mov	r5, r8
 80017f8:	46de      	mov	lr, fp
 80017fa:	b5e0      	push	{r5, r6, r7, lr}
 80017fc:	001e      	movs	r6, r3
 80017fe:	0017      	movs	r7, r2
 8001800:	004a      	lsls	r2, r1, #1
 8001802:	030b      	lsls	r3, r1, #12
 8001804:	0d52      	lsrs	r2, r2, #21
 8001806:	0a5b      	lsrs	r3, r3, #9
 8001808:	4690      	mov	r8, r2
 800180a:	0f42      	lsrs	r2, r0, #29
 800180c:	431a      	orrs	r2, r3
 800180e:	0fcd      	lsrs	r5, r1, #31
 8001810:	4ccd      	ldr	r4, [pc, #820]	; (8001b48 <__aeabi_dsub+0x358>)
 8001812:	0331      	lsls	r1, r6, #12
 8001814:	00c3      	lsls	r3, r0, #3
 8001816:	4694      	mov	ip, r2
 8001818:	0070      	lsls	r0, r6, #1
 800181a:	0f7a      	lsrs	r2, r7, #29
 800181c:	0a49      	lsrs	r1, r1, #9
 800181e:	00ff      	lsls	r7, r7, #3
 8001820:	469a      	mov	sl, r3
 8001822:	46b9      	mov	r9, r7
 8001824:	0d40      	lsrs	r0, r0, #21
 8001826:	0ff6      	lsrs	r6, r6, #31
 8001828:	4311      	orrs	r1, r2
 800182a:	42a0      	cmp	r0, r4
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x40>
 800182e:	e0b1      	b.n	8001994 <__aeabi_dsub+0x1a4>
 8001830:	2201      	movs	r2, #1
 8001832:	4056      	eors	r6, r2
 8001834:	46b3      	mov	fp, r6
 8001836:	42b5      	cmp	r5, r6
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x4c>
 800183a:	e088      	b.n	800194e <__aeabi_dsub+0x15e>
 800183c:	4642      	mov	r2, r8
 800183e:	1a12      	subs	r2, r2, r0
 8001840:	2a00      	cmp	r2, #0
 8001842:	dc00      	bgt.n	8001846 <__aeabi_dsub+0x56>
 8001844:	e0ae      	b.n	80019a4 <__aeabi_dsub+0x1b4>
 8001846:	2800      	cmp	r0, #0
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x5c>
 800184a:	e0c1      	b.n	80019d0 <__aeabi_dsub+0x1e0>
 800184c:	48be      	ldr	r0, [pc, #760]	; (8001b48 <__aeabi_dsub+0x358>)
 800184e:	4580      	cmp	r8, r0
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x64>
 8001852:	e151      	b.n	8001af8 <__aeabi_dsub+0x308>
 8001854:	2080      	movs	r0, #128	; 0x80
 8001856:	0400      	lsls	r0, r0, #16
 8001858:	4301      	orrs	r1, r0
 800185a:	2a38      	cmp	r2, #56	; 0x38
 800185c:	dd00      	ble.n	8001860 <__aeabi_dsub+0x70>
 800185e:	e17b      	b.n	8001b58 <__aeabi_dsub+0x368>
 8001860:	2a1f      	cmp	r2, #31
 8001862:	dd00      	ble.n	8001866 <__aeabi_dsub+0x76>
 8001864:	e1ee      	b.n	8001c44 <__aeabi_dsub+0x454>
 8001866:	2020      	movs	r0, #32
 8001868:	003e      	movs	r6, r7
 800186a:	1a80      	subs	r0, r0, r2
 800186c:	000c      	movs	r4, r1
 800186e:	40d6      	lsrs	r6, r2
 8001870:	40d1      	lsrs	r1, r2
 8001872:	4087      	lsls	r7, r0
 8001874:	4662      	mov	r2, ip
 8001876:	4084      	lsls	r4, r0
 8001878:	1a52      	subs	r2, r2, r1
 800187a:	1e78      	subs	r0, r7, #1
 800187c:	4187      	sbcs	r7, r0
 800187e:	4694      	mov	ip, r2
 8001880:	4334      	orrs	r4, r6
 8001882:	4327      	orrs	r7, r4
 8001884:	1bdc      	subs	r4, r3, r7
 8001886:	42a3      	cmp	r3, r4
 8001888:	419b      	sbcs	r3, r3
 800188a:	4662      	mov	r2, ip
 800188c:	425b      	negs	r3, r3
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4699      	mov	r9, r3
 8001892:	464b      	mov	r3, r9
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	d400      	bmi.n	800189a <__aeabi_dsub+0xaa>
 8001898:	e118      	b.n	8001acc <__aeabi_dsub+0x2dc>
 800189a:	464b      	mov	r3, r9
 800189c:	0258      	lsls	r0, r3, #9
 800189e:	0a43      	lsrs	r3, r0, #9
 80018a0:	4699      	mov	r9, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d100      	bne.n	80018aa <__aeabi_dsub+0xba>
 80018a8:	e137      	b.n	8001b1a <__aeabi_dsub+0x32a>
 80018aa:	4648      	mov	r0, r9
 80018ac:	f000 fbdc 	bl	8002068 <__clzsi2>
 80018b0:	0001      	movs	r1, r0
 80018b2:	3908      	subs	r1, #8
 80018b4:	2320      	movs	r3, #32
 80018b6:	0022      	movs	r2, r4
 80018b8:	4648      	mov	r0, r9
 80018ba:	1a5b      	subs	r3, r3, r1
 80018bc:	40da      	lsrs	r2, r3
 80018be:	4088      	lsls	r0, r1
 80018c0:	408c      	lsls	r4, r1
 80018c2:	4643      	mov	r3, r8
 80018c4:	4310      	orrs	r0, r2
 80018c6:	4588      	cmp	r8, r1
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dsub+0xdc>
 80018ca:	e136      	b.n	8001b3a <__aeabi_dsub+0x34a>
 80018cc:	1ac9      	subs	r1, r1, r3
 80018ce:	1c4b      	adds	r3, r1, #1
 80018d0:	2b1f      	cmp	r3, #31
 80018d2:	dd00      	ble.n	80018d6 <__aeabi_dsub+0xe6>
 80018d4:	e0ea      	b.n	8001aac <__aeabi_dsub+0x2bc>
 80018d6:	2220      	movs	r2, #32
 80018d8:	0026      	movs	r6, r4
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	0001      	movs	r1, r0
 80018de:	4094      	lsls	r4, r2
 80018e0:	40de      	lsrs	r6, r3
 80018e2:	40d8      	lsrs	r0, r3
 80018e4:	2300      	movs	r3, #0
 80018e6:	4091      	lsls	r1, r2
 80018e8:	1e62      	subs	r2, r4, #1
 80018ea:	4194      	sbcs	r4, r2
 80018ec:	4681      	mov	r9, r0
 80018ee:	4698      	mov	r8, r3
 80018f0:	4331      	orrs	r1, r6
 80018f2:	430c      	orrs	r4, r1
 80018f4:	0763      	lsls	r3, r4, #29
 80018f6:	d009      	beq.n	800190c <__aeabi_dsub+0x11c>
 80018f8:	230f      	movs	r3, #15
 80018fa:	4023      	ands	r3, r4
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d005      	beq.n	800190c <__aeabi_dsub+0x11c>
 8001900:	1d23      	adds	r3, r4, #4
 8001902:	42a3      	cmp	r3, r4
 8001904:	41a4      	sbcs	r4, r4
 8001906:	4264      	negs	r4, r4
 8001908:	44a1      	add	r9, r4
 800190a:	001c      	movs	r4, r3
 800190c:	464b      	mov	r3, r9
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	d400      	bmi.n	8001914 <__aeabi_dsub+0x124>
 8001912:	e0de      	b.n	8001ad2 <__aeabi_dsub+0x2e2>
 8001914:	4641      	mov	r1, r8
 8001916:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <__aeabi_dsub+0x358>)
 8001918:	3101      	adds	r1, #1
 800191a:	4299      	cmp	r1, r3
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x130>
 800191e:	e0e7      	b.n	8001af0 <__aeabi_dsub+0x300>
 8001920:	464b      	mov	r3, r9
 8001922:	488a      	ldr	r0, [pc, #552]	; (8001b4c <__aeabi_dsub+0x35c>)
 8001924:	08e4      	lsrs	r4, r4, #3
 8001926:	4003      	ands	r3, r0
 8001928:	0018      	movs	r0, r3
 800192a:	0549      	lsls	r1, r1, #21
 800192c:	075b      	lsls	r3, r3, #29
 800192e:	0240      	lsls	r0, r0, #9
 8001930:	4323      	orrs	r3, r4
 8001932:	0d4a      	lsrs	r2, r1, #21
 8001934:	0b04      	lsrs	r4, r0, #12
 8001936:	0512      	lsls	r2, r2, #20
 8001938:	07ed      	lsls	r5, r5, #31
 800193a:	4322      	orrs	r2, r4
 800193c:	432a      	orrs	r2, r5
 800193e:	0018      	movs	r0, r3
 8001940:	0011      	movs	r1, r2
 8001942:	bcf0      	pop	{r4, r5, r6, r7}
 8001944:	46bb      	mov	fp, r7
 8001946:	46b2      	mov	sl, r6
 8001948:	46a9      	mov	r9, r5
 800194a:	46a0      	mov	r8, r4
 800194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800194e:	4642      	mov	r2, r8
 8001950:	1a12      	subs	r2, r2, r0
 8001952:	2a00      	cmp	r2, #0
 8001954:	dd52      	ble.n	80019fc <__aeabi_dsub+0x20c>
 8001956:	2800      	cmp	r0, #0
 8001958:	d100      	bne.n	800195c <__aeabi_dsub+0x16c>
 800195a:	e09c      	b.n	8001a96 <__aeabi_dsub+0x2a6>
 800195c:	45a0      	cmp	r8, r4
 800195e:	d100      	bne.n	8001962 <__aeabi_dsub+0x172>
 8001960:	e0ca      	b.n	8001af8 <__aeabi_dsub+0x308>
 8001962:	2080      	movs	r0, #128	; 0x80
 8001964:	0400      	lsls	r0, r0, #16
 8001966:	4301      	orrs	r1, r0
 8001968:	2a38      	cmp	r2, #56	; 0x38
 800196a:	dd00      	ble.n	800196e <__aeabi_dsub+0x17e>
 800196c:	e149      	b.n	8001c02 <__aeabi_dsub+0x412>
 800196e:	2a1f      	cmp	r2, #31
 8001970:	dc00      	bgt.n	8001974 <__aeabi_dsub+0x184>
 8001972:	e197      	b.n	8001ca4 <__aeabi_dsub+0x4b4>
 8001974:	0010      	movs	r0, r2
 8001976:	000e      	movs	r6, r1
 8001978:	3820      	subs	r0, #32
 800197a:	40c6      	lsrs	r6, r0
 800197c:	2a20      	cmp	r2, #32
 800197e:	d004      	beq.n	800198a <__aeabi_dsub+0x19a>
 8001980:	2040      	movs	r0, #64	; 0x40
 8001982:	1a82      	subs	r2, r0, r2
 8001984:	4091      	lsls	r1, r2
 8001986:	430f      	orrs	r7, r1
 8001988:	46b9      	mov	r9, r7
 800198a:	464c      	mov	r4, r9
 800198c:	1e62      	subs	r2, r4, #1
 800198e:	4194      	sbcs	r4, r2
 8001990:	4334      	orrs	r4, r6
 8001992:	e13a      	b.n	8001c0a <__aeabi_dsub+0x41a>
 8001994:	000a      	movs	r2, r1
 8001996:	433a      	orrs	r2, r7
 8001998:	d028      	beq.n	80019ec <__aeabi_dsub+0x1fc>
 800199a:	46b3      	mov	fp, r6
 800199c:	42b5      	cmp	r5, r6
 800199e:	d02b      	beq.n	80019f8 <__aeabi_dsub+0x208>
 80019a0:	4a6b      	ldr	r2, [pc, #428]	; (8001b50 <__aeabi_dsub+0x360>)
 80019a2:	4442      	add	r2, r8
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d05d      	beq.n	8001a64 <__aeabi_dsub+0x274>
 80019a8:	4642      	mov	r2, r8
 80019aa:	4644      	mov	r4, r8
 80019ac:	1a82      	subs	r2, r0, r2
 80019ae:	2c00      	cmp	r4, #0
 80019b0:	d000      	beq.n	80019b4 <__aeabi_dsub+0x1c4>
 80019b2:	e0f5      	b.n	8001ba0 <__aeabi_dsub+0x3b0>
 80019b4:	4665      	mov	r5, ip
 80019b6:	431d      	orrs	r5, r3
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x1cc>
 80019ba:	e19c      	b.n	8001cf6 <__aeabi_dsub+0x506>
 80019bc:	1e55      	subs	r5, r2, #1
 80019be:	2a01      	cmp	r2, #1
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x1d4>
 80019c2:	e1fb      	b.n	8001dbc <__aeabi_dsub+0x5cc>
 80019c4:	4c60      	ldr	r4, [pc, #384]	; (8001b48 <__aeabi_dsub+0x358>)
 80019c6:	42a2      	cmp	r2, r4
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x1dc>
 80019ca:	e1bd      	b.n	8001d48 <__aeabi_dsub+0x558>
 80019cc:	002a      	movs	r2, r5
 80019ce:	e0f0      	b.n	8001bb2 <__aeabi_dsub+0x3c2>
 80019d0:	0008      	movs	r0, r1
 80019d2:	4338      	orrs	r0, r7
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1e8>
 80019d6:	e0c3      	b.n	8001b60 <__aeabi_dsub+0x370>
 80019d8:	1e50      	subs	r0, r2, #1
 80019da:	2a01      	cmp	r2, #1
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x1f0>
 80019de:	e1a8      	b.n	8001d32 <__aeabi_dsub+0x542>
 80019e0:	4c59      	ldr	r4, [pc, #356]	; (8001b48 <__aeabi_dsub+0x358>)
 80019e2:	42a2      	cmp	r2, r4
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x1f8>
 80019e6:	e087      	b.n	8001af8 <__aeabi_dsub+0x308>
 80019e8:	0002      	movs	r2, r0
 80019ea:	e736      	b.n	800185a <__aeabi_dsub+0x6a>
 80019ec:	2201      	movs	r2, #1
 80019ee:	4056      	eors	r6, r2
 80019f0:	46b3      	mov	fp, r6
 80019f2:	42b5      	cmp	r5, r6
 80019f4:	d000      	beq.n	80019f8 <__aeabi_dsub+0x208>
 80019f6:	e721      	b.n	800183c <__aeabi_dsub+0x4c>
 80019f8:	4a55      	ldr	r2, [pc, #340]	; (8001b50 <__aeabi_dsub+0x360>)
 80019fa:	4442      	add	r2, r8
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0x212>
 8001a00:	e0b5      	b.n	8001b6e <__aeabi_dsub+0x37e>
 8001a02:	4642      	mov	r2, r8
 8001a04:	4644      	mov	r4, r8
 8001a06:	1a82      	subs	r2, r0, r2
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x21e>
 8001a0c:	e138      	b.n	8001c80 <__aeabi_dsub+0x490>
 8001a0e:	4e4e      	ldr	r6, [pc, #312]	; (8001b48 <__aeabi_dsub+0x358>)
 8001a10:	42b0      	cmp	r0, r6
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x226>
 8001a14:	e1de      	b.n	8001dd4 <__aeabi_dsub+0x5e4>
 8001a16:	2680      	movs	r6, #128	; 0x80
 8001a18:	4664      	mov	r4, ip
 8001a1a:	0436      	lsls	r6, r6, #16
 8001a1c:	4334      	orrs	r4, r6
 8001a1e:	46a4      	mov	ip, r4
 8001a20:	2a38      	cmp	r2, #56	; 0x38
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dsub+0x236>
 8001a24:	e196      	b.n	8001d54 <__aeabi_dsub+0x564>
 8001a26:	2a1f      	cmp	r2, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0x23c>
 8001a2a:	e224      	b.n	8001e76 <__aeabi_dsub+0x686>
 8001a2c:	2620      	movs	r6, #32
 8001a2e:	1ab4      	subs	r4, r6, r2
 8001a30:	46a2      	mov	sl, r4
 8001a32:	4664      	mov	r4, ip
 8001a34:	4656      	mov	r6, sl
 8001a36:	40b4      	lsls	r4, r6
 8001a38:	46a1      	mov	r9, r4
 8001a3a:	001c      	movs	r4, r3
 8001a3c:	464e      	mov	r6, r9
 8001a3e:	40d4      	lsrs	r4, r2
 8001a40:	4326      	orrs	r6, r4
 8001a42:	0034      	movs	r4, r6
 8001a44:	4656      	mov	r6, sl
 8001a46:	40b3      	lsls	r3, r6
 8001a48:	1e5e      	subs	r6, r3, #1
 8001a4a:	41b3      	sbcs	r3, r6
 8001a4c:	431c      	orrs	r4, r3
 8001a4e:	4663      	mov	r3, ip
 8001a50:	40d3      	lsrs	r3, r2
 8001a52:	18c9      	adds	r1, r1, r3
 8001a54:	19e4      	adds	r4, r4, r7
 8001a56:	42bc      	cmp	r4, r7
 8001a58:	41bf      	sbcs	r7, r7
 8001a5a:	427f      	negs	r7, r7
 8001a5c:	46b9      	mov	r9, r7
 8001a5e:	4680      	mov	r8, r0
 8001a60:	4489      	add	r9, r1
 8001a62:	e0d8      	b.n	8001c16 <__aeabi_dsub+0x426>
 8001a64:	4640      	mov	r0, r8
 8001a66:	4c3b      	ldr	r4, [pc, #236]	; (8001b54 <__aeabi_dsub+0x364>)
 8001a68:	3001      	adds	r0, #1
 8001a6a:	4220      	tst	r0, r4
 8001a6c:	d000      	beq.n	8001a70 <__aeabi_dsub+0x280>
 8001a6e:	e0b4      	b.n	8001bda <__aeabi_dsub+0x3ea>
 8001a70:	4640      	mov	r0, r8
 8001a72:	2800      	cmp	r0, #0
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dsub+0x288>
 8001a76:	e144      	b.n	8001d02 <__aeabi_dsub+0x512>
 8001a78:	4660      	mov	r0, ip
 8001a7a:	4318      	orrs	r0, r3
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x290>
 8001a7e:	e190      	b.n	8001da2 <__aeabi_dsub+0x5b2>
 8001a80:	0008      	movs	r0, r1
 8001a82:	4338      	orrs	r0, r7
 8001a84:	d000      	beq.n	8001a88 <__aeabi_dsub+0x298>
 8001a86:	e1aa      	b.n	8001dde <__aeabi_dsub+0x5ee>
 8001a88:	4661      	mov	r1, ip
 8001a8a:	08db      	lsrs	r3, r3, #3
 8001a8c:	0749      	lsls	r1, r1, #29
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	4661      	mov	r1, ip
 8001a92:	08cc      	lsrs	r4, r1, #3
 8001a94:	e027      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001a96:	0008      	movs	r0, r1
 8001a98:	4338      	orrs	r0, r7
 8001a9a:	d061      	beq.n	8001b60 <__aeabi_dsub+0x370>
 8001a9c:	1e50      	subs	r0, r2, #1
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x2b4>
 8001aa2:	e139      	b.n	8001d18 <__aeabi_dsub+0x528>
 8001aa4:	42a2      	cmp	r2, r4
 8001aa6:	d027      	beq.n	8001af8 <__aeabi_dsub+0x308>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	e75d      	b.n	8001968 <__aeabi_dsub+0x178>
 8001aac:	0002      	movs	r2, r0
 8001aae:	391f      	subs	r1, #31
 8001ab0:	40ca      	lsrs	r2, r1
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d003      	beq.n	8001ac0 <__aeabi_dsub+0x2d0>
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	4098      	lsls	r0, r3
 8001abe:	4304      	orrs	r4, r0
 8001ac0:	1e63      	subs	r3, r4, #1
 8001ac2:	419c      	sbcs	r4, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	4698      	mov	r8, r3
 8001aca:	430c      	orrs	r4, r1
 8001acc:	0763      	lsls	r3, r4, #29
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dsub+0x2e2>
 8001ad0:	e712      	b.n	80018f8 <__aeabi_dsub+0x108>
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	464a      	mov	r2, r9
 8001ad6:	08e4      	lsrs	r4, r4, #3
 8001ad8:	075b      	lsls	r3, r3, #29
 8001ada:	4323      	orrs	r3, r4
 8001adc:	08d4      	lsrs	r4, r2, #3
 8001ade:	4642      	mov	r2, r8
 8001ae0:	4919      	ldr	r1, [pc, #100]	; (8001b48 <__aeabi_dsub+0x358>)
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d00e      	beq.n	8001b04 <__aeabi_dsub+0x314>
 8001ae6:	0324      	lsls	r4, r4, #12
 8001ae8:	0552      	lsls	r2, r2, #21
 8001aea:	0b24      	lsrs	r4, r4, #12
 8001aec:	0d52      	lsrs	r2, r2, #21
 8001aee:	e722      	b.n	8001936 <__aeabi_dsub+0x146>
 8001af0:	000a      	movs	r2, r1
 8001af2:	2400      	movs	r4, #0
 8001af4:	2300      	movs	r3, #0
 8001af6:	e71e      	b.n	8001936 <__aeabi_dsub+0x146>
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	4662      	mov	r2, ip
 8001afc:	0752      	lsls	r2, r2, #29
 8001afe:	4313      	orrs	r3, r2
 8001b00:	4662      	mov	r2, ip
 8001b02:	08d4      	lsrs	r4, r2, #3
 8001b04:	001a      	movs	r2, r3
 8001b06:	4322      	orrs	r2, r4
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x31c>
 8001b0a:	e1fc      	b.n	8001f06 <__aeabi_dsub+0x716>
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	0312      	lsls	r2, r2, #12
 8001b10:	4314      	orrs	r4, r2
 8001b12:	0324      	lsls	r4, r4, #12
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <__aeabi_dsub+0x358>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e70d      	b.n	8001936 <__aeabi_dsub+0x146>
 8001b1a:	0020      	movs	r0, r4
 8001b1c:	f000 faa4 	bl	8002068 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	3118      	adds	r1, #24
 8001b24:	291f      	cmp	r1, #31
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x33a>
 8001b28:	e6c4      	b.n	80018b4 <__aeabi_dsub+0xc4>
 8001b2a:	3808      	subs	r0, #8
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4643      	mov	r3, r8
 8001b30:	0020      	movs	r0, r4
 8001b32:	2400      	movs	r4, #0
 8001b34:	4588      	cmp	r8, r1
 8001b36:	dc00      	bgt.n	8001b3a <__aeabi_dsub+0x34a>
 8001b38:	e6c8      	b.n	80018cc <__aeabi_dsub+0xdc>
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__aeabi_dsub+0x35c>)
 8001b3c:	1a5b      	subs	r3, r3, r1
 8001b3e:	4010      	ands	r0, r2
 8001b40:	4698      	mov	r8, r3
 8001b42:	4681      	mov	r9, r0
 8001b44:	e6d6      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	ff7fffff 	.word	0xff7fffff
 8001b50:	fffff801 	.word	0xfffff801
 8001b54:	000007fe 	.word	0x000007fe
 8001b58:	430f      	orrs	r7, r1
 8001b5a:	1e7a      	subs	r2, r7, #1
 8001b5c:	4197      	sbcs	r7, r2
 8001b5e:	e691      	b.n	8001884 <__aeabi_dsub+0x94>
 8001b60:	4661      	mov	r1, ip
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	0749      	lsls	r1, r1, #29
 8001b66:	430b      	orrs	r3, r1
 8001b68:	4661      	mov	r1, ip
 8001b6a:	08cc      	lsrs	r4, r1, #3
 8001b6c:	e7b8      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001b6e:	4640      	mov	r0, r8
 8001b70:	4cd3      	ldr	r4, [pc, #844]	; (8001ec0 <__aeabi_dsub+0x6d0>)
 8001b72:	3001      	adds	r0, #1
 8001b74:	4220      	tst	r0, r4
 8001b76:	d000      	beq.n	8001b7a <__aeabi_dsub+0x38a>
 8001b78:	e0a2      	b.n	8001cc0 <__aeabi_dsub+0x4d0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_dsub+0x392>
 8001b80:	e101      	b.n	8001d86 <__aeabi_dsub+0x596>
 8001b82:	4660      	mov	r0, ip
 8001b84:	4318      	orrs	r0, r3
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x39a>
 8001b88:	e15e      	b.n	8001e48 <__aeabi_dsub+0x658>
 8001b8a:	0008      	movs	r0, r1
 8001b8c:	4338      	orrs	r0, r7
 8001b8e:	d000      	beq.n	8001b92 <__aeabi_dsub+0x3a2>
 8001b90:	e15f      	b.n	8001e52 <__aeabi_dsub+0x662>
 8001b92:	4661      	mov	r1, ip
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	0749      	lsls	r1, r1, #29
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	4661      	mov	r1, ip
 8001b9c:	08cc      	lsrs	r4, r1, #3
 8001b9e:	e7a2      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001ba0:	4dc8      	ldr	r5, [pc, #800]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001ba2:	42a8      	cmp	r0, r5
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x3b8>
 8001ba6:	e0cf      	b.n	8001d48 <__aeabi_dsub+0x558>
 8001ba8:	2580      	movs	r5, #128	; 0x80
 8001baa:	4664      	mov	r4, ip
 8001bac:	042d      	lsls	r5, r5, #16
 8001bae:	432c      	orrs	r4, r5
 8001bb0:	46a4      	mov	ip, r4
 8001bb2:	2a38      	cmp	r2, #56	; 0x38
 8001bb4:	dc56      	bgt.n	8001c64 <__aeabi_dsub+0x474>
 8001bb6:	2a1f      	cmp	r2, #31
 8001bb8:	dd00      	ble.n	8001bbc <__aeabi_dsub+0x3cc>
 8001bba:	e0d1      	b.n	8001d60 <__aeabi_dsub+0x570>
 8001bbc:	2520      	movs	r5, #32
 8001bbe:	001e      	movs	r6, r3
 8001bc0:	1aad      	subs	r5, r5, r2
 8001bc2:	4664      	mov	r4, ip
 8001bc4:	40ab      	lsls	r3, r5
 8001bc6:	40ac      	lsls	r4, r5
 8001bc8:	40d6      	lsrs	r6, r2
 8001bca:	1e5d      	subs	r5, r3, #1
 8001bcc:	41ab      	sbcs	r3, r5
 8001bce:	4334      	orrs	r4, r6
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	4664      	mov	r4, ip
 8001bd4:	40d4      	lsrs	r4, r2
 8001bd6:	1b09      	subs	r1, r1, r4
 8001bd8:	e049      	b.n	8001c6e <__aeabi_dsub+0x47e>
 8001bda:	4660      	mov	r0, ip
 8001bdc:	1bdc      	subs	r4, r3, r7
 8001bde:	1a46      	subs	r6, r0, r1
 8001be0:	42a3      	cmp	r3, r4
 8001be2:	4180      	sbcs	r0, r0
 8001be4:	4240      	negs	r0, r0
 8001be6:	4681      	mov	r9, r0
 8001be8:	0030      	movs	r0, r6
 8001bea:	464e      	mov	r6, r9
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	4681      	mov	r9, r0
 8001bf0:	0200      	lsls	r0, r0, #8
 8001bf2:	d476      	bmi.n	8001ce2 <__aeabi_dsub+0x4f2>
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x40c>
 8001bfa:	e652      	b.n	80018a2 <__aeabi_dsub+0xb2>
 8001bfc:	2400      	movs	r4, #0
 8001bfe:	2500      	movs	r5, #0
 8001c00:	e771      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001c02:	4339      	orrs	r1, r7
 8001c04:	000c      	movs	r4, r1
 8001c06:	1e62      	subs	r2, r4, #1
 8001c08:	4194      	sbcs	r4, r2
 8001c0a:	18e4      	adds	r4, r4, r3
 8001c0c:	429c      	cmp	r4, r3
 8001c0e:	419b      	sbcs	r3, r3
 8001c10:	425b      	negs	r3, r3
 8001c12:	4463      	add	r3, ip
 8001c14:	4699      	mov	r9, r3
 8001c16:	464b      	mov	r3, r9
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	d400      	bmi.n	8001c1e <__aeabi_dsub+0x42e>
 8001c1c:	e756      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	469c      	mov	ip, r3
 8001c22:	4ba8      	ldr	r3, [pc, #672]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001c24:	44e0      	add	r8, ip
 8001c26:	4598      	cmp	r8, r3
 8001c28:	d038      	beq.n	8001c9c <__aeabi_dsub+0x4ac>
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	48a6      	ldr	r0, [pc, #664]	; (8001ec8 <__aeabi_dsub+0x6d8>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4003      	ands	r3, r0
 8001c32:	0018      	movs	r0, r3
 8001c34:	0863      	lsrs	r3, r4, #1
 8001c36:	4014      	ands	r4, r2
 8001c38:	431c      	orrs	r4, r3
 8001c3a:	07c3      	lsls	r3, r0, #31
 8001c3c:	431c      	orrs	r4, r3
 8001c3e:	0843      	lsrs	r3, r0, #1
 8001c40:	4699      	mov	r9, r3
 8001c42:	e657      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001c44:	0010      	movs	r0, r2
 8001c46:	000e      	movs	r6, r1
 8001c48:	3820      	subs	r0, #32
 8001c4a:	40c6      	lsrs	r6, r0
 8001c4c:	2a20      	cmp	r2, #32
 8001c4e:	d004      	beq.n	8001c5a <__aeabi_dsub+0x46a>
 8001c50:	2040      	movs	r0, #64	; 0x40
 8001c52:	1a82      	subs	r2, r0, r2
 8001c54:	4091      	lsls	r1, r2
 8001c56:	430f      	orrs	r7, r1
 8001c58:	46b9      	mov	r9, r7
 8001c5a:	464f      	mov	r7, r9
 8001c5c:	1e7a      	subs	r2, r7, #1
 8001c5e:	4197      	sbcs	r7, r2
 8001c60:	4337      	orrs	r7, r6
 8001c62:	e60f      	b.n	8001884 <__aeabi_dsub+0x94>
 8001c64:	4662      	mov	r2, ip
 8001c66:	431a      	orrs	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	4193      	sbcs	r3, r2
 8001c6e:	1afc      	subs	r4, r7, r3
 8001c70:	42a7      	cmp	r7, r4
 8001c72:	41bf      	sbcs	r7, r7
 8001c74:	427f      	negs	r7, r7
 8001c76:	1bcb      	subs	r3, r1, r7
 8001c78:	4699      	mov	r9, r3
 8001c7a:	465d      	mov	r5, fp
 8001c7c:	4680      	mov	r8, r0
 8001c7e:	e608      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001c80:	4666      	mov	r6, ip
 8001c82:	431e      	orrs	r6, r3
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x498>
 8001c86:	e0be      	b.n	8001e06 <__aeabi_dsub+0x616>
 8001c88:	1e56      	subs	r6, r2, #1
 8001c8a:	2a01      	cmp	r2, #1
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x4a0>
 8001c8e:	e109      	b.n	8001ea4 <__aeabi_dsub+0x6b4>
 8001c90:	4c8c      	ldr	r4, [pc, #560]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001c92:	42a2      	cmp	r2, r4
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x4a8>
 8001c96:	e119      	b.n	8001ecc <__aeabi_dsub+0x6dc>
 8001c98:	0032      	movs	r2, r6
 8001c9a:	e6c1      	b.n	8001a20 <__aeabi_dsub+0x230>
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e648      	b.n	8001936 <__aeabi_dsub+0x146>
 8001ca4:	2020      	movs	r0, #32
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	1a80      	subs	r0, r0, r2
 8001caa:	003e      	movs	r6, r7
 8001cac:	4087      	lsls	r7, r0
 8001cae:	4084      	lsls	r4, r0
 8001cb0:	40d6      	lsrs	r6, r2
 8001cb2:	1e78      	subs	r0, r7, #1
 8001cb4:	4187      	sbcs	r7, r0
 8001cb6:	40d1      	lsrs	r1, r2
 8001cb8:	4334      	orrs	r4, r6
 8001cba:	433c      	orrs	r4, r7
 8001cbc:	448c      	add	ip, r1
 8001cbe:	e7a4      	b.n	8001c0a <__aeabi_dsub+0x41a>
 8001cc0:	4a80      	ldr	r2, [pc, #512]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001cc2:	4290      	cmp	r0, r2
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x4d8>
 8001cc6:	e0e9      	b.n	8001e9c <__aeabi_dsub+0x6ac>
 8001cc8:	19df      	adds	r7, r3, r7
 8001cca:	429f      	cmp	r7, r3
 8001ccc:	419b      	sbcs	r3, r3
 8001cce:	4461      	add	r1, ip
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	18c9      	adds	r1, r1, r3
 8001cd4:	07cc      	lsls	r4, r1, #31
 8001cd6:	087f      	lsrs	r7, r7, #1
 8001cd8:	084b      	lsrs	r3, r1, #1
 8001cda:	4699      	mov	r9, r3
 8001cdc:	4680      	mov	r8, r0
 8001cde:	433c      	orrs	r4, r7
 8001ce0:	e6f4      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001ce2:	1afc      	subs	r4, r7, r3
 8001ce4:	42a7      	cmp	r7, r4
 8001ce6:	41bf      	sbcs	r7, r7
 8001ce8:	4663      	mov	r3, ip
 8001cea:	427f      	negs	r7, r7
 8001cec:	1ac9      	subs	r1, r1, r3
 8001cee:	1bcb      	subs	r3, r1, r7
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	465d      	mov	r5, fp
 8001cf4:	e5d5      	b.n	80018a2 <__aeabi_dsub+0xb2>
 8001cf6:	08ff      	lsrs	r7, r7, #3
 8001cf8:	074b      	lsls	r3, r1, #29
 8001cfa:	465d      	mov	r5, fp
 8001cfc:	433b      	orrs	r3, r7
 8001cfe:	08cc      	lsrs	r4, r1, #3
 8001d00:	e6ee      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001d02:	4662      	mov	r2, ip
 8001d04:	431a      	orrs	r2, r3
 8001d06:	d000      	beq.n	8001d0a <__aeabi_dsub+0x51a>
 8001d08:	e082      	b.n	8001e10 <__aeabi_dsub+0x620>
 8001d0a:	000b      	movs	r3, r1
 8001d0c:	433b      	orrs	r3, r7
 8001d0e:	d11b      	bne.n	8001d48 <__aeabi_dsub+0x558>
 8001d10:	2480      	movs	r4, #128	; 0x80
 8001d12:	2500      	movs	r5, #0
 8001d14:	0324      	lsls	r4, r4, #12
 8001d16:	e6f9      	b.n	8001b0c <__aeabi_dsub+0x31c>
 8001d18:	19dc      	adds	r4, r3, r7
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	419b      	sbcs	r3, r3
 8001d1e:	4461      	add	r1, ip
 8001d20:	4689      	mov	r9, r1
 8001d22:	425b      	negs	r3, r3
 8001d24:	4499      	add	r9, r3
 8001d26:	464b      	mov	r3, r9
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	d444      	bmi.n	8001db6 <__aeabi_dsub+0x5c6>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	4698      	mov	r8, r3
 8001d30:	e6cc      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001d32:	1bdc      	subs	r4, r3, r7
 8001d34:	4662      	mov	r2, ip
 8001d36:	42a3      	cmp	r3, r4
 8001d38:	419b      	sbcs	r3, r3
 8001d3a:	1a51      	subs	r1, r2, r1
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	4699      	mov	r9, r3
 8001d42:	2301      	movs	r3, #1
 8001d44:	4698      	mov	r8, r3
 8001d46:	e5a4      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001d48:	08ff      	lsrs	r7, r7, #3
 8001d4a:	074b      	lsls	r3, r1, #29
 8001d4c:	465d      	mov	r5, fp
 8001d4e:	433b      	orrs	r3, r7
 8001d50:	08cc      	lsrs	r4, r1, #3
 8001d52:	e6d7      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001d54:	4662      	mov	r2, ip
 8001d56:	431a      	orrs	r2, r3
 8001d58:	0014      	movs	r4, r2
 8001d5a:	1e63      	subs	r3, r4, #1
 8001d5c:	419c      	sbcs	r4, r3
 8001d5e:	e679      	b.n	8001a54 <__aeabi_dsub+0x264>
 8001d60:	0015      	movs	r5, r2
 8001d62:	4664      	mov	r4, ip
 8001d64:	3d20      	subs	r5, #32
 8001d66:	40ec      	lsrs	r4, r5
 8001d68:	46a0      	mov	r8, r4
 8001d6a:	2a20      	cmp	r2, #32
 8001d6c:	d005      	beq.n	8001d7a <__aeabi_dsub+0x58a>
 8001d6e:	2540      	movs	r5, #64	; 0x40
 8001d70:	4664      	mov	r4, ip
 8001d72:	1aaa      	subs	r2, r5, r2
 8001d74:	4094      	lsls	r4, r2
 8001d76:	4323      	orrs	r3, r4
 8001d78:	469a      	mov	sl, r3
 8001d7a:	4654      	mov	r4, sl
 8001d7c:	1e63      	subs	r3, r4, #1
 8001d7e:	419c      	sbcs	r4, r3
 8001d80:	4643      	mov	r3, r8
 8001d82:	4323      	orrs	r3, r4
 8001d84:	e773      	b.n	8001c6e <__aeabi_dsub+0x47e>
 8001d86:	4662      	mov	r2, ip
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	d023      	beq.n	8001dd4 <__aeabi_dsub+0x5e4>
 8001d8c:	000a      	movs	r2, r1
 8001d8e:	433a      	orrs	r2, r7
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x5a4>
 8001d92:	e0a0      	b.n	8001ed6 <__aeabi_dsub+0x6e6>
 8001d94:	4662      	mov	r2, ip
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	0752      	lsls	r2, r2, #29
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	08d4      	lsrs	r4, r2, #3
 8001da0:	e6b0      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001da2:	000b      	movs	r3, r1
 8001da4:	433b      	orrs	r3, r7
 8001da6:	d100      	bne.n	8001daa <__aeabi_dsub+0x5ba>
 8001da8:	e728      	b.n	8001bfc <__aeabi_dsub+0x40c>
 8001daa:	08ff      	lsrs	r7, r7, #3
 8001dac:	074b      	lsls	r3, r1, #29
 8001dae:	465d      	mov	r5, fp
 8001db0:	433b      	orrs	r3, r7
 8001db2:	08cc      	lsrs	r4, r1, #3
 8001db4:	e697      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001db6:	2302      	movs	r3, #2
 8001db8:	4698      	mov	r8, r3
 8001dba:	e736      	b.n	8001c2a <__aeabi_dsub+0x43a>
 8001dbc:	1afc      	subs	r4, r7, r3
 8001dbe:	42a7      	cmp	r7, r4
 8001dc0:	41bf      	sbcs	r7, r7
 8001dc2:	4663      	mov	r3, ip
 8001dc4:	427f      	negs	r7, r7
 8001dc6:	1ac9      	subs	r1, r1, r3
 8001dc8:	1bcb      	subs	r3, r1, r7
 8001dca:	4699      	mov	r9, r3
 8001dcc:	2301      	movs	r3, #1
 8001dce:	465d      	mov	r5, fp
 8001dd0:	4698      	mov	r8, r3
 8001dd2:	e55e      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001dd4:	074b      	lsls	r3, r1, #29
 8001dd6:	08ff      	lsrs	r7, r7, #3
 8001dd8:	433b      	orrs	r3, r7
 8001dda:	08cc      	lsrs	r4, r1, #3
 8001ddc:	e692      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001dde:	1bdc      	subs	r4, r3, r7
 8001de0:	4660      	mov	r0, ip
 8001de2:	42a3      	cmp	r3, r4
 8001de4:	41b6      	sbcs	r6, r6
 8001de6:	1a40      	subs	r0, r0, r1
 8001de8:	4276      	negs	r6, r6
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	4681      	mov	r9, r0
 8001dee:	0200      	lsls	r0, r0, #8
 8001df0:	d560      	bpl.n	8001eb4 <__aeabi_dsub+0x6c4>
 8001df2:	1afc      	subs	r4, r7, r3
 8001df4:	42a7      	cmp	r7, r4
 8001df6:	41bf      	sbcs	r7, r7
 8001df8:	4663      	mov	r3, ip
 8001dfa:	427f      	negs	r7, r7
 8001dfc:	1ac9      	subs	r1, r1, r3
 8001dfe:	1bcb      	subs	r3, r1, r7
 8001e00:	4699      	mov	r9, r3
 8001e02:	465d      	mov	r5, fp
 8001e04:	e576      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	074b      	lsls	r3, r1, #29
 8001e0a:	433b      	orrs	r3, r7
 8001e0c:	08cc      	lsrs	r4, r1, #3
 8001e0e:	e667      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001e10:	000a      	movs	r2, r1
 8001e12:	08db      	lsrs	r3, r3, #3
 8001e14:	433a      	orrs	r2, r7
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x62a>
 8001e18:	e66f      	b.n	8001afa <__aeabi_dsub+0x30a>
 8001e1a:	4662      	mov	r2, ip
 8001e1c:	0752      	lsls	r2, r2, #29
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	4662      	mov	r2, ip
 8001e22:	08d4      	lsrs	r4, r2, #3
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	0312      	lsls	r2, r2, #12
 8001e28:	4214      	tst	r4, r2
 8001e2a:	d007      	beq.n	8001e3c <__aeabi_dsub+0x64c>
 8001e2c:	08c8      	lsrs	r0, r1, #3
 8001e2e:	4210      	tst	r0, r2
 8001e30:	d104      	bne.n	8001e3c <__aeabi_dsub+0x64c>
 8001e32:	465d      	mov	r5, fp
 8001e34:	0004      	movs	r4, r0
 8001e36:	08fb      	lsrs	r3, r7, #3
 8001e38:	0749      	lsls	r1, r1, #29
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	0f5a      	lsrs	r2, r3, #29
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	0752      	lsls	r2, r2, #29
 8001e44:	4313      	orrs	r3, r2
 8001e46:	e65d      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001e48:	074b      	lsls	r3, r1, #29
 8001e4a:	08ff      	lsrs	r7, r7, #3
 8001e4c:	433b      	orrs	r3, r7
 8001e4e:	08cc      	lsrs	r4, r1, #3
 8001e50:	e649      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001e52:	19dc      	adds	r4, r3, r7
 8001e54:	429c      	cmp	r4, r3
 8001e56:	419b      	sbcs	r3, r3
 8001e58:	4461      	add	r1, ip
 8001e5a:	4689      	mov	r9, r1
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	4499      	add	r9, r3
 8001e60:	464b      	mov	r3, r9
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	d400      	bmi.n	8001e68 <__aeabi_dsub+0x678>
 8001e66:	e631      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <__aeabi_dsub+0x6d8>)
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2301      	movs	r3, #1
 8001e70:	4691      	mov	r9, r2
 8001e72:	4698      	mov	r8, r3
 8001e74:	e62a      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001e76:	0016      	movs	r6, r2
 8001e78:	4664      	mov	r4, ip
 8001e7a:	3e20      	subs	r6, #32
 8001e7c:	40f4      	lsrs	r4, r6
 8001e7e:	46a0      	mov	r8, r4
 8001e80:	2a20      	cmp	r2, #32
 8001e82:	d005      	beq.n	8001e90 <__aeabi_dsub+0x6a0>
 8001e84:	2640      	movs	r6, #64	; 0x40
 8001e86:	4664      	mov	r4, ip
 8001e88:	1ab2      	subs	r2, r6, r2
 8001e8a:	4094      	lsls	r4, r2
 8001e8c:	4323      	orrs	r3, r4
 8001e8e:	469a      	mov	sl, r3
 8001e90:	4654      	mov	r4, sl
 8001e92:	1e63      	subs	r3, r4, #1
 8001e94:	419c      	sbcs	r4, r3
 8001e96:	4643      	mov	r3, r8
 8001e98:	431c      	orrs	r4, r3
 8001e9a:	e5db      	b.n	8001a54 <__aeabi_dsub+0x264>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	2400      	movs	r4, #0
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e548      	b.n	8001936 <__aeabi_dsub+0x146>
 8001ea4:	19dc      	adds	r4, r3, r7
 8001ea6:	42bc      	cmp	r4, r7
 8001ea8:	41bf      	sbcs	r7, r7
 8001eaa:	4461      	add	r1, ip
 8001eac:	4689      	mov	r9, r1
 8001eae:	427f      	negs	r7, r7
 8001eb0:	44b9      	add	r9, r7
 8001eb2:	e738      	b.n	8001d26 <__aeabi_dsub+0x536>
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x6cc>
 8001eba:	e69f      	b.n	8001bfc <__aeabi_dsub+0x40c>
 8001ebc:	e606      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	000007fe 	.word	0x000007fe
 8001ec4:	000007ff 	.word	0x000007ff
 8001ec8:	ff7fffff 	.word	0xff7fffff
 8001ecc:	08ff      	lsrs	r7, r7, #3
 8001ece:	074b      	lsls	r3, r1, #29
 8001ed0:	433b      	orrs	r3, r7
 8001ed2:	08cc      	lsrs	r4, r1, #3
 8001ed4:	e616      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001ed6:	4662      	mov	r2, ip
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	0752      	lsls	r2, r2, #29
 8001edc:	4313      	orrs	r3, r2
 8001ede:	4662      	mov	r2, ip
 8001ee0:	08d4      	lsrs	r4, r2, #3
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	0312      	lsls	r2, r2, #12
 8001ee6:	4214      	tst	r4, r2
 8001ee8:	d007      	beq.n	8001efa <__aeabi_dsub+0x70a>
 8001eea:	08c8      	lsrs	r0, r1, #3
 8001eec:	4210      	tst	r0, r2
 8001eee:	d104      	bne.n	8001efa <__aeabi_dsub+0x70a>
 8001ef0:	465d      	mov	r5, fp
 8001ef2:	0004      	movs	r4, r0
 8001ef4:	08fb      	lsrs	r3, r7, #3
 8001ef6:	0749      	lsls	r1, r1, #29
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	0f5a      	lsrs	r2, r3, #29
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	0752      	lsls	r2, r2, #29
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	e5fe      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001f06:	2300      	movs	r3, #0
 8001f08:	4a01      	ldr	r2, [pc, #4]	; (8001f10 <__aeabi_dsub+0x720>)
 8001f0a:	001c      	movs	r4, r3
 8001f0c:	e513      	b.n	8001936 <__aeabi_dsub+0x146>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__aeabi_dcmpun>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	0005      	movs	r5, r0
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <__aeabi_dcmpun+0x38>)
 8001f1a:	031c      	lsls	r4, r3, #12
 8001f1c:	0016      	movs	r6, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	030a      	lsls	r2, r1, #12
 8001f22:	0049      	lsls	r1, r1, #1
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	0d49      	lsrs	r1, r1, #21
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	0d5b      	lsrs	r3, r3, #21
 8001f2c:	4281      	cmp	r1, r0
 8001f2e:	d008      	beq.n	8001f42 <__aeabi_dcmpun+0x2e>
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <__aeabi_dcmpun+0x38>)
 8001f32:	2000      	movs	r0, #0
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d103      	bne.n	8001f40 <__aeabi_dcmpun+0x2c>
 8001f38:	0020      	movs	r0, r4
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	1e43      	subs	r3, r0, #1
 8001f3e:	4198      	sbcs	r0, r3
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	2001      	movs	r0, #1
 8001f44:	432a      	orrs	r2, r5
 8001f46:	d1fb      	bne.n	8001f40 <__aeabi_dcmpun+0x2c>
 8001f48:	e7f2      	b.n	8001f30 <__aeabi_dcmpun+0x1c>
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	000007ff 	.word	0x000007ff

08001f50 <__aeabi_d2iz>:
 8001f50:	000a      	movs	r2, r1
 8001f52:	b530      	push	{r4, r5, lr}
 8001f54:	4c13      	ldr	r4, [pc, #76]	; (8001fa4 <__aeabi_d2iz+0x54>)
 8001f56:	0053      	lsls	r3, r2, #1
 8001f58:	0309      	lsls	r1, r1, #12
 8001f5a:	0005      	movs	r5, r0
 8001f5c:	0b09      	lsrs	r1, r1, #12
 8001f5e:	2000      	movs	r0, #0
 8001f60:	0d5b      	lsrs	r3, r3, #21
 8001f62:	0fd2      	lsrs	r2, r2, #31
 8001f64:	42a3      	cmp	r3, r4
 8001f66:	dd04      	ble.n	8001f72 <__aeabi_d2iz+0x22>
 8001f68:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <__aeabi_d2iz+0x58>)
 8001f6a:	4283      	cmp	r3, r0
 8001f6c:	dd02      	ble.n	8001f74 <__aeabi_d2iz+0x24>
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <__aeabi_d2iz+0x5c>)
 8001f70:	18d0      	adds	r0, r2, r3
 8001f72:	bd30      	pop	{r4, r5, pc}
 8001f74:	2080      	movs	r0, #128	; 0x80
 8001f76:	0340      	lsls	r0, r0, #13
 8001f78:	4301      	orrs	r1, r0
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <__aeabi_d2iz+0x60>)
 8001f7c:	1ac0      	subs	r0, r0, r3
 8001f7e:	281f      	cmp	r0, #31
 8001f80:	dd08      	ble.n	8001f94 <__aeabi_d2iz+0x44>
 8001f82:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <__aeabi_d2iz+0x64>)
 8001f84:	1ac3      	subs	r3, r0, r3
 8001f86:	40d9      	lsrs	r1, r3
 8001f88:	000b      	movs	r3, r1
 8001f8a:	4258      	negs	r0, r3
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	d1f0      	bne.n	8001f72 <__aeabi_d2iz+0x22>
 8001f90:	0018      	movs	r0, r3
 8001f92:	e7ee      	b.n	8001f72 <__aeabi_d2iz+0x22>
 8001f94:	4c08      	ldr	r4, [pc, #32]	; (8001fb8 <__aeabi_d2iz+0x68>)
 8001f96:	40c5      	lsrs	r5, r0
 8001f98:	46a4      	mov	ip, r4
 8001f9a:	4463      	add	r3, ip
 8001f9c:	4099      	lsls	r1, r3
 8001f9e:	000b      	movs	r3, r1
 8001fa0:	432b      	orrs	r3, r5
 8001fa2:	e7f2      	b.n	8001f8a <__aeabi_d2iz+0x3a>
 8001fa4:	000003fe 	.word	0x000003fe
 8001fa8:	0000041d 	.word	0x0000041d
 8001fac:	7fffffff 	.word	0x7fffffff
 8001fb0:	00000433 	.word	0x00000433
 8001fb4:	00000413 	.word	0x00000413
 8001fb8:	fffffbed 	.word	0xfffffbed

08001fbc <__aeabi_i2d>:
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d016      	beq.n	8001ff0 <__aeabi_i2d+0x34>
 8001fc2:	17c3      	asrs	r3, r0, #31
 8001fc4:	18c5      	adds	r5, r0, r3
 8001fc6:	405d      	eors	r5, r3
 8001fc8:	0fc4      	lsrs	r4, r0, #31
 8001fca:	0028      	movs	r0, r5
 8001fcc:	f000 f84c 	bl	8002068 <__clzsi2>
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <__aeabi_i2d+0x5c>)
 8001fd2:	1a12      	subs	r2, r2, r0
 8001fd4:	280a      	cmp	r0, #10
 8001fd6:	dc16      	bgt.n	8002006 <__aeabi_i2d+0x4a>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	002e      	movs	r6, r5
 8001fdc:	3315      	adds	r3, #21
 8001fde:	409e      	lsls	r6, r3
 8001fe0:	230b      	movs	r3, #11
 8001fe2:	1a18      	subs	r0, r3, r0
 8001fe4:	40c5      	lsrs	r5, r0
 8001fe6:	0552      	lsls	r2, r2, #21
 8001fe8:	032d      	lsls	r5, r5, #12
 8001fea:	0b2d      	lsrs	r5, r5, #12
 8001fec:	0d53      	lsrs	r3, r2, #21
 8001fee:	e003      	b.n	8001ff8 <__aeabi_i2d+0x3c>
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2500      	movs	r5, #0
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	051b      	lsls	r3, r3, #20
 8001ffa:	432b      	orrs	r3, r5
 8001ffc:	07e4      	lsls	r4, r4, #31
 8001ffe:	4323      	orrs	r3, r4
 8002000:	0030      	movs	r0, r6
 8002002:	0019      	movs	r1, r3
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	380b      	subs	r0, #11
 8002008:	4085      	lsls	r5, r0
 800200a:	0552      	lsls	r2, r2, #21
 800200c:	032d      	lsls	r5, r5, #12
 800200e:	2600      	movs	r6, #0
 8002010:	0b2d      	lsrs	r5, r5, #12
 8002012:	0d53      	lsrs	r3, r2, #21
 8002014:	e7f0      	b.n	8001ff8 <__aeabi_i2d+0x3c>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	0000041e 	.word	0x0000041e

0800201c <__aeabi_ui2d>:
 800201c:	b510      	push	{r4, lr}
 800201e:	1e04      	subs	r4, r0, #0
 8002020:	d010      	beq.n	8002044 <__aeabi_ui2d+0x28>
 8002022:	f000 f821 	bl	8002068 <__clzsi2>
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <__aeabi_ui2d+0x48>)
 8002028:	1a1b      	subs	r3, r3, r0
 800202a:	280a      	cmp	r0, #10
 800202c:	dc11      	bgt.n	8002052 <__aeabi_ui2d+0x36>
 800202e:	220b      	movs	r2, #11
 8002030:	0021      	movs	r1, r4
 8002032:	1a12      	subs	r2, r2, r0
 8002034:	40d1      	lsrs	r1, r2
 8002036:	3015      	adds	r0, #21
 8002038:	030a      	lsls	r2, r1, #12
 800203a:	055b      	lsls	r3, r3, #21
 800203c:	4084      	lsls	r4, r0
 800203e:	0b12      	lsrs	r2, r2, #12
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	e001      	b.n	8002048 <__aeabi_ui2d+0x2c>
 8002044:	2300      	movs	r3, #0
 8002046:	2200      	movs	r2, #0
 8002048:	051b      	lsls	r3, r3, #20
 800204a:	4313      	orrs	r3, r2
 800204c:	0020      	movs	r0, r4
 800204e:	0019      	movs	r1, r3
 8002050:	bd10      	pop	{r4, pc}
 8002052:	0022      	movs	r2, r4
 8002054:	380b      	subs	r0, #11
 8002056:	4082      	lsls	r2, r0
 8002058:	055b      	lsls	r3, r3, #21
 800205a:	0312      	lsls	r2, r2, #12
 800205c:	2400      	movs	r4, #0
 800205e:	0b12      	lsrs	r2, r2, #12
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	e7f1      	b.n	8002048 <__aeabi_ui2d+0x2c>
 8002064:	0000041e 	.word	0x0000041e

08002068 <__clzsi2>:
 8002068:	211c      	movs	r1, #28
 800206a:	2301      	movs	r3, #1
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	4298      	cmp	r0, r3
 8002070:	d301      	bcc.n	8002076 <__clzsi2+0xe>
 8002072:	0c00      	lsrs	r0, r0, #16
 8002074:	3910      	subs	r1, #16
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	4298      	cmp	r0, r3
 800207a:	d301      	bcc.n	8002080 <__clzsi2+0x18>
 800207c:	0a00      	lsrs	r0, r0, #8
 800207e:	3908      	subs	r1, #8
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	4298      	cmp	r0, r3
 8002084:	d301      	bcc.n	800208a <__clzsi2+0x22>
 8002086:	0900      	lsrs	r0, r0, #4
 8002088:	3904      	subs	r1, #4
 800208a:	a202      	add	r2, pc, #8	; (adr r2, 8002094 <__clzsi2+0x2c>)
 800208c:	5c10      	ldrb	r0, [r2, r0]
 800208e:	1840      	adds	r0, r0, r1
 8002090:	4770      	bx	lr
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	02020304 	.word	0x02020304
 8002098:	01010101 	.word	0x01010101
	...

080020a4 <ADC_Channel_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Channel_Config()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <ADC_Channel_Config+0x34>)
 80020ac:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]

	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ba:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <ADC_Channel_Config+0x38>)
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f001 f819 	bl	80030f8 <HAL_ADC_ConfigChannel>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d001      	beq.n	80020ce <ADC_Channel_Config+0x2a>
	{
		Error_Handler();
 80020ca:	f000 f9c5 	bl	8002458 <Error_Handler>
	}
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200002c8 	.word	0x200002c8
 80020d8:	0c000008 	.word	0x0c000008
 80020dc:	2000020c 	.word	0x2000020c

080020e0 <Read_Sensors>:

void Read_Sensors()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_SENSORS; ++i)
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	e029      	b.n	8002140 <Read_Sensors+0x60>
	{
		sConfig.Channel = channels[i];
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <Read_Sensors+0x70>)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	58d2      	ldr	r2, [r2, r3]
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <Read_Sensors+0x74>)
 80020f6:	601a      	str	r2, [r3, #0]
		if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f8:	4a16      	ldr	r2, [pc, #88]	; (8002154 <Read_Sensors+0x74>)
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <Read_Sensors+0x78>)
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f000 fffa 	bl	80030f8 <HAL_ADC_ConfigChannel>
 8002104:	1e03      	subs	r3, r0, #0
 8002106:	d001      	beq.n	800210c <Read_Sensors+0x2c>
		{
			Error_Handler();
 8002108:	f000 f9a6 	bl	8002458 <Error_Handler>
		}

		HAL_ADC_Start(&hadc1);
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <Read_Sensors+0x78>)
 800210e:	0018      	movs	r0, r3
 8002110:	f000 ff04 	bl	8002f1c <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8002114:	2301      	movs	r3, #1
 8002116:	425a      	negs	r2, r3
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <Read_Sensors+0x78>)
 800211a:	0011      	movs	r1, r2
 800211c:	0018      	movs	r0, r3
 800211e:	f000 ff4b 	bl	8002fb8 <HAL_ADC_PollForConversion>
 8002122:	1e03      	subs	r3, r0, #0
 8002124:	d109      	bne.n	800213a <Read_Sensors+0x5a>
		{
			values[i] = HAL_ADC_GetValue(&hadc1);
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <Read_Sensors+0x78>)
 8002128:	0018      	movs	r0, r3
 800212a:	f000 ffd9 	bl	80030e0 <HAL_ADC_GetValue>
 800212e:	0003      	movs	r3, r0
 8002130:	b299      	uxth	r1, r3
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <Read_Sensors+0x7c>)
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < NUM_SENSORS; ++i)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3301      	adds	r3, #1
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b04      	cmp	r3, #4
 8002144:	ddd2      	ble.n	80020ec <Read_Sensors+0xc>
		}
	}
}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000000 	.word	0x20000000
 8002154:	200002c8 	.word	0x200002c8
 8002158:	2000020c 	.word	0x2000020c
 800215c:	200002bc 	.word	0x200002bc

08002160 <Determine_Turns>:

uint8_t Determine_Turns()
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
	Read_Sensors();
 8002166:	f7ff ffbb 	bl	80020e0 <Read_Sensors>

	uint8_t turn = 10;
 800216a:	1dfb      	adds	r3, r7, #7
 800216c:	220a      	movs	r2, #10
 800216e:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < NUM_SENSORS; ++i)
 8002170:	2300      	movs	r3, #0
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	e00f      	b.n	8002196 <Determine_Turns+0x36>
	{
		if(values[i] > THRESHOLD && turn > 5)
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <Determine_Turns+0x48>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	0052      	lsls	r2, r2, #1
 800217c:	5ad3      	ldrh	r3, [r2, r3]
 800217e:	2b05      	cmp	r3, #5
 8002180:	d906      	bls.n	8002190 <Determine_Turns+0x30>
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d902      	bls.n	8002190 <Determine_Turns+0x30>
		{
			turn = i;
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_SENSORS; ++i)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3301      	adds	r3, #1
 8002194:	603b      	str	r3, [r7, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	2b04      	cmp	r3, #4
 800219a:	ddec      	ble.n	8002176 <Determine_Turns+0x16>
		}
	}

	return turn;
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	781b      	ldrb	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200002bc 	.word	0x200002bc

080021ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b0:	f000 fb32 	bl	8002818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021b4:	f000 f81a 	bl	80021ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021b8:	f000 f908 	bl	80023cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80021bc:	f000 f85e 	bl	800227c <MX_ADC1_Init>
  MX_I2C2_Init();
 80021c0:	f000 f8c4 	bl	800234c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Channel_Config();
 80021c4:	f7ff ff6e 	bl	80020a4 <ADC_Channel_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  turn_count = Determine_Turns();
 80021c8:	f7ff ffca 	bl	8002160 <Determine_Turns>
 80021cc:	0003      	movs	r3, r0
 80021ce:	001a      	movs	r2, r3
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <main+0x38>)
 80021d2:	701a      	strb	r2, [r3, #0]

	  HAL_I2C_Slave_Transmit(&hi2c2, &turn_count, 1, 100);
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <main+0x38>)
 80021d6:	4804      	ldr	r0, [pc, #16]	; (80021e8 <main+0x3c>)
 80021d8:	2364      	movs	r3, #100	; 0x64
 80021da:	2201      	movs	r2, #1
 80021dc:	f001 fd56 	bl	8003c8c <HAL_I2C_Slave_Transmit>
	  turn_count = Determine_Turns();
 80021e0:	e7f2      	b.n	80021c8 <main+0x1c>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	200002c6 	.word	0x200002c6
 80021e8:	20000270 	.word	0x20000270

080021ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b093      	sub	sp, #76	; 0x4c
 80021f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021f2:	2414      	movs	r4, #20
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	0018      	movs	r0, r3
 80021f8:	2334      	movs	r3, #52	; 0x34
 80021fa:	001a      	movs	r2, r3
 80021fc:	2100      	movs	r1, #0
 80021fe:	f003 fb31 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	0018      	movs	r0, r3
 8002206:	2310      	movs	r3, #16
 8002208:	001a      	movs	r2, r3
 800220a:	2100      	movs	r1, #0
 800220c:	f003 fb2a 	bl	8005864 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	0018      	movs	r0, r3
 8002216:	f002 fe1b 	bl	8004e50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	2202      	movs	r2, #2
 800221e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002220:	193b      	adds	r3, r7, r4
 8002222:	2280      	movs	r2, #128	; 0x80
 8002224:	0052      	lsls	r2, r2, #1
 8002226:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002234:	193b      	adds	r3, r7, r4
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800223a:	193b      	adds	r3, r7, r4
 800223c:	0018      	movs	r0, r3
 800223e:	f002 fe47 	bl	8004ed0 <HAL_RCC_OscConfig>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002246:	f000 f907 	bl	8002458 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2200      	movs	r2, #0
 8002254:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002262:	1d3b      	adds	r3, r7, #4
 8002264:	2100      	movs	r1, #0
 8002266:	0018      	movs	r0, r3
 8002268:	f003 f948 	bl	80054fc <HAL_RCC_ClockConfig>
 800226c:	1e03      	subs	r3, r0, #0
 800226e:	d001      	beq.n	8002274 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002270:	f000 f8f2 	bl	8002458 <Error_Handler>
  }
}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b013      	add	sp, #76	; 0x4c
 800227a:	bd90      	pop	{r4, r7, pc}

0800227c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	0018      	movs	r0, r3
 8002286:	230c      	movs	r3, #12
 8002288:	001a      	movs	r2, r3
 800228a:	2100      	movs	r1, #0
 800228c:	f003 faea 	bl	8005864 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002290:	4b2b      	ldr	r3, [pc, #172]	; (8002340 <MX_ADC1_Init+0xc4>)
 8002292:	4a2c      	ldr	r2, [pc, #176]	; (8002344 <MX_ADC1_Init+0xc8>)
 8002294:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002296:	4b2a      	ldr	r3, [pc, #168]	; (8002340 <MX_ADC1_Init+0xc4>)
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	05d2      	lsls	r2, r2, #23
 800229c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 800229e:	4b28      	ldr	r3, [pc, #160]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022a0:	2218      	movs	r2, #24
 80022a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022a4:	4b26      	ldr	r3, [pc, #152]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022b2:	2204      	movs	r2, #4
 80022b4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80022bc:	4b20      	ldr	r3, [pc, #128]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022c2:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022d4:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022dc:	222c      	movs	r2, #44	; 0x2c
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022f6:	223c      	movs	r2, #60	; 0x3c
 80022f8:	2100      	movs	r1, #0
 80022fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80022fc:	4b10      	ldr	r3, [pc, #64]	; (8002340 <MX_ADC1_Init+0xc4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002302:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <MX_ADC1_Init+0xc4>)
 8002304:	0018      	movs	r0, r3
 8002306:	f000 fc2b 	bl	8002b60 <HAL_ADC_Init>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800230e:	f000 f8a3 	bl	8002458 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <MX_ADC1_Init+0xcc>)
 8002316:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2200      	movs	r2, #0
 800231c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002324:	1d3a      	adds	r2, r7, #4
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <MX_ADC1_Init+0xc4>)
 8002328:	0011      	movs	r1, r2
 800232a:	0018      	movs	r0, r3
 800232c:	f000 fee4 	bl	80030f8 <HAL_ADC_ConfigChannel>
 8002330:	1e03      	subs	r3, r0, #0
 8002332:	d001      	beq.n	8002338 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8002334:	f000 f890 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b004      	add	sp, #16
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000020c 	.word	0x2000020c
 8002344:	40012400 	.word	0x40012400
 8002348:	1c000080 	.word	0x1c000080

0800234c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <MX_I2C2_Init+0x78>)
 8002354:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002358:	4a1b      	ldr	r2, [pc, #108]	; (80023c8 <MX_I2C2_Init+0x7c>)
 800235a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 128;
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <MX_I2C2_Init+0x74>)
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002364:	2201      	movs	r2, #1
 8002366:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <MX_I2C2_Init+0x74>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002370:	2200      	movs	r2, #0
 8002372:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <MX_I2C2_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002380:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002382:	2200      	movs	r2, #0
 8002384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002388:	0018      	movs	r0, r3
 800238a:	f001 fbe9 	bl	8003b60 <HAL_I2C_Init>
 800238e:	1e03      	subs	r3, r0, #0
 8002390:	d001      	beq.n	8002396 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002392:	f000 f861 	bl	8002458 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <MX_I2C2_Init+0x74>)
 8002398:	2100      	movs	r1, #0
 800239a:	0018      	movs	r0, r3
 800239c:	f002 fcc0 	bl	8004d20 <HAL_I2CEx_ConfigAnalogFilter>
 80023a0:	1e03      	subs	r3, r0, #0
 80023a2:	d001      	beq.n	80023a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80023a4:	f000 f858 	bl	8002458 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <MX_I2C2_Init+0x74>)
 80023aa:	2100      	movs	r1, #0
 80023ac:	0018      	movs	r0, r3
 80023ae:	f002 fd03 	bl	8004db8 <HAL_I2CEx_ConfigDigitalFilter>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d001      	beq.n	80023ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80023b6:	f000 f84f 	bl	8002458 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000270 	.word	0x20000270
 80023c4:	40005800 	.word	0x40005800
 80023c8:	00303d5b 	.word	0x00303d5b

080023cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d2:	240c      	movs	r4, #12
 80023d4:	193b      	adds	r3, r7, r4
 80023d6:	0018      	movs	r0, r3
 80023d8:	2314      	movs	r3, #20
 80023da:	001a      	movs	r2, r3
 80023dc:	2100      	movs	r1, #0
 80023de:	f003 fa41 	bl	8005864 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_GPIO_Init+0x88>)
 80023e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e6:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <MX_GPIO_Init+0x88>)
 80023e8:	2101      	movs	r1, #1
 80023ea:	430a      	orrs	r2, r1
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34
 80023ee:	4b19      	ldr	r3, [pc, #100]	; (8002454 <MX_GPIO_Init+0x88>)
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	2201      	movs	r2, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fa:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_GPIO_Init+0x88>)
 80023fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MX_GPIO_Init+0x88>)
 8002400:	2102      	movs	r1, #2
 8002402:	430a      	orrs	r2, r1
 8002404:	635a      	str	r2, [r3, #52]	; 0x34
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <MX_GPIO_Init+0x88>)
 8002408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240a:	2202      	movs	r2, #2
 800240c:	4013      	ands	r3, r2
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	0219      	lsls	r1, r3, #8
 8002416:	23a0      	movs	r3, #160	; 0xa0
 8002418:	05db      	lsls	r3, r3, #23
 800241a:	2200      	movs	r2, #0
 800241c:	0018      	movs	r0, r3
 800241e:	f001 fb81 	bl	8003b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	0212      	lsls	r2, r2, #8
 8002428:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242a:	193b      	adds	r3, r7, r4
 800242c:	2201      	movs	r2, #1
 800242e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	193b      	adds	r3, r7, r4
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002436:	193b      	adds	r3, r7, r4
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	193a      	adds	r2, r7, r4
 800243e:	23a0      	movs	r3, #160	; 0xa0
 8002440:	05db      	lsls	r3, r3, #23
 8002442:	0011      	movs	r1, r2
 8002444:	0018      	movs	r0, r3
 8002446:	f001 fa09 	bl	800385c <HAL_GPIO_Init>

}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b009      	add	sp, #36	; 0x24
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	40021000 	.word	0x40021000

08002458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002460:	e7fe      	b.n	8002460 <Error_Handler+0x8>
	...

08002464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <HAL_MspInit+0x44>)
 800246c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_MspInit+0x44>)
 8002470:	2101      	movs	r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <HAL_MspInit+0x44>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_MspInit+0x44>)
 8002484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_MspInit+0x44>)
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	0549      	lsls	r1, r1, #21
 800248c:	430a      	orrs	r2, r1
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_MspInit+0x44>)
 8002492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	055b      	lsls	r3, r3, #21
 8002498:	4013      	ands	r3, r2
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b08b      	sub	sp, #44	; 0x2c
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	2414      	movs	r4, #20
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	0018      	movs	r0, r3
 80024ba:	2314      	movs	r3, #20
 80024bc:	001a      	movs	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f003 f9d0 	bl	8005864 <memset>
  if(hadc->Instance==ADC1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_ADC_MspInit+0x80>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d129      	bne.n	8002522 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_ADC_MspInit+0x84>)
 80024d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_ADC_MspInit+0x84>)
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	0349      	lsls	r1, r1, #13
 80024d8:	430a      	orrs	r2, r1
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_ADC_MspInit+0x84>)
 80024de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	035b      	lsls	r3, r3, #13
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <HAL_ADC_MspInit+0x84>)
 80024ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_ADC_MspInit+0x84>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	635a      	str	r2, [r3, #52]	; 0x34
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_ADC_MspInit+0x84>)
 80024f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fa:	2201      	movs	r2, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002502:	193b      	adds	r3, r7, r4
 8002504:	22f9      	movs	r2, #249	; 0xf9
 8002506:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002508:	193b      	adds	r3, r7, r4
 800250a:	2203      	movs	r2, #3
 800250c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	193b      	adds	r3, r7, r4
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002514:	193a      	adds	r2, r7, r4
 8002516:	23a0      	movs	r3, #160	; 0xa0
 8002518:	05db      	lsls	r3, r3, #23
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f001 f99d 	bl	800385c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b00b      	add	sp, #44	; 0x2c
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40012400 	.word	0x40012400
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b08b      	sub	sp, #44	; 0x2c
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	2414      	movs	r4, #20
 800253e:	193b      	adds	r3, r7, r4
 8002540:	0018      	movs	r0, r3
 8002542:	2314      	movs	r3, #20
 8002544:	001a      	movs	r2, r3
 8002546:	2100      	movs	r1, #0
 8002548:	f003 f98c 	bl	8005864 <memset>
  if(hi2c->Instance==I2C2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_I2C_MspInit+0x9c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d138      	bne.n	80025c8 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <HAL_I2C_MspInit+0xa0>)
 8002558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_I2C_MspInit+0xa0>)
 800255c:	2102      	movs	r1, #2
 800255e:	430a      	orrs	r2, r1
 8002560:	635a      	str	r2, [r3, #52]	; 0x34
 8002562:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <HAL_I2C_MspInit+0xa0>)
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	2202      	movs	r2, #2
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800256e:	193b      	adds	r3, r7, r4
 8002570:	22c0      	movs	r2, #192	; 0xc0
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002576:	0021      	movs	r1, r4
 8002578:	187b      	adds	r3, r7, r1
 800257a:	2212      	movs	r2, #18
 800257c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	187b      	adds	r3, r7, r1
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	187b      	adds	r3, r7, r1
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800258a:	187b      	adds	r3, r7, r1
 800258c:	2206      	movs	r2, #6
 800258e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	187b      	adds	r3, r7, r1
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_I2C_MspInit+0xa4>)
 8002594:	0019      	movs	r1, r3
 8002596:	0010      	movs	r0, r2
 8002598:	f001 f960 	bl	800385c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_I2C_MspInit+0xa0>)
 800259e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_I2C_MspInit+0xa0>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	03c9      	lsls	r1, r1, #15
 80025a6:	430a      	orrs	r2, r1
 80025a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80025aa:	4b0a      	ldr	r3, [pc, #40]	; (80025d4 <HAL_I2C_MspInit+0xa0>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	03db      	lsls	r3, r3, #15
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	2018      	movs	r0, #24
 80025be:	f001 f8a5 	bl	800370c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80025c2:	2018      	movs	r0, #24
 80025c4:	f001 f8b7 	bl	8003736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b00b      	add	sp, #44	; 0x2c
 80025ce:	bd90      	pop	{r4, r7, pc}
 80025d0:	40005800 	.word	0x40005800
 80025d4:	40021000 	.word	0x40021000
 80025d8:	50000400 	.word	0x50000400

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <NMI_Handler+0x4>

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002600:	f000 f974 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 Interrupt.
  */
void I2C2_IRQHandler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <I2C2_IRQHandler+0x2c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	23e0      	movs	r3, #224	; 0xe0
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4013      	ands	r3, r2
 800261c:	d004      	beq.n	8002628 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <I2C2_IRQHandler+0x2c>)
 8002620:	0018      	movs	r0, r3
 8002622:	f001 fc63 	bl	8003eec <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8002626:	e003      	b.n	8002630 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <I2C2_IRQHandler+0x2c>)
 800262a:	0018      	movs	r0, r3
 800262c:	f001 fc44 	bl	8003eb8 <HAL_I2C_EV_IRQHandler>
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	20000270 	.word	0x20000270

0800263c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	return 1;
 8002640:	2301      	movs	r3, #1
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <_kill>:

int _kill(int pid, int sig)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002652:	f003 f8dd 	bl	8005810 <__errno>
 8002656:	0003      	movs	r3, r0
 8002658:	2216      	movs	r2, #22
 800265a:	601a      	str	r2, [r3, #0]
	return -1;
 800265c:	2301      	movs	r3, #1
 800265e:	425b      	negs	r3, r3
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}

08002668 <_exit>:

void _exit (int status)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002670:	2301      	movs	r3, #1
 8002672:	425a      	negs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	0011      	movs	r1, r2
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff ffe5 	bl	8002648 <_kill>
	while (1) {}		/* Make sure we hang here */
 800267e:	e7fe      	b.n	800267e <_exit+0x16>

08002680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e00a      	b.n	80026a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002692:	e000      	b.n	8002696 <_read+0x16>
 8002694:	bf00      	nop
 8002696:	0001      	movs	r1, r0
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	60ba      	str	r2, [r7, #8]
 800269e:	b2ca      	uxtb	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf0      	blt.n	8002692 <_read+0x12>
	}

return len;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b006      	add	sp, #24
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e009      	b.n	80026e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	60ba      	str	r2, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	0018      	movs	r0, r3
 80026d6:	e000      	b.n	80026da <_write+0x20>
 80026d8:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3301      	adds	r3, #1
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	dbf1      	blt.n	80026cc <_write+0x12>
	}
	return len;
 80026e8:	687b      	ldr	r3, [r7, #4]
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b006      	add	sp, #24
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <_close>:

int _close(int file)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
	return -1;
 80026fa:	2301      	movs	r3, #1
 80026fc:	425b      	negs	r3, r3
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}

08002706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2280      	movs	r2, #128	; 0x80
 8002714:	0192      	lsls	r2, r2, #6
 8002716:	605a      	str	r2, [r3, #4]
	return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}

08002722 <_isatty>:

int _isatty(int file)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	return 1;
 800272a:	2301      	movs	r3, #1
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
	return 0;
 8002740:	2300      	movs	r3, #0
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002754:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <_sbrk+0x5c>)
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <_sbrk+0x60>)
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <_sbrk+0x64>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <_sbrk+0x68>)
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	18d3      	adds	r3, r2, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	429a      	cmp	r2, r3
 800277a:	d207      	bcs.n	800278c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800277c:	f003 f848 	bl	8005810 <__errno>
 8002780:	0003      	movs	r3, r0
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002786:	2301      	movs	r3, #1
 8002788:	425b      	negs	r3, r3
 800278a:	e009      	b.n	80027a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	18d2      	adds	r2, r2, r3
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <_sbrk+0x64>)
 800279c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b006      	add	sp, #24
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20004800 	.word	0x20004800
 80027ac:	00000400 	.word	0x00000400
 80027b0:	200002d4 	.word	0x200002d4
 80027b4:	200002f0 	.word	0x200002f0

080027b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027c4:	480d      	ldr	r0, [pc, #52]	; (80027fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027c8:	f7ff fff6 	bl	80027b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ce:	490d      	ldr	r1, [pc, #52]	; (8002804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <LoopForever+0xe>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d4:	e002      	b.n	80027dc <LoopCopyDataInit>

080027d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027da:	3304      	adds	r3, #4

080027dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e0:	d3f9      	bcc.n	80027d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e2:	4a0a      	ldr	r2, [pc, #40]	; (800280c <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e4:	4c0a      	ldr	r4, [pc, #40]	; (8002810 <LoopForever+0x16>)
  movs r3, #0
 80027e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e8:	e001      	b.n	80027ee <LoopFillZerobss>

080027ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027ec:	3204      	adds	r2, #4

080027ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f0:	d3fb      	bcc.n	80027ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027f2:	f003 f813 	bl	800581c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80027f6:	f7ff fcd9 	bl	80021ac <main>

080027fa <LoopForever>:

LoopForever:
  b LoopForever
 80027fa:	e7fe      	b.n	80027fa <LoopForever>
  ldr   r0, =_estack
 80027fc:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002804:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002808:	080088cc 	.word	0x080088cc
  ldr r2, =_sbss
 800280c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002810:	200002ec 	.word	0x200002ec

08002814 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002814:	e7fe      	b.n	8002814 <ADC1_IRQHandler>
	...

08002818 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_Init+0x3c>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Init+0x3c>)
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	0049      	lsls	r1, r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002832:	2000      	movs	r0, #0
 8002834:	f000 f810 	bl	8002858 <HAL_InitTick>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d003      	beq.n	8002844 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
 8002842:	e001      	b.n	8002848 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002844:	f7ff fe0e 	bl	8002464 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002848:	1dfb      	adds	r3, r7, #7
 800284a:	781b      	ldrb	r3, [r3, #0]
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40022000 	.word	0x40022000

08002858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002860:	230f      	movs	r3, #15
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_InitTick+0x88>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02b      	beq.n	80028c8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002870:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <HAL_InitTick+0x8c>)
 8002872:	681c      	ldr	r4, [r3, #0]
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_InitTick+0x88>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	0019      	movs	r1, r3
 800287a:	23fa      	movs	r3, #250	; 0xfa
 800287c:	0098      	lsls	r0, r3, #2
 800287e:	f7fd fc59 	bl	8000134 <__udivsi3>
 8002882:	0003      	movs	r3, r0
 8002884:	0019      	movs	r1, r3
 8002886:	0020      	movs	r0, r4
 8002888:	f7fd fc54 	bl	8000134 <__udivsi3>
 800288c:	0003      	movs	r3, r0
 800288e:	0018      	movs	r0, r3
 8002890:	f000 ff61 	bl	8003756 <HAL_SYSTICK_Config>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d112      	bne.n	80028be <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d80a      	bhi.n	80028b4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	2301      	movs	r3, #1
 80028a2:	425b      	negs	r3, r3
 80028a4:	2200      	movs	r2, #0
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 ff30 	bl	800370c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_InitTick+0x90>)
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e00d      	b.n	80028d0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80028b4:	230f      	movs	r3, #15
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	e008      	b.n	80028d0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028be:	230f      	movs	r3, #15
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	e003      	b.n	80028d0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028c8:	230f      	movs	r3, #15
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80028d0:	230f      	movs	r3, #15
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b005      	add	sp, #20
 80028dc:	bd90      	pop	{r4, r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	2000001c 	.word	0x2000001c
 80028e4:	20000014 	.word	0x20000014
 80028e8:	20000018 	.word	0x20000018

080028ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_IncTick+0x1c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	001a      	movs	r2, r3
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_IncTick+0x20>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	18d2      	adds	r2, r2, r3
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_IncTick+0x20>)
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	2000001c 	.word	0x2000001c
 800290c:	200002d8 	.word	0x200002d8

08002910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  return uwTick;
 8002914:	4b02      	ldr	r3, [pc, #8]	; (8002920 <HAL_GetTick+0x10>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	200002d8 	.word	0x200002d8

08002924 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002934:	401a      	ands	r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	601a      	str	r2, [r3, #0]
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	fe3fffff 	.word	0xfe3fffff

0800294c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	23e0      	movs	r3, #224	; 0xe0
 800295a:	045b      	lsls	r3, r3, #17
 800295c:	4013      	ands	r3, r2
}
 800295e:	0018      	movs	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	b002      	add	sp, #8
 8002964:	bd80      	pop	{r7, pc}

08002966 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b084      	sub	sp, #16
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	2104      	movs	r1, #4
 800297a:	400a      	ands	r2, r1
 800297c:	2107      	movs	r1, #7
 800297e:	4091      	lsls	r1, r2
 8002980:	000a      	movs	r2, r1
 8002982:	43d2      	mvns	r2, r2
 8002984:	401a      	ands	r2, r3
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	2104      	movs	r1, #4
 800298a:	400b      	ands	r3, r1
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4099      	lsls	r1, r3
 8002990:	000b      	movs	r3, r1
 8002992:	431a      	orrs	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b004      	add	sp, #16
 800299e:	bd80      	pop	{r7, pc}

080029a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	23c0      	movs	r3, #192	; 0xc0
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4013      	ands	r3, r2
 80029b2:	d101      	bne.n	80029b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	211f      	movs	r1, #31
 80029d6:	400a      	ands	r2, r1
 80029d8:	210f      	movs	r1, #15
 80029da:	4091      	lsls	r1, r2
 80029dc:	000a      	movs	r2, r1
 80029de:	43d2      	mvns	r2, r2
 80029e0:	401a      	ands	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	210f      	movs	r1, #15
 80029e8:	4019      	ands	r1, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	201f      	movs	r0, #31
 80029ee:	4003      	ands	r3, r0
 80029f0:	4099      	lsls	r1, r3
 80029f2:	000b      	movs	r3, r1
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	035b      	lsls	r3, r3, #13
 8002a14:	0b5b      	lsrs	r3, r3, #13
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	0352      	lsls	r2, r2, #13
 8002a36:	0b52      	lsrs	r2, r2, #13
 8002a38:	43d2      	mvns	r2, r2
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	0212      	lsls	r2, r2, #8
 8002a5c:	43d2      	mvns	r2, r2
 8002a5e:	401a      	ands	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	400b      	ands	r3, r1
 8002a68:	4904      	ldr	r1, [pc, #16]	; (8002a7c <LL_ADC_SetChannelSamplingTime+0x34>)
 8002a6a:	400b      	ands	r3, r1
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	07ffff00 	.word	0x07ffff00

08002a80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	0552      	lsls	r2, r2, #21
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	b002      	add	sp, #8
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	6fffffe8 	.word	0x6fffffe8

08002aa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	055b      	lsls	r3, r3, #21
 8002ab8:	401a      	ands	r2, r3
 8002aba:	2380      	movs	r3, #128	; 0x80
 8002abc:	055b      	lsls	r3, r3, #21
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d101      	bne.n	8002ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <LL_ADC_Enable+0x20>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ae8:	46c0      	nop			; (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	7fffffe8 	.word	0x7fffffe8

08002af4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2201      	movs	r2, #1
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <LL_ADC_IsEnabled+0x18>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <LL_ADC_IsEnabled+0x1a>
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b002      	add	sp, #8
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <LL_ADC_REG_StartConversion+0x20>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	2204      	movs	r2, #4
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	7fffffe8 	.word	0x7fffffe8

08002b3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d101      	bne.n	8002b54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	231f      	movs	r3, #31
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1b1      	b.n	8002eea <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7ff fc8b 	bl	80024ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2254      	movs	r2, #84	; 0x54
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f7ff ff7d 	bl	8002aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d115      	bne.n	8002bde <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7ff ff62 	bl	8002a80 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bbc:	4bcd      	ldr	r3, [pc, #820]	; (8002ef4 <HAL_ADC_Init+0x394>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	49cd      	ldr	r1, [pc, #820]	; (8002ef8 <HAL_ADC_Init+0x398>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7fd fab6 	bl	8000134 <__udivsi3>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	3301      	adds	r3, #1
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7ff ff60 	bl	8002aa8 <LL_ADC_IsInternalRegulatorEnabled>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d10f      	bne.n	8002c0c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c04:	231f      	movs	r3, #31
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ff93 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 8002c16:	0003      	movs	r3, r0
 8002c18:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	2210      	movs	r2, #16
 8002c20:	4013      	ands	r3, r2
 8002c22:	d000      	beq.n	8002c26 <HAL_ADC_Init+0xc6>
 8002c24:	e154      	b.n	8002ed0 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d000      	beq.n	8002c2e <HAL_ADC_Init+0xce>
 8002c2c:	e150      	b.n	8002ed0 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	4ab2      	ldr	r2, [pc, #712]	; (8002efc <HAL_ADC_Init+0x39c>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	2202      	movs	r2, #2
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	0018      	movs	r0, r3
 8002c44:	f7ff ff56 	bl	8002af4 <LL_ADC_IsEnabled>
 8002c48:	1e03      	subs	r3, r0, #0
 8002c4a:	d156      	bne.n	8002cfa <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2218      	movs	r2, #24
 8002c54:	4393      	bics	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	0f9b      	lsrs	r3, r3, #30
 8002c6a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c70:	4313      	orrs	r3, r2
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223c      	movs	r2, #60	; 0x3c
 8002c7c:	5c9b      	ldrb	r3, [r3, r2]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d111      	bne.n	8002ca6 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0f9b      	lsrs	r3, r3, #30
 8002c88:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002c8e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002c94:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002c9a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	4a94      	ldr	r2, [pc, #592]	; (8002f00 <HAL_ADC_Init+0x3a0>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	23c0      	movs	r3, #192	; 0xc0
 8002cc2:	061b      	lsls	r3, r3, #24
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d018      	beq.n	8002cfa <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	05db      	lsls	r3, r3, #23
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d012      	beq.n	8002cfa <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	061b      	lsls	r3, r3, #24
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d00c      	beq.n	8002cfa <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002ce0:	4b88      	ldr	r3, [pc, #544]	; (8002f04 <HAL_ADC_Init+0x3a4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a88      	ldr	r2, [pc, #544]	; (8002f08 <HAL_ADC_Init+0x3a8>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	23f0      	movs	r3, #240	; 0xf0
 8002cf0:	039b      	lsls	r3, r3, #14
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	4b83      	ldr	r3, [pc, #524]	; (8002f04 <HAL_ADC_Init+0x3a4>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7e1b      	ldrb	r3, [r3, #24]
 8002cfe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	7e5b      	ldrb	r3, [r3, #25]
 8002d04:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d06:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7e9b      	ldrb	r3, [r3, #26]
 8002d0c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d0e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_ADC_Init+0x1be>
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	015b      	lsls	r3, r3, #5
 8002d1c:	e000      	b.n	8002d20 <HAL_ADC_Init+0x1c0>
 8002d1e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d20:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d26:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da04      	bge.n	8002d3a <HAL_ADC_Init+0x1da>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	085b      	lsrs	r3, r3, #1
 8002d38:	e001      	b.n	8002d3e <HAL_ADC_Init+0x1de>
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002d3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	5c5b      	ldrb	r3, [r3, r1]
 8002d46:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d48:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	5c9b      	ldrb	r3, [r3, r2]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d115      	bne.n	8002d86 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7e9b      	ldrb	r3, [r3, #26]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	0252      	lsls	r2, r2, #9
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	e00b      	b.n	8002d86 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	2220      	movs	r2, #32
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	2201      	movs	r2, #1
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d92:	23e0      	movs	r3, #224	; 0xe0
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_ADC_Init+0x3ac>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	0019      	movs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	4a53      	ldr	r2, [pc, #332]	; (8002f10 <HAL_ADC_Init+0x3b0>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd8:	001a      	movs	r2, r3
 8002dda:	2100      	movs	r1, #0
 8002ddc:	f7ff fdc3 	bl	8002966 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	494a      	ldr	r1, [pc, #296]	; (8002f14 <HAL_ADC_Init+0x3b4>)
 8002dea:	001a      	movs	r2, r3
 8002dec:	f7ff fdbb 	bl	8002966 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d109      	bne.n	8002e0c <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2110      	movs	r1, #16
 8002e04:	4249      	negs	r1, r1
 8002e06:	430a      	orrs	r2, r1
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28
 8002e0a:	e03a      	b.n	8002e82 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	039b      	lsls	r3, r3, #14
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d134      	bne.n	8002e82 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e00c      	b.n	8002e38 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	40da      	lsrs	r2, r3
 8002e28:	0013      	movs	r3, r2
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	d006      	beq.n	8002e40 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3301      	adds	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b07      	cmp	r3, #7
 8002e3c:	d9ef      	bls.n	8002e1e <HAL_ADC_Init+0x2be>
 8002e3e:	e000      	b.n	8002e42 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002e40:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d109      	bne.n	8002e5c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2110      	movs	r1, #16
 8002e54:	4249      	negs	r1, r1
 8002e56:	430a      	orrs	r2, r1
 8002e58:	629a      	str	r2, [r3, #40]	; 0x28
 8002e5a:	e012      	b.n	8002e82 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	221c      	movs	r2, #28
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2210      	movs	r2, #16
 8002e70:	4252      	negs	r2, r2
 8002e72:	409a      	lsls	r2, r3
 8002e74:	0011      	movs	r1, r2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a23      	ldr	r2, [pc, #140]	; (8002f18 <HAL_ADC_Init+0x3b8>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d10b      	bne.n	8002eaa <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ea8:	e01c      	b.n	8002ee4 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	2212      	movs	r2, #18
 8002eb0:	4393      	bics	r3, r2
 8002eb2:	2210      	movs	r2, #16
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002ec6:	231f      	movs	r3, #31
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ece:	e009      	b.n	8002ee4 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002edc:	231f      	movs	r3, #31
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002ee4:	231f      	movs	r3, #31
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	781b      	ldrb	r3, [r3, #0]
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b008      	add	sp, #32
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	20000014 	.word	0x20000014
 8002ef8:	00030d40 	.word	0x00030d40
 8002efc:	fffffefd 	.word	0xfffffefd
 8002f00:	1ffffc02 	.word	0x1ffffc02
 8002f04:	40012708 	.word	0x40012708
 8002f08:	ffc3ffff 	.word	0xffc3ffff
 8002f0c:	fffe0219 	.word	0xfffe0219
 8002f10:	dffffc02 	.word	0xdffffc02
 8002f14:	07ffff04 	.word	0x07ffff04
 8002f18:	833fffe7 	.word	0x833fffe7

08002f1c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f1c:	b5b0      	push	{r4, r5, r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff fe07 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 8002f2e:	1e03      	subs	r3, r0, #0
 8002f30:	d135      	bne.n	8002f9e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2254      	movs	r2, #84	; 0x54
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_Start+0x24>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e035      	b.n	8002fac <HAL_ADC_Start+0x90>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2254      	movs	r2, #84	; 0x54
 8002f44:	2101      	movs	r1, #1
 8002f46:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f48:	250f      	movs	r5, #15
 8002f4a:	197c      	adds	r4, r7, r5
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 faaa 	bl	80034a8 <ADC_Enable>
 8002f54:	0003      	movs	r3, r0
 8002f56:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f58:	197b      	adds	r3, r7, r5
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d119      	bne.n	8002f94 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4a13      	ldr	r2, [pc, #76]	; (8002fb4 <HAL_ADC_Start+0x98>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	0052      	lsls	r2, r2, #1
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	221c      	movs	r2, #28
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2254      	movs	r2, #84	; 0x54
 8002f84:	2100      	movs	r1, #0
 8002f86:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f7ff fdc3 	bl	8002b18 <LL_ADC_REG_StartConversion>
 8002f92:	e008      	b.n	8002fa6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2254      	movs	r2, #84	; 0x54
 8002f98:	2100      	movs	r1, #0
 8002f9a:	5499      	strb	r1, [r3, r2]
 8002f9c:	e003      	b.n	8002fa6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002fa6:	230f      	movs	r3, #15
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb4:	fffff0fe 	.word	0xfffff0fe

08002fb8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d102      	bne.n	8002fd0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002fca:	2308      	movs	r3, #8
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	e00f      	b.n	8002ff0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d007      	beq.n	8002fec <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e072      	b.n	80030d2 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002fec:	2304      	movs	r3, #4
 8002fee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ff0:	f7ff fc8e 	bl	8002910 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002ff8:	e01f      	b.n	800303a <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	d01c      	beq.n	800303a <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003000:	f7ff fc86 	bl	8002910 <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d302      	bcc.n	8003016 <HAL_ADC_PollForConversion+0x5e>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d111      	bne.n	800303a <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4013      	ands	r3, r2
 8003020:	d10b      	bne.n	800303a <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	2204      	movs	r2, #4
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2254      	movs	r2, #84	; 0x54
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e04b      	b.n	80030d2 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4013      	ands	r3, r2
 8003044:	d0d9      	beq.n	8002ffa <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	0092      	lsls	r2, r2, #2
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0018      	movs	r0, r3
 800305a:	f7ff fca1 	bl	80029a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800305e:	1e03      	subs	r3, r0, #0
 8003060:	d02e      	beq.n	80030c0 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7e9b      	ldrb	r3, [r3, #26]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d12a      	bne.n	80030c0 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2208      	movs	r2, #8
 8003072:	4013      	ands	r3, r2
 8003074:	2b08      	cmp	r3, #8
 8003076:	d123      	bne.n	80030c0 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	0018      	movs	r0, r3
 800307e:	f7ff fd5d 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 8003082:	1e03      	subs	r3, r0, #0
 8003084:	d110      	bne.n	80030a8 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	210c      	movs	r1, #12
 8003092:	438a      	bics	r2, r1
 8003094:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	4a10      	ldr	r2, [pc, #64]	; (80030dc <HAL_ADC_PollForConversion+0x124>)
 800309c:	4013      	ands	r3, r2
 800309e:	2201      	movs	r2, #1
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	659a      	str	r2, [r3, #88]	; 0x58
 80030a6:	e00b      	b.n	80030c0 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ac:	2220      	movs	r2, #32
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	2201      	movs	r2, #1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7e1b      	ldrb	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d103      	bne.n	80030d0 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	220c      	movs	r2, #12
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	0018      	movs	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b004      	add	sp, #16
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	fffffefe 	.word	0xfffffefe

080030e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030ee:	0018      	movs	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	b002      	add	sp, #8
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003102:	2317      	movs	r3, #23
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	2200      	movs	r2, #0
 8003108:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2254      	movs	r2, #84	; 0x54
 8003112:	5c9b      	ldrb	r3, [r3, r2]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d101      	bne.n	800311c <HAL_ADC_ConfigChannel+0x24>
 8003118:	2302      	movs	r3, #2
 800311a:	e1c0      	b.n	800349e <HAL_ADC_ConfigChannel+0x3a6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2254      	movs	r2, #84	; 0x54
 8003120:	2101      	movs	r1, #1
 8003122:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff fd07 	bl	8002b3c <LL_ADC_REG_IsConversionOngoing>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d000      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x3c>
 8003132:	e1a3      	b.n	800347c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d100      	bne.n	800313e <HAL_ADC_ConfigChannel+0x46>
 800313c:	e143      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	429a      	cmp	r2, r3
 8003148:	d004      	beq.n	8003154 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800314e:	4ac1      	ldr	r2, [pc, #772]	; (8003454 <HAL_ADC_ConfigChannel+0x35c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d108      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	0019      	movs	r1, r3
 800315e:	0010      	movs	r0, r2
 8003160:	f7ff fc4f 	bl	8002a02 <LL_ADC_REG_SetSequencerChAdd>
 8003164:	e0c9      	b.n	80032fa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	211f      	movs	r1, #31
 8003170:	400b      	ands	r3, r1
 8003172:	210f      	movs	r1, #15
 8003174:	4099      	lsls	r1, r3
 8003176:	000b      	movs	r3, r1
 8003178:	43db      	mvns	r3, r3
 800317a:	4013      	ands	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	035b      	lsls	r3, r3, #13
 8003184:	0b5b      	lsrs	r3, r3, #13
 8003186:	d105      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x9c>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	221f      	movs	r2, #31
 8003190:	4013      	ands	r3, r2
 8003192:	e098      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2201      	movs	r2, #1
 800319a:	4013      	ands	r3, r2
 800319c:	d000      	beq.n	80031a0 <HAL_ADC_ConfigChannel+0xa8>
 800319e:	e091      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x1cc>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2202      	movs	r2, #2
 80031a6:	4013      	ands	r3, r2
 80031a8:	d000      	beq.n	80031ac <HAL_ADC_ConfigChannel+0xb4>
 80031aa:	e089      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x1c8>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2204      	movs	r2, #4
 80031b2:	4013      	ands	r3, r2
 80031b4:	d000      	beq.n	80031b8 <HAL_ADC_ConfigChannel+0xc0>
 80031b6:	e081      	b.n	80032bc <HAL_ADC_ConfigChannel+0x1c4>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2208      	movs	r2, #8
 80031be:	4013      	ands	r3, r2
 80031c0:	d000      	beq.n	80031c4 <HAL_ADC_ConfigChannel+0xcc>
 80031c2:	e079      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x1c0>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2210      	movs	r2, #16
 80031ca:	4013      	ands	r3, r2
 80031cc:	d000      	beq.n	80031d0 <HAL_ADC_ConfigChannel+0xd8>
 80031ce:	e071      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x1bc>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2220      	movs	r2, #32
 80031d6:	4013      	ands	r3, r2
 80031d8:	d000      	beq.n	80031dc <HAL_ADC_ConfigChannel+0xe4>
 80031da:	e069      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x1b8>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2240      	movs	r2, #64	; 0x40
 80031e2:	4013      	ands	r3, r2
 80031e4:	d000      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0xf0>
 80031e6:	e061      	b.n	80032ac <HAL_ADC_ConfigChannel+0x1b4>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2280      	movs	r2, #128	; 0x80
 80031ee:	4013      	ands	r3, r2
 80031f0:	d000      	beq.n	80031f4 <HAL_ADC_ConfigChannel+0xfc>
 80031f2:	e059      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x1b0>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	2380      	movs	r3, #128	; 0x80
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4013      	ands	r3, r2
 80031fe:	d151      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x1ac>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4013      	ands	r3, r2
 800320a:	d149      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1a8>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4013      	ands	r3, r2
 8003216:	d141      	bne.n	800329c <HAL_ADC_ConfigChannel+0x1a4>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	4013      	ands	r3, r2
 8003222:	d139      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x1a0>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	015b      	lsls	r3, r3, #5
 800322c:	4013      	ands	r3, r2
 800322e:	d131      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x19c>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	019b      	lsls	r3, r3, #6
 8003238:	4013      	ands	r3, r2
 800323a:	d129      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x198>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	01db      	lsls	r3, r3, #7
 8003244:	4013      	ands	r3, r2
 8003246:	d121      	bne.n	800328c <HAL_ADC_ConfigChannel+0x194>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	4013      	ands	r3, r2
 8003252:	d119      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x190>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	4013      	ands	r3, r2
 800325e:	d111      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x18c>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	029b      	lsls	r3, r3, #10
 8003268:	4013      	ands	r3, r2
 800326a:	d109      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x188>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	02db      	lsls	r3, r3, #11
 8003274:	4013      	ands	r3, r2
 8003276:	d001      	beq.n	800327c <HAL_ADC_ConfigChannel+0x184>
 8003278:	2312      	movs	r3, #18
 800327a:	e024      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 800327c:	2300      	movs	r3, #0
 800327e:	e022      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 8003280:	2311      	movs	r3, #17
 8003282:	e020      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 8003284:	2310      	movs	r3, #16
 8003286:	e01e      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 8003288:	230f      	movs	r3, #15
 800328a:	e01c      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 800328c:	230e      	movs	r3, #14
 800328e:	e01a      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 8003290:	230d      	movs	r3, #13
 8003292:	e018      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 8003294:	230c      	movs	r3, #12
 8003296:	e016      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 8003298:	230b      	movs	r3, #11
 800329a:	e014      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 800329c:	230a      	movs	r3, #10
 800329e:	e012      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032a0:	2309      	movs	r3, #9
 80032a2:	e010      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032a4:	2308      	movs	r3, #8
 80032a6:	e00e      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032a8:	2307      	movs	r3, #7
 80032aa:	e00c      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032ac:	2306      	movs	r3, #6
 80032ae:	e00a      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032b0:	2305      	movs	r3, #5
 80032b2:	e008      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032b4:	2304      	movs	r3, #4
 80032b6:	e006      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032b8:	2303      	movs	r3, #3
 80032ba:	e004      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032bc:	2302      	movs	r3, #2
 80032be:	e002      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x1ce>
 80032c4:	2300      	movs	r3, #0
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	6852      	ldr	r2, [r2, #4]
 80032ca:	201f      	movs	r0, #31
 80032cc:	4002      	ands	r2, r0
 80032ce:	4093      	lsls	r3, r2
 80032d0:	000a      	movs	r2, r1
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d808      	bhi.n	80032fa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	001a      	movs	r2, r3
 80032f6:	f7ff fb64 	bl	80029c2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6819      	ldr	r1, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	001a      	movs	r2, r3
 8003308:	f7ff fb9e 	bl	8002a48 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db00      	blt.n	8003316 <HAL_ADC_ConfigChannel+0x21e>
 8003314:	e0bc      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_ADC_ConfigChannel+0x360>)
 8003318:	0018      	movs	r0, r3
 800331a:	f7ff fb17 	bl	800294c <LL_ADC_GetCommonPathInternalCh>
 800331e:	0003      	movs	r3, r0
 8003320:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4d      	ldr	r2, [pc, #308]	; (800345c <HAL_ADC_ConfigChannel+0x364>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d122      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003334:	d11d      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2280      	movs	r2, #128	; 0x80
 800333a:	0412      	lsls	r2, r2, #16
 800333c:	4313      	orrs	r3, r2
 800333e:	4a46      	ldr	r2, [pc, #280]	; (8003458 <HAL_ADC_ConfigChannel+0x360>)
 8003340:	0019      	movs	r1, r3
 8003342:	0010      	movs	r0, r2
 8003344:	f7ff faee 	bl	8002924 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003348:	4b45      	ldr	r3, [pc, #276]	; (8003460 <HAL_ADC_ConfigChannel+0x368>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4945      	ldr	r1, [pc, #276]	; (8003464 <HAL_ADC_ConfigChannel+0x36c>)
 800334e:	0018      	movs	r0, r3
 8003350:	f7fc fef0 	bl	8000134 <__udivsi3>
 8003354:	0003      	movs	r3, r0
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	0013      	movs	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	189b      	adds	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003362:	e002      	b.n	800336a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	3b01      	subs	r3, #1
 8003368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f9      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003370:	e08e      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a3c      	ldr	r2, [pc, #240]	; (8003468 <HAL_ADC_ConfigChannel+0x370>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d10e      	bne.n	800339a <HAL_ADC_ConfigChannel+0x2a2>
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	2380      	movs	r3, #128	; 0x80
 8003380:	045b      	lsls	r3, r3, #17
 8003382:	4013      	ands	r3, r2
 8003384:	d109      	bne.n	800339a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	0452      	lsls	r2, r2, #17
 800338c:	4313      	orrs	r3, r2
 800338e:	4a32      	ldr	r2, [pc, #200]	; (8003458 <HAL_ADC_ConfigChannel+0x360>)
 8003390:	0019      	movs	r1, r3
 8003392:	0010      	movs	r0, r2
 8003394:	f7ff fac6 	bl	8002924 <LL_ADC_SetCommonPathInternalCh>
 8003398:	e07a      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a33      	ldr	r2, [pc, #204]	; (800346c <HAL_ADC_ConfigChannel+0x374>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d000      	beq.n	80033a6 <HAL_ADC_ConfigChannel+0x2ae>
 80033a4:	e074      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	03db      	lsls	r3, r3, #15
 80033ac:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80033ae:	d000      	beq.n	80033b2 <HAL_ADC_ConfigChannel+0x2ba>
 80033b0:	e06e      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	03d2      	lsls	r2, r2, #15
 80033b8:	4313      	orrs	r3, r2
 80033ba:	4a27      	ldr	r2, [pc, #156]	; (8003458 <HAL_ADC_ConfigChannel+0x360>)
 80033bc:	0019      	movs	r1, r3
 80033be:	0010      	movs	r0, r2
 80033c0:	f7ff fab0 	bl	8002924 <LL_ADC_SetCommonPathInternalCh>
 80033c4:	e064      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691a      	ldr	r2, [r3, #16]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	061b      	lsls	r3, r3, #24
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d004      	beq.n	80033dc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033d6:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <HAL_ADC_ConfigChannel+0x35c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d107      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0019      	movs	r1, r3
 80033e6:	0010      	movs	r0, r2
 80033e8:	f7ff fb1c 	bl	8002a24 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	da4d      	bge.n	8003490 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_ADC_ConfigChannel+0x360>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7ff faa8 	bl	800294c <LL_ADC_GetCommonPathInternalCh>
 80033fc:	0003      	movs	r3, r0
 80033fe:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a15      	ldr	r2, [pc, #84]	; (800345c <HAL_ADC_ConfigChannel+0x364>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d108      	bne.n	800341c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4a18      	ldr	r2, [pc, #96]	; (8003470 <HAL_ADC_ConfigChannel+0x378>)
 800340e:	4013      	ands	r3, r2
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <HAL_ADC_ConfigChannel+0x360>)
 8003412:	0019      	movs	r1, r3
 8003414:	0010      	movs	r0, r2
 8003416:	f7ff fa85 	bl	8002924 <LL_ADC_SetCommonPathInternalCh>
 800341a:	e039      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_ADC_ConfigChannel+0x370>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d108      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4a12      	ldr	r2, [pc, #72]	; (8003474 <HAL_ADC_ConfigChannel+0x37c>)
 800342a:	4013      	ands	r3, r2
 800342c:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <HAL_ADC_ConfigChannel+0x360>)
 800342e:	0019      	movs	r1, r3
 8003430:	0010      	movs	r0, r2
 8003432:	f7ff fa77 	bl	8002924 <LL_ADC_SetCommonPathInternalCh>
 8003436:	e02b      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HAL_ADC_ConfigChannel+0x374>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d126      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_ADC_ConfigChannel+0x380>)
 8003446:	4013      	ands	r3, r2
 8003448:	4a03      	ldr	r2, [pc, #12]	; (8003458 <HAL_ADC_ConfigChannel+0x360>)
 800344a:	0019      	movs	r1, r3
 800344c:	0010      	movs	r0, r2
 800344e:	f7ff fa69 	bl	8002924 <LL_ADC_SetCommonPathInternalCh>
 8003452:	e01d      	b.n	8003490 <HAL_ADC_ConfigChannel+0x398>
 8003454:	80000004 	.word	0x80000004
 8003458:	40012708 	.word	0x40012708
 800345c:	b0001000 	.word	0xb0001000
 8003460:	20000014 	.word	0x20000014
 8003464:	00030d40 	.word	0x00030d40
 8003468:	b8004000 	.word	0xb8004000
 800346c:	b4002000 	.word	0xb4002000
 8003470:	ff7fffff 	.word	0xff7fffff
 8003474:	feffffff 	.word	0xfeffffff
 8003478:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003480:	2220      	movs	r2, #32
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003488:	2317      	movs	r3, #23
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2201      	movs	r2, #1
 800348e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2254      	movs	r2, #84	; 0x54
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003498:	2317      	movs	r3, #23
 800349a:	18fb      	adds	r3, r7, r3
 800349c:	781b      	ldrb	r3, [r3, #0]
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b006      	add	sp, #24
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)

080034a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff fb1b 	bl	8002af4 <LL_ADC_IsEnabled>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d000      	beq.n	80034c4 <ADC_Enable+0x1c>
 80034c2:	e069      	b.n	8003598 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	4a36      	ldr	r2, [pc, #216]	; (80035a4 <ADC_Enable+0xfc>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	d00d      	beq.n	80034ec <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	2210      	movs	r2, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	2201      	movs	r2, #1
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e056      	b.n	800359a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7ff faed 	bl	8002ad0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034f6:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <ADC_Enable+0x100>)
 80034f8:	0018      	movs	r0, r3
 80034fa:	f7ff fa27 	bl	800294c <LL_ADC_GetCommonPathInternalCh>
 80034fe:	0002      	movs	r2, r0
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	4013      	ands	r3, r2
 8003506:	d00f      	beq.n	8003528 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003508:	4b28      	ldr	r3, [pc, #160]	; (80035ac <ADC_Enable+0x104>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4928      	ldr	r1, [pc, #160]	; (80035b0 <ADC_Enable+0x108>)
 800350e:	0018      	movs	r0, r3
 8003510:	f7fc fe10 	bl	8000134 <__udivsi3>
 8003514:	0003      	movs	r3, r0
 8003516:	3301      	adds	r3, #1
 8003518:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800351a:	e002      	b.n	8003522 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	3b01      	subs	r3, #1
 8003520:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1f9      	bne.n	800351c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	7e5b      	ldrb	r3, [r3, #25]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d033      	beq.n	8003598 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003530:	f7ff f9ee 	bl	8002910 <HAL_GetTick>
 8003534:	0003      	movs	r3, r0
 8003536:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003538:	e027      	b.n	800358a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0018      	movs	r0, r3
 8003540:	f7ff fad8 	bl	8002af4 <LL_ADC_IsEnabled>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d104      	bne.n	8003552 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	0018      	movs	r0, r3
 800354e:	f7ff fabf 	bl	8002ad0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003552:	f7ff f9dd 	bl	8002910 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d914      	bls.n	800358a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	2b01      	cmp	r3, #1
 800356c:	d00d      	beq.n	800358a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	2210      	movs	r2, #16
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357e:	2201      	movs	r2, #1
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e007      	b.n	800359a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2201      	movs	r2, #1
 8003592:	4013      	ands	r3, r2
 8003594:	2b01      	cmp	r3, #1
 8003596:	d1d0      	bne.n	800353a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b004      	add	sp, #16
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	80000017 	.word	0x80000017
 80035a8:	40012708 	.word	0x40012708
 80035ac:	20000014 	.word	0x20000014
 80035b0:	00030d40 	.word	0x00030d40

080035b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	0002      	movs	r2, r0
 80035bc:	1dfb      	adds	r3, r7, #7
 80035be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035c0:	1dfb      	adds	r3, r7, #7
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b7f      	cmp	r3, #127	; 0x7f
 80035c6:	d809      	bhi.n	80035dc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	001a      	movs	r2, r3
 80035ce:	231f      	movs	r3, #31
 80035d0:	401a      	ands	r2, r3
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__NVIC_EnableIRQ+0x30>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	4091      	lsls	r1, r2
 80035d8:	000a      	movs	r2, r1
 80035da:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	0002      	movs	r2, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	1dfb      	adds	r3, r7, #7
 80035f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b7f      	cmp	r3, #127	; 0x7f
 80035fc:	d828      	bhi.n	8003650 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <__NVIC_SetPriority+0xd4>)
 8003600:	1dfb      	adds	r3, r7, #7
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b25b      	sxtb	r3, r3
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	33c0      	adds	r3, #192	; 0xc0
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	589b      	ldr	r3, [r3, r2]
 800360e:	1dfa      	adds	r2, r7, #7
 8003610:	7812      	ldrb	r2, [r2, #0]
 8003612:	0011      	movs	r1, r2
 8003614:	2203      	movs	r2, #3
 8003616:	400a      	ands	r2, r1
 8003618:	00d2      	lsls	r2, r2, #3
 800361a:	21ff      	movs	r1, #255	; 0xff
 800361c:	4091      	lsls	r1, r2
 800361e:	000a      	movs	r2, r1
 8003620:	43d2      	mvns	r2, r2
 8003622:	401a      	ands	r2, r3
 8003624:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	019b      	lsls	r3, r3, #6
 800362a:	22ff      	movs	r2, #255	; 0xff
 800362c:	401a      	ands	r2, r3
 800362e:	1dfb      	adds	r3, r7, #7
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	0018      	movs	r0, r3
 8003634:	2303      	movs	r3, #3
 8003636:	4003      	ands	r3, r0
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800363c:	481f      	ldr	r0, [pc, #124]	; (80036bc <__NVIC_SetPriority+0xd4>)
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b25b      	sxtb	r3, r3
 8003644:	089b      	lsrs	r3, r3, #2
 8003646:	430a      	orrs	r2, r1
 8003648:	33c0      	adds	r3, #192	; 0xc0
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800364e:	e031      	b.n	80036b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <__NVIC_SetPriority+0xd8>)
 8003652:	1dfb      	adds	r3, r7, #7
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	0019      	movs	r1, r3
 8003658:	230f      	movs	r3, #15
 800365a:	400b      	ands	r3, r1
 800365c:	3b08      	subs	r3, #8
 800365e:	089b      	lsrs	r3, r3, #2
 8003660:	3306      	adds	r3, #6
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	18d3      	adds	r3, r2, r3
 8003666:	3304      	adds	r3, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	1dfa      	adds	r2, r7, #7
 800366c:	7812      	ldrb	r2, [r2, #0]
 800366e:	0011      	movs	r1, r2
 8003670:	2203      	movs	r2, #3
 8003672:	400a      	ands	r2, r1
 8003674:	00d2      	lsls	r2, r2, #3
 8003676:	21ff      	movs	r1, #255	; 0xff
 8003678:	4091      	lsls	r1, r2
 800367a:	000a      	movs	r2, r1
 800367c:	43d2      	mvns	r2, r2
 800367e:	401a      	ands	r2, r3
 8003680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	401a      	ands	r2, r3
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	0018      	movs	r0, r3
 8003690:	2303      	movs	r3, #3
 8003692:	4003      	ands	r3, r0
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003698:	4809      	ldr	r0, [pc, #36]	; (80036c0 <__NVIC_SetPriority+0xd8>)
 800369a:	1dfb      	adds	r3, r7, #7
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	001c      	movs	r4, r3
 80036a0:	230f      	movs	r3, #15
 80036a2:	4023      	ands	r3, r4
 80036a4:	3b08      	subs	r3, #8
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	430a      	orrs	r2, r1
 80036aa:	3306      	adds	r3, #6
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	18c3      	adds	r3, r0, r3
 80036b0:	3304      	adds	r3, #4
 80036b2:	601a      	str	r2, [r3, #0]
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b003      	add	sp, #12
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	045b      	lsls	r3, r3, #17
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d301      	bcc.n	80036dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036d8:	2301      	movs	r3, #1
 80036da:	e010      	b.n	80036fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <SysTick_Config+0x44>)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	3a01      	subs	r2, #1
 80036e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036e4:	2301      	movs	r3, #1
 80036e6:	425b      	negs	r3, r3
 80036e8:	2103      	movs	r1, #3
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ff7c 	bl	80035e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <SysTick_Config+0x44>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036f6:	4b04      	ldr	r3, [pc, #16]	; (8003708 <SysTick_Config+0x44>)
 80036f8:	2207      	movs	r2, #7
 80036fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b002      	add	sp, #8
 8003704:	bd80      	pop	{r7, pc}
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	e000e010 	.word	0xe000e010

0800370c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	210f      	movs	r1, #15
 8003718:	187b      	adds	r3, r7, r1
 800371a:	1c02      	adds	r2, r0, #0
 800371c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	187b      	adds	r3, r7, r1
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b25b      	sxtb	r3, r3
 8003726:	0011      	movs	r1, r2
 8003728:	0018      	movs	r0, r3
 800372a:	f7ff ff5d 	bl	80035e8 <__NVIC_SetPriority>
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b004      	add	sp, #16
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	0002      	movs	r2, r0
 800373e:	1dfb      	adds	r3, r7, #7
 8003740:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b25b      	sxtb	r3, r3
 8003748:	0018      	movs	r0, r3
 800374a:	f7ff ff33 	bl	80035b4 <__NVIC_EnableIRQ>
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b002      	add	sp, #8
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b082      	sub	sp, #8
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff ffaf 	bl	80036c4 <SysTick_Config>
 8003766:	0003      	movs	r3, r0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b002      	add	sp, #8
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003778:	210f      	movs	r1, #15
 800377a:	187b      	adds	r3, r7, r1
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2225      	movs	r2, #37	; 0x25
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d006      	beq.n	800379a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2204      	movs	r2, #4
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003792:	187b      	adds	r3, r7, r1
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
 8003798:	e049      	b.n	800382e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	210e      	movs	r1, #14
 80037a6:	438a      	bics	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2101      	movs	r1, #1
 80037b6:	438a      	bics	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c4:	491d      	ldr	r1, [pc, #116]	; (800383c <HAL_DMA_Abort_IT+0xcc>)
 80037c6:	400a      	ands	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80037ca:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <HAL_DMA_Abort_IT+0xd0>)
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	221c      	movs	r2, #28
 80037d4:	4013      	ands	r3, r2
 80037d6:	2201      	movs	r2, #1
 80037d8:	409a      	lsls	r2, r3
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_DMA_Abort_IT+0xd0>)
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fc:	490f      	ldr	r1, [pc, #60]	; (800383c <HAL_DMA_Abort_IT+0xcc>)
 80037fe:	400a      	ands	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800380a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2225      	movs	r2, #37	; 0x25
 8003810:	2101      	movs	r1, #1
 8003812:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	0010      	movs	r0, r2
 800382c:	4798      	blx	r3
    }
  }
  return status;
 800382e:	230f      	movs	r3, #15
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	781b      	ldrb	r3, [r3, #0]
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	b004      	add	sp, #16
 800383a:	bd80      	pop	{r7, pc}
 800383c:	fffffeff 	.word	0xfffffeff
 8003840:	40020000 	.word	0x40020000

08003844 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2225      	movs	r2, #37	; 0x25
 8003850:	5c9b      	ldrb	r3, [r3, r2]
 8003852:	b2db      	uxtb	r3, r3
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386a:	e147      	b.n	8003afc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2101      	movs	r1, #1
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4091      	lsls	r1, r2
 8003876:	000a      	movs	r2, r1
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d100      	bne.n	8003884 <HAL_GPIO_Init+0x28>
 8003882:	e138      	b.n	8003af6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2203      	movs	r2, #3
 800388a:	4013      	ands	r3, r2
 800388c:	2b01      	cmp	r3, #1
 800388e:	d005      	beq.n	800389c <HAL_GPIO_Init+0x40>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	4013      	ands	r3, r2
 8003898:	2b02      	cmp	r3, #2
 800389a:	d130      	bne.n	80038fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	409a      	lsls	r2, r3
 80038aa:	0013      	movs	r3, r2
 80038ac:	43da      	mvns	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	409a      	lsls	r2, r3
 80038be:	0013      	movs	r3, r2
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038d2:	2201      	movs	r2, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	409a      	lsls	r2, r3
 80038d8:	0013      	movs	r3, r2
 80038da:	43da      	mvns	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	2201      	movs	r2, #1
 80038ea:	401a      	ands	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	409a      	lsls	r2, r3
 80038f0:	0013      	movs	r3, r2
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2203      	movs	r2, #3
 8003904:	4013      	ands	r3, r2
 8003906:	2b03      	cmp	r3, #3
 8003908:	d017      	beq.n	800393a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	409a      	lsls	r2, r3
 8003918:	0013      	movs	r3, r2
 800391a:	43da      	mvns	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	409a      	lsls	r2, r3
 800392c:	0013      	movs	r3, r2
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2203      	movs	r2, #3
 8003940:	4013      	ands	r3, r2
 8003942:	2b02      	cmp	r3, #2
 8003944:	d123      	bne.n	800398e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	0092      	lsls	r2, r2, #2
 8003950:	58d3      	ldr	r3, [r2, r3]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2207      	movs	r2, #7
 8003958:	4013      	ands	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	43da      	mvns	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2107      	movs	r1, #7
 8003972:	400b      	ands	r3, r1
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	0092      	lsls	r2, r2, #2
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	43da      	mvns	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2203      	movs	r2, #3
 80039ac:	401a      	ands	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	409a      	lsls	r2, r3
 80039b4:	0013      	movs	r3, r2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	23c0      	movs	r3, #192	; 0xc0
 80039c8:	029b      	lsls	r3, r3, #10
 80039ca:	4013      	ands	r3, r2
 80039cc:	d100      	bne.n	80039d0 <HAL_GPIO_Init+0x174>
 80039ce:	e092      	b.n	8003af6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80039d0:	4a50      	ldr	r2, [pc, #320]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3318      	adds	r3, #24
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	589b      	ldr	r3, [r3, r2]
 80039dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2203      	movs	r2, #3
 80039e2:	4013      	ands	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	220f      	movs	r2, #15
 80039e8:	409a      	lsls	r2, r3
 80039ea:	0013      	movs	r3, r2
 80039ec:	43da      	mvns	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4013      	ands	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	23a0      	movs	r3, #160	; 0xa0
 80039f8:	05db      	lsls	r3, r3, #23
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0x1ca>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a45      	ldr	r2, [pc, #276]	; (8003b18 <HAL_GPIO_Init+0x2bc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00d      	beq.n	8003a22 <HAL_GPIO_Init+0x1c6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a44      	ldr	r2, [pc, #272]	; (8003b1c <HAL_GPIO_Init+0x2c0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <HAL_GPIO_Init+0x1c2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a43      	ldr	r2, [pc, #268]	; (8003b20 <HAL_GPIO_Init+0x2c4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_GPIO_Init+0x1be>
 8003a16:	2303      	movs	r3, #3
 8003a18:	e006      	b.n	8003a28 <HAL_GPIO_Init+0x1cc>
 8003a1a:	2305      	movs	r3, #5
 8003a1c:	e004      	b.n	8003a28 <HAL_GPIO_Init+0x1cc>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e002      	b.n	8003a28 <HAL_GPIO_Init+0x1cc>
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <HAL_GPIO_Init+0x1cc>
 8003a26:	2300      	movs	r3, #0
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	00d2      	lsls	r2, r2, #3
 8003a30:	4093      	lsls	r3, r2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003a38:	4936      	ldr	r1, [pc, #216]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	3318      	adds	r3, #24
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a46:	4a33      	ldr	r2, [pc, #204]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	58d3      	ldr	r3, [r2, r3]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	43da      	mvns	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	025b      	lsls	r3, r3, #9
 8003a60:	4013      	ands	r3, r2
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a6c:	4929      	ldr	r1, [pc, #164]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003a74:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003a76:	2384      	movs	r3, #132	; 0x84
 8003a78:	58d3      	ldr	r3, [r2, r3]
 8003a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a9a:	491e      	ldr	r1, [pc, #120]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003a9c:	2284      	movs	r2, #132	; 0x84
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	2380      	movs	r3, #128	; 0x80
 8003ab8:	035b      	lsls	r3, r3, #13
 8003aba:	4013      	ands	r3, r2
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	039b      	lsls	r3, r3, #14
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_GPIO_Init+0x2b8>)
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3301      	adds	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	40da      	lsrs	r2, r3
 8003b04:	1e13      	subs	r3, r2, #0
 8003b06:	d000      	beq.n	8003b0a <HAL_GPIO_Init+0x2ae>
 8003b08:	e6b0      	b.n	800386c <HAL_GPIO_Init+0x10>
  }
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b006      	add	sp, #24
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021800 	.word	0x40021800
 8003b18:	50000400 	.word	0x50000400
 8003b1c:	50000800 	.word	0x50000800
 8003b20:	50000c00 	.word	0x50000c00

08003b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	0008      	movs	r0, r1
 8003b2e:	0011      	movs	r1, r2
 8003b30:	1cbb      	adds	r3, r7, #2
 8003b32:	1c02      	adds	r2, r0, #0
 8003b34:	801a      	strh	r2, [r3, #0]
 8003b36:	1c7b      	adds	r3, r7, #1
 8003b38:	1c0a      	adds	r2, r1, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b3c:	1c7b      	adds	r3, r7, #1
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d004      	beq.n	8003b4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b44:	1cbb      	adds	r3, r7, #2
 8003b46:	881a      	ldrh	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b4c:	e003      	b.n	8003b56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b4e:	1cbb      	adds	r3, r7, #2
 8003b50:	881a      	ldrh	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e082      	b.n	8003c78 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2241      	movs	r2, #65	; 0x41
 8003b76:	5c9b      	ldrb	r3, [r3, r2]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d107      	bne.n	8003b8e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2240      	movs	r2, #64	; 0x40
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f7fe fcd3 	bl	8002534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2241      	movs	r2, #65	; 0x41
 8003b92:	2124      	movs	r1, #36	; 0x24
 8003b94:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	438a      	bics	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4934      	ldr	r1, [pc, #208]	; (8003c80 <HAL_I2C_Init+0x120>)
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4931      	ldr	r1, [pc, #196]	; (8003c84 <HAL_I2C_Init+0x124>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d108      	bne.n	8003bde <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	0209      	lsls	r1, r1, #8
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	e007      	b.n	8003bee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2184      	movs	r1, #132	; 0x84
 8003be8:	0209      	lsls	r1, r1, #8
 8003bea:	430a      	orrs	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d104      	bne.n	8003c00 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	491f      	ldr	r1, [pc, #124]	; (8003c88 <HAL_I2C_Init+0x128>)
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	491a      	ldr	r1, [pc, #104]	; (8003c84 <HAL_I2C_Init+0x124>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69d9      	ldr	r1, [r3, #28]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1a      	ldr	r2, [r3, #32]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2241      	movs	r2, #65	; 0x41
 8003c64:	2120      	movs	r1, #32
 8003c66:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2242      	movs	r2, #66	; 0x42
 8003c72:	2100      	movs	r1, #0
 8003c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	f0ffffff 	.word	0xf0ffffff
 8003c84:	ffff7fff 	.word	0xffff7fff
 8003c88:	02008000 	.word	0x02008000

08003c8c <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                            uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	1dbb      	adds	r3, r7, #6
 8003c9a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2241      	movs	r2, #65	; 0x41
 8003ca0:	5c9b      	ldrb	r3, [r3, r2]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d000      	beq.n	8003caa <HAL_I2C_Slave_Transmit+0x1e>
 8003ca8:	e0fe      	b.n	8003ea8 <HAL_I2C_Slave_Transmit+0x21c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_I2C_Slave_Transmit+0x2c>
 8003cb0:	1dbb      	adds	r3, r7, #6
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2280      	movs	r2, #128	; 0x80
 8003cbc:	0092      	lsls	r2, r2, #2
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e0f2      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2240      	movs	r2, #64	; 0x40
 8003cc8:	5c9b      	ldrb	r3, [r3, r2]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_I2C_Slave_Transmit+0x46>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0eb      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2240      	movs	r2, #64	; 0x40
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cda:	f7fe fe19 	bl	8002910 <HAL_GetTick>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2241      	movs	r2, #65	; 0x41
 8003ce6:	2121      	movs	r1, #33	; 0x21
 8003ce8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2242      	movs	r2, #66	; 0x42
 8003cee:	2120      	movs	r1, #32
 8003cf0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1dba      	adds	r2, r7, #6
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4967      	ldr	r1, [pc, #412]	; (8003eb4 <HAL_I2C_Slave_Transmit+0x228>)
 8003d18:	400a      	ands	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	0013      	movs	r3, r2
 8003d26:	2200      	movs	r2, #0
 8003d28:	2108      	movs	r1, #8
 8003d2a:	f000 fe61 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8003d2e:	1e03      	subs	r3, r0, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2180      	movs	r1, #128	; 0x80
 8003d3e:	0209      	lsls	r1, r1, #8
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0b0      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d119      	bne.n	8003d8c <HAL_I2C_Slave_Transmit+0x100>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	0013      	movs	r3, r2
 8003d62:	2200      	movs	r2, #0
 8003d64:	2108      	movs	r1, #8
 8003d66:	f000 fe43 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8003d6a:	1e03      	subs	r3, r0, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_I2C_Slave_Transmit+0xf8>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	0209      	lsls	r1, r1, #8
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e092      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	0259      	lsls	r1, r3, #9
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	0013      	movs	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f000 fe28 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d02f      	beq.n	8003e04 <HAL_I2C_Slave_Transmit+0x178>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	0209      	lsls	r1, r1, #8
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e077      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f000 fe54 	bl	8004a6e <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc6:	1e03      	subs	r3, r0, #0
 8003dc8:	d00a      	beq.n	8003de0 <HAL_I2C_Slave_Transmit+0x154>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2180      	movs	r1, #128	; 0x80
 8003dd6:	0209      	lsls	r1, r1, #8
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e064      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1d5      	bne.n	8003dba <HAL_I2C_Slave_Transmit+0x12e>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6839      	ldr	r1, [r7, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 fe69 	bl	8004aec <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e1a:	1e03      	subs	r3, r0, #0
 8003e1c:	d012      	beq.n	8003e44 <HAL_I2C_Slave_Transmit+0x1b8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	0209      	lsls	r1, r1, #8
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d103      	bne.n	8003e40 <HAL_I2C_Slave_Transmit+0x1b4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
 8003e3e:	e001      	b.n	8003e44 <HAL_I2C_Slave_Transmit+0x1b8>
      }
      else
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e032      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	0219      	lsls	r1, r3, #8
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	0013      	movs	r3, r2
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f000 fdc8 	bl	80049f0 <I2C_WaitOnFlagUntilTimeout>
 8003e60:	1e03      	subs	r3, r0, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_I2C_Slave_Transmit+0x1ee>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2180      	movs	r1, #128	; 0x80
 8003e70:	0209      	lsls	r1, r1, #8
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e017      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	0209      	lsls	r1, r1, #8
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2241      	movs	r2, #65	; 0x41
 8003e90:	2120      	movs	r1, #32
 8003e92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2242      	movs	r2, #66	; 0x42
 8003e98:	2100      	movs	r1, #0
 8003e9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2240      	movs	r2, #64	; 0x40
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_I2C_Slave_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	0018      	movs	r0, r3
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b006      	add	sp, #24
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	ffff7fff 	.word	0xffff7fff

08003eb8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
  }
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b004      	add	sp, #16
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	001a      	movs	r2, r3
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	d010      	beq.n	8003f32 <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	09db      	lsrs	r3, r3, #7
 8003f14:	001a      	movs	r2, r3
 8003f16:	2301      	movs	r3, #1
 8003f18:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f1a:	d00a      	beq.n	8003f32 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	2201      	movs	r2, #1
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	0052      	lsls	r2, r2, #1
 8003f30:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	0a9b      	lsrs	r3, r3, #10
 8003f36:	001a      	movs	r2, r3
 8003f38:	2301      	movs	r3, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d010      	beq.n	8003f60 <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	09db      	lsrs	r3, r3, #7
 8003f42:	001a      	movs	r2, r3
 8003f44:	2301      	movs	r3, #1
 8003f46:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f48:	d00a      	beq.n	8003f60 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	2208      	movs	r2, #8
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	00d2      	lsls	r2, r2, #3
 8003f5e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	0a5b      	lsrs	r3, r3, #9
 8003f64:	001a      	movs	r2, r3
 8003f66:	2301      	movs	r3, #1
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d010      	beq.n	8003f8e <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	09db      	lsrs	r3, r3, #7
 8003f70:	001a      	movs	r2, r3
 8003f72:	2301      	movs	r3, #1
 8003f74:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f76:	d00a      	beq.n	8003f8e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2280      	movs	r2, #128	; 0x80
 8003f8a:	0092      	lsls	r2, r2, #2
 8003f8c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	220b      	movs	r2, #11
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d005      	beq.n	8003fa8 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0011      	movs	r1, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 fbd8 	bl	8004758 <I2C_ITError>
  }
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b006      	add	sp, #24
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b002      	add	sp, #8
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	0008      	movs	r0, r1
 8003fda:	0011      	movs	r1, r2
 8003fdc:	1cfb      	adds	r3, r7, #3
 8003fde:	1c02      	adds	r2, r0, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
 8003fe2:	003b      	movs	r3, r7
 8003fe4:	1c0a      	adds	r2, r1, #0
 8003fe6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	b002      	add	sp, #8
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2240      	movs	r2, #64	; 0x40
 800403a:	5c9b      	ldrb	r3, [r3, r2]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <I2C_Slave_ISR_IT+0x24>
 8004040:	2302      	movs	r3, #2
 8004042:	e0fa      	b.n	800423a <I2C_Slave_ISR_IT+0x21a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2240      	movs	r2, #64	; 0x40
 8004048:	2101      	movs	r1, #1
 800404a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	001a      	movs	r2, r3
 8004052:	2301      	movs	r3, #1
 8004054:	4013      	ands	r3, r2
 8004056:	d00b      	beq.n	8004070 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	001a      	movs	r2, r3
 800405e:	2301      	movs	r3, #1
 8004060:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004062:	d005      	beq.n	8004070 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	0011      	movs	r1, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f000 f9f6 	bl	800445c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	001a      	movs	r2, r3
 8004076:	2301      	movs	r3, #1
 8004078:	4013      	ands	r3, r2
 800407a:	d054      	beq.n	8004126 <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	001a      	movs	r2, r3
 8004082:	2301      	movs	r3, #1
 8004084:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004086:	d04e      	beq.n	8004126 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d12d      	bne.n	80040ee <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2241      	movs	r2, #65	; 0x41
 8004096:	5c9b      	ldrb	r3, [r3, r2]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b28      	cmp	r3, #40	; 0x28
 800409c:	d10b      	bne.n	80040b6 <I2C_Slave_ISR_IT+0x96>
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	049b      	lsls	r3, r3, #18
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d106      	bne.n	80040b6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f000 faf8 	bl	80046a4 <I2C_ITListenCplt>
 80040b4:	e036      	b.n	8004124 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2241      	movs	r2, #65	; 0x41
 80040ba:	5c9b      	ldrb	r3, [r3, r2]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b29      	cmp	r3, #41	; 0x29
 80040c0:	d110      	bne.n	80040e4 <I2C_Slave_ISR_IT+0xc4>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4a5f      	ldr	r2, [pc, #380]	; (8004244 <I2C_Slave_ISR_IT+0x224>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00c      	beq.n	80040e4 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2210      	movs	r2, #16
 80040d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f000 fc4a 	bl	800496e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	0018      	movs	r0, r3
 80040de:	f000 f957 	bl	8004390 <I2C_ITSlaveSeqCplt>
 80040e2:	e01f      	b.n	8004124 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2210      	movs	r2, #16
 80040ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80040ec:	e09d      	b.n	800422a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2210      	movs	r2, #16
 80040f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	2204      	movs	r2, #4
 80040fc:	431a      	orrs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <I2C_Slave_ISR_IT+0xf4>
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	045b      	lsls	r3, r3, #17
 800410e:	429a      	cmp	r2, r3
 8004110:	d000      	beq.n	8004114 <I2C_Slave_ISR_IT+0xf4>
 8004112:	e08a      	b.n	800422a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	0011      	movs	r1, r2
 800411c:	0018      	movs	r0, r3
 800411e:	f000 fb1b 	bl	8004758 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004122:	e082      	b.n	800422a <I2C_Slave_ISR_IT+0x20a>
 8004124:	e081      	b.n	800422a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	001a      	movs	r2, r3
 800412c:	2301      	movs	r3, #1
 800412e:	4013      	ands	r3, r2
 8004130:	d031      	beq.n	8004196 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	089b      	lsrs	r3, r3, #2
 8004136:	001a      	movs	r2, r3
 8004138:	2301      	movs	r3, #1
 800413a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800413c:	d02b      	beq.n	8004196 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d018      	beq.n	800417a <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d154      	bne.n	800422e <I2C_Slave_ISR_IT+0x20e>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4a2f      	ldr	r2, [pc, #188]	; (8004244 <I2C_Slave_ISR_IT+0x224>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d050      	beq.n	800422e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	0018      	movs	r0, r3
 8004190:	f000 f8fe 	bl	8004390 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004194:	e04b      	b.n	800422e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	08db      	lsrs	r3, r3, #3
 800419a:	001a      	movs	r2, r3
 800419c:	2301      	movs	r3, #1
 800419e:	4013      	ands	r3, r2
 80041a0:	d00c      	beq.n	80041bc <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	08db      	lsrs	r3, r3, #3
 80041a6:	001a      	movs	r2, r3
 80041a8:	2301      	movs	r3, #1
 80041aa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80041ac:	d006      	beq.n	80041bc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	0011      	movs	r1, r2
 80041b4:	0018      	movs	r0, r3
 80041b6:	f000 f847 	bl	8004248 <I2C_ITAddrCplt>
 80041ba:	e039      	b.n	8004230 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	001a      	movs	r2, r3
 80041c2:	2301      	movs	r3, #1
 80041c4:	4013      	ands	r3, r2
 80041c6:	d033      	beq.n	8004230 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	001a      	movs	r2, r3
 80041ce:	2301      	movs	r3, #1
 80041d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041d2:	d02d      	beq.n	8004230 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d018      	beq.n	8004210 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28
 800420e:	e00f      	b.n	8004230 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	045b      	lsls	r3, r3, #17
 8004216:	429a      	cmp	r2, r3
 8004218:	d002      	beq.n	8004220 <I2C_Slave_ISR_IT+0x200>
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d107      	bne.n	8004230 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	0018      	movs	r0, r3
 8004224:	f000 f8b4 	bl	8004390 <I2C_ITSlaveSeqCplt>
 8004228:	e002      	b.n	8004230 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	e000      	b.n	8004230 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800422e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2240      	movs	r2, #64	; 0x40
 8004234:	2100      	movs	r1, #0
 8004236:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	0018      	movs	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	b006      	add	sp, #24
 8004240:	bd80      	pop	{r7, pc}
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	ffff0000 	.word	0xffff0000

08004248 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004248:	b5b0      	push	{r4, r5, r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2241      	movs	r2, #65	; 0x41
 8004256:	5c9b      	ldrb	r3, [r3, r2]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	001a      	movs	r2, r3
 800425c:	2328      	movs	r3, #40	; 0x28
 800425e:	4013      	ands	r3, r2
 8004260:	2b28      	cmp	r3, #40	; 0x28
 8004262:	d000      	beq.n	8004266 <I2C_ITAddrCplt+0x1e>
 8004264:	e088      	b.n	8004378 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b2da      	uxtb	r2, r3
 8004270:	250f      	movs	r5, #15
 8004272:	197b      	adds	r3, r7, r5
 8004274:	2101      	movs	r1, #1
 8004276:	400a      	ands	r2, r1
 8004278:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	0c1b      	lsrs	r3, r3, #16
 8004282:	b29a      	uxth	r2, r3
 8004284:	200c      	movs	r0, #12
 8004286:	183b      	adds	r3, r7, r0
 8004288:	21fe      	movs	r1, #254	; 0xfe
 800428a:	400a      	ands	r2, r1
 800428c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	b29a      	uxth	r2, r3
 8004296:	240a      	movs	r4, #10
 8004298:	193b      	adds	r3, r7, r4
 800429a:	0592      	lsls	r2, r2, #22
 800429c:	0d92      	lsrs	r2, r2, #22
 800429e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	2308      	movs	r3, #8
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	21fe      	movs	r1, #254	; 0xfe
 80042ae:	400a      	ands	r2, r1
 80042b0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d148      	bne.n	800434c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80042ba:	0021      	movs	r1, r4
 80042bc:	187b      	adds	r3, r7, r1
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	09db      	lsrs	r3, r3, #7
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	183b      	adds	r3, r7, r0
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	4053      	eors	r3, r2
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	001a      	movs	r2, r3
 80042ce:	2306      	movs	r3, #6
 80042d0:	4013      	ands	r3, r2
 80042d2:	d120      	bne.n	8004316 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80042d4:	183b      	adds	r3, r7, r0
 80042d6:	187a      	adds	r2, r7, r1
 80042d8:	8812      	ldrh	r2, [r2, #0]
 80042da:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d14c      	bne.n	8004388 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2208      	movs	r2, #8
 80042fa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2240      	movs	r2, #64	; 0x40
 8004300:	2100      	movs	r1, #0
 8004302:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004304:	183b      	adds	r3, r7, r0
 8004306:	881a      	ldrh	r2, [r3, #0]
 8004308:	197b      	adds	r3, r7, r5
 800430a:	7819      	ldrb	r1, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	0018      	movs	r0, r3
 8004310:	f7ff fe5e 	bl	8003fd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004314:	e038      	b.n	8004388 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8004316:	240c      	movs	r4, #12
 8004318:	193b      	adds	r3, r7, r4
 800431a:	2208      	movs	r2, #8
 800431c:	18ba      	adds	r2, r7, r2
 800431e:	8812      	ldrh	r2, [r2, #0]
 8004320:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	021a      	lsls	r2, r3, #8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0011      	movs	r1, r2
 800432a:	0018      	movs	r0, r3
 800432c:	f000 fc94 	bl	8004c58 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2240      	movs	r2, #64	; 0x40
 8004334:	2100      	movs	r1, #0
 8004336:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004338:	193b      	adds	r3, r7, r4
 800433a:	881a      	ldrh	r2, [r3, #0]
 800433c:	230f      	movs	r3, #15
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	7819      	ldrb	r1, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	0018      	movs	r0, r3
 8004346:	f7ff fe43 	bl	8003fd0 <HAL_I2C_AddrCallback>
}
 800434a:	e01d      	b.n	8004388 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800434c:	2380      	movs	r3, #128	; 0x80
 800434e:	021a      	lsls	r2, r3, #8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0011      	movs	r1, r2
 8004354:	0018      	movs	r0, r3
 8004356:	f000 fc7f 	bl	8004c58 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2240      	movs	r2, #64	; 0x40
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004362:	230c      	movs	r3, #12
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	881a      	ldrh	r2, [r3, #0]
 8004368:	230f      	movs	r3, #15
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	7819      	ldrb	r1, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f7ff fe2d 	bl	8003fd0 <HAL_I2C_AddrCallback>
}
 8004376:	e007      	b.n	8004388 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2208      	movs	r2, #8
 800437e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2240      	movs	r2, #64	; 0x40
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]
}
 8004388:	46c0      	nop			; (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b004      	add	sp, #16
 800438e:	bdb0      	pop	{r4, r5, r7, pc}

08004390 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2242      	movs	r2, #66	; 0x42
 80043a4:	2100      	movs	r1, #0
 80043a6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	0b9b      	lsrs	r3, r3, #14
 80043ac:	001a      	movs	r2, r3
 80043ae:	2301      	movs	r3, #1
 80043b0:	4013      	ands	r3, r2
 80043b2:	d008      	beq.n	80043c6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4925      	ldr	r1, [pc, #148]	; (8004454 <I2C_ITSlaveSeqCplt+0xc4>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e00d      	b.n	80043e2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	0bdb      	lsrs	r3, r3, #15
 80043ca:	001a      	movs	r2, r3
 80043cc:	2301      	movs	r3, #1
 80043ce:	4013      	ands	r3, r2
 80043d0:	d007      	beq.n	80043e2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	491e      	ldr	r1, [pc, #120]	; (8004458 <I2C_ITSlaveSeqCplt+0xc8>)
 80043de:	400a      	ands	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2241      	movs	r2, #65	; 0x41
 80043e6:	5c9b      	ldrb	r3, [r3, r2]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b29      	cmp	r3, #41	; 0x29
 80043ec:	d114      	bne.n	8004418 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2241      	movs	r2, #65	; 0x41
 80043f2:	2128      	movs	r1, #40	; 0x28
 80043f4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2221      	movs	r2, #33	; 0x21
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2101      	movs	r1, #1
 8004400:	0018      	movs	r0, r3
 8004402:	f000 fc29 	bl	8004c58 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2240      	movs	r2, #64	; 0x40
 800440a:	2100      	movs	r1, #0
 800440c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0018      	movs	r0, r3
 8004412:	f7ff fdcd 	bl	8003fb0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004416:	e019      	b.n	800444c <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2241      	movs	r2, #65	; 0x41
 800441c:	5c9b      	ldrb	r3, [r3, r2]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b2a      	cmp	r3, #42	; 0x2a
 8004422:	d113      	bne.n	800444c <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2241      	movs	r2, #65	; 0x41
 8004428:	2128      	movs	r1, #40	; 0x28
 800442a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2222      	movs	r2, #34	; 0x22
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2102      	movs	r1, #2
 8004436:	0018      	movs	r0, r3
 8004438:	f000 fc0e 	bl	8004c58 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2240      	movs	r2, #64	; 0x40
 8004440:	2100      	movs	r1, #0
 8004442:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	0018      	movs	r0, r3
 8004448:	f7ff fdba 	bl	8003fc0 <HAL_I2C_SlaveRxCpltCallback>
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b004      	add	sp, #16
 8004452:	bd80      	pop	{r7, pc}
 8004454:	ffffbfff 	.word	0xffffbfff
 8004458:	ffff7fff 	.word	0xffff7fff

0800445c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004472:	200f      	movs	r0, #15
 8004474:	183b      	adds	r3, r7, r0
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	2141      	movs	r1, #65	; 0x41
 800447a:	5c52      	ldrb	r2, [r2, r1]
 800447c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2220      	movs	r2, #32
 8004484:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004486:	183b      	adds	r3, r7, r0
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b21      	cmp	r3, #33	; 0x21
 800448c:	d003      	beq.n	8004496 <I2C_ITSlaveCplt+0x3a>
 800448e:	183b      	adds	r3, r7, r0
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b29      	cmp	r3, #41	; 0x29
 8004494:	d109      	bne.n	80044aa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004496:	4a7d      	ldr	r2, [pc, #500]	; (800468c <I2C_ITSlaveCplt+0x230>)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	0011      	movs	r1, r2
 800449c:	0018      	movs	r0, r3
 800449e:	f000 fbdb 	bl	8004c58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2221      	movs	r2, #33	; 0x21
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
 80044a8:	e011      	b.n	80044ce <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80044aa:	220f      	movs	r2, #15
 80044ac:	18bb      	adds	r3, r7, r2
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b22      	cmp	r3, #34	; 0x22
 80044b2:	d003      	beq.n	80044bc <I2C_ITSlaveCplt+0x60>
 80044b4:	18bb      	adds	r3, r7, r2
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b2a      	cmp	r3, #42	; 0x2a
 80044ba:	d108      	bne.n	80044ce <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80044bc:	4a74      	ldr	r2, [pc, #464]	; (8004690 <I2C_ITSlaveCplt+0x234>)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0011      	movs	r1, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f000 fbc8 	bl	8004c58 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2222      	movs	r2, #34	; 0x22
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2180      	movs	r1, #128	; 0x80
 80044da:	0209      	lsls	r1, r1, #8
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	496a      	ldr	r1, [pc, #424]	; (8004694 <I2C_ITSlaveCplt+0x238>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f000 fa3b 	bl	800496e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	0b9b      	lsrs	r3, r3, #14
 80044fc:	001a      	movs	r2, r3
 80044fe:	2301      	movs	r3, #1
 8004500:	4013      	ands	r3, r2
 8004502:	d013      	beq.n	800452c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4962      	ldr	r1, [pc, #392]	; (8004698 <I2C_ITSlaveCplt+0x23c>)
 8004510:	400a      	ands	r2, r1
 8004512:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	2b00      	cmp	r3, #0
 800451a:	d020      	beq.n	800455e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	b29a      	uxth	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800452a:	e018      	b.n	800455e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	0bdb      	lsrs	r3, r3, #15
 8004530:	001a      	movs	r2, r3
 8004532:	2301      	movs	r3, #1
 8004534:	4013      	ands	r3, r2
 8004536:	d012      	beq.n	800455e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4956      	ldr	r1, [pc, #344]	; (800469c <I2C_ITSlaveCplt+0x240>)
 8004544:	400a      	ands	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d006      	beq.n	800455e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	001a      	movs	r2, r3
 8004564:	2301      	movs	r3, #1
 8004566:	4013      	ands	r3, r2
 8004568:	d020      	beq.n	80045ac <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2204      	movs	r2, #4
 800456e:	4393      	bics	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00c      	beq.n	80045ac <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ba:	2204      	movs	r2, #4
 80045bc:	431a      	orrs	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2242      	movs	r2, #66	; 0x42
 80045c6:	2100      	movs	r1, #0
 80045c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d013      	beq.n	8004600 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	0011      	movs	r1, r2
 80045e0:	0018      	movs	r0, r3
 80045e2:	f000 f8b9 	bl	8004758 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2241      	movs	r2, #65	; 0x41
 80045ea:	5c9b      	ldrb	r3, [r3, r2]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b28      	cmp	r3, #40	; 0x28
 80045f0:	d147      	bne.n	8004682 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	0011      	movs	r1, r2
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 f853 	bl	80046a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045fe:	e040      	b.n	8004682 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <I2C_ITSlaveCplt+0x244>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d016      	beq.n	8004638 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0018      	movs	r0, r3
 800460e:	f7ff febf 	bl	8004390 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a22      	ldr	r2, [pc, #136]	; (80046a0 <I2C_ITSlaveCplt+0x244>)
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2241      	movs	r2, #65	; 0x41
 800461c:	2120      	movs	r1, #32
 800461e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2240      	movs	r2, #64	; 0x40
 800462a:	2100      	movs	r1, #0
 800462c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0018      	movs	r0, r3
 8004632:	f7ff fcdd 	bl	8003ff0 <HAL_I2C_ListenCpltCallback>
}
 8004636:	e024      	b.n	8004682 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2241      	movs	r2, #65	; 0x41
 800463c:	5c9b      	ldrb	r3, [r3, r2]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b22      	cmp	r3, #34	; 0x22
 8004642:	d10f      	bne.n	8004664 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2241      	movs	r2, #65	; 0x41
 8004648:	2120      	movs	r1, #32
 800464a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2240      	movs	r2, #64	; 0x40
 8004656:	2100      	movs	r1, #0
 8004658:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0018      	movs	r0, r3
 800465e:	f7ff fcaf 	bl	8003fc0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004662:	e00e      	b.n	8004682 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2241      	movs	r2, #65	; 0x41
 8004668:	2120      	movs	r1, #32
 800466a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2240      	movs	r2, #64	; 0x40
 8004676:	2100      	movs	r1, #0
 8004678:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0018      	movs	r0, r3
 800467e:	f7ff fc97 	bl	8003fb0 <HAL_I2C_SlaveTxCpltCallback>
}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	46bd      	mov	sp, r7
 8004686:	b006      	add	sp, #24
 8004688:	bd80      	pop	{r7, pc}
 800468a:	46c0      	nop			; (mov r8, r8)
 800468c:	00008001 	.word	0x00008001
 8004690:	00008002 	.word	0x00008002
 8004694:	fe00e800 	.word	0xfe00e800
 8004698:	ffffbfff 	.word	0xffffbfff
 800469c:	ffff7fff 	.word	0xffff7fff
 80046a0:	ffff0000 	.word	0xffff0000

080046a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a27      	ldr	r2, [pc, #156]	; (8004750 <I2C_ITListenCplt+0xac>)
 80046b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2241      	movs	r2, #65	; 0x41
 80046be:	2120      	movs	r1, #32
 80046c0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2242      	movs	r2, #66	; 0x42
 80046c6:	2100      	movs	r1, #0
 80046c8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	001a      	movs	r2, r3
 80046d6:	2301      	movs	r3, #1
 80046d8:	4013      	ands	r3, r2
 80046da:	d022      	beq.n	8004722 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d012      	beq.n	8004722 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	2204      	movs	r2, #4
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004722:	4a0c      	ldr	r2, [pc, #48]	; (8004754 <I2C_ITListenCplt+0xb0>)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	0011      	movs	r1, r2
 8004728:	0018      	movs	r0, r3
 800472a:	f000 fa95 	bl	8004c58 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2210      	movs	r2, #16
 8004734:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2240      	movs	r2, #64	; 0x40
 800473a:	2100      	movs	r1, #0
 800473c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0018      	movs	r0, r3
 8004742:	f7ff fc55 	bl	8003ff0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	46bd      	mov	sp, r7
 800474a:	b002      	add	sp, #8
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	ffff0000 	.word	0xffff0000
 8004754:	00008003 	.word	0x00008003

08004758 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004762:	200f      	movs	r0, #15
 8004764:	183b      	adds	r3, r7, r0
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	2141      	movs	r1, #65	; 0x41
 800476a:	5c52      	ldrb	r2, [r2, r1]
 800476c:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2242      	movs	r2, #66	; 0x42
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a62      	ldr	r2, [pc, #392]	; (8004904 <I2C_ITError+0x1ac>)
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800478e:	183b      	adds	r3, r7, r0
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b28      	cmp	r3, #40	; 0x28
 8004794:	d007      	beq.n	80047a6 <I2C_ITError+0x4e>
 8004796:	183b      	adds	r3, r7, r0
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b29      	cmp	r3, #41	; 0x29
 800479c:	d003      	beq.n	80047a6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800479e:	183b      	adds	r3, r7, r0
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b2a      	cmp	r3, #42	; 0x2a
 80047a4:	d10c      	bne.n	80047c0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2103      	movs	r1, #3
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 fa54 	bl	8004c58 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2241      	movs	r2, #65	; 0x41
 80047b4:	2128      	movs	r1, #40	; 0x28
 80047b6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a53      	ldr	r2, [pc, #332]	; (8004908 <I2C_ITError+0x1b0>)
 80047bc:	635a      	str	r2, [r3, #52]	; 0x34
 80047be:	e012      	b.n	80047e6 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047c0:	4a52      	ldr	r2, [pc, #328]	; (800490c <I2C_ITError+0x1b4>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0011      	movs	r1, r2
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 fa46 	bl	8004c58 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2241      	movs	r2, #65	; 0x41
 80047d0:	5c9b      	ldrb	r3, [r3, r2]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b60      	cmp	r3, #96	; 0x60
 80047d6:	d003      	beq.n	80047e0 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2241      	movs	r2, #65	; 0x41
 80047dc:	2120      	movs	r1, #32
 80047de:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d03b      	beq.n	800486c <I2C_ITError+0x114>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b11      	cmp	r3, #17
 80047f8:	d002      	beq.n	8004800 <I2C_ITError+0xa8>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b21      	cmp	r3, #33	; 0x21
 80047fe:	d135      	bne.n	800486c <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	2380      	movs	r3, #128	; 0x80
 8004808:	01db      	lsls	r3, r3, #7
 800480a:	401a      	ands	r2, r3
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	01db      	lsls	r3, r3, #7
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	493c      	ldr	r1, [pc, #240]	; (8004910 <I2C_ITError+0x1b8>)
 8004820:	400a      	ands	r2, r1
 8004822:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	0018      	movs	r0, r3
 800482a:	f7ff f80b 	bl	8003844 <HAL_DMA_GetState>
 800482e:	0003      	movs	r3, r0
 8004830:	2b01      	cmp	r3, #1
 8004832:	d016      	beq.n	8004862 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	4a36      	ldr	r2, [pc, #216]	; (8004914 <I2C_ITError+0x1bc>)
 800483a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2240      	movs	r2, #64	; 0x40
 8004840:	2100      	movs	r1, #0
 8004842:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	0018      	movs	r0, r3
 800484a:	f7fe ff91 	bl	8003770 <HAL_DMA_Abort_IT>
 800484e:	1e03      	subs	r3, r0, #0
 8004850:	d051      	beq.n	80048f6 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	0018      	movs	r0, r3
 800485e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004860:	e049      	b.n	80048f6 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	0018      	movs	r0, r3
 8004866:	f000 f859 	bl	800491c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800486a:	e044      	b.n	80048f6 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d03b      	beq.n	80048ec <I2C_ITError+0x194>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b12      	cmp	r3, #18
 8004878:	d002      	beq.n	8004880 <I2C_ITError+0x128>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b22      	cmp	r3, #34	; 0x22
 800487e:	d135      	bne.n	80048ec <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	401a      	ands	r2, r3
 800488c:	2380      	movs	r3, #128	; 0x80
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	429a      	cmp	r2, r3
 8004892:	d107      	bne.n	80048a4 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	491e      	ldr	r1, [pc, #120]	; (8004918 <I2C_ITError+0x1c0>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a8:	0018      	movs	r0, r3
 80048aa:	f7fe ffcb 	bl	8003844 <HAL_DMA_GetState>
 80048ae:	0003      	movs	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d016      	beq.n	80048e2 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <I2C_ITError+0x1bc>)
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	2100      	movs	r1, #0
 80048c2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	0018      	movs	r0, r3
 80048ca:	f7fe ff51 	bl	8003770 <HAL_DMA_Abort_IT>
 80048ce:	1e03      	subs	r3, r0, #0
 80048d0:	d013      	beq.n	80048fa <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048dc:	0018      	movs	r0, r3
 80048de:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048e0:	e00b      	b.n	80048fa <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 f819 	bl	800491c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048ea:	e006      	b.n	80048fa <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f000 f814 	bl	800491c <I2C_TreatErrorCallback>
  }
}
 80048f4:	e002      	b.n	80048fc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	e000      	b.n	80048fc <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048fa:	46c0      	nop			; (mov r8, r8)
}
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	b004      	add	sp, #16
 8004902:	bd80      	pop	{r7, pc}
 8004904:	ffff0000 	.word	0xffff0000
 8004908:	08004021 	.word	0x08004021
 800490c:	00008003 	.word	0x00008003
 8004910:	ffffbfff 	.word	0xffffbfff
 8004914:	080049b3 	.word	0x080049b3
 8004918:	ffff7fff 	.word	0xffff7fff

0800491c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2241      	movs	r2, #65	; 0x41
 8004928:	5c9b      	ldrb	r3, [r3, r2]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b60      	cmp	r3, #96	; 0x60
 800492e:	d10f      	bne.n	8004950 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2241      	movs	r2, #65	; 0x41
 8004934:	2120      	movs	r1, #32
 8004936:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2240      	movs	r2, #64	; 0x40
 8004942:	2100      	movs	r1, #0
 8004944:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	0018      	movs	r0, r3
 800494a:	f7ff fb61 	bl	8004010 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800494e:	e00a      	b.n	8004966 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	2100      	movs	r1, #0
 800495c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	0018      	movs	r0, r3
 8004962:	f7ff fb4d 	bl	8004000 <HAL_I2C_ErrorCallback>
}
 8004966:	46c0      	nop			; (mov r8, r8)
 8004968:	46bd      	mov	sp, r7
 800496a:	b002      	add	sp, #8
 800496c:	bd80      	pop	{r7, pc}

0800496e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2202      	movs	r2, #2
 800497e:	4013      	ands	r3, r2
 8004980:	2b02      	cmp	r3, #2
 8004982:	d103      	bne.n	800498c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2200      	movs	r2, #0
 800498a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2201      	movs	r2, #1
 8004994:	4013      	ands	r3, r2
 8004996:	2b01      	cmp	r3, #1
 8004998:	d007      	beq.n	80049aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699a      	ldr	r2, [r3, #24]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2101      	movs	r1, #1
 80049a6:	430a      	orrs	r2, r1
 80049a8:	619a      	str	r2, [r3, #24]
  }
}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b002      	add	sp, #8
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	2200      	movs	r2, #0
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049dc:	2200      	movs	r2, #0
 80049de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f7ff ff9a 	bl	800491c <I2C_TreatErrorCallback>
}
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b004      	add	sp, #16
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	1dfb      	adds	r3, r7, #7
 80049fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a00:	e021      	b.n	8004a46 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	d01e      	beq.n	8004a46 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a08:	f7fd ff82 	bl	8002910 <HAL_GetTick>
 8004a0c:	0002      	movs	r2, r0
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d302      	bcc.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d113      	bne.n	8004a46 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	2220      	movs	r2, #32
 8004a24:	431a      	orrs	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2241      	movs	r2, #65	; 0x41
 8004a2e:	2120      	movs	r1, #32
 8004a30:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2242      	movs	r2, #66	; 0x42
 8004a36:	2100      	movs	r1, #0
 8004a38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2240      	movs	r2, #64	; 0x40
 8004a3e:	2100      	movs	r1, #0
 8004a40:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e00f      	b.n	8004a66 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	425a      	negs	r2, r3
 8004a56:	4153      	adcs	r3, r2
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	001a      	movs	r2, r3
 8004a5c:	1dfb      	adds	r3, r7, #7
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d0ce      	beq.n	8004a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	0018      	movs	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b004      	add	sp, #16
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b084      	sub	sp, #16
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a7a:	e02b      	b.n	8004ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f000 f86e 	bl	8004b64 <I2C_IsAcknowledgeFailed>
 8004a88:	1e03      	subs	r3, r0, #0
 8004a8a:	d001      	beq.n	8004a90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e029      	b.n	8004ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	3301      	adds	r3, #1
 8004a94:	d01e      	beq.n	8004ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a96:	f7fd ff3b 	bl	8002910 <HAL_GetTick>
 8004a9a:	0002      	movs	r2, r0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d113      	bne.n	8004ad4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2241      	movs	r2, #65	; 0x41
 8004abc:	2120      	movs	r1, #32
 8004abe:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2242      	movs	r2, #66	; 0x42
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2240      	movs	r2, #64	; 0x40
 8004acc:	2100      	movs	r1, #0
 8004ace:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e007      	b.n	8004ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2202      	movs	r2, #2
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d1cc      	bne.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b004      	add	sp, #16
 8004aea:	bd80      	pop	{r7, pc}

08004aec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004af8:	e028      	b.n	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f000 f82f 	bl	8004b64 <I2C_IsAcknowledgeFailed>
 8004b06:	1e03      	subs	r3, r0, #0
 8004b08:	d001      	beq.n	8004b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e026      	b.n	8004b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fd feff 	bl	8002910 <HAL_GetTick>
 8004b12:	0002      	movs	r2, r0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d113      	bne.n	8004b4c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	2220      	movs	r2, #32
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2241      	movs	r2, #65	; 0x41
 8004b34:	2120      	movs	r1, #32
 8004b36:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2242      	movs	r2, #66	; 0x42
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2240      	movs	r2, #64	; 0x40
 8004b44:	2100      	movs	r1, #0
 8004b46:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e007      	b.n	8004b5c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2220      	movs	r2, #32
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d1cf      	bne.n	8004afa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b004      	add	sp, #16
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2210      	movs	r2, #16
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d164      	bne.n	8004c48 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	049b      	lsls	r3, r3, #18
 8004b88:	401a      	ands	r2, r3
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	049b      	lsls	r3, r3, #18
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d02b      	beq.n	8004bea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2180      	movs	r1, #128	; 0x80
 8004b9e:	01c9      	lsls	r1, r1, #7
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ba4:	e021      	b.n	8004bea <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	d01e      	beq.n	8004bea <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bac:	f7fd feb0 	bl	8002910 <HAL_GetTick>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d302      	bcc.n	8004bc2 <I2C_IsAcknowledgeFailed+0x5e>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d113      	bne.n	8004bea <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2241      	movs	r2, #65	; 0x41
 8004bd2:	2120      	movs	r1, #32
 8004bd4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2242      	movs	r2, #66	; 0x42
 8004bda:	2100      	movs	r1, #0
 8004bdc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2240      	movs	r2, #64	; 0x40
 8004be2:	2100      	movs	r1, #0
 8004be4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e02f      	b.n	8004c4a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d1d6      	bne.n	8004ba6 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2220      	movs	r2, #32
 8004c06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff feaf 	bl	800496e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	490e      	ldr	r1, [pc, #56]	; (8004c54 <I2C_IsAcknowledgeFailed+0xf0>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	2204      	movs	r2, #4
 8004c26:	431a      	orrs	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2241      	movs	r2, #65	; 0x41
 8004c30:	2120      	movs	r1, #32
 8004c32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2242      	movs	r2, #66	; 0x42
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2240      	movs	r2, #64	; 0x40
 8004c40:	2100      	movs	r1, #0
 8004c42:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b004      	add	sp, #16
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	fe00e800 	.word	0xfe00e800

08004c58 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	000a      	movs	r2, r1
 8004c62:	1cbb      	adds	r3, r7, #2
 8004c64:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c6a:	1cbb      	adds	r3, r7, #2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4013      	ands	r3, r2
 8004c72:	d010      	beq.n	8004c96 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2242      	movs	r2, #66	; 0x42
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2241      	movs	r2, #65	; 0x41
 8004c80:	5c9b      	ldrb	r3, [r3, r2]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	001a      	movs	r2, r3
 8004c86:	2328      	movs	r3, #40	; 0x28
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b28      	cmp	r3, #40	; 0x28
 8004c8c:	d003      	beq.n	8004c96 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	22b0      	movs	r2, #176	; 0xb0
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c96:	1cbb      	adds	r3, r7, #2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d010      	beq.n	8004cc2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2244      	movs	r2, #68	; 0x44
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2241      	movs	r2, #65	; 0x41
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	2328      	movs	r3, #40	; 0x28
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	2b28      	cmp	r3, #40	; 0x28
 8004cb8:	d003      	beq.n	8004cc2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	22b0      	movs	r2, #176	; 0xb0
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004cc2:	1cbb      	adds	r3, r7, #2
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	5e9b      	ldrsh	r3, [r3, r2]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da03      	bge.n	8004cd4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	22b8      	movs	r2, #184	; 0xb8
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004cd4:	1cbb      	adds	r3, r7, #2
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d103      	bne.n	8004ce4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2290      	movs	r2, #144	; 0x90
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ce4:	1cbb      	adds	r3, r7, #2
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d103      	bne.n	8004cf4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004cf4:	1cbb      	adds	r3, r7, #2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d103      	bne.n	8004d04 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	43d9      	mvns	r1, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	400a      	ands	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b004      	add	sp, #16
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2241      	movs	r2, #65	; 0x41
 8004d2e:	5c9b      	ldrb	r3, [r3, r2]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d138      	bne.n	8004da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2240      	movs	r2, #64	; 0x40
 8004d3a:	5c9b      	ldrb	r3, [r3, r2]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e032      	b.n	8004daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2240      	movs	r2, #64	; 0x40
 8004d48:	2101      	movs	r1, #1
 8004d4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2241      	movs	r2, #65	; 0x41
 8004d50:	2124      	movs	r1, #36	; 0x24
 8004d52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2101      	movs	r1, #1
 8004d60:	438a      	bics	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4911      	ldr	r1, [pc, #68]	; (8004db4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2101      	movs	r1, #1
 8004d90:	430a      	orrs	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2241      	movs	r2, #65	; 0x41
 8004d98:	2120      	movs	r1, #32
 8004d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2240      	movs	r2, #64	; 0x40
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	0018      	movs	r0, r3
 8004dac:	46bd      	mov	sp, r7
 8004dae:	b002      	add	sp, #8
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	ffffefff 	.word	0xffffefff

08004db8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2241      	movs	r2, #65	; 0x41
 8004dc6:	5c9b      	ldrb	r3, [r3, r2]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d139      	bne.n	8004e42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2240      	movs	r2, #64	; 0x40
 8004dd2:	5c9b      	ldrb	r3, [r3, r2]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e033      	b.n	8004e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2240      	movs	r2, #64	; 0x40
 8004de0:	2101      	movs	r1, #1
 8004de2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2241      	movs	r2, #65	; 0x41
 8004de8:	2124      	movs	r1, #36	; 0x24
 8004dea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2101      	movs	r1, #1
 8004df8:	438a      	bics	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a11      	ldr	r2, [pc, #68]	; (8004e4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2241      	movs	r2, #65	; 0x41
 8004e32:	2120      	movs	r1, #32
 8004e34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2240      	movs	r2, #64	; 0x40
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e000      	b.n	8004e44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
  }
}
 8004e44:	0018      	movs	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b004      	add	sp, #16
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	fffff0ff 	.word	0xfffff0ff

08004e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004e58:	4b19      	ldr	r3, [pc, #100]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a19      	ldr	r2, [pc, #100]	; (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d11f      	bne.n	8004eb4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004e74:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	0013      	movs	r3, r2
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	189b      	adds	r3, r3, r2
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	4912      	ldr	r1, [pc, #72]	; (8004ecc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e82:	0018      	movs	r0, r3
 8004e84:	f7fb f956 	bl	8000134 <__udivsi3>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e8e:	e008      	b.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	e001      	b.n	8004ea2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e009      	b.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ea2:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	401a      	ands	r2, r3
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d0ed      	beq.n	8004e90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b004      	add	sp, #16
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	fffff9ff 	.word	0xfffff9ff
 8004ec8:	20000014 	.word	0x20000014
 8004ecc:	000f4240 	.word	0x000f4240

08004ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b088      	sub	sp, #32
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e2f9      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d100      	bne.n	8004eee <HAL_RCC_OscConfig+0x1e>
 8004eec:	e07c      	b.n	8004fe8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eee:	4bc3      	ldr	r3, [pc, #780]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2238      	movs	r2, #56	; 0x38
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ef8:	4bc0      	ldr	r3, [pc, #768]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	2203      	movs	r2, #3
 8004efe:	4013      	ands	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d102      	bne.n	8004f0e <HAL_RCC_OscConfig+0x3e>
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d002      	beq.n	8004f14 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d10b      	bne.n	8004f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f14:	4bb9      	ldr	r3, [pc, #740]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d062      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x116>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d15e      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e2d4      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	025b      	lsls	r3, r3, #9
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d107      	bne.n	8004f48 <HAL_RCC_OscConfig+0x78>
 8004f38:	4bb0      	ldr	r3, [pc, #704]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4baf      	ldr	r3, [pc, #700]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f3e:	2180      	movs	r1, #128	; 0x80
 8004f40:	0249      	lsls	r1, r1, #9
 8004f42:	430a      	orrs	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e020      	b.n	8004f8a <HAL_RCC_OscConfig+0xba>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	23a0      	movs	r3, #160	; 0xa0
 8004f4e:	02db      	lsls	r3, r3, #11
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d10e      	bne.n	8004f72 <HAL_RCC_OscConfig+0xa2>
 8004f54:	4ba9      	ldr	r3, [pc, #676]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4ba8      	ldr	r3, [pc, #672]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	02c9      	lsls	r1, r1, #11
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	4ba6      	ldr	r3, [pc, #664]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4ba5      	ldr	r3, [pc, #660]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	0249      	lsls	r1, r1, #9
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e00b      	b.n	8004f8a <HAL_RCC_OscConfig+0xba>
 8004f72:	4ba2      	ldr	r3, [pc, #648]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	4ba1      	ldr	r3, [pc, #644]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f78:	49a1      	ldr	r1, [pc, #644]	; (8005200 <HAL_RCC_OscConfig+0x330>)
 8004f7a:	400a      	ands	r2, r1
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	4b9f      	ldr	r3, [pc, #636]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4b9e      	ldr	r3, [pc, #632]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004f84:	499f      	ldr	r1, [pc, #636]	; (8005204 <HAL_RCC_OscConfig+0x334>)
 8004f86:	400a      	ands	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d014      	beq.n	8004fbc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f92:	f7fd fcbd 	bl	8002910 <HAL_GetTick>
 8004f96:	0003      	movs	r3, r0
 8004f98:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fd fcb8 	bl	8002910 <HAL_GetTick>
 8004fa0:	0002      	movs	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	; 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e293      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fae:	4b93      	ldr	r3, [pc, #588]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	2380      	movs	r3, #128	; 0x80
 8004fb4:	029b      	lsls	r3, r3, #10
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0xcc>
 8004fba:	e015      	b.n	8004fe8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fd fca8 	bl	8002910 <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc6:	f7fd fca3 	bl	8002910 <HAL_GetTick>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b64      	cmp	r3, #100	; 0x64
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e27e      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd8:	4b88      	ldr	r3, [pc, #544]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	029b      	lsls	r3, r3, #10
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d1f0      	bne.n	8004fc6 <HAL_RCC_OscConfig+0xf6>
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2202      	movs	r2, #2
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d100      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x124>
 8004ff2:	e099      	b.n	8005128 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ff4:	4b81      	ldr	r3, [pc, #516]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2238      	movs	r2, #56	; 0x38
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ffe:	4b7f      	ldr	r3, [pc, #508]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2203      	movs	r2, #3
 8005004:	4013      	ands	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b10      	cmp	r3, #16
 800500c:	d102      	bne.n	8005014 <HAL_RCC_OscConfig+0x144>
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d002      	beq.n	800501a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d135      	bne.n	8005086 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800501a:	4b78      	ldr	r3, [pc, #480]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4013      	ands	r3, r2
 8005024:	d005      	beq.n	8005032 <HAL_RCC_OscConfig+0x162>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e251      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005032:	4b72      	ldr	r3, [pc, #456]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	4a74      	ldr	r2, [pc, #464]	; (8005208 <HAL_RCC_OscConfig+0x338>)
 8005038:	4013      	ands	r3, r2
 800503a:	0019      	movs	r1, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	021a      	lsls	r2, r3, #8
 8005042:	4b6e      	ldr	r3, [pc, #440]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d112      	bne.n	8005074 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800504e:	4b6b      	ldr	r3, [pc, #428]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a6e      	ldr	r2, [pc, #440]	; (800520c <HAL_RCC_OscConfig+0x33c>)
 8005054:	4013      	ands	r3, r2
 8005056:	0019      	movs	r1, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	4b67      	ldr	r3, [pc, #412]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 800505e:	430a      	orrs	r2, r1
 8005060:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005062:	4b66      	ldr	r3, [pc, #408]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	0adb      	lsrs	r3, r3, #11
 8005068:	2207      	movs	r2, #7
 800506a:	4013      	ands	r3, r2
 800506c:	4a68      	ldr	r2, [pc, #416]	; (8005210 <HAL_RCC_OscConfig+0x340>)
 800506e:	40da      	lsrs	r2, r3
 8005070:	4b68      	ldr	r3, [pc, #416]	; (8005214 <HAL_RCC_OscConfig+0x344>)
 8005072:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005074:	4b68      	ldr	r3, [pc, #416]	; (8005218 <HAL_RCC_OscConfig+0x348>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	0018      	movs	r0, r3
 800507a:	f7fd fbed 	bl	8002858 <HAL_InitTick>
 800507e:	1e03      	subs	r3, r0, #0
 8005080:	d051      	beq.n	8005126 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e227      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d030      	beq.n	80050f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800508e:	4b5b      	ldr	r3, [pc, #364]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a5e      	ldr	r2, [pc, #376]	; (800520c <HAL_RCC_OscConfig+0x33c>)
 8005094:	4013      	ands	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	4b57      	ldr	r3, [pc, #348]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80050a2:	4b56      	ldr	r3, [pc, #344]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	4b55      	ldr	r3, [pc, #340]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80050a8:	2180      	movs	r1, #128	; 0x80
 80050aa:	0049      	lsls	r1, r1, #1
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fd fc2e 	bl	8002910 <HAL_GetTick>
 80050b4:	0003      	movs	r3, r0
 80050b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b8:	e008      	b.n	80050cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ba:	f7fd fc29 	bl	8002910 <HAL_GetTick>
 80050be:	0002      	movs	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d901      	bls.n	80050cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e204      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050cc:	4b4b      	ldr	r3, [pc, #300]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4013      	ands	r3, r2
 80050d6:	d0f0      	beq.n	80050ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d8:	4b48      	ldr	r3, [pc, #288]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	4a4a      	ldr	r2, [pc, #296]	; (8005208 <HAL_RCC_OscConfig+0x338>)
 80050de:	4013      	ands	r3, r2
 80050e0:	0019      	movs	r1, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	021a      	lsls	r2, r3, #8
 80050e8:	4b44      	ldr	r3, [pc, #272]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	e01b      	b.n	8005128 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80050f0:	4b42      	ldr	r3, [pc, #264]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b41      	ldr	r3, [pc, #260]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80050f6:	4949      	ldr	r1, [pc, #292]	; (800521c <HAL_RCC_OscConfig+0x34c>)
 80050f8:	400a      	ands	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fd fc08 	bl	8002910 <HAL_GetTick>
 8005100:	0003      	movs	r3, r0
 8005102:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005106:	f7fd fc03 	bl	8002910 <HAL_GetTick>
 800510a:	0002      	movs	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e1de      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005118:	4b38      	ldr	r3, [pc, #224]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	2380      	movs	r3, #128	; 0x80
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	4013      	ands	r3, r2
 8005122:	d1f0      	bne.n	8005106 <HAL_RCC_OscConfig+0x236>
 8005124:	e000      	b.n	8005128 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005126:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2208      	movs	r2, #8
 800512e:	4013      	ands	r3, r2
 8005130:	d047      	beq.n	80051c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005132:	4b32      	ldr	r3, [pc, #200]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2238      	movs	r2, #56	; 0x38
 8005138:	4013      	ands	r3, r2
 800513a:	2b18      	cmp	r3, #24
 800513c:	d10a      	bne.n	8005154 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800513e:	4b2f      	ldr	r3, [pc, #188]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005142:	2202      	movs	r2, #2
 8005144:	4013      	ands	r3, r2
 8005146:	d03c      	beq.n	80051c2 <HAL_RCC_OscConfig+0x2f2>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d138      	bne.n	80051c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e1c0      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d019      	beq.n	8005190 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800515c:	4b27      	ldr	r3, [pc, #156]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 800515e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005160:	4b26      	ldr	r3, [pc, #152]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005162:	2101      	movs	r1, #1
 8005164:	430a      	orrs	r2, r1
 8005166:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005168:	f7fd fbd2 	bl	8002910 <HAL_GetTick>
 800516c:	0003      	movs	r3, r0
 800516e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005172:	f7fd fbcd 	bl	8002910 <HAL_GetTick>
 8005176:	0002      	movs	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e1a8      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005188:	2202      	movs	r2, #2
 800518a:	4013      	ands	r3, r2
 800518c:	d0f1      	beq.n	8005172 <HAL_RCC_OscConfig+0x2a2>
 800518e:	e018      	b.n	80051c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005192:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 8005196:	2101      	movs	r1, #1
 8005198:	438a      	bics	r2, r1
 800519a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fd fbb8 	bl	8002910 <HAL_GetTick>
 80051a0:	0003      	movs	r3, r0
 80051a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fd fbb3 	bl	8002910 <HAL_GetTick>
 80051aa:	0002      	movs	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e18e      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051b8:	4b10      	ldr	r3, [pc, #64]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	2202      	movs	r2, #2
 80051be:	4013      	ands	r3, r2
 80051c0:	d1f1      	bne.n	80051a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2204      	movs	r2, #4
 80051c8:	4013      	ands	r3, r2
 80051ca:	d100      	bne.n	80051ce <HAL_RCC_OscConfig+0x2fe>
 80051cc:	e0c6      	b.n	800535c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051ce:	231f      	movs	r3, #31
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2238      	movs	r2, #56	; 0x38
 80051dc:	4013      	ands	r3, r2
 80051de:	2b20      	cmp	r3, #32
 80051e0:	d11e      	bne.n	8005220 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <HAL_RCC_OscConfig+0x32c>)
 80051e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e6:	2202      	movs	r2, #2
 80051e8:	4013      	ands	r3, r2
 80051ea:	d100      	bne.n	80051ee <HAL_RCC_OscConfig+0x31e>
 80051ec:	e0b6      	b.n	800535c <HAL_RCC_OscConfig+0x48c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d000      	beq.n	80051f8 <HAL_RCC_OscConfig+0x328>
 80051f6:	e0b1      	b.n	800535c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e16c      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
 80051fc:	40021000 	.word	0x40021000
 8005200:	fffeffff 	.word	0xfffeffff
 8005204:	fffbffff 	.word	0xfffbffff
 8005208:	ffff80ff 	.word	0xffff80ff
 800520c:	ffffc7ff 	.word	0xffffc7ff
 8005210:	00f42400 	.word	0x00f42400
 8005214:	20000014 	.word	0x20000014
 8005218:	20000018 	.word	0x20000018
 800521c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005220:	4baf      	ldr	r3, [pc, #700]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	055b      	lsls	r3, r3, #21
 8005228:	4013      	ands	r3, r2
 800522a:	d101      	bne.n	8005230 <HAL_RCC_OscConfig+0x360>
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x362>
 8005230:	2300      	movs	r3, #0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d011      	beq.n	800525a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	4baa      	ldr	r3, [pc, #680]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800523a:	4ba9      	ldr	r3, [pc, #676]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 800523c:	2180      	movs	r1, #128	; 0x80
 800523e:	0549      	lsls	r1, r1, #21
 8005240:	430a      	orrs	r2, r1
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c
 8005244:	4ba6      	ldr	r3, [pc, #664]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	055b      	lsls	r3, r3, #21
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005252:	231f      	movs	r3, #31
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800525a:	4ba2      	ldr	r3, [pc, #648]	; (80054e4 <HAL_RCC_OscConfig+0x614>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4013      	ands	r3, r2
 8005264:	d11a      	bne.n	800529c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005266:	4b9f      	ldr	r3, [pc, #636]	; (80054e4 <HAL_RCC_OscConfig+0x614>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b9e      	ldr	r3, [pc, #632]	; (80054e4 <HAL_RCC_OscConfig+0x614>)
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	0049      	lsls	r1, r1, #1
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005274:	f7fd fb4c 	bl	8002910 <HAL_GetTick>
 8005278:	0003      	movs	r3, r0
 800527a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527e:	f7fd fb47 	bl	8002910 <HAL_GetTick>
 8005282:	0002      	movs	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e122      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005290:	4b94      	ldr	r3, [pc, #592]	; (80054e4 <HAL_RCC_OscConfig+0x614>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	4013      	ands	r3, r2
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d106      	bne.n	80052b2 <HAL_RCC_OscConfig+0x3e2>
 80052a4:	4b8e      	ldr	r3, [pc, #568]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052a8:	4b8d      	ldr	r3, [pc, #564]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052aa:	2101      	movs	r1, #1
 80052ac:	430a      	orrs	r2, r1
 80052ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80052b0:	e01c      	b.n	80052ec <HAL_RCC_OscConfig+0x41c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b05      	cmp	r3, #5
 80052b8:	d10c      	bne.n	80052d4 <HAL_RCC_OscConfig+0x404>
 80052ba:	4b89      	ldr	r3, [pc, #548]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052be:	4b88      	ldr	r3, [pc, #544]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052c0:	2104      	movs	r1, #4
 80052c2:	430a      	orrs	r2, r1
 80052c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80052c6:	4b86      	ldr	r3, [pc, #536]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ca:	4b85      	ldr	r3, [pc, #532]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052cc:	2101      	movs	r1, #1
 80052ce:	430a      	orrs	r2, r1
 80052d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80052d2:	e00b      	b.n	80052ec <HAL_RCC_OscConfig+0x41c>
 80052d4:	4b82      	ldr	r3, [pc, #520]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052d8:	4b81      	ldr	r3, [pc, #516]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052da:	2101      	movs	r1, #1
 80052dc:	438a      	bics	r2, r1
 80052de:	65da      	str	r2, [r3, #92]	; 0x5c
 80052e0:	4b7f      	ldr	r3, [pc, #508]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052e4:	4b7e      	ldr	r3, [pc, #504]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80052e6:	2104      	movs	r1, #4
 80052e8:	438a      	bics	r2, r1
 80052ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d014      	beq.n	800531e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f4:	f7fd fb0c 	bl	8002910 <HAL_GetTick>
 80052f8:	0003      	movs	r3, r0
 80052fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052fc:	e009      	b.n	8005312 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fe:	f7fd fb07 	bl	8002910 <HAL_GetTick>
 8005302:	0002      	movs	r2, r0
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	4a77      	ldr	r2, [pc, #476]	; (80054e8 <HAL_RCC_OscConfig+0x618>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e0e1      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005312:	4b73      	ldr	r3, [pc, #460]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005316:	2202      	movs	r2, #2
 8005318:	4013      	ands	r3, r2
 800531a:	d0f0      	beq.n	80052fe <HAL_RCC_OscConfig+0x42e>
 800531c:	e013      	b.n	8005346 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fd faf7 	bl	8002910 <HAL_GetTick>
 8005322:	0003      	movs	r3, r0
 8005324:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005326:	e009      	b.n	800533c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005328:	f7fd faf2 	bl	8002910 <HAL_GetTick>
 800532c:	0002      	movs	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	4a6d      	ldr	r2, [pc, #436]	; (80054e8 <HAL_RCC_OscConfig+0x618>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e0cc      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800533c:	4b68      	ldr	r3, [pc, #416]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	2202      	movs	r2, #2
 8005342:	4013      	ands	r3, r2
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005346:	231f      	movs	r3, #31
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d105      	bne.n	800535c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005350:	4b63      	ldr	r3, [pc, #396]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005354:	4b62      	ldr	r3, [pc, #392]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005356:	4965      	ldr	r1, [pc, #404]	; (80054ec <HAL_RCC_OscConfig+0x61c>)
 8005358:	400a      	ands	r2, r1
 800535a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d100      	bne.n	8005366 <HAL_RCC_OscConfig+0x496>
 8005364:	e0b6      	b.n	80054d4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005366:	4b5e      	ldr	r3, [pc, #376]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2238      	movs	r2, #56	; 0x38
 800536c:	4013      	ands	r3, r2
 800536e:	2b10      	cmp	r3, #16
 8005370:	d100      	bne.n	8005374 <HAL_RCC_OscConfig+0x4a4>
 8005372:	e07e      	b.n	8005472 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d153      	bne.n	8005424 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800537c:	4b58      	ldr	r3, [pc, #352]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005382:	495b      	ldr	r1, [pc, #364]	; (80054f0 <HAL_RCC_OscConfig+0x620>)
 8005384:	400a      	ands	r2, r1
 8005386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005388:	f7fd fac2 	bl	8002910 <HAL_GetTick>
 800538c:	0003      	movs	r3, r0
 800538e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005392:	f7fd fabd 	bl	8002910 <HAL_GetTick>
 8005396:	0002      	movs	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e098      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a4:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	2380      	movs	r3, #128	; 0x80
 80053aa:	049b      	lsls	r3, r3, #18
 80053ac:	4013      	ands	r3, r2
 80053ae:	d1f0      	bne.n	8005392 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b0:	4b4b      	ldr	r3, [pc, #300]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a4f      	ldr	r2, [pc, #316]	; (80054f4 <HAL_RCC_OscConfig+0x624>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	0019      	movs	r1, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	431a      	orrs	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	431a      	orrs	r2, r3
 80053d8:	4b41      	ldr	r3, [pc, #260]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80053da:	430a      	orrs	r2, r1
 80053dc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053de:	4b40      	ldr	r3, [pc, #256]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b3f      	ldr	r3, [pc, #252]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80053e4:	2180      	movs	r1, #128	; 0x80
 80053e6:	0449      	lsls	r1, r1, #17
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80053ec:	4b3c      	ldr	r3, [pc, #240]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	0549      	lsls	r1, r1, #21
 80053f6:	430a      	orrs	r2, r1
 80053f8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fd fa89 	bl	8002910 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005404:	f7fd fa84 	bl	8002910 <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e05f      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005416:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	049b      	lsls	r3, r3, #18
 800541e:	4013      	ands	r3, r2
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x534>
 8005422:	e057      	b.n	80054d4 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005424:	4b2e      	ldr	r3, [pc, #184]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4b2d      	ldr	r3, [pc, #180]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 800542a:	4931      	ldr	r1, [pc, #196]	; (80054f0 <HAL_RCC_OscConfig+0x620>)
 800542c:	400a      	ands	r2, r1
 800542e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005430:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	4b2a      	ldr	r3, [pc, #168]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005436:	2103      	movs	r1, #3
 8005438:	438a      	bics	r2, r1
 800543a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800543c:	4b28      	ldr	r3, [pc, #160]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005442:	492d      	ldr	r1, [pc, #180]	; (80054f8 <HAL_RCC_OscConfig+0x628>)
 8005444:	400a      	ands	r2, r1
 8005446:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fd fa62 	bl	8002910 <HAL_GetTick>
 800544c:	0003      	movs	r3, r0
 800544e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005452:	f7fd fa5d 	bl	8002910 <HAL_GetTick>
 8005456:	0002      	movs	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b02      	cmp	r3, #2
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e038      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005464:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	049b      	lsls	r3, r3, #18
 800546c:	4013      	ands	r3, r2
 800546e:	d1f0      	bne.n	8005452 <HAL_RCC_OscConfig+0x582>
 8005470:	e030      	b.n	80054d4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e02b      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <HAL_RCC_OscConfig+0x610>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2203      	movs	r2, #3
 8005488:	401a      	ands	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	429a      	cmp	r2, r3
 8005490:	d11e      	bne.n	80054d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2270      	movs	r2, #112	; 0x70
 8005496:	401a      	ands	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800549c:	429a      	cmp	r2, r3
 800549e:	d117      	bne.n	80054d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	23fe      	movs	r3, #254	; 0xfe
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	401a      	ands	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d10e      	bne.n	80054d0 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	23f8      	movs	r3, #248	; 0xf8
 80054b6:	039b      	lsls	r3, r3, #14
 80054b8:	401a      	ands	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d106      	bne.n	80054d0 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	0f5b      	lsrs	r3, r3, #29
 80054c6:	075a      	lsls	r2, r3, #29
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d001      	beq.n	80054d4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	0018      	movs	r0, r3
 80054d8:	46bd      	mov	sp, r7
 80054da:	b008      	add	sp, #32
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40007000 	.word	0x40007000
 80054e8:	00001388 	.word	0x00001388
 80054ec:	efffffff 	.word	0xefffffff
 80054f0:	feffffff 	.word	0xfeffffff
 80054f4:	1fc1808c 	.word	0x1fc1808c
 80054f8:	effeffff 	.word	0xeffeffff

080054fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0e9      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005510:	4b76      	ldr	r3, [pc, #472]	; (80056ec <HAL_RCC_ClockConfig+0x1f0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2207      	movs	r2, #7
 8005516:	4013      	ands	r3, r2
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d91e      	bls.n	800555c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551e:	4b73      	ldr	r3, [pc, #460]	; (80056ec <HAL_RCC_ClockConfig+0x1f0>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2207      	movs	r2, #7
 8005524:	4393      	bics	r3, r2
 8005526:	0019      	movs	r1, r3
 8005528:	4b70      	ldr	r3, [pc, #448]	; (80056ec <HAL_RCC_ClockConfig+0x1f0>)
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005530:	f7fd f9ee 	bl	8002910 <HAL_GetTick>
 8005534:	0003      	movs	r3, r0
 8005536:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005538:	e009      	b.n	800554e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553a:	f7fd f9e9 	bl	8002910 <HAL_GetTick>
 800553e:	0002      	movs	r2, r0
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	4a6a      	ldr	r2, [pc, #424]	; (80056f0 <HAL_RCC_ClockConfig+0x1f4>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e0ca      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800554e:	4b67      	ldr	r3, [pc, #412]	; (80056ec <HAL_RCC_ClockConfig+0x1f0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2207      	movs	r2, #7
 8005554:	4013      	ands	r3, r2
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d1ee      	bne.n	800553a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2202      	movs	r2, #2
 8005562:	4013      	ands	r3, r2
 8005564:	d015      	beq.n	8005592 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2204      	movs	r2, #4
 800556c:	4013      	ands	r3, r2
 800556e:	d006      	beq.n	800557e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005570:	4b60      	ldr	r3, [pc, #384]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	4b5f      	ldr	r3, [pc, #380]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005576:	21e0      	movs	r1, #224	; 0xe0
 8005578:	01c9      	lsls	r1, r1, #7
 800557a:	430a      	orrs	r2, r1
 800557c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557e:	4b5d      	ldr	r3, [pc, #372]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	4a5d      	ldr	r2, [pc, #372]	; (80056f8 <HAL_RCC_ClockConfig+0x1fc>)
 8005584:	4013      	ands	r3, r2
 8005586:	0019      	movs	r1, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	4b59      	ldr	r3, [pc, #356]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 800558e:	430a      	orrs	r2, r1
 8005590:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2201      	movs	r2, #1
 8005598:	4013      	ands	r3, r2
 800559a:	d057      	beq.n	800564c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055a4:	4b53      	ldr	r3, [pc, #332]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	029b      	lsls	r3, r3, #10
 80055ac:	4013      	ands	r3, r2
 80055ae:	d12b      	bne.n	8005608 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e097      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d107      	bne.n	80055cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055bc:	4b4d      	ldr	r3, [pc, #308]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	049b      	lsls	r3, r3, #18
 80055c4:	4013      	ands	r3, r2
 80055c6:	d11f      	bne.n	8005608 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e08b      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d107      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d4:	4b47      	ldr	r3, [pc, #284]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4013      	ands	r3, r2
 80055de:	d113      	bne.n	8005608 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e07f      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055ec:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 80055ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f0:	2202      	movs	r2, #2
 80055f2:	4013      	ands	r3, r2
 80055f4:	d108      	bne.n	8005608 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e074      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fa:	4b3e      	ldr	r3, [pc, #248]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 80055fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055fe:	2202      	movs	r2, #2
 8005600:	4013      	ands	r3, r2
 8005602:	d101      	bne.n	8005608 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e06d      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005608:	4b3a      	ldr	r3, [pc, #232]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2207      	movs	r2, #7
 800560e:	4393      	bics	r3, r2
 8005610:	0019      	movs	r1, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	4b37      	ldr	r3, [pc, #220]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800561c:	f7fd f978 	bl	8002910 <HAL_GetTick>
 8005620:	0003      	movs	r3, r0
 8005622:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005624:	e009      	b.n	800563a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005626:	f7fd f973 	bl	8002910 <HAL_GetTick>
 800562a:	0002      	movs	r2, r0
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	4a2f      	ldr	r2, [pc, #188]	; (80056f0 <HAL_RCC_ClockConfig+0x1f4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e054      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563a:	4b2e      	ldr	r3, [pc, #184]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2238      	movs	r2, #56	; 0x38
 8005640:	401a      	ands	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	429a      	cmp	r2, r3
 800564a:	d1ec      	bne.n	8005626 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800564c:	4b27      	ldr	r3, [pc, #156]	; (80056ec <HAL_RCC_ClockConfig+0x1f0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2207      	movs	r2, #7
 8005652:	4013      	ands	r3, r2
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d21e      	bcs.n	8005698 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565a:	4b24      	ldr	r3, [pc, #144]	; (80056ec <HAL_RCC_ClockConfig+0x1f0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2207      	movs	r2, #7
 8005660:	4393      	bics	r3, r2
 8005662:	0019      	movs	r1, r3
 8005664:	4b21      	ldr	r3, [pc, #132]	; (80056ec <HAL_RCC_ClockConfig+0x1f0>)
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800566c:	f7fd f950 	bl	8002910 <HAL_GetTick>
 8005670:	0003      	movs	r3, r0
 8005672:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005674:	e009      	b.n	800568a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005676:	f7fd f94b 	bl	8002910 <HAL_GetTick>
 800567a:	0002      	movs	r2, r0
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	4a1b      	ldr	r2, [pc, #108]	; (80056f0 <HAL_RCC_ClockConfig+0x1f4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e02c      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800568a:	4b18      	ldr	r3, [pc, #96]	; (80056ec <HAL_RCC_ClockConfig+0x1f0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2207      	movs	r2, #7
 8005690:	4013      	ands	r3, r2
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d1ee      	bne.n	8005676 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2204      	movs	r2, #4
 800569e:	4013      	ands	r3, r2
 80056a0:	d009      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056a2:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4a15      	ldr	r2, [pc, #84]	; (80056fc <HAL_RCC_ClockConfig+0x200>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	0019      	movs	r1, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	4b10      	ldr	r3, [pc, #64]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 80056b2:	430a      	orrs	r2, r1
 80056b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80056b6:	f000 f829 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80056ba:	0001      	movs	r1, r0
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <HAL_RCC_ClockConfig+0x1f8>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	0a1b      	lsrs	r3, r3, #8
 80056c2:	220f      	movs	r2, #15
 80056c4:	401a      	ands	r2, r3
 80056c6:	4b0e      	ldr	r3, [pc, #56]	; (8005700 <HAL_RCC_ClockConfig+0x204>)
 80056c8:	0092      	lsls	r2, r2, #2
 80056ca:	58d3      	ldr	r3, [r2, r3]
 80056cc:	221f      	movs	r2, #31
 80056ce:	4013      	ands	r3, r2
 80056d0:	000a      	movs	r2, r1
 80056d2:	40da      	lsrs	r2, r3
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_ClockConfig+0x208>)
 80056d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056d8:	4b0b      	ldr	r3, [pc, #44]	; (8005708 <HAL_RCC_ClockConfig+0x20c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	0018      	movs	r0, r3
 80056de:	f7fd f8bb 	bl	8002858 <HAL_InitTick>
 80056e2:	0003      	movs	r3, r0
}
 80056e4:	0018      	movs	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b004      	add	sp, #16
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	40022000 	.word	0x40022000
 80056f0:	00001388 	.word	0x00001388
 80056f4:	40021000 	.word	0x40021000
 80056f8:	fffff0ff 	.word	0xfffff0ff
 80056fc:	ffff8fff 	.word	0xffff8fff
 8005700:	080084a8 	.word	0x080084a8
 8005704:	20000014 	.word	0x20000014
 8005708:	20000018 	.word	0x20000018

0800570c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005712:	4b3c      	ldr	r3, [pc, #240]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2238      	movs	r2, #56	; 0x38
 8005718:	4013      	ands	r3, r2
 800571a:	d10f      	bne.n	800573c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800571c:	4b39      	ldr	r3, [pc, #228]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	0adb      	lsrs	r3, r3, #11
 8005722:	2207      	movs	r2, #7
 8005724:	4013      	ands	r3, r2
 8005726:	2201      	movs	r2, #1
 8005728:	409a      	lsls	r2, r3
 800572a:	0013      	movs	r3, r2
 800572c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	4835      	ldr	r0, [pc, #212]	; (8005808 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005732:	f7fa fcff 	bl	8000134 <__udivsi3>
 8005736:	0003      	movs	r3, r0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e05d      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800573c:	4b31      	ldr	r3, [pc, #196]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2238      	movs	r2, #56	; 0x38
 8005742:	4013      	ands	r3, r2
 8005744:	2b08      	cmp	r3, #8
 8005746:	d102      	bne.n	800574e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005748:	4b30      	ldr	r3, [pc, #192]	; (800580c <HAL_RCC_GetSysClockFreq+0x100>)
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	e054      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800574e:	4b2d      	ldr	r3, [pc, #180]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2238      	movs	r2, #56	; 0x38
 8005754:	4013      	ands	r3, r2
 8005756:	2b10      	cmp	r3, #16
 8005758:	d138      	bne.n	80057cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800575a:	4b2a      	ldr	r3, [pc, #168]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2203      	movs	r2, #3
 8005760:	4013      	ands	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005764:	4b27      	ldr	r3, [pc, #156]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	091b      	lsrs	r3, r3, #4
 800576a:	2207      	movs	r2, #7
 800576c:	4013      	ands	r3, r2
 800576e:	3301      	adds	r3, #1
 8005770:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b03      	cmp	r3, #3
 8005776:	d10d      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	4824      	ldr	r0, [pc, #144]	; (800580c <HAL_RCC_GetSysClockFreq+0x100>)
 800577c:	f7fa fcda 	bl	8000134 <__udivsi3>
 8005780:	0003      	movs	r3, r0
 8005782:	0019      	movs	r1, r3
 8005784:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	227f      	movs	r2, #127	; 0x7f
 800578c:	4013      	ands	r3, r2
 800578e:	434b      	muls	r3, r1
 8005790:	617b      	str	r3, [r7, #20]
        break;
 8005792:	e00d      	b.n	80057b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	481c      	ldr	r0, [pc, #112]	; (8005808 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005798:	f7fa fccc 	bl	8000134 <__udivsi3>
 800579c:	0003      	movs	r3, r0
 800579e:	0019      	movs	r1, r3
 80057a0:	4b18      	ldr	r3, [pc, #96]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	227f      	movs	r2, #127	; 0x7f
 80057a8:	4013      	ands	r3, r2
 80057aa:	434b      	muls	r3, r1
 80057ac:	617b      	str	r3, [r7, #20]
        break;
 80057ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	0f5b      	lsrs	r3, r3, #29
 80057b6:	2207      	movs	r2, #7
 80057b8:	4013      	ands	r3, r2
 80057ba:	3301      	adds	r3, #1
 80057bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	6978      	ldr	r0, [r7, #20]
 80057c2:	f7fa fcb7 	bl	8000134 <__udivsi3>
 80057c6:	0003      	movs	r3, r0
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	e015      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057cc:	4b0d      	ldr	r3, [pc, #52]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2238      	movs	r2, #56	; 0x38
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b20      	cmp	r3, #32
 80057d6:	d103      	bne.n	80057e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	e00b      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2238      	movs	r2, #56	; 0x38
 80057e6:	4013      	ands	r3, r2
 80057e8:	2b18      	cmp	r3, #24
 80057ea:	d103      	bne.n	80057f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80057ec:	23fa      	movs	r3, #250	; 0xfa
 80057ee:	01db      	lsls	r3, r3, #7
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	e001      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057f8:	693b      	ldr	r3, [r7, #16]
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b006      	add	sp, #24
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			; (mov r8, r8)
 8005804:	40021000 	.word	0x40021000
 8005808:	00f42400 	.word	0x00f42400
 800580c:	007a1200 	.word	0x007a1200

08005810 <__errno>:
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <__errno+0x8>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	4770      	bx	lr
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	20000020 	.word	0x20000020

0800581c <__libc_init_array>:
 800581c:	b570      	push	{r4, r5, r6, lr}
 800581e:	2600      	movs	r6, #0
 8005820:	4d0c      	ldr	r5, [pc, #48]	; (8005854 <__libc_init_array+0x38>)
 8005822:	4c0d      	ldr	r4, [pc, #52]	; (8005858 <__libc_init_array+0x3c>)
 8005824:	1b64      	subs	r4, r4, r5
 8005826:	10a4      	asrs	r4, r4, #2
 8005828:	42a6      	cmp	r6, r4
 800582a:	d109      	bne.n	8005840 <__libc_init_array+0x24>
 800582c:	2600      	movs	r6, #0
 800582e:	f002 fdef 	bl	8008410 <_init>
 8005832:	4d0a      	ldr	r5, [pc, #40]	; (800585c <__libc_init_array+0x40>)
 8005834:	4c0a      	ldr	r4, [pc, #40]	; (8005860 <__libc_init_array+0x44>)
 8005836:	1b64      	subs	r4, r4, r5
 8005838:	10a4      	asrs	r4, r4, #2
 800583a:	42a6      	cmp	r6, r4
 800583c:	d105      	bne.n	800584a <__libc_init_array+0x2e>
 800583e:	bd70      	pop	{r4, r5, r6, pc}
 8005840:	00b3      	lsls	r3, r6, #2
 8005842:	58eb      	ldr	r3, [r5, r3]
 8005844:	4798      	blx	r3
 8005846:	3601      	adds	r6, #1
 8005848:	e7ee      	b.n	8005828 <__libc_init_array+0xc>
 800584a:	00b3      	lsls	r3, r6, #2
 800584c:	58eb      	ldr	r3, [r5, r3]
 800584e:	4798      	blx	r3
 8005850:	3601      	adds	r6, #1
 8005852:	e7f2      	b.n	800583a <__libc_init_array+0x1e>
 8005854:	080088c4 	.word	0x080088c4
 8005858:	080088c4 	.word	0x080088c4
 800585c:	080088c4 	.word	0x080088c4
 8005860:	080088c8 	.word	0x080088c8

08005864 <memset>:
 8005864:	0003      	movs	r3, r0
 8005866:	1882      	adds	r2, r0, r2
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	7019      	strb	r1, [r3, #0]
 8005870:	3301      	adds	r3, #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <__cvt>:
 8005874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005876:	001e      	movs	r6, r3
 8005878:	2300      	movs	r3, #0
 800587a:	0014      	movs	r4, r2
 800587c:	b08b      	sub	sp, #44	; 0x2c
 800587e:	429e      	cmp	r6, r3
 8005880:	da04      	bge.n	800588c <__cvt+0x18>
 8005882:	2180      	movs	r1, #128	; 0x80
 8005884:	0609      	lsls	r1, r1, #24
 8005886:	1873      	adds	r3, r6, r1
 8005888:	001e      	movs	r6, r3
 800588a:	232d      	movs	r3, #45	; 0x2d
 800588c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800588e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005890:	7013      	strb	r3, [r2, #0]
 8005892:	2320      	movs	r3, #32
 8005894:	2203      	movs	r2, #3
 8005896:	439f      	bics	r7, r3
 8005898:	2f46      	cmp	r7, #70	; 0x46
 800589a:	d007      	beq.n	80058ac <__cvt+0x38>
 800589c:	003b      	movs	r3, r7
 800589e:	3b45      	subs	r3, #69	; 0x45
 80058a0:	4259      	negs	r1, r3
 80058a2:	414b      	adcs	r3, r1
 80058a4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80058a6:	3a01      	subs	r2, #1
 80058a8:	18cb      	adds	r3, r1, r3
 80058aa:	9310      	str	r3, [sp, #64]	; 0x40
 80058ac:	ab09      	add	r3, sp, #36	; 0x24
 80058ae:	9304      	str	r3, [sp, #16]
 80058b0:	ab08      	add	r3, sp, #32
 80058b2:	9303      	str	r3, [sp, #12]
 80058b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058b6:	9200      	str	r2, [sp, #0]
 80058b8:	9302      	str	r3, [sp, #8]
 80058ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058bc:	0022      	movs	r2, r4
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	0033      	movs	r3, r6
 80058c2:	f000 fcd1 	bl	8006268 <_dtoa_r>
 80058c6:	0005      	movs	r5, r0
 80058c8:	2f47      	cmp	r7, #71	; 0x47
 80058ca:	d102      	bne.n	80058d2 <__cvt+0x5e>
 80058cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ce:	07db      	lsls	r3, r3, #31
 80058d0:	d528      	bpl.n	8005924 <__cvt+0xb0>
 80058d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058d4:	18eb      	adds	r3, r5, r3
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	2f46      	cmp	r7, #70	; 0x46
 80058da:	d114      	bne.n	8005906 <__cvt+0x92>
 80058dc:	782b      	ldrb	r3, [r5, #0]
 80058de:	2b30      	cmp	r3, #48	; 0x30
 80058e0:	d10c      	bne.n	80058fc <__cvt+0x88>
 80058e2:	2200      	movs	r2, #0
 80058e4:	2300      	movs	r3, #0
 80058e6:	0020      	movs	r0, r4
 80058e8:	0031      	movs	r1, r6
 80058ea:	f7fa fda9 	bl	8000440 <__aeabi_dcmpeq>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d104      	bne.n	80058fc <__cvt+0x88>
 80058f2:	2301      	movs	r3, #1
 80058f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058fe:	9a07      	ldr	r2, [sp, #28]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	18d3      	adds	r3, r2, r3
 8005904:	9307      	str	r3, [sp, #28]
 8005906:	2200      	movs	r2, #0
 8005908:	2300      	movs	r3, #0
 800590a:	0020      	movs	r0, r4
 800590c:	0031      	movs	r1, r6
 800590e:	f7fa fd97 	bl	8000440 <__aeabi_dcmpeq>
 8005912:	2800      	cmp	r0, #0
 8005914:	d001      	beq.n	800591a <__cvt+0xa6>
 8005916:	9b07      	ldr	r3, [sp, #28]
 8005918:	9309      	str	r3, [sp, #36]	; 0x24
 800591a:	2230      	movs	r2, #48	; 0x30
 800591c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591e:	9907      	ldr	r1, [sp, #28]
 8005920:	428b      	cmp	r3, r1
 8005922:	d306      	bcc.n	8005932 <__cvt+0xbe>
 8005924:	0028      	movs	r0, r5
 8005926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005928:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800592a:	1b5b      	subs	r3, r3, r5
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	b00b      	add	sp, #44	; 0x2c
 8005930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005932:	1c59      	adds	r1, r3, #1
 8005934:	9109      	str	r1, [sp, #36]	; 0x24
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e7f0      	b.n	800591c <__cvt+0xa8>

0800593a <__exponent>:
 800593a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800593c:	1c83      	adds	r3, r0, #2
 800593e:	b087      	sub	sp, #28
 8005940:	9303      	str	r3, [sp, #12]
 8005942:	0005      	movs	r5, r0
 8005944:	000c      	movs	r4, r1
 8005946:	232b      	movs	r3, #43	; 0x2b
 8005948:	7002      	strb	r2, [r0, #0]
 800594a:	2900      	cmp	r1, #0
 800594c:	da01      	bge.n	8005952 <__exponent+0x18>
 800594e:	424c      	negs	r4, r1
 8005950:	3302      	adds	r3, #2
 8005952:	706b      	strb	r3, [r5, #1]
 8005954:	2c09      	cmp	r4, #9
 8005956:	dd31      	ble.n	80059bc <__exponent+0x82>
 8005958:	270a      	movs	r7, #10
 800595a:	ab04      	add	r3, sp, #16
 800595c:	1dde      	adds	r6, r3, #7
 800595e:	0020      	movs	r0, r4
 8005960:	0039      	movs	r1, r7
 8005962:	9601      	str	r6, [sp, #4]
 8005964:	f7fa fd56 	bl	8000414 <__aeabi_idivmod>
 8005968:	3e01      	subs	r6, #1
 800596a:	3130      	adds	r1, #48	; 0x30
 800596c:	0020      	movs	r0, r4
 800596e:	7031      	strb	r1, [r6, #0]
 8005970:	0039      	movs	r1, r7
 8005972:	9402      	str	r4, [sp, #8]
 8005974:	f7fa fc68 	bl	8000248 <__divsi3>
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	0004      	movs	r4, r0
 800597c:	2b63      	cmp	r3, #99	; 0x63
 800597e:	dcee      	bgt.n	800595e <__exponent+0x24>
 8005980:	9b01      	ldr	r3, [sp, #4]
 8005982:	3430      	adds	r4, #48	; 0x30
 8005984:	1e9a      	subs	r2, r3, #2
 8005986:	0013      	movs	r3, r2
 8005988:	9903      	ldr	r1, [sp, #12]
 800598a:	7014      	strb	r4, [r2, #0]
 800598c:	a804      	add	r0, sp, #16
 800598e:	3007      	adds	r0, #7
 8005990:	4298      	cmp	r0, r3
 8005992:	d80e      	bhi.n	80059b2 <__exponent+0x78>
 8005994:	ab04      	add	r3, sp, #16
 8005996:	3307      	adds	r3, #7
 8005998:	2000      	movs	r0, #0
 800599a:	429a      	cmp	r2, r3
 800599c:	d804      	bhi.n	80059a8 <__exponent+0x6e>
 800599e:	ab04      	add	r3, sp, #16
 80059a0:	3009      	adds	r0, #9
 80059a2:	18c0      	adds	r0, r0, r3
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	1ac0      	subs	r0, r0, r3
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	1818      	adds	r0, r3, r0
 80059ac:	1b40      	subs	r0, r0, r5
 80059ae:	b007      	add	sp, #28
 80059b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b2:	7818      	ldrb	r0, [r3, #0]
 80059b4:	3301      	adds	r3, #1
 80059b6:	7008      	strb	r0, [r1, #0]
 80059b8:	3101      	adds	r1, #1
 80059ba:	e7e7      	b.n	800598c <__exponent+0x52>
 80059bc:	2330      	movs	r3, #48	; 0x30
 80059be:	18e4      	adds	r4, r4, r3
 80059c0:	70ab      	strb	r3, [r5, #2]
 80059c2:	1d28      	adds	r0, r5, #4
 80059c4:	70ec      	strb	r4, [r5, #3]
 80059c6:	e7f1      	b.n	80059ac <__exponent+0x72>

080059c8 <_printf_float>:
 80059c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ca:	b095      	sub	sp, #84	; 0x54
 80059cc:	000c      	movs	r4, r1
 80059ce:	9209      	str	r2, [sp, #36]	; 0x24
 80059d0:	001e      	movs	r6, r3
 80059d2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80059d4:	0007      	movs	r7, r0
 80059d6:	f001 fa61 	bl	8006e9c <_localeconv_r>
 80059da:	6803      	ldr	r3, [r0, #0]
 80059dc:	0018      	movs	r0, r3
 80059de:	930c      	str	r3, [sp, #48]	; 0x30
 80059e0:	f7fa fb8c 	bl	80000fc <strlen>
 80059e4:	2300      	movs	r3, #0
 80059e6:	9312      	str	r3, [sp, #72]	; 0x48
 80059e8:	7e23      	ldrb	r3, [r4, #24]
 80059ea:	2207      	movs	r2, #7
 80059ec:	930a      	str	r3, [sp, #40]	; 0x28
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	900e      	str	r0, [sp, #56]	; 0x38
 80059f2:	930d      	str	r3, [sp, #52]	; 0x34
 80059f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059f6:	682b      	ldr	r3, [r5, #0]
 80059f8:	05c9      	lsls	r1, r1, #23
 80059fa:	d547      	bpl.n	8005a8c <_printf_float+0xc4>
 80059fc:	189b      	adds	r3, r3, r2
 80059fe:	4393      	bics	r3, r2
 8005a00:	001a      	movs	r2, r3
 8005a02:	3208      	adds	r2, #8
 8005a04:	602a      	str	r2, [r5, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	64a2      	str	r2, [r4, #72]	; 0x48
 8005a0c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005a0e:	2201      	movs	r2, #1
 8005a10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a12:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005a14:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a16:	006b      	lsls	r3, r5, #1
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a1c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a1e:	4ba7      	ldr	r3, [pc, #668]	; (8005cbc <_printf_float+0x2f4>)
 8005a20:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a22:	4252      	negs	r2, r2
 8005a24:	f7fc fa76 	bl	8001f14 <__aeabi_dcmpun>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d131      	bne.n	8005a90 <_printf_float+0xc8>
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4ba3      	ldr	r3, [pc, #652]	; (8005cbc <_printf_float+0x2f4>)
 8005a30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a32:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005a34:	4252      	negs	r2, r2
 8005a36:	f7fa fd13 	bl	8000460 <__aeabi_dcmple>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d128      	bne.n	8005a90 <_printf_float+0xc8>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2300      	movs	r3, #0
 8005a42:	0029      	movs	r1, r5
 8005a44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005a46:	f7fa fd01 	bl	800044c <__aeabi_dcmplt>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d003      	beq.n	8005a56 <_printf_float+0x8e>
 8005a4e:	0023      	movs	r3, r4
 8005a50:	222d      	movs	r2, #45	; 0x2d
 8005a52:	3343      	adds	r3, #67	; 0x43
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a58:	4d99      	ldr	r5, [pc, #612]	; (8005cc0 <_printf_float+0x2f8>)
 8005a5a:	2b47      	cmp	r3, #71	; 0x47
 8005a5c:	d900      	bls.n	8005a60 <_printf_float+0x98>
 8005a5e:	4d99      	ldr	r5, [pc, #612]	; (8005cc4 <_printf_float+0x2fc>)
 8005a60:	2303      	movs	r3, #3
 8005a62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a64:	6123      	str	r3, [r4, #16]
 8005a66:	3301      	adds	r3, #1
 8005a68:	439a      	bics	r2, r3
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	6022      	str	r2, [r4, #0]
 8005a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a72:	0021      	movs	r1, r4
 8005a74:	0038      	movs	r0, r7
 8005a76:	9600      	str	r6, [sp, #0]
 8005a78:	aa13      	add	r2, sp, #76	; 0x4c
 8005a7a:	f000 f9e7 	bl	8005e4c <_printf_common>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	d000      	beq.n	8005a84 <_printf_float+0xbc>
 8005a82:	e0a2      	b.n	8005bca <_printf_float+0x202>
 8005a84:	2001      	movs	r0, #1
 8005a86:	4240      	negs	r0, r0
 8005a88:	b015      	add	sp, #84	; 0x54
 8005a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8c:	3307      	adds	r3, #7
 8005a8e:	e7b6      	b.n	80059fe <_printf_float+0x36>
 8005a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a92:	002b      	movs	r3, r5
 8005a94:	0010      	movs	r0, r2
 8005a96:	0029      	movs	r1, r5
 8005a98:	f7fc fa3c 	bl	8001f14 <__aeabi_dcmpun>
 8005a9c:	2800      	cmp	r0, #0
 8005a9e:	d00b      	beq.n	8005ab8 <_printf_float+0xf0>
 8005aa0:	2d00      	cmp	r5, #0
 8005aa2:	da03      	bge.n	8005aac <_printf_float+0xe4>
 8005aa4:	0023      	movs	r3, r4
 8005aa6:	222d      	movs	r2, #45	; 0x2d
 8005aa8:	3343      	adds	r3, #67	; 0x43
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aae:	4d86      	ldr	r5, [pc, #536]	; (8005cc8 <_printf_float+0x300>)
 8005ab0:	2b47      	cmp	r3, #71	; 0x47
 8005ab2:	d9d5      	bls.n	8005a60 <_printf_float+0x98>
 8005ab4:	4d85      	ldr	r5, [pc, #532]	; (8005ccc <_printf_float+0x304>)
 8005ab6:	e7d3      	b.n	8005a60 <_printf_float+0x98>
 8005ab8:	2220      	movs	r2, #32
 8005aba:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	4391      	bics	r1, r2
 8005ac0:	910f      	str	r1, [sp, #60]	; 0x3c
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	d149      	bne.n	8005b5a <_printf_float+0x192>
 8005ac6:	3307      	adds	r3, #7
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	2380      	movs	r3, #128	; 0x80
 8005acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	9206      	str	r2, [sp, #24]
 8005ad6:	aa12      	add	r2, sp, #72	; 0x48
 8005ad8:	9205      	str	r2, [sp, #20]
 8005ada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005adc:	a908      	add	r1, sp, #32
 8005ade:	9204      	str	r2, [sp, #16]
 8005ae0:	aa11      	add	r2, sp, #68	; 0x44
 8005ae2:	9203      	str	r2, [sp, #12]
 8005ae4:	2223      	movs	r2, #35	; 0x23
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	6863      	ldr	r3, [r4, #4]
 8005aec:	1852      	adds	r2, r2, r1
 8005aee:	9202      	str	r2, [sp, #8]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	0038      	movs	r0, r7
 8005af4:	002b      	movs	r3, r5
 8005af6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005af8:	f7ff febc 	bl	8005874 <__cvt>
 8005afc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005afe:	0005      	movs	r5, r0
 8005b00:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005b02:	2b47      	cmp	r3, #71	; 0x47
 8005b04:	d108      	bne.n	8005b18 <_printf_float+0x150>
 8005b06:	1ccb      	adds	r3, r1, #3
 8005b08:	db02      	blt.n	8005b10 <_printf_float+0x148>
 8005b0a:	6863      	ldr	r3, [r4, #4]
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	dd48      	ble.n	8005ba2 <_printf_float+0x1da>
 8005b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b12:	3b02      	subs	r3, #2
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	930a      	str	r3, [sp, #40]	; 0x28
 8005b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1a:	2b65      	cmp	r3, #101	; 0x65
 8005b1c:	d824      	bhi.n	8005b68 <_printf_float+0x1a0>
 8005b1e:	0020      	movs	r0, r4
 8005b20:	001a      	movs	r2, r3
 8005b22:	3901      	subs	r1, #1
 8005b24:	3050      	adds	r0, #80	; 0x50
 8005b26:	9111      	str	r1, [sp, #68]	; 0x44
 8005b28:	f7ff ff07 	bl	800593a <__exponent>
 8005b2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b2e:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b30:	1813      	adds	r3, r2, r0
 8005b32:	6123      	str	r3, [r4, #16]
 8005b34:	2a01      	cmp	r2, #1
 8005b36:	dc02      	bgt.n	8005b3e <_printf_float+0x176>
 8005b38:	6822      	ldr	r2, [r4, #0]
 8005b3a:	07d2      	lsls	r2, r2, #31
 8005b3c:	d501      	bpl.n	8005b42 <_printf_float+0x17a>
 8005b3e:	3301      	adds	r3, #1
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	2323      	movs	r3, #35	; 0x23
 8005b44:	aa08      	add	r2, sp, #32
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d100      	bne.n	8005b50 <_printf_float+0x188>
 8005b4e:	e78f      	b.n	8005a70 <_printf_float+0xa8>
 8005b50:	0023      	movs	r3, r4
 8005b52:	222d      	movs	r2, #45	; 0x2d
 8005b54:	3343      	adds	r3, #67	; 0x43
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	e78a      	b.n	8005a70 <_printf_float+0xa8>
 8005b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b5c:	2a47      	cmp	r2, #71	; 0x47
 8005b5e:	d1b4      	bne.n	8005aca <_printf_float+0x102>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1b2      	bne.n	8005aca <_printf_float+0x102>
 8005b64:	3301      	adds	r3, #1
 8005b66:	e7af      	b.n	8005ac8 <_printf_float+0x100>
 8005b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6a:	2b66      	cmp	r3, #102	; 0x66
 8005b6c:	d11b      	bne.n	8005ba6 <_printf_float+0x1de>
 8005b6e:	6863      	ldr	r3, [r4, #4]
 8005b70:	2900      	cmp	r1, #0
 8005b72:	dd0d      	ble.n	8005b90 <_printf_float+0x1c8>
 8005b74:	6121      	str	r1, [r4, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d102      	bne.n	8005b80 <_printf_float+0x1b8>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	07d2      	lsls	r2, r2, #31
 8005b7e:	d502      	bpl.n	8005b86 <_printf_float+0x1be>
 8005b80:	3301      	adds	r3, #1
 8005b82:	1859      	adds	r1, r3, r1
 8005b84:	6121      	str	r1, [r4, #16]
 8005b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b88:	65a3      	str	r3, [r4, #88]	; 0x58
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b8e:	e7d8      	b.n	8005b42 <_printf_float+0x17a>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d103      	bne.n	8005b9c <_printf_float+0x1d4>
 8005b94:	2201      	movs	r2, #1
 8005b96:	6821      	ldr	r1, [r4, #0]
 8005b98:	4211      	tst	r1, r2
 8005b9a:	d000      	beq.n	8005b9e <_printf_float+0x1d6>
 8005b9c:	1c9a      	adds	r2, r3, #2
 8005b9e:	6122      	str	r2, [r4, #16]
 8005ba0:	e7f1      	b.n	8005b86 <_printf_float+0x1be>
 8005ba2:	2367      	movs	r3, #103	; 0x67
 8005ba4:	930a      	str	r3, [sp, #40]	; 0x28
 8005ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ba8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005baa:	4293      	cmp	r3, r2
 8005bac:	db06      	blt.n	8005bbc <_printf_float+0x1f4>
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	07d2      	lsls	r2, r2, #31
 8005bb4:	d5e7      	bpl.n	8005b86 <_printf_float+0x1be>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6123      	str	r3, [r4, #16]
 8005bba:	e7e4      	b.n	8005b86 <_printf_float+0x1be>
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	dc01      	bgt.n	8005bc6 <_printf_float+0x1fe>
 8005bc2:	1849      	adds	r1, r1, r1
 8005bc4:	1ac9      	subs	r1, r1, r3
 8005bc6:	1852      	adds	r2, r2, r1
 8005bc8:	e7e9      	b.n	8005b9e <_printf_float+0x1d6>
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	0553      	lsls	r3, r2, #21
 8005bce:	d407      	bmi.n	8005be0 <_printf_float+0x218>
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	002a      	movs	r2, r5
 8005bd4:	0038      	movs	r0, r7
 8005bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bd8:	47b0      	blx	r6
 8005bda:	1c43      	adds	r3, r0, #1
 8005bdc:	d128      	bne.n	8005c30 <_printf_float+0x268>
 8005bde:	e751      	b.n	8005a84 <_printf_float+0xbc>
 8005be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be2:	2b65      	cmp	r3, #101	; 0x65
 8005be4:	d800      	bhi.n	8005be8 <_printf_float+0x220>
 8005be6:	e0e1      	b.n	8005dac <_printf_float+0x3e4>
 8005be8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005bea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005bec:	2200      	movs	r2, #0
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f7fa fc26 	bl	8000440 <__aeabi_dcmpeq>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d031      	beq.n	8005c5c <_printf_float+0x294>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	0038      	movs	r0, r7
 8005bfc:	4a34      	ldr	r2, [pc, #208]	; (8005cd0 <_printf_float+0x308>)
 8005bfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c00:	47b0      	blx	r6
 8005c02:	1c43      	adds	r3, r0, #1
 8005c04:	d100      	bne.n	8005c08 <_printf_float+0x240>
 8005c06:	e73d      	b.n	8005a84 <_printf_float+0xbc>
 8005c08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	db02      	blt.n	8005c16 <_printf_float+0x24e>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07db      	lsls	r3, r3, #31
 8005c14:	d50c      	bpl.n	8005c30 <_printf_float+0x268>
 8005c16:	0038      	movs	r0, r7
 8005c18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c1e:	47b0      	blx	r6
 8005c20:	2500      	movs	r5, #0
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	d100      	bne.n	8005c28 <_printf_float+0x260>
 8005c26:	e72d      	b.n	8005a84 <_printf_float+0xbc>
 8005c28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	dc0a      	bgt.n	8005c46 <_printf_float+0x27e>
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	079b      	lsls	r3, r3, #30
 8005c34:	d500      	bpl.n	8005c38 <_printf_float+0x270>
 8005c36:	e106      	b.n	8005e46 <_printf_float+0x47e>
 8005c38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c3a:	68e0      	ldr	r0, [r4, #12]
 8005c3c:	4298      	cmp	r0, r3
 8005c3e:	db00      	blt.n	8005c42 <_printf_float+0x27a>
 8005c40:	e722      	b.n	8005a88 <_printf_float+0xc0>
 8005c42:	0018      	movs	r0, r3
 8005c44:	e720      	b.n	8005a88 <_printf_float+0xc0>
 8005c46:	0022      	movs	r2, r4
 8005c48:	2301      	movs	r3, #1
 8005c4a:	0038      	movs	r0, r7
 8005c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c4e:	321a      	adds	r2, #26
 8005c50:	47b0      	blx	r6
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	d100      	bne.n	8005c58 <_printf_float+0x290>
 8005c56:	e715      	b.n	8005a84 <_printf_float+0xbc>
 8005c58:	3501      	adds	r5, #1
 8005c5a:	e7e5      	b.n	8005c28 <_printf_float+0x260>
 8005c5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	dc38      	bgt.n	8005cd4 <_printf_float+0x30c>
 8005c62:	2301      	movs	r3, #1
 8005c64:	0038      	movs	r0, r7
 8005c66:	4a1a      	ldr	r2, [pc, #104]	; (8005cd0 <_printf_float+0x308>)
 8005c68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c6a:	47b0      	blx	r6
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d100      	bne.n	8005c72 <_printf_float+0x2aa>
 8005c70:	e708      	b.n	8005a84 <_printf_float+0xbc>
 8005c72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c76:	4313      	orrs	r3, r2
 8005c78:	d102      	bne.n	8005c80 <_printf_float+0x2b8>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	07db      	lsls	r3, r3, #31
 8005c7e:	d5d7      	bpl.n	8005c30 <_printf_float+0x268>
 8005c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c82:	0038      	movs	r0, r7
 8005c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c88:	47b0      	blx	r6
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d100      	bne.n	8005c90 <_printf_float+0x2c8>
 8005c8e:	e6f9      	b.n	8005a84 <_printf_float+0xbc>
 8005c90:	2300      	movs	r3, #0
 8005c92:	930a      	str	r3, [sp, #40]	; 0x28
 8005c94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c98:	425b      	negs	r3, r3
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	dc01      	bgt.n	8005ca2 <_printf_float+0x2da>
 8005c9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ca0:	e797      	b.n	8005bd2 <_printf_float+0x20a>
 8005ca2:	0022      	movs	r2, r4
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	0038      	movs	r0, r7
 8005ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005caa:	321a      	adds	r2, #26
 8005cac:	47b0      	blx	r6
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d100      	bne.n	8005cb4 <_printf_float+0x2ec>
 8005cb2:	e6e7      	b.n	8005a84 <_printf_float+0xbc>
 8005cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	e7eb      	b.n	8005c92 <_printf_float+0x2ca>
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	7fefffff 	.word	0x7fefffff
 8005cc0:	080084ec 	.word	0x080084ec
 8005cc4:	080084f0 	.word	0x080084f0
 8005cc8:	080084f4 	.word	0x080084f4
 8005ccc:	080084f8 	.word	0x080084f8
 8005cd0:	080084fc 	.word	0x080084fc
 8005cd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	dd00      	ble.n	8005ce0 <_printf_float+0x318>
 8005cde:	930a      	str	r3, [sp, #40]	; 0x28
 8005ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dc3c      	bgt.n	8005d60 <_printf_float+0x398>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	930d      	str	r3, [sp, #52]	; 0x34
 8005cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cec:	43db      	mvns	r3, r3
 8005cee:	17db      	asrs	r3, r3, #31
 8005cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cf4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d02:	4293      	cmp	r3, r2
 8005d04:	dc34      	bgt.n	8005d70 <_printf_float+0x3a8>
 8005d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	db3d      	blt.n	8005d8a <_printf_float+0x3c2>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	07db      	lsls	r3, r3, #31
 8005d12:	d43a      	bmi.n	8005d8a <_printf_float+0x3c2>
 8005d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d18:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	1a52      	subs	r2, r2, r1
 8005d1e:	920a      	str	r2, [sp, #40]	; 0x28
 8005d20:	429a      	cmp	r2, r3
 8005d22:	dd00      	ble.n	8005d26 <_printf_float+0x35e>
 8005d24:	930a      	str	r3, [sp, #40]	; 0x28
 8005d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	dc36      	bgt.n	8005d9a <_printf_float+0x3d2>
 8005d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2e:	2500      	movs	r5, #0
 8005d30:	43db      	mvns	r3, r3
 8005d32:	17db      	asrs	r3, r3, #31
 8005d34:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d40:	400a      	ands	r2, r1
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	dc00      	bgt.n	8005d4a <_printf_float+0x382>
 8005d48:	e772      	b.n	8005c30 <_printf_float+0x268>
 8005d4a:	0022      	movs	r2, r4
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	0038      	movs	r0, r7
 8005d50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d52:	321a      	adds	r2, #26
 8005d54:	47b0      	blx	r6
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d100      	bne.n	8005d5c <_printf_float+0x394>
 8005d5a:	e693      	b.n	8005a84 <_printf_float+0xbc>
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	e7ea      	b.n	8005d36 <_printf_float+0x36e>
 8005d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d62:	002a      	movs	r2, r5
 8005d64:	0038      	movs	r0, r7
 8005d66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d68:	47b0      	blx	r6
 8005d6a:	1c43      	adds	r3, r0, #1
 8005d6c:	d1bb      	bne.n	8005ce6 <_printf_float+0x31e>
 8005d6e:	e689      	b.n	8005a84 <_printf_float+0xbc>
 8005d70:	0022      	movs	r2, r4
 8005d72:	2301      	movs	r3, #1
 8005d74:	0038      	movs	r0, r7
 8005d76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d78:	321a      	adds	r2, #26
 8005d7a:	47b0      	blx	r6
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	d100      	bne.n	8005d82 <_printf_float+0x3ba>
 8005d80:	e680      	b.n	8005a84 <_printf_float+0xbc>
 8005d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d84:	3301      	adds	r3, #1
 8005d86:	930d      	str	r3, [sp, #52]	; 0x34
 8005d88:	e7b3      	b.n	8005cf2 <_printf_float+0x32a>
 8005d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d8c:	0038      	movs	r0, r7
 8005d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d92:	47b0      	blx	r6
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d1bd      	bne.n	8005d14 <_printf_float+0x34c>
 8005d98:	e674      	b.n	8005a84 <_printf_float+0xbc>
 8005d9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d9c:	0038      	movs	r0, r7
 8005d9e:	18ea      	adds	r2, r5, r3
 8005da0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da4:	47b0      	blx	r6
 8005da6:	1c43      	adds	r3, r0, #1
 8005da8:	d1c0      	bne.n	8005d2c <_printf_float+0x364>
 8005daa:	e66b      	b.n	8005a84 <_printf_float+0xbc>
 8005dac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	dc02      	bgt.n	8005db8 <_printf_float+0x3f0>
 8005db2:	2301      	movs	r3, #1
 8005db4:	421a      	tst	r2, r3
 8005db6:	d034      	beq.n	8005e22 <_printf_float+0x45a>
 8005db8:	2301      	movs	r3, #1
 8005dba:	002a      	movs	r2, r5
 8005dbc:	0038      	movs	r0, r7
 8005dbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dc0:	47b0      	blx	r6
 8005dc2:	1c43      	adds	r3, r0, #1
 8005dc4:	d100      	bne.n	8005dc8 <_printf_float+0x400>
 8005dc6:	e65d      	b.n	8005a84 <_printf_float+0xbc>
 8005dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dca:	0038      	movs	r0, r7
 8005dcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dd0:	47b0      	blx	r6
 8005dd2:	1c43      	adds	r3, r0, #1
 8005dd4:	d100      	bne.n	8005dd8 <_printf_float+0x410>
 8005dd6:	e655      	b.n	8005a84 <_printf_float+0xbc>
 8005dd8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005dda:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2300      	movs	r3, #0
 8005de0:	f7fa fb2e 	bl	8000440 <__aeabi_dcmpeq>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	d11a      	bne.n	8005e1e <_printf_float+0x456>
 8005de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005dea:	1c6a      	adds	r2, r5, #1
 8005dec:	3b01      	subs	r3, #1
 8005dee:	0038      	movs	r0, r7
 8005df0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005df2:	47b0      	blx	r6
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d10e      	bne.n	8005e16 <_printf_float+0x44e>
 8005df8:	e644      	b.n	8005a84 <_printf_float+0xbc>
 8005dfa:	0022      	movs	r2, r4
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	0038      	movs	r0, r7
 8005e00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e02:	321a      	adds	r2, #26
 8005e04:	47b0      	blx	r6
 8005e06:	1c43      	adds	r3, r0, #1
 8005e08:	d100      	bne.n	8005e0c <_printf_float+0x444>
 8005e0a:	e63b      	b.n	8005a84 <_printf_float+0xbc>
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e10:	3b01      	subs	r3, #1
 8005e12:	42ab      	cmp	r3, r5
 8005e14:	dcf1      	bgt.n	8005dfa <_printf_float+0x432>
 8005e16:	0022      	movs	r2, r4
 8005e18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e1a:	3250      	adds	r2, #80	; 0x50
 8005e1c:	e6da      	b.n	8005bd4 <_printf_float+0x20c>
 8005e1e:	2500      	movs	r5, #0
 8005e20:	e7f5      	b.n	8005e0e <_printf_float+0x446>
 8005e22:	002a      	movs	r2, r5
 8005e24:	e7e3      	b.n	8005dee <_printf_float+0x426>
 8005e26:	0022      	movs	r2, r4
 8005e28:	2301      	movs	r3, #1
 8005e2a:	0038      	movs	r0, r7
 8005e2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e2e:	3219      	adds	r2, #25
 8005e30:	47b0      	blx	r6
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	d100      	bne.n	8005e38 <_printf_float+0x470>
 8005e36:	e625      	b.n	8005a84 <_printf_float+0xbc>
 8005e38:	3501      	adds	r5, #1
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	dcf0      	bgt.n	8005e26 <_printf_float+0x45e>
 8005e44:	e6f8      	b.n	8005c38 <_printf_float+0x270>
 8005e46:	2500      	movs	r5, #0
 8005e48:	e7f7      	b.n	8005e3a <_printf_float+0x472>
 8005e4a:	46c0      	nop			; (mov r8, r8)

08005e4c <_printf_common>:
 8005e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e4e:	0015      	movs	r5, r2
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	688a      	ldr	r2, [r1, #8]
 8005e54:	690b      	ldr	r3, [r1, #16]
 8005e56:	000c      	movs	r4, r1
 8005e58:	9000      	str	r0, [sp, #0]
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	da00      	bge.n	8005e60 <_printf_common+0x14>
 8005e5e:	0013      	movs	r3, r2
 8005e60:	0022      	movs	r2, r4
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	3243      	adds	r2, #67	; 0x43
 8005e66:	7812      	ldrb	r2, [r2, #0]
 8005e68:	2a00      	cmp	r2, #0
 8005e6a:	d001      	beq.n	8005e70 <_printf_common+0x24>
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	6823      	ldr	r3, [r4, #0]
 8005e72:	069b      	lsls	r3, r3, #26
 8005e74:	d502      	bpl.n	8005e7c <_printf_common+0x30>
 8005e76:	682b      	ldr	r3, [r5, #0]
 8005e78:	3302      	adds	r3, #2
 8005e7a:	602b      	str	r3, [r5, #0]
 8005e7c:	6822      	ldr	r2, [r4, #0]
 8005e7e:	2306      	movs	r3, #6
 8005e80:	0017      	movs	r7, r2
 8005e82:	401f      	ands	r7, r3
 8005e84:	421a      	tst	r2, r3
 8005e86:	d027      	beq.n	8005ed8 <_printf_common+0x8c>
 8005e88:	0023      	movs	r3, r4
 8005e8a:	3343      	adds	r3, #67	; 0x43
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	1e5a      	subs	r2, r3, #1
 8005e90:	4193      	sbcs	r3, r2
 8005e92:	6822      	ldr	r2, [r4, #0]
 8005e94:	0692      	lsls	r2, r2, #26
 8005e96:	d430      	bmi.n	8005efa <_printf_common+0xae>
 8005e98:	0022      	movs	r2, r4
 8005e9a:	9901      	ldr	r1, [sp, #4]
 8005e9c:	9800      	ldr	r0, [sp, #0]
 8005e9e:	9e08      	ldr	r6, [sp, #32]
 8005ea0:	3243      	adds	r2, #67	; 0x43
 8005ea2:	47b0      	blx	r6
 8005ea4:	1c43      	adds	r3, r0, #1
 8005ea6:	d025      	beq.n	8005ef4 <_printf_common+0xa8>
 8005ea8:	2306      	movs	r3, #6
 8005eaa:	6820      	ldr	r0, [r4, #0]
 8005eac:	682a      	ldr	r2, [r5, #0]
 8005eae:	68e1      	ldr	r1, [r4, #12]
 8005eb0:	2500      	movs	r5, #0
 8005eb2:	4003      	ands	r3, r0
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d103      	bne.n	8005ec0 <_printf_common+0x74>
 8005eb8:	1a8d      	subs	r5, r1, r2
 8005eba:	43eb      	mvns	r3, r5
 8005ebc:	17db      	asrs	r3, r3, #31
 8005ebe:	401d      	ands	r5, r3
 8005ec0:	68a3      	ldr	r3, [r4, #8]
 8005ec2:	6922      	ldr	r2, [r4, #16]
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	dd01      	ble.n	8005ecc <_printf_common+0x80>
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	18ed      	adds	r5, r5, r3
 8005ecc:	2700      	movs	r7, #0
 8005ece:	42bd      	cmp	r5, r7
 8005ed0:	d120      	bne.n	8005f14 <_printf_common+0xc8>
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	e010      	b.n	8005ef8 <_printf_common+0xac>
 8005ed6:	3701      	adds	r7, #1
 8005ed8:	68e3      	ldr	r3, [r4, #12]
 8005eda:	682a      	ldr	r2, [r5, #0]
 8005edc:	1a9b      	subs	r3, r3, r2
 8005ede:	42bb      	cmp	r3, r7
 8005ee0:	ddd2      	ble.n	8005e88 <_printf_common+0x3c>
 8005ee2:	0022      	movs	r2, r4
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	9901      	ldr	r1, [sp, #4]
 8005ee8:	9800      	ldr	r0, [sp, #0]
 8005eea:	9e08      	ldr	r6, [sp, #32]
 8005eec:	3219      	adds	r2, #25
 8005eee:	47b0      	blx	r6
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d1f0      	bne.n	8005ed6 <_printf_common+0x8a>
 8005ef4:	2001      	movs	r0, #1
 8005ef6:	4240      	negs	r0, r0
 8005ef8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005efa:	2030      	movs	r0, #48	; 0x30
 8005efc:	18e1      	adds	r1, r4, r3
 8005efe:	3143      	adds	r1, #67	; 0x43
 8005f00:	7008      	strb	r0, [r1, #0]
 8005f02:	0021      	movs	r1, r4
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	3145      	adds	r1, #69	; 0x45
 8005f08:	7809      	ldrb	r1, [r1, #0]
 8005f0a:	18a2      	adds	r2, r4, r2
 8005f0c:	3243      	adds	r2, #67	; 0x43
 8005f0e:	3302      	adds	r3, #2
 8005f10:	7011      	strb	r1, [r2, #0]
 8005f12:	e7c1      	b.n	8005e98 <_printf_common+0x4c>
 8005f14:	0022      	movs	r2, r4
 8005f16:	2301      	movs	r3, #1
 8005f18:	9901      	ldr	r1, [sp, #4]
 8005f1a:	9800      	ldr	r0, [sp, #0]
 8005f1c:	9e08      	ldr	r6, [sp, #32]
 8005f1e:	321a      	adds	r2, #26
 8005f20:	47b0      	blx	r6
 8005f22:	1c43      	adds	r3, r0, #1
 8005f24:	d0e6      	beq.n	8005ef4 <_printf_common+0xa8>
 8005f26:	3701      	adds	r7, #1
 8005f28:	e7d1      	b.n	8005ece <_printf_common+0x82>
	...

08005f2c <_printf_i>:
 8005f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f2e:	b08b      	sub	sp, #44	; 0x2c
 8005f30:	9206      	str	r2, [sp, #24]
 8005f32:	000a      	movs	r2, r1
 8005f34:	3243      	adds	r2, #67	; 0x43
 8005f36:	9307      	str	r3, [sp, #28]
 8005f38:	9005      	str	r0, [sp, #20]
 8005f3a:	9204      	str	r2, [sp, #16]
 8005f3c:	7e0a      	ldrb	r2, [r1, #24]
 8005f3e:	000c      	movs	r4, r1
 8005f40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f42:	2a78      	cmp	r2, #120	; 0x78
 8005f44:	d807      	bhi.n	8005f56 <_printf_i+0x2a>
 8005f46:	2a62      	cmp	r2, #98	; 0x62
 8005f48:	d809      	bhi.n	8005f5e <_printf_i+0x32>
 8005f4a:	2a00      	cmp	r2, #0
 8005f4c:	d100      	bne.n	8005f50 <_printf_i+0x24>
 8005f4e:	e0c1      	b.n	80060d4 <_printf_i+0x1a8>
 8005f50:	2a58      	cmp	r2, #88	; 0x58
 8005f52:	d100      	bne.n	8005f56 <_printf_i+0x2a>
 8005f54:	e08c      	b.n	8006070 <_printf_i+0x144>
 8005f56:	0026      	movs	r6, r4
 8005f58:	3642      	adds	r6, #66	; 0x42
 8005f5a:	7032      	strb	r2, [r6, #0]
 8005f5c:	e022      	b.n	8005fa4 <_printf_i+0x78>
 8005f5e:	0010      	movs	r0, r2
 8005f60:	3863      	subs	r0, #99	; 0x63
 8005f62:	2815      	cmp	r0, #21
 8005f64:	d8f7      	bhi.n	8005f56 <_printf_i+0x2a>
 8005f66:	f7fa f8db 	bl	8000120 <__gnu_thumb1_case_shi>
 8005f6a:	0016      	.short	0x0016
 8005f6c:	fff6001f 	.word	0xfff6001f
 8005f70:	fff6fff6 	.word	0xfff6fff6
 8005f74:	001ffff6 	.word	0x001ffff6
 8005f78:	fff6fff6 	.word	0xfff6fff6
 8005f7c:	fff6fff6 	.word	0xfff6fff6
 8005f80:	003600a8 	.word	0x003600a8
 8005f84:	fff6009a 	.word	0xfff6009a
 8005f88:	00b9fff6 	.word	0x00b9fff6
 8005f8c:	0036fff6 	.word	0x0036fff6
 8005f90:	fff6fff6 	.word	0xfff6fff6
 8005f94:	009e      	.short	0x009e
 8005f96:	0026      	movs	r6, r4
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	3642      	adds	r6, #66	; 0x42
 8005f9c:	1d11      	adds	r1, r2, #4
 8005f9e:	6019      	str	r1, [r3, #0]
 8005fa0:	6813      	ldr	r3, [r2, #0]
 8005fa2:	7033      	strb	r3, [r6, #0]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0a7      	b.n	80060f8 <_printf_i+0x1cc>
 8005fa8:	6808      	ldr	r0, [r1, #0]
 8005faa:	6819      	ldr	r1, [r3, #0]
 8005fac:	1d0a      	adds	r2, r1, #4
 8005fae:	0605      	lsls	r5, r0, #24
 8005fb0:	d50b      	bpl.n	8005fca <_printf_i+0x9e>
 8005fb2:	680d      	ldr	r5, [r1, #0]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	2d00      	cmp	r5, #0
 8005fb8:	da03      	bge.n	8005fc2 <_printf_i+0x96>
 8005fba:	232d      	movs	r3, #45	; 0x2d
 8005fbc:	9a04      	ldr	r2, [sp, #16]
 8005fbe:	426d      	negs	r5, r5
 8005fc0:	7013      	strb	r3, [r2, #0]
 8005fc2:	4b61      	ldr	r3, [pc, #388]	; (8006148 <_printf_i+0x21c>)
 8005fc4:	270a      	movs	r7, #10
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	e01b      	b.n	8006002 <_printf_i+0xd6>
 8005fca:	680d      	ldr	r5, [r1, #0]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	0641      	lsls	r1, r0, #25
 8005fd0:	d5f1      	bpl.n	8005fb6 <_printf_i+0x8a>
 8005fd2:	b22d      	sxth	r5, r5
 8005fd4:	e7ef      	b.n	8005fb6 <_printf_i+0x8a>
 8005fd6:	680d      	ldr	r5, [r1, #0]
 8005fd8:	6819      	ldr	r1, [r3, #0]
 8005fda:	1d08      	adds	r0, r1, #4
 8005fdc:	6018      	str	r0, [r3, #0]
 8005fde:	062e      	lsls	r6, r5, #24
 8005fe0:	d501      	bpl.n	8005fe6 <_printf_i+0xba>
 8005fe2:	680d      	ldr	r5, [r1, #0]
 8005fe4:	e003      	b.n	8005fee <_printf_i+0xc2>
 8005fe6:	066d      	lsls	r5, r5, #25
 8005fe8:	d5fb      	bpl.n	8005fe2 <_printf_i+0xb6>
 8005fea:	680d      	ldr	r5, [r1, #0]
 8005fec:	b2ad      	uxth	r5, r5
 8005fee:	4b56      	ldr	r3, [pc, #344]	; (8006148 <_printf_i+0x21c>)
 8005ff0:	2708      	movs	r7, #8
 8005ff2:	9303      	str	r3, [sp, #12]
 8005ff4:	2a6f      	cmp	r2, #111	; 0x6f
 8005ff6:	d000      	beq.n	8005ffa <_printf_i+0xce>
 8005ff8:	3702      	adds	r7, #2
 8005ffa:	0023      	movs	r3, r4
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	3343      	adds	r3, #67	; 0x43
 8006000:	701a      	strb	r2, [r3, #0]
 8006002:	6863      	ldr	r3, [r4, #4]
 8006004:	60a3      	str	r3, [r4, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	db03      	blt.n	8006012 <_printf_i+0xe6>
 800600a:	2204      	movs	r2, #4
 800600c:	6821      	ldr	r1, [r4, #0]
 800600e:	4391      	bics	r1, r2
 8006010:	6021      	str	r1, [r4, #0]
 8006012:	2d00      	cmp	r5, #0
 8006014:	d102      	bne.n	800601c <_printf_i+0xf0>
 8006016:	9e04      	ldr	r6, [sp, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00c      	beq.n	8006036 <_printf_i+0x10a>
 800601c:	9e04      	ldr	r6, [sp, #16]
 800601e:	0028      	movs	r0, r5
 8006020:	0039      	movs	r1, r7
 8006022:	f7fa f90d 	bl	8000240 <__aeabi_uidivmod>
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	3e01      	subs	r6, #1
 800602a:	5c5b      	ldrb	r3, [r3, r1]
 800602c:	7033      	strb	r3, [r6, #0]
 800602e:	002b      	movs	r3, r5
 8006030:	0005      	movs	r5, r0
 8006032:	429f      	cmp	r7, r3
 8006034:	d9f3      	bls.n	800601e <_printf_i+0xf2>
 8006036:	2f08      	cmp	r7, #8
 8006038:	d109      	bne.n	800604e <_printf_i+0x122>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	07db      	lsls	r3, r3, #31
 800603e:	d506      	bpl.n	800604e <_printf_i+0x122>
 8006040:	6863      	ldr	r3, [r4, #4]
 8006042:	6922      	ldr	r2, [r4, #16]
 8006044:	4293      	cmp	r3, r2
 8006046:	dc02      	bgt.n	800604e <_printf_i+0x122>
 8006048:	2330      	movs	r3, #48	; 0x30
 800604a:	3e01      	subs	r6, #1
 800604c:	7033      	strb	r3, [r6, #0]
 800604e:	9b04      	ldr	r3, [sp, #16]
 8006050:	1b9b      	subs	r3, r3, r6
 8006052:	6123      	str	r3, [r4, #16]
 8006054:	9b07      	ldr	r3, [sp, #28]
 8006056:	0021      	movs	r1, r4
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	9805      	ldr	r0, [sp, #20]
 800605c:	9b06      	ldr	r3, [sp, #24]
 800605e:	aa09      	add	r2, sp, #36	; 0x24
 8006060:	f7ff fef4 	bl	8005e4c <_printf_common>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d14c      	bne.n	8006102 <_printf_i+0x1d6>
 8006068:	2001      	movs	r0, #1
 800606a:	4240      	negs	r0, r0
 800606c:	b00b      	add	sp, #44	; 0x2c
 800606e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006070:	3145      	adds	r1, #69	; 0x45
 8006072:	700a      	strb	r2, [r1, #0]
 8006074:	4a34      	ldr	r2, [pc, #208]	; (8006148 <_printf_i+0x21c>)
 8006076:	9203      	str	r2, [sp, #12]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	6821      	ldr	r1, [r4, #0]
 800607c:	ca20      	ldmia	r2!, {r5}
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	0608      	lsls	r0, r1, #24
 8006082:	d516      	bpl.n	80060b2 <_printf_i+0x186>
 8006084:	07cb      	lsls	r3, r1, #31
 8006086:	d502      	bpl.n	800608e <_printf_i+0x162>
 8006088:	2320      	movs	r3, #32
 800608a:	4319      	orrs	r1, r3
 800608c:	6021      	str	r1, [r4, #0]
 800608e:	2710      	movs	r7, #16
 8006090:	2d00      	cmp	r5, #0
 8006092:	d1b2      	bne.n	8005ffa <_printf_i+0xce>
 8006094:	2320      	movs	r3, #32
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	439a      	bics	r2, r3
 800609a:	6022      	str	r2, [r4, #0]
 800609c:	e7ad      	b.n	8005ffa <_printf_i+0xce>
 800609e:	2220      	movs	r2, #32
 80060a0:	6809      	ldr	r1, [r1, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	0022      	movs	r2, r4
 80060a8:	2178      	movs	r1, #120	; 0x78
 80060aa:	3245      	adds	r2, #69	; 0x45
 80060ac:	7011      	strb	r1, [r2, #0]
 80060ae:	4a27      	ldr	r2, [pc, #156]	; (800614c <_printf_i+0x220>)
 80060b0:	e7e1      	b.n	8006076 <_printf_i+0x14a>
 80060b2:	0648      	lsls	r0, r1, #25
 80060b4:	d5e6      	bpl.n	8006084 <_printf_i+0x158>
 80060b6:	b2ad      	uxth	r5, r5
 80060b8:	e7e4      	b.n	8006084 <_printf_i+0x158>
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	680d      	ldr	r5, [r1, #0]
 80060be:	1d10      	adds	r0, r2, #4
 80060c0:	6949      	ldr	r1, [r1, #20]
 80060c2:	6018      	str	r0, [r3, #0]
 80060c4:	6813      	ldr	r3, [r2, #0]
 80060c6:	062e      	lsls	r6, r5, #24
 80060c8:	d501      	bpl.n	80060ce <_printf_i+0x1a2>
 80060ca:	6019      	str	r1, [r3, #0]
 80060cc:	e002      	b.n	80060d4 <_printf_i+0x1a8>
 80060ce:	066d      	lsls	r5, r5, #25
 80060d0:	d5fb      	bpl.n	80060ca <_printf_i+0x19e>
 80060d2:	8019      	strh	r1, [r3, #0]
 80060d4:	2300      	movs	r3, #0
 80060d6:	9e04      	ldr	r6, [sp, #16]
 80060d8:	6123      	str	r3, [r4, #16]
 80060da:	e7bb      	b.n	8006054 <_printf_i+0x128>
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	1d11      	adds	r1, r2, #4
 80060e0:	6019      	str	r1, [r3, #0]
 80060e2:	6816      	ldr	r6, [r2, #0]
 80060e4:	2100      	movs	r1, #0
 80060e6:	0030      	movs	r0, r6
 80060e8:	6862      	ldr	r2, [r4, #4]
 80060ea:	f000 fee5 	bl	8006eb8 <memchr>
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d001      	beq.n	80060f6 <_printf_i+0x1ca>
 80060f2:	1b80      	subs	r0, r0, r6
 80060f4:	6060      	str	r0, [r4, #4]
 80060f6:	6863      	ldr	r3, [r4, #4]
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	2300      	movs	r3, #0
 80060fc:	9a04      	ldr	r2, [sp, #16]
 80060fe:	7013      	strb	r3, [r2, #0]
 8006100:	e7a8      	b.n	8006054 <_printf_i+0x128>
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	0032      	movs	r2, r6
 8006106:	9906      	ldr	r1, [sp, #24]
 8006108:	9805      	ldr	r0, [sp, #20]
 800610a:	9d07      	ldr	r5, [sp, #28]
 800610c:	47a8      	blx	r5
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	d0aa      	beq.n	8006068 <_printf_i+0x13c>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	079b      	lsls	r3, r3, #30
 8006116:	d415      	bmi.n	8006144 <_printf_i+0x218>
 8006118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800611a:	68e0      	ldr	r0, [r4, #12]
 800611c:	4298      	cmp	r0, r3
 800611e:	daa5      	bge.n	800606c <_printf_i+0x140>
 8006120:	0018      	movs	r0, r3
 8006122:	e7a3      	b.n	800606c <_printf_i+0x140>
 8006124:	0022      	movs	r2, r4
 8006126:	2301      	movs	r3, #1
 8006128:	9906      	ldr	r1, [sp, #24]
 800612a:	9805      	ldr	r0, [sp, #20]
 800612c:	9e07      	ldr	r6, [sp, #28]
 800612e:	3219      	adds	r2, #25
 8006130:	47b0      	blx	r6
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d098      	beq.n	8006068 <_printf_i+0x13c>
 8006136:	3501      	adds	r5, #1
 8006138:	68e3      	ldr	r3, [r4, #12]
 800613a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	42ab      	cmp	r3, r5
 8006140:	dcf0      	bgt.n	8006124 <_printf_i+0x1f8>
 8006142:	e7e9      	b.n	8006118 <_printf_i+0x1ec>
 8006144:	2500      	movs	r5, #0
 8006146:	e7f7      	b.n	8006138 <_printf_i+0x20c>
 8006148:	080084fe 	.word	0x080084fe
 800614c:	0800850f 	.word	0x0800850f

08006150 <quorem>:
 8006150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006152:	0006      	movs	r6, r0
 8006154:	690b      	ldr	r3, [r1, #16]
 8006156:	6932      	ldr	r2, [r6, #16]
 8006158:	b087      	sub	sp, #28
 800615a:	2000      	movs	r0, #0
 800615c:	9103      	str	r1, [sp, #12]
 800615e:	429a      	cmp	r2, r3
 8006160:	db65      	blt.n	800622e <quorem+0xde>
 8006162:	3b01      	subs	r3, #1
 8006164:	009c      	lsls	r4, r3, #2
 8006166:	9300      	str	r3, [sp, #0]
 8006168:	000b      	movs	r3, r1
 800616a:	3314      	adds	r3, #20
 800616c:	9305      	str	r3, [sp, #20]
 800616e:	191b      	adds	r3, r3, r4
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	0033      	movs	r3, r6
 8006174:	3314      	adds	r3, #20
 8006176:	9302      	str	r3, [sp, #8]
 8006178:	191c      	adds	r4, r3, r4
 800617a:	9b04      	ldr	r3, [sp, #16]
 800617c:	6827      	ldr	r7, [r4, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	0038      	movs	r0, r7
 8006182:	1c5d      	adds	r5, r3, #1
 8006184:	0029      	movs	r1, r5
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	f7f9 ffd4 	bl	8000134 <__udivsi3>
 800618c:	9001      	str	r0, [sp, #4]
 800618e:	42af      	cmp	r7, r5
 8006190:	d324      	bcc.n	80061dc <quorem+0x8c>
 8006192:	2500      	movs	r5, #0
 8006194:	46ac      	mov	ip, r5
 8006196:	9802      	ldr	r0, [sp, #8]
 8006198:	9f05      	ldr	r7, [sp, #20]
 800619a:	cf08      	ldmia	r7!, {r3}
 800619c:	9a01      	ldr	r2, [sp, #4]
 800619e:	b299      	uxth	r1, r3
 80061a0:	4351      	muls	r1, r2
 80061a2:	0c1b      	lsrs	r3, r3, #16
 80061a4:	4353      	muls	r3, r2
 80061a6:	1949      	adds	r1, r1, r5
 80061a8:	0c0a      	lsrs	r2, r1, #16
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	6802      	ldr	r2, [r0, #0]
 80061ae:	b289      	uxth	r1, r1
 80061b0:	b292      	uxth	r2, r2
 80061b2:	4462      	add	r2, ip
 80061b4:	1a52      	subs	r2, r2, r1
 80061b6:	6801      	ldr	r1, [r0, #0]
 80061b8:	0c1d      	lsrs	r5, r3, #16
 80061ba:	0c09      	lsrs	r1, r1, #16
 80061bc:	b29b      	uxth	r3, r3
 80061be:	1acb      	subs	r3, r1, r3
 80061c0:	1411      	asrs	r1, r2, #16
 80061c2:	185b      	adds	r3, r3, r1
 80061c4:	1419      	asrs	r1, r3, #16
 80061c6:	b292      	uxth	r2, r2
 80061c8:	041b      	lsls	r3, r3, #16
 80061ca:	431a      	orrs	r2, r3
 80061cc:	9b04      	ldr	r3, [sp, #16]
 80061ce:	468c      	mov	ip, r1
 80061d0:	c004      	stmia	r0!, {r2}
 80061d2:	42bb      	cmp	r3, r7
 80061d4:	d2e1      	bcs.n	800619a <quorem+0x4a>
 80061d6:	6823      	ldr	r3, [r4, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d030      	beq.n	800623e <quorem+0xee>
 80061dc:	0030      	movs	r0, r6
 80061de:	9903      	ldr	r1, [sp, #12]
 80061e0:	f001 f902 	bl	80073e8 <__mcmp>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	db21      	blt.n	800622c <quorem+0xdc>
 80061e8:	0030      	movs	r0, r6
 80061ea:	2400      	movs	r4, #0
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	9903      	ldr	r1, [sp, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	3014      	adds	r0, #20
 80061f6:	3114      	adds	r1, #20
 80061f8:	6803      	ldr	r3, [r0, #0]
 80061fa:	c920      	ldmia	r1!, {r5}
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	1914      	adds	r4, r2, r4
 8006200:	b2aa      	uxth	r2, r5
 8006202:	1aa2      	subs	r2, r4, r2
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	0c2d      	lsrs	r5, r5, #16
 8006208:	1414      	asrs	r4, r2, #16
 800620a:	1b5b      	subs	r3, r3, r5
 800620c:	191b      	adds	r3, r3, r4
 800620e:	141c      	asrs	r4, r3, #16
 8006210:	b292      	uxth	r2, r2
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	4313      	orrs	r3, r2
 8006216:	c008      	stmia	r0!, {r3}
 8006218:	9b04      	ldr	r3, [sp, #16]
 800621a:	428b      	cmp	r3, r1
 800621c:	d2ec      	bcs.n	80061f8 <quorem+0xa8>
 800621e:	9b00      	ldr	r3, [sp, #0]
 8006220:	9a02      	ldr	r2, [sp, #8]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	18d3      	adds	r3, r2, r3
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	2a00      	cmp	r2, #0
 800622a:	d015      	beq.n	8006258 <quorem+0x108>
 800622c:	9801      	ldr	r0, [sp, #4]
 800622e:	b007      	add	sp, #28
 8006230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <quorem+0xf6>
 8006238:	9b00      	ldr	r3, [sp, #0]
 800623a:	3b01      	subs	r3, #1
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	9b02      	ldr	r3, [sp, #8]
 8006240:	3c04      	subs	r4, #4
 8006242:	42a3      	cmp	r3, r4
 8006244:	d3f5      	bcc.n	8006232 <quorem+0xe2>
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	6133      	str	r3, [r6, #16]
 800624a:	e7c7      	b.n	80061dc <quorem+0x8c>
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	2a00      	cmp	r2, #0
 8006250:	d106      	bne.n	8006260 <quorem+0x110>
 8006252:	9a00      	ldr	r2, [sp, #0]
 8006254:	3a01      	subs	r2, #1
 8006256:	9200      	str	r2, [sp, #0]
 8006258:	9a02      	ldr	r2, [sp, #8]
 800625a:	3b04      	subs	r3, #4
 800625c:	429a      	cmp	r2, r3
 800625e:	d3f5      	bcc.n	800624c <quorem+0xfc>
 8006260:	9b00      	ldr	r3, [sp, #0]
 8006262:	6133      	str	r3, [r6, #16]
 8006264:	e7e2      	b.n	800622c <quorem+0xdc>
	...

08006268 <_dtoa_r>:
 8006268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800626a:	b09d      	sub	sp, #116	; 0x74
 800626c:	9202      	str	r2, [sp, #8]
 800626e:	9303      	str	r3, [sp, #12]
 8006270:	9b02      	ldr	r3, [sp, #8]
 8006272:	9c03      	ldr	r4, [sp, #12]
 8006274:	9308      	str	r3, [sp, #32]
 8006276:	9409      	str	r4, [sp, #36]	; 0x24
 8006278:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800627a:	0007      	movs	r7, r0
 800627c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800627e:	2c00      	cmp	r4, #0
 8006280:	d10e      	bne.n	80062a0 <_dtoa_r+0x38>
 8006282:	2010      	movs	r0, #16
 8006284:	f000 fe0e 	bl	8006ea4 <malloc>
 8006288:	1e02      	subs	r2, r0, #0
 800628a:	6278      	str	r0, [r7, #36]	; 0x24
 800628c:	d104      	bne.n	8006298 <_dtoa_r+0x30>
 800628e:	21ea      	movs	r1, #234	; 0xea
 8006290:	4bc7      	ldr	r3, [pc, #796]	; (80065b0 <_dtoa_r+0x348>)
 8006292:	48c8      	ldr	r0, [pc, #800]	; (80065b4 <_dtoa_r+0x34c>)
 8006294:	f001 fae0 	bl	8007858 <__assert_func>
 8006298:	6044      	str	r4, [r0, #4]
 800629a:	6084      	str	r4, [r0, #8]
 800629c:	6004      	str	r4, [r0, #0]
 800629e:	60c4      	str	r4, [r0, #12]
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	2900      	cmp	r1, #0
 80062a6:	d00a      	beq.n	80062be <_dtoa_r+0x56>
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	2301      	movs	r3, #1
 80062ac:	4093      	lsls	r3, r2
 80062ae:	604a      	str	r2, [r1, #4]
 80062b0:	608b      	str	r3, [r1, #8]
 80062b2:	0038      	movs	r0, r7
 80062b4:	f000 fe58 	bl	8006f68 <_Bfree>
 80062b8:	2200      	movs	r2, #0
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	9b03      	ldr	r3, [sp, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da20      	bge.n	8006306 <_dtoa_r+0x9e>
 80062c4:	2301      	movs	r3, #1
 80062c6:	602b      	str	r3, [r5, #0]
 80062c8:	9b03      	ldr	r3, [sp, #12]
 80062ca:	005b      	lsls	r3, r3, #1
 80062cc:	085b      	lsrs	r3, r3, #1
 80062ce:	9309      	str	r3, [sp, #36]	; 0x24
 80062d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80062d2:	4bb9      	ldr	r3, [pc, #740]	; (80065b8 <_dtoa_r+0x350>)
 80062d4:	4ab8      	ldr	r2, [pc, #736]	; (80065b8 <_dtoa_r+0x350>)
 80062d6:	402b      	ands	r3, r5
 80062d8:	4293      	cmp	r3, r2
 80062da:	d117      	bne.n	800630c <_dtoa_r+0xa4>
 80062dc:	4bb7      	ldr	r3, [pc, #732]	; (80065bc <_dtoa_r+0x354>)
 80062de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062e0:	0328      	lsls	r0, r5, #12
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	9b02      	ldr	r3, [sp, #8]
 80062e6:	0b00      	lsrs	r0, r0, #12
 80062e8:	4318      	orrs	r0, r3
 80062ea:	d101      	bne.n	80062f0 <_dtoa_r+0x88>
 80062ec:	f000 fdbf 	bl	8006e6e <_dtoa_r+0xc06>
 80062f0:	48b3      	ldr	r0, [pc, #716]	; (80065c0 <_dtoa_r+0x358>)
 80062f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062f4:	9006      	str	r0, [sp, #24]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <_dtoa_r+0x98>
 80062fa:	4bb2      	ldr	r3, [pc, #712]	; (80065c4 <_dtoa_r+0x35c>)
 80062fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	9806      	ldr	r0, [sp, #24]
 8006302:	b01d      	add	sp, #116	; 0x74
 8006304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006306:	2300      	movs	r3, #0
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	e7e1      	b.n	80062d0 <_dtoa_r+0x68>
 800630c:	9b08      	ldr	r3, [sp, #32]
 800630e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006310:	9312      	str	r3, [sp, #72]	; 0x48
 8006312:	9413      	str	r4, [sp, #76]	; 0x4c
 8006314:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006316:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006318:	2200      	movs	r2, #0
 800631a:	2300      	movs	r3, #0
 800631c:	f7fa f890 	bl	8000440 <__aeabi_dcmpeq>
 8006320:	1e04      	subs	r4, r0, #0
 8006322:	d009      	beq.n	8006338 <_dtoa_r+0xd0>
 8006324:	2301      	movs	r3, #1
 8006326:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	4ba7      	ldr	r3, [pc, #668]	; (80065c8 <_dtoa_r+0x360>)
 800632c:	9306      	str	r3, [sp, #24]
 800632e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0e5      	beq.n	8006300 <_dtoa_r+0x98>
 8006334:	4ba5      	ldr	r3, [pc, #660]	; (80065cc <_dtoa_r+0x364>)
 8006336:	e7e1      	b.n	80062fc <_dtoa_r+0x94>
 8006338:	ab1a      	add	r3, sp, #104	; 0x68
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	ab1b      	add	r3, sp, #108	; 0x6c
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	0038      	movs	r0, r7
 8006342:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006346:	f001 f903 	bl	8007550 <__d2b>
 800634a:	006e      	lsls	r6, r5, #1
 800634c:	9005      	str	r0, [sp, #20]
 800634e:	0d76      	lsrs	r6, r6, #21
 8006350:	d100      	bne.n	8006354 <_dtoa_r+0xec>
 8006352:	e07c      	b.n	800644e <_dtoa_r+0x1e6>
 8006354:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006356:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800635a:	4a9d      	ldr	r2, [pc, #628]	; (80065d0 <_dtoa_r+0x368>)
 800635c:	031b      	lsls	r3, r3, #12
 800635e:	0b1b      	lsrs	r3, r3, #12
 8006360:	431a      	orrs	r2, r3
 8006362:	0011      	movs	r1, r2
 8006364:	4b9b      	ldr	r3, [pc, #620]	; (80065d4 <_dtoa_r+0x36c>)
 8006366:	9418      	str	r4, [sp, #96]	; 0x60
 8006368:	18f6      	adds	r6, r6, r3
 800636a:	2200      	movs	r2, #0
 800636c:	4b9a      	ldr	r3, [pc, #616]	; (80065d8 <_dtoa_r+0x370>)
 800636e:	f7fb fa3f 	bl	80017f0 <__aeabi_dsub>
 8006372:	4a9a      	ldr	r2, [pc, #616]	; (80065dc <_dtoa_r+0x374>)
 8006374:	4b9a      	ldr	r3, [pc, #616]	; (80065e0 <_dtoa_r+0x378>)
 8006376:	f7fa ffcf 	bl	8001318 <__aeabi_dmul>
 800637a:	4a9a      	ldr	r2, [pc, #616]	; (80065e4 <_dtoa_r+0x37c>)
 800637c:	4b9a      	ldr	r3, [pc, #616]	; (80065e8 <_dtoa_r+0x380>)
 800637e:	f7fa f88d 	bl	800049c <__aeabi_dadd>
 8006382:	0004      	movs	r4, r0
 8006384:	0030      	movs	r0, r6
 8006386:	000d      	movs	r5, r1
 8006388:	f7fb fe18 	bl	8001fbc <__aeabi_i2d>
 800638c:	4a97      	ldr	r2, [pc, #604]	; (80065ec <_dtoa_r+0x384>)
 800638e:	4b98      	ldr	r3, [pc, #608]	; (80065f0 <_dtoa_r+0x388>)
 8006390:	f7fa ffc2 	bl	8001318 <__aeabi_dmul>
 8006394:	0002      	movs	r2, r0
 8006396:	000b      	movs	r3, r1
 8006398:	0020      	movs	r0, r4
 800639a:	0029      	movs	r1, r5
 800639c:	f7fa f87e 	bl	800049c <__aeabi_dadd>
 80063a0:	0004      	movs	r4, r0
 80063a2:	000d      	movs	r5, r1
 80063a4:	f7fb fdd4 	bl	8001f50 <__aeabi_d2iz>
 80063a8:	2200      	movs	r2, #0
 80063aa:	9002      	str	r0, [sp, #8]
 80063ac:	2300      	movs	r3, #0
 80063ae:	0020      	movs	r0, r4
 80063b0:	0029      	movs	r1, r5
 80063b2:	f7fa f84b 	bl	800044c <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d00b      	beq.n	80063d2 <_dtoa_r+0x16a>
 80063ba:	9802      	ldr	r0, [sp, #8]
 80063bc:	f7fb fdfe 	bl	8001fbc <__aeabi_i2d>
 80063c0:	002b      	movs	r3, r5
 80063c2:	0022      	movs	r2, r4
 80063c4:	f7fa f83c 	bl	8000440 <__aeabi_dcmpeq>
 80063c8:	4243      	negs	r3, r0
 80063ca:	4158      	adcs	r0, r3
 80063cc:	9b02      	ldr	r3, [sp, #8]
 80063ce:	1a1b      	subs	r3, r3, r0
 80063d0:	9302      	str	r3, [sp, #8]
 80063d2:	2301      	movs	r3, #1
 80063d4:	9316      	str	r3, [sp, #88]	; 0x58
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	2b16      	cmp	r3, #22
 80063da:	d80f      	bhi.n	80063fc <_dtoa_r+0x194>
 80063dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80063de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80063e0:	00da      	lsls	r2, r3, #3
 80063e2:	4b84      	ldr	r3, [pc, #528]	; (80065f4 <_dtoa_r+0x38c>)
 80063e4:	189b      	adds	r3, r3, r2
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f7fa f82f 	bl	800044c <__aeabi_dcmplt>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d049      	beq.n	8006486 <_dtoa_r+0x21e>
 80063f2:	9b02      	ldr	r3, [sp, #8]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	9302      	str	r3, [sp, #8]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9316      	str	r3, [sp, #88]	; 0x58
 80063fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80063fe:	1b9e      	subs	r6, r3, r6
 8006400:	2300      	movs	r3, #0
 8006402:	930a      	str	r3, [sp, #40]	; 0x28
 8006404:	0033      	movs	r3, r6
 8006406:	3b01      	subs	r3, #1
 8006408:	930d      	str	r3, [sp, #52]	; 0x34
 800640a:	d504      	bpl.n	8006416 <_dtoa_r+0x1ae>
 800640c:	2301      	movs	r3, #1
 800640e:	1b9b      	subs	r3, r3, r6
 8006410:	930a      	str	r3, [sp, #40]	; 0x28
 8006412:	2300      	movs	r3, #0
 8006414:	930d      	str	r3, [sp, #52]	; 0x34
 8006416:	9b02      	ldr	r3, [sp, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	db36      	blt.n	800648a <_dtoa_r+0x222>
 800641c:	9a02      	ldr	r2, [sp, #8]
 800641e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006420:	4694      	mov	ip, r2
 8006422:	4463      	add	r3, ip
 8006424:	930d      	str	r3, [sp, #52]	; 0x34
 8006426:	2300      	movs	r3, #0
 8006428:	9215      	str	r2, [sp, #84]	; 0x54
 800642a:	930e      	str	r3, [sp, #56]	; 0x38
 800642c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800642e:	2401      	movs	r4, #1
 8006430:	2b09      	cmp	r3, #9
 8006432:	d864      	bhi.n	80064fe <_dtoa_r+0x296>
 8006434:	2b05      	cmp	r3, #5
 8006436:	dd02      	ble.n	800643e <_dtoa_r+0x1d6>
 8006438:	2400      	movs	r4, #0
 800643a:	3b04      	subs	r3, #4
 800643c:	9322      	str	r3, [sp, #136]	; 0x88
 800643e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006440:	1e98      	subs	r0, r3, #2
 8006442:	2803      	cmp	r0, #3
 8006444:	d864      	bhi.n	8006510 <_dtoa_r+0x2a8>
 8006446:	f7f9 fe61 	bl	800010c <__gnu_thumb1_case_uqi>
 800644a:	3829      	.short	0x3829
 800644c:	5836      	.short	0x5836
 800644e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006450:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006452:	189e      	adds	r6, r3, r2
 8006454:	4b68      	ldr	r3, [pc, #416]	; (80065f8 <_dtoa_r+0x390>)
 8006456:	18f2      	adds	r2, r6, r3
 8006458:	2a20      	cmp	r2, #32
 800645a:	dd0f      	ble.n	800647c <_dtoa_r+0x214>
 800645c:	2340      	movs	r3, #64	; 0x40
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	409d      	lsls	r5, r3
 8006462:	4b66      	ldr	r3, [pc, #408]	; (80065fc <_dtoa_r+0x394>)
 8006464:	9802      	ldr	r0, [sp, #8]
 8006466:	18f3      	adds	r3, r6, r3
 8006468:	40d8      	lsrs	r0, r3
 800646a:	4328      	orrs	r0, r5
 800646c:	f7fb fdd6 	bl	800201c <__aeabi_ui2d>
 8006470:	2301      	movs	r3, #1
 8006472:	4c63      	ldr	r4, [pc, #396]	; (8006600 <_dtoa_r+0x398>)
 8006474:	3e01      	subs	r6, #1
 8006476:	1909      	adds	r1, r1, r4
 8006478:	9318      	str	r3, [sp, #96]	; 0x60
 800647a:	e776      	b.n	800636a <_dtoa_r+0x102>
 800647c:	2320      	movs	r3, #32
 800647e:	9802      	ldr	r0, [sp, #8]
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	4098      	lsls	r0, r3
 8006484:	e7f2      	b.n	800646c <_dtoa_r+0x204>
 8006486:	9016      	str	r0, [sp, #88]	; 0x58
 8006488:	e7b8      	b.n	80063fc <_dtoa_r+0x194>
 800648a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648c:	9a02      	ldr	r2, [sp, #8]
 800648e:	1a9b      	subs	r3, r3, r2
 8006490:	930a      	str	r3, [sp, #40]	; 0x28
 8006492:	4253      	negs	r3, r2
 8006494:	930e      	str	r3, [sp, #56]	; 0x38
 8006496:	2300      	movs	r3, #0
 8006498:	9315      	str	r3, [sp, #84]	; 0x54
 800649a:	e7c7      	b.n	800642c <_dtoa_r+0x1c4>
 800649c:	2300      	movs	r3, #0
 800649e:	930f      	str	r3, [sp, #60]	; 0x3c
 80064a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064a2:	930c      	str	r3, [sp, #48]	; 0x30
 80064a4:	9307      	str	r3, [sp, #28]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dc13      	bgt.n	80064d2 <_dtoa_r+0x26a>
 80064aa:	2301      	movs	r3, #1
 80064ac:	001a      	movs	r2, r3
 80064ae:	930c      	str	r3, [sp, #48]	; 0x30
 80064b0:	9307      	str	r3, [sp, #28]
 80064b2:	9223      	str	r2, [sp, #140]	; 0x8c
 80064b4:	e00d      	b.n	80064d2 <_dtoa_r+0x26a>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e7f1      	b.n	800649e <_dtoa_r+0x236>
 80064ba:	2300      	movs	r3, #0
 80064bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80064be:	930f      	str	r3, [sp, #60]	; 0x3c
 80064c0:	4694      	mov	ip, r2
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	4463      	add	r3, ip
 80064c6:	930c      	str	r3, [sp, #48]	; 0x30
 80064c8:	3301      	adds	r3, #1
 80064ca:	9307      	str	r3, [sp, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dc00      	bgt.n	80064d2 <_dtoa_r+0x26a>
 80064d0:	2301      	movs	r3, #1
 80064d2:	2200      	movs	r2, #0
 80064d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064d6:	6042      	str	r2, [r0, #4]
 80064d8:	3204      	adds	r2, #4
 80064da:	0015      	movs	r5, r2
 80064dc:	3514      	adds	r5, #20
 80064de:	6841      	ldr	r1, [r0, #4]
 80064e0:	429d      	cmp	r5, r3
 80064e2:	d919      	bls.n	8006518 <_dtoa_r+0x2b0>
 80064e4:	0038      	movs	r0, r7
 80064e6:	f000 fcfb 	bl	8006ee0 <_Balloc>
 80064ea:	9006      	str	r0, [sp, #24]
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d117      	bne.n	8006520 <_dtoa_r+0x2b8>
 80064f0:	21d5      	movs	r1, #213	; 0xd5
 80064f2:	0002      	movs	r2, r0
 80064f4:	4b43      	ldr	r3, [pc, #268]	; (8006604 <_dtoa_r+0x39c>)
 80064f6:	0049      	lsls	r1, r1, #1
 80064f8:	e6cb      	b.n	8006292 <_dtoa_r+0x2a>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e7de      	b.n	80064bc <_dtoa_r+0x254>
 80064fe:	2300      	movs	r3, #0
 8006500:	940f      	str	r4, [sp, #60]	; 0x3c
 8006502:	9322      	str	r3, [sp, #136]	; 0x88
 8006504:	3b01      	subs	r3, #1
 8006506:	930c      	str	r3, [sp, #48]	; 0x30
 8006508:	9307      	str	r3, [sp, #28]
 800650a:	2200      	movs	r2, #0
 800650c:	3313      	adds	r3, #19
 800650e:	e7d0      	b.n	80064b2 <_dtoa_r+0x24a>
 8006510:	2301      	movs	r3, #1
 8006512:	930f      	str	r3, [sp, #60]	; 0x3c
 8006514:	3b02      	subs	r3, #2
 8006516:	e7f6      	b.n	8006506 <_dtoa_r+0x29e>
 8006518:	3101      	adds	r1, #1
 800651a:	6041      	str	r1, [r0, #4]
 800651c:	0052      	lsls	r2, r2, #1
 800651e:	e7dc      	b.n	80064da <_dtoa_r+0x272>
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	9a06      	ldr	r2, [sp, #24]
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	2b0e      	cmp	r3, #14
 800652a:	d900      	bls.n	800652e <_dtoa_r+0x2c6>
 800652c:	e0eb      	b.n	8006706 <_dtoa_r+0x49e>
 800652e:	2c00      	cmp	r4, #0
 8006530:	d100      	bne.n	8006534 <_dtoa_r+0x2cc>
 8006532:	e0e8      	b.n	8006706 <_dtoa_r+0x49e>
 8006534:	9b02      	ldr	r3, [sp, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	dd68      	ble.n	800660c <_dtoa_r+0x3a4>
 800653a:	001a      	movs	r2, r3
 800653c:	210f      	movs	r1, #15
 800653e:	4b2d      	ldr	r3, [pc, #180]	; (80065f4 <_dtoa_r+0x38c>)
 8006540:	400a      	ands	r2, r1
 8006542:	00d2      	lsls	r2, r2, #3
 8006544:	189b      	adds	r3, r3, r2
 8006546:	681d      	ldr	r5, [r3, #0]
 8006548:	685e      	ldr	r6, [r3, #4]
 800654a:	9b02      	ldr	r3, [sp, #8]
 800654c:	111c      	asrs	r4, r3, #4
 800654e:	2302      	movs	r3, #2
 8006550:	9310      	str	r3, [sp, #64]	; 0x40
 8006552:	9b02      	ldr	r3, [sp, #8]
 8006554:	05db      	lsls	r3, r3, #23
 8006556:	d50b      	bpl.n	8006570 <_dtoa_r+0x308>
 8006558:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <_dtoa_r+0x3a0>)
 800655a:	400c      	ands	r4, r1
 800655c:	6a1a      	ldr	r2, [r3, #32]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006562:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006564:	f7fa fad6 	bl	8000b14 <__aeabi_ddiv>
 8006568:	2303      	movs	r3, #3
 800656a:	9008      	str	r0, [sp, #32]
 800656c:	9109      	str	r1, [sp, #36]	; 0x24
 800656e:	9310      	str	r3, [sp, #64]	; 0x40
 8006570:	4b25      	ldr	r3, [pc, #148]	; (8006608 <_dtoa_r+0x3a0>)
 8006572:	9314      	str	r3, [sp, #80]	; 0x50
 8006574:	2c00      	cmp	r4, #0
 8006576:	d108      	bne.n	800658a <_dtoa_r+0x322>
 8006578:	9808      	ldr	r0, [sp, #32]
 800657a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800657c:	002a      	movs	r2, r5
 800657e:	0033      	movs	r3, r6
 8006580:	f7fa fac8 	bl	8000b14 <__aeabi_ddiv>
 8006584:	9008      	str	r0, [sp, #32]
 8006586:	9109      	str	r1, [sp, #36]	; 0x24
 8006588:	e05c      	b.n	8006644 <_dtoa_r+0x3dc>
 800658a:	2301      	movs	r3, #1
 800658c:	421c      	tst	r4, r3
 800658e:	d00b      	beq.n	80065a8 <_dtoa_r+0x340>
 8006590:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006592:	0028      	movs	r0, r5
 8006594:	3301      	adds	r3, #1
 8006596:	9310      	str	r3, [sp, #64]	; 0x40
 8006598:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800659a:	0031      	movs	r1, r6
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f7fa feba 	bl	8001318 <__aeabi_dmul>
 80065a4:	0005      	movs	r5, r0
 80065a6:	000e      	movs	r6, r1
 80065a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80065aa:	1064      	asrs	r4, r4, #1
 80065ac:	3308      	adds	r3, #8
 80065ae:	e7e0      	b.n	8006572 <_dtoa_r+0x30a>
 80065b0:	0800852d 	.word	0x0800852d
 80065b4:	08008544 	.word	0x08008544
 80065b8:	7ff00000 	.word	0x7ff00000
 80065bc:	0000270f 	.word	0x0000270f
 80065c0:	08008529 	.word	0x08008529
 80065c4:	0800852c 	.word	0x0800852c
 80065c8:	080084fc 	.word	0x080084fc
 80065cc:	080084fd 	.word	0x080084fd
 80065d0:	3ff00000 	.word	0x3ff00000
 80065d4:	fffffc01 	.word	0xfffffc01
 80065d8:	3ff80000 	.word	0x3ff80000
 80065dc:	636f4361 	.word	0x636f4361
 80065e0:	3fd287a7 	.word	0x3fd287a7
 80065e4:	8b60c8b3 	.word	0x8b60c8b3
 80065e8:	3fc68a28 	.word	0x3fc68a28
 80065ec:	509f79fb 	.word	0x509f79fb
 80065f0:	3fd34413 	.word	0x3fd34413
 80065f4:	08008638 	.word	0x08008638
 80065f8:	00000432 	.word	0x00000432
 80065fc:	00000412 	.word	0x00000412
 8006600:	fe100000 	.word	0xfe100000
 8006604:	0800859f 	.word	0x0800859f
 8006608:	08008610 	.word	0x08008610
 800660c:	2302      	movs	r3, #2
 800660e:	9310      	str	r3, [sp, #64]	; 0x40
 8006610:	9b02      	ldr	r3, [sp, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d016      	beq.n	8006644 <_dtoa_r+0x3dc>
 8006616:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006618:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800661a:	425c      	negs	r4, r3
 800661c:	230f      	movs	r3, #15
 800661e:	4ab6      	ldr	r2, [pc, #728]	; (80068f8 <_dtoa_r+0x690>)
 8006620:	4023      	ands	r3, r4
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	18d3      	adds	r3, r2, r3
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f7fa fe75 	bl	8001318 <__aeabi_dmul>
 800662e:	2601      	movs	r6, #1
 8006630:	2300      	movs	r3, #0
 8006632:	9008      	str	r0, [sp, #32]
 8006634:	9109      	str	r1, [sp, #36]	; 0x24
 8006636:	4db1      	ldr	r5, [pc, #708]	; (80068fc <_dtoa_r+0x694>)
 8006638:	1124      	asrs	r4, r4, #4
 800663a:	2c00      	cmp	r4, #0
 800663c:	d000      	beq.n	8006640 <_dtoa_r+0x3d8>
 800663e:	e094      	b.n	800676a <_dtoa_r+0x502>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d19f      	bne.n	8006584 <_dtoa_r+0x31c>
 8006644:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006646:	2b00      	cmp	r3, #0
 8006648:	d100      	bne.n	800664c <_dtoa_r+0x3e4>
 800664a:	e09b      	b.n	8006784 <_dtoa_r+0x51c>
 800664c:	9c08      	ldr	r4, [sp, #32]
 800664e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006650:	2200      	movs	r2, #0
 8006652:	0020      	movs	r0, r4
 8006654:	0029      	movs	r1, r5
 8006656:	4baa      	ldr	r3, [pc, #680]	; (8006900 <_dtoa_r+0x698>)
 8006658:	f7f9 fef8 	bl	800044c <__aeabi_dcmplt>
 800665c:	2800      	cmp	r0, #0
 800665e:	d100      	bne.n	8006662 <_dtoa_r+0x3fa>
 8006660:	e090      	b.n	8006784 <_dtoa_r+0x51c>
 8006662:	9b07      	ldr	r3, [sp, #28]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d100      	bne.n	800666a <_dtoa_r+0x402>
 8006668:	e08c      	b.n	8006784 <_dtoa_r+0x51c>
 800666a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd46      	ble.n	80066fe <_dtoa_r+0x496>
 8006670:	9b02      	ldr	r3, [sp, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	0020      	movs	r0, r4
 8006676:	0029      	movs	r1, r5
 8006678:	1e5e      	subs	r6, r3, #1
 800667a:	4ba2      	ldr	r3, [pc, #648]	; (8006904 <_dtoa_r+0x69c>)
 800667c:	f7fa fe4c 	bl	8001318 <__aeabi_dmul>
 8006680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006682:	9008      	str	r0, [sp, #32]
 8006684:	9109      	str	r1, [sp, #36]	; 0x24
 8006686:	3301      	adds	r3, #1
 8006688:	9310      	str	r3, [sp, #64]	; 0x40
 800668a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800668c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800668e:	9c08      	ldr	r4, [sp, #32]
 8006690:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006692:	9314      	str	r3, [sp, #80]	; 0x50
 8006694:	f7fb fc92 	bl	8001fbc <__aeabi_i2d>
 8006698:	0022      	movs	r2, r4
 800669a:	002b      	movs	r3, r5
 800669c:	f7fa fe3c 	bl	8001318 <__aeabi_dmul>
 80066a0:	2200      	movs	r2, #0
 80066a2:	4b99      	ldr	r3, [pc, #612]	; (8006908 <_dtoa_r+0x6a0>)
 80066a4:	f7f9 fefa 	bl	800049c <__aeabi_dadd>
 80066a8:	9010      	str	r0, [sp, #64]	; 0x40
 80066aa:	9111      	str	r1, [sp, #68]	; 0x44
 80066ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80066ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b0:	9208      	str	r2, [sp, #32]
 80066b2:	9309      	str	r3, [sp, #36]	; 0x24
 80066b4:	4a95      	ldr	r2, [pc, #596]	; (800690c <_dtoa_r+0x6a4>)
 80066b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066b8:	4694      	mov	ip, r2
 80066ba:	4463      	add	r3, ip
 80066bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80066be:	9309      	str	r3, [sp, #36]	; 0x24
 80066c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d161      	bne.n	800678a <_dtoa_r+0x522>
 80066c6:	2200      	movs	r2, #0
 80066c8:	0020      	movs	r0, r4
 80066ca:	0029      	movs	r1, r5
 80066cc:	4b90      	ldr	r3, [pc, #576]	; (8006910 <_dtoa_r+0x6a8>)
 80066ce:	f7fb f88f 	bl	80017f0 <__aeabi_dsub>
 80066d2:	9a08      	ldr	r2, [sp, #32]
 80066d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066d6:	0004      	movs	r4, r0
 80066d8:	000d      	movs	r5, r1
 80066da:	f7f9 fecb 	bl	8000474 <__aeabi_dcmpgt>
 80066de:	2800      	cmp	r0, #0
 80066e0:	d000      	beq.n	80066e4 <_dtoa_r+0x47c>
 80066e2:	e2af      	b.n	8006c44 <_dtoa_r+0x9dc>
 80066e4:	488b      	ldr	r0, [pc, #556]	; (8006914 <_dtoa_r+0x6ac>)
 80066e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80066e8:	4684      	mov	ip, r0
 80066ea:	4461      	add	r1, ip
 80066ec:	000b      	movs	r3, r1
 80066ee:	0020      	movs	r0, r4
 80066f0:	0029      	movs	r1, r5
 80066f2:	9a08      	ldr	r2, [sp, #32]
 80066f4:	f7f9 feaa 	bl	800044c <__aeabi_dcmplt>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	d000      	beq.n	80066fe <_dtoa_r+0x496>
 80066fc:	e29f      	b.n	8006c3e <_dtoa_r+0x9d6>
 80066fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006700:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8006702:	9308      	str	r3, [sp, #32]
 8006704:	9409      	str	r4, [sp, #36]	; 0x24
 8006706:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006708:	2b00      	cmp	r3, #0
 800670a:	da00      	bge.n	800670e <_dtoa_r+0x4a6>
 800670c:	e172      	b.n	80069f4 <_dtoa_r+0x78c>
 800670e:	9a02      	ldr	r2, [sp, #8]
 8006710:	2a0e      	cmp	r2, #14
 8006712:	dd00      	ble.n	8006716 <_dtoa_r+0x4ae>
 8006714:	e16e      	b.n	80069f4 <_dtoa_r+0x78c>
 8006716:	4b78      	ldr	r3, [pc, #480]	; (80068f8 <_dtoa_r+0x690>)
 8006718:	00d2      	lsls	r2, r2, #3
 800671a:	189b      	adds	r3, r3, r2
 800671c:	685c      	ldr	r4, [r3, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	930a      	str	r3, [sp, #40]	; 0x28
 8006722:	940b      	str	r4, [sp, #44]	; 0x2c
 8006724:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006726:	2b00      	cmp	r3, #0
 8006728:	db00      	blt.n	800672c <_dtoa_r+0x4c4>
 800672a:	e0f7      	b.n	800691c <_dtoa_r+0x6b4>
 800672c:	9b07      	ldr	r3, [sp, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd00      	ble.n	8006734 <_dtoa_r+0x4cc>
 8006732:	e0f3      	b.n	800691c <_dtoa_r+0x6b4>
 8006734:	d000      	beq.n	8006738 <_dtoa_r+0x4d0>
 8006736:	e282      	b.n	8006c3e <_dtoa_r+0x9d6>
 8006738:	980a      	ldr	r0, [sp, #40]	; 0x28
 800673a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800673c:	2200      	movs	r2, #0
 800673e:	4b74      	ldr	r3, [pc, #464]	; (8006910 <_dtoa_r+0x6a8>)
 8006740:	f7fa fdea 	bl	8001318 <__aeabi_dmul>
 8006744:	9a08      	ldr	r2, [sp, #32]
 8006746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006748:	f7f9 fe9e 	bl	8000488 <__aeabi_dcmpge>
 800674c:	9e07      	ldr	r6, [sp, #28]
 800674e:	0035      	movs	r5, r6
 8006750:	2800      	cmp	r0, #0
 8006752:	d000      	beq.n	8006756 <_dtoa_r+0x4ee>
 8006754:	e259      	b.n	8006c0a <_dtoa_r+0x9a2>
 8006756:	9b06      	ldr	r3, [sp, #24]
 8006758:	9a06      	ldr	r2, [sp, #24]
 800675a:	3301      	adds	r3, #1
 800675c:	9308      	str	r3, [sp, #32]
 800675e:	2331      	movs	r3, #49	; 0x31
 8006760:	7013      	strb	r3, [r2, #0]
 8006762:	9b02      	ldr	r3, [sp, #8]
 8006764:	3301      	adds	r3, #1
 8006766:	9302      	str	r3, [sp, #8]
 8006768:	e254      	b.n	8006c14 <_dtoa_r+0x9ac>
 800676a:	4234      	tst	r4, r6
 800676c:	d007      	beq.n	800677e <_dtoa_r+0x516>
 800676e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006770:	3301      	adds	r3, #1
 8006772:	9310      	str	r3, [sp, #64]	; 0x40
 8006774:	682a      	ldr	r2, [r5, #0]
 8006776:	686b      	ldr	r3, [r5, #4]
 8006778:	f7fa fdce 	bl	8001318 <__aeabi_dmul>
 800677c:	0033      	movs	r3, r6
 800677e:	1064      	asrs	r4, r4, #1
 8006780:	3508      	adds	r5, #8
 8006782:	e75a      	b.n	800663a <_dtoa_r+0x3d2>
 8006784:	9e02      	ldr	r6, [sp, #8]
 8006786:	9b07      	ldr	r3, [sp, #28]
 8006788:	e780      	b.n	800668c <_dtoa_r+0x424>
 800678a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800678c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800678e:	1e5a      	subs	r2, r3, #1
 8006790:	4b59      	ldr	r3, [pc, #356]	; (80068f8 <_dtoa_r+0x690>)
 8006792:	00d2      	lsls	r2, r2, #3
 8006794:	189b      	adds	r3, r3, r2
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2900      	cmp	r1, #0
 800679c:	d051      	beq.n	8006842 <_dtoa_r+0x5da>
 800679e:	2000      	movs	r0, #0
 80067a0:	495d      	ldr	r1, [pc, #372]	; (8006918 <_dtoa_r+0x6b0>)
 80067a2:	f7fa f9b7 	bl	8000b14 <__aeabi_ddiv>
 80067a6:	9a08      	ldr	r2, [sp, #32]
 80067a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067aa:	f7fb f821 	bl	80017f0 <__aeabi_dsub>
 80067ae:	9a06      	ldr	r2, [sp, #24]
 80067b0:	9b06      	ldr	r3, [sp, #24]
 80067b2:	4694      	mov	ip, r2
 80067b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80067b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067b8:	9010      	str	r0, [sp, #64]	; 0x40
 80067ba:	9111      	str	r1, [sp, #68]	; 0x44
 80067bc:	4463      	add	r3, ip
 80067be:	9319      	str	r3, [sp, #100]	; 0x64
 80067c0:	0029      	movs	r1, r5
 80067c2:	0020      	movs	r0, r4
 80067c4:	f7fb fbc4 	bl	8001f50 <__aeabi_d2iz>
 80067c8:	9014      	str	r0, [sp, #80]	; 0x50
 80067ca:	f7fb fbf7 	bl	8001fbc <__aeabi_i2d>
 80067ce:	0002      	movs	r2, r0
 80067d0:	000b      	movs	r3, r1
 80067d2:	0020      	movs	r0, r4
 80067d4:	0029      	movs	r1, r5
 80067d6:	f7fb f80b 	bl	80017f0 <__aeabi_dsub>
 80067da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80067de:	3301      	adds	r3, #1
 80067e0:	9308      	str	r3, [sp, #32]
 80067e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067e4:	0004      	movs	r4, r0
 80067e6:	3330      	adds	r3, #48	; 0x30
 80067e8:	7013      	strb	r3, [r2, #0]
 80067ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ee:	000d      	movs	r5, r1
 80067f0:	f7f9 fe2c 	bl	800044c <__aeabi_dcmplt>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d175      	bne.n	80068e4 <_dtoa_r+0x67c>
 80067f8:	0022      	movs	r2, r4
 80067fa:	002b      	movs	r3, r5
 80067fc:	2000      	movs	r0, #0
 80067fe:	4940      	ldr	r1, [pc, #256]	; (8006900 <_dtoa_r+0x698>)
 8006800:	f7fa fff6 	bl	80017f0 <__aeabi_dsub>
 8006804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006806:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006808:	f7f9 fe20 	bl	800044c <__aeabi_dcmplt>
 800680c:	2800      	cmp	r0, #0
 800680e:	d000      	beq.n	8006812 <_dtoa_r+0x5aa>
 8006810:	e0d2      	b.n	80069b8 <_dtoa_r+0x750>
 8006812:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006814:	9a08      	ldr	r2, [sp, #32]
 8006816:	4293      	cmp	r3, r2
 8006818:	d100      	bne.n	800681c <_dtoa_r+0x5b4>
 800681a:	e770      	b.n	80066fe <_dtoa_r+0x496>
 800681c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800681e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006820:	2200      	movs	r2, #0
 8006822:	4b38      	ldr	r3, [pc, #224]	; (8006904 <_dtoa_r+0x69c>)
 8006824:	f7fa fd78 	bl	8001318 <__aeabi_dmul>
 8006828:	4b36      	ldr	r3, [pc, #216]	; (8006904 <_dtoa_r+0x69c>)
 800682a:	9010      	str	r0, [sp, #64]	; 0x40
 800682c:	9111      	str	r1, [sp, #68]	; 0x44
 800682e:	2200      	movs	r2, #0
 8006830:	0020      	movs	r0, r4
 8006832:	0029      	movs	r1, r5
 8006834:	f7fa fd70 	bl	8001318 <__aeabi_dmul>
 8006838:	9b08      	ldr	r3, [sp, #32]
 800683a:	0004      	movs	r4, r0
 800683c:	000d      	movs	r5, r1
 800683e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006840:	e7be      	b.n	80067c0 <_dtoa_r+0x558>
 8006842:	9808      	ldr	r0, [sp, #32]
 8006844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006846:	f7fa fd67 	bl	8001318 <__aeabi_dmul>
 800684a:	9a06      	ldr	r2, [sp, #24]
 800684c:	9b06      	ldr	r3, [sp, #24]
 800684e:	4694      	mov	ip, r2
 8006850:	9308      	str	r3, [sp, #32]
 8006852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006854:	9010      	str	r0, [sp, #64]	; 0x40
 8006856:	9111      	str	r1, [sp, #68]	; 0x44
 8006858:	4463      	add	r3, ip
 800685a:	9319      	str	r3, [sp, #100]	; 0x64
 800685c:	0029      	movs	r1, r5
 800685e:	0020      	movs	r0, r4
 8006860:	f7fb fb76 	bl	8001f50 <__aeabi_d2iz>
 8006864:	9017      	str	r0, [sp, #92]	; 0x5c
 8006866:	f7fb fba9 	bl	8001fbc <__aeabi_i2d>
 800686a:	0002      	movs	r2, r0
 800686c:	000b      	movs	r3, r1
 800686e:	0020      	movs	r0, r4
 8006870:	0029      	movs	r1, r5
 8006872:	f7fa ffbd 	bl	80017f0 <__aeabi_dsub>
 8006876:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006878:	9a08      	ldr	r2, [sp, #32]
 800687a:	3330      	adds	r3, #48	; 0x30
 800687c:	7013      	strb	r3, [r2, #0]
 800687e:	0013      	movs	r3, r2
 8006880:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006882:	3301      	adds	r3, #1
 8006884:	0004      	movs	r4, r0
 8006886:	000d      	movs	r5, r1
 8006888:	9308      	str	r3, [sp, #32]
 800688a:	4293      	cmp	r3, r2
 800688c:	d12c      	bne.n	80068e8 <_dtoa_r+0x680>
 800688e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006890:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006892:	9a06      	ldr	r2, [sp, #24]
 8006894:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006896:	4694      	mov	ip, r2
 8006898:	4463      	add	r3, ip
 800689a:	2200      	movs	r2, #0
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	4b1e      	ldr	r3, [pc, #120]	; (8006918 <_dtoa_r+0x6b0>)
 80068a0:	f7f9 fdfc 	bl	800049c <__aeabi_dadd>
 80068a4:	0002      	movs	r2, r0
 80068a6:	000b      	movs	r3, r1
 80068a8:	0020      	movs	r0, r4
 80068aa:	0029      	movs	r1, r5
 80068ac:	f7f9 fde2 	bl	8000474 <__aeabi_dcmpgt>
 80068b0:	2800      	cmp	r0, #0
 80068b2:	d000      	beq.n	80068b6 <_dtoa_r+0x64e>
 80068b4:	e080      	b.n	80069b8 <_dtoa_r+0x750>
 80068b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068ba:	2000      	movs	r0, #0
 80068bc:	4916      	ldr	r1, [pc, #88]	; (8006918 <_dtoa_r+0x6b0>)
 80068be:	f7fa ff97 	bl	80017f0 <__aeabi_dsub>
 80068c2:	0002      	movs	r2, r0
 80068c4:	000b      	movs	r3, r1
 80068c6:	0020      	movs	r0, r4
 80068c8:	0029      	movs	r1, r5
 80068ca:	f7f9 fdbf 	bl	800044c <__aeabi_dcmplt>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	d100      	bne.n	80068d4 <_dtoa_r+0x66c>
 80068d2:	e714      	b.n	80066fe <_dtoa_r+0x496>
 80068d4:	9b08      	ldr	r3, [sp, #32]
 80068d6:	001a      	movs	r2, r3
 80068d8:	3a01      	subs	r2, #1
 80068da:	9208      	str	r2, [sp, #32]
 80068dc:	7812      	ldrb	r2, [r2, #0]
 80068de:	2a30      	cmp	r2, #48	; 0x30
 80068e0:	d0f8      	beq.n	80068d4 <_dtoa_r+0x66c>
 80068e2:	9308      	str	r3, [sp, #32]
 80068e4:	9602      	str	r6, [sp, #8]
 80068e6:	e055      	b.n	8006994 <_dtoa_r+0x72c>
 80068e8:	2200      	movs	r2, #0
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <_dtoa_r+0x69c>)
 80068ec:	f7fa fd14 	bl	8001318 <__aeabi_dmul>
 80068f0:	0004      	movs	r4, r0
 80068f2:	000d      	movs	r5, r1
 80068f4:	e7b2      	b.n	800685c <_dtoa_r+0x5f4>
 80068f6:	46c0      	nop			; (mov r8, r8)
 80068f8:	08008638 	.word	0x08008638
 80068fc:	08008610 	.word	0x08008610
 8006900:	3ff00000 	.word	0x3ff00000
 8006904:	40240000 	.word	0x40240000
 8006908:	401c0000 	.word	0x401c0000
 800690c:	fcc00000 	.word	0xfcc00000
 8006910:	40140000 	.word	0x40140000
 8006914:	7cc00000 	.word	0x7cc00000
 8006918:	3fe00000 	.word	0x3fe00000
 800691c:	9b07      	ldr	r3, [sp, #28]
 800691e:	9e06      	ldr	r6, [sp, #24]
 8006920:	3b01      	subs	r3, #1
 8006922:	199b      	adds	r3, r3, r6
 8006924:	930c      	str	r3, [sp, #48]	; 0x30
 8006926:	9c08      	ldr	r4, [sp, #32]
 8006928:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800692a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800692c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800692e:	0020      	movs	r0, r4
 8006930:	0029      	movs	r1, r5
 8006932:	f7fa f8ef 	bl	8000b14 <__aeabi_ddiv>
 8006936:	f7fb fb0b 	bl	8001f50 <__aeabi_d2iz>
 800693a:	9007      	str	r0, [sp, #28]
 800693c:	f7fb fb3e 	bl	8001fbc <__aeabi_i2d>
 8006940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006944:	f7fa fce8 	bl	8001318 <__aeabi_dmul>
 8006948:	0002      	movs	r2, r0
 800694a:	000b      	movs	r3, r1
 800694c:	0020      	movs	r0, r4
 800694e:	0029      	movs	r1, r5
 8006950:	f7fa ff4e 	bl	80017f0 <__aeabi_dsub>
 8006954:	0033      	movs	r3, r6
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	3601      	adds	r6, #1
 800695a:	3230      	adds	r2, #48	; 0x30
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006960:	9608      	str	r6, [sp, #32]
 8006962:	429a      	cmp	r2, r3
 8006964:	d139      	bne.n	80069da <_dtoa_r+0x772>
 8006966:	0002      	movs	r2, r0
 8006968:	000b      	movs	r3, r1
 800696a:	f7f9 fd97 	bl	800049c <__aeabi_dadd>
 800696e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006972:	0004      	movs	r4, r0
 8006974:	000d      	movs	r5, r1
 8006976:	f7f9 fd7d 	bl	8000474 <__aeabi_dcmpgt>
 800697a:	2800      	cmp	r0, #0
 800697c:	d11b      	bne.n	80069b6 <_dtoa_r+0x74e>
 800697e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006982:	0020      	movs	r0, r4
 8006984:	0029      	movs	r1, r5
 8006986:	f7f9 fd5b 	bl	8000440 <__aeabi_dcmpeq>
 800698a:	2800      	cmp	r0, #0
 800698c:	d002      	beq.n	8006994 <_dtoa_r+0x72c>
 800698e:	9b07      	ldr	r3, [sp, #28]
 8006990:	07db      	lsls	r3, r3, #31
 8006992:	d410      	bmi.n	80069b6 <_dtoa_r+0x74e>
 8006994:	0038      	movs	r0, r7
 8006996:	9905      	ldr	r1, [sp, #20]
 8006998:	f000 fae6 	bl	8006f68 <_Bfree>
 800699c:	2300      	movs	r3, #0
 800699e:	9a08      	ldr	r2, [sp, #32]
 80069a0:	9802      	ldr	r0, [sp, #8]
 80069a2:	7013      	strb	r3, [r2, #0]
 80069a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80069a6:	3001      	adds	r0, #1
 80069a8:	6018      	str	r0, [r3, #0]
 80069aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d100      	bne.n	80069b2 <_dtoa_r+0x74a>
 80069b0:	e4a6      	b.n	8006300 <_dtoa_r+0x98>
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e4a4      	b.n	8006300 <_dtoa_r+0x98>
 80069b6:	9e02      	ldr	r6, [sp, #8]
 80069b8:	9b08      	ldr	r3, [sp, #32]
 80069ba:	9308      	str	r3, [sp, #32]
 80069bc:	3b01      	subs	r3, #1
 80069be:	781a      	ldrb	r2, [r3, #0]
 80069c0:	2a39      	cmp	r2, #57	; 0x39
 80069c2:	d106      	bne.n	80069d2 <_dtoa_r+0x76a>
 80069c4:	9a06      	ldr	r2, [sp, #24]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d1f7      	bne.n	80069ba <_dtoa_r+0x752>
 80069ca:	2230      	movs	r2, #48	; 0x30
 80069cc:	9906      	ldr	r1, [sp, #24]
 80069ce:	3601      	adds	r6, #1
 80069d0:	700a      	strb	r2, [r1, #0]
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	3201      	adds	r2, #1
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e784      	b.n	80068e4 <_dtoa_r+0x67c>
 80069da:	2200      	movs	r2, #0
 80069dc:	4baa      	ldr	r3, [pc, #680]	; (8006c88 <_dtoa_r+0xa20>)
 80069de:	f7fa fc9b 	bl	8001318 <__aeabi_dmul>
 80069e2:	2200      	movs	r2, #0
 80069e4:	2300      	movs	r3, #0
 80069e6:	0004      	movs	r4, r0
 80069e8:	000d      	movs	r5, r1
 80069ea:	f7f9 fd29 	bl	8000440 <__aeabi_dcmpeq>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d09b      	beq.n	800692a <_dtoa_r+0x6c2>
 80069f2:	e7cf      	b.n	8006994 <_dtoa_r+0x72c>
 80069f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80069f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	d012      	beq.n	8006a24 <_dtoa_r+0x7bc>
 80069fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a00:	2a01      	cmp	r2, #1
 8006a02:	dc66      	bgt.n	8006ad2 <_dtoa_r+0x86a>
 8006a04:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	d05d      	beq.n	8006ac6 <_dtoa_r+0x85e>
 8006a0a:	4aa0      	ldr	r2, [pc, #640]	; (8006c8c <_dtoa_r+0xa24>)
 8006a0c:	189b      	adds	r3, r3, r2
 8006a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a10:	2101      	movs	r1, #1
 8006a12:	18d2      	adds	r2, r2, r3
 8006a14:	920a      	str	r2, [sp, #40]	; 0x28
 8006a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a18:	0038      	movs	r0, r7
 8006a1a:	18d3      	adds	r3, r2, r3
 8006a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8006a1e:	f000 fb53 	bl	80070c8 <__i2b>
 8006a22:	0005      	movs	r5, r0
 8006a24:	2c00      	cmp	r4, #0
 8006a26:	dd0e      	ble.n	8006a46 <_dtoa_r+0x7de>
 8006a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	dd0b      	ble.n	8006a46 <_dtoa_r+0x7de>
 8006a2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a30:	0023      	movs	r3, r4
 8006a32:	4294      	cmp	r4, r2
 8006a34:	dd00      	ble.n	8006a38 <_dtoa_r+0x7d0>
 8006a36:	0013      	movs	r3, r2
 8006a38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a3a:	1ae4      	subs	r4, r4, r3
 8006a3c:	1ad2      	subs	r2, r2, r3
 8006a3e:	920a      	str	r2, [sp, #40]	; 0x28
 8006a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	930d      	str	r3, [sp, #52]	; 0x34
 8006a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01f      	beq.n	8006a8c <_dtoa_r+0x824>
 8006a4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d054      	beq.n	8006afc <_dtoa_r+0x894>
 8006a52:	2e00      	cmp	r6, #0
 8006a54:	dd11      	ble.n	8006a7a <_dtoa_r+0x812>
 8006a56:	0029      	movs	r1, r5
 8006a58:	0032      	movs	r2, r6
 8006a5a:	0038      	movs	r0, r7
 8006a5c:	f000 fbfa 	bl	8007254 <__pow5mult>
 8006a60:	9a05      	ldr	r2, [sp, #20]
 8006a62:	0001      	movs	r1, r0
 8006a64:	0005      	movs	r5, r0
 8006a66:	0038      	movs	r0, r7
 8006a68:	f000 fb44 	bl	80070f4 <__multiply>
 8006a6c:	9905      	ldr	r1, [sp, #20]
 8006a6e:	9014      	str	r0, [sp, #80]	; 0x50
 8006a70:	0038      	movs	r0, r7
 8006a72:	f000 fa79 	bl	8006f68 <_Bfree>
 8006a76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a78:	9305      	str	r3, [sp, #20]
 8006a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a7c:	1b9a      	subs	r2, r3, r6
 8006a7e:	42b3      	cmp	r3, r6
 8006a80:	d004      	beq.n	8006a8c <_dtoa_r+0x824>
 8006a82:	0038      	movs	r0, r7
 8006a84:	9905      	ldr	r1, [sp, #20]
 8006a86:	f000 fbe5 	bl	8007254 <__pow5mult>
 8006a8a:	9005      	str	r0, [sp, #20]
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	0038      	movs	r0, r7
 8006a90:	f000 fb1a 	bl	80070c8 <__i2b>
 8006a94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a96:	0006      	movs	r6, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	dd31      	ble.n	8006b00 <_dtoa_r+0x898>
 8006a9c:	001a      	movs	r2, r3
 8006a9e:	0001      	movs	r1, r0
 8006aa0:	0038      	movs	r0, r7
 8006aa2:	f000 fbd7 	bl	8007254 <__pow5mult>
 8006aa6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006aa8:	0006      	movs	r6, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	dd2d      	ble.n	8006b0a <_dtoa_r+0x8a2>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8006ab2:	6933      	ldr	r3, [r6, #16]
 8006ab4:	3303      	adds	r3, #3
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	18f3      	adds	r3, r6, r3
 8006aba:	6858      	ldr	r0, [r3, #4]
 8006abc:	f000 fabc 	bl	8007038 <__hi0bits>
 8006ac0:	2320      	movs	r3, #32
 8006ac2:	1a18      	subs	r0, r3, r0
 8006ac4:	e039      	b.n	8006b3a <_dtoa_r+0x8d2>
 8006ac6:	2336      	movs	r3, #54	; 0x36
 8006ac8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006aca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006acc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	e79d      	b.n	8006a0e <_dtoa_r+0x7a6>
 8006ad2:	9b07      	ldr	r3, [sp, #28]
 8006ad4:	1e5e      	subs	r6, r3, #1
 8006ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad8:	42b3      	cmp	r3, r6
 8006ada:	db07      	blt.n	8006aec <_dtoa_r+0x884>
 8006adc:	1b9e      	subs	r6, r3, r6
 8006ade:	9b07      	ldr	r3, [sp, #28]
 8006ae0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	da93      	bge.n	8006a0e <_dtoa_r+0x7a6>
 8006ae6:	1ae4      	subs	r4, r4, r3
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e790      	b.n	8006a0e <_dtoa_r+0x7a6>
 8006aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006af0:	1af3      	subs	r3, r6, r3
 8006af2:	18d3      	adds	r3, r2, r3
 8006af4:	960e      	str	r6, [sp, #56]	; 0x38
 8006af6:	9315      	str	r3, [sp, #84]	; 0x54
 8006af8:	2600      	movs	r6, #0
 8006afa:	e7f0      	b.n	8006ade <_dtoa_r+0x876>
 8006afc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006afe:	e7c0      	b.n	8006a82 <_dtoa_r+0x81a>
 8006b00:	2300      	movs	r3, #0
 8006b02:	930e      	str	r3, [sp, #56]	; 0x38
 8006b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	dc13      	bgt.n	8006b32 <_dtoa_r+0x8ca>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	930e      	str	r3, [sp, #56]	; 0x38
 8006b0e:	9b08      	ldr	r3, [sp, #32]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10e      	bne.n	8006b32 <_dtoa_r+0x8ca>
 8006b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b16:	031b      	lsls	r3, r3, #12
 8006b18:	d10b      	bne.n	8006b32 <_dtoa_r+0x8ca>
 8006b1a:	4b5d      	ldr	r3, [pc, #372]	; (8006c90 <_dtoa_r+0xa28>)
 8006b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b1e:	4213      	tst	r3, r2
 8006b20:	d007      	beq.n	8006b32 <_dtoa_r+0x8ca>
 8006b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b24:	3301      	adds	r3, #1
 8006b26:	930a      	str	r3, [sp, #40]	; 0x28
 8006b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	930d      	str	r3, [sp, #52]	; 0x34
 8006b2e:	2301      	movs	r3, #1
 8006b30:	930e      	str	r3, [sp, #56]	; 0x38
 8006b32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b34:	2001      	movs	r0, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1bb      	bne.n	8006ab2 <_dtoa_r+0x84a>
 8006b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3c:	221f      	movs	r2, #31
 8006b3e:	1818      	adds	r0, r3, r0
 8006b40:	0003      	movs	r3, r0
 8006b42:	4013      	ands	r3, r2
 8006b44:	4210      	tst	r0, r2
 8006b46:	d046      	beq.n	8006bd6 <_dtoa_r+0x96e>
 8006b48:	3201      	adds	r2, #1
 8006b4a:	1ad2      	subs	r2, r2, r3
 8006b4c:	2a04      	cmp	r2, #4
 8006b4e:	dd3f      	ble.n	8006bd0 <_dtoa_r+0x968>
 8006b50:	221c      	movs	r2, #28
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b56:	18e4      	adds	r4, r4, r3
 8006b58:	18d2      	adds	r2, r2, r3
 8006b5a:	920a      	str	r2, [sp, #40]	; 0x28
 8006b5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b5e:	18d3      	adds	r3, r2, r3
 8006b60:	930d      	str	r3, [sp, #52]	; 0x34
 8006b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dd05      	ble.n	8006b74 <_dtoa_r+0x90c>
 8006b68:	001a      	movs	r2, r3
 8006b6a:	0038      	movs	r0, r7
 8006b6c:	9905      	ldr	r1, [sp, #20]
 8006b6e:	f000 fbcd 	bl	800730c <__lshift>
 8006b72:	9005      	str	r0, [sp, #20]
 8006b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	dd05      	ble.n	8006b86 <_dtoa_r+0x91e>
 8006b7a:	0031      	movs	r1, r6
 8006b7c:	001a      	movs	r2, r3
 8006b7e:	0038      	movs	r0, r7
 8006b80:	f000 fbc4 	bl	800730c <__lshift>
 8006b84:	0006      	movs	r6, r0
 8006b86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d026      	beq.n	8006bda <_dtoa_r+0x972>
 8006b8c:	0031      	movs	r1, r6
 8006b8e:	9805      	ldr	r0, [sp, #20]
 8006b90:	f000 fc2a 	bl	80073e8 <__mcmp>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	da20      	bge.n	8006bda <_dtoa_r+0x972>
 8006b98:	9b02      	ldr	r3, [sp, #8]
 8006b9a:	220a      	movs	r2, #10
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	9302      	str	r3, [sp, #8]
 8006ba0:	0038      	movs	r0, r7
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9905      	ldr	r1, [sp, #20]
 8006ba6:	f000 fa03 	bl	8006fb0 <__multadd>
 8006baa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bac:	9005      	str	r0, [sp, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d100      	bne.n	8006bb4 <_dtoa_r+0x94c>
 8006bb2:	e166      	b.n	8006e82 <_dtoa_r+0xc1a>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	0029      	movs	r1, r5
 8006bb8:	220a      	movs	r2, #10
 8006bba:	0038      	movs	r0, r7
 8006bbc:	f000 f9f8 	bl	8006fb0 <__multadd>
 8006bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bc2:	0005      	movs	r5, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dc47      	bgt.n	8006c58 <_dtoa_r+0x9f0>
 8006bc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	dc0d      	bgt.n	8006bea <_dtoa_r+0x982>
 8006bce:	e043      	b.n	8006c58 <_dtoa_r+0x9f0>
 8006bd0:	2a04      	cmp	r2, #4
 8006bd2:	d0c6      	beq.n	8006b62 <_dtoa_r+0x8fa>
 8006bd4:	0013      	movs	r3, r2
 8006bd6:	331c      	adds	r3, #28
 8006bd8:	e7bc      	b.n	8006b54 <_dtoa_r+0x8ec>
 8006bda:	9b07      	ldr	r3, [sp, #28]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dc35      	bgt.n	8006c4c <_dtoa_r+0x9e4>
 8006be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	dd32      	ble.n	8006c4c <_dtoa_r+0x9e4>
 8006be6:	9b07      	ldr	r3, [sp, #28]
 8006be8:	930c      	str	r3, [sp, #48]	; 0x30
 8006bea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10c      	bne.n	8006c0a <_dtoa_r+0x9a2>
 8006bf0:	0031      	movs	r1, r6
 8006bf2:	2205      	movs	r2, #5
 8006bf4:	0038      	movs	r0, r7
 8006bf6:	f000 f9db 	bl	8006fb0 <__multadd>
 8006bfa:	0006      	movs	r6, r0
 8006bfc:	0001      	movs	r1, r0
 8006bfe:	9805      	ldr	r0, [sp, #20]
 8006c00:	f000 fbf2 	bl	80073e8 <__mcmp>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	dd00      	ble.n	8006c0a <_dtoa_r+0x9a2>
 8006c08:	e5a5      	b.n	8006756 <_dtoa_r+0x4ee>
 8006c0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	9302      	str	r3, [sp, #8]
 8006c10:	9b06      	ldr	r3, [sp, #24]
 8006c12:	9308      	str	r3, [sp, #32]
 8006c14:	2400      	movs	r4, #0
 8006c16:	0031      	movs	r1, r6
 8006c18:	0038      	movs	r0, r7
 8006c1a:	f000 f9a5 	bl	8006f68 <_Bfree>
 8006c1e:	2d00      	cmp	r5, #0
 8006c20:	d100      	bne.n	8006c24 <_dtoa_r+0x9bc>
 8006c22:	e6b7      	b.n	8006994 <_dtoa_r+0x72c>
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	d005      	beq.n	8006c34 <_dtoa_r+0x9cc>
 8006c28:	42ac      	cmp	r4, r5
 8006c2a:	d003      	beq.n	8006c34 <_dtoa_r+0x9cc>
 8006c2c:	0021      	movs	r1, r4
 8006c2e:	0038      	movs	r0, r7
 8006c30:	f000 f99a 	bl	8006f68 <_Bfree>
 8006c34:	0029      	movs	r1, r5
 8006c36:	0038      	movs	r0, r7
 8006c38:	f000 f996 	bl	8006f68 <_Bfree>
 8006c3c:	e6aa      	b.n	8006994 <_dtoa_r+0x72c>
 8006c3e:	2600      	movs	r6, #0
 8006c40:	0035      	movs	r5, r6
 8006c42:	e7e2      	b.n	8006c0a <_dtoa_r+0x9a2>
 8006c44:	9602      	str	r6, [sp, #8]
 8006c46:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006c48:	0035      	movs	r5, r6
 8006c4a:	e584      	b.n	8006756 <_dtoa_r+0x4ee>
 8006c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d100      	bne.n	8006c54 <_dtoa_r+0x9ec>
 8006c52:	e0ce      	b.n	8006df2 <_dtoa_r+0xb8a>
 8006c54:	9b07      	ldr	r3, [sp, #28]
 8006c56:	930c      	str	r3, [sp, #48]	; 0x30
 8006c58:	2c00      	cmp	r4, #0
 8006c5a:	dd05      	ble.n	8006c68 <_dtoa_r+0xa00>
 8006c5c:	0029      	movs	r1, r5
 8006c5e:	0022      	movs	r2, r4
 8006c60:	0038      	movs	r0, r7
 8006c62:	f000 fb53 	bl	800730c <__lshift>
 8006c66:	0005      	movs	r5, r0
 8006c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c6a:	0028      	movs	r0, r5
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d022      	beq.n	8006cb6 <_dtoa_r+0xa4e>
 8006c70:	0038      	movs	r0, r7
 8006c72:	6869      	ldr	r1, [r5, #4]
 8006c74:	f000 f934 	bl	8006ee0 <_Balloc>
 8006c78:	1e04      	subs	r4, r0, #0
 8006c7a:	d10f      	bne.n	8006c9c <_dtoa_r+0xa34>
 8006c7c:	0002      	movs	r2, r0
 8006c7e:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <_dtoa_r+0xa2c>)
 8006c80:	4905      	ldr	r1, [pc, #20]	; (8006c98 <_dtoa_r+0xa30>)
 8006c82:	f7ff fb06 	bl	8006292 <_dtoa_r+0x2a>
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	40240000 	.word	0x40240000
 8006c8c:	00000433 	.word	0x00000433
 8006c90:	7ff00000 	.word	0x7ff00000
 8006c94:	0800859f 	.word	0x0800859f
 8006c98:	000002ea 	.word	0x000002ea
 8006c9c:	0029      	movs	r1, r5
 8006c9e:	692b      	ldr	r3, [r5, #16]
 8006ca0:	310c      	adds	r1, #12
 8006ca2:	1c9a      	adds	r2, r3, #2
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	300c      	adds	r0, #12
 8006ca8:	f000 f911 	bl	8006ece <memcpy>
 8006cac:	2201      	movs	r2, #1
 8006cae:	0021      	movs	r1, r4
 8006cb0:	0038      	movs	r0, r7
 8006cb2:	f000 fb2b 	bl	800730c <__lshift>
 8006cb6:	9b06      	ldr	r3, [sp, #24]
 8006cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cba:	930a      	str	r3, [sp, #40]	; 0x28
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	189b      	adds	r3, r3, r2
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	002c      	movs	r4, r5
 8006cc4:	0005      	movs	r5, r0
 8006cc6:	9314      	str	r3, [sp, #80]	; 0x50
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cce:	0031      	movs	r1, r6
 8006cd0:	9805      	ldr	r0, [sp, #20]
 8006cd2:	f7ff fa3d 	bl	8006150 <quorem>
 8006cd6:	0003      	movs	r3, r0
 8006cd8:	0021      	movs	r1, r4
 8006cda:	3330      	adds	r3, #48	; 0x30
 8006cdc:	900d      	str	r0, [sp, #52]	; 0x34
 8006cde:	9805      	ldr	r0, [sp, #20]
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	f000 fb81 	bl	80073e8 <__mcmp>
 8006ce6:	002a      	movs	r2, r5
 8006ce8:	900e      	str	r0, [sp, #56]	; 0x38
 8006cea:	0031      	movs	r1, r6
 8006cec:	0038      	movs	r0, r7
 8006cee:	f000 fb97 	bl	8007420 <__mdiff>
 8006cf2:	68c3      	ldr	r3, [r0, #12]
 8006cf4:	9008      	str	r0, [sp, #32]
 8006cf6:	9310      	str	r3, [sp, #64]	; 0x40
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8006cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <_dtoa_r+0xaa4>
 8006d02:	0001      	movs	r1, r0
 8006d04:	9805      	ldr	r0, [sp, #20]
 8006d06:	f000 fb6f 	bl	80073e8 <__mcmp>
 8006d0a:	900c      	str	r0, [sp, #48]	; 0x30
 8006d0c:	0038      	movs	r0, r7
 8006d0e:	9908      	ldr	r1, [sp, #32]
 8006d10:	f000 f92a 	bl	8006f68 <_Bfree>
 8006d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d18:	3301      	adds	r3, #1
 8006d1a:	9308      	str	r3, [sp, #32]
 8006d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d22:	4313      	orrs	r3, r2
 8006d24:	d10c      	bne.n	8006d40 <_dtoa_r+0xad8>
 8006d26:	9b07      	ldr	r3, [sp, #28]
 8006d28:	2b39      	cmp	r3, #57	; 0x39
 8006d2a:	d026      	beq.n	8006d7a <_dtoa_r+0xb12>
 8006d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dd02      	ble.n	8006d38 <_dtoa_r+0xad0>
 8006d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d34:	3331      	adds	r3, #49	; 0x31
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3a:	9a07      	ldr	r2, [sp, #28]
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	e76a      	b.n	8006c16 <_dtoa_r+0x9ae>
 8006d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	db04      	blt.n	8006d50 <_dtoa_r+0xae8>
 8006d46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	d11f      	bne.n	8006d90 <_dtoa_r+0xb28>
 8006d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	ddf0      	ble.n	8006d38 <_dtoa_r+0xad0>
 8006d56:	9905      	ldr	r1, [sp, #20]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	0038      	movs	r0, r7
 8006d5c:	f000 fad6 	bl	800730c <__lshift>
 8006d60:	0031      	movs	r1, r6
 8006d62:	9005      	str	r0, [sp, #20]
 8006d64:	f000 fb40 	bl	80073e8 <__mcmp>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	dc03      	bgt.n	8006d74 <_dtoa_r+0xb0c>
 8006d6c:	d1e4      	bne.n	8006d38 <_dtoa_r+0xad0>
 8006d6e:	9b07      	ldr	r3, [sp, #28]
 8006d70:	07db      	lsls	r3, r3, #31
 8006d72:	d5e1      	bpl.n	8006d38 <_dtoa_r+0xad0>
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	2b39      	cmp	r3, #57	; 0x39
 8006d78:	d1db      	bne.n	8006d32 <_dtoa_r+0xaca>
 8006d7a:	2339      	movs	r3, #57	; 0x39
 8006d7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d7e:	7013      	strb	r3, [r2, #0]
 8006d80:	9b08      	ldr	r3, [sp, #32]
 8006d82:	9308      	str	r3, [sp, #32]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	781a      	ldrb	r2, [r3, #0]
 8006d88:	2a39      	cmp	r2, #57	; 0x39
 8006d8a:	d068      	beq.n	8006e5e <_dtoa_r+0xbf6>
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	e7d5      	b.n	8006d3c <_dtoa_r+0xad4>
 8006d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	dd07      	ble.n	8006da6 <_dtoa_r+0xb3e>
 8006d96:	9b07      	ldr	r3, [sp, #28]
 8006d98:	2b39      	cmp	r3, #57	; 0x39
 8006d9a:	d0ee      	beq.n	8006d7a <_dtoa_r+0xb12>
 8006d9c:	9b07      	ldr	r3, [sp, #28]
 8006d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da0:	3301      	adds	r3, #1
 8006da2:	7013      	strb	r3, [r2, #0]
 8006da4:	e737      	b.n	8006c16 <_dtoa_r+0x9ae>
 8006da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da8:	9a07      	ldr	r2, [sp, #28]
 8006daa:	701a      	strb	r2, [r3, #0]
 8006dac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d03e      	beq.n	8006e32 <_dtoa_r+0xbca>
 8006db4:	2300      	movs	r3, #0
 8006db6:	220a      	movs	r2, #10
 8006db8:	9905      	ldr	r1, [sp, #20]
 8006dba:	0038      	movs	r0, r7
 8006dbc:	f000 f8f8 	bl	8006fb0 <__multadd>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	9005      	str	r0, [sp, #20]
 8006dc4:	220a      	movs	r2, #10
 8006dc6:	0021      	movs	r1, r4
 8006dc8:	0038      	movs	r0, r7
 8006dca:	42ac      	cmp	r4, r5
 8006dcc:	d106      	bne.n	8006ddc <_dtoa_r+0xb74>
 8006dce:	f000 f8ef 	bl	8006fb0 <__multadd>
 8006dd2:	0004      	movs	r4, r0
 8006dd4:	0005      	movs	r5, r0
 8006dd6:	9b08      	ldr	r3, [sp, #32]
 8006dd8:	930a      	str	r3, [sp, #40]	; 0x28
 8006dda:	e778      	b.n	8006cce <_dtoa_r+0xa66>
 8006ddc:	f000 f8e8 	bl	8006fb0 <__multadd>
 8006de0:	0029      	movs	r1, r5
 8006de2:	0004      	movs	r4, r0
 8006de4:	2300      	movs	r3, #0
 8006de6:	220a      	movs	r2, #10
 8006de8:	0038      	movs	r0, r7
 8006dea:	f000 f8e1 	bl	8006fb0 <__multadd>
 8006dee:	0005      	movs	r5, r0
 8006df0:	e7f1      	b.n	8006dd6 <_dtoa_r+0xb6e>
 8006df2:	9b07      	ldr	r3, [sp, #28]
 8006df4:	930c      	str	r3, [sp, #48]	; 0x30
 8006df6:	2400      	movs	r4, #0
 8006df8:	0031      	movs	r1, r6
 8006dfa:	9805      	ldr	r0, [sp, #20]
 8006dfc:	f7ff f9a8 	bl	8006150 <quorem>
 8006e00:	9b06      	ldr	r3, [sp, #24]
 8006e02:	3030      	adds	r0, #48	; 0x30
 8006e04:	5518      	strb	r0, [r3, r4]
 8006e06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e08:	3401      	adds	r4, #1
 8006e0a:	9007      	str	r0, [sp, #28]
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	dd07      	ble.n	8006e20 <_dtoa_r+0xbb8>
 8006e10:	2300      	movs	r3, #0
 8006e12:	220a      	movs	r2, #10
 8006e14:	0038      	movs	r0, r7
 8006e16:	9905      	ldr	r1, [sp, #20]
 8006e18:	f000 f8ca 	bl	8006fb0 <__multadd>
 8006e1c:	9005      	str	r0, [sp, #20]
 8006e1e:	e7eb      	b.n	8006df8 <_dtoa_r+0xb90>
 8006e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e22:	2001      	movs	r0, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	dd00      	ble.n	8006e2a <_dtoa_r+0xbc2>
 8006e28:	0018      	movs	r0, r3
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	9b06      	ldr	r3, [sp, #24]
 8006e2e:	181b      	adds	r3, r3, r0
 8006e30:	9308      	str	r3, [sp, #32]
 8006e32:	9905      	ldr	r1, [sp, #20]
 8006e34:	2201      	movs	r2, #1
 8006e36:	0038      	movs	r0, r7
 8006e38:	f000 fa68 	bl	800730c <__lshift>
 8006e3c:	0031      	movs	r1, r6
 8006e3e:	9005      	str	r0, [sp, #20]
 8006e40:	f000 fad2 	bl	80073e8 <__mcmp>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	dc9b      	bgt.n	8006d80 <_dtoa_r+0xb18>
 8006e48:	d102      	bne.n	8006e50 <_dtoa_r+0xbe8>
 8006e4a:	9b07      	ldr	r3, [sp, #28]
 8006e4c:	07db      	lsls	r3, r3, #31
 8006e4e:	d497      	bmi.n	8006d80 <_dtoa_r+0xb18>
 8006e50:	9b08      	ldr	r3, [sp, #32]
 8006e52:	9308      	str	r3, [sp, #32]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	2a30      	cmp	r2, #48	; 0x30
 8006e5a:	d0fa      	beq.n	8006e52 <_dtoa_r+0xbea>
 8006e5c:	e6db      	b.n	8006c16 <_dtoa_r+0x9ae>
 8006e5e:	9a06      	ldr	r2, [sp, #24]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d18e      	bne.n	8006d82 <_dtoa_r+0xb1a>
 8006e64:	9b02      	ldr	r3, [sp, #8]
 8006e66:	3301      	adds	r3, #1
 8006e68:	9302      	str	r3, [sp, #8]
 8006e6a:	2331      	movs	r3, #49	; 0x31
 8006e6c:	e799      	b.n	8006da2 <_dtoa_r+0xb3a>
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <_dtoa_r+0xc2c>)
 8006e70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e72:	9306      	str	r3, [sp, #24]
 8006e74:	4b08      	ldr	r3, [pc, #32]	; (8006e98 <_dtoa_r+0xc30>)
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	d001      	beq.n	8006e7e <_dtoa_r+0xc16>
 8006e7a:	f7ff fa3f 	bl	80062fc <_dtoa_r+0x94>
 8006e7e:	f7ff fa3f 	bl	8006300 <_dtoa_r+0x98>
 8006e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dcb6      	bgt.n	8006df6 <_dtoa_r+0xb8e>
 8006e88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	dd00      	ble.n	8006e90 <_dtoa_r+0xc28>
 8006e8e:	e6ac      	b.n	8006bea <_dtoa_r+0x982>
 8006e90:	e7b1      	b.n	8006df6 <_dtoa_r+0xb8e>
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	08008520 	.word	0x08008520
 8006e98:	08008528 	.word	0x08008528

08006e9c <_localeconv_r>:
 8006e9c:	4800      	ldr	r0, [pc, #0]	; (8006ea0 <_localeconv_r+0x4>)
 8006e9e:	4770      	bx	lr
 8006ea0:	20000174 	.word	0x20000174

08006ea4 <malloc>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <malloc+0x10>)
 8006ea8:	0001      	movs	r1, r0
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	f000 fc4c 	bl	8007748 <_malloc_r>
 8006eb0:	bd10      	pop	{r4, pc}
 8006eb2:	46c0      	nop			; (mov r8, r8)
 8006eb4:	20000020 	.word	0x20000020

08006eb8 <memchr>:
 8006eb8:	b2c9      	uxtb	r1, r1
 8006eba:	1882      	adds	r2, r0, r2
 8006ebc:	4290      	cmp	r0, r2
 8006ebe:	d101      	bne.n	8006ec4 <memchr+0xc>
 8006ec0:	2000      	movs	r0, #0
 8006ec2:	4770      	bx	lr
 8006ec4:	7803      	ldrb	r3, [r0, #0]
 8006ec6:	428b      	cmp	r3, r1
 8006ec8:	d0fb      	beq.n	8006ec2 <memchr+0xa>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	e7f6      	b.n	8006ebc <memchr+0x4>

08006ece <memcpy>:
 8006ece:	2300      	movs	r3, #0
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d100      	bne.n	8006ed8 <memcpy+0xa>
 8006ed6:	bd10      	pop	{r4, pc}
 8006ed8:	5ccc      	ldrb	r4, [r1, r3]
 8006eda:	54c4      	strb	r4, [r0, r3]
 8006edc:	3301      	adds	r3, #1
 8006ede:	e7f8      	b.n	8006ed2 <memcpy+0x4>

08006ee0 <_Balloc>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ee4:	0006      	movs	r6, r0
 8006ee6:	000c      	movs	r4, r1
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	d10e      	bne.n	8006f0a <_Balloc+0x2a>
 8006eec:	2010      	movs	r0, #16
 8006eee:	f7ff ffd9 	bl	8006ea4 <malloc>
 8006ef2:	1e02      	subs	r2, r0, #0
 8006ef4:	6270      	str	r0, [r6, #36]	; 0x24
 8006ef6:	d104      	bne.n	8006f02 <_Balloc+0x22>
 8006ef8:	2166      	movs	r1, #102	; 0x66
 8006efa:	4b19      	ldr	r3, [pc, #100]	; (8006f60 <_Balloc+0x80>)
 8006efc:	4819      	ldr	r0, [pc, #100]	; (8006f64 <_Balloc+0x84>)
 8006efe:	f000 fcab 	bl	8007858 <__assert_func>
 8006f02:	6045      	str	r5, [r0, #4]
 8006f04:	6085      	str	r5, [r0, #8]
 8006f06:	6005      	str	r5, [r0, #0]
 8006f08:	60c5      	str	r5, [r0, #12]
 8006f0a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006f0c:	68eb      	ldr	r3, [r5, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d013      	beq.n	8006f3a <_Balloc+0x5a>
 8006f12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f14:	00a2      	lsls	r2, r4, #2
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d118      	bne.n	8006f52 <_Balloc+0x72>
 8006f20:	2101      	movs	r1, #1
 8006f22:	000d      	movs	r5, r1
 8006f24:	40a5      	lsls	r5, r4
 8006f26:	1d6a      	adds	r2, r5, #5
 8006f28:	0030      	movs	r0, r6
 8006f2a:	0092      	lsls	r2, r2, #2
 8006f2c:	f000 fb74 	bl	8007618 <_calloc_r>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d00c      	beq.n	8006f4e <_Balloc+0x6e>
 8006f34:	6044      	str	r4, [r0, #4]
 8006f36:	6085      	str	r5, [r0, #8]
 8006f38:	e00d      	b.n	8006f56 <_Balloc+0x76>
 8006f3a:	2221      	movs	r2, #33	; 0x21
 8006f3c:	2104      	movs	r1, #4
 8006f3e:	0030      	movs	r0, r6
 8006f40:	f000 fb6a 	bl	8007618 <_calloc_r>
 8006f44:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f46:	60e8      	str	r0, [r5, #12]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e1      	bne.n	8006f12 <_Balloc+0x32>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	bd70      	pop	{r4, r5, r6, pc}
 8006f52:	6802      	ldr	r2, [r0, #0]
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	2300      	movs	r3, #0
 8006f58:	6103      	str	r3, [r0, #16]
 8006f5a:	60c3      	str	r3, [r0, #12]
 8006f5c:	e7f8      	b.n	8006f50 <_Balloc+0x70>
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	0800852d 	.word	0x0800852d
 8006f64:	080085b0 	.word	0x080085b0

08006f68 <_Bfree>:
 8006f68:	b570      	push	{r4, r5, r6, lr}
 8006f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f6c:	0005      	movs	r5, r0
 8006f6e:	000c      	movs	r4, r1
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	d10e      	bne.n	8006f92 <_Bfree+0x2a>
 8006f74:	2010      	movs	r0, #16
 8006f76:	f7ff ff95 	bl	8006ea4 <malloc>
 8006f7a:	1e02      	subs	r2, r0, #0
 8006f7c:	6268      	str	r0, [r5, #36]	; 0x24
 8006f7e:	d104      	bne.n	8006f8a <_Bfree+0x22>
 8006f80:	218a      	movs	r1, #138	; 0x8a
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <_Bfree+0x40>)
 8006f84:	4809      	ldr	r0, [pc, #36]	; (8006fac <_Bfree+0x44>)
 8006f86:	f000 fc67 	bl	8007858 <__assert_func>
 8006f8a:	6046      	str	r6, [r0, #4]
 8006f8c:	6086      	str	r6, [r0, #8]
 8006f8e:	6006      	str	r6, [r0, #0]
 8006f90:	60c6      	str	r6, [r0, #12]
 8006f92:	2c00      	cmp	r4, #0
 8006f94:	d007      	beq.n	8006fa6 <_Bfree+0x3e>
 8006f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f98:	6862      	ldr	r2, [r4, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	0092      	lsls	r2, r2, #2
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	6022      	str	r2, [r4, #0]
 8006fa4:	601c      	str	r4, [r3, #0]
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	0800852d 	.word	0x0800852d
 8006fac:	080085b0 	.word	0x080085b0

08006fb0 <__multadd>:
 8006fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fb2:	000e      	movs	r6, r1
 8006fb4:	9001      	str	r0, [sp, #4]
 8006fb6:	000c      	movs	r4, r1
 8006fb8:	001d      	movs	r5, r3
 8006fba:	2000      	movs	r0, #0
 8006fbc:	690f      	ldr	r7, [r1, #16]
 8006fbe:	3614      	adds	r6, #20
 8006fc0:	6833      	ldr	r3, [r6, #0]
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	b299      	uxth	r1, r3
 8006fc6:	4351      	muls	r1, r2
 8006fc8:	0c1b      	lsrs	r3, r3, #16
 8006fca:	4353      	muls	r3, r2
 8006fcc:	1949      	adds	r1, r1, r5
 8006fce:	0c0d      	lsrs	r5, r1, #16
 8006fd0:	195b      	adds	r3, r3, r5
 8006fd2:	0c1d      	lsrs	r5, r3, #16
 8006fd4:	b289      	uxth	r1, r1
 8006fd6:	041b      	lsls	r3, r3, #16
 8006fd8:	185b      	adds	r3, r3, r1
 8006fda:	c608      	stmia	r6!, {r3}
 8006fdc:	4287      	cmp	r7, r0
 8006fde:	dcef      	bgt.n	8006fc0 <__multadd+0x10>
 8006fe0:	2d00      	cmp	r5, #0
 8006fe2:	d022      	beq.n	800702a <__multadd+0x7a>
 8006fe4:	68a3      	ldr	r3, [r4, #8]
 8006fe6:	42bb      	cmp	r3, r7
 8006fe8:	dc19      	bgt.n	800701e <__multadd+0x6e>
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	9801      	ldr	r0, [sp, #4]
 8006fee:	1c59      	adds	r1, r3, #1
 8006ff0:	f7ff ff76 	bl	8006ee0 <_Balloc>
 8006ff4:	1e06      	subs	r6, r0, #0
 8006ff6:	d105      	bne.n	8007004 <__multadd+0x54>
 8006ff8:	0002      	movs	r2, r0
 8006ffa:	21b5      	movs	r1, #181	; 0xb5
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <__multadd+0x80>)
 8006ffe:	480d      	ldr	r0, [pc, #52]	; (8007034 <__multadd+0x84>)
 8007000:	f000 fc2a 	bl	8007858 <__assert_func>
 8007004:	0021      	movs	r1, r4
 8007006:	6923      	ldr	r3, [r4, #16]
 8007008:	310c      	adds	r1, #12
 800700a:	1c9a      	adds	r2, r3, #2
 800700c:	0092      	lsls	r2, r2, #2
 800700e:	300c      	adds	r0, #12
 8007010:	f7ff ff5d 	bl	8006ece <memcpy>
 8007014:	0021      	movs	r1, r4
 8007016:	9801      	ldr	r0, [sp, #4]
 8007018:	f7ff ffa6 	bl	8006f68 <_Bfree>
 800701c:	0034      	movs	r4, r6
 800701e:	1d3b      	adds	r3, r7, #4
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	18e3      	adds	r3, r4, r3
 8007024:	605d      	str	r5, [r3, #4]
 8007026:	1c7b      	adds	r3, r7, #1
 8007028:	6123      	str	r3, [r4, #16]
 800702a:	0020      	movs	r0, r4
 800702c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	0800859f 	.word	0x0800859f
 8007034:	080085b0 	.word	0x080085b0

08007038 <__hi0bits>:
 8007038:	0003      	movs	r3, r0
 800703a:	0c02      	lsrs	r2, r0, #16
 800703c:	2000      	movs	r0, #0
 800703e:	4282      	cmp	r2, r0
 8007040:	d101      	bne.n	8007046 <__hi0bits+0xe>
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	3010      	adds	r0, #16
 8007046:	0e1a      	lsrs	r2, r3, #24
 8007048:	d101      	bne.n	800704e <__hi0bits+0x16>
 800704a:	3008      	adds	r0, #8
 800704c:	021b      	lsls	r3, r3, #8
 800704e:	0f1a      	lsrs	r2, r3, #28
 8007050:	d101      	bne.n	8007056 <__hi0bits+0x1e>
 8007052:	3004      	adds	r0, #4
 8007054:	011b      	lsls	r3, r3, #4
 8007056:	0f9a      	lsrs	r2, r3, #30
 8007058:	d101      	bne.n	800705e <__hi0bits+0x26>
 800705a:	3002      	adds	r0, #2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	db03      	blt.n	800706a <__hi0bits+0x32>
 8007062:	3001      	adds	r0, #1
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	d400      	bmi.n	800706a <__hi0bits+0x32>
 8007068:	2020      	movs	r0, #32
 800706a:	4770      	bx	lr

0800706c <__lo0bits>:
 800706c:	6803      	ldr	r3, [r0, #0]
 800706e:	0002      	movs	r2, r0
 8007070:	2107      	movs	r1, #7
 8007072:	0018      	movs	r0, r3
 8007074:	4008      	ands	r0, r1
 8007076:	420b      	tst	r3, r1
 8007078:	d00d      	beq.n	8007096 <__lo0bits+0x2a>
 800707a:	3906      	subs	r1, #6
 800707c:	2000      	movs	r0, #0
 800707e:	420b      	tst	r3, r1
 8007080:	d105      	bne.n	800708e <__lo0bits+0x22>
 8007082:	3002      	adds	r0, #2
 8007084:	4203      	tst	r3, r0
 8007086:	d003      	beq.n	8007090 <__lo0bits+0x24>
 8007088:	40cb      	lsrs	r3, r1
 800708a:	0008      	movs	r0, r1
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	4770      	bx	lr
 8007090:	089b      	lsrs	r3, r3, #2
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	e7fb      	b.n	800708e <__lo0bits+0x22>
 8007096:	b299      	uxth	r1, r3
 8007098:	2900      	cmp	r1, #0
 800709a:	d101      	bne.n	80070a0 <__lo0bits+0x34>
 800709c:	2010      	movs	r0, #16
 800709e:	0c1b      	lsrs	r3, r3, #16
 80070a0:	b2d9      	uxtb	r1, r3
 80070a2:	2900      	cmp	r1, #0
 80070a4:	d101      	bne.n	80070aa <__lo0bits+0x3e>
 80070a6:	3008      	adds	r0, #8
 80070a8:	0a1b      	lsrs	r3, r3, #8
 80070aa:	0719      	lsls	r1, r3, #28
 80070ac:	d101      	bne.n	80070b2 <__lo0bits+0x46>
 80070ae:	3004      	adds	r0, #4
 80070b0:	091b      	lsrs	r3, r3, #4
 80070b2:	0799      	lsls	r1, r3, #30
 80070b4:	d101      	bne.n	80070ba <__lo0bits+0x4e>
 80070b6:	3002      	adds	r0, #2
 80070b8:	089b      	lsrs	r3, r3, #2
 80070ba:	07d9      	lsls	r1, r3, #31
 80070bc:	d4e9      	bmi.n	8007092 <__lo0bits+0x26>
 80070be:	3001      	adds	r0, #1
 80070c0:	085b      	lsrs	r3, r3, #1
 80070c2:	d1e6      	bne.n	8007092 <__lo0bits+0x26>
 80070c4:	2020      	movs	r0, #32
 80070c6:	e7e2      	b.n	800708e <__lo0bits+0x22>

080070c8 <__i2b>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	000c      	movs	r4, r1
 80070cc:	2101      	movs	r1, #1
 80070ce:	f7ff ff07 	bl	8006ee0 <_Balloc>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d106      	bne.n	80070e4 <__i2b+0x1c>
 80070d6:	21a0      	movs	r1, #160	; 0xa0
 80070d8:	0002      	movs	r2, r0
 80070da:	4b04      	ldr	r3, [pc, #16]	; (80070ec <__i2b+0x24>)
 80070dc:	4804      	ldr	r0, [pc, #16]	; (80070f0 <__i2b+0x28>)
 80070de:	0049      	lsls	r1, r1, #1
 80070e0:	f000 fbba 	bl	8007858 <__assert_func>
 80070e4:	2301      	movs	r3, #1
 80070e6:	6144      	str	r4, [r0, #20]
 80070e8:	6103      	str	r3, [r0, #16]
 80070ea:	bd10      	pop	{r4, pc}
 80070ec:	0800859f 	.word	0x0800859f
 80070f0:	080085b0 	.word	0x080085b0

080070f4 <__multiply>:
 80070f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070f6:	690b      	ldr	r3, [r1, #16]
 80070f8:	0014      	movs	r4, r2
 80070fa:	6912      	ldr	r2, [r2, #16]
 80070fc:	000d      	movs	r5, r1
 80070fe:	b089      	sub	sp, #36	; 0x24
 8007100:	4293      	cmp	r3, r2
 8007102:	da01      	bge.n	8007108 <__multiply+0x14>
 8007104:	0025      	movs	r5, r4
 8007106:	000c      	movs	r4, r1
 8007108:	692f      	ldr	r7, [r5, #16]
 800710a:	6926      	ldr	r6, [r4, #16]
 800710c:	6869      	ldr	r1, [r5, #4]
 800710e:	19bb      	adds	r3, r7, r6
 8007110:	9302      	str	r3, [sp, #8]
 8007112:	68ab      	ldr	r3, [r5, #8]
 8007114:	19ba      	adds	r2, r7, r6
 8007116:	4293      	cmp	r3, r2
 8007118:	da00      	bge.n	800711c <__multiply+0x28>
 800711a:	3101      	adds	r1, #1
 800711c:	f7ff fee0 	bl	8006ee0 <_Balloc>
 8007120:	9001      	str	r0, [sp, #4]
 8007122:	2800      	cmp	r0, #0
 8007124:	d106      	bne.n	8007134 <__multiply+0x40>
 8007126:	215e      	movs	r1, #94	; 0x5e
 8007128:	0002      	movs	r2, r0
 800712a:	4b48      	ldr	r3, [pc, #288]	; (800724c <__multiply+0x158>)
 800712c:	4848      	ldr	r0, [pc, #288]	; (8007250 <__multiply+0x15c>)
 800712e:	31ff      	adds	r1, #255	; 0xff
 8007130:	f000 fb92 	bl	8007858 <__assert_func>
 8007134:	9b01      	ldr	r3, [sp, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	3314      	adds	r3, #20
 800713a:	469c      	mov	ip, r3
 800713c:	19bb      	adds	r3, r7, r6
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4463      	add	r3, ip
 8007142:	9303      	str	r3, [sp, #12]
 8007144:	4663      	mov	r3, ip
 8007146:	9903      	ldr	r1, [sp, #12]
 8007148:	428b      	cmp	r3, r1
 800714a:	d32c      	bcc.n	80071a6 <__multiply+0xb2>
 800714c:	002b      	movs	r3, r5
 800714e:	0022      	movs	r2, r4
 8007150:	3314      	adds	r3, #20
 8007152:	00bf      	lsls	r7, r7, #2
 8007154:	3214      	adds	r2, #20
 8007156:	9306      	str	r3, [sp, #24]
 8007158:	00b6      	lsls	r6, r6, #2
 800715a:	19db      	adds	r3, r3, r7
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	1993      	adds	r3, r2, r6
 8007160:	9307      	str	r3, [sp, #28]
 8007162:	2304      	movs	r3, #4
 8007164:	9305      	str	r3, [sp, #20]
 8007166:	002b      	movs	r3, r5
 8007168:	9904      	ldr	r1, [sp, #16]
 800716a:	3315      	adds	r3, #21
 800716c:	9200      	str	r2, [sp, #0]
 800716e:	4299      	cmp	r1, r3
 8007170:	d305      	bcc.n	800717e <__multiply+0x8a>
 8007172:	1b4b      	subs	r3, r1, r5
 8007174:	3b15      	subs	r3, #21
 8007176:	089b      	lsrs	r3, r3, #2
 8007178:	3301      	adds	r3, #1
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	9b07      	ldr	r3, [sp, #28]
 8007180:	9a00      	ldr	r2, [sp, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d311      	bcc.n	80071aa <__multiply+0xb6>
 8007186:	9b02      	ldr	r3, [sp, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	dd06      	ble.n	800719a <__multiply+0xa6>
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	3b04      	subs	r3, #4
 8007190:	9303      	str	r3, [sp, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d053      	beq.n	8007242 <__multiply+0x14e>
 800719a:	9b01      	ldr	r3, [sp, #4]
 800719c:	9a02      	ldr	r2, [sp, #8]
 800719e:	0018      	movs	r0, r3
 80071a0:	611a      	str	r2, [r3, #16]
 80071a2:	b009      	add	sp, #36	; 0x24
 80071a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071a6:	c304      	stmia	r3!, {r2}
 80071a8:	e7cd      	b.n	8007146 <__multiply+0x52>
 80071aa:	9b00      	ldr	r3, [sp, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	b298      	uxth	r0, r3
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d01b      	beq.n	80071ec <__multiply+0xf8>
 80071b4:	4667      	mov	r7, ip
 80071b6:	2400      	movs	r4, #0
 80071b8:	9e06      	ldr	r6, [sp, #24]
 80071ba:	ce02      	ldmia	r6!, {r1}
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	b28b      	uxth	r3, r1
 80071c0:	4343      	muls	r3, r0
 80071c2:	b292      	uxth	r2, r2
 80071c4:	189b      	adds	r3, r3, r2
 80071c6:	191b      	adds	r3, r3, r4
 80071c8:	0c0c      	lsrs	r4, r1, #16
 80071ca:	4344      	muls	r4, r0
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	0c11      	lsrs	r1, r2, #16
 80071d0:	1861      	adds	r1, r4, r1
 80071d2:	0c1c      	lsrs	r4, r3, #16
 80071d4:	1909      	adds	r1, r1, r4
 80071d6:	0c0c      	lsrs	r4, r1, #16
 80071d8:	b29b      	uxth	r3, r3
 80071da:	0409      	lsls	r1, r1, #16
 80071dc:	430b      	orrs	r3, r1
 80071de:	c708      	stmia	r7!, {r3}
 80071e0:	9b04      	ldr	r3, [sp, #16]
 80071e2:	42b3      	cmp	r3, r6
 80071e4:	d8e9      	bhi.n	80071ba <__multiply+0xc6>
 80071e6:	4663      	mov	r3, ip
 80071e8:	9a05      	ldr	r2, [sp, #20]
 80071ea:	509c      	str	r4, [r3, r2]
 80071ec:	9b00      	ldr	r3, [sp, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	0c1e      	lsrs	r6, r3, #16
 80071f2:	d020      	beq.n	8007236 <__multiply+0x142>
 80071f4:	4663      	mov	r3, ip
 80071f6:	002c      	movs	r4, r5
 80071f8:	4660      	mov	r0, ip
 80071fa:	2700      	movs	r7, #0
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3414      	adds	r4, #20
 8007200:	6822      	ldr	r2, [r4, #0]
 8007202:	b29b      	uxth	r3, r3
 8007204:	b291      	uxth	r1, r2
 8007206:	4371      	muls	r1, r6
 8007208:	6802      	ldr	r2, [r0, #0]
 800720a:	0c12      	lsrs	r2, r2, #16
 800720c:	1889      	adds	r1, r1, r2
 800720e:	19cf      	adds	r7, r1, r7
 8007210:	0439      	lsls	r1, r7, #16
 8007212:	430b      	orrs	r3, r1
 8007214:	6003      	str	r3, [r0, #0]
 8007216:	cc02      	ldmia	r4!, {r1}
 8007218:	6843      	ldr	r3, [r0, #4]
 800721a:	0c09      	lsrs	r1, r1, #16
 800721c:	4371      	muls	r1, r6
 800721e:	b29b      	uxth	r3, r3
 8007220:	0c3f      	lsrs	r7, r7, #16
 8007222:	18cb      	adds	r3, r1, r3
 8007224:	9a04      	ldr	r2, [sp, #16]
 8007226:	19db      	adds	r3, r3, r7
 8007228:	0c1f      	lsrs	r7, r3, #16
 800722a:	3004      	adds	r0, #4
 800722c:	42a2      	cmp	r2, r4
 800722e:	d8e7      	bhi.n	8007200 <__multiply+0x10c>
 8007230:	4662      	mov	r2, ip
 8007232:	9905      	ldr	r1, [sp, #20]
 8007234:	5053      	str	r3, [r2, r1]
 8007236:	9b00      	ldr	r3, [sp, #0]
 8007238:	3304      	adds	r3, #4
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	2304      	movs	r3, #4
 800723e:	449c      	add	ip, r3
 8007240:	e79d      	b.n	800717e <__multiply+0x8a>
 8007242:	9b02      	ldr	r3, [sp, #8]
 8007244:	3b01      	subs	r3, #1
 8007246:	9302      	str	r3, [sp, #8]
 8007248:	e79d      	b.n	8007186 <__multiply+0x92>
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	0800859f 	.word	0x0800859f
 8007250:	080085b0 	.word	0x080085b0

08007254 <__pow5mult>:
 8007254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007256:	2303      	movs	r3, #3
 8007258:	0015      	movs	r5, r2
 800725a:	0007      	movs	r7, r0
 800725c:	000e      	movs	r6, r1
 800725e:	401a      	ands	r2, r3
 8007260:	421d      	tst	r5, r3
 8007262:	d008      	beq.n	8007276 <__pow5mult+0x22>
 8007264:	4925      	ldr	r1, [pc, #148]	; (80072fc <__pow5mult+0xa8>)
 8007266:	3a01      	subs	r2, #1
 8007268:	0092      	lsls	r2, r2, #2
 800726a:	5852      	ldr	r2, [r2, r1]
 800726c:	2300      	movs	r3, #0
 800726e:	0031      	movs	r1, r6
 8007270:	f7ff fe9e 	bl	8006fb0 <__multadd>
 8007274:	0006      	movs	r6, r0
 8007276:	10ad      	asrs	r5, r5, #2
 8007278:	d03d      	beq.n	80072f6 <__pow5mult+0xa2>
 800727a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800727c:	2c00      	cmp	r4, #0
 800727e:	d10f      	bne.n	80072a0 <__pow5mult+0x4c>
 8007280:	2010      	movs	r0, #16
 8007282:	f7ff fe0f 	bl	8006ea4 <malloc>
 8007286:	1e02      	subs	r2, r0, #0
 8007288:	6278      	str	r0, [r7, #36]	; 0x24
 800728a:	d105      	bne.n	8007298 <__pow5mult+0x44>
 800728c:	21d7      	movs	r1, #215	; 0xd7
 800728e:	4b1c      	ldr	r3, [pc, #112]	; (8007300 <__pow5mult+0xac>)
 8007290:	481c      	ldr	r0, [pc, #112]	; (8007304 <__pow5mult+0xb0>)
 8007292:	0049      	lsls	r1, r1, #1
 8007294:	f000 fae0 	bl	8007858 <__assert_func>
 8007298:	6044      	str	r4, [r0, #4]
 800729a:	6084      	str	r4, [r0, #8]
 800729c:	6004      	str	r4, [r0, #0]
 800729e:	60c4      	str	r4, [r0, #12]
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	689c      	ldr	r4, [r3, #8]
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	2c00      	cmp	r4, #0
 80072a8:	d108      	bne.n	80072bc <__pow5mult+0x68>
 80072aa:	0038      	movs	r0, r7
 80072ac:	4916      	ldr	r1, [pc, #88]	; (8007308 <__pow5mult+0xb4>)
 80072ae:	f7ff ff0b 	bl	80070c8 <__i2b>
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	0004      	movs	r4, r0
 80072b6:	6098      	str	r0, [r3, #8]
 80072b8:	2300      	movs	r3, #0
 80072ba:	6003      	str	r3, [r0, #0]
 80072bc:	2301      	movs	r3, #1
 80072be:	421d      	tst	r5, r3
 80072c0:	d00a      	beq.n	80072d8 <__pow5mult+0x84>
 80072c2:	0031      	movs	r1, r6
 80072c4:	0022      	movs	r2, r4
 80072c6:	0038      	movs	r0, r7
 80072c8:	f7ff ff14 	bl	80070f4 <__multiply>
 80072cc:	0031      	movs	r1, r6
 80072ce:	9001      	str	r0, [sp, #4]
 80072d0:	0038      	movs	r0, r7
 80072d2:	f7ff fe49 	bl	8006f68 <_Bfree>
 80072d6:	9e01      	ldr	r6, [sp, #4]
 80072d8:	106d      	asrs	r5, r5, #1
 80072da:	d00c      	beq.n	80072f6 <__pow5mult+0xa2>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	2800      	cmp	r0, #0
 80072e0:	d107      	bne.n	80072f2 <__pow5mult+0x9e>
 80072e2:	0022      	movs	r2, r4
 80072e4:	0021      	movs	r1, r4
 80072e6:	0038      	movs	r0, r7
 80072e8:	f7ff ff04 	bl	80070f4 <__multiply>
 80072ec:	2300      	movs	r3, #0
 80072ee:	6020      	str	r0, [r4, #0]
 80072f0:	6003      	str	r3, [r0, #0]
 80072f2:	0004      	movs	r4, r0
 80072f4:	e7e2      	b.n	80072bc <__pow5mult+0x68>
 80072f6:	0030      	movs	r0, r6
 80072f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	08008700 	.word	0x08008700
 8007300:	0800852d 	.word	0x0800852d
 8007304:	080085b0 	.word	0x080085b0
 8007308:	00000271 	.word	0x00000271

0800730c <__lshift>:
 800730c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800730e:	000c      	movs	r4, r1
 8007310:	0017      	movs	r7, r2
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	1155      	asrs	r5, r2, #5
 8007316:	b087      	sub	sp, #28
 8007318:	18eb      	adds	r3, r5, r3
 800731a:	9302      	str	r3, [sp, #8]
 800731c:	3301      	adds	r3, #1
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	6849      	ldr	r1, [r1, #4]
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	9004      	str	r0, [sp, #16]
 8007326:	9a01      	ldr	r2, [sp, #4]
 8007328:	4293      	cmp	r3, r2
 800732a:	db10      	blt.n	800734e <__lshift+0x42>
 800732c:	9804      	ldr	r0, [sp, #16]
 800732e:	f7ff fdd7 	bl	8006ee0 <_Balloc>
 8007332:	2300      	movs	r3, #0
 8007334:	0002      	movs	r2, r0
 8007336:	0006      	movs	r6, r0
 8007338:	0019      	movs	r1, r3
 800733a:	3214      	adds	r2, #20
 800733c:	4298      	cmp	r0, r3
 800733e:	d10c      	bne.n	800735a <__lshift+0x4e>
 8007340:	21da      	movs	r1, #218	; 0xda
 8007342:	0002      	movs	r2, r0
 8007344:	4b26      	ldr	r3, [pc, #152]	; (80073e0 <__lshift+0xd4>)
 8007346:	4827      	ldr	r0, [pc, #156]	; (80073e4 <__lshift+0xd8>)
 8007348:	31ff      	adds	r1, #255	; 0xff
 800734a:	f000 fa85 	bl	8007858 <__assert_func>
 800734e:	3101      	adds	r1, #1
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	e7e8      	b.n	8007326 <__lshift+0x1a>
 8007354:	0098      	lsls	r0, r3, #2
 8007356:	5011      	str	r1, [r2, r0]
 8007358:	3301      	adds	r3, #1
 800735a:	42ab      	cmp	r3, r5
 800735c:	dbfa      	blt.n	8007354 <__lshift+0x48>
 800735e:	43eb      	mvns	r3, r5
 8007360:	17db      	asrs	r3, r3, #31
 8007362:	401d      	ands	r5, r3
 8007364:	211f      	movs	r1, #31
 8007366:	0023      	movs	r3, r4
 8007368:	0038      	movs	r0, r7
 800736a:	00ad      	lsls	r5, r5, #2
 800736c:	1955      	adds	r5, r2, r5
 800736e:	6922      	ldr	r2, [r4, #16]
 8007370:	3314      	adds	r3, #20
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	4008      	ands	r0, r1
 8007376:	4684      	mov	ip, r0
 8007378:	189a      	adds	r2, r3, r2
 800737a:	420f      	tst	r7, r1
 800737c:	d02a      	beq.n	80073d4 <__lshift+0xc8>
 800737e:	3101      	adds	r1, #1
 8007380:	1a09      	subs	r1, r1, r0
 8007382:	9105      	str	r1, [sp, #20]
 8007384:	2100      	movs	r1, #0
 8007386:	9503      	str	r5, [sp, #12]
 8007388:	4667      	mov	r7, ip
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	40b8      	lsls	r0, r7
 800738e:	4301      	orrs	r1, r0
 8007390:	9803      	ldr	r0, [sp, #12]
 8007392:	c002      	stmia	r0!, {r1}
 8007394:	cb02      	ldmia	r3!, {r1}
 8007396:	9003      	str	r0, [sp, #12]
 8007398:	9805      	ldr	r0, [sp, #20]
 800739a:	40c1      	lsrs	r1, r0
 800739c:	429a      	cmp	r2, r3
 800739e:	d8f3      	bhi.n	8007388 <__lshift+0x7c>
 80073a0:	0020      	movs	r0, r4
 80073a2:	3015      	adds	r0, #21
 80073a4:	2304      	movs	r3, #4
 80073a6:	4282      	cmp	r2, r0
 80073a8:	d304      	bcc.n	80073b4 <__lshift+0xa8>
 80073aa:	1b13      	subs	r3, r2, r4
 80073ac:	3b15      	subs	r3, #21
 80073ae:	089b      	lsrs	r3, r3, #2
 80073b0:	3301      	adds	r3, #1
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	50e9      	str	r1, [r5, r3]
 80073b6:	2900      	cmp	r1, #0
 80073b8:	d002      	beq.n	80073c0 <__lshift+0xb4>
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	3302      	adds	r3, #2
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	9b01      	ldr	r3, [sp, #4]
 80073c2:	9804      	ldr	r0, [sp, #16]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	0021      	movs	r1, r4
 80073c8:	6133      	str	r3, [r6, #16]
 80073ca:	f7ff fdcd 	bl	8006f68 <_Bfree>
 80073ce:	0030      	movs	r0, r6
 80073d0:	b007      	add	sp, #28
 80073d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d4:	cb02      	ldmia	r3!, {r1}
 80073d6:	c502      	stmia	r5!, {r1}
 80073d8:	429a      	cmp	r2, r3
 80073da:	d8fb      	bhi.n	80073d4 <__lshift+0xc8>
 80073dc:	e7f0      	b.n	80073c0 <__lshift+0xb4>
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	0800859f 	.word	0x0800859f
 80073e4:	080085b0 	.word	0x080085b0

080073e8 <__mcmp>:
 80073e8:	6902      	ldr	r2, [r0, #16]
 80073ea:	690b      	ldr	r3, [r1, #16]
 80073ec:	b530      	push	{r4, r5, lr}
 80073ee:	0004      	movs	r4, r0
 80073f0:	1ad0      	subs	r0, r2, r3
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d10d      	bne.n	8007412 <__mcmp+0x2a>
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	3414      	adds	r4, #20
 80073fa:	3114      	adds	r1, #20
 80073fc:	18e2      	adds	r2, r4, r3
 80073fe:	18c9      	adds	r1, r1, r3
 8007400:	3a04      	subs	r2, #4
 8007402:	3904      	subs	r1, #4
 8007404:	6815      	ldr	r5, [r2, #0]
 8007406:	680b      	ldr	r3, [r1, #0]
 8007408:	429d      	cmp	r5, r3
 800740a:	d003      	beq.n	8007414 <__mcmp+0x2c>
 800740c:	2001      	movs	r0, #1
 800740e:	429d      	cmp	r5, r3
 8007410:	d303      	bcc.n	800741a <__mcmp+0x32>
 8007412:	bd30      	pop	{r4, r5, pc}
 8007414:	4294      	cmp	r4, r2
 8007416:	d3f3      	bcc.n	8007400 <__mcmp+0x18>
 8007418:	e7fb      	b.n	8007412 <__mcmp+0x2a>
 800741a:	4240      	negs	r0, r0
 800741c:	e7f9      	b.n	8007412 <__mcmp+0x2a>
	...

08007420 <__mdiff>:
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	000e      	movs	r6, r1
 8007424:	0007      	movs	r7, r0
 8007426:	0011      	movs	r1, r2
 8007428:	0030      	movs	r0, r6
 800742a:	b087      	sub	sp, #28
 800742c:	0014      	movs	r4, r2
 800742e:	f7ff ffdb 	bl	80073e8 <__mcmp>
 8007432:	1e05      	subs	r5, r0, #0
 8007434:	d110      	bne.n	8007458 <__mdiff+0x38>
 8007436:	0001      	movs	r1, r0
 8007438:	0038      	movs	r0, r7
 800743a:	f7ff fd51 	bl	8006ee0 <_Balloc>
 800743e:	1e02      	subs	r2, r0, #0
 8007440:	d104      	bne.n	800744c <__mdiff+0x2c>
 8007442:	4b40      	ldr	r3, [pc, #256]	; (8007544 <__mdiff+0x124>)
 8007444:	4940      	ldr	r1, [pc, #256]	; (8007548 <__mdiff+0x128>)
 8007446:	4841      	ldr	r0, [pc, #260]	; (800754c <__mdiff+0x12c>)
 8007448:	f000 fa06 	bl	8007858 <__assert_func>
 800744c:	2301      	movs	r3, #1
 800744e:	6145      	str	r5, [r0, #20]
 8007450:	6103      	str	r3, [r0, #16]
 8007452:	0010      	movs	r0, r2
 8007454:	b007      	add	sp, #28
 8007456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007458:	2301      	movs	r3, #1
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	2800      	cmp	r0, #0
 800745e:	db04      	blt.n	800746a <__mdiff+0x4a>
 8007460:	0023      	movs	r3, r4
 8007462:	0034      	movs	r4, r6
 8007464:	001e      	movs	r6, r3
 8007466:	2300      	movs	r3, #0
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	0038      	movs	r0, r7
 800746c:	6861      	ldr	r1, [r4, #4]
 800746e:	f7ff fd37 	bl	8006ee0 <_Balloc>
 8007472:	1e02      	subs	r2, r0, #0
 8007474:	d103      	bne.n	800747e <__mdiff+0x5e>
 8007476:	2190      	movs	r1, #144	; 0x90
 8007478:	4b32      	ldr	r3, [pc, #200]	; (8007544 <__mdiff+0x124>)
 800747a:	0089      	lsls	r1, r1, #2
 800747c:	e7e3      	b.n	8007446 <__mdiff+0x26>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	2700      	movs	r7, #0
 8007482:	60c3      	str	r3, [r0, #12]
 8007484:	6920      	ldr	r0, [r4, #16]
 8007486:	3414      	adds	r4, #20
 8007488:	9401      	str	r4, [sp, #4]
 800748a:	9b01      	ldr	r3, [sp, #4]
 800748c:	0084      	lsls	r4, r0, #2
 800748e:	191b      	adds	r3, r3, r4
 8007490:	0034      	movs	r4, r6
 8007492:	9302      	str	r3, [sp, #8]
 8007494:	6933      	ldr	r3, [r6, #16]
 8007496:	3414      	adds	r4, #20
 8007498:	0099      	lsls	r1, r3, #2
 800749a:	1863      	adds	r3, r4, r1
 800749c:	9303      	str	r3, [sp, #12]
 800749e:	0013      	movs	r3, r2
 80074a0:	3314      	adds	r3, #20
 80074a2:	469c      	mov	ip, r3
 80074a4:	9305      	str	r3, [sp, #20]
 80074a6:	9b01      	ldr	r3, [sp, #4]
 80074a8:	9304      	str	r3, [sp, #16]
 80074aa:	9b04      	ldr	r3, [sp, #16]
 80074ac:	cc02      	ldmia	r4!, {r1}
 80074ae:	cb20      	ldmia	r3!, {r5}
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	b2ab      	uxth	r3, r5
 80074b4:	19df      	adds	r7, r3, r7
 80074b6:	b28b      	uxth	r3, r1
 80074b8:	1afb      	subs	r3, r7, r3
 80074ba:	0c09      	lsrs	r1, r1, #16
 80074bc:	0c2d      	lsrs	r5, r5, #16
 80074be:	1a6d      	subs	r5, r5, r1
 80074c0:	1419      	asrs	r1, r3, #16
 80074c2:	186d      	adds	r5, r5, r1
 80074c4:	4661      	mov	r1, ip
 80074c6:	142f      	asrs	r7, r5, #16
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	042d      	lsls	r5, r5, #16
 80074cc:	432b      	orrs	r3, r5
 80074ce:	c108      	stmia	r1!, {r3}
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	468c      	mov	ip, r1
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	d8e8      	bhi.n	80074aa <__mdiff+0x8a>
 80074d8:	0031      	movs	r1, r6
 80074da:	9c03      	ldr	r4, [sp, #12]
 80074dc:	3115      	adds	r1, #21
 80074de:	2304      	movs	r3, #4
 80074e0:	428c      	cmp	r4, r1
 80074e2:	d304      	bcc.n	80074ee <__mdiff+0xce>
 80074e4:	1ba3      	subs	r3, r4, r6
 80074e6:	3b15      	subs	r3, #21
 80074e8:	089b      	lsrs	r3, r3, #2
 80074ea:	3301      	adds	r3, #1
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	9901      	ldr	r1, [sp, #4]
 80074f0:	18cc      	adds	r4, r1, r3
 80074f2:	9905      	ldr	r1, [sp, #20]
 80074f4:	0026      	movs	r6, r4
 80074f6:	18cb      	adds	r3, r1, r3
 80074f8:	469c      	mov	ip, r3
 80074fa:	9902      	ldr	r1, [sp, #8]
 80074fc:	428e      	cmp	r6, r1
 80074fe:	d310      	bcc.n	8007522 <__mdiff+0x102>
 8007500:	9e02      	ldr	r6, [sp, #8]
 8007502:	1ee1      	subs	r1, r4, #3
 8007504:	2500      	movs	r5, #0
 8007506:	428e      	cmp	r6, r1
 8007508:	d304      	bcc.n	8007514 <__mdiff+0xf4>
 800750a:	0031      	movs	r1, r6
 800750c:	3103      	adds	r1, #3
 800750e:	1b0c      	subs	r4, r1, r4
 8007510:	08a4      	lsrs	r4, r4, #2
 8007512:	00a5      	lsls	r5, r4, #2
 8007514:	195b      	adds	r3, r3, r5
 8007516:	3b04      	subs	r3, #4
 8007518:	6819      	ldr	r1, [r3, #0]
 800751a:	2900      	cmp	r1, #0
 800751c:	d00f      	beq.n	800753e <__mdiff+0x11e>
 800751e:	6110      	str	r0, [r2, #16]
 8007520:	e797      	b.n	8007452 <__mdiff+0x32>
 8007522:	ce02      	ldmia	r6!, {r1}
 8007524:	b28d      	uxth	r5, r1
 8007526:	19ed      	adds	r5, r5, r7
 8007528:	0c0f      	lsrs	r7, r1, #16
 800752a:	1429      	asrs	r1, r5, #16
 800752c:	1879      	adds	r1, r7, r1
 800752e:	140f      	asrs	r7, r1, #16
 8007530:	b2ad      	uxth	r5, r5
 8007532:	0409      	lsls	r1, r1, #16
 8007534:	430d      	orrs	r5, r1
 8007536:	4661      	mov	r1, ip
 8007538:	c120      	stmia	r1!, {r5}
 800753a:	468c      	mov	ip, r1
 800753c:	e7dd      	b.n	80074fa <__mdiff+0xda>
 800753e:	3801      	subs	r0, #1
 8007540:	e7e9      	b.n	8007516 <__mdiff+0xf6>
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	0800859f 	.word	0x0800859f
 8007548:	00000232 	.word	0x00000232
 800754c:	080085b0 	.word	0x080085b0

08007550 <__d2b>:
 8007550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007552:	2101      	movs	r1, #1
 8007554:	0014      	movs	r4, r2
 8007556:	001e      	movs	r6, r3
 8007558:	9f08      	ldr	r7, [sp, #32]
 800755a:	f7ff fcc1 	bl	8006ee0 <_Balloc>
 800755e:	1e05      	subs	r5, r0, #0
 8007560:	d105      	bne.n	800756e <__d2b+0x1e>
 8007562:	0002      	movs	r2, r0
 8007564:	4b26      	ldr	r3, [pc, #152]	; (8007600 <__d2b+0xb0>)
 8007566:	4927      	ldr	r1, [pc, #156]	; (8007604 <__d2b+0xb4>)
 8007568:	4827      	ldr	r0, [pc, #156]	; (8007608 <__d2b+0xb8>)
 800756a:	f000 f975 	bl	8007858 <__assert_func>
 800756e:	0333      	lsls	r3, r6, #12
 8007570:	0076      	lsls	r6, r6, #1
 8007572:	0b1b      	lsrs	r3, r3, #12
 8007574:	0d76      	lsrs	r6, r6, #21
 8007576:	d124      	bne.n	80075c2 <__d2b+0x72>
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	2c00      	cmp	r4, #0
 800757c:	d027      	beq.n	80075ce <__d2b+0x7e>
 800757e:	4668      	mov	r0, sp
 8007580:	9400      	str	r4, [sp, #0]
 8007582:	f7ff fd73 	bl	800706c <__lo0bits>
 8007586:	9c00      	ldr	r4, [sp, #0]
 8007588:	2800      	cmp	r0, #0
 800758a:	d01e      	beq.n	80075ca <__d2b+0x7a>
 800758c:	9b01      	ldr	r3, [sp, #4]
 800758e:	2120      	movs	r1, #32
 8007590:	001a      	movs	r2, r3
 8007592:	1a09      	subs	r1, r1, r0
 8007594:	408a      	lsls	r2, r1
 8007596:	40c3      	lsrs	r3, r0
 8007598:	4322      	orrs	r2, r4
 800759a:	616a      	str	r2, [r5, #20]
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	9c01      	ldr	r4, [sp, #4]
 80075a0:	61ac      	str	r4, [r5, #24]
 80075a2:	1e63      	subs	r3, r4, #1
 80075a4:	419c      	sbcs	r4, r3
 80075a6:	3401      	adds	r4, #1
 80075a8:	612c      	str	r4, [r5, #16]
 80075aa:	2e00      	cmp	r6, #0
 80075ac:	d018      	beq.n	80075e0 <__d2b+0x90>
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <__d2b+0xbc>)
 80075b0:	18f6      	adds	r6, r6, r3
 80075b2:	2335      	movs	r3, #53	; 0x35
 80075b4:	1836      	adds	r6, r6, r0
 80075b6:	1a18      	subs	r0, r3, r0
 80075b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ba:	603e      	str	r6, [r7, #0]
 80075bc:	6018      	str	r0, [r3, #0]
 80075be:	0028      	movs	r0, r5
 80075c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075c2:	2280      	movs	r2, #128	; 0x80
 80075c4:	0352      	lsls	r2, r2, #13
 80075c6:	4313      	orrs	r3, r2
 80075c8:	e7d6      	b.n	8007578 <__d2b+0x28>
 80075ca:	616c      	str	r4, [r5, #20]
 80075cc:	e7e7      	b.n	800759e <__d2b+0x4e>
 80075ce:	a801      	add	r0, sp, #4
 80075d0:	f7ff fd4c 	bl	800706c <__lo0bits>
 80075d4:	2401      	movs	r4, #1
 80075d6:	9b01      	ldr	r3, [sp, #4]
 80075d8:	612c      	str	r4, [r5, #16]
 80075da:	616b      	str	r3, [r5, #20]
 80075dc:	3020      	adds	r0, #32
 80075de:	e7e4      	b.n	80075aa <__d2b+0x5a>
 80075e0:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <__d2b+0xc0>)
 80075e2:	18c0      	adds	r0, r0, r3
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <__d2b+0xc4>)
 80075e6:	6038      	str	r0, [r7, #0]
 80075e8:	18e3      	adds	r3, r4, r3
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	18eb      	adds	r3, r5, r3
 80075ee:	6958      	ldr	r0, [r3, #20]
 80075f0:	f7ff fd22 	bl	8007038 <__hi0bits>
 80075f4:	0164      	lsls	r4, r4, #5
 80075f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f8:	1a24      	subs	r4, r4, r0
 80075fa:	601c      	str	r4, [r3, #0]
 80075fc:	e7df      	b.n	80075be <__d2b+0x6e>
 80075fe:	46c0      	nop			; (mov r8, r8)
 8007600:	0800859f 	.word	0x0800859f
 8007604:	0000030a 	.word	0x0000030a
 8007608:	080085b0 	.word	0x080085b0
 800760c:	fffffbcd 	.word	0xfffffbcd
 8007610:	fffffbce 	.word	0xfffffbce
 8007614:	3fffffff 	.word	0x3fffffff

08007618 <_calloc_r>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	0c13      	lsrs	r3, r2, #16
 800761c:	0c0d      	lsrs	r5, r1, #16
 800761e:	d11e      	bne.n	800765e <_calloc_r+0x46>
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10c      	bne.n	800763e <_calloc_r+0x26>
 8007624:	b289      	uxth	r1, r1
 8007626:	b294      	uxth	r4, r2
 8007628:	434c      	muls	r4, r1
 800762a:	0021      	movs	r1, r4
 800762c:	f000 f88c 	bl	8007748 <_malloc_r>
 8007630:	1e05      	subs	r5, r0, #0
 8007632:	d01b      	beq.n	800766c <_calloc_r+0x54>
 8007634:	0022      	movs	r2, r4
 8007636:	2100      	movs	r1, #0
 8007638:	f7fe f914 	bl	8005864 <memset>
 800763c:	e016      	b.n	800766c <_calloc_r+0x54>
 800763e:	1c1d      	adds	r5, r3, #0
 8007640:	1c0b      	adds	r3, r1, #0
 8007642:	b292      	uxth	r2, r2
 8007644:	b289      	uxth	r1, r1
 8007646:	b29c      	uxth	r4, r3
 8007648:	4351      	muls	r1, r2
 800764a:	b2ab      	uxth	r3, r5
 800764c:	4363      	muls	r3, r4
 800764e:	0c0c      	lsrs	r4, r1, #16
 8007650:	191c      	adds	r4, r3, r4
 8007652:	0c22      	lsrs	r2, r4, #16
 8007654:	d107      	bne.n	8007666 <_calloc_r+0x4e>
 8007656:	0424      	lsls	r4, r4, #16
 8007658:	b289      	uxth	r1, r1
 800765a:	430c      	orrs	r4, r1
 800765c:	e7e5      	b.n	800762a <_calloc_r+0x12>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <_calloc_r+0x4e>
 8007662:	1c13      	adds	r3, r2, #0
 8007664:	e7ed      	b.n	8007642 <_calloc_r+0x2a>
 8007666:	230c      	movs	r3, #12
 8007668:	2500      	movs	r5, #0
 800766a:	6003      	str	r3, [r0, #0]
 800766c:	0028      	movs	r0, r5
 800766e:	bd70      	pop	{r4, r5, r6, pc}

08007670 <_free_r>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	0005      	movs	r5, r0
 8007674:	2900      	cmp	r1, #0
 8007676:	d010      	beq.n	800769a <_free_r+0x2a>
 8007678:	1f0c      	subs	r4, r1, #4
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	da00      	bge.n	8007682 <_free_r+0x12>
 8007680:	18e4      	adds	r4, r4, r3
 8007682:	0028      	movs	r0, r5
 8007684:	f000 f928 	bl	80078d8 <__malloc_lock>
 8007688:	4a1d      	ldr	r2, [pc, #116]	; (8007700 <_free_r+0x90>)
 800768a:	6813      	ldr	r3, [r2, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <_free_r+0x2c>
 8007690:	6063      	str	r3, [r4, #4]
 8007692:	6014      	str	r4, [r2, #0]
 8007694:	0028      	movs	r0, r5
 8007696:	f000 f927 	bl	80078e8 <__malloc_unlock>
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	42a3      	cmp	r3, r4
 800769e:	d908      	bls.n	80076b2 <_free_r+0x42>
 80076a0:	6821      	ldr	r1, [r4, #0]
 80076a2:	1860      	adds	r0, r4, r1
 80076a4:	4283      	cmp	r3, r0
 80076a6:	d1f3      	bne.n	8007690 <_free_r+0x20>
 80076a8:	6818      	ldr	r0, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	1841      	adds	r1, r0, r1
 80076ae:	6021      	str	r1, [r4, #0]
 80076b0:	e7ee      	b.n	8007690 <_free_r+0x20>
 80076b2:	001a      	movs	r2, r3
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <_free_r+0x4e>
 80076ba:	42a3      	cmp	r3, r4
 80076bc:	d9f9      	bls.n	80076b2 <_free_r+0x42>
 80076be:	6811      	ldr	r1, [r2, #0]
 80076c0:	1850      	adds	r0, r2, r1
 80076c2:	42a0      	cmp	r0, r4
 80076c4:	d10b      	bne.n	80076de <_free_r+0x6e>
 80076c6:	6820      	ldr	r0, [r4, #0]
 80076c8:	1809      	adds	r1, r1, r0
 80076ca:	1850      	adds	r0, r2, r1
 80076cc:	6011      	str	r1, [r2, #0]
 80076ce:	4283      	cmp	r3, r0
 80076d0:	d1e0      	bne.n	8007694 <_free_r+0x24>
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	1841      	adds	r1, r0, r1
 80076d8:	6011      	str	r1, [r2, #0]
 80076da:	6053      	str	r3, [r2, #4]
 80076dc:	e7da      	b.n	8007694 <_free_r+0x24>
 80076de:	42a0      	cmp	r0, r4
 80076e0:	d902      	bls.n	80076e8 <_free_r+0x78>
 80076e2:	230c      	movs	r3, #12
 80076e4:	602b      	str	r3, [r5, #0]
 80076e6:	e7d5      	b.n	8007694 <_free_r+0x24>
 80076e8:	6821      	ldr	r1, [r4, #0]
 80076ea:	1860      	adds	r0, r4, r1
 80076ec:	4283      	cmp	r3, r0
 80076ee:	d103      	bne.n	80076f8 <_free_r+0x88>
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	1841      	adds	r1, r0, r1
 80076f6:	6021      	str	r1, [r4, #0]
 80076f8:	6063      	str	r3, [r4, #4]
 80076fa:	6054      	str	r4, [r2, #4]
 80076fc:	e7ca      	b.n	8007694 <_free_r+0x24>
 80076fe:	46c0      	nop			; (mov r8, r8)
 8007700:	200002dc 	.word	0x200002dc

08007704 <sbrk_aligned>:
 8007704:	b570      	push	{r4, r5, r6, lr}
 8007706:	4e0f      	ldr	r6, [pc, #60]	; (8007744 <sbrk_aligned+0x40>)
 8007708:	000d      	movs	r5, r1
 800770a:	6831      	ldr	r1, [r6, #0]
 800770c:	0004      	movs	r4, r0
 800770e:	2900      	cmp	r1, #0
 8007710:	d102      	bne.n	8007718 <sbrk_aligned+0x14>
 8007712:	f000 f88f 	bl	8007834 <_sbrk_r>
 8007716:	6030      	str	r0, [r6, #0]
 8007718:	0029      	movs	r1, r5
 800771a:	0020      	movs	r0, r4
 800771c:	f000 f88a 	bl	8007834 <_sbrk_r>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d00a      	beq.n	800773a <sbrk_aligned+0x36>
 8007724:	2303      	movs	r3, #3
 8007726:	1cc5      	adds	r5, r0, #3
 8007728:	439d      	bics	r5, r3
 800772a:	42a8      	cmp	r0, r5
 800772c:	d007      	beq.n	800773e <sbrk_aligned+0x3a>
 800772e:	1a29      	subs	r1, r5, r0
 8007730:	0020      	movs	r0, r4
 8007732:	f000 f87f 	bl	8007834 <_sbrk_r>
 8007736:	1c43      	adds	r3, r0, #1
 8007738:	d101      	bne.n	800773e <sbrk_aligned+0x3a>
 800773a:	2501      	movs	r5, #1
 800773c:	426d      	negs	r5, r5
 800773e:	0028      	movs	r0, r5
 8007740:	bd70      	pop	{r4, r5, r6, pc}
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	200002e0 	.word	0x200002e0

08007748 <_malloc_r>:
 8007748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800774a:	2203      	movs	r2, #3
 800774c:	1ccb      	adds	r3, r1, #3
 800774e:	4393      	bics	r3, r2
 8007750:	3308      	adds	r3, #8
 8007752:	0006      	movs	r6, r0
 8007754:	001f      	movs	r7, r3
 8007756:	2b0c      	cmp	r3, #12
 8007758:	d232      	bcs.n	80077c0 <_malloc_r+0x78>
 800775a:	270c      	movs	r7, #12
 800775c:	42b9      	cmp	r1, r7
 800775e:	d831      	bhi.n	80077c4 <_malloc_r+0x7c>
 8007760:	0030      	movs	r0, r6
 8007762:	f000 f8b9 	bl	80078d8 <__malloc_lock>
 8007766:	4d32      	ldr	r5, [pc, #200]	; (8007830 <_malloc_r+0xe8>)
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	001c      	movs	r4, r3
 800776c:	2c00      	cmp	r4, #0
 800776e:	d12e      	bne.n	80077ce <_malloc_r+0x86>
 8007770:	0039      	movs	r1, r7
 8007772:	0030      	movs	r0, r6
 8007774:	f7ff ffc6 	bl	8007704 <sbrk_aligned>
 8007778:	0004      	movs	r4, r0
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d11e      	bne.n	80077bc <_malloc_r+0x74>
 800777e:	682c      	ldr	r4, [r5, #0]
 8007780:	0025      	movs	r5, r4
 8007782:	2d00      	cmp	r5, #0
 8007784:	d14a      	bne.n	800781c <_malloc_r+0xd4>
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	0029      	movs	r1, r5
 800778a:	18e3      	adds	r3, r4, r3
 800778c:	0030      	movs	r0, r6
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	f000 f850 	bl	8007834 <_sbrk_r>
 8007794:	9b01      	ldr	r3, [sp, #4]
 8007796:	4283      	cmp	r3, r0
 8007798:	d143      	bne.n	8007822 <_malloc_r+0xda>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	3703      	adds	r7, #3
 800779e:	1aff      	subs	r7, r7, r3
 80077a0:	2303      	movs	r3, #3
 80077a2:	439f      	bics	r7, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	2f0c      	cmp	r7, #12
 80077a8:	d200      	bcs.n	80077ac <_malloc_r+0x64>
 80077aa:	270c      	movs	r7, #12
 80077ac:	0039      	movs	r1, r7
 80077ae:	0030      	movs	r0, r6
 80077b0:	f7ff ffa8 	bl	8007704 <sbrk_aligned>
 80077b4:	1c43      	adds	r3, r0, #1
 80077b6:	d034      	beq.n	8007822 <_malloc_r+0xda>
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	19df      	adds	r7, r3, r7
 80077bc:	6027      	str	r7, [r4, #0]
 80077be:	e013      	b.n	80077e8 <_malloc_r+0xa0>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dacb      	bge.n	800775c <_malloc_r+0x14>
 80077c4:	230c      	movs	r3, #12
 80077c6:	2500      	movs	r5, #0
 80077c8:	6033      	str	r3, [r6, #0]
 80077ca:	0028      	movs	r0, r5
 80077cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077ce:	6822      	ldr	r2, [r4, #0]
 80077d0:	1bd1      	subs	r1, r2, r7
 80077d2:	d420      	bmi.n	8007816 <_malloc_r+0xce>
 80077d4:	290b      	cmp	r1, #11
 80077d6:	d917      	bls.n	8007808 <_malloc_r+0xc0>
 80077d8:	19e2      	adds	r2, r4, r7
 80077da:	6027      	str	r7, [r4, #0]
 80077dc:	42a3      	cmp	r3, r4
 80077de:	d111      	bne.n	8007804 <_malloc_r+0xbc>
 80077e0:	602a      	str	r2, [r5, #0]
 80077e2:	6863      	ldr	r3, [r4, #4]
 80077e4:	6011      	str	r1, [r2, #0]
 80077e6:	6053      	str	r3, [r2, #4]
 80077e8:	0030      	movs	r0, r6
 80077ea:	0025      	movs	r5, r4
 80077ec:	f000 f87c 	bl	80078e8 <__malloc_unlock>
 80077f0:	2207      	movs	r2, #7
 80077f2:	350b      	adds	r5, #11
 80077f4:	1d23      	adds	r3, r4, #4
 80077f6:	4395      	bics	r5, r2
 80077f8:	1aea      	subs	r2, r5, r3
 80077fa:	429d      	cmp	r5, r3
 80077fc:	d0e5      	beq.n	80077ca <_malloc_r+0x82>
 80077fe:	1b5b      	subs	r3, r3, r5
 8007800:	50a3      	str	r3, [r4, r2]
 8007802:	e7e2      	b.n	80077ca <_malloc_r+0x82>
 8007804:	605a      	str	r2, [r3, #4]
 8007806:	e7ec      	b.n	80077e2 <_malloc_r+0x9a>
 8007808:	6862      	ldr	r2, [r4, #4]
 800780a:	42a3      	cmp	r3, r4
 800780c:	d101      	bne.n	8007812 <_malloc_r+0xca>
 800780e:	602a      	str	r2, [r5, #0]
 8007810:	e7ea      	b.n	80077e8 <_malloc_r+0xa0>
 8007812:	605a      	str	r2, [r3, #4]
 8007814:	e7e8      	b.n	80077e8 <_malloc_r+0xa0>
 8007816:	0023      	movs	r3, r4
 8007818:	6864      	ldr	r4, [r4, #4]
 800781a:	e7a7      	b.n	800776c <_malloc_r+0x24>
 800781c:	002c      	movs	r4, r5
 800781e:	686d      	ldr	r5, [r5, #4]
 8007820:	e7af      	b.n	8007782 <_malloc_r+0x3a>
 8007822:	230c      	movs	r3, #12
 8007824:	0030      	movs	r0, r6
 8007826:	6033      	str	r3, [r6, #0]
 8007828:	f000 f85e 	bl	80078e8 <__malloc_unlock>
 800782c:	e7cd      	b.n	80077ca <_malloc_r+0x82>
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	200002dc 	.word	0x200002dc

08007834 <_sbrk_r>:
 8007834:	2300      	movs	r3, #0
 8007836:	b570      	push	{r4, r5, r6, lr}
 8007838:	4d06      	ldr	r5, [pc, #24]	; (8007854 <_sbrk_r+0x20>)
 800783a:	0004      	movs	r4, r0
 800783c:	0008      	movs	r0, r1
 800783e:	602b      	str	r3, [r5, #0]
 8007840:	f7fa ff84 	bl	800274c <_sbrk>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d103      	bne.n	8007850 <_sbrk_r+0x1c>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d000      	beq.n	8007850 <_sbrk_r+0x1c>
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	bd70      	pop	{r4, r5, r6, pc}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	200002e4 	.word	0x200002e4

08007858 <__assert_func>:
 8007858:	b530      	push	{r4, r5, lr}
 800785a:	0014      	movs	r4, r2
 800785c:	001a      	movs	r2, r3
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <__assert_func+0x2c>)
 8007860:	0005      	movs	r5, r0
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	b085      	sub	sp, #20
 8007866:	68d8      	ldr	r0, [r3, #12]
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <__assert_func+0x30>)
 800786a:	2c00      	cmp	r4, #0
 800786c:	d101      	bne.n	8007872 <__assert_func+0x1a>
 800786e:	4b07      	ldr	r3, [pc, #28]	; (800788c <__assert_func+0x34>)
 8007870:	001c      	movs	r4, r3
 8007872:	9301      	str	r3, [sp, #4]
 8007874:	9100      	str	r1, [sp, #0]
 8007876:	002b      	movs	r3, r5
 8007878:	4905      	ldr	r1, [pc, #20]	; (8007890 <__assert_func+0x38>)
 800787a:	9402      	str	r4, [sp, #8]
 800787c:	f000 f80a 	bl	8007894 <fiprintf>
 8007880:	f000 fa78 	bl	8007d74 <abort>
 8007884:	20000020 	.word	0x20000020
 8007888:	0800870c 	.word	0x0800870c
 800788c:	08008747 	.word	0x08008747
 8007890:	08008719 	.word	0x08008719

08007894 <fiprintf>:
 8007894:	b40e      	push	{r1, r2, r3}
 8007896:	b503      	push	{r0, r1, lr}
 8007898:	0001      	movs	r1, r0
 800789a:	ab03      	add	r3, sp, #12
 800789c:	4804      	ldr	r0, [pc, #16]	; (80078b0 <fiprintf+0x1c>)
 800789e:	cb04      	ldmia	r3!, {r2}
 80078a0:	6800      	ldr	r0, [r0, #0]
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	f000 f850 	bl	8007948 <_vfiprintf_r>
 80078a8:	b002      	add	sp, #8
 80078aa:	bc08      	pop	{r3}
 80078ac:	b003      	add	sp, #12
 80078ae:	4718      	bx	r3
 80078b0:	20000020 	.word	0x20000020

080078b4 <__ascii_mbtowc>:
 80078b4:	b082      	sub	sp, #8
 80078b6:	2900      	cmp	r1, #0
 80078b8:	d100      	bne.n	80078bc <__ascii_mbtowc+0x8>
 80078ba:	a901      	add	r1, sp, #4
 80078bc:	1e10      	subs	r0, r2, #0
 80078be:	d006      	beq.n	80078ce <__ascii_mbtowc+0x1a>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <__ascii_mbtowc+0x1e>
 80078c4:	7813      	ldrb	r3, [r2, #0]
 80078c6:	600b      	str	r3, [r1, #0]
 80078c8:	7810      	ldrb	r0, [r2, #0]
 80078ca:	1e43      	subs	r3, r0, #1
 80078cc:	4198      	sbcs	r0, r3
 80078ce:	b002      	add	sp, #8
 80078d0:	4770      	bx	lr
 80078d2:	2002      	movs	r0, #2
 80078d4:	4240      	negs	r0, r0
 80078d6:	e7fa      	b.n	80078ce <__ascii_mbtowc+0x1a>

080078d8 <__malloc_lock>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	4802      	ldr	r0, [pc, #8]	; (80078e4 <__malloc_lock+0xc>)
 80078dc:	f000 fc21 	bl	8008122 <__retarget_lock_acquire_recursive>
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	200002e8 	.word	0x200002e8

080078e8 <__malloc_unlock>:
 80078e8:	b510      	push	{r4, lr}
 80078ea:	4802      	ldr	r0, [pc, #8]	; (80078f4 <__malloc_unlock+0xc>)
 80078ec:	f000 fc1a 	bl	8008124 <__retarget_lock_release_recursive>
 80078f0:	bd10      	pop	{r4, pc}
 80078f2:	46c0      	nop			; (mov r8, r8)
 80078f4:	200002e8 	.word	0x200002e8

080078f8 <__sfputc_r>:
 80078f8:	6893      	ldr	r3, [r2, #8]
 80078fa:	b510      	push	{r4, lr}
 80078fc:	3b01      	subs	r3, #1
 80078fe:	6093      	str	r3, [r2, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	da04      	bge.n	800790e <__sfputc_r+0x16>
 8007904:	6994      	ldr	r4, [r2, #24]
 8007906:	42a3      	cmp	r3, r4
 8007908:	db07      	blt.n	800791a <__sfputc_r+0x22>
 800790a:	290a      	cmp	r1, #10
 800790c:	d005      	beq.n	800791a <__sfputc_r+0x22>
 800790e:	6813      	ldr	r3, [r2, #0]
 8007910:	1c58      	adds	r0, r3, #1
 8007912:	6010      	str	r0, [r2, #0]
 8007914:	7019      	strb	r1, [r3, #0]
 8007916:	0008      	movs	r0, r1
 8007918:	bd10      	pop	{r4, pc}
 800791a:	f000 f94f 	bl	8007bbc <__swbuf_r>
 800791e:	0001      	movs	r1, r0
 8007920:	e7f9      	b.n	8007916 <__sfputc_r+0x1e>

08007922 <__sfputs_r>:
 8007922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007924:	0006      	movs	r6, r0
 8007926:	000f      	movs	r7, r1
 8007928:	0014      	movs	r4, r2
 800792a:	18d5      	adds	r5, r2, r3
 800792c:	42ac      	cmp	r4, r5
 800792e:	d101      	bne.n	8007934 <__sfputs_r+0x12>
 8007930:	2000      	movs	r0, #0
 8007932:	e007      	b.n	8007944 <__sfputs_r+0x22>
 8007934:	7821      	ldrb	r1, [r4, #0]
 8007936:	003a      	movs	r2, r7
 8007938:	0030      	movs	r0, r6
 800793a:	f7ff ffdd 	bl	80078f8 <__sfputc_r>
 800793e:	3401      	adds	r4, #1
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d1f3      	bne.n	800792c <__sfputs_r+0xa>
 8007944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007948 <_vfiprintf_r>:
 8007948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800794a:	b0a1      	sub	sp, #132	; 0x84
 800794c:	0006      	movs	r6, r0
 800794e:	000c      	movs	r4, r1
 8007950:	001f      	movs	r7, r3
 8007952:	9203      	str	r2, [sp, #12]
 8007954:	2800      	cmp	r0, #0
 8007956:	d004      	beq.n	8007962 <_vfiprintf_r+0x1a>
 8007958:	6983      	ldr	r3, [r0, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <_vfiprintf_r+0x1a>
 800795e:	f000 fb3f 	bl	8007fe0 <__sinit>
 8007962:	4b8e      	ldr	r3, [pc, #568]	; (8007b9c <_vfiprintf_r+0x254>)
 8007964:	429c      	cmp	r4, r3
 8007966:	d11c      	bne.n	80079a2 <_vfiprintf_r+0x5a>
 8007968:	6874      	ldr	r4, [r6, #4]
 800796a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800796c:	07db      	lsls	r3, r3, #31
 800796e:	d405      	bmi.n	800797c <_vfiprintf_r+0x34>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	059b      	lsls	r3, r3, #22
 8007974:	d402      	bmi.n	800797c <_vfiprintf_r+0x34>
 8007976:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007978:	f000 fbd3 	bl	8008122 <__retarget_lock_acquire_recursive>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	071b      	lsls	r3, r3, #28
 8007980:	d502      	bpl.n	8007988 <_vfiprintf_r+0x40>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11d      	bne.n	80079c4 <_vfiprintf_r+0x7c>
 8007988:	0021      	movs	r1, r4
 800798a:	0030      	movs	r0, r6
 800798c:	f000 f97a 	bl	8007c84 <__swsetup_r>
 8007990:	2800      	cmp	r0, #0
 8007992:	d017      	beq.n	80079c4 <_vfiprintf_r+0x7c>
 8007994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007996:	07db      	lsls	r3, r3, #31
 8007998:	d50d      	bpl.n	80079b6 <_vfiprintf_r+0x6e>
 800799a:	2001      	movs	r0, #1
 800799c:	4240      	negs	r0, r0
 800799e:	b021      	add	sp, #132	; 0x84
 80079a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a2:	4b7f      	ldr	r3, [pc, #508]	; (8007ba0 <_vfiprintf_r+0x258>)
 80079a4:	429c      	cmp	r4, r3
 80079a6:	d101      	bne.n	80079ac <_vfiprintf_r+0x64>
 80079a8:	68b4      	ldr	r4, [r6, #8]
 80079aa:	e7de      	b.n	800796a <_vfiprintf_r+0x22>
 80079ac:	4b7d      	ldr	r3, [pc, #500]	; (8007ba4 <_vfiprintf_r+0x25c>)
 80079ae:	429c      	cmp	r4, r3
 80079b0:	d1db      	bne.n	800796a <_vfiprintf_r+0x22>
 80079b2:	68f4      	ldr	r4, [r6, #12]
 80079b4:	e7d9      	b.n	800796a <_vfiprintf_r+0x22>
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	059b      	lsls	r3, r3, #22
 80079ba:	d4ee      	bmi.n	800799a <_vfiprintf_r+0x52>
 80079bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079be:	f000 fbb1 	bl	8008124 <__retarget_lock_release_recursive>
 80079c2:	e7ea      	b.n	800799a <_vfiprintf_r+0x52>
 80079c4:	2300      	movs	r3, #0
 80079c6:	ad08      	add	r5, sp, #32
 80079c8:	616b      	str	r3, [r5, #20]
 80079ca:	3320      	adds	r3, #32
 80079cc:	766b      	strb	r3, [r5, #25]
 80079ce:	3310      	adds	r3, #16
 80079d0:	76ab      	strb	r3, [r5, #26]
 80079d2:	9707      	str	r7, [sp, #28]
 80079d4:	9f03      	ldr	r7, [sp, #12]
 80079d6:	783b      	ldrb	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d001      	beq.n	80079e0 <_vfiprintf_r+0x98>
 80079dc:	2b25      	cmp	r3, #37	; 0x25
 80079de:	d14e      	bne.n	8007a7e <_vfiprintf_r+0x136>
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	1afb      	subs	r3, r7, r3
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	429f      	cmp	r7, r3
 80079ea:	d00d      	beq.n	8007a08 <_vfiprintf_r+0xc0>
 80079ec:	9b05      	ldr	r3, [sp, #20]
 80079ee:	0021      	movs	r1, r4
 80079f0:	0030      	movs	r0, r6
 80079f2:	9a03      	ldr	r2, [sp, #12]
 80079f4:	f7ff ff95 	bl	8007922 <__sfputs_r>
 80079f8:	1c43      	adds	r3, r0, #1
 80079fa:	d100      	bne.n	80079fe <_vfiprintf_r+0xb6>
 80079fc:	e0b5      	b.n	8007b6a <_vfiprintf_r+0x222>
 80079fe:	696a      	ldr	r2, [r5, #20]
 8007a00:	9b05      	ldr	r3, [sp, #20]
 8007a02:	4694      	mov	ip, r2
 8007a04:	4463      	add	r3, ip
 8007a06:	616b      	str	r3, [r5, #20]
 8007a08:	783b      	ldrb	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d100      	bne.n	8007a10 <_vfiprintf_r+0xc8>
 8007a0e:	e0ac      	b.n	8007b6a <_vfiprintf_r+0x222>
 8007a10:	2201      	movs	r2, #1
 8007a12:	1c7b      	adds	r3, r7, #1
 8007a14:	9303      	str	r3, [sp, #12]
 8007a16:	2300      	movs	r3, #0
 8007a18:	4252      	negs	r2, r2
 8007a1a:	606a      	str	r2, [r5, #4]
 8007a1c:	a904      	add	r1, sp, #16
 8007a1e:	3254      	adds	r2, #84	; 0x54
 8007a20:	1852      	adds	r2, r2, r1
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	60eb      	str	r3, [r5, #12]
 8007a26:	60ab      	str	r3, [r5, #8]
 8007a28:	7013      	strb	r3, [r2, #0]
 8007a2a:	65ab      	str	r3, [r5, #88]	; 0x58
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	2205      	movs	r2, #5
 8007a30:	7819      	ldrb	r1, [r3, #0]
 8007a32:	485d      	ldr	r0, [pc, #372]	; (8007ba8 <_vfiprintf_r+0x260>)
 8007a34:	f7ff fa40 	bl	8006eb8 <memchr>
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	1c5f      	adds	r7, r3, #1
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d120      	bne.n	8007a82 <_vfiprintf_r+0x13a>
 8007a40:	682a      	ldr	r2, [r5, #0]
 8007a42:	06d3      	lsls	r3, r2, #27
 8007a44:	d504      	bpl.n	8007a50 <_vfiprintf_r+0x108>
 8007a46:	2353      	movs	r3, #83	; 0x53
 8007a48:	a904      	add	r1, sp, #16
 8007a4a:	185b      	adds	r3, r3, r1
 8007a4c:	2120      	movs	r1, #32
 8007a4e:	7019      	strb	r1, [r3, #0]
 8007a50:	0713      	lsls	r3, r2, #28
 8007a52:	d504      	bpl.n	8007a5e <_vfiprintf_r+0x116>
 8007a54:	2353      	movs	r3, #83	; 0x53
 8007a56:	a904      	add	r1, sp, #16
 8007a58:	185b      	adds	r3, r3, r1
 8007a5a:	212b      	movs	r1, #43	; 0x2b
 8007a5c:	7019      	strb	r1, [r3, #0]
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b2a      	cmp	r3, #42	; 0x2a
 8007a64:	d016      	beq.n	8007a94 <_vfiprintf_r+0x14c>
 8007a66:	2100      	movs	r1, #0
 8007a68:	68eb      	ldr	r3, [r5, #12]
 8007a6a:	9f03      	ldr	r7, [sp, #12]
 8007a6c:	783a      	ldrb	r2, [r7, #0]
 8007a6e:	1c78      	adds	r0, r7, #1
 8007a70:	3a30      	subs	r2, #48	; 0x30
 8007a72:	4684      	mov	ip, r0
 8007a74:	2a09      	cmp	r2, #9
 8007a76:	d94f      	bls.n	8007b18 <_vfiprintf_r+0x1d0>
 8007a78:	2900      	cmp	r1, #0
 8007a7a:	d111      	bne.n	8007aa0 <_vfiprintf_r+0x158>
 8007a7c:	e017      	b.n	8007aae <_vfiprintf_r+0x166>
 8007a7e:	3701      	adds	r7, #1
 8007a80:	e7a9      	b.n	80079d6 <_vfiprintf_r+0x8e>
 8007a82:	4b49      	ldr	r3, [pc, #292]	; (8007ba8 <_vfiprintf_r+0x260>)
 8007a84:	682a      	ldr	r2, [r5, #0]
 8007a86:	1ac0      	subs	r0, r0, r3
 8007a88:	2301      	movs	r3, #1
 8007a8a:	4083      	lsls	r3, r0
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	602b      	str	r3, [r5, #0]
 8007a90:	9703      	str	r7, [sp, #12]
 8007a92:	e7cb      	b.n	8007a2c <_vfiprintf_r+0xe4>
 8007a94:	9b07      	ldr	r3, [sp, #28]
 8007a96:	1d19      	adds	r1, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	9107      	str	r1, [sp, #28]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	db01      	blt.n	8007aa4 <_vfiprintf_r+0x15c>
 8007aa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa2:	e004      	b.n	8007aae <_vfiprintf_r+0x166>
 8007aa4:	425b      	negs	r3, r3
 8007aa6:	60eb      	str	r3, [r5, #12]
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	602b      	str	r3, [r5, #0]
 8007aae:	783b      	ldrb	r3, [r7, #0]
 8007ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ab2:	d10a      	bne.n	8007aca <_vfiprintf_r+0x182>
 8007ab4:	787b      	ldrb	r3, [r7, #1]
 8007ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab8:	d137      	bne.n	8007b2a <_vfiprintf_r+0x1e2>
 8007aba:	9b07      	ldr	r3, [sp, #28]
 8007abc:	3702      	adds	r7, #2
 8007abe:	1d1a      	adds	r2, r3, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	9207      	str	r2, [sp, #28]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	db2d      	blt.n	8007b24 <_vfiprintf_r+0x1dc>
 8007ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aca:	2203      	movs	r2, #3
 8007acc:	7839      	ldrb	r1, [r7, #0]
 8007ace:	4837      	ldr	r0, [pc, #220]	; (8007bac <_vfiprintf_r+0x264>)
 8007ad0:	f7ff f9f2 	bl	8006eb8 <memchr>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d007      	beq.n	8007ae8 <_vfiprintf_r+0x1a0>
 8007ad8:	4b34      	ldr	r3, [pc, #208]	; (8007bac <_vfiprintf_r+0x264>)
 8007ada:	682a      	ldr	r2, [r5, #0]
 8007adc:	1ac0      	subs	r0, r0, r3
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	4083      	lsls	r3, r0
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	3701      	adds	r7, #1
 8007ae6:	602b      	str	r3, [r5, #0]
 8007ae8:	7839      	ldrb	r1, [r7, #0]
 8007aea:	1c7b      	adds	r3, r7, #1
 8007aec:	2206      	movs	r2, #6
 8007aee:	4830      	ldr	r0, [pc, #192]	; (8007bb0 <_vfiprintf_r+0x268>)
 8007af0:	9303      	str	r3, [sp, #12]
 8007af2:	7629      	strb	r1, [r5, #24]
 8007af4:	f7ff f9e0 	bl	8006eb8 <memchr>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d045      	beq.n	8007b88 <_vfiprintf_r+0x240>
 8007afc:	4b2d      	ldr	r3, [pc, #180]	; (8007bb4 <_vfiprintf_r+0x26c>)
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d127      	bne.n	8007b52 <_vfiprintf_r+0x20a>
 8007b02:	2207      	movs	r2, #7
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	3307      	adds	r3, #7
 8007b08:	4393      	bics	r3, r2
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	9307      	str	r3, [sp, #28]
 8007b0e:	696b      	ldr	r3, [r5, #20]
 8007b10:	9a04      	ldr	r2, [sp, #16]
 8007b12:	189b      	adds	r3, r3, r2
 8007b14:	616b      	str	r3, [r5, #20]
 8007b16:	e75d      	b.n	80079d4 <_vfiprintf_r+0x8c>
 8007b18:	210a      	movs	r1, #10
 8007b1a:	434b      	muls	r3, r1
 8007b1c:	4667      	mov	r7, ip
 8007b1e:	189b      	adds	r3, r3, r2
 8007b20:	3909      	subs	r1, #9
 8007b22:	e7a3      	b.n	8007a6c <_vfiprintf_r+0x124>
 8007b24:	2301      	movs	r3, #1
 8007b26:	425b      	negs	r3, r3
 8007b28:	e7ce      	b.n	8007ac8 <_vfiprintf_r+0x180>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	001a      	movs	r2, r3
 8007b2e:	3701      	adds	r7, #1
 8007b30:	606b      	str	r3, [r5, #4]
 8007b32:	7839      	ldrb	r1, [r7, #0]
 8007b34:	1c78      	adds	r0, r7, #1
 8007b36:	3930      	subs	r1, #48	; 0x30
 8007b38:	4684      	mov	ip, r0
 8007b3a:	2909      	cmp	r1, #9
 8007b3c:	d903      	bls.n	8007b46 <_vfiprintf_r+0x1fe>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0c3      	beq.n	8007aca <_vfiprintf_r+0x182>
 8007b42:	9209      	str	r2, [sp, #36]	; 0x24
 8007b44:	e7c1      	b.n	8007aca <_vfiprintf_r+0x182>
 8007b46:	230a      	movs	r3, #10
 8007b48:	435a      	muls	r2, r3
 8007b4a:	4667      	mov	r7, ip
 8007b4c:	1852      	adds	r2, r2, r1
 8007b4e:	3b09      	subs	r3, #9
 8007b50:	e7ef      	b.n	8007b32 <_vfiprintf_r+0x1ea>
 8007b52:	ab07      	add	r3, sp, #28
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	0022      	movs	r2, r4
 8007b58:	0029      	movs	r1, r5
 8007b5a:	0030      	movs	r0, r6
 8007b5c:	4b16      	ldr	r3, [pc, #88]	; (8007bb8 <_vfiprintf_r+0x270>)
 8007b5e:	f7fd ff33 	bl	80059c8 <_printf_float>
 8007b62:	9004      	str	r0, [sp, #16]
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	3301      	adds	r3, #1
 8007b68:	d1d1      	bne.n	8007b0e <_vfiprintf_r+0x1c6>
 8007b6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b6c:	07db      	lsls	r3, r3, #31
 8007b6e:	d405      	bmi.n	8007b7c <_vfiprintf_r+0x234>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	059b      	lsls	r3, r3, #22
 8007b74:	d402      	bmi.n	8007b7c <_vfiprintf_r+0x234>
 8007b76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b78:	f000 fad4 	bl	8008124 <__retarget_lock_release_recursive>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	065b      	lsls	r3, r3, #25
 8007b80:	d500      	bpl.n	8007b84 <_vfiprintf_r+0x23c>
 8007b82:	e70a      	b.n	800799a <_vfiprintf_r+0x52>
 8007b84:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b86:	e70a      	b.n	800799e <_vfiprintf_r+0x56>
 8007b88:	ab07      	add	r3, sp, #28
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	0022      	movs	r2, r4
 8007b8e:	0029      	movs	r1, r5
 8007b90:	0030      	movs	r0, r6
 8007b92:	4b09      	ldr	r3, [pc, #36]	; (8007bb8 <_vfiprintf_r+0x270>)
 8007b94:	f7fe f9ca 	bl	8005f2c <_printf_i>
 8007b98:	e7e3      	b.n	8007b62 <_vfiprintf_r+0x21a>
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	08008884 	.word	0x08008884
 8007ba0:	080088a4 	.word	0x080088a4
 8007ba4:	08008864 	.word	0x08008864
 8007ba8:	08008752 	.word	0x08008752
 8007bac:	08008758 	.word	0x08008758
 8007bb0:	0800875c 	.word	0x0800875c
 8007bb4:	080059c9 	.word	0x080059c9
 8007bb8:	08007923 	.word	0x08007923

08007bbc <__swbuf_r>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	0005      	movs	r5, r0
 8007bc0:	000e      	movs	r6, r1
 8007bc2:	0014      	movs	r4, r2
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d004      	beq.n	8007bd2 <__swbuf_r+0x16>
 8007bc8:	6983      	ldr	r3, [r0, #24]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <__swbuf_r+0x16>
 8007bce:	f000 fa07 	bl	8007fe0 <__sinit>
 8007bd2:	4b22      	ldr	r3, [pc, #136]	; (8007c5c <__swbuf_r+0xa0>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d12e      	bne.n	8007c36 <__swbuf_r+0x7a>
 8007bd8:	686c      	ldr	r4, [r5, #4]
 8007bda:	69a3      	ldr	r3, [r4, #24]
 8007bdc:	60a3      	str	r3, [r4, #8]
 8007bde:	89a3      	ldrh	r3, [r4, #12]
 8007be0:	071b      	lsls	r3, r3, #28
 8007be2:	d532      	bpl.n	8007c4a <__swbuf_r+0x8e>
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d02f      	beq.n	8007c4a <__swbuf_r+0x8e>
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	6922      	ldr	r2, [r4, #16]
 8007bee:	b2f7      	uxtb	r7, r6
 8007bf0:	1a98      	subs	r0, r3, r2
 8007bf2:	6963      	ldr	r3, [r4, #20]
 8007bf4:	b2f6      	uxtb	r6, r6
 8007bf6:	4283      	cmp	r3, r0
 8007bf8:	dc05      	bgt.n	8007c06 <__swbuf_r+0x4a>
 8007bfa:	0021      	movs	r1, r4
 8007bfc:	0028      	movs	r0, r5
 8007bfe:	f000 f94d 	bl	8007e9c <_fflush_r>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	d127      	bne.n	8007c56 <__swbuf_r+0x9a>
 8007c06:	68a3      	ldr	r3, [r4, #8]
 8007c08:	3001      	adds	r0, #1
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	6022      	str	r2, [r4, #0]
 8007c14:	701f      	strb	r7, [r3, #0]
 8007c16:	6963      	ldr	r3, [r4, #20]
 8007c18:	4283      	cmp	r3, r0
 8007c1a:	d004      	beq.n	8007c26 <__swbuf_r+0x6a>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	07db      	lsls	r3, r3, #31
 8007c20:	d507      	bpl.n	8007c32 <__swbuf_r+0x76>
 8007c22:	2e0a      	cmp	r6, #10
 8007c24:	d105      	bne.n	8007c32 <__swbuf_r+0x76>
 8007c26:	0021      	movs	r1, r4
 8007c28:	0028      	movs	r0, r5
 8007c2a:	f000 f937 	bl	8007e9c <_fflush_r>
 8007c2e:	2800      	cmp	r0, #0
 8007c30:	d111      	bne.n	8007c56 <__swbuf_r+0x9a>
 8007c32:	0030      	movs	r0, r6
 8007c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <__swbuf_r+0xa4>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	d101      	bne.n	8007c40 <__swbuf_r+0x84>
 8007c3c:	68ac      	ldr	r4, [r5, #8]
 8007c3e:	e7cc      	b.n	8007bda <__swbuf_r+0x1e>
 8007c40:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <__swbuf_r+0xa8>)
 8007c42:	429c      	cmp	r4, r3
 8007c44:	d1c9      	bne.n	8007bda <__swbuf_r+0x1e>
 8007c46:	68ec      	ldr	r4, [r5, #12]
 8007c48:	e7c7      	b.n	8007bda <__swbuf_r+0x1e>
 8007c4a:	0021      	movs	r1, r4
 8007c4c:	0028      	movs	r0, r5
 8007c4e:	f000 f819 	bl	8007c84 <__swsetup_r>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d0c9      	beq.n	8007bea <__swbuf_r+0x2e>
 8007c56:	2601      	movs	r6, #1
 8007c58:	4276      	negs	r6, r6
 8007c5a:	e7ea      	b.n	8007c32 <__swbuf_r+0x76>
 8007c5c:	08008884 	.word	0x08008884
 8007c60:	080088a4 	.word	0x080088a4
 8007c64:	08008864 	.word	0x08008864

08007c68 <__ascii_wctomb>:
 8007c68:	0003      	movs	r3, r0
 8007c6a:	1e08      	subs	r0, r1, #0
 8007c6c:	d005      	beq.n	8007c7a <__ascii_wctomb+0x12>
 8007c6e:	2aff      	cmp	r2, #255	; 0xff
 8007c70:	d904      	bls.n	8007c7c <__ascii_wctomb+0x14>
 8007c72:	228a      	movs	r2, #138	; 0x8a
 8007c74:	2001      	movs	r0, #1
 8007c76:	601a      	str	r2, [r3, #0]
 8007c78:	4240      	negs	r0, r0
 8007c7a:	4770      	bx	lr
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	700a      	strb	r2, [r1, #0]
 8007c80:	e7fb      	b.n	8007c7a <__ascii_wctomb+0x12>
	...

08007c84 <__swsetup_r>:
 8007c84:	4b37      	ldr	r3, [pc, #220]	; (8007d64 <__swsetup_r+0xe0>)
 8007c86:	b570      	push	{r4, r5, r6, lr}
 8007c88:	681d      	ldr	r5, [r3, #0]
 8007c8a:	0006      	movs	r6, r0
 8007c8c:	000c      	movs	r4, r1
 8007c8e:	2d00      	cmp	r5, #0
 8007c90:	d005      	beq.n	8007c9e <__swsetup_r+0x1a>
 8007c92:	69ab      	ldr	r3, [r5, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <__swsetup_r+0x1a>
 8007c98:	0028      	movs	r0, r5
 8007c9a:	f000 f9a1 	bl	8007fe0 <__sinit>
 8007c9e:	4b32      	ldr	r3, [pc, #200]	; (8007d68 <__swsetup_r+0xe4>)
 8007ca0:	429c      	cmp	r4, r3
 8007ca2:	d10f      	bne.n	8007cc4 <__swsetup_r+0x40>
 8007ca4:	686c      	ldr	r4, [r5, #4]
 8007ca6:	230c      	movs	r3, #12
 8007ca8:	5ee2      	ldrsh	r2, [r4, r3]
 8007caa:	b293      	uxth	r3, r2
 8007cac:	0711      	lsls	r1, r2, #28
 8007cae:	d42d      	bmi.n	8007d0c <__swsetup_r+0x88>
 8007cb0:	06d9      	lsls	r1, r3, #27
 8007cb2:	d411      	bmi.n	8007cd8 <__swsetup_r+0x54>
 8007cb4:	2309      	movs	r3, #9
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	6033      	str	r3, [r6, #0]
 8007cba:	3337      	adds	r3, #55	; 0x37
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	81a3      	strh	r3, [r4, #12]
 8007cc0:	4240      	negs	r0, r0
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	4b29      	ldr	r3, [pc, #164]	; (8007d6c <__swsetup_r+0xe8>)
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	d101      	bne.n	8007cce <__swsetup_r+0x4a>
 8007cca:	68ac      	ldr	r4, [r5, #8]
 8007ccc:	e7eb      	b.n	8007ca6 <__swsetup_r+0x22>
 8007cce:	4b28      	ldr	r3, [pc, #160]	; (8007d70 <__swsetup_r+0xec>)
 8007cd0:	429c      	cmp	r4, r3
 8007cd2:	d1e8      	bne.n	8007ca6 <__swsetup_r+0x22>
 8007cd4:	68ec      	ldr	r4, [r5, #12]
 8007cd6:	e7e6      	b.n	8007ca6 <__swsetup_r+0x22>
 8007cd8:	075b      	lsls	r3, r3, #29
 8007cda:	d513      	bpl.n	8007d04 <__swsetup_r+0x80>
 8007cdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cde:	2900      	cmp	r1, #0
 8007ce0:	d008      	beq.n	8007cf4 <__swsetup_r+0x70>
 8007ce2:	0023      	movs	r3, r4
 8007ce4:	3344      	adds	r3, #68	; 0x44
 8007ce6:	4299      	cmp	r1, r3
 8007ce8:	d002      	beq.n	8007cf0 <__swsetup_r+0x6c>
 8007cea:	0030      	movs	r0, r6
 8007cec:	f7ff fcc0 	bl	8007670 <_free_r>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8007cf4:	2224      	movs	r2, #36	; 0x24
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	4393      	bics	r3, r2
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	6023      	str	r3, [r4, #0]
 8007d04:	2308      	movs	r3, #8
 8007d06:	89a2      	ldrh	r2, [r4, #12]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <__swsetup_r+0xa6>
 8007d12:	21a0      	movs	r1, #160	; 0xa0
 8007d14:	2280      	movs	r2, #128	; 0x80
 8007d16:	89a3      	ldrh	r3, [r4, #12]
 8007d18:	0089      	lsls	r1, r1, #2
 8007d1a:	0092      	lsls	r2, r2, #2
 8007d1c:	400b      	ands	r3, r1
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d003      	beq.n	8007d2a <__swsetup_r+0xa6>
 8007d22:	0021      	movs	r1, r4
 8007d24:	0030      	movs	r0, r6
 8007d26:	f000 fa27 	bl	8008178 <__smakebuf_r>
 8007d2a:	220c      	movs	r2, #12
 8007d2c:	5ea3      	ldrsh	r3, [r4, r2]
 8007d2e:	2001      	movs	r0, #1
 8007d30:	001a      	movs	r2, r3
 8007d32:	b299      	uxth	r1, r3
 8007d34:	4002      	ands	r2, r0
 8007d36:	4203      	tst	r3, r0
 8007d38:	d00f      	beq.n	8007d5a <__swsetup_r+0xd6>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	60a2      	str	r2, [r4, #8]
 8007d3e:	6962      	ldr	r2, [r4, #20]
 8007d40:	4252      	negs	r2, r2
 8007d42:	61a2      	str	r2, [r4, #24]
 8007d44:	2000      	movs	r0, #0
 8007d46:	6922      	ldr	r2, [r4, #16]
 8007d48:	4282      	cmp	r2, r0
 8007d4a:	d1ba      	bne.n	8007cc2 <__swsetup_r+0x3e>
 8007d4c:	060a      	lsls	r2, r1, #24
 8007d4e:	d5b8      	bpl.n	8007cc2 <__swsetup_r+0x3e>
 8007d50:	2240      	movs	r2, #64	; 0x40
 8007d52:	4313      	orrs	r3, r2
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	3801      	subs	r0, #1
 8007d58:	e7b3      	b.n	8007cc2 <__swsetup_r+0x3e>
 8007d5a:	0788      	lsls	r0, r1, #30
 8007d5c:	d400      	bmi.n	8007d60 <__swsetup_r+0xdc>
 8007d5e:	6962      	ldr	r2, [r4, #20]
 8007d60:	60a2      	str	r2, [r4, #8]
 8007d62:	e7ef      	b.n	8007d44 <__swsetup_r+0xc0>
 8007d64:	20000020 	.word	0x20000020
 8007d68:	08008884 	.word	0x08008884
 8007d6c:	080088a4 	.word	0x080088a4
 8007d70:	08008864 	.word	0x08008864

08007d74 <abort>:
 8007d74:	2006      	movs	r0, #6
 8007d76:	b510      	push	{r4, lr}
 8007d78:	f000 fa6c 	bl	8008254 <raise>
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	f7fa fc73 	bl	8002668 <_exit>
	...

08007d84 <__sflush_r>:
 8007d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d86:	898b      	ldrh	r3, [r1, #12]
 8007d88:	0005      	movs	r5, r0
 8007d8a:	000c      	movs	r4, r1
 8007d8c:	071a      	lsls	r2, r3, #28
 8007d8e:	d45f      	bmi.n	8007e50 <__sflush_r+0xcc>
 8007d90:	684a      	ldr	r2, [r1, #4]
 8007d92:	2a00      	cmp	r2, #0
 8007d94:	dc04      	bgt.n	8007da0 <__sflush_r+0x1c>
 8007d96:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	dc01      	bgt.n	8007da0 <__sflush_r+0x1c>
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007da0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007da2:	2f00      	cmp	r7, #0
 8007da4:	d0fa      	beq.n	8007d9c <__sflush_r+0x18>
 8007da6:	2200      	movs	r2, #0
 8007da8:	2180      	movs	r1, #128	; 0x80
 8007daa:	682e      	ldr	r6, [r5, #0]
 8007dac:	602a      	str	r2, [r5, #0]
 8007dae:	001a      	movs	r2, r3
 8007db0:	0149      	lsls	r1, r1, #5
 8007db2:	400a      	ands	r2, r1
 8007db4:	420b      	tst	r3, r1
 8007db6:	d034      	beq.n	8007e22 <__sflush_r+0x9e>
 8007db8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	075b      	lsls	r3, r3, #29
 8007dbe:	d506      	bpl.n	8007dce <__sflush_r+0x4a>
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	1ac0      	subs	r0, r0, r3
 8007dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <__sflush_r+0x4a>
 8007dca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dcc:	1ac0      	subs	r0, r0, r3
 8007dce:	0002      	movs	r2, r0
 8007dd0:	6a21      	ldr	r1, [r4, #32]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	0028      	movs	r0, r5
 8007dd6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007dd8:	47b8      	blx	r7
 8007dda:	89a1      	ldrh	r1, [r4, #12]
 8007ddc:	1c43      	adds	r3, r0, #1
 8007dde:	d106      	bne.n	8007dee <__sflush_r+0x6a>
 8007de0:	682b      	ldr	r3, [r5, #0]
 8007de2:	2b1d      	cmp	r3, #29
 8007de4:	d831      	bhi.n	8007e4a <__sflush_r+0xc6>
 8007de6:	4a2c      	ldr	r2, [pc, #176]	; (8007e98 <__sflush_r+0x114>)
 8007de8:	40da      	lsrs	r2, r3
 8007dea:	07d3      	lsls	r3, r2, #31
 8007dec:	d52d      	bpl.n	8007e4a <__sflush_r+0xc6>
 8007dee:	2300      	movs	r3, #0
 8007df0:	6063      	str	r3, [r4, #4]
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	04cb      	lsls	r3, r1, #19
 8007df8:	d505      	bpl.n	8007e06 <__sflush_r+0x82>
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d102      	bne.n	8007e04 <__sflush_r+0x80>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d100      	bne.n	8007e06 <__sflush_r+0x82>
 8007e04:	6560      	str	r0, [r4, #84]	; 0x54
 8007e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e08:	602e      	str	r6, [r5, #0]
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	d0c6      	beq.n	8007d9c <__sflush_r+0x18>
 8007e0e:	0023      	movs	r3, r4
 8007e10:	3344      	adds	r3, #68	; 0x44
 8007e12:	4299      	cmp	r1, r3
 8007e14:	d002      	beq.n	8007e1c <__sflush_r+0x98>
 8007e16:	0028      	movs	r0, r5
 8007e18:	f7ff fc2a 	bl	8007670 <_free_r>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	6360      	str	r0, [r4, #52]	; 0x34
 8007e20:	e7bd      	b.n	8007d9e <__sflush_r+0x1a>
 8007e22:	2301      	movs	r3, #1
 8007e24:	0028      	movs	r0, r5
 8007e26:	6a21      	ldr	r1, [r4, #32]
 8007e28:	47b8      	blx	r7
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	d1c5      	bne.n	8007dba <__sflush_r+0x36>
 8007e2e:	682b      	ldr	r3, [r5, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0c2      	beq.n	8007dba <__sflush_r+0x36>
 8007e34:	2b1d      	cmp	r3, #29
 8007e36:	d001      	beq.n	8007e3c <__sflush_r+0xb8>
 8007e38:	2b16      	cmp	r3, #22
 8007e3a:	d101      	bne.n	8007e40 <__sflush_r+0xbc>
 8007e3c:	602e      	str	r6, [r5, #0]
 8007e3e:	e7ad      	b.n	8007d9c <__sflush_r+0x18>
 8007e40:	2340      	movs	r3, #64	; 0x40
 8007e42:	89a2      	ldrh	r2, [r4, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	81a3      	strh	r3, [r4, #12]
 8007e48:	e7a9      	b.n	8007d9e <__sflush_r+0x1a>
 8007e4a:	2340      	movs	r3, #64	; 0x40
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	e7fa      	b.n	8007e46 <__sflush_r+0xc2>
 8007e50:	690f      	ldr	r7, [r1, #16]
 8007e52:	2f00      	cmp	r7, #0
 8007e54:	d0a2      	beq.n	8007d9c <__sflush_r+0x18>
 8007e56:	680a      	ldr	r2, [r1, #0]
 8007e58:	600f      	str	r7, [r1, #0]
 8007e5a:	1bd2      	subs	r2, r2, r7
 8007e5c:	9201      	str	r2, [sp, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	079b      	lsls	r3, r3, #30
 8007e62:	d100      	bne.n	8007e66 <__sflush_r+0xe2>
 8007e64:	694a      	ldr	r2, [r1, #20]
 8007e66:	60a2      	str	r2, [r4, #8]
 8007e68:	9b01      	ldr	r3, [sp, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	dc00      	bgt.n	8007e70 <__sflush_r+0xec>
 8007e6e:	e795      	b.n	8007d9c <__sflush_r+0x18>
 8007e70:	003a      	movs	r2, r7
 8007e72:	0028      	movs	r0, r5
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	6a21      	ldr	r1, [r4, #32]
 8007e78:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e7a:	47b0      	blx	r6
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	dc06      	bgt.n	8007e8e <__sflush_r+0x10a>
 8007e80:	2340      	movs	r3, #64	; 0x40
 8007e82:	2001      	movs	r0, #1
 8007e84:	89a2      	ldrh	r2, [r4, #12]
 8007e86:	4240      	negs	r0, r0
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	81a3      	strh	r3, [r4, #12]
 8007e8c:	e787      	b.n	8007d9e <__sflush_r+0x1a>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	183f      	adds	r7, r7, r0
 8007e92:	1a1b      	subs	r3, r3, r0
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	e7e7      	b.n	8007e68 <__sflush_r+0xe4>
 8007e98:	20400001 	.word	0x20400001

08007e9c <_fflush_r>:
 8007e9c:	690b      	ldr	r3, [r1, #16]
 8007e9e:	b570      	push	{r4, r5, r6, lr}
 8007ea0:	0005      	movs	r5, r0
 8007ea2:	000c      	movs	r4, r1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <_fflush_r+0x12>
 8007ea8:	2500      	movs	r5, #0
 8007eaa:	0028      	movs	r0, r5
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d004      	beq.n	8007ebc <_fflush_r+0x20>
 8007eb2:	6983      	ldr	r3, [r0, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <_fflush_r+0x20>
 8007eb8:	f000 f892 	bl	8007fe0 <__sinit>
 8007ebc:	4b14      	ldr	r3, [pc, #80]	; (8007f10 <_fflush_r+0x74>)
 8007ebe:	429c      	cmp	r4, r3
 8007ec0:	d11b      	bne.n	8007efa <_fflush_r+0x5e>
 8007ec2:	686c      	ldr	r4, [r5, #4]
 8007ec4:	220c      	movs	r2, #12
 8007ec6:	5ea3      	ldrsh	r3, [r4, r2]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0ed      	beq.n	8007ea8 <_fflush_r+0xc>
 8007ecc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ece:	07d2      	lsls	r2, r2, #31
 8007ed0:	d404      	bmi.n	8007edc <_fflush_r+0x40>
 8007ed2:	059b      	lsls	r3, r3, #22
 8007ed4:	d402      	bmi.n	8007edc <_fflush_r+0x40>
 8007ed6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ed8:	f000 f923 	bl	8008122 <__retarget_lock_acquire_recursive>
 8007edc:	0028      	movs	r0, r5
 8007ede:	0021      	movs	r1, r4
 8007ee0:	f7ff ff50 	bl	8007d84 <__sflush_r>
 8007ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ee6:	0005      	movs	r5, r0
 8007ee8:	07db      	lsls	r3, r3, #31
 8007eea:	d4de      	bmi.n	8007eaa <_fflush_r+0xe>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	059b      	lsls	r3, r3, #22
 8007ef0:	d4db      	bmi.n	8007eaa <_fflush_r+0xe>
 8007ef2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ef4:	f000 f916 	bl	8008124 <__retarget_lock_release_recursive>
 8007ef8:	e7d7      	b.n	8007eaa <_fflush_r+0xe>
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <_fflush_r+0x78>)
 8007efc:	429c      	cmp	r4, r3
 8007efe:	d101      	bne.n	8007f04 <_fflush_r+0x68>
 8007f00:	68ac      	ldr	r4, [r5, #8]
 8007f02:	e7df      	b.n	8007ec4 <_fflush_r+0x28>
 8007f04:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <_fflush_r+0x7c>)
 8007f06:	429c      	cmp	r4, r3
 8007f08:	d1dc      	bne.n	8007ec4 <_fflush_r+0x28>
 8007f0a:	68ec      	ldr	r4, [r5, #12]
 8007f0c:	e7da      	b.n	8007ec4 <_fflush_r+0x28>
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	08008884 	.word	0x08008884
 8007f14:	080088a4 	.word	0x080088a4
 8007f18:	08008864 	.word	0x08008864

08007f1c <std>:
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	0004      	movs	r4, r0
 8007f22:	6003      	str	r3, [r0, #0]
 8007f24:	6043      	str	r3, [r0, #4]
 8007f26:	6083      	str	r3, [r0, #8]
 8007f28:	8181      	strh	r1, [r0, #12]
 8007f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8007f2c:	0019      	movs	r1, r3
 8007f2e:	81c2      	strh	r2, [r0, #14]
 8007f30:	6103      	str	r3, [r0, #16]
 8007f32:	6143      	str	r3, [r0, #20]
 8007f34:	6183      	str	r3, [r0, #24]
 8007f36:	2208      	movs	r2, #8
 8007f38:	305c      	adds	r0, #92	; 0x5c
 8007f3a:	f7fd fc93 	bl	8005864 <memset>
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <std+0x38>)
 8007f40:	6224      	str	r4, [r4, #32]
 8007f42:	6263      	str	r3, [r4, #36]	; 0x24
 8007f44:	4b04      	ldr	r3, [pc, #16]	; (8007f58 <std+0x3c>)
 8007f46:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f48:	4b04      	ldr	r3, [pc, #16]	; (8007f5c <std+0x40>)
 8007f4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f4c:	4b04      	ldr	r3, [pc, #16]	; (8007f60 <std+0x44>)
 8007f4e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f50:	bd10      	pop	{r4, pc}
 8007f52:	46c0      	nop			; (mov r8, r8)
 8007f54:	08008295 	.word	0x08008295
 8007f58:	080082bd 	.word	0x080082bd
 8007f5c:	080082f5 	.word	0x080082f5
 8007f60:	08008321 	.word	0x08008321

08007f64 <_cleanup_r>:
 8007f64:	b510      	push	{r4, lr}
 8007f66:	4902      	ldr	r1, [pc, #8]	; (8007f70 <_cleanup_r+0xc>)
 8007f68:	f000 f8ba 	bl	80080e0 <_fwalk_reent>
 8007f6c:	bd10      	pop	{r4, pc}
 8007f6e:	46c0      	nop			; (mov r8, r8)
 8007f70:	08007e9d 	.word	0x08007e9d

08007f74 <__sfmoreglue>:
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	2568      	movs	r5, #104	; 0x68
 8007f78:	1e4a      	subs	r2, r1, #1
 8007f7a:	4355      	muls	r5, r2
 8007f7c:	000e      	movs	r6, r1
 8007f7e:	0029      	movs	r1, r5
 8007f80:	3174      	adds	r1, #116	; 0x74
 8007f82:	f7ff fbe1 	bl	8007748 <_malloc_r>
 8007f86:	1e04      	subs	r4, r0, #0
 8007f88:	d008      	beq.n	8007f9c <__sfmoreglue+0x28>
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	002a      	movs	r2, r5
 8007f8e:	6001      	str	r1, [r0, #0]
 8007f90:	6046      	str	r6, [r0, #4]
 8007f92:	300c      	adds	r0, #12
 8007f94:	60a0      	str	r0, [r4, #8]
 8007f96:	3268      	adds	r2, #104	; 0x68
 8007f98:	f7fd fc64 	bl	8005864 <memset>
 8007f9c:	0020      	movs	r0, r4
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}

08007fa0 <__sfp_lock_acquire>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	4802      	ldr	r0, [pc, #8]	; (8007fac <__sfp_lock_acquire+0xc>)
 8007fa4:	f000 f8bd 	bl	8008122 <__retarget_lock_acquire_recursive>
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	46c0      	nop			; (mov r8, r8)
 8007fac:	200002e9 	.word	0x200002e9

08007fb0 <__sfp_lock_release>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	4802      	ldr	r0, [pc, #8]	; (8007fbc <__sfp_lock_release+0xc>)
 8007fb4:	f000 f8b6 	bl	8008124 <__retarget_lock_release_recursive>
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	46c0      	nop			; (mov r8, r8)
 8007fbc:	200002e9 	.word	0x200002e9

08007fc0 <__sinit_lock_acquire>:
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	4802      	ldr	r0, [pc, #8]	; (8007fcc <__sinit_lock_acquire+0xc>)
 8007fc4:	f000 f8ad 	bl	8008122 <__retarget_lock_acquire_recursive>
 8007fc8:	bd10      	pop	{r4, pc}
 8007fca:	46c0      	nop			; (mov r8, r8)
 8007fcc:	200002ea 	.word	0x200002ea

08007fd0 <__sinit_lock_release>:
 8007fd0:	b510      	push	{r4, lr}
 8007fd2:	4802      	ldr	r0, [pc, #8]	; (8007fdc <__sinit_lock_release+0xc>)
 8007fd4:	f000 f8a6 	bl	8008124 <__retarget_lock_release_recursive>
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	46c0      	nop			; (mov r8, r8)
 8007fdc:	200002ea 	.word	0x200002ea

08007fe0 <__sinit>:
 8007fe0:	b513      	push	{r0, r1, r4, lr}
 8007fe2:	0004      	movs	r4, r0
 8007fe4:	f7ff ffec 	bl	8007fc0 <__sinit_lock_acquire>
 8007fe8:	69a3      	ldr	r3, [r4, #24]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <__sinit+0x14>
 8007fee:	f7ff ffef 	bl	8007fd0 <__sinit_lock_release>
 8007ff2:	bd13      	pop	{r0, r1, r4, pc}
 8007ff4:	64a3      	str	r3, [r4, #72]	; 0x48
 8007ff6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007ff8:	6523      	str	r3, [r4, #80]	; 0x50
 8007ffa:	4b13      	ldr	r3, [pc, #76]	; (8008048 <__sinit+0x68>)
 8007ffc:	4a13      	ldr	r2, [pc, #76]	; (800804c <__sinit+0x6c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	62a2      	str	r2, [r4, #40]	; 0x28
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	42a3      	cmp	r3, r4
 8008006:	d101      	bne.n	800800c <__sinit+0x2c>
 8008008:	2301      	movs	r3, #1
 800800a:	61a3      	str	r3, [r4, #24]
 800800c:	0020      	movs	r0, r4
 800800e:	f000 f81f 	bl	8008050 <__sfp>
 8008012:	6060      	str	r0, [r4, #4]
 8008014:	0020      	movs	r0, r4
 8008016:	f000 f81b 	bl	8008050 <__sfp>
 800801a:	60a0      	str	r0, [r4, #8]
 800801c:	0020      	movs	r0, r4
 800801e:	f000 f817 	bl	8008050 <__sfp>
 8008022:	2200      	movs	r2, #0
 8008024:	2104      	movs	r1, #4
 8008026:	60e0      	str	r0, [r4, #12]
 8008028:	6860      	ldr	r0, [r4, #4]
 800802a:	f7ff ff77 	bl	8007f1c <std>
 800802e:	2201      	movs	r2, #1
 8008030:	2109      	movs	r1, #9
 8008032:	68a0      	ldr	r0, [r4, #8]
 8008034:	f7ff ff72 	bl	8007f1c <std>
 8008038:	2202      	movs	r2, #2
 800803a:	2112      	movs	r1, #18
 800803c:	68e0      	ldr	r0, [r4, #12]
 800803e:	f7ff ff6d 	bl	8007f1c <std>
 8008042:	2301      	movs	r3, #1
 8008044:	61a3      	str	r3, [r4, #24]
 8008046:	e7d2      	b.n	8007fee <__sinit+0xe>
 8008048:	080084e8 	.word	0x080084e8
 800804c:	08007f65 	.word	0x08007f65

08008050 <__sfp>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	0007      	movs	r7, r0
 8008054:	f7ff ffa4 	bl	8007fa0 <__sfp_lock_acquire>
 8008058:	4b1f      	ldr	r3, [pc, #124]	; (80080d8 <__sfp+0x88>)
 800805a:	681e      	ldr	r6, [r3, #0]
 800805c:	69b3      	ldr	r3, [r6, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d102      	bne.n	8008068 <__sfp+0x18>
 8008062:	0030      	movs	r0, r6
 8008064:	f7ff ffbc 	bl	8007fe0 <__sinit>
 8008068:	3648      	adds	r6, #72	; 0x48
 800806a:	68b4      	ldr	r4, [r6, #8]
 800806c:	6873      	ldr	r3, [r6, #4]
 800806e:	3b01      	subs	r3, #1
 8008070:	d504      	bpl.n	800807c <__sfp+0x2c>
 8008072:	6833      	ldr	r3, [r6, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d022      	beq.n	80080be <__sfp+0x6e>
 8008078:	6836      	ldr	r6, [r6, #0]
 800807a:	e7f6      	b.n	800806a <__sfp+0x1a>
 800807c:	220c      	movs	r2, #12
 800807e:	5ea5      	ldrsh	r5, [r4, r2]
 8008080:	2d00      	cmp	r5, #0
 8008082:	d11a      	bne.n	80080ba <__sfp+0x6a>
 8008084:	0020      	movs	r0, r4
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <__sfp+0x8c>)
 8008088:	3058      	adds	r0, #88	; 0x58
 800808a:	60e3      	str	r3, [r4, #12]
 800808c:	6665      	str	r5, [r4, #100]	; 0x64
 800808e:	f000 f847 	bl	8008120 <__retarget_lock_init_recursive>
 8008092:	f7ff ff8d 	bl	8007fb0 <__sfp_lock_release>
 8008096:	0020      	movs	r0, r4
 8008098:	2208      	movs	r2, #8
 800809a:	0029      	movs	r1, r5
 800809c:	6025      	str	r5, [r4, #0]
 800809e:	60a5      	str	r5, [r4, #8]
 80080a0:	6065      	str	r5, [r4, #4]
 80080a2:	6125      	str	r5, [r4, #16]
 80080a4:	6165      	str	r5, [r4, #20]
 80080a6:	61a5      	str	r5, [r4, #24]
 80080a8:	305c      	adds	r0, #92	; 0x5c
 80080aa:	f7fd fbdb 	bl	8005864 <memset>
 80080ae:	6365      	str	r5, [r4, #52]	; 0x34
 80080b0:	63a5      	str	r5, [r4, #56]	; 0x38
 80080b2:	64a5      	str	r5, [r4, #72]	; 0x48
 80080b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80080b6:	0020      	movs	r0, r4
 80080b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080ba:	3468      	adds	r4, #104	; 0x68
 80080bc:	e7d7      	b.n	800806e <__sfp+0x1e>
 80080be:	2104      	movs	r1, #4
 80080c0:	0038      	movs	r0, r7
 80080c2:	f7ff ff57 	bl	8007f74 <__sfmoreglue>
 80080c6:	1e04      	subs	r4, r0, #0
 80080c8:	6030      	str	r0, [r6, #0]
 80080ca:	d1d5      	bne.n	8008078 <__sfp+0x28>
 80080cc:	f7ff ff70 	bl	8007fb0 <__sfp_lock_release>
 80080d0:	230c      	movs	r3, #12
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	e7ef      	b.n	80080b6 <__sfp+0x66>
 80080d6:	46c0      	nop			; (mov r8, r8)
 80080d8:	080084e8 	.word	0x080084e8
 80080dc:	ffff0001 	.word	0xffff0001

080080e0 <_fwalk_reent>:
 80080e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e2:	0004      	movs	r4, r0
 80080e4:	0006      	movs	r6, r0
 80080e6:	2700      	movs	r7, #0
 80080e8:	9101      	str	r1, [sp, #4]
 80080ea:	3448      	adds	r4, #72	; 0x48
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	68a5      	ldr	r5, [r4, #8]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	9b00      	ldr	r3, [sp, #0]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	d504      	bpl.n	8008104 <_fwalk_reent+0x24>
 80080fa:	6824      	ldr	r4, [r4, #0]
 80080fc:	2c00      	cmp	r4, #0
 80080fe:	d1f5      	bne.n	80080ec <_fwalk_reent+0xc>
 8008100:	0038      	movs	r0, r7
 8008102:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008104:	89ab      	ldrh	r3, [r5, #12]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d908      	bls.n	800811c <_fwalk_reent+0x3c>
 800810a:	220e      	movs	r2, #14
 800810c:	5eab      	ldrsh	r3, [r5, r2]
 800810e:	3301      	adds	r3, #1
 8008110:	d004      	beq.n	800811c <_fwalk_reent+0x3c>
 8008112:	0029      	movs	r1, r5
 8008114:	0030      	movs	r0, r6
 8008116:	9b01      	ldr	r3, [sp, #4]
 8008118:	4798      	blx	r3
 800811a:	4307      	orrs	r7, r0
 800811c:	3568      	adds	r5, #104	; 0x68
 800811e:	e7e8      	b.n	80080f2 <_fwalk_reent+0x12>

08008120 <__retarget_lock_init_recursive>:
 8008120:	4770      	bx	lr

08008122 <__retarget_lock_acquire_recursive>:
 8008122:	4770      	bx	lr

08008124 <__retarget_lock_release_recursive>:
 8008124:	4770      	bx	lr
	...

08008128 <__swhatbuf_r>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	000e      	movs	r6, r1
 800812c:	001d      	movs	r5, r3
 800812e:	230e      	movs	r3, #14
 8008130:	5ec9      	ldrsh	r1, [r1, r3]
 8008132:	0014      	movs	r4, r2
 8008134:	b096      	sub	sp, #88	; 0x58
 8008136:	2900      	cmp	r1, #0
 8008138:	da08      	bge.n	800814c <__swhatbuf_r+0x24>
 800813a:	220c      	movs	r2, #12
 800813c:	5eb3      	ldrsh	r3, [r6, r2]
 800813e:	2200      	movs	r2, #0
 8008140:	602a      	str	r2, [r5, #0]
 8008142:	061b      	lsls	r3, r3, #24
 8008144:	d411      	bmi.n	800816a <__swhatbuf_r+0x42>
 8008146:	2380      	movs	r3, #128	; 0x80
 8008148:	00db      	lsls	r3, r3, #3
 800814a:	e00f      	b.n	800816c <__swhatbuf_r+0x44>
 800814c:	466a      	mov	r2, sp
 800814e:	f000 f913 	bl	8008378 <_fstat_r>
 8008152:	2800      	cmp	r0, #0
 8008154:	dbf1      	blt.n	800813a <__swhatbuf_r+0x12>
 8008156:	23f0      	movs	r3, #240	; 0xf0
 8008158:	9901      	ldr	r1, [sp, #4]
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	4019      	ands	r1, r3
 800815e:	4b05      	ldr	r3, [pc, #20]	; (8008174 <__swhatbuf_r+0x4c>)
 8008160:	18c9      	adds	r1, r1, r3
 8008162:	424b      	negs	r3, r1
 8008164:	4159      	adcs	r1, r3
 8008166:	6029      	str	r1, [r5, #0]
 8008168:	e7ed      	b.n	8008146 <__swhatbuf_r+0x1e>
 800816a:	2340      	movs	r3, #64	; 0x40
 800816c:	2000      	movs	r0, #0
 800816e:	6023      	str	r3, [r4, #0]
 8008170:	b016      	add	sp, #88	; 0x58
 8008172:	bd70      	pop	{r4, r5, r6, pc}
 8008174:	ffffe000 	.word	0xffffe000

08008178 <__smakebuf_r>:
 8008178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800817a:	2602      	movs	r6, #2
 800817c:	898b      	ldrh	r3, [r1, #12]
 800817e:	0005      	movs	r5, r0
 8008180:	000c      	movs	r4, r1
 8008182:	4233      	tst	r3, r6
 8008184:	d006      	beq.n	8008194 <__smakebuf_r+0x1c>
 8008186:	0023      	movs	r3, r4
 8008188:	3347      	adds	r3, #71	; 0x47
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	6123      	str	r3, [r4, #16]
 800818e:	2301      	movs	r3, #1
 8008190:	6163      	str	r3, [r4, #20]
 8008192:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008194:	466a      	mov	r2, sp
 8008196:	ab01      	add	r3, sp, #4
 8008198:	f7ff ffc6 	bl	8008128 <__swhatbuf_r>
 800819c:	9900      	ldr	r1, [sp, #0]
 800819e:	0007      	movs	r7, r0
 80081a0:	0028      	movs	r0, r5
 80081a2:	f7ff fad1 	bl	8007748 <_malloc_r>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d108      	bne.n	80081bc <__smakebuf_r+0x44>
 80081aa:	220c      	movs	r2, #12
 80081ac:	5ea3      	ldrsh	r3, [r4, r2]
 80081ae:	059a      	lsls	r2, r3, #22
 80081b0:	d4ef      	bmi.n	8008192 <__smakebuf_r+0x1a>
 80081b2:	2203      	movs	r2, #3
 80081b4:	4393      	bics	r3, r2
 80081b6:	431e      	orrs	r6, r3
 80081b8:	81a6      	strh	r6, [r4, #12]
 80081ba:	e7e4      	b.n	8008186 <__smakebuf_r+0xe>
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <__smakebuf_r+0x84>)
 80081be:	62ab      	str	r3, [r5, #40]	; 0x28
 80081c0:	2380      	movs	r3, #128	; 0x80
 80081c2:	89a2      	ldrh	r2, [r4, #12]
 80081c4:	6020      	str	r0, [r4, #0]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	9b00      	ldr	r3, [sp, #0]
 80081cc:	6120      	str	r0, [r4, #16]
 80081ce:	6163      	str	r3, [r4, #20]
 80081d0:	9b01      	ldr	r3, [sp, #4]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00d      	beq.n	80081f2 <__smakebuf_r+0x7a>
 80081d6:	0028      	movs	r0, r5
 80081d8:	230e      	movs	r3, #14
 80081da:	5ee1      	ldrsh	r1, [r4, r3]
 80081dc:	f000 f8de 	bl	800839c <_isatty_r>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d006      	beq.n	80081f2 <__smakebuf_r+0x7a>
 80081e4:	2203      	movs	r2, #3
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	4393      	bics	r3, r2
 80081ea:	001a      	movs	r2, r3
 80081ec:	2301      	movs	r3, #1
 80081ee:	4313      	orrs	r3, r2
 80081f0:	81a3      	strh	r3, [r4, #12]
 80081f2:	89a0      	ldrh	r0, [r4, #12]
 80081f4:	4307      	orrs	r7, r0
 80081f6:	81a7      	strh	r7, [r4, #12]
 80081f8:	e7cb      	b.n	8008192 <__smakebuf_r+0x1a>
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	08007f65 	.word	0x08007f65

08008200 <_raise_r>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	0004      	movs	r4, r0
 8008204:	000d      	movs	r5, r1
 8008206:	291f      	cmp	r1, #31
 8008208:	d904      	bls.n	8008214 <_raise_r+0x14>
 800820a:	2316      	movs	r3, #22
 800820c:	6003      	str	r3, [r0, #0]
 800820e:	2001      	movs	r0, #1
 8008210:	4240      	negs	r0, r0
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <_raise_r+0x24>
 800821a:	008a      	lsls	r2, r1, #2
 800821c:	189b      	adds	r3, r3, r2
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	2a00      	cmp	r2, #0
 8008222:	d108      	bne.n	8008236 <_raise_r+0x36>
 8008224:	0020      	movs	r0, r4
 8008226:	f000 f831 	bl	800828c <_getpid_r>
 800822a:	002a      	movs	r2, r5
 800822c:	0001      	movs	r1, r0
 800822e:	0020      	movs	r0, r4
 8008230:	f000 f81a 	bl	8008268 <_kill_r>
 8008234:	e7ed      	b.n	8008212 <_raise_r+0x12>
 8008236:	2000      	movs	r0, #0
 8008238:	2a01      	cmp	r2, #1
 800823a:	d0ea      	beq.n	8008212 <_raise_r+0x12>
 800823c:	1c51      	adds	r1, r2, #1
 800823e:	d103      	bne.n	8008248 <_raise_r+0x48>
 8008240:	2316      	movs	r3, #22
 8008242:	3001      	adds	r0, #1
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	e7e4      	b.n	8008212 <_raise_r+0x12>
 8008248:	2400      	movs	r4, #0
 800824a:	0028      	movs	r0, r5
 800824c:	601c      	str	r4, [r3, #0]
 800824e:	4790      	blx	r2
 8008250:	0020      	movs	r0, r4
 8008252:	e7de      	b.n	8008212 <_raise_r+0x12>

08008254 <raise>:
 8008254:	b510      	push	{r4, lr}
 8008256:	4b03      	ldr	r3, [pc, #12]	; (8008264 <raise+0x10>)
 8008258:	0001      	movs	r1, r0
 800825a:	6818      	ldr	r0, [r3, #0]
 800825c:	f7ff ffd0 	bl	8008200 <_raise_r>
 8008260:	bd10      	pop	{r4, pc}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	20000020 	.word	0x20000020

08008268 <_kill_r>:
 8008268:	2300      	movs	r3, #0
 800826a:	b570      	push	{r4, r5, r6, lr}
 800826c:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_kill_r+0x20>)
 800826e:	0004      	movs	r4, r0
 8008270:	0008      	movs	r0, r1
 8008272:	0011      	movs	r1, r2
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	f7fa f9e7 	bl	8002648 <_kill>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	d103      	bne.n	8008286 <_kill_r+0x1e>
 800827e:	682b      	ldr	r3, [r5, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d000      	beq.n	8008286 <_kill_r+0x1e>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	200002e4 	.word	0x200002e4

0800828c <_getpid_r>:
 800828c:	b510      	push	{r4, lr}
 800828e:	f7fa f9d5 	bl	800263c <_getpid>
 8008292:	bd10      	pop	{r4, pc}

08008294 <__sread>:
 8008294:	b570      	push	{r4, r5, r6, lr}
 8008296:	000c      	movs	r4, r1
 8008298:	250e      	movs	r5, #14
 800829a:	5f49      	ldrsh	r1, [r1, r5]
 800829c:	f000 f8a4 	bl	80083e8 <_read_r>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	db03      	blt.n	80082ac <__sread+0x18>
 80082a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80082a6:	181b      	adds	r3, r3, r0
 80082a8:	6563      	str	r3, [r4, #84]	; 0x54
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	4a02      	ldr	r2, [pc, #8]	; (80082b8 <__sread+0x24>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	e7f9      	b.n	80082aa <__sread+0x16>
 80082b6:	46c0      	nop			; (mov r8, r8)
 80082b8:	ffffefff 	.word	0xffffefff

080082bc <__swrite>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	001f      	movs	r7, r3
 80082c0:	898b      	ldrh	r3, [r1, #12]
 80082c2:	0005      	movs	r5, r0
 80082c4:	000c      	movs	r4, r1
 80082c6:	0016      	movs	r6, r2
 80082c8:	05db      	lsls	r3, r3, #23
 80082ca:	d505      	bpl.n	80082d8 <__swrite+0x1c>
 80082cc:	230e      	movs	r3, #14
 80082ce:	5ec9      	ldrsh	r1, [r1, r3]
 80082d0:	2200      	movs	r2, #0
 80082d2:	2302      	movs	r3, #2
 80082d4:	f000 f874 	bl	80083c0 <_lseek_r>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	4a05      	ldr	r2, [pc, #20]	; (80082f0 <__swrite+0x34>)
 80082dc:	0028      	movs	r0, r5
 80082de:	4013      	ands	r3, r2
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	0032      	movs	r2, r6
 80082e4:	230e      	movs	r3, #14
 80082e6:	5ee1      	ldrsh	r1, [r4, r3]
 80082e8:	003b      	movs	r3, r7
 80082ea:	f000 f81f 	bl	800832c <_write_r>
 80082ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f0:	ffffefff 	.word	0xffffefff

080082f4 <__sseek>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	000c      	movs	r4, r1
 80082f8:	250e      	movs	r5, #14
 80082fa:	5f49      	ldrsh	r1, [r1, r5]
 80082fc:	f000 f860 	bl	80083c0 <_lseek_r>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	1c42      	adds	r2, r0, #1
 8008304:	d103      	bne.n	800830e <__sseek+0x1a>
 8008306:	4a05      	ldr	r2, [pc, #20]	; (800831c <__sseek+0x28>)
 8008308:	4013      	ands	r3, r2
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	2280      	movs	r2, #128	; 0x80
 8008310:	0152      	lsls	r2, r2, #5
 8008312:	4313      	orrs	r3, r2
 8008314:	81a3      	strh	r3, [r4, #12]
 8008316:	6560      	str	r0, [r4, #84]	; 0x54
 8008318:	e7f8      	b.n	800830c <__sseek+0x18>
 800831a:	46c0      	nop			; (mov r8, r8)
 800831c:	ffffefff 	.word	0xffffefff

08008320 <__sclose>:
 8008320:	b510      	push	{r4, lr}
 8008322:	230e      	movs	r3, #14
 8008324:	5ec9      	ldrsh	r1, [r1, r3]
 8008326:	f000 f815 	bl	8008354 <_close_r>
 800832a:	bd10      	pop	{r4, pc}

0800832c <_write_r>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	0004      	movs	r4, r0
 8008330:	0008      	movs	r0, r1
 8008332:	0011      	movs	r1, r2
 8008334:	001a      	movs	r2, r3
 8008336:	2300      	movs	r3, #0
 8008338:	4d05      	ldr	r5, [pc, #20]	; (8008350 <_write_r+0x24>)
 800833a:	602b      	str	r3, [r5, #0]
 800833c:	f7fa f9bd 	bl	80026ba <_write>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d103      	bne.n	800834c <_write_r+0x20>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d000      	beq.n	800834c <_write_r+0x20>
 800834a:	6023      	str	r3, [r4, #0]
 800834c:	bd70      	pop	{r4, r5, r6, pc}
 800834e:	46c0      	nop			; (mov r8, r8)
 8008350:	200002e4 	.word	0x200002e4

08008354 <_close_r>:
 8008354:	2300      	movs	r3, #0
 8008356:	b570      	push	{r4, r5, r6, lr}
 8008358:	4d06      	ldr	r5, [pc, #24]	; (8008374 <_close_r+0x20>)
 800835a:	0004      	movs	r4, r0
 800835c:	0008      	movs	r0, r1
 800835e:	602b      	str	r3, [r5, #0]
 8008360:	f7fa f9c7 	bl	80026f2 <_close>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d103      	bne.n	8008370 <_close_r+0x1c>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d000      	beq.n	8008370 <_close_r+0x1c>
 800836e:	6023      	str	r3, [r4, #0]
 8008370:	bd70      	pop	{r4, r5, r6, pc}
 8008372:	46c0      	nop			; (mov r8, r8)
 8008374:	200002e4 	.word	0x200002e4

08008378 <_fstat_r>:
 8008378:	2300      	movs	r3, #0
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	4d06      	ldr	r5, [pc, #24]	; (8008398 <_fstat_r+0x20>)
 800837e:	0004      	movs	r4, r0
 8008380:	0008      	movs	r0, r1
 8008382:	0011      	movs	r1, r2
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	f7fa f9be 	bl	8002706 <_fstat>
 800838a:	1c43      	adds	r3, r0, #1
 800838c:	d103      	bne.n	8008396 <_fstat_r+0x1e>
 800838e:	682b      	ldr	r3, [r5, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d000      	beq.n	8008396 <_fstat_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	200002e4 	.word	0x200002e4

0800839c <_isatty_r>:
 800839c:	2300      	movs	r3, #0
 800839e:	b570      	push	{r4, r5, r6, lr}
 80083a0:	4d06      	ldr	r5, [pc, #24]	; (80083bc <_isatty_r+0x20>)
 80083a2:	0004      	movs	r4, r0
 80083a4:	0008      	movs	r0, r1
 80083a6:	602b      	str	r3, [r5, #0]
 80083a8:	f7fa f9bb 	bl	8002722 <_isatty>
 80083ac:	1c43      	adds	r3, r0, #1
 80083ae:	d103      	bne.n	80083b8 <_isatty_r+0x1c>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d000      	beq.n	80083b8 <_isatty_r+0x1c>
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
 80083ba:	46c0      	nop			; (mov r8, r8)
 80083bc:	200002e4 	.word	0x200002e4

080083c0 <_lseek_r>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	0004      	movs	r4, r0
 80083c4:	0008      	movs	r0, r1
 80083c6:	0011      	movs	r1, r2
 80083c8:	001a      	movs	r2, r3
 80083ca:	2300      	movs	r3, #0
 80083cc:	4d05      	ldr	r5, [pc, #20]	; (80083e4 <_lseek_r+0x24>)
 80083ce:	602b      	str	r3, [r5, #0]
 80083d0:	f7fa f9b0 	bl	8002734 <_lseek>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d103      	bne.n	80083e0 <_lseek_r+0x20>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d000      	beq.n	80083e0 <_lseek_r+0x20>
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	200002e4 	.word	0x200002e4

080083e8 <_read_r>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	0004      	movs	r4, r0
 80083ec:	0008      	movs	r0, r1
 80083ee:	0011      	movs	r1, r2
 80083f0:	001a      	movs	r2, r3
 80083f2:	2300      	movs	r3, #0
 80083f4:	4d05      	ldr	r5, [pc, #20]	; (800840c <_read_r+0x24>)
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	f7fa f942 	bl	8002680 <_read>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d103      	bne.n	8008408 <_read_r+0x20>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d000      	beq.n	8008408 <_read_r+0x20>
 8008406:	6023      	str	r3, [r4, #0]
 8008408:	bd70      	pop	{r4, r5, r6, pc}
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	200002e4 	.word	0x200002e4

08008410 <_init>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008416:	bc08      	pop	{r3}
 8008418:	469e      	mov	lr, r3
 800841a:	4770      	bx	lr

0800841c <_fini>:
 800841c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008422:	bc08      	pop	{r3}
 8008424:	469e      	mov	lr, r3
 8008426:	4770      	bx	lr
