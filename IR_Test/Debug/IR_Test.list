
IR_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008638  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080086f0  080086f0  000186f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b8c  08008b8c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08008b8c  08008b8c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b8c  08008b8c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b8c  08008b8c  00018b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  200001f0  08008d84  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08008d84  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8a1  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de6  00000000  00000000  0002aab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001635e  00000000  00000000  0002dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7d3  00000000  00000000  00044086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899f3  00000000  00000000  00050859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da24c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003600  00000000  00000000  000da29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	200001f0 	.word	0x200001f0
 80000d4:	00000000 	.word	0x00000000
 80000d8:	080086d4 	.word	0x080086d4

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	200001f4 	.word	0x200001f4
 80000f8:	080086d4 	.word	0x080086d4

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_uqi>:
 800010c:	b402      	push	{r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	5c09      	ldrb	r1, [r1, r0]
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	448e      	add	lr, r1
 800011a:	bc02      	pop	{r1}
 800011c:	4770      	bx	lr
 800011e:	46c0      	nop			; (mov r8, r8)

08000120 <__gnu_thumb1_case_shi>:
 8000120:	b403      	push	{r0, r1}
 8000122:	4671      	mov	r1, lr
 8000124:	0849      	lsrs	r1, r1, #1
 8000126:	0040      	lsls	r0, r0, #1
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	5e09      	ldrsh	r1, [r1, r0]
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	448e      	add	lr, r1
 8000130:	bc03      	pop	{r0, r1}
 8000132:	4770      	bx	lr

08000134 <__udivsi3>:
 8000134:	2200      	movs	r2, #0
 8000136:	0843      	lsrs	r3, r0, #1
 8000138:	428b      	cmp	r3, r1
 800013a:	d374      	bcc.n	8000226 <__udivsi3+0xf2>
 800013c:	0903      	lsrs	r3, r0, #4
 800013e:	428b      	cmp	r3, r1
 8000140:	d35f      	bcc.n	8000202 <__udivsi3+0xce>
 8000142:	0a03      	lsrs	r3, r0, #8
 8000144:	428b      	cmp	r3, r1
 8000146:	d344      	bcc.n	80001d2 <__udivsi3+0x9e>
 8000148:	0b03      	lsrs	r3, r0, #12
 800014a:	428b      	cmp	r3, r1
 800014c:	d328      	bcc.n	80001a0 <__udivsi3+0x6c>
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d30d      	bcc.n	8000170 <__udivsi3+0x3c>
 8000154:	22ff      	movs	r2, #255	; 0xff
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	ba12      	rev	r2, r2
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d302      	bcc.n	8000166 <__udivsi3+0x32>
 8000160:	1212      	asrs	r2, r2, #8
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	d065      	beq.n	8000232 <__udivsi3+0xfe>
 8000166:	0b03      	lsrs	r3, r0, #12
 8000168:	428b      	cmp	r3, r1
 800016a:	d319      	bcc.n	80001a0 <__udivsi3+0x6c>
 800016c:	e000      	b.n	8000170 <__udivsi3+0x3c>
 800016e:	0a09      	lsrs	r1, r1, #8
 8000170:	0bc3      	lsrs	r3, r0, #15
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x46>
 8000176:	03cb      	lsls	r3, r1, #15
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b83      	lsrs	r3, r0, #14
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x52>
 8000182:	038b      	lsls	r3, r1, #14
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b43      	lsrs	r3, r0, #13
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x5e>
 800018e:	034b      	lsls	r3, r1, #13
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b03      	lsrs	r3, r0, #12
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x6a>
 800019a:	030b      	lsls	r3, r1, #12
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0ac3      	lsrs	r3, r0, #11
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x76>
 80001a6:	02cb      	lsls	r3, r1, #11
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a83      	lsrs	r3, r0, #10
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x82>
 80001b2:	028b      	lsls	r3, r1, #10
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a43      	lsrs	r3, r0, #9
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x8e>
 80001be:	024b      	lsls	r3, r1, #9
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a03      	lsrs	r3, r0, #8
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x9a>
 80001ca:	020b      	lsls	r3, r1, #8
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	d2cd      	bcs.n	800016e <__udivsi3+0x3a>
 80001d2:	09c3      	lsrs	r3, r0, #7
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xa8>
 80001d8:	01cb      	lsls	r3, r1, #7
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0983      	lsrs	r3, r0, #6
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xb4>
 80001e4:	018b      	lsls	r3, r1, #6
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0943      	lsrs	r3, r0, #5
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xc0>
 80001f0:	014b      	lsls	r3, r1, #5
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0903      	lsrs	r3, r0, #4
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xcc>
 80001fc:	010b      	lsls	r3, r1, #4
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	08c3      	lsrs	r3, r0, #3
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xd8>
 8000208:	00cb      	lsls	r3, r1, #3
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0883      	lsrs	r3, r0, #2
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xe4>
 8000214:	008b      	lsls	r3, r1, #2
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0843      	lsrs	r3, r0, #1
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xf0>
 8000220:	004b      	lsls	r3, r1, #1
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	1a41      	subs	r1, r0, r1
 8000228:	d200      	bcs.n	800022c <__udivsi3+0xf8>
 800022a:	4601      	mov	r1, r0
 800022c:	4152      	adcs	r2, r2
 800022e:	4610      	mov	r0, r2
 8000230:	4770      	bx	lr
 8000232:	e7ff      	b.n	8000234 <__udivsi3+0x100>
 8000234:	b501      	push	{r0, lr}
 8000236:	2000      	movs	r0, #0
 8000238:	f000 f8f0 	bl	800041c <__aeabi_idiv0>
 800023c:	bd02      	pop	{r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_uidivmod>:
 8000240:	2900      	cmp	r1, #0
 8000242:	d0f7      	beq.n	8000234 <__udivsi3+0x100>
 8000244:	e776      	b.n	8000134 <__udivsi3>
 8000246:	4770      	bx	lr

08000248 <__divsi3>:
 8000248:	4603      	mov	r3, r0
 800024a:	430b      	orrs	r3, r1
 800024c:	d47f      	bmi.n	800034e <__divsi3+0x106>
 800024e:	2200      	movs	r2, #0
 8000250:	0843      	lsrs	r3, r0, #1
 8000252:	428b      	cmp	r3, r1
 8000254:	d374      	bcc.n	8000340 <__divsi3+0xf8>
 8000256:	0903      	lsrs	r3, r0, #4
 8000258:	428b      	cmp	r3, r1
 800025a:	d35f      	bcc.n	800031c <__divsi3+0xd4>
 800025c:	0a03      	lsrs	r3, r0, #8
 800025e:	428b      	cmp	r3, r1
 8000260:	d344      	bcc.n	80002ec <__divsi3+0xa4>
 8000262:	0b03      	lsrs	r3, r0, #12
 8000264:	428b      	cmp	r3, r1
 8000266:	d328      	bcc.n	80002ba <__divsi3+0x72>
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d30d      	bcc.n	800028a <__divsi3+0x42>
 800026e:	22ff      	movs	r2, #255	; 0xff
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	ba12      	rev	r2, r2
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__divsi3+0x38>
 800027a:	1212      	asrs	r2, r2, #8
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	d065      	beq.n	800034c <__divsi3+0x104>
 8000280:	0b03      	lsrs	r3, r0, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d319      	bcc.n	80002ba <__divsi3+0x72>
 8000286:	e000      	b.n	800028a <__divsi3+0x42>
 8000288:	0a09      	lsrs	r1, r1, #8
 800028a:	0bc3      	lsrs	r3, r0, #15
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x4c>
 8000290:	03cb      	lsls	r3, r1, #15
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b83      	lsrs	r3, r0, #14
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x58>
 800029c:	038b      	lsls	r3, r1, #14
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b43      	lsrs	r3, r0, #13
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x64>
 80002a8:	034b      	lsls	r3, r1, #13
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b03      	lsrs	r3, r0, #12
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x70>
 80002b4:	030b      	lsls	r3, r1, #12
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0ac3      	lsrs	r3, r0, #11
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x7c>
 80002c0:	02cb      	lsls	r3, r1, #11
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a83      	lsrs	r3, r0, #10
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x88>
 80002cc:	028b      	lsls	r3, r1, #10
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a43      	lsrs	r3, r0, #9
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x94>
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a03      	lsrs	r3, r0, #8
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0xa0>
 80002e4:	020b      	lsls	r3, r1, #8
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	d2cd      	bcs.n	8000288 <__divsi3+0x40>
 80002ec:	09c3      	lsrs	r3, r0, #7
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xae>
 80002f2:	01cb      	lsls	r3, r1, #7
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0983      	lsrs	r3, r0, #6
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xba>
 80002fe:	018b      	lsls	r3, r1, #6
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0943      	lsrs	r3, r0, #5
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xc6>
 800030a:	014b      	lsls	r3, r1, #5
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0903      	lsrs	r3, r0, #4
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xd2>
 8000316:	010b      	lsls	r3, r1, #4
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	08c3      	lsrs	r3, r0, #3
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xde>
 8000322:	00cb      	lsls	r3, r1, #3
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0883      	lsrs	r3, r0, #2
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xea>
 800032e:	008b      	lsls	r3, r1, #2
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0843      	lsrs	r3, r0, #1
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xf6>
 800033a:	004b      	lsls	r3, r1, #1
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	1a41      	subs	r1, r0, r1
 8000342:	d200      	bcs.n	8000346 <__divsi3+0xfe>
 8000344:	4601      	mov	r1, r0
 8000346:	4152      	adcs	r2, r2
 8000348:	4610      	mov	r0, r2
 800034a:	4770      	bx	lr
 800034c:	e05d      	b.n	800040a <__divsi3+0x1c2>
 800034e:	0fca      	lsrs	r2, r1, #31
 8000350:	d000      	beq.n	8000354 <__divsi3+0x10c>
 8000352:	4249      	negs	r1, r1
 8000354:	1003      	asrs	r3, r0, #32
 8000356:	d300      	bcc.n	800035a <__divsi3+0x112>
 8000358:	4240      	negs	r0, r0
 800035a:	4053      	eors	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	469c      	mov	ip, r3
 8000360:	0903      	lsrs	r3, r0, #4
 8000362:	428b      	cmp	r3, r1
 8000364:	d32d      	bcc.n	80003c2 <__divsi3+0x17a>
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d312      	bcc.n	8000392 <__divsi3+0x14a>
 800036c:	22fc      	movs	r2, #252	; 0xfc
 800036e:	0189      	lsls	r1, r1, #6
 8000370:	ba12      	rev	r2, r2
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d30c      	bcc.n	8000392 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d308      	bcc.n	8000392 <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d304      	bcc.n	8000392 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	d03a      	beq.n	8000402 <__divsi3+0x1ba>
 800038c:	1192      	asrs	r2, r2, #6
 800038e:	e000      	b.n	8000392 <__divsi3+0x14a>
 8000390:	0989      	lsrs	r1, r1, #6
 8000392:	09c3      	lsrs	r3, r0, #7
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x154>
 8000398:	01cb      	lsls	r3, r1, #7
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0983      	lsrs	r3, r0, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x160>
 80003a4:	018b      	lsls	r3, r1, #6
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0943      	lsrs	r3, r0, #5
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x16c>
 80003b0:	014b      	lsls	r3, r1, #5
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0903      	lsrs	r3, r0, #4
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x178>
 80003bc:	010b      	lsls	r3, r1, #4
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	08c3      	lsrs	r3, r0, #3
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x184>
 80003c8:	00cb      	lsls	r3, r1, #3
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0883      	lsrs	r3, r0, #2
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x190>
 80003d4:	008b      	lsls	r3, r1, #2
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	d2d9      	bcs.n	8000390 <__divsi3+0x148>
 80003dc:	0843      	lsrs	r3, r0, #1
 80003de:	428b      	cmp	r3, r1
 80003e0:	d301      	bcc.n	80003e6 <__divsi3+0x19e>
 80003e2:	004b      	lsls	r3, r1, #1
 80003e4:	1ac0      	subs	r0, r0, r3
 80003e6:	4152      	adcs	r2, r2
 80003e8:	1a41      	subs	r1, r0, r1
 80003ea:	d200      	bcs.n	80003ee <__divsi3+0x1a6>
 80003ec:	4601      	mov	r1, r0
 80003ee:	4663      	mov	r3, ip
 80003f0:	4152      	adcs	r2, r2
 80003f2:	105b      	asrs	r3, r3, #1
 80003f4:	4610      	mov	r0, r2
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x1b4>
 80003f8:	4240      	negs	r0, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d500      	bpl.n	8000400 <__divsi3+0x1b8>
 80003fe:	4249      	negs	r1, r1
 8000400:	4770      	bx	lr
 8000402:	4663      	mov	r3, ip
 8000404:	105b      	asrs	r3, r3, #1
 8000406:	d300      	bcc.n	800040a <__divsi3+0x1c2>
 8000408:	4240      	negs	r0, r0
 800040a:	b501      	push	{r0, lr}
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f805 	bl	800041c <__aeabi_idiv0>
 8000412:	bd02      	pop	{r1, pc}

08000414 <__aeabi_idivmod>:
 8000414:	2900      	cmp	r1, #0
 8000416:	d0f8      	beq.n	800040a <__divsi3+0x1c2>
 8000418:	e716      	b.n	8000248 <__divsi3>
 800041a:	4770      	bx	lr

0800041c <__aeabi_idiv0>:
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_cdrcmple>:
 8000420:	4684      	mov	ip, r0
 8000422:	0010      	movs	r0, r2
 8000424:	4662      	mov	r2, ip
 8000426:	468c      	mov	ip, r1
 8000428:	0019      	movs	r1, r3
 800042a:	4663      	mov	r3, ip
 800042c:	e000      	b.n	8000430 <__aeabi_cdcmpeq>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdcmpeq>:
 8000430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000432:	f000 ff0d 	bl	8001250 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	d401      	bmi.n	800043e <__aeabi_cdcmpeq+0xe>
 800043a:	2100      	movs	r1, #0
 800043c:	42c8      	cmn	r0, r1
 800043e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000440 <__aeabi_dcmpeq>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fe5d 	bl	8001100 <__eqdf2>
 8000446:	4240      	negs	r0, r0
 8000448:	3001      	adds	r0, #1
 800044a:	bd10      	pop	{r4, pc}

0800044c <__aeabi_dcmplt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 feff 	bl	8001250 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	db01      	blt.n	800045a <__aeabi_dcmplt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_dcmple>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fef5 	bl	8001250 <__ledf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dd01      	ble.n	800046e <__aeabi_dcmple+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_dcmpgt>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 fe85 	bl	8001184 <__gedf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	dc01      	bgt.n	8000482 <__aeabi_dcmpgt+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_dcmpge>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fe7b 	bl	8001184 <__gedf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	da01      	bge.n	8000496 <__aeabi_dcmpge+0xe>
 8000492:	2000      	movs	r0, #0
 8000494:	bd10      	pop	{r4, pc}
 8000496:	2001      	movs	r0, #1
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_dadd>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	464f      	mov	r7, r9
 80004a0:	4646      	mov	r6, r8
 80004a2:	46d6      	mov	lr, sl
 80004a4:	000d      	movs	r5, r1
 80004a6:	0004      	movs	r4, r0
 80004a8:	b5c0      	push	{r6, r7, lr}
 80004aa:	001f      	movs	r7, r3
 80004ac:	0011      	movs	r1, r2
 80004ae:	0328      	lsls	r0, r5, #12
 80004b0:	0f62      	lsrs	r2, r4, #29
 80004b2:	0a40      	lsrs	r0, r0, #9
 80004b4:	4310      	orrs	r0, r2
 80004b6:	007a      	lsls	r2, r7, #1
 80004b8:	0d52      	lsrs	r2, r2, #21
 80004ba:	00e3      	lsls	r3, r4, #3
 80004bc:	033c      	lsls	r4, r7, #12
 80004be:	4691      	mov	r9, r2
 80004c0:	0a64      	lsrs	r4, r4, #9
 80004c2:	0ffa      	lsrs	r2, r7, #31
 80004c4:	0f4f      	lsrs	r7, r1, #29
 80004c6:	006e      	lsls	r6, r5, #1
 80004c8:	4327      	orrs	r7, r4
 80004ca:	4692      	mov	sl, r2
 80004cc:	46b8      	mov	r8, r7
 80004ce:	0d76      	lsrs	r6, r6, #21
 80004d0:	0fed      	lsrs	r5, r5, #31
 80004d2:	00c9      	lsls	r1, r1, #3
 80004d4:	4295      	cmp	r5, r2
 80004d6:	d100      	bne.n	80004da <__aeabi_dadd+0x3e>
 80004d8:	e099      	b.n	800060e <__aeabi_dadd+0x172>
 80004da:	464c      	mov	r4, r9
 80004dc:	1b34      	subs	r4, r6, r4
 80004de:	46a4      	mov	ip, r4
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_dadd+0x4a>
 80004e4:	e07c      	b.n	80005e0 <__aeabi_dadd+0x144>
 80004e6:	464a      	mov	r2, r9
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_dadd+0x52>
 80004ec:	e0b8      	b.n	8000660 <__aeabi_dadd+0x1c4>
 80004ee:	4ac5      	ldr	r2, [pc, #788]	; (8000804 <__aeabi_dadd+0x368>)
 80004f0:	4296      	cmp	r6, r2
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x5a>
 80004f4:	e11c      	b.n	8000730 <__aeabi_dadd+0x294>
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	003c      	movs	r4, r7
 80004fa:	0412      	lsls	r2, r2, #16
 80004fc:	4314      	orrs	r4, r2
 80004fe:	46a0      	mov	r8, r4
 8000500:	4662      	mov	r2, ip
 8000502:	2a38      	cmp	r2, #56	; 0x38
 8000504:	dd00      	ble.n	8000508 <__aeabi_dadd+0x6c>
 8000506:	e161      	b.n	80007cc <__aeabi_dadd+0x330>
 8000508:	2a1f      	cmp	r2, #31
 800050a:	dd00      	ble.n	800050e <__aeabi_dadd+0x72>
 800050c:	e1cc      	b.n	80008a8 <__aeabi_dadd+0x40c>
 800050e:	4664      	mov	r4, ip
 8000510:	2220      	movs	r2, #32
 8000512:	1b12      	subs	r2, r2, r4
 8000514:	4644      	mov	r4, r8
 8000516:	4094      	lsls	r4, r2
 8000518:	000f      	movs	r7, r1
 800051a:	46a1      	mov	r9, r4
 800051c:	4664      	mov	r4, ip
 800051e:	4091      	lsls	r1, r2
 8000520:	40e7      	lsrs	r7, r4
 8000522:	464c      	mov	r4, r9
 8000524:	1e4a      	subs	r2, r1, #1
 8000526:	4191      	sbcs	r1, r2
 8000528:	433c      	orrs	r4, r7
 800052a:	4642      	mov	r2, r8
 800052c:	4321      	orrs	r1, r4
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	1a80      	subs	r0, r0, r2
 8000534:	1a5c      	subs	r4, r3, r1
 8000536:	42a3      	cmp	r3, r4
 8000538:	419b      	sbcs	r3, r3
 800053a:	425f      	negs	r7, r3
 800053c:	1bc7      	subs	r7, r0, r7
 800053e:	023b      	lsls	r3, r7, #8
 8000540:	d400      	bmi.n	8000544 <__aeabi_dadd+0xa8>
 8000542:	e0d0      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000544:	027f      	lsls	r7, r7, #9
 8000546:	0a7f      	lsrs	r7, r7, #9
 8000548:	2f00      	cmp	r7, #0
 800054a:	d100      	bne.n	800054e <__aeabi_dadd+0xb2>
 800054c:	e0ff      	b.n	800074e <__aeabi_dadd+0x2b2>
 800054e:	0038      	movs	r0, r7
 8000550:	f001 fd8a 	bl	8002068 <__clzsi2>
 8000554:	0001      	movs	r1, r0
 8000556:	3908      	subs	r1, #8
 8000558:	2320      	movs	r3, #32
 800055a:	0022      	movs	r2, r4
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	408f      	lsls	r7, r1
 8000560:	40da      	lsrs	r2, r3
 8000562:	408c      	lsls	r4, r1
 8000564:	4317      	orrs	r7, r2
 8000566:	42b1      	cmp	r1, r6
 8000568:	da00      	bge.n	800056c <__aeabi_dadd+0xd0>
 800056a:	e0ff      	b.n	800076c <__aeabi_dadd+0x2d0>
 800056c:	1b89      	subs	r1, r1, r6
 800056e:	1c4b      	adds	r3, r1, #1
 8000570:	2b1f      	cmp	r3, #31
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xda>
 8000574:	e0a8      	b.n	80006c8 <__aeabi_dadd+0x22c>
 8000576:	2220      	movs	r2, #32
 8000578:	0039      	movs	r1, r7
 800057a:	1ad2      	subs	r2, r2, r3
 800057c:	0020      	movs	r0, r4
 800057e:	4094      	lsls	r4, r2
 8000580:	4091      	lsls	r1, r2
 8000582:	40d8      	lsrs	r0, r3
 8000584:	1e62      	subs	r2, r4, #1
 8000586:	4194      	sbcs	r4, r2
 8000588:	40df      	lsrs	r7, r3
 800058a:	2600      	movs	r6, #0
 800058c:	4301      	orrs	r1, r0
 800058e:	430c      	orrs	r4, r1
 8000590:	0763      	lsls	r3, r4, #29
 8000592:	d009      	beq.n	80005a8 <__aeabi_dadd+0x10c>
 8000594:	230f      	movs	r3, #15
 8000596:	4023      	ands	r3, r4
 8000598:	2b04      	cmp	r3, #4
 800059a:	d005      	beq.n	80005a8 <__aeabi_dadd+0x10c>
 800059c:	1d23      	adds	r3, r4, #4
 800059e:	42a3      	cmp	r3, r4
 80005a0:	41a4      	sbcs	r4, r4
 80005a2:	4264      	negs	r4, r4
 80005a4:	193f      	adds	r7, r7, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	023b      	lsls	r3, r7, #8
 80005aa:	d400      	bmi.n	80005ae <__aeabi_dadd+0x112>
 80005ac:	e09e      	b.n	80006ec <__aeabi_dadd+0x250>
 80005ae:	4b95      	ldr	r3, [pc, #596]	; (8000804 <__aeabi_dadd+0x368>)
 80005b0:	3601      	adds	r6, #1
 80005b2:	429e      	cmp	r6, r3
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x11c>
 80005b6:	e0b7      	b.n	8000728 <__aeabi_dadd+0x28c>
 80005b8:	4a93      	ldr	r2, [pc, #588]	; (8000808 <__aeabi_dadd+0x36c>)
 80005ba:	08e4      	lsrs	r4, r4, #3
 80005bc:	4017      	ands	r7, r2
 80005be:	077b      	lsls	r3, r7, #29
 80005c0:	0571      	lsls	r1, r6, #21
 80005c2:	027f      	lsls	r7, r7, #9
 80005c4:	4323      	orrs	r3, r4
 80005c6:	0b3f      	lsrs	r7, r7, #12
 80005c8:	0d4a      	lsrs	r2, r1, #21
 80005ca:	0512      	lsls	r2, r2, #20
 80005cc:	433a      	orrs	r2, r7
 80005ce:	07ed      	lsls	r5, r5, #31
 80005d0:	432a      	orrs	r2, r5
 80005d2:	0018      	movs	r0, r3
 80005d4:	0011      	movs	r1, r2
 80005d6:	bce0      	pop	{r5, r6, r7}
 80005d8:	46ba      	mov	sl, r7
 80005da:	46b1      	mov	r9, r6
 80005dc:	46a8      	mov	r8, r5
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d04b      	beq.n	800067c <__aeabi_dadd+0x1e0>
 80005e4:	464c      	mov	r4, r9
 80005e6:	1ba4      	subs	r4, r4, r6
 80005e8:	46a4      	mov	ip, r4
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_dadd+0x154>
 80005ee:	e123      	b.n	8000838 <__aeabi_dadd+0x39c>
 80005f0:	0004      	movs	r4, r0
 80005f2:	431c      	orrs	r4, r3
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x15c>
 80005f6:	e1af      	b.n	8000958 <__aeabi_dadd+0x4bc>
 80005f8:	4662      	mov	r2, ip
 80005fa:	1e54      	subs	r4, r2, #1
 80005fc:	2a01      	cmp	r2, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x166>
 8000600:	e215      	b.n	8000a2e <__aeabi_dadd+0x592>
 8000602:	4d80      	ldr	r5, [pc, #512]	; (8000804 <__aeabi_dadd+0x368>)
 8000604:	45ac      	cmp	ip, r5
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x16e>
 8000608:	e1c8      	b.n	800099c <__aeabi_dadd+0x500>
 800060a:	46a4      	mov	ip, r4
 800060c:	e11b      	b.n	8000846 <__aeabi_dadd+0x3aa>
 800060e:	464a      	mov	r2, r9
 8000610:	1ab2      	subs	r2, r6, r2
 8000612:	4694      	mov	ip, r2
 8000614:	2a00      	cmp	r2, #0
 8000616:	dc00      	bgt.n	800061a <__aeabi_dadd+0x17e>
 8000618:	e0ac      	b.n	8000774 <__aeabi_dadd+0x2d8>
 800061a:	464a      	mov	r2, r9
 800061c:	2a00      	cmp	r2, #0
 800061e:	d043      	beq.n	80006a8 <__aeabi_dadd+0x20c>
 8000620:	4a78      	ldr	r2, [pc, #480]	; (8000804 <__aeabi_dadd+0x368>)
 8000622:	4296      	cmp	r6, r2
 8000624:	d100      	bne.n	8000628 <__aeabi_dadd+0x18c>
 8000626:	e1af      	b.n	8000988 <__aeabi_dadd+0x4ec>
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	003c      	movs	r4, r7
 800062c:	0412      	lsls	r2, r2, #16
 800062e:	4314      	orrs	r4, r2
 8000630:	46a0      	mov	r8, r4
 8000632:	4662      	mov	r2, ip
 8000634:	2a38      	cmp	r2, #56	; 0x38
 8000636:	dc67      	bgt.n	8000708 <__aeabi_dadd+0x26c>
 8000638:	2a1f      	cmp	r2, #31
 800063a:	dc00      	bgt.n	800063e <__aeabi_dadd+0x1a2>
 800063c:	e15f      	b.n	80008fe <__aeabi_dadd+0x462>
 800063e:	4647      	mov	r7, r8
 8000640:	3a20      	subs	r2, #32
 8000642:	40d7      	lsrs	r7, r2
 8000644:	4662      	mov	r2, ip
 8000646:	2a20      	cmp	r2, #32
 8000648:	d005      	beq.n	8000656 <__aeabi_dadd+0x1ba>
 800064a:	4664      	mov	r4, ip
 800064c:	2240      	movs	r2, #64	; 0x40
 800064e:	1b12      	subs	r2, r2, r4
 8000650:	4644      	mov	r4, r8
 8000652:	4094      	lsls	r4, r2
 8000654:	4321      	orrs	r1, r4
 8000656:	1e4a      	subs	r2, r1, #1
 8000658:	4191      	sbcs	r1, r2
 800065a:	000c      	movs	r4, r1
 800065c:	433c      	orrs	r4, r7
 800065e:	e057      	b.n	8000710 <__aeabi_dadd+0x274>
 8000660:	003a      	movs	r2, r7
 8000662:	430a      	orrs	r2, r1
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x1cc>
 8000666:	e105      	b.n	8000874 <__aeabi_dadd+0x3d8>
 8000668:	0022      	movs	r2, r4
 800066a:	3a01      	subs	r2, #1
 800066c:	2c01      	cmp	r4, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1d6>
 8000670:	e182      	b.n	8000978 <__aeabi_dadd+0x4dc>
 8000672:	4c64      	ldr	r4, [pc, #400]	; (8000804 <__aeabi_dadd+0x368>)
 8000674:	45a4      	cmp	ip, r4
 8000676:	d05b      	beq.n	8000730 <__aeabi_dadd+0x294>
 8000678:	4694      	mov	ip, r2
 800067a:	e741      	b.n	8000500 <__aeabi_dadd+0x64>
 800067c:	4c63      	ldr	r4, [pc, #396]	; (800080c <__aeabi_dadd+0x370>)
 800067e:	1c77      	adds	r7, r6, #1
 8000680:	4227      	tst	r7, r4
 8000682:	d000      	beq.n	8000686 <__aeabi_dadd+0x1ea>
 8000684:	e0c4      	b.n	8000810 <__aeabi_dadd+0x374>
 8000686:	0004      	movs	r4, r0
 8000688:	431c      	orrs	r4, r3
 800068a:	2e00      	cmp	r6, #0
 800068c:	d000      	beq.n	8000690 <__aeabi_dadd+0x1f4>
 800068e:	e169      	b.n	8000964 <__aeabi_dadd+0x4c8>
 8000690:	2c00      	cmp	r4, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1fa>
 8000694:	e1bf      	b.n	8000a16 <__aeabi_dadd+0x57a>
 8000696:	4644      	mov	r4, r8
 8000698:	430c      	orrs	r4, r1
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x202>
 800069c:	e1d0      	b.n	8000a40 <__aeabi_dadd+0x5a4>
 800069e:	0742      	lsls	r2, r0, #29
 80006a0:	08db      	lsrs	r3, r3, #3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	08c0      	lsrs	r0, r0, #3
 80006a6:	e029      	b.n	80006fc <__aeabi_dadd+0x260>
 80006a8:	003a      	movs	r2, r7
 80006aa:	430a      	orrs	r2, r1
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x214>
 80006ae:	e170      	b.n	8000992 <__aeabi_dadd+0x4f6>
 80006b0:	4662      	mov	r2, ip
 80006b2:	4664      	mov	r4, ip
 80006b4:	3a01      	subs	r2, #1
 80006b6:	2c01      	cmp	r4, #1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x220>
 80006ba:	e0e0      	b.n	800087e <__aeabi_dadd+0x3e2>
 80006bc:	4c51      	ldr	r4, [pc, #324]	; (8000804 <__aeabi_dadd+0x368>)
 80006be:	45a4      	cmp	ip, r4
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x228>
 80006c2:	e161      	b.n	8000988 <__aeabi_dadd+0x4ec>
 80006c4:	4694      	mov	ip, r2
 80006c6:	e7b4      	b.n	8000632 <__aeabi_dadd+0x196>
 80006c8:	003a      	movs	r2, r7
 80006ca:	391f      	subs	r1, #31
 80006cc:	40ca      	lsrs	r2, r1
 80006ce:	0011      	movs	r1, r2
 80006d0:	2b20      	cmp	r3, #32
 80006d2:	d003      	beq.n	80006dc <__aeabi_dadd+0x240>
 80006d4:	2240      	movs	r2, #64	; 0x40
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	409f      	lsls	r7, r3
 80006da:	433c      	orrs	r4, r7
 80006dc:	1e63      	subs	r3, r4, #1
 80006de:	419c      	sbcs	r4, r3
 80006e0:	2700      	movs	r7, #0
 80006e2:	2600      	movs	r6, #0
 80006e4:	430c      	orrs	r4, r1
 80006e6:	0763      	lsls	r3, r4, #29
 80006e8:	d000      	beq.n	80006ec <__aeabi_dadd+0x250>
 80006ea:	e753      	b.n	8000594 <__aeabi_dadd+0xf8>
 80006ec:	46b4      	mov	ip, r6
 80006ee:	08e4      	lsrs	r4, r4, #3
 80006f0:	077b      	lsls	r3, r7, #29
 80006f2:	4323      	orrs	r3, r4
 80006f4:	08f8      	lsrs	r0, r7, #3
 80006f6:	4a43      	ldr	r2, [pc, #268]	; (8000804 <__aeabi_dadd+0x368>)
 80006f8:	4594      	cmp	ip, r2
 80006fa:	d01d      	beq.n	8000738 <__aeabi_dadd+0x29c>
 80006fc:	4662      	mov	r2, ip
 80006fe:	0307      	lsls	r7, r0, #12
 8000700:	0552      	lsls	r2, r2, #21
 8000702:	0b3f      	lsrs	r7, r7, #12
 8000704:	0d52      	lsrs	r2, r2, #21
 8000706:	e760      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000708:	4644      	mov	r4, r8
 800070a:	430c      	orrs	r4, r1
 800070c:	1e62      	subs	r2, r4, #1
 800070e:	4194      	sbcs	r4, r2
 8000710:	18e4      	adds	r4, r4, r3
 8000712:	429c      	cmp	r4, r3
 8000714:	419b      	sbcs	r3, r3
 8000716:	425f      	negs	r7, r3
 8000718:	183f      	adds	r7, r7, r0
 800071a:	023b      	lsls	r3, r7, #8
 800071c:	d5e3      	bpl.n	80006e6 <__aeabi_dadd+0x24a>
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <__aeabi_dadd+0x368>)
 8000720:	3601      	adds	r6, #1
 8000722:	429e      	cmp	r6, r3
 8000724:	d000      	beq.n	8000728 <__aeabi_dadd+0x28c>
 8000726:	e0b5      	b.n	8000894 <__aeabi_dadd+0x3f8>
 8000728:	0032      	movs	r2, r6
 800072a:	2700      	movs	r7, #0
 800072c:	2300      	movs	r3, #0
 800072e:	e74c      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000730:	0742      	lsls	r2, r0, #29
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	4313      	orrs	r3, r2
 8000736:	08c0      	lsrs	r0, r0, #3
 8000738:	001a      	movs	r2, r3
 800073a:	4302      	orrs	r2, r0
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x2a4>
 800073e:	e1e1      	b.n	8000b04 <__aeabi_dadd+0x668>
 8000740:	2780      	movs	r7, #128	; 0x80
 8000742:	033f      	lsls	r7, r7, #12
 8000744:	4307      	orrs	r7, r0
 8000746:	033f      	lsls	r7, r7, #12
 8000748:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <__aeabi_dadd+0x368>)
 800074a:	0b3f      	lsrs	r7, r7, #12
 800074c:	e73d      	b.n	80005ca <__aeabi_dadd+0x12e>
 800074e:	0020      	movs	r0, r4
 8000750:	f001 fc8a 	bl	8002068 <__clzsi2>
 8000754:	0001      	movs	r1, r0
 8000756:	3118      	adds	r1, #24
 8000758:	291f      	cmp	r1, #31
 800075a:	dc00      	bgt.n	800075e <__aeabi_dadd+0x2c2>
 800075c:	e6fc      	b.n	8000558 <__aeabi_dadd+0xbc>
 800075e:	3808      	subs	r0, #8
 8000760:	4084      	lsls	r4, r0
 8000762:	0027      	movs	r7, r4
 8000764:	2400      	movs	r4, #0
 8000766:	42b1      	cmp	r1, r6
 8000768:	db00      	blt.n	800076c <__aeabi_dadd+0x2d0>
 800076a:	e6ff      	b.n	800056c <__aeabi_dadd+0xd0>
 800076c:	4a26      	ldr	r2, [pc, #152]	; (8000808 <__aeabi_dadd+0x36c>)
 800076e:	1a76      	subs	r6, r6, r1
 8000770:	4017      	ands	r7, r2
 8000772:	e70d      	b.n	8000590 <__aeabi_dadd+0xf4>
 8000774:	2a00      	cmp	r2, #0
 8000776:	d02f      	beq.n	80007d8 <__aeabi_dadd+0x33c>
 8000778:	464a      	mov	r2, r9
 800077a:	1b92      	subs	r2, r2, r6
 800077c:	4694      	mov	ip, r2
 800077e:	2e00      	cmp	r6, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0x2e8>
 8000782:	e0ad      	b.n	80008e0 <__aeabi_dadd+0x444>
 8000784:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <__aeabi_dadd+0x368>)
 8000786:	4591      	cmp	r9, r2
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x2f0>
 800078a:	e10f      	b.n	80009ac <__aeabi_dadd+0x510>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0412      	lsls	r2, r2, #16
 8000790:	4310      	orrs	r0, r2
 8000792:	4662      	mov	r2, ip
 8000794:	2a38      	cmp	r2, #56	; 0x38
 8000796:	dd00      	ble.n	800079a <__aeabi_dadd+0x2fe>
 8000798:	e10f      	b.n	80009ba <__aeabi_dadd+0x51e>
 800079a:	2a1f      	cmp	r2, #31
 800079c:	dd00      	ble.n	80007a0 <__aeabi_dadd+0x304>
 800079e:	e180      	b.n	8000aa2 <__aeabi_dadd+0x606>
 80007a0:	4664      	mov	r4, ip
 80007a2:	2220      	movs	r2, #32
 80007a4:	001e      	movs	r6, r3
 80007a6:	1b12      	subs	r2, r2, r4
 80007a8:	4667      	mov	r7, ip
 80007aa:	0004      	movs	r4, r0
 80007ac:	4093      	lsls	r3, r2
 80007ae:	4094      	lsls	r4, r2
 80007b0:	40fe      	lsrs	r6, r7
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	4193      	sbcs	r3, r2
 80007b6:	40f8      	lsrs	r0, r7
 80007b8:	4334      	orrs	r4, r6
 80007ba:	431c      	orrs	r4, r3
 80007bc:	4480      	add	r8, r0
 80007be:	1864      	adds	r4, r4, r1
 80007c0:	428c      	cmp	r4, r1
 80007c2:	41bf      	sbcs	r7, r7
 80007c4:	427f      	negs	r7, r7
 80007c6:	464e      	mov	r6, r9
 80007c8:	4447      	add	r7, r8
 80007ca:	e7a6      	b.n	800071a <__aeabi_dadd+0x27e>
 80007cc:	4642      	mov	r2, r8
 80007ce:	430a      	orrs	r2, r1
 80007d0:	0011      	movs	r1, r2
 80007d2:	1e4a      	subs	r2, r1, #1
 80007d4:	4191      	sbcs	r1, r2
 80007d6:	e6ad      	b.n	8000534 <__aeabi_dadd+0x98>
 80007d8:	4c0c      	ldr	r4, [pc, #48]	; (800080c <__aeabi_dadd+0x370>)
 80007da:	1c72      	adds	r2, r6, #1
 80007dc:	4222      	tst	r2, r4
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x346>
 80007e0:	e0a1      	b.n	8000926 <__aeabi_dadd+0x48a>
 80007e2:	0002      	movs	r2, r0
 80007e4:	431a      	orrs	r2, r3
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d000      	beq.n	80007ec <__aeabi_dadd+0x350>
 80007ea:	e0fa      	b.n	80009e2 <__aeabi_dadd+0x546>
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x356>
 80007f0:	e145      	b.n	8000a7e <__aeabi_dadd+0x5e2>
 80007f2:	003a      	movs	r2, r7
 80007f4:	430a      	orrs	r2, r1
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x35e>
 80007f8:	e146      	b.n	8000a88 <__aeabi_dadd+0x5ec>
 80007fa:	0742      	lsls	r2, r0, #29
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	4313      	orrs	r3, r2
 8000800:	08c0      	lsrs	r0, r0, #3
 8000802:	e77b      	b.n	80006fc <__aeabi_dadd+0x260>
 8000804:	000007ff 	.word	0x000007ff
 8000808:	ff7fffff 	.word	0xff7fffff
 800080c:	000007fe 	.word	0x000007fe
 8000810:	4647      	mov	r7, r8
 8000812:	1a5c      	subs	r4, r3, r1
 8000814:	1bc2      	subs	r2, r0, r7
 8000816:	42a3      	cmp	r3, r4
 8000818:	41bf      	sbcs	r7, r7
 800081a:	427f      	negs	r7, r7
 800081c:	46b9      	mov	r9, r7
 800081e:	0017      	movs	r7, r2
 8000820:	464a      	mov	r2, r9
 8000822:	1abf      	subs	r7, r7, r2
 8000824:	023a      	lsls	r2, r7, #8
 8000826:	d500      	bpl.n	800082a <__aeabi_dadd+0x38e>
 8000828:	e08d      	b.n	8000946 <__aeabi_dadd+0x4aa>
 800082a:	0023      	movs	r3, r4
 800082c:	433b      	orrs	r3, r7
 800082e:	d000      	beq.n	8000832 <__aeabi_dadd+0x396>
 8000830:	e68a      	b.n	8000548 <__aeabi_dadd+0xac>
 8000832:	2000      	movs	r0, #0
 8000834:	2500      	movs	r5, #0
 8000836:	e761      	b.n	80006fc <__aeabi_dadd+0x260>
 8000838:	4cb4      	ldr	r4, [pc, #720]	; (8000b0c <__aeabi_dadd+0x670>)
 800083a:	45a1      	cmp	r9, r4
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x3a4>
 800083e:	e0ad      	b.n	800099c <__aeabi_dadd+0x500>
 8000840:	2480      	movs	r4, #128	; 0x80
 8000842:	0424      	lsls	r4, r4, #16
 8000844:	4320      	orrs	r0, r4
 8000846:	4664      	mov	r4, ip
 8000848:	2c38      	cmp	r4, #56	; 0x38
 800084a:	dc3d      	bgt.n	80008c8 <__aeabi_dadd+0x42c>
 800084c:	4662      	mov	r2, ip
 800084e:	2c1f      	cmp	r4, #31
 8000850:	dd00      	ble.n	8000854 <__aeabi_dadd+0x3b8>
 8000852:	e0b7      	b.n	80009c4 <__aeabi_dadd+0x528>
 8000854:	2520      	movs	r5, #32
 8000856:	001e      	movs	r6, r3
 8000858:	1b2d      	subs	r5, r5, r4
 800085a:	0004      	movs	r4, r0
 800085c:	40ab      	lsls	r3, r5
 800085e:	40ac      	lsls	r4, r5
 8000860:	40d6      	lsrs	r6, r2
 8000862:	40d0      	lsrs	r0, r2
 8000864:	4642      	mov	r2, r8
 8000866:	1e5d      	subs	r5, r3, #1
 8000868:	41ab      	sbcs	r3, r5
 800086a:	4334      	orrs	r4, r6
 800086c:	1a12      	subs	r2, r2, r0
 800086e:	4690      	mov	r8, r2
 8000870:	4323      	orrs	r3, r4
 8000872:	e02c      	b.n	80008ce <__aeabi_dadd+0x432>
 8000874:	0742      	lsls	r2, r0, #29
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	4313      	orrs	r3, r2
 800087a:	08c0      	lsrs	r0, r0, #3
 800087c:	e73b      	b.n	80006f6 <__aeabi_dadd+0x25a>
 800087e:	185c      	adds	r4, r3, r1
 8000880:	429c      	cmp	r4, r3
 8000882:	419b      	sbcs	r3, r3
 8000884:	4440      	add	r0, r8
 8000886:	425b      	negs	r3, r3
 8000888:	18c7      	adds	r7, r0, r3
 800088a:	2601      	movs	r6, #1
 800088c:	023b      	lsls	r3, r7, #8
 800088e:	d400      	bmi.n	8000892 <__aeabi_dadd+0x3f6>
 8000890:	e729      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000892:	2602      	movs	r6, #2
 8000894:	4a9e      	ldr	r2, [pc, #632]	; (8000b10 <__aeabi_dadd+0x674>)
 8000896:	0863      	lsrs	r3, r4, #1
 8000898:	4017      	ands	r7, r2
 800089a:	2201      	movs	r2, #1
 800089c:	4014      	ands	r4, r2
 800089e:	431c      	orrs	r4, r3
 80008a0:	07fb      	lsls	r3, r7, #31
 80008a2:	431c      	orrs	r4, r3
 80008a4:	087f      	lsrs	r7, r7, #1
 80008a6:	e673      	b.n	8000590 <__aeabi_dadd+0xf4>
 80008a8:	4644      	mov	r4, r8
 80008aa:	3a20      	subs	r2, #32
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	4662      	mov	r2, ip
 80008b0:	2a20      	cmp	r2, #32
 80008b2:	d005      	beq.n	80008c0 <__aeabi_dadd+0x424>
 80008b4:	4667      	mov	r7, ip
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	1bd2      	subs	r2, r2, r7
 80008ba:	4647      	mov	r7, r8
 80008bc:	4097      	lsls	r7, r2
 80008be:	4339      	orrs	r1, r7
 80008c0:	1e4a      	subs	r2, r1, #1
 80008c2:	4191      	sbcs	r1, r2
 80008c4:	4321      	orrs	r1, r4
 80008c6:	e635      	b.n	8000534 <__aeabi_dadd+0x98>
 80008c8:	4303      	orrs	r3, r0
 80008ca:	1e58      	subs	r0, r3, #1
 80008cc:	4183      	sbcs	r3, r0
 80008ce:	1acc      	subs	r4, r1, r3
 80008d0:	42a1      	cmp	r1, r4
 80008d2:	41bf      	sbcs	r7, r7
 80008d4:	4643      	mov	r3, r8
 80008d6:	427f      	negs	r7, r7
 80008d8:	4655      	mov	r5, sl
 80008da:	464e      	mov	r6, r9
 80008dc:	1bdf      	subs	r7, r3, r7
 80008de:	e62e      	b.n	800053e <__aeabi_dadd+0xa2>
 80008e0:	0002      	movs	r2, r0
 80008e2:	431a      	orrs	r2, r3
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x44c>
 80008e6:	e0bd      	b.n	8000a64 <__aeabi_dadd+0x5c8>
 80008e8:	4662      	mov	r2, ip
 80008ea:	4664      	mov	r4, ip
 80008ec:	3a01      	subs	r2, #1
 80008ee:	2c01      	cmp	r4, #1
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x458>
 80008f2:	e0e5      	b.n	8000ac0 <__aeabi_dadd+0x624>
 80008f4:	4c85      	ldr	r4, [pc, #532]	; (8000b0c <__aeabi_dadd+0x670>)
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d058      	beq.n	80009ac <__aeabi_dadd+0x510>
 80008fa:	4694      	mov	ip, r2
 80008fc:	e749      	b.n	8000792 <__aeabi_dadd+0x2f6>
 80008fe:	4664      	mov	r4, ip
 8000900:	2220      	movs	r2, #32
 8000902:	1b12      	subs	r2, r2, r4
 8000904:	4644      	mov	r4, r8
 8000906:	4094      	lsls	r4, r2
 8000908:	000f      	movs	r7, r1
 800090a:	46a1      	mov	r9, r4
 800090c:	4664      	mov	r4, ip
 800090e:	4091      	lsls	r1, r2
 8000910:	40e7      	lsrs	r7, r4
 8000912:	464c      	mov	r4, r9
 8000914:	1e4a      	subs	r2, r1, #1
 8000916:	4191      	sbcs	r1, r2
 8000918:	433c      	orrs	r4, r7
 800091a:	4642      	mov	r2, r8
 800091c:	430c      	orrs	r4, r1
 800091e:	4661      	mov	r1, ip
 8000920:	40ca      	lsrs	r2, r1
 8000922:	1880      	adds	r0, r0, r2
 8000924:	e6f4      	b.n	8000710 <__aeabi_dadd+0x274>
 8000926:	4c79      	ldr	r4, [pc, #484]	; (8000b0c <__aeabi_dadd+0x670>)
 8000928:	42a2      	cmp	r2, r4
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x492>
 800092c:	e6fd      	b.n	800072a <__aeabi_dadd+0x28e>
 800092e:	1859      	adds	r1, r3, r1
 8000930:	4299      	cmp	r1, r3
 8000932:	419b      	sbcs	r3, r3
 8000934:	4440      	add	r0, r8
 8000936:	425f      	negs	r7, r3
 8000938:	19c7      	adds	r7, r0, r7
 800093a:	07fc      	lsls	r4, r7, #31
 800093c:	0849      	lsrs	r1, r1, #1
 800093e:	0016      	movs	r6, r2
 8000940:	430c      	orrs	r4, r1
 8000942:	087f      	lsrs	r7, r7, #1
 8000944:	e6cf      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000946:	1acc      	subs	r4, r1, r3
 8000948:	42a1      	cmp	r1, r4
 800094a:	41bf      	sbcs	r7, r7
 800094c:	4643      	mov	r3, r8
 800094e:	427f      	negs	r7, r7
 8000950:	1a18      	subs	r0, r3, r0
 8000952:	4655      	mov	r5, sl
 8000954:	1bc7      	subs	r7, r0, r7
 8000956:	e5f7      	b.n	8000548 <__aeabi_dadd+0xac>
 8000958:	08c9      	lsrs	r1, r1, #3
 800095a:	077b      	lsls	r3, r7, #29
 800095c:	4655      	mov	r5, sl
 800095e:	430b      	orrs	r3, r1
 8000960:	08f8      	lsrs	r0, r7, #3
 8000962:	e6c8      	b.n	80006f6 <__aeabi_dadd+0x25a>
 8000964:	2c00      	cmp	r4, #0
 8000966:	d000      	beq.n	800096a <__aeabi_dadd+0x4ce>
 8000968:	e081      	b.n	8000a6e <__aeabi_dadd+0x5d2>
 800096a:	4643      	mov	r3, r8
 800096c:	430b      	orrs	r3, r1
 800096e:	d115      	bne.n	800099c <__aeabi_dadd+0x500>
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	2500      	movs	r5, #0
 8000974:	0300      	lsls	r0, r0, #12
 8000976:	e6e3      	b.n	8000740 <__aeabi_dadd+0x2a4>
 8000978:	1a5c      	subs	r4, r3, r1
 800097a:	42a3      	cmp	r3, r4
 800097c:	419b      	sbcs	r3, r3
 800097e:	1bc7      	subs	r7, r0, r7
 8000980:	425b      	negs	r3, r3
 8000982:	2601      	movs	r6, #1
 8000984:	1aff      	subs	r7, r7, r3
 8000986:	e5da      	b.n	800053e <__aeabi_dadd+0xa2>
 8000988:	0742      	lsls	r2, r0, #29
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	4313      	orrs	r3, r2
 800098e:	08c0      	lsrs	r0, r0, #3
 8000990:	e6d2      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000992:	0742      	lsls	r2, r0, #29
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	4313      	orrs	r3, r2
 8000998:	08c0      	lsrs	r0, r0, #3
 800099a:	e6ac      	b.n	80006f6 <__aeabi_dadd+0x25a>
 800099c:	4643      	mov	r3, r8
 800099e:	4642      	mov	r2, r8
 80009a0:	08c9      	lsrs	r1, r1, #3
 80009a2:	075b      	lsls	r3, r3, #29
 80009a4:	4655      	mov	r5, sl
 80009a6:	430b      	orrs	r3, r1
 80009a8:	08d0      	lsrs	r0, r2, #3
 80009aa:	e6c5      	b.n	8000738 <__aeabi_dadd+0x29c>
 80009ac:	4643      	mov	r3, r8
 80009ae:	4642      	mov	r2, r8
 80009b0:	075b      	lsls	r3, r3, #29
 80009b2:	08c9      	lsrs	r1, r1, #3
 80009b4:	430b      	orrs	r3, r1
 80009b6:	08d0      	lsrs	r0, r2, #3
 80009b8:	e6be      	b.n	8000738 <__aeabi_dadd+0x29c>
 80009ba:	4303      	orrs	r3, r0
 80009bc:	001c      	movs	r4, r3
 80009be:	1e63      	subs	r3, r4, #1
 80009c0:	419c      	sbcs	r4, r3
 80009c2:	e6fc      	b.n	80007be <__aeabi_dadd+0x322>
 80009c4:	0002      	movs	r2, r0
 80009c6:	3c20      	subs	r4, #32
 80009c8:	40e2      	lsrs	r2, r4
 80009ca:	0014      	movs	r4, r2
 80009cc:	4662      	mov	r2, ip
 80009ce:	2a20      	cmp	r2, #32
 80009d0:	d003      	beq.n	80009da <__aeabi_dadd+0x53e>
 80009d2:	2540      	movs	r5, #64	; 0x40
 80009d4:	1aad      	subs	r5, r5, r2
 80009d6:	40a8      	lsls	r0, r5
 80009d8:	4303      	orrs	r3, r0
 80009da:	1e58      	subs	r0, r3, #1
 80009dc:	4183      	sbcs	r3, r0
 80009de:	4323      	orrs	r3, r4
 80009e0:	e775      	b.n	80008ce <__aeabi_dadd+0x432>
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d0e2      	beq.n	80009ac <__aeabi_dadd+0x510>
 80009e6:	003a      	movs	r2, r7
 80009e8:	430a      	orrs	r2, r1
 80009ea:	d0cd      	beq.n	8000988 <__aeabi_dadd+0x4ec>
 80009ec:	0742      	lsls	r2, r0, #29
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	08c0      	lsrs	r0, r0, #3
 80009f6:	0312      	lsls	r2, r2, #12
 80009f8:	4210      	tst	r0, r2
 80009fa:	d006      	beq.n	8000a0a <__aeabi_dadd+0x56e>
 80009fc:	08fc      	lsrs	r4, r7, #3
 80009fe:	4214      	tst	r4, r2
 8000a00:	d103      	bne.n	8000a0a <__aeabi_dadd+0x56e>
 8000a02:	0020      	movs	r0, r4
 8000a04:	08cb      	lsrs	r3, r1, #3
 8000a06:	077a      	lsls	r2, r7, #29
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	0f5a      	lsrs	r2, r3, #29
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	0752      	lsls	r2, r2, #29
 8000a10:	08db      	lsrs	r3, r3, #3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	e690      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000a16:	4643      	mov	r3, r8
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x582>
 8000a1c:	e709      	b.n	8000832 <__aeabi_dadd+0x396>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	4642      	mov	r2, r8
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	075b      	lsls	r3, r3, #29
 8000a26:	4655      	mov	r5, sl
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	08d0      	lsrs	r0, r2, #3
 8000a2c:	e666      	b.n	80006fc <__aeabi_dadd+0x260>
 8000a2e:	1acc      	subs	r4, r1, r3
 8000a30:	42a1      	cmp	r1, r4
 8000a32:	4189      	sbcs	r1, r1
 8000a34:	1a3f      	subs	r7, r7, r0
 8000a36:	4249      	negs	r1, r1
 8000a38:	4655      	mov	r5, sl
 8000a3a:	2601      	movs	r6, #1
 8000a3c:	1a7f      	subs	r7, r7, r1
 8000a3e:	e57e      	b.n	800053e <__aeabi_dadd+0xa2>
 8000a40:	4642      	mov	r2, r8
 8000a42:	1a5c      	subs	r4, r3, r1
 8000a44:	1a87      	subs	r7, r0, r2
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	4192      	sbcs	r2, r2
 8000a4a:	4252      	negs	r2, r2
 8000a4c:	1abf      	subs	r7, r7, r2
 8000a4e:	023a      	lsls	r2, r7, #8
 8000a50:	d53d      	bpl.n	8000ace <__aeabi_dadd+0x632>
 8000a52:	1acc      	subs	r4, r1, r3
 8000a54:	42a1      	cmp	r1, r4
 8000a56:	4189      	sbcs	r1, r1
 8000a58:	4643      	mov	r3, r8
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	1a1f      	subs	r7, r3, r0
 8000a5e:	4655      	mov	r5, sl
 8000a60:	1a7f      	subs	r7, r7, r1
 8000a62:	e595      	b.n	8000590 <__aeabi_dadd+0xf4>
 8000a64:	077b      	lsls	r3, r7, #29
 8000a66:	08c9      	lsrs	r1, r1, #3
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	08f8      	lsrs	r0, r7, #3
 8000a6c:	e643      	b.n	80006f6 <__aeabi_dadd+0x25a>
 8000a6e:	4644      	mov	r4, r8
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	430c      	orrs	r4, r1
 8000a74:	d130      	bne.n	8000ad8 <__aeabi_dadd+0x63c>
 8000a76:	0742      	lsls	r2, r0, #29
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e65c      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000a7e:	077b      	lsls	r3, r7, #29
 8000a80:	08c9      	lsrs	r1, r1, #3
 8000a82:	430b      	orrs	r3, r1
 8000a84:	08f8      	lsrs	r0, r7, #3
 8000a86:	e639      	b.n	80006fc <__aeabi_dadd+0x260>
 8000a88:	185c      	adds	r4, r3, r1
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	419b      	sbcs	r3, r3
 8000a8e:	4440      	add	r0, r8
 8000a90:	425b      	negs	r3, r3
 8000a92:	18c7      	adds	r7, r0, r3
 8000a94:	023b      	lsls	r3, r7, #8
 8000a96:	d400      	bmi.n	8000a9a <__aeabi_dadd+0x5fe>
 8000a98:	e625      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <__aeabi_dadd+0x674>)
 8000a9c:	2601      	movs	r6, #1
 8000a9e:	401f      	ands	r7, r3
 8000aa0:	e621      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000aa2:	0004      	movs	r4, r0
 8000aa4:	3a20      	subs	r2, #32
 8000aa6:	40d4      	lsrs	r4, r2
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	2a20      	cmp	r2, #32
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_dadd+0x61c>
 8000aae:	2240      	movs	r2, #64	; 0x40
 8000ab0:	4666      	mov	r6, ip
 8000ab2:	1b92      	subs	r2, r2, r6
 8000ab4:	4090      	lsls	r0, r2
 8000ab6:	4303      	orrs	r3, r0
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	431c      	orrs	r4, r3
 8000abe:	e67e      	b.n	80007be <__aeabi_dadd+0x322>
 8000ac0:	185c      	adds	r4, r3, r1
 8000ac2:	428c      	cmp	r4, r1
 8000ac4:	4189      	sbcs	r1, r1
 8000ac6:	4440      	add	r0, r8
 8000ac8:	4249      	negs	r1, r1
 8000aca:	1847      	adds	r7, r0, r1
 8000acc:	e6dd      	b.n	800088a <__aeabi_dadd+0x3ee>
 8000ace:	0023      	movs	r3, r4
 8000ad0:	433b      	orrs	r3, r7
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x63a>
 8000ad4:	e6ad      	b.n	8000832 <__aeabi_dadd+0x396>
 8000ad6:	e606      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000ad8:	0744      	lsls	r4, r0, #29
 8000ada:	4323      	orrs	r3, r4
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	08c0      	lsrs	r0, r0, #3
 8000ae0:	0324      	lsls	r4, r4, #12
 8000ae2:	4220      	tst	r0, r4
 8000ae4:	d008      	beq.n	8000af8 <__aeabi_dadd+0x65c>
 8000ae6:	4642      	mov	r2, r8
 8000ae8:	08d6      	lsrs	r6, r2, #3
 8000aea:	4226      	tst	r6, r4
 8000aec:	d104      	bne.n	8000af8 <__aeabi_dadd+0x65c>
 8000aee:	4655      	mov	r5, sl
 8000af0:	0030      	movs	r0, r6
 8000af2:	08cb      	lsrs	r3, r1, #3
 8000af4:	0751      	lsls	r1, r2, #29
 8000af6:	430b      	orrs	r3, r1
 8000af8:	0f5a      	lsrs	r2, r3, #29
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	0752      	lsls	r2, r2, #29
 8000b00:	4313      	orrs	r3, r2
 8000b02:	e619      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000b04:	2300      	movs	r3, #0
 8000b06:	4a01      	ldr	r2, [pc, #4]	; (8000b0c <__aeabi_dadd+0x670>)
 8000b08:	001f      	movs	r7, r3
 8000b0a:	e55e      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000b0c:	000007ff 	.word	0x000007ff
 8000b10:	ff7fffff 	.word	0xff7fffff

08000b14 <__aeabi_ddiv>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	4657      	mov	r7, sl
 8000b18:	464e      	mov	r6, r9
 8000b1a:	4645      	mov	r5, r8
 8000b1c:	46de      	mov	lr, fp
 8000b1e:	b5e0      	push	{r5, r6, r7, lr}
 8000b20:	4681      	mov	r9, r0
 8000b22:	0005      	movs	r5, r0
 8000b24:	030c      	lsls	r4, r1, #12
 8000b26:	0048      	lsls	r0, r1, #1
 8000b28:	4692      	mov	sl, r2
 8000b2a:	001f      	movs	r7, r3
 8000b2c:	b085      	sub	sp, #20
 8000b2e:	0b24      	lsrs	r4, r4, #12
 8000b30:	0d40      	lsrs	r0, r0, #21
 8000b32:	0fce      	lsrs	r6, r1, #31
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_ddiv+0x26>
 8000b38:	e156      	b.n	8000de8 <__aeabi_ddiv+0x2d4>
 8000b3a:	4bd4      	ldr	r3, [pc, #848]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000b3c:	4298      	cmp	r0, r3
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_ddiv+0x2e>
 8000b40:	e172      	b.n	8000e28 <__aeabi_ddiv+0x314>
 8000b42:	0f6b      	lsrs	r3, r5, #29
 8000b44:	00e4      	lsls	r4, r4, #3
 8000b46:	431c      	orrs	r4, r3
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	041b      	lsls	r3, r3, #16
 8000b4c:	4323      	orrs	r3, r4
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4bcf      	ldr	r3, [pc, #828]	; (8000e90 <__aeabi_ddiv+0x37c>)
 8000b52:	00ed      	lsls	r5, r5, #3
 8000b54:	469b      	mov	fp, r3
 8000b56:	2300      	movs	r3, #0
 8000b58:	4699      	mov	r9, r3
 8000b5a:	4483      	add	fp, r0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	033c      	lsls	r4, r7, #12
 8000b60:	007b      	lsls	r3, r7, #1
 8000b62:	4650      	mov	r0, sl
 8000b64:	0b24      	lsrs	r4, r4, #12
 8000b66:	0d5b      	lsrs	r3, r3, #21
 8000b68:	0fff      	lsrs	r7, r7, #31
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_ddiv+0x5c>
 8000b6e:	e11f      	b.n	8000db0 <__aeabi_ddiv+0x29c>
 8000b70:	4ac6      	ldr	r2, [pc, #792]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d100      	bne.n	8000b78 <__aeabi_ddiv+0x64>
 8000b76:	e162      	b.n	8000e3e <__aeabi_ddiv+0x32a>
 8000b78:	49c5      	ldr	r1, [pc, #788]	; (8000e90 <__aeabi_ddiv+0x37c>)
 8000b7a:	0f42      	lsrs	r2, r0, #29
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	00e4      	lsls	r4, r4, #3
 8000b80:	4659      	mov	r1, fp
 8000b82:	4314      	orrs	r4, r2
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	4463      	add	r3, ip
 8000b88:	0412      	lsls	r2, r2, #16
 8000b8a:	1acb      	subs	r3, r1, r3
 8000b8c:	4314      	orrs	r4, r2
 8000b8e:	469b      	mov	fp, r3
 8000b90:	00c2      	lsls	r2, r0, #3
 8000b92:	2000      	movs	r0, #0
 8000b94:	0033      	movs	r3, r6
 8000b96:	407b      	eors	r3, r7
 8000b98:	469a      	mov	sl, r3
 8000b9a:	464b      	mov	r3, r9
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d827      	bhi.n	8000bf0 <__aeabi_ddiv+0xdc>
 8000ba0:	49bc      	ldr	r1, [pc, #752]	; (8000e94 <__aeabi_ddiv+0x380>)
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	58cb      	ldr	r3, [r1, r3]
 8000ba6:	469f      	mov	pc, r3
 8000ba8:	46b2      	mov	sl, r6
 8000baa:	9b00      	ldr	r3, [sp, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d016      	beq.n	8000bde <__aeabi_ddiv+0xca>
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_ddiv+0xa2>
 8000bb4:	e28e      	b.n	80010d4 <__aeabi_ddiv+0x5c0>
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_ddiv+0xa8>
 8000bba:	e0d9      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2400      	movs	r4, #0
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	051b      	lsls	r3, r3, #20
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	07d2      	lsls	r2, r2, #31
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	0028      	movs	r0, r5
 8000bce:	0019      	movs	r1, r3
 8000bd0:	b005      	add	sp, #20
 8000bd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd4:	46bb      	mov	fp, r7
 8000bd6:	46b2      	mov	sl, r6
 8000bd8:	46a9      	mov	r9, r5
 8000bda:	46a0      	mov	r8, r4
 8000bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bde:	2400      	movs	r4, #0
 8000be0:	2500      	movs	r5, #0
 8000be2:	4baa      	ldr	r3, [pc, #680]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000be4:	e7ed      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000be6:	46ba      	mov	sl, r7
 8000be8:	46a0      	mov	r8, r4
 8000bea:	0015      	movs	r5, r2
 8000bec:	9000      	str	r0, [sp, #0]
 8000bee:	e7dc      	b.n	8000baa <__aeabi_ddiv+0x96>
 8000bf0:	4544      	cmp	r4, r8
 8000bf2:	d200      	bcs.n	8000bf6 <__aeabi_ddiv+0xe2>
 8000bf4:	e1c7      	b.n	8000f86 <__aeabi_ddiv+0x472>
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_ddiv+0xe6>
 8000bf8:	e1c2      	b.n	8000f80 <__aeabi_ddiv+0x46c>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	469c      	mov	ip, r3
 8000c00:	002e      	movs	r6, r5
 8000c02:	4640      	mov	r0, r8
 8000c04:	2500      	movs	r5, #0
 8000c06:	44e3      	add	fp, ip
 8000c08:	0223      	lsls	r3, r4, #8
 8000c0a:	0e14      	lsrs	r4, r2, #24
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	0c1b      	lsrs	r3, r3, #16
 8000c10:	4699      	mov	r9, r3
 8000c12:	0423      	lsls	r3, r4, #16
 8000c14:	0c1f      	lsrs	r7, r3, #16
 8000c16:	0212      	lsls	r2, r2, #8
 8000c18:	4649      	mov	r1, r9
 8000c1a:	9200      	str	r2, [sp, #0]
 8000c1c:	9701      	str	r7, [sp, #4]
 8000c1e:	f7ff fb0f 	bl	8000240 <__aeabi_uidivmod>
 8000c22:	0002      	movs	r2, r0
 8000c24:	437a      	muls	r2, r7
 8000c26:	040b      	lsls	r3, r1, #16
 8000c28:	0c31      	lsrs	r1, r6, #16
 8000c2a:	4680      	mov	r8, r0
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	428a      	cmp	r2, r1
 8000c30:	d907      	bls.n	8000c42 <__aeabi_ddiv+0x12e>
 8000c32:	2301      	movs	r3, #1
 8000c34:	425b      	negs	r3, r3
 8000c36:	469c      	mov	ip, r3
 8000c38:	1909      	adds	r1, r1, r4
 8000c3a:	44e0      	add	r8, ip
 8000c3c:	428c      	cmp	r4, r1
 8000c3e:	d800      	bhi.n	8000c42 <__aeabi_ddiv+0x12e>
 8000c40:	e207      	b.n	8001052 <__aeabi_ddiv+0x53e>
 8000c42:	1a88      	subs	r0, r1, r2
 8000c44:	4649      	mov	r1, r9
 8000c46:	f7ff fafb 	bl	8000240 <__aeabi_uidivmod>
 8000c4a:	0409      	lsls	r1, r1, #16
 8000c4c:	468c      	mov	ip, r1
 8000c4e:	0431      	lsls	r1, r6, #16
 8000c50:	4666      	mov	r6, ip
 8000c52:	9a01      	ldr	r2, [sp, #4]
 8000c54:	0c09      	lsrs	r1, r1, #16
 8000c56:	4342      	muls	r2, r0
 8000c58:	0003      	movs	r3, r0
 8000c5a:	4331      	orrs	r1, r6
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	d904      	bls.n	8000c6a <__aeabi_ddiv+0x156>
 8000c60:	1909      	adds	r1, r1, r4
 8000c62:	3b01      	subs	r3, #1
 8000c64:	428c      	cmp	r4, r1
 8000c66:	d800      	bhi.n	8000c6a <__aeabi_ddiv+0x156>
 8000c68:	e1ed      	b.n	8001046 <__aeabi_ddiv+0x532>
 8000c6a:	1a88      	subs	r0, r1, r2
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	0412      	lsls	r2, r2, #16
 8000c70:	431a      	orrs	r2, r3
 8000c72:	4690      	mov	r8, r2
 8000c74:	4641      	mov	r1, r8
 8000c76:	9b00      	ldr	r3, [sp, #0]
 8000c78:	040e      	lsls	r6, r1, #16
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	001f      	movs	r7, r3
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	041b      	lsls	r3, r3, #16
 8000c86:	0c19      	lsrs	r1, r3, #16
 8000c88:	000b      	movs	r3, r1
 8000c8a:	4373      	muls	r3, r6
 8000c8c:	0c12      	lsrs	r2, r2, #16
 8000c8e:	437e      	muls	r6, r7
 8000c90:	9103      	str	r1, [sp, #12]
 8000c92:	4351      	muls	r1, r2
 8000c94:	437a      	muls	r2, r7
 8000c96:	0c1f      	lsrs	r7, r3, #16
 8000c98:	46bc      	mov	ip, r7
 8000c9a:	1876      	adds	r6, r6, r1
 8000c9c:	4466      	add	r6, ip
 8000c9e:	42b1      	cmp	r1, r6
 8000ca0:	d903      	bls.n	8000caa <__aeabi_ddiv+0x196>
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	0249      	lsls	r1, r1, #9
 8000ca6:	468c      	mov	ip, r1
 8000ca8:	4462      	add	r2, ip
 8000caa:	0c31      	lsrs	r1, r6, #16
 8000cac:	188a      	adds	r2, r1, r2
 8000cae:	0431      	lsls	r1, r6, #16
 8000cb0:	041e      	lsls	r6, r3, #16
 8000cb2:	0c36      	lsrs	r6, r6, #16
 8000cb4:	198e      	adds	r6, r1, r6
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d302      	bcc.n	8000cc0 <__aeabi_ddiv+0x1ac>
 8000cba:	d112      	bne.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8000cbc:	42b5      	cmp	r5, r6
 8000cbe:	d210      	bcs.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8000cc0:	4643      	mov	r3, r8
 8000cc2:	1e59      	subs	r1, r3, #1
 8000cc4:	9b00      	ldr	r3, [sp, #0]
 8000cc6:	469c      	mov	ip, r3
 8000cc8:	4465      	add	r5, ip
 8000cca:	001f      	movs	r7, r3
 8000ccc:	429d      	cmp	r5, r3
 8000cce:	419b      	sbcs	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	191b      	adds	r3, r3, r4
 8000cd4:	18c0      	adds	r0, r0, r3
 8000cd6:	4284      	cmp	r4, r0
 8000cd8:	d200      	bcs.n	8000cdc <__aeabi_ddiv+0x1c8>
 8000cda:	e1a0      	b.n	800101e <__aeabi_ddiv+0x50a>
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_ddiv+0x1cc>
 8000cde:	e19b      	b.n	8001018 <__aeabi_ddiv+0x504>
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	1bae      	subs	r6, r5, r6
 8000ce4:	42b5      	cmp	r5, r6
 8000ce6:	41ad      	sbcs	r5, r5
 8000ce8:	1a80      	subs	r0, r0, r2
 8000cea:	426d      	negs	r5, r5
 8000cec:	1b40      	subs	r0, r0, r5
 8000cee:	4284      	cmp	r4, r0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_ddiv+0x1e0>
 8000cf2:	e1d5      	b.n	80010a0 <__aeabi_ddiv+0x58c>
 8000cf4:	4649      	mov	r1, r9
 8000cf6:	f7ff faa3 	bl	8000240 <__aeabi_uidivmod>
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	040b      	lsls	r3, r1, #16
 8000cfe:	4342      	muls	r2, r0
 8000d00:	0c31      	lsrs	r1, r6, #16
 8000d02:	0005      	movs	r5, r0
 8000d04:	4319      	orrs	r1, r3
 8000d06:	428a      	cmp	r2, r1
 8000d08:	d900      	bls.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000d0a:	e16c      	b.n	8000fe6 <__aeabi_ddiv+0x4d2>
 8000d0c:	1a88      	subs	r0, r1, r2
 8000d0e:	4649      	mov	r1, r9
 8000d10:	f7ff fa96 	bl	8000240 <__aeabi_uidivmod>
 8000d14:	9a01      	ldr	r2, [sp, #4]
 8000d16:	0436      	lsls	r6, r6, #16
 8000d18:	4342      	muls	r2, r0
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	0c36      	lsrs	r6, r6, #16
 8000d1e:	0003      	movs	r3, r0
 8000d20:	430e      	orrs	r6, r1
 8000d22:	42b2      	cmp	r2, r6
 8000d24:	d900      	bls.n	8000d28 <__aeabi_ddiv+0x214>
 8000d26:	e153      	b.n	8000fd0 <__aeabi_ddiv+0x4bc>
 8000d28:	9803      	ldr	r0, [sp, #12]
 8000d2a:	1ab6      	subs	r6, r6, r2
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	042d      	lsls	r5, r5, #16
 8000d30:	431d      	orrs	r5, r3
 8000d32:	9f02      	ldr	r7, [sp, #8]
 8000d34:	042b      	lsls	r3, r5, #16
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	435a      	muls	r2, r3
 8000d3a:	437b      	muls	r3, r7
 8000d3c:	469c      	mov	ip, r3
 8000d3e:	0c29      	lsrs	r1, r5, #16
 8000d40:	4348      	muls	r0, r1
 8000d42:	0c13      	lsrs	r3, r2, #16
 8000d44:	4484      	add	ip, r0
 8000d46:	4463      	add	r3, ip
 8000d48:	4379      	muls	r1, r7
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d903      	bls.n	8000d56 <__aeabi_ddiv+0x242>
 8000d4e:	2080      	movs	r0, #128	; 0x80
 8000d50:	0240      	lsls	r0, r0, #9
 8000d52:	4684      	mov	ip, r0
 8000d54:	4461      	add	r1, ip
 8000d56:	0c18      	lsrs	r0, r3, #16
 8000d58:	0412      	lsls	r2, r2, #16
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	0c12      	lsrs	r2, r2, #16
 8000d5e:	1841      	adds	r1, r0, r1
 8000d60:	189b      	adds	r3, r3, r2
 8000d62:	428e      	cmp	r6, r1
 8000d64:	d200      	bcs.n	8000d68 <__aeabi_ddiv+0x254>
 8000d66:	e0ff      	b.n	8000f68 <__aeabi_ddiv+0x454>
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x258>
 8000d6a:	e0fa      	b.n	8000f62 <__aeabi_ddiv+0x44e>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	431d      	orrs	r5, r3
 8000d70:	4a49      	ldr	r2, [pc, #292]	; (8000e98 <__aeabi_ddiv+0x384>)
 8000d72:	445a      	add	r2, fp
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	dc00      	bgt.n	8000d7a <__aeabi_ddiv+0x266>
 8000d78:	e0aa      	b.n	8000ed0 <__aeabi_ddiv+0x3bc>
 8000d7a:	076b      	lsls	r3, r5, #29
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_ddiv+0x26c>
 8000d7e:	e13d      	b.n	8000ffc <__aeabi_ddiv+0x4e8>
 8000d80:	08ed      	lsrs	r5, r5, #3
 8000d82:	4643      	mov	r3, r8
 8000d84:	01db      	lsls	r3, r3, #7
 8000d86:	d506      	bpl.n	8000d96 <__aeabi_ddiv+0x282>
 8000d88:	4642      	mov	r2, r8
 8000d8a:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <__aeabi_ddiv+0x388>)
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	4690      	mov	r8, r2
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	00d2      	lsls	r2, r2, #3
 8000d94:	445a      	add	r2, fp
 8000d96:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <__aeabi_ddiv+0x38c>)
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_ddiv+0x28a>
 8000d9c:	e71f      	b.n	8000bde <__aeabi_ddiv+0xca>
 8000d9e:	4643      	mov	r3, r8
 8000da0:	075b      	lsls	r3, r3, #29
 8000da2:	431d      	orrs	r5, r3
 8000da4:	4643      	mov	r3, r8
 8000da6:	0552      	lsls	r2, r2, #21
 8000da8:	025c      	lsls	r4, r3, #9
 8000daa:	0b24      	lsrs	r4, r4, #12
 8000dac:	0d53      	lsrs	r3, r2, #21
 8000dae:	e708      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000db0:	4652      	mov	r2, sl
 8000db2:	4322      	orrs	r2, r4
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x2a4>
 8000db6:	e07b      	b.n	8000eb0 <__aeabi_ddiv+0x39c>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_ddiv+0x2aa>
 8000dbc:	e0fa      	b.n	8000fb4 <__aeabi_ddiv+0x4a0>
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f001 f952 	bl	8002068 <__clzsi2>
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	3a0b      	subs	r2, #11
 8000dc8:	231d      	movs	r3, #29
 8000dca:	0001      	movs	r1, r0
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	4652      	mov	r2, sl
 8000dd0:	3908      	subs	r1, #8
 8000dd2:	40da      	lsrs	r2, r3
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	4314      	orrs	r4, r2
 8000dd8:	4652      	mov	r2, sl
 8000dda:	408a      	lsls	r2, r1
 8000ddc:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <__aeabi_ddiv+0x390>)
 8000dde:	4458      	add	r0, fp
 8000de0:	469b      	mov	fp, r3
 8000de2:	4483      	add	fp, r0
 8000de4:	2000      	movs	r0, #0
 8000de6:	e6d5      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000de8:	464b      	mov	r3, r9
 8000dea:	4323      	orrs	r3, r4
 8000dec:	4698      	mov	r8, r3
 8000dee:	d044      	beq.n	8000e7a <__aeabi_ddiv+0x366>
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0x2e2>
 8000df4:	e0ce      	b.n	8000f94 <__aeabi_ddiv+0x480>
 8000df6:	0020      	movs	r0, r4
 8000df8:	f001 f936 	bl	8002068 <__clzsi2>
 8000dfc:	0001      	movs	r1, r0
 8000dfe:	0002      	movs	r2, r0
 8000e00:	390b      	subs	r1, #11
 8000e02:	231d      	movs	r3, #29
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	4649      	mov	r1, r9
 8000e08:	0010      	movs	r0, r2
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	3808      	subs	r0, #8
 8000e0e:	4084      	lsls	r4, r0
 8000e10:	000b      	movs	r3, r1
 8000e12:	464d      	mov	r5, r9
 8000e14:	4323      	orrs	r3, r4
 8000e16:	4698      	mov	r8, r3
 8000e18:	4085      	lsls	r5, r0
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <__aeabi_ddiv+0x394>)
 8000e1c:	1a83      	subs	r3, r0, r2
 8000e1e:	469b      	mov	fp, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	4699      	mov	r9, r3
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	e69a      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e28:	464b      	mov	r3, r9
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	d11d      	bne.n	8000e6c <__aeabi_ddiv+0x358>
 8000e30:	2308      	movs	r3, #8
 8000e32:	4699      	mov	r9, r3
 8000e34:	3b06      	subs	r3, #6
 8000e36:	2500      	movs	r5, #0
 8000e38:	4683      	mov	fp, r0
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	e68f      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e3e:	4652      	mov	r2, sl
 8000e40:	4322      	orrs	r2, r4
 8000e42:	d109      	bne.n	8000e58 <__aeabi_ddiv+0x344>
 8000e44:	2302      	movs	r3, #2
 8000e46:	4649      	mov	r1, r9
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <__aeabi_ddiv+0x398>)
 8000e4c:	4689      	mov	r9, r1
 8000e4e:	469c      	mov	ip, r3
 8000e50:	2400      	movs	r4, #0
 8000e52:	2002      	movs	r0, #2
 8000e54:	44e3      	add	fp, ip
 8000e56:	e69d      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	464a      	mov	r2, r9
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <__aeabi_ddiv+0x398>)
 8000e60:	4691      	mov	r9, r2
 8000e62:	469c      	mov	ip, r3
 8000e64:	4652      	mov	r2, sl
 8000e66:	2003      	movs	r0, #3
 8000e68:	44e3      	add	fp, ip
 8000e6a:	e693      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	4699      	mov	r9, r3
 8000e70:	3b09      	subs	r3, #9
 8000e72:	46a0      	mov	r8, r4
 8000e74:	4683      	mov	fp, r0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	e671      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	2300      	movs	r3, #0
 8000e80:	469b      	mov	fp, r3
 8000e82:	3301      	adds	r3, #1
 8000e84:	2500      	movs	r5, #0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e669      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	000007ff 	.word	0x000007ff
 8000e90:	fffffc01 	.word	0xfffffc01
 8000e94:	080086f0 	.word	0x080086f0
 8000e98:	000003ff 	.word	0x000003ff
 8000e9c:	feffffff 	.word	0xfeffffff
 8000ea0:	000007fe 	.word	0x000007fe
 8000ea4:	000003f3 	.word	0x000003f3
 8000ea8:	fffffc0d 	.word	0xfffffc0d
 8000eac:	fffff801 	.word	0xfffff801
 8000eb0:	4649      	mov	r1, r9
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	4319      	orrs	r1, r3
 8000eb6:	4689      	mov	r9, r1
 8000eb8:	2400      	movs	r4, #0
 8000eba:	2001      	movs	r0, #1
 8000ebc:	e66a      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2480      	movs	r4, #128	; 0x80
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	4b8a      	ldr	r3, [pc, #552]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000ec8:	0324      	lsls	r4, r4, #12
 8000eca:	e67a      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000ecc:	2501      	movs	r5, #1
 8000ece:	426d      	negs	r5, r5
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	2b38      	cmp	r3, #56	; 0x38
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_ddiv+0x3c6>
 8000ed8:	e670      	b.n	8000bbc <__aeabi_ddiv+0xa8>
 8000eda:	2b1f      	cmp	r3, #31
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_ddiv+0x3cc>
 8000ede:	e0bf      	b.n	8001060 <__aeabi_ddiv+0x54c>
 8000ee0:	211f      	movs	r1, #31
 8000ee2:	4249      	negs	r1, r1
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	4641      	mov	r1, r8
 8000ee8:	40d1      	lsrs	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	2b20      	cmp	r3, #32
 8000eee:	d004      	beq.n	8000efa <__aeabi_ddiv+0x3e6>
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <__aeabi_ddiv+0x5e0>)
 8000ef4:	445b      	add	r3, fp
 8000ef6:	4099      	lsls	r1, r3
 8000ef8:	430d      	orrs	r5, r1
 8000efa:	1e6b      	subs	r3, r5, #1
 8000efc:	419d      	sbcs	r5, r3
 8000efe:	2307      	movs	r3, #7
 8000f00:	432a      	orrs	r2, r5
 8000f02:	001d      	movs	r5, r3
 8000f04:	2400      	movs	r4, #0
 8000f06:	4015      	ands	r5, r2
 8000f08:	4213      	tst	r3, r2
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_ddiv+0x3fa>
 8000f0c:	e0d4      	b.n	80010b8 <__aeabi_ddiv+0x5a4>
 8000f0e:	210f      	movs	r1, #15
 8000f10:	2300      	movs	r3, #0
 8000f12:	4011      	ands	r1, r2
 8000f14:	2904      	cmp	r1, #4
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x406>
 8000f18:	e0cb      	b.n	80010b2 <__aeabi_ddiv+0x59e>
 8000f1a:	1d11      	adds	r1, r2, #4
 8000f1c:	4291      	cmp	r1, r2
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	4252      	negs	r2, r2
 8000f22:	189b      	adds	r3, r3, r2
 8000f24:	000a      	movs	r2, r1
 8000f26:	0219      	lsls	r1, r3, #8
 8000f28:	d400      	bmi.n	8000f2c <__aeabi_ddiv+0x418>
 8000f2a:	e0c2      	b.n	80010b2 <__aeabi_ddiv+0x59e>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	2400      	movs	r4, #0
 8000f30:	2500      	movs	r5, #0
 8000f32:	e646      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	4641      	mov	r1, r8
 8000f38:	031b      	lsls	r3, r3, #12
 8000f3a:	4219      	tst	r1, r3
 8000f3c:	d008      	beq.n	8000f50 <__aeabi_ddiv+0x43c>
 8000f3e:	421c      	tst	r4, r3
 8000f40:	d106      	bne.n	8000f50 <__aeabi_ddiv+0x43c>
 8000f42:	431c      	orrs	r4, r3
 8000f44:	0324      	lsls	r4, r4, #12
 8000f46:	46ba      	mov	sl, r7
 8000f48:	0015      	movs	r5, r2
 8000f4a:	4b69      	ldr	r3, [pc, #420]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000f4c:	0b24      	lsrs	r4, r4, #12
 8000f4e:	e638      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f50:	2480      	movs	r4, #128	; 0x80
 8000f52:	4643      	mov	r3, r8
 8000f54:	0324      	lsls	r4, r4, #12
 8000f56:	431c      	orrs	r4, r3
 8000f58:	0324      	lsls	r4, r4, #12
 8000f5a:	46b2      	mov	sl, r6
 8000f5c:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000f5e:	0b24      	lsrs	r4, r4, #12
 8000f60:	e62f      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x454>
 8000f66:	e703      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 8000f68:	19a6      	adds	r6, r4, r6
 8000f6a:	1e68      	subs	r0, r5, #1
 8000f6c:	42a6      	cmp	r6, r4
 8000f6e:	d200      	bcs.n	8000f72 <__aeabi_ddiv+0x45e>
 8000f70:	e08d      	b.n	800108e <__aeabi_ddiv+0x57a>
 8000f72:	428e      	cmp	r6, r1
 8000f74:	d200      	bcs.n	8000f78 <__aeabi_ddiv+0x464>
 8000f76:	e0a3      	b.n	80010c0 <__aeabi_ddiv+0x5ac>
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x468>
 8000f7a:	e0b3      	b.n	80010e4 <__aeabi_ddiv+0x5d0>
 8000f7c:	0005      	movs	r5, r0
 8000f7e:	e6f5      	b.n	8000d6c <__aeabi_ddiv+0x258>
 8000f80:	42aa      	cmp	r2, r5
 8000f82:	d900      	bls.n	8000f86 <__aeabi_ddiv+0x472>
 8000f84:	e639      	b.n	8000bfa <__aeabi_ddiv+0xe6>
 8000f86:	4643      	mov	r3, r8
 8000f88:	07de      	lsls	r6, r3, #31
 8000f8a:	0858      	lsrs	r0, r3, #1
 8000f8c:	086b      	lsrs	r3, r5, #1
 8000f8e:	431e      	orrs	r6, r3
 8000f90:	07ed      	lsls	r5, r5, #31
 8000f92:	e639      	b.n	8000c08 <__aeabi_ddiv+0xf4>
 8000f94:	4648      	mov	r0, r9
 8000f96:	f001 f867 	bl	8002068 <__clzsi2>
 8000f9a:	0001      	movs	r1, r0
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	3115      	adds	r1, #21
 8000fa0:	3220      	adds	r2, #32
 8000fa2:	291c      	cmp	r1, #28
 8000fa4:	dc00      	bgt.n	8000fa8 <__aeabi_ddiv+0x494>
 8000fa6:	e72c      	b.n	8000e02 <__aeabi_ddiv+0x2ee>
 8000fa8:	464b      	mov	r3, r9
 8000faa:	3808      	subs	r0, #8
 8000fac:	4083      	lsls	r3, r0
 8000fae:	2500      	movs	r5, #0
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	e732      	b.n	8000e1a <__aeabi_ddiv+0x306>
 8000fb4:	f001 f858 	bl	8002068 <__clzsi2>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	001a      	movs	r2, r3
 8000fbc:	3215      	adds	r2, #21
 8000fbe:	3020      	adds	r0, #32
 8000fc0:	2a1c      	cmp	r2, #28
 8000fc2:	dc00      	bgt.n	8000fc6 <__aeabi_ddiv+0x4b2>
 8000fc4:	e700      	b.n	8000dc8 <__aeabi_ddiv+0x2b4>
 8000fc6:	4654      	mov	r4, sl
 8000fc8:	3b08      	subs	r3, #8
 8000fca:	2200      	movs	r2, #0
 8000fcc:	409c      	lsls	r4, r3
 8000fce:	e705      	b.n	8000ddc <__aeabi_ddiv+0x2c8>
 8000fd0:	1936      	adds	r6, r6, r4
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	42b4      	cmp	r4, r6
 8000fd6:	d900      	bls.n	8000fda <__aeabi_ddiv+0x4c6>
 8000fd8:	e6a6      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fda:	42b2      	cmp	r2, r6
 8000fdc:	d800      	bhi.n	8000fe0 <__aeabi_ddiv+0x4cc>
 8000fde:	e6a3      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fe0:	1e83      	subs	r3, r0, #2
 8000fe2:	1936      	adds	r6, r6, r4
 8000fe4:	e6a0      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fe6:	1909      	adds	r1, r1, r4
 8000fe8:	3d01      	subs	r5, #1
 8000fea:	428c      	cmp	r4, r1
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x4dc>
 8000fee:	e68d      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ff0:	428a      	cmp	r2, r1
 8000ff2:	d800      	bhi.n	8000ff6 <__aeabi_ddiv+0x4e2>
 8000ff4:	e68a      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ff6:	1e85      	subs	r5, r0, #2
 8000ff8:	1909      	adds	r1, r1, r4
 8000ffa:	e687      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	402b      	ands	r3, r5
 8001000:	2b04      	cmp	r3, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x4f2>
 8001004:	e6bc      	b.n	8000d80 <__aeabi_ddiv+0x26c>
 8001006:	2305      	movs	r3, #5
 8001008:	425b      	negs	r3, r3
 800100a:	42ab      	cmp	r3, r5
 800100c:	419b      	sbcs	r3, r3
 800100e:	3504      	adds	r5, #4
 8001010:	425b      	negs	r3, r3
 8001012:	08ed      	lsrs	r5, r5, #3
 8001014:	4498      	add	r8, r3
 8001016:	e6b4      	b.n	8000d82 <__aeabi_ddiv+0x26e>
 8001018:	42af      	cmp	r7, r5
 800101a:	d900      	bls.n	800101e <__aeabi_ddiv+0x50a>
 800101c:	e660      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 800101e:	4282      	cmp	r2, r0
 8001020:	d804      	bhi.n	800102c <__aeabi_ddiv+0x518>
 8001022:	d000      	beq.n	8001026 <__aeabi_ddiv+0x512>
 8001024:	e65c      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 8001026:	42ae      	cmp	r6, r5
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x518>
 800102a:	e659      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 800102c:	2302      	movs	r3, #2
 800102e:	425b      	negs	r3, r3
 8001030:	469c      	mov	ip, r3
 8001032:	9b00      	ldr	r3, [sp, #0]
 8001034:	44e0      	add	r8, ip
 8001036:	469c      	mov	ip, r3
 8001038:	4465      	add	r5, ip
 800103a:	429d      	cmp	r5, r3
 800103c:	419b      	sbcs	r3, r3
 800103e:	425b      	negs	r3, r3
 8001040:	191b      	adds	r3, r3, r4
 8001042:	18c0      	adds	r0, r0, r3
 8001044:	e64d      	b.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8001046:	428a      	cmp	r2, r1
 8001048:	d800      	bhi.n	800104c <__aeabi_ddiv+0x538>
 800104a:	e60e      	b.n	8000c6a <__aeabi_ddiv+0x156>
 800104c:	1e83      	subs	r3, r0, #2
 800104e:	1909      	adds	r1, r1, r4
 8001050:	e60b      	b.n	8000c6a <__aeabi_ddiv+0x156>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x544>
 8001056:	e5f4      	b.n	8000c42 <__aeabi_ddiv+0x12e>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	4698      	mov	r8, r3
 800105c:	1909      	adds	r1, r1, r4
 800105e:	e5f0      	b.n	8000c42 <__aeabi_ddiv+0x12e>
 8001060:	4925      	ldr	r1, [pc, #148]	; (80010f8 <__aeabi_ddiv+0x5e4>)
 8001062:	0028      	movs	r0, r5
 8001064:	4459      	add	r1, fp
 8001066:	408d      	lsls	r5, r1
 8001068:	4642      	mov	r2, r8
 800106a:	408a      	lsls	r2, r1
 800106c:	1e69      	subs	r1, r5, #1
 800106e:	418d      	sbcs	r5, r1
 8001070:	4641      	mov	r1, r8
 8001072:	40d8      	lsrs	r0, r3
 8001074:	40d9      	lsrs	r1, r3
 8001076:	4302      	orrs	r2, r0
 8001078:	432a      	orrs	r2, r5
 800107a:	000b      	movs	r3, r1
 800107c:	0751      	lsls	r1, r2, #29
 800107e:	d100      	bne.n	8001082 <__aeabi_ddiv+0x56e>
 8001080:	e751      	b.n	8000f26 <__aeabi_ddiv+0x412>
 8001082:	210f      	movs	r1, #15
 8001084:	4011      	ands	r1, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d000      	beq.n	800108c <__aeabi_ddiv+0x578>
 800108a:	e746      	b.n	8000f1a <__aeabi_ddiv+0x406>
 800108c:	e74b      	b.n	8000f26 <__aeabi_ddiv+0x412>
 800108e:	0005      	movs	r5, r0
 8001090:	428e      	cmp	r6, r1
 8001092:	d000      	beq.n	8001096 <__aeabi_ddiv+0x582>
 8001094:	e66a      	b.n	8000d6c <__aeabi_ddiv+0x258>
 8001096:	9a00      	ldr	r2, [sp, #0]
 8001098:	4293      	cmp	r3, r2
 800109a:	d000      	beq.n	800109e <__aeabi_ddiv+0x58a>
 800109c:	e666      	b.n	8000d6c <__aeabi_ddiv+0x258>
 800109e:	e667      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <__aeabi_ddiv+0x5e8>)
 80010a2:	445a      	add	r2, fp
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_ddiv+0x596>
 80010a8:	e710      	b.n	8000ecc <__aeabi_ddiv+0x3b8>
 80010aa:	2301      	movs	r3, #1
 80010ac:	2500      	movs	r5, #0
 80010ae:	4498      	add	r8, r3
 80010b0:	e667      	b.n	8000d82 <__aeabi_ddiv+0x26e>
 80010b2:	075d      	lsls	r5, r3, #29
 80010b4:	025b      	lsls	r3, r3, #9
 80010b6:	0b1c      	lsrs	r4, r3, #12
 80010b8:	08d2      	lsrs	r2, r2, #3
 80010ba:	2300      	movs	r3, #0
 80010bc:	4315      	orrs	r5, r2
 80010be:	e580      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 80010c0:	9800      	ldr	r0, [sp, #0]
 80010c2:	3d02      	subs	r5, #2
 80010c4:	0042      	lsls	r2, r0, #1
 80010c6:	4282      	cmp	r2, r0
 80010c8:	41bf      	sbcs	r7, r7
 80010ca:	427f      	negs	r7, r7
 80010cc:	193c      	adds	r4, r7, r4
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	e7dd      	b.n	8001090 <__aeabi_ddiv+0x57c>
 80010d4:	2480      	movs	r4, #128	; 0x80
 80010d6:	4643      	mov	r3, r8
 80010d8:	0324      	lsls	r4, r4, #12
 80010da:	431c      	orrs	r4, r3
 80010dc:	0324      	lsls	r4, r4, #12
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 80010e0:	0b24      	lsrs	r4, r4, #12
 80010e2:	e56e      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 80010e4:	9a00      	ldr	r2, [sp, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3ea      	bcc.n	80010c0 <__aeabi_ddiv+0x5ac>
 80010ea:	0005      	movs	r5, r0
 80010ec:	e7d3      	b.n	8001096 <__aeabi_ddiv+0x582>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	000007ff 	.word	0x000007ff
 80010f4:	0000043e 	.word	0x0000043e
 80010f8:	0000041e 	.word	0x0000041e
 80010fc:	000003ff 	.word	0x000003ff

08001100 <__eqdf2>:
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	464e      	mov	r6, r9
 8001104:	4645      	mov	r5, r8
 8001106:	46de      	mov	lr, fp
 8001108:	4657      	mov	r7, sl
 800110a:	4690      	mov	r8, r2
 800110c:	b5e0      	push	{r5, r6, r7, lr}
 800110e:	0017      	movs	r7, r2
 8001110:	031a      	lsls	r2, r3, #12
 8001112:	0b12      	lsrs	r2, r2, #12
 8001114:	0005      	movs	r5, r0
 8001116:	4684      	mov	ip, r0
 8001118:	4819      	ldr	r0, [pc, #100]	; (8001180 <__eqdf2+0x80>)
 800111a:	030e      	lsls	r6, r1, #12
 800111c:	004c      	lsls	r4, r1, #1
 800111e:	4691      	mov	r9, r2
 8001120:	005a      	lsls	r2, r3, #1
 8001122:	0fdb      	lsrs	r3, r3, #31
 8001124:	469b      	mov	fp, r3
 8001126:	0b36      	lsrs	r6, r6, #12
 8001128:	0d64      	lsrs	r4, r4, #21
 800112a:	0fc9      	lsrs	r1, r1, #31
 800112c:	0d52      	lsrs	r2, r2, #21
 800112e:	4284      	cmp	r4, r0
 8001130:	d019      	beq.n	8001166 <__eqdf2+0x66>
 8001132:	4282      	cmp	r2, r0
 8001134:	d010      	beq.n	8001158 <__eqdf2+0x58>
 8001136:	2001      	movs	r0, #1
 8001138:	4294      	cmp	r4, r2
 800113a:	d10e      	bne.n	800115a <__eqdf2+0x5a>
 800113c:	454e      	cmp	r6, r9
 800113e:	d10c      	bne.n	800115a <__eqdf2+0x5a>
 8001140:	2001      	movs	r0, #1
 8001142:	45c4      	cmp	ip, r8
 8001144:	d109      	bne.n	800115a <__eqdf2+0x5a>
 8001146:	4559      	cmp	r1, fp
 8001148:	d017      	beq.n	800117a <__eqdf2+0x7a>
 800114a:	2c00      	cmp	r4, #0
 800114c:	d105      	bne.n	800115a <__eqdf2+0x5a>
 800114e:	0030      	movs	r0, r6
 8001150:	4328      	orrs	r0, r5
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	4198      	sbcs	r0, r3
 8001156:	e000      	b.n	800115a <__eqdf2+0x5a>
 8001158:	2001      	movs	r0, #1
 800115a:	bcf0      	pop	{r4, r5, r6, r7}
 800115c:	46bb      	mov	fp, r7
 800115e:	46b2      	mov	sl, r6
 8001160:	46a9      	mov	r9, r5
 8001162:	46a0      	mov	r8, r4
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	0033      	movs	r3, r6
 8001168:	2001      	movs	r0, #1
 800116a:	432b      	orrs	r3, r5
 800116c:	d1f5      	bne.n	800115a <__eqdf2+0x5a>
 800116e:	42a2      	cmp	r2, r4
 8001170:	d1f3      	bne.n	800115a <__eqdf2+0x5a>
 8001172:	464b      	mov	r3, r9
 8001174:	433b      	orrs	r3, r7
 8001176:	d1f0      	bne.n	800115a <__eqdf2+0x5a>
 8001178:	e7e2      	b.n	8001140 <__eqdf2+0x40>
 800117a:	2000      	movs	r0, #0
 800117c:	e7ed      	b.n	800115a <__eqdf2+0x5a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff

08001184 <__gedf2>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	4647      	mov	r7, r8
 8001188:	46ce      	mov	lr, r9
 800118a:	0004      	movs	r4, r0
 800118c:	0018      	movs	r0, r3
 800118e:	0016      	movs	r6, r2
 8001190:	031b      	lsls	r3, r3, #12
 8001192:	0b1b      	lsrs	r3, r3, #12
 8001194:	4d2d      	ldr	r5, [pc, #180]	; (800124c <__gedf2+0xc8>)
 8001196:	004a      	lsls	r2, r1, #1
 8001198:	4699      	mov	r9, r3
 800119a:	b580      	push	{r7, lr}
 800119c:	0043      	lsls	r3, r0, #1
 800119e:	030f      	lsls	r7, r1, #12
 80011a0:	46a4      	mov	ip, r4
 80011a2:	46b0      	mov	r8, r6
 80011a4:	0b3f      	lsrs	r7, r7, #12
 80011a6:	0d52      	lsrs	r2, r2, #21
 80011a8:	0fc9      	lsrs	r1, r1, #31
 80011aa:	0d5b      	lsrs	r3, r3, #21
 80011ac:	0fc0      	lsrs	r0, r0, #31
 80011ae:	42aa      	cmp	r2, r5
 80011b0:	d021      	beq.n	80011f6 <__gedf2+0x72>
 80011b2:	42ab      	cmp	r3, r5
 80011b4:	d013      	beq.n	80011de <__gedf2+0x5a>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d122      	bne.n	8001200 <__gedf2+0x7c>
 80011ba:	433c      	orrs	r4, r7
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <__gedf2+0x42>
 80011c0:	464d      	mov	r5, r9
 80011c2:	432e      	orrs	r6, r5
 80011c4:	d022      	beq.n	800120c <__gedf2+0x88>
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	d010      	beq.n	80011ec <__gedf2+0x68>
 80011ca:	4281      	cmp	r1, r0
 80011cc:	d022      	beq.n	8001214 <__gedf2+0x90>
 80011ce:	2002      	movs	r0, #2
 80011d0:	3901      	subs	r1, #1
 80011d2:	4008      	ands	r0, r1
 80011d4:	3801      	subs	r0, #1
 80011d6:	bcc0      	pop	{r6, r7}
 80011d8:	46b9      	mov	r9, r7
 80011da:	46b0      	mov	r8, r6
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	464d      	mov	r5, r9
 80011e0:	432e      	orrs	r6, r5
 80011e2:	d129      	bne.n	8001238 <__gedf2+0xb4>
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d1f0      	bne.n	80011ca <__gedf2+0x46>
 80011e8:	433c      	orrs	r4, r7
 80011ea:	d1ee      	bne.n	80011ca <__gedf2+0x46>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1f2      	bne.n	80011d6 <__gedf2+0x52>
 80011f0:	2001      	movs	r0, #1
 80011f2:	4240      	negs	r0, r0
 80011f4:	e7ef      	b.n	80011d6 <__gedf2+0x52>
 80011f6:	003d      	movs	r5, r7
 80011f8:	4325      	orrs	r5, r4
 80011fa:	d11d      	bne.n	8001238 <__gedf2+0xb4>
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d0ee      	beq.n	80011de <__gedf2+0x5a>
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e2      	bne.n	80011ca <__gedf2+0x46>
 8001204:	464c      	mov	r4, r9
 8001206:	4326      	orrs	r6, r4
 8001208:	d1df      	bne.n	80011ca <__gedf2+0x46>
 800120a:	e7e0      	b.n	80011ce <__gedf2+0x4a>
 800120c:	2000      	movs	r0, #0
 800120e:	2c00      	cmp	r4, #0
 8001210:	d0e1      	beq.n	80011d6 <__gedf2+0x52>
 8001212:	e7dc      	b.n	80011ce <__gedf2+0x4a>
 8001214:	429a      	cmp	r2, r3
 8001216:	dc0a      	bgt.n	800122e <__gedf2+0xaa>
 8001218:	dbe8      	blt.n	80011ec <__gedf2+0x68>
 800121a:	454f      	cmp	r7, r9
 800121c:	d8d7      	bhi.n	80011ce <__gedf2+0x4a>
 800121e:	d00e      	beq.n	800123e <__gedf2+0xba>
 8001220:	2000      	movs	r0, #0
 8001222:	454f      	cmp	r7, r9
 8001224:	d2d7      	bcs.n	80011d6 <__gedf2+0x52>
 8001226:	2900      	cmp	r1, #0
 8001228:	d0e2      	beq.n	80011f0 <__gedf2+0x6c>
 800122a:	0008      	movs	r0, r1
 800122c:	e7d3      	b.n	80011d6 <__gedf2+0x52>
 800122e:	4243      	negs	r3, r0
 8001230:	4158      	adcs	r0, r3
 8001232:	0040      	lsls	r0, r0, #1
 8001234:	3801      	subs	r0, #1
 8001236:	e7ce      	b.n	80011d6 <__gedf2+0x52>
 8001238:	2002      	movs	r0, #2
 800123a:	4240      	negs	r0, r0
 800123c:	e7cb      	b.n	80011d6 <__gedf2+0x52>
 800123e:	45c4      	cmp	ip, r8
 8001240:	d8c5      	bhi.n	80011ce <__gedf2+0x4a>
 8001242:	2000      	movs	r0, #0
 8001244:	45c4      	cmp	ip, r8
 8001246:	d2c6      	bcs.n	80011d6 <__gedf2+0x52>
 8001248:	e7ed      	b.n	8001226 <__gedf2+0xa2>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	000007ff 	.word	0x000007ff

08001250 <__ledf2>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	4647      	mov	r7, r8
 8001254:	46ce      	mov	lr, r9
 8001256:	0004      	movs	r4, r0
 8001258:	0018      	movs	r0, r3
 800125a:	0016      	movs	r6, r2
 800125c:	031b      	lsls	r3, r3, #12
 800125e:	0b1b      	lsrs	r3, r3, #12
 8001260:	4d2c      	ldr	r5, [pc, #176]	; (8001314 <__ledf2+0xc4>)
 8001262:	004a      	lsls	r2, r1, #1
 8001264:	4699      	mov	r9, r3
 8001266:	b580      	push	{r7, lr}
 8001268:	0043      	lsls	r3, r0, #1
 800126a:	030f      	lsls	r7, r1, #12
 800126c:	46a4      	mov	ip, r4
 800126e:	46b0      	mov	r8, r6
 8001270:	0b3f      	lsrs	r7, r7, #12
 8001272:	0d52      	lsrs	r2, r2, #21
 8001274:	0fc9      	lsrs	r1, r1, #31
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	0fc0      	lsrs	r0, r0, #31
 800127a:	42aa      	cmp	r2, r5
 800127c:	d00d      	beq.n	800129a <__ledf2+0x4a>
 800127e:	42ab      	cmp	r3, r5
 8001280:	d010      	beq.n	80012a4 <__ledf2+0x54>
 8001282:	2a00      	cmp	r2, #0
 8001284:	d127      	bne.n	80012d6 <__ledf2+0x86>
 8001286:	433c      	orrs	r4, r7
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <__ledf2+0x60>
 800128c:	464d      	mov	r5, r9
 800128e:	432e      	orrs	r6, r5
 8001290:	d10e      	bne.n	80012b0 <__ledf2+0x60>
 8001292:	2000      	movs	r0, #0
 8001294:	2c00      	cmp	r4, #0
 8001296:	d015      	beq.n	80012c4 <__ledf2+0x74>
 8001298:	e00e      	b.n	80012b8 <__ledf2+0x68>
 800129a:	003d      	movs	r5, r7
 800129c:	4325      	orrs	r5, r4
 800129e:	d110      	bne.n	80012c2 <__ledf2+0x72>
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d118      	bne.n	80012d6 <__ledf2+0x86>
 80012a4:	464d      	mov	r5, r9
 80012a6:	432e      	orrs	r6, r5
 80012a8:	d10b      	bne.n	80012c2 <__ledf2+0x72>
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d102      	bne.n	80012b4 <__ledf2+0x64>
 80012ae:	433c      	orrs	r4, r7
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d00b      	beq.n	80012cc <__ledf2+0x7c>
 80012b4:	4281      	cmp	r1, r0
 80012b6:	d014      	beq.n	80012e2 <__ledf2+0x92>
 80012b8:	2002      	movs	r0, #2
 80012ba:	3901      	subs	r1, #1
 80012bc:	4008      	ands	r0, r1
 80012be:	3801      	subs	r0, #1
 80012c0:	e000      	b.n	80012c4 <__ledf2+0x74>
 80012c2:	2002      	movs	r0, #2
 80012c4:	bcc0      	pop	{r6, r7}
 80012c6:	46b9      	mov	r9, r7
 80012c8:	46b0      	mov	r8, r6
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1f9      	bne.n	80012c4 <__ledf2+0x74>
 80012d0:	2001      	movs	r0, #1
 80012d2:	4240      	negs	r0, r0
 80012d4:	e7f6      	b.n	80012c4 <__ledf2+0x74>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ec      	bne.n	80012b4 <__ledf2+0x64>
 80012da:	464c      	mov	r4, r9
 80012dc:	4326      	orrs	r6, r4
 80012de:	d1e9      	bne.n	80012b4 <__ledf2+0x64>
 80012e0:	e7ea      	b.n	80012b8 <__ledf2+0x68>
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dd04      	ble.n	80012f0 <__ledf2+0xa0>
 80012e6:	4243      	negs	r3, r0
 80012e8:	4158      	adcs	r0, r3
 80012ea:	0040      	lsls	r0, r0, #1
 80012ec:	3801      	subs	r0, #1
 80012ee:	e7e9      	b.n	80012c4 <__ledf2+0x74>
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbeb      	blt.n	80012cc <__ledf2+0x7c>
 80012f4:	454f      	cmp	r7, r9
 80012f6:	d8df      	bhi.n	80012b8 <__ledf2+0x68>
 80012f8:	d006      	beq.n	8001308 <__ledf2+0xb8>
 80012fa:	2000      	movs	r0, #0
 80012fc:	454f      	cmp	r7, r9
 80012fe:	d2e1      	bcs.n	80012c4 <__ledf2+0x74>
 8001300:	2900      	cmp	r1, #0
 8001302:	d0e5      	beq.n	80012d0 <__ledf2+0x80>
 8001304:	0008      	movs	r0, r1
 8001306:	e7dd      	b.n	80012c4 <__ledf2+0x74>
 8001308:	45c4      	cmp	ip, r8
 800130a:	d8d5      	bhi.n	80012b8 <__ledf2+0x68>
 800130c:	2000      	movs	r0, #0
 800130e:	45c4      	cmp	ip, r8
 8001310:	d2d8      	bcs.n	80012c4 <__ledf2+0x74>
 8001312:	e7f5      	b.n	8001300 <__ledf2+0xb0>
 8001314:	000007ff 	.word	0x000007ff

08001318 <__aeabi_dmul>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	4657      	mov	r7, sl
 800131c:	464e      	mov	r6, r9
 800131e:	4645      	mov	r5, r8
 8001320:	46de      	mov	lr, fp
 8001322:	b5e0      	push	{r5, r6, r7, lr}
 8001324:	4698      	mov	r8, r3
 8001326:	030c      	lsls	r4, r1, #12
 8001328:	004b      	lsls	r3, r1, #1
 800132a:	0006      	movs	r6, r0
 800132c:	4692      	mov	sl, r2
 800132e:	b087      	sub	sp, #28
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	0d5b      	lsrs	r3, r3, #21
 8001334:	0fcf      	lsrs	r7, r1, #31
 8001336:	2b00      	cmp	r3, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x24>
 800133a:	e15c      	b.n	80015f6 <__aeabi_dmul+0x2de>
 800133c:	4ad9      	ldr	r2, [pc, #868]	; (80016a4 <__aeabi_dmul+0x38c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x2c>
 8001342:	e175      	b.n	8001630 <__aeabi_dmul+0x318>
 8001344:	0f42      	lsrs	r2, r0, #29
 8001346:	00e4      	lsls	r4, r4, #3
 8001348:	4314      	orrs	r4, r2
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	0412      	lsls	r2, r2, #16
 800134e:	4314      	orrs	r4, r2
 8001350:	4ad5      	ldr	r2, [pc, #852]	; (80016a8 <__aeabi_dmul+0x390>)
 8001352:	00c5      	lsls	r5, r0, #3
 8001354:	4694      	mov	ip, r2
 8001356:	4463      	add	r3, ip
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	4699      	mov	r9, r3
 800135e:	469b      	mov	fp, r3
 8001360:	4643      	mov	r3, r8
 8001362:	4642      	mov	r2, r8
 8001364:	031e      	lsls	r6, r3, #12
 8001366:	0fd2      	lsrs	r2, r2, #31
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4650      	mov	r0, sl
 800136c:	4690      	mov	r8, r2
 800136e:	0b36      	lsrs	r6, r6, #12
 8001370:	0d5b      	lsrs	r3, r3, #21
 8001372:	d100      	bne.n	8001376 <__aeabi_dmul+0x5e>
 8001374:	e120      	b.n	80015b8 <__aeabi_dmul+0x2a0>
 8001376:	4acb      	ldr	r2, [pc, #812]	; (80016a4 <__aeabi_dmul+0x38c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d100      	bne.n	800137e <__aeabi_dmul+0x66>
 800137c:	e162      	b.n	8001644 <__aeabi_dmul+0x32c>
 800137e:	49ca      	ldr	r1, [pc, #808]	; (80016a8 <__aeabi_dmul+0x390>)
 8001380:	0f42      	lsrs	r2, r0, #29
 8001382:	468c      	mov	ip, r1
 8001384:	9900      	ldr	r1, [sp, #0]
 8001386:	4463      	add	r3, ip
 8001388:	00f6      	lsls	r6, r6, #3
 800138a:	468c      	mov	ip, r1
 800138c:	4316      	orrs	r6, r2
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	449c      	add	ip, r3
 8001392:	0412      	lsls	r2, r2, #16
 8001394:	4663      	mov	r3, ip
 8001396:	4316      	orrs	r6, r2
 8001398:	00c2      	lsls	r2, r0, #3
 800139a:	2000      	movs	r0, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	9900      	ldr	r1, [sp, #0]
 80013a0:	4643      	mov	r3, r8
 80013a2:	3101      	adds	r1, #1
 80013a4:	468c      	mov	ip, r1
 80013a6:	4649      	mov	r1, r9
 80013a8:	407b      	eors	r3, r7
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	290f      	cmp	r1, #15
 80013ae:	d826      	bhi.n	80013fe <__aeabi_dmul+0xe6>
 80013b0:	4bbe      	ldr	r3, [pc, #760]	; (80016ac <__aeabi_dmul+0x394>)
 80013b2:	0089      	lsls	r1, r1, #2
 80013b4:	5859      	ldr	r1, [r3, r1]
 80013b6:	468f      	mov	pc, r1
 80013b8:	4643      	mov	r3, r8
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	0034      	movs	r4, r6
 80013be:	0015      	movs	r5, r2
 80013c0:	4683      	mov	fp, r0
 80013c2:	465b      	mov	r3, fp
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d016      	beq.n	80013f6 <__aeabi_dmul+0xde>
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d100      	bne.n	80013ce <__aeabi_dmul+0xb6>
 80013cc:	e203      	b.n	80017d6 <__aeabi_dmul+0x4be>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d000      	beq.n	80013d4 <__aeabi_dmul+0xbc>
 80013d2:	e0cd      	b.n	8001570 <__aeabi_dmul+0x258>
 80013d4:	2200      	movs	r2, #0
 80013d6:	2400      	movs	r4, #0
 80013d8:	2500      	movs	r5, #0
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	0512      	lsls	r2, r2, #20
 80013de:	4322      	orrs	r2, r4
 80013e0:	07db      	lsls	r3, r3, #31
 80013e2:	431a      	orrs	r2, r3
 80013e4:	0028      	movs	r0, r5
 80013e6:	0011      	movs	r1, r2
 80013e8:	b007      	add	sp, #28
 80013ea:	bcf0      	pop	{r4, r5, r6, r7}
 80013ec:	46bb      	mov	fp, r7
 80013ee:	46b2      	mov	sl, r6
 80013f0:	46a9      	mov	r9, r5
 80013f2:	46a0      	mov	r8, r4
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	2400      	movs	r4, #0
 80013f8:	2500      	movs	r5, #0
 80013fa:	4aaa      	ldr	r2, [pc, #680]	; (80016a4 <__aeabi_dmul+0x38c>)
 80013fc:	e7ed      	b.n	80013da <__aeabi_dmul+0xc2>
 80013fe:	0c28      	lsrs	r0, r5, #16
 8001400:	042d      	lsls	r5, r5, #16
 8001402:	0c2d      	lsrs	r5, r5, #16
 8001404:	002b      	movs	r3, r5
 8001406:	0c11      	lsrs	r1, r2, #16
 8001408:	0412      	lsls	r2, r2, #16
 800140a:	0c12      	lsrs	r2, r2, #16
 800140c:	4353      	muls	r3, r2
 800140e:	4698      	mov	r8, r3
 8001410:	0013      	movs	r3, r2
 8001412:	002f      	movs	r7, r5
 8001414:	4343      	muls	r3, r0
 8001416:	4699      	mov	r9, r3
 8001418:	434f      	muls	r7, r1
 800141a:	444f      	add	r7, r9
 800141c:	46bb      	mov	fp, r7
 800141e:	4647      	mov	r7, r8
 8001420:	000b      	movs	r3, r1
 8001422:	0c3f      	lsrs	r7, r7, #16
 8001424:	46ba      	mov	sl, r7
 8001426:	4343      	muls	r3, r0
 8001428:	44da      	add	sl, fp
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	45d1      	cmp	r9, sl
 800142e:	d904      	bls.n	800143a <__aeabi_dmul+0x122>
 8001430:	2780      	movs	r7, #128	; 0x80
 8001432:	027f      	lsls	r7, r7, #9
 8001434:	46b9      	mov	r9, r7
 8001436:	444b      	add	r3, r9
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	4653      	mov	r3, sl
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	469b      	mov	fp, r3
 8001440:	4653      	mov	r3, sl
 8001442:	041f      	lsls	r7, r3, #16
 8001444:	4643      	mov	r3, r8
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	4698      	mov	r8, r3
 800144c:	003b      	movs	r3, r7
 800144e:	4443      	add	r3, r8
 8001450:	9304      	str	r3, [sp, #16]
 8001452:	0c33      	lsrs	r3, r6, #16
 8001454:	0436      	lsls	r6, r6, #16
 8001456:	0c36      	lsrs	r6, r6, #16
 8001458:	4698      	mov	r8, r3
 800145a:	0033      	movs	r3, r6
 800145c:	4343      	muls	r3, r0
 800145e:	4699      	mov	r9, r3
 8001460:	4643      	mov	r3, r8
 8001462:	4343      	muls	r3, r0
 8001464:	002f      	movs	r7, r5
 8001466:	469a      	mov	sl, r3
 8001468:	4643      	mov	r3, r8
 800146a:	4377      	muls	r7, r6
 800146c:	435d      	muls	r5, r3
 800146e:	0c38      	lsrs	r0, r7, #16
 8001470:	444d      	add	r5, r9
 8001472:	1945      	adds	r5, r0, r5
 8001474:	45a9      	cmp	r9, r5
 8001476:	d903      	bls.n	8001480 <__aeabi_dmul+0x168>
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	4699      	mov	r9, r3
 800147e:	44ca      	add	sl, r9
 8001480:	043f      	lsls	r7, r7, #16
 8001482:	0c28      	lsrs	r0, r5, #16
 8001484:	0c3f      	lsrs	r7, r7, #16
 8001486:	042d      	lsls	r5, r5, #16
 8001488:	19ed      	adds	r5, r5, r7
 800148a:	0c27      	lsrs	r7, r4, #16
 800148c:	0424      	lsls	r4, r4, #16
 800148e:	0c24      	lsrs	r4, r4, #16
 8001490:	0003      	movs	r3, r0
 8001492:	0020      	movs	r0, r4
 8001494:	4350      	muls	r0, r2
 8001496:	437a      	muls	r2, r7
 8001498:	4691      	mov	r9, r2
 800149a:	003a      	movs	r2, r7
 800149c:	4453      	add	r3, sl
 800149e:	9305      	str	r3, [sp, #20]
 80014a0:	0c03      	lsrs	r3, r0, #16
 80014a2:	469a      	mov	sl, r3
 80014a4:	434a      	muls	r2, r1
 80014a6:	4361      	muls	r1, r4
 80014a8:	4449      	add	r1, r9
 80014aa:	4451      	add	r1, sl
 80014ac:	44ab      	add	fp, r5
 80014ae:	4589      	cmp	r9, r1
 80014b0:	d903      	bls.n	80014ba <__aeabi_dmul+0x1a2>
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	4699      	mov	r9, r3
 80014b8:	444a      	add	r2, r9
 80014ba:	0400      	lsls	r0, r0, #16
 80014bc:	0c0b      	lsrs	r3, r1, #16
 80014be:	0c00      	lsrs	r0, r0, #16
 80014c0:	0409      	lsls	r1, r1, #16
 80014c2:	1809      	adds	r1, r1, r0
 80014c4:	0020      	movs	r0, r4
 80014c6:	4699      	mov	r9, r3
 80014c8:	4643      	mov	r3, r8
 80014ca:	4370      	muls	r0, r6
 80014cc:	435c      	muls	r4, r3
 80014ce:	437e      	muls	r6, r7
 80014d0:	435f      	muls	r7, r3
 80014d2:	0c03      	lsrs	r3, r0, #16
 80014d4:	4698      	mov	r8, r3
 80014d6:	19a4      	adds	r4, r4, r6
 80014d8:	4444      	add	r4, r8
 80014da:	444a      	add	r2, r9
 80014dc:	9703      	str	r7, [sp, #12]
 80014de:	42a6      	cmp	r6, r4
 80014e0:	d904      	bls.n	80014ec <__aeabi_dmul+0x1d4>
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4698      	mov	r8, r3
 80014e8:	4447      	add	r7, r8
 80014ea:	9703      	str	r7, [sp, #12]
 80014ec:	0423      	lsls	r3, r4, #16
 80014ee:	9e02      	ldr	r6, [sp, #8]
 80014f0:	469a      	mov	sl, r3
 80014f2:	9b05      	ldr	r3, [sp, #20]
 80014f4:	445e      	add	r6, fp
 80014f6:	4698      	mov	r8, r3
 80014f8:	42ae      	cmp	r6, r5
 80014fa:	41ad      	sbcs	r5, r5
 80014fc:	1876      	adds	r6, r6, r1
 80014fe:	428e      	cmp	r6, r1
 8001500:	4189      	sbcs	r1, r1
 8001502:	0400      	lsls	r0, r0, #16
 8001504:	0c00      	lsrs	r0, r0, #16
 8001506:	4450      	add	r0, sl
 8001508:	4440      	add	r0, r8
 800150a:	426d      	negs	r5, r5
 800150c:	1947      	adds	r7, r0, r5
 800150e:	46b8      	mov	r8, r7
 8001510:	4693      	mov	fp, r2
 8001512:	4249      	negs	r1, r1
 8001514:	4689      	mov	r9, r1
 8001516:	44c3      	add	fp, r8
 8001518:	44d9      	add	r9, fp
 800151a:	4298      	cmp	r0, r3
 800151c:	4180      	sbcs	r0, r0
 800151e:	45a8      	cmp	r8, r5
 8001520:	41ad      	sbcs	r5, r5
 8001522:	4593      	cmp	fp, r2
 8001524:	4192      	sbcs	r2, r2
 8001526:	4589      	cmp	r9, r1
 8001528:	4189      	sbcs	r1, r1
 800152a:	426d      	negs	r5, r5
 800152c:	4240      	negs	r0, r0
 800152e:	4328      	orrs	r0, r5
 8001530:	0c24      	lsrs	r4, r4, #16
 8001532:	4252      	negs	r2, r2
 8001534:	4249      	negs	r1, r1
 8001536:	430a      	orrs	r2, r1
 8001538:	9b03      	ldr	r3, [sp, #12]
 800153a:	1900      	adds	r0, r0, r4
 800153c:	1880      	adds	r0, r0, r2
 800153e:	18c7      	adds	r7, r0, r3
 8001540:	464b      	mov	r3, r9
 8001542:	0ddc      	lsrs	r4, r3, #23
 8001544:	9b04      	ldr	r3, [sp, #16]
 8001546:	0275      	lsls	r5, r6, #9
 8001548:	431d      	orrs	r5, r3
 800154a:	1e6a      	subs	r2, r5, #1
 800154c:	4195      	sbcs	r5, r2
 800154e:	464b      	mov	r3, r9
 8001550:	0df6      	lsrs	r6, r6, #23
 8001552:	027f      	lsls	r7, r7, #9
 8001554:	4335      	orrs	r5, r6
 8001556:	025a      	lsls	r2, r3, #9
 8001558:	433c      	orrs	r4, r7
 800155a:	4315      	orrs	r5, r2
 800155c:	01fb      	lsls	r3, r7, #7
 800155e:	d400      	bmi.n	8001562 <__aeabi_dmul+0x24a>
 8001560:	e11c      	b.n	800179c <__aeabi_dmul+0x484>
 8001562:	2101      	movs	r1, #1
 8001564:	086a      	lsrs	r2, r5, #1
 8001566:	400d      	ands	r5, r1
 8001568:	4315      	orrs	r5, r2
 800156a:	07e2      	lsls	r2, r4, #31
 800156c:	4315      	orrs	r5, r2
 800156e:	0864      	lsrs	r4, r4, #1
 8001570:	494f      	ldr	r1, [pc, #316]	; (80016b0 <__aeabi_dmul+0x398>)
 8001572:	4461      	add	r1, ip
 8001574:	2900      	cmp	r1, #0
 8001576:	dc00      	bgt.n	800157a <__aeabi_dmul+0x262>
 8001578:	e0b0      	b.n	80016dc <__aeabi_dmul+0x3c4>
 800157a:	076b      	lsls	r3, r5, #29
 800157c:	d009      	beq.n	8001592 <__aeabi_dmul+0x27a>
 800157e:	220f      	movs	r2, #15
 8001580:	402a      	ands	r2, r5
 8001582:	2a04      	cmp	r2, #4
 8001584:	d005      	beq.n	8001592 <__aeabi_dmul+0x27a>
 8001586:	1d2a      	adds	r2, r5, #4
 8001588:	42aa      	cmp	r2, r5
 800158a:	41ad      	sbcs	r5, r5
 800158c:	426d      	negs	r5, r5
 800158e:	1964      	adds	r4, r4, r5
 8001590:	0015      	movs	r5, r2
 8001592:	01e3      	lsls	r3, r4, #7
 8001594:	d504      	bpl.n	80015a0 <__aeabi_dmul+0x288>
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <__aeabi_dmul+0x39c>)
 800159a:	00c9      	lsls	r1, r1, #3
 800159c:	4014      	ands	r4, r2
 800159e:	4461      	add	r1, ip
 80015a0:	4a45      	ldr	r2, [pc, #276]	; (80016b8 <__aeabi_dmul+0x3a0>)
 80015a2:	4291      	cmp	r1, r2
 80015a4:	dd00      	ble.n	80015a8 <__aeabi_dmul+0x290>
 80015a6:	e726      	b.n	80013f6 <__aeabi_dmul+0xde>
 80015a8:	0762      	lsls	r2, r4, #29
 80015aa:	08ed      	lsrs	r5, r5, #3
 80015ac:	0264      	lsls	r4, r4, #9
 80015ae:	0549      	lsls	r1, r1, #21
 80015b0:	4315      	orrs	r5, r2
 80015b2:	0b24      	lsrs	r4, r4, #12
 80015b4:	0d4a      	lsrs	r2, r1, #21
 80015b6:	e710      	b.n	80013da <__aeabi_dmul+0xc2>
 80015b8:	4652      	mov	r2, sl
 80015ba:	4332      	orrs	r2, r6
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dmul+0x2a8>
 80015be:	e07f      	b.n	80016c0 <__aeabi_dmul+0x3a8>
 80015c0:	2e00      	cmp	r6, #0
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dmul+0x2ae>
 80015c4:	e0dc      	b.n	8001780 <__aeabi_dmul+0x468>
 80015c6:	0030      	movs	r0, r6
 80015c8:	f000 fd4e 	bl	8002068 <__clzsi2>
 80015cc:	0002      	movs	r2, r0
 80015ce:	3a0b      	subs	r2, #11
 80015d0:	231d      	movs	r3, #29
 80015d2:	0001      	movs	r1, r0
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	4652      	mov	r2, sl
 80015d8:	3908      	subs	r1, #8
 80015da:	40da      	lsrs	r2, r3
 80015dc:	408e      	lsls	r6, r1
 80015de:	4316      	orrs	r6, r2
 80015e0:	4652      	mov	r2, sl
 80015e2:	408a      	lsls	r2, r1
 80015e4:	9b00      	ldr	r3, [sp, #0]
 80015e6:	4935      	ldr	r1, [pc, #212]	; (80016bc <__aeabi_dmul+0x3a4>)
 80015e8:	1a18      	subs	r0, r3, r0
 80015ea:	0003      	movs	r3, r0
 80015ec:	468c      	mov	ip, r1
 80015ee:	4463      	add	r3, ip
 80015f0:	2000      	movs	r0, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	e6d3      	b.n	800139e <__aeabi_dmul+0x86>
 80015f6:	0025      	movs	r5, r4
 80015f8:	4305      	orrs	r5, r0
 80015fa:	d04a      	beq.n	8001692 <__aeabi_dmul+0x37a>
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d100      	bne.n	8001602 <__aeabi_dmul+0x2ea>
 8001600:	e0b0      	b.n	8001764 <__aeabi_dmul+0x44c>
 8001602:	0020      	movs	r0, r4
 8001604:	f000 fd30 	bl	8002068 <__clzsi2>
 8001608:	0001      	movs	r1, r0
 800160a:	0002      	movs	r2, r0
 800160c:	390b      	subs	r1, #11
 800160e:	231d      	movs	r3, #29
 8001610:	0010      	movs	r0, r2
 8001612:	1a5b      	subs	r3, r3, r1
 8001614:	0031      	movs	r1, r6
 8001616:	0035      	movs	r5, r6
 8001618:	3808      	subs	r0, #8
 800161a:	4084      	lsls	r4, r0
 800161c:	40d9      	lsrs	r1, r3
 800161e:	4085      	lsls	r5, r0
 8001620:	430c      	orrs	r4, r1
 8001622:	4826      	ldr	r0, [pc, #152]	; (80016bc <__aeabi_dmul+0x3a4>)
 8001624:	1a83      	subs	r3, r0, r2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	4699      	mov	r9, r3
 800162c:	469b      	mov	fp, r3
 800162e:	e697      	b.n	8001360 <__aeabi_dmul+0x48>
 8001630:	0005      	movs	r5, r0
 8001632:	4325      	orrs	r5, r4
 8001634:	d126      	bne.n	8001684 <__aeabi_dmul+0x36c>
 8001636:	2208      	movs	r2, #8
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2302      	movs	r3, #2
 800163c:	2400      	movs	r4, #0
 800163e:	4691      	mov	r9, r2
 8001640:	469b      	mov	fp, r3
 8001642:	e68d      	b.n	8001360 <__aeabi_dmul+0x48>
 8001644:	4652      	mov	r2, sl
 8001646:	9b00      	ldr	r3, [sp, #0]
 8001648:	4332      	orrs	r2, r6
 800164a:	d110      	bne.n	800166e <__aeabi_dmul+0x356>
 800164c:	4915      	ldr	r1, [pc, #84]	; (80016a4 <__aeabi_dmul+0x38c>)
 800164e:	2600      	movs	r6, #0
 8001650:	468c      	mov	ip, r1
 8001652:	4463      	add	r3, ip
 8001654:	4649      	mov	r1, r9
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2302      	movs	r3, #2
 800165a:	4319      	orrs	r1, r3
 800165c:	4689      	mov	r9, r1
 800165e:	2002      	movs	r0, #2
 8001660:	e69d      	b.n	800139e <__aeabi_dmul+0x86>
 8001662:	465b      	mov	r3, fp
 8001664:	9701      	str	r7, [sp, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d000      	beq.n	800166c <__aeabi_dmul+0x354>
 800166a:	e6ad      	b.n	80013c8 <__aeabi_dmul+0xb0>
 800166c:	e6c3      	b.n	80013f6 <__aeabi_dmul+0xde>
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <__aeabi_dmul+0x38c>)
 8001670:	2003      	movs	r0, #3
 8001672:	4694      	mov	ip, r2
 8001674:	4463      	add	r3, ip
 8001676:	464a      	mov	r2, r9
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2303      	movs	r3, #3
 800167c:	431a      	orrs	r2, r3
 800167e:	4691      	mov	r9, r2
 8001680:	4652      	mov	r2, sl
 8001682:	e68c      	b.n	800139e <__aeabi_dmul+0x86>
 8001684:	220c      	movs	r2, #12
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2303      	movs	r3, #3
 800168a:	0005      	movs	r5, r0
 800168c:	4691      	mov	r9, r2
 800168e:	469b      	mov	fp, r3
 8001690:	e666      	b.n	8001360 <__aeabi_dmul+0x48>
 8001692:	2304      	movs	r3, #4
 8001694:	4699      	mov	r9, r3
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	2400      	movs	r4, #0
 800169e:	469b      	mov	fp, r3
 80016a0:	e65e      	b.n	8001360 <__aeabi_dmul+0x48>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	000007ff 	.word	0x000007ff
 80016a8:	fffffc01 	.word	0xfffffc01
 80016ac:	08008730 	.word	0x08008730
 80016b0:	000003ff 	.word	0x000003ff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	fffffc0d 	.word	0xfffffc0d
 80016c0:	4649      	mov	r1, r9
 80016c2:	2301      	movs	r3, #1
 80016c4:	4319      	orrs	r1, r3
 80016c6:	4689      	mov	r9, r1
 80016c8:	2600      	movs	r6, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	e667      	b.n	800139e <__aeabi_dmul+0x86>
 80016ce:	2300      	movs	r3, #0
 80016d0:	2480      	movs	r4, #128	; 0x80
 80016d2:	2500      	movs	r5, #0
 80016d4:	4a43      	ldr	r2, [pc, #268]	; (80017e4 <__aeabi_dmul+0x4cc>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	0324      	lsls	r4, r4, #12
 80016da:	e67e      	b.n	80013da <__aeabi_dmul+0xc2>
 80016dc:	2001      	movs	r0, #1
 80016de:	1a40      	subs	r0, r0, r1
 80016e0:	2838      	cmp	r0, #56	; 0x38
 80016e2:	dd00      	ble.n	80016e6 <__aeabi_dmul+0x3ce>
 80016e4:	e676      	b.n	80013d4 <__aeabi_dmul+0xbc>
 80016e6:	281f      	cmp	r0, #31
 80016e8:	dd5b      	ble.n	80017a2 <__aeabi_dmul+0x48a>
 80016ea:	221f      	movs	r2, #31
 80016ec:	0023      	movs	r3, r4
 80016ee:	4252      	negs	r2, r2
 80016f0:	1a51      	subs	r1, r2, r1
 80016f2:	40cb      	lsrs	r3, r1
 80016f4:	0019      	movs	r1, r3
 80016f6:	2820      	cmp	r0, #32
 80016f8:	d003      	beq.n	8001702 <__aeabi_dmul+0x3ea>
 80016fa:	4a3b      	ldr	r2, [pc, #236]	; (80017e8 <__aeabi_dmul+0x4d0>)
 80016fc:	4462      	add	r2, ip
 80016fe:	4094      	lsls	r4, r2
 8001700:	4325      	orrs	r5, r4
 8001702:	1e6a      	subs	r2, r5, #1
 8001704:	4195      	sbcs	r5, r2
 8001706:	002a      	movs	r2, r5
 8001708:	430a      	orrs	r2, r1
 800170a:	2107      	movs	r1, #7
 800170c:	000d      	movs	r5, r1
 800170e:	2400      	movs	r4, #0
 8001710:	4015      	ands	r5, r2
 8001712:	4211      	tst	r1, r2
 8001714:	d05b      	beq.n	80017ce <__aeabi_dmul+0x4b6>
 8001716:	210f      	movs	r1, #15
 8001718:	2400      	movs	r4, #0
 800171a:	4011      	ands	r1, r2
 800171c:	2904      	cmp	r1, #4
 800171e:	d053      	beq.n	80017c8 <__aeabi_dmul+0x4b0>
 8001720:	1d11      	adds	r1, r2, #4
 8001722:	4291      	cmp	r1, r2
 8001724:	4192      	sbcs	r2, r2
 8001726:	4252      	negs	r2, r2
 8001728:	18a4      	adds	r4, r4, r2
 800172a:	000a      	movs	r2, r1
 800172c:	0223      	lsls	r3, r4, #8
 800172e:	d54b      	bpl.n	80017c8 <__aeabi_dmul+0x4b0>
 8001730:	2201      	movs	r2, #1
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	e650      	b.n	80013da <__aeabi_dmul+0xc2>
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	031b      	lsls	r3, r3, #12
 800173c:	421c      	tst	r4, r3
 800173e:	d009      	beq.n	8001754 <__aeabi_dmul+0x43c>
 8001740:	421e      	tst	r6, r3
 8001742:	d107      	bne.n	8001754 <__aeabi_dmul+0x43c>
 8001744:	4333      	orrs	r3, r6
 8001746:	031c      	lsls	r4, r3, #12
 8001748:	4643      	mov	r3, r8
 800174a:	0015      	movs	r5, r2
 800174c:	0b24      	lsrs	r4, r4, #12
 800174e:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <__aeabi_dmul+0x4cc>)
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	e642      	b.n	80013da <__aeabi_dmul+0xc2>
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0312      	lsls	r2, r2, #12
 8001758:	4314      	orrs	r4, r2
 800175a:	0324      	lsls	r4, r4, #12
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <__aeabi_dmul+0x4cc>)
 800175e:	0b24      	lsrs	r4, r4, #12
 8001760:	9701      	str	r7, [sp, #4]
 8001762:	e63a      	b.n	80013da <__aeabi_dmul+0xc2>
 8001764:	f000 fc80 	bl	8002068 <__clzsi2>
 8001768:	0001      	movs	r1, r0
 800176a:	0002      	movs	r2, r0
 800176c:	3115      	adds	r1, #21
 800176e:	3220      	adds	r2, #32
 8001770:	291c      	cmp	r1, #28
 8001772:	dc00      	bgt.n	8001776 <__aeabi_dmul+0x45e>
 8001774:	e74b      	b.n	800160e <__aeabi_dmul+0x2f6>
 8001776:	0034      	movs	r4, r6
 8001778:	3808      	subs	r0, #8
 800177a:	2500      	movs	r5, #0
 800177c:	4084      	lsls	r4, r0
 800177e:	e750      	b.n	8001622 <__aeabi_dmul+0x30a>
 8001780:	f000 fc72 	bl	8002068 <__clzsi2>
 8001784:	0003      	movs	r3, r0
 8001786:	001a      	movs	r2, r3
 8001788:	3215      	adds	r2, #21
 800178a:	3020      	adds	r0, #32
 800178c:	2a1c      	cmp	r2, #28
 800178e:	dc00      	bgt.n	8001792 <__aeabi_dmul+0x47a>
 8001790:	e71e      	b.n	80015d0 <__aeabi_dmul+0x2b8>
 8001792:	4656      	mov	r6, sl
 8001794:	3b08      	subs	r3, #8
 8001796:	2200      	movs	r2, #0
 8001798:	409e      	lsls	r6, r3
 800179a:	e723      	b.n	80015e4 <__aeabi_dmul+0x2cc>
 800179c:	9b00      	ldr	r3, [sp, #0]
 800179e:	469c      	mov	ip, r3
 80017a0:	e6e6      	b.n	8001570 <__aeabi_dmul+0x258>
 80017a2:	4912      	ldr	r1, [pc, #72]	; (80017ec <__aeabi_dmul+0x4d4>)
 80017a4:	0022      	movs	r2, r4
 80017a6:	4461      	add	r1, ip
 80017a8:	002e      	movs	r6, r5
 80017aa:	408d      	lsls	r5, r1
 80017ac:	408a      	lsls	r2, r1
 80017ae:	40c6      	lsrs	r6, r0
 80017b0:	1e69      	subs	r1, r5, #1
 80017b2:	418d      	sbcs	r5, r1
 80017b4:	4332      	orrs	r2, r6
 80017b6:	432a      	orrs	r2, r5
 80017b8:	40c4      	lsrs	r4, r0
 80017ba:	0753      	lsls	r3, r2, #29
 80017bc:	d0b6      	beq.n	800172c <__aeabi_dmul+0x414>
 80017be:	210f      	movs	r1, #15
 80017c0:	4011      	ands	r1, r2
 80017c2:	2904      	cmp	r1, #4
 80017c4:	d1ac      	bne.n	8001720 <__aeabi_dmul+0x408>
 80017c6:	e7b1      	b.n	800172c <__aeabi_dmul+0x414>
 80017c8:	0765      	lsls	r5, r4, #29
 80017ca:	0264      	lsls	r4, r4, #9
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	08d2      	lsrs	r2, r2, #3
 80017d0:	4315      	orrs	r5, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	e601      	b.n	80013da <__aeabi_dmul+0xc2>
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	0312      	lsls	r2, r2, #12
 80017da:	4314      	orrs	r4, r2
 80017dc:	0324      	lsls	r4, r4, #12
 80017de:	4a01      	ldr	r2, [pc, #4]	; (80017e4 <__aeabi_dmul+0x4cc>)
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	e5fa      	b.n	80013da <__aeabi_dmul+0xc2>
 80017e4:	000007ff 	.word	0x000007ff
 80017e8:	0000043e 	.word	0x0000043e
 80017ec:	0000041e 	.word	0x0000041e

080017f0 <__aeabi_dsub>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	4657      	mov	r7, sl
 80017f4:	464e      	mov	r6, r9
 80017f6:	4645      	mov	r5, r8
 80017f8:	46de      	mov	lr, fp
 80017fa:	b5e0      	push	{r5, r6, r7, lr}
 80017fc:	001e      	movs	r6, r3
 80017fe:	0017      	movs	r7, r2
 8001800:	004a      	lsls	r2, r1, #1
 8001802:	030b      	lsls	r3, r1, #12
 8001804:	0d52      	lsrs	r2, r2, #21
 8001806:	0a5b      	lsrs	r3, r3, #9
 8001808:	4690      	mov	r8, r2
 800180a:	0f42      	lsrs	r2, r0, #29
 800180c:	431a      	orrs	r2, r3
 800180e:	0fcd      	lsrs	r5, r1, #31
 8001810:	4ccd      	ldr	r4, [pc, #820]	; (8001b48 <__aeabi_dsub+0x358>)
 8001812:	0331      	lsls	r1, r6, #12
 8001814:	00c3      	lsls	r3, r0, #3
 8001816:	4694      	mov	ip, r2
 8001818:	0070      	lsls	r0, r6, #1
 800181a:	0f7a      	lsrs	r2, r7, #29
 800181c:	0a49      	lsrs	r1, r1, #9
 800181e:	00ff      	lsls	r7, r7, #3
 8001820:	469a      	mov	sl, r3
 8001822:	46b9      	mov	r9, r7
 8001824:	0d40      	lsrs	r0, r0, #21
 8001826:	0ff6      	lsrs	r6, r6, #31
 8001828:	4311      	orrs	r1, r2
 800182a:	42a0      	cmp	r0, r4
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x40>
 800182e:	e0b1      	b.n	8001994 <__aeabi_dsub+0x1a4>
 8001830:	2201      	movs	r2, #1
 8001832:	4056      	eors	r6, r2
 8001834:	46b3      	mov	fp, r6
 8001836:	42b5      	cmp	r5, r6
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x4c>
 800183a:	e088      	b.n	800194e <__aeabi_dsub+0x15e>
 800183c:	4642      	mov	r2, r8
 800183e:	1a12      	subs	r2, r2, r0
 8001840:	2a00      	cmp	r2, #0
 8001842:	dc00      	bgt.n	8001846 <__aeabi_dsub+0x56>
 8001844:	e0ae      	b.n	80019a4 <__aeabi_dsub+0x1b4>
 8001846:	2800      	cmp	r0, #0
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x5c>
 800184a:	e0c1      	b.n	80019d0 <__aeabi_dsub+0x1e0>
 800184c:	48be      	ldr	r0, [pc, #760]	; (8001b48 <__aeabi_dsub+0x358>)
 800184e:	4580      	cmp	r8, r0
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x64>
 8001852:	e151      	b.n	8001af8 <__aeabi_dsub+0x308>
 8001854:	2080      	movs	r0, #128	; 0x80
 8001856:	0400      	lsls	r0, r0, #16
 8001858:	4301      	orrs	r1, r0
 800185a:	2a38      	cmp	r2, #56	; 0x38
 800185c:	dd00      	ble.n	8001860 <__aeabi_dsub+0x70>
 800185e:	e17b      	b.n	8001b58 <__aeabi_dsub+0x368>
 8001860:	2a1f      	cmp	r2, #31
 8001862:	dd00      	ble.n	8001866 <__aeabi_dsub+0x76>
 8001864:	e1ee      	b.n	8001c44 <__aeabi_dsub+0x454>
 8001866:	2020      	movs	r0, #32
 8001868:	003e      	movs	r6, r7
 800186a:	1a80      	subs	r0, r0, r2
 800186c:	000c      	movs	r4, r1
 800186e:	40d6      	lsrs	r6, r2
 8001870:	40d1      	lsrs	r1, r2
 8001872:	4087      	lsls	r7, r0
 8001874:	4662      	mov	r2, ip
 8001876:	4084      	lsls	r4, r0
 8001878:	1a52      	subs	r2, r2, r1
 800187a:	1e78      	subs	r0, r7, #1
 800187c:	4187      	sbcs	r7, r0
 800187e:	4694      	mov	ip, r2
 8001880:	4334      	orrs	r4, r6
 8001882:	4327      	orrs	r7, r4
 8001884:	1bdc      	subs	r4, r3, r7
 8001886:	42a3      	cmp	r3, r4
 8001888:	419b      	sbcs	r3, r3
 800188a:	4662      	mov	r2, ip
 800188c:	425b      	negs	r3, r3
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4699      	mov	r9, r3
 8001892:	464b      	mov	r3, r9
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	d400      	bmi.n	800189a <__aeabi_dsub+0xaa>
 8001898:	e118      	b.n	8001acc <__aeabi_dsub+0x2dc>
 800189a:	464b      	mov	r3, r9
 800189c:	0258      	lsls	r0, r3, #9
 800189e:	0a43      	lsrs	r3, r0, #9
 80018a0:	4699      	mov	r9, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d100      	bne.n	80018aa <__aeabi_dsub+0xba>
 80018a8:	e137      	b.n	8001b1a <__aeabi_dsub+0x32a>
 80018aa:	4648      	mov	r0, r9
 80018ac:	f000 fbdc 	bl	8002068 <__clzsi2>
 80018b0:	0001      	movs	r1, r0
 80018b2:	3908      	subs	r1, #8
 80018b4:	2320      	movs	r3, #32
 80018b6:	0022      	movs	r2, r4
 80018b8:	4648      	mov	r0, r9
 80018ba:	1a5b      	subs	r3, r3, r1
 80018bc:	40da      	lsrs	r2, r3
 80018be:	4088      	lsls	r0, r1
 80018c0:	408c      	lsls	r4, r1
 80018c2:	4643      	mov	r3, r8
 80018c4:	4310      	orrs	r0, r2
 80018c6:	4588      	cmp	r8, r1
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dsub+0xdc>
 80018ca:	e136      	b.n	8001b3a <__aeabi_dsub+0x34a>
 80018cc:	1ac9      	subs	r1, r1, r3
 80018ce:	1c4b      	adds	r3, r1, #1
 80018d0:	2b1f      	cmp	r3, #31
 80018d2:	dd00      	ble.n	80018d6 <__aeabi_dsub+0xe6>
 80018d4:	e0ea      	b.n	8001aac <__aeabi_dsub+0x2bc>
 80018d6:	2220      	movs	r2, #32
 80018d8:	0026      	movs	r6, r4
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	0001      	movs	r1, r0
 80018de:	4094      	lsls	r4, r2
 80018e0:	40de      	lsrs	r6, r3
 80018e2:	40d8      	lsrs	r0, r3
 80018e4:	2300      	movs	r3, #0
 80018e6:	4091      	lsls	r1, r2
 80018e8:	1e62      	subs	r2, r4, #1
 80018ea:	4194      	sbcs	r4, r2
 80018ec:	4681      	mov	r9, r0
 80018ee:	4698      	mov	r8, r3
 80018f0:	4331      	orrs	r1, r6
 80018f2:	430c      	orrs	r4, r1
 80018f4:	0763      	lsls	r3, r4, #29
 80018f6:	d009      	beq.n	800190c <__aeabi_dsub+0x11c>
 80018f8:	230f      	movs	r3, #15
 80018fa:	4023      	ands	r3, r4
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d005      	beq.n	800190c <__aeabi_dsub+0x11c>
 8001900:	1d23      	adds	r3, r4, #4
 8001902:	42a3      	cmp	r3, r4
 8001904:	41a4      	sbcs	r4, r4
 8001906:	4264      	negs	r4, r4
 8001908:	44a1      	add	r9, r4
 800190a:	001c      	movs	r4, r3
 800190c:	464b      	mov	r3, r9
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	d400      	bmi.n	8001914 <__aeabi_dsub+0x124>
 8001912:	e0de      	b.n	8001ad2 <__aeabi_dsub+0x2e2>
 8001914:	4641      	mov	r1, r8
 8001916:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <__aeabi_dsub+0x358>)
 8001918:	3101      	adds	r1, #1
 800191a:	4299      	cmp	r1, r3
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x130>
 800191e:	e0e7      	b.n	8001af0 <__aeabi_dsub+0x300>
 8001920:	464b      	mov	r3, r9
 8001922:	488a      	ldr	r0, [pc, #552]	; (8001b4c <__aeabi_dsub+0x35c>)
 8001924:	08e4      	lsrs	r4, r4, #3
 8001926:	4003      	ands	r3, r0
 8001928:	0018      	movs	r0, r3
 800192a:	0549      	lsls	r1, r1, #21
 800192c:	075b      	lsls	r3, r3, #29
 800192e:	0240      	lsls	r0, r0, #9
 8001930:	4323      	orrs	r3, r4
 8001932:	0d4a      	lsrs	r2, r1, #21
 8001934:	0b04      	lsrs	r4, r0, #12
 8001936:	0512      	lsls	r2, r2, #20
 8001938:	07ed      	lsls	r5, r5, #31
 800193a:	4322      	orrs	r2, r4
 800193c:	432a      	orrs	r2, r5
 800193e:	0018      	movs	r0, r3
 8001940:	0011      	movs	r1, r2
 8001942:	bcf0      	pop	{r4, r5, r6, r7}
 8001944:	46bb      	mov	fp, r7
 8001946:	46b2      	mov	sl, r6
 8001948:	46a9      	mov	r9, r5
 800194a:	46a0      	mov	r8, r4
 800194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800194e:	4642      	mov	r2, r8
 8001950:	1a12      	subs	r2, r2, r0
 8001952:	2a00      	cmp	r2, #0
 8001954:	dd52      	ble.n	80019fc <__aeabi_dsub+0x20c>
 8001956:	2800      	cmp	r0, #0
 8001958:	d100      	bne.n	800195c <__aeabi_dsub+0x16c>
 800195a:	e09c      	b.n	8001a96 <__aeabi_dsub+0x2a6>
 800195c:	45a0      	cmp	r8, r4
 800195e:	d100      	bne.n	8001962 <__aeabi_dsub+0x172>
 8001960:	e0ca      	b.n	8001af8 <__aeabi_dsub+0x308>
 8001962:	2080      	movs	r0, #128	; 0x80
 8001964:	0400      	lsls	r0, r0, #16
 8001966:	4301      	orrs	r1, r0
 8001968:	2a38      	cmp	r2, #56	; 0x38
 800196a:	dd00      	ble.n	800196e <__aeabi_dsub+0x17e>
 800196c:	e149      	b.n	8001c02 <__aeabi_dsub+0x412>
 800196e:	2a1f      	cmp	r2, #31
 8001970:	dc00      	bgt.n	8001974 <__aeabi_dsub+0x184>
 8001972:	e197      	b.n	8001ca4 <__aeabi_dsub+0x4b4>
 8001974:	0010      	movs	r0, r2
 8001976:	000e      	movs	r6, r1
 8001978:	3820      	subs	r0, #32
 800197a:	40c6      	lsrs	r6, r0
 800197c:	2a20      	cmp	r2, #32
 800197e:	d004      	beq.n	800198a <__aeabi_dsub+0x19a>
 8001980:	2040      	movs	r0, #64	; 0x40
 8001982:	1a82      	subs	r2, r0, r2
 8001984:	4091      	lsls	r1, r2
 8001986:	430f      	orrs	r7, r1
 8001988:	46b9      	mov	r9, r7
 800198a:	464c      	mov	r4, r9
 800198c:	1e62      	subs	r2, r4, #1
 800198e:	4194      	sbcs	r4, r2
 8001990:	4334      	orrs	r4, r6
 8001992:	e13a      	b.n	8001c0a <__aeabi_dsub+0x41a>
 8001994:	000a      	movs	r2, r1
 8001996:	433a      	orrs	r2, r7
 8001998:	d028      	beq.n	80019ec <__aeabi_dsub+0x1fc>
 800199a:	46b3      	mov	fp, r6
 800199c:	42b5      	cmp	r5, r6
 800199e:	d02b      	beq.n	80019f8 <__aeabi_dsub+0x208>
 80019a0:	4a6b      	ldr	r2, [pc, #428]	; (8001b50 <__aeabi_dsub+0x360>)
 80019a2:	4442      	add	r2, r8
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d05d      	beq.n	8001a64 <__aeabi_dsub+0x274>
 80019a8:	4642      	mov	r2, r8
 80019aa:	4644      	mov	r4, r8
 80019ac:	1a82      	subs	r2, r0, r2
 80019ae:	2c00      	cmp	r4, #0
 80019b0:	d000      	beq.n	80019b4 <__aeabi_dsub+0x1c4>
 80019b2:	e0f5      	b.n	8001ba0 <__aeabi_dsub+0x3b0>
 80019b4:	4665      	mov	r5, ip
 80019b6:	431d      	orrs	r5, r3
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x1cc>
 80019ba:	e19c      	b.n	8001cf6 <__aeabi_dsub+0x506>
 80019bc:	1e55      	subs	r5, r2, #1
 80019be:	2a01      	cmp	r2, #1
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x1d4>
 80019c2:	e1fb      	b.n	8001dbc <__aeabi_dsub+0x5cc>
 80019c4:	4c60      	ldr	r4, [pc, #384]	; (8001b48 <__aeabi_dsub+0x358>)
 80019c6:	42a2      	cmp	r2, r4
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x1dc>
 80019ca:	e1bd      	b.n	8001d48 <__aeabi_dsub+0x558>
 80019cc:	002a      	movs	r2, r5
 80019ce:	e0f0      	b.n	8001bb2 <__aeabi_dsub+0x3c2>
 80019d0:	0008      	movs	r0, r1
 80019d2:	4338      	orrs	r0, r7
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1e8>
 80019d6:	e0c3      	b.n	8001b60 <__aeabi_dsub+0x370>
 80019d8:	1e50      	subs	r0, r2, #1
 80019da:	2a01      	cmp	r2, #1
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x1f0>
 80019de:	e1a8      	b.n	8001d32 <__aeabi_dsub+0x542>
 80019e0:	4c59      	ldr	r4, [pc, #356]	; (8001b48 <__aeabi_dsub+0x358>)
 80019e2:	42a2      	cmp	r2, r4
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x1f8>
 80019e6:	e087      	b.n	8001af8 <__aeabi_dsub+0x308>
 80019e8:	0002      	movs	r2, r0
 80019ea:	e736      	b.n	800185a <__aeabi_dsub+0x6a>
 80019ec:	2201      	movs	r2, #1
 80019ee:	4056      	eors	r6, r2
 80019f0:	46b3      	mov	fp, r6
 80019f2:	42b5      	cmp	r5, r6
 80019f4:	d000      	beq.n	80019f8 <__aeabi_dsub+0x208>
 80019f6:	e721      	b.n	800183c <__aeabi_dsub+0x4c>
 80019f8:	4a55      	ldr	r2, [pc, #340]	; (8001b50 <__aeabi_dsub+0x360>)
 80019fa:	4442      	add	r2, r8
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0x212>
 8001a00:	e0b5      	b.n	8001b6e <__aeabi_dsub+0x37e>
 8001a02:	4642      	mov	r2, r8
 8001a04:	4644      	mov	r4, r8
 8001a06:	1a82      	subs	r2, r0, r2
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x21e>
 8001a0c:	e138      	b.n	8001c80 <__aeabi_dsub+0x490>
 8001a0e:	4e4e      	ldr	r6, [pc, #312]	; (8001b48 <__aeabi_dsub+0x358>)
 8001a10:	42b0      	cmp	r0, r6
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x226>
 8001a14:	e1de      	b.n	8001dd4 <__aeabi_dsub+0x5e4>
 8001a16:	2680      	movs	r6, #128	; 0x80
 8001a18:	4664      	mov	r4, ip
 8001a1a:	0436      	lsls	r6, r6, #16
 8001a1c:	4334      	orrs	r4, r6
 8001a1e:	46a4      	mov	ip, r4
 8001a20:	2a38      	cmp	r2, #56	; 0x38
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dsub+0x236>
 8001a24:	e196      	b.n	8001d54 <__aeabi_dsub+0x564>
 8001a26:	2a1f      	cmp	r2, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0x23c>
 8001a2a:	e224      	b.n	8001e76 <__aeabi_dsub+0x686>
 8001a2c:	2620      	movs	r6, #32
 8001a2e:	1ab4      	subs	r4, r6, r2
 8001a30:	46a2      	mov	sl, r4
 8001a32:	4664      	mov	r4, ip
 8001a34:	4656      	mov	r6, sl
 8001a36:	40b4      	lsls	r4, r6
 8001a38:	46a1      	mov	r9, r4
 8001a3a:	001c      	movs	r4, r3
 8001a3c:	464e      	mov	r6, r9
 8001a3e:	40d4      	lsrs	r4, r2
 8001a40:	4326      	orrs	r6, r4
 8001a42:	0034      	movs	r4, r6
 8001a44:	4656      	mov	r6, sl
 8001a46:	40b3      	lsls	r3, r6
 8001a48:	1e5e      	subs	r6, r3, #1
 8001a4a:	41b3      	sbcs	r3, r6
 8001a4c:	431c      	orrs	r4, r3
 8001a4e:	4663      	mov	r3, ip
 8001a50:	40d3      	lsrs	r3, r2
 8001a52:	18c9      	adds	r1, r1, r3
 8001a54:	19e4      	adds	r4, r4, r7
 8001a56:	42bc      	cmp	r4, r7
 8001a58:	41bf      	sbcs	r7, r7
 8001a5a:	427f      	negs	r7, r7
 8001a5c:	46b9      	mov	r9, r7
 8001a5e:	4680      	mov	r8, r0
 8001a60:	4489      	add	r9, r1
 8001a62:	e0d8      	b.n	8001c16 <__aeabi_dsub+0x426>
 8001a64:	4640      	mov	r0, r8
 8001a66:	4c3b      	ldr	r4, [pc, #236]	; (8001b54 <__aeabi_dsub+0x364>)
 8001a68:	3001      	adds	r0, #1
 8001a6a:	4220      	tst	r0, r4
 8001a6c:	d000      	beq.n	8001a70 <__aeabi_dsub+0x280>
 8001a6e:	e0b4      	b.n	8001bda <__aeabi_dsub+0x3ea>
 8001a70:	4640      	mov	r0, r8
 8001a72:	2800      	cmp	r0, #0
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dsub+0x288>
 8001a76:	e144      	b.n	8001d02 <__aeabi_dsub+0x512>
 8001a78:	4660      	mov	r0, ip
 8001a7a:	4318      	orrs	r0, r3
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x290>
 8001a7e:	e190      	b.n	8001da2 <__aeabi_dsub+0x5b2>
 8001a80:	0008      	movs	r0, r1
 8001a82:	4338      	orrs	r0, r7
 8001a84:	d000      	beq.n	8001a88 <__aeabi_dsub+0x298>
 8001a86:	e1aa      	b.n	8001dde <__aeabi_dsub+0x5ee>
 8001a88:	4661      	mov	r1, ip
 8001a8a:	08db      	lsrs	r3, r3, #3
 8001a8c:	0749      	lsls	r1, r1, #29
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	4661      	mov	r1, ip
 8001a92:	08cc      	lsrs	r4, r1, #3
 8001a94:	e027      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001a96:	0008      	movs	r0, r1
 8001a98:	4338      	orrs	r0, r7
 8001a9a:	d061      	beq.n	8001b60 <__aeabi_dsub+0x370>
 8001a9c:	1e50      	subs	r0, r2, #1
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x2b4>
 8001aa2:	e139      	b.n	8001d18 <__aeabi_dsub+0x528>
 8001aa4:	42a2      	cmp	r2, r4
 8001aa6:	d027      	beq.n	8001af8 <__aeabi_dsub+0x308>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	e75d      	b.n	8001968 <__aeabi_dsub+0x178>
 8001aac:	0002      	movs	r2, r0
 8001aae:	391f      	subs	r1, #31
 8001ab0:	40ca      	lsrs	r2, r1
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d003      	beq.n	8001ac0 <__aeabi_dsub+0x2d0>
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	4098      	lsls	r0, r3
 8001abe:	4304      	orrs	r4, r0
 8001ac0:	1e63      	subs	r3, r4, #1
 8001ac2:	419c      	sbcs	r4, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	4698      	mov	r8, r3
 8001aca:	430c      	orrs	r4, r1
 8001acc:	0763      	lsls	r3, r4, #29
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dsub+0x2e2>
 8001ad0:	e712      	b.n	80018f8 <__aeabi_dsub+0x108>
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	464a      	mov	r2, r9
 8001ad6:	08e4      	lsrs	r4, r4, #3
 8001ad8:	075b      	lsls	r3, r3, #29
 8001ada:	4323      	orrs	r3, r4
 8001adc:	08d4      	lsrs	r4, r2, #3
 8001ade:	4642      	mov	r2, r8
 8001ae0:	4919      	ldr	r1, [pc, #100]	; (8001b48 <__aeabi_dsub+0x358>)
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d00e      	beq.n	8001b04 <__aeabi_dsub+0x314>
 8001ae6:	0324      	lsls	r4, r4, #12
 8001ae8:	0552      	lsls	r2, r2, #21
 8001aea:	0b24      	lsrs	r4, r4, #12
 8001aec:	0d52      	lsrs	r2, r2, #21
 8001aee:	e722      	b.n	8001936 <__aeabi_dsub+0x146>
 8001af0:	000a      	movs	r2, r1
 8001af2:	2400      	movs	r4, #0
 8001af4:	2300      	movs	r3, #0
 8001af6:	e71e      	b.n	8001936 <__aeabi_dsub+0x146>
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	4662      	mov	r2, ip
 8001afc:	0752      	lsls	r2, r2, #29
 8001afe:	4313      	orrs	r3, r2
 8001b00:	4662      	mov	r2, ip
 8001b02:	08d4      	lsrs	r4, r2, #3
 8001b04:	001a      	movs	r2, r3
 8001b06:	4322      	orrs	r2, r4
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x31c>
 8001b0a:	e1fc      	b.n	8001f06 <__aeabi_dsub+0x716>
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	0312      	lsls	r2, r2, #12
 8001b10:	4314      	orrs	r4, r2
 8001b12:	0324      	lsls	r4, r4, #12
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <__aeabi_dsub+0x358>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e70d      	b.n	8001936 <__aeabi_dsub+0x146>
 8001b1a:	0020      	movs	r0, r4
 8001b1c:	f000 faa4 	bl	8002068 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	3118      	adds	r1, #24
 8001b24:	291f      	cmp	r1, #31
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x33a>
 8001b28:	e6c4      	b.n	80018b4 <__aeabi_dsub+0xc4>
 8001b2a:	3808      	subs	r0, #8
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4643      	mov	r3, r8
 8001b30:	0020      	movs	r0, r4
 8001b32:	2400      	movs	r4, #0
 8001b34:	4588      	cmp	r8, r1
 8001b36:	dc00      	bgt.n	8001b3a <__aeabi_dsub+0x34a>
 8001b38:	e6c8      	b.n	80018cc <__aeabi_dsub+0xdc>
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__aeabi_dsub+0x35c>)
 8001b3c:	1a5b      	subs	r3, r3, r1
 8001b3e:	4010      	ands	r0, r2
 8001b40:	4698      	mov	r8, r3
 8001b42:	4681      	mov	r9, r0
 8001b44:	e6d6      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	ff7fffff 	.word	0xff7fffff
 8001b50:	fffff801 	.word	0xfffff801
 8001b54:	000007fe 	.word	0x000007fe
 8001b58:	430f      	orrs	r7, r1
 8001b5a:	1e7a      	subs	r2, r7, #1
 8001b5c:	4197      	sbcs	r7, r2
 8001b5e:	e691      	b.n	8001884 <__aeabi_dsub+0x94>
 8001b60:	4661      	mov	r1, ip
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	0749      	lsls	r1, r1, #29
 8001b66:	430b      	orrs	r3, r1
 8001b68:	4661      	mov	r1, ip
 8001b6a:	08cc      	lsrs	r4, r1, #3
 8001b6c:	e7b8      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001b6e:	4640      	mov	r0, r8
 8001b70:	4cd3      	ldr	r4, [pc, #844]	; (8001ec0 <__aeabi_dsub+0x6d0>)
 8001b72:	3001      	adds	r0, #1
 8001b74:	4220      	tst	r0, r4
 8001b76:	d000      	beq.n	8001b7a <__aeabi_dsub+0x38a>
 8001b78:	e0a2      	b.n	8001cc0 <__aeabi_dsub+0x4d0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_dsub+0x392>
 8001b80:	e101      	b.n	8001d86 <__aeabi_dsub+0x596>
 8001b82:	4660      	mov	r0, ip
 8001b84:	4318      	orrs	r0, r3
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x39a>
 8001b88:	e15e      	b.n	8001e48 <__aeabi_dsub+0x658>
 8001b8a:	0008      	movs	r0, r1
 8001b8c:	4338      	orrs	r0, r7
 8001b8e:	d000      	beq.n	8001b92 <__aeabi_dsub+0x3a2>
 8001b90:	e15f      	b.n	8001e52 <__aeabi_dsub+0x662>
 8001b92:	4661      	mov	r1, ip
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	0749      	lsls	r1, r1, #29
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	4661      	mov	r1, ip
 8001b9c:	08cc      	lsrs	r4, r1, #3
 8001b9e:	e7a2      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001ba0:	4dc8      	ldr	r5, [pc, #800]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001ba2:	42a8      	cmp	r0, r5
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x3b8>
 8001ba6:	e0cf      	b.n	8001d48 <__aeabi_dsub+0x558>
 8001ba8:	2580      	movs	r5, #128	; 0x80
 8001baa:	4664      	mov	r4, ip
 8001bac:	042d      	lsls	r5, r5, #16
 8001bae:	432c      	orrs	r4, r5
 8001bb0:	46a4      	mov	ip, r4
 8001bb2:	2a38      	cmp	r2, #56	; 0x38
 8001bb4:	dc56      	bgt.n	8001c64 <__aeabi_dsub+0x474>
 8001bb6:	2a1f      	cmp	r2, #31
 8001bb8:	dd00      	ble.n	8001bbc <__aeabi_dsub+0x3cc>
 8001bba:	e0d1      	b.n	8001d60 <__aeabi_dsub+0x570>
 8001bbc:	2520      	movs	r5, #32
 8001bbe:	001e      	movs	r6, r3
 8001bc0:	1aad      	subs	r5, r5, r2
 8001bc2:	4664      	mov	r4, ip
 8001bc4:	40ab      	lsls	r3, r5
 8001bc6:	40ac      	lsls	r4, r5
 8001bc8:	40d6      	lsrs	r6, r2
 8001bca:	1e5d      	subs	r5, r3, #1
 8001bcc:	41ab      	sbcs	r3, r5
 8001bce:	4334      	orrs	r4, r6
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	4664      	mov	r4, ip
 8001bd4:	40d4      	lsrs	r4, r2
 8001bd6:	1b09      	subs	r1, r1, r4
 8001bd8:	e049      	b.n	8001c6e <__aeabi_dsub+0x47e>
 8001bda:	4660      	mov	r0, ip
 8001bdc:	1bdc      	subs	r4, r3, r7
 8001bde:	1a46      	subs	r6, r0, r1
 8001be0:	42a3      	cmp	r3, r4
 8001be2:	4180      	sbcs	r0, r0
 8001be4:	4240      	negs	r0, r0
 8001be6:	4681      	mov	r9, r0
 8001be8:	0030      	movs	r0, r6
 8001bea:	464e      	mov	r6, r9
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	4681      	mov	r9, r0
 8001bf0:	0200      	lsls	r0, r0, #8
 8001bf2:	d476      	bmi.n	8001ce2 <__aeabi_dsub+0x4f2>
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x40c>
 8001bfa:	e652      	b.n	80018a2 <__aeabi_dsub+0xb2>
 8001bfc:	2400      	movs	r4, #0
 8001bfe:	2500      	movs	r5, #0
 8001c00:	e771      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001c02:	4339      	orrs	r1, r7
 8001c04:	000c      	movs	r4, r1
 8001c06:	1e62      	subs	r2, r4, #1
 8001c08:	4194      	sbcs	r4, r2
 8001c0a:	18e4      	adds	r4, r4, r3
 8001c0c:	429c      	cmp	r4, r3
 8001c0e:	419b      	sbcs	r3, r3
 8001c10:	425b      	negs	r3, r3
 8001c12:	4463      	add	r3, ip
 8001c14:	4699      	mov	r9, r3
 8001c16:	464b      	mov	r3, r9
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	d400      	bmi.n	8001c1e <__aeabi_dsub+0x42e>
 8001c1c:	e756      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	469c      	mov	ip, r3
 8001c22:	4ba8      	ldr	r3, [pc, #672]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001c24:	44e0      	add	r8, ip
 8001c26:	4598      	cmp	r8, r3
 8001c28:	d038      	beq.n	8001c9c <__aeabi_dsub+0x4ac>
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	48a6      	ldr	r0, [pc, #664]	; (8001ec8 <__aeabi_dsub+0x6d8>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4003      	ands	r3, r0
 8001c32:	0018      	movs	r0, r3
 8001c34:	0863      	lsrs	r3, r4, #1
 8001c36:	4014      	ands	r4, r2
 8001c38:	431c      	orrs	r4, r3
 8001c3a:	07c3      	lsls	r3, r0, #31
 8001c3c:	431c      	orrs	r4, r3
 8001c3e:	0843      	lsrs	r3, r0, #1
 8001c40:	4699      	mov	r9, r3
 8001c42:	e657      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001c44:	0010      	movs	r0, r2
 8001c46:	000e      	movs	r6, r1
 8001c48:	3820      	subs	r0, #32
 8001c4a:	40c6      	lsrs	r6, r0
 8001c4c:	2a20      	cmp	r2, #32
 8001c4e:	d004      	beq.n	8001c5a <__aeabi_dsub+0x46a>
 8001c50:	2040      	movs	r0, #64	; 0x40
 8001c52:	1a82      	subs	r2, r0, r2
 8001c54:	4091      	lsls	r1, r2
 8001c56:	430f      	orrs	r7, r1
 8001c58:	46b9      	mov	r9, r7
 8001c5a:	464f      	mov	r7, r9
 8001c5c:	1e7a      	subs	r2, r7, #1
 8001c5e:	4197      	sbcs	r7, r2
 8001c60:	4337      	orrs	r7, r6
 8001c62:	e60f      	b.n	8001884 <__aeabi_dsub+0x94>
 8001c64:	4662      	mov	r2, ip
 8001c66:	431a      	orrs	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	4193      	sbcs	r3, r2
 8001c6e:	1afc      	subs	r4, r7, r3
 8001c70:	42a7      	cmp	r7, r4
 8001c72:	41bf      	sbcs	r7, r7
 8001c74:	427f      	negs	r7, r7
 8001c76:	1bcb      	subs	r3, r1, r7
 8001c78:	4699      	mov	r9, r3
 8001c7a:	465d      	mov	r5, fp
 8001c7c:	4680      	mov	r8, r0
 8001c7e:	e608      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001c80:	4666      	mov	r6, ip
 8001c82:	431e      	orrs	r6, r3
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x498>
 8001c86:	e0be      	b.n	8001e06 <__aeabi_dsub+0x616>
 8001c88:	1e56      	subs	r6, r2, #1
 8001c8a:	2a01      	cmp	r2, #1
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x4a0>
 8001c8e:	e109      	b.n	8001ea4 <__aeabi_dsub+0x6b4>
 8001c90:	4c8c      	ldr	r4, [pc, #560]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001c92:	42a2      	cmp	r2, r4
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x4a8>
 8001c96:	e119      	b.n	8001ecc <__aeabi_dsub+0x6dc>
 8001c98:	0032      	movs	r2, r6
 8001c9a:	e6c1      	b.n	8001a20 <__aeabi_dsub+0x230>
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e648      	b.n	8001936 <__aeabi_dsub+0x146>
 8001ca4:	2020      	movs	r0, #32
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	1a80      	subs	r0, r0, r2
 8001caa:	003e      	movs	r6, r7
 8001cac:	4087      	lsls	r7, r0
 8001cae:	4084      	lsls	r4, r0
 8001cb0:	40d6      	lsrs	r6, r2
 8001cb2:	1e78      	subs	r0, r7, #1
 8001cb4:	4187      	sbcs	r7, r0
 8001cb6:	40d1      	lsrs	r1, r2
 8001cb8:	4334      	orrs	r4, r6
 8001cba:	433c      	orrs	r4, r7
 8001cbc:	448c      	add	ip, r1
 8001cbe:	e7a4      	b.n	8001c0a <__aeabi_dsub+0x41a>
 8001cc0:	4a80      	ldr	r2, [pc, #512]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001cc2:	4290      	cmp	r0, r2
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x4d8>
 8001cc6:	e0e9      	b.n	8001e9c <__aeabi_dsub+0x6ac>
 8001cc8:	19df      	adds	r7, r3, r7
 8001cca:	429f      	cmp	r7, r3
 8001ccc:	419b      	sbcs	r3, r3
 8001cce:	4461      	add	r1, ip
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	18c9      	adds	r1, r1, r3
 8001cd4:	07cc      	lsls	r4, r1, #31
 8001cd6:	087f      	lsrs	r7, r7, #1
 8001cd8:	084b      	lsrs	r3, r1, #1
 8001cda:	4699      	mov	r9, r3
 8001cdc:	4680      	mov	r8, r0
 8001cde:	433c      	orrs	r4, r7
 8001ce0:	e6f4      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001ce2:	1afc      	subs	r4, r7, r3
 8001ce4:	42a7      	cmp	r7, r4
 8001ce6:	41bf      	sbcs	r7, r7
 8001ce8:	4663      	mov	r3, ip
 8001cea:	427f      	negs	r7, r7
 8001cec:	1ac9      	subs	r1, r1, r3
 8001cee:	1bcb      	subs	r3, r1, r7
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	465d      	mov	r5, fp
 8001cf4:	e5d5      	b.n	80018a2 <__aeabi_dsub+0xb2>
 8001cf6:	08ff      	lsrs	r7, r7, #3
 8001cf8:	074b      	lsls	r3, r1, #29
 8001cfa:	465d      	mov	r5, fp
 8001cfc:	433b      	orrs	r3, r7
 8001cfe:	08cc      	lsrs	r4, r1, #3
 8001d00:	e6ee      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001d02:	4662      	mov	r2, ip
 8001d04:	431a      	orrs	r2, r3
 8001d06:	d000      	beq.n	8001d0a <__aeabi_dsub+0x51a>
 8001d08:	e082      	b.n	8001e10 <__aeabi_dsub+0x620>
 8001d0a:	000b      	movs	r3, r1
 8001d0c:	433b      	orrs	r3, r7
 8001d0e:	d11b      	bne.n	8001d48 <__aeabi_dsub+0x558>
 8001d10:	2480      	movs	r4, #128	; 0x80
 8001d12:	2500      	movs	r5, #0
 8001d14:	0324      	lsls	r4, r4, #12
 8001d16:	e6f9      	b.n	8001b0c <__aeabi_dsub+0x31c>
 8001d18:	19dc      	adds	r4, r3, r7
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	419b      	sbcs	r3, r3
 8001d1e:	4461      	add	r1, ip
 8001d20:	4689      	mov	r9, r1
 8001d22:	425b      	negs	r3, r3
 8001d24:	4499      	add	r9, r3
 8001d26:	464b      	mov	r3, r9
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	d444      	bmi.n	8001db6 <__aeabi_dsub+0x5c6>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	4698      	mov	r8, r3
 8001d30:	e6cc      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001d32:	1bdc      	subs	r4, r3, r7
 8001d34:	4662      	mov	r2, ip
 8001d36:	42a3      	cmp	r3, r4
 8001d38:	419b      	sbcs	r3, r3
 8001d3a:	1a51      	subs	r1, r2, r1
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	4699      	mov	r9, r3
 8001d42:	2301      	movs	r3, #1
 8001d44:	4698      	mov	r8, r3
 8001d46:	e5a4      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001d48:	08ff      	lsrs	r7, r7, #3
 8001d4a:	074b      	lsls	r3, r1, #29
 8001d4c:	465d      	mov	r5, fp
 8001d4e:	433b      	orrs	r3, r7
 8001d50:	08cc      	lsrs	r4, r1, #3
 8001d52:	e6d7      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001d54:	4662      	mov	r2, ip
 8001d56:	431a      	orrs	r2, r3
 8001d58:	0014      	movs	r4, r2
 8001d5a:	1e63      	subs	r3, r4, #1
 8001d5c:	419c      	sbcs	r4, r3
 8001d5e:	e679      	b.n	8001a54 <__aeabi_dsub+0x264>
 8001d60:	0015      	movs	r5, r2
 8001d62:	4664      	mov	r4, ip
 8001d64:	3d20      	subs	r5, #32
 8001d66:	40ec      	lsrs	r4, r5
 8001d68:	46a0      	mov	r8, r4
 8001d6a:	2a20      	cmp	r2, #32
 8001d6c:	d005      	beq.n	8001d7a <__aeabi_dsub+0x58a>
 8001d6e:	2540      	movs	r5, #64	; 0x40
 8001d70:	4664      	mov	r4, ip
 8001d72:	1aaa      	subs	r2, r5, r2
 8001d74:	4094      	lsls	r4, r2
 8001d76:	4323      	orrs	r3, r4
 8001d78:	469a      	mov	sl, r3
 8001d7a:	4654      	mov	r4, sl
 8001d7c:	1e63      	subs	r3, r4, #1
 8001d7e:	419c      	sbcs	r4, r3
 8001d80:	4643      	mov	r3, r8
 8001d82:	4323      	orrs	r3, r4
 8001d84:	e773      	b.n	8001c6e <__aeabi_dsub+0x47e>
 8001d86:	4662      	mov	r2, ip
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	d023      	beq.n	8001dd4 <__aeabi_dsub+0x5e4>
 8001d8c:	000a      	movs	r2, r1
 8001d8e:	433a      	orrs	r2, r7
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x5a4>
 8001d92:	e0a0      	b.n	8001ed6 <__aeabi_dsub+0x6e6>
 8001d94:	4662      	mov	r2, ip
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	0752      	lsls	r2, r2, #29
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	08d4      	lsrs	r4, r2, #3
 8001da0:	e6b0      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001da2:	000b      	movs	r3, r1
 8001da4:	433b      	orrs	r3, r7
 8001da6:	d100      	bne.n	8001daa <__aeabi_dsub+0x5ba>
 8001da8:	e728      	b.n	8001bfc <__aeabi_dsub+0x40c>
 8001daa:	08ff      	lsrs	r7, r7, #3
 8001dac:	074b      	lsls	r3, r1, #29
 8001dae:	465d      	mov	r5, fp
 8001db0:	433b      	orrs	r3, r7
 8001db2:	08cc      	lsrs	r4, r1, #3
 8001db4:	e697      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001db6:	2302      	movs	r3, #2
 8001db8:	4698      	mov	r8, r3
 8001dba:	e736      	b.n	8001c2a <__aeabi_dsub+0x43a>
 8001dbc:	1afc      	subs	r4, r7, r3
 8001dbe:	42a7      	cmp	r7, r4
 8001dc0:	41bf      	sbcs	r7, r7
 8001dc2:	4663      	mov	r3, ip
 8001dc4:	427f      	negs	r7, r7
 8001dc6:	1ac9      	subs	r1, r1, r3
 8001dc8:	1bcb      	subs	r3, r1, r7
 8001dca:	4699      	mov	r9, r3
 8001dcc:	2301      	movs	r3, #1
 8001dce:	465d      	mov	r5, fp
 8001dd0:	4698      	mov	r8, r3
 8001dd2:	e55e      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001dd4:	074b      	lsls	r3, r1, #29
 8001dd6:	08ff      	lsrs	r7, r7, #3
 8001dd8:	433b      	orrs	r3, r7
 8001dda:	08cc      	lsrs	r4, r1, #3
 8001ddc:	e692      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001dde:	1bdc      	subs	r4, r3, r7
 8001de0:	4660      	mov	r0, ip
 8001de2:	42a3      	cmp	r3, r4
 8001de4:	41b6      	sbcs	r6, r6
 8001de6:	1a40      	subs	r0, r0, r1
 8001de8:	4276      	negs	r6, r6
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	4681      	mov	r9, r0
 8001dee:	0200      	lsls	r0, r0, #8
 8001df0:	d560      	bpl.n	8001eb4 <__aeabi_dsub+0x6c4>
 8001df2:	1afc      	subs	r4, r7, r3
 8001df4:	42a7      	cmp	r7, r4
 8001df6:	41bf      	sbcs	r7, r7
 8001df8:	4663      	mov	r3, ip
 8001dfa:	427f      	negs	r7, r7
 8001dfc:	1ac9      	subs	r1, r1, r3
 8001dfe:	1bcb      	subs	r3, r1, r7
 8001e00:	4699      	mov	r9, r3
 8001e02:	465d      	mov	r5, fp
 8001e04:	e576      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	074b      	lsls	r3, r1, #29
 8001e0a:	433b      	orrs	r3, r7
 8001e0c:	08cc      	lsrs	r4, r1, #3
 8001e0e:	e667      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001e10:	000a      	movs	r2, r1
 8001e12:	08db      	lsrs	r3, r3, #3
 8001e14:	433a      	orrs	r2, r7
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x62a>
 8001e18:	e66f      	b.n	8001afa <__aeabi_dsub+0x30a>
 8001e1a:	4662      	mov	r2, ip
 8001e1c:	0752      	lsls	r2, r2, #29
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	4662      	mov	r2, ip
 8001e22:	08d4      	lsrs	r4, r2, #3
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	0312      	lsls	r2, r2, #12
 8001e28:	4214      	tst	r4, r2
 8001e2a:	d007      	beq.n	8001e3c <__aeabi_dsub+0x64c>
 8001e2c:	08c8      	lsrs	r0, r1, #3
 8001e2e:	4210      	tst	r0, r2
 8001e30:	d104      	bne.n	8001e3c <__aeabi_dsub+0x64c>
 8001e32:	465d      	mov	r5, fp
 8001e34:	0004      	movs	r4, r0
 8001e36:	08fb      	lsrs	r3, r7, #3
 8001e38:	0749      	lsls	r1, r1, #29
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	0f5a      	lsrs	r2, r3, #29
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	0752      	lsls	r2, r2, #29
 8001e44:	4313      	orrs	r3, r2
 8001e46:	e65d      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001e48:	074b      	lsls	r3, r1, #29
 8001e4a:	08ff      	lsrs	r7, r7, #3
 8001e4c:	433b      	orrs	r3, r7
 8001e4e:	08cc      	lsrs	r4, r1, #3
 8001e50:	e649      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001e52:	19dc      	adds	r4, r3, r7
 8001e54:	429c      	cmp	r4, r3
 8001e56:	419b      	sbcs	r3, r3
 8001e58:	4461      	add	r1, ip
 8001e5a:	4689      	mov	r9, r1
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	4499      	add	r9, r3
 8001e60:	464b      	mov	r3, r9
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	d400      	bmi.n	8001e68 <__aeabi_dsub+0x678>
 8001e66:	e631      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <__aeabi_dsub+0x6d8>)
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2301      	movs	r3, #1
 8001e70:	4691      	mov	r9, r2
 8001e72:	4698      	mov	r8, r3
 8001e74:	e62a      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001e76:	0016      	movs	r6, r2
 8001e78:	4664      	mov	r4, ip
 8001e7a:	3e20      	subs	r6, #32
 8001e7c:	40f4      	lsrs	r4, r6
 8001e7e:	46a0      	mov	r8, r4
 8001e80:	2a20      	cmp	r2, #32
 8001e82:	d005      	beq.n	8001e90 <__aeabi_dsub+0x6a0>
 8001e84:	2640      	movs	r6, #64	; 0x40
 8001e86:	4664      	mov	r4, ip
 8001e88:	1ab2      	subs	r2, r6, r2
 8001e8a:	4094      	lsls	r4, r2
 8001e8c:	4323      	orrs	r3, r4
 8001e8e:	469a      	mov	sl, r3
 8001e90:	4654      	mov	r4, sl
 8001e92:	1e63      	subs	r3, r4, #1
 8001e94:	419c      	sbcs	r4, r3
 8001e96:	4643      	mov	r3, r8
 8001e98:	431c      	orrs	r4, r3
 8001e9a:	e5db      	b.n	8001a54 <__aeabi_dsub+0x264>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	2400      	movs	r4, #0
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e548      	b.n	8001936 <__aeabi_dsub+0x146>
 8001ea4:	19dc      	adds	r4, r3, r7
 8001ea6:	42bc      	cmp	r4, r7
 8001ea8:	41bf      	sbcs	r7, r7
 8001eaa:	4461      	add	r1, ip
 8001eac:	4689      	mov	r9, r1
 8001eae:	427f      	negs	r7, r7
 8001eb0:	44b9      	add	r9, r7
 8001eb2:	e738      	b.n	8001d26 <__aeabi_dsub+0x536>
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x6cc>
 8001eba:	e69f      	b.n	8001bfc <__aeabi_dsub+0x40c>
 8001ebc:	e606      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	000007fe 	.word	0x000007fe
 8001ec4:	000007ff 	.word	0x000007ff
 8001ec8:	ff7fffff 	.word	0xff7fffff
 8001ecc:	08ff      	lsrs	r7, r7, #3
 8001ece:	074b      	lsls	r3, r1, #29
 8001ed0:	433b      	orrs	r3, r7
 8001ed2:	08cc      	lsrs	r4, r1, #3
 8001ed4:	e616      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001ed6:	4662      	mov	r2, ip
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	0752      	lsls	r2, r2, #29
 8001edc:	4313      	orrs	r3, r2
 8001ede:	4662      	mov	r2, ip
 8001ee0:	08d4      	lsrs	r4, r2, #3
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	0312      	lsls	r2, r2, #12
 8001ee6:	4214      	tst	r4, r2
 8001ee8:	d007      	beq.n	8001efa <__aeabi_dsub+0x70a>
 8001eea:	08c8      	lsrs	r0, r1, #3
 8001eec:	4210      	tst	r0, r2
 8001eee:	d104      	bne.n	8001efa <__aeabi_dsub+0x70a>
 8001ef0:	465d      	mov	r5, fp
 8001ef2:	0004      	movs	r4, r0
 8001ef4:	08fb      	lsrs	r3, r7, #3
 8001ef6:	0749      	lsls	r1, r1, #29
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	0f5a      	lsrs	r2, r3, #29
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	0752      	lsls	r2, r2, #29
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	e5fe      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001f06:	2300      	movs	r3, #0
 8001f08:	4a01      	ldr	r2, [pc, #4]	; (8001f10 <__aeabi_dsub+0x720>)
 8001f0a:	001c      	movs	r4, r3
 8001f0c:	e513      	b.n	8001936 <__aeabi_dsub+0x146>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__aeabi_dcmpun>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	0005      	movs	r5, r0
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <__aeabi_dcmpun+0x38>)
 8001f1a:	031c      	lsls	r4, r3, #12
 8001f1c:	0016      	movs	r6, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	030a      	lsls	r2, r1, #12
 8001f22:	0049      	lsls	r1, r1, #1
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	0d49      	lsrs	r1, r1, #21
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	0d5b      	lsrs	r3, r3, #21
 8001f2c:	4281      	cmp	r1, r0
 8001f2e:	d008      	beq.n	8001f42 <__aeabi_dcmpun+0x2e>
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <__aeabi_dcmpun+0x38>)
 8001f32:	2000      	movs	r0, #0
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d103      	bne.n	8001f40 <__aeabi_dcmpun+0x2c>
 8001f38:	0020      	movs	r0, r4
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	1e43      	subs	r3, r0, #1
 8001f3e:	4198      	sbcs	r0, r3
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	2001      	movs	r0, #1
 8001f44:	432a      	orrs	r2, r5
 8001f46:	d1fb      	bne.n	8001f40 <__aeabi_dcmpun+0x2c>
 8001f48:	e7f2      	b.n	8001f30 <__aeabi_dcmpun+0x1c>
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	000007ff 	.word	0x000007ff

08001f50 <__aeabi_d2iz>:
 8001f50:	000a      	movs	r2, r1
 8001f52:	b530      	push	{r4, r5, lr}
 8001f54:	4c13      	ldr	r4, [pc, #76]	; (8001fa4 <__aeabi_d2iz+0x54>)
 8001f56:	0053      	lsls	r3, r2, #1
 8001f58:	0309      	lsls	r1, r1, #12
 8001f5a:	0005      	movs	r5, r0
 8001f5c:	0b09      	lsrs	r1, r1, #12
 8001f5e:	2000      	movs	r0, #0
 8001f60:	0d5b      	lsrs	r3, r3, #21
 8001f62:	0fd2      	lsrs	r2, r2, #31
 8001f64:	42a3      	cmp	r3, r4
 8001f66:	dd04      	ble.n	8001f72 <__aeabi_d2iz+0x22>
 8001f68:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <__aeabi_d2iz+0x58>)
 8001f6a:	4283      	cmp	r3, r0
 8001f6c:	dd02      	ble.n	8001f74 <__aeabi_d2iz+0x24>
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <__aeabi_d2iz+0x5c>)
 8001f70:	18d0      	adds	r0, r2, r3
 8001f72:	bd30      	pop	{r4, r5, pc}
 8001f74:	2080      	movs	r0, #128	; 0x80
 8001f76:	0340      	lsls	r0, r0, #13
 8001f78:	4301      	orrs	r1, r0
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <__aeabi_d2iz+0x60>)
 8001f7c:	1ac0      	subs	r0, r0, r3
 8001f7e:	281f      	cmp	r0, #31
 8001f80:	dd08      	ble.n	8001f94 <__aeabi_d2iz+0x44>
 8001f82:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <__aeabi_d2iz+0x64>)
 8001f84:	1ac3      	subs	r3, r0, r3
 8001f86:	40d9      	lsrs	r1, r3
 8001f88:	000b      	movs	r3, r1
 8001f8a:	4258      	negs	r0, r3
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	d1f0      	bne.n	8001f72 <__aeabi_d2iz+0x22>
 8001f90:	0018      	movs	r0, r3
 8001f92:	e7ee      	b.n	8001f72 <__aeabi_d2iz+0x22>
 8001f94:	4c08      	ldr	r4, [pc, #32]	; (8001fb8 <__aeabi_d2iz+0x68>)
 8001f96:	40c5      	lsrs	r5, r0
 8001f98:	46a4      	mov	ip, r4
 8001f9a:	4463      	add	r3, ip
 8001f9c:	4099      	lsls	r1, r3
 8001f9e:	000b      	movs	r3, r1
 8001fa0:	432b      	orrs	r3, r5
 8001fa2:	e7f2      	b.n	8001f8a <__aeabi_d2iz+0x3a>
 8001fa4:	000003fe 	.word	0x000003fe
 8001fa8:	0000041d 	.word	0x0000041d
 8001fac:	7fffffff 	.word	0x7fffffff
 8001fb0:	00000433 	.word	0x00000433
 8001fb4:	00000413 	.word	0x00000413
 8001fb8:	fffffbed 	.word	0xfffffbed

08001fbc <__aeabi_i2d>:
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d016      	beq.n	8001ff0 <__aeabi_i2d+0x34>
 8001fc2:	17c3      	asrs	r3, r0, #31
 8001fc4:	18c5      	adds	r5, r0, r3
 8001fc6:	405d      	eors	r5, r3
 8001fc8:	0fc4      	lsrs	r4, r0, #31
 8001fca:	0028      	movs	r0, r5
 8001fcc:	f000 f84c 	bl	8002068 <__clzsi2>
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <__aeabi_i2d+0x5c>)
 8001fd2:	1a12      	subs	r2, r2, r0
 8001fd4:	280a      	cmp	r0, #10
 8001fd6:	dc16      	bgt.n	8002006 <__aeabi_i2d+0x4a>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	002e      	movs	r6, r5
 8001fdc:	3315      	adds	r3, #21
 8001fde:	409e      	lsls	r6, r3
 8001fe0:	230b      	movs	r3, #11
 8001fe2:	1a18      	subs	r0, r3, r0
 8001fe4:	40c5      	lsrs	r5, r0
 8001fe6:	0552      	lsls	r2, r2, #21
 8001fe8:	032d      	lsls	r5, r5, #12
 8001fea:	0b2d      	lsrs	r5, r5, #12
 8001fec:	0d53      	lsrs	r3, r2, #21
 8001fee:	e003      	b.n	8001ff8 <__aeabi_i2d+0x3c>
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2500      	movs	r5, #0
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	051b      	lsls	r3, r3, #20
 8001ffa:	432b      	orrs	r3, r5
 8001ffc:	07e4      	lsls	r4, r4, #31
 8001ffe:	4323      	orrs	r3, r4
 8002000:	0030      	movs	r0, r6
 8002002:	0019      	movs	r1, r3
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	380b      	subs	r0, #11
 8002008:	4085      	lsls	r5, r0
 800200a:	0552      	lsls	r2, r2, #21
 800200c:	032d      	lsls	r5, r5, #12
 800200e:	2600      	movs	r6, #0
 8002010:	0b2d      	lsrs	r5, r5, #12
 8002012:	0d53      	lsrs	r3, r2, #21
 8002014:	e7f0      	b.n	8001ff8 <__aeabi_i2d+0x3c>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	0000041e 	.word	0x0000041e

0800201c <__aeabi_ui2d>:
 800201c:	b510      	push	{r4, lr}
 800201e:	1e04      	subs	r4, r0, #0
 8002020:	d010      	beq.n	8002044 <__aeabi_ui2d+0x28>
 8002022:	f000 f821 	bl	8002068 <__clzsi2>
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <__aeabi_ui2d+0x48>)
 8002028:	1a1b      	subs	r3, r3, r0
 800202a:	280a      	cmp	r0, #10
 800202c:	dc11      	bgt.n	8002052 <__aeabi_ui2d+0x36>
 800202e:	220b      	movs	r2, #11
 8002030:	0021      	movs	r1, r4
 8002032:	1a12      	subs	r2, r2, r0
 8002034:	40d1      	lsrs	r1, r2
 8002036:	3015      	adds	r0, #21
 8002038:	030a      	lsls	r2, r1, #12
 800203a:	055b      	lsls	r3, r3, #21
 800203c:	4084      	lsls	r4, r0
 800203e:	0b12      	lsrs	r2, r2, #12
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	e001      	b.n	8002048 <__aeabi_ui2d+0x2c>
 8002044:	2300      	movs	r3, #0
 8002046:	2200      	movs	r2, #0
 8002048:	051b      	lsls	r3, r3, #20
 800204a:	4313      	orrs	r3, r2
 800204c:	0020      	movs	r0, r4
 800204e:	0019      	movs	r1, r3
 8002050:	bd10      	pop	{r4, pc}
 8002052:	0022      	movs	r2, r4
 8002054:	380b      	subs	r0, #11
 8002056:	4082      	lsls	r2, r0
 8002058:	055b      	lsls	r3, r3, #21
 800205a:	0312      	lsls	r2, r2, #12
 800205c:	2400      	movs	r4, #0
 800205e:	0b12      	lsrs	r2, r2, #12
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	e7f1      	b.n	8002048 <__aeabi_ui2d+0x2c>
 8002064:	0000041e 	.word	0x0000041e

08002068 <__clzsi2>:
 8002068:	211c      	movs	r1, #28
 800206a:	2301      	movs	r3, #1
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	4298      	cmp	r0, r3
 8002070:	d301      	bcc.n	8002076 <__clzsi2+0xe>
 8002072:	0c00      	lsrs	r0, r0, #16
 8002074:	3910      	subs	r1, #16
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	4298      	cmp	r0, r3
 800207a:	d301      	bcc.n	8002080 <__clzsi2+0x18>
 800207c:	0a00      	lsrs	r0, r0, #8
 800207e:	3908      	subs	r1, #8
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	4298      	cmp	r0, r3
 8002084:	d301      	bcc.n	800208a <__clzsi2+0x22>
 8002086:	0900      	lsrs	r0, r0, #4
 8002088:	3904      	subs	r1, #4
 800208a:	a202      	add	r2, pc, #8	; (adr r2, 8002094 <__clzsi2+0x2c>)
 800208c:	5c10      	ldrb	r0, [r2, r0]
 800208e:	1840      	adds	r0, r0, r1
 8002090:	4770      	bx	lr
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	02020304 	.word	0x02020304
 8002098:	01010101 	.word	0x01010101
	...

080020a4 <ADC_Channel_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Channel_Config()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <ADC_Channel_Config+0x34>)
 80020ac:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]

	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ba:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <ADC_Channel_Config+0x38>)
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f001 f8db 	bl	800327c <HAL_ADC_ConfigChannel>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d001      	beq.n	80020ce <ADC_Channel_Config+0x2a>
	{
		Error_Handler();
 80020ca:	f000 fa17 	bl	80024fc <Error_Handler>
	}
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200002c8 	.word	0x200002c8
 80020d8:	0c000008 	.word	0x0c000008
 80020dc:	2000020c 	.word	0x2000020c

080020e0 <Read_Sensors>:

void Read_Sensors()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_SENSORS; ++i)
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	e02d      	b.n	8002148 <Read_Sensors+0x68>
	{
		sConfig.Channel = channels[i];
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <Read_Sensors+0x78>)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	58d2      	ldr	r2, [r2, r3]
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <Read_Sensors+0x7c>)
 80020f6:	601a      	str	r2, [r3, #0]
		if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f8:	4a18      	ldr	r2, [pc, #96]	; (800215c <Read_Sensors+0x7c>)
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <Read_Sensors+0x80>)
 80020fc:	0011      	movs	r1, r2
 80020fe:	0018      	movs	r0, r3
 8002100:	f001 f8bc 	bl	800327c <HAL_ADC_ConfigChannel>
 8002104:	1e03      	subs	r3, r0, #0
 8002106:	d001      	beq.n	800210c <Read_Sensors+0x2c>
		{
			Error_Handler();
 8002108:	f000 f9f8 	bl	80024fc <Error_Handler>
		}

		HAL_ADC_Start(&hadc1);
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <Read_Sensors+0x80>)
 800210e:	0018      	movs	r0, r3
 8002110:	f000 ff8a 	bl	8003028 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8002114:	2301      	movs	r3, #1
 8002116:	425a      	negs	r2, r3
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <Read_Sensors+0x80>)
 800211a:	0011      	movs	r1, r2
 800211c:	0018      	movs	r0, r3
 800211e:	f001 f80d 	bl	800313c <HAL_ADC_PollForConversion>
 8002122:	1e03      	subs	r3, r0, #0
 8002124:	d109      	bne.n	800213a <Read_Sensors+0x5a>
		{
			values[i] = HAL_ADC_GetValue(&hadc1);
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <Read_Sensors+0x80>)
 8002128:	0018      	movs	r0, r3
 800212a:	f001 f89b 	bl	8003264 <HAL_ADC_GetValue>
 800212e:	0003      	movs	r3, r0
 8002130:	b299      	uxth	r1, r3
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <Read_Sensors+0x84>)
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	52d1      	strh	r1, [r2, r3]
		}
		HAL_ADC_Stop(&hadc1);
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <Read_Sensors+0x80>)
 800213c:	0018      	movs	r0, r3
 800213e:	f000 ffc1 	bl	80030c4 <HAL_ADC_Stop>
	for(int i = 0; i < NUM_SENSORS; ++i)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3301      	adds	r3, #1
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b04      	cmp	r3, #4
 800214c:	ddce      	ble.n	80020ec <Read_Sensors+0xc>
	*(values + channel) = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	HAL_Delay(100);
}
	 */
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000000 	.word	0x20000000
 800215c:	200002c8 	.word	0x200002c8
 8002160:	2000020c 	.word	0x2000020c
 8002164:	200002bc 	.word	0x200002bc

08002168 <Determine_Turns>:

uint8_t Determine_Turns()
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	Read_Sensors();
 800216e:	f7ff ffb7 	bl	80020e0 <Read_Sensors>

	uint8_t turn = 10;
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	220a      	movs	r2, #10
 8002176:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < NUM_SENSORS; ++i)
 8002178:	2300      	movs	r3, #0
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	e00f      	b.n	800219e <Determine_Turns+0x36>
	{
		// going through each sensor.
		// turn = 0 is bottom is all is covered
		// values go lower if they are blocked.
		// Assume that all are blocked.
		if(values[i] > THRESHOLD && turn > 5)
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <Determine_Turns+0x48>)
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	0052      	lsls	r2, r2, #1
 8002184:	5ad3      	ldrh	r3, [r2, r3]
 8002186:	2b0f      	cmp	r3, #15
 8002188:	d906      	bls.n	8002198 <Determine_Turns+0x30>
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b05      	cmp	r3, #5
 8002190:	d902      	bls.n	8002198 <Determine_Turns+0x30>
		{
			turn = i;
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_SENSORS; ++i)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	3301      	adds	r3, #1
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	ddec      	ble.n	800217e <Determine_Turns+0x16>
		}
	}

	return turn;
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	781b      	ldrb	r3, [r3, #0]
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	200002bc 	.word	0x200002bc

080021b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b8:	f000 fb80 	bl	80028bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021bc:	f000 f81a 	bl	80021f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c0:	f000 f956 	bl	8002470 <MX_GPIO_Init>
  MX_ADC1_Init();
 80021c4:	f000 f85e 	bl	8002284 <MX_ADC1_Init>
  MX_I2C2_Init();
 80021c8:	f000 f912 	bl	80023f0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Channel_Config();
 80021cc:	f7ff ff6a 	bl	80020a4 <ADC_Channel_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  turn_count = Determine_Turns();
 80021d0:	f7ff ffca 	bl	8002168 <Determine_Turns>
 80021d4:	0003      	movs	r3, r0
 80021d6:	001a      	movs	r2, r3
 80021d8:	4b04      	ldr	r3, [pc, #16]	; (80021ec <main+0x38>)
 80021da:	701a      	strb	r2, [r3, #0]

	  HAL_I2C_Slave_Transmit(&hi2c2, &turn_count, 1, 100);
 80021dc:	4903      	ldr	r1, [pc, #12]	; (80021ec <main+0x38>)
 80021de:	4804      	ldr	r0, [pc, #16]	; (80021f0 <main+0x3c>)
 80021e0:	2364      	movs	r3, #100	; 0x64
 80021e2:	2201      	movs	r2, #1
 80021e4:	f001 feb4 	bl	8003f50 <HAL_I2C_Slave_Transmit>
	  turn_count = Determine_Turns();
 80021e8:	e7f2      	b.n	80021d0 <main+0x1c>
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	200002c6 	.word	0x200002c6
 80021f0:	20000270 	.word	0x20000270

080021f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b093      	sub	sp, #76	; 0x4c
 80021f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fa:	2414      	movs	r4, #20
 80021fc:	193b      	adds	r3, r7, r4
 80021fe:	0018      	movs	r0, r3
 8002200:	2334      	movs	r3, #52	; 0x34
 8002202:	001a      	movs	r2, r3
 8002204:	2100      	movs	r1, #0
 8002206:	f003 fc8f 	bl	8005b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	0018      	movs	r0, r3
 800220e:	2310      	movs	r3, #16
 8002210:	001a      	movs	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	f003 fc88 	bl	8005b28 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	0018      	movs	r0, r3
 800221e:	f002 ff79 	bl	8005114 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2202      	movs	r2, #2
 8002226:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	2280      	movs	r2, #128	; 0x80
 800222c:	0052      	lsls	r2, r2, #1
 800222e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002230:	193b      	adds	r3, r7, r4
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002236:	193b      	adds	r3, r7, r4
 8002238:	2240      	movs	r2, #64	; 0x40
 800223a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800223c:	193b      	adds	r3, r7, r4
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002242:	193b      	adds	r3, r7, r4
 8002244:	0018      	movs	r0, r3
 8002246:	f002 ffa5 	bl	8005194 <HAL_RCC_OscConfig>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d001      	beq.n	8002252 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800224e:	f000 f955 	bl	80024fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	2207      	movs	r2, #7
 8002256:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002258:	1d3b      	adds	r3, r7, #4
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002264:	1d3b      	adds	r3, r7, #4
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2100      	movs	r1, #0
 800226e:	0018      	movs	r0, r3
 8002270:	f003 faa6 	bl	80057c0 <HAL_RCC_ClockConfig>
 8002274:	1e03      	subs	r3, r0, #0
 8002276:	d001      	beq.n	800227c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002278:	f000 f940 	bl	80024fc <Error_Handler>
  }
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	b013      	add	sp, #76	; 0x4c
 8002282:	bd90      	pop	{r4, r7, pc}

08002284 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	0018      	movs	r0, r3
 800228e:	230c      	movs	r3, #12
 8002290:	001a      	movs	r2, r3
 8002292:	2100      	movs	r1, #0
 8002294:	f003 fc48 	bl	8005b28 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002298:	4b4e      	ldr	r3, [pc, #312]	; (80023d4 <MX_ADC1_Init+0x150>)
 800229a:	4a4f      	ldr	r2, [pc, #316]	; (80023d8 <MX_ADC1_Init+0x154>)
 800229c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800229e:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	05d2      	lsls	r2, r2, #23
 80022a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 80022a6:	4b4b      	ldr	r3, [pc, #300]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022a8:	2218      	movs	r2, #24
 80022aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ac:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022b2:	4b48      	ldr	r3, [pc, #288]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022b4:	2280      	movs	r2, #128	; 0x80
 80022b6:	0392      	lsls	r2, r2, #14
 80022b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022ba:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022bc:	2204      	movs	r2, #4
 80022be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022c0:	4b44      	ldr	r3, [pc, #272]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022cc:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 80022d2:	4b40      	ldr	r3, [pc, #256]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022d4:	2205      	movs	r2, #5
 80022d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80022d8:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022da:	2220      	movs	r2, #32
 80022dc:	2101      	movs	r1, #1
 80022de:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022e0:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022ee:	222c      	movs	r2, #44	; 0x2c
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022f4:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80022fa:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <MX_ADC1_Init+0x150>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002300:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <MX_ADC1_Init+0x150>)
 8002302:	2200      	movs	r2, #0
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <MX_ADC1_Init+0x150>)
 8002308:	223c      	movs	r2, #60	; 0x3c
 800230a:	2100      	movs	r1, #0
 800230c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <MX_ADC1_Init+0x150>)
 8002310:	2200      	movs	r2, #0
 8002312:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <MX_ADC1_Init+0x150>)
 8002316:	0018      	movs	r0, r3
 8002318:	f000 fca8 	bl	8002c6c <HAL_ADC_Init>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d001      	beq.n	8002324 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002320:	f000 f8ec 	bl	80024fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	4a2d      	ldr	r2, [pc, #180]	; (80023dc <MX_ADC1_Init+0x158>)
 8002328:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800232a:	1d3b      	adds	r3, r7, #4
 800232c:	2200      	movs	r2, #0
 800232e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002336:	1d3a      	adds	r2, r7, #4
 8002338:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <MX_ADC1_Init+0x150>)
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f000 ff9d 	bl	800327c <HAL_ADC_ConfigChannel>
 8002342:	1e03      	subs	r3, r0, #0
 8002344:	d001      	beq.n	800234a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002346:	f000 f8d9 	bl	80024fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4a24      	ldr	r2, [pc, #144]	; (80023e0 <MX_ADC1_Init+0x15c>)
 800234e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2204      	movs	r2, #4
 8002354:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002356:	1d3a      	adds	r2, r7, #4
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <MX_ADC1_Init+0x150>)
 800235a:	0011      	movs	r1, r2
 800235c:	0018      	movs	r0, r3
 800235e:	f000 ff8d 	bl	800327c <HAL_ADC_ConfigChannel>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002366:	f000 f8c9 	bl	80024fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	4a1d      	ldr	r2, [pc, #116]	; (80023e4 <MX_ADC1_Init+0x160>)
 800236e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2208      	movs	r2, #8
 8002374:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002376:	1d3a      	adds	r2, r7, #4
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_ADC1_Init+0x150>)
 800237a:	0011      	movs	r1, r2
 800237c:	0018      	movs	r0, r3
 800237e:	f000 ff7d 	bl	800327c <HAL_ADC_ConfigChannel>
 8002382:	1e03      	subs	r3, r0, #0
 8002384:	d001      	beq.n	800238a <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8002386:	f000 f8b9 	bl	80024fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <MX_ADC1_Init+0x164>)
 800238e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	220c      	movs	r2, #12
 8002394:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002396:	1d3a      	adds	r2, r7, #4
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_ADC1_Init+0x150>)
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f000 ff6d 	bl	800327c <HAL_ADC_ConfigChannel>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d001      	beq.n	80023aa <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80023a6:	f000 f8a9 	bl	80024fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <MX_ADC1_Init+0x168>)
 80023ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2210      	movs	r2, #16
 80023b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023b6:	1d3a      	adds	r2, r7, #4
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_ADC1_Init+0x150>)
 80023ba:	0011      	movs	r1, r2
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 ff5d 	bl	800327c <HAL_ADC_ConfigChannel>
 80023c2:	1e03      	subs	r3, r0, #0
 80023c4:	d001      	beq.n	80023ca <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 80023c6:	f000 f899 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b004      	add	sp, #16
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	2000020c 	.word	0x2000020c
 80023d8:	40012400 	.word	0x40012400
 80023dc:	0c000008 	.word	0x0c000008
 80023e0:	10000010 	.word	0x10000010
 80023e4:	14000020 	.word	0x14000020
 80023e8:	18000040 	.word	0x18000040
 80023ec:	1c000080 	.word	0x1c000080

080023f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <MX_I2C2_Init+0x74>)
 80023f6:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <MX_I2C2_Init+0x78>)
 80023f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_I2C2_Init+0x74>)
 80023fc:	4a1b      	ldr	r2, [pc, #108]	; (800246c <MX_I2C2_Init+0x7c>)
 80023fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 128;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <MX_I2C2_Init+0x74>)
 8002402:	2280      	movs	r2, #128	; 0x80
 8002404:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_I2C2_Init+0x74>)
 8002408:	2201      	movs	r2, #1
 800240a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <MX_I2C2_Init+0x74>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_I2C2_Init+0x74>)
 8002414:	2200      	movs	r2, #0
 8002416:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <MX_I2C2_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_I2C2_Init+0x74>)
 8002420:	2200      	movs	r2, #0
 8002422:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_I2C2_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <MX_I2C2_Init+0x74>)
 800242c:	0018      	movs	r0, r3
 800242e:	f001 fcf9 	bl	8003e24 <HAL_I2C_Init>
 8002432:	1e03      	subs	r3, r0, #0
 8002434:	d001      	beq.n	800243a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002436:	f000 f861 	bl	80024fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <MX_I2C2_Init+0x74>)
 800243c:	2100      	movs	r1, #0
 800243e:	0018      	movs	r0, r3
 8002440:	f002 fdd0 	bl	8004fe4 <HAL_I2CEx_ConfigAnalogFilter>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d001      	beq.n	800244c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002448:	f000 f858 	bl	80024fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <MX_I2C2_Init+0x74>)
 800244e:	2100      	movs	r1, #0
 8002450:	0018      	movs	r0, r3
 8002452:	f002 fe13 	bl	800507c <HAL_I2CEx_ConfigDigitalFilter>
 8002456:	1e03      	subs	r3, r0, #0
 8002458:	d001      	beq.n	800245e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800245a:	f000 f84f 	bl	80024fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000270 	.word	0x20000270
 8002468:	40005800 	.word	0x40005800
 800246c:	00303d5b 	.word	0x00303d5b

08002470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002476:	240c      	movs	r4, #12
 8002478:	193b      	adds	r3, r7, r4
 800247a:	0018      	movs	r0, r3
 800247c:	2314      	movs	r3, #20
 800247e:	001a      	movs	r2, r3
 8002480:	2100      	movs	r1, #0
 8002482:	f003 fb51 	bl	8005b28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <MX_GPIO_Init+0x88>)
 8002488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <MX_GPIO_Init+0x88>)
 800248c:	2101      	movs	r1, #1
 800248e:	430a      	orrs	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	; 0x34
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <MX_GPIO_Init+0x88>)
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	2201      	movs	r2, #1
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_GPIO_Init+0x88>)
 80024a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <MX_GPIO_Init+0x88>)
 80024a4:	2102      	movs	r1, #2
 80024a6:	430a      	orrs	r2, r1
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <MX_GPIO_Init+0x88>)
 80024ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	607b      	str	r3, [r7, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	0219      	lsls	r1, r3, #8
 80024ba:	23a0      	movs	r3, #160	; 0xa0
 80024bc:	05db      	lsls	r3, r3, #23
 80024be:	2200      	movs	r2, #0
 80024c0:	0018      	movs	r0, r3
 80024c2:	f001 fc91 	bl	8003de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0212      	lsls	r2, r2, #8
 80024cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	2201      	movs	r2, #1
 80024d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	193b      	adds	r3, r7, r4
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024da:	193b      	adds	r3, r7, r4
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e0:	193a      	adds	r2, r7, r4
 80024e2:	23a0      	movs	r3, #160	; 0xa0
 80024e4:	05db      	lsls	r3, r3, #23
 80024e6:	0011      	movs	r1, r2
 80024e8:	0018      	movs	r0, r3
 80024ea:	f001 fb19 	bl	8003b20 <HAL_GPIO_Init>

}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b009      	add	sp, #36	; 0x24
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	40021000 	.word	0x40021000

080024fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002500:	b672      	cpsid	i
}
 8002502:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002504:	e7fe      	b.n	8002504 <Error_Handler+0x8>
	...

08002508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_MspInit+0x44>)
 8002510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_MspInit+0x44>)
 8002514:	2101      	movs	r1, #1
 8002516:	430a      	orrs	r2, r1
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_MspInit+0x44>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2201      	movs	r2, #1
 8002520:	4013      	ands	r3, r2
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_MspInit+0x44>)
 8002528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HAL_MspInit+0x44>)
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0549      	lsls	r1, r1, #21
 8002530:	430a      	orrs	r2, r1
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
 8002534:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_MspInit+0x44>)
 8002536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	055b      	lsls	r3, r3, #21
 800253c:	4013      	ands	r3, r2
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	40021000 	.word	0x40021000

08002550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	2414      	movs	r4, #20
 800255a:	193b      	adds	r3, r7, r4
 800255c:	0018      	movs	r0, r3
 800255e:	2314      	movs	r3, #20
 8002560:	001a      	movs	r2, r3
 8002562:	2100      	movs	r1, #0
 8002564:	f003 fae0 	bl	8005b28 <memset>
  if(hadc->Instance==ADC1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <HAL_ADC_MspInit+0x80>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d129      	bne.n	80025c6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_ADC_MspInit+0x84>)
 8002574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_ADC_MspInit+0x84>)
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	0349      	lsls	r1, r1, #13
 800257c:	430a      	orrs	r2, r1
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_ADC_MspInit+0x84>)
 8002582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	035b      	lsls	r3, r3, #13
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <HAL_ADC_MspInit+0x84>)
 8002590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_ADC_MspInit+0x84>)
 8002594:	2101      	movs	r1, #1
 8002596:	430a      	orrs	r2, r1
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <HAL_ADC_MspInit+0x84>)
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	2201      	movs	r2, #1
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80025a6:	193b      	adds	r3, r7, r4
 80025a8:	22f9      	movs	r2, #249	; 0xf9
 80025aa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	2203      	movs	r2, #3
 80025b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b8:	193a      	adds	r2, r7, r4
 80025ba:	23a0      	movs	r3, #160	; 0xa0
 80025bc:	05db      	lsls	r3, r3, #23
 80025be:	0011      	movs	r1, r2
 80025c0:	0018      	movs	r0, r3
 80025c2:	f001 faad 	bl	8003b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b00b      	add	sp, #44	; 0x2c
 80025cc:	bd90      	pop	{r4, r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	40012400 	.word	0x40012400
 80025d4:	40021000 	.word	0x40021000

080025d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b08b      	sub	sp, #44	; 0x2c
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	2414      	movs	r4, #20
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	0018      	movs	r0, r3
 80025e6:	2314      	movs	r3, #20
 80025e8:	001a      	movs	r2, r3
 80025ea:	2100      	movs	r1, #0
 80025ec:	f003 fa9c 	bl	8005b28 <memset>
  if(hi2c->Instance==I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <HAL_I2C_MspInit+0x9c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d138      	bne.n	800266c <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <HAL_I2C_MspInit+0xa0>)
 80025fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <HAL_I2C_MspInit+0xa0>)
 8002600:	2102      	movs	r1, #2
 8002602:	430a      	orrs	r2, r1
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <HAL_I2C_MspInit+0xa0>)
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	2202      	movs	r2, #2
 800260c:	4013      	ands	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002612:	193b      	adds	r3, r7, r4
 8002614:	22c0      	movs	r2, #192	; 0xc0
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261a:	0021      	movs	r1, r4
 800261c:	187b      	adds	r3, r7, r1
 800261e:	2212      	movs	r2, #18
 8002620:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	187b      	adds	r3, r7, r1
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	187b      	adds	r3, r7, r1
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2206      	movs	r2, #6
 8002632:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	187b      	adds	r3, r7, r1
 8002636:	4a11      	ldr	r2, [pc, #68]	; (800267c <HAL_I2C_MspInit+0xa4>)
 8002638:	0019      	movs	r1, r3
 800263a:	0010      	movs	r0, r2
 800263c:	f001 fa70 	bl	8003b20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_I2C_MspInit+0xa0>)
 8002642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <HAL_I2C_MspInit+0xa0>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	03c9      	lsls	r1, r1, #15
 800264a:	430a      	orrs	r2, r1
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c
 800264e:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <HAL_I2C_MspInit+0xa0>)
 8002650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	03db      	lsls	r3, r3, #15
 8002656:	4013      	ands	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2100      	movs	r1, #0
 8002660:	2018      	movs	r0, #24
 8002662:	f001 f9b5 	bl	80039d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8002666:	2018      	movs	r0, #24
 8002668:	f001 f9c7 	bl	80039fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b00b      	add	sp, #44	; 0x2c
 8002672:	bd90      	pop	{r4, r7, pc}
 8002674:	40005800 	.word	0x40005800
 8002678:	40021000 	.word	0x40021000
 800267c:	50000400 	.word	0x50000400

08002680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002684:	e7fe      	b.n	8002684 <NMI_Handler+0x4>

08002686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800268a:	e7fe      	b.n	800268a <HardFault_Handler+0x4>

0800268c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002690:	46c0      	nop			; (mov r8, r8)
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a4:	f000 f974 	bl	8002990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 Interrupt.
  */
void I2C2_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <I2C2_IRQHandler+0x2c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	23e0      	movs	r3, #224	; 0xe0
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4013      	ands	r3, r2
 80026c0:	d004      	beq.n	80026cc <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <I2C2_IRQHandler+0x2c>)
 80026c4:	0018      	movs	r0, r3
 80026c6:	f001 fd73 	bl	80041b0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80026ca:	e003      	b.n	80026d4 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <I2C2_IRQHandler+0x2c>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f001 fd54 	bl	800417c <HAL_I2C_EV_IRQHandler>
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	20000270 	.word	0x20000270

080026e0 <_getpid>:
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	2301      	movs	r3, #1
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_kill>:
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	f003 f9ed 	bl	8005ad4 <__errno>
 80026fa:	0003      	movs	r3, r0
 80026fc:	2216      	movs	r2, #22
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	2301      	movs	r3, #1
 8002702:	425b      	negs	r3, r3
 8002704:	0018      	movs	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	b002      	add	sp, #8
 800270a:	bd80      	pop	{r7, pc}

0800270c <_exit>:
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	2301      	movs	r3, #1
 8002716:	425a      	negs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff ffe5 	bl	80026ec <_kill>
 8002722:	e7fe      	b.n	8002722 <_exit+0x16>

08002724 <_read>:
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e00a      	b.n	800274c <_read+0x28>
 8002736:	e000      	b.n	800273a <_read+0x16>
 8002738:	bf00      	nop
 800273a:	0001      	movs	r1, r0
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	60ba      	str	r2, [r7, #8]
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3301      	adds	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	dbf0      	blt.n	8002736 <_read+0x12>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	b006      	add	sp, #24
 800275c:	bd80      	pop	{r7, pc}

0800275e <_write>:
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e009      	b.n	8002784 <_write+0x26>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	60ba      	str	r2, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	0018      	movs	r0, r3
 800277a:	e000      	b.n	800277e <_write+0x20>
 800277c:	bf00      	nop
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3301      	adds	r3, #1
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	dbf1      	blt.n	8002770 <_write+0x12>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b006      	add	sp, #24
 8002794:	bd80      	pop	{r7, pc}

08002796 <_close>:
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	2301      	movs	r3, #1
 80027a0:	425b      	negs	r3, r3
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_fstat>:
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0192      	lsls	r2, r2, #6
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	2300      	movs	r3, #0
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b002      	add	sp, #8
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_isatty>:
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	2301      	movs	r3, #1
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_lseek>:
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	2300      	movs	r3, #0
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b004      	add	sp, #16
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <_sbrk>:
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <_sbrk+0x5c>)
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <_sbrk+0x60>)
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	4b13      	ldr	r3, [pc, #76]	; (8002854 <_sbrk+0x64>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <_sbrk+0x22>
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <_sbrk+0x64>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <_sbrk+0x68>)
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <_sbrk+0x64>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	18d3      	adds	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	429a      	cmp	r2, r3
 800281e:	d207      	bcs.n	8002830 <_sbrk+0x40>
 8002820:	f003 f958 	bl	8005ad4 <__errno>
 8002824:	0003      	movs	r3, r0
 8002826:	220c      	movs	r2, #12
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	2301      	movs	r3, #1
 800282c:	425b      	negs	r3, r3
 800282e:	e009      	b.n	8002844 <_sbrk+0x54>
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <_sbrk+0x64>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	18d2      	adds	r2, r2, r3
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <_sbrk+0x64>)
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b006      	add	sp, #24
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20004800 	.word	0x20004800
 8002850:	00000400 	.word	0x00000400
 8002854:	200002d4 	.word	0x200002d4
 8002858:	200002f0 	.word	0x200002f0

0800285c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <Reset_Handler>:
 8002868:	480d      	ldr	r0, [pc, #52]	; (80028a0 <LoopForever+0x2>)
 800286a:	4685      	mov	sp, r0
 800286c:	f7ff fff6 	bl	800285c <SystemInit>
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <LoopForever+0x6>)
 8002872:	490d      	ldr	r1, [pc, #52]	; (80028a8 <LoopForever+0xa>)
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <LoopForever+0xe>)
 8002876:	2300      	movs	r3, #0
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:
 800287a:	58d4      	ldr	r4, [r2, r3]
 800287c:	50c4      	str	r4, [r0, r3]
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:
 8002880:	18c4      	adds	r4, r0, r3
 8002882:	428c      	cmp	r4, r1
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <LoopForever+0x12>)
 8002888:	4c0a      	ldr	r4, [pc, #40]	; (80028b4 <LoopForever+0x16>)
 800288a:	2300      	movs	r3, #0
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:
 8002892:	42a2      	cmp	r2, r4
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>
 8002896:	f003 f923 	bl	8005ae0 <__libc_init_array>
 800289a:	f7ff fc8b 	bl	80021b4 <main>

0800289e <LoopForever>:
 800289e:	e7fe      	b.n	800289e <LoopForever>
 80028a0:	20004800 	.word	0x20004800
 80028a4:	20000000 	.word	0x20000000
 80028a8:	200001f0 	.word	0x200001f0
 80028ac:	08008b94 	.word	0x08008b94
 80028b0:	200001f0 	.word	0x200001f0
 80028b4:	200002ec 	.word	0x200002ec

080028b8 <ADC1_IRQHandler>:
 80028b8:	e7fe      	b.n	80028b8 <ADC1_IRQHandler>
	...

080028bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_Init+0x3c>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <HAL_Init+0x3c>)
 80028ce:	2180      	movs	r1, #128	; 0x80
 80028d0:	0049      	lsls	r1, r1, #1
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028d6:	2000      	movs	r0, #0
 80028d8:	f000 f810 	bl	80028fc <HAL_InitTick>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d003      	beq.n	80028e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80028e0:	1dfb      	adds	r3, r7, #7
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e001      	b.n	80028ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80028e8:	f7ff fe0e 	bl	8002508 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	781b      	ldrb	r3, [r3, #0]
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b002      	add	sp, #8
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40022000 	.word	0x40022000

080028fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002904:	230f      	movs	r3, #15
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_InitTick+0x88>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d02b      	beq.n	800296c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002914:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_InitTick+0x8c>)
 8002916:	681c      	ldr	r4, [r3, #0]
 8002918:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HAL_InitTick+0x88>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	0019      	movs	r1, r3
 800291e:	23fa      	movs	r3, #250	; 0xfa
 8002920:	0098      	lsls	r0, r3, #2
 8002922:	f7fd fc07 	bl	8000134 <__udivsi3>
 8002926:	0003      	movs	r3, r0
 8002928:	0019      	movs	r1, r3
 800292a:	0020      	movs	r0, r4
 800292c:	f7fd fc02 	bl	8000134 <__udivsi3>
 8002930:	0003      	movs	r3, r0
 8002932:	0018      	movs	r0, r3
 8002934:	f001 f871 	bl	8003a1a <HAL_SYSTICK_Config>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d112      	bne.n	8002962 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d80a      	bhi.n	8002958 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	2301      	movs	r3, #1
 8002946:	425b      	negs	r3, r3
 8002948:	2200      	movs	r2, #0
 800294a:	0018      	movs	r0, r3
 800294c:	f001 f840 	bl	80039d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <HAL_InitTick+0x90>)
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	e00d      	b.n	8002974 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002958:	230f      	movs	r3, #15
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e008      	b.n	8002974 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002962:	230f      	movs	r3, #15
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e003      	b.n	8002974 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800296c:	230f      	movs	r3, #15
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002974:	230f      	movs	r3, #15
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	781b      	ldrb	r3, [r3, #0]
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b005      	add	sp, #20
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	2000001c 	.word	0x2000001c
 8002988:	20000014 	.word	0x20000014
 800298c:	20000018 	.word	0x20000018

08002990 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_IncTick+0x1c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	001a      	movs	r2, r3
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_IncTick+0x20>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	18d2      	adds	r2, r2, r3
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <HAL_IncTick+0x20>)
 80029a2:	601a      	str	r2, [r3, #0]
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	2000001c 	.word	0x2000001c
 80029b0:	200002d8 	.word	0x200002d8

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b02      	ldr	r3, [pc, #8]	; (80029c4 <HAL_GetTick+0x10>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	0018      	movs	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	200002d8 	.word	0x200002d8

080029c8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <LL_ADC_SetCommonPathInternalCh+0x24>)
 80029d8:	401a      	ands	r2, r3
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	601a      	str	r2, [r3, #0]
}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	fe3fffff 	.word	0xfe3fffff

080029f0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	23e0      	movs	r3, #224	; 0xe0
 80029fe:	045b      	lsls	r3, r3, #17
 8002a00:	4013      	ands	r3, r2
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	2104      	movs	r1, #4
 8002a1e:	400a      	ands	r2, r1
 8002a20:	2107      	movs	r1, #7
 8002a22:	4091      	lsls	r1, r2
 8002a24:	000a      	movs	r2, r1
 8002a26:	43d2      	mvns	r2, r2
 8002a28:	401a      	ands	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2104      	movs	r1, #4
 8002a2e:	400b      	ands	r3, r1
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4099      	lsls	r1, r3
 8002a34:	000b      	movs	r3, r1
 8002a36:	431a      	orrs	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b004      	add	sp, #16
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	23c0      	movs	r3, #192	; 0xc0
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	4013      	ands	r3, r2
 8002a56:	d101      	bne.n	8002a5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	0018      	movs	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	b002      	add	sp, #8
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	211f      	movs	r1, #31
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	4091      	lsls	r1, r2
 8002a80:	000a      	movs	r2, r1
 8002a82:	43d2      	mvns	r2, r2
 8002a84:	401a      	ands	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	210f      	movs	r1, #15
 8002a8c:	4019      	ands	r1, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	201f      	movs	r0, #31
 8002a92:	4003      	ands	r3, r0
 8002a94:	4099      	lsls	r1, r3
 8002a96:	000b      	movs	r3, r1
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	035b      	lsls	r3, r3, #13
 8002ab8:	0b5b      	lsrs	r3, r3, #13
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	0352      	lsls	r2, r2, #13
 8002ada:	0b52      	lsrs	r2, r2, #13
 8002adc:	43d2      	mvns	r2, r2
 8002ade:	401a      	ands	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae4:	46c0      	nop			; (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	0212      	lsls	r2, r2, #8
 8002b00:	43d2      	mvns	r2, r2
 8002b02:	401a      	ands	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	400b      	ands	r3, r1
 8002b0c:	4904      	ldr	r1, [pc, #16]	; (8002b20 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002b0e:	400b      	ands	r3, r1
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	b004      	add	sp, #16
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	07ffff00 	.word	0x07ffff00

08002b24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a05      	ldr	r2, [pc, #20]	; (8002b48 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	2280      	movs	r2, #128	; 0x80
 8002b36:	0552      	lsls	r2, r2, #21
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	6fffffe8 	.word	0x6fffffe8

08002b4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	2380      	movs	r3, #128	; 0x80
 8002b5a:	055b      	lsls	r3, r3, #21
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	055b      	lsls	r3, r3, #21
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d101      	bne.n	8002b6a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a04      	ldr	r2, [pc, #16]	; (8002b94 <LL_ADC_Enable+0x20>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	2201      	movs	r2, #1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	7fffffe8 	.word	0x7fffffe8

08002b98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <LL_ADC_Disable+0x20>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2202      	movs	r2, #2
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	7fffffe8 	.word	0x7fffffe8

08002bbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <LL_ADC_IsEnabled+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <LL_ADC_IsEnabled+0x1a>
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2202      	movs	r2, #2
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d101      	bne.n	8002bf6 <LL_ADC_IsDisableOngoing+0x18>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <LL_ADC_IsDisableOngoing+0x1a>
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b002      	add	sp, #8
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <LL_ADC_REG_StartConversion+0x20>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2204      	movs	r2, #4
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	7fffffe8 	.word	0x7fffffe8

08002c24 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <LL_ADC_REG_StopConversion+0x20>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	2210      	movs	r2, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	7fffffe8 	.word	0x7fffffe8

08002c48 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2204      	movs	r2, #4
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d101      	bne.n	8002c60 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	0018      	movs	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b002      	add	sp, #8
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c74:	231f      	movs	r3, #31
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1b1      	b.n	8002ff6 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff fc57 	bl	8002550 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2254      	movs	r2, #84	; 0x54
 8002cac:	2100      	movs	r1, #0
 8002cae:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7ff ff49 	bl	8002b4c <LL_ADC_IsInternalRegulatorEnabled>
 8002cba:	1e03      	subs	r3, r0, #0
 8002cbc:	d115      	bne.n	8002cea <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f7ff ff2e 	bl	8002b24 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cc8:	4bcd      	ldr	r3, [pc, #820]	; (8003000 <HAL_ADC_Init+0x394>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	49cd      	ldr	r1, [pc, #820]	; (8003004 <HAL_ADC_Init+0x398>)
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7fd fa30 	bl	8000134 <__udivsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cdc:	e002      	b.n	8002ce4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f9      	bne.n	8002cde <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff ff2c 	bl	8002b4c <LL_ADC_IsInternalRegulatorEnabled>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d10f      	bne.n	8002d18 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	2201      	movs	r2, #1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d10:	231f      	movs	r3, #31
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2201      	movs	r2, #1
 8002d16:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f7ff ff93 	bl	8002c48 <LL_ADC_REG_IsConversionOngoing>
 8002d22:	0003      	movs	r3, r0
 8002d24:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d000      	beq.n	8002d32 <HAL_ADC_Init+0xc6>
 8002d30:	e154      	b.n	8002fdc <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d000      	beq.n	8002d3a <HAL_ADC_Init+0xce>
 8002d38:	e150      	b.n	8002fdc <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4ab2      	ldr	r2, [pc, #712]	; (8003008 <HAL_ADC_Init+0x39c>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	2202      	movs	r2, #2
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7ff ff34 	bl	8002bbc <LL_ADC_IsEnabled>
 8002d54:	1e03      	subs	r3, r0, #0
 8002d56:	d156      	bne.n	8002e06 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2218      	movs	r2, #24
 8002d60:	4393      	bics	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	0f9b      	lsrs	r3, r3, #30
 8002d76:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	223c      	movs	r2, #60	; 0x3c
 8002d88:	5c9b      	ldrb	r3, [r3, r2]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d111      	bne.n	8002db2 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	0f9b      	lsrs	r3, r3, #30
 8002d94:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d9a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002da0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002da6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	2201      	movs	r2, #1
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	4a94      	ldr	r2, [pc, #592]	; (800300c <HAL_ADC_Init+0x3a0>)
 8002dba:	4013      	ands	r3, r2
 8002dbc:	0019      	movs	r1, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	23c0      	movs	r3, #192	; 0xc0
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d018      	beq.n	8002e06 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	05db      	lsls	r3, r3, #23
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d012      	beq.n	8002e06 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d00c      	beq.n	8002e06 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002dec:	4b88      	ldr	r3, [pc, #544]	; (8003010 <HAL_ADC_Init+0x3a4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a88      	ldr	r2, [pc, #544]	; (8003014 <HAL_ADC_Init+0x3a8>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	23f0      	movs	r3, #240	; 0xf0
 8002dfc:	039b      	lsls	r3, r3, #14
 8002dfe:	401a      	ands	r2, r3
 8002e00:	4b83      	ldr	r3, [pc, #524]	; (8003010 <HAL_ADC_Init+0x3a4>)
 8002e02:	430a      	orrs	r2, r1
 8002e04:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7e1b      	ldrb	r3, [r3, #24]
 8002e0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	7e5b      	ldrb	r3, [r3, #25]
 8002e10:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e12:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7e9b      	ldrb	r3, [r3, #26]
 8002e18:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_ADC_Init+0x1be>
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	015b      	lsls	r3, r3, #5
 8002e28:	e000      	b.n	8002e2c <HAL_ADC_Init+0x1c0>
 8002e2a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e2c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e32:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da04      	bge.n	8002e46 <HAL_ADC_Init+0x1da>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	085b      	lsrs	r3, r3, #1
 8002e44:	e001      	b.n	8002e4a <HAL_ADC_Init+0x1de>
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002e4a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	212c      	movs	r1, #44	; 0x2c
 8002e50:	5c5b      	ldrb	r3, [r3, r1]
 8002e52:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e54:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	5c9b      	ldrb	r3, [r3, r2]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d115      	bne.n	8002e92 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7e9b      	ldrb	r3, [r3, #26]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d105      	bne.n	8002e7a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	0252      	lsls	r2, r2, #9
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e00b      	b.n	8002e92 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	2220      	movs	r2, #32
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9e:	23e0      	movs	r3, #224	; 0xe0
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_ADC_Init+0x3ac>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	0019      	movs	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4a53      	ldr	r2, [pc, #332]	; (800301c <HAL_ADC_Init+0x3b0>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	f7ff fd8f 	bl	8002a0a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	494a      	ldr	r1, [pc, #296]	; (8003020 <HAL_ADC_Init+0x3b4>)
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	f7ff fd87 	bl	8002a0a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2110      	movs	r1, #16
 8002f10:	4249      	negs	r1, r1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	629a      	str	r2, [r3, #40]	; 0x28
 8002f16:	e03a      	b.n	8002f8e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	039b      	lsls	r3, r3, #14
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d134      	bne.n	8002f8e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	e00c      	b.n	8002f44 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	40da      	lsrs	r2, r3
 8002f34:	0013      	movs	r3, r2
 8002f36:	220f      	movs	r2, #15
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	d006      	beq.n	8002f4c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	3301      	adds	r3, #1
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	2b07      	cmp	r3, #7
 8002f48:	d9ef      	bls.n	8002f2a <HAL_ADC_Init+0x2be>
 8002f4a:	e000      	b.n	8002f4e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002f4c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d109      	bne.n	8002f68 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2110      	movs	r1, #16
 8002f60:	4249      	negs	r1, r1
 8002f62:	430a      	orrs	r2, r1
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28
 8002f66:	e012      	b.n	8002f8e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	221c      	movs	r2, #28
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	4252      	negs	r2, r2
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	0011      	movs	r1, r2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_ADC_Init+0x3b8>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d10b      	bne.n	8002fb6 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4393      	bics	r3, r2
 8002fac:	2201      	movs	r2, #1
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002fb4:	e01c      	b.n	8002ff0 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fba:	2212      	movs	r2, #18
 8002fbc:	4393      	bics	r3, r2
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	2201      	movs	r2, #1
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002fd2:	231f      	movs	r3, #31
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002fda:	e009      	b.n	8002ff0 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fe8:	231f      	movs	r3, #31
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002ff0:	231f      	movs	r3, #31
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b008      	add	sp, #32
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	20000014 	.word	0x20000014
 8003004:	00030d40 	.word	0x00030d40
 8003008:	fffffefd 	.word	0xfffffefd
 800300c:	1ffffc02 	.word	0x1ffffc02
 8003010:	40012708 	.word	0x40012708
 8003014:	ffc3ffff 	.word	0xffc3ffff
 8003018:	fffe0219 	.word	0xfffe0219
 800301c:	dffffc02 	.word	0xdffffc02
 8003020:	07ffff04 	.word	0x07ffff04
 8003024:	833fffe7 	.word	0x833fffe7

08003028 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0018      	movs	r0, r3
 8003036:	f7ff fe07 	bl	8002c48 <LL_ADC_REG_IsConversionOngoing>
 800303a:	1e03      	subs	r3, r0, #0
 800303c:	d135      	bne.n	80030aa <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2254      	movs	r2, #84	; 0x54
 8003042:	5c9b      	ldrb	r3, [r3, r2]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_ADC_Start+0x24>
 8003048:	2302      	movs	r3, #2
 800304a:	e035      	b.n	80030b8 <HAL_ADC_Start+0x90>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2254      	movs	r2, #84	; 0x54
 8003050:	2101      	movs	r1, #1
 8003052:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003054:	250f      	movs	r5, #15
 8003056:	197c      	adds	r4, r7, r5
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	0018      	movs	r0, r3
 800305c:	f000 fb28 	bl	80036b0 <ADC_Enable>
 8003060:	0003      	movs	r3, r0
 8003062:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003064:	197b      	adds	r3, r7, r5
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d119      	bne.n	80030a0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	4a13      	ldr	r2, [pc, #76]	; (80030c0 <HAL_ADC_Start+0x98>)
 8003072:	4013      	ands	r3, r2
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0052      	lsls	r2, r2, #1
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	221c      	movs	r2, #28
 800308a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2254      	movs	r2, #84	; 0x54
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0018      	movs	r0, r3
 800309a:	f7ff fdb1 	bl	8002c00 <LL_ADC_REG_StartConversion>
 800309e:	e008      	b.n	80030b2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2254      	movs	r2, #84	; 0x54
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]
 80030a8:	e003      	b.n	80030b2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030aa:	230f      	movs	r3, #15
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	2202      	movs	r2, #2
 80030b0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80030b2:	230f      	movs	r3, #15
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	781b      	ldrb	r3, [r3, #0]
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bdb0      	pop	{r4, r5, r7, pc}
 80030c0:	fffff0fe 	.word	0xfffff0fe

080030c4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80030c4:	b5b0      	push	{r4, r5, r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2254      	movs	r2, #84	; 0x54
 80030d0:	5c9b      	ldrb	r3, [r3, r2]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_ADC_Stop+0x16>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e029      	b.n	800312e <HAL_ADC_Stop+0x6a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2254      	movs	r2, #84	; 0x54
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030e2:	250f      	movs	r5, #15
 80030e4:	197c      	adds	r4, r7, r5
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 fa9f 	bl	800362c <ADC_ConversionStop>
 80030ee:	0003      	movs	r3, r0
 80030f0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030f2:	197b      	adds	r3, r7, r5
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d112      	bne.n	8003120 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030fa:	197c      	adds	r4, r7, r5
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 fb5c 	bl	80037bc <ADC_Disable>
 8003104:	0003      	movs	r3, r0
 8003106:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003108:	197b      	adds	r3, r7, r5
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	4a08      	ldr	r2, [pc, #32]	; (8003138 <HAL_ADC_Stop+0x74>)
 8003116:	4013      	ands	r3, r2
 8003118:	2201      	movs	r2, #1
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2254      	movs	r2, #84	; 0x54
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003128:	230f      	movs	r3, #15
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	781b      	ldrb	r3, [r3, #0]
}
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bdb0      	pop	{r4, r5, r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	fffffefe 	.word	0xfffffefe

0800313c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	2b08      	cmp	r3, #8
 800314c:	d102      	bne.n	8003154 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800314e:	2308      	movs	r3, #8
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e00f      	b.n	8003174 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	4013      	ands	r3, r2
 800315e:	d007      	beq.n	8003170 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	2220      	movs	r2, #32
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e072      	b.n	8003256 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003170:	2304      	movs	r3, #4
 8003172:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003174:	f7ff fc1e 	bl	80029b4 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800317c:	e01f      	b.n	80031be <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	d01c      	beq.n	80031be <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003184:	f7ff fc16 	bl	80029b4 <HAL_GetTick>
 8003188:	0002      	movs	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d302      	bcc.n	800319a <HAL_ADC_PollForConversion+0x5e>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d111      	bne.n	80031be <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	d10b      	bne.n	80031be <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	2204      	movs	r2, #4
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2254      	movs	r2, #84	; 0x54
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e04b      	b.n	8003256 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4013      	ands	r3, r2
 80031c8:	d0d9      	beq.n	800317e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff fc31 	bl	8002a44 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d02e      	beq.n	8003244 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7e9b      	ldrb	r3, [r3, #26]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d12a      	bne.n	8003244 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2208      	movs	r2, #8
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d123      	bne.n	8003244 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0018      	movs	r0, r3
 8003202:	f7ff fd21 	bl	8002c48 <LL_ADC_REG_IsConversionOngoing>
 8003206:	1e03      	subs	r3, r0, #0
 8003208:	d110      	bne.n	800322c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	210c      	movs	r1, #12
 8003216:	438a      	bics	r2, r1
 8003218:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	4a10      	ldr	r2, [pc, #64]	; (8003260 <HAL_ADC_PollForConversion+0x124>)
 8003220:	4013      	ands	r3, r2
 8003222:	2201      	movs	r2, #1
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	659a      	str	r2, [r3, #88]	; 0x58
 800322a:	e00b      	b.n	8003244 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	2220      	movs	r2, #32
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	2201      	movs	r2, #1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7e1b      	ldrb	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d103      	bne.n	8003254 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	220c      	movs	r2, #12
 8003252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	0018      	movs	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	b004      	add	sp, #16
 800325c:	bd80      	pop	{r7, pc}
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	fffffefe 	.word	0xfffffefe

08003264 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003272:	0018      	movs	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	b002      	add	sp, #8
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003286:	2317      	movs	r3, #23
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2254      	movs	r2, #84	; 0x54
 8003296:	5c9b      	ldrb	r3, [r3, r2]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x24>
 800329c:	2302      	movs	r3, #2
 800329e:	e1c0      	b.n	8003622 <HAL_ADC_ConfigChannel+0x3a6>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2254      	movs	r2, #84	; 0x54
 80032a4:	2101      	movs	r1, #1
 80032a6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff fccb 	bl	8002c48 <LL_ADC_REG_IsConversionOngoing>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d000      	beq.n	80032b8 <HAL_ADC_ConfigChannel+0x3c>
 80032b6:	e1a3      	b.n	8003600 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d100      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x46>
 80032c0:	e143      	b.n	800354a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	061b      	lsls	r3, r3, #24
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d004      	beq.n	80032d8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80032d2:	4ac1      	ldr	r2, [pc, #772]	; (80035d8 <HAL_ADC_ConfigChannel+0x35c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0019      	movs	r1, r3
 80032e2:	0010      	movs	r0, r2
 80032e4:	f7ff fbdf 	bl	8002aa6 <LL_ADC_REG_SetSequencerChAdd>
 80032e8:	e0c9      	b.n	800347e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	211f      	movs	r1, #31
 80032f4:	400b      	ands	r3, r1
 80032f6:	210f      	movs	r1, #15
 80032f8:	4099      	lsls	r1, r3
 80032fa:	000b      	movs	r3, r1
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	035b      	lsls	r3, r3, #13
 8003308:	0b5b      	lsrs	r3, r3, #13
 800330a:	d105      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x9c>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	221f      	movs	r2, #31
 8003314:	4013      	ands	r3, r2
 8003316:	e098      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	d000      	beq.n	8003324 <HAL_ADC_ConfigChannel+0xa8>
 8003322:	e091      	b.n	8003448 <HAL_ADC_ConfigChannel+0x1cc>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2202      	movs	r2, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d000      	beq.n	8003330 <HAL_ADC_ConfigChannel+0xb4>
 800332e:	e089      	b.n	8003444 <HAL_ADC_ConfigChannel+0x1c8>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2204      	movs	r2, #4
 8003336:	4013      	ands	r3, r2
 8003338:	d000      	beq.n	800333c <HAL_ADC_ConfigChannel+0xc0>
 800333a:	e081      	b.n	8003440 <HAL_ADC_ConfigChannel+0x1c4>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2208      	movs	r2, #8
 8003342:	4013      	ands	r3, r2
 8003344:	d000      	beq.n	8003348 <HAL_ADC_ConfigChannel+0xcc>
 8003346:	e079      	b.n	800343c <HAL_ADC_ConfigChannel+0x1c0>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2210      	movs	r2, #16
 800334e:	4013      	ands	r3, r2
 8003350:	d000      	beq.n	8003354 <HAL_ADC_ConfigChannel+0xd8>
 8003352:	e071      	b.n	8003438 <HAL_ADC_ConfigChannel+0x1bc>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2220      	movs	r2, #32
 800335a:	4013      	ands	r3, r2
 800335c:	d000      	beq.n	8003360 <HAL_ADC_ConfigChannel+0xe4>
 800335e:	e069      	b.n	8003434 <HAL_ADC_ConfigChannel+0x1b8>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2240      	movs	r2, #64	; 0x40
 8003366:	4013      	ands	r3, r2
 8003368:	d000      	beq.n	800336c <HAL_ADC_ConfigChannel+0xf0>
 800336a:	e061      	b.n	8003430 <HAL_ADC_ConfigChannel+0x1b4>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	4013      	ands	r3, r2
 8003374:	d000      	beq.n	8003378 <HAL_ADC_ConfigChannel+0xfc>
 8003376:	e059      	b.n	800342c <HAL_ADC_ConfigChannel+0x1b0>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4013      	ands	r3, r2
 8003382:	d151      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x1ac>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d149      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1a8>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	2380      	movs	r3, #128	; 0x80
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4013      	ands	r3, r2
 800339a:	d141      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x1a4>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2380      	movs	r3, #128	; 0x80
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	4013      	ands	r3, r2
 80033a6:	d139      	bne.n	800341c <HAL_ADC_ConfigChannel+0x1a0>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	015b      	lsls	r3, r3, #5
 80033b0:	4013      	ands	r3, r2
 80033b2:	d131      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x19c>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	019b      	lsls	r3, r3, #6
 80033bc:	4013      	ands	r3, r2
 80033be:	d129      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x198>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	01db      	lsls	r3, r3, #7
 80033c8:	4013      	ands	r3, r2
 80033ca:	d121      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x194>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	4013      	ands	r3, r2
 80033d6:	d119      	bne.n	800340c <HAL_ADC_ConfigChannel+0x190>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	4013      	ands	r3, r2
 80033e2:	d111      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x18c>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	029b      	lsls	r3, r3, #10
 80033ec:	4013      	ands	r3, r2
 80033ee:	d109      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x188>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	02db      	lsls	r3, r3, #11
 80033f8:	4013      	ands	r3, r2
 80033fa:	d001      	beq.n	8003400 <HAL_ADC_ConfigChannel+0x184>
 80033fc:	2312      	movs	r3, #18
 80033fe:	e024      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003400:	2300      	movs	r3, #0
 8003402:	e022      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003404:	2311      	movs	r3, #17
 8003406:	e020      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003408:	2310      	movs	r3, #16
 800340a:	e01e      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 800340c:	230f      	movs	r3, #15
 800340e:	e01c      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003410:	230e      	movs	r3, #14
 8003412:	e01a      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003414:	230d      	movs	r3, #13
 8003416:	e018      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003418:	230c      	movs	r3, #12
 800341a:	e016      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 800341c:	230b      	movs	r3, #11
 800341e:	e014      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003420:	230a      	movs	r3, #10
 8003422:	e012      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003424:	2309      	movs	r3, #9
 8003426:	e010      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003428:	2308      	movs	r3, #8
 800342a:	e00e      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 800342c:	2307      	movs	r3, #7
 800342e:	e00c      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003430:	2306      	movs	r3, #6
 8003432:	e00a      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003434:	2305      	movs	r3, #5
 8003436:	e008      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003438:	2304      	movs	r3, #4
 800343a:	e006      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 800343c:	2303      	movs	r3, #3
 800343e:	e004      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003440:	2302      	movs	r3, #2
 8003442:	e002      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_ADC_ConfigChannel+0x1ce>
 8003448:	2300      	movs	r3, #0
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	6852      	ldr	r2, [r2, #4]
 800344e:	201f      	movs	r0, #31
 8003450:	4002      	ands	r2, r0
 8003452:	4093      	lsls	r3, r2
 8003454:	000a      	movs	r2, r1
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	d808      	bhi.n	800347e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	001a      	movs	r2, r3
 800347a:	f7ff faf4 	bl	8002a66 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6819      	ldr	r1, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	001a      	movs	r2, r3
 800348c:	f7ff fb2e 	bl	8002aec <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db00      	blt.n	800349a <HAL_ADC_ConfigChannel+0x21e>
 8003498:	e0bc      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800349a:	4b50      	ldr	r3, [pc, #320]	; (80035dc <HAL_ADC_ConfigChannel+0x360>)
 800349c:	0018      	movs	r0, r3
 800349e:	f7ff faa7 	bl	80029f0 <LL_ADC_GetCommonPathInternalCh>
 80034a2:	0003      	movs	r3, r0
 80034a4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_ADC_ConfigChannel+0x364>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d122      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	2380      	movs	r3, #128	; 0x80
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034b8:	d11d      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	0412      	lsls	r2, r2, #16
 80034c0:	4313      	orrs	r3, r2
 80034c2:	4a46      	ldr	r2, [pc, #280]	; (80035dc <HAL_ADC_ConfigChannel+0x360>)
 80034c4:	0019      	movs	r1, r3
 80034c6:	0010      	movs	r0, r2
 80034c8:	f7ff fa7e 	bl	80029c8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034cc:	4b45      	ldr	r3, [pc, #276]	; (80035e4 <HAL_ADC_ConfigChannel+0x368>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4945      	ldr	r1, [pc, #276]	; (80035e8 <HAL_ADC_ConfigChannel+0x36c>)
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7fc fe2e 	bl	8000134 <__udivsi3>
 80034d8:	0003      	movs	r3, r0
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	0013      	movs	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034e6:	e002      	b.n	80034ee <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f9      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034f4:	e08e      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <HAL_ADC_ConfigChannel+0x370>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10e      	bne.n	800351e <HAL_ADC_ConfigChannel+0x2a2>
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	045b      	lsls	r3, r3, #17
 8003506:	4013      	ands	r3, r2
 8003508:	d109      	bne.n	800351e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	0452      	lsls	r2, r2, #17
 8003510:	4313      	orrs	r3, r2
 8003512:	4a32      	ldr	r2, [pc, #200]	; (80035dc <HAL_ADC_ConfigChannel+0x360>)
 8003514:	0019      	movs	r1, r3
 8003516:	0010      	movs	r0, r2
 8003518:	f7ff fa56 	bl	80029c8 <LL_ADC_SetCommonPathInternalCh>
 800351c:	e07a      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a33      	ldr	r2, [pc, #204]	; (80035f0 <HAL_ADC_ConfigChannel+0x374>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d000      	beq.n	800352a <HAL_ADC_ConfigChannel+0x2ae>
 8003528:	e074      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	03db      	lsls	r3, r3, #15
 8003530:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003532:	d000      	beq.n	8003536 <HAL_ADC_ConfigChannel+0x2ba>
 8003534:	e06e      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	03d2      	lsls	r2, r2, #15
 800353c:	4313      	orrs	r3, r2
 800353e:	4a27      	ldr	r2, [pc, #156]	; (80035dc <HAL_ADC_ConfigChannel+0x360>)
 8003540:	0019      	movs	r1, r3
 8003542:	0010      	movs	r0, r2
 8003544:	f7ff fa40 	bl	80029c8 <LL_ADC_SetCommonPathInternalCh>
 8003548:	e064      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	429a      	cmp	r2, r3
 8003554:	d004      	beq.n	8003560 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800355a:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <HAL_ADC_ConfigChannel+0x35c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d107      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0019      	movs	r1, r3
 800356a:	0010      	movs	r0, r2
 800356c:	f7ff faac 	bl	8002ac8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	da4d      	bge.n	8003614 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_ADC_ConfigChannel+0x360>)
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff fa38 	bl	80029f0 <LL_ADC_GetCommonPathInternalCh>
 8003580:	0003      	movs	r3, r0
 8003582:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <HAL_ADC_ConfigChannel+0x364>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <HAL_ADC_ConfigChannel+0x378>)
 8003592:	4013      	ands	r3, r2
 8003594:	4a11      	ldr	r2, [pc, #68]	; (80035dc <HAL_ADC_ConfigChannel+0x360>)
 8003596:	0019      	movs	r1, r3
 8003598:	0010      	movs	r0, r2
 800359a:	f7ff fa15 	bl	80029c8 <LL_ADC_SetCommonPathInternalCh>
 800359e:	e039      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a11      	ldr	r2, [pc, #68]	; (80035ec <HAL_ADC_ConfigChannel+0x370>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d108      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <HAL_ADC_ConfigChannel+0x37c>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_ADC_ConfigChannel+0x360>)
 80035b2:	0019      	movs	r1, r3
 80035b4:	0010      	movs	r0, r2
 80035b6:	f7ff fa07 	bl	80029c8 <LL_ADC_SetCommonPathInternalCh>
 80035ba:	e02b      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <HAL_ADC_ConfigChannel+0x374>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d126      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <HAL_ADC_ConfigChannel+0x380>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	4a03      	ldr	r2, [pc, #12]	; (80035dc <HAL_ADC_ConfigChannel+0x360>)
 80035ce:	0019      	movs	r1, r3
 80035d0:	0010      	movs	r0, r2
 80035d2:	f7ff f9f9 	bl	80029c8 <LL_ADC_SetCommonPathInternalCh>
 80035d6:	e01d      	b.n	8003614 <HAL_ADC_ConfigChannel+0x398>
 80035d8:	80000004 	.word	0x80000004
 80035dc:	40012708 	.word	0x40012708
 80035e0:	b0001000 	.word	0xb0001000
 80035e4:	20000014 	.word	0x20000014
 80035e8:	00030d40 	.word	0x00030d40
 80035ec:	b8004000 	.word	0xb8004000
 80035f0:	b4002000 	.word	0xb4002000
 80035f4:	ff7fffff 	.word	0xff7fffff
 80035f8:	feffffff 	.word	0xfeffffff
 80035fc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003604:	2220      	movs	r2, #32
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800360c:	2317      	movs	r3, #23
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2254      	movs	r2, #84	; 0x54
 8003618:	2100      	movs	r1, #0
 800361a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800361c:	2317      	movs	r3, #23
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	781b      	ldrb	r3, [r3, #0]
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	b006      	add	sp, #24
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)

0800362c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff fb05 	bl	8002c48 <LL_ADC_REG_IsConversionOngoing>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d031      	beq.n	80036a6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0018      	movs	r0, r3
 8003648:	f7ff fac9 	bl	8002bde <LL_ADC_IsDisableOngoing>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d104      	bne.n	800365a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff fae5 	bl	8002c24 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800365a:	f7ff f9ab 	bl	80029b4 <HAL_GetTick>
 800365e:	0003      	movs	r3, r0
 8003660:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003662:	e01a      	b.n	800369a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003664:	f7ff f9a6 	bl	80029b4 <HAL_GetTick>
 8003668:	0002      	movs	r2, r0
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d913      	bls.n	800369a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2204      	movs	r2, #4
 800367a:	4013      	ands	r3, r2
 800367c:	d00d      	beq.n	800369a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003682:	2210      	movs	r2, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	2201      	movs	r2, #1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e006      	b.n	80036a8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2204      	movs	r2, #4
 80036a2:	4013      	ands	r3, r2
 80036a4:	d1de      	bne.n	8003664 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	0018      	movs	r0, r3
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b004      	add	sp, #16
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff fa7b 	bl	8002bbc <LL_ADC_IsEnabled>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d000      	beq.n	80036cc <ADC_Enable+0x1c>
 80036ca:	e069      	b.n	80037a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4a36      	ldr	r2, [pc, #216]	; (80037ac <ADC_Enable+0xfc>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	2210      	movs	r2, #16
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2201      	movs	r2, #1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e056      	b.n	80037a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff fa3b 	bl	8002b74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <ADC_Enable+0x100>)
 8003700:	0018      	movs	r0, r3
 8003702:	f7ff f975 	bl	80029f0 <LL_ADC_GetCommonPathInternalCh>
 8003706:	0002      	movs	r2, r0
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	4013      	ands	r3, r2
 800370e:	d00f      	beq.n	8003730 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <ADC_Enable+0x104>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4928      	ldr	r1, [pc, #160]	; (80037b8 <ADC_Enable+0x108>)
 8003716:	0018      	movs	r0, r3
 8003718:	f7fc fd0c 	bl	8000134 <__udivsi3>
 800371c:	0003      	movs	r3, r0
 800371e:	3301      	adds	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003722:	e002      	b.n	800372a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	3b01      	subs	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	7e5b      	ldrb	r3, [r3, #25]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d033      	beq.n	80037a0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003738:	f7ff f93c 	bl	80029b4 <HAL_GetTick>
 800373c:	0003      	movs	r3, r0
 800373e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003740:	e027      	b.n	8003792 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	0018      	movs	r0, r3
 8003748:	f7ff fa38 	bl	8002bbc <LL_ADC_IsEnabled>
 800374c:	1e03      	subs	r3, r0, #0
 800374e:	d104      	bne.n	800375a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	0018      	movs	r0, r3
 8003756:	f7ff fa0d 	bl	8002b74 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800375a:	f7ff f92b 	bl	80029b4 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d914      	bls.n	8003792 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2201      	movs	r2, #1
 8003770:	4013      	ands	r3, r2
 8003772:	2b01      	cmp	r3, #1
 8003774:	d00d      	beq.n	8003792 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	2210      	movs	r2, #16
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003786:	2201      	movs	r2, #1
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e007      	b.n	80037a2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2201      	movs	r2, #1
 800379a:	4013      	ands	r3, r2
 800379c:	2b01      	cmp	r3, #1
 800379e:	d1d0      	bne.n	8003742 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b004      	add	sp, #16
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	80000017 	.word	0x80000017
 80037b0:	40012708 	.word	0x40012708
 80037b4:	20000014 	.word	0x20000014
 80037b8:	00030d40 	.word	0x00030d40

080037bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff fa08 	bl	8002bde <LL_ADC_IsDisableOngoing>
 80037ce:	0003      	movs	r3, r0
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7ff f9f0 	bl	8002bbc <LL_ADC_IsEnabled>
 80037dc:	1e03      	subs	r3, r0, #0
 80037de:	d046      	beq.n	800386e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d143      	bne.n	800386e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2205      	movs	r2, #5
 80037ee:	4013      	ands	r3, r2
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d10d      	bne.n	8003810 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7ff f9cd 	bl	8002b98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2203      	movs	r2, #3
 8003804:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003806:	f7ff f8d5 	bl	80029b4 <HAL_GetTick>
 800380a:	0003      	movs	r3, r0
 800380c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800380e:	e028      	b.n	8003862 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	2210      	movs	r2, #16
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	2201      	movs	r2, #1
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e021      	b.n	8003870 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800382c:	f7ff f8c2 	bl	80029b4 <HAL_GetTick>
 8003830:	0002      	movs	r2, r0
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d913      	bls.n	8003862 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2201      	movs	r2, #1
 8003842:	4013      	ands	r3, r2
 8003844:	d00d      	beq.n	8003862 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384a:	2210      	movs	r2, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	2201      	movs	r2, #1
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e006      	b.n	8003870 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	2201      	movs	r2, #1
 800386a:	4013      	ands	r3, r2
 800386c:	d1de      	bne.n	800382c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b004      	add	sp, #16
 8003876:	bd80      	pop	{r7, pc}

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	0002      	movs	r2, r0
 8003880:	1dfb      	adds	r3, r7, #7
 8003882:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003884:	1dfb      	adds	r3, r7, #7
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b7f      	cmp	r3, #127	; 0x7f
 800388a:	d809      	bhi.n	80038a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	001a      	movs	r2, r3
 8003892:	231f      	movs	r3, #31
 8003894:	401a      	ands	r2, r3
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <__NVIC_EnableIRQ+0x30>)
 8003898:	2101      	movs	r1, #1
 800389a:	4091      	lsls	r1, r2
 800389c:	000a      	movs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	e000e100 	.word	0xe000e100

080038ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ac:	b590      	push	{r4, r7, lr}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	0002      	movs	r2, r0
 80038b4:	6039      	str	r1, [r7, #0]
 80038b6:	1dfb      	adds	r3, r7, #7
 80038b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b7f      	cmp	r3, #127	; 0x7f
 80038c0:	d828      	bhi.n	8003914 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038c2:	4a2f      	ldr	r2, [pc, #188]	; (8003980 <__NVIC_SetPriority+0xd4>)
 80038c4:	1dfb      	adds	r3, r7, #7
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	b25b      	sxtb	r3, r3
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	33c0      	adds	r3, #192	; 0xc0
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	589b      	ldr	r3, [r3, r2]
 80038d2:	1dfa      	adds	r2, r7, #7
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	0011      	movs	r1, r2
 80038d8:	2203      	movs	r2, #3
 80038da:	400a      	ands	r2, r1
 80038dc:	00d2      	lsls	r2, r2, #3
 80038de:	21ff      	movs	r1, #255	; 0xff
 80038e0:	4091      	lsls	r1, r2
 80038e2:	000a      	movs	r2, r1
 80038e4:	43d2      	mvns	r2, r2
 80038e6:	401a      	ands	r2, r3
 80038e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	401a      	ands	r2, r3
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	0018      	movs	r0, r3
 80038f8:	2303      	movs	r3, #3
 80038fa:	4003      	ands	r3, r0
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003900:	481f      	ldr	r0, [pc, #124]	; (8003980 <__NVIC_SetPriority+0xd4>)
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b25b      	sxtb	r3, r3
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	430a      	orrs	r2, r1
 800390c:	33c0      	adds	r3, #192	; 0xc0
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003912:	e031      	b.n	8003978 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003914:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <__NVIC_SetPriority+0xd8>)
 8003916:	1dfb      	adds	r3, r7, #7
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	0019      	movs	r1, r3
 800391c:	230f      	movs	r3, #15
 800391e:	400b      	ands	r3, r1
 8003920:	3b08      	subs	r3, #8
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	3306      	adds	r3, #6
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	18d3      	adds	r3, r2, r3
 800392a:	3304      	adds	r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	1dfa      	adds	r2, r7, #7
 8003930:	7812      	ldrb	r2, [r2, #0]
 8003932:	0011      	movs	r1, r2
 8003934:	2203      	movs	r2, #3
 8003936:	400a      	ands	r2, r1
 8003938:	00d2      	lsls	r2, r2, #3
 800393a:	21ff      	movs	r1, #255	; 0xff
 800393c:	4091      	lsls	r1, r2
 800393e:	000a      	movs	r2, r1
 8003940:	43d2      	mvns	r2, r2
 8003942:	401a      	ands	r2, r3
 8003944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	019b      	lsls	r3, r3, #6
 800394a:	22ff      	movs	r2, #255	; 0xff
 800394c:	401a      	ands	r2, r3
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	0018      	movs	r0, r3
 8003954:	2303      	movs	r3, #3
 8003956:	4003      	ands	r3, r0
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800395c:	4809      	ldr	r0, [pc, #36]	; (8003984 <__NVIC_SetPriority+0xd8>)
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	001c      	movs	r4, r3
 8003964:	230f      	movs	r3, #15
 8003966:	4023      	ands	r3, r4
 8003968:	3b08      	subs	r3, #8
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	430a      	orrs	r2, r1
 800396e:	3306      	adds	r3, #6
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	18c3      	adds	r3, r0, r3
 8003974:	3304      	adds	r3, #4
 8003976:	601a      	str	r2, [r3, #0]
}
 8003978:	46c0      	nop			; (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b003      	add	sp, #12
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	e000e100 	.word	0xe000e100
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1e5a      	subs	r2, r3, #1
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	045b      	lsls	r3, r3, #17
 8003998:	429a      	cmp	r2, r3
 800399a:	d301      	bcc.n	80039a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399c:	2301      	movs	r3, #1
 800399e:	e010      	b.n	80039c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <SysTick_Config+0x44>)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	3a01      	subs	r2, #1
 80039a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039a8:	2301      	movs	r3, #1
 80039aa:	425b      	negs	r3, r3
 80039ac:	2103      	movs	r1, #3
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7ff ff7c 	bl	80038ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <SysTick_Config+0x44>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <SysTick_Config+0x44>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b002      	add	sp, #8
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	210f      	movs	r1, #15
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	1c02      	adds	r2, r0, #0
 80039e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	0011      	movs	r1, r2
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7ff ff5d 	bl	80038ac <__NVIC_SetPriority>
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}

080039fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	0002      	movs	r2, r0
 8003a02:	1dfb      	adds	r3, r7, #7
 8003a04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7ff ff33 	bl	8003878 <__NVIC_EnableIRQ>
}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	46bd      	mov	sp, r7
 8003a16:	b002      	add	sp, #8
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff ffaf 	bl	8003988 <SysTick_Config>
 8003a2a:	0003      	movs	r3, r0
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3c:	210f      	movs	r1, #15
 8003a3e:	187b      	adds	r3, r7, r1
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2225      	movs	r2, #37	; 0x25
 8003a48:	5c9b      	ldrb	r3, [r3, r2]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d006      	beq.n	8003a5e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a56:	187b      	adds	r3, r7, r1
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e049      	b.n	8003af2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	210e      	movs	r1, #14
 8003a6a:	438a      	bics	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2101      	movs	r1, #1
 8003a7a:	438a      	bics	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	491d      	ldr	r1, [pc, #116]	; (8003b00 <HAL_DMA_Abort_IT+0xcc>)
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_DMA_Abort_IT+0xd0>)
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	221c      	movs	r2, #28
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	409a      	lsls	r2, r3
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_DMA_Abort_IT+0xd0>)
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	490f      	ldr	r1, [pc, #60]	; (8003b00 <HAL_DMA_Abort_IT+0xcc>)
 8003ac2:	400a      	ands	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ace:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2225      	movs	r2, #37	; 0x25
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	2100      	movs	r1, #0
 8003ade:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d004      	beq.n	8003af2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	0010      	movs	r0, r2
 8003af0:	4798      	blx	r3
    }
  }
  return status;
 8003af2:	230f      	movs	r3, #15
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	781b      	ldrb	r3, [r3, #0]
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b004      	add	sp, #16
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	fffffeff 	.word	0xfffffeff
 8003b04:	40020000 	.word	0x40020000

08003b08 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2225      	movs	r2, #37	; 0x25
 8003b14:	5c9b      	ldrb	r3, [r3, r2]
 8003b16:	b2db      	uxtb	r3, r3
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b2e:	e147      	b.n	8003dc0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2101      	movs	r1, #1
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	4091      	lsls	r1, r2
 8003b3a:	000a      	movs	r2, r1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d100      	bne.n	8003b48 <HAL_GPIO_Init+0x28>
 8003b46:	e138      	b.n	8003dba <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d005      	beq.n	8003b60 <HAL_GPIO_Init+0x40>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2203      	movs	r2, #3
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d130      	bne.n	8003bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	0013      	movs	r3, r2
 8003b70:	43da      	mvns	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	0013      	movs	r3, r2
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b96:	2201      	movs	r2, #1
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	2201      	movs	r2, #1
 8003bae:	401a      	ands	r2, r3
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	0013      	movs	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2203      	movs	r2, #3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d017      	beq.n	8003bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	0013      	movs	r3, r2
 8003bde:	43da      	mvns	r2, r3
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4013      	ands	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	0013      	movs	r3, r2
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2203      	movs	r2, #3
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d123      	bne.n	8003c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	08da      	lsrs	r2, r3, #3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3208      	adds	r2, #8
 8003c12:	0092      	lsls	r2, r2, #2
 8003c14:	58d3      	ldr	r3, [r2, r3]
 8003c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2207      	movs	r2, #7
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	220f      	movs	r2, #15
 8003c22:	409a      	lsls	r2, r3
 8003c24:	0013      	movs	r3, r2
 8003c26:	43da      	mvns	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2107      	movs	r1, #7
 8003c36:	400b      	ands	r3, r1
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	08da      	lsrs	r2, r3, #3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3208      	adds	r2, #8
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	6939      	ldr	r1, [r7, #16]
 8003c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	0013      	movs	r3, r2
 8003c62:	43da      	mvns	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	401a      	ands	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	0013      	movs	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	23c0      	movs	r3, #192	; 0xc0
 8003c8c:	029b      	lsls	r3, r3, #10
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d100      	bne.n	8003c94 <HAL_GPIO_Init+0x174>
 8003c92:	e092      	b.n	8003dba <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c94:	4a50      	ldr	r2, [pc, #320]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	089b      	lsrs	r3, r3, #2
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	589b      	ldr	r3, [r3, r2]
 8003ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	220f      	movs	r2, #15
 8003cac:	409a      	lsls	r2, r3
 8003cae:	0013      	movs	r3, r2
 8003cb0:	43da      	mvns	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	23a0      	movs	r3, #160	; 0xa0
 8003cbc:	05db      	lsls	r3, r3, #23
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d013      	beq.n	8003cea <HAL_GPIO_Init+0x1ca>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a45      	ldr	r2, [pc, #276]	; (8003ddc <HAL_GPIO_Init+0x2bc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_GPIO_Init+0x1c6>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a44      	ldr	r2, [pc, #272]	; (8003de0 <HAL_GPIO_Init+0x2c0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d007      	beq.n	8003ce2 <HAL_GPIO_Init+0x1c2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a43      	ldr	r2, [pc, #268]	; (8003de4 <HAL_GPIO_Init+0x2c4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d101      	bne.n	8003cde <HAL_GPIO_Init+0x1be>
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x1cc>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e004      	b.n	8003cec <HAL_GPIO_Init+0x1cc>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_Init+0x1cc>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_GPIO_Init+0x1cc>
 8003cea:	2300      	movs	r3, #0
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	2103      	movs	r1, #3
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	00d2      	lsls	r2, r2, #3
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cfc:	4936      	ldr	r1, [pc, #216]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3318      	adds	r3, #24
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d0a:	4a33      	ldr	r2, [pc, #204]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	58d3      	ldr	r3, [r2, r3]
 8003d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	43da      	mvns	r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	025b      	lsls	r3, r3, #9
 8003d24:	4013      	ands	r3, r2
 8003d26:	d003      	beq.n	8003d30 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d30:	4929      	ldr	r1, [pc, #164]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d32:	2280      	movs	r2, #128	; 0x80
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003d38:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d3a:	2384      	movs	r3, #132	; 0x84
 8003d3c:	58d3      	ldr	r3, [r2, r3]
 8003d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	43da      	mvns	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4013      	ands	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	029b      	lsls	r3, r3, #10
 8003d52:	4013      	ands	r3, r2
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d5e:	491e      	ldr	r1, [pc, #120]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d60:	2284      	movs	r2, #132	; 0x84
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d66:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	035b      	lsls	r3, r3, #13
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43da      	mvns	r2, r3
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	039b      	lsls	r3, r3, #14
 8003da8:	4013      	ands	r3, r2
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_GPIO_Init+0x2b8>)
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	40da      	lsrs	r2, r3
 8003dc8:	1e13      	subs	r3, r2, #0
 8003dca:	d000      	beq.n	8003dce <HAL_GPIO_Init+0x2ae>
 8003dcc:	e6b0      	b.n	8003b30 <HAL_GPIO_Init+0x10>
  }
}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b006      	add	sp, #24
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021800 	.word	0x40021800
 8003ddc:	50000400 	.word	0x50000400
 8003de0:	50000800 	.word	0x50000800
 8003de4:	50000c00 	.word	0x50000c00

08003de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	0008      	movs	r0, r1
 8003df2:	0011      	movs	r1, r2
 8003df4:	1cbb      	adds	r3, r7, #2
 8003df6:	1c02      	adds	r2, r0, #0
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	1c7b      	adds	r3, r7, #1
 8003dfc:	1c0a      	adds	r2, r1, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e00:	1c7b      	adds	r3, r7, #1
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d004      	beq.n	8003e12 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e08:	1cbb      	adds	r3, r7, #2
 8003e0a:	881a      	ldrh	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e10:	e003      	b.n	8003e1a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e12:	1cbb      	adds	r3, r7, #2
 8003e14:	881a      	ldrh	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b002      	add	sp, #8
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e082      	b.n	8003f3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2241      	movs	r2, #65	; 0x41
 8003e3a:	5c9b      	ldrb	r3, [r3, r2]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2240      	movs	r2, #64	; 0x40
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f7fe fbc3 	bl	80025d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2241      	movs	r2, #65	; 0x41
 8003e56:	2124      	movs	r1, #36	; 0x24
 8003e58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2101      	movs	r1, #1
 8003e66:	438a      	bics	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4934      	ldr	r1, [pc, #208]	; (8003f44 <HAL_I2C_Init+0x120>)
 8003e74:	400a      	ands	r2, r1
 8003e76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4931      	ldr	r1, [pc, #196]	; (8003f48 <HAL_I2C_Init+0x124>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d108      	bne.n	8003ea2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	0209      	lsls	r1, r1, #8
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	e007      	b.n	8003eb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2184      	movs	r1, #132	; 0x84
 8003eac:	0209      	lsls	r1, r1, #8
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d104      	bne.n	8003ec4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2280      	movs	r2, #128	; 0x80
 8003ec0:	0112      	lsls	r2, r2, #4
 8003ec2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	491f      	ldr	r1, [pc, #124]	; (8003f4c <HAL_I2C_Init+0x128>)
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	491a      	ldr	r1, [pc, #104]	; (8003f48 <HAL_I2C_Init+0x124>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69d9      	ldr	r1, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1a      	ldr	r2, [r3, #32]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2101      	movs	r1, #1
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2241      	movs	r2, #65	; 0x41
 8003f28:	2120      	movs	r1, #32
 8003f2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2242      	movs	r2, #66	; 0x42
 8003f36:	2100      	movs	r1, #0
 8003f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	f0ffffff 	.word	0xf0ffffff
 8003f48:	ffff7fff 	.word	0xffff7fff
 8003f4c:	02008000 	.word	0x02008000

08003f50 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                            uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	1dbb      	adds	r3, r7, #6
 8003f5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2241      	movs	r2, #65	; 0x41
 8003f64:	5c9b      	ldrb	r3, [r3, r2]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d000      	beq.n	8003f6e <HAL_I2C_Slave_Transmit+0x1e>
 8003f6c:	e0fe      	b.n	800416c <HAL_I2C_Slave_Transmit+0x21c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_I2C_Slave_Transmit+0x2c>
 8003f74:	1dbb      	adds	r3, r7, #6
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d105      	bne.n	8003f88 <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2280      	movs	r2, #128	; 0x80
 8003f80:	0092      	lsls	r2, r2, #2
 8003f82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0f2      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2240      	movs	r2, #64	; 0x40
 8003f8c:	5c9b      	ldrb	r3, [r3, r2]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_I2C_Slave_Transmit+0x46>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e0eb      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2240      	movs	r2, #64	; 0x40
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f9e:	f7fe fd09 	bl	80029b4 <HAL_GetTick>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2241      	movs	r2, #65	; 0x41
 8003faa:	2121      	movs	r1, #33	; 0x21
 8003fac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2242      	movs	r2, #66	; 0x42
 8003fb2:	2120      	movs	r1, #32
 8003fb4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1dba      	adds	r2, r7, #6
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4967      	ldr	r1, [pc, #412]	; (8004178 <HAL_I2C_Slave_Transmit+0x228>)
 8003fdc:	400a      	ands	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	0013      	movs	r3, r2
 8003fea:	2200      	movs	r2, #0
 8003fec:	2108      	movs	r1, #8
 8003fee:	f000 fe61 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	1e03      	subs	r3, r0, #0
 8003ff4:	d00a      	beq.n	800400c <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2180      	movs	r1, #128	; 0x80
 8004002:	0209      	lsls	r1, r1, #8
 8004004:	430a      	orrs	r2, r1
 8004006:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0b0      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2208      	movs	r2, #8
 8004012:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d119      	bne.n	8004050 <HAL_I2C_Slave_Transmit+0x100>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	0013      	movs	r3, r2
 8004026:	2200      	movs	r2, #0
 8004028:	2108      	movs	r1, #8
 800402a:	f000 fe43 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 800402e:	1e03      	subs	r3, r0, #0
 8004030:	d00a      	beq.n	8004048 <HAL_I2C_Slave_Transmit+0xf8>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2180      	movs	r1, #128	; 0x80
 800403e:	0209      	lsls	r1, r1, #8
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e092      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2208      	movs	r2, #8
 800404e:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	0259      	lsls	r1, r3, #9
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	0013      	movs	r3, r2
 800405e:	2200      	movs	r2, #0
 8004060:	f000 fe28 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004064:	1e03      	subs	r3, r0, #0
 8004066:	d02f      	beq.n	80040c8 <HAL_I2C_Slave_Transmit+0x178>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2180      	movs	r1, #128	; 0x80
 8004074:	0209      	lsls	r1, r1, #8
 8004076:	430a      	orrs	r2, r1
 8004078:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e077      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	6839      	ldr	r1, [r7, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 fe54 	bl	8004d32 <I2C_WaitOnTXISFlagUntilTimeout>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_I2C_Slave_Transmit+0x154>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2180      	movs	r1, #128	; 0x80
 800409a:	0209      	lsls	r1, r1, #8
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e064      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1d5      	bne.n	800407e <HAL_I2C_Slave_Transmit+0x12e>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	6839      	ldr	r1, [r7, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	0018      	movs	r0, r3
 80040da:	f000 fe69 	bl	8004db0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040de:	1e03      	subs	r3, r0, #0
 80040e0:	d012      	beq.n	8004108 <HAL_I2C_Slave_Transmit+0x1b8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	0209      	lsls	r1, r1, #8
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d103      	bne.n	8004104 <HAL_I2C_Slave_Transmit+0x1b4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
 8004102:	e001      	b.n	8004108 <HAL_I2C_Slave_Transmit+0x1b8>
      }
      else
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e032      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2220      	movs	r2, #32
 800410e:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	0219      	lsls	r1, r3, #8
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	0013      	movs	r3, r2
 800411e:	2201      	movs	r2, #1
 8004120:	f000 fdc8 	bl	8004cb4 <I2C_WaitOnFlagUntilTimeout>
 8004124:	1e03      	subs	r3, r0, #0
 8004126:	d00a      	beq.n	800413e <HAL_I2C_Slave_Transmit+0x1ee>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	0209      	lsls	r1, r1, #8
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e017      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2180      	movs	r1, #128	; 0x80
 800414a:	0209      	lsls	r1, r1, #8
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2241      	movs	r2, #65	; 0x41
 8004154:	2120      	movs	r1, #32
 8004156:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2242      	movs	r2, #66	; 0x42
 800415c:	2100      	movs	r1, #0
 800415e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2240      	movs	r2, #64	; 0x40
 8004164:	2100      	movs	r1, #0
 8004166:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_I2C_Slave_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b006      	add	sp, #24
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	ffff7fff 	.word	0xffff7fff

0800417c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
  }
}
 80041a8:	46c0      	nop			; (mov r8, r8)
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b004      	add	sp, #16
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	001a      	movs	r2, r3
 80041ce:	2301      	movs	r3, #1
 80041d0:	4013      	ands	r3, r2
 80041d2:	d010      	beq.n	80041f6 <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	09db      	lsrs	r3, r3, #7
 80041d8:	001a      	movs	r2, r3
 80041da:	2301      	movs	r3, #1
 80041dc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80041de:	d00a      	beq.n	80041f6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e4:	2201      	movs	r2, #1
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2280      	movs	r2, #128	; 0x80
 80041f2:	0052      	lsls	r2, r2, #1
 80041f4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	0a9b      	lsrs	r3, r3, #10
 80041fa:	001a      	movs	r2, r3
 80041fc:	2301      	movs	r3, #1
 80041fe:	4013      	ands	r3, r2
 8004200:	d010      	beq.n	8004224 <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	09db      	lsrs	r3, r3, #7
 8004206:	001a      	movs	r2, r3
 8004208:	2301      	movs	r3, #1
 800420a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800420c:	d00a      	beq.n	8004224 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	2208      	movs	r2, #8
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2280      	movs	r2, #128	; 0x80
 8004220:	00d2      	lsls	r2, r2, #3
 8004222:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	0a5b      	lsrs	r3, r3, #9
 8004228:	001a      	movs	r2, r3
 800422a:	2301      	movs	r3, #1
 800422c:	4013      	ands	r3, r2
 800422e:	d010      	beq.n	8004252 <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	09db      	lsrs	r3, r3, #7
 8004234:	001a      	movs	r2, r3
 8004236:	2301      	movs	r3, #1
 8004238:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800423a:	d00a      	beq.n	8004252 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	2202      	movs	r2, #2
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2280      	movs	r2, #128	; 0x80
 800424e:	0092      	lsls	r2, r2, #2
 8004250:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	220b      	movs	r2, #11
 800425c:	4013      	ands	r3, r2
 800425e:	d005      	beq.n	800426c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0011      	movs	r1, r2
 8004266:	0018      	movs	r0, r3
 8004268:	f000 fbd8 	bl	8004a1c <I2C_ITError>
  }
}
 800426c:	46c0      	nop			; (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b006      	add	sp, #24
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800427c:	46c0      	nop			; (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	b002      	add	sp, #8
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	0008      	movs	r0, r1
 800429e:	0011      	movs	r1, r2
 80042a0:	1cfb      	adds	r3, r7, #3
 80042a2:	1c02      	adds	r2, r0, #0
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	003b      	movs	r3, r7
 80042a8:	1c0a      	adds	r2, r1, #0
 80042aa:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042ac:	46c0      	nop			; (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b002      	add	sp, #8
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b002      	add	sp, #8
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2240      	movs	r2, #64	; 0x40
 80042fe:	5c9b      	ldrb	r3, [r3, r2]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <I2C_Slave_ISR_IT+0x24>
 8004304:	2302      	movs	r3, #2
 8004306:	e0fa      	b.n	80044fe <I2C_Slave_ISR_IT+0x21a>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	2101      	movs	r1, #1
 800430e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	001a      	movs	r2, r3
 8004316:	2301      	movs	r3, #1
 8004318:	4013      	ands	r3, r2
 800431a:	d00b      	beq.n	8004334 <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	001a      	movs	r2, r3
 8004322:	2301      	movs	r3, #1
 8004324:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004326:	d005      	beq.n	8004334 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f000 f9f6 	bl	8004720 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	001a      	movs	r2, r3
 800433a:	2301      	movs	r3, #1
 800433c:	4013      	ands	r3, r2
 800433e:	d054      	beq.n	80043ea <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	091b      	lsrs	r3, r3, #4
 8004344:	001a      	movs	r2, r3
 8004346:	2301      	movs	r3, #1
 8004348:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800434a:	d04e      	beq.n	80043ea <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d12d      	bne.n	80043b2 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2241      	movs	r2, #65	; 0x41
 800435a:	5c9b      	ldrb	r3, [r3, r2]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b28      	cmp	r3, #40	; 0x28
 8004360:	d10b      	bne.n	800437a <I2C_Slave_ISR_IT+0x96>
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	049b      	lsls	r3, r3, #18
 8004368:	429a      	cmp	r2, r3
 800436a:	d106      	bne.n	800437a <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f000 faf8 	bl	8004968 <I2C_ITListenCplt>
 8004378:	e036      	b.n	80043e8 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2241      	movs	r2, #65	; 0x41
 800437e:	5c9b      	ldrb	r3, [r3, r2]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b29      	cmp	r3, #41	; 0x29
 8004384:	d110      	bne.n	80043a8 <I2C_Slave_ISR_IT+0xc4>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	4a5f      	ldr	r2, [pc, #380]	; (8004508 <I2C_Slave_ISR_IT+0x224>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00c      	beq.n	80043a8 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2210      	movs	r2, #16
 8004394:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	0018      	movs	r0, r3
 800439a:	f000 fc4a 	bl	8004c32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f000 f957 	bl	8004654 <I2C_ITSlaveSeqCplt>
 80043a6:	e01f      	b.n	80043e8 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2210      	movs	r2, #16
 80043ae:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80043b0:	e09d      	b.n	80044ee <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2210      	movs	r2, #16
 80043b8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	2204      	movs	r2, #4
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <I2C_Slave_ISR_IT+0xf4>
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	045b      	lsls	r3, r3, #17
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d000      	beq.n	80043d8 <I2C_Slave_ISR_IT+0xf4>
 80043d6:	e08a      	b.n	80044ee <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	0011      	movs	r1, r2
 80043e0:	0018      	movs	r0, r3
 80043e2:	f000 fb1b 	bl	8004a1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043e6:	e082      	b.n	80044ee <I2C_Slave_ISR_IT+0x20a>
 80043e8:	e081      	b.n	80044ee <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	089b      	lsrs	r3, r3, #2
 80043ee:	001a      	movs	r2, r3
 80043f0:	2301      	movs	r3, #1
 80043f2:	4013      	ands	r3, r2
 80043f4:	d031      	beq.n	800445a <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	089b      	lsrs	r3, r3, #2
 80043fa:	001a      	movs	r2, r3
 80043fc:	2301      	movs	r3, #1
 80043fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004400:	d02b      	beq.n	800445a <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d018      	beq.n	800443e <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d154      	bne.n	80044f2 <I2C_Slave_ISR_IT+0x20e>
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4a2f      	ldr	r2, [pc, #188]	; (8004508 <I2C_Slave_ISR_IT+0x224>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d050      	beq.n	80044f2 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	0018      	movs	r0, r3
 8004454:	f000 f8fe 	bl	8004654 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004458:	e04b      	b.n	80044f2 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	08db      	lsrs	r3, r3, #3
 800445e:	001a      	movs	r2, r3
 8004460:	2301      	movs	r3, #1
 8004462:	4013      	ands	r3, r2
 8004464:	d00c      	beq.n	8004480 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	08db      	lsrs	r3, r3, #3
 800446a:	001a      	movs	r2, r3
 800446c:	2301      	movs	r3, #1
 800446e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004470:	d006      	beq.n	8004480 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	0011      	movs	r1, r2
 8004478:	0018      	movs	r0, r3
 800447a:	f000 f847 	bl	800450c <I2C_ITAddrCplt>
 800447e:	e039      	b.n	80044f4 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	001a      	movs	r2, r3
 8004486:	2301      	movs	r3, #1
 8004488:	4013      	ands	r3, r2
 800448a:	d033      	beq.n	80044f4 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	085b      	lsrs	r3, r3, #1
 8004490:	001a      	movs	r2, r3
 8004492:	2301      	movs	r3, #1
 8004494:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004496:	d02d      	beq.n	80044f4 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d018      	beq.n	80044d4 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	781a      	ldrb	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80044d2:	e00f      	b.n	80044f4 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	2380      	movs	r3, #128	; 0x80
 80044d8:	045b      	lsls	r3, r3, #17
 80044da:	429a      	cmp	r2, r3
 80044dc:	d002      	beq.n	80044e4 <I2C_Slave_ISR_IT+0x200>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d107      	bne.n	80044f4 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 f8b4 	bl	8004654 <I2C_ITSlaveSeqCplt>
 80044ec:	e002      	b.n	80044f4 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	e000      	b.n	80044f4 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80044f2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	; 0x40
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b006      	add	sp, #24
 8004504:	bd80      	pop	{r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	ffff0000 	.word	0xffff0000

0800450c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800450c:	b5b0      	push	{r4, r5, r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2241      	movs	r2, #65	; 0x41
 800451a:	5c9b      	ldrb	r3, [r3, r2]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	001a      	movs	r2, r3
 8004520:	2328      	movs	r3, #40	; 0x28
 8004522:	4013      	ands	r3, r2
 8004524:	2b28      	cmp	r3, #40	; 0x28
 8004526:	d000      	beq.n	800452a <I2C_ITAddrCplt+0x1e>
 8004528:	e088      	b.n	800463c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	b2da      	uxtb	r2, r3
 8004534:	250f      	movs	r5, #15
 8004536:	197b      	adds	r3, r7, r5
 8004538:	2101      	movs	r1, #1
 800453a:	400a      	ands	r2, r1
 800453c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	0c1b      	lsrs	r3, r3, #16
 8004546:	b29a      	uxth	r2, r3
 8004548:	200c      	movs	r0, #12
 800454a:	183b      	adds	r3, r7, r0
 800454c:	21fe      	movs	r1, #254	; 0xfe
 800454e:	400a      	ands	r2, r1
 8004550:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	b29a      	uxth	r2, r3
 800455a:	240a      	movs	r4, #10
 800455c:	193b      	adds	r3, r7, r4
 800455e:	0592      	lsls	r2, r2, #22
 8004560:	0d92      	lsrs	r2, r2, #22
 8004562:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	b29a      	uxth	r2, r3
 800456c:	2308      	movs	r3, #8
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	21fe      	movs	r1, #254	; 0xfe
 8004572:	400a      	ands	r2, r1
 8004574:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d148      	bne.n	8004610 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800457e:	0021      	movs	r1, r4
 8004580:	187b      	adds	r3, r7, r1
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	09db      	lsrs	r3, r3, #7
 8004586:	b29a      	uxth	r2, r3
 8004588:	183b      	adds	r3, r7, r0
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	4053      	eors	r3, r2
 800458e:	b29b      	uxth	r3, r3
 8004590:	001a      	movs	r2, r3
 8004592:	2306      	movs	r3, #6
 8004594:	4013      	ands	r3, r2
 8004596:	d120      	bne.n	80045da <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004598:	183b      	adds	r3, r7, r0
 800459a:	187a      	adds	r2, r7, r1
 800459c:	8812      	ldrh	r2, [r2, #0]
 800459e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d14c      	bne.n	800464c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2208      	movs	r2, #8
 80045be:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2240      	movs	r2, #64	; 0x40
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045c8:	183b      	adds	r3, r7, r0
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	197b      	adds	r3, r7, r5
 80045ce:	7819      	ldrb	r1, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	0018      	movs	r0, r3
 80045d4:	f7ff fe5e 	bl	8004294 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80045d8:	e038      	b.n	800464c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80045da:	240c      	movs	r4, #12
 80045dc:	193b      	adds	r3, r7, r4
 80045de:	2208      	movs	r2, #8
 80045e0:	18ba      	adds	r2, r7, r2
 80045e2:	8812      	ldrh	r2, [r2, #0]
 80045e4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	021a      	lsls	r2, r3, #8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0011      	movs	r1, r2
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 fc94 	bl	8004f1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2240      	movs	r2, #64	; 0x40
 80045f8:	2100      	movs	r1, #0
 80045fa:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80045fc:	193b      	adds	r3, r7, r4
 80045fe:	881a      	ldrh	r2, [r3, #0]
 8004600:	230f      	movs	r3, #15
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	7819      	ldrb	r1, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0018      	movs	r0, r3
 800460a:	f7ff fe43 	bl	8004294 <HAL_I2C_AddrCallback>
}
 800460e:	e01d      	b.n	800464c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	021a      	lsls	r2, r3, #8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	0011      	movs	r1, r2
 8004618:	0018      	movs	r0, r3
 800461a:	f000 fc7f 	bl	8004f1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2240      	movs	r2, #64	; 0x40
 8004622:	2100      	movs	r1, #0
 8004624:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004626:	230c      	movs	r3, #12
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	230f      	movs	r3, #15
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	7819      	ldrb	r1, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0018      	movs	r0, r3
 8004636:	f7ff fe2d 	bl	8004294 <HAL_I2C_AddrCallback>
}
 800463a:	e007      	b.n	800464c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2208      	movs	r2, #8
 8004642:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2240      	movs	r2, #64	; 0x40
 8004648:	2100      	movs	r1, #0
 800464a:	5499      	strb	r1, [r3, r2]
}
 800464c:	46c0      	nop			; (mov r8, r8)
 800464e:	46bd      	mov	sp, r7
 8004650:	b004      	add	sp, #16
 8004652:	bdb0      	pop	{r4, r5, r7, pc}

08004654 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2242      	movs	r2, #66	; 0x42
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	0b9b      	lsrs	r3, r3, #14
 8004670:	001a      	movs	r2, r3
 8004672:	2301      	movs	r3, #1
 8004674:	4013      	ands	r3, r2
 8004676:	d008      	beq.n	800468a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4925      	ldr	r1, [pc, #148]	; (8004718 <I2C_ITSlaveSeqCplt+0xc4>)
 8004684:	400a      	ands	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	e00d      	b.n	80046a6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	0bdb      	lsrs	r3, r3, #15
 800468e:	001a      	movs	r2, r3
 8004690:	2301      	movs	r3, #1
 8004692:	4013      	ands	r3, r2
 8004694:	d007      	beq.n	80046a6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	491e      	ldr	r1, [pc, #120]	; (800471c <I2C_ITSlaveSeqCplt+0xc8>)
 80046a2:	400a      	ands	r2, r1
 80046a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2241      	movs	r2, #65	; 0x41
 80046aa:	5c9b      	ldrb	r3, [r3, r2]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b29      	cmp	r3, #41	; 0x29
 80046b0:	d114      	bne.n	80046dc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2241      	movs	r2, #65	; 0x41
 80046b6:	2128      	movs	r1, #40	; 0x28
 80046b8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2221      	movs	r2, #33	; 0x21
 80046be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2101      	movs	r1, #1
 80046c4:	0018      	movs	r0, r3
 80046c6:	f000 fc29 	bl	8004f1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2240      	movs	r2, #64	; 0x40
 80046ce:	2100      	movs	r1, #0
 80046d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7ff fdcd 	bl	8004274 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046da:	e019      	b.n	8004710 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2241      	movs	r2, #65	; 0x41
 80046e0:	5c9b      	ldrb	r3, [r3, r2]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b2a      	cmp	r3, #42	; 0x2a
 80046e6:	d113      	bne.n	8004710 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2241      	movs	r2, #65	; 0x41
 80046ec:	2128      	movs	r1, #40	; 0x28
 80046ee:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2222      	movs	r2, #34	; 0x22
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2102      	movs	r1, #2
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 fc0e 	bl	8004f1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	2100      	movs	r1, #0
 8004706:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	0018      	movs	r0, r3
 800470c:	f7ff fdba 	bl	8004284 <HAL_I2C_SlaveRxCpltCallback>
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b004      	add	sp, #16
 8004716:	bd80      	pop	{r7, pc}
 8004718:	ffffbfff 	.word	0xffffbfff
 800471c:	ffff7fff 	.word	0xffff7fff

08004720 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004736:	200f      	movs	r0, #15
 8004738:	183b      	adds	r3, r7, r0
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	2141      	movs	r1, #65	; 0x41
 800473e:	5c52      	ldrb	r2, [r2, r1]
 8004740:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2220      	movs	r2, #32
 8004748:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800474a:	183b      	adds	r3, r7, r0
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b21      	cmp	r3, #33	; 0x21
 8004750:	d003      	beq.n	800475a <I2C_ITSlaveCplt+0x3a>
 8004752:	183b      	adds	r3, r7, r0
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b29      	cmp	r3, #41	; 0x29
 8004758:	d109      	bne.n	800476e <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800475a:	4a7d      	ldr	r2, [pc, #500]	; (8004950 <I2C_ITSlaveCplt+0x230>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f000 fbdb 	bl	8004f1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2221      	movs	r2, #33	; 0x21
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
 800476c:	e011      	b.n	8004792 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800476e:	220f      	movs	r2, #15
 8004770:	18bb      	adds	r3, r7, r2
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b22      	cmp	r3, #34	; 0x22
 8004776:	d003      	beq.n	8004780 <I2C_ITSlaveCplt+0x60>
 8004778:	18bb      	adds	r3, r7, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b2a      	cmp	r3, #42	; 0x2a
 800477e:	d108      	bne.n	8004792 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004780:	4a74      	ldr	r2, [pc, #464]	; (8004954 <I2C_ITSlaveCplt+0x234>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0011      	movs	r1, r2
 8004786:	0018      	movs	r0, r3
 8004788:	f000 fbc8 	bl	8004f1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2222      	movs	r2, #34	; 0x22
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685a      	ldr	r2, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	0209      	lsls	r1, r1, #8
 80047a0:	430a      	orrs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	496a      	ldr	r1, [pc, #424]	; (8004958 <I2C_ITSlaveCplt+0x238>)
 80047b0:	400a      	ands	r2, r1
 80047b2:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 fa3b 	bl	8004c32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	0b9b      	lsrs	r3, r3, #14
 80047c0:	001a      	movs	r2, r3
 80047c2:	2301      	movs	r3, #1
 80047c4:	4013      	ands	r3, r2
 80047c6:	d013      	beq.n	80047f0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4962      	ldr	r1, [pc, #392]	; (800495c <I2C_ITSlaveCplt+0x23c>)
 80047d4:	400a      	ands	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ee:	e018      	b.n	8004822 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	0bdb      	lsrs	r3, r3, #15
 80047f4:	001a      	movs	r2, r3
 80047f6:	2301      	movs	r3, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	d012      	beq.n	8004822 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4956      	ldr	r1, [pc, #344]	; (8004960 <I2C_ITSlaveCplt+0x240>)
 8004808:	400a      	ands	r2, r1
 800480a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d006      	beq.n	8004822 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	001a      	movs	r2, r3
 8004828:	2301      	movs	r3, #1
 800482a:	4013      	ands	r3, r2
 800482c:	d020      	beq.n	8004870 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2204      	movs	r2, #4
 8004832:	4393      	bics	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	2204      	movs	r2, #4
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2242      	movs	r2, #66	; 0x42
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	0011      	movs	r1, r2
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 f8b9 	bl	8004a1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2241      	movs	r2, #65	; 0x41
 80048ae:	5c9b      	ldrb	r3, [r3, r2]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b28      	cmp	r3, #40	; 0x28
 80048b4:	d147      	bne.n	8004946 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	0011      	movs	r1, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 f853 	bl	8004968 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048c2:	e040      	b.n	8004946 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a26      	ldr	r2, [pc, #152]	; (8004964 <I2C_ITSlaveCplt+0x244>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d016      	beq.n	80048fc <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7ff febf 	bl	8004654 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a22      	ldr	r2, [pc, #136]	; (8004964 <I2C_ITSlaveCplt+0x244>)
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2241      	movs	r2, #65	; 0x41
 80048e0:	2120      	movs	r1, #32
 80048e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2240      	movs	r2, #64	; 0x40
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7ff fcdd 	bl	80042b4 <HAL_I2C_ListenCpltCallback>
}
 80048fa:	e024      	b.n	8004946 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2241      	movs	r2, #65	; 0x41
 8004900:	5c9b      	ldrb	r3, [r3, r2]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b22      	cmp	r3, #34	; 0x22
 8004906:	d10f      	bne.n	8004928 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2241      	movs	r2, #65	; 0x41
 800490c:	2120      	movs	r1, #32
 800490e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2240      	movs	r2, #64	; 0x40
 800491a:	2100      	movs	r1, #0
 800491c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	0018      	movs	r0, r3
 8004922:	f7ff fcaf 	bl	8004284 <HAL_I2C_SlaveRxCpltCallback>
}
 8004926:	e00e      	b.n	8004946 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2241      	movs	r2, #65	; 0x41
 800492c:	2120      	movs	r1, #32
 800492e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2240      	movs	r2, #64	; 0x40
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f7ff fc97 	bl	8004274 <HAL_I2C_SlaveTxCpltCallback>
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	46bd      	mov	sp, r7
 800494a:	b006      	add	sp, #24
 800494c:	bd80      	pop	{r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	00008001 	.word	0x00008001
 8004954:	00008002 	.word	0x00008002
 8004958:	fe00e800 	.word	0xfe00e800
 800495c:	ffffbfff 	.word	0xffffbfff
 8004960:	ffff7fff 	.word	0xffff7fff
 8004964:	ffff0000 	.word	0xffff0000

08004968 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <I2C_ITListenCplt+0xac>)
 8004976:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2241      	movs	r2, #65	; 0x41
 8004982:	2120      	movs	r1, #32
 8004984:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2242      	movs	r2, #66	; 0x42
 800498a:	2100      	movs	r1, #0
 800498c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	001a      	movs	r2, r3
 800499a:	2301      	movs	r3, #1
 800499c:	4013      	ands	r3, r2
 800499e:	d022      	beq.n	80049e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	2204      	movs	r2, #4
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049e6:	4a0c      	ldr	r2, [pc, #48]	; (8004a18 <I2C_ITListenCplt+0xb0>)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	0011      	movs	r1, r2
 80049ec:	0018      	movs	r0, r3
 80049ee:	f000 fa95 	bl	8004f1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2210      	movs	r2, #16
 80049f8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2240      	movs	r2, #64	; 0x40
 80049fe:	2100      	movs	r1, #0
 8004a00:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f7ff fc55 	bl	80042b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	ffff0000 	.word	0xffff0000
 8004a18:	00008003 	.word	0x00008003

08004a1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a26:	200f      	movs	r0, #15
 8004a28:	183b      	adds	r3, r7, r0
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	2141      	movs	r1, #65	; 0x41
 8004a2e:	5c52      	ldrb	r2, [r2, r1]
 8004a30:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2242      	movs	r2, #66	; 0x42
 8004a36:	2100      	movs	r1, #0
 8004a38:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a62      	ldr	r2, [pc, #392]	; (8004bc8 <I2C_ITError+0x1ac>)
 8004a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a52:	183b      	adds	r3, r7, r0
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b28      	cmp	r3, #40	; 0x28
 8004a58:	d007      	beq.n	8004a6a <I2C_ITError+0x4e>
 8004a5a:	183b      	adds	r3, r7, r0
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b29      	cmp	r3, #41	; 0x29
 8004a60:	d003      	beq.n	8004a6a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a62:	183b      	adds	r3, r7, r0
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b2a      	cmp	r3, #42	; 0x2a
 8004a68:	d10c      	bne.n	8004a84 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f000 fa54 	bl	8004f1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2241      	movs	r2, #65	; 0x41
 8004a78:	2128      	movs	r1, #40	; 0x28
 8004a7a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a53      	ldr	r2, [pc, #332]	; (8004bcc <I2C_ITError+0x1b0>)
 8004a80:	635a      	str	r2, [r3, #52]	; 0x34
 8004a82:	e012      	b.n	8004aaa <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a84:	4a52      	ldr	r2, [pc, #328]	; (8004bd0 <I2C_ITError+0x1b4>)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	0011      	movs	r1, r2
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f000 fa46 	bl	8004f1c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2241      	movs	r2, #65	; 0x41
 8004a94:	5c9b      	ldrb	r3, [r3, r2]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b60      	cmp	r3, #96	; 0x60
 8004a9a:	d003      	beq.n	8004aa4 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2241      	movs	r2, #65	; 0x41
 8004aa0:	2120      	movs	r1, #32
 8004aa2:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d03b      	beq.n	8004b30 <I2C_ITError+0x114>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b11      	cmp	r3, #17
 8004abc:	d002      	beq.n	8004ac4 <I2C_ITError+0xa8>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b21      	cmp	r3, #33	; 0x21
 8004ac2:	d135      	bne.n	8004b30 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	01db      	lsls	r3, r3, #7
 8004ace:	401a      	ands	r2, r3
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	01db      	lsls	r3, r3, #7
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d107      	bne.n	8004ae8 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	493c      	ldr	r1, [pc, #240]	; (8004bd4 <I2C_ITError+0x1b8>)
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7ff f80b 	bl	8003b08 <HAL_DMA_GetState>
 8004af2:	0003      	movs	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d016      	beq.n	8004b26 <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	4a36      	ldr	r2, [pc, #216]	; (8004bd8 <I2C_ITError+0x1bc>)
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2240      	movs	r2, #64	; 0x40
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f7fe ff91 	bl	8003a34 <HAL_DMA_Abort_IT>
 8004b12:	1e03      	subs	r3, r0, #0
 8004b14:	d051      	beq.n	8004bba <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	0018      	movs	r0, r3
 8004b22:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b24:	e049      	b.n	8004bba <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f000 f859 	bl	8004be0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b2e:	e044      	b.n	8004bba <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d03b      	beq.n	8004bb0 <I2C_ITError+0x194>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b12      	cmp	r3, #18
 8004b3c:	d002      	beq.n	8004b44 <I2C_ITError+0x128>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b22      	cmp	r3, #34	; 0x22
 8004b42:	d135      	bne.n	8004bb0 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	2380      	movs	r3, #128	; 0x80
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	401a      	ands	r2, r3
 8004b50:	2380      	movs	r3, #128	; 0x80
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d107      	bne.n	8004b68 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	491e      	ldr	r1, [pc, #120]	; (8004bdc <I2C_ITError+0x1c0>)
 8004b64:	400a      	ands	r2, r1
 8004b66:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f7fe ffcb 	bl	8003b08 <HAL_DMA_GetState>
 8004b72:	0003      	movs	r3, r0
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d016      	beq.n	8004ba6 <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	4a16      	ldr	r2, [pc, #88]	; (8004bd8 <I2C_ITError+0x1bc>)
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	2100      	movs	r1, #0
 8004b86:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fe ff51 	bl	8003a34 <HAL_DMA_Abort_IT>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d013      	beq.n	8004bbe <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ba4:	e00b      	b.n	8004bbe <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f000 f819 	bl	8004be0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bae:	e006      	b.n	8004bbe <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 f814 	bl	8004be0 <I2C_TreatErrorCallback>
  }
}
 8004bb8:	e002      	b.n	8004bc0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	e000      	b.n	8004bc0 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bbe:	46c0      	nop			; (mov r8, r8)
}
 8004bc0:	46c0      	nop			; (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b004      	add	sp, #16
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	ffff0000 	.word	0xffff0000
 8004bcc:	080042e5 	.word	0x080042e5
 8004bd0:	00008003 	.word	0x00008003
 8004bd4:	ffffbfff 	.word	0xffffbfff
 8004bd8:	08004c77 	.word	0x08004c77
 8004bdc:	ffff7fff 	.word	0xffff7fff

08004be0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2241      	movs	r2, #65	; 0x41
 8004bec:	5c9b      	ldrb	r3, [r3, r2]
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b60      	cmp	r3, #96	; 0x60
 8004bf2:	d10f      	bne.n	8004c14 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2241      	movs	r2, #65	; 0x41
 8004bf8:	2120      	movs	r1, #32
 8004bfa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2240      	movs	r2, #64	; 0x40
 8004c06:	2100      	movs	r1, #0
 8004c08:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f7ff fb61 	bl	80042d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c12:	e00a      	b.n	8004c2a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2240      	movs	r2, #64	; 0x40
 8004c1e:	2100      	movs	r1, #0
 8004c20:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7ff fb4d 	bl	80042c4 <HAL_I2C_ErrorCallback>
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2202      	movs	r2, #2
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d103      	bne.n	8004c50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2201      	movs	r2, #1
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d007      	beq.n	8004c6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2101      	movs	r1, #1
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	619a      	str	r2, [r3, #24]
  }
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b002      	add	sp, #8
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b084      	sub	sp, #16
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	2200      	movs	r2, #0
 8004c92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7ff ff9a 	bl	8004be0 <I2C_TreatErrorCallback>
}
 8004cac:	46c0      	nop			; (mov r8, r8)
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b004      	add	sp, #16
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	1dfb      	adds	r3, r7, #7
 8004cc2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cc4:	e021      	b.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	d01e      	beq.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ccc:	f7fd fe72 	bl	80029b4 <HAL_GetTick>
 8004cd0:	0002      	movs	r2, r0
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d302      	bcc.n	8004ce2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d113      	bne.n	8004d0a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2241      	movs	r2, #65	; 0x41
 8004cf2:	2120      	movs	r1, #32
 8004cf4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2242      	movs	r2, #66	; 0x42
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2240      	movs	r2, #64	; 0x40
 8004d02:	2100      	movs	r1, #0
 8004d04:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e00f      	b.n	8004d2a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	425a      	negs	r2, r3
 8004d1a:	4153      	adcs	r3, r2
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	001a      	movs	r2, r3
 8004d20:	1dfb      	adds	r3, r7, #7
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d0ce      	beq.n	8004cc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	b004      	add	sp, #16
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b084      	sub	sp, #16
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d3e:	e02b      	b.n	8004d98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	68b9      	ldr	r1, [r7, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	0018      	movs	r0, r3
 8004d48:	f000 f86e 	bl	8004e28 <I2C_IsAcknowledgeFailed>
 8004d4c:	1e03      	subs	r3, r0, #0
 8004d4e:	d001      	beq.n	8004d54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e029      	b.n	8004da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	3301      	adds	r3, #1
 8004d58:	d01e      	beq.n	8004d98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5a:	f7fd fe2b 	bl	80029b4 <HAL_GetTick>
 8004d5e:	0002      	movs	r2, r0
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d302      	bcc.n	8004d70 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d113      	bne.n	8004d98 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	2220      	movs	r2, #32
 8004d76:	431a      	orrs	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2241      	movs	r2, #65	; 0x41
 8004d80:	2120      	movs	r1, #32
 8004d82:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2242      	movs	r2, #66	; 0x42
 8004d88:	2100      	movs	r1, #0
 8004d8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2240      	movs	r2, #64	; 0x40
 8004d90:	2100      	movs	r1, #0
 8004d92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e007      	b.n	8004da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d1cc      	bne.n	8004d40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dbc:	e028      	b.n	8004e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68b9      	ldr	r1, [r7, #8]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	f000 f82f 	bl	8004e28 <I2C_IsAcknowledgeFailed>
 8004dca:	1e03      	subs	r3, r0, #0
 8004dcc:	d001      	beq.n	8004dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e026      	b.n	8004e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fd fdef 	bl	80029b4 <HAL_GetTick>
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d113      	bne.n	8004e10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	2220      	movs	r2, #32
 8004dee:	431a      	orrs	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2241      	movs	r2, #65	; 0x41
 8004df8:	2120      	movs	r1, #32
 8004dfa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2242      	movs	r2, #66	; 0x42
 8004e00:	2100      	movs	r1, #0
 8004e02:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2240      	movs	r2, #64	; 0x40
 8004e08:	2100      	movs	r1, #0
 8004e0a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e007      	b.n	8004e20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2220      	movs	r2, #32
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d1cf      	bne.n	8004dbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b004      	add	sp, #16
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2210      	movs	r2, #16
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d164      	bne.n	8004f0c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	2380      	movs	r3, #128	; 0x80
 8004e4a:	049b      	lsls	r3, r3, #18
 8004e4c:	401a      	ands	r2, r3
 8004e4e:	2380      	movs	r3, #128	; 0x80
 8004e50:	049b      	lsls	r3, r3, #18
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d02b      	beq.n	8004eae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2180      	movs	r1, #128	; 0x80
 8004e62:	01c9      	lsls	r1, r1, #7
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e68:	e021      	b.n	8004eae <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	d01e      	beq.n	8004eae <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e70:	f7fd fda0 	bl	80029b4 <HAL_GetTick>
 8004e74:	0002      	movs	r2, r0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <I2C_IsAcknowledgeFailed+0x5e>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d113      	bne.n	8004eae <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2241      	movs	r2, #65	; 0x41
 8004e96:	2120      	movs	r1, #32
 8004e98:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2242      	movs	r2, #66	; 0x42
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2240      	movs	r2, #64	; 0x40
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e02f      	b.n	8004f0e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d1d6      	bne.n	8004e6a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f7ff feaf 	bl	8004c32 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	490e      	ldr	r1, [pc, #56]	; (8004f18 <I2C_IsAcknowledgeFailed+0xf0>)
 8004ee0:	400a      	ands	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee8:	2204      	movs	r2, #4
 8004eea:	431a      	orrs	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2241      	movs	r2, #65	; 0x41
 8004ef4:	2120      	movs	r1, #32
 8004ef6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2242      	movs	r2, #66	; 0x42
 8004efc:	2100      	movs	r1, #0
 8004efe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2240      	movs	r2, #64	; 0x40
 8004f04:	2100      	movs	r1, #0
 8004f06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e000      	b.n	8004f0e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b004      	add	sp, #16
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	fe00e800 	.word	0xfe00e800

08004f1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	000a      	movs	r2, r1
 8004f26:	1cbb      	adds	r3, r7, #2
 8004f28:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f2e:	1cbb      	adds	r3, r7, #2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	2201      	movs	r2, #1
 8004f34:	4013      	ands	r3, r2
 8004f36:	d010      	beq.n	8004f5a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2242      	movs	r2, #66	; 0x42
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2241      	movs	r2, #65	; 0x41
 8004f44:	5c9b      	ldrb	r3, [r3, r2]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	001a      	movs	r2, r3
 8004f4a:	2328      	movs	r3, #40	; 0x28
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b28      	cmp	r3, #40	; 0x28
 8004f50:	d003      	beq.n	8004f5a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	22b0      	movs	r2, #176	; 0xb0
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f5a:	1cbb      	adds	r3, r7, #2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	4013      	ands	r3, r2
 8004f62:	d010      	beq.n	8004f86 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2244      	movs	r2, #68	; 0x44
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2241      	movs	r2, #65	; 0x41
 8004f70:	5c9b      	ldrb	r3, [r3, r2]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	001a      	movs	r2, r3
 8004f76:	2328      	movs	r3, #40	; 0x28
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b28      	cmp	r3, #40	; 0x28
 8004f7c:	d003      	beq.n	8004f86 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	22b0      	movs	r2, #176	; 0xb0
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f86:	1cbb      	adds	r3, r7, #2
 8004f88:	2200      	movs	r2, #0
 8004f8a:	5e9b      	ldrsh	r3, [r3, r2]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da03      	bge.n	8004f98 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	22b8      	movs	r2, #184	; 0xb8
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004f98:	1cbb      	adds	r3, r7, #2
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	2b10      	cmp	r3, #16
 8004f9e:	d103      	bne.n	8004fa8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2290      	movs	r2, #144	; 0x90
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004fa8:	1cbb      	adds	r3, r7, #2
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d103      	bne.n	8004fb8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004fb8:	1cbb      	adds	r3, r7, #2
 8004fba:	881b      	ldrh	r3, [r3, #0]
 8004fbc:	2b40      	cmp	r3, #64	; 0x40
 8004fbe:	d103      	bne.n	8004fc8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2240      	movs	r2, #64	; 0x40
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	43d9      	mvns	r1, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	400a      	ands	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b004      	add	sp, #16
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2241      	movs	r2, #65	; 0x41
 8004ff2:	5c9b      	ldrb	r3, [r3, r2]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d138      	bne.n	800506c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2240      	movs	r2, #64	; 0x40
 8004ffe:	5c9b      	ldrb	r3, [r3, r2]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005004:	2302      	movs	r3, #2
 8005006:	e032      	b.n	800506e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	2101      	movs	r1, #1
 800500e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2241      	movs	r2, #65	; 0x41
 8005014:	2124      	movs	r1, #36	; 0x24
 8005016:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	438a      	bics	r2, r1
 8005026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4911      	ldr	r1, [pc, #68]	; (8005078 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005034:	400a      	ands	r2, r1
 8005036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2101      	movs	r1, #1
 8005054:	430a      	orrs	r2, r1
 8005056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2241      	movs	r2, #65	; 0x41
 800505c:	2120      	movs	r1, #32
 800505e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2240      	movs	r2, #64	; 0x40
 8005064:	2100      	movs	r1, #0
 8005066:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	e000      	b.n	800506e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800506c:	2302      	movs	r3, #2
  }
}
 800506e:	0018      	movs	r0, r3
 8005070:	46bd      	mov	sp, r7
 8005072:	b002      	add	sp, #8
 8005074:	bd80      	pop	{r7, pc}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	ffffefff 	.word	0xffffefff

0800507c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2241      	movs	r2, #65	; 0x41
 800508a:	5c9b      	ldrb	r3, [r3, r2]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b20      	cmp	r3, #32
 8005090:	d139      	bne.n	8005106 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2240      	movs	r2, #64	; 0x40
 8005096:	5c9b      	ldrb	r3, [r3, r2]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800509c:	2302      	movs	r3, #2
 800509e:	e033      	b.n	8005108 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2240      	movs	r2, #64	; 0x40
 80050a4:	2101      	movs	r1, #1
 80050a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2241      	movs	r2, #65	; 0x41
 80050ac:	2124      	movs	r1, #36	; 0x24
 80050ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2101      	movs	r1, #1
 80050bc:	438a      	bics	r2, r1
 80050be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4a11      	ldr	r2, [pc, #68]	; (8005110 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2101      	movs	r1, #1
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2241      	movs	r2, #65	; 0x41
 80050f6:	2120      	movs	r1, #32
 80050f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2240      	movs	r2, #64	; 0x40
 80050fe:	2100      	movs	r1, #0
 8005100:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
  }
}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b004      	add	sp, #16
 800510e:	bd80      	pop	{r7, pc}
 8005110:	fffff0ff 	.word	0xfffff0ff

08005114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a19      	ldr	r2, [pc, #100]	; (8005188 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005122:	4013      	ands	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	4b17      	ldr	r3, [pc, #92]	; (8005184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	429a      	cmp	r2, r3
 8005136:	d11f      	bne.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005138:	4b14      	ldr	r3, [pc, #80]	; (800518c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	0013      	movs	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	189b      	adds	r3, r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4912      	ldr	r1, [pc, #72]	; (8005190 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005146:	0018      	movs	r0, r3
 8005148:	f7fa fff4 	bl	8000134 <__udivsi3>
 800514c:	0003      	movs	r3, r0
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005152:	e008      	b.n	8005166 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3b01      	subs	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e001      	b.n	8005166 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e009      	b.n	800517a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005166:	4b07      	ldr	r3, [pc, #28]	; (8005184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	401a      	ands	r2, r3
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	429a      	cmp	r2, r3
 8005176:	d0ed      	beq.n	8005154 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	0018      	movs	r0, r3
 800517c:	46bd      	mov	sp, r7
 800517e:	b004      	add	sp, #16
 8005180:	bd80      	pop	{r7, pc}
 8005182:	46c0      	nop			; (mov r8, r8)
 8005184:	40007000 	.word	0x40007000
 8005188:	fffff9ff 	.word	0xfffff9ff
 800518c:	20000014 	.word	0x20000014
 8005190:	000f4240 	.word	0x000f4240

08005194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e2f9      	b.n	800579a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	4013      	ands	r3, r2
 80051ae:	d100      	bne.n	80051b2 <HAL_RCC_OscConfig+0x1e>
 80051b0:	e07c      	b.n	80052ac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b2:	4bc3      	ldr	r3, [pc, #780]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2238      	movs	r2, #56	; 0x38
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051bc:	4bc0      	ldr	r3, [pc, #768]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2203      	movs	r2, #3
 80051c2:	4013      	ands	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d102      	bne.n	80051d2 <HAL_RCC_OscConfig+0x3e>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b03      	cmp	r3, #3
 80051d0:	d002      	beq.n	80051d8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d8:	4bb9      	ldr	r3, [pc, #740]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	029b      	lsls	r3, r3, #10
 80051e0:	4013      	ands	r3, r2
 80051e2:	d062      	beq.n	80052aa <HAL_RCC_OscConfig+0x116>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d15e      	bne.n	80052aa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e2d4      	b.n	800579a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	025b      	lsls	r3, r3, #9
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0x78>
 80051fc:	4bb0      	ldr	r3, [pc, #704]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4baf      	ldr	r3, [pc, #700]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	0249      	lsls	r1, r1, #9
 8005206:	430a      	orrs	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e020      	b.n	800524e <HAL_RCC_OscConfig+0xba>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	23a0      	movs	r3, #160	; 0xa0
 8005212:	02db      	lsls	r3, r3, #11
 8005214:	429a      	cmp	r2, r3
 8005216:	d10e      	bne.n	8005236 <HAL_RCC_OscConfig+0xa2>
 8005218:	4ba9      	ldr	r3, [pc, #676]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4ba8      	ldr	r3, [pc, #672]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800521e:	2180      	movs	r1, #128	; 0x80
 8005220:	02c9      	lsls	r1, r1, #11
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	4ba6      	ldr	r3, [pc, #664]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4ba5      	ldr	r3, [pc, #660]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800522c:	2180      	movs	r1, #128	; 0x80
 800522e:	0249      	lsls	r1, r1, #9
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e00b      	b.n	800524e <HAL_RCC_OscConfig+0xba>
 8005236:	4ba2      	ldr	r3, [pc, #648]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4ba1      	ldr	r3, [pc, #644]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800523c:	49a1      	ldr	r1, [pc, #644]	; (80054c4 <HAL_RCC_OscConfig+0x330>)
 800523e:	400a      	ands	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	4b9f      	ldr	r3, [pc, #636]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4b9e      	ldr	r3, [pc, #632]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005248:	499f      	ldr	r1, [pc, #636]	; (80054c8 <HAL_RCC_OscConfig+0x334>)
 800524a:	400a      	ands	r2, r1
 800524c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d014      	beq.n	8005280 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005256:	f7fd fbad 	bl	80029b4 <HAL_GetTick>
 800525a:	0003      	movs	r3, r0
 800525c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005260:	f7fd fba8 	bl	80029b4 <HAL_GetTick>
 8005264:	0002      	movs	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b64      	cmp	r3, #100	; 0x64
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e293      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005272:	4b93      	ldr	r3, [pc, #588]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	4013      	ands	r3, r2
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0xcc>
 800527e:	e015      	b.n	80052ac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fd fb98 	bl	80029b4 <HAL_GetTick>
 8005284:	0003      	movs	r3, r0
 8005286:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005288:	e008      	b.n	800529c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800528a:	f7fd fb93 	bl	80029b4 <HAL_GetTick>
 800528e:	0002      	movs	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b64      	cmp	r3, #100	; 0x64
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e27e      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800529c:	4b88      	ldr	r3, [pc, #544]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	4013      	ands	r3, r2
 80052a6:	d1f0      	bne.n	800528a <HAL_RCC_OscConfig+0xf6>
 80052a8:	e000      	b.n	80052ac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2202      	movs	r2, #2
 80052b2:	4013      	ands	r3, r2
 80052b4:	d100      	bne.n	80052b8 <HAL_RCC_OscConfig+0x124>
 80052b6:	e099      	b.n	80053ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b8:	4b81      	ldr	r3, [pc, #516]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2238      	movs	r2, #56	; 0x38
 80052be:	4013      	ands	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052c2:	4b7f      	ldr	r3, [pc, #508]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2203      	movs	r2, #3
 80052c8:	4013      	ands	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d102      	bne.n	80052d8 <HAL_RCC_OscConfig+0x144>
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d002      	beq.n	80052de <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d135      	bne.n	800534a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052de:	4b78      	ldr	r3, [pc, #480]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	4013      	ands	r3, r2
 80052e8:	d005      	beq.n	80052f6 <HAL_RCC_OscConfig+0x162>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e251      	b.n	800579a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f6:	4b72      	ldr	r3, [pc, #456]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4a74      	ldr	r2, [pc, #464]	; (80054cc <HAL_RCC_OscConfig+0x338>)
 80052fc:	4013      	ands	r3, r2
 80052fe:	0019      	movs	r1, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	021a      	lsls	r2, r3, #8
 8005306:	4b6e      	ldr	r3, [pc, #440]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d112      	bne.n	8005338 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005312:	4b6b      	ldr	r3, [pc, #428]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a6e      	ldr	r2, [pc, #440]	; (80054d0 <HAL_RCC_OscConfig+0x33c>)
 8005318:	4013      	ands	r3, r2
 800531a:	0019      	movs	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	4b67      	ldr	r3, [pc, #412]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005322:	430a      	orrs	r2, r1
 8005324:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005326:	4b66      	ldr	r3, [pc, #408]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	0adb      	lsrs	r3, r3, #11
 800532c:	2207      	movs	r2, #7
 800532e:	4013      	ands	r3, r2
 8005330:	4a68      	ldr	r2, [pc, #416]	; (80054d4 <HAL_RCC_OscConfig+0x340>)
 8005332:	40da      	lsrs	r2, r3
 8005334:	4b68      	ldr	r3, [pc, #416]	; (80054d8 <HAL_RCC_OscConfig+0x344>)
 8005336:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005338:	4b68      	ldr	r3, [pc, #416]	; (80054dc <HAL_RCC_OscConfig+0x348>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	0018      	movs	r0, r3
 800533e:	f7fd fadd 	bl	80028fc <HAL_InitTick>
 8005342:	1e03      	subs	r3, r0, #0
 8005344:	d051      	beq.n	80053ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e227      	b.n	800579a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d030      	beq.n	80053b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005352:	4b5b      	ldr	r3, [pc, #364]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a5e      	ldr	r2, [pc, #376]	; (80054d0 <HAL_RCC_OscConfig+0x33c>)
 8005358:	4013      	ands	r3, r2
 800535a:	0019      	movs	r1, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	4b57      	ldr	r3, [pc, #348]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005366:	4b56      	ldr	r3, [pc, #344]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	4b55      	ldr	r3, [pc, #340]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800536c:	2180      	movs	r1, #128	; 0x80
 800536e:	0049      	lsls	r1, r1, #1
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fd fb1e 	bl	80029b4 <HAL_GetTick>
 8005378:	0003      	movs	r3, r0
 800537a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800537e:	f7fd fb19 	bl	80029b4 <HAL_GetTick>
 8005382:	0002      	movs	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e204      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005390:	4b4b      	ldr	r3, [pc, #300]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	2380      	movs	r3, #128	; 0x80
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4013      	ands	r3, r2
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539c:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a4a      	ldr	r2, [pc, #296]	; (80054cc <HAL_RCC_OscConfig+0x338>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	4b44      	ldr	r3, [pc, #272]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	e01b      	b.n	80053ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80053b4:	4b42      	ldr	r3, [pc, #264]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b41      	ldr	r3, [pc, #260]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80053ba:	4949      	ldr	r1, [pc, #292]	; (80054e0 <HAL_RCC_OscConfig+0x34c>)
 80053bc:	400a      	ands	r2, r1
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c0:	f7fd faf8 	bl	80029b4 <HAL_GetTick>
 80053c4:	0003      	movs	r3, r0
 80053c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ca:	f7fd faf3 	bl	80029b4 <HAL_GetTick>
 80053ce:	0002      	movs	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e1de      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053dc:	4b38      	ldr	r3, [pc, #224]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	2380      	movs	r3, #128	; 0x80
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4013      	ands	r3, r2
 80053e6:	d1f0      	bne.n	80053ca <HAL_RCC_OscConfig+0x236>
 80053e8:	e000      	b.n	80053ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2208      	movs	r2, #8
 80053f2:	4013      	ands	r3, r2
 80053f4:	d047      	beq.n	8005486 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053f6:	4b32      	ldr	r3, [pc, #200]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2238      	movs	r2, #56	; 0x38
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b18      	cmp	r3, #24
 8005400:	d10a      	bne.n	8005418 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005402:	4b2f      	ldr	r3, [pc, #188]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005406:	2202      	movs	r2, #2
 8005408:	4013      	ands	r3, r2
 800540a:	d03c      	beq.n	8005486 <HAL_RCC_OscConfig+0x2f2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	699b      	ldr	r3, [r3, #24]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d138      	bne.n	8005486 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e1c0      	b.n	800579a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d019      	beq.n	8005454 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005420:	4b27      	ldr	r3, [pc, #156]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005422:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005424:	4b26      	ldr	r3, [pc, #152]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005426:	2101      	movs	r1, #1
 8005428:	430a      	orrs	r2, r1
 800542a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800542c:	f7fd fac2 	bl	80029b4 <HAL_GetTick>
 8005430:	0003      	movs	r3, r0
 8005432:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005434:	e008      	b.n	8005448 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005436:	f7fd fabd 	bl	80029b4 <HAL_GetTick>
 800543a:	0002      	movs	r2, r0
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e1a8      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005448:	4b1d      	ldr	r3, [pc, #116]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800544a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544c:	2202      	movs	r2, #2
 800544e:	4013      	ands	r3, r2
 8005450:	d0f1      	beq.n	8005436 <HAL_RCC_OscConfig+0x2a2>
 8005452:	e018      	b.n	8005486 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005454:	4b1a      	ldr	r3, [pc, #104]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 8005456:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005458:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800545a:	2101      	movs	r1, #1
 800545c:	438a      	bics	r2, r1
 800545e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fd faa8 	bl	80029b4 <HAL_GetTick>
 8005464:	0003      	movs	r3, r0
 8005466:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800546a:	f7fd faa3 	bl	80029b4 <HAL_GetTick>
 800546e:	0002      	movs	r2, r0
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e18e      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800547c:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800547e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005480:	2202      	movs	r2, #2
 8005482:	4013      	ands	r3, r2
 8005484:	d1f1      	bne.n	800546a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2204      	movs	r2, #4
 800548c:	4013      	ands	r3, r2
 800548e:	d100      	bne.n	8005492 <HAL_RCC_OscConfig+0x2fe>
 8005490:	e0c6      	b.n	8005620 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005492:	231f      	movs	r3, #31
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2238      	movs	r2, #56	; 0x38
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d11e      	bne.n	80054e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80054a6:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <HAL_RCC_OscConfig+0x32c>)
 80054a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054aa:	2202      	movs	r2, #2
 80054ac:	4013      	ands	r3, r2
 80054ae:	d100      	bne.n	80054b2 <HAL_RCC_OscConfig+0x31e>
 80054b0:	e0b6      	b.n	8005620 <HAL_RCC_OscConfig+0x48c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d000      	beq.n	80054bc <HAL_RCC_OscConfig+0x328>
 80054ba:	e0b1      	b.n	8005620 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e16c      	b.n	800579a <HAL_RCC_OscConfig+0x606>
 80054c0:	40021000 	.word	0x40021000
 80054c4:	fffeffff 	.word	0xfffeffff
 80054c8:	fffbffff 	.word	0xfffbffff
 80054cc:	ffff80ff 	.word	0xffff80ff
 80054d0:	ffffc7ff 	.word	0xffffc7ff
 80054d4:	00f42400 	.word	0x00f42400
 80054d8:	20000014 	.word	0x20000014
 80054dc:	20000018 	.word	0x20000018
 80054e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054e4:	4baf      	ldr	r3, [pc, #700]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80054e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	055b      	lsls	r3, r3, #21
 80054ec:	4013      	ands	r3, r2
 80054ee:	d101      	bne.n	80054f4 <HAL_RCC_OscConfig+0x360>
 80054f0:	2301      	movs	r3, #1
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x362>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d011      	beq.n	800551e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	4baa      	ldr	r3, [pc, #680]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80054fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fe:	4ba9      	ldr	r3, [pc, #676]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	0549      	lsls	r1, r1, #21
 8005504:	430a      	orrs	r2, r1
 8005506:	63da      	str	r2, [r3, #60]	; 0x3c
 8005508:	4ba6      	ldr	r3, [pc, #664]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800550a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	055b      	lsls	r3, r3, #21
 8005510:	4013      	ands	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005516:	231f      	movs	r3, #31
 8005518:	18fb      	adds	r3, r7, r3
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800551e:	4ba2      	ldr	r3, [pc, #648]	; (80057a8 <HAL_RCC_OscConfig+0x614>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	2380      	movs	r3, #128	; 0x80
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4013      	ands	r3, r2
 8005528:	d11a      	bne.n	8005560 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800552a:	4b9f      	ldr	r3, [pc, #636]	; (80057a8 <HAL_RCC_OscConfig+0x614>)
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	4b9e      	ldr	r3, [pc, #632]	; (80057a8 <HAL_RCC_OscConfig+0x614>)
 8005530:	2180      	movs	r1, #128	; 0x80
 8005532:	0049      	lsls	r1, r1, #1
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005538:	f7fd fa3c 	bl	80029b4 <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005542:	f7fd fa37 	bl	80029b4 <HAL_GetTick>
 8005546:	0002      	movs	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e122      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005554:	4b94      	ldr	r3, [pc, #592]	; (80057a8 <HAL_RCC_OscConfig+0x614>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	4013      	ands	r3, r2
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d106      	bne.n	8005576 <HAL_RCC_OscConfig+0x3e2>
 8005568:	4b8e      	ldr	r3, [pc, #568]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800556a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800556c:	4b8d      	ldr	r3, [pc, #564]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800556e:	2101      	movs	r1, #1
 8005570:	430a      	orrs	r2, r1
 8005572:	65da      	str	r2, [r3, #92]	; 0x5c
 8005574:	e01c      	b.n	80055b0 <HAL_RCC_OscConfig+0x41c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b05      	cmp	r3, #5
 800557c:	d10c      	bne.n	8005598 <HAL_RCC_OscConfig+0x404>
 800557e:	4b89      	ldr	r3, [pc, #548]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005580:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005582:	4b88      	ldr	r3, [pc, #544]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005584:	2104      	movs	r1, #4
 8005586:	430a      	orrs	r2, r1
 8005588:	65da      	str	r2, [r3, #92]	; 0x5c
 800558a:	4b86      	ldr	r3, [pc, #536]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800558c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800558e:	4b85      	ldr	r3, [pc, #532]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005590:	2101      	movs	r1, #1
 8005592:	430a      	orrs	r2, r1
 8005594:	65da      	str	r2, [r3, #92]	; 0x5c
 8005596:	e00b      	b.n	80055b0 <HAL_RCC_OscConfig+0x41c>
 8005598:	4b82      	ldr	r3, [pc, #520]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800559a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800559c:	4b81      	ldr	r3, [pc, #516]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800559e:	2101      	movs	r1, #1
 80055a0:	438a      	bics	r2, r1
 80055a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80055a4:	4b7f      	ldr	r3, [pc, #508]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80055a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055a8:	4b7e      	ldr	r3, [pc, #504]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80055aa:	2104      	movs	r1, #4
 80055ac:	438a      	bics	r2, r1
 80055ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d014      	beq.n	80055e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fd f9fc 	bl	80029b4 <HAL_GetTick>
 80055bc:	0003      	movs	r3, r0
 80055be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c0:	e009      	b.n	80055d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c2:	f7fd f9f7 	bl	80029b4 <HAL_GetTick>
 80055c6:	0002      	movs	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	4a77      	ldr	r2, [pc, #476]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e0e1      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	4b73      	ldr	r3, [pc, #460]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80055d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055da:	2202      	movs	r2, #2
 80055dc:	4013      	ands	r3, r2
 80055de:	d0f0      	beq.n	80055c2 <HAL_RCC_OscConfig+0x42e>
 80055e0:	e013      	b.n	800560a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fd f9e7 	bl	80029b4 <HAL_GetTick>
 80055e6:	0003      	movs	r3, r0
 80055e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055ea:	e009      	b.n	8005600 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ec:	f7fd f9e2 	bl	80029b4 <HAL_GetTick>
 80055f0:	0002      	movs	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	4a6d      	ldr	r2, [pc, #436]	; (80057ac <HAL_RCC_OscConfig+0x618>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e0cc      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005600:	4b68      	ldr	r3, [pc, #416]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005604:	2202      	movs	r2, #2
 8005606:	4013      	ands	r3, r2
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800560a:	231f      	movs	r3, #31
 800560c:	18fb      	adds	r3, r7, r3
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d105      	bne.n	8005620 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005614:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005618:	4b62      	ldr	r3, [pc, #392]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800561a:	4965      	ldr	r1, [pc, #404]	; (80057b0 <HAL_RCC_OscConfig+0x61c>)
 800561c:	400a      	ands	r2, r1
 800561e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d100      	bne.n	800562a <HAL_RCC_OscConfig+0x496>
 8005628:	e0b6      	b.n	8005798 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800562a:	4b5e      	ldr	r3, [pc, #376]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2238      	movs	r2, #56	; 0x38
 8005630:	4013      	ands	r3, r2
 8005632:	2b10      	cmp	r3, #16
 8005634:	d100      	bne.n	8005638 <HAL_RCC_OscConfig+0x4a4>
 8005636:	e07e      	b.n	8005736 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d153      	bne.n	80056e8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005640:	4b58      	ldr	r3, [pc, #352]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	4b57      	ldr	r3, [pc, #348]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005646:	495b      	ldr	r1, [pc, #364]	; (80057b4 <HAL_RCC_OscConfig+0x620>)
 8005648:	400a      	ands	r2, r1
 800564a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fd f9b2 	bl	80029b4 <HAL_GetTick>
 8005650:	0003      	movs	r3, r0
 8005652:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005656:	f7fd f9ad 	bl	80029b4 <HAL_GetTick>
 800565a:	0002      	movs	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e098      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005668:	4b4e      	ldr	r3, [pc, #312]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	049b      	lsls	r3, r3, #18
 8005670:	4013      	ands	r3, r2
 8005672:	d1f0      	bne.n	8005656 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005674:	4b4b      	ldr	r3, [pc, #300]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	4a4f      	ldr	r2, [pc, #316]	; (80057b8 <HAL_RCC_OscConfig+0x624>)
 800567a:	4013      	ands	r3, r2
 800567c:	0019      	movs	r1, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1a      	ldr	r2, [r3, #32]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	431a      	orrs	r2, r3
 800569c:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800569e:	430a      	orrs	r2, r1
 80056a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056a2:	4b40      	ldr	r3, [pc, #256]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b3f      	ldr	r3, [pc, #252]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	0449      	lsls	r1, r1, #17
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80056b0:	4b3c      	ldr	r3, [pc, #240]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	4b3b      	ldr	r3, [pc, #236]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056b6:	2180      	movs	r1, #128	; 0x80
 80056b8:	0549      	lsls	r1, r1, #21
 80056ba:	430a      	orrs	r2, r1
 80056bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd f979 	bl	80029b4 <HAL_GetTick>
 80056c2:	0003      	movs	r3, r0
 80056c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c8:	f7fd f974 	bl	80029b4 <HAL_GetTick>
 80056cc:	0002      	movs	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e05f      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056da:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	049b      	lsls	r3, r3, #18
 80056e2:	4013      	ands	r3, r2
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x534>
 80056e6:	e057      	b.n	8005798 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e8:	4b2e      	ldr	r3, [pc, #184]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056ee:	4931      	ldr	r1, [pc, #196]	; (80057b4 <HAL_RCC_OscConfig+0x620>)
 80056f0:	400a      	ands	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80056f4:	4b2b      	ldr	r3, [pc, #172]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	4b2a      	ldr	r3, [pc, #168]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 80056fa:	2103      	movs	r1, #3
 80056fc:	438a      	bics	r2, r1
 80056fe:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005700:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005706:	492d      	ldr	r1, [pc, #180]	; (80057bc <HAL_RCC_OscConfig+0x628>)
 8005708:	400a      	ands	r2, r1
 800570a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570c:	f7fd f952 	bl	80029b4 <HAL_GetTick>
 8005710:	0003      	movs	r3, r0
 8005712:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005716:	f7fd f94d 	bl	80029b4 <HAL_GetTick>
 800571a:	0002      	movs	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e038      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005728:	4b1e      	ldr	r3, [pc, #120]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	2380      	movs	r3, #128	; 0x80
 800572e:	049b      	lsls	r3, r3, #18
 8005730:	4013      	ands	r3, r2
 8005732:	d1f0      	bne.n	8005716 <HAL_RCC_OscConfig+0x582>
 8005734:	e030      	b.n	8005798 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d101      	bne.n	8005742 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e02b      	b.n	800579a <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005742:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <HAL_RCC_OscConfig+0x610>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2203      	movs	r2, #3
 800574c:	401a      	ands	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	429a      	cmp	r2, r3
 8005754:	d11e      	bne.n	8005794 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2270      	movs	r2, #112	; 0x70
 800575a:	401a      	ands	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d117      	bne.n	8005794 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	23fe      	movs	r3, #254	; 0xfe
 8005768:	01db      	lsls	r3, r3, #7
 800576a:	401a      	ands	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005772:	429a      	cmp	r2, r3
 8005774:	d10e      	bne.n	8005794 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	23f8      	movs	r3, #248	; 0xf8
 800577a:	039b      	lsls	r3, r3, #14
 800577c:	401a      	ands	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005782:	429a      	cmp	r2, r3
 8005784:	d106      	bne.n	8005794 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	0f5b      	lsrs	r3, r3, #29
 800578a:	075a      	lsls	r2, r3, #29
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005790:	429a      	cmp	r2, r3
 8005792:	d001      	beq.n	8005798 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	0018      	movs	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	b008      	add	sp, #32
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	40021000 	.word	0x40021000
 80057a8:	40007000 	.word	0x40007000
 80057ac:	00001388 	.word	0x00001388
 80057b0:	efffffff 	.word	0xefffffff
 80057b4:	feffffff 	.word	0xfeffffff
 80057b8:	1fc1808c 	.word	0x1fc1808c
 80057bc:	effeffff 	.word	0xeffeffff

080057c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0e9      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057d4:	4b76      	ldr	r3, [pc, #472]	; (80059b0 <HAL_RCC_ClockConfig+0x1f0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2207      	movs	r2, #7
 80057da:	4013      	ands	r3, r2
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d91e      	bls.n	8005820 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e2:	4b73      	ldr	r3, [pc, #460]	; (80059b0 <HAL_RCC_ClockConfig+0x1f0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2207      	movs	r2, #7
 80057e8:	4393      	bics	r3, r2
 80057ea:	0019      	movs	r1, r3
 80057ec:	4b70      	ldr	r3, [pc, #448]	; (80059b0 <HAL_RCC_ClockConfig+0x1f0>)
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057f4:	f7fd f8de 	bl	80029b4 <HAL_GetTick>
 80057f8:	0003      	movs	r3, r0
 80057fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057fc:	e009      	b.n	8005812 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fe:	f7fd f8d9 	bl	80029b4 <HAL_GetTick>
 8005802:	0002      	movs	r2, r0
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	4a6a      	ldr	r2, [pc, #424]	; (80059b4 <HAL_RCC_ClockConfig+0x1f4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e0ca      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005812:	4b67      	ldr	r3, [pc, #412]	; (80059b0 <HAL_RCC_ClockConfig+0x1f0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2207      	movs	r2, #7
 8005818:	4013      	ands	r3, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d1ee      	bne.n	80057fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2202      	movs	r2, #2
 8005826:	4013      	ands	r3, r2
 8005828:	d015      	beq.n	8005856 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2204      	movs	r2, #4
 8005830:	4013      	ands	r3, r2
 8005832:	d006      	beq.n	8005842 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005834:	4b60      	ldr	r3, [pc, #384]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 8005836:	689a      	ldr	r2, [r3, #8]
 8005838:	4b5f      	ldr	r3, [pc, #380]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 800583a:	21e0      	movs	r1, #224	; 0xe0
 800583c:	01c9      	lsls	r1, r1, #7
 800583e:	430a      	orrs	r2, r1
 8005840:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005842:	4b5d      	ldr	r3, [pc, #372]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	4a5d      	ldr	r2, [pc, #372]	; (80059bc <HAL_RCC_ClockConfig+0x1fc>)
 8005848:	4013      	ands	r3, r2
 800584a:	0019      	movs	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	4b59      	ldr	r3, [pc, #356]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 8005852:	430a      	orrs	r2, r1
 8005854:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2201      	movs	r2, #1
 800585c:	4013      	ands	r3, r2
 800585e:	d057      	beq.n	8005910 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d107      	bne.n	8005878 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005868:	4b53      	ldr	r3, [pc, #332]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	2380      	movs	r3, #128	; 0x80
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	4013      	ands	r3, r2
 8005872:	d12b      	bne.n	80058cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e097      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d107      	bne.n	8005890 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005880:	4b4d      	ldr	r3, [pc, #308]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	049b      	lsls	r3, r3, #18
 8005888:	4013      	ands	r3, r2
 800588a:	d11f      	bne.n	80058cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e08b      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d107      	bne.n	80058a8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005898:	4b47      	ldr	r3, [pc, #284]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4013      	ands	r3, r2
 80058a2:	d113      	bne.n	80058cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e07f      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d106      	bne.n	80058be <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058b0:	4b41      	ldr	r3, [pc, #260]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 80058b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b4:	2202      	movs	r2, #2
 80058b6:	4013      	ands	r3, r2
 80058b8:	d108      	bne.n	80058cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e074      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058be:	4b3e      	ldr	r3, [pc, #248]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 80058c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c2:	2202      	movs	r2, #2
 80058c4:	4013      	ands	r3, r2
 80058c6:	d101      	bne.n	80058cc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e06d      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058cc:	4b3a      	ldr	r3, [pc, #232]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2207      	movs	r2, #7
 80058d2:	4393      	bics	r3, r2
 80058d4:	0019      	movs	r1, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685a      	ldr	r2, [r3, #4]
 80058da:	4b37      	ldr	r3, [pc, #220]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e0:	f7fd f868 	bl	80029b4 <HAL_GetTick>
 80058e4:	0003      	movs	r3, r0
 80058e6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e8:	e009      	b.n	80058fe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ea:	f7fd f863 	bl	80029b4 <HAL_GetTick>
 80058ee:	0002      	movs	r2, r0
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <HAL_RCC_ClockConfig+0x1f4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e054      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fe:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2238      	movs	r2, #56	; 0x38
 8005904:	401a      	ands	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	429a      	cmp	r2, r3
 800590e:	d1ec      	bne.n	80058ea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005910:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <HAL_RCC_ClockConfig+0x1f0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2207      	movs	r2, #7
 8005916:	4013      	ands	r3, r2
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d21e      	bcs.n	800595c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <HAL_RCC_ClockConfig+0x1f0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2207      	movs	r2, #7
 8005924:	4393      	bics	r3, r2
 8005926:	0019      	movs	r1, r3
 8005928:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <HAL_RCC_ClockConfig+0x1f0>)
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005930:	f7fd f840 	bl	80029b4 <HAL_GetTick>
 8005934:	0003      	movs	r3, r0
 8005936:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005938:	e009      	b.n	800594e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593a:	f7fd f83b 	bl	80029b4 <HAL_GetTick>
 800593e:	0002      	movs	r2, r0
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	4a1b      	ldr	r2, [pc, #108]	; (80059b4 <HAL_RCC_ClockConfig+0x1f4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e02c      	b.n	80059a8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800594e:	4b18      	ldr	r3, [pc, #96]	; (80059b0 <HAL_RCC_ClockConfig+0x1f0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2207      	movs	r2, #7
 8005954:	4013      	ands	r3, r2
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d1ee      	bne.n	800593a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2204      	movs	r2, #4
 8005962:	4013      	ands	r3, r2
 8005964:	d009      	beq.n	800597a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005966:	4b14      	ldr	r3, [pc, #80]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <HAL_RCC_ClockConfig+0x200>)
 800596c:	4013      	ands	r3, r2
 800596e:	0019      	movs	r1, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 8005976:	430a      	orrs	r2, r1
 8005978:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800597a:	f000 f829 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 800597e:	0001      	movs	r1, r0
 8005980:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <HAL_RCC_ClockConfig+0x1f8>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	0a1b      	lsrs	r3, r3, #8
 8005986:	220f      	movs	r2, #15
 8005988:	401a      	ands	r2, r3
 800598a:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <HAL_RCC_ClockConfig+0x204>)
 800598c:	0092      	lsls	r2, r2, #2
 800598e:	58d3      	ldr	r3, [r2, r3]
 8005990:	221f      	movs	r2, #31
 8005992:	4013      	ands	r3, r2
 8005994:	000a      	movs	r2, r1
 8005996:	40da      	lsrs	r2, r3
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_RCC_ClockConfig+0x208>)
 800599a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <HAL_RCC_ClockConfig+0x20c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	0018      	movs	r0, r3
 80059a2:	f7fc ffab 	bl	80028fc <HAL_InitTick>
 80059a6:	0003      	movs	r3, r0
}
 80059a8:	0018      	movs	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	b004      	add	sp, #16
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40022000 	.word	0x40022000
 80059b4:	00001388 	.word	0x00001388
 80059b8:	40021000 	.word	0x40021000
 80059bc:	fffff0ff 	.word	0xfffff0ff
 80059c0:	ffff8fff 	.word	0xffff8fff
 80059c4:	08008770 	.word	0x08008770
 80059c8:	20000014 	.word	0x20000014
 80059cc:	20000018 	.word	0x20000018

080059d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059d6:	4b3c      	ldr	r3, [pc, #240]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	2238      	movs	r2, #56	; 0x38
 80059dc:	4013      	ands	r3, r2
 80059de:	d10f      	bne.n	8005a00 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80059e0:	4b39      	ldr	r3, [pc, #228]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	0adb      	lsrs	r3, r3, #11
 80059e6:	2207      	movs	r2, #7
 80059e8:	4013      	ands	r3, r2
 80059ea:	2201      	movs	r2, #1
 80059ec:	409a      	lsls	r2, r3
 80059ee:	0013      	movs	r3, r2
 80059f0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	4835      	ldr	r0, [pc, #212]	; (8005acc <HAL_RCC_GetSysClockFreq+0xfc>)
 80059f6:	f7fa fb9d 	bl	8000134 <__udivsi3>
 80059fa:	0003      	movs	r3, r0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e05d      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a00:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	2238      	movs	r2, #56	; 0x38
 8005a06:	4013      	ands	r3, r2
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d102      	bne.n	8005a12 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a0c:	4b30      	ldr	r3, [pc, #192]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	e054      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a12:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2238      	movs	r2, #56	; 0x38
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b10      	cmp	r3, #16
 8005a1c:	d138      	bne.n	8005a90 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005a1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	2203      	movs	r2, #3
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a28:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	2207      	movs	r2, #7
 8005a30:	4013      	ands	r3, r2
 8005a32:	3301      	adds	r3, #1
 8005a34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d10d      	bne.n	8005a58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	4824      	ldr	r0, [pc, #144]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005a40:	f7fa fb78 	bl	8000134 <__udivsi3>
 8005a44:	0003      	movs	r3, r0
 8005a46:	0019      	movs	r1, r3
 8005a48:	4b1f      	ldr	r3, [pc, #124]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	0a1b      	lsrs	r3, r3, #8
 8005a4e:	227f      	movs	r2, #127	; 0x7f
 8005a50:	4013      	ands	r3, r2
 8005a52:	434b      	muls	r3, r1
 8005a54:	617b      	str	r3, [r7, #20]
        break;
 8005a56:	e00d      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	481c      	ldr	r0, [pc, #112]	; (8005acc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005a5c:	f7fa fb6a 	bl	8000134 <__udivsi3>
 8005a60:	0003      	movs	r3, r0
 8005a62:	0019      	movs	r1, r3
 8005a64:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	227f      	movs	r2, #127	; 0x7f
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	434b      	muls	r3, r1
 8005a70:	617b      	str	r3, [r7, #20]
        break;
 8005a72:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005a74:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	0f5b      	lsrs	r3, r3, #29
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	3301      	adds	r3, #1
 8005a80:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	6978      	ldr	r0, [r7, #20]
 8005a86:	f7fa fb55 	bl	8000134 <__udivsi3>
 8005a8a:	0003      	movs	r3, r0
 8005a8c:	613b      	str	r3, [r7, #16]
 8005a8e:	e015      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a90:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	2238      	movs	r2, #56	; 0x38
 8005a96:	4013      	ands	r3, r2
 8005a98:	2b20      	cmp	r3, #32
 8005a9a:	d103      	bne.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005a9c:	2380      	movs	r3, #128	; 0x80
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	613b      	str	r3, [r7, #16]
 8005aa2:	e00b      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005aa4:	4b08      	ldr	r3, [pc, #32]	; (8005ac8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2238      	movs	r2, #56	; 0x38
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b18      	cmp	r3, #24
 8005aae:	d103      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005ab0:	23fa      	movs	r3, #250	; 0xfa
 8005ab2:	01db      	lsls	r3, r3, #7
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	e001      	b.n	8005abc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005abc:	693b      	ldr	r3, [r7, #16]
}
 8005abe:	0018      	movs	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	b006      	add	sp, #24
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	00f42400 	.word	0x00f42400
 8005ad0:	007a1200 	.word	0x007a1200

08005ad4 <__errno>:
 8005ad4:	4b01      	ldr	r3, [pc, #4]	; (8005adc <__errno+0x8>)
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	4770      	bx	lr
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	20000020 	.word	0x20000020

08005ae0 <__libc_init_array>:
 8005ae0:	b570      	push	{r4, r5, r6, lr}
 8005ae2:	2600      	movs	r6, #0
 8005ae4:	4d0c      	ldr	r5, [pc, #48]	; (8005b18 <__libc_init_array+0x38>)
 8005ae6:	4c0d      	ldr	r4, [pc, #52]	; (8005b1c <__libc_init_array+0x3c>)
 8005ae8:	1b64      	subs	r4, r4, r5
 8005aea:	10a4      	asrs	r4, r4, #2
 8005aec:	42a6      	cmp	r6, r4
 8005aee:	d109      	bne.n	8005b04 <__libc_init_array+0x24>
 8005af0:	2600      	movs	r6, #0
 8005af2:	f002 fdef 	bl	80086d4 <_init>
 8005af6:	4d0a      	ldr	r5, [pc, #40]	; (8005b20 <__libc_init_array+0x40>)
 8005af8:	4c0a      	ldr	r4, [pc, #40]	; (8005b24 <__libc_init_array+0x44>)
 8005afa:	1b64      	subs	r4, r4, r5
 8005afc:	10a4      	asrs	r4, r4, #2
 8005afe:	42a6      	cmp	r6, r4
 8005b00:	d105      	bne.n	8005b0e <__libc_init_array+0x2e>
 8005b02:	bd70      	pop	{r4, r5, r6, pc}
 8005b04:	00b3      	lsls	r3, r6, #2
 8005b06:	58eb      	ldr	r3, [r5, r3]
 8005b08:	4798      	blx	r3
 8005b0a:	3601      	adds	r6, #1
 8005b0c:	e7ee      	b.n	8005aec <__libc_init_array+0xc>
 8005b0e:	00b3      	lsls	r3, r6, #2
 8005b10:	58eb      	ldr	r3, [r5, r3]
 8005b12:	4798      	blx	r3
 8005b14:	3601      	adds	r6, #1
 8005b16:	e7f2      	b.n	8005afe <__libc_init_array+0x1e>
 8005b18:	08008b8c 	.word	0x08008b8c
 8005b1c:	08008b8c 	.word	0x08008b8c
 8005b20:	08008b8c 	.word	0x08008b8c
 8005b24:	08008b90 	.word	0x08008b90

08005b28 <memset>:
 8005b28:	0003      	movs	r3, r0
 8005b2a:	1882      	adds	r2, r0, r2
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d100      	bne.n	8005b32 <memset+0xa>
 8005b30:	4770      	bx	lr
 8005b32:	7019      	strb	r1, [r3, #0]
 8005b34:	3301      	adds	r3, #1
 8005b36:	e7f9      	b.n	8005b2c <memset+0x4>

08005b38 <__cvt>:
 8005b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b3a:	001e      	movs	r6, r3
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	0014      	movs	r4, r2
 8005b40:	b08b      	sub	sp, #44	; 0x2c
 8005b42:	429e      	cmp	r6, r3
 8005b44:	da04      	bge.n	8005b50 <__cvt+0x18>
 8005b46:	2180      	movs	r1, #128	; 0x80
 8005b48:	0609      	lsls	r1, r1, #24
 8005b4a:	1873      	adds	r3, r6, r1
 8005b4c:	001e      	movs	r6, r3
 8005b4e:	232d      	movs	r3, #45	; 0x2d
 8005b50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005b54:	7013      	strb	r3, [r2, #0]
 8005b56:	2320      	movs	r3, #32
 8005b58:	2203      	movs	r2, #3
 8005b5a:	439f      	bics	r7, r3
 8005b5c:	2f46      	cmp	r7, #70	; 0x46
 8005b5e:	d007      	beq.n	8005b70 <__cvt+0x38>
 8005b60:	003b      	movs	r3, r7
 8005b62:	3b45      	subs	r3, #69	; 0x45
 8005b64:	4259      	negs	r1, r3
 8005b66:	414b      	adcs	r3, r1
 8005b68:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005b6a:	3a01      	subs	r2, #1
 8005b6c:	18cb      	adds	r3, r1, r3
 8005b6e:	9310      	str	r3, [sp, #64]	; 0x40
 8005b70:	ab09      	add	r3, sp, #36	; 0x24
 8005b72:	9304      	str	r3, [sp, #16]
 8005b74:	ab08      	add	r3, sp, #32
 8005b76:	9303      	str	r3, [sp, #12]
 8005b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b7a:	9200      	str	r2, [sp, #0]
 8005b7c:	9302      	str	r3, [sp, #8]
 8005b7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b80:	0022      	movs	r2, r4
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	0033      	movs	r3, r6
 8005b86:	f000 fcd1 	bl	800652c <_dtoa_r>
 8005b8a:	0005      	movs	r5, r0
 8005b8c:	2f47      	cmp	r7, #71	; 0x47
 8005b8e:	d102      	bne.n	8005b96 <__cvt+0x5e>
 8005b90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b92:	07db      	lsls	r3, r3, #31
 8005b94:	d528      	bpl.n	8005be8 <__cvt+0xb0>
 8005b96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b98:	18eb      	adds	r3, r5, r3
 8005b9a:	9307      	str	r3, [sp, #28]
 8005b9c:	2f46      	cmp	r7, #70	; 0x46
 8005b9e:	d114      	bne.n	8005bca <__cvt+0x92>
 8005ba0:	782b      	ldrb	r3, [r5, #0]
 8005ba2:	2b30      	cmp	r3, #48	; 0x30
 8005ba4:	d10c      	bne.n	8005bc0 <__cvt+0x88>
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	0020      	movs	r0, r4
 8005bac:	0031      	movs	r1, r6
 8005bae:	f7fa fc47 	bl	8000440 <__aeabi_dcmpeq>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d104      	bne.n	8005bc0 <__cvt+0x88>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bc2:	9a07      	ldr	r2, [sp, #28]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	18d3      	adds	r3, r2, r3
 8005bc8:	9307      	str	r3, [sp, #28]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2300      	movs	r3, #0
 8005bce:	0020      	movs	r0, r4
 8005bd0:	0031      	movs	r1, r6
 8005bd2:	f7fa fc35 	bl	8000440 <__aeabi_dcmpeq>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d001      	beq.n	8005bde <__cvt+0xa6>
 8005bda:	9b07      	ldr	r3, [sp, #28]
 8005bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bde:	2230      	movs	r2, #48	; 0x30
 8005be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be2:	9907      	ldr	r1, [sp, #28]
 8005be4:	428b      	cmp	r3, r1
 8005be6:	d306      	bcc.n	8005bf6 <__cvt+0xbe>
 8005be8:	0028      	movs	r0, r5
 8005bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bee:	1b5b      	subs	r3, r3, r5
 8005bf0:	6013      	str	r3, [r2, #0]
 8005bf2:	b00b      	add	sp, #44	; 0x2c
 8005bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf6:	1c59      	adds	r1, r3, #1
 8005bf8:	9109      	str	r1, [sp, #36]	; 0x24
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	e7f0      	b.n	8005be0 <__cvt+0xa8>

08005bfe <__exponent>:
 8005bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c00:	1c83      	adds	r3, r0, #2
 8005c02:	b087      	sub	sp, #28
 8005c04:	9303      	str	r3, [sp, #12]
 8005c06:	0005      	movs	r5, r0
 8005c08:	000c      	movs	r4, r1
 8005c0a:	232b      	movs	r3, #43	; 0x2b
 8005c0c:	7002      	strb	r2, [r0, #0]
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	da01      	bge.n	8005c16 <__exponent+0x18>
 8005c12:	424c      	negs	r4, r1
 8005c14:	3302      	adds	r3, #2
 8005c16:	706b      	strb	r3, [r5, #1]
 8005c18:	2c09      	cmp	r4, #9
 8005c1a:	dd31      	ble.n	8005c80 <__exponent+0x82>
 8005c1c:	270a      	movs	r7, #10
 8005c1e:	ab04      	add	r3, sp, #16
 8005c20:	1dde      	adds	r6, r3, #7
 8005c22:	0020      	movs	r0, r4
 8005c24:	0039      	movs	r1, r7
 8005c26:	9601      	str	r6, [sp, #4]
 8005c28:	f7fa fbf4 	bl	8000414 <__aeabi_idivmod>
 8005c2c:	3e01      	subs	r6, #1
 8005c2e:	3130      	adds	r1, #48	; 0x30
 8005c30:	0020      	movs	r0, r4
 8005c32:	7031      	strb	r1, [r6, #0]
 8005c34:	0039      	movs	r1, r7
 8005c36:	9402      	str	r4, [sp, #8]
 8005c38:	f7fa fb06 	bl	8000248 <__divsi3>
 8005c3c:	9b02      	ldr	r3, [sp, #8]
 8005c3e:	0004      	movs	r4, r0
 8005c40:	2b63      	cmp	r3, #99	; 0x63
 8005c42:	dcee      	bgt.n	8005c22 <__exponent+0x24>
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	3430      	adds	r4, #48	; 0x30
 8005c48:	1e9a      	subs	r2, r3, #2
 8005c4a:	0013      	movs	r3, r2
 8005c4c:	9903      	ldr	r1, [sp, #12]
 8005c4e:	7014      	strb	r4, [r2, #0]
 8005c50:	a804      	add	r0, sp, #16
 8005c52:	3007      	adds	r0, #7
 8005c54:	4298      	cmp	r0, r3
 8005c56:	d80e      	bhi.n	8005c76 <__exponent+0x78>
 8005c58:	ab04      	add	r3, sp, #16
 8005c5a:	3307      	adds	r3, #7
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d804      	bhi.n	8005c6c <__exponent+0x6e>
 8005c62:	ab04      	add	r3, sp, #16
 8005c64:	3009      	adds	r0, #9
 8005c66:	18c0      	adds	r0, r0, r3
 8005c68:	9b01      	ldr	r3, [sp, #4]
 8005c6a:	1ac0      	subs	r0, r0, r3
 8005c6c:	9b03      	ldr	r3, [sp, #12]
 8005c6e:	1818      	adds	r0, r3, r0
 8005c70:	1b40      	subs	r0, r0, r5
 8005c72:	b007      	add	sp, #28
 8005c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c76:	7818      	ldrb	r0, [r3, #0]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	7008      	strb	r0, [r1, #0]
 8005c7c:	3101      	adds	r1, #1
 8005c7e:	e7e7      	b.n	8005c50 <__exponent+0x52>
 8005c80:	2330      	movs	r3, #48	; 0x30
 8005c82:	18e4      	adds	r4, r4, r3
 8005c84:	70ab      	strb	r3, [r5, #2]
 8005c86:	1d28      	adds	r0, r5, #4
 8005c88:	70ec      	strb	r4, [r5, #3]
 8005c8a:	e7f1      	b.n	8005c70 <__exponent+0x72>

08005c8c <_printf_float>:
 8005c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8e:	b095      	sub	sp, #84	; 0x54
 8005c90:	000c      	movs	r4, r1
 8005c92:	9209      	str	r2, [sp, #36]	; 0x24
 8005c94:	001e      	movs	r6, r3
 8005c96:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005c98:	0007      	movs	r7, r0
 8005c9a:	f001 fa61 	bl	8007160 <_localeconv_r>
 8005c9e:	6803      	ldr	r3, [r0, #0]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	930c      	str	r3, [sp, #48]	; 0x30
 8005ca4:	f7fa fa2a 	bl	80000fc <strlen>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9312      	str	r3, [sp, #72]	; 0x48
 8005cac:	7e23      	ldrb	r3, [r4, #24]
 8005cae:	2207      	movs	r2, #7
 8005cb0:	930a      	str	r3, [sp, #40]	; 0x28
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	900e      	str	r0, [sp, #56]	; 0x38
 8005cb6:	930d      	str	r3, [sp, #52]	; 0x34
 8005cb8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cba:	682b      	ldr	r3, [r5, #0]
 8005cbc:	05c9      	lsls	r1, r1, #23
 8005cbe:	d547      	bpl.n	8005d50 <_printf_float+0xc4>
 8005cc0:	189b      	adds	r3, r3, r2
 8005cc2:	4393      	bics	r3, r2
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	3208      	adds	r2, #8
 8005cc8:	602a      	str	r2, [r5, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	64a2      	str	r2, [r4, #72]	; 0x48
 8005cd0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005cd6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cda:	006b      	lsls	r3, r5, #1
 8005cdc:	085b      	lsrs	r3, r3, #1
 8005cde:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ce0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005ce2:	4ba7      	ldr	r3, [pc, #668]	; (8005f80 <_printf_float+0x2f4>)
 8005ce4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ce6:	4252      	negs	r2, r2
 8005ce8:	f7fc f914 	bl	8001f14 <__aeabi_dcmpun>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d131      	bne.n	8005d54 <_printf_float+0xc8>
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	4ba3      	ldr	r3, [pc, #652]	; (8005f80 <_printf_float+0x2f4>)
 8005cf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005cf6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cf8:	4252      	negs	r2, r2
 8005cfa:	f7fa fbb1 	bl	8000460 <__aeabi_dcmple>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d128      	bne.n	8005d54 <_printf_float+0xc8>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	0029      	movs	r1, r5
 8005d08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005d0a:	f7fa fb9f 	bl	800044c <__aeabi_dcmplt>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d003      	beq.n	8005d1a <_printf_float+0x8e>
 8005d12:	0023      	movs	r3, r4
 8005d14:	222d      	movs	r2, #45	; 0x2d
 8005d16:	3343      	adds	r3, #67	; 0x43
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d1c:	4d99      	ldr	r5, [pc, #612]	; (8005f84 <_printf_float+0x2f8>)
 8005d1e:	2b47      	cmp	r3, #71	; 0x47
 8005d20:	d900      	bls.n	8005d24 <_printf_float+0x98>
 8005d22:	4d99      	ldr	r5, [pc, #612]	; (8005f88 <_printf_float+0x2fc>)
 8005d24:	2303      	movs	r3, #3
 8005d26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d28:	6123      	str	r3, [r4, #16]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	439a      	bics	r2, r3
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6022      	str	r2, [r4, #0]
 8005d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d36:	0021      	movs	r1, r4
 8005d38:	0038      	movs	r0, r7
 8005d3a:	9600      	str	r6, [sp, #0]
 8005d3c:	aa13      	add	r2, sp, #76	; 0x4c
 8005d3e:	f000 f9e7 	bl	8006110 <_printf_common>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d000      	beq.n	8005d48 <_printf_float+0xbc>
 8005d46:	e0a2      	b.n	8005e8e <_printf_float+0x202>
 8005d48:	2001      	movs	r0, #1
 8005d4a:	4240      	negs	r0, r0
 8005d4c:	b015      	add	sp, #84	; 0x54
 8005d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d50:	3307      	adds	r3, #7
 8005d52:	e7b6      	b.n	8005cc2 <_printf_float+0x36>
 8005d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d56:	002b      	movs	r3, r5
 8005d58:	0010      	movs	r0, r2
 8005d5a:	0029      	movs	r1, r5
 8005d5c:	f7fc f8da 	bl	8001f14 <__aeabi_dcmpun>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d00b      	beq.n	8005d7c <_printf_float+0xf0>
 8005d64:	2d00      	cmp	r5, #0
 8005d66:	da03      	bge.n	8005d70 <_printf_float+0xe4>
 8005d68:	0023      	movs	r3, r4
 8005d6a:	222d      	movs	r2, #45	; 0x2d
 8005d6c:	3343      	adds	r3, #67	; 0x43
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d72:	4d86      	ldr	r5, [pc, #536]	; (8005f8c <_printf_float+0x300>)
 8005d74:	2b47      	cmp	r3, #71	; 0x47
 8005d76:	d9d5      	bls.n	8005d24 <_printf_float+0x98>
 8005d78:	4d85      	ldr	r5, [pc, #532]	; (8005f90 <_printf_float+0x304>)
 8005d7a:	e7d3      	b.n	8005d24 <_printf_float+0x98>
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d80:	6863      	ldr	r3, [r4, #4]
 8005d82:	4391      	bics	r1, r2
 8005d84:	910f      	str	r1, [sp, #60]	; 0x3c
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	d149      	bne.n	8005e1e <_printf_float+0x192>
 8005d8a:	3307      	adds	r3, #7
 8005d8c:	6063      	str	r3, [r4, #4]
 8005d8e:	2380      	movs	r3, #128	; 0x80
 8005d90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4313      	orrs	r3, r2
 8005d96:	2200      	movs	r2, #0
 8005d98:	9206      	str	r2, [sp, #24]
 8005d9a:	aa12      	add	r2, sp, #72	; 0x48
 8005d9c:	9205      	str	r2, [sp, #20]
 8005d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005da0:	a908      	add	r1, sp, #32
 8005da2:	9204      	str	r2, [sp, #16]
 8005da4:	aa11      	add	r2, sp, #68	; 0x44
 8005da6:	9203      	str	r2, [sp, #12]
 8005da8:	2223      	movs	r2, #35	; 0x23
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	6863      	ldr	r3, [r4, #4]
 8005db0:	1852      	adds	r2, r2, r1
 8005db2:	9202      	str	r2, [sp, #8]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	0038      	movs	r0, r7
 8005db8:	002b      	movs	r3, r5
 8005dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dbc:	f7ff febc 	bl	8005b38 <__cvt>
 8005dc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dc2:	0005      	movs	r5, r0
 8005dc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005dc6:	2b47      	cmp	r3, #71	; 0x47
 8005dc8:	d108      	bne.n	8005ddc <_printf_float+0x150>
 8005dca:	1ccb      	adds	r3, r1, #3
 8005dcc:	db02      	blt.n	8005dd4 <_printf_float+0x148>
 8005dce:	6863      	ldr	r3, [r4, #4]
 8005dd0:	4299      	cmp	r1, r3
 8005dd2:	dd48      	ble.n	8005e66 <_printf_float+0x1da>
 8005dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd6:	3b02      	subs	r3, #2
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	930a      	str	r3, [sp, #40]	; 0x28
 8005ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dde:	2b65      	cmp	r3, #101	; 0x65
 8005de0:	d824      	bhi.n	8005e2c <_printf_float+0x1a0>
 8005de2:	0020      	movs	r0, r4
 8005de4:	001a      	movs	r2, r3
 8005de6:	3901      	subs	r1, #1
 8005de8:	3050      	adds	r0, #80	; 0x50
 8005dea:	9111      	str	r1, [sp, #68]	; 0x44
 8005dec:	f7ff ff07 	bl	8005bfe <__exponent>
 8005df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005df2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005df4:	1813      	adds	r3, r2, r0
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	2a01      	cmp	r2, #1
 8005dfa:	dc02      	bgt.n	8005e02 <_printf_float+0x176>
 8005dfc:	6822      	ldr	r2, [r4, #0]
 8005dfe:	07d2      	lsls	r2, r2, #31
 8005e00:	d501      	bpl.n	8005e06 <_printf_float+0x17a>
 8005e02:	3301      	adds	r3, #1
 8005e04:	6123      	str	r3, [r4, #16]
 8005e06:	2323      	movs	r3, #35	; 0x23
 8005e08:	aa08      	add	r2, sp, #32
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d100      	bne.n	8005e14 <_printf_float+0x188>
 8005e12:	e78f      	b.n	8005d34 <_printf_float+0xa8>
 8005e14:	0023      	movs	r3, r4
 8005e16:	222d      	movs	r2, #45	; 0x2d
 8005e18:	3343      	adds	r3, #67	; 0x43
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e78a      	b.n	8005d34 <_printf_float+0xa8>
 8005e1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e20:	2a47      	cmp	r2, #71	; 0x47
 8005e22:	d1b4      	bne.n	8005d8e <_printf_float+0x102>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1b2      	bne.n	8005d8e <_printf_float+0x102>
 8005e28:	3301      	adds	r3, #1
 8005e2a:	e7af      	b.n	8005d8c <_printf_float+0x100>
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e2e:	2b66      	cmp	r3, #102	; 0x66
 8005e30:	d11b      	bne.n	8005e6a <_printf_float+0x1de>
 8005e32:	6863      	ldr	r3, [r4, #4]
 8005e34:	2900      	cmp	r1, #0
 8005e36:	dd0d      	ble.n	8005e54 <_printf_float+0x1c8>
 8005e38:	6121      	str	r1, [r4, #16]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <_printf_float+0x1b8>
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	07d2      	lsls	r2, r2, #31
 8005e42:	d502      	bpl.n	8005e4a <_printf_float+0x1be>
 8005e44:	3301      	adds	r3, #1
 8005e46:	1859      	adds	r1, r3, r1
 8005e48:	6121      	str	r1, [r4, #16]
 8005e4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e4c:	65a3      	str	r3, [r4, #88]	; 0x58
 8005e4e:	2300      	movs	r3, #0
 8005e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e52:	e7d8      	b.n	8005e06 <_printf_float+0x17a>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d103      	bne.n	8005e60 <_printf_float+0x1d4>
 8005e58:	2201      	movs	r2, #1
 8005e5a:	6821      	ldr	r1, [r4, #0]
 8005e5c:	4211      	tst	r1, r2
 8005e5e:	d000      	beq.n	8005e62 <_printf_float+0x1d6>
 8005e60:	1c9a      	adds	r2, r3, #2
 8005e62:	6122      	str	r2, [r4, #16]
 8005e64:	e7f1      	b.n	8005e4a <_printf_float+0x1be>
 8005e66:	2367      	movs	r3, #103	; 0x67
 8005e68:	930a      	str	r3, [sp, #40]	; 0x28
 8005e6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	db06      	blt.n	8005e80 <_printf_float+0x1f4>
 8005e72:	6822      	ldr	r2, [r4, #0]
 8005e74:	6123      	str	r3, [r4, #16]
 8005e76:	07d2      	lsls	r2, r2, #31
 8005e78:	d5e7      	bpl.n	8005e4a <_printf_float+0x1be>
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	6123      	str	r3, [r4, #16]
 8005e7e:	e7e4      	b.n	8005e4a <_printf_float+0x1be>
 8005e80:	2101      	movs	r1, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	dc01      	bgt.n	8005e8a <_printf_float+0x1fe>
 8005e86:	1849      	adds	r1, r1, r1
 8005e88:	1ac9      	subs	r1, r1, r3
 8005e8a:	1852      	adds	r2, r2, r1
 8005e8c:	e7e9      	b.n	8005e62 <_printf_float+0x1d6>
 8005e8e:	6822      	ldr	r2, [r4, #0]
 8005e90:	0553      	lsls	r3, r2, #21
 8005e92:	d407      	bmi.n	8005ea4 <_printf_float+0x218>
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	002a      	movs	r2, r5
 8005e98:	0038      	movs	r0, r7
 8005e9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e9c:	47b0      	blx	r6
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	d128      	bne.n	8005ef4 <_printf_float+0x268>
 8005ea2:	e751      	b.n	8005d48 <_printf_float+0xbc>
 8005ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea6:	2b65      	cmp	r3, #101	; 0x65
 8005ea8:	d800      	bhi.n	8005eac <_printf_float+0x220>
 8005eaa:	e0e1      	b.n	8006070 <_printf_float+0x3e4>
 8005eac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005eae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f7fa fac4 	bl	8000440 <__aeabi_dcmpeq>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d031      	beq.n	8005f20 <_printf_float+0x294>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	0038      	movs	r0, r7
 8005ec0:	4a34      	ldr	r2, [pc, #208]	; (8005f94 <_printf_float+0x308>)
 8005ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ec4:	47b0      	blx	r6
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	d100      	bne.n	8005ecc <_printf_float+0x240>
 8005eca:	e73d      	b.n	8005d48 <_printf_float+0xbc>
 8005ecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ece:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	db02      	blt.n	8005eda <_printf_float+0x24e>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	07db      	lsls	r3, r3, #31
 8005ed8:	d50c      	bpl.n	8005ef4 <_printf_float+0x268>
 8005eda:	0038      	movs	r0, r7
 8005edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ee2:	47b0      	blx	r6
 8005ee4:	2500      	movs	r5, #0
 8005ee6:	1c43      	adds	r3, r0, #1
 8005ee8:	d100      	bne.n	8005eec <_printf_float+0x260>
 8005eea:	e72d      	b.n	8005d48 <_printf_float+0xbc>
 8005eec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	42ab      	cmp	r3, r5
 8005ef2:	dc0a      	bgt.n	8005f0a <_printf_float+0x27e>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	079b      	lsls	r3, r3, #30
 8005ef8:	d500      	bpl.n	8005efc <_printf_float+0x270>
 8005efa:	e106      	b.n	800610a <_printf_float+0x47e>
 8005efc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005efe:	68e0      	ldr	r0, [r4, #12]
 8005f00:	4298      	cmp	r0, r3
 8005f02:	db00      	blt.n	8005f06 <_printf_float+0x27a>
 8005f04:	e722      	b.n	8005d4c <_printf_float+0xc0>
 8005f06:	0018      	movs	r0, r3
 8005f08:	e720      	b.n	8005d4c <_printf_float+0xc0>
 8005f0a:	0022      	movs	r2, r4
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	0038      	movs	r0, r7
 8005f10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f12:	321a      	adds	r2, #26
 8005f14:	47b0      	blx	r6
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d100      	bne.n	8005f1c <_printf_float+0x290>
 8005f1a:	e715      	b.n	8005d48 <_printf_float+0xbc>
 8005f1c:	3501      	adds	r5, #1
 8005f1e:	e7e5      	b.n	8005eec <_printf_float+0x260>
 8005f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dc38      	bgt.n	8005f98 <_printf_float+0x30c>
 8005f26:	2301      	movs	r3, #1
 8005f28:	0038      	movs	r0, r7
 8005f2a:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <_printf_float+0x308>)
 8005f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f2e:	47b0      	blx	r6
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d100      	bne.n	8005f36 <_printf_float+0x2aa>
 8005f34:	e708      	b.n	8005d48 <_printf_float+0xbc>
 8005f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	d102      	bne.n	8005f44 <_printf_float+0x2b8>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	07db      	lsls	r3, r3, #31
 8005f42:	d5d7      	bpl.n	8005ef4 <_printf_float+0x268>
 8005f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f46:	0038      	movs	r0, r7
 8005f48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f4c:	47b0      	blx	r6
 8005f4e:	1c43      	adds	r3, r0, #1
 8005f50:	d100      	bne.n	8005f54 <_printf_float+0x2c8>
 8005f52:	e6f9      	b.n	8005d48 <_printf_float+0xbc>
 8005f54:	2300      	movs	r3, #0
 8005f56:	930a      	str	r3, [sp, #40]	; 0x28
 8005f58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f5c:	425b      	negs	r3, r3
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	dc01      	bgt.n	8005f66 <_printf_float+0x2da>
 8005f62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f64:	e797      	b.n	8005e96 <_printf_float+0x20a>
 8005f66:	0022      	movs	r2, r4
 8005f68:	2301      	movs	r3, #1
 8005f6a:	0038      	movs	r0, r7
 8005f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f6e:	321a      	adds	r2, #26
 8005f70:	47b0      	blx	r6
 8005f72:	1c43      	adds	r3, r0, #1
 8005f74:	d100      	bne.n	8005f78 <_printf_float+0x2ec>
 8005f76:	e6e7      	b.n	8005d48 <_printf_float+0xbc>
 8005f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	e7eb      	b.n	8005f56 <_printf_float+0x2ca>
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	7fefffff 	.word	0x7fefffff
 8005f84:	080087b4 	.word	0x080087b4
 8005f88:	080087b8 	.word	0x080087b8
 8005f8c:	080087bc 	.word	0x080087bc
 8005f90:	080087c0 	.word	0x080087c0
 8005f94:	080087c4 	.word	0x080087c4
 8005f98:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f9c:	920a      	str	r2, [sp, #40]	; 0x28
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	dd00      	ble.n	8005fa4 <_printf_float+0x318>
 8005fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	dc3c      	bgt.n	8006024 <_printf_float+0x398>
 8005faa:	2300      	movs	r3, #0
 8005fac:	930d      	str	r3, [sp, #52]	; 0x34
 8005fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	17db      	asrs	r3, r3, #31
 8005fb4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	dc34      	bgt.n	8006034 <_printf_float+0x3a8>
 8005fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	db3d      	blt.n	800604e <_printf_float+0x3c2>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	07db      	lsls	r3, r3, #31
 8005fd6:	d43a      	bmi.n	800604e <_printf_float+0x3c2>
 8005fd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fdc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	1a52      	subs	r2, r2, r1
 8005fe2:	920a      	str	r2, [sp, #40]	; 0x28
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	dd00      	ble.n	8005fea <_printf_float+0x35e>
 8005fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8005fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dc36      	bgt.n	800605e <_printf_float+0x3d2>
 8005ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff2:	2500      	movs	r5, #0
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	17db      	asrs	r3, r3, #31
 8005ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ffa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006000:	1a9b      	subs	r3, r3, r2
 8006002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006004:	400a      	ands	r2, r1
 8006006:	1a9b      	subs	r3, r3, r2
 8006008:	42ab      	cmp	r3, r5
 800600a:	dc00      	bgt.n	800600e <_printf_float+0x382>
 800600c:	e772      	b.n	8005ef4 <_printf_float+0x268>
 800600e:	0022      	movs	r2, r4
 8006010:	2301      	movs	r3, #1
 8006012:	0038      	movs	r0, r7
 8006014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006016:	321a      	adds	r2, #26
 8006018:	47b0      	blx	r6
 800601a:	1c43      	adds	r3, r0, #1
 800601c:	d100      	bne.n	8006020 <_printf_float+0x394>
 800601e:	e693      	b.n	8005d48 <_printf_float+0xbc>
 8006020:	3501      	adds	r5, #1
 8006022:	e7ea      	b.n	8005ffa <_printf_float+0x36e>
 8006024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006026:	002a      	movs	r2, r5
 8006028:	0038      	movs	r0, r7
 800602a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800602c:	47b0      	blx	r6
 800602e:	1c43      	adds	r3, r0, #1
 8006030:	d1bb      	bne.n	8005faa <_printf_float+0x31e>
 8006032:	e689      	b.n	8005d48 <_printf_float+0xbc>
 8006034:	0022      	movs	r2, r4
 8006036:	2301      	movs	r3, #1
 8006038:	0038      	movs	r0, r7
 800603a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800603c:	321a      	adds	r2, #26
 800603e:	47b0      	blx	r6
 8006040:	1c43      	adds	r3, r0, #1
 8006042:	d100      	bne.n	8006046 <_printf_float+0x3ba>
 8006044:	e680      	b.n	8005d48 <_printf_float+0xbc>
 8006046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006048:	3301      	adds	r3, #1
 800604a:	930d      	str	r3, [sp, #52]	; 0x34
 800604c:	e7b3      	b.n	8005fb6 <_printf_float+0x32a>
 800604e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006050:	0038      	movs	r0, r7
 8006052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006056:	47b0      	blx	r6
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d1bd      	bne.n	8005fd8 <_printf_float+0x34c>
 800605c:	e674      	b.n	8005d48 <_printf_float+0xbc>
 800605e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006060:	0038      	movs	r0, r7
 8006062:	18ea      	adds	r2, r5, r3
 8006064:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006068:	47b0      	blx	r6
 800606a:	1c43      	adds	r3, r0, #1
 800606c:	d1c0      	bne.n	8005ff0 <_printf_float+0x364>
 800606e:	e66b      	b.n	8005d48 <_printf_float+0xbc>
 8006070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006072:	2b01      	cmp	r3, #1
 8006074:	dc02      	bgt.n	800607c <_printf_float+0x3f0>
 8006076:	2301      	movs	r3, #1
 8006078:	421a      	tst	r2, r3
 800607a:	d034      	beq.n	80060e6 <_printf_float+0x45a>
 800607c:	2301      	movs	r3, #1
 800607e:	002a      	movs	r2, r5
 8006080:	0038      	movs	r0, r7
 8006082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006084:	47b0      	blx	r6
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	d100      	bne.n	800608c <_printf_float+0x400>
 800608a:	e65d      	b.n	8005d48 <_printf_float+0xbc>
 800608c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800608e:	0038      	movs	r0, r7
 8006090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006092:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006094:	47b0      	blx	r6
 8006096:	1c43      	adds	r3, r0, #1
 8006098:	d100      	bne.n	800609c <_printf_float+0x410>
 800609a:	e655      	b.n	8005d48 <_printf_float+0xbc>
 800609c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800609e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80060a0:	2200      	movs	r2, #0
 80060a2:	2300      	movs	r3, #0
 80060a4:	f7fa f9cc 	bl	8000440 <__aeabi_dcmpeq>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d11a      	bne.n	80060e2 <_printf_float+0x456>
 80060ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060ae:	1c6a      	adds	r2, r5, #1
 80060b0:	3b01      	subs	r3, #1
 80060b2:	0038      	movs	r0, r7
 80060b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b6:	47b0      	blx	r6
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d10e      	bne.n	80060da <_printf_float+0x44e>
 80060bc:	e644      	b.n	8005d48 <_printf_float+0xbc>
 80060be:	0022      	movs	r2, r4
 80060c0:	2301      	movs	r3, #1
 80060c2:	0038      	movs	r0, r7
 80060c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060c6:	321a      	adds	r2, #26
 80060c8:	47b0      	blx	r6
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	d100      	bne.n	80060d0 <_printf_float+0x444>
 80060ce:	e63b      	b.n	8005d48 <_printf_float+0xbc>
 80060d0:	3501      	adds	r5, #1
 80060d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80060d4:	3b01      	subs	r3, #1
 80060d6:	42ab      	cmp	r3, r5
 80060d8:	dcf1      	bgt.n	80060be <_printf_float+0x432>
 80060da:	0022      	movs	r2, r4
 80060dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060de:	3250      	adds	r2, #80	; 0x50
 80060e0:	e6da      	b.n	8005e98 <_printf_float+0x20c>
 80060e2:	2500      	movs	r5, #0
 80060e4:	e7f5      	b.n	80060d2 <_printf_float+0x446>
 80060e6:	002a      	movs	r2, r5
 80060e8:	e7e3      	b.n	80060b2 <_printf_float+0x426>
 80060ea:	0022      	movs	r2, r4
 80060ec:	2301      	movs	r3, #1
 80060ee:	0038      	movs	r0, r7
 80060f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060f2:	3219      	adds	r2, #25
 80060f4:	47b0      	blx	r6
 80060f6:	1c43      	adds	r3, r0, #1
 80060f8:	d100      	bne.n	80060fc <_printf_float+0x470>
 80060fa:	e625      	b.n	8005d48 <_printf_float+0xbc>
 80060fc:	3501      	adds	r5, #1
 80060fe:	68e3      	ldr	r3, [r4, #12]
 8006100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	42ab      	cmp	r3, r5
 8006106:	dcf0      	bgt.n	80060ea <_printf_float+0x45e>
 8006108:	e6f8      	b.n	8005efc <_printf_float+0x270>
 800610a:	2500      	movs	r5, #0
 800610c:	e7f7      	b.n	80060fe <_printf_float+0x472>
 800610e:	46c0      	nop			; (mov r8, r8)

08006110 <_printf_common>:
 8006110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006112:	0015      	movs	r5, r2
 8006114:	9301      	str	r3, [sp, #4]
 8006116:	688a      	ldr	r2, [r1, #8]
 8006118:	690b      	ldr	r3, [r1, #16]
 800611a:	000c      	movs	r4, r1
 800611c:	9000      	str	r0, [sp, #0]
 800611e:	4293      	cmp	r3, r2
 8006120:	da00      	bge.n	8006124 <_printf_common+0x14>
 8006122:	0013      	movs	r3, r2
 8006124:	0022      	movs	r2, r4
 8006126:	602b      	str	r3, [r5, #0]
 8006128:	3243      	adds	r2, #67	; 0x43
 800612a:	7812      	ldrb	r2, [r2, #0]
 800612c:	2a00      	cmp	r2, #0
 800612e:	d001      	beq.n	8006134 <_printf_common+0x24>
 8006130:	3301      	adds	r3, #1
 8006132:	602b      	str	r3, [r5, #0]
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	069b      	lsls	r3, r3, #26
 8006138:	d502      	bpl.n	8006140 <_printf_common+0x30>
 800613a:	682b      	ldr	r3, [r5, #0]
 800613c:	3302      	adds	r3, #2
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	6822      	ldr	r2, [r4, #0]
 8006142:	2306      	movs	r3, #6
 8006144:	0017      	movs	r7, r2
 8006146:	401f      	ands	r7, r3
 8006148:	421a      	tst	r2, r3
 800614a:	d027      	beq.n	800619c <_printf_common+0x8c>
 800614c:	0023      	movs	r3, r4
 800614e:	3343      	adds	r3, #67	; 0x43
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	1e5a      	subs	r2, r3, #1
 8006154:	4193      	sbcs	r3, r2
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	0692      	lsls	r2, r2, #26
 800615a:	d430      	bmi.n	80061be <_printf_common+0xae>
 800615c:	0022      	movs	r2, r4
 800615e:	9901      	ldr	r1, [sp, #4]
 8006160:	9800      	ldr	r0, [sp, #0]
 8006162:	9e08      	ldr	r6, [sp, #32]
 8006164:	3243      	adds	r2, #67	; 0x43
 8006166:	47b0      	blx	r6
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d025      	beq.n	80061b8 <_printf_common+0xa8>
 800616c:	2306      	movs	r3, #6
 800616e:	6820      	ldr	r0, [r4, #0]
 8006170:	682a      	ldr	r2, [r5, #0]
 8006172:	68e1      	ldr	r1, [r4, #12]
 8006174:	2500      	movs	r5, #0
 8006176:	4003      	ands	r3, r0
 8006178:	2b04      	cmp	r3, #4
 800617a:	d103      	bne.n	8006184 <_printf_common+0x74>
 800617c:	1a8d      	subs	r5, r1, r2
 800617e:	43eb      	mvns	r3, r5
 8006180:	17db      	asrs	r3, r3, #31
 8006182:	401d      	ands	r5, r3
 8006184:	68a3      	ldr	r3, [r4, #8]
 8006186:	6922      	ldr	r2, [r4, #16]
 8006188:	4293      	cmp	r3, r2
 800618a:	dd01      	ble.n	8006190 <_printf_common+0x80>
 800618c:	1a9b      	subs	r3, r3, r2
 800618e:	18ed      	adds	r5, r5, r3
 8006190:	2700      	movs	r7, #0
 8006192:	42bd      	cmp	r5, r7
 8006194:	d120      	bne.n	80061d8 <_printf_common+0xc8>
 8006196:	2000      	movs	r0, #0
 8006198:	e010      	b.n	80061bc <_printf_common+0xac>
 800619a:	3701      	adds	r7, #1
 800619c:	68e3      	ldr	r3, [r4, #12]
 800619e:	682a      	ldr	r2, [r5, #0]
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	42bb      	cmp	r3, r7
 80061a4:	ddd2      	ble.n	800614c <_printf_common+0x3c>
 80061a6:	0022      	movs	r2, r4
 80061a8:	2301      	movs	r3, #1
 80061aa:	9901      	ldr	r1, [sp, #4]
 80061ac:	9800      	ldr	r0, [sp, #0]
 80061ae:	9e08      	ldr	r6, [sp, #32]
 80061b0:	3219      	adds	r2, #25
 80061b2:	47b0      	blx	r6
 80061b4:	1c43      	adds	r3, r0, #1
 80061b6:	d1f0      	bne.n	800619a <_printf_common+0x8a>
 80061b8:	2001      	movs	r0, #1
 80061ba:	4240      	negs	r0, r0
 80061bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061be:	2030      	movs	r0, #48	; 0x30
 80061c0:	18e1      	adds	r1, r4, r3
 80061c2:	3143      	adds	r1, #67	; 0x43
 80061c4:	7008      	strb	r0, [r1, #0]
 80061c6:	0021      	movs	r1, r4
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	3145      	adds	r1, #69	; 0x45
 80061cc:	7809      	ldrb	r1, [r1, #0]
 80061ce:	18a2      	adds	r2, r4, r2
 80061d0:	3243      	adds	r2, #67	; 0x43
 80061d2:	3302      	adds	r3, #2
 80061d4:	7011      	strb	r1, [r2, #0]
 80061d6:	e7c1      	b.n	800615c <_printf_common+0x4c>
 80061d8:	0022      	movs	r2, r4
 80061da:	2301      	movs	r3, #1
 80061dc:	9901      	ldr	r1, [sp, #4]
 80061de:	9800      	ldr	r0, [sp, #0]
 80061e0:	9e08      	ldr	r6, [sp, #32]
 80061e2:	321a      	adds	r2, #26
 80061e4:	47b0      	blx	r6
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	d0e6      	beq.n	80061b8 <_printf_common+0xa8>
 80061ea:	3701      	adds	r7, #1
 80061ec:	e7d1      	b.n	8006192 <_printf_common+0x82>
	...

080061f0 <_printf_i>:
 80061f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f2:	b08b      	sub	sp, #44	; 0x2c
 80061f4:	9206      	str	r2, [sp, #24]
 80061f6:	000a      	movs	r2, r1
 80061f8:	3243      	adds	r2, #67	; 0x43
 80061fa:	9307      	str	r3, [sp, #28]
 80061fc:	9005      	str	r0, [sp, #20]
 80061fe:	9204      	str	r2, [sp, #16]
 8006200:	7e0a      	ldrb	r2, [r1, #24]
 8006202:	000c      	movs	r4, r1
 8006204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006206:	2a78      	cmp	r2, #120	; 0x78
 8006208:	d807      	bhi.n	800621a <_printf_i+0x2a>
 800620a:	2a62      	cmp	r2, #98	; 0x62
 800620c:	d809      	bhi.n	8006222 <_printf_i+0x32>
 800620e:	2a00      	cmp	r2, #0
 8006210:	d100      	bne.n	8006214 <_printf_i+0x24>
 8006212:	e0c1      	b.n	8006398 <_printf_i+0x1a8>
 8006214:	2a58      	cmp	r2, #88	; 0x58
 8006216:	d100      	bne.n	800621a <_printf_i+0x2a>
 8006218:	e08c      	b.n	8006334 <_printf_i+0x144>
 800621a:	0026      	movs	r6, r4
 800621c:	3642      	adds	r6, #66	; 0x42
 800621e:	7032      	strb	r2, [r6, #0]
 8006220:	e022      	b.n	8006268 <_printf_i+0x78>
 8006222:	0010      	movs	r0, r2
 8006224:	3863      	subs	r0, #99	; 0x63
 8006226:	2815      	cmp	r0, #21
 8006228:	d8f7      	bhi.n	800621a <_printf_i+0x2a>
 800622a:	f7f9 ff79 	bl	8000120 <__gnu_thumb1_case_shi>
 800622e:	0016      	.short	0x0016
 8006230:	fff6001f 	.word	0xfff6001f
 8006234:	fff6fff6 	.word	0xfff6fff6
 8006238:	001ffff6 	.word	0x001ffff6
 800623c:	fff6fff6 	.word	0xfff6fff6
 8006240:	fff6fff6 	.word	0xfff6fff6
 8006244:	003600a8 	.word	0x003600a8
 8006248:	fff6009a 	.word	0xfff6009a
 800624c:	00b9fff6 	.word	0x00b9fff6
 8006250:	0036fff6 	.word	0x0036fff6
 8006254:	fff6fff6 	.word	0xfff6fff6
 8006258:	009e      	.short	0x009e
 800625a:	0026      	movs	r6, r4
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	3642      	adds	r6, #66	; 0x42
 8006260:	1d11      	adds	r1, r2, #4
 8006262:	6019      	str	r1, [r3, #0]
 8006264:	6813      	ldr	r3, [r2, #0]
 8006266:	7033      	strb	r3, [r6, #0]
 8006268:	2301      	movs	r3, #1
 800626a:	e0a7      	b.n	80063bc <_printf_i+0x1cc>
 800626c:	6808      	ldr	r0, [r1, #0]
 800626e:	6819      	ldr	r1, [r3, #0]
 8006270:	1d0a      	adds	r2, r1, #4
 8006272:	0605      	lsls	r5, r0, #24
 8006274:	d50b      	bpl.n	800628e <_printf_i+0x9e>
 8006276:	680d      	ldr	r5, [r1, #0]
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	2d00      	cmp	r5, #0
 800627c:	da03      	bge.n	8006286 <_printf_i+0x96>
 800627e:	232d      	movs	r3, #45	; 0x2d
 8006280:	9a04      	ldr	r2, [sp, #16]
 8006282:	426d      	negs	r5, r5
 8006284:	7013      	strb	r3, [r2, #0]
 8006286:	4b61      	ldr	r3, [pc, #388]	; (800640c <_printf_i+0x21c>)
 8006288:	270a      	movs	r7, #10
 800628a:	9303      	str	r3, [sp, #12]
 800628c:	e01b      	b.n	80062c6 <_printf_i+0xd6>
 800628e:	680d      	ldr	r5, [r1, #0]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	0641      	lsls	r1, r0, #25
 8006294:	d5f1      	bpl.n	800627a <_printf_i+0x8a>
 8006296:	b22d      	sxth	r5, r5
 8006298:	e7ef      	b.n	800627a <_printf_i+0x8a>
 800629a:	680d      	ldr	r5, [r1, #0]
 800629c:	6819      	ldr	r1, [r3, #0]
 800629e:	1d08      	adds	r0, r1, #4
 80062a0:	6018      	str	r0, [r3, #0]
 80062a2:	062e      	lsls	r6, r5, #24
 80062a4:	d501      	bpl.n	80062aa <_printf_i+0xba>
 80062a6:	680d      	ldr	r5, [r1, #0]
 80062a8:	e003      	b.n	80062b2 <_printf_i+0xc2>
 80062aa:	066d      	lsls	r5, r5, #25
 80062ac:	d5fb      	bpl.n	80062a6 <_printf_i+0xb6>
 80062ae:	680d      	ldr	r5, [r1, #0]
 80062b0:	b2ad      	uxth	r5, r5
 80062b2:	4b56      	ldr	r3, [pc, #344]	; (800640c <_printf_i+0x21c>)
 80062b4:	2708      	movs	r7, #8
 80062b6:	9303      	str	r3, [sp, #12]
 80062b8:	2a6f      	cmp	r2, #111	; 0x6f
 80062ba:	d000      	beq.n	80062be <_printf_i+0xce>
 80062bc:	3702      	adds	r7, #2
 80062be:	0023      	movs	r3, r4
 80062c0:	2200      	movs	r2, #0
 80062c2:	3343      	adds	r3, #67	; 0x43
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	60a3      	str	r3, [r4, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	db03      	blt.n	80062d6 <_printf_i+0xe6>
 80062ce:	2204      	movs	r2, #4
 80062d0:	6821      	ldr	r1, [r4, #0]
 80062d2:	4391      	bics	r1, r2
 80062d4:	6021      	str	r1, [r4, #0]
 80062d6:	2d00      	cmp	r5, #0
 80062d8:	d102      	bne.n	80062e0 <_printf_i+0xf0>
 80062da:	9e04      	ldr	r6, [sp, #16]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <_printf_i+0x10a>
 80062e0:	9e04      	ldr	r6, [sp, #16]
 80062e2:	0028      	movs	r0, r5
 80062e4:	0039      	movs	r1, r7
 80062e6:	f7f9 ffab 	bl	8000240 <__aeabi_uidivmod>
 80062ea:	9b03      	ldr	r3, [sp, #12]
 80062ec:	3e01      	subs	r6, #1
 80062ee:	5c5b      	ldrb	r3, [r3, r1]
 80062f0:	7033      	strb	r3, [r6, #0]
 80062f2:	002b      	movs	r3, r5
 80062f4:	0005      	movs	r5, r0
 80062f6:	429f      	cmp	r7, r3
 80062f8:	d9f3      	bls.n	80062e2 <_printf_i+0xf2>
 80062fa:	2f08      	cmp	r7, #8
 80062fc:	d109      	bne.n	8006312 <_printf_i+0x122>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	07db      	lsls	r3, r3, #31
 8006302:	d506      	bpl.n	8006312 <_printf_i+0x122>
 8006304:	6863      	ldr	r3, [r4, #4]
 8006306:	6922      	ldr	r2, [r4, #16]
 8006308:	4293      	cmp	r3, r2
 800630a:	dc02      	bgt.n	8006312 <_printf_i+0x122>
 800630c:	2330      	movs	r3, #48	; 0x30
 800630e:	3e01      	subs	r6, #1
 8006310:	7033      	strb	r3, [r6, #0]
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	1b9b      	subs	r3, r3, r6
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	9b07      	ldr	r3, [sp, #28]
 800631a:	0021      	movs	r1, r4
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	9805      	ldr	r0, [sp, #20]
 8006320:	9b06      	ldr	r3, [sp, #24]
 8006322:	aa09      	add	r2, sp, #36	; 0x24
 8006324:	f7ff fef4 	bl	8006110 <_printf_common>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d14c      	bne.n	80063c6 <_printf_i+0x1d6>
 800632c:	2001      	movs	r0, #1
 800632e:	4240      	negs	r0, r0
 8006330:	b00b      	add	sp, #44	; 0x2c
 8006332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006334:	3145      	adds	r1, #69	; 0x45
 8006336:	700a      	strb	r2, [r1, #0]
 8006338:	4a34      	ldr	r2, [pc, #208]	; (800640c <_printf_i+0x21c>)
 800633a:	9203      	str	r2, [sp, #12]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	6821      	ldr	r1, [r4, #0]
 8006340:	ca20      	ldmia	r2!, {r5}
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	0608      	lsls	r0, r1, #24
 8006346:	d516      	bpl.n	8006376 <_printf_i+0x186>
 8006348:	07cb      	lsls	r3, r1, #31
 800634a:	d502      	bpl.n	8006352 <_printf_i+0x162>
 800634c:	2320      	movs	r3, #32
 800634e:	4319      	orrs	r1, r3
 8006350:	6021      	str	r1, [r4, #0]
 8006352:	2710      	movs	r7, #16
 8006354:	2d00      	cmp	r5, #0
 8006356:	d1b2      	bne.n	80062be <_printf_i+0xce>
 8006358:	2320      	movs	r3, #32
 800635a:	6822      	ldr	r2, [r4, #0]
 800635c:	439a      	bics	r2, r3
 800635e:	6022      	str	r2, [r4, #0]
 8006360:	e7ad      	b.n	80062be <_printf_i+0xce>
 8006362:	2220      	movs	r2, #32
 8006364:	6809      	ldr	r1, [r1, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	0022      	movs	r2, r4
 800636c:	2178      	movs	r1, #120	; 0x78
 800636e:	3245      	adds	r2, #69	; 0x45
 8006370:	7011      	strb	r1, [r2, #0]
 8006372:	4a27      	ldr	r2, [pc, #156]	; (8006410 <_printf_i+0x220>)
 8006374:	e7e1      	b.n	800633a <_printf_i+0x14a>
 8006376:	0648      	lsls	r0, r1, #25
 8006378:	d5e6      	bpl.n	8006348 <_printf_i+0x158>
 800637a:	b2ad      	uxth	r5, r5
 800637c:	e7e4      	b.n	8006348 <_printf_i+0x158>
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	680d      	ldr	r5, [r1, #0]
 8006382:	1d10      	adds	r0, r2, #4
 8006384:	6949      	ldr	r1, [r1, #20]
 8006386:	6018      	str	r0, [r3, #0]
 8006388:	6813      	ldr	r3, [r2, #0]
 800638a:	062e      	lsls	r6, r5, #24
 800638c:	d501      	bpl.n	8006392 <_printf_i+0x1a2>
 800638e:	6019      	str	r1, [r3, #0]
 8006390:	e002      	b.n	8006398 <_printf_i+0x1a8>
 8006392:	066d      	lsls	r5, r5, #25
 8006394:	d5fb      	bpl.n	800638e <_printf_i+0x19e>
 8006396:	8019      	strh	r1, [r3, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	9e04      	ldr	r6, [sp, #16]
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	e7bb      	b.n	8006318 <_printf_i+0x128>
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	1d11      	adds	r1, r2, #4
 80063a4:	6019      	str	r1, [r3, #0]
 80063a6:	6816      	ldr	r6, [r2, #0]
 80063a8:	2100      	movs	r1, #0
 80063aa:	0030      	movs	r0, r6
 80063ac:	6862      	ldr	r2, [r4, #4]
 80063ae:	f000 fee5 	bl	800717c <memchr>
 80063b2:	2800      	cmp	r0, #0
 80063b4:	d001      	beq.n	80063ba <_printf_i+0x1ca>
 80063b6:	1b80      	subs	r0, r0, r6
 80063b8:	6060      	str	r0, [r4, #4]
 80063ba:	6863      	ldr	r3, [r4, #4]
 80063bc:	6123      	str	r3, [r4, #16]
 80063be:	2300      	movs	r3, #0
 80063c0:	9a04      	ldr	r2, [sp, #16]
 80063c2:	7013      	strb	r3, [r2, #0]
 80063c4:	e7a8      	b.n	8006318 <_printf_i+0x128>
 80063c6:	6923      	ldr	r3, [r4, #16]
 80063c8:	0032      	movs	r2, r6
 80063ca:	9906      	ldr	r1, [sp, #24]
 80063cc:	9805      	ldr	r0, [sp, #20]
 80063ce:	9d07      	ldr	r5, [sp, #28]
 80063d0:	47a8      	blx	r5
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d0aa      	beq.n	800632c <_printf_i+0x13c>
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	079b      	lsls	r3, r3, #30
 80063da:	d415      	bmi.n	8006408 <_printf_i+0x218>
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	68e0      	ldr	r0, [r4, #12]
 80063e0:	4298      	cmp	r0, r3
 80063e2:	daa5      	bge.n	8006330 <_printf_i+0x140>
 80063e4:	0018      	movs	r0, r3
 80063e6:	e7a3      	b.n	8006330 <_printf_i+0x140>
 80063e8:	0022      	movs	r2, r4
 80063ea:	2301      	movs	r3, #1
 80063ec:	9906      	ldr	r1, [sp, #24]
 80063ee:	9805      	ldr	r0, [sp, #20]
 80063f0:	9e07      	ldr	r6, [sp, #28]
 80063f2:	3219      	adds	r2, #25
 80063f4:	47b0      	blx	r6
 80063f6:	1c43      	adds	r3, r0, #1
 80063f8:	d098      	beq.n	800632c <_printf_i+0x13c>
 80063fa:	3501      	adds	r5, #1
 80063fc:	68e3      	ldr	r3, [r4, #12]
 80063fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	42ab      	cmp	r3, r5
 8006404:	dcf0      	bgt.n	80063e8 <_printf_i+0x1f8>
 8006406:	e7e9      	b.n	80063dc <_printf_i+0x1ec>
 8006408:	2500      	movs	r5, #0
 800640a:	e7f7      	b.n	80063fc <_printf_i+0x20c>
 800640c:	080087c6 	.word	0x080087c6
 8006410:	080087d7 	.word	0x080087d7

08006414 <quorem>:
 8006414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006416:	0006      	movs	r6, r0
 8006418:	690b      	ldr	r3, [r1, #16]
 800641a:	6932      	ldr	r2, [r6, #16]
 800641c:	b087      	sub	sp, #28
 800641e:	2000      	movs	r0, #0
 8006420:	9103      	str	r1, [sp, #12]
 8006422:	429a      	cmp	r2, r3
 8006424:	db65      	blt.n	80064f2 <quorem+0xde>
 8006426:	3b01      	subs	r3, #1
 8006428:	009c      	lsls	r4, r3, #2
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	000b      	movs	r3, r1
 800642e:	3314      	adds	r3, #20
 8006430:	9305      	str	r3, [sp, #20]
 8006432:	191b      	adds	r3, r3, r4
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	0033      	movs	r3, r6
 8006438:	3314      	adds	r3, #20
 800643a:	9302      	str	r3, [sp, #8]
 800643c:	191c      	adds	r4, r3, r4
 800643e:	9b04      	ldr	r3, [sp, #16]
 8006440:	6827      	ldr	r7, [r4, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	0038      	movs	r0, r7
 8006446:	1c5d      	adds	r5, r3, #1
 8006448:	0029      	movs	r1, r5
 800644a:	9301      	str	r3, [sp, #4]
 800644c:	f7f9 fe72 	bl	8000134 <__udivsi3>
 8006450:	9001      	str	r0, [sp, #4]
 8006452:	42af      	cmp	r7, r5
 8006454:	d324      	bcc.n	80064a0 <quorem+0x8c>
 8006456:	2500      	movs	r5, #0
 8006458:	46ac      	mov	ip, r5
 800645a:	9802      	ldr	r0, [sp, #8]
 800645c:	9f05      	ldr	r7, [sp, #20]
 800645e:	cf08      	ldmia	r7!, {r3}
 8006460:	9a01      	ldr	r2, [sp, #4]
 8006462:	b299      	uxth	r1, r3
 8006464:	4351      	muls	r1, r2
 8006466:	0c1b      	lsrs	r3, r3, #16
 8006468:	4353      	muls	r3, r2
 800646a:	1949      	adds	r1, r1, r5
 800646c:	0c0a      	lsrs	r2, r1, #16
 800646e:	189b      	adds	r3, r3, r2
 8006470:	6802      	ldr	r2, [r0, #0]
 8006472:	b289      	uxth	r1, r1
 8006474:	b292      	uxth	r2, r2
 8006476:	4462      	add	r2, ip
 8006478:	1a52      	subs	r2, r2, r1
 800647a:	6801      	ldr	r1, [r0, #0]
 800647c:	0c1d      	lsrs	r5, r3, #16
 800647e:	0c09      	lsrs	r1, r1, #16
 8006480:	b29b      	uxth	r3, r3
 8006482:	1acb      	subs	r3, r1, r3
 8006484:	1411      	asrs	r1, r2, #16
 8006486:	185b      	adds	r3, r3, r1
 8006488:	1419      	asrs	r1, r3, #16
 800648a:	b292      	uxth	r2, r2
 800648c:	041b      	lsls	r3, r3, #16
 800648e:	431a      	orrs	r2, r3
 8006490:	9b04      	ldr	r3, [sp, #16]
 8006492:	468c      	mov	ip, r1
 8006494:	c004      	stmia	r0!, {r2}
 8006496:	42bb      	cmp	r3, r7
 8006498:	d2e1      	bcs.n	800645e <quorem+0x4a>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d030      	beq.n	8006502 <quorem+0xee>
 80064a0:	0030      	movs	r0, r6
 80064a2:	9903      	ldr	r1, [sp, #12]
 80064a4:	f001 f902 	bl	80076ac <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	db21      	blt.n	80064f0 <quorem+0xdc>
 80064ac:	0030      	movs	r0, r6
 80064ae:	2400      	movs	r4, #0
 80064b0:	9b01      	ldr	r3, [sp, #4]
 80064b2:	9903      	ldr	r1, [sp, #12]
 80064b4:	3301      	adds	r3, #1
 80064b6:	9301      	str	r3, [sp, #4]
 80064b8:	3014      	adds	r0, #20
 80064ba:	3114      	adds	r1, #20
 80064bc:	6803      	ldr	r3, [r0, #0]
 80064be:	c920      	ldmia	r1!, {r5}
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	1914      	adds	r4, r2, r4
 80064c4:	b2aa      	uxth	r2, r5
 80064c6:	1aa2      	subs	r2, r4, r2
 80064c8:	0c1b      	lsrs	r3, r3, #16
 80064ca:	0c2d      	lsrs	r5, r5, #16
 80064cc:	1414      	asrs	r4, r2, #16
 80064ce:	1b5b      	subs	r3, r3, r5
 80064d0:	191b      	adds	r3, r3, r4
 80064d2:	141c      	asrs	r4, r3, #16
 80064d4:	b292      	uxth	r2, r2
 80064d6:	041b      	lsls	r3, r3, #16
 80064d8:	4313      	orrs	r3, r2
 80064da:	c008      	stmia	r0!, {r3}
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	428b      	cmp	r3, r1
 80064e0:	d2ec      	bcs.n	80064bc <quorem+0xa8>
 80064e2:	9b00      	ldr	r3, [sp, #0]
 80064e4:	9a02      	ldr	r2, [sp, #8]
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	18d3      	adds	r3, r2, r3
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	d015      	beq.n	800651c <quorem+0x108>
 80064f0:	9801      	ldr	r0, [sp, #4]
 80064f2:	b007      	add	sp, #28
 80064f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <quorem+0xf6>
 80064fc:	9b00      	ldr	r3, [sp, #0]
 80064fe:	3b01      	subs	r3, #1
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	9b02      	ldr	r3, [sp, #8]
 8006504:	3c04      	subs	r4, #4
 8006506:	42a3      	cmp	r3, r4
 8006508:	d3f5      	bcc.n	80064f6 <quorem+0xe2>
 800650a:	9b00      	ldr	r3, [sp, #0]
 800650c:	6133      	str	r3, [r6, #16]
 800650e:	e7c7      	b.n	80064a0 <quorem+0x8c>
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	2a00      	cmp	r2, #0
 8006514:	d106      	bne.n	8006524 <quorem+0x110>
 8006516:	9a00      	ldr	r2, [sp, #0]
 8006518:	3a01      	subs	r2, #1
 800651a:	9200      	str	r2, [sp, #0]
 800651c:	9a02      	ldr	r2, [sp, #8]
 800651e:	3b04      	subs	r3, #4
 8006520:	429a      	cmp	r2, r3
 8006522:	d3f5      	bcc.n	8006510 <quorem+0xfc>
 8006524:	9b00      	ldr	r3, [sp, #0]
 8006526:	6133      	str	r3, [r6, #16]
 8006528:	e7e2      	b.n	80064f0 <quorem+0xdc>
	...

0800652c <_dtoa_r>:
 800652c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652e:	b09d      	sub	sp, #116	; 0x74
 8006530:	9202      	str	r2, [sp, #8]
 8006532:	9303      	str	r3, [sp, #12]
 8006534:	9b02      	ldr	r3, [sp, #8]
 8006536:	9c03      	ldr	r4, [sp, #12]
 8006538:	9308      	str	r3, [sp, #32]
 800653a:	9409      	str	r4, [sp, #36]	; 0x24
 800653c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800653e:	0007      	movs	r7, r0
 8006540:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006542:	2c00      	cmp	r4, #0
 8006544:	d10e      	bne.n	8006564 <_dtoa_r+0x38>
 8006546:	2010      	movs	r0, #16
 8006548:	f000 fe0e 	bl	8007168 <malloc>
 800654c:	1e02      	subs	r2, r0, #0
 800654e:	6278      	str	r0, [r7, #36]	; 0x24
 8006550:	d104      	bne.n	800655c <_dtoa_r+0x30>
 8006552:	21ea      	movs	r1, #234	; 0xea
 8006554:	4bc7      	ldr	r3, [pc, #796]	; (8006874 <_dtoa_r+0x348>)
 8006556:	48c8      	ldr	r0, [pc, #800]	; (8006878 <_dtoa_r+0x34c>)
 8006558:	f001 fae0 	bl	8007b1c <__assert_func>
 800655c:	6044      	str	r4, [r0, #4]
 800655e:	6084      	str	r4, [r0, #8]
 8006560:	6004      	str	r4, [r0, #0]
 8006562:	60c4      	str	r4, [r0, #12]
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	6819      	ldr	r1, [r3, #0]
 8006568:	2900      	cmp	r1, #0
 800656a:	d00a      	beq.n	8006582 <_dtoa_r+0x56>
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	2301      	movs	r3, #1
 8006570:	4093      	lsls	r3, r2
 8006572:	604a      	str	r2, [r1, #4]
 8006574:	608b      	str	r3, [r1, #8]
 8006576:	0038      	movs	r0, r7
 8006578:	f000 fe58 	bl	800722c <_Bfree>
 800657c:	2200      	movs	r2, #0
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	da20      	bge.n	80065ca <_dtoa_r+0x9e>
 8006588:	2301      	movs	r3, #1
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	085b      	lsrs	r3, r3, #1
 8006592:	9309      	str	r3, [sp, #36]	; 0x24
 8006594:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006596:	4bb9      	ldr	r3, [pc, #740]	; (800687c <_dtoa_r+0x350>)
 8006598:	4ab8      	ldr	r2, [pc, #736]	; (800687c <_dtoa_r+0x350>)
 800659a:	402b      	ands	r3, r5
 800659c:	4293      	cmp	r3, r2
 800659e:	d117      	bne.n	80065d0 <_dtoa_r+0xa4>
 80065a0:	4bb7      	ldr	r3, [pc, #732]	; (8006880 <_dtoa_r+0x354>)
 80065a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065a4:	0328      	lsls	r0, r5, #12
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	9b02      	ldr	r3, [sp, #8]
 80065aa:	0b00      	lsrs	r0, r0, #12
 80065ac:	4318      	orrs	r0, r3
 80065ae:	d101      	bne.n	80065b4 <_dtoa_r+0x88>
 80065b0:	f000 fdbf 	bl	8007132 <_dtoa_r+0xc06>
 80065b4:	48b3      	ldr	r0, [pc, #716]	; (8006884 <_dtoa_r+0x358>)
 80065b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065b8:	9006      	str	r0, [sp, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <_dtoa_r+0x98>
 80065be:	4bb2      	ldr	r3, [pc, #712]	; (8006888 <_dtoa_r+0x35c>)
 80065c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	9806      	ldr	r0, [sp, #24]
 80065c6:	b01d      	add	sp, #116	; 0x74
 80065c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ca:	2300      	movs	r3, #0
 80065cc:	602b      	str	r3, [r5, #0]
 80065ce:	e7e1      	b.n	8006594 <_dtoa_r+0x68>
 80065d0:	9b08      	ldr	r3, [sp, #32]
 80065d2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80065d4:	9312      	str	r3, [sp, #72]	; 0x48
 80065d6:	9413      	str	r4, [sp, #76]	; 0x4c
 80065d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80065da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80065dc:	2200      	movs	r2, #0
 80065de:	2300      	movs	r3, #0
 80065e0:	f7f9 ff2e 	bl	8000440 <__aeabi_dcmpeq>
 80065e4:	1e04      	subs	r4, r0, #0
 80065e6:	d009      	beq.n	80065fc <_dtoa_r+0xd0>
 80065e8:	2301      	movs	r3, #1
 80065ea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	4ba7      	ldr	r3, [pc, #668]	; (800688c <_dtoa_r+0x360>)
 80065f0:	9306      	str	r3, [sp, #24]
 80065f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0e5      	beq.n	80065c4 <_dtoa_r+0x98>
 80065f8:	4ba5      	ldr	r3, [pc, #660]	; (8006890 <_dtoa_r+0x364>)
 80065fa:	e7e1      	b.n	80065c0 <_dtoa_r+0x94>
 80065fc:	ab1a      	add	r3, sp, #104	; 0x68
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	ab1b      	add	r3, sp, #108	; 0x6c
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	0038      	movs	r0, r7
 8006606:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006608:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800660a:	f001 f903 	bl	8007814 <__d2b>
 800660e:	006e      	lsls	r6, r5, #1
 8006610:	9005      	str	r0, [sp, #20]
 8006612:	0d76      	lsrs	r6, r6, #21
 8006614:	d100      	bne.n	8006618 <_dtoa_r+0xec>
 8006616:	e07c      	b.n	8006712 <_dtoa_r+0x1e6>
 8006618:	9812      	ldr	r0, [sp, #72]	; 0x48
 800661a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800661c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800661e:	4a9d      	ldr	r2, [pc, #628]	; (8006894 <_dtoa_r+0x368>)
 8006620:	031b      	lsls	r3, r3, #12
 8006622:	0b1b      	lsrs	r3, r3, #12
 8006624:	431a      	orrs	r2, r3
 8006626:	0011      	movs	r1, r2
 8006628:	4b9b      	ldr	r3, [pc, #620]	; (8006898 <_dtoa_r+0x36c>)
 800662a:	9418      	str	r4, [sp, #96]	; 0x60
 800662c:	18f6      	adds	r6, r6, r3
 800662e:	2200      	movs	r2, #0
 8006630:	4b9a      	ldr	r3, [pc, #616]	; (800689c <_dtoa_r+0x370>)
 8006632:	f7fb f8dd 	bl	80017f0 <__aeabi_dsub>
 8006636:	4a9a      	ldr	r2, [pc, #616]	; (80068a0 <_dtoa_r+0x374>)
 8006638:	4b9a      	ldr	r3, [pc, #616]	; (80068a4 <_dtoa_r+0x378>)
 800663a:	f7fa fe6d 	bl	8001318 <__aeabi_dmul>
 800663e:	4a9a      	ldr	r2, [pc, #616]	; (80068a8 <_dtoa_r+0x37c>)
 8006640:	4b9a      	ldr	r3, [pc, #616]	; (80068ac <_dtoa_r+0x380>)
 8006642:	f7f9 ff2b 	bl	800049c <__aeabi_dadd>
 8006646:	0004      	movs	r4, r0
 8006648:	0030      	movs	r0, r6
 800664a:	000d      	movs	r5, r1
 800664c:	f7fb fcb6 	bl	8001fbc <__aeabi_i2d>
 8006650:	4a97      	ldr	r2, [pc, #604]	; (80068b0 <_dtoa_r+0x384>)
 8006652:	4b98      	ldr	r3, [pc, #608]	; (80068b4 <_dtoa_r+0x388>)
 8006654:	f7fa fe60 	bl	8001318 <__aeabi_dmul>
 8006658:	0002      	movs	r2, r0
 800665a:	000b      	movs	r3, r1
 800665c:	0020      	movs	r0, r4
 800665e:	0029      	movs	r1, r5
 8006660:	f7f9 ff1c 	bl	800049c <__aeabi_dadd>
 8006664:	0004      	movs	r4, r0
 8006666:	000d      	movs	r5, r1
 8006668:	f7fb fc72 	bl	8001f50 <__aeabi_d2iz>
 800666c:	2200      	movs	r2, #0
 800666e:	9002      	str	r0, [sp, #8]
 8006670:	2300      	movs	r3, #0
 8006672:	0020      	movs	r0, r4
 8006674:	0029      	movs	r1, r5
 8006676:	f7f9 fee9 	bl	800044c <__aeabi_dcmplt>
 800667a:	2800      	cmp	r0, #0
 800667c:	d00b      	beq.n	8006696 <_dtoa_r+0x16a>
 800667e:	9802      	ldr	r0, [sp, #8]
 8006680:	f7fb fc9c 	bl	8001fbc <__aeabi_i2d>
 8006684:	002b      	movs	r3, r5
 8006686:	0022      	movs	r2, r4
 8006688:	f7f9 feda 	bl	8000440 <__aeabi_dcmpeq>
 800668c:	4243      	negs	r3, r0
 800668e:	4158      	adcs	r0, r3
 8006690:	9b02      	ldr	r3, [sp, #8]
 8006692:	1a1b      	subs	r3, r3, r0
 8006694:	9302      	str	r3, [sp, #8]
 8006696:	2301      	movs	r3, #1
 8006698:	9316      	str	r3, [sp, #88]	; 0x58
 800669a:	9b02      	ldr	r3, [sp, #8]
 800669c:	2b16      	cmp	r3, #22
 800669e:	d80f      	bhi.n	80066c0 <_dtoa_r+0x194>
 80066a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80066a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80066a4:	00da      	lsls	r2, r3, #3
 80066a6:	4b84      	ldr	r3, [pc, #528]	; (80068b8 <_dtoa_r+0x38c>)
 80066a8:	189b      	adds	r3, r3, r2
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f7f9 fecd 	bl	800044c <__aeabi_dcmplt>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d049      	beq.n	800674a <_dtoa_r+0x21e>
 80066b6:	9b02      	ldr	r3, [sp, #8]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	9302      	str	r3, [sp, #8]
 80066bc:	2300      	movs	r3, #0
 80066be:	9316      	str	r3, [sp, #88]	; 0x58
 80066c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80066c2:	1b9e      	subs	r6, r3, r6
 80066c4:	2300      	movs	r3, #0
 80066c6:	930a      	str	r3, [sp, #40]	; 0x28
 80066c8:	0033      	movs	r3, r6
 80066ca:	3b01      	subs	r3, #1
 80066cc:	930d      	str	r3, [sp, #52]	; 0x34
 80066ce:	d504      	bpl.n	80066da <_dtoa_r+0x1ae>
 80066d0:	2301      	movs	r3, #1
 80066d2:	1b9b      	subs	r3, r3, r6
 80066d4:	930a      	str	r3, [sp, #40]	; 0x28
 80066d6:	2300      	movs	r3, #0
 80066d8:	930d      	str	r3, [sp, #52]	; 0x34
 80066da:	9b02      	ldr	r3, [sp, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db36      	blt.n	800674e <_dtoa_r+0x222>
 80066e0:	9a02      	ldr	r2, [sp, #8]
 80066e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066e4:	4694      	mov	ip, r2
 80066e6:	4463      	add	r3, ip
 80066e8:	930d      	str	r3, [sp, #52]	; 0x34
 80066ea:	2300      	movs	r3, #0
 80066ec:	9215      	str	r2, [sp, #84]	; 0x54
 80066ee:	930e      	str	r3, [sp, #56]	; 0x38
 80066f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066f2:	2401      	movs	r4, #1
 80066f4:	2b09      	cmp	r3, #9
 80066f6:	d864      	bhi.n	80067c2 <_dtoa_r+0x296>
 80066f8:	2b05      	cmp	r3, #5
 80066fa:	dd02      	ble.n	8006702 <_dtoa_r+0x1d6>
 80066fc:	2400      	movs	r4, #0
 80066fe:	3b04      	subs	r3, #4
 8006700:	9322      	str	r3, [sp, #136]	; 0x88
 8006702:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006704:	1e98      	subs	r0, r3, #2
 8006706:	2803      	cmp	r0, #3
 8006708:	d864      	bhi.n	80067d4 <_dtoa_r+0x2a8>
 800670a:	f7f9 fcff 	bl	800010c <__gnu_thumb1_case_uqi>
 800670e:	3829      	.short	0x3829
 8006710:	5836      	.short	0x5836
 8006712:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006714:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006716:	189e      	adds	r6, r3, r2
 8006718:	4b68      	ldr	r3, [pc, #416]	; (80068bc <_dtoa_r+0x390>)
 800671a:	18f2      	adds	r2, r6, r3
 800671c:	2a20      	cmp	r2, #32
 800671e:	dd0f      	ble.n	8006740 <_dtoa_r+0x214>
 8006720:	2340      	movs	r3, #64	; 0x40
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	409d      	lsls	r5, r3
 8006726:	4b66      	ldr	r3, [pc, #408]	; (80068c0 <_dtoa_r+0x394>)
 8006728:	9802      	ldr	r0, [sp, #8]
 800672a:	18f3      	adds	r3, r6, r3
 800672c:	40d8      	lsrs	r0, r3
 800672e:	4328      	orrs	r0, r5
 8006730:	f7fb fc74 	bl	800201c <__aeabi_ui2d>
 8006734:	2301      	movs	r3, #1
 8006736:	4c63      	ldr	r4, [pc, #396]	; (80068c4 <_dtoa_r+0x398>)
 8006738:	3e01      	subs	r6, #1
 800673a:	1909      	adds	r1, r1, r4
 800673c:	9318      	str	r3, [sp, #96]	; 0x60
 800673e:	e776      	b.n	800662e <_dtoa_r+0x102>
 8006740:	2320      	movs	r3, #32
 8006742:	9802      	ldr	r0, [sp, #8]
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	4098      	lsls	r0, r3
 8006748:	e7f2      	b.n	8006730 <_dtoa_r+0x204>
 800674a:	9016      	str	r0, [sp, #88]	; 0x58
 800674c:	e7b8      	b.n	80066c0 <_dtoa_r+0x194>
 800674e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006750:	9a02      	ldr	r2, [sp, #8]
 8006752:	1a9b      	subs	r3, r3, r2
 8006754:	930a      	str	r3, [sp, #40]	; 0x28
 8006756:	4253      	negs	r3, r2
 8006758:	930e      	str	r3, [sp, #56]	; 0x38
 800675a:	2300      	movs	r3, #0
 800675c:	9315      	str	r3, [sp, #84]	; 0x54
 800675e:	e7c7      	b.n	80066f0 <_dtoa_r+0x1c4>
 8006760:	2300      	movs	r3, #0
 8006762:	930f      	str	r3, [sp, #60]	; 0x3c
 8006764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006766:	930c      	str	r3, [sp, #48]	; 0x30
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	dc13      	bgt.n	8006796 <_dtoa_r+0x26a>
 800676e:	2301      	movs	r3, #1
 8006770:	001a      	movs	r2, r3
 8006772:	930c      	str	r3, [sp, #48]	; 0x30
 8006774:	9307      	str	r3, [sp, #28]
 8006776:	9223      	str	r2, [sp, #140]	; 0x8c
 8006778:	e00d      	b.n	8006796 <_dtoa_r+0x26a>
 800677a:	2301      	movs	r3, #1
 800677c:	e7f1      	b.n	8006762 <_dtoa_r+0x236>
 800677e:	2300      	movs	r3, #0
 8006780:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006782:	930f      	str	r3, [sp, #60]	; 0x3c
 8006784:	4694      	mov	ip, r2
 8006786:	9b02      	ldr	r3, [sp, #8]
 8006788:	4463      	add	r3, ip
 800678a:	930c      	str	r3, [sp, #48]	; 0x30
 800678c:	3301      	adds	r3, #1
 800678e:	9307      	str	r3, [sp, #28]
 8006790:	2b00      	cmp	r3, #0
 8006792:	dc00      	bgt.n	8006796 <_dtoa_r+0x26a>
 8006794:	2301      	movs	r3, #1
 8006796:	2200      	movs	r2, #0
 8006798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800679a:	6042      	str	r2, [r0, #4]
 800679c:	3204      	adds	r2, #4
 800679e:	0015      	movs	r5, r2
 80067a0:	3514      	adds	r5, #20
 80067a2:	6841      	ldr	r1, [r0, #4]
 80067a4:	429d      	cmp	r5, r3
 80067a6:	d919      	bls.n	80067dc <_dtoa_r+0x2b0>
 80067a8:	0038      	movs	r0, r7
 80067aa:	f000 fcfb 	bl	80071a4 <_Balloc>
 80067ae:	9006      	str	r0, [sp, #24]
 80067b0:	2800      	cmp	r0, #0
 80067b2:	d117      	bne.n	80067e4 <_dtoa_r+0x2b8>
 80067b4:	21d5      	movs	r1, #213	; 0xd5
 80067b6:	0002      	movs	r2, r0
 80067b8:	4b43      	ldr	r3, [pc, #268]	; (80068c8 <_dtoa_r+0x39c>)
 80067ba:	0049      	lsls	r1, r1, #1
 80067bc:	e6cb      	b.n	8006556 <_dtoa_r+0x2a>
 80067be:	2301      	movs	r3, #1
 80067c0:	e7de      	b.n	8006780 <_dtoa_r+0x254>
 80067c2:	2300      	movs	r3, #0
 80067c4:	940f      	str	r4, [sp, #60]	; 0x3c
 80067c6:	9322      	str	r3, [sp, #136]	; 0x88
 80067c8:	3b01      	subs	r3, #1
 80067ca:	930c      	str	r3, [sp, #48]	; 0x30
 80067cc:	9307      	str	r3, [sp, #28]
 80067ce:	2200      	movs	r2, #0
 80067d0:	3313      	adds	r3, #19
 80067d2:	e7d0      	b.n	8006776 <_dtoa_r+0x24a>
 80067d4:	2301      	movs	r3, #1
 80067d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80067d8:	3b02      	subs	r3, #2
 80067da:	e7f6      	b.n	80067ca <_dtoa_r+0x29e>
 80067dc:	3101      	adds	r1, #1
 80067de:	6041      	str	r1, [r0, #4]
 80067e0:	0052      	lsls	r2, r2, #1
 80067e2:	e7dc      	b.n	800679e <_dtoa_r+0x272>
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	9a06      	ldr	r2, [sp, #24]
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	9b07      	ldr	r3, [sp, #28]
 80067ec:	2b0e      	cmp	r3, #14
 80067ee:	d900      	bls.n	80067f2 <_dtoa_r+0x2c6>
 80067f0:	e0eb      	b.n	80069ca <_dtoa_r+0x49e>
 80067f2:	2c00      	cmp	r4, #0
 80067f4:	d100      	bne.n	80067f8 <_dtoa_r+0x2cc>
 80067f6:	e0e8      	b.n	80069ca <_dtoa_r+0x49e>
 80067f8:	9b02      	ldr	r3, [sp, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	dd68      	ble.n	80068d0 <_dtoa_r+0x3a4>
 80067fe:	001a      	movs	r2, r3
 8006800:	210f      	movs	r1, #15
 8006802:	4b2d      	ldr	r3, [pc, #180]	; (80068b8 <_dtoa_r+0x38c>)
 8006804:	400a      	ands	r2, r1
 8006806:	00d2      	lsls	r2, r2, #3
 8006808:	189b      	adds	r3, r3, r2
 800680a:	681d      	ldr	r5, [r3, #0]
 800680c:	685e      	ldr	r6, [r3, #4]
 800680e:	9b02      	ldr	r3, [sp, #8]
 8006810:	111c      	asrs	r4, r3, #4
 8006812:	2302      	movs	r3, #2
 8006814:	9310      	str	r3, [sp, #64]	; 0x40
 8006816:	9b02      	ldr	r3, [sp, #8]
 8006818:	05db      	lsls	r3, r3, #23
 800681a:	d50b      	bpl.n	8006834 <_dtoa_r+0x308>
 800681c:	4b2b      	ldr	r3, [pc, #172]	; (80068cc <_dtoa_r+0x3a0>)
 800681e:	400c      	ands	r4, r1
 8006820:	6a1a      	ldr	r2, [r3, #32]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006826:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006828:	f7fa f974 	bl	8000b14 <__aeabi_ddiv>
 800682c:	2303      	movs	r3, #3
 800682e:	9008      	str	r0, [sp, #32]
 8006830:	9109      	str	r1, [sp, #36]	; 0x24
 8006832:	9310      	str	r3, [sp, #64]	; 0x40
 8006834:	4b25      	ldr	r3, [pc, #148]	; (80068cc <_dtoa_r+0x3a0>)
 8006836:	9314      	str	r3, [sp, #80]	; 0x50
 8006838:	2c00      	cmp	r4, #0
 800683a:	d108      	bne.n	800684e <_dtoa_r+0x322>
 800683c:	9808      	ldr	r0, [sp, #32]
 800683e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006840:	002a      	movs	r2, r5
 8006842:	0033      	movs	r3, r6
 8006844:	f7fa f966 	bl	8000b14 <__aeabi_ddiv>
 8006848:	9008      	str	r0, [sp, #32]
 800684a:	9109      	str	r1, [sp, #36]	; 0x24
 800684c:	e05c      	b.n	8006908 <_dtoa_r+0x3dc>
 800684e:	2301      	movs	r3, #1
 8006850:	421c      	tst	r4, r3
 8006852:	d00b      	beq.n	800686c <_dtoa_r+0x340>
 8006854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006856:	0028      	movs	r0, r5
 8006858:	3301      	adds	r3, #1
 800685a:	9310      	str	r3, [sp, #64]	; 0x40
 800685c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800685e:	0031      	movs	r1, r6
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f7fa fd58 	bl	8001318 <__aeabi_dmul>
 8006868:	0005      	movs	r5, r0
 800686a:	000e      	movs	r6, r1
 800686c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800686e:	1064      	asrs	r4, r4, #1
 8006870:	3308      	adds	r3, #8
 8006872:	e7e0      	b.n	8006836 <_dtoa_r+0x30a>
 8006874:	080087f5 	.word	0x080087f5
 8006878:	0800880c 	.word	0x0800880c
 800687c:	7ff00000 	.word	0x7ff00000
 8006880:	0000270f 	.word	0x0000270f
 8006884:	080087f1 	.word	0x080087f1
 8006888:	080087f4 	.word	0x080087f4
 800688c:	080087c4 	.word	0x080087c4
 8006890:	080087c5 	.word	0x080087c5
 8006894:	3ff00000 	.word	0x3ff00000
 8006898:	fffffc01 	.word	0xfffffc01
 800689c:	3ff80000 	.word	0x3ff80000
 80068a0:	636f4361 	.word	0x636f4361
 80068a4:	3fd287a7 	.word	0x3fd287a7
 80068a8:	8b60c8b3 	.word	0x8b60c8b3
 80068ac:	3fc68a28 	.word	0x3fc68a28
 80068b0:	509f79fb 	.word	0x509f79fb
 80068b4:	3fd34413 	.word	0x3fd34413
 80068b8:	08008900 	.word	0x08008900
 80068bc:	00000432 	.word	0x00000432
 80068c0:	00000412 	.word	0x00000412
 80068c4:	fe100000 	.word	0xfe100000
 80068c8:	08008867 	.word	0x08008867
 80068cc:	080088d8 	.word	0x080088d8
 80068d0:	2302      	movs	r3, #2
 80068d2:	9310      	str	r3, [sp, #64]	; 0x40
 80068d4:	9b02      	ldr	r3, [sp, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d016      	beq.n	8006908 <_dtoa_r+0x3dc>
 80068da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80068dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80068de:	425c      	negs	r4, r3
 80068e0:	230f      	movs	r3, #15
 80068e2:	4ab6      	ldr	r2, [pc, #728]	; (8006bbc <_dtoa_r+0x690>)
 80068e4:	4023      	ands	r3, r4
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	18d3      	adds	r3, r2, r3
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f7fa fd13 	bl	8001318 <__aeabi_dmul>
 80068f2:	2601      	movs	r6, #1
 80068f4:	2300      	movs	r3, #0
 80068f6:	9008      	str	r0, [sp, #32]
 80068f8:	9109      	str	r1, [sp, #36]	; 0x24
 80068fa:	4db1      	ldr	r5, [pc, #708]	; (8006bc0 <_dtoa_r+0x694>)
 80068fc:	1124      	asrs	r4, r4, #4
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d000      	beq.n	8006904 <_dtoa_r+0x3d8>
 8006902:	e094      	b.n	8006a2e <_dtoa_r+0x502>
 8006904:	2b00      	cmp	r3, #0
 8006906:	d19f      	bne.n	8006848 <_dtoa_r+0x31c>
 8006908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800690a:	2b00      	cmp	r3, #0
 800690c:	d100      	bne.n	8006910 <_dtoa_r+0x3e4>
 800690e:	e09b      	b.n	8006a48 <_dtoa_r+0x51c>
 8006910:	9c08      	ldr	r4, [sp, #32]
 8006912:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006914:	2200      	movs	r2, #0
 8006916:	0020      	movs	r0, r4
 8006918:	0029      	movs	r1, r5
 800691a:	4baa      	ldr	r3, [pc, #680]	; (8006bc4 <_dtoa_r+0x698>)
 800691c:	f7f9 fd96 	bl	800044c <__aeabi_dcmplt>
 8006920:	2800      	cmp	r0, #0
 8006922:	d100      	bne.n	8006926 <_dtoa_r+0x3fa>
 8006924:	e090      	b.n	8006a48 <_dtoa_r+0x51c>
 8006926:	9b07      	ldr	r3, [sp, #28]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d100      	bne.n	800692e <_dtoa_r+0x402>
 800692c:	e08c      	b.n	8006a48 <_dtoa_r+0x51c>
 800692e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006930:	2b00      	cmp	r3, #0
 8006932:	dd46      	ble.n	80069c2 <_dtoa_r+0x496>
 8006934:	9b02      	ldr	r3, [sp, #8]
 8006936:	2200      	movs	r2, #0
 8006938:	0020      	movs	r0, r4
 800693a:	0029      	movs	r1, r5
 800693c:	1e5e      	subs	r6, r3, #1
 800693e:	4ba2      	ldr	r3, [pc, #648]	; (8006bc8 <_dtoa_r+0x69c>)
 8006940:	f7fa fcea 	bl	8001318 <__aeabi_dmul>
 8006944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006946:	9008      	str	r0, [sp, #32]
 8006948:	9109      	str	r1, [sp, #36]	; 0x24
 800694a:	3301      	adds	r3, #1
 800694c:	9310      	str	r3, [sp, #64]	; 0x40
 800694e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006950:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006952:	9c08      	ldr	r4, [sp, #32]
 8006954:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006956:	9314      	str	r3, [sp, #80]	; 0x50
 8006958:	f7fb fb30 	bl	8001fbc <__aeabi_i2d>
 800695c:	0022      	movs	r2, r4
 800695e:	002b      	movs	r3, r5
 8006960:	f7fa fcda 	bl	8001318 <__aeabi_dmul>
 8006964:	2200      	movs	r2, #0
 8006966:	4b99      	ldr	r3, [pc, #612]	; (8006bcc <_dtoa_r+0x6a0>)
 8006968:	f7f9 fd98 	bl	800049c <__aeabi_dadd>
 800696c:	9010      	str	r0, [sp, #64]	; 0x40
 800696e:	9111      	str	r1, [sp, #68]	; 0x44
 8006970:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006974:	9208      	str	r2, [sp, #32]
 8006976:	9309      	str	r3, [sp, #36]	; 0x24
 8006978:	4a95      	ldr	r2, [pc, #596]	; (8006bd0 <_dtoa_r+0x6a4>)
 800697a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800697c:	4694      	mov	ip, r2
 800697e:	4463      	add	r3, ip
 8006980:	9317      	str	r3, [sp, #92]	; 0x5c
 8006982:	9309      	str	r3, [sp, #36]	; 0x24
 8006984:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006986:	2b00      	cmp	r3, #0
 8006988:	d161      	bne.n	8006a4e <_dtoa_r+0x522>
 800698a:	2200      	movs	r2, #0
 800698c:	0020      	movs	r0, r4
 800698e:	0029      	movs	r1, r5
 8006990:	4b90      	ldr	r3, [pc, #576]	; (8006bd4 <_dtoa_r+0x6a8>)
 8006992:	f7fa ff2d 	bl	80017f0 <__aeabi_dsub>
 8006996:	9a08      	ldr	r2, [sp, #32]
 8006998:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800699a:	0004      	movs	r4, r0
 800699c:	000d      	movs	r5, r1
 800699e:	f7f9 fd69 	bl	8000474 <__aeabi_dcmpgt>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d000      	beq.n	80069a8 <_dtoa_r+0x47c>
 80069a6:	e2af      	b.n	8006f08 <_dtoa_r+0x9dc>
 80069a8:	488b      	ldr	r0, [pc, #556]	; (8006bd8 <_dtoa_r+0x6ac>)
 80069aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069ac:	4684      	mov	ip, r0
 80069ae:	4461      	add	r1, ip
 80069b0:	000b      	movs	r3, r1
 80069b2:	0020      	movs	r0, r4
 80069b4:	0029      	movs	r1, r5
 80069b6:	9a08      	ldr	r2, [sp, #32]
 80069b8:	f7f9 fd48 	bl	800044c <__aeabi_dcmplt>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d000      	beq.n	80069c2 <_dtoa_r+0x496>
 80069c0:	e29f      	b.n	8006f02 <_dtoa_r+0x9d6>
 80069c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80069c6:	9308      	str	r3, [sp, #32]
 80069c8:	9409      	str	r4, [sp, #36]	; 0x24
 80069ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	da00      	bge.n	80069d2 <_dtoa_r+0x4a6>
 80069d0:	e172      	b.n	8006cb8 <_dtoa_r+0x78c>
 80069d2:	9a02      	ldr	r2, [sp, #8]
 80069d4:	2a0e      	cmp	r2, #14
 80069d6:	dd00      	ble.n	80069da <_dtoa_r+0x4ae>
 80069d8:	e16e      	b.n	8006cb8 <_dtoa_r+0x78c>
 80069da:	4b78      	ldr	r3, [pc, #480]	; (8006bbc <_dtoa_r+0x690>)
 80069dc:	00d2      	lsls	r2, r2, #3
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	685c      	ldr	r4, [r3, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	930a      	str	r3, [sp, #40]	; 0x28
 80069e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80069e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	db00      	blt.n	80069f0 <_dtoa_r+0x4c4>
 80069ee:	e0f7      	b.n	8006be0 <_dtoa_r+0x6b4>
 80069f0:	9b07      	ldr	r3, [sp, #28]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dd00      	ble.n	80069f8 <_dtoa_r+0x4cc>
 80069f6:	e0f3      	b.n	8006be0 <_dtoa_r+0x6b4>
 80069f8:	d000      	beq.n	80069fc <_dtoa_r+0x4d0>
 80069fa:	e282      	b.n	8006f02 <_dtoa_r+0x9d6>
 80069fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80069fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a00:	2200      	movs	r2, #0
 8006a02:	4b74      	ldr	r3, [pc, #464]	; (8006bd4 <_dtoa_r+0x6a8>)
 8006a04:	f7fa fc88 	bl	8001318 <__aeabi_dmul>
 8006a08:	9a08      	ldr	r2, [sp, #32]
 8006a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a0c:	f7f9 fd3c 	bl	8000488 <__aeabi_dcmpge>
 8006a10:	9e07      	ldr	r6, [sp, #28]
 8006a12:	0035      	movs	r5, r6
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d000      	beq.n	8006a1a <_dtoa_r+0x4ee>
 8006a18:	e259      	b.n	8006ece <_dtoa_r+0x9a2>
 8006a1a:	9b06      	ldr	r3, [sp, #24]
 8006a1c:	9a06      	ldr	r2, [sp, #24]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	9308      	str	r3, [sp, #32]
 8006a22:	2331      	movs	r3, #49	; 0x31
 8006a24:	7013      	strb	r3, [r2, #0]
 8006a26:	9b02      	ldr	r3, [sp, #8]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	9302      	str	r3, [sp, #8]
 8006a2c:	e254      	b.n	8006ed8 <_dtoa_r+0x9ac>
 8006a2e:	4234      	tst	r4, r6
 8006a30:	d007      	beq.n	8006a42 <_dtoa_r+0x516>
 8006a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a34:	3301      	adds	r3, #1
 8006a36:	9310      	str	r3, [sp, #64]	; 0x40
 8006a38:	682a      	ldr	r2, [r5, #0]
 8006a3a:	686b      	ldr	r3, [r5, #4]
 8006a3c:	f7fa fc6c 	bl	8001318 <__aeabi_dmul>
 8006a40:	0033      	movs	r3, r6
 8006a42:	1064      	asrs	r4, r4, #1
 8006a44:	3508      	adds	r5, #8
 8006a46:	e75a      	b.n	80068fe <_dtoa_r+0x3d2>
 8006a48:	9e02      	ldr	r6, [sp, #8]
 8006a4a:	9b07      	ldr	r3, [sp, #28]
 8006a4c:	e780      	b.n	8006950 <_dtoa_r+0x424>
 8006a4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a52:	1e5a      	subs	r2, r3, #1
 8006a54:	4b59      	ldr	r3, [pc, #356]	; (8006bbc <_dtoa_r+0x690>)
 8006a56:	00d2      	lsls	r2, r2, #3
 8006a58:	189b      	adds	r3, r3, r2
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	2900      	cmp	r1, #0
 8006a60:	d051      	beq.n	8006b06 <_dtoa_r+0x5da>
 8006a62:	2000      	movs	r0, #0
 8006a64:	495d      	ldr	r1, [pc, #372]	; (8006bdc <_dtoa_r+0x6b0>)
 8006a66:	f7fa f855 	bl	8000b14 <__aeabi_ddiv>
 8006a6a:	9a08      	ldr	r2, [sp, #32]
 8006a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a6e:	f7fa febf 	bl	80017f0 <__aeabi_dsub>
 8006a72:	9a06      	ldr	r2, [sp, #24]
 8006a74:	9b06      	ldr	r3, [sp, #24]
 8006a76:	4694      	mov	ip, r2
 8006a78:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a7c:	9010      	str	r0, [sp, #64]	; 0x40
 8006a7e:	9111      	str	r1, [sp, #68]	; 0x44
 8006a80:	4463      	add	r3, ip
 8006a82:	9319      	str	r3, [sp, #100]	; 0x64
 8006a84:	0029      	movs	r1, r5
 8006a86:	0020      	movs	r0, r4
 8006a88:	f7fb fa62 	bl	8001f50 <__aeabi_d2iz>
 8006a8c:	9014      	str	r0, [sp, #80]	; 0x50
 8006a8e:	f7fb fa95 	bl	8001fbc <__aeabi_i2d>
 8006a92:	0002      	movs	r2, r0
 8006a94:	000b      	movs	r3, r1
 8006a96:	0020      	movs	r0, r4
 8006a98:	0029      	movs	r1, r5
 8006a9a:	f7fa fea9 	bl	80017f0 <__aeabi_dsub>
 8006a9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006aa0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	9308      	str	r3, [sp, #32]
 8006aa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aa8:	0004      	movs	r4, r0
 8006aaa:	3330      	adds	r3, #48	; 0x30
 8006aac:	7013      	strb	r3, [r2, #0]
 8006aae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ab0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ab2:	000d      	movs	r5, r1
 8006ab4:	f7f9 fcca 	bl	800044c <__aeabi_dcmplt>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d175      	bne.n	8006ba8 <_dtoa_r+0x67c>
 8006abc:	0022      	movs	r2, r4
 8006abe:	002b      	movs	r3, r5
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	4940      	ldr	r1, [pc, #256]	; (8006bc4 <_dtoa_r+0x698>)
 8006ac4:	f7fa fe94 	bl	80017f0 <__aeabi_dsub>
 8006ac8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006acc:	f7f9 fcbe 	bl	800044c <__aeabi_dcmplt>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d000      	beq.n	8006ad6 <_dtoa_r+0x5aa>
 8006ad4:	e0d2      	b.n	8006c7c <_dtoa_r+0x750>
 8006ad6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ad8:	9a08      	ldr	r2, [sp, #32]
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d100      	bne.n	8006ae0 <_dtoa_r+0x5b4>
 8006ade:	e770      	b.n	80069c2 <_dtoa_r+0x496>
 8006ae0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006ae2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	4b38      	ldr	r3, [pc, #224]	; (8006bc8 <_dtoa_r+0x69c>)
 8006ae8:	f7fa fc16 	bl	8001318 <__aeabi_dmul>
 8006aec:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <_dtoa_r+0x69c>)
 8006aee:	9010      	str	r0, [sp, #64]	; 0x40
 8006af0:	9111      	str	r1, [sp, #68]	; 0x44
 8006af2:	2200      	movs	r2, #0
 8006af4:	0020      	movs	r0, r4
 8006af6:	0029      	movs	r1, r5
 8006af8:	f7fa fc0e 	bl	8001318 <__aeabi_dmul>
 8006afc:	9b08      	ldr	r3, [sp, #32]
 8006afe:	0004      	movs	r4, r0
 8006b00:	000d      	movs	r5, r1
 8006b02:	9317      	str	r3, [sp, #92]	; 0x5c
 8006b04:	e7be      	b.n	8006a84 <_dtoa_r+0x558>
 8006b06:	9808      	ldr	r0, [sp, #32]
 8006b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b0a:	f7fa fc05 	bl	8001318 <__aeabi_dmul>
 8006b0e:	9a06      	ldr	r2, [sp, #24]
 8006b10:	9b06      	ldr	r3, [sp, #24]
 8006b12:	4694      	mov	ip, r2
 8006b14:	9308      	str	r3, [sp, #32]
 8006b16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b18:	9010      	str	r0, [sp, #64]	; 0x40
 8006b1a:	9111      	str	r1, [sp, #68]	; 0x44
 8006b1c:	4463      	add	r3, ip
 8006b1e:	9319      	str	r3, [sp, #100]	; 0x64
 8006b20:	0029      	movs	r1, r5
 8006b22:	0020      	movs	r0, r4
 8006b24:	f7fb fa14 	bl	8001f50 <__aeabi_d2iz>
 8006b28:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b2a:	f7fb fa47 	bl	8001fbc <__aeabi_i2d>
 8006b2e:	0002      	movs	r2, r0
 8006b30:	000b      	movs	r3, r1
 8006b32:	0020      	movs	r0, r4
 8006b34:	0029      	movs	r1, r5
 8006b36:	f7fa fe5b 	bl	80017f0 <__aeabi_dsub>
 8006b3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b3c:	9a08      	ldr	r2, [sp, #32]
 8006b3e:	3330      	adds	r3, #48	; 0x30
 8006b40:	7013      	strb	r3, [r2, #0]
 8006b42:	0013      	movs	r3, r2
 8006b44:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b46:	3301      	adds	r3, #1
 8006b48:	0004      	movs	r4, r0
 8006b4a:	000d      	movs	r5, r1
 8006b4c:	9308      	str	r3, [sp, #32]
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d12c      	bne.n	8006bac <_dtoa_r+0x680>
 8006b52:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006b54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b56:	9a06      	ldr	r2, [sp, #24]
 8006b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b5a:	4694      	mov	ip, r2
 8006b5c:	4463      	add	r3, ip
 8006b5e:	2200      	movs	r2, #0
 8006b60:	9308      	str	r3, [sp, #32]
 8006b62:	4b1e      	ldr	r3, [pc, #120]	; (8006bdc <_dtoa_r+0x6b0>)
 8006b64:	f7f9 fc9a 	bl	800049c <__aeabi_dadd>
 8006b68:	0002      	movs	r2, r0
 8006b6a:	000b      	movs	r3, r1
 8006b6c:	0020      	movs	r0, r4
 8006b6e:	0029      	movs	r1, r5
 8006b70:	f7f9 fc80 	bl	8000474 <__aeabi_dcmpgt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d000      	beq.n	8006b7a <_dtoa_r+0x64e>
 8006b78:	e080      	b.n	8006c7c <_dtoa_r+0x750>
 8006b7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b7e:	2000      	movs	r0, #0
 8006b80:	4916      	ldr	r1, [pc, #88]	; (8006bdc <_dtoa_r+0x6b0>)
 8006b82:	f7fa fe35 	bl	80017f0 <__aeabi_dsub>
 8006b86:	0002      	movs	r2, r0
 8006b88:	000b      	movs	r3, r1
 8006b8a:	0020      	movs	r0, r4
 8006b8c:	0029      	movs	r1, r5
 8006b8e:	f7f9 fc5d 	bl	800044c <__aeabi_dcmplt>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d100      	bne.n	8006b98 <_dtoa_r+0x66c>
 8006b96:	e714      	b.n	80069c2 <_dtoa_r+0x496>
 8006b98:	9b08      	ldr	r3, [sp, #32]
 8006b9a:	001a      	movs	r2, r3
 8006b9c:	3a01      	subs	r2, #1
 8006b9e:	9208      	str	r2, [sp, #32]
 8006ba0:	7812      	ldrb	r2, [r2, #0]
 8006ba2:	2a30      	cmp	r2, #48	; 0x30
 8006ba4:	d0f8      	beq.n	8006b98 <_dtoa_r+0x66c>
 8006ba6:	9308      	str	r3, [sp, #32]
 8006ba8:	9602      	str	r6, [sp, #8]
 8006baa:	e055      	b.n	8006c58 <_dtoa_r+0x72c>
 8006bac:	2200      	movs	r2, #0
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <_dtoa_r+0x69c>)
 8006bb0:	f7fa fbb2 	bl	8001318 <__aeabi_dmul>
 8006bb4:	0004      	movs	r4, r0
 8006bb6:	000d      	movs	r5, r1
 8006bb8:	e7b2      	b.n	8006b20 <_dtoa_r+0x5f4>
 8006bba:	46c0      	nop			; (mov r8, r8)
 8006bbc:	08008900 	.word	0x08008900
 8006bc0:	080088d8 	.word	0x080088d8
 8006bc4:	3ff00000 	.word	0x3ff00000
 8006bc8:	40240000 	.word	0x40240000
 8006bcc:	401c0000 	.word	0x401c0000
 8006bd0:	fcc00000 	.word	0xfcc00000
 8006bd4:	40140000 	.word	0x40140000
 8006bd8:	7cc00000 	.word	0x7cc00000
 8006bdc:	3fe00000 	.word	0x3fe00000
 8006be0:	9b07      	ldr	r3, [sp, #28]
 8006be2:	9e06      	ldr	r6, [sp, #24]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	199b      	adds	r3, r3, r6
 8006be8:	930c      	str	r3, [sp, #48]	; 0x30
 8006bea:	9c08      	ldr	r4, [sp, #32]
 8006bec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bf2:	0020      	movs	r0, r4
 8006bf4:	0029      	movs	r1, r5
 8006bf6:	f7f9 ff8d 	bl	8000b14 <__aeabi_ddiv>
 8006bfa:	f7fb f9a9 	bl	8001f50 <__aeabi_d2iz>
 8006bfe:	9007      	str	r0, [sp, #28]
 8006c00:	f7fb f9dc 	bl	8001fbc <__aeabi_i2d>
 8006c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c08:	f7fa fb86 	bl	8001318 <__aeabi_dmul>
 8006c0c:	0002      	movs	r2, r0
 8006c0e:	000b      	movs	r3, r1
 8006c10:	0020      	movs	r0, r4
 8006c12:	0029      	movs	r1, r5
 8006c14:	f7fa fdec 	bl	80017f0 <__aeabi_dsub>
 8006c18:	0033      	movs	r3, r6
 8006c1a:	9a07      	ldr	r2, [sp, #28]
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	3230      	adds	r2, #48	; 0x30
 8006c20:	701a      	strb	r2, [r3, #0]
 8006c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c24:	9608      	str	r6, [sp, #32]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d139      	bne.n	8006c9e <_dtoa_r+0x772>
 8006c2a:	0002      	movs	r2, r0
 8006c2c:	000b      	movs	r3, r1
 8006c2e:	f7f9 fc35 	bl	800049c <__aeabi_dadd>
 8006c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c36:	0004      	movs	r4, r0
 8006c38:	000d      	movs	r5, r1
 8006c3a:	f7f9 fc1b 	bl	8000474 <__aeabi_dcmpgt>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d11b      	bne.n	8006c7a <_dtoa_r+0x74e>
 8006c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c46:	0020      	movs	r0, r4
 8006c48:	0029      	movs	r1, r5
 8006c4a:	f7f9 fbf9 	bl	8000440 <__aeabi_dcmpeq>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d002      	beq.n	8006c58 <_dtoa_r+0x72c>
 8006c52:	9b07      	ldr	r3, [sp, #28]
 8006c54:	07db      	lsls	r3, r3, #31
 8006c56:	d410      	bmi.n	8006c7a <_dtoa_r+0x74e>
 8006c58:	0038      	movs	r0, r7
 8006c5a:	9905      	ldr	r1, [sp, #20]
 8006c5c:	f000 fae6 	bl	800722c <_Bfree>
 8006c60:	2300      	movs	r3, #0
 8006c62:	9a08      	ldr	r2, [sp, #32]
 8006c64:	9802      	ldr	r0, [sp, #8]
 8006c66:	7013      	strb	r3, [r2, #0]
 8006c68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	6018      	str	r0, [r3, #0]
 8006c6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d100      	bne.n	8006c76 <_dtoa_r+0x74a>
 8006c74:	e4a6      	b.n	80065c4 <_dtoa_r+0x98>
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	e4a4      	b.n	80065c4 <_dtoa_r+0x98>
 8006c7a:	9e02      	ldr	r6, [sp, #8]
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	9308      	str	r3, [sp, #32]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	781a      	ldrb	r2, [r3, #0]
 8006c84:	2a39      	cmp	r2, #57	; 0x39
 8006c86:	d106      	bne.n	8006c96 <_dtoa_r+0x76a>
 8006c88:	9a06      	ldr	r2, [sp, #24]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d1f7      	bne.n	8006c7e <_dtoa_r+0x752>
 8006c8e:	2230      	movs	r2, #48	; 0x30
 8006c90:	9906      	ldr	r1, [sp, #24]
 8006c92:	3601      	adds	r6, #1
 8006c94:	700a      	strb	r2, [r1, #0]
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	3201      	adds	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	e784      	b.n	8006ba8 <_dtoa_r+0x67c>
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	4baa      	ldr	r3, [pc, #680]	; (8006f4c <_dtoa_r+0xa20>)
 8006ca2:	f7fa fb39 	bl	8001318 <__aeabi_dmul>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	0004      	movs	r4, r0
 8006cac:	000d      	movs	r5, r1
 8006cae:	f7f9 fbc7 	bl	8000440 <__aeabi_dcmpeq>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d09b      	beq.n	8006bee <_dtoa_r+0x6c2>
 8006cb6:	e7cf      	b.n	8006c58 <_dtoa_r+0x72c>
 8006cb8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006cba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006cbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	d012      	beq.n	8006ce8 <_dtoa_r+0x7bc>
 8006cc2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cc4:	2a01      	cmp	r2, #1
 8006cc6:	dc66      	bgt.n	8006d96 <_dtoa_r+0x86a>
 8006cc8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	d05d      	beq.n	8006d8a <_dtoa_r+0x85e>
 8006cce:	4aa0      	ldr	r2, [pc, #640]	; (8006f50 <_dtoa_r+0xa24>)
 8006cd0:	189b      	adds	r3, r3, r2
 8006cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	18d2      	adds	r2, r2, r3
 8006cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8006cda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cdc:	0038      	movs	r0, r7
 8006cde:	18d3      	adds	r3, r2, r3
 8006ce0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ce2:	f000 fb53 	bl	800738c <__i2b>
 8006ce6:	0005      	movs	r5, r0
 8006ce8:	2c00      	cmp	r4, #0
 8006cea:	dd0e      	ble.n	8006d0a <_dtoa_r+0x7de>
 8006cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	dd0b      	ble.n	8006d0a <_dtoa_r+0x7de>
 8006cf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006cf4:	0023      	movs	r3, r4
 8006cf6:	4294      	cmp	r4, r2
 8006cf8:	dd00      	ble.n	8006cfc <_dtoa_r+0x7d0>
 8006cfa:	0013      	movs	r3, r2
 8006cfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cfe:	1ae4      	subs	r4, r4, r3
 8006d00:	1ad2      	subs	r2, r2, r3
 8006d02:	920a      	str	r2, [sp, #40]	; 0x28
 8006d04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	930d      	str	r3, [sp, #52]	; 0x34
 8006d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d01f      	beq.n	8006d50 <_dtoa_r+0x824>
 8006d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d054      	beq.n	8006dc0 <_dtoa_r+0x894>
 8006d16:	2e00      	cmp	r6, #0
 8006d18:	dd11      	ble.n	8006d3e <_dtoa_r+0x812>
 8006d1a:	0029      	movs	r1, r5
 8006d1c:	0032      	movs	r2, r6
 8006d1e:	0038      	movs	r0, r7
 8006d20:	f000 fbfa 	bl	8007518 <__pow5mult>
 8006d24:	9a05      	ldr	r2, [sp, #20]
 8006d26:	0001      	movs	r1, r0
 8006d28:	0005      	movs	r5, r0
 8006d2a:	0038      	movs	r0, r7
 8006d2c:	f000 fb44 	bl	80073b8 <__multiply>
 8006d30:	9905      	ldr	r1, [sp, #20]
 8006d32:	9014      	str	r0, [sp, #80]	; 0x50
 8006d34:	0038      	movs	r0, r7
 8006d36:	f000 fa79 	bl	800722c <_Bfree>
 8006d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d3c:	9305      	str	r3, [sp, #20]
 8006d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d40:	1b9a      	subs	r2, r3, r6
 8006d42:	42b3      	cmp	r3, r6
 8006d44:	d004      	beq.n	8006d50 <_dtoa_r+0x824>
 8006d46:	0038      	movs	r0, r7
 8006d48:	9905      	ldr	r1, [sp, #20]
 8006d4a:	f000 fbe5 	bl	8007518 <__pow5mult>
 8006d4e:	9005      	str	r0, [sp, #20]
 8006d50:	2101      	movs	r1, #1
 8006d52:	0038      	movs	r0, r7
 8006d54:	f000 fb1a 	bl	800738c <__i2b>
 8006d58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d5a:	0006      	movs	r6, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	dd31      	ble.n	8006dc4 <_dtoa_r+0x898>
 8006d60:	001a      	movs	r2, r3
 8006d62:	0001      	movs	r1, r0
 8006d64:	0038      	movs	r0, r7
 8006d66:	f000 fbd7 	bl	8007518 <__pow5mult>
 8006d6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d6c:	0006      	movs	r6, r0
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	dd2d      	ble.n	8006dce <_dtoa_r+0x8a2>
 8006d72:	2300      	movs	r3, #0
 8006d74:	930e      	str	r3, [sp, #56]	; 0x38
 8006d76:	6933      	ldr	r3, [r6, #16]
 8006d78:	3303      	adds	r3, #3
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	18f3      	adds	r3, r6, r3
 8006d7e:	6858      	ldr	r0, [r3, #4]
 8006d80:	f000 fabc 	bl	80072fc <__hi0bits>
 8006d84:	2320      	movs	r3, #32
 8006d86:	1a18      	subs	r0, r3, r0
 8006d88:	e039      	b.n	8006dfe <_dtoa_r+0x8d2>
 8006d8a:	2336      	movs	r3, #54	; 0x36
 8006d8c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006d8e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006d90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d92:	1a9b      	subs	r3, r3, r2
 8006d94:	e79d      	b.n	8006cd2 <_dtoa_r+0x7a6>
 8006d96:	9b07      	ldr	r3, [sp, #28]
 8006d98:	1e5e      	subs	r6, r3, #1
 8006d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d9c:	42b3      	cmp	r3, r6
 8006d9e:	db07      	blt.n	8006db0 <_dtoa_r+0x884>
 8006da0:	1b9e      	subs	r6, r3, r6
 8006da2:	9b07      	ldr	r3, [sp, #28]
 8006da4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	da93      	bge.n	8006cd2 <_dtoa_r+0x7a6>
 8006daa:	1ae4      	subs	r4, r4, r3
 8006dac:	2300      	movs	r3, #0
 8006dae:	e790      	b.n	8006cd2 <_dtoa_r+0x7a6>
 8006db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006db2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006db4:	1af3      	subs	r3, r6, r3
 8006db6:	18d3      	adds	r3, r2, r3
 8006db8:	960e      	str	r6, [sp, #56]	; 0x38
 8006dba:	9315      	str	r3, [sp, #84]	; 0x54
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	e7f0      	b.n	8006da2 <_dtoa_r+0x876>
 8006dc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dc2:	e7c0      	b.n	8006d46 <_dtoa_r+0x81a>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	930e      	str	r3, [sp, #56]	; 0x38
 8006dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	dc13      	bgt.n	8006df6 <_dtoa_r+0x8ca>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	930e      	str	r3, [sp, #56]	; 0x38
 8006dd2:	9b08      	ldr	r3, [sp, #32]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10e      	bne.n	8006df6 <_dtoa_r+0x8ca>
 8006dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dda:	031b      	lsls	r3, r3, #12
 8006ddc:	d10b      	bne.n	8006df6 <_dtoa_r+0x8ca>
 8006dde:	4b5d      	ldr	r3, [pc, #372]	; (8006f54 <_dtoa_r+0xa28>)
 8006de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de2:	4213      	tst	r3, r2
 8006de4:	d007      	beq.n	8006df6 <_dtoa_r+0x8ca>
 8006de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de8:	3301      	adds	r3, #1
 8006dea:	930a      	str	r3, [sp, #40]	; 0x28
 8006dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dee:	3301      	adds	r3, #1
 8006df0:	930d      	str	r3, [sp, #52]	; 0x34
 8006df2:	2301      	movs	r3, #1
 8006df4:	930e      	str	r3, [sp, #56]	; 0x38
 8006df6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006df8:	2001      	movs	r0, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1bb      	bne.n	8006d76 <_dtoa_r+0x84a>
 8006dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e00:	221f      	movs	r2, #31
 8006e02:	1818      	adds	r0, r3, r0
 8006e04:	0003      	movs	r3, r0
 8006e06:	4013      	ands	r3, r2
 8006e08:	4210      	tst	r0, r2
 8006e0a:	d046      	beq.n	8006e9a <_dtoa_r+0x96e>
 8006e0c:	3201      	adds	r2, #1
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	2a04      	cmp	r2, #4
 8006e12:	dd3f      	ble.n	8006e94 <_dtoa_r+0x968>
 8006e14:	221c      	movs	r2, #28
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e1a:	18e4      	adds	r4, r4, r3
 8006e1c:	18d2      	adds	r2, r2, r3
 8006e1e:	920a      	str	r2, [sp, #40]	; 0x28
 8006e20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006e22:	18d3      	adds	r3, r2, r3
 8006e24:	930d      	str	r3, [sp, #52]	; 0x34
 8006e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	dd05      	ble.n	8006e38 <_dtoa_r+0x90c>
 8006e2c:	001a      	movs	r2, r3
 8006e2e:	0038      	movs	r0, r7
 8006e30:	9905      	ldr	r1, [sp, #20]
 8006e32:	f000 fbcd 	bl	80075d0 <__lshift>
 8006e36:	9005      	str	r0, [sp, #20]
 8006e38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dd05      	ble.n	8006e4a <_dtoa_r+0x91e>
 8006e3e:	0031      	movs	r1, r6
 8006e40:	001a      	movs	r2, r3
 8006e42:	0038      	movs	r0, r7
 8006e44:	f000 fbc4 	bl	80075d0 <__lshift>
 8006e48:	0006      	movs	r6, r0
 8006e4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d026      	beq.n	8006e9e <_dtoa_r+0x972>
 8006e50:	0031      	movs	r1, r6
 8006e52:	9805      	ldr	r0, [sp, #20]
 8006e54:	f000 fc2a 	bl	80076ac <__mcmp>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	da20      	bge.n	8006e9e <_dtoa_r+0x972>
 8006e5c:	9b02      	ldr	r3, [sp, #8]
 8006e5e:	220a      	movs	r2, #10
 8006e60:	3b01      	subs	r3, #1
 8006e62:	9302      	str	r3, [sp, #8]
 8006e64:	0038      	movs	r0, r7
 8006e66:	2300      	movs	r3, #0
 8006e68:	9905      	ldr	r1, [sp, #20]
 8006e6a:	f000 fa03 	bl	8007274 <__multadd>
 8006e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e70:	9005      	str	r0, [sp, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d100      	bne.n	8006e78 <_dtoa_r+0x94c>
 8006e76:	e166      	b.n	8007146 <_dtoa_r+0xc1a>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	0029      	movs	r1, r5
 8006e7c:	220a      	movs	r2, #10
 8006e7e:	0038      	movs	r0, r7
 8006e80:	f000 f9f8 	bl	8007274 <__multadd>
 8006e84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e86:	0005      	movs	r5, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	dc47      	bgt.n	8006f1c <_dtoa_r+0x9f0>
 8006e8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	dc0d      	bgt.n	8006eae <_dtoa_r+0x982>
 8006e92:	e043      	b.n	8006f1c <_dtoa_r+0x9f0>
 8006e94:	2a04      	cmp	r2, #4
 8006e96:	d0c6      	beq.n	8006e26 <_dtoa_r+0x8fa>
 8006e98:	0013      	movs	r3, r2
 8006e9a:	331c      	adds	r3, #28
 8006e9c:	e7bc      	b.n	8006e18 <_dtoa_r+0x8ec>
 8006e9e:	9b07      	ldr	r3, [sp, #28]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dc35      	bgt.n	8006f10 <_dtoa_r+0x9e4>
 8006ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	dd32      	ble.n	8006f10 <_dtoa_r+0x9e4>
 8006eaa:	9b07      	ldr	r3, [sp, #28]
 8006eac:	930c      	str	r3, [sp, #48]	; 0x30
 8006eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10c      	bne.n	8006ece <_dtoa_r+0x9a2>
 8006eb4:	0031      	movs	r1, r6
 8006eb6:	2205      	movs	r2, #5
 8006eb8:	0038      	movs	r0, r7
 8006eba:	f000 f9db 	bl	8007274 <__multadd>
 8006ebe:	0006      	movs	r6, r0
 8006ec0:	0001      	movs	r1, r0
 8006ec2:	9805      	ldr	r0, [sp, #20]
 8006ec4:	f000 fbf2 	bl	80076ac <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	dd00      	ble.n	8006ece <_dtoa_r+0x9a2>
 8006ecc:	e5a5      	b.n	8006a1a <_dtoa_r+0x4ee>
 8006ece:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	9302      	str	r3, [sp, #8]
 8006ed4:	9b06      	ldr	r3, [sp, #24]
 8006ed6:	9308      	str	r3, [sp, #32]
 8006ed8:	2400      	movs	r4, #0
 8006eda:	0031      	movs	r1, r6
 8006edc:	0038      	movs	r0, r7
 8006ede:	f000 f9a5 	bl	800722c <_Bfree>
 8006ee2:	2d00      	cmp	r5, #0
 8006ee4:	d100      	bne.n	8006ee8 <_dtoa_r+0x9bc>
 8006ee6:	e6b7      	b.n	8006c58 <_dtoa_r+0x72c>
 8006ee8:	2c00      	cmp	r4, #0
 8006eea:	d005      	beq.n	8006ef8 <_dtoa_r+0x9cc>
 8006eec:	42ac      	cmp	r4, r5
 8006eee:	d003      	beq.n	8006ef8 <_dtoa_r+0x9cc>
 8006ef0:	0021      	movs	r1, r4
 8006ef2:	0038      	movs	r0, r7
 8006ef4:	f000 f99a 	bl	800722c <_Bfree>
 8006ef8:	0029      	movs	r1, r5
 8006efa:	0038      	movs	r0, r7
 8006efc:	f000 f996 	bl	800722c <_Bfree>
 8006f00:	e6aa      	b.n	8006c58 <_dtoa_r+0x72c>
 8006f02:	2600      	movs	r6, #0
 8006f04:	0035      	movs	r5, r6
 8006f06:	e7e2      	b.n	8006ece <_dtoa_r+0x9a2>
 8006f08:	9602      	str	r6, [sp, #8]
 8006f0a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006f0c:	0035      	movs	r5, r6
 8006f0e:	e584      	b.n	8006a1a <_dtoa_r+0x4ee>
 8006f10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d100      	bne.n	8006f18 <_dtoa_r+0x9ec>
 8006f16:	e0ce      	b.n	80070b6 <_dtoa_r+0xb8a>
 8006f18:	9b07      	ldr	r3, [sp, #28]
 8006f1a:	930c      	str	r3, [sp, #48]	; 0x30
 8006f1c:	2c00      	cmp	r4, #0
 8006f1e:	dd05      	ble.n	8006f2c <_dtoa_r+0xa00>
 8006f20:	0029      	movs	r1, r5
 8006f22:	0022      	movs	r2, r4
 8006f24:	0038      	movs	r0, r7
 8006f26:	f000 fb53 	bl	80075d0 <__lshift>
 8006f2a:	0005      	movs	r5, r0
 8006f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f2e:	0028      	movs	r0, r5
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d022      	beq.n	8006f7a <_dtoa_r+0xa4e>
 8006f34:	0038      	movs	r0, r7
 8006f36:	6869      	ldr	r1, [r5, #4]
 8006f38:	f000 f934 	bl	80071a4 <_Balloc>
 8006f3c:	1e04      	subs	r4, r0, #0
 8006f3e:	d10f      	bne.n	8006f60 <_dtoa_r+0xa34>
 8006f40:	0002      	movs	r2, r0
 8006f42:	4b05      	ldr	r3, [pc, #20]	; (8006f58 <_dtoa_r+0xa2c>)
 8006f44:	4905      	ldr	r1, [pc, #20]	; (8006f5c <_dtoa_r+0xa30>)
 8006f46:	f7ff fb06 	bl	8006556 <_dtoa_r+0x2a>
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	40240000 	.word	0x40240000
 8006f50:	00000433 	.word	0x00000433
 8006f54:	7ff00000 	.word	0x7ff00000
 8006f58:	08008867 	.word	0x08008867
 8006f5c:	000002ea 	.word	0x000002ea
 8006f60:	0029      	movs	r1, r5
 8006f62:	692b      	ldr	r3, [r5, #16]
 8006f64:	310c      	adds	r1, #12
 8006f66:	1c9a      	adds	r2, r3, #2
 8006f68:	0092      	lsls	r2, r2, #2
 8006f6a:	300c      	adds	r0, #12
 8006f6c:	f000 f911 	bl	8007192 <memcpy>
 8006f70:	2201      	movs	r2, #1
 8006f72:	0021      	movs	r1, r4
 8006f74:	0038      	movs	r0, r7
 8006f76:	f000 fb2b 	bl	80075d0 <__lshift>
 8006f7a:	9b06      	ldr	r3, [sp, #24]
 8006f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8006f80:	3b01      	subs	r3, #1
 8006f82:	189b      	adds	r3, r3, r2
 8006f84:	2201      	movs	r2, #1
 8006f86:	002c      	movs	r4, r5
 8006f88:	0005      	movs	r5, r0
 8006f8a:	9314      	str	r3, [sp, #80]	; 0x50
 8006f8c:	9b08      	ldr	r3, [sp, #32]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f92:	0031      	movs	r1, r6
 8006f94:	9805      	ldr	r0, [sp, #20]
 8006f96:	f7ff fa3d 	bl	8006414 <quorem>
 8006f9a:	0003      	movs	r3, r0
 8006f9c:	0021      	movs	r1, r4
 8006f9e:	3330      	adds	r3, #48	; 0x30
 8006fa0:	900d      	str	r0, [sp, #52]	; 0x34
 8006fa2:	9805      	ldr	r0, [sp, #20]
 8006fa4:	9307      	str	r3, [sp, #28]
 8006fa6:	f000 fb81 	bl	80076ac <__mcmp>
 8006faa:	002a      	movs	r2, r5
 8006fac:	900e      	str	r0, [sp, #56]	; 0x38
 8006fae:	0031      	movs	r1, r6
 8006fb0:	0038      	movs	r0, r7
 8006fb2:	f000 fb97 	bl	80076e4 <__mdiff>
 8006fb6:	68c3      	ldr	r3, [r0, #12]
 8006fb8:	9008      	str	r0, [sp, #32]
 8006fba:	9310      	str	r3, [sp, #64]	; 0x40
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	930c      	str	r3, [sp, #48]	; 0x30
 8006fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <_dtoa_r+0xaa4>
 8006fc6:	0001      	movs	r1, r0
 8006fc8:	9805      	ldr	r0, [sp, #20]
 8006fca:	f000 fb6f 	bl	80076ac <__mcmp>
 8006fce:	900c      	str	r0, [sp, #48]	; 0x30
 8006fd0:	0038      	movs	r0, r7
 8006fd2:	9908      	ldr	r1, [sp, #32]
 8006fd4:	f000 f92a 	bl	800722c <_Bfree>
 8006fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fdc:	3301      	adds	r3, #1
 8006fde:	9308      	str	r3, [sp, #32]
 8006fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	d10c      	bne.n	8007004 <_dtoa_r+0xad8>
 8006fea:	9b07      	ldr	r3, [sp, #28]
 8006fec:	2b39      	cmp	r3, #57	; 0x39
 8006fee:	d026      	beq.n	800703e <_dtoa_r+0xb12>
 8006ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	dd02      	ble.n	8006ffc <_dtoa_r+0xad0>
 8006ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff8:	3331      	adds	r3, #49	; 0x31
 8006ffa:	9307      	str	r3, [sp, #28]
 8006ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffe:	9a07      	ldr	r2, [sp, #28]
 8007000:	701a      	strb	r2, [r3, #0]
 8007002:	e76a      	b.n	8006eda <_dtoa_r+0x9ae>
 8007004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007006:	2b00      	cmp	r3, #0
 8007008:	db04      	blt.n	8007014 <_dtoa_r+0xae8>
 800700a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800700c:	4313      	orrs	r3, r2
 800700e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007010:	4313      	orrs	r3, r2
 8007012:	d11f      	bne.n	8007054 <_dtoa_r+0xb28>
 8007014:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007016:	2b00      	cmp	r3, #0
 8007018:	ddf0      	ble.n	8006ffc <_dtoa_r+0xad0>
 800701a:	9905      	ldr	r1, [sp, #20]
 800701c:	2201      	movs	r2, #1
 800701e:	0038      	movs	r0, r7
 8007020:	f000 fad6 	bl	80075d0 <__lshift>
 8007024:	0031      	movs	r1, r6
 8007026:	9005      	str	r0, [sp, #20]
 8007028:	f000 fb40 	bl	80076ac <__mcmp>
 800702c:	2800      	cmp	r0, #0
 800702e:	dc03      	bgt.n	8007038 <_dtoa_r+0xb0c>
 8007030:	d1e4      	bne.n	8006ffc <_dtoa_r+0xad0>
 8007032:	9b07      	ldr	r3, [sp, #28]
 8007034:	07db      	lsls	r3, r3, #31
 8007036:	d5e1      	bpl.n	8006ffc <_dtoa_r+0xad0>
 8007038:	9b07      	ldr	r3, [sp, #28]
 800703a:	2b39      	cmp	r3, #57	; 0x39
 800703c:	d1db      	bne.n	8006ff6 <_dtoa_r+0xaca>
 800703e:	2339      	movs	r3, #57	; 0x39
 8007040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007042:	7013      	strb	r3, [r2, #0]
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	9308      	str	r3, [sp, #32]
 8007048:	3b01      	subs	r3, #1
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	2a39      	cmp	r2, #57	; 0x39
 800704e:	d068      	beq.n	8007122 <_dtoa_r+0xbf6>
 8007050:	3201      	adds	r2, #1
 8007052:	e7d5      	b.n	8007000 <_dtoa_r+0xad4>
 8007054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007056:	2b00      	cmp	r3, #0
 8007058:	dd07      	ble.n	800706a <_dtoa_r+0xb3e>
 800705a:	9b07      	ldr	r3, [sp, #28]
 800705c:	2b39      	cmp	r3, #57	; 0x39
 800705e:	d0ee      	beq.n	800703e <_dtoa_r+0xb12>
 8007060:	9b07      	ldr	r3, [sp, #28]
 8007062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007064:	3301      	adds	r3, #1
 8007066:	7013      	strb	r3, [r2, #0]
 8007068:	e737      	b.n	8006eda <_dtoa_r+0x9ae>
 800706a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706c:	9a07      	ldr	r2, [sp, #28]
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007074:	4293      	cmp	r3, r2
 8007076:	d03e      	beq.n	80070f6 <_dtoa_r+0xbca>
 8007078:	2300      	movs	r3, #0
 800707a:	220a      	movs	r2, #10
 800707c:	9905      	ldr	r1, [sp, #20]
 800707e:	0038      	movs	r0, r7
 8007080:	f000 f8f8 	bl	8007274 <__multadd>
 8007084:	2300      	movs	r3, #0
 8007086:	9005      	str	r0, [sp, #20]
 8007088:	220a      	movs	r2, #10
 800708a:	0021      	movs	r1, r4
 800708c:	0038      	movs	r0, r7
 800708e:	42ac      	cmp	r4, r5
 8007090:	d106      	bne.n	80070a0 <_dtoa_r+0xb74>
 8007092:	f000 f8ef 	bl	8007274 <__multadd>
 8007096:	0004      	movs	r4, r0
 8007098:	0005      	movs	r5, r0
 800709a:	9b08      	ldr	r3, [sp, #32]
 800709c:	930a      	str	r3, [sp, #40]	; 0x28
 800709e:	e778      	b.n	8006f92 <_dtoa_r+0xa66>
 80070a0:	f000 f8e8 	bl	8007274 <__multadd>
 80070a4:	0029      	movs	r1, r5
 80070a6:	0004      	movs	r4, r0
 80070a8:	2300      	movs	r3, #0
 80070aa:	220a      	movs	r2, #10
 80070ac:	0038      	movs	r0, r7
 80070ae:	f000 f8e1 	bl	8007274 <__multadd>
 80070b2:	0005      	movs	r5, r0
 80070b4:	e7f1      	b.n	800709a <_dtoa_r+0xb6e>
 80070b6:	9b07      	ldr	r3, [sp, #28]
 80070b8:	930c      	str	r3, [sp, #48]	; 0x30
 80070ba:	2400      	movs	r4, #0
 80070bc:	0031      	movs	r1, r6
 80070be:	9805      	ldr	r0, [sp, #20]
 80070c0:	f7ff f9a8 	bl	8006414 <quorem>
 80070c4:	9b06      	ldr	r3, [sp, #24]
 80070c6:	3030      	adds	r0, #48	; 0x30
 80070c8:	5518      	strb	r0, [r3, r4]
 80070ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070cc:	3401      	adds	r4, #1
 80070ce:	9007      	str	r0, [sp, #28]
 80070d0:	42a3      	cmp	r3, r4
 80070d2:	dd07      	ble.n	80070e4 <_dtoa_r+0xbb8>
 80070d4:	2300      	movs	r3, #0
 80070d6:	220a      	movs	r2, #10
 80070d8:	0038      	movs	r0, r7
 80070da:	9905      	ldr	r1, [sp, #20]
 80070dc:	f000 f8ca 	bl	8007274 <__multadd>
 80070e0:	9005      	str	r0, [sp, #20]
 80070e2:	e7eb      	b.n	80070bc <_dtoa_r+0xb90>
 80070e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070e6:	2001      	movs	r0, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	dd00      	ble.n	80070ee <_dtoa_r+0xbc2>
 80070ec:	0018      	movs	r0, r3
 80070ee:	2400      	movs	r4, #0
 80070f0:	9b06      	ldr	r3, [sp, #24]
 80070f2:	181b      	adds	r3, r3, r0
 80070f4:	9308      	str	r3, [sp, #32]
 80070f6:	9905      	ldr	r1, [sp, #20]
 80070f8:	2201      	movs	r2, #1
 80070fa:	0038      	movs	r0, r7
 80070fc:	f000 fa68 	bl	80075d0 <__lshift>
 8007100:	0031      	movs	r1, r6
 8007102:	9005      	str	r0, [sp, #20]
 8007104:	f000 fad2 	bl	80076ac <__mcmp>
 8007108:	2800      	cmp	r0, #0
 800710a:	dc9b      	bgt.n	8007044 <_dtoa_r+0xb18>
 800710c:	d102      	bne.n	8007114 <_dtoa_r+0xbe8>
 800710e:	9b07      	ldr	r3, [sp, #28]
 8007110:	07db      	lsls	r3, r3, #31
 8007112:	d497      	bmi.n	8007044 <_dtoa_r+0xb18>
 8007114:	9b08      	ldr	r3, [sp, #32]
 8007116:	9308      	str	r3, [sp, #32]
 8007118:	3b01      	subs	r3, #1
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	2a30      	cmp	r2, #48	; 0x30
 800711e:	d0fa      	beq.n	8007116 <_dtoa_r+0xbea>
 8007120:	e6db      	b.n	8006eda <_dtoa_r+0x9ae>
 8007122:	9a06      	ldr	r2, [sp, #24]
 8007124:	429a      	cmp	r2, r3
 8007126:	d18e      	bne.n	8007046 <_dtoa_r+0xb1a>
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	3301      	adds	r3, #1
 800712c:	9302      	str	r3, [sp, #8]
 800712e:	2331      	movs	r3, #49	; 0x31
 8007130:	e799      	b.n	8007066 <_dtoa_r+0xb3a>
 8007132:	4b09      	ldr	r3, [pc, #36]	; (8007158 <_dtoa_r+0xc2c>)
 8007134:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007136:	9306      	str	r3, [sp, #24]
 8007138:	4b08      	ldr	r3, [pc, #32]	; (800715c <_dtoa_r+0xc30>)
 800713a:	2a00      	cmp	r2, #0
 800713c:	d001      	beq.n	8007142 <_dtoa_r+0xc16>
 800713e:	f7ff fa3f 	bl	80065c0 <_dtoa_r+0x94>
 8007142:	f7ff fa3f 	bl	80065c4 <_dtoa_r+0x98>
 8007146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007148:	2b00      	cmp	r3, #0
 800714a:	dcb6      	bgt.n	80070ba <_dtoa_r+0xb8e>
 800714c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800714e:	2b02      	cmp	r3, #2
 8007150:	dd00      	ble.n	8007154 <_dtoa_r+0xc28>
 8007152:	e6ac      	b.n	8006eae <_dtoa_r+0x982>
 8007154:	e7b1      	b.n	80070ba <_dtoa_r+0xb8e>
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	080087e8 	.word	0x080087e8
 800715c:	080087f0 	.word	0x080087f0

08007160 <_localeconv_r>:
 8007160:	4800      	ldr	r0, [pc, #0]	; (8007164 <_localeconv_r+0x4>)
 8007162:	4770      	bx	lr
 8007164:	20000174 	.word	0x20000174

08007168 <malloc>:
 8007168:	b510      	push	{r4, lr}
 800716a:	4b03      	ldr	r3, [pc, #12]	; (8007178 <malloc+0x10>)
 800716c:	0001      	movs	r1, r0
 800716e:	6818      	ldr	r0, [r3, #0]
 8007170:	f000 fc4c 	bl	8007a0c <_malloc_r>
 8007174:	bd10      	pop	{r4, pc}
 8007176:	46c0      	nop			; (mov r8, r8)
 8007178:	20000020 	.word	0x20000020

0800717c <memchr>:
 800717c:	b2c9      	uxtb	r1, r1
 800717e:	1882      	adds	r2, r0, r2
 8007180:	4290      	cmp	r0, r2
 8007182:	d101      	bne.n	8007188 <memchr+0xc>
 8007184:	2000      	movs	r0, #0
 8007186:	4770      	bx	lr
 8007188:	7803      	ldrb	r3, [r0, #0]
 800718a:	428b      	cmp	r3, r1
 800718c:	d0fb      	beq.n	8007186 <memchr+0xa>
 800718e:	3001      	adds	r0, #1
 8007190:	e7f6      	b.n	8007180 <memchr+0x4>

08007192 <memcpy>:
 8007192:	2300      	movs	r3, #0
 8007194:	b510      	push	{r4, lr}
 8007196:	429a      	cmp	r2, r3
 8007198:	d100      	bne.n	800719c <memcpy+0xa>
 800719a:	bd10      	pop	{r4, pc}
 800719c:	5ccc      	ldrb	r4, [r1, r3]
 800719e:	54c4      	strb	r4, [r0, r3]
 80071a0:	3301      	adds	r3, #1
 80071a2:	e7f8      	b.n	8007196 <memcpy+0x4>

080071a4 <_Balloc>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071a8:	0006      	movs	r6, r0
 80071aa:	000c      	movs	r4, r1
 80071ac:	2d00      	cmp	r5, #0
 80071ae:	d10e      	bne.n	80071ce <_Balloc+0x2a>
 80071b0:	2010      	movs	r0, #16
 80071b2:	f7ff ffd9 	bl	8007168 <malloc>
 80071b6:	1e02      	subs	r2, r0, #0
 80071b8:	6270      	str	r0, [r6, #36]	; 0x24
 80071ba:	d104      	bne.n	80071c6 <_Balloc+0x22>
 80071bc:	2166      	movs	r1, #102	; 0x66
 80071be:	4b19      	ldr	r3, [pc, #100]	; (8007224 <_Balloc+0x80>)
 80071c0:	4819      	ldr	r0, [pc, #100]	; (8007228 <_Balloc+0x84>)
 80071c2:	f000 fcab 	bl	8007b1c <__assert_func>
 80071c6:	6045      	str	r5, [r0, #4]
 80071c8:	6085      	str	r5, [r0, #8]
 80071ca:	6005      	str	r5, [r0, #0]
 80071cc:	60c5      	str	r5, [r0, #12]
 80071ce:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80071d0:	68eb      	ldr	r3, [r5, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d013      	beq.n	80071fe <_Balloc+0x5a>
 80071d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80071d8:	00a2      	lsls	r2, r4, #2
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	189b      	adds	r3, r3, r2
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d118      	bne.n	8007216 <_Balloc+0x72>
 80071e4:	2101      	movs	r1, #1
 80071e6:	000d      	movs	r5, r1
 80071e8:	40a5      	lsls	r5, r4
 80071ea:	1d6a      	adds	r2, r5, #5
 80071ec:	0030      	movs	r0, r6
 80071ee:	0092      	lsls	r2, r2, #2
 80071f0:	f000 fb74 	bl	80078dc <_calloc_r>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	d00c      	beq.n	8007212 <_Balloc+0x6e>
 80071f8:	6044      	str	r4, [r0, #4]
 80071fa:	6085      	str	r5, [r0, #8]
 80071fc:	e00d      	b.n	800721a <_Balloc+0x76>
 80071fe:	2221      	movs	r2, #33	; 0x21
 8007200:	2104      	movs	r1, #4
 8007202:	0030      	movs	r0, r6
 8007204:	f000 fb6a 	bl	80078dc <_calloc_r>
 8007208:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800720a:	60e8      	str	r0, [r5, #12]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e1      	bne.n	80071d6 <_Balloc+0x32>
 8007212:	2000      	movs	r0, #0
 8007214:	bd70      	pop	{r4, r5, r6, pc}
 8007216:	6802      	ldr	r2, [r0, #0]
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	2300      	movs	r3, #0
 800721c:	6103      	str	r3, [r0, #16]
 800721e:	60c3      	str	r3, [r0, #12]
 8007220:	e7f8      	b.n	8007214 <_Balloc+0x70>
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	080087f5 	.word	0x080087f5
 8007228:	08008878 	.word	0x08008878

0800722c <_Bfree>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007230:	0005      	movs	r5, r0
 8007232:	000c      	movs	r4, r1
 8007234:	2e00      	cmp	r6, #0
 8007236:	d10e      	bne.n	8007256 <_Bfree+0x2a>
 8007238:	2010      	movs	r0, #16
 800723a:	f7ff ff95 	bl	8007168 <malloc>
 800723e:	1e02      	subs	r2, r0, #0
 8007240:	6268      	str	r0, [r5, #36]	; 0x24
 8007242:	d104      	bne.n	800724e <_Bfree+0x22>
 8007244:	218a      	movs	r1, #138	; 0x8a
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <_Bfree+0x40>)
 8007248:	4809      	ldr	r0, [pc, #36]	; (8007270 <_Bfree+0x44>)
 800724a:	f000 fc67 	bl	8007b1c <__assert_func>
 800724e:	6046      	str	r6, [r0, #4]
 8007250:	6086      	str	r6, [r0, #8]
 8007252:	6006      	str	r6, [r0, #0]
 8007254:	60c6      	str	r6, [r0, #12]
 8007256:	2c00      	cmp	r4, #0
 8007258:	d007      	beq.n	800726a <_Bfree+0x3e>
 800725a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800725c:	6862      	ldr	r2, [r4, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	0092      	lsls	r2, r2, #2
 8007262:	189b      	adds	r3, r3, r2
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	6022      	str	r2, [r4, #0]
 8007268:	601c      	str	r4, [r3, #0]
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	080087f5 	.word	0x080087f5
 8007270:	08008878 	.word	0x08008878

08007274 <__multadd>:
 8007274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007276:	000e      	movs	r6, r1
 8007278:	9001      	str	r0, [sp, #4]
 800727a:	000c      	movs	r4, r1
 800727c:	001d      	movs	r5, r3
 800727e:	2000      	movs	r0, #0
 8007280:	690f      	ldr	r7, [r1, #16]
 8007282:	3614      	adds	r6, #20
 8007284:	6833      	ldr	r3, [r6, #0]
 8007286:	3001      	adds	r0, #1
 8007288:	b299      	uxth	r1, r3
 800728a:	4351      	muls	r1, r2
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	4353      	muls	r3, r2
 8007290:	1949      	adds	r1, r1, r5
 8007292:	0c0d      	lsrs	r5, r1, #16
 8007294:	195b      	adds	r3, r3, r5
 8007296:	0c1d      	lsrs	r5, r3, #16
 8007298:	b289      	uxth	r1, r1
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	185b      	adds	r3, r3, r1
 800729e:	c608      	stmia	r6!, {r3}
 80072a0:	4287      	cmp	r7, r0
 80072a2:	dcef      	bgt.n	8007284 <__multadd+0x10>
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	d022      	beq.n	80072ee <__multadd+0x7a>
 80072a8:	68a3      	ldr	r3, [r4, #8]
 80072aa:	42bb      	cmp	r3, r7
 80072ac:	dc19      	bgt.n	80072e2 <__multadd+0x6e>
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	9801      	ldr	r0, [sp, #4]
 80072b2:	1c59      	adds	r1, r3, #1
 80072b4:	f7ff ff76 	bl	80071a4 <_Balloc>
 80072b8:	1e06      	subs	r6, r0, #0
 80072ba:	d105      	bne.n	80072c8 <__multadd+0x54>
 80072bc:	0002      	movs	r2, r0
 80072be:	21b5      	movs	r1, #181	; 0xb5
 80072c0:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <__multadd+0x80>)
 80072c2:	480d      	ldr	r0, [pc, #52]	; (80072f8 <__multadd+0x84>)
 80072c4:	f000 fc2a 	bl	8007b1c <__assert_func>
 80072c8:	0021      	movs	r1, r4
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	310c      	adds	r1, #12
 80072ce:	1c9a      	adds	r2, r3, #2
 80072d0:	0092      	lsls	r2, r2, #2
 80072d2:	300c      	adds	r0, #12
 80072d4:	f7ff ff5d 	bl	8007192 <memcpy>
 80072d8:	0021      	movs	r1, r4
 80072da:	9801      	ldr	r0, [sp, #4]
 80072dc:	f7ff ffa6 	bl	800722c <_Bfree>
 80072e0:	0034      	movs	r4, r6
 80072e2:	1d3b      	adds	r3, r7, #4
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	18e3      	adds	r3, r4, r3
 80072e8:	605d      	str	r5, [r3, #4]
 80072ea:	1c7b      	adds	r3, r7, #1
 80072ec:	6123      	str	r3, [r4, #16]
 80072ee:	0020      	movs	r0, r4
 80072f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072f2:	46c0      	nop			; (mov r8, r8)
 80072f4:	08008867 	.word	0x08008867
 80072f8:	08008878 	.word	0x08008878

080072fc <__hi0bits>:
 80072fc:	0003      	movs	r3, r0
 80072fe:	0c02      	lsrs	r2, r0, #16
 8007300:	2000      	movs	r0, #0
 8007302:	4282      	cmp	r2, r0
 8007304:	d101      	bne.n	800730a <__hi0bits+0xe>
 8007306:	041b      	lsls	r3, r3, #16
 8007308:	3010      	adds	r0, #16
 800730a:	0e1a      	lsrs	r2, r3, #24
 800730c:	d101      	bne.n	8007312 <__hi0bits+0x16>
 800730e:	3008      	adds	r0, #8
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	0f1a      	lsrs	r2, r3, #28
 8007314:	d101      	bne.n	800731a <__hi0bits+0x1e>
 8007316:	3004      	adds	r0, #4
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	0f9a      	lsrs	r2, r3, #30
 800731c:	d101      	bne.n	8007322 <__hi0bits+0x26>
 800731e:	3002      	adds	r0, #2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	db03      	blt.n	800732e <__hi0bits+0x32>
 8007326:	3001      	adds	r0, #1
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	d400      	bmi.n	800732e <__hi0bits+0x32>
 800732c:	2020      	movs	r0, #32
 800732e:	4770      	bx	lr

08007330 <__lo0bits>:
 8007330:	6803      	ldr	r3, [r0, #0]
 8007332:	0002      	movs	r2, r0
 8007334:	2107      	movs	r1, #7
 8007336:	0018      	movs	r0, r3
 8007338:	4008      	ands	r0, r1
 800733a:	420b      	tst	r3, r1
 800733c:	d00d      	beq.n	800735a <__lo0bits+0x2a>
 800733e:	3906      	subs	r1, #6
 8007340:	2000      	movs	r0, #0
 8007342:	420b      	tst	r3, r1
 8007344:	d105      	bne.n	8007352 <__lo0bits+0x22>
 8007346:	3002      	adds	r0, #2
 8007348:	4203      	tst	r3, r0
 800734a:	d003      	beq.n	8007354 <__lo0bits+0x24>
 800734c:	40cb      	lsrs	r3, r1
 800734e:	0008      	movs	r0, r1
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	4770      	bx	lr
 8007354:	089b      	lsrs	r3, r3, #2
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	e7fb      	b.n	8007352 <__lo0bits+0x22>
 800735a:	b299      	uxth	r1, r3
 800735c:	2900      	cmp	r1, #0
 800735e:	d101      	bne.n	8007364 <__lo0bits+0x34>
 8007360:	2010      	movs	r0, #16
 8007362:	0c1b      	lsrs	r3, r3, #16
 8007364:	b2d9      	uxtb	r1, r3
 8007366:	2900      	cmp	r1, #0
 8007368:	d101      	bne.n	800736e <__lo0bits+0x3e>
 800736a:	3008      	adds	r0, #8
 800736c:	0a1b      	lsrs	r3, r3, #8
 800736e:	0719      	lsls	r1, r3, #28
 8007370:	d101      	bne.n	8007376 <__lo0bits+0x46>
 8007372:	3004      	adds	r0, #4
 8007374:	091b      	lsrs	r3, r3, #4
 8007376:	0799      	lsls	r1, r3, #30
 8007378:	d101      	bne.n	800737e <__lo0bits+0x4e>
 800737a:	3002      	adds	r0, #2
 800737c:	089b      	lsrs	r3, r3, #2
 800737e:	07d9      	lsls	r1, r3, #31
 8007380:	d4e9      	bmi.n	8007356 <__lo0bits+0x26>
 8007382:	3001      	adds	r0, #1
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	d1e6      	bne.n	8007356 <__lo0bits+0x26>
 8007388:	2020      	movs	r0, #32
 800738a:	e7e2      	b.n	8007352 <__lo0bits+0x22>

0800738c <__i2b>:
 800738c:	b510      	push	{r4, lr}
 800738e:	000c      	movs	r4, r1
 8007390:	2101      	movs	r1, #1
 8007392:	f7ff ff07 	bl	80071a4 <_Balloc>
 8007396:	2800      	cmp	r0, #0
 8007398:	d106      	bne.n	80073a8 <__i2b+0x1c>
 800739a:	21a0      	movs	r1, #160	; 0xa0
 800739c:	0002      	movs	r2, r0
 800739e:	4b04      	ldr	r3, [pc, #16]	; (80073b0 <__i2b+0x24>)
 80073a0:	4804      	ldr	r0, [pc, #16]	; (80073b4 <__i2b+0x28>)
 80073a2:	0049      	lsls	r1, r1, #1
 80073a4:	f000 fbba 	bl	8007b1c <__assert_func>
 80073a8:	2301      	movs	r3, #1
 80073aa:	6144      	str	r4, [r0, #20]
 80073ac:	6103      	str	r3, [r0, #16]
 80073ae:	bd10      	pop	{r4, pc}
 80073b0:	08008867 	.word	0x08008867
 80073b4:	08008878 	.word	0x08008878

080073b8 <__multiply>:
 80073b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ba:	690b      	ldr	r3, [r1, #16]
 80073bc:	0014      	movs	r4, r2
 80073be:	6912      	ldr	r2, [r2, #16]
 80073c0:	000d      	movs	r5, r1
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	4293      	cmp	r3, r2
 80073c6:	da01      	bge.n	80073cc <__multiply+0x14>
 80073c8:	0025      	movs	r5, r4
 80073ca:	000c      	movs	r4, r1
 80073cc:	692f      	ldr	r7, [r5, #16]
 80073ce:	6926      	ldr	r6, [r4, #16]
 80073d0:	6869      	ldr	r1, [r5, #4]
 80073d2:	19bb      	adds	r3, r7, r6
 80073d4:	9302      	str	r3, [sp, #8]
 80073d6:	68ab      	ldr	r3, [r5, #8]
 80073d8:	19ba      	adds	r2, r7, r6
 80073da:	4293      	cmp	r3, r2
 80073dc:	da00      	bge.n	80073e0 <__multiply+0x28>
 80073de:	3101      	adds	r1, #1
 80073e0:	f7ff fee0 	bl	80071a4 <_Balloc>
 80073e4:	9001      	str	r0, [sp, #4]
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d106      	bne.n	80073f8 <__multiply+0x40>
 80073ea:	215e      	movs	r1, #94	; 0x5e
 80073ec:	0002      	movs	r2, r0
 80073ee:	4b48      	ldr	r3, [pc, #288]	; (8007510 <__multiply+0x158>)
 80073f0:	4848      	ldr	r0, [pc, #288]	; (8007514 <__multiply+0x15c>)
 80073f2:	31ff      	adds	r1, #255	; 0xff
 80073f4:	f000 fb92 	bl	8007b1c <__assert_func>
 80073f8:	9b01      	ldr	r3, [sp, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	3314      	adds	r3, #20
 80073fe:	469c      	mov	ip, r3
 8007400:	19bb      	adds	r3, r7, r6
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4463      	add	r3, ip
 8007406:	9303      	str	r3, [sp, #12]
 8007408:	4663      	mov	r3, ip
 800740a:	9903      	ldr	r1, [sp, #12]
 800740c:	428b      	cmp	r3, r1
 800740e:	d32c      	bcc.n	800746a <__multiply+0xb2>
 8007410:	002b      	movs	r3, r5
 8007412:	0022      	movs	r2, r4
 8007414:	3314      	adds	r3, #20
 8007416:	00bf      	lsls	r7, r7, #2
 8007418:	3214      	adds	r2, #20
 800741a:	9306      	str	r3, [sp, #24]
 800741c:	00b6      	lsls	r6, r6, #2
 800741e:	19db      	adds	r3, r3, r7
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	1993      	adds	r3, r2, r6
 8007424:	9307      	str	r3, [sp, #28]
 8007426:	2304      	movs	r3, #4
 8007428:	9305      	str	r3, [sp, #20]
 800742a:	002b      	movs	r3, r5
 800742c:	9904      	ldr	r1, [sp, #16]
 800742e:	3315      	adds	r3, #21
 8007430:	9200      	str	r2, [sp, #0]
 8007432:	4299      	cmp	r1, r3
 8007434:	d305      	bcc.n	8007442 <__multiply+0x8a>
 8007436:	1b4b      	subs	r3, r1, r5
 8007438:	3b15      	subs	r3, #21
 800743a:	089b      	lsrs	r3, r3, #2
 800743c:	3301      	adds	r3, #1
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	9b07      	ldr	r3, [sp, #28]
 8007444:	9a00      	ldr	r2, [sp, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d311      	bcc.n	800746e <__multiply+0xb6>
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	dd06      	ble.n	800745e <__multiply+0xa6>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	3b04      	subs	r3, #4
 8007454:	9303      	str	r3, [sp, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d053      	beq.n	8007506 <__multiply+0x14e>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	9a02      	ldr	r2, [sp, #8]
 8007462:	0018      	movs	r0, r3
 8007464:	611a      	str	r2, [r3, #16]
 8007466:	b009      	add	sp, #36	; 0x24
 8007468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800746a:	c304      	stmia	r3!, {r2}
 800746c:	e7cd      	b.n	800740a <__multiply+0x52>
 800746e:	9b00      	ldr	r3, [sp, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	b298      	uxth	r0, r3
 8007474:	2800      	cmp	r0, #0
 8007476:	d01b      	beq.n	80074b0 <__multiply+0xf8>
 8007478:	4667      	mov	r7, ip
 800747a:	2400      	movs	r4, #0
 800747c:	9e06      	ldr	r6, [sp, #24]
 800747e:	ce02      	ldmia	r6!, {r1}
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	b28b      	uxth	r3, r1
 8007484:	4343      	muls	r3, r0
 8007486:	b292      	uxth	r2, r2
 8007488:	189b      	adds	r3, r3, r2
 800748a:	191b      	adds	r3, r3, r4
 800748c:	0c0c      	lsrs	r4, r1, #16
 800748e:	4344      	muls	r4, r0
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	0c11      	lsrs	r1, r2, #16
 8007494:	1861      	adds	r1, r4, r1
 8007496:	0c1c      	lsrs	r4, r3, #16
 8007498:	1909      	adds	r1, r1, r4
 800749a:	0c0c      	lsrs	r4, r1, #16
 800749c:	b29b      	uxth	r3, r3
 800749e:	0409      	lsls	r1, r1, #16
 80074a0:	430b      	orrs	r3, r1
 80074a2:	c708      	stmia	r7!, {r3}
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	42b3      	cmp	r3, r6
 80074a8:	d8e9      	bhi.n	800747e <__multiply+0xc6>
 80074aa:	4663      	mov	r3, ip
 80074ac:	9a05      	ldr	r2, [sp, #20]
 80074ae:	509c      	str	r4, [r3, r2]
 80074b0:	9b00      	ldr	r3, [sp, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	0c1e      	lsrs	r6, r3, #16
 80074b6:	d020      	beq.n	80074fa <__multiply+0x142>
 80074b8:	4663      	mov	r3, ip
 80074ba:	002c      	movs	r4, r5
 80074bc:	4660      	mov	r0, ip
 80074be:	2700      	movs	r7, #0
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3414      	adds	r4, #20
 80074c4:	6822      	ldr	r2, [r4, #0]
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	b291      	uxth	r1, r2
 80074ca:	4371      	muls	r1, r6
 80074cc:	6802      	ldr	r2, [r0, #0]
 80074ce:	0c12      	lsrs	r2, r2, #16
 80074d0:	1889      	adds	r1, r1, r2
 80074d2:	19cf      	adds	r7, r1, r7
 80074d4:	0439      	lsls	r1, r7, #16
 80074d6:	430b      	orrs	r3, r1
 80074d8:	6003      	str	r3, [r0, #0]
 80074da:	cc02      	ldmia	r4!, {r1}
 80074dc:	6843      	ldr	r3, [r0, #4]
 80074de:	0c09      	lsrs	r1, r1, #16
 80074e0:	4371      	muls	r1, r6
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	0c3f      	lsrs	r7, r7, #16
 80074e6:	18cb      	adds	r3, r1, r3
 80074e8:	9a04      	ldr	r2, [sp, #16]
 80074ea:	19db      	adds	r3, r3, r7
 80074ec:	0c1f      	lsrs	r7, r3, #16
 80074ee:	3004      	adds	r0, #4
 80074f0:	42a2      	cmp	r2, r4
 80074f2:	d8e7      	bhi.n	80074c4 <__multiply+0x10c>
 80074f4:	4662      	mov	r2, ip
 80074f6:	9905      	ldr	r1, [sp, #20]
 80074f8:	5053      	str	r3, [r2, r1]
 80074fa:	9b00      	ldr	r3, [sp, #0]
 80074fc:	3304      	adds	r3, #4
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	2304      	movs	r3, #4
 8007502:	449c      	add	ip, r3
 8007504:	e79d      	b.n	8007442 <__multiply+0x8a>
 8007506:	9b02      	ldr	r3, [sp, #8]
 8007508:	3b01      	subs	r3, #1
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	e79d      	b.n	800744a <__multiply+0x92>
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	08008867 	.word	0x08008867
 8007514:	08008878 	.word	0x08008878

08007518 <__pow5mult>:
 8007518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800751a:	2303      	movs	r3, #3
 800751c:	0015      	movs	r5, r2
 800751e:	0007      	movs	r7, r0
 8007520:	000e      	movs	r6, r1
 8007522:	401a      	ands	r2, r3
 8007524:	421d      	tst	r5, r3
 8007526:	d008      	beq.n	800753a <__pow5mult+0x22>
 8007528:	4925      	ldr	r1, [pc, #148]	; (80075c0 <__pow5mult+0xa8>)
 800752a:	3a01      	subs	r2, #1
 800752c:	0092      	lsls	r2, r2, #2
 800752e:	5852      	ldr	r2, [r2, r1]
 8007530:	2300      	movs	r3, #0
 8007532:	0031      	movs	r1, r6
 8007534:	f7ff fe9e 	bl	8007274 <__multadd>
 8007538:	0006      	movs	r6, r0
 800753a:	10ad      	asrs	r5, r5, #2
 800753c:	d03d      	beq.n	80075ba <__pow5mult+0xa2>
 800753e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007540:	2c00      	cmp	r4, #0
 8007542:	d10f      	bne.n	8007564 <__pow5mult+0x4c>
 8007544:	2010      	movs	r0, #16
 8007546:	f7ff fe0f 	bl	8007168 <malloc>
 800754a:	1e02      	subs	r2, r0, #0
 800754c:	6278      	str	r0, [r7, #36]	; 0x24
 800754e:	d105      	bne.n	800755c <__pow5mult+0x44>
 8007550:	21d7      	movs	r1, #215	; 0xd7
 8007552:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <__pow5mult+0xac>)
 8007554:	481c      	ldr	r0, [pc, #112]	; (80075c8 <__pow5mult+0xb0>)
 8007556:	0049      	lsls	r1, r1, #1
 8007558:	f000 fae0 	bl	8007b1c <__assert_func>
 800755c:	6044      	str	r4, [r0, #4]
 800755e:	6084      	str	r4, [r0, #8]
 8007560:	6004      	str	r4, [r0, #0]
 8007562:	60c4      	str	r4, [r0, #12]
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	689c      	ldr	r4, [r3, #8]
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	2c00      	cmp	r4, #0
 800756c:	d108      	bne.n	8007580 <__pow5mult+0x68>
 800756e:	0038      	movs	r0, r7
 8007570:	4916      	ldr	r1, [pc, #88]	; (80075cc <__pow5mult+0xb4>)
 8007572:	f7ff ff0b 	bl	800738c <__i2b>
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	0004      	movs	r4, r0
 800757a:	6098      	str	r0, [r3, #8]
 800757c:	2300      	movs	r3, #0
 800757e:	6003      	str	r3, [r0, #0]
 8007580:	2301      	movs	r3, #1
 8007582:	421d      	tst	r5, r3
 8007584:	d00a      	beq.n	800759c <__pow5mult+0x84>
 8007586:	0031      	movs	r1, r6
 8007588:	0022      	movs	r2, r4
 800758a:	0038      	movs	r0, r7
 800758c:	f7ff ff14 	bl	80073b8 <__multiply>
 8007590:	0031      	movs	r1, r6
 8007592:	9001      	str	r0, [sp, #4]
 8007594:	0038      	movs	r0, r7
 8007596:	f7ff fe49 	bl	800722c <_Bfree>
 800759a:	9e01      	ldr	r6, [sp, #4]
 800759c:	106d      	asrs	r5, r5, #1
 800759e:	d00c      	beq.n	80075ba <__pow5mult+0xa2>
 80075a0:	6820      	ldr	r0, [r4, #0]
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d107      	bne.n	80075b6 <__pow5mult+0x9e>
 80075a6:	0022      	movs	r2, r4
 80075a8:	0021      	movs	r1, r4
 80075aa:	0038      	movs	r0, r7
 80075ac:	f7ff ff04 	bl	80073b8 <__multiply>
 80075b0:	2300      	movs	r3, #0
 80075b2:	6020      	str	r0, [r4, #0]
 80075b4:	6003      	str	r3, [r0, #0]
 80075b6:	0004      	movs	r4, r0
 80075b8:	e7e2      	b.n	8007580 <__pow5mult+0x68>
 80075ba:	0030      	movs	r0, r6
 80075bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075be:	46c0      	nop			; (mov r8, r8)
 80075c0:	080089c8 	.word	0x080089c8
 80075c4:	080087f5 	.word	0x080087f5
 80075c8:	08008878 	.word	0x08008878
 80075cc:	00000271 	.word	0x00000271

080075d0 <__lshift>:
 80075d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075d2:	000c      	movs	r4, r1
 80075d4:	0017      	movs	r7, r2
 80075d6:	6923      	ldr	r3, [r4, #16]
 80075d8:	1155      	asrs	r5, r2, #5
 80075da:	b087      	sub	sp, #28
 80075dc:	18eb      	adds	r3, r5, r3
 80075de:	9302      	str	r3, [sp, #8]
 80075e0:	3301      	adds	r3, #1
 80075e2:	9301      	str	r3, [sp, #4]
 80075e4:	6849      	ldr	r1, [r1, #4]
 80075e6:	68a3      	ldr	r3, [r4, #8]
 80075e8:	9004      	str	r0, [sp, #16]
 80075ea:	9a01      	ldr	r2, [sp, #4]
 80075ec:	4293      	cmp	r3, r2
 80075ee:	db10      	blt.n	8007612 <__lshift+0x42>
 80075f0:	9804      	ldr	r0, [sp, #16]
 80075f2:	f7ff fdd7 	bl	80071a4 <_Balloc>
 80075f6:	2300      	movs	r3, #0
 80075f8:	0002      	movs	r2, r0
 80075fa:	0006      	movs	r6, r0
 80075fc:	0019      	movs	r1, r3
 80075fe:	3214      	adds	r2, #20
 8007600:	4298      	cmp	r0, r3
 8007602:	d10c      	bne.n	800761e <__lshift+0x4e>
 8007604:	21da      	movs	r1, #218	; 0xda
 8007606:	0002      	movs	r2, r0
 8007608:	4b26      	ldr	r3, [pc, #152]	; (80076a4 <__lshift+0xd4>)
 800760a:	4827      	ldr	r0, [pc, #156]	; (80076a8 <__lshift+0xd8>)
 800760c:	31ff      	adds	r1, #255	; 0xff
 800760e:	f000 fa85 	bl	8007b1c <__assert_func>
 8007612:	3101      	adds	r1, #1
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	e7e8      	b.n	80075ea <__lshift+0x1a>
 8007618:	0098      	lsls	r0, r3, #2
 800761a:	5011      	str	r1, [r2, r0]
 800761c:	3301      	adds	r3, #1
 800761e:	42ab      	cmp	r3, r5
 8007620:	dbfa      	blt.n	8007618 <__lshift+0x48>
 8007622:	43eb      	mvns	r3, r5
 8007624:	17db      	asrs	r3, r3, #31
 8007626:	401d      	ands	r5, r3
 8007628:	211f      	movs	r1, #31
 800762a:	0023      	movs	r3, r4
 800762c:	0038      	movs	r0, r7
 800762e:	00ad      	lsls	r5, r5, #2
 8007630:	1955      	adds	r5, r2, r5
 8007632:	6922      	ldr	r2, [r4, #16]
 8007634:	3314      	adds	r3, #20
 8007636:	0092      	lsls	r2, r2, #2
 8007638:	4008      	ands	r0, r1
 800763a:	4684      	mov	ip, r0
 800763c:	189a      	adds	r2, r3, r2
 800763e:	420f      	tst	r7, r1
 8007640:	d02a      	beq.n	8007698 <__lshift+0xc8>
 8007642:	3101      	adds	r1, #1
 8007644:	1a09      	subs	r1, r1, r0
 8007646:	9105      	str	r1, [sp, #20]
 8007648:	2100      	movs	r1, #0
 800764a:	9503      	str	r5, [sp, #12]
 800764c:	4667      	mov	r7, ip
 800764e:	6818      	ldr	r0, [r3, #0]
 8007650:	40b8      	lsls	r0, r7
 8007652:	4301      	orrs	r1, r0
 8007654:	9803      	ldr	r0, [sp, #12]
 8007656:	c002      	stmia	r0!, {r1}
 8007658:	cb02      	ldmia	r3!, {r1}
 800765a:	9003      	str	r0, [sp, #12]
 800765c:	9805      	ldr	r0, [sp, #20]
 800765e:	40c1      	lsrs	r1, r0
 8007660:	429a      	cmp	r2, r3
 8007662:	d8f3      	bhi.n	800764c <__lshift+0x7c>
 8007664:	0020      	movs	r0, r4
 8007666:	3015      	adds	r0, #21
 8007668:	2304      	movs	r3, #4
 800766a:	4282      	cmp	r2, r0
 800766c:	d304      	bcc.n	8007678 <__lshift+0xa8>
 800766e:	1b13      	subs	r3, r2, r4
 8007670:	3b15      	subs	r3, #21
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	3301      	adds	r3, #1
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	50e9      	str	r1, [r5, r3]
 800767a:	2900      	cmp	r1, #0
 800767c:	d002      	beq.n	8007684 <__lshift+0xb4>
 800767e:	9b02      	ldr	r3, [sp, #8]
 8007680:	3302      	adds	r3, #2
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	9804      	ldr	r0, [sp, #16]
 8007688:	3b01      	subs	r3, #1
 800768a:	0021      	movs	r1, r4
 800768c:	6133      	str	r3, [r6, #16]
 800768e:	f7ff fdcd 	bl	800722c <_Bfree>
 8007692:	0030      	movs	r0, r6
 8007694:	b007      	add	sp, #28
 8007696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007698:	cb02      	ldmia	r3!, {r1}
 800769a:	c502      	stmia	r5!, {r1}
 800769c:	429a      	cmp	r2, r3
 800769e:	d8fb      	bhi.n	8007698 <__lshift+0xc8>
 80076a0:	e7f0      	b.n	8007684 <__lshift+0xb4>
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	08008867 	.word	0x08008867
 80076a8:	08008878 	.word	0x08008878

080076ac <__mcmp>:
 80076ac:	6902      	ldr	r2, [r0, #16]
 80076ae:	690b      	ldr	r3, [r1, #16]
 80076b0:	b530      	push	{r4, r5, lr}
 80076b2:	0004      	movs	r4, r0
 80076b4:	1ad0      	subs	r0, r2, r3
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d10d      	bne.n	80076d6 <__mcmp+0x2a>
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	3414      	adds	r4, #20
 80076be:	3114      	adds	r1, #20
 80076c0:	18e2      	adds	r2, r4, r3
 80076c2:	18c9      	adds	r1, r1, r3
 80076c4:	3a04      	subs	r2, #4
 80076c6:	3904      	subs	r1, #4
 80076c8:	6815      	ldr	r5, [r2, #0]
 80076ca:	680b      	ldr	r3, [r1, #0]
 80076cc:	429d      	cmp	r5, r3
 80076ce:	d003      	beq.n	80076d8 <__mcmp+0x2c>
 80076d0:	2001      	movs	r0, #1
 80076d2:	429d      	cmp	r5, r3
 80076d4:	d303      	bcc.n	80076de <__mcmp+0x32>
 80076d6:	bd30      	pop	{r4, r5, pc}
 80076d8:	4294      	cmp	r4, r2
 80076da:	d3f3      	bcc.n	80076c4 <__mcmp+0x18>
 80076dc:	e7fb      	b.n	80076d6 <__mcmp+0x2a>
 80076de:	4240      	negs	r0, r0
 80076e0:	e7f9      	b.n	80076d6 <__mcmp+0x2a>
	...

080076e4 <__mdiff>:
 80076e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076e6:	000e      	movs	r6, r1
 80076e8:	0007      	movs	r7, r0
 80076ea:	0011      	movs	r1, r2
 80076ec:	0030      	movs	r0, r6
 80076ee:	b087      	sub	sp, #28
 80076f0:	0014      	movs	r4, r2
 80076f2:	f7ff ffdb 	bl	80076ac <__mcmp>
 80076f6:	1e05      	subs	r5, r0, #0
 80076f8:	d110      	bne.n	800771c <__mdiff+0x38>
 80076fa:	0001      	movs	r1, r0
 80076fc:	0038      	movs	r0, r7
 80076fe:	f7ff fd51 	bl	80071a4 <_Balloc>
 8007702:	1e02      	subs	r2, r0, #0
 8007704:	d104      	bne.n	8007710 <__mdiff+0x2c>
 8007706:	4b40      	ldr	r3, [pc, #256]	; (8007808 <__mdiff+0x124>)
 8007708:	4940      	ldr	r1, [pc, #256]	; (800780c <__mdiff+0x128>)
 800770a:	4841      	ldr	r0, [pc, #260]	; (8007810 <__mdiff+0x12c>)
 800770c:	f000 fa06 	bl	8007b1c <__assert_func>
 8007710:	2301      	movs	r3, #1
 8007712:	6145      	str	r5, [r0, #20]
 8007714:	6103      	str	r3, [r0, #16]
 8007716:	0010      	movs	r0, r2
 8007718:	b007      	add	sp, #28
 800771a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800771c:	2301      	movs	r3, #1
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	2800      	cmp	r0, #0
 8007722:	db04      	blt.n	800772e <__mdiff+0x4a>
 8007724:	0023      	movs	r3, r4
 8007726:	0034      	movs	r4, r6
 8007728:	001e      	movs	r6, r3
 800772a:	2300      	movs	r3, #0
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	0038      	movs	r0, r7
 8007730:	6861      	ldr	r1, [r4, #4]
 8007732:	f7ff fd37 	bl	80071a4 <_Balloc>
 8007736:	1e02      	subs	r2, r0, #0
 8007738:	d103      	bne.n	8007742 <__mdiff+0x5e>
 800773a:	2190      	movs	r1, #144	; 0x90
 800773c:	4b32      	ldr	r3, [pc, #200]	; (8007808 <__mdiff+0x124>)
 800773e:	0089      	lsls	r1, r1, #2
 8007740:	e7e3      	b.n	800770a <__mdiff+0x26>
 8007742:	9b01      	ldr	r3, [sp, #4]
 8007744:	2700      	movs	r7, #0
 8007746:	60c3      	str	r3, [r0, #12]
 8007748:	6920      	ldr	r0, [r4, #16]
 800774a:	3414      	adds	r4, #20
 800774c:	9401      	str	r4, [sp, #4]
 800774e:	9b01      	ldr	r3, [sp, #4]
 8007750:	0084      	lsls	r4, r0, #2
 8007752:	191b      	adds	r3, r3, r4
 8007754:	0034      	movs	r4, r6
 8007756:	9302      	str	r3, [sp, #8]
 8007758:	6933      	ldr	r3, [r6, #16]
 800775a:	3414      	adds	r4, #20
 800775c:	0099      	lsls	r1, r3, #2
 800775e:	1863      	adds	r3, r4, r1
 8007760:	9303      	str	r3, [sp, #12]
 8007762:	0013      	movs	r3, r2
 8007764:	3314      	adds	r3, #20
 8007766:	469c      	mov	ip, r3
 8007768:	9305      	str	r3, [sp, #20]
 800776a:	9b01      	ldr	r3, [sp, #4]
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	9b04      	ldr	r3, [sp, #16]
 8007770:	cc02      	ldmia	r4!, {r1}
 8007772:	cb20      	ldmia	r3!, {r5}
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	b2ab      	uxth	r3, r5
 8007778:	19df      	adds	r7, r3, r7
 800777a:	b28b      	uxth	r3, r1
 800777c:	1afb      	subs	r3, r7, r3
 800777e:	0c09      	lsrs	r1, r1, #16
 8007780:	0c2d      	lsrs	r5, r5, #16
 8007782:	1a6d      	subs	r5, r5, r1
 8007784:	1419      	asrs	r1, r3, #16
 8007786:	186d      	adds	r5, r5, r1
 8007788:	4661      	mov	r1, ip
 800778a:	142f      	asrs	r7, r5, #16
 800778c:	b29b      	uxth	r3, r3
 800778e:	042d      	lsls	r5, r5, #16
 8007790:	432b      	orrs	r3, r5
 8007792:	c108      	stmia	r1!, {r3}
 8007794:	9b03      	ldr	r3, [sp, #12]
 8007796:	468c      	mov	ip, r1
 8007798:	42a3      	cmp	r3, r4
 800779a:	d8e8      	bhi.n	800776e <__mdiff+0x8a>
 800779c:	0031      	movs	r1, r6
 800779e:	9c03      	ldr	r4, [sp, #12]
 80077a0:	3115      	adds	r1, #21
 80077a2:	2304      	movs	r3, #4
 80077a4:	428c      	cmp	r4, r1
 80077a6:	d304      	bcc.n	80077b2 <__mdiff+0xce>
 80077a8:	1ba3      	subs	r3, r4, r6
 80077aa:	3b15      	subs	r3, #21
 80077ac:	089b      	lsrs	r3, r3, #2
 80077ae:	3301      	adds	r3, #1
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	9901      	ldr	r1, [sp, #4]
 80077b4:	18cc      	adds	r4, r1, r3
 80077b6:	9905      	ldr	r1, [sp, #20]
 80077b8:	0026      	movs	r6, r4
 80077ba:	18cb      	adds	r3, r1, r3
 80077bc:	469c      	mov	ip, r3
 80077be:	9902      	ldr	r1, [sp, #8]
 80077c0:	428e      	cmp	r6, r1
 80077c2:	d310      	bcc.n	80077e6 <__mdiff+0x102>
 80077c4:	9e02      	ldr	r6, [sp, #8]
 80077c6:	1ee1      	subs	r1, r4, #3
 80077c8:	2500      	movs	r5, #0
 80077ca:	428e      	cmp	r6, r1
 80077cc:	d304      	bcc.n	80077d8 <__mdiff+0xf4>
 80077ce:	0031      	movs	r1, r6
 80077d0:	3103      	adds	r1, #3
 80077d2:	1b0c      	subs	r4, r1, r4
 80077d4:	08a4      	lsrs	r4, r4, #2
 80077d6:	00a5      	lsls	r5, r4, #2
 80077d8:	195b      	adds	r3, r3, r5
 80077da:	3b04      	subs	r3, #4
 80077dc:	6819      	ldr	r1, [r3, #0]
 80077de:	2900      	cmp	r1, #0
 80077e0:	d00f      	beq.n	8007802 <__mdiff+0x11e>
 80077e2:	6110      	str	r0, [r2, #16]
 80077e4:	e797      	b.n	8007716 <__mdiff+0x32>
 80077e6:	ce02      	ldmia	r6!, {r1}
 80077e8:	b28d      	uxth	r5, r1
 80077ea:	19ed      	adds	r5, r5, r7
 80077ec:	0c0f      	lsrs	r7, r1, #16
 80077ee:	1429      	asrs	r1, r5, #16
 80077f0:	1879      	adds	r1, r7, r1
 80077f2:	140f      	asrs	r7, r1, #16
 80077f4:	b2ad      	uxth	r5, r5
 80077f6:	0409      	lsls	r1, r1, #16
 80077f8:	430d      	orrs	r5, r1
 80077fa:	4661      	mov	r1, ip
 80077fc:	c120      	stmia	r1!, {r5}
 80077fe:	468c      	mov	ip, r1
 8007800:	e7dd      	b.n	80077be <__mdiff+0xda>
 8007802:	3801      	subs	r0, #1
 8007804:	e7e9      	b.n	80077da <__mdiff+0xf6>
 8007806:	46c0      	nop			; (mov r8, r8)
 8007808:	08008867 	.word	0x08008867
 800780c:	00000232 	.word	0x00000232
 8007810:	08008878 	.word	0x08008878

08007814 <__d2b>:
 8007814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007816:	2101      	movs	r1, #1
 8007818:	0014      	movs	r4, r2
 800781a:	001e      	movs	r6, r3
 800781c:	9f08      	ldr	r7, [sp, #32]
 800781e:	f7ff fcc1 	bl	80071a4 <_Balloc>
 8007822:	1e05      	subs	r5, r0, #0
 8007824:	d105      	bne.n	8007832 <__d2b+0x1e>
 8007826:	0002      	movs	r2, r0
 8007828:	4b26      	ldr	r3, [pc, #152]	; (80078c4 <__d2b+0xb0>)
 800782a:	4927      	ldr	r1, [pc, #156]	; (80078c8 <__d2b+0xb4>)
 800782c:	4827      	ldr	r0, [pc, #156]	; (80078cc <__d2b+0xb8>)
 800782e:	f000 f975 	bl	8007b1c <__assert_func>
 8007832:	0333      	lsls	r3, r6, #12
 8007834:	0076      	lsls	r6, r6, #1
 8007836:	0b1b      	lsrs	r3, r3, #12
 8007838:	0d76      	lsrs	r6, r6, #21
 800783a:	d124      	bne.n	8007886 <__d2b+0x72>
 800783c:	9301      	str	r3, [sp, #4]
 800783e:	2c00      	cmp	r4, #0
 8007840:	d027      	beq.n	8007892 <__d2b+0x7e>
 8007842:	4668      	mov	r0, sp
 8007844:	9400      	str	r4, [sp, #0]
 8007846:	f7ff fd73 	bl	8007330 <__lo0bits>
 800784a:	9c00      	ldr	r4, [sp, #0]
 800784c:	2800      	cmp	r0, #0
 800784e:	d01e      	beq.n	800788e <__d2b+0x7a>
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	2120      	movs	r1, #32
 8007854:	001a      	movs	r2, r3
 8007856:	1a09      	subs	r1, r1, r0
 8007858:	408a      	lsls	r2, r1
 800785a:	40c3      	lsrs	r3, r0
 800785c:	4322      	orrs	r2, r4
 800785e:	616a      	str	r2, [r5, #20]
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	9c01      	ldr	r4, [sp, #4]
 8007864:	61ac      	str	r4, [r5, #24]
 8007866:	1e63      	subs	r3, r4, #1
 8007868:	419c      	sbcs	r4, r3
 800786a:	3401      	adds	r4, #1
 800786c:	612c      	str	r4, [r5, #16]
 800786e:	2e00      	cmp	r6, #0
 8007870:	d018      	beq.n	80078a4 <__d2b+0x90>
 8007872:	4b17      	ldr	r3, [pc, #92]	; (80078d0 <__d2b+0xbc>)
 8007874:	18f6      	adds	r6, r6, r3
 8007876:	2335      	movs	r3, #53	; 0x35
 8007878:	1836      	adds	r6, r6, r0
 800787a:	1a18      	subs	r0, r3, r0
 800787c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800787e:	603e      	str	r6, [r7, #0]
 8007880:	6018      	str	r0, [r3, #0]
 8007882:	0028      	movs	r0, r5
 8007884:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007886:	2280      	movs	r2, #128	; 0x80
 8007888:	0352      	lsls	r2, r2, #13
 800788a:	4313      	orrs	r3, r2
 800788c:	e7d6      	b.n	800783c <__d2b+0x28>
 800788e:	616c      	str	r4, [r5, #20]
 8007890:	e7e7      	b.n	8007862 <__d2b+0x4e>
 8007892:	a801      	add	r0, sp, #4
 8007894:	f7ff fd4c 	bl	8007330 <__lo0bits>
 8007898:	2401      	movs	r4, #1
 800789a:	9b01      	ldr	r3, [sp, #4]
 800789c:	612c      	str	r4, [r5, #16]
 800789e:	616b      	str	r3, [r5, #20]
 80078a0:	3020      	adds	r0, #32
 80078a2:	e7e4      	b.n	800786e <__d2b+0x5a>
 80078a4:	4b0b      	ldr	r3, [pc, #44]	; (80078d4 <__d2b+0xc0>)
 80078a6:	18c0      	adds	r0, r0, r3
 80078a8:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <__d2b+0xc4>)
 80078aa:	6038      	str	r0, [r7, #0]
 80078ac:	18e3      	adds	r3, r4, r3
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	18eb      	adds	r3, r5, r3
 80078b2:	6958      	ldr	r0, [r3, #20]
 80078b4:	f7ff fd22 	bl	80072fc <__hi0bits>
 80078b8:	0164      	lsls	r4, r4, #5
 80078ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078bc:	1a24      	subs	r4, r4, r0
 80078be:	601c      	str	r4, [r3, #0]
 80078c0:	e7df      	b.n	8007882 <__d2b+0x6e>
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	08008867 	.word	0x08008867
 80078c8:	0000030a 	.word	0x0000030a
 80078cc:	08008878 	.word	0x08008878
 80078d0:	fffffbcd 	.word	0xfffffbcd
 80078d4:	fffffbce 	.word	0xfffffbce
 80078d8:	3fffffff 	.word	0x3fffffff

080078dc <_calloc_r>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	0c13      	lsrs	r3, r2, #16
 80078e0:	0c0d      	lsrs	r5, r1, #16
 80078e2:	d11e      	bne.n	8007922 <_calloc_r+0x46>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10c      	bne.n	8007902 <_calloc_r+0x26>
 80078e8:	b289      	uxth	r1, r1
 80078ea:	b294      	uxth	r4, r2
 80078ec:	434c      	muls	r4, r1
 80078ee:	0021      	movs	r1, r4
 80078f0:	f000 f88c 	bl	8007a0c <_malloc_r>
 80078f4:	1e05      	subs	r5, r0, #0
 80078f6:	d01b      	beq.n	8007930 <_calloc_r+0x54>
 80078f8:	0022      	movs	r2, r4
 80078fa:	2100      	movs	r1, #0
 80078fc:	f7fe f914 	bl	8005b28 <memset>
 8007900:	e016      	b.n	8007930 <_calloc_r+0x54>
 8007902:	1c1d      	adds	r5, r3, #0
 8007904:	1c0b      	adds	r3, r1, #0
 8007906:	b292      	uxth	r2, r2
 8007908:	b289      	uxth	r1, r1
 800790a:	b29c      	uxth	r4, r3
 800790c:	4351      	muls	r1, r2
 800790e:	b2ab      	uxth	r3, r5
 8007910:	4363      	muls	r3, r4
 8007912:	0c0c      	lsrs	r4, r1, #16
 8007914:	191c      	adds	r4, r3, r4
 8007916:	0c22      	lsrs	r2, r4, #16
 8007918:	d107      	bne.n	800792a <_calloc_r+0x4e>
 800791a:	0424      	lsls	r4, r4, #16
 800791c:	b289      	uxth	r1, r1
 800791e:	430c      	orrs	r4, r1
 8007920:	e7e5      	b.n	80078ee <_calloc_r+0x12>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <_calloc_r+0x4e>
 8007926:	1c13      	adds	r3, r2, #0
 8007928:	e7ed      	b.n	8007906 <_calloc_r+0x2a>
 800792a:	230c      	movs	r3, #12
 800792c:	2500      	movs	r5, #0
 800792e:	6003      	str	r3, [r0, #0]
 8007930:	0028      	movs	r0, r5
 8007932:	bd70      	pop	{r4, r5, r6, pc}

08007934 <_free_r>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	0005      	movs	r5, r0
 8007938:	2900      	cmp	r1, #0
 800793a:	d010      	beq.n	800795e <_free_r+0x2a>
 800793c:	1f0c      	subs	r4, r1, #4
 800793e:	6823      	ldr	r3, [r4, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	da00      	bge.n	8007946 <_free_r+0x12>
 8007944:	18e4      	adds	r4, r4, r3
 8007946:	0028      	movs	r0, r5
 8007948:	f000 f928 	bl	8007b9c <__malloc_lock>
 800794c:	4a1d      	ldr	r2, [pc, #116]	; (80079c4 <_free_r+0x90>)
 800794e:	6813      	ldr	r3, [r2, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <_free_r+0x2c>
 8007954:	6063      	str	r3, [r4, #4]
 8007956:	6014      	str	r4, [r2, #0]
 8007958:	0028      	movs	r0, r5
 800795a:	f000 f927 	bl	8007bac <__malloc_unlock>
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	42a3      	cmp	r3, r4
 8007962:	d908      	bls.n	8007976 <_free_r+0x42>
 8007964:	6821      	ldr	r1, [r4, #0]
 8007966:	1860      	adds	r0, r4, r1
 8007968:	4283      	cmp	r3, r0
 800796a:	d1f3      	bne.n	8007954 <_free_r+0x20>
 800796c:	6818      	ldr	r0, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	1841      	adds	r1, r0, r1
 8007972:	6021      	str	r1, [r4, #0]
 8007974:	e7ee      	b.n	8007954 <_free_r+0x20>
 8007976:	001a      	movs	r2, r3
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <_free_r+0x4e>
 800797e:	42a3      	cmp	r3, r4
 8007980:	d9f9      	bls.n	8007976 <_free_r+0x42>
 8007982:	6811      	ldr	r1, [r2, #0]
 8007984:	1850      	adds	r0, r2, r1
 8007986:	42a0      	cmp	r0, r4
 8007988:	d10b      	bne.n	80079a2 <_free_r+0x6e>
 800798a:	6820      	ldr	r0, [r4, #0]
 800798c:	1809      	adds	r1, r1, r0
 800798e:	1850      	adds	r0, r2, r1
 8007990:	6011      	str	r1, [r2, #0]
 8007992:	4283      	cmp	r3, r0
 8007994:	d1e0      	bne.n	8007958 <_free_r+0x24>
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	1841      	adds	r1, r0, r1
 800799c:	6011      	str	r1, [r2, #0]
 800799e:	6053      	str	r3, [r2, #4]
 80079a0:	e7da      	b.n	8007958 <_free_r+0x24>
 80079a2:	42a0      	cmp	r0, r4
 80079a4:	d902      	bls.n	80079ac <_free_r+0x78>
 80079a6:	230c      	movs	r3, #12
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	e7d5      	b.n	8007958 <_free_r+0x24>
 80079ac:	6821      	ldr	r1, [r4, #0]
 80079ae:	1860      	adds	r0, r4, r1
 80079b0:	4283      	cmp	r3, r0
 80079b2:	d103      	bne.n	80079bc <_free_r+0x88>
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	1841      	adds	r1, r0, r1
 80079ba:	6021      	str	r1, [r4, #0]
 80079bc:	6063      	str	r3, [r4, #4]
 80079be:	6054      	str	r4, [r2, #4]
 80079c0:	e7ca      	b.n	8007958 <_free_r+0x24>
 80079c2:	46c0      	nop			; (mov r8, r8)
 80079c4:	200002dc 	.word	0x200002dc

080079c8 <sbrk_aligned>:
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	4e0f      	ldr	r6, [pc, #60]	; (8007a08 <sbrk_aligned+0x40>)
 80079cc:	000d      	movs	r5, r1
 80079ce:	6831      	ldr	r1, [r6, #0]
 80079d0:	0004      	movs	r4, r0
 80079d2:	2900      	cmp	r1, #0
 80079d4:	d102      	bne.n	80079dc <sbrk_aligned+0x14>
 80079d6:	f000 f88f 	bl	8007af8 <_sbrk_r>
 80079da:	6030      	str	r0, [r6, #0]
 80079dc:	0029      	movs	r1, r5
 80079de:	0020      	movs	r0, r4
 80079e0:	f000 f88a 	bl	8007af8 <_sbrk_r>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d00a      	beq.n	80079fe <sbrk_aligned+0x36>
 80079e8:	2303      	movs	r3, #3
 80079ea:	1cc5      	adds	r5, r0, #3
 80079ec:	439d      	bics	r5, r3
 80079ee:	42a8      	cmp	r0, r5
 80079f0:	d007      	beq.n	8007a02 <sbrk_aligned+0x3a>
 80079f2:	1a29      	subs	r1, r5, r0
 80079f4:	0020      	movs	r0, r4
 80079f6:	f000 f87f 	bl	8007af8 <_sbrk_r>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d101      	bne.n	8007a02 <sbrk_aligned+0x3a>
 80079fe:	2501      	movs	r5, #1
 8007a00:	426d      	negs	r5, r5
 8007a02:	0028      	movs	r0, r5
 8007a04:	bd70      	pop	{r4, r5, r6, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	200002e0 	.word	0x200002e0

08007a0c <_malloc_r>:
 8007a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a0e:	2203      	movs	r2, #3
 8007a10:	1ccb      	adds	r3, r1, #3
 8007a12:	4393      	bics	r3, r2
 8007a14:	3308      	adds	r3, #8
 8007a16:	0006      	movs	r6, r0
 8007a18:	001f      	movs	r7, r3
 8007a1a:	2b0c      	cmp	r3, #12
 8007a1c:	d232      	bcs.n	8007a84 <_malloc_r+0x78>
 8007a1e:	270c      	movs	r7, #12
 8007a20:	42b9      	cmp	r1, r7
 8007a22:	d831      	bhi.n	8007a88 <_malloc_r+0x7c>
 8007a24:	0030      	movs	r0, r6
 8007a26:	f000 f8b9 	bl	8007b9c <__malloc_lock>
 8007a2a:	4d32      	ldr	r5, [pc, #200]	; (8007af4 <_malloc_r+0xe8>)
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	001c      	movs	r4, r3
 8007a30:	2c00      	cmp	r4, #0
 8007a32:	d12e      	bne.n	8007a92 <_malloc_r+0x86>
 8007a34:	0039      	movs	r1, r7
 8007a36:	0030      	movs	r0, r6
 8007a38:	f7ff ffc6 	bl	80079c8 <sbrk_aligned>
 8007a3c:	0004      	movs	r4, r0
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	d11e      	bne.n	8007a80 <_malloc_r+0x74>
 8007a42:	682c      	ldr	r4, [r5, #0]
 8007a44:	0025      	movs	r5, r4
 8007a46:	2d00      	cmp	r5, #0
 8007a48:	d14a      	bne.n	8007ae0 <_malloc_r+0xd4>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	0029      	movs	r1, r5
 8007a4e:	18e3      	adds	r3, r4, r3
 8007a50:	0030      	movs	r0, r6
 8007a52:	9301      	str	r3, [sp, #4]
 8007a54:	f000 f850 	bl	8007af8 <_sbrk_r>
 8007a58:	9b01      	ldr	r3, [sp, #4]
 8007a5a:	4283      	cmp	r3, r0
 8007a5c:	d143      	bne.n	8007ae6 <_malloc_r+0xda>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	3703      	adds	r7, #3
 8007a62:	1aff      	subs	r7, r7, r3
 8007a64:	2303      	movs	r3, #3
 8007a66:	439f      	bics	r7, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	2f0c      	cmp	r7, #12
 8007a6c:	d200      	bcs.n	8007a70 <_malloc_r+0x64>
 8007a6e:	270c      	movs	r7, #12
 8007a70:	0039      	movs	r1, r7
 8007a72:	0030      	movs	r0, r6
 8007a74:	f7ff ffa8 	bl	80079c8 <sbrk_aligned>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d034      	beq.n	8007ae6 <_malloc_r+0xda>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	19df      	adds	r7, r3, r7
 8007a80:	6027      	str	r7, [r4, #0]
 8007a82:	e013      	b.n	8007aac <_malloc_r+0xa0>
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	dacb      	bge.n	8007a20 <_malloc_r+0x14>
 8007a88:	230c      	movs	r3, #12
 8007a8a:	2500      	movs	r5, #0
 8007a8c:	6033      	str	r3, [r6, #0]
 8007a8e:	0028      	movs	r0, r5
 8007a90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a92:	6822      	ldr	r2, [r4, #0]
 8007a94:	1bd1      	subs	r1, r2, r7
 8007a96:	d420      	bmi.n	8007ada <_malloc_r+0xce>
 8007a98:	290b      	cmp	r1, #11
 8007a9a:	d917      	bls.n	8007acc <_malloc_r+0xc0>
 8007a9c:	19e2      	adds	r2, r4, r7
 8007a9e:	6027      	str	r7, [r4, #0]
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d111      	bne.n	8007ac8 <_malloc_r+0xbc>
 8007aa4:	602a      	str	r2, [r5, #0]
 8007aa6:	6863      	ldr	r3, [r4, #4]
 8007aa8:	6011      	str	r1, [r2, #0]
 8007aaa:	6053      	str	r3, [r2, #4]
 8007aac:	0030      	movs	r0, r6
 8007aae:	0025      	movs	r5, r4
 8007ab0:	f000 f87c 	bl	8007bac <__malloc_unlock>
 8007ab4:	2207      	movs	r2, #7
 8007ab6:	350b      	adds	r5, #11
 8007ab8:	1d23      	adds	r3, r4, #4
 8007aba:	4395      	bics	r5, r2
 8007abc:	1aea      	subs	r2, r5, r3
 8007abe:	429d      	cmp	r5, r3
 8007ac0:	d0e5      	beq.n	8007a8e <_malloc_r+0x82>
 8007ac2:	1b5b      	subs	r3, r3, r5
 8007ac4:	50a3      	str	r3, [r4, r2]
 8007ac6:	e7e2      	b.n	8007a8e <_malloc_r+0x82>
 8007ac8:	605a      	str	r2, [r3, #4]
 8007aca:	e7ec      	b.n	8007aa6 <_malloc_r+0x9a>
 8007acc:	6862      	ldr	r2, [r4, #4]
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	d101      	bne.n	8007ad6 <_malloc_r+0xca>
 8007ad2:	602a      	str	r2, [r5, #0]
 8007ad4:	e7ea      	b.n	8007aac <_malloc_r+0xa0>
 8007ad6:	605a      	str	r2, [r3, #4]
 8007ad8:	e7e8      	b.n	8007aac <_malloc_r+0xa0>
 8007ada:	0023      	movs	r3, r4
 8007adc:	6864      	ldr	r4, [r4, #4]
 8007ade:	e7a7      	b.n	8007a30 <_malloc_r+0x24>
 8007ae0:	002c      	movs	r4, r5
 8007ae2:	686d      	ldr	r5, [r5, #4]
 8007ae4:	e7af      	b.n	8007a46 <_malloc_r+0x3a>
 8007ae6:	230c      	movs	r3, #12
 8007ae8:	0030      	movs	r0, r6
 8007aea:	6033      	str	r3, [r6, #0]
 8007aec:	f000 f85e 	bl	8007bac <__malloc_unlock>
 8007af0:	e7cd      	b.n	8007a8e <_malloc_r+0x82>
 8007af2:	46c0      	nop			; (mov r8, r8)
 8007af4:	200002dc 	.word	0x200002dc

08007af8 <_sbrk_r>:
 8007af8:	2300      	movs	r3, #0
 8007afa:	b570      	push	{r4, r5, r6, lr}
 8007afc:	4d06      	ldr	r5, [pc, #24]	; (8007b18 <_sbrk_r+0x20>)
 8007afe:	0004      	movs	r4, r0
 8007b00:	0008      	movs	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7fa fe74 	bl	80027f0 <_sbrk>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d103      	bne.n	8007b14 <_sbrk_r+0x1c>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d000      	beq.n	8007b14 <_sbrk_r+0x1c>
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	200002e4 	.word	0x200002e4

08007b1c <__assert_func>:
 8007b1c:	b530      	push	{r4, r5, lr}
 8007b1e:	0014      	movs	r4, r2
 8007b20:	001a      	movs	r2, r3
 8007b22:	4b09      	ldr	r3, [pc, #36]	; (8007b48 <__assert_func+0x2c>)
 8007b24:	0005      	movs	r5, r0
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	b085      	sub	sp, #20
 8007b2a:	68d8      	ldr	r0, [r3, #12]
 8007b2c:	4b07      	ldr	r3, [pc, #28]	; (8007b4c <__assert_func+0x30>)
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	d101      	bne.n	8007b36 <__assert_func+0x1a>
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <__assert_func+0x34>)
 8007b34:	001c      	movs	r4, r3
 8007b36:	9301      	str	r3, [sp, #4]
 8007b38:	9100      	str	r1, [sp, #0]
 8007b3a:	002b      	movs	r3, r5
 8007b3c:	4905      	ldr	r1, [pc, #20]	; (8007b54 <__assert_func+0x38>)
 8007b3e:	9402      	str	r4, [sp, #8]
 8007b40:	f000 f80a 	bl	8007b58 <fiprintf>
 8007b44:	f000 fa78 	bl	8008038 <abort>
 8007b48:	20000020 	.word	0x20000020
 8007b4c:	080089d4 	.word	0x080089d4
 8007b50:	08008a0f 	.word	0x08008a0f
 8007b54:	080089e1 	.word	0x080089e1

08007b58 <fiprintf>:
 8007b58:	b40e      	push	{r1, r2, r3}
 8007b5a:	b503      	push	{r0, r1, lr}
 8007b5c:	0001      	movs	r1, r0
 8007b5e:	ab03      	add	r3, sp, #12
 8007b60:	4804      	ldr	r0, [pc, #16]	; (8007b74 <fiprintf+0x1c>)
 8007b62:	cb04      	ldmia	r3!, {r2}
 8007b64:	6800      	ldr	r0, [r0, #0]
 8007b66:	9301      	str	r3, [sp, #4]
 8007b68:	f000 f850 	bl	8007c0c <_vfiprintf_r>
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bc08      	pop	{r3}
 8007b70:	b003      	add	sp, #12
 8007b72:	4718      	bx	r3
 8007b74:	20000020 	.word	0x20000020

08007b78 <__ascii_mbtowc>:
 8007b78:	b082      	sub	sp, #8
 8007b7a:	2900      	cmp	r1, #0
 8007b7c:	d100      	bne.n	8007b80 <__ascii_mbtowc+0x8>
 8007b7e:	a901      	add	r1, sp, #4
 8007b80:	1e10      	subs	r0, r2, #0
 8007b82:	d006      	beq.n	8007b92 <__ascii_mbtowc+0x1a>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d006      	beq.n	8007b96 <__ascii_mbtowc+0x1e>
 8007b88:	7813      	ldrb	r3, [r2, #0]
 8007b8a:	600b      	str	r3, [r1, #0]
 8007b8c:	7810      	ldrb	r0, [r2, #0]
 8007b8e:	1e43      	subs	r3, r0, #1
 8007b90:	4198      	sbcs	r0, r3
 8007b92:	b002      	add	sp, #8
 8007b94:	4770      	bx	lr
 8007b96:	2002      	movs	r0, #2
 8007b98:	4240      	negs	r0, r0
 8007b9a:	e7fa      	b.n	8007b92 <__ascii_mbtowc+0x1a>

08007b9c <__malloc_lock>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	4802      	ldr	r0, [pc, #8]	; (8007ba8 <__malloc_lock+0xc>)
 8007ba0:	f000 fc21 	bl	80083e6 <__retarget_lock_acquire_recursive>
 8007ba4:	bd10      	pop	{r4, pc}
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	200002e8 	.word	0x200002e8

08007bac <__malloc_unlock>:
 8007bac:	b510      	push	{r4, lr}
 8007bae:	4802      	ldr	r0, [pc, #8]	; (8007bb8 <__malloc_unlock+0xc>)
 8007bb0:	f000 fc1a 	bl	80083e8 <__retarget_lock_release_recursive>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	200002e8 	.word	0x200002e8

08007bbc <__sfputc_r>:
 8007bbc:	6893      	ldr	r3, [r2, #8]
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	6093      	str	r3, [r2, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da04      	bge.n	8007bd2 <__sfputc_r+0x16>
 8007bc8:	6994      	ldr	r4, [r2, #24]
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	db07      	blt.n	8007bde <__sfputc_r+0x22>
 8007bce:	290a      	cmp	r1, #10
 8007bd0:	d005      	beq.n	8007bde <__sfputc_r+0x22>
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	1c58      	adds	r0, r3, #1
 8007bd6:	6010      	str	r0, [r2, #0]
 8007bd8:	7019      	strb	r1, [r3, #0]
 8007bda:	0008      	movs	r0, r1
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	f000 f94f 	bl	8007e80 <__swbuf_r>
 8007be2:	0001      	movs	r1, r0
 8007be4:	e7f9      	b.n	8007bda <__sfputc_r+0x1e>

08007be6 <__sfputs_r>:
 8007be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be8:	0006      	movs	r6, r0
 8007bea:	000f      	movs	r7, r1
 8007bec:	0014      	movs	r4, r2
 8007bee:	18d5      	adds	r5, r2, r3
 8007bf0:	42ac      	cmp	r4, r5
 8007bf2:	d101      	bne.n	8007bf8 <__sfputs_r+0x12>
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	e007      	b.n	8007c08 <__sfputs_r+0x22>
 8007bf8:	7821      	ldrb	r1, [r4, #0]
 8007bfa:	003a      	movs	r2, r7
 8007bfc:	0030      	movs	r0, r6
 8007bfe:	f7ff ffdd 	bl	8007bbc <__sfputc_r>
 8007c02:	3401      	adds	r4, #1
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d1f3      	bne.n	8007bf0 <__sfputs_r+0xa>
 8007c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c0c <_vfiprintf_r>:
 8007c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c0e:	b0a1      	sub	sp, #132	; 0x84
 8007c10:	0006      	movs	r6, r0
 8007c12:	000c      	movs	r4, r1
 8007c14:	001f      	movs	r7, r3
 8007c16:	9203      	str	r2, [sp, #12]
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d004      	beq.n	8007c26 <_vfiprintf_r+0x1a>
 8007c1c:	6983      	ldr	r3, [r0, #24]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <_vfiprintf_r+0x1a>
 8007c22:	f000 fb3f 	bl	80082a4 <__sinit>
 8007c26:	4b8e      	ldr	r3, [pc, #568]	; (8007e60 <_vfiprintf_r+0x254>)
 8007c28:	429c      	cmp	r4, r3
 8007c2a:	d11c      	bne.n	8007c66 <_vfiprintf_r+0x5a>
 8007c2c:	6874      	ldr	r4, [r6, #4]
 8007c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c30:	07db      	lsls	r3, r3, #31
 8007c32:	d405      	bmi.n	8007c40 <_vfiprintf_r+0x34>
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	059b      	lsls	r3, r3, #22
 8007c38:	d402      	bmi.n	8007c40 <_vfiprintf_r+0x34>
 8007c3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c3c:	f000 fbd3 	bl	80083e6 <__retarget_lock_acquire_recursive>
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	071b      	lsls	r3, r3, #28
 8007c44:	d502      	bpl.n	8007c4c <_vfiprintf_r+0x40>
 8007c46:	6923      	ldr	r3, [r4, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11d      	bne.n	8007c88 <_vfiprintf_r+0x7c>
 8007c4c:	0021      	movs	r1, r4
 8007c4e:	0030      	movs	r0, r6
 8007c50:	f000 f97a 	bl	8007f48 <__swsetup_r>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d017      	beq.n	8007c88 <_vfiprintf_r+0x7c>
 8007c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c5a:	07db      	lsls	r3, r3, #31
 8007c5c:	d50d      	bpl.n	8007c7a <_vfiprintf_r+0x6e>
 8007c5e:	2001      	movs	r0, #1
 8007c60:	4240      	negs	r0, r0
 8007c62:	b021      	add	sp, #132	; 0x84
 8007c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c66:	4b7f      	ldr	r3, [pc, #508]	; (8007e64 <_vfiprintf_r+0x258>)
 8007c68:	429c      	cmp	r4, r3
 8007c6a:	d101      	bne.n	8007c70 <_vfiprintf_r+0x64>
 8007c6c:	68b4      	ldr	r4, [r6, #8]
 8007c6e:	e7de      	b.n	8007c2e <_vfiprintf_r+0x22>
 8007c70:	4b7d      	ldr	r3, [pc, #500]	; (8007e68 <_vfiprintf_r+0x25c>)
 8007c72:	429c      	cmp	r4, r3
 8007c74:	d1db      	bne.n	8007c2e <_vfiprintf_r+0x22>
 8007c76:	68f4      	ldr	r4, [r6, #12]
 8007c78:	e7d9      	b.n	8007c2e <_vfiprintf_r+0x22>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	059b      	lsls	r3, r3, #22
 8007c7e:	d4ee      	bmi.n	8007c5e <_vfiprintf_r+0x52>
 8007c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c82:	f000 fbb1 	bl	80083e8 <__retarget_lock_release_recursive>
 8007c86:	e7ea      	b.n	8007c5e <_vfiprintf_r+0x52>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	ad08      	add	r5, sp, #32
 8007c8c:	616b      	str	r3, [r5, #20]
 8007c8e:	3320      	adds	r3, #32
 8007c90:	766b      	strb	r3, [r5, #25]
 8007c92:	3310      	adds	r3, #16
 8007c94:	76ab      	strb	r3, [r5, #26]
 8007c96:	9707      	str	r7, [sp, #28]
 8007c98:	9f03      	ldr	r7, [sp, #12]
 8007c9a:	783b      	ldrb	r3, [r7, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <_vfiprintf_r+0x98>
 8007ca0:	2b25      	cmp	r3, #37	; 0x25
 8007ca2:	d14e      	bne.n	8007d42 <_vfiprintf_r+0x136>
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	1afb      	subs	r3, r7, r3
 8007ca8:	9305      	str	r3, [sp, #20]
 8007caa:	9b03      	ldr	r3, [sp, #12]
 8007cac:	429f      	cmp	r7, r3
 8007cae:	d00d      	beq.n	8007ccc <_vfiprintf_r+0xc0>
 8007cb0:	9b05      	ldr	r3, [sp, #20]
 8007cb2:	0021      	movs	r1, r4
 8007cb4:	0030      	movs	r0, r6
 8007cb6:	9a03      	ldr	r2, [sp, #12]
 8007cb8:	f7ff ff95 	bl	8007be6 <__sfputs_r>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d100      	bne.n	8007cc2 <_vfiprintf_r+0xb6>
 8007cc0:	e0b5      	b.n	8007e2e <_vfiprintf_r+0x222>
 8007cc2:	696a      	ldr	r2, [r5, #20]
 8007cc4:	9b05      	ldr	r3, [sp, #20]
 8007cc6:	4694      	mov	ip, r2
 8007cc8:	4463      	add	r3, ip
 8007cca:	616b      	str	r3, [r5, #20]
 8007ccc:	783b      	ldrb	r3, [r7, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d100      	bne.n	8007cd4 <_vfiprintf_r+0xc8>
 8007cd2:	e0ac      	b.n	8007e2e <_vfiprintf_r+0x222>
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	1c7b      	adds	r3, r7, #1
 8007cd8:	9303      	str	r3, [sp, #12]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4252      	negs	r2, r2
 8007cde:	606a      	str	r2, [r5, #4]
 8007ce0:	a904      	add	r1, sp, #16
 8007ce2:	3254      	adds	r2, #84	; 0x54
 8007ce4:	1852      	adds	r2, r2, r1
 8007ce6:	602b      	str	r3, [r5, #0]
 8007ce8:	60eb      	str	r3, [r5, #12]
 8007cea:	60ab      	str	r3, [r5, #8]
 8007cec:	7013      	strb	r3, [r2, #0]
 8007cee:	65ab      	str	r3, [r5, #88]	; 0x58
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	2205      	movs	r2, #5
 8007cf4:	7819      	ldrb	r1, [r3, #0]
 8007cf6:	485d      	ldr	r0, [pc, #372]	; (8007e6c <_vfiprintf_r+0x260>)
 8007cf8:	f7ff fa40 	bl	800717c <memchr>
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	1c5f      	adds	r7, r3, #1
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d120      	bne.n	8007d46 <_vfiprintf_r+0x13a>
 8007d04:	682a      	ldr	r2, [r5, #0]
 8007d06:	06d3      	lsls	r3, r2, #27
 8007d08:	d504      	bpl.n	8007d14 <_vfiprintf_r+0x108>
 8007d0a:	2353      	movs	r3, #83	; 0x53
 8007d0c:	a904      	add	r1, sp, #16
 8007d0e:	185b      	adds	r3, r3, r1
 8007d10:	2120      	movs	r1, #32
 8007d12:	7019      	strb	r1, [r3, #0]
 8007d14:	0713      	lsls	r3, r2, #28
 8007d16:	d504      	bpl.n	8007d22 <_vfiprintf_r+0x116>
 8007d18:	2353      	movs	r3, #83	; 0x53
 8007d1a:	a904      	add	r1, sp, #16
 8007d1c:	185b      	adds	r3, r3, r1
 8007d1e:	212b      	movs	r1, #43	; 0x2b
 8007d20:	7019      	strb	r1, [r3, #0]
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b2a      	cmp	r3, #42	; 0x2a
 8007d28:	d016      	beq.n	8007d58 <_vfiprintf_r+0x14c>
 8007d2a:	2100      	movs	r1, #0
 8007d2c:	68eb      	ldr	r3, [r5, #12]
 8007d2e:	9f03      	ldr	r7, [sp, #12]
 8007d30:	783a      	ldrb	r2, [r7, #0]
 8007d32:	1c78      	adds	r0, r7, #1
 8007d34:	3a30      	subs	r2, #48	; 0x30
 8007d36:	4684      	mov	ip, r0
 8007d38:	2a09      	cmp	r2, #9
 8007d3a:	d94f      	bls.n	8007ddc <_vfiprintf_r+0x1d0>
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d111      	bne.n	8007d64 <_vfiprintf_r+0x158>
 8007d40:	e017      	b.n	8007d72 <_vfiprintf_r+0x166>
 8007d42:	3701      	adds	r7, #1
 8007d44:	e7a9      	b.n	8007c9a <_vfiprintf_r+0x8e>
 8007d46:	4b49      	ldr	r3, [pc, #292]	; (8007e6c <_vfiprintf_r+0x260>)
 8007d48:	682a      	ldr	r2, [r5, #0]
 8007d4a:	1ac0      	subs	r0, r0, r3
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	4083      	lsls	r3, r0
 8007d50:	4313      	orrs	r3, r2
 8007d52:	602b      	str	r3, [r5, #0]
 8007d54:	9703      	str	r7, [sp, #12]
 8007d56:	e7cb      	b.n	8007cf0 <_vfiprintf_r+0xe4>
 8007d58:	9b07      	ldr	r3, [sp, #28]
 8007d5a:	1d19      	adds	r1, r3, #4
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	9107      	str	r1, [sp, #28]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	db01      	blt.n	8007d68 <_vfiprintf_r+0x15c>
 8007d64:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d66:	e004      	b.n	8007d72 <_vfiprintf_r+0x166>
 8007d68:	425b      	negs	r3, r3
 8007d6a:	60eb      	str	r3, [r5, #12]
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	602b      	str	r3, [r5, #0]
 8007d72:	783b      	ldrb	r3, [r7, #0]
 8007d74:	2b2e      	cmp	r3, #46	; 0x2e
 8007d76:	d10a      	bne.n	8007d8e <_vfiprintf_r+0x182>
 8007d78:	787b      	ldrb	r3, [r7, #1]
 8007d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d7c:	d137      	bne.n	8007dee <_vfiprintf_r+0x1e2>
 8007d7e:	9b07      	ldr	r3, [sp, #28]
 8007d80:	3702      	adds	r7, #2
 8007d82:	1d1a      	adds	r2, r3, #4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	9207      	str	r2, [sp, #28]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	db2d      	blt.n	8007de8 <_vfiprintf_r+0x1dc>
 8007d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8e:	2203      	movs	r2, #3
 8007d90:	7839      	ldrb	r1, [r7, #0]
 8007d92:	4837      	ldr	r0, [pc, #220]	; (8007e70 <_vfiprintf_r+0x264>)
 8007d94:	f7ff f9f2 	bl	800717c <memchr>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d007      	beq.n	8007dac <_vfiprintf_r+0x1a0>
 8007d9c:	4b34      	ldr	r3, [pc, #208]	; (8007e70 <_vfiprintf_r+0x264>)
 8007d9e:	682a      	ldr	r2, [r5, #0]
 8007da0:	1ac0      	subs	r0, r0, r3
 8007da2:	2340      	movs	r3, #64	; 0x40
 8007da4:	4083      	lsls	r3, r0
 8007da6:	4313      	orrs	r3, r2
 8007da8:	3701      	adds	r7, #1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	7839      	ldrb	r1, [r7, #0]
 8007dae:	1c7b      	adds	r3, r7, #1
 8007db0:	2206      	movs	r2, #6
 8007db2:	4830      	ldr	r0, [pc, #192]	; (8007e74 <_vfiprintf_r+0x268>)
 8007db4:	9303      	str	r3, [sp, #12]
 8007db6:	7629      	strb	r1, [r5, #24]
 8007db8:	f7ff f9e0 	bl	800717c <memchr>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d045      	beq.n	8007e4c <_vfiprintf_r+0x240>
 8007dc0:	4b2d      	ldr	r3, [pc, #180]	; (8007e78 <_vfiprintf_r+0x26c>)
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d127      	bne.n	8007e16 <_vfiprintf_r+0x20a>
 8007dc6:	2207      	movs	r2, #7
 8007dc8:	9b07      	ldr	r3, [sp, #28]
 8007dca:	3307      	adds	r3, #7
 8007dcc:	4393      	bics	r3, r2
 8007dce:	3308      	adds	r3, #8
 8007dd0:	9307      	str	r3, [sp, #28]
 8007dd2:	696b      	ldr	r3, [r5, #20]
 8007dd4:	9a04      	ldr	r2, [sp, #16]
 8007dd6:	189b      	adds	r3, r3, r2
 8007dd8:	616b      	str	r3, [r5, #20]
 8007dda:	e75d      	b.n	8007c98 <_vfiprintf_r+0x8c>
 8007ddc:	210a      	movs	r1, #10
 8007dde:	434b      	muls	r3, r1
 8007de0:	4667      	mov	r7, ip
 8007de2:	189b      	adds	r3, r3, r2
 8007de4:	3909      	subs	r1, #9
 8007de6:	e7a3      	b.n	8007d30 <_vfiprintf_r+0x124>
 8007de8:	2301      	movs	r3, #1
 8007dea:	425b      	negs	r3, r3
 8007dec:	e7ce      	b.n	8007d8c <_vfiprintf_r+0x180>
 8007dee:	2300      	movs	r3, #0
 8007df0:	001a      	movs	r2, r3
 8007df2:	3701      	adds	r7, #1
 8007df4:	606b      	str	r3, [r5, #4]
 8007df6:	7839      	ldrb	r1, [r7, #0]
 8007df8:	1c78      	adds	r0, r7, #1
 8007dfa:	3930      	subs	r1, #48	; 0x30
 8007dfc:	4684      	mov	ip, r0
 8007dfe:	2909      	cmp	r1, #9
 8007e00:	d903      	bls.n	8007e0a <_vfiprintf_r+0x1fe>
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0c3      	beq.n	8007d8e <_vfiprintf_r+0x182>
 8007e06:	9209      	str	r2, [sp, #36]	; 0x24
 8007e08:	e7c1      	b.n	8007d8e <_vfiprintf_r+0x182>
 8007e0a:	230a      	movs	r3, #10
 8007e0c:	435a      	muls	r2, r3
 8007e0e:	4667      	mov	r7, ip
 8007e10:	1852      	adds	r2, r2, r1
 8007e12:	3b09      	subs	r3, #9
 8007e14:	e7ef      	b.n	8007df6 <_vfiprintf_r+0x1ea>
 8007e16:	ab07      	add	r3, sp, #28
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	0022      	movs	r2, r4
 8007e1c:	0029      	movs	r1, r5
 8007e1e:	0030      	movs	r0, r6
 8007e20:	4b16      	ldr	r3, [pc, #88]	; (8007e7c <_vfiprintf_r+0x270>)
 8007e22:	f7fd ff33 	bl	8005c8c <_printf_float>
 8007e26:	9004      	str	r0, [sp, #16]
 8007e28:	9b04      	ldr	r3, [sp, #16]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	d1d1      	bne.n	8007dd2 <_vfiprintf_r+0x1c6>
 8007e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e30:	07db      	lsls	r3, r3, #31
 8007e32:	d405      	bmi.n	8007e40 <_vfiprintf_r+0x234>
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	059b      	lsls	r3, r3, #22
 8007e38:	d402      	bmi.n	8007e40 <_vfiprintf_r+0x234>
 8007e3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e3c:	f000 fad4 	bl	80083e8 <__retarget_lock_release_recursive>
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	065b      	lsls	r3, r3, #25
 8007e44:	d500      	bpl.n	8007e48 <_vfiprintf_r+0x23c>
 8007e46:	e70a      	b.n	8007c5e <_vfiprintf_r+0x52>
 8007e48:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007e4a:	e70a      	b.n	8007c62 <_vfiprintf_r+0x56>
 8007e4c:	ab07      	add	r3, sp, #28
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	0022      	movs	r2, r4
 8007e52:	0029      	movs	r1, r5
 8007e54:	0030      	movs	r0, r6
 8007e56:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <_vfiprintf_r+0x270>)
 8007e58:	f7fe f9ca 	bl	80061f0 <_printf_i>
 8007e5c:	e7e3      	b.n	8007e26 <_vfiprintf_r+0x21a>
 8007e5e:	46c0      	nop			; (mov r8, r8)
 8007e60:	08008b4c 	.word	0x08008b4c
 8007e64:	08008b6c 	.word	0x08008b6c
 8007e68:	08008b2c 	.word	0x08008b2c
 8007e6c:	08008a1a 	.word	0x08008a1a
 8007e70:	08008a20 	.word	0x08008a20
 8007e74:	08008a24 	.word	0x08008a24
 8007e78:	08005c8d 	.word	0x08005c8d
 8007e7c:	08007be7 	.word	0x08007be7

08007e80 <__swbuf_r>:
 8007e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e82:	0005      	movs	r5, r0
 8007e84:	000e      	movs	r6, r1
 8007e86:	0014      	movs	r4, r2
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d004      	beq.n	8007e96 <__swbuf_r+0x16>
 8007e8c:	6983      	ldr	r3, [r0, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <__swbuf_r+0x16>
 8007e92:	f000 fa07 	bl	80082a4 <__sinit>
 8007e96:	4b22      	ldr	r3, [pc, #136]	; (8007f20 <__swbuf_r+0xa0>)
 8007e98:	429c      	cmp	r4, r3
 8007e9a:	d12e      	bne.n	8007efa <__swbuf_r+0x7a>
 8007e9c:	686c      	ldr	r4, [r5, #4]
 8007e9e:	69a3      	ldr	r3, [r4, #24]
 8007ea0:	60a3      	str	r3, [r4, #8]
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	071b      	lsls	r3, r3, #28
 8007ea6:	d532      	bpl.n	8007f0e <__swbuf_r+0x8e>
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02f      	beq.n	8007f0e <__swbuf_r+0x8e>
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	6922      	ldr	r2, [r4, #16]
 8007eb2:	b2f7      	uxtb	r7, r6
 8007eb4:	1a98      	subs	r0, r3, r2
 8007eb6:	6963      	ldr	r3, [r4, #20]
 8007eb8:	b2f6      	uxtb	r6, r6
 8007eba:	4283      	cmp	r3, r0
 8007ebc:	dc05      	bgt.n	8007eca <__swbuf_r+0x4a>
 8007ebe:	0021      	movs	r1, r4
 8007ec0:	0028      	movs	r0, r5
 8007ec2:	f000 f94d 	bl	8008160 <_fflush_r>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d127      	bne.n	8007f1a <__swbuf_r+0x9a>
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	3001      	adds	r0, #1
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	60a3      	str	r3, [r4, #8]
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	1c5a      	adds	r2, r3, #1
 8007ed6:	6022      	str	r2, [r4, #0]
 8007ed8:	701f      	strb	r7, [r3, #0]
 8007eda:	6963      	ldr	r3, [r4, #20]
 8007edc:	4283      	cmp	r3, r0
 8007ede:	d004      	beq.n	8007eea <__swbuf_r+0x6a>
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	07db      	lsls	r3, r3, #31
 8007ee4:	d507      	bpl.n	8007ef6 <__swbuf_r+0x76>
 8007ee6:	2e0a      	cmp	r6, #10
 8007ee8:	d105      	bne.n	8007ef6 <__swbuf_r+0x76>
 8007eea:	0021      	movs	r1, r4
 8007eec:	0028      	movs	r0, r5
 8007eee:	f000 f937 	bl	8008160 <_fflush_r>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d111      	bne.n	8007f1a <__swbuf_r+0x9a>
 8007ef6:	0030      	movs	r0, r6
 8007ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007efa:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <__swbuf_r+0xa4>)
 8007efc:	429c      	cmp	r4, r3
 8007efe:	d101      	bne.n	8007f04 <__swbuf_r+0x84>
 8007f00:	68ac      	ldr	r4, [r5, #8]
 8007f02:	e7cc      	b.n	8007e9e <__swbuf_r+0x1e>
 8007f04:	4b08      	ldr	r3, [pc, #32]	; (8007f28 <__swbuf_r+0xa8>)
 8007f06:	429c      	cmp	r4, r3
 8007f08:	d1c9      	bne.n	8007e9e <__swbuf_r+0x1e>
 8007f0a:	68ec      	ldr	r4, [r5, #12]
 8007f0c:	e7c7      	b.n	8007e9e <__swbuf_r+0x1e>
 8007f0e:	0021      	movs	r1, r4
 8007f10:	0028      	movs	r0, r5
 8007f12:	f000 f819 	bl	8007f48 <__swsetup_r>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d0c9      	beq.n	8007eae <__swbuf_r+0x2e>
 8007f1a:	2601      	movs	r6, #1
 8007f1c:	4276      	negs	r6, r6
 8007f1e:	e7ea      	b.n	8007ef6 <__swbuf_r+0x76>
 8007f20:	08008b4c 	.word	0x08008b4c
 8007f24:	08008b6c 	.word	0x08008b6c
 8007f28:	08008b2c 	.word	0x08008b2c

08007f2c <__ascii_wctomb>:
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	1e08      	subs	r0, r1, #0
 8007f30:	d005      	beq.n	8007f3e <__ascii_wctomb+0x12>
 8007f32:	2aff      	cmp	r2, #255	; 0xff
 8007f34:	d904      	bls.n	8007f40 <__ascii_wctomb+0x14>
 8007f36:	228a      	movs	r2, #138	; 0x8a
 8007f38:	2001      	movs	r0, #1
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	4240      	negs	r0, r0
 8007f3e:	4770      	bx	lr
 8007f40:	2001      	movs	r0, #1
 8007f42:	700a      	strb	r2, [r1, #0]
 8007f44:	e7fb      	b.n	8007f3e <__ascii_wctomb+0x12>
	...

08007f48 <__swsetup_r>:
 8007f48:	4b37      	ldr	r3, [pc, #220]	; (8008028 <__swsetup_r+0xe0>)
 8007f4a:	b570      	push	{r4, r5, r6, lr}
 8007f4c:	681d      	ldr	r5, [r3, #0]
 8007f4e:	0006      	movs	r6, r0
 8007f50:	000c      	movs	r4, r1
 8007f52:	2d00      	cmp	r5, #0
 8007f54:	d005      	beq.n	8007f62 <__swsetup_r+0x1a>
 8007f56:	69ab      	ldr	r3, [r5, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d102      	bne.n	8007f62 <__swsetup_r+0x1a>
 8007f5c:	0028      	movs	r0, r5
 8007f5e:	f000 f9a1 	bl	80082a4 <__sinit>
 8007f62:	4b32      	ldr	r3, [pc, #200]	; (800802c <__swsetup_r+0xe4>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	d10f      	bne.n	8007f88 <__swsetup_r+0x40>
 8007f68:	686c      	ldr	r4, [r5, #4]
 8007f6a:	230c      	movs	r3, #12
 8007f6c:	5ee2      	ldrsh	r2, [r4, r3]
 8007f6e:	b293      	uxth	r3, r2
 8007f70:	0711      	lsls	r1, r2, #28
 8007f72:	d42d      	bmi.n	8007fd0 <__swsetup_r+0x88>
 8007f74:	06d9      	lsls	r1, r3, #27
 8007f76:	d411      	bmi.n	8007f9c <__swsetup_r+0x54>
 8007f78:	2309      	movs	r3, #9
 8007f7a:	2001      	movs	r0, #1
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	3337      	adds	r3, #55	; 0x37
 8007f80:	4313      	orrs	r3, r2
 8007f82:	81a3      	strh	r3, [r4, #12]
 8007f84:	4240      	negs	r0, r0
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	4b29      	ldr	r3, [pc, #164]	; (8008030 <__swsetup_r+0xe8>)
 8007f8a:	429c      	cmp	r4, r3
 8007f8c:	d101      	bne.n	8007f92 <__swsetup_r+0x4a>
 8007f8e:	68ac      	ldr	r4, [r5, #8]
 8007f90:	e7eb      	b.n	8007f6a <__swsetup_r+0x22>
 8007f92:	4b28      	ldr	r3, [pc, #160]	; (8008034 <__swsetup_r+0xec>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d1e8      	bne.n	8007f6a <__swsetup_r+0x22>
 8007f98:	68ec      	ldr	r4, [r5, #12]
 8007f9a:	e7e6      	b.n	8007f6a <__swsetup_r+0x22>
 8007f9c:	075b      	lsls	r3, r3, #29
 8007f9e:	d513      	bpl.n	8007fc8 <__swsetup_r+0x80>
 8007fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fa2:	2900      	cmp	r1, #0
 8007fa4:	d008      	beq.n	8007fb8 <__swsetup_r+0x70>
 8007fa6:	0023      	movs	r3, r4
 8007fa8:	3344      	adds	r3, #68	; 0x44
 8007faa:	4299      	cmp	r1, r3
 8007fac:	d002      	beq.n	8007fb4 <__swsetup_r+0x6c>
 8007fae:	0030      	movs	r0, r6
 8007fb0:	f7ff fcc0 	bl	8007934 <_free_r>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	6363      	str	r3, [r4, #52]	; 0x34
 8007fb8:	2224      	movs	r2, #36	; 0x24
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	4393      	bics	r3, r2
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	6063      	str	r3, [r4, #4]
 8007fc4:	6923      	ldr	r3, [r4, #16]
 8007fc6:	6023      	str	r3, [r4, #0]
 8007fc8:	2308      	movs	r3, #8
 8007fca:	89a2      	ldrh	r2, [r4, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d10b      	bne.n	8007fee <__swsetup_r+0xa6>
 8007fd6:	21a0      	movs	r1, #160	; 0xa0
 8007fd8:	2280      	movs	r2, #128	; 0x80
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	0089      	lsls	r1, r1, #2
 8007fde:	0092      	lsls	r2, r2, #2
 8007fe0:	400b      	ands	r3, r1
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <__swsetup_r+0xa6>
 8007fe6:	0021      	movs	r1, r4
 8007fe8:	0030      	movs	r0, r6
 8007fea:	f000 fa27 	bl	800843c <__smakebuf_r>
 8007fee:	220c      	movs	r2, #12
 8007ff0:	5ea3      	ldrsh	r3, [r4, r2]
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	b299      	uxth	r1, r3
 8007ff8:	4002      	ands	r2, r0
 8007ffa:	4203      	tst	r3, r0
 8007ffc:	d00f      	beq.n	800801e <__swsetup_r+0xd6>
 8007ffe:	2200      	movs	r2, #0
 8008000:	60a2      	str	r2, [r4, #8]
 8008002:	6962      	ldr	r2, [r4, #20]
 8008004:	4252      	negs	r2, r2
 8008006:	61a2      	str	r2, [r4, #24]
 8008008:	2000      	movs	r0, #0
 800800a:	6922      	ldr	r2, [r4, #16]
 800800c:	4282      	cmp	r2, r0
 800800e:	d1ba      	bne.n	8007f86 <__swsetup_r+0x3e>
 8008010:	060a      	lsls	r2, r1, #24
 8008012:	d5b8      	bpl.n	8007f86 <__swsetup_r+0x3e>
 8008014:	2240      	movs	r2, #64	; 0x40
 8008016:	4313      	orrs	r3, r2
 8008018:	81a3      	strh	r3, [r4, #12]
 800801a:	3801      	subs	r0, #1
 800801c:	e7b3      	b.n	8007f86 <__swsetup_r+0x3e>
 800801e:	0788      	lsls	r0, r1, #30
 8008020:	d400      	bmi.n	8008024 <__swsetup_r+0xdc>
 8008022:	6962      	ldr	r2, [r4, #20]
 8008024:	60a2      	str	r2, [r4, #8]
 8008026:	e7ef      	b.n	8008008 <__swsetup_r+0xc0>
 8008028:	20000020 	.word	0x20000020
 800802c:	08008b4c 	.word	0x08008b4c
 8008030:	08008b6c 	.word	0x08008b6c
 8008034:	08008b2c 	.word	0x08008b2c

08008038 <abort>:
 8008038:	2006      	movs	r0, #6
 800803a:	b510      	push	{r4, lr}
 800803c:	f000 fa6c 	bl	8008518 <raise>
 8008040:	2001      	movs	r0, #1
 8008042:	f7fa fb63 	bl	800270c <_exit>
	...

08008048 <__sflush_r>:
 8008048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800804a:	898b      	ldrh	r3, [r1, #12]
 800804c:	0005      	movs	r5, r0
 800804e:	000c      	movs	r4, r1
 8008050:	071a      	lsls	r2, r3, #28
 8008052:	d45f      	bmi.n	8008114 <__sflush_r+0xcc>
 8008054:	684a      	ldr	r2, [r1, #4]
 8008056:	2a00      	cmp	r2, #0
 8008058:	dc04      	bgt.n	8008064 <__sflush_r+0x1c>
 800805a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800805c:	2a00      	cmp	r2, #0
 800805e:	dc01      	bgt.n	8008064 <__sflush_r+0x1c>
 8008060:	2000      	movs	r0, #0
 8008062:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008064:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008066:	2f00      	cmp	r7, #0
 8008068:	d0fa      	beq.n	8008060 <__sflush_r+0x18>
 800806a:	2200      	movs	r2, #0
 800806c:	2180      	movs	r1, #128	; 0x80
 800806e:	682e      	ldr	r6, [r5, #0]
 8008070:	602a      	str	r2, [r5, #0]
 8008072:	001a      	movs	r2, r3
 8008074:	0149      	lsls	r1, r1, #5
 8008076:	400a      	ands	r2, r1
 8008078:	420b      	tst	r3, r1
 800807a:	d034      	beq.n	80080e6 <__sflush_r+0x9e>
 800807c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	075b      	lsls	r3, r3, #29
 8008082:	d506      	bpl.n	8008092 <__sflush_r+0x4a>
 8008084:	6863      	ldr	r3, [r4, #4]
 8008086:	1ac0      	subs	r0, r0, r3
 8008088:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <__sflush_r+0x4a>
 800808e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008090:	1ac0      	subs	r0, r0, r3
 8008092:	0002      	movs	r2, r0
 8008094:	6a21      	ldr	r1, [r4, #32]
 8008096:	2300      	movs	r3, #0
 8008098:	0028      	movs	r0, r5
 800809a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800809c:	47b8      	blx	r7
 800809e:	89a1      	ldrh	r1, [r4, #12]
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d106      	bne.n	80080b2 <__sflush_r+0x6a>
 80080a4:	682b      	ldr	r3, [r5, #0]
 80080a6:	2b1d      	cmp	r3, #29
 80080a8:	d831      	bhi.n	800810e <__sflush_r+0xc6>
 80080aa:	4a2c      	ldr	r2, [pc, #176]	; (800815c <__sflush_r+0x114>)
 80080ac:	40da      	lsrs	r2, r3
 80080ae:	07d3      	lsls	r3, r2, #31
 80080b0:	d52d      	bpl.n	800810e <__sflush_r+0xc6>
 80080b2:	2300      	movs	r3, #0
 80080b4:	6063      	str	r3, [r4, #4]
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	6023      	str	r3, [r4, #0]
 80080ba:	04cb      	lsls	r3, r1, #19
 80080bc:	d505      	bpl.n	80080ca <__sflush_r+0x82>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	d102      	bne.n	80080c8 <__sflush_r+0x80>
 80080c2:	682b      	ldr	r3, [r5, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d100      	bne.n	80080ca <__sflush_r+0x82>
 80080c8:	6560      	str	r0, [r4, #84]	; 0x54
 80080ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080cc:	602e      	str	r6, [r5, #0]
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d0c6      	beq.n	8008060 <__sflush_r+0x18>
 80080d2:	0023      	movs	r3, r4
 80080d4:	3344      	adds	r3, #68	; 0x44
 80080d6:	4299      	cmp	r1, r3
 80080d8:	d002      	beq.n	80080e0 <__sflush_r+0x98>
 80080da:	0028      	movs	r0, r5
 80080dc:	f7ff fc2a 	bl	8007934 <_free_r>
 80080e0:	2000      	movs	r0, #0
 80080e2:	6360      	str	r0, [r4, #52]	; 0x34
 80080e4:	e7bd      	b.n	8008062 <__sflush_r+0x1a>
 80080e6:	2301      	movs	r3, #1
 80080e8:	0028      	movs	r0, r5
 80080ea:	6a21      	ldr	r1, [r4, #32]
 80080ec:	47b8      	blx	r7
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	d1c5      	bne.n	800807e <__sflush_r+0x36>
 80080f2:	682b      	ldr	r3, [r5, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d0c2      	beq.n	800807e <__sflush_r+0x36>
 80080f8:	2b1d      	cmp	r3, #29
 80080fa:	d001      	beq.n	8008100 <__sflush_r+0xb8>
 80080fc:	2b16      	cmp	r3, #22
 80080fe:	d101      	bne.n	8008104 <__sflush_r+0xbc>
 8008100:	602e      	str	r6, [r5, #0]
 8008102:	e7ad      	b.n	8008060 <__sflush_r+0x18>
 8008104:	2340      	movs	r3, #64	; 0x40
 8008106:	89a2      	ldrh	r2, [r4, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	e7a9      	b.n	8008062 <__sflush_r+0x1a>
 800810e:	2340      	movs	r3, #64	; 0x40
 8008110:	430b      	orrs	r3, r1
 8008112:	e7fa      	b.n	800810a <__sflush_r+0xc2>
 8008114:	690f      	ldr	r7, [r1, #16]
 8008116:	2f00      	cmp	r7, #0
 8008118:	d0a2      	beq.n	8008060 <__sflush_r+0x18>
 800811a:	680a      	ldr	r2, [r1, #0]
 800811c:	600f      	str	r7, [r1, #0]
 800811e:	1bd2      	subs	r2, r2, r7
 8008120:	9201      	str	r2, [sp, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	079b      	lsls	r3, r3, #30
 8008126:	d100      	bne.n	800812a <__sflush_r+0xe2>
 8008128:	694a      	ldr	r2, [r1, #20]
 800812a:	60a2      	str	r2, [r4, #8]
 800812c:	9b01      	ldr	r3, [sp, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	dc00      	bgt.n	8008134 <__sflush_r+0xec>
 8008132:	e795      	b.n	8008060 <__sflush_r+0x18>
 8008134:	003a      	movs	r2, r7
 8008136:	0028      	movs	r0, r5
 8008138:	9b01      	ldr	r3, [sp, #4]
 800813a:	6a21      	ldr	r1, [r4, #32]
 800813c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800813e:	47b0      	blx	r6
 8008140:	2800      	cmp	r0, #0
 8008142:	dc06      	bgt.n	8008152 <__sflush_r+0x10a>
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	2001      	movs	r0, #1
 8008148:	89a2      	ldrh	r2, [r4, #12]
 800814a:	4240      	negs	r0, r0
 800814c:	4313      	orrs	r3, r2
 800814e:	81a3      	strh	r3, [r4, #12]
 8008150:	e787      	b.n	8008062 <__sflush_r+0x1a>
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	183f      	adds	r7, r7, r0
 8008156:	1a1b      	subs	r3, r3, r0
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	e7e7      	b.n	800812c <__sflush_r+0xe4>
 800815c:	20400001 	.word	0x20400001

08008160 <_fflush_r>:
 8008160:	690b      	ldr	r3, [r1, #16]
 8008162:	b570      	push	{r4, r5, r6, lr}
 8008164:	0005      	movs	r5, r0
 8008166:	000c      	movs	r4, r1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <_fflush_r+0x12>
 800816c:	2500      	movs	r5, #0
 800816e:	0028      	movs	r0, r5
 8008170:	bd70      	pop	{r4, r5, r6, pc}
 8008172:	2800      	cmp	r0, #0
 8008174:	d004      	beq.n	8008180 <_fflush_r+0x20>
 8008176:	6983      	ldr	r3, [r0, #24]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <_fflush_r+0x20>
 800817c:	f000 f892 	bl	80082a4 <__sinit>
 8008180:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <_fflush_r+0x74>)
 8008182:	429c      	cmp	r4, r3
 8008184:	d11b      	bne.n	80081be <_fflush_r+0x5e>
 8008186:	686c      	ldr	r4, [r5, #4]
 8008188:	220c      	movs	r2, #12
 800818a:	5ea3      	ldrsh	r3, [r4, r2]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d0ed      	beq.n	800816c <_fflush_r+0xc>
 8008190:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008192:	07d2      	lsls	r2, r2, #31
 8008194:	d404      	bmi.n	80081a0 <_fflush_r+0x40>
 8008196:	059b      	lsls	r3, r3, #22
 8008198:	d402      	bmi.n	80081a0 <_fflush_r+0x40>
 800819a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800819c:	f000 f923 	bl	80083e6 <__retarget_lock_acquire_recursive>
 80081a0:	0028      	movs	r0, r5
 80081a2:	0021      	movs	r1, r4
 80081a4:	f7ff ff50 	bl	8008048 <__sflush_r>
 80081a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081aa:	0005      	movs	r5, r0
 80081ac:	07db      	lsls	r3, r3, #31
 80081ae:	d4de      	bmi.n	800816e <_fflush_r+0xe>
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	059b      	lsls	r3, r3, #22
 80081b4:	d4db      	bmi.n	800816e <_fflush_r+0xe>
 80081b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b8:	f000 f916 	bl	80083e8 <__retarget_lock_release_recursive>
 80081bc:	e7d7      	b.n	800816e <_fflush_r+0xe>
 80081be:	4b06      	ldr	r3, [pc, #24]	; (80081d8 <_fflush_r+0x78>)
 80081c0:	429c      	cmp	r4, r3
 80081c2:	d101      	bne.n	80081c8 <_fflush_r+0x68>
 80081c4:	68ac      	ldr	r4, [r5, #8]
 80081c6:	e7df      	b.n	8008188 <_fflush_r+0x28>
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <_fflush_r+0x7c>)
 80081ca:	429c      	cmp	r4, r3
 80081cc:	d1dc      	bne.n	8008188 <_fflush_r+0x28>
 80081ce:	68ec      	ldr	r4, [r5, #12]
 80081d0:	e7da      	b.n	8008188 <_fflush_r+0x28>
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	08008b4c 	.word	0x08008b4c
 80081d8:	08008b6c 	.word	0x08008b6c
 80081dc:	08008b2c 	.word	0x08008b2c

080081e0 <std>:
 80081e0:	2300      	movs	r3, #0
 80081e2:	b510      	push	{r4, lr}
 80081e4:	0004      	movs	r4, r0
 80081e6:	6003      	str	r3, [r0, #0]
 80081e8:	6043      	str	r3, [r0, #4]
 80081ea:	6083      	str	r3, [r0, #8]
 80081ec:	8181      	strh	r1, [r0, #12]
 80081ee:	6643      	str	r3, [r0, #100]	; 0x64
 80081f0:	0019      	movs	r1, r3
 80081f2:	81c2      	strh	r2, [r0, #14]
 80081f4:	6103      	str	r3, [r0, #16]
 80081f6:	6143      	str	r3, [r0, #20]
 80081f8:	6183      	str	r3, [r0, #24]
 80081fa:	2208      	movs	r2, #8
 80081fc:	305c      	adds	r0, #92	; 0x5c
 80081fe:	f7fd fc93 	bl	8005b28 <memset>
 8008202:	4b05      	ldr	r3, [pc, #20]	; (8008218 <std+0x38>)
 8008204:	6224      	str	r4, [r4, #32]
 8008206:	6263      	str	r3, [r4, #36]	; 0x24
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <std+0x3c>)
 800820a:	62a3      	str	r3, [r4, #40]	; 0x28
 800820c:	4b04      	ldr	r3, [pc, #16]	; (8008220 <std+0x40>)
 800820e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <std+0x44>)
 8008212:	6323      	str	r3, [r4, #48]	; 0x30
 8008214:	bd10      	pop	{r4, pc}
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	08008559 	.word	0x08008559
 800821c:	08008581 	.word	0x08008581
 8008220:	080085b9 	.word	0x080085b9
 8008224:	080085e5 	.word	0x080085e5

08008228 <_cleanup_r>:
 8008228:	b510      	push	{r4, lr}
 800822a:	4902      	ldr	r1, [pc, #8]	; (8008234 <_cleanup_r+0xc>)
 800822c:	f000 f8ba 	bl	80083a4 <_fwalk_reent>
 8008230:	bd10      	pop	{r4, pc}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	08008161 	.word	0x08008161

08008238 <__sfmoreglue>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	2568      	movs	r5, #104	; 0x68
 800823c:	1e4a      	subs	r2, r1, #1
 800823e:	4355      	muls	r5, r2
 8008240:	000e      	movs	r6, r1
 8008242:	0029      	movs	r1, r5
 8008244:	3174      	adds	r1, #116	; 0x74
 8008246:	f7ff fbe1 	bl	8007a0c <_malloc_r>
 800824a:	1e04      	subs	r4, r0, #0
 800824c:	d008      	beq.n	8008260 <__sfmoreglue+0x28>
 800824e:	2100      	movs	r1, #0
 8008250:	002a      	movs	r2, r5
 8008252:	6001      	str	r1, [r0, #0]
 8008254:	6046      	str	r6, [r0, #4]
 8008256:	300c      	adds	r0, #12
 8008258:	60a0      	str	r0, [r4, #8]
 800825a:	3268      	adds	r2, #104	; 0x68
 800825c:	f7fd fc64 	bl	8005b28 <memset>
 8008260:	0020      	movs	r0, r4
 8008262:	bd70      	pop	{r4, r5, r6, pc}

08008264 <__sfp_lock_acquire>:
 8008264:	b510      	push	{r4, lr}
 8008266:	4802      	ldr	r0, [pc, #8]	; (8008270 <__sfp_lock_acquire+0xc>)
 8008268:	f000 f8bd 	bl	80083e6 <__retarget_lock_acquire_recursive>
 800826c:	bd10      	pop	{r4, pc}
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	200002e9 	.word	0x200002e9

08008274 <__sfp_lock_release>:
 8008274:	b510      	push	{r4, lr}
 8008276:	4802      	ldr	r0, [pc, #8]	; (8008280 <__sfp_lock_release+0xc>)
 8008278:	f000 f8b6 	bl	80083e8 <__retarget_lock_release_recursive>
 800827c:	bd10      	pop	{r4, pc}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	200002e9 	.word	0x200002e9

08008284 <__sinit_lock_acquire>:
 8008284:	b510      	push	{r4, lr}
 8008286:	4802      	ldr	r0, [pc, #8]	; (8008290 <__sinit_lock_acquire+0xc>)
 8008288:	f000 f8ad 	bl	80083e6 <__retarget_lock_acquire_recursive>
 800828c:	bd10      	pop	{r4, pc}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	200002ea 	.word	0x200002ea

08008294 <__sinit_lock_release>:
 8008294:	b510      	push	{r4, lr}
 8008296:	4802      	ldr	r0, [pc, #8]	; (80082a0 <__sinit_lock_release+0xc>)
 8008298:	f000 f8a6 	bl	80083e8 <__retarget_lock_release_recursive>
 800829c:	bd10      	pop	{r4, pc}
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	200002ea 	.word	0x200002ea

080082a4 <__sinit>:
 80082a4:	b513      	push	{r0, r1, r4, lr}
 80082a6:	0004      	movs	r4, r0
 80082a8:	f7ff ffec 	bl	8008284 <__sinit_lock_acquire>
 80082ac:	69a3      	ldr	r3, [r4, #24]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d002      	beq.n	80082b8 <__sinit+0x14>
 80082b2:	f7ff ffef 	bl	8008294 <__sinit_lock_release>
 80082b6:	bd13      	pop	{r0, r1, r4, pc}
 80082b8:	64a3      	str	r3, [r4, #72]	; 0x48
 80082ba:	64e3      	str	r3, [r4, #76]	; 0x4c
 80082bc:	6523      	str	r3, [r4, #80]	; 0x50
 80082be:	4b13      	ldr	r3, [pc, #76]	; (800830c <__sinit+0x68>)
 80082c0:	4a13      	ldr	r2, [pc, #76]	; (8008310 <__sinit+0x6c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	d101      	bne.n	80082d0 <__sinit+0x2c>
 80082cc:	2301      	movs	r3, #1
 80082ce:	61a3      	str	r3, [r4, #24]
 80082d0:	0020      	movs	r0, r4
 80082d2:	f000 f81f 	bl	8008314 <__sfp>
 80082d6:	6060      	str	r0, [r4, #4]
 80082d8:	0020      	movs	r0, r4
 80082da:	f000 f81b 	bl	8008314 <__sfp>
 80082de:	60a0      	str	r0, [r4, #8]
 80082e0:	0020      	movs	r0, r4
 80082e2:	f000 f817 	bl	8008314 <__sfp>
 80082e6:	2200      	movs	r2, #0
 80082e8:	2104      	movs	r1, #4
 80082ea:	60e0      	str	r0, [r4, #12]
 80082ec:	6860      	ldr	r0, [r4, #4]
 80082ee:	f7ff ff77 	bl	80081e0 <std>
 80082f2:	2201      	movs	r2, #1
 80082f4:	2109      	movs	r1, #9
 80082f6:	68a0      	ldr	r0, [r4, #8]
 80082f8:	f7ff ff72 	bl	80081e0 <std>
 80082fc:	2202      	movs	r2, #2
 80082fe:	2112      	movs	r1, #18
 8008300:	68e0      	ldr	r0, [r4, #12]
 8008302:	f7ff ff6d 	bl	80081e0 <std>
 8008306:	2301      	movs	r3, #1
 8008308:	61a3      	str	r3, [r4, #24]
 800830a:	e7d2      	b.n	80082b2 <__sinit+0xe>
 800830c:	080087b0 	.word	0x080087b0
 8008310:	08008229 	.word	0x08008229

08008314 <__sfp>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	0007      	movs	r7, r0
 8008318:	f7ff ffa4 	bl	8008264 <__sfp_lock_acquire>
 800831c:	4b1f      	ldr	r3, [pc, #124]	; (800839c <__sfp+0x88>)
 800831e:	681e      	ldr	r6, [r3, #0]
 8008320:	69b3      	ldr	r3, [r6, #24]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d102      	bne.n	800832c <__sfp+0x18>
 8008326:	0030      	movs	r0, r6
 8008328:	f7ff ffbc 	bl	80082a4 <__sinit>
 800832c:	3648      	adds	r6, #72	; 0x48
 800832e:	68b4      	ldr	r4, [r6, #8]
 8008330:	6873      	ldr	r3, [r6, #4]
 8008332:	3b01      	subs	r3, #1
 8008334:	d504      	bpl.n	8008340 <__sfp+0x2c>
 8008336:	6833      	ldr	r3, [r6, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d022      	beq.n	8008382 <__sfp+0x6e>
 800833c:	6836      	ldr	r6, [r6, #0]
 800833e:	e7f6      	b.n	800832e <__sfp+0x1a>
 8008340:	220c      	movs	r2, #12
 8008342:	5ea5      	ldrsh	r5, [r4, r2]
 8008344:	2d00      	cmp	r5, #0
 8008346:	d11a      	bne.n	800837e <__sfp+0x6a>
 8008348:	0020      	movs	r0, r4
 800834a:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <__sfp+0x8c>)
 800834c:	3058      	adds	r0, #88	; 0x58
 800834e:	60e3      	str	r3, [r4, #12]
 8008350:	6665      	str	r5, [r4, #100]	; 0x64
 8008352:	f000 f847 	bl	80083e4 <__retarget_lock_init_recursive>
 8008356:	f7ff ff8d 	bl	8008274 <__sfp_lock_release>
 800835a:	0020      	movs	r0, r4
 800835c:	2208      	movs	r2, #8
 800835e:	0029      	movs	r1, r5
 8008360:	6025      	str	r5, [r4, #0]
 8008362:	60a5      	str	r5, [r4, #8]
 8008364:	6065      	str	r5, [r4, #4]
 8008366:	6125      	str	r5, [r4, #16]
 8008368:	6165      	str	r5, [r4, #20]
 800836a:	61a5      	str	r5, [r4, #24]
 800836c:	305c      	adds	r0, #92	; 0x5c
 800836e:	f7fd fbdb 	bl	8005b28 <memset>
 8008372:	6365      	str	r5, [r4, #52]	; 0x34
 8008374:	63a5      	str	r5, [r4, #56]	; 0x38
 8008376:	64a5      	str	r5, [r4, #72]	; 0x48
 8008378:	64e5      	str	r5, [r4, #76]	; 0x4c
 800837a:	0020      	movs	r0, r4
 800837c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800837e:	3468      	adds	r4, #104	; 0x68
 8008380:	e7d7      	b.n	8008332 <__sfp+0x1e>
 8008382:	2104      	movs	r1, #4
 8008384:	0038      	movs	r0, r7
 8008386:	f7ff ff57 	bl	8008238 <__sfmoreglue>
 800838a:	1e04      	subs	r4, r0, #0
 800838c:	6030      	str	r0, [r6, #0]
 800838e:	d1d5      	bne.n	800833c <__sfp+0x28>
 8008390:	f7ff ff70 	bl	8008274 <__sfp_lock_release>
 8008394:	230c      	movs	r3, #12
 8008396:	603b      	str	r3, [r7, #0]
 8008398:	e7ef      	b.n	800837a <__sfp+0x66>
 800839a:	46c0      	nop			; (mov r8, r8)
 800839c:	080087b0 	.word	0x080087b0
 80083a0:	ffff0001 	.word	0xffff0001

080083a4 <_fwalk_reent>:
 80083a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083a6:	0004      	movs	r4, r0
 80083a8:	0006      	movs	r6, r0
 80083aa:	2700      	movs	r7, #0
 80083ac:	9101      	str	r1, [sp, #4]
 80083ae:	3448      	adds	r4, #72	; 0x48
 80083b0:	6863      	ldr	r3, [r4, #4]
 80083b2:	68a5      	ldr	r5, [r4, #8]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	9b00      	ldr	r3, [sp, #0]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	d504      	bpl.n	80083c8 <_fwalk_reent+0x24>
 80083be:	6824      	ldr	r4, [r4, #0]
 80083c0:	2c00      	cmp	r4, #0
 80083c2:	d1f5      	bne.n	80083b0 <_fwalk_reent+0xc>
 80083c4:	0038      	movs	r0, r7
 80083c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083c8:	89ab      	ldrh	r3, [r5, #12]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d908      	bls.n	80083e0 <_fwalk_reent+0x3c>
 80083ce:	220e      	movs	r2, #14
 80083d0:	5eab      	ldrsh	r3, [r5, r2]
 80083d2:	3301      	adds	r3, #1
 80083d4:	d004      	beq.n	80083e0 <_fwalk_reent+0x3c>
 80083d6:	0029      	movs	r1, r5
 80083d8:	0030      	movs	r0, r6
 80083da:	9b01      	ldr	r3, [sp, #4]
 80083dc:	4798      	blx	r3
 80083de:	4307      	orrs	r7, r0
 80083e0:	3568      	adds	r5, #104	; 0x68
 80083e2:	e7e8      	b.n	80083b6 <_fwalk_reent+0x12>

080083e4 <__retarget_lock_init_recursive>:
 80083e4:	4770      	bx	lr

080083e6 <__retarget_lock_acquire_recursive>:
 80083e6:	4770      	bx	lr

080083e8 <__retarget_lock_release_recursive>:
 80083e8:	4770      	bx	lr
	...

080083ec <__swhatbuf_r>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	000e      	movs	r6, r1
 80083f0:	001d      	movs	r5, r3
 80083f2:	230e      	movs	r3, #14
 80083f4:	5ec9      	ldrsh	r1, [r1, r3]
 80083f6:	0014      	movs	r4, r2
 80083f8:	b096      	sub	sp, #88	; 0x58
 80083fa:	2900      	cmp	r1, #0
 80083fc:	da08      	bge.n	8008410 <__swhatbuf_r+0x24>
 80083fe:	220c      	movs	r2, #12
 8008400:	5eb3      	ldrsh	r3, [r6, r2]
 8008402:	2200      	movs	r2, #0
 8008404:	602a      	str	r2, [r5, #0]
 8008406:	061b      	lsls	r3, r3, #24
 8008408:	d411      	bmi.n	800842e <__swhatbuf_r+0x42>
 800840a:	2380      	movs	r3, #128	; 0x80
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	e00f      	b.n	8008430 <__swhatbuf_r+0x44>
 8008410:	466a      	mov	r2, sp
 8008412:	f000 f913 	bl	800863c <_fstat_r>
 8008416:	2800      	cmp	r0, #0
 8008418:	dbf1      	blt.n	80083fe <__swhatbuf_r+0x12>
 800841a:	23f0      	movs	r3, #240	; 0xf0
 800841c:	9901      	ldr	r1, [sp, #4]
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	4019      	ands	r1, r3
 8008422:	4b05      	ldr	r3, [pc, #20]	; (8008438 <__swhatbuf_r+0x4c>)
 8008424:	18c9      	adds	r1, r1, r3
 8008426:	424b      	negs	r3, r1
 8008428:	4159      	adcs	r1, r3
 800842a:	6029      	str	r1, [r5, #0]
 800842c:	e7ed      	b.n	800840a <__swhatbuf_r+0x1e>
 800842e:	2340      	movs	r3, #64	; 0x40
 8008430:	2000      	movs	r0, #0
 8008432:	6023      	str	r3, [r4, #0]
 8008434:	b016      	add	sp, #88	; 0x58
 8008436:	bd70      	pop	{r4, r5, r6, pc}
 8008438:	ffffe000 	.word	0xffffe000

0800843c <__smakebuf_r>:
 800843c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800843e:	2602      	movs	r6, #2
 8008440:	898b      	ldrh	r3, [r1, #12]
 8008442:	0005      	movs	r5, r0
 8008444:	000c      	movs	r4, r1
 8008446:	4233      	tst	r3, r6
 8008448:	d006      	beq.n	8008458 <__smakebuf_r+0x1c>
 800844a:	0023      	movs	r3, r4
 800844c:	3347      	adds	r3, #71	; 0x47
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	6123      	str	r3, [r4, #16]
 8008452:	2301      	movs	r3, #1
 8008454:	6163      	str	r3, [r4, #20]
 8008456:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008458:	466a      	mov	r2, sp
 800845a:	ab01      	add	r3, sp, #4
 800845c:	f7ff ffc6 	bl	80083ec <__swhatbuf_r>
 8008460:	9900      	ldr	r1, [sp, #0]
 8008462:	0007      	movs	r7, r0
 8008464:	0028      	movs	r0, r5
 8008466:	f7ff fad1 	bl	8007a0c <_malloc_r>
 800846a:	2800      	cmp	r0, #0
 800846c:	d108      	bne.n	8008480 <__smakebuf_r+0x44>
 800846e:	220c      	movs	r2, #12
 8008470:	5ea3      	ldrsh	r3, [r4, r2]
 8008472:	059a      	lsls	r2, r3, #22
 8008474:	d4ef      	bmi.n	8008456 <__smakebuf_r+0x1a>
 8008476:	2203      	movs	r2, #3
 8008478:	4393      	bics	r3, r2
 800847a:	431e      	orrs	r6, r3
 800847c:	81a6      	strh	r6, [r4, #12]
 800847e:	e7e4      	b.n	800844a <__smakebuf_r+0xe>
 8008480:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <__smakebuf_r+0x84>)
 8008482:	62ab      	str	r3, [r5, #40]	; 0x28
 8008484:	2380      	movs	r3, #128	; 0x80
 8008486:	89a2      	ldrh	r2, [r4, #12]
 8008488:	6020      	str	r0, [r4, #0]
 800848a:	4313      	orrs	r3, r2
 800848c:	81a3      	strh	r3, [r4, #12]
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	6120      	str	r0, [r4, #16]
 8008492:	6163      	str	r3, [r4, #20]
 8008494:	9b01      	ldr	r3, [sp, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00d      	beq.n	80084b6 <__smakebuf_r+0x7a>
 800849a:	0028      	movs	r0, r5
 800849c:	230e      	movs	r3, #14
 800849e:	5ee1      	ldrsh	r1, [r4, r3]
 80084a0:	f000 f8de 	bl	8008660 <_isatty_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d006      	beq.n	80084b6 <__smakebuf_r+0x7a>
 80084a8:	2203      	movs	r2, #3
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	4393      	bics	r3, r2
 80084ae:	001a      	movs	r2, r3
 80084b0:	2301      	movs	r3, #1
 80084b2:	4313      	orrs	r3, r2
 80084b4:	81a3      	strh	r3, [r4, #12]
 80084b6:	89a0      	ldrh	r0, [r4, #12]
 80084b8:	4307      	orrs	r7, r0
 80084ba:	81a7      	strh	r7, [r4, #12]
 80084bc:	e7cb      	b.n	8008456 <__smakebuf_r+0x1a>
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	08008229 	.word	0x08008229

080084c4 <_raise_r>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	0004      	movs	r4, r0
 80084c8:	000d      	movs	r5, r1
 80084ca:	291f      	cmp	r1, #31
 80084cc:	d904      	bls.n	80084d8 <_raise_r+0x14>
 80084ce:	2316      	movs	r3, #22
 80084d0:	6003      	str	r3, [r0, #0]
 80084d2:	2001      	movs	r0, #1
 80084d4:	4240      	negs	r0, r0
 80084d6:	bd70      	pop	{r4, r5, r6, pc}
 80084d8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d004      	beq.n	80084e8 <_raise_r+0x24>
 80084de:	008a      	lsls	r2, r1, #2
 80084e0:	189b      	adds	r3, r3, r2
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	d108      	bne.n	80084fa <_raise_r+0x36>
 80084e8:	0020      	movs	r0, r4
 80084ea:	f000 f831 	bl	8008550 <_getpid_r>
 80084ee:	002a      	movs	r2, r5
 80084f0:	0001      	movs	r1, r0
 80084f2:	0020      	movs	r0, r4
 80084f4:	f000 f81a 	bl	800852c <_kill_r>
 80084f8:	e7ed      	b.n	80084d6 <_raise_r+0x12>
 80084fa:	2000      	movs	r0, #0
 80084fc:	2a01      	cmp	r2, #1
 80084fe:	d0ea      	beq.n	80084d6 <_raise_r+0x12>
 8008500:	1c51      	adds	r1, r2, #1
 8008502:	d103      	bne.n	800850c <_raise_r+0x48>
 8008504:	2316      	movs	r3, #22
 8008506:	3001      	adds	r0, #1
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	e7e4      	b.n	80084d6 <_raise_r+0x12>
 800850c:	2400      	movs	r4, #0
 800850e:	0028      	movs	r0, r5
 8008510:	601c      	str	r4, [r3, #0]
 8008512:	4790      	blx	r2
 8008514:	0020      	movs	r0, r4
 8008516:	e7de      	b.n	80084d6 <_raise_r+0x12>

08008518 <raise>:
 8008518:	b510      	push	{r4, lr}
 800851a:	4b03      	ldr	r3, [pc, #12]	; (8008528 <raise+0x10>)
 800851c:	0001      	movs	r1, r0
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	f7ff ffd0 	bl	80084c4 <_raise_r>
 8008524:	bd10      	pop	{r4, pc}
 8008526:	46c0      	nop			; (mov r8, r8)
 8008528:	20000020 	.word	0x20000020

0800852c <_kill_r>:
 800852c:	2300      	movs	r3, #0
 800852e:	b570      	push	{r4, r5, r6, lr}
 8008530:	4d06      	ldr	r5, [pc, #24]	; (800854c <_kill_r+0x20>)
 8008532:	0004      	movs	r4, r0
 8008534:	0008      	movs	r0, r1
 8008536:	0011      	movs	r1, r2
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	f7fa f8d7 	bl	80026ec <_kill>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d103      	bne.n	800854a <_kill_r+0x1e>
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d000      	beq.n	800854a <_kill_r+0x1e>
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	200002e4 	.word	0x200002e4

08008550 <_getpid_r>:
 8008550:	b510      	push	{r4, lr}
 8008552:	f7fa f8c5 	bl	80026e0 <_getpid>
 8008556:	bd10      	pop	{r4, pc}

08008558 <__sread>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	000c      	movs	r4, r1
 800855c:	250e      	movs	r5, #14
 800855e:	5f49      	ldrsh	r1, [r1, r5]
 8008560:	f000 f8a4 	bl	80086ac <_read_r>
 8008564:	2800      	cmp	r0, #0
 8008566:	db03      	blt.n	8008570 <__sread+0x18>
 8008568:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800856a:	181b      	adds	r3, r3, r0
 800856c:	6563      	str	r3, [r4, #84]	; 0x54
 800856e:	bd70      	pop	{r4, r5, r6, pc}
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	4a02      	ldr	r2, [pc, #8]	; (800857c <__sread+0x24>)
 8008574:	4013      	ands	r3, r2
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	e7f9      	b.n	800856e <__sread+0x16>
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	ffffefff 	.word	0xffffefff

08008580 <__swrite>:
 8008580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008582:	001f      	movs	r7, r3
 8008584:	898b      	ldrh	r3, [r1, #12]
 8008586:	0005      	movs	r5, r0
 8008588:	000c      	movs	r4, r1
 800858a:	0016      	movs	r6, r2
 800858c:	05db      	lsls	r3, r3, #23
 800858e:	d505      	bpl.n	800859c <__swrite+0x1c>
 8008590:	230e      	movs	r3, #14
 8008592:	5ec9      	ldrsh	r1, [r1, r3]
 8008594:	2200      	movs	r2, #0
 8008596:	2302      	movs	r3, #2
 8008598:	f000 f874 	bl	8008684 <_lseek_r>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	4a05      	ldr	r2, [pc, #20]	; (80085b4 <__swrite+0x34>)
 80085a0:	0028      	movs	r0, r5
 80085a2:	4013      	ands	r3, r2
 80085a4:	81a3      	strh	r3, [r4, #12]
 80085a6:	0032      	movs	r2, r6
 80085a8:	230e      	movs	r3, #14
 80085aa:	5ee1      	ldrsh	r1, [r4, r3]
 80085ac:	003b      	movs	r3, r7
 80085ae:	f000 f81f 	bl	80085f0 <_write_r>
 80085b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b4:	ffffefff 	.word	0xffffefff

080085b8 <__sseek>:
 80085b8:	b570      	push	{r4, r5, r6, lr}
 80085ba:	000c      	movs	r4, r1
 80085bc:	250e      	movs	r5, #14
 80085be:	5f49      	ldrsh	r1, [r1, r5]
 80085c0:	f000 f860 	bl	8008684 <_lseek_r>
 80085c4:	89a3      	ldrh	r3, [r4, #12]
 80085c6:	1c42      	adds	r2, r0, #1
 80085c8:	d103      	bne.n	80085d2 <__sseek+0x1a>
 80085ca:	4a05      	ldr	r2, [pc, #20]	; (80085e0 <__sseek+0x28>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	bd70      	pop	{r4, r5, r6, pc}
 80085d2:	2280      	movs	r2, #128	; 0x80
 80085d4:	0152      	lsls	r2, r2, #5
 80085d6:	4313      	orrs	r3, r2
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	6560      	str	r0, [r4, #84]	; 0x54
 80085dc:	e7f8      	b.n	80085d0 <__sseek+0x18>
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	ffffefff 	.word	0xffffefff

080085e4 <__sclose>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	230e      	movs	r3, #14
 80085e8:	5ec9      	ldrsh	r1, [r1, r3]
 80085ea:	f000 f815 	bl	8008618 <_close_r>
 80085ee:	bd10      	pop	{r4, pc}

080085f0 <_write_r>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	0004      	movs	r4, r0
 80085f4:	0008      	movs	r0, r1
 80085f6:	0011      	movs	r1, r2
 80085f8:	001a      	movs	r2, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	4d05      	ldr	r5, [pc, #20]	; (8008614 <_write_r+0x24>)
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	f7fa f8ad 	bl	800275e <_write>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d103      	bne.n	8008610 <_write_r+0x20>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d000      	beq.n	8008610 <_write_r+0x20>
 800860e:	6023      	str	r3, [r4, #0]
 8008610:	bd70      	pop	{r4, r5, r6, pc}
 8008612:	46c0      	nop			; (mov r8, r8)
 8008614:	200002e4 	.word	0x200002e4

08008618 <_close_r>:
 8008618:	2300      	movs	r3, #0
 800861a:	b570      	push	{r4, r5, r6, lr}
 800861c:	4d06      	ldr	r5, [pc, #24]	; (8008638 <_close_r+0x20>)
 800861e:	0004      	movs	r4, r0
 8008620:	0008      	movs	r0, r1
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	f7fa f8b7 	bl	8002796 <_close>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d103      	bne.n	8008634 <_close_r+0x1c>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d000      	beq.n	8008634 <_close_r+0x1c>
 8008632:	6023      	str	r3, [r4, #0]
 8008634:	bd70      	pop	{r4, r5, r6, pc}
 8008636:	46c0      	nop			; (mov r8, r8)
 8008638:	200002e4 	.word	0x200002e4

0800863c <_fstat_r>:
 800863c:	2300      	movs	r3, #0
 800863e:	b570      	push	{r4, r5, r6, lr}
 8008640:	4d06      	ldr	r5, [pc, #24]	; (800865c <_fstat_r+0x20>)
 8008642:	0004      	movs	r4, r0
 8008644:	0008      	movs	r0, r1
 8008646:	0011      	movs	r1, r2
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	f7fa f8ae 	bl	80027aa <_fstat>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d103      	bne.n	800865a <_fstat_r+0x1e>
 8008652:	682b      	ldr	r3, [r5, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d000      	beq.n	800865a <_fstat_r+0x1e>
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	bd70      	pop	{r4, r5, r6, pc}
 800865c:	200002e4 	.word	0x200002e4

08008660 <_isatty_r>:
 8008660:	2300      	movs	r3, #0
 8008662:	b570      	push	{r4, r5, r6, lr}
 8008664:	4d06      	ldr	r5, [pc, #24]	; (8008680 <_isatty_r+0x20>)
 8008666:	0004      	movs	r4, r0
 8008668:	0008      	movs	r0, r1
 800866a:	602b      	str	r3, [r5, #0]
 800866c:	f7fa f8ab 	bl	80027c6 <_isatty>
 8008670:	1c43      	adds	r3, r0, #1
 8008672:	d103      	bne.n	800867c <_isatty_r+0x1c>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d000      	beq.n	800867c <_isatty_r+0x1c>
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	bd70      	pop	{r4, r5, r6, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	200002e4 	.word	0x200002e4

08008684 <_lseek_r>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	0004      	movs	r4, r0
 8008688:	0008      	movs	r0, r1
 800868a:	0011      	movs	r1, r2
 800868c:	001a      	movs	r2, r3
 800868e:	2300      	movs	r3, #0
 8008690:	4d05      	ldr	r5, [pc, #20]	; (80086a8 <_lseek_r+0x24>)
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	f7fa f8a0 	bl	80027d8 <_lseek>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d103      	bne.n	80086a4 <_lseek_r+0x20>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d000      	beq.n	80086a4 <_lseek_r+0x20>
 80086a2:	6023      	str	r3, [r4, #0]
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	46c0      	nop			; (mov r8, r8)
 80086a8:	200002e4 	.word	0x200002e4

080086ac <_read_r>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	0004      	movs	r4, r0
 80086b0:	0008      	movs	r0, r1
 80086b2:	0011      	movs	r1, r2
 80086b4:	001a      	movs	r2, r3
 80086b6:	2300      	movs	r3, #0
 80086b8:	4d05      	ldr	r5, [pc, #20]	; (80086d0 <_read_r+0x24>)
 80086ba:	602b      	str	r3, [r5, #0]
 80086bc:	f7fa f832 	bl	8002724 <_read>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d103      	bne.n	80086cc <_read_r+0x20>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d000      	beq.n	80086cc <_read_r+0x20>
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	bd70      	pop	{r4, r5, r6, pc}
 80086ce:	46c0      	nop			; (mov r8, r8)
 80086d0:	200002e4 	.word	0x200002e4

080086d4 <_init>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr

080086e0 <_fini>:
 80086e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086e6:	bc08      	pop	{r3}
 80086e8:	469e      	mov	lr, r3
 80086ea:	4770      	bx	lr
