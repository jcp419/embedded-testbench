
IR_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008420  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080084d8  080084d8  000184d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008974  08008974  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  08008974  08008974  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008974  08008974  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008974  08008974  00018974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800897c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000204  08008b80  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08008b80  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a89c  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de6  00000000  00000000  0002aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001635e  00000000  00000000  0002dd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7d2  00000000  00000000  00044096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000899f9  00000000  00000000  00050868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003600  00000000  00000000  000da2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	20000204 	.word	0x20000204
 80000d4:	00000000 	.word	0x00000000
 80000d8:	080084bc 	.word	0x080084bc

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000208 	.word	0x20000208
 80000f8:	080084bc 	.word	0x080084bc

080000fc <strlen>:
 80000fc:	2300      	movs	r3, #0
 80000fe:	5cc2      	ldrb	r2, [r0, r3]
 8000100:	3301      	adds	r3, #1
 8000102:	2a00      	cmp	r2, #0
 8000104:	d1fb      	bne.n	80000fe <strlen+0x2>
 8000106:	1e58      	subs	r0, r3, #1
 8000108:	4770      	bx	lr
	...

0800010c <__gnu_thumb1_case_uqi>:
 800010c:	b402      	push	{r1}
 800010e:	4671      	mov	r1, lr
 8000110:	0849      	lsrs	r1, r1, #1
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	5c09      	ldrb	r1, [r1, r0]
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	448e      	add	lr, r1
 800011a:	bc02      	pop	{r1}
 800011c:	4770      	bx	lr
 800011e:	46c0      	nop			; (mov r8, r8)

08000120 <__gnu_thumb1_case_shi>:
 8000120:	b403      	push	{r0, r1}
 8000122:	4671      	mov	r1, lr
 8000124:	0849      	lsrs	r1, r1, #1
 8000126:	0040      	lsls	r0, r0, #1
 8000128:	0049      	lsls	r1, r1, #1
 800012a:	5e09      	ldrsh	r1, [r1, r0]
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	448e      	add	lr, r1
 8000130:	bc03      	pop	{r0, r1}
 8000132:	4770      	bx	lr

08000134 <__udivsi3>:
 8000134:	2200      	movs	r2, #0
 8000136:	0843      	lsrs	r3, r0, #1
 8000138:	428b      	cmp	r3, r1
 800013a:	d374      	bcc.n	8000226 <__udivsi3+0xf2>
 800013c:	0903      	lsrs	r3, r0, #4
 800013e:	428b      	cmp	r3, r1
 8000140:	d35f      	bcc.n	8000202 <__udivsi3+0xce>
 8000142:	0a03      	lsrs	r3, r0, #8
 8000144:	428b      	cmp	r3, r1
 8000146:	d344      	bcc.n	80001d2 <__udivsi3+0x9e>
 8000148:	0b03      	lsrs	r3, r0, #12
 800014a:	428b      	cmp	r3, r1
 800014c:	d328      	bcc.n	80001a0 <__udivsi3+0x6c>
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d30d      	bcc.n	8000170 <__udivsi3+0x3c>
 8000154:	22ff      	movs	r2, #255	; 0xff
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	ba12      	rev	r2, r2
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d302      	bcc.n	8000166 <__udivsi3+0x32>
 8000160:	1212      	asrs	r2, r2, #8
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	d065      	beq.n	8000232 <__udivsi3+0xfe>
 8000166:	0b03      	lsrs	r3, r0, #12
 8000168:	428b      	cmp	r3, r1
 800016a:	d319      	bcc.n	80001a0 <__udivsi3+0x6c>
 800016c:	e000      	b.n	8000170 <__udivsi3+0x3c>
 800016e:	0a09      	lsrs	r1, r1, #8
 8000170:	0bc3      	lsrs	r3, r0, #15
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x46>
 8000176:	03cb      	lsls	r3, r1, #15
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b83      	lsrs	r3, r0, #14
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x52>
 8000182:	038b      	lsls	r3, r1, #14
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b43      	lsrs	r3, r0, #13
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x5e>
 800018e:	034b      	lsls	r3, r1, #13
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b03      	lsrs	r3, r0, #12
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x6a>
 800019a:	030b      	lsls	r3, r1, #12
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0ac3      	lsrs	r3, r0, #11
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x76>
 80001a6:	02cb      	lsls	r3, r1, #11
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a83      	lsrs	r3, r0, #10
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x82>
 80001b2:	028b      	lsls	r3, r1, #10
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a43      	lsrs	r3, r0, #9
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x8e>
 80001be:	024b      	lsls	r3, r1, #9
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a03      	lsrs	r3, r0, #8
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x9a>
 80001ca:	020b      	lsls	r3, r1, #8
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	d2cd      	bcs.n	800016e <__udivsi3+0x3a>
 80001d2:	09c3      	lsrs	r3, r0, #7
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xa8>
 80001d8:	01cb      	lsls	r3, r1, #7
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0983      	lsrs	r3, r0, #6
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xb4>
 80001e4:	018b      	lsls	r3, r1, #6
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0943      	lsrs	r3, r0, #5
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xc0>
 80001f0:	014b      	lsls	r3, r1, #5
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0903      	lsrs	r3, r0, #4
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xcc>
 80001fc:	010b      	lsls	r3, r1, #4
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	08c3      	lsrs	r3, r0, #3
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xd8>
 8000208:	00cb      	lsls	r3, r1, #3
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0883      	lsrs	r3, r0, #2
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xe4>
 8000214:	008b      	lsls	r3, r1, #2
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0843      	lsrs	r3, r0, #1
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xf0>
 8000220:	004b      	lsls	r3, r1, #1
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	1a41      	subs	r1, r0, r1
 8000228:	d200      	bcs.n	800022c <__udivsi3+0xf8>
 800022a:	4601      	mov	r1, r0
 800022c:	4152      	adcs	r2, r2
 800022e:	4610      	mov	r0, r2
 8000230:	4770      	bx	lr
 8000232:	e7ff      	b.n	8000234 <__udivsi3+0x100>
 8000234:	b501      	push	{r0, lr}
 8000236:	2000      	movs	r0, #0
 8000238:	f000 f8f0 	bl	800041c <__aeabi_idiv0>
 800023c:	bd02      	pop	{r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_uidivmod>:
 8000240:	2900      	cmp	r1, #0
 8000242:	d0f7      	beq.n	8000234 <__udivsi3+0x100>
 8000244:	e776      	b.n	8000134 <__udivsi3>
 8000246:	4770      	bx	lr

08000248 <__divsi3>:
 8000248:	4603      	mov	r3, r0
 800024a:	430b      	orrs	r3, r1
 800024c:	d47f      	bmi.n	800034e <__divsi3+0x106>
 800024e:	2200      	movs	r2, #0
 8000250:	0843      	lsrs	r3, r0, #1
 8000252:	428b      	cmp	r3, r1
 8000254:	d374      	bcc.n	8000340 <__divsi3+0xf8>
 8000256:	0903      	lsrs	r3, r0, #4
 8000258:	428b      	cmp	r3, r1
 800025a:	d35f      	bcc.n	800031c <__divsi3+0xd4>
 800025c:	0a03      	lsrs	r3, r0, #8
 800025e:	428b      	cmp	r3, r1
 8000260:	d344      	bcc.n	80002ec <__divsi3+0xa4>
 8000262:	0b03      	lsrs	r3, r0, #12
 8000264:	428b      	cmp	r3, r1
 8000266:	d328      	bcc.n	80002ba <__divsi3+0x72>
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d30d      	bcc.n	800028a <__divsi3+0x42>
 800026e:	22ff      	movs	r2, #255	; 0xff
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	ba12      	rev	r2, r2
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__divsi3+0x38>
 800027a:	1212      	asrs	r2, r2, #8
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	d065      	beq.n	800034c <__divsi3+0x104>
 8000280:	0b03      	lsrs	r3, r0, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d319      	bcc.n	80002ba <__divsi3+0x72>
 8000286:	e000      	b.n	800028a <__divsi3+0x42>
 8000288:	0a09      	lsrs	r1, r1, #8
 800028a:	0bc3      	lsrs	r3, r0, #15
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x4c>
 8000290:	03cb      	lsls	r3, r1, #15
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b83      	lsrs	r3, r0, #14
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x58>
 800029c:	038b      	lsls	r3, r1, #14
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b43      	lsrs	r3, r0, #13
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x64>
 80002a8:	034b      	lsls	r3, r1, #13
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b03      	lsrs	r3, r0, #12
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x70>
 80002b4:	030b      	lsls	r3, r1, #12
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0ac3      	lsrs	r3, r0, #11
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x7c>
 80002c0:	02cb      	lsls	r3, r1, #11
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a83      	lsrs	r3, r0, #10
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x88>
 80002cc:	028b      	lsls	r3, r1, #10
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a43      	lsrs	r3, r0, #9
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x94>
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a03      	lsrs	r3, r0, #8
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0xa0>
 80002e4:	020b      	lsls	r3, r1, #8
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	d2cd      	bcs.n	8000288 <__divsi3+0x40>
 80002ec:	09c3      	lsrs	r3, r0, #7
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xae>
 80002f2:	01cb      	lsls	r3, r1, #7
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0983      	lsrs	r3, r0, #6
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xba>
 80002fe:	018b      	lsls	r3, r1, #6
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0943      	lsrs	r3, r0, #5
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xc6>
 800030a:	014b      	lsls	r3, r1, #5
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0903      	lsrs	r3, r0, #4
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xd2>
 8000316:	010b      	lsls	r3, r1, #4
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	08c3      	lsrs	r3, r0, #3
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xde>
 8000322:	00cb      	lsls	r3, r1, #3
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0883      	lsrs	r3, r0, #2
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xea>
 800032e:	008b      	lsls	r3, r1, #2
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0843      	lsrs	r3, r0, #1
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xf6>
 800033a:	004b      	lsls	r3, r1, #1
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	1a41      	subs	r1, r0, r1
 8000342:	d200      	bcs.n	8000346 <__divsi3+0xfe>
 8000344:	4601      	mov	r1, r0
 8000346:	4152      	adcs	r2, r2
 8000348:	4610      	mov	r0, r2
 800034a:	4770      	bx	lr
 800034c:	e05d      	b.n	800040a <__divsi3+0x1c2>
 800034e:	0fca      	lsrs	r2, r1, #31
 8000350:	d000      	beq.n	8000354 <__divsi3+0x10c>
 8000352:	4249      	negs	r1, r1
 8000354:	1003      	asrs	r3, r0, #32
 8000356:	d300      	bcc.n	800035a <__divsi3+0x112>
 8000358:	4240      	negs	r0, r0
 800035a:	4053      	eors	r3, r2
 800035c:	2200      	movs	r2, #0
 800035e:	469c      	mov	ip, r3
 8000360:	0903      	lsrs	r3, r0, #4
 8000362:	428b      	cmp	r3, r1
 8000364:	d32d      	bcc.n	80003c2 <__divsi3+0x17a>
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d312      	bcc.n	8000392 <__divsi3+0x14a>
 800036c:	22fc      	movs	r2, #252	; 0xfc
 800036e:	0189      	lsls	r1, r1, #6
 8000370:	ba12      	rev	r2, r2
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d30c      	bcc.n	8000392 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d308      	bcc.n	8000392 <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d304      	bcc.n	8000392 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	d03a      	beq.n	8000402 <__divsi3+0x1ba>
 800038c:	1192      	asrs	r2, r2, #6
 800038e:	e000      	b.n	8000392 <__divsi3+0x14a>
 8000390:	0989      	lsrs	r1, r1, #6
 8000392:	09c3      	lsrs	r3, r0, #7
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x154>
 8000398:	01cb      	lsls	r3, r1, #7
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0983      	lsrs	r3, r0, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x160>
 80003a4:	018b      	lsls	r3, r1, #6
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0943      	lsrs	r3, r0, #5
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x16c>
 80003b0:	014b      	lsls	r3, r1, #5
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0903      	lsrs	r3, r0, #4
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x178>
 80003bc:	010b      	lsls	r3, r1, #4
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	08c3      	lsrs	r3, r0, #3
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x184>
 80003c8:	00cb      	lsls	r3, r1, #3
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0883      	lsrs	r3, r0, #2
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x190>
 80003d4:	008b      	lsls	r3, r1, #2
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	d2d9      	bcs.n	8000390 <__divsi3+0x148>
 80003dc:	0843      	lsrs	r3, r0, #1
 80003de:	428b      	cmp	r3, r1
 80003e0:	d301      	bcc.n	80003e6 <__divsi3+0x19e>
 80003e2:	004b      	lsls	r3, r1, #1
 80003e4:	1ac0      	subs	r0, r0, r3
 80003e6:	4152      	adcs	r2, r2
 80003e8:	1a41      	subs	r1, r0, r1
 80003ea:	d200      	bcs.n	80003ee <__divsi3+0x1a6>
 80003ec:	4601      	mov	r1, r0
 80003ee:	4663      	mov	r3, ip
 80003f0:	4152      	adcs	r2, r2
 80003f2:	105b      	asrs	r3, r3, #1
 80003f4:	4610      	mov	r0, r2
 80003f6:	d301      	bcc.n	80003fc <__divsi3+0x1b4>
 80003f8:	4240      	negs	r0, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d500      	bpl.n	8000400 <__divsi3+0x1b8>
 80003fe:	4249      	negs	r1, r1
 8000400:	4770      	bx	lr
 8000402:	4663      	mov	r3, ip
 8000404:	105b      	asrs	r3, r3, #1
 8000406:	d300      	bcc.n	800040a <__divsi3+0x1c2>
 8000408:	4240      	negs	r0, r0
 800040a:	b501      	push	{r0, lr}
 800040c:	2000      	movs	r0, #0
 800040e:	f000 f805 	bl	800041c <__aeabi_idiv0>
 8000412:	bd02      	pop	{r1, pc}

08000414 <__aeabi_idivmod>:
 8000414:	2900      	cmp	r1, #0
 8000416:	d0f8      	beq.n	800040a <__divsi3+0x1c2>
 8000418:	e716      	b.n	8000248 <__divsi3>
 800041a:	4770      	bx	lr

0800041c <__aeabi_idiv0>:
 800041c:	4770      	bx	lr
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__aeabi_cdrcmple>:
 8000420:	4684      	mov	ip, r0
 8000422:	0010      	movs	r0, r2
 8000424:	4662      	mov	r2, ip
 8000426:	468c      	mov	ip, r1
 8000428:	0019      	movs	r1, r3
 800042a:	4663      	mov	r3, ip
 800042c:	e000      	b.n	8000430 <__aeabi_cdcmpeq>
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_cdcmpeq>:
 8000430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000432:	f000 ff0d 	bl	8001250 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	d401      	bmi.n	800043e <__aeabi_cdcmpeq+0xe>
 800043a:	2100      	movs	r1, #0
 800043c:	42c8      	cmn	r0, r1
 800043e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000440 <__aeabi_dcmpeq>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fe5d 	bl	8001100 <__eqdf2>
 8000446:	4240      	negs	r0, r0
 8000448:	3001      	adds	r0, #1
 800044a:	bd10      	pop	{r4, pc}

0800044c <__aeabi_dcmplt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 feff 	bl	8001250 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	db01      	blt.n	800045a <__aeabi_dcmplt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_dcmple>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fef5 	bl	8001250 <__ledf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dd01      	ble.n	800046e <__aeabi_dcmple+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_dcmpgt>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 fe85 	bl	8001184 <__gedf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	dc01      	bgt.n	8000482 <__aeabi_dcmpgt+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_dcmpge>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fe7b 	bl	8001184 <__gedf2>
 800048e:	2800      	cmp	r0, #0
 8000490:	da01      	bge.n	8000496 <__aeabi_dcmpge+0xe>
 8000492:	2000      	movs	r0, #0
 8000494:	bd10      	pop	{r4, pc}
 8000496:	2001      	movs	r0, #1
 8000498:	bd10      	pop	{r4, pc}
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_dadd>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	464f      	mov	r7, r9
 80004a0:	4646      	mov	r6, r8
 80004a2:	46d6      	mov	lr, sl
 80004a4:	000d      	movs	r5, r1
 80004a6:	0004      	movs	r4, r0
 80004a8:	b5c0      	push	{r6, r7, lr}
 80004aa:	001f      	movs	r7, r3
 80004ac:	0011      	movs	r1, r2
 80004ae:	0328      	lsls	r0, r5, #12
 80004b0:	0f62      	lsrs	r2, r4, #29
 80004b2:	0a40      	lsrs	r0, r0, #9
 80004b4:	4310      	orrs	r0, r2
 80004b6:	007a      	lsls	r2, r7, #1
 80004b8:	0d52      	lsrs	r2, r2, #21
 80004ba:	00e3      	lsls	r3, r4, #3
 80004bc:	033c      	lsls	r4, r7, #12
 80004be:	4691      	mov	r9, r2
 80004c0:	0a64      	lsrs	r4, r4, #9
 80004c2:	0ffa      	lsrs	r2, r7, #31
 80004c4:	0f4f      	lsrs	r7, r1, #29
 80004c6:	006e      	lsls	r6, r5, #1
 80004c8:	4327      	orrs	r7, r4
 80004ca:	4692      	mov	sl, r2
 80004cc:	46b8      	mov	r8, r7
 80004ce:	0d76      	lsrs	r6, r6, #21
 80004d0:	0fed      	lsrs	r5, r5, #31
 80004d2:	00c9      	lsls	r1, r1, #3
 80004d4:	4295      	cmp	r5, r2
 80004d6:	d100      	bne.n	80004da <__aeabi_dadd+0x3e>
 80004d8:	e099      	b.n	800060e <__aeabi_dadd+0x172>
 80004da:	464c      	mov	r4, r9
 80004dc:	1b34      	subs	r4, r6, r4
 80004de:	46a4      	mov	ip, r4
 80004e0:	2c00      	cmp	r4, #0
 80004e2:	dc00      	bgt.n	80004e6 <__aeabi_dadd+0x4a>
 80004e4:	e07c      	b.n	80005e0 <__aeabi_dadd+0x144>
 80004e6:	464a      	mov	r2, r9
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_dadd+0x52>
 80004ec:	e0b8      	b.n	8000660 <__aeabi_dadd+0x1c4>
 80004ee:	4ac5      	ldr	r2, [pc, #788]	; (8000804 <__aeabi_dadd+0x368>)
 80004f0:	4296      	cmp	r6, r2
 80004f2:	d100      	bne.n	80004f6 <__aeabi_dadd+0x5a>
 80004f4:	e11c      	b.n	8000730 <__aeabi_dadd+0x294>
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	003c      	movs	r4, r7
 80004fa:	0412      	lsls	r2, r2, #16
 80004fc:	4314      	orrs	r4, r2
 80004fe:	46a0      	mov	r8, r4
 8000500:	4662      	mov	r2, ip
 8000502:	2a38      	cmp	r2, #56	; 0x38
 8000504:	dd00      	ble.n	8000508 <__aeabi_dadd+0x6c>
 8000506:	e161      	b.n	80007cc <__aeabi_dadd+0x330>
 8000508:	2a1f      	cmp	r2, #31
 800050a:	dd00      	ble.n	800050e <__aeabi_dadd+0x72>
 800050c:	e1cc      	b.n	80008a8 <__aeabi_dadd+0x40c>
 800050e:	4664      	mov	r4, ip
 8000510:	2220      	movs	r2, #32
 8000512:	1b12      	subs	r2, r2, r4
 8000514:	4644      	mov	r4, r8
 8000516:	4094      	lsls	r4, r2
 8000518:	000f      	movs	r7, r1
 800051a:	46a1      	mov	r9, r4
 800051c:	4664      	mov	r4, ip
 800051e:	4091      	lsls	r1, r2
 8000520:	40e7      	lsrs	r7, r4
 8000522:	464c      	mov	r4, r9
 8000524:	1e4a      	subs	r2, r1, #1
 8000526:	4191      	sbcs	r1, r2
 8000528:	433c      	orrs	r4, r7
 800052a:	4642      	mov	r2, r8
 800052c:	4321      	orrs	r1, r4
 800052e:	4664      	mov	r4, ip
 8000530:	40e2      	lsrs	r2, r4
 8000532:	1a80      	subs	r0, r0, r2
 8000534:	1a5c      	subs	r4, r3, r1
 8000536:	42a3      	cmp	r3, r4
 8000538:	419b      	sbcs	r3, r3
 800053a:	425f      	negs	r7, r3
 800053c:	1bc7      	subs	r7, r0, r7
 800053e:	023b      	lsls	r3, r7, #8
 8000540:	d400      	bmi.n	8000544 <__aeabi_dadd+0xa8>
 8000542:	e0d0      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000544:	027f      	lsls	r7, r7, #9
 8000546:	0a7f      	lsrs	r7, r7, #9
 8000548:	2f00      	cmp	r7, #0
 800054a:	d100      	bne.n	800054e <__aeabi_dadd+0xb2>
 800054c:	e0ff      	b.n	800074e <__aeabi_dadd+0x2b2>
 800054e:	0038      	movs	r0, r7
 8000550:	f001 fd8a 	bl	8002068 <__clzsi2>
 8000554:	0001      	movs	r1, r0
 8000556:	3908      	subs	r1, #8
 8000558:	2320      	movs	r3, #32
 800055a:	0022      	movs	r2, r4
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	408f      	lsls	r7, r1
 8000560:	40da      	lsrs	r2, r3
 8000562:	408c      	lsls	r4, r1
 8000564:	4317      	orrs	r7, r2
 8000566:	42b1      	cmp	r1, r6
 8000568:	da00      	bge.n	800056c <__aeabi_dadd+0xd0>
 800056a:	e0ff      	b.n	800076c <__aeabi_dadd+0x2d0>
 800056c:	1b89      	subs	r1, r1, r6
 800056e:	1c4b      	adds	r3, r1, #1
 8000570:	2b1f      	cmp	r3, #31
 8000572:	dd00      	ble.n	8000576 <__aeabi_dadd+0xda>
 8000574:	e0a8      	b.n	80006c8 <__aeabi_dadd+0x22c>
 8000576:	2220      	movs	r2, #32
 8000578:	0039      	movs	r1, r7
 800057a:	1ad2      	subs	r2, r2, r3
 800057c:	0020      	movs	r0, r4
 800057e:	4094      	lsls	r4, r2
 8000580:	4091      	lsls	r1, r2
 8000582:	40d8      	lsrs	r0, r3
 8000584:	1e62      	subs	r2, r4, #1
 8000586:	4194      	sbcs	r4, r2
 8000588:	40df      	lsrs	r7, r3
 800058a:	2600      	movs	r6, #0
 800058c:	4301      	orrs	r1, r0
 800058e:	430c      	orrs	r4, r1
 8000590:	0763      	lsls	r3, r4, #29
 8000592:	d009      	beq.n	80005a8 <__aeabi_dadd+0x10c>
 8000594:	230f      	movs	r3, #15
 8000596:	4023      	ands	r3, r4
 8000598:	2b04      	cmp	r3, #4
 800059a:	d005      	beq.n	80005a8 <__aeabi_dadd+0x10c>
 800059c:	1d23      	adds	r3, r4, #4
 800059e:	42a3      	cmp	r3, r4
 80005a0:	41a4      	sbcs	r4, r4
 80005a2:	4264      	negs	r4, r4
 80005a4:	193f      	adds	r7, r7, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	023b      	lsls	r3, r7, #8
 80005aa:	d400      	bmi.n	80005ae <__aeabi_dadd+0x112>
 80005ac:	e09e      	b.n	80006ec <__aeabi_dadd+0x250>
 80005ae:	4b95      	ldr	r3, [pc, #596]	; (8000804 <__aeabi_dadd+0x368>)
 80005b0:	3601      	adds	r6, #1
 80005b2:	429e      	cmp	r6, r3
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0x11c>
 80005b6:	e0b7      	b.n	8000728 <__aeabi_dadd+0x28c>
 80005b8:	4a93      	ldr	r2, [pc, #588]	; (8000808 <__aeabi_dadd+0x36c>)
 80005ba:	08e4      	lsrs	r4, r4, #3
 80005bc:	4017      	ands	r7, r2
 80005be:	077b      	lsls	r3, r7, #29
 80005c0:	0571      	lsls	r1, r6, #21
 80005c2:	027f      	lsls	r7, r7, #9
 80005c4:	4323      	orrs	r3, r4
 80005c6:	0b3f      	lsrs	r7, r7, #12
 80005c8:	0d4a      	lsrs	r2, r1, #21
 80005ca:	0512      	lsls	r2, r2, #20
 80005cc:	433a      	orrs	r2, r7
 80005ce:	07ed      	lsls	r5, r5, #31
 80005d0:	432a      	orrs	r2, r5
 80005d2:	0018      	movs	r0, r3
 80005d4:	0011      	movs	r1, r2
 80005d6:	bce0      	pop	{r5, r6, r7}
 80005d8:	46ba      	mov	sl, r7
 80005da:	46b1      	mov	r9, r6
 80005dc:	46a8      	mov	r8, r5
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d04b      	beq.n	800067c <__aeabi_dadd+0x1e0>
 80005e4:	464c      	mov	r4, r9
 80005e6:	1ba4      	subs	r4, r4, r6
 80005e8:	46a4      	mov	ip, r4
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d000      	beq.n	80005f0 <__aeabi_dadd+0x154>
 80005ee:	e123      	b.n	8000838 <__aeabi_dadd+0x39c>
 80005f0:	0004      	movs	r4, r0
 80005f2:	431c      	orrs	r4, r3
 80005f4:	d100      	bne.n	80005f8 <__aeabi_dadd+0x15c>
 80005f6:	e1af      	b.n	8000958 <__aeabi_dadd+0x4bc>
 80005f8:	4662      	mov	r2, ip
 80005fa:	1e54      	subs	r4, r2, #1
 80005fc:	2a01      	cmp	r2, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_dadd+0x166>
 8000600:	e215      	b.n	8000a2e <__aeabi_dadd+0x592>
 8000602:	4d80      	ldr	r5, [pc, #512]	; (8000804 <__aeabi_dadd+0x368>)
 8000604:	45ac      	cmp	ip, r5
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x16e>
 8000608:	e1c8      	b.n	800099c <__aeabi_dadd+0x500>
 800060a:	46a4      	mov	ip, r4
 800060c:	e11b      	b.n	8000846 <__aeabi_dadd+0x3aa>
 800060e:	464a      	mov	r2, r9
 8000610:	1ab2      	subs	r2, r6, r2
 8000612:	4694      	mov	ip, r2
 8000614:	2a00      	cmp	r2, #0
 8000616:	dc00      	bgt.n	800061a <__aeabi_dadd+0x17e>
 8000618:	e0ac      	b.n	8000774 <__aeabi_dadd+0x2d8>
 800061a:	464a      	mov	r2, r9
 800061c:	2a00      	cmp	r2, #0
 800061e:	d043      	beq.n	80006a8 <__aeabi_dadd+0x20c>
 8000620:	4a78      	ldr	r2, [pc, #480]	; (8000804 <__aeabi_dadd+0x368>)
 8000622:	4296      	cmp	r6, r2
 8000624:	d100      	bne.n	8000628 <__aeabi_dadd+0x18c>
 8000626:	e1af      	b.n	8000988 <__aeabi_dadd+0x4ec>
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	003c      	movs	r4, r7
 800062c:	0412      	lsls	r2, r2, #16
 800062e:	4314      	orrs	r4, r2
 8000630:	46a0      	mov	r8, r4
 8000632:	4662      	mov	r2, ip
 8000634:	2a38      	cmp	r2, #56	; 0x38
 8000636:	dc67      	bgt.n	8000708 <__aeabi_dadd+0x26c>
 8000638:	2a1f      	cmp	r2, #31
 800063a:	dc00      	bgt.n	800063e <__aeabi_dadd+0x1a2>
 800063c:	e15f      	b.n	80008fe <__aeabi_dadd+0x462>
 800063e:	4647      	mov	r7, r8
 8000640:	3a20      	subs	r2, #32
 8000642:	40d7      	lsrs	r7, r2
 8000644:	4662      	mov	r2, ip
 8000646:	2a20      	cmp	r2, #32
 8000648:	d005      	beq.n	8000656 <__aeabi_dadd+0x1ba>
 800064a:	4664      	mov	r4, ip
 800064c:	2240      	movs	r2, #64	; 0x40
 800064e:	1b12      	subs	r2, r2, r4
 8000650:	4644      	mov	r4, r8
 8000652:	4094      	lsls	r4, r2
 8000654:	4321      	orrs	r1, r4
 8000656:	1e4a      	subs	r2, r1, #1
 8000658:	4191      	sbcs	r1, r2
 800065a:	000c      	movs	r4, r1
 800065c:	433c      	orrs	r4, r7
 800065e:	e057      	b.n	8000710 <__aeabi_dadd+0x274>
 8000660:	003a      	movs	r2, r7
 8000662:	430a      	orrs	r2, r1
 8000664:	d100      	bne.n	8000668 <__aeabi_dadd+0x1cc>
 8000666:	e105      	b.n	8000874 <__aeabi_dadd+0x3d8>
 8000668:	0022      	movs	r2, r4
 800066a:	3a01      	subs	r2, #1
 800066c:	2c01      	cmp	r4, #1
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x1d6>
 8000670:	e182      	b.n	8000978 <__aeabi_dadd+0x4dc>
 8000672:	4c64      	ldr	r4, [pc, #400]	; (8000804 <__aeabi_dadd+0x368>)
 8000674:	45a4      	cmp	ip, r4
 8000676:	d05b      	beq.n	8000730 <__aeabi_dadd+0x294>
 8000678:	4694      	mov	ip, r2
 800067a:	e741      	b.n	8000500 <__aeabi_dadd+0x64>
 800067c:	4c63      	ldr	r4, [pc, #396]	; (800080c <__aeabi_dadd+0x370>)
 800067e:	1c77      	adds	r7, r6, #1
 8000680:	4227      	tst	r7, r4
 8000682:	d000      	beq.n	8000686 <__aeabi_dadd+0x1ea>
 8000684:	e0c4      	b.n	8000810 <__aeabi_dadd+0x374>
 8000686:	0004      	movs	r4, r0
 8000688:	431c      	orrs	r4, r3
 800068a:	2e00      	cmp	r6, #0
 800068c:	d000      	beq.n	8000690 <__aeabi_dadd+0x1f4>
 800068e:	e169      	b.n	8000964 <__aeabi_dadd+0x4c8>
 8000690:	2c00      	cmp	r4, #0
 8000692:	d100      	bne.n	8000696 <__aeabi_dadd+0x1fa>
 8000694:	e1bf      	b.n	8000a16 <__aeabi_dadd+0x57a>
 8000696:	4644      	mov	r4, r8
 8000698:	430c      	orrs	r4, r1
 800069a:	d000      	beq.n	800069e <__aeabi_dadd+0x202>
 800069c:	e1d0      	b.n	8000a40 <__aeabi_dadd+0x5a4>
 800069e:	0742      	lsls	r2, r0, #29
 80006a0:	08db      	lsrs	r3, r3, #3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	08c0      	lsrs	r0, r0, #3
 80006a6:	e029      	b.n	80006fc <__aeabi_dadd+0x260>
 80006a8:	003a      	movs	r2, r7
 80006aa:	430a      	orrs	r2, r1
 80006ac:	d100      	bne.n	80006b0 <__aeabi_dadd+0x214>
 80006ae:	e170      	b.n	8000992 <__aeabi_dadd+0x4f6>
 80006b0:	4662      	mov	r2, ip
 80006b2:	4664      	mov	r4, ip
 80006b4:	3a01      	subs	r2, #1
 80006b6:	2c01      	cmp	r4, #1
 80006b8:	d100      	bne.n	80006bc <__aeabi_dadd+0x220>
 80006ba:	e0e0      	b.n	800087e <__aeabi_dadd+0x3e2>
 80006bc:	4c51      	ldr	r4, [pc, #324]	; (8000804 <__aeabi_dadd+0x368>)
 80006be:	45a4      	cmp	ip, r4
 80006c0:	d100      	bne.n	80006c4 <__aeabi_dadd+0x228>
 80006c2:	e161      	b.n	8000988 <__aeabi_dadd+0x4ec>
 80006c4:	4694      	mov	ip, r2
 80006c6:	e7b4      	b.n	8000632 <__aeabi_dadd+0x196>
 80006c8:	003a      	movs	r2, r7
 80006ca:	391f      	subs	r1, #31
 80006cc:	40ca      	lsrs	r2, r1
 80006ce:	0011      	movs	r1, r2
 80006d0:	2b20      	cmp	r3, #32
 80006d2:	d003      	beq.n	80006dc <__aeabi_dadd+0x240>
 80006d4:	2240      	movs	r2, #64	; 0x40
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	409f      	lsls	r7, r3
 80006da:	433c      	orrs	r4, r7
 80006dc:	1e63      	subs	r3, r4, #1
 80006de:	419c      	sbcs	r4, r3
 80006e0:	2700      	movs	r7, #0
 80006e2:	2600      	movs	r6, #0
 80006e4:	430c      	orrs	r4, r1
 80006e6:	0763      	lsls	r3, r4, #29
 80006e8:	d000      	beq.n	80006ec <__aeabi_dadd+0x250>
 80006ea:	e753      	b.n	8000594 <__aeabi_dadd+0xf8>
 80006ec:	46b4      	mov	ip, r6
 80006ee:	08e4      	lsrs	r4, r4, #3
 80006f0:	077b      	lsls	r3, r7, #29
 80006f2:	4323      	orrs	r3, r4
 80006f4:	08f8      	lsrs	r0, r7, #3
 80006f6:	4a43      	ldr	r2, [pc, #268]	; (8000804 <__aeabi_dadd+0x368>)
 80006f8:	4594      	cmp	ip, r2
 80006fa:	d01d      	beq.n	8000738 <__aeabi_dadd+0x29c>
 80006fc:	4662      	mov	r2, ip
 80006fe:	0307      	lsls	r7, r0, #12
 8000700:	0552      	lsls	r2, r2, #21
 8000702:	0b3f      	lsrs	r7, r7, #12
 8000704:	0d52      	lsrs	r2, r2, #21
 8000706:	e760      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000708:	4644      	mov	r4, r8
 800070a:	430c      	orrs	r4, r1
 800070c:	1e62      	subs	r2, r4, #1
 800070e:	4194      	sbcs	r4, r2
 8000710:	18e4      	adds	r4, r4, r3
 8000712:	429c      	cmp	r4, r3
 8000714:	419b      	sbcs	r3, r3
 8000716:	425f      	negs	r7, r3
 8000718:	183f      	adds	r7, r7, r0
 800071a:	023b      	lsls	r3, r7, #8
 800071c:	d5e3      	bpl.n	80006e6 <__aeabi_dadd+0x24a>
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <__aeabi_dadd+0x368>)
 8000720:	3601      	adds	r6, #1
 8000722:	429e      	cmp	r6, r3
 8000724:	d000      	beq.n	8000728 <__aeabi_dadd+0x28c>
 8000726:	e0b5      	b.n	8000894 <__aeabi_dadd+0x3f8>
 8000728:	0032      	movs	r2, r6
 800072a:	2700      	movs	r7, #0
 800072c:	2300      	movs	r3, #0
 800072e:	e74c      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000730:	0742      	lsls	r2, r0, #29
 8000732:	08db      	lsrs	r3, r3, #3
 8000734:	4313      	orrs	r3, r2
 8000736:	08c0      	lsrs	r0, r0, #3
 8000738:	001a      	movs	r2, r3
 800073a:	4302      	orrs	r2, r0
 800073c:	d100      	bne.n	8000740 <__aeabi_dadd+0x2a4>
 800073e:	e1e1      	b.n	8000b04 <__aeabi_dadd+0x668>
 8000740:	2780      	movs	r7, #128	; 0x80
 8000742:	033f      	lsls	r7, r7, #12
 8000744:	4307      	orrs	r7, r0
 8000746:	033f      	lsls	r7, r7, #12
 8000748:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <__aeabi_dadd+0x368>)
 800074a:	0b3f      	lsrs	r7, r7, #12
 800074c:	e73d      	b.n	80005ca <__aeabi_dadd+0x12e>
 800074e:	0020      	movs	r0, r4
 8000750:	f001 fc8a 	bl	8002068 <__clzsi2>
 8000754:	0001      	movs	r1, r0
 8000756:	3118      	adds	r1, #24
 8000758:	291f      	cmp	r1, #31
 800075a:	dc00      	bgt.n	800075e <__aeabi_dadd+0x2c2>
 800075c:	e6fc      	b.n	8000558 <__aeabi_dadd+0xbc>
 800075e:	3808      	subs	r0, #8
 8000760:	4084      	lsls	r4, r0
 8000762:	0027      	movs	r7, r4
 8000764:	2400      	movs	r4, #0
 8000766:	42b1      	cmp	r1, r6
 8000768:	db00      	blt.n	800076c <__aeabi_dadd+0x2d0>
 800076a:	e6ff      	b.n	800056c <__aeabi_dadd+0xd0>
 800076c:	4a26      	ldr	r2, [pc, #152]	; (8000808 <__aeabi_dadd+0x36c>)
 800076e:	1a76      	subs	r6, r6, r1
 8000770:	4017      	ands	r7, r2
 8000772:	e70d      	b.n	8000590 <__aeabi_dadd+0xf4>
 8000774:	2a00      	cmp	r2, #0
 8000776:	d02f      	beq.n	80007d8 <__aeabi_dadd+0x33c>
 8000778:	464a      	mov	r2, r9
 800077a:	1b92      	subs	r2, r2, r6
 800077c:	4694      	mov	ip, r2
 800077e:	2e00      	cmp	r6, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_dadd+0x2e8>
 8000782:	e0ad      	b.n	80008e0 <__aeabi_dadd+0x444>
 8000784:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <__aeabi_dadd+0x368>)
 8000786:	4591      	cmp	r9, r2
 8000788:	d100      	bne.n	800078c <__aeabi_dadd+0x2f0>
 800078a:	e10f      	b.n	80009ac <__aeabi_dadd+0x510>
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	0412      	lsls	r2, r2, #16
 8000790:	4310      	orrs	r0, r2
 8000792:	4662      	mov	r2, ip
 8000794:	2a38      	cmp	r2, #56	; 0x38
 8000796:	dd00      	ble.n	800079a <__aeabi_dadd+0x2fe>
 8000798:	e10f      	b.n	80009ba <__aeabi_dadd+0x51e>
 800079a:	2a1f      	cmp	r2, #31
 800079c:	dd00      	ble.n	80007a0 <__aeabi_dadd+0x304>
 800079e:	e180      	b.n	8000aa2 <__aeabi_dadd+0x606>
 80007a0:	4664      	mov	r4, ip
 80007a2:	2220      	movs	r2, #32
 80007a4:	001e      	movs	r6, r3
 80007a6:	1b12      	subs	r2, r2, r4
 80007a8:	4667      	mov	r7, ip
 80007aa:	0004      	movs	r4, r0
 80007ac:	4093      	lsls	r3, r2
 80007ae:	4094      	lsls	r4, r2
 80007b0:	40fe      	lsrs	r6, r7
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	4193      	sbcs	r3, r2
 80007b6:	40f8      	lsrs	r0, r7
 80007b8:	4334      	orrs	r4, r6
 80007ba:	431c      	orrs	r4, r3
 80007bc:	4480      	add	r8, r0
 80007be:	1864      	adds	r4, r4, r1
 80007c0:	428c      	cmp	r4, r1
 80007c2:	41bf      	sbcs	r7, r7
 80007c4:	427f      	negs	r7, r7
 80007c6:	464e      	mov	r6, r9
 80007c8:	4447      	add	r7, r8
 80007ca:	e7a6      	b.n	800071a <__aeabi_dadd+0x27e>
 80007cc:	4642      	mov	r2, r8
 80007ce:	430a      	orrs	r2, r1
 80007d0:	0011      	movs	r1, r2
 80007d2:	1e4a      	subs	r2, r1, #1
 80007d4:	4191      	sbcs	r1, r2
 80007d6:	e6ad      	b.n	8000534 <__aeabi_dadd+0x98>
 80007d8:	4c0c      	ldr	r4, [pc, #48]	; (800080c <__aeabi_dadd+0x370>)
 80007da:	1c72      	adds	r2, r6, #1
 80007dc:	4222      	tst	r2, r4
 80007de:	d000      	beq.n	80007e2 <__aeabi_dadd+0x346>
 80007e0:	e0a1      	b.n	8000926 <__aeabi_dadd+0x48a>
 80007e2:	0002      	movs	r2, r0
 80007e4:	431a      	orrs	r2, r3
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d000      	beq.n	80007ec <__aeabi_dadd+0x350>
 80007ea:	e0fa      	b.n	80009e2 <__aeabi_dadd+0x546>
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x356>
 80007f0:	e145      	b.n	8000a7e <__aeabi_dadd+0x5e2>
 80007f2:	003a      	movs	r2, r7
 80007f4:	430a      	orrs	r2, r1
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x35e>
 80007f8:	e146      	b.n	8000a88 <__aeabi_dadd+0x5ec>
 80007fa:	0742      	lsls	r2, r0, #29
 80007fc:	08db      	lsrs	r3, r3, #3
 80007fe:	4313      	orrs	r3, r2
 8000800:	08c0      	lsrs	r0, r0, #3
 8000802:	e77b      	b.n	80006fc <__aeabi_dadd+0x260>
 8000804:	000007ff 	.word	0x000007ff
 8000808:	ff7fffff 	.word	0xff7fffff
 800080c:	000007fe 	.word	0x000007fe
 8000810:	4647      	mov	r7, r8
 8000812:	1a5c      	subs	r4, r3, r1
 8000814:	1bc2      	subs	r2, r0, r7
 8000816:	42a3      	cmp	r3, r4
 8000818:	41bf      	sbcs	r7, r7
 800081a:	427f      	negs	r7, r7
 800081c:	46b9      	mov	r9, r7
 800081e:	0017      	movs	r7, r2
 8000820:	464a      	mov	r2, r9
 8000822:	1abf      	subs	r7, r7, r2
 8000824:	023a      	lsls	r2, r7, #8
 8000826:	d500      	bpl.n	800082a <__aeabi_dadd+0x38e>
 8000828:	e08d      	b.n	8000946 <__aeabi_dadd+0x4aa>
 800082a:	0023      	movs	r3, r4
 800082c:	433b      	orrs	r3, r7
 800082e:	d000      	beq.n	8000832 <__aeabi_dadd+0x396>
 8000830:	e68a      	b.n	8000548 <__aeabi_dadd+0xac>
 8000832:	2000      	movs	r0, #0
 8000834:	2500      	movs	r5, #0
 8000836:	e761      	b.n	80006fc <__aeabi_dadd+0x260>
 8000838:	4cb4      	ldr	r4, [pc, #720]	; (8000b0c <__aeabi_dadd+0x670>)
 800083a:	45a1      	cmp	r9, r4
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x3a4>
 800083e:	e0ad      	b.n	800099c <__aeabi_dadd+0x500>
 8000840:	2480      	movs	r4, #128	; 0x80
 8000842:	0424      	lsls	r4, r4, #16
 8000844:	4320      	orrs	r0, r4
 8000846:	4664      	mov	r4, ip
 8000848:	2c38      	cmp	r4, #56	; 0x38
 800084a:	dc3d      	bgt.n	80008c8 <__aeabi_dadd+0x42c>
 800084c:	4662      	mov	r2, ip
 800084e:	2c1f      	cmp	r4, #31
 8000850:	dd00      	ble.n	8000854 <__aeabi_dadd+0x3b8>
 8000852:	e0b7      	b.n	80009c4 <__aeabi_dadd+0x528>
 8000854:	2520      	movs	r5, #32
 8000856:	001e      	movs	r6, r3
 8000858:	1b2d      	subs	r5, r5, r4
 800085a:	0004      	movs	r4, r0
 800085c:	40ab      	lsls	r3, r5
 800085e:	40ac      	lsls	r4, r5
 8000860:	40d6      	lsrs	r6, r2
 8000862:	40d0      	lsrs	r0, r2
 8000864:	4642      	mov	r2, r8
 8000866:	1e5d      	subs	r5, r3, #1
 8000868:	41ab      	sbcs	r3, r5
 800086a:	4334      	orrs	r4, r6
 800086c:	1a12      	subs	r2, r2, r0
 800086e:	4690      	mov	r8, r2
 8000870:	4323      	orrs	r3, r4
 8000872:	e02c      	b.n	80008ce <__aeabi_dadd+0x432>
 8000874:	0742      	lsls	r2, r0, #29
 8000876:	08db      	lsrs	r3, r3, #3
 8000878:	4313      	orrs	r3, r2
 800087a:	08c0      	lsrs	r0, r0, #3
 800087c:	e73b      	b.n	80006f6 <__aeabi_dadd+0x25a>
 800087e:	185c      	adds	r4, r3, r1
 8000880:	429c      	cmp	r4, r3
 8000882:	419b      	sbcs	r3, r3
 8000884:	4440      	add	r0, r8
 8000886:	425b      	negs	r3, r3
 8000888:	18c7      	adds	r7, r0, r3
 800088a:	2601      	movs	r6, #1
 800088c:	023b      	lsls	r3, r7, #8
 800088e:	d400      	bmi.n	8000892 <__aeabi_dadd+0x3f6>
 8000890:	e729      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000892:	2602      	movs	r6, #2
 8000894:	4a9e      	ldr	r2, [pc, #632]	; (8000b10 <__aeabi_dadd+0x674>)
 8000896:	0863      	lsrs	r3, r4, #1
 8000898:	4017      	ands	r7, r2
 800089a:	2201      	movs	r2, #1
 800089c:	4014      	ands	r4, r2
 800089e:	431c      	orrs	r4, r3
 80008a0:	07fb      	lsls	r3, r7, #31
 80008a2:	431c      	orrs	r4, r3
 80008a4:	087f      	lsrs	r7, r7, #1
 80008a6:	e673      	b.n	8000590 <__aeabi_dadd+0xf4>
 80008a8:	4644      	mov	r4, r8
 80008aa:	3a20      	subs	r2, #32
 80008ac:	40d4      	lsrs	r4, r2
 80008ae:	4662      	mov	r2, ip
 80008b0:	2a20      	cmp	r2, #32
 80008b2:	d005      	beq.n	80008c0 <__aeabi_dadd+0x424>
 80008b4:	4667      	mov	r7, ip
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	1bd2      	subs	r2, r2, r7
 80008ba:	4647      	mov	r7, r8
 80008bc:	4097      	lsls	r7, r2
 80008be:	4339      	orrs	r1, r7
 80008c0:	1e4a      	subs	r2, r1, #1
 80008c2:	4191      	sbcs	r1, r2
 80008c4:	4321      	orrs	r1, r4
 80008c6:	e635      	b.n	8000534 <__aeabi_dadd+0x98>
 80008c8:	4303      	orrs	r3, r0
 80008ca:	1e58      	subs	r0, r3, #1
 80008cc:	4183      	sbcs	r3, r0
 80008ce:	1acc      	subs	r4, r1, r3
 80008d0:	42a1      	cmp	r1, r4
 80008d2:	41bf      	sbcs	r7, r7
 80008d4:	4643      	mov	r3, r8
 80008d6:	427f      	negs	r7, r7
 80008d8:	4655      	mov	r5, sl
 80008da:	464e      	mov	r6, r9
 80008dc:	1bdf      	subs	r7, r3, r7
 80008de:	e62e      	b.n	800053e <__aeabi_dadd+0xa2>
 80008e0:	0002      	movs	r2, r0
 80008e2:	431a      	orrs	r2, r3
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x44c>
 80008e6:	e0bd      	b.n	8000a64 <__aeabi_dadd+0x5c8>
 80008e8:	4662      	mov	r2, ip
 80008ea:	4664      	mov	r4, ip
 80008ec:	3a01      	subs	r2, #1
 80008ee:	2c01      	cmp	r4, #1
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x458>
 80008f2:	e0e5      	b.n	8000ac0 <__aeabi_dadd+0x624>
 80008f4:	4c85      	ldr	r4, [pc, #532]	; (8000b0c <__aeabi_dadd+0x670>)
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d058      	beq.n	80009ac <__aeabi_dadd+0x510>
 80008fa:	4694      	mov	ip, r2
 80008fc:	e749      	b.n	8000792 <__aeabi_dadd+0x2f6>
 80008fe:	4664      	mov	r4, ip
 8000900:	2220      	movs	r2, #32
 8000902:	1b12      	subs	r2, r2, r4
 8000904:	4644      	mov	r4, r8
 8000906:	4094      	lsls	r4, r2
 8000908:	000f      	movs	r7, r1
 800090a:	46a1      	mov	r9, r4
 800090c:	4664      	mov	r4, ip
 800090e:	4091      	lsls	r1, r2
 8000910:	40e7      	lsrs	r7, r4
 8000912:	464c      	mov	r4, r9
 8000914:	1e4a      	subs	r2, r1, #1
 8000916:	4191      	sbcs	r1, r2
 8000918:	433c      	orrs	r4, r7
 800091a:	4642      	mov	r2, r8
 800091c:	430c      	orrs	r4, r1
 800091e:	4661      	mov	r1, ip
 8000920:	40ca      	lsrs	r2, r1
 8000922:	1880      	adds	r0, r0, r2
 8000924:	e6f4      	b.n	8000710 <__aeabi_dadd+0x274>
 8000926:	4c79      	ldr	r4, [pc, #484]	; (8000b0c <__aeabi_dadd+0x670>)
 8000928:	42a2      	cmp	r2, r4
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x492>
 800092c:	e6fd      	b.n	800072a <__aeabi_dadd+0x28e>
 800092e:	1859      	adds	r1, r3, r1
 8000930:	4299      	cmp	r1, r3
 8000932:	419b      	sbcs	r3, r3
 8000934:	4440      	add	r0, r8
 8000936:	425f      	negs	r7, r3
 8000938:	19c7      	adds	r7, r0, r7
 800093a:	07fc      	lsls	r4, r7, #31
 800093c:	0849      	lsrs	r1, r1, #1
 800093e:	0016      	movs	r6, r2
 8000940:	430c      	orrs	r4, r1
 8000942:	087f      	lsrs	r7, r7, #1
 8000944:	e6cf      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000946:	1acc      	subs	r4, r1, r3
 8000948:	42a1      	cmp	r1, r4
 800094a:	41bf      	sbcs	r7, r7
 800094c:	4643      	mov	r3, r8
 800094e:	427f      	negs	r7, r7
 8000950:	1a18      	subs	r0, r3, r0
 8000952:	4655      	mov	r5, sl
 8000954:	1bc7      	subs	r7, r0, r7
 8000956:	e5f7      	b.n	8000548 <__aeabi_dadd+0xac>
 8000958:	08c9      	lsrs	r1, r1, #3
 800095a:	077b      	lsls	r3, r7, #29
 800095c:	4655      	mov	r5, sl
 800095e:	430b      	orrs	r3, r1
 8000960:	08f8      	lsrs	r0, r7, #3
 8000962:	e6c8      	b.n	80006f6 <__aeabi_dadd+0x25a>
 8000964:	2c00      	cmp	r4, #0
 8000966:	d000      	beq.n	800096a <__aeabi_dadd+0x4ce>
 8000968:	e081      	b.n	8000a6e <__aeabi_dadd+0x5d2>
 800096a:	4643      	mov	r3, r8
 800096c:	430b      	orrs	r3, r1
 800096e:	d115      	bne.n	800099c <__aeabi_dadd+0x500>
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	2500      	movs	r5, #0
 8000974:	0300      	lsls	r0, r0, #12
 8000976:	e6e3      	b.n	8000740 <__aeabi_dadd+0x2a4>
 8000978:	1a5c      	subs	r4, r3, r1
 800097a:	42a3      	cmp	r3, r4
 800097c:	419b      	sbcs	r3, r3
 800097e:	1bc7      	subs	r7, r0, r7
 8000980:	425b      	negs	r3, r3
 8000982:	2601      	movs	r6, #1
 8000984:	1aff      	subs	r7, r7, r3
 8000986:	e5da      	b.n	800053e <__aeabi_dadd+0xa2>
 8000988:	0742      	lsls	r2, r0, #29
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	4313      	orrs	r3, r2
 800098e:	08c0      	lsrs	r0, r0, #3
 8000990:	e6d2      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000992:	0742      	lsls	r2, r0, #29
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	4313      	orrs	r3, r2
 8000998:	08c0      	lsrs	r0, r0, #3
 800099a:	e6ac      	b.n	80006f6 <__aeabi_dadd+0x25a>
 800099c:	4643      	mov	r3, r8
 800099e:	4642      	mov	r2, r8
 80009a0:	08c9      	lsrs	r1, r1, #3
 80009a2:	075b      	lsls	r3, r3, #29
 80009a4:	4655      	mov	r5, sl
 80009a6:	430b      	orrs	r3, r1
 80009a8:	08d0      	lsrs	r0, r2, #3
 80009aa:	e6c5      	b.n	8000738 <__aeabi_dadd+0x29c>
 80009ac:	4643      	mov	r3, r8
 80009ae:	4642      	mov	r2, r8
 80009b0:	075b      	lsls	r3, r3, #29
 80009b2:	08c9      	lsrs	r1, r1, #3
 80009b4:	430b      	orrs	r3, r1
 80009b6:	08d0      	lsrs	r0, r2, #3
 80009b8:	e6be      	b.n	8000738 <__aeabi_dadd+0x29c>
 80009ba:	4303      	orrs	r3, r0
 80009bc:	001c      	movs	r4, r3
 80009be:	1e63      	subs	r3, r4, #1
 80009c0:	419c      	sbcs	r4, r3
 80009c2:	e6fc      	b.n	80007be <__aeabi_dadd+0x322>
 80009c4:	0002      	movs	r2, r0
 80009c6:	3c20      	subs	r4, #32
 80009c8:	40e2      	lsrs	r2, r4
 80009ca:	0014      	movs	r4, r2
 80009cc:	4662      	mov	r2, ip
 80009ce:	2a20      	cmp	r2, #32
 80009d0:	d003      	beq.n	80009da <__aeabi_dadd+0x53e>
 80009d2:	2540      	movs	r5, #64	; 0x40
 80009d4:	1aad      	subs	r5, r5, r2
 80009d6:	40a8      	lsls	r0, r5
 80009d8:	4303      	orrs	r3, r0
 80009da:	1e58      	subs	r0, r3, #1
 80009dc:	4183      	sbcs	r3, r0
 80009de:	4323      	orrs	r3, r4
 80009e0:	e775      	b.n	80008ce <__aeabi_dadd+0x432>
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d0e2      	beq.n	80009ac <__aeabi_dadd+0x510>
 80009e6:	003a      	movs	r2, r7
 80009e8:	430a      	orrs	r2, r1
 80009ea:	d0cd      	beq.n	8000988 <__aeabi_dadd+0x4ec>
 80009ec:	0742      	lsls	r2, r0, #29
 80009ee:	08db      	lsrs	r3, r3, #3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	2280      	movs	r2, #128	; 0x80
 80009f4:	08c0      	lsrs	r0, r0, #3
 80009f6:	0312      	lsls	r2, r2, #12
 80009f8:	4210      	tst	r0, r2
 80009fa:	d006      	beq.n	8000a0a <__aeabi_dadd+0x56e>
 80009fc:	08fc      	lsrs	r4, r7, #3
 80009fe:	4214      	tst	r4, r2
 8000a00:	d103      	bne.n	8000a0a <__aeabi_dadd+0x56e>
 8000a02:	0020      	movs	r0, r4
 8000a04:	08cb      	lsrs	r3, r1, #3
 8000a06:	077a      	lsls	r2, r7, #29
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	0f5a      	lsrs	r2, r3, #29
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	0752      	lsls	r2, r2, #29
 8000a10:	08db      	lsrs	r3, r3, #3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	e690      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000a16:	4643      	mov	r3, r8
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x582>
 8000a1c:	e709      	b.n	8000832 <__aeabi_dadd+0x396>
 8000a1e:	4643      	mov	r3, r8
 8000a20:	4642      	mov	r2, r8
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	075b      	lsls	r3, r3, #29
 8000a26:	4655      	mov	r5, sl
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	08d0      	lsrs	r0, r2, #3
 8000a2c:	e666      	b.n	80006fc <__aeabi_dadd+0x260>
 8000a2e:	1acc      	subs	r4, r1, r3
 8000a30:	42a1      	cmp	r1, r4
 8000a32:	4189      	sbcs	r1, r1
 8000a34:	1a3f      	subs	r7, r7, r0
 8000a36:	4249      	negs	r1, r1
 8000a38:	4655      	mov	r5, sl
 8000a3a:	2601      	movs	r6, #1
 8000a3c:	1a7f      	subs	r7, r7, r1
 8000a3e:	e57e      	b.n	800053e <__aeabi_dadd+0xa2>
 8000a40:	4642      	mov	r2, r8
 8000a42:	1a5c      	subs	r4, r3, r1
 8000a44:	1a87      	subs	r7, r0, r2
 8000a46:	42a3      	cmp	r3, r4
 8000a48:	4192      	sbcs	r2, r2
 8000a4a:	4252      	negs	r2, r2
 8000a4c:	1abf      	subs	r7, r7, r2
 8000a4e:	023a      	lsls	r2, r7, #8
 8000a50:	d53d      	bpl.n	8000ace <__aeabi_dadd+0x632>
 8000a52:	1acc      	subs	r4, r1, r3
 8000a54:	42a1      	cmp	r1, r4
 8000a56:	4189      	sbcs	r1, r1
 8000a58:	4643      	mov	r3, r8
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	1a1f      	subs	r7, r3, r0
 8000a5e:	4655      	mov	r5, sl
 8000a60:	1a7f      	subs	r7, r7, r1
 8000a62:	e595      	b.n	8000590 <__aeabi_dadd+0xf4>
 8000a64:	077b      	lsls	r3, r7, #29
 8000a66:	08c9      	lsrs	r1, r1, #3
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	08f8      	lsrs	r0, r7, #3
 8000a6c:	e643      	b.n	80006f6 <__aeabi_dadd+0x25a>
 8000a6e:	4644      	mov	r4, r8
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	430c      	orrs	r4, r1
 8000a74:	d130      	bne.n	8000ad8 <__aeabi_dadd+0x63c>
 8000a76:	0742      	lsls	r2, r0, #29
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	08c0      	lsrs	r0, r0, #3
 8000a7c:	e65c      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000a7e:	077b      	lsls	r3, r7, #29
 8000a80:	08c9      	lsrs	r1, r1, #3
 8000a82:	430b      	orrs	r3, r1
 8000a84:	08f8      	lsrs	r0, r7, #3
 8000a86:	e639      	b.n	80006fc <__aeabi_dadd+0x260>
 8000a88:	185c      	adds	r4, r3, r1
 8000a8a:	429c      	cmp	r4, r3
 8000a8c:	419b      	sbcs	r3, r3
 8000a8e:	4440      	add	r0, r8
 8000a90:	425b      	negs	r3, r3
 8000a92:	18c7      	adds	r7, r0, r3
 8000a94:	023b      	lsls	r3, r7, #8
 8000a96:	d400      	bmi.n	8000a9a <__aeabi_dadd+0x5fe>
 8000a98:	e625      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <__aeabi_dadd+0x674>)
 8000a9c:	2601      	movs	r6, #1
 8000a9e:	401f      	ands	r7, r3
 8000aa0:	e621      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000aa2:	0004      	movs	r4, r0
 8000aa4:	3a20      	subs	r2, #32
 8000aa6:	40d4      	lsrs	r4, r2
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	2a20      	cmp	r2, #32
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_dadd+0x61c>
 8000aae:	2240      	movs	r2, #64	; 0x40
 8000ab0:	4666      	mov	r6, ip
 8000ab2:	1b92      	subs	r2, r2, r6
 8000ab4:	4090      	lsls	r0, r2
 8000ab6:	4303      	orrs	r3, r0
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	4193      	sbcs	r3, r2
 8000abc:	431c      	orrs	r4, r3
 8000abe:	e67e      	b.n	80007be <__aeabi_dadd+0x322>
 8000ac0:	185c      	adds	r4, r3, r1
 8000ac2:	428c      	cmp	r4, r1
 8000ac4:	4189      	sbcs	r1, r1
 8000ac6:	4440      	add	r0, r8
 8000ac8:	4249      	negs	r1, r1
 8000aca:	1847      	adds	r7, r0, r1
 8000acc:	e6dd      	b.n	800088a <__aeabi_dadd+0x3ee>
 8000ace:	0023      	movs	r3, r4
 8000ad0:	433b      	orrs	r3, r7
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x63a>
 8000ad4:	e6ad      	b.n	8000832 <__aeabi_dadd+0x396>
 8000ad6:	e606      	b.n	80006e6 <__aeabi_dadd+0x24a>
 8000ad8:	0744      	lsls	r4, r0, #29
 8000ada:	4323      	orrs	r3, r4
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	08c0      	lsrs	r0, r0, #3
 8000ae0:	0324      	lsls	r4, r4, #12
 8000ae2:	4220      	tst	r0, r4
 8000ae4:	d008      	beq.n	8000af8 <__aeabi_dadd+0x65c>
 8000ae6:	4642      	mov	r2, r8
 8000ae8:	08d6      	lsrs	r6, r2, #3
 8000aea:	4226      	tst	r6, r4
 8000aec:	d104      	bne.n	8000af8 <__aeabi_dadd+0x65c>
 8000aee:	4655      	mov	r5, sl
 8000af0:	0030      	movs	r0, r6
 8000af2:	08cb      	lsrs	r3, r1, #3
 8000af4:	0751      	lsls	r1, r2, #29
 8000af6:	430b      	orrs	r3, r1
 8000af8:	0f5a      	lsrs	r2, r3, #29
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	0752      	lsls	r2, r2, #29
 8000b00:	4313      	orrs	r3, r2
 8000b02:	e619      	b.n	8000738 <__aeabi_dadd+0x29c>
 8000b04:	2300      	movs	r3, #0
 8000b06:	4a01      	ldr	r2, [pc, #4]	; (8000b0c <__aeabi_dadd+0x670>)
 8000b08:	001f      	movs	r7, r3
 8000b0a:	e55e      	b.n	80005ca <__aeabi_dadd+0x12e>
 8000b0c:	000007ff 	.word	0x000007ff
 8000b10:	ff7fffff 	.word	0xff7fffff

08000b14 <__aeabi_ddiv>:
 8000b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b16:	4657      	mov	r7, sl
 8000b18:	464e      	mov	r6, r9
 8000b1a:	4645      	mov	r5, r8
 8000b1c:	46de      	mov	lr, fp
 8000b1e:	b5e0      	push	{r5, r6, r7, lr}
 8000b20:	4681      	mov	r9, r0
 8000b22:	0005      	movs	r5, r0
 8000b24:	030c      	lsls	r4, r1, #12
 8000b26:	0048      	lsls	r0, r1, #1
 8000b28:	4692      	mov	sl, r2
 8000b2a:	001f      	movs	r7, r3
 8000b2c:	b085      	sub	sp, #20
 8000b2e:	0b24      	lsrs	r4, r4, #12
 8000b30:	0d40      	lsrs	r0, r0, #21
 8000b32:	0fce      	lsrs	r6, r1, #31
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d100      	bne.n	8000b3a <__aeabi_ddiv+0x26>
 8000b38:	e156      	b.n	8000de8 <__aeabi_ddiv+0x2d4>
 8000b3a:	4bd4      	ldr	r3, [pc, #848]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000b3c:	4298      	cmp	r0, r3
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_ddiv+0x2e>
 8000b40:	e172      	b.n	8000e28 <__aeabi_ddiv+0x314>
 8000b42:	0f6b      	lsrs	r3, r5, #29
 8000b44:	00e4      	lsls	r4, r4, #3
 8000b46:	431c      	orrs	r4, r3
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	041b      	lsls	r3, r3, #16
 8000b4c:	4323      	orrs	r3, r4
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4bcf      	ldr	r3, [pc, #828]	; (8000e90 <__aeabi_ddiv+0x37c>)
 8000b52:	00ed      	lsls	r5, r5, #3
 8000b54:	469b      	mov	fp, r3
 8000b56:	2300      	movs	r3, #0
 8000b58:	4699      	mov	r9, r3
 8000b5a:	4483      	add	fp, r0
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	033c      	lsls	r4, r7, #12
 8000b60:	007b      	lsls	r3, r7, #1
 8000b62:	4650      	mov	r0, sl
 8000b64:	0b24      	lsrs	r4, r4, #12
 8000b66:	0d5b      	lsrs	r3, r3, #21
 8000b68:	0fff      	lsrs	r7, r7, #31
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_ddiv+0x5c>
 8000b6e:	e11f      	b.n	8000db0 <__aeabi_ddiv+0x29c>
 8000b70:	4ac6      	ldr	r2, [pc, #792]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d100      	bne.n	8000b78 <__aeabi_ddiv+0x64>
 8000b76:	e162      	b.n	8000e3e <__aeabi_ddiv+0x32a>
 8000b78:	49c5      	ldr	r1, [pc, #788]	; (8000e90 <__aeabi_ddiv+0x37c>)
 8000b7a:	0f42      	lsrs	r2, r0, #29
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	00e4      	lsls	r4, r4, #3
 8000b80:	4659      	mov	r1, fp
 8000b82:	4314      	orrs	r4, r2
 8000b84:	2280      	movs	r2, #128	; 0x80
 8000b86:	4463      	add	r3, ip
 8000b88:	0412      	lsls	r2, r2, #16
 8000b8a:	1acb      	subs	r3, r1, r3
 8000b8c:	4314      	orrs	r4, r2
 8000b8e:	469b      	mov	fp, r3
 8000b90:	00c2      	lsls	r2, r0, #3
 8000b92:	2000      	movs	r0, #0
 8000b94:	0033      	movs	r3, r6
 8000b96:	407b      	eors	r3, r7
 8000b98:	469a      	mov	sl, r3
 8000b9a:	464b      	mov	r3, r9
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d827      	bhi.n	8000bf0 <__aeabi_ddiv+0xdc>
 8000ba0:	49bc      	ldr	r1, [pc, #752]	; (8000e94 <__aeabi_ddiv+0x380>)
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	58cb      	ldr	r3, [r1, r3]
 8000ba6:	469f      	mov	pc, r3
 8000ba8:	46b2      	mov	sl, r6
 8000baa:	9b00      	ldr	r3, [sp, #0]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d016      	beq.n	8000bde <__aeabi_ddiv+0xca>
 8000bb0:	2b03      	cmp	r3, #3
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_ddiv+0xa2>
 8000bb4:	e28e      	b.n	80010d4 <__aeabi_ddiv+0x5c0>
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d000      	beq.n	8000bbc <__aeabi_ddiv+0xa8>
 8000bba:	e0d9      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	2400      	movs	r4, #0
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	051b      	lsls	r3, r3, #20
 8000bc6:	4323      	orrs	r3, r4
 8000bc8:	07d2      	lsls	r2, r2, #31
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	0028      	movs	r0, r5
 8000bce:	0019      	movs	r1, r3
 8000bd0:	b005      	add	sp, #20
 8000bd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000bd4:	46bb      	mov	fp, r7
 8000bd6:	46b2      	mov	sl, r6
 8000bd8:	46a9      	mov	r9, r5
 8000bda:	46a0      	mov	r8, r4
 8000bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bde:	2400      	movs	r4, #0
 8000be0:	2500      	movs	r5, #0
 8000be2:	4baa      	ldr	r3, [pc, #680]	; (8000e8c <__aeabi_ddiv+0x378>)
 8000be4:	e7ed      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000be6:	46ba      	mov	sl, r7
 8000be8:	46a0      	mov	r8, r4
 8000bea:	0015      	movs	r5, r2
 8000bec:	9000      	str	r0, [sp, #0]
 8000bee:	e7dc      	b.n	8000baa <__aeabi_ddiv+0x96>
 8000bf0:	4544      	cmp	r4, r8
 8000bf2:	d200      	bcs.n	8000bf6 <__aeabi_ddiv+0xe2>
 8000bf4:	e1c7      	b.n	8000f86 <__aeabi_ddiv+0x472>
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_ddiv+0xe6>
 8000bf8:	e1c2      	b.n	8000f80 <__aeabi_ddiv+0x46c>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	469c      	mov	ip, r3
 8000c00:	002e      	movs	r6, r5
 8000c02:	4640      	mov	r0, r8
 8000c04:	2500      	movs	r5, #0
 8000c06:	44e3      	add	fp, ip
 8000c08:	0223      	lsls	r3, r4, #8
 8000c0a:	0e14      	lsrs	r4, r2, #24
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	0c1b      	lsrs	r3, r3, #16
 8000c10:	4699      	mov	r9, r3
 8000c12:	0423      	lsls	r3, r4, #16
 8000c14:	0c1f      	lsrs	r7, r3, #16
 8000c16:	0212      	lsls	r2, r2, #8
 8000c18:	4649      	mov	r1, r9
 8000c1a:	9200      	str	r2, [sp, #0]
 8000c1c:	9701      	str	r7, [sp, #4]
 8000c1e:	f7ff fb0f 	bl	8000240 <__aeabi_uidivmod>
 8000c22:	0002      	movs	r2, r0
 8000c24:	437a      	muls	r2, r7
 8000c26:	040b      	lsls	r3, r1, #16
 8000c28:	0c31      	lsrs	r1, r6, #16
 8000c2a:	4680      	mov	r8, r0
 8000c2c:	4319      	orrs	r1, r3
 8000c2e:	428a      	cmp	r2, r1
 8000c30:	d907      	bls.n	8000c42 <__aeabi_ddiv+0x12e>
 8000c32:	2301      	movs	r3, #1
 8000c34:	425b      	negs	r3, r3
 8000c36:	469c      	mov	ip, r3
 8000c38:	1909      	adds	r1, r1, r4
 8000c3a:	44e0      	add	r8, ip
 8000c3c:	428c      	cmp	r4, r1
 8000c3e:	d800      	bhi.n	8000c42 <__aeabi_ddiv+0x12e>
 8000c40:	e207      	b.n	8001052 <__aeabi_ddiv+0x53e>
 8000c42:	1a88      	subs	r0, r1, r2
 8000c44:	4649      	mov	r1, r9
 8000c46:	f7ff fafb 	bl	8000240 <__aeabi_uidivmod>
 8000c4a:	0409      	lsls	r1, r1, #16
 8000c4c:	468c      	mov	ip, r1
 8000c4e:	0431      	lsls	r1, r6, #16
 8000c50:	4666      	mov	r6, ip
 8000c52:	9a01      	ldr	r2, [sp, #4]
 8000c54:	0c09      	lsrs	r1, r1, #16
 8000c56:	4342      	muls	r2, r0
 8000c58:	0003      	movs	r3, r0
 8000c5a:	4331      	orrs	r1, r6
 8000c5c:	428a      	cmp	r2, r1
 8000c5e:	d904      	bls.n	8000c6a <__aeabi_ddiv+0x156>
 8000c60:	1909      	adds	r1, r1, r4
 8000c62:	3b01      	subs	r3, #1
 8000c64:	428c      	cmp	r4, r1
 8000c66:	d800      	bhi.n	8000c6a <__aeabi_ddiv+0x156>
 8000c68:	e1ed      	b.n	8001046 <__aeabi_ddiv+0x532>
 8000c6a:	1a88      	subs	r0, r1, r2
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	0412      	lsls	r2, r2, #16
 8000c70:	431a      	orrs	r2, r3
 8000c72:	4690      	mov	r8, r2
 8000c74:	4641      	mov	r1, r8
 8000c76:	9b00      	ldr	r3, [sp, #0]
 8000c78:	040e      	lsls	r6, r1, #16
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	001f      	movs	r7, r3
 8000c7e:	9302      	str	r3, [sp, #8]
 8000c80:	9b00      	ldr	r3, [sp, #0]
 8000c82:	0c36      	lsrs	r6, r6, #16
 8000c84:	041b      	lsls	r3, r3, #16
 8000c86:	0c19      	lsrs	r1, r3, #16
 8000c88:	000b      	movs	r3, r1
 8000c8a:	4373      	muls	r3, r6
 8000c8c:	0c12      	lsrs	r2, r2, #16
 8000c8e:	437e      	muls	r6, r7
 8000c90:	9103      	str	r1, [sp, #12]
 8000c92:	4351      	muls	r1, r2
 8000c94:	437a      	muls	r2, r7
 8000c96:	0c1f      	lsrs	r7, r3, #16
 8000c98:	46bc      	mov	ip, r7
 8000c9a:	1876      	adds	r6, r6, r1
 8000c9c:	4466      	add	r6, ip
 8000c9e:	42b1      	cmp	r1, r6
 8000ca0:	d903      	bls.n	8000caa <__aeabi_ddiv+0x196>
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	0249      	lsls	r1, r1, #9
 8000ca6:	468c      	mov	ip, r1
 8000ca8:	4462      	add	r2, ip
 8000caa:	0c31      	lsrs	r1, r6, #16
 8000cac:	188a      	adds	r2, r1, r2
 8000cae:	0431      	lsls	r1, r6, #16
 8000cb0:	041e      	lsls	r6, r3, #16
 8000cb2:	0c36      	lsrs	r6, r6, #16
 8000cb4:	198e      	adds	r6, r1, r6
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d302      	bcc.n	8000cc0 <__aeabi_ddiv+0x1ac>
 8000cba:	d112      	bne.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8000cbc:	42b5      	cmp	r5, r6
 8000cbe:	d210      	bcs.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8000cc0:	4643      	mov	r3, r8
 8000cc2:	1e59      	subs	r1, r3, #1
 8000cc4:	9b00      	ldr	r3, [sp, #0]
 8000cc6:	469c      	mov	ip, r3
 8000cc8:	4465      	add	r5, ip
 8000cca:	001f      	movs	r7, r3
 8000ccc:	429d      	cmp	r5, r3
 8000cce:	419b      	sbcs	r3, r3
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	191b      	adds	r3, r3, r4
 8000cd4:	18c0      	adds	r0, r0, r3
 8000cd6:	4284      	cmp	r4, r0
 8000cd8:	d200      	bcs.n	8000cdc <__aeabi_ddiv+0x1c8>
 8000cda:	e1a0      	b.n	800101e <__aeabi_ddiv+0x50a>
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_ddiv+0x1cc>
 8000cde:	e19b      	b.n	8001018 <__aeabi_ddiv+0x504>
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	1bae      	subs	r6, r5, r6
 8000ce4:	42b5      	cmp	r5, r6
 8000ce6:	41ad      	sbcs	r5, r5
 8000ce8:	1a80      	subs	r0, r0, r2
 8000cea:	426d      	negs	r5, r5
 8000cec:	1b40      	subs	r0, r0, r5
 8000cee:	4284      	cmp	r4, r0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_ddiv+0x1e0>
 8000cf2:	e1d5      	b.n	80010a0 <__aeabi_ddiv+0x58c>
 8000cf4:	4649      	mov	r1, r9
 8000cf6:	f7ff faa3 	bl	8000240 <__aeabi_uidivmod>
 8000cfa:	9a01      	ldr	r2, [sp, #4]
 8000cfc:	040b      	lsls	r3, r1, #16
 8000cfe:	4342      	muls	r2, r0
 8000d00:	0c31      	lsrs	r1, r6, #16
 8000d02:	0005      	movs	r5, r0
 8000d04:	4319      	orrs	r1, r3
 8000d06:	428a      	cmp	r2, r1
 8000d08:	d900      	bls.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000d0a:	e16c      	b.n	8000fe6 <__aeabi_ddiv+0x4d2>
 8000d0c:	1a88      	subs	r0, r1, r2
 8000d0e:	4649      	mov	r1, r9
 8000d10:	f7ff fa96 	bl	8000240 <__aeabi_uidivmod>
 8000d14:	9a01      	ldr	r2, [sp, #4]
 8000d16:	0436      	lsls	r6, r6, #16
 8000d18:	4342      	muls	r2, r0
 8000d1a:	0409      	lsls	r1, r1, #16
 8000d1c:	0c36      	lsrs	r6, r6, #16
 8000d1e:	0003      	movs	r3, r0
 8000d20:	430e      	orrs	r6, r1
 8000d22:	42b2      	cmp	r2, r6
 8000d24:	d900      	bls.n	8000d28 <__aeabi_ddiv+0x214>
 8000d26:	e153      	b.n	8000fd0 <__aeabi_ddiv+0x4bc>
 8000d28:	9803      	ldr	r0, [sp, #12]
 8000d2a:	1ab6      	subs	r6, r6, r2
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	042d      	lsls	r5, r5, #16
 8000d30:	431d      	orrs	r5, r3
 8000d32:	9f02      	ldr	r7, [sp, #8]
 8000d34:	042b      	lsls	r3, r5, #16
 8000d36:	0c1b      	lsrs	r3, r3, #16
 8000d38:	435a      	muls	r2, r3
 8000d3a:	437b      	muls	r3, r7
 8000d3c:	469c      	mov	ip, r3
 8000d3e:	0c29      	lsrs	r1, r5, #16
 8000d40:	4348      	muls	r0, r1
 8000d42:	0c13      	lsrs	r3, r2, #16
 8000d44:	4484      	add	ip, r0
 8000d46:	4463      	add	r3, ip
 8000d48:	4379      	muls	r1, r7
 8000d4a:	4298      	cmp	r0, r3
 8000d4c:	d903      	bls.n	8000d56 <__aeabi_ddiv+0x242>
 8000d4e:	2080      	movs	r0, #128	; 0x80
 8000d50:	0240      	lsls	r0, r0, #9
 8000d52:	4684      	mov	ip, r0
 8000d54:	4461      	add	r1, ip
 8000d56:	0c18      	lsrs	r0, r3, #16
 8000d58:	0412      	lsls	r2, r2, #16
 8000d5a:	041b      	lsls	r3, r3, #16
 8000d5c:	0c12      	lsrs	r2, r2, #16
 8000d5e:	1841      	adds	r1, r0, r1
 8000d60:	189b      	adds	r3, r3, r2
 8000d62:	428e      	cmp	r6, r1
 8000d64:	d200      	bcs.n	8000d68 <__aeabi_ddiv+0x254>
 8000d66:	e0ff      	b.n	8000f68 <__aeabi_ddiv+0x454>
 8000d68:	d100      	bne.n	8000d6c <__aeabi_ddiv+0x258>
 8000d6a:	e0fa      	b.n	8000f62 <__aeabi_ddiv+0x44e>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	431d      	orrs	r5, r3
 8000d70:	4a49      	ldr	r2, [pc, #292]	; (8000e98 <__aeabi_ddiv+0x384>)
 8000d72:	445a      	add	r2, fp
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	dc00      	bgt.n	8000d7a <__aeabi_ddiv+0x266>
 8000d78:	e0aa      	b.n	8000ed0 <__aeabi_ddiv+0x3bc>
 8000d7a:	076b      	lsls	r3, r5, #29
 8000d7c:	d000      	beq.n	8000d80 <__aeabi_ddiv+0x26c>
 8000d7e:	e13d      	b.n	8000ffc <__aeabi_ddiv+0x4e8>
 8000d80:	08ed      	lsrs	r5, r5, #3
 8000d82:	4643      	mov	r3, r8
 8000d84:	01db      	lsls	r3, r3, #7
 8000d86:	d506      	bpl.n	8000d96 <__aeabi_ddiv+0x282>
 8000d88:	4642      	mov	r2, r8
 8000d8a:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <__aeabi_ddiv+0x388>)
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	4690      	mov	r8, r2
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	00d2      	lsls	r2, r2, #3
 8000d94:	445a      	add	r2, fp
 8000d96:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <__aeabi_ddiv+0x38c>)
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_ddiv+0x28a>
 8000d9c:	e71f      	b.n	8000bde <__aeabi_ddiv+0xca>
 8000d9e:	4643      	mov	r3, r8
 8000da0:	075b      	lsls	r3, r3, #29
 8000da2:	431d      	orrs	r5, r3
 8000da4:	4643      	mov	r3, r8
 8000da6:	0552      	lsls	r2, r2, #21
 8000da8:	025c      	lsls	r4, r3, #9
 8000daa:	0b24      	lsrs	r4, r4, #12
 8000dac:	0d53      	lsrs	r3, r2, #21
 8000dae:	e708      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000db0:	4652      	mov	r2, sl
 8000db2:	4322      	orrs	r2, r4
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x2a4>
 8000db6:	e07b      	b.n	8000eb0 <__aeabi_ddiv+0x39c>
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d100      	bne.n	8000dbe <__aeabi_ddiv+0x2aa>
 8000dbc:	e0fa      	b.n	8000fb4 <__aeabi_ddiv+0x4a0>
 8000dbe:	0020      	movs	r0, r4
 8000dc0:	f001 f952 	bl	8002068 <__clzsi2>
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	3a0b      	subs	r2, #11
 8000dc8:	231d      	movs	r3, #29
 8000dca:	0001      	movs	r1, r0
 8000dcc:	1a9b      	subs	r3, r3, r2
 8000dce:	4652      	mov	r2, sl
 8000dd0:	3908      	subs	r1, #8
 8000dd2:	40da      	lsrs	r2, r3
 8000dd4:	408c      	lsls	r4, r1
 8000dd6:	4314      	orrs	r4, r2
 8000dd8:	4652      	mov	r2, sl
 8000dda:	408a      	lsls	r2, r1
 8000ddc:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <__aeabi_ddiv+0x390>)
 8000dde:	4458      	add	r0, fp
 8000de0:	469b      	mov	fp, r3
 8000de2:	4483      	add	fp, r0
 8000de4:	2000      	movs	r0, #0
 8000de6:	e6d5      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000de8:	464b      	mov	r3, r9
 8000dea:	4323      	orrs	r3, r4
 8000dec:	4698      	mov	r8, r3
 8000dee:	d044      	beq.n	8000e7a <__aeabi_ddiv+0x366>
 8000df0:	2c00      	cmp	r4, #0
 8000df2:	d100      	bne.n	8000df6 <__aeabi_ddiv+0x2e2>
 8000df4:	e0ce      	b.n	8000f94 <__aeabi_ddiv+0x480>
 8000df6:	0020      	movs	r0, r4
 8000df8:	f001 f936 	bl	8002068 <__clzsi2>
 8000dfc:	0001      	movs	r1, r0
 8000dfe:	0002      	movs	r2, r0
 8000e00:	390b      	subs	r1, #11
 8000e02:	231d      	movs	r3, #29
 8000e04:	1a5b      	subs	r3, r3, r1
 8000e06:	4649      	mov	r1, r9
 8000e08:	0010      	movs	r0, r2
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	3808      	subs	r0, #8
 8000e0e:	4084      	lsls	r4, r0
 8000e10:	000b      	movs	r3, r1
 8000e12:	464d      	mov	r5, r9
 8000e14:	4323      	orrs	r3, r4
 8000e16:	4698      	mov	r8, r3
 8000e18:	4085      	lsls	r5, r0
 8000e1a:	4823      	ldr	r0, [pc, #140]	; (8000ea8 <__aeabi_ddiv+0x394>)
 8000e1c:	1a83      	subs	r3, r0, r2
 8000e1e:	469b      	mov	fp, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	4699      	mov	r9, r3
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	e69a      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e28:	464b      	mov	r3, r9
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	d11d      	bne.n	8000e6c <__aeabi_ddiv+0x358>
 8000e30:	2308      	movs	r3, #8
 8000e32:	4699      	mov	r9, r3
 8000e34:	3b06      	subs	r3, #6
 8000e36:	2500      	movs	r5, #0
 8000e38:	4683      	mov	fp, r0
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	e68f      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e3e:	4652      	mov	r2, sl
 8000e40:	4322      	orrs	r2, r4
 8000e42:	d109      	bne.n	8000e58 <__aeabi_ddiv+0x344>
 8000e44:	2302      	movs	r3, #2
 8000e46:	4649      	mov	r1, r9
 8000e48:	4319      	orrs	r1, r3
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <__aeabi_ddiv+0x398>)
 8000e4c:	4689      	mov	r9, r1
 8000e4e:	469c      	mov	ip, r3
 8000e50:	2400      	movs	r4, #0
 8000e52:	2002      	movs	r0, #2
 8000e54:	44e3      	add	fp, ip
 8000e56:	e69d      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000e58:	2303      	movs	r3, #3
 8000e5a:	464a      	mov	r2, r9
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <__aeabi_ddiv+0x398>)
 8000e60:	4691      	mov	r9, r2
 8000e62:	469c      	mov	ip, r3
 8000e64:	4652      	mov	r2, sl
 8000e66:	2003      	movs	r0, #3
 8000e68:	44e3      	add	fp, ip
 8000e6a:	e693      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	4699      	mov	r9, r3
 8000e70:	3b09      	subs	r3, #9
 8000e72:	46a0      	mov	r8, r4
 8000e74:	4683      	mov	fp, r0
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	e671      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	2300      	movs	r3, #0
 8000e80:	469b      	mov	fp, r3
 8000e82:	3301      	adds	r3, #1
 8000e84:	2500      	movs	r5, #0
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e669      	b.n	8000b5e <__aeabi_ddiv+0x4a>
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	000007ff 	.word	0x000007ff
 8000e90:	fffffc01 	.word	0xfffffc01
 8000e94:	080084d8 	.word	0x080084d8
 8000e98:	000003ff 	.word	0x000003ff
 8000e9c:	feffffff 	.word	0xfeffffff
 8000ea0:	000007fe 	.word	0x000007fe
 8000ea4:	000003f3 	.word	0x000003f3
 8000ea8:	fffffc0d 	.word	0xfffffc0d
 8000eac:	fffff801 	.word	0xfffff801
 8000eb0:	4649      	mov	r1, r9
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	4319      	orrs	r1, r3
 8000eb6:	4689      	mov	r9, r1
 8000eb8:	2400      	movs	r4, #0
 8000eba:	2001      	movs	r0, #1
 8000ebc:	e66a      	b.n	8000b94 <__aeabi_ddiv+0x80>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	2480      	movs	r4, #128	; 0x80
 8000ec2:	469a      	mov	sl, r3
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	4b8a      	ldr	r3, [pc, #552]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000ec8:	0324      	lsls	r4, r4, #12
 8000eca:	e67a      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000ecc:	2501      	movs	r5, #1
 8000ece:	426d      	negs	r5, r5
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	2b38      	cmp	r3, #56	; 0x38
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_ddiv+0x3c6>
 8000ed8:	e670      	b.n	8000bbc <__aeabi_ddiv+0xa8>
 8000eda:	2b1f      	cmp	r3, #31
 8000edc:	dc00      	bgt.n	8000ee0 <__aeabi_ddiv+0x3cc>
 8000ede:	e0bf      	b.n	8001060 <__aeabi_ddiv+0x54c>
 8000ee0:	211f      	movs	r1, #31
 8000ee2:	4249      	negs	r1, r1
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	4641      	mov	r1, r8
 8000ee8:	40d1      	lsrs	r1, r2
 8000eea:	000a      	movs	r2, r1
 8000eec:	2b20      	cmp	r3, #32
 8000eee:	d004      	beq.n	8000efa <__aeabi_ddiv+0x3e6>
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <__aeabi_ddiv+0x5e0>)
 8000ef4:	445b      	add	r3, fp
 8000ef6:	4099      	lsls	r1, r3
 8000ef8:	430d      	orrs	r5, r1
 8000efa:	1e6b      	subs	r3, r5, #1
 8000efc:	419d      	sbcs	r5, r3
 8000efe:	2307      	movs	r3, #7
 8000f00:	432a      	orrs	r2, r5
 8000f02:	001d      	movs	r5, r3
 8000f04:	2400      	movs	r4, #0
 8000f06:	4015      	ands	r5, r2
 8000f08:	4213      	tst	r3, r2
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_ddiv+0x3fa>
 8000f0c:	e0d4      	b.n	80010b8 <__aeabi_ddiv+0x5a4>
 8000f0e:	210f      	movs	r1, #15
 8000f10:	2300      	movs	r3, #0
 8000f12:	4011      	ands	r1, r2
 8000f14:	2904      	cmp	r1, #4
 8000f16:	d100      	bne.n	8000f1a <__aeabi_ddiv+0x406>
 8000f18:	e0cb      	b.n	80010b2 <__aeabi_ddiv+0x59e>
 8000f1a:	1d11      	adds	r1, r2, #4
 8000f1c:	4291      	cmp	r1, r2
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	4252      	negs	r2, r2
 8000f22:	189b      	adds	r3, r3, r2
 8000f24:	000a      	movs	r2, r1
 8000f26:	0219      	lsls	r1, r3, #8
 8000f28:	d400      	bmi.n	8000f2c <__aeabi_ddiv+0x418>
 8000f2a:	e0c2      	b.n	80010b2 <__aeabi_ddiv+0x59e>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	2400      	movs	r4, #0
 8000f30:	2500      	movs	r5, #0
 8000f32:	e646      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	4641      	mov	r1, r8
 8000f38:	031b      	lsls	r3, r3, #12
 8000f3a:	4219      	tst	r1, r3
 8000f3c:	d008      	beq.n	8000f50 <__aeabi_ddiv+0x43c>
 8000f3e:	421c      	tst	r4, r3
 8000f40:	d106      	bne.n	8000f50 <__aeabi_ddiv+0x43c>
 8000f42:	431c      	orrs	r4, r3
 8000f44:	0324      	lsls	r4, r4, #12
 8000f46:	46ba      	mov	sl, r7
 8000f48:	0015      	movs	r5, r2
 8000f4a:	4b69      	ldr	r3, [pc, #420]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000f4c:	0b24      	lsrs	r4, r4, #12
 8000f4e:	e638      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f50:	2480      	movs	r4, #128	; 0x80
 8000f52:	4643      	mov	r3, r8
 8000f54:	0324      	lsls	r4, r4, #12
 8000f56:	431c      	orrs	r4, r3
 8000f58:	0324      	lsls	r4, r4, #12
 8000f5a:	46b2      	mov	sl, r6
 8000f5c:	4b64      	ldr	r3, [pc, #400]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 8000f5e:	0b24      	lsrs	r4, r4, #12
 8000f60:	e62f      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x454>
 8000f66:	e703      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 8000f68:	19a6      	adds	r6, r4, r6
 8000f6a:	1e68      	subs	r0, r5, #1
 8000f6c:	42a6      	cmp	r6, r4
 8000f6e:	d200      	bcs.n	8000f72 <__aeabi_ddiv+0x45e>
 8000f70:	e08d      	b.n	800108e <__aeabi_ddiv+0x57a>
 8000f72:	428e      	cmp	r6, r1
 8000f74:	d200      	bcs.n	8000f78 <__aeabi_ddiv+0x464>
 8000f76:	e0a3      	b.n	80010c0 <__aeabi_ddiv+0x5ac>
 8000f78:	d100      	bne.n	8000f7c <__aeabi_ddiv+0x468>
 8000f7a:	e0b3      	b.n	80010e4 <__aeabi_ddiv+0x5d0>
 8000f7c:	0005      	movs	r5, r0
 8000f7e:	e6f5      	b.n	8000d6c <__aeabi_ddiv+0x258>
 8000f80:	42aa      	cmp	r2, r5
 8000f82:	d900      	bls.n	8000f86 <__aeabi_ddiv+0x472>
 8000f84:	e639      	b.n	8000bfa <__aeabi_ddiv+0xe6>
 8000f86:	4643      	mov	r3, r8
 8000f88:	07de      	lsls	r6, r3, #31
 8000f8a:	0858      	lsrs	r0, r3, #1
 8000f8c:	086b      	lsrs	r3, r5, #1
 8000f8e:	431e      	orrs	r6, r3
 8000f90:	07ed      	lsls	r5, r5, #31
 8000f92:	e639      	b.n	8000c08 <__aeabi_ddiv+0xf4>
 8000f94:	4648      	mov	r0, r9
 8000f96:	f001 f867 	bl	8002068 <__clzsi2>
 8000f9a:	0001      	movs	r1, r0
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	3115      	adds	r1, #21
 8000fa0:	3220      	adds	r2, #32
 8000fa2:	291c      	cmp	r1, #28
 8000fa4:	dc00      	bgt.n	8000fa8 <__aeabi_ddiv+0x494>
 8000fa6:	e72c      	b.n	8000e02 <__aeabi_ddiv+0x2ee>
 8000fa8:	464b      	mov	r3, r9
 8000faa:	3808      	subs	r0, #8
 8000fac:	4083      	lsls	r3, r0
 8000fae:	2500      	movs	r5, #0
 8000fb0:	4698      	mov	r8, r3
 8000fb2:	e732      	b.n	8000e1a <__aeabi_ddiv+0x306>
 8000fb4:	f001 f858 	bl	8002068 <__clzsi2>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	001a      	movs	r2, r3
 8000fbc:	3215      	adds	r2, #21
 8000fbe:	3020      	adds	r0, #32
 8000fc0:	2a1c      	cmp	r2, #28
 8000fc2:	dc00      	bgt.n	8000fc6 <__aeabi_ddiv+0x4b2>
 8000fc4:	e700      	b.n	8000dc8 <__aeabi_ddiv+0x2b4>
 8000fc6:	4654      	mov	r4, sl
 8000fc8:	3b08      	subs	r3, #8
 8000fca:	2200      	movs	r2, #0
 8000fcc:	409c      	lsls	r4, r3
 8000fce:	e705      	b.n	8000ddc <__aeabi_ddiv+0x2c8>
 8000fd0:	1936      	adds	r6, r6, r4
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	42b4      	cmp	r4, r6
 8000fd6:	d900      	bls.n	8000fda <__aeabi_ddiv+0x4c6>
 8000fd8:	e6a6      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fda:	42b2      	cmp	r2, r6
 8000fdc:	d800      	bhi.n	8000fe0 <__aeabi_ddiv+0x4cc>
 8000fde:	e6a3      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fe0:	1e83      	subs	r3, r0, #2
 8000fe2:	1936      	adds	r6, r6, r4
 8000fe4:	e6a0      	b.n	8000d28 <__aeabi_ddiv+0x214>
 8000fe6:	1909      	adds	r1, r1, r4
 8000fe8:	3d01      	subs	r5, #1
 8000fea:	428c      	cmp	r4, r1
 8000fec:	d900      	bls.n	8000ff0 <__aeabi_ddiv+0x4dc>
 8000fee:	e68d      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ff0:	428a      	cmp	r2, r1
 8000ff2:	d800      	bhi.n	8000ff6 <__aeabi_ddiv+0x4e2>
 8000ff4:	e68a      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ff6:	1e85      	subs	r5, r0, #2
 8000ff8:	1909      	adds	r1, r1, r4
 8000ffa:	e687      	b.n	8000d0c <__aeabi_ddiv+0x1f8>
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	402b      	ands	r3, r5
 8001000:	2b04      	cmp	r3, #4
 8001002:	d100      	bne.n	8001006 <__aeabi_ddiv+0x4f2>
 8001004:	e6bc      	b.n	8000d80 <__aeabi_ddiv+0x26c>
 8001006:	2305      	movs	r3, #5
 8001008:	425b      	negs	r3, r3
 800100a:	42ab      	cmp	r3, r5
 800100c:	419b      	sbcs	r3, r3
 800100e:	3504      	adds	r5, #4
 8001010:	425b      	negs	r3, r3
 8001012:	08ed      	lsrs	r5, r5, #3
 8001014:	4498      	add	r8, r3
 8001016:	e6b4      	b.n	8000d82 <__aeabi_ddiv+0x26e>
 8001018:	42af      	cmp	r7, r5
 800101a:	d900      	bls.n	800101e <__aeabi_ddiv+0x50a>
 800101c:	e660      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 800101e:	4282      	cmp	r2, r0
 8001020:	d804      	bhi.n	800102c <__aeabi_ddiv+0x518>
 8001022:	d000      	beq.n	8001026 <__aeabi_ddiv+0x512>
 8001024:	e65c      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 8001026:	42ae      	cmp	r6, r5
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x518>
 800102a:	e659      	b.n	8000ce0 <__aeabi_ddiv+0x1cc>
 800102c:	2302      	movs	r3, #2
 800102e:	425b      	negs	r3, r3
 8001030:	469c      	mov	ip, r3
 8001032:	9b00      	ldr	r3, [sp, #0]
 8001034:	44e0      	add	r8, ip
 8001036:	469c      	mov	ip, r3
 8001038:	4465      	add	r5, ip
 800103a:	429d      	cmp	r5, r3
 800103c:	419b      	sbcs	r3, r3
 800103e:	425b      	negs	r3, r3
 8001040:	191b      	adds	r3, r3, r4
 8001042:	18c0      	adds	r0, r0, r3
 8001044:	e64d      	b.n	8000ce2 <__aeabi_ddiv+0x1ce>
 8001046:	428a      	cmp	r2, r1
 8001048:	d800      	bhi.n	800104c <__aeabi_ddiv+0x538>
 800104a:	e60e      	b.n	8000c6a <__aeabi_ddiv+0x156>
 800104c:	1e83      	subs	r3, r0, #2
 800104e:	1909      	adds	r1, r1, r4
 8001050:	e60b      	b.n	8000c6a <__aeabi_ddiv+0x156>
 8001052:	428a      	cmp	r2, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x544>
 8001056:	e5f4      	b.n	8000c42 <__aeabi_ddiv+0x12e>
 8001058:	1e83      	subs	r3, r0, #2
 800105a:	4698      	mov	r8, r3
 800105c:	1909      	adds	r1, r1, r4
 800105e:	e5f0      	b.n	8000c42 <__aeabi_ddiv+0x12e>
 8001060:	4925      	ldr	r1, [pc, #148]	; (80010f8 <__aeabi_ddiv+0x5e4>)
 8001062:	0028      	movs	r0, r5
 8001064:	4459      	add	r1, fp
 8001066:	408d      	lsls	r5, r1
 8001068:	4642      	mov	r2, r8
 800106a:	408a      	lsls	r2, r1
 800106c:	1e69      	subs	r1, r5, #1
 800106e:	418d      	sbcs	r5, r1
 8001070:	4641      	mov	r1, r8
 8001072:	40d8      	lsrs	r0, r3
 8001074:	40d9      	lsrs	r1, r3
 8001076:	4302      	orrs	r2, r0
 8001078:	432a      	orrs	r2, r5
 800107a:	000b      	movs	r3, r1
 800107c:	0751      	lsls	r1, r2, #29
 800107e:	d100      	bne.n	8001082 <__aeabi_ddiv+0x56e>
 8001080:	e751      	b.n	8000f26 <__aeabi_ddiv+0x412>
 8001082:	210f      	movs	r1, #15
 8001084:	4011      	ands	r1, r2
 8001086:	2904      	cmp	r1, #4
 8001088:	d000      	beq.n	800108c <__aeabi_ddiv+0x578>
 800108a:	e746      	b.n	8000f1a <__aeabi_ddiv+0x406>
 800108c:	e74b      	b.n	8000f26 <__aeabi_ddiv+0x412>
 800108e:	0005      	movs	r5, r0
 8001090:	428e      	cmp	r6, r1
 8001092:	d000      	beq.n	8001096 <__aeabi_ddiv+0x582>
 8001094:	e66a      	b.n	8000d6c <__aeabi_ddiv+0x258>
 8001096:	9a00      	ldr	r2, [sp, #0]
 8001098:	4293      	cmp	r3, r2
 800109a:	d000      	beq.n	800109e <__aeabi_ddiv+0x58a>
 800109c:	e666      	b.n	8000d6c <__aeabi_ddiv+0x258>
 800109e:	e667      	b.n	8000d70 <__aeabi_ddiv+0x25c>
 80010a0:	4a16      	ldr	r2, [pc, #88]	; (80010fc <__aeabi_ddiv+0x5e8>)
 80010a2:	445a      	add	r2, fp
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_ddiv+0x596>
 80010a8:	e710      	b.n	8000ecc <__aeabi_ddiv+0x3b8>
 80010aa:	2301      	movs	r3, #1
 80010ac:	2500      	movs	r5, #0
 80010ae:	4498      	add	r8, r3
 80010b0:	e667      	b.n	8000d82 <__aeabi_ddiv+0x26e>
 80010b2:	075d      	lsls	r5, r3, #29
 80010b4:	025b      	lsls	r3, r3, #9
 80010b6:	0b1c      	lsrs	r4, r3, #12
 80010b8:	08d2      	lsrs	r2, r2, #3
 80010ba:	2300      	movs	r3, #0
 80010bc:	4315      	orrs	r5, r2
 80010be:	e580      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 80010c0:	9800      	ldr	r0, [sp, #0]
 80010c2:	3d02      	subs	r5, #2
 80010c4:	0042      	lsls	r2, r0, #1
 80010c6:	4282      	cmp	r2, r0
 80010c8:	41bf      	sbcs	r7, r7
 80010ca:	427f      	negs	r7, r7
 80010cc:	193c      	adds	r4, r7, r4
 80010ce:	1936      	adds	r6, r6, r4
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	e7dd      	b.n	8001090 <__aeabi_ddiv+0x57c>
 80010d4:	2480      	movs	r4, #128	; 0x80
 80010d6:	4643      	mov	r3, r8
 80010d8:	0324      	lsls	r4, r4, #12
 80010da:	431c      	orrs	r4, r3
 80010dc:	0324      	lsls	r4, r4, #12
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__aeabi_ddiv+0x5dc>)
 80010e0:	0b24      	lsrs	r4, r4, #12
 80010e2:	e56e      	b.n	8000bc2 <__aeabi_ddiv+0xae>
 80010e4:	9a00      	ldr	r2, [sp, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3ea      	bcc.n	80010c0 <__aeabi_ddiv+0x5ac>
 80010ea:	0005      	movs	r5, r0
 80010ec:	e7d3      	b.n	8001096 <__aeabi_ddiv+0x582>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	000007ff 	.word	0x000007ff
 80010f4:	0000043e 	.word	0x0000043e
 80010f8:	0000041e 	.word	0x0000041e
 80010fc:	000003ff 	.word	0x000003ff

08001100 <__eqdf2>:
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	464e      	mov	r6, r9
 8001104:	4645      	mov	r5, r8
 8001106:	46de      	mov	lr, fp
 8001108:	4657      	mov	r7, sl
 800110a:	4690      	mov	r8, r2
 800110c:	b5e0      	push	{r5, r6, r7, lr}
 800110e:	0017      	movs	r7, r2
 8001110:	031a      	lsls	r2, r3, #12
 8001112:	0b12      	lsrs	r2, r2, #12
 8001114:	0005      	movs	r5, r0
 8001116:	4684      	mov	ip, r0
 8001118:	4819      	ldr	r0, [pc, #100]	; (8001180 <__eqdf2+0x80>)
 800111a:	030e      	lsls	r6, r1, #12
 800111c:	004c      	lsls	r4, r1, #1
 800111e:	4691      	mov	r9, r2
 8001120:	005a      	lsls	r2, r3, #1
 8001122:	0fdb      	lsrs	r3, r3, #31
 8001124:	469b      	mov	fp, r3
 8001126:	0b36      	lsrs	r6, r6, #12
 8001128:	0d64      	lsrs	r4, r4, #21
 800112a:	0fc9      	lsrs	r1, r1, #31
 800112c:	0d52      	lsrs	r2, r2, #21
 800112e:	4284      	cmp	r4, r0
 8001130:	d019      	beq.n	8001166 <__eqdf2+0x66>
 8001132:	4282      	cmp	r2, r0
 8001134:	d010      	beq.n	8001158 <__eqdf2+0x58>
 8001136:	2001      	movs	r0, #1
 8001138:	4294      	cmp	r4, r2
 800113a:	d10e      	bne.n	800115a <__eqdf2+0x5a>
 800113c:	454e      	cmp	r6, r9
 800113e:	d10c      	bne.n	800115a <__eqdf2+0x5a>
 8001140:	2001      	movs	r0, #1
 8001142:	45c4      	cmp	ip, r8
 8001144:	d109      	bne.n	800115a <__eqdf2+0x5a>
 8001146:	4559      	cmp	r1, fp
 8001148:	d017      	beq.n	800117a <__eqdf2+0x7a>
 800114a:	2c00      	cmp	r4, #0
 800114c:	d105      	bne.n	800115a <__eqdf2+0x5a>
 800114e:	0030      	movs	r0, r6
 8001150:	4328      	orrs	r0, r5
 8001152:	1e43      	subs	r3, r0, #1
 8001154:	4198      	sbcs	r0, r3
 8001156:	e000      	b.n	800115a <__eqdf2+0x5a>
 8001158:	2001      	movs	r0, #1
 800115a:	bcf0      	pop	{r4, r5, r6, r7}
 800115c:	46bb      	mov	fp, r7
 800115e:	46b2      	mov	sl, r6
 8001160:	46a9      	mov	r9, r5
 8001162:	46a0      	mov	r8, r4
 8001164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001166:	0033      	movs	r3, r6
 8001168:	2001      	movs	r0, #1
 800116a:	432b      	orrs	r3, r5
 800116c:	d1f5      	bne.n	800115a <__eqdf2+0x5a>
 800116e:	42a2      	cmp	r2, r4
 8001170:	d1f3      	bne.n	800115a <__eqdf2+0x5a>
 8001172:	464b      	mov	r3, r9
 8001174:	433b      	orrs	r3, r7
 8001176:	d1f0      	bne.n	800115a <__eqdf2+0x5a>
 8001178:	e7e2      	b.n	8001140 <__eqdf2+0x40>
 800117a:	2000      	movs	r0, #0
 800117c:	e7ed      	b.n	800115a <__eqdf2+0x5a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff

08001184 <__gedf2>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	4647      	mov	r7, r8
 8001188:	46ce      	mov	lr, r9
 800118a:	0004      	movs	r4, r0
 800118c:	0018      	movs	r0, r3
 800118e:	0016      	movs	r6, r2
 8001190:	031b      	lsls	r3, r3, #12
 8001192:	0b1b      	lsrs	r3, r3, #12
 8001194:	4d2d      	ldr	r5, [pc, #180]	; (800124c <__gedf2+0xc8>)
 8001196:	004a      	lsls	r2, r1, #1
 8001198:	4699      	mov	r9, r3
 800119a:	b580      	push	{r7, lr}
 800119c:	0043      	lsls	r3, r0, #1
 800119e:	030f      	lsls	r7, r1, #12
 80011a0:	46a4      	mov	ip, r4
 80011a2:	46b0      	mov	r8, r6
 80011a4:	0b3f      	lsrs	r7, r7, #12
 80011a6:	0d52      	lsrs	r2, r2, #21
 80011a8:	0fc9      	lsrs	r1, r1, #31
 80011aa:	0d5b      	lsrs	r3, r3, #21
 80011ac:	0fc0      	lsrs	r0, r0, #31
 80011ae:	42aa      	cmp	r2, r5
 80011b0:	d021      	beq.n	80011f6 <__gedf2+0x72>
 80011b2:	42ab      	cmp	r3, r5
 80011b4:	d013      	beq.n	80011de <__gedf2+0x5a>
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d122      	bne.n	8001200 <__gedf2+0x7c>
 80011ba:	433c      	orrs	r4, r7
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <__gedf2+0x42>
 80011c0:	464d      	mov	r5, r9
 80011c2:	432e      	orrs	r6, r5
 80011c4:	d022      	beq.n	800120c <__gedf2+0x88>
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	d010      	beq.n	80011ec <__gedf2+0x68>
 80011ca:	4281      	cmp	r1, r0
 80011cc:	d022      	beq.n	8001214 <__gedf2+0x90>
 80011ce:	2002      	movs	r0, #2
 80011d0:	3901      	subs	r1, #1
 80011d2:	4008      	ands	r0, r1
 80011d4:	3801      	subs	r0, #1
 80011d6:	bcc0      	pop	{r6, r7}
 80011d8:	46b9      	mov	r9, r7
 80011da:	46b0      	mov	r8, r6
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	464d      	mov	r5, r9
 80011e0:	432e      	orrs	r6, r5
 80011e2:	d129      	bne.n	8001238 <__gedf2+0xb4>
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	d1f0      	bne.n	80011ca <__gedf2+0x46>
 80011e8:	433c      	orrs	r4, r7
 80011ea:	d1ee      	bne.n	80011ca <__gedf2+0x46>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d1f2      	bne.n	80011d6 <__gedf2+0x52>
 80011f0:	2001      	movs	r0, #1
 80011f2:	4240      	negs	r0, r0
 80011f4:	e7ef      	b.n	80011d6 <__gedf2+0x52>
 80011f6:	003d      	movs	r5, r7
 80011f8:	4325      	orrs	r5, r4
 80011fa:	d11d      	bne.n	8001238 <__gedf2+0xb4>
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d0ee      	beq.n	80011de <__gedf2+0x5a>
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e2      	bne.n	80011ca <__gedf2+0x46>
 8001204:	464c      	mov	r4, r9
 8001206:	4326      	orrs	r6, r4
 8001208:	d1df      	bne.n	80011ca <__gedf2+0x46>
 800120a:	e7e0      	b.n	80011ce <__gedf2+0x4a>
 800120c:	2000      	movs	r0, #0
 800120e:	2c00      	cmp	r4, #0
 8001210:	d0e1      	beq.n	80011d6 <__gedf2+0x52>
 8001212:	e7dc      	b.n	80011ce <__gedf2+0x4a>
 8001214:	429a      	cmp	r2, r3
 8001216:	dc0a      	bgt.n	800122e <__gedf2+0xaa>
 8001218:	dbe8      	blt.n	80011ec <__gedf2+0x68>
 800121a:	454f      	cmp	r7, r9
 800121c:	d8d7      	bhi.n	80011ce <__gedf2+0x4a>
 800121e:	d00e      	beq.n	800123e <__gedf2+0xba>
 8001220:	2000      	movs	r0, #0
 8001222:	454f      	cmp	r7, r9
 8001224:	d2d7      	bcs.n	80011d6 <__gedf2+0x52>
 8001226:	2900      	cmp	r1, #0
 8001228:	d0e2      	beq.n	80011f0 <__gedf2+0x6c>
 800122a:	0008      	movs	r0, r1
 800122c:	e7d3      	b.n	80011d6 <__gedf2+0x52>
 800122e:	4243      	negs	r3, r0
 8001230:	4158      	adcs	r0, r3
 8001232:	0040      	lsls	r0, r0, #1
 8001234:	3801      	subs	r0, #1
 8001236:	e7ce      	b.n	80011d6 <__gedf2+0x52>
 8001238:	2002      	movs	r0, #2
 800123a:	4240      	negs	r0, r0
 800123c:	e7cb      	b.n	80011d6 <__gedf2+0x52>
 800123e:	45c4      	cmp	ip, r8
 8001240:	d8c5      	bhi.n	80011ce <__gedf2+0x4a>
 8001242:	2000      	movs	r0, #0
 8001244:	45c4      	cmp	ip, r8
 8001246:	d2c6      	bcs.n	80011d6 <__gedf2+0x52>
 8001248:	e7ed      	b.n	8001226 <__gedf2+0xa2>
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	000007ff 	.word	0x000007ff

08001250 <__ledf2>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	4647      	mov	r7, r8
 8001254:	46ce      	mov	lr, r9
 8001256:	0004      	movs	r4, r0
 8001258:	0018      	movs	r0, r3
 800125a:	0016      	movs	r6, r2
 800125c:	031b      	lsls	r3, r3, #12
 800125e:	0b1b      	lsrs	r3, r3, #12
 8001260:	4d2c      	ldr	r5, [pc, #176]	; (8001314 <__ledf2+0xc4>)
 8001262:	004a      	lsls	r2, r1, #1
 8001264:	4699      	mov	r9, r3
 8001266:	b580      	push	{r7, lr}
 8001268:	0043      	lsls	r3, r0, #1
 800126a:	030f      	lsls	r7, r1, #12
 800126c:	46a4      	mov	ip, r4
 800126e:	46b0      	mov	r8, r6
 8001270:	0b3f      	lsrs	r7, r7, #12
 8001272:	0d52      	lsrs	r2, r2, #21
 8001274:	0fc9      	lsrs	r1, r1, #31
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	0fc0      	lsrs	r0, r0, #31
 800127a:	42aa      	cmp	r2, r5
 800127c:	d00d      	beq.n	800129a <__ledf2+0x4a>
 800127e:	42ab      	cmp	r3, r5
 8001280:	d010      	beq.n	80012a4 <__ledf2+0x54>
 8001282:	2a00      	cmp	r2, #0
 8001284:	d127      	bne.n	80012d6 <__ledf2+0x86>
 8001286:	433c      	orrs	r4, r7
 8001288:	2b00      	cmp	r3, #0
 800128a:	d111      	bne.n	80012b0 <__ledf2+0x60>
 800128c:	464d      	mov	r5, r9
 800128e:	432e      	orrs	r6, r5
 8001290:	d10e      	bne.n	80012b0 <__ledf2+0x60>
 8001292:	2000      	movs	r0, #0
 8001294:	2c00      	cmp	r4, #0
 8001296:	d015      	beq.n	80012c4 <__ledf2+0x74>
 8001298:	e00e      	b.n	80012b8 <__ledf2+0x68>
 800129a:	003d      	movs	r5, r7
 800129c:	4325      	orrs	r5, r4
 800129e:	d110      	bne.n	80012c2 <__ledf2+0x72>
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d118      	bne.n	80012d6 <__ledf2+0x86>
 80012a4:	464d      	mov	r5, r9
 80012a6:	432e      	orrs	r6, r5
 80012a8:	d10b      	bne.n	80012c2 <__ledf2+0x72>
 80012aa:	2a00      	cmp	r2, #0
 80012ac:	d102      	bne.n	80012b4 <__ledf2+0x64>
 80012ae:	433c      	orrs	r4, r7
 80012b0:	2c00      	cmp	r4, #0
 80012b2:	d00b      	beq.n	80012cc <__ledf2+0x7c>
 80012b4:	4281      	cmp	r1, r0
 80012b6:	d014      	beq.n	80012e2 <__ledf2+0x92>
 80012b8:	2002      	movs	r0, #2
 80012ba:	3901      	subs	r1, #1
 80012bc:	4008      	ands	r0, r1
 80012be:	3801      	subs	r0, #1
 80012c0:	e000      	b.n	80012c4 <__ledf2+0x74>
 80012c2:	2002      	movs	r0, #2
 80012c4:	bcc0      	pop	{r6, r7}
 80012c6:	46b9      	mov	r9, r7
 80012c8:	46b0      	mov	r8, r6
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1f9      	bne.n	80012c4 <__ledf2+0x74>
 80012d0:	2001      	movs	r0, #1
 80012d2:	4240      	negs	r0, r0
 80012d4:	e7f6      	b.n	80012c4 <__ledf2+0x74>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1ec      	bne.n	80012b4 <__ledf2+0x64>
 80012da:	464c      	mov	r4, r9
 80012dc:	4326      	orrs	r6, r4
 80012de:	d1e9      	bne.n	80012b4 <__ledf2+0x64>
 80012e0:	e7ea      	b.n	80012b8 <__ledf2+0x68>
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dd04      	ble.n	80012f0 <__ledf2+0xa0>
 80012e6:	4243      	negs	r3, r0
 80012e8:	4158      	adcs	r0, r3
 80012ea:	0040      	lsls	r0, r0, #1
 80012ec:	3801      	subs	r0, #1
 80012ee:	e7e9      	b.n	80012c4 <__ledf2+0x74>
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbeb      	blt.n	80012cc <__ledf2+0x7c>
 80012f4:	454f      	cmp	r7, r9
 80012f6:	d8df      	bhi.n	80012b8 <__ledf2+0x68>
 80012f8:	d006      	beq.n	8001308 <__ledf2+0xb8>
 80012fa:	2000      	movs	r0, #0
 80012fc:	454f      	cmp	r7, r9
 80012fe:	d2e1      	bcs.n	80012c4 <__ledf2+0x74>
 8001300:	2900      	cmp	r1, #0
 8001302:	d0e5      	beq.n	80012d0 <__ledf2+0x80>
 8001304:	0008      	movs	r0, r1
 8001306:	e7dd      	b.n	80012c4 <__ledf2+0x74>
 8001308:	45c4      	cmp	ip, r8
 800130a:	d8d5      	bhi.n	80012b8 <__ledf2+0x68>
 800130c:	2000      	movs	r0, #0
 800130e:	45c4      	cmp	ip, r8
 8001310:	d2d8      	bcs.n	80012c4 <__ledf2+0x74>
 8001312:	e7f5      	b.n	8001300 <__ledf2+0xb0>
 8001314:	000007ff 	.word	0x000007ff

08001318 <__aeabi_dmul>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	4657      	mov	r7, sl
 800131c:	464e      	mov	r6, r9
 800131e:	4645      	mov	r5, r8
 8001320:	46de      	mov	lr, fp
 8001322:	b5e0      	push	{r5, r6, r7, lr}
 8001324:	4698      	mov	r8, r3
 8001326:	030c      	lsls	r4, r1, #12
 8001328:	004b      	lsls	r3, r1, #1
 800132a:	0006      	movs	r6, r0
 800132c:	4692      	mov	sl, r2
 800132e:	b087      	sub	sp, #28
 8001330:	0b24      	lsrs	r4, r4, #12
 8001332:	0d5b      	lsrs	r3, r3, #21
 8001334:	0fcf      	lsrs	r7, r1, #31
 8001336:	2b00      	cmp	r3, #0
 8001338:	d100      	bne.n	800133c <__aeabi_dmul+0x24>
 800133a:	e15c      	b.n	80015f6 <__aeabi_dmul+0x2de>
 800133c:	4ad9      	ldr	r2, [pc, #868]	; (80016a4 <__aeabi_dmul+0x38c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d100      	bne.n	8001344 <__aeabi_dmul+0x2c>
 8001342:	e175      	b.n	8001630 <__aeabi_dmul+0x318>
 8001344:	0f42      	lsrs	r2, r0, #29
 8001346:	00e4      	lsls	r4, r4, #3
 8001348:	4314      	orrs	r4, r2
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	0412      	lsls	r2, r2, #16
 800134e:	4314      	orrs	r4, r2
 8001350:	4ad5      	ldr	r2, [pc, #852]	; (80016a8 <__aeabi_dmul+0x390>)
 8001352:	00c5      	lsls	r5, r0, #3
 8001354:	4694      	mov	ip, r2
 8001356:	4463      	add	r3, ip
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2300      	movs	r3, #0
 800135c:	4699      	mov	r9, r3
 800135e:	469b      	mov	fp, r3
 8001360:	4643      	mov	r3, r8
 8001362:	4642      	mov	r2, r8
 8001364:	031e      	lsls	r6, r3, #12
 8001366:	0fd2      	lsrs	r2, r2, #31
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4650      	mov	r0, sl
 800136c:	4690      	mov	r8, r2
 800136e:	0b36      	lsrs	r6, r6, #12
 8001370:	0d5b      	lsrs	r3, r3, #21
 8001372:	d100      	bne.n	8001376 <__aeabi_dmul+0x5e>
 8001374:	e120      	b.n	80015b8 <__aeabi_dmul+0x2a0>
 8001376:	4acb      	ldr	r2, [pc, #812]	; (80016a4 <__aeabi_dmul+0x38c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d100      	bne.n	800137e <__aeabi_dmul+0x66>
 800137c:	e162      	b.n	8001644 <__aeabi_dmul+0x32c>
 800137e:	49ca      	ldr	r1, [pc, #808]	; (80016a8 <__aeabi_dmul+0x390>)
 8001380:	0f42      	lsrs	r2, r0, #29
 8001382:	468c      	mov	ip, r1
 8001384:	9900      	ldr	r1, [sp, #0]
 8001386:	4463      	add	r3, ip
 8001388:	00f6      	lsls	r6, r6, #3
 800138a:	468c      	mov	ip, r1
 800138c:	4316      	orrs	r6, r2
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	449c      	add	ip, r3
 8001392:	0412      	lsls	r2, r2, #16
 8001394:	4663      	mov	r3, ip
 8001396:	4316      	orrs	r6, r2
 8001398:	00c2      	lsls	r2, r0, #3
 800139a:	2000      	movs	r0, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	9900      	ldr	r1, [sp, #0]
 80013a0:	4643      	mov	r3, r8
 80013a2:	3101      	adds	r1, #1
 80013a4:	468c      	mov	ip, r1
 80013a6:	4649      	mov	r1, r9
 80013a8:	407b      	eors	r3, r7
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	290f      	cmp	r1, #15
 80013ae:	d826      	bhi.n	80013fe <__aeabi_dmul+0xe6>
 80013b0:	4bbe      	ldr	r3, [pc, #760]	; (80016ac <__aeabi_dmul+0x394>)
 80013b2:	0089      	lsls	r1, r1, #2
 80013b4:	5859      	ldr	r1, [r3, r1]
 80013b6:	468f      	mov	pc, r1
 80013b8:	4643      	mov	r3, r8
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	0034      	movs	r4, r6
 80013be:	0015      	movs	r5, r2
 80013c0:	4683      	mov	fp, r0
 80013c2:	465b      	mov	r3, fp
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d016      	beq.n	80013f6 <__aeabi_dmul+0xde>
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d100      	bne.n	80013ce <__aeabi_dmul+0xb6>
 80013cc:	e203      	b.n	80017d6 <__aeabi_dmul+0x4be>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d000      	beq.n	80013d4 <__aeabi_dmul+0xbc>
 80013d2:	e0cd      	b.n	8001570 <__aeabi_dmul+0x258>
 80013d4:	2200      	movs	r2, #0
 80013d6:	2400      	movs	r4, #0
 80013d8:	2500      	movs	r5, #0
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	0512      	lsls	r2, r2, #20
 80013de:	4322      	orrs	r2, r4
 80013e0:	07db      	lsls	r3, r3, #31
 80013e2:	431a      	orrs	r2, r3
 80013e4:	0028      	movs	r0, r5
 80013e6:	0011      	movs	r1, r2
 80013e8:	b007      	add	sp, #28
 80013ea:	bcf0      	pop	{r4, r5, r6, r7}
 80013ec:	46bb      	mov	fp, r7
 80013ee:	46b2      	mov	sl, r6
 80013f0:	46a9      	mov	r9, r5
 80013f2:	46a0      	mov	r8, r4
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	2400      	movs	r4, #0
 80013f8:	2500      	movs	r5, #0
 80013fa:	4aaa      	ldr	r2, [pc, #680]	; (80016a4 <__aeabi_dmul+0x38c>)
 80013fc:	e7ed      	b.n	80013da <__aeabi_dmul+0xc2>
 80013fe:	0c28      	lsrs	r0, r5, #16
 8001400:	042d      	lsls	r5, r5, #16
 8001402:	0c2d      	lsrs	r5, r5, #16
 8001404:	002b      	movs	r3, r5
 8001406:	0c11      	lsrs	r1, r2, #16
 8001408:	0412      	lsls	r2, r2, #16
 800140a:	0c12      	lsrs	r2, r2, #16
 800140c:	4353      	muls	r3, r2
 800140e:	4698      	mov	r8, r3
 8001410:	0013      	movs	r3, r2
 8001412:	002f      	movs	r7, r5
 8001414:	4343      	muls	r3, r0
 8001416:	4699      	mov	r9, r3
 8001418:	434f      	muls	r7, r1
 800141a:	444f      	add	r7, r9
 800141c:	46bb      	mov	fp, r7
 800141e:	4647      	mov	r7, r8
 8001420:	000b      	movs	r3, r1
 8001422:	0c3f      	lsrs	r7, r7, #16
 8001424:	46ba      	mov	sl, r7
 8001426:	4343      	muls	r3, r0
 8001428:	44da      	add	sl, fp
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	45d1      	cmp	r9, sl
 800142e:	d904      	bls.n	800143a <__aeabi_dmul+0x122>
 8001430:	2780      	movs	r7, #128	; 0x80
 8001432:	027f      	lsls	r7, r7, #9
 8001434:	46b9      	mov	r9, r7
 8001436:	444b      	add	r3, r9
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	4653      	mov	r3, sl
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	469b      	mov	fp, r3
 8001440:	4653      	mov	r3, sl
 8001442:	041f      	lsls	r7, r3, #16
 8001444:	4643      	mov	r3, r8
 8001446:	041b      	lsls	r3, r3, #16
 8001448:	0c1b      	lsrs	r3, r3, #16
 800144a:	4698      	mov	r8, r3
 800144c:	003b      	movs	r3, r7
 800144e:	4443      	add	r3, r8
 8001450:	9304      	str	r3, [sp, #16]
 8001452:	0c33      	lsrs	r3, r6, #16
 8001454:	0436      	lsls	r6, r6, #16
 8001456:	0c36      	lsrs	r6, r6, #16
 8001458:	4698      	mov	r8, r3
 800145a:	0033      	movs	r3, r6
 800145c:	4343      	muls	r3, r0
 800145e:	4699      	mov	r9, r3
 8001460:	4643      	mov	r3, r8
 8001462:	4343      	muls	r3, r0
 8001464:	002f      	movs	r7, r5
 8001466:	469a      	mov	sl, r3
 8001468:	4643      	mov	r3, r8
 800146a:	4377      	muls	r7, r6
 800146c:	435d      	muls	r5, r3
 800146e:	0c38      	lsrs	r0, r7, #16
 8001470:	444d      	add	r5, r9
 8001472:	1945      	adds	r5, r0, r5
 8001474:	45a9      	cmp	r9, r5
 8001476:	d903      	bls.n	8001480 <__aeabi_dmul+0x168>
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	025b      	lsls	r3, r3, #9
 800147c:	4699      	mov	r9, r3
 800147e:	44ca      	add	sl, r9
 8001480:	043f      	lsls	r7, r7, #16
 8001482:	0c28      	lsrs	r0, r5, #16
 8001484:	0c3f      	lsrs	r7, r7, #16
 8001486:	042d      	lsls	r5, r5, #16
 8001488:	19ed      	adds	r5, r5, r7
 800148a:	0c27      	lsrs	r7, r4, #16
 800148c:	0424      	lsls	r4, r4, #16
 800148e:	0c24      	lsrs	r4, r4, #16
 8001490:	0003      	movs	r3, r0
 8001492:	0020      	movs	r0, r4
 8001494:	4350      	muls	r0, r2
 8001496:	437a      	muls	r2, r7
 8001498:	4691      	mov	r9, r2
 800149a:	003a      	movs	r2, r7
 800149c:	4453      	add	r3, sl
 800149e:	9305      	str	r3, [sp, #20]
 80014a0:	0c03      	lsrs	r3, r0, #16
 80014a2:	469a      	mov	sl, r3
 80014a4:	434a      	muls	r2, r1
 80014a6:	4361      	muls	r1, r4
 80014a8:	4449      	add	r1, r9
 80014aa:	4451      	add	r1, sl
 80014ac:	44ab      	add	fp, r5
 80014ae:	4589      	cmp	r9, r1
 80014b0:	d903      	bls.n	80014ba <__aeabi_dmul+0x1a2>
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	4699      	mov	r9, r3
 80014b8:	444a      	add	r2, r9
 80014ba:	0400      	lsls	r0, r0, #16
 80014bc:	0c0b      	lsrs	r3, r1, #16
 80014be:	0c00      	lsrs	r0, r0, #16
 80014c0:	0409      	lsls	r1, r1, #16
 80014c2:	1809      	adds	r1, r1, r0
 80014c4:	0020      	movs	r0, r4
 80014c6:	4699      	mov	r9, r3
 80014c8:	4643      	mov	r3, r8
 80014ca:	4370      	muls	r0, r6
 80014cc:	435c      	muls	r4, r3
 80014ce:	437e      	muls	r6, r7
 80014d0:	435f      	muls	r7, r3
 80014d2:	0c03      	lsrs	r3, r0, #16
 80014d4:	4698      	mov	r8, r3
 80014d6:	19a4      	adds	r4, r4, r6
 80014d8:	4444      	add	r4, r8
 80014da:	444a      	add	r2, r9
 80014dc:	9703      	str	r7, [sp, #12]
 80014de:	42a6      	cmp	r6, r4
 80014e0:	d904      	bls.n	80014ec <__aeabi_dmul+0x1d4>
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4698      	mov	r8, r3
 80014e8:	4447      	add	r7, r8
 80014ea:	9703      	str	r7, [sp, #12]
 80014ec:	0423      	lsls	r3, r4, #16
 80014ee:	9e02      	ldr	r6, [sp, #8]
 80014f0:	469a      	mov	sl, r3
 80014f2:	9b05      	ldr	r3, [sp, #20]
 80014f4:	445e      	add	r6, fp
 80014f6:	4698      	mov	r8, r3
 80014f8:	42ae      	cmp	r6, r5
 80014fa:	41ad      	sbcs	r5, r5
 80014fc:	1876      	adds	r6, r6, r1
 80014fe:	428e      	cmp	r6, r1
 8001500:	4189      	sbcs	r1, r1
 8001502:	0400      	lsls	r0, r0, #16
 8001504:	0c00      	lsrs	r0, r0, #16
 8001506:	4450      	add	r0, sl
 8001508:	4440      	add	r0, r8
 800150a:	426d      	negs	r5, r5
 800150c:	1947      	adds	r7, r0, r5
 800150e:	46b8      	mov	r8, r7
 8001510:	4693      	mov	fp, r2
 8001512:	4249      	negs	r1, r1
 8001514:	4689      	mov	r9, r1
 8001516:	44c3      	add	fp, r8
 8001518:	44d9      	add	r9, fp
 800151a:	4298      	cmp	r0, r3
 800151c:	4180      	sbcs	r0, r0
 800151e:	45a8      	cmp	r8, r5
 8001520:	41ad      	sbcs	r5, r5
 8001522:	4593      	cmp	fp, r2
 8001524:	4192      	sbcs	r2, r2
 8001526:	4589      	cmp	r9, r1
 8001528:	4189      	sbcs	r1, r1
 800152a:	426d      	negs	r5, r5
 800152c:	4240      	negs	r0, r0
 800152e:	4328      	orrs	r0, r5
 8001530:	0c24      	lsrs	r4, r4, #16
 8001532:	4252      	negs	r2, r2
 8001534:	4249      	negs	r1, r1
 8001536:	430a      	orrs	r2, r1
 8001538:	9b03      	ldr	r3, [sp, #12]
 800153a:	1900      	adds	r0, r0, r4
 800153c:	1880      	adds	r0, r0, r2
 800153e:	18c7      	adds	r7, r0, r3
 8001540:	464b      	mov	r3, r9
 8001542:	0ddc      	lsrs	r4, r3, #23
 8001544:	9b04      	ldr	r3, [sp, #16]
 8001546:	0275      	lsls	r5, r6, #9
 8001548:	431d      	orrs	r5, r3
 800154a:	1e6a      	subs	r2, r5, #1
 800154c:	4195      	sbcs	r5, r2
 800154e:	464b      	mov	r3, r9
 8001550:	0df6      	lsrs	r6, r6, #23
 8001552:	027f      	lsls	r7, r7, #9
 8001554:	4335      	orrs	r5, r6
 8001556:	025a      	lsls	r2, r3, #9
 8001558:	433c      	orrs	r4, r7
 800155a:	4315      	orrs	r5, r2
 800155c:	01fb      	lsls	r3, r7, #7
 800155e:	d400      	bmi.n	8001562 <__aeabi_dmul+0x24a>
 8001560:	e11c      	b.n	800179c <__aeabi_dmul+0x484>
 8001562:	2101      	movs	r1, #1
 8001564:	086a      	lsrs	r2, r5, #1
 8001566:	400d      	ands	r5, r1
 8001568:	4315      	orrs	r5, r2
 800156a:	07e2      	lsls	r2, r4, #31
 800156c:	4315      	orrs	r5, r2
 800156e:	0864      	lsrs	r4, r4, #1
 8001570:	494f      	ldr	r1, [pc, #316]	; (80016b0 <__aeabi_dmul+0x398>)
 8001572:	4461      	add	r1, ip
 8001574:	2900      	cmp	r1, #0
 8001576:	dc00      	bgt.n	800157a <__aeabi_dmul+0x262>
 8001578:	e0b0      	b.n	80016dc <__aeabi_dmul+0x3c4>
 800157a:	076b      	lsls	r3, r5, #29
 800157c:	d009      	beq.n	8001592 <__aeabi_dmul+0x27a>
 800157e:	220f      	movs	r2, #15
 8001580:	402a      	ands	r2, r5
 8001582:	2a04      	cmp	r2, #4
 8001584:	d005      	beq.n	8001592 <__aeabi_dmul+0x27a>
 8001586:	1d2a      	adds	r2, r5, #4
 8001588:	42aa      	cmp	r2, r5
 800158a:	41ad      	sbcs	r5, r5
 800158c:	426d      	negs	r5, r5
 800158e:	1964      	adds	r4, r4, r5
 8001590:	0015      	movs	r5, r2
 8001592:	01e3      	lsls	r3, r4, #7
 8001594:	d504      	bpl.n	80015a0 <__aeabi_dmul+0x288>
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4a46      	ldr	r2, [pc, #280]	; (80016b4 <__aeabi_dmul+0x39c>)
 800159a:	00c9      	lsls	r1, r1, #3
 800159c:	4014      	ands	r4, r2
 800159e:	4461      	add	r1, ip
 80015a0:	4a45      	ldr	r2, [pc, #276]	; (80016b8 <__aeabi_dmul+0x3a0>)
 80015a2:	4291      	cmp	r1, r2
 80015a4:	dd00      	ble.n	80015a8 <__aeabi_dmul+0x290>
 80015a6:	e726      	b.n	80013f6 <__aeabi_dmul+0xde>
 80015a8:	0762      	lsls	r2, r4, #29
 80015aa:	08ed      	lsrs	r5, r5, #3
 80015ac:	0264      	lsls	r4, r4, #9
 80015ae:	0549      	lsls	r1, r1, #21
 80015b0:	4315      	orrs	r5, r2
 80015b2:	0b24      	lsrs	r4, r4, #12
 80015b4:	0d4a      	lsrs	r2, r1, #21
 80015b6:	e710      	b.n	80013da <__aeabi_dmul+0xc2>
 80015b8:	4652      	mov	r2, sl
 80015ba:	4332      	orrs	r2, r6
 80015bc:	d100      	bne.n	80015c0 <__aeabi_dmul+0x2a8>
 80015be:	e07f      	b.n	80016c0 <__aeabi_dmul+0x3a8>
 80015c0:	2e00      	cmp	r6, #0
 80015c2:	d100      	bne.n	80015c6 <__aeabi_dmul+0x2ae>
 80015c4:	e0dc      	b.n	8001780 <__aeabi_dmul+0x468>
 80015c6:	0030      	movs	r0, r6
 80015c8:	f000 fd4e 	bl	8002068 <__clzsi2>
 80015cc:	0002      	movs	r2, r0
 80015ce:	3a0b      	subs	r2, #11
 80015d0:	231d      	movs	r3, #29
 80015d2:	0001      	movs	r1, r0
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	4652      	mov	r2, sl
 80015d8:	3908      	subs	r1, #8
 80015da:	40da      	lsrs	r2, r3
 80015dc:	408e      	lsls	r6, r1
 80015de:	4316      	orrs	r6, r2
 80015e0:	4652      	mov	r2, sl
 80015e2:	408a      	lsls	r2, r1
 80015e4:	9b00      	ldr	r3, [sp, #0]
 80015e6:	4935      	ldr	r1, [pc, #212]	; (80016bc <__aeabi_dmul+0x3a4>)
 80015e8:	1a18      	subs	r0, r3, r0
 80015ea:	0003      	movs	r3, r0
 80015ec:	468c      	mov	ip, r1
 80015ee:	4463      	add	r3, ip
 80015f0:	2000      	movs	r0, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	e6d3      	b.n	800139e <__aeabi_dmul+0x86>
 80015f6:	0025      	movs	r5, r4
 80015f8:	4305      	orrs	r5, r0
 80015fa:	d04a      	beq.n	8001692 <__aeabi_dmul+0x37a>
 80015fc:	2c00      	cmp	r4, #0
 80015fe:	d100      	bne.n	8001602 <__aeabi_dmul+0x2ea>
 8001600:	e0b0      	b.n	8001764 <__aeabi_dmul+0x44c>
 8001602:	0020      	movs	r0, r4
 8001604:	f000 fd30 	bl	8002068 <__clzsi2>
 8001608:	0001      	movs	r1, r0
 800160a:	0002      	movs	r2, r0
 800160c:	390b      	subs	r1, #11
 800160e:	231d      	movs	r3, #29
 8001610:	0010      	movs	r0, r2
 8001612:	1a5b      	subs	r3, r3, r1
 8001614:	0031      	movs	r1, r6
 8001616:	0035      	movs	r5, r6
 8001618:	3808      	subs	r0, #8
 800161a:	4084      	lsls	r4, r0
 800161c:	40d9      	lsrs	r1, r3
 800161e:	4085      	lsls	r5, r0
 8001620:	430c      	orrs	r4, r1
 8001622:	4826      	ldr	r0, [pc, #152]	; (80016bc <__aeabi_dmul+0x3a4>)
 8001624:	1a83      	subs	r3, r0, r2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	4699      	mov	r9, r3
 800162c:	469b      	mov	fp, r3
 800162e:	e697      	b.n	8001360 <__aeabi_dmul+0x48>
 8001630:	0005      	movs	r5, r0
 8001632:	4325      	orrs	r5, r4
 8001634:	d126      	bne.n	8001684 <__aeabi_dmul+0x36c>
 8001636:	2208      	movs	r2, #8
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2302      	movs	r3, #2
 800163c:	2400      	movs	r4, #0
 800163e:	4691      	mov	r9, r2
 8001640:	469b      	mov	fp, r3
 8001642:	e68d      	b.n	8001360 <__aeabi_dmul+0x48>
 8001644:	4652      	mov	r2, sl
 8001646:	9b00      	ldr	r3, [sp, #0]
 8001648:	4332      	orrs	r2, r6
 800164a:	d110      	bne.n	800166e <__aeabi_dmul+0x356>
 800164c:	4915      	ldr	r1, [pc, #84]	; (80016a4 <__aeabi_dmul+0x38c>)
 800164e:	2600      	movs	r6, #0
 8001650:	468c      	mov	ip, r1
 8001652:	4463      	add	r3, ip
 8001654:	4649      	mov	r1, r9
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2302      	movs	r3, #2
 800165a:	4319      	orrs	r1, r3
 800165c:	4689      	mov	r9, r1
 800165e:	2002      	movs	r0, #2
 8001660:	e69d      	b.n	800139e <__aeabi_dmul+0x86>
 8001662:	465b      	mov	r3, fp
 8001664:	9701      	str	r7, [sp, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d000      	beq.n	800166c <__aeabi_dmul+0x354>
 800166a:	e6ad      	b.n	80013c8 <__aeabi_dmul+0xb0>
 800166c:	e6c3      	b.n	80013f6 <__aeabi_dmul+0xde>
 800166e:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <__aeabi_dmul+0x38c>)
 8001670:	2003      	movs	r0, #3
 8001672:	4694      	mov	ip, r2
 8001674:	4463      	add	r3, ip
 8001676:	464a      	mov	r2, r9
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2303      	movs	r3, #3
 800167c:	431a      	orrs	r2, r3
 800167e:	4691      	mov	r9, r2
 8001680:	4652      	mov	r2, sl
 8001682:	e68c      	b.n	800139e <__aeabi_dmul+0x86>
 8001684:	220c      	movs	r2, #12
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2303      	movs	r3, #3
 800168a:	0005      	movs	r5, r0
 800168c:	4691      	mov	r9, r2
 800168e:	469b      	mov	fp, r3
 8001690:	e666      	b.n	8001360 <__aeabi_dmul+0x48>
 8001692:	2304      	movs	r3, #4
 8001694:	4699      	mov	r9, r3
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	2400      	movs	r4, #0
 800169e:	469b      	mov	fp, r3
 80016a0:	e65e      	b.n	8001360 <__aeabi_dmul+0x48>
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	000007ff 	.word	0x000007ff
 80016a8:	fffffc01 	.word	0xfffffc01
 80016ac:	08008518 	.word	0x08008518
 80016b0:	000003ff 	.word	0x000003ff
 80016b4:	feffffff 	.word	0xfeffffff
 80016b8:	000007fe 	.word	0x000007fe
 80016bc:	fffffc0d 	.word	0xfffffc0d
 80016c0:	4649      	mov	r1, r9
 80016c2:	2301      	movs	r3, #1
 80016c4:	4319      	orrs	r1, r3
 80016c6:	4689      	mov	r9, r1
 80016c8:	2600      	movs	r6, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	e667      	b.n	800139e <__aeabi_dmul+0x86>
 80016ce:	2300      	movs	r3, #0
 80016d0:	2480      	movs	r4, #128	; 0x80
 80016d2:	2500      	movs	r5, #0
 80016d4:	4a43      	ldr	r2, [pc, #268]	; (80017e4 <__aeabi_dmul+0x4cc>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	0324      	lsls	r4, r4, #12
 80016da:	e67e      	b.n	80013da <__aeabi_dmul+0xc2>
 80016dc:	2001      	movs	r0, #1
 80016de:	1a40      	subs	r0, r0, r1
 80016e0:	2838      	cmp	r0, #56	; 0x38
 80016e2:	dd00      	ble.n	80016e6 <__aeabi_dmul+0x3ce>
 80016e4:	e676      	b.n	80013d4 <__aeabi_dmul+0xbc>
 80016e6:	281f      	cmp	r0, #31
 80016e8:	dd5b      	ble.n	80017a2 <__aeabi_dmul+0x48a>
 80016ea:	221f      	movs	r2, #31
 80016ec:	0023      	movs	r3, r4
 80016ee:	4252      	negs	r2, r2
 80016f0:	1a51      	subs	r1, r2, r1
 80016f2:	40cb      	lsrs	r3, r1
 80016f4:	0019      	movs	r1, r3
 80016f6:	2820      	cmp	r0, #32
 80016f8:	d003      	beq.n	8001702 <__aeabi_dmul+0x3ea>
 80016fa:	4a3b      	ldr	r2, [pc, #236]	; (80017e8 <__aeabi_dmul+0x4d0>)
 80016fc:	4462      	add	r2, ip
 80016fe:	4094      	lsls	r4, r2
 8001700:	4325      	orrs	r5, r4
 8001702:	1e6a      	subs	r2, r5, #1
 8001704:	4195      	sbcs	r5, r2
 8001706:	002a      	movs	r2, r5
 8001708:	430a      	orrs	r2, r1
 800170a:	2107      	movs	r1, #7
 800170c:	000d      	movs	r5, r1
 800170e:	2400      	movs	r4, #0
 8001710:	4015      	ands	r5, r2
 8001712:	4211      	tst	r1, r2
 8001714:	d05b      	beq.n	80017ce <__aeabi_dmul+0x4b6>
 8001716:	210f      	movs	r1, #15
 8001718:	2400      	movs	r4, #0
 800171a:	4011      	ands	r1, r2
 800171c:	2904      	cmp	r1, #4
 800171e:	d053      	beq.n	80017c8 <__aeabi_dmul+0x4b0>
 8001720:	1d11      	adds	r1, r2, #4
 8001722:	4291      	cmp	r1, r2
 8001724:	4192      	sbcs	r2, r2
 8001726:	4252      	negs	r2, r2
 8001728:	18a4      	adds	r4, r4, r2
 800172a:	000a      	movs	r2, r1
 800172c:	0223      	lsls	r3, r4, #8
 800172e:	d54b      	bpl.n	80017c8 <__aeabi_dmul+0x4b0>
 8001730:	2201      	movs	r2, #1
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	e650      	b.n	80013da <__aeabi_dmul+0xc2>
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	031b      	lsls	r3, r3, #12
 800173c:	421c      	tst	r4, r3
 800173e:	d009      	beq.n	8001754 <__aeabi_dmul+0x43c>
 8001740:	421e      	tst	r6, r3
 8001742:	d107      	bne.n	8001754 <__aeabi_dmul+0x43c>
 8001744:	4333      	orrs	r3, r6
 8001746:	031c      	lsls	r4, r3, #12
 8001748:	4643      	mov	r3, r8
 800174a:	0015      	movs	r5, r2
 800174c:	0b24      	lsrs	r4, r4, #12
 800174e:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <__aeabi_dmul+0x4cc>)
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	e642      	b.n	80013da <__aeabi_dmul+0xc2>
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	0312      	lsls	r2, r2, #12
 8001758:	4314      	orrs	r4, r2
 800175a:	0324      	lsls	r4, r4, #12
 800175c:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <__aeabi_dmul+0x4cc>)
 800175e:	0b24      	lsrs	r4, r4, #12
 8001760:	9701      	str	r7, [sp, #4]
 8001762:	e63a      	b.n	80013da <__aeabi_dmul+0xc2>
 8001764:	f000 fc80 	bl	8002068 <__clzsi2>
 8001768:	0001      	movs	r1, r0
 800176a:	0002      	movs	r2, r0
 800176c:	3115      	adds	r1, #21
 800176e:	3220      	adds	r2, #32
 8001770:	291c      	cmp	r1, #28
 8001772:	dc00      	bgt.n	8001776 <__aeabi_dmul+0x45e>
 8001774:	e74b      	b.n	800160e <__aeabi_dmul+0x2f6>
 8001776:	0034      	movs	r4, r6
 8001778:	3808      	subs	r0, #8
 800177a:	2500      	movs	r5, #0
 800177c:	4084      	lsls	r4, r0
 800177e:	e750      	b.n	8001622 <__aeabi_dmul+0x30a>
 8001780:	f000 fc72 	bl	8002068 <__clzsi2>
 8001784:	0003      	movs	r3, r0
 8001786:	001a      	movs	r2, r3
 8001788:	3215      	adds	r2, #21
 800178a:	3020      	adds	r0, #32
 800178c:	2a1c      	cmp	r2, #28
 800178e:	dc00      	bgt.n	8001792 <__aeabi_dmul+0x47a>
 8001790:	e71e      	b.n	80015d0 <__aeabi_dmul+0x2b8>
 8001792:	4656      	mov	r6, sl
 8001794:	3b08      	subs	r3, #8
 8001796:	2200      	movs	r2, #0
 8001798:	409e      	lsls	r6, r3
 800179a:	e723      	b.n	80015e4 <__aeabi_dmul+0x2cc>
 800179c:	9b00      	ldr	r3, [sp, #0]
 800179e:	469c      	mov	ip, r3
 80017a0:	e6e6      	b.n	8001570 <__aeabi_dmul+0x258>
 80017a2:	4912      	ldr	r1, [pc, #72]	; (80017ec <__aeabi_dmul+0x4d4>)
 80017a4:	0022      	movs	r2, r4
 80017a6:	4461      	add	r1, ip
 80017a8:	002e      	movs	r6, r5
 80017aa:	408d      	lsls	r5, r1
 80017ac:	408a      	lsls	r2, r1
 80017ae:	40c6      	lsrs	r6, r0
 80017b0:	1e69      	subs	r1, r5, #1
 80017b2:	418d      	sbcs	r5, r1
 80017b4:	4332      	orrs	r2, r6
 80017b6:	432a      	orrs	r2, r5
 80017b8:	40c4      	lsrs	r4, r0
 80017ba:	0753      	lsls	r3, r2, #29
 80017bc:	d0b6      	beq.n	800172c <__aeabi_dmul+0x414>
 80017be:	210f      	movs	r1, #15
 80017c0:	4011      	ands	r1, r2
 80017c2:	2904      	cmp	r1, #4
 80017c4:	d1ac      	bne.n	8001720 <__aeabi_dmul+0x408>
 80017c6:	e7b1      	b.n	800172c <__aeabi_dmul+0x414>
 80017c8:	0765      	lsls	r5, r4, #29
 80017ca:	0264      	lsls	r4, r4, #9
 80017cc:	0b24      	lsrs	r4, r4, #12
 80017ce:	08d2      	lsrs	r2, r2, #3
 80017d0:	4315      	orrs	r5, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	e601      	b.n	80013da <__aeabi_dmul+0xc2>
 80017d6:	2280      	movs	r2, #128	; 0x80
 80017d8:	0312      	lsls	r2, r2, #12
 80017da:	4314      	orrs	r4, r2
 80017dc:	0324      	lsls	r4, r4, #12
 80017de:	4a01      	ldr	r2, [pc, #4]	; (80017e4 <__aeabi_dmul+0x4cc>)
 80017e0:	0b24      	lsrs	r4, r4, #12
 80017e2:	e5fa      	b.n	80013da <__aeabi_dmul+0xc2>
 80017e4:	000007ff 	.word	0x000007ff
 80017e8:	0000043e 	.word	0x0000043e
 80017ec:	0000041e 	.word	0x0000041e

080017f0 <__aeabi_dsub>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	4657      	mov	r7, sl
 80017f4:	464e      	mov	r6, r9
 80017f6:	4645      	mov	r5, r8
 80017f8:	46de      	mov	lr, fp
 80017fa:	b5e0      	push	{r5, r6, r7, lr}
 80017fc:	001e      	movs	r6, r3
 80017fe:	0017      	movs	r7, r2
 8001800:	004a      	lsls	r2, r1, #1
 8001802:	030b      	lsls	r3, r1, #12
 8001804:	0d52      	lsrs	r2, r2, #21
 8001806:	0a5b      	lsrs	r3, r3, #9
 8001808:	4690      	mov	r8, r2
 800180a:	0f42      	lsrs	r2, r0, #29
 800180c:	431a      	orrs	r2, r3
 800180e:	0fcd      	lsrs	r5, r1, #31
 8001810:	4ccd      	ldr	r4, [pc, #820]	; (8001b48 <__aeabi_dsub+0x358>)
 8001812:	0331      	lsls	r1, r6, #12
 8001814:	00c3      	lsls	r3, r0, #3
 8001816:	4694      	mov	ip, r2
 8001818:	0070      	lsls	r0, r6, #1
 800181a:	0f7a      	lsrs	r2, r7, #29
 800181c:	0a49      	lsrs	r1, r1, #9
 800181e:	00ff      	lsls	r7, r7, #3
 8001820:	469a      	mov	sl, r3
 8001822:	46b9      	mov	r9, r7
 8001824:	0d40      	lsrs	r0, r0, #21
 8001826:	0ff6      	lsrs	r6, r6, #31
 8001828:	4311      	orrs	r1, r2
 800182a:	42a0      	cmp	r0, r4
 800182c:	d100      	bne.n	8001830 <__aeabi_dsub+0x40>
 800182e:	e0b1      	b.n	8001994 <__aeabi_dsub+0x1a4>
 8001830:	2201      	movs	r2, #1
 8001832:	4056      	eors	r6, r2
 8001834:	46b3      	mov	fp, r6
 8001836:	42b5      	cmp	r5, r6
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x4c>
 800183a:	e088      	b.n	800194e <__aeabi_dsub+0x15e>
 800183c:	4642      	mov	r2, r8
 800183e:	1a12      	subs	r2, r2, r0
 8001840:	2a00      	cmp	r2, #0
 8001842:	dc00      	bgt.n	8001846 <__aeabi_dsub+0x56>
 8001844:	e0ae      	b.n	80019a4 <__aeabi_dsub+0x1b4>
 8001846:	2800      	cmp	r0, #0
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x5c>
 800184a:	e0c1      	b.n	80019d0 <__aeabi_dsub+0x1e0>
 800184c:	48be      	ldr	r0, [pc, #760]	; (8001b48 <__aeabi_dsub+0x358>)
 800184e:	4580      	cmp	r8, r0
 8001850:	d100      	bne.n	8001854 <__aeabi_dsub+0x64>
 8001852:	e151      	b.n	8001af8 <__aeabi_dsub+0x308>
 8001854:	2080      	movs	r0, #128	; 0x80
 8001856:	0400      	lsls	r0, r0, #16
 8001858:	4301      	orrs	r1, r0
 800185a:	2a38      	cmp	r2, #56	; 0x38
 800185c:	dd00      	ble.n	8001860 <__aeabi_dsub+0x70>
 800185e:	e17b      	b.n	8001b58 <__aeabi_dsub+0x368>
 8001860:	2a1f      	cmp	r2, #31
 8001862:	dd00      	ble.n	8001866 <__aeabi_dsub+0x76>
 8001864:	e1ee      	b.n	8001c44 <__aeabi_dsub+0x454>
 8001866:	2020      	movs	r0, #32
 8001868:	003e      	movs	r6, r7
 800186a:	1a80      	subs	r0, r0, r2
 800186c:	000c      	movs	r4, r1
 800186e:	40d6      	lsrs	r6, r2
 8001870:	40d1      	lsrs	r1, r2
 8001872:	4087      	lsls	r7, r0
 8001874:	4662      	mov	r2, ip
 8001876:	4084      	lsls	r4, r0
 8001878:	1a52      	subs	r2, r2, r1
 800187a:	1e78      	subs	r0, r7, #1
 800187c:	4187      	sbcs	r7, r0
 800187e:	4694      	mov	ip, r2
 8001880:	4334      	orrs	r4, r6
 8001882:	4327      	orrs	r7, r4
 8001884:	1bdc      	subs	r4, r3, r7
 8001886:	42a3      	cmp	r3, r4
 8001888:	419b      	sbcs	r3, r3
 800188a:	4662      	mov	r2, ip
 800188c:	425b      	negs	r3, r3
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	4699      	mov	r9, r3
 8001892:	464b      	mov	r3, r9
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	d400      	bmi.n	800189a <__aeabi_dsub+0xaa>
 8001898:	e118      	b.n	8001acc <__aeabi_dsub+0x2dc>
 800189a:	464b      	mov	r3, r9
 800189c:	0258      	lsls	r0, r3, #9
 800189e:	0a43      	lsrs	r3, r0, #9
 80018a0:	4699      	mov	r9, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d100      	bne.n	80018aa <__aeabi_dsub+0xba>
 80018a8:	e137      	b.n	8001b1a <__aeabi_dsub+0x32a>
 80018aa:	4648      	mov	r0, r9
 80018ac:	f000 fbdc 	bl	8002068 <__clzsi2>
 80018b0:	0001      	movs	r1, r0
 80018b2:	3908      	subs	r1, #8
 80018b4:	2320      	movs	r3, #32
 80018b6:	0022      	movs	r2, r4
 80018b8:	4648      	mov	r0, r9
 80018ba:	1a5b      	subs	r3, r3, r1
 80018bc:	40da      	lsrs	r2, r3
 80018be:	4088      	lsls	r0, r1
 80018c0:	408c      	lsls	r4, r1
 80018c2:	4643      	mov	r3, r8
 80018c4:	4310      	orrs	r0, r2
 80018c6:	4588      	cmp	r8, r1
 80018c8:	dd00      	ble.n	80018cc <__aeabi_dsub+0xdc>
 80018ca:	e136      	b.n	8001b3a <__aeabi_dsub+0x34a>
 80018cc:	1ac9      	subs	r1, r1, r3
 80018ce:	1c4b      	adds	r3, r1, #1
 80018d0:	2b1f      	cmp	r3, #31
 80018d2:	dd00      	ble.n	80018d6 <__aeabi_dsub+0xe6>
 80018d4:	e0ea      	b.n	8001aac <__aeabi_dsub+0x2bc>
 80018d6:	2220      	movs	r2, #32
 80018d8:	0026      	movs	r6, r4
 80018da:	1ad2      	subs	r2, r2, r3
 80018dc:	0001      	movs	r1, r0
 80018de:	4094      	lsls	r4, r2
 80018e0:	40de      	lsrs	r6, r3
 80018e2:	40d8      	lsrs	r0, r3
 80018e4:	2300      	movs	r3, #0
 80018e6:	4091      	lsls	r1, r2
 80018e8:	1e62      	subs	r2, r4, #1
 80018ea:	4194      	sbcs	r4, r2
 80018ec:	4681      	mov	r9, r0
 80018ee:	4698      	mov	r8, r3
 80018f0:	4331      	orrs	r1, r6
 80018f2:	430c      	orrs	r4, r1
 80018f4:	0763      	lsls	r3, r4, #29
 80018f6:	d009      	beq.n	800190c <__aeabi_dsub+0x11c>
 80018f8:	230f      	movs	r3, #15
 80018fa:	4023      	ands	r3, r4
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d005      	beq.n	800190c <__aeabi_dsub+0x11c>
 8001900:	1d23      	adds	r3, r4, #4
 8001902:	42a3      	cmp	r3, r4
 8001904:	41a4      	sbcs	r4, r4
 8001906:	4264      	negs	r4, r4
 8001908:	44a1      	add	r9, r4
 800190a:	001c      	movs	r4, r3
 800190c:	464b      	mov	r3, r9
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	d400      	bmi.n	8001914 <__aeabi_dsub+0x124>
 8001912:	e0de      	b.n	8001ad2 <__aeabi_dsub+0x2e2>
 8001914:	4641      	mov	r1, r8
 8001916:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <__aeabi_dsub+0x358>)
 8001918:	3101      	adds	r1, #1
 800191a:	4299      	cmp	r1, r3
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x130>
 800191e:	e0e7      	b.n	8001af0 <__aeabi_dsub+0x300>
 8001920:	464b      	mov	r3, r9
 8001922:	488a      	ldr	r0, [pc, #552]	; (8001b4c <__aeabi_dsub+0x35c>)
 8001924:	08e4      	lsrs	r4, r4, #3
 8001926:	4003      	ands	r3, r0
 8001928:	0018      	movs	r0, r3
 800192a:	0549      	lsls	r1, r1, #21
 800192c:	075b      	lsls	r3, r3, #29
 800192e:	0240      	lsls	r0, r0, #9
 8001930:	4323      	orrs	r3, r4
 8001932:	0d4a      	lsrs	r2, r1, #21
 8001934:	0b04      	lsrs	r4, r0, #12
 8001936:	0512      	lsls	r2, r2, #20
 8001938:	07ed      	lsls	r5, r5, #31
 800193a:	4322      	orrs	r2, r4
 800193c:	432a      	orrs	r2, r5
 800193e:	0018      	movs	r0, r3
 8001940:	0011      	movs	r1, r2
 8001942:	bcf0      	pop	{r4, r5, r6, r7}
 8001944:	46bb      	mov	fp, r7
 8001946:	46b2      	mov	sl, r6
 8001948:	46a9      	mov	r9, r5
 800194a:	46a0      	mov	r8, r4
 800194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800194e:	4642      	mov	r2, r8
 8001950:	1a12      	subs	r2, r2, r0
 8001952:	2a00      	cmp	r2, #0
 8001954:	dd52      	ble.n	80019fc <__aeabi_dsub+0x20c>
 8001956:	2800      	cmp	r0, #0
 8001958:	d100      	bne.n	800195c <__aeabi_dsub+0x16c>
 800195a:	e09c      	b.n	8001a96 <__aeabi_dsub+0x2a6>
 800195c:	45a0      	cmp	r8, r4
 800195e:	d100      	bne.n	8001962 <__aeabi_dsub+0x172>
 8001960:	e0ca      	b.n	8001af8 <__aeabi_dsub+0x308>
 8001962:	2080      	movs	r0, #128	; 0x80
 8001964:	0400      	lsls	r0, r0, #16
 8001966:	4301      	orrs	r1, r0
 8001968:	2a38      	cmp	r2, #56	; 0x38
 800196a:	dd00      	ble.n	800196e <__aeabi_dsub+0x17e>
 800196c:	e149      	b.n	8001c02 <__aeabi_dsub+0x412>
 800196e:	2a1f      	cmp	r2, #31
 8001970:	dc00      	bgt.n	8001974 <__aeabi_dsub+0x184>
 8001972:	e197      	b.n	8001ca4 <__aeabi_dsub+0x4b4>
 8001974:	0010      	movs	r0, r2
 8001976:	000e      	movs	r6, r1
 8001978:	3820      	subs	r0, #32
 800197a:	40c6      	lsrs	r6, r0
 800197c:	2a20      	cmp	r2, #32
 800197e:	d004      	beq.n	800198a <__aeabi_dsub+0x19a>
 8001980:	2040      	movs	r0, #64	; 0x40
 8001982:	1a82      	subs	r2, r0, r2
 8001984:	4091      	lsls	r1, r2
 8001986:	430f      	orrs	r7, r1
 8001988:	46b9      	mov	r9, r7
 800198a:	464c      	mov	r4, r9
 800198c:	1e62      	subs	r2, r4, #1
 800198e:	4194      	sbcs	r4, r2
 8001990:	4334      	orrs	r4, r6
 8001992:	e13a      	b.n	8001c0a <__aeabi_dsub+0x41a>
 8001994:	000a      	movs	r2, r1
 8001996:	433a      	orrs	r2, r7
 8001998:	d028      	beq.n	80019ec <__aeabi_dsub+0x1fc>
 800199a:	46b3      	mov	fp, r6
 800199c:	42b5      	cmp	r5, r6
 800199e:	d02b      	beq.n	80019f8 <__aeabi_dsub+0x208>
 80019a0:	4a6b      	ldr	r2, [pc, #428]	; (8001b50 <__aeabi_dsub+0x360>)
 80019a2:	4442      	add	r2, r8
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	d05d      	beq.n	8001a64 <__aeabi_dsub+0x274>
 80019a8:	4642      	mov	r2, r8
 80019aa:	4644      	mov	r4, r8
 80019ac:	1a82      	subs	r2, r0, r2
 80019ae:	2c00      	cmp	r4, #0
 80019b0:	d000      	beq.n	80019b4 <__aeabi_dsub+0x1c4>
 80019b2:	e0f5      	b.n	8001ba0 <__aeabi_dsub+0x3b0>
 80019b4:	4665      	mov	r5, ip
 80019b6:	431d      	orrs	r5, r3
 80019b8:	d100      	bne.n	80019bc <__aeabi_dsub+0x1cc>
 80019ba:	e19c      	b.n	8001cf6 <__aeabi_dsub+0x506>
 80019bc:	1e55      	subs	r5, r2, #1
 80019be:	2a01      	cmp	r2, #1
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dsub+0x1d4>
 80019c2:	e1fb      	b.n	8001dbc <__aeabi_dsub+0x5cc>
 80019c4:	4c60      	ldr	r4, [pc, #384]	; (8001b48 <__aeabi_dsub+0x358>)
 80019c6:	42a2      	cmp	r2, r4
 80019c8:	d100      	bne.n	80019cc <__aeabi_dsub+0x1dc>
 80019ca:	e1bd      	b.n	8001d48 <__aeabi_dsub+0x558>
 80019cc:	002a      	movs	r2, r5
 80019ce:	e0f0      	b.n	8001bb2 <__aeabi_dsub+0x3c2>
 80019d0:	0008      	movs	r0, r1
 80019d2:	4338      	orrs	r0, r7
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dsub+0x1e8>
 80019d6:	e0c3      	b.n	8001b60 <__aeabi_dsub+0x370>
 80019d8:	1e50      	subs	r0, r2, #1
 80019da:	2a01      	cmp	r2, #1
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x1f0>
 80019de:	e1a8      	b.n	8001d32 <__aeabi_dsub+0x542>
 80019e0:	4c59      	ldr	r4, [pc, #356]	; (8001b48 <__aeabi_dsub+0x358>)
 80019e2:	42a2      	cmp	r2, r4
 80019e4:	d100      	bne.n	80019e8 <__aeabi_dsub+0x1f8>
 80019e6:	e087      	b.n	8001af8 <__aeabi_dsub+0x308>
 80019e8:	0002      	movs	r2, r0
 80019ea:	e736      	b.n	800185a <__aeabi_dsub+0x6a>
 80019ec:	2201      	movs	r2, #1
 80019ee:	4056      	eors	r6, r2
 80019f0:	46b3      	mov	fp, r6
 80019f2:	42b5      	cmp	r5, r6
 80019f4:	d000      	beq.n	80019f8 <__aeabi_dsub+0x208>
 80019f6:	e721      	b.n	800183c <__aeabi_dsub+0x4c>
 80019f8:	4a55      	ldr	r2, [pc, #340]	; (8001b50 <__aeabi_dsub+0x360>)
 80019fa:	4442      	add	r2, r8
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0x212>
 8001a00:	e0b5      	b.n	8001b6e <__aeabi_dsub+0x37e>
 8001a02:	4642      	mov	r2, r8
 8001a04:	4644      	mov	r4, r8
 8001a06:	1a82      	subs	r2, r0, r2
 8001a08:	2c00      	cmp	r4, #0
 8001a0a:	d100      	bne.n	8001a0e <__aeabi_dsub+0x21e>
 8001a0c:	e138      	b.n	8001c80 <__aeabi_dsub+0x490>
 8001a0e:	4e4e      	ldr	r6, [pc, #312]	; (8001b48 <__aeabi_dsub+0x358>)
 8001a10:	42b0      	cmp	r0, r6
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dsub+0x226>
 8001a14:	e1de      	b.n	8001dd4 <__aeabi_dsub+0x5e4>
 8001a16:	2680      	movs	r6, #128	; 0x80
 8001a18:	4664      	mov	r4, ip
 8001a1a:	0436      	lsls	r6, r6, #16
 8001a1c:	4334      	orrs	r4, r6
 8001a1e:	46a4      	mov	ip, r4
 8001a20:	2a38      	cmp	r2, #56	; 0x38
 8001a22:	dd00      	ble.n	8001a26 <__aeabi_dsub+0x236>
 8001a24:	e196      	b.n	8001d54 <__aeabi_dsub+0x564>
 8001a26:	2a1f      	cmp	r2, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0x23c>
 8001a2a:	e224      	b.n	8001e76 <__aeabi_dsub+0x686>
 8001a2c:	2620      	movs	r6, #32
 8001a2e:	1ab4      	subs	r4, r6, r2
 8001a30:	46a2      	mov	sl, r4
 8001a32:	4664      	mov	r4, ip
 8001a34:	4656      	mov	r6, sl
 8001a36:	40b4      	lsls	r4, r6
 8001a38:	46a1      	mov	r9, r4
 8001a3a:	001c      	movs	r4, r3
 8001a3c:	464e      	mov	r6, r9
 8001a3e:	40d4      	lsrs	r4, r2
 8001a40:	4326      	orrs	r6, r4
 8001a42:	0034      	movs	r4, r6
 8001a44:	4656      	mov	r6, sl
 8001a46:	40b3      	lsls	r3, r6
 8001a48:	1e5e      	subs	r6, r3, #1
 8001a4a:	41b3      	sbcs	r3, r6
 8001a4c:	431c      	orrs	r4, r3
 8001a4e:	4663      	mov	r3, ip
 8001a50:	40d3      	lsrs	r3, r2
 8001a52:	18c9      	adds	r1, r1, r3
 8001a54:	19e4      	adds	r4, r4, r7
 8001a56:	42bc      	cmp	r4, r7
 8001a58:	41bf      	sbcs	r7, r7
 8001a5a:	427f      	negs	r7, r7
 8001a5c:	46b9      	mov	r9, r7
 8001a5e:	4680      	mov	r8, r0
 8001a60:	4489      	add	r9, r1
 8001a62:	e0d8      	b.n	8001c16 <__aeabi_dsub+0x426>
 8001a64:	4640      	mov	r0, r8
 8001a66:	4c3b      	ldr	r4, [pc, #236]	; (8001b54 <__aeabi_dsub+0x364>)
 8001a68:	3001      	adds	r0, #1
 8001a6a:	4220      	tst	r0, r4
 8001a6c:	d000      	beq.n	8001a70 <__aeabi_dsub+0x280>
 8001a6e:	e0b4      	b.n	8001bda <__aeabi_dsub+0x3ea>
 8001a70:	4640      	mov	r0, r8
 8001a72:	2800      	cmp	r0, #0
 8001a74:	d000      	beq.n	8001a78 <__aeabi_dsub+0x288>
 8001a76:	e144      	b.n	8001d02 <__aeabi_dsub+0x512>
 8001a78:	4660      	mov	r0, ip
 8001a7a:	4318      	orrs	r0, r3
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x290>
 8001a7e:	e190      	b.n	8001da2 <__aeabi_dsub+0x5b2>
 8001a80:	0008      	movs	r0, r1
 8001a82:	4338      	orrs	r0, r7
 8001a84:	d000      	beq.n	8001a88 <__aeabi_dsub+0x298>
 8001a86:	e1aa      	b.n	8001dde <__aeabi_dsub+0x5ee>
 8001a88:	4661      	mov	r1, ip
 8001a8a:	08db      	lsrs	r3, r3, #3
 8001a8c:	0749      	lsls	r1, r1, #29
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	4661      	mov	r1, ip
 8001a92:	08cc      	lsrs	r4, r1, #3
 8001a94:	e027      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001a96:	0008      	movs	r0, r1
 8001a98:	4338      	orrs	r0, r7
 8001a9a:	d061      	beq.n	8001b60 <__aeabi_dsub+0x370>
 8001a9c:	1e50      	subs	r0, r2, #1
 8001a9e:	2a01      	cmp	r2, #1
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x2b4>
 8001aa2:	e139      	b.n	8001d18 <__aeabi_dsub+0x528>
 8001aa4:	42a2      	cmp	r2, r4
 8001aa6:	d027      	beq.n	8001af8 <__aeabi_dsub+0x308>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	e75d      	b.n	8001968 <__aeabi_dsub+0x178>
 8001aac:	0002      	movs	r2, r0
 8001aae:	391f      	subs	r1, #31
 8001ab0:	40ca      	lsrs	r2, r1
 8001ab2:	0011      	movs	r1, r2
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d003      	beq.n	8001ac0 <__aeabi_dsub+0x2d0>
 8001ab8:	2240      	movs	r2, #64	; 0x40
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	4098      	lsls	r0, r3
 8001abe:	4304      	orrs	r4, r0
 8001ac0:	1e63      	subs	r3, r4, #1
 8001ac2:	419c      	sbcs	r4, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	4698      	mov	r8, r3
 8001aca:	430c      	orrs	r4, r1
 8001acc:	0763      	lsls	r3, r4, #29
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dsub+0x2e2>
 8001ad0:	e712      	b.n	80018f8 <__aeabi_dsub+0x108>
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	464a      	mov	r2, r9
 8001ad6:	08e4      	lsrs	r4, r4, #3
 8001ad8:	075b      	lsls	r3, r3, #29
 8001ada:	4323      	orrs	r3, r4
 8001adc:	08d4      	lsrs	r4, r2, #3
 8001ade:	4642      	mov	r2, r8
 8001ae0:	4919      	ldr	r1, [pc, #100]	; (8001b48 <__aeabi_dsub+0x358>)
 8001ae2:	428a      	cmp	r2, r1
 8001ae4:	d00e      	beq.n	8001b04 <__aeabi_dsub+0x314>
 8001ae6:	0324      	lsls	r4, r4, #12
 8001ae8:	0552      	lsls	r2, r2, #21
 8001aea:	0b24      	lsrs	r4, r4, #12
 8001aec:	0d52      	lsrs	r2, r2, #21
 8001aee:	e722      	b.n	8001936 <__aeabi_dsub+0x146>
 8001af0:	000a      	movs	r2, r1
 8001af2:	2400      	movs	r4, #0
 8001af4:	2300      	movs	r3, #0
 8001af6:	e71e      	b.n	8001936 <__aeabi_dsub+0x146>
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	4662      	mov	r2, ip
 8001afc:	0752      	lsls	r2, r2, #29
 8001afe:	4313      	orrs	r3, r2
 8001b00:	4662      	mov	r2, ip
 8001b02:	08d4      	lsrs	r4, r2, #3
 8001b04:	001a      	movs	r2, r3
 8001b06:	4322      	orrs	r2, r4
 8001b08:	d100      	bne.n	8001b0c <__aeabi_dsub+0x31c>
 8001b0a:	e1fc      	b.n	8001f06 <__aeabi_dsub+0x716>
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	0312      	lsls	r2, r2, #12
 8001b10:	4314      	orrs	r4, r2
 8001b12:	0324      	lsls	r4, r4, #12
 8001b14:	4a0c      	ldr	r2, [pc, #48]	; (8001b48 <__aeabi_dsub+0x358>)
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	e70d      	b.n	8001936 <__aeabi_dsub+0x146>
 8001b1a:	0020      	movs	r0, r4
 8001b1c:	f000 faa4 	bl	8002068 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	3118      	adds	r1, #24
 8001b24:	291f      	cmp	r1, #31
 8001b26:	dc00      	bgt.n	8001b2a <__aeabi_dsub+0x33a>
 8001b28:	e6c4      	b.n	80018b4 <__aeabi_dsub+0xc4>
 8001b2a:	3808      	subs	r0, #8
 8001b2c:	4084      	lsls	r4, r0
 8001b2e:	4643      	mov	r3, r8
 8001b30:	0020      	movs	r0, r4
 8001b32:	2400      	movs	r4, #0
 8001b34:	4588      	cmp	r8, r1
 8001b36:	dc00      	bgt.n	8001b3a <__aeabi_dsub+0x34a>
 8001b38:	e6c8      	b.n	80018cc <__aeabi_dsub+0xdc>
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__aeabi_dsub+0x35c>)
 8001b3c:	1a5b      	subs	r3, r3, r1
 8001b3e:	4010      	ands	r0, r2
 8001b40:	4698      	mov	r8, r3
 8001b42:	4681      	mov	r9, r0
 8001b44:	e6d6      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	ff7fffff 	.word	0xff7fffff
 8001b50:	fffff801 	.word	0xfffff801
 8001b54:	000007fe 	.word	0x000007fe
 8001b58:	430f      	orrs	r7, r1
 8001b5a:	1e7a      	subs	r2, r7, #1
 8001b5c:	4197      	sbcs	r7, r2
 8001b5e:	e691      	b.n	8001884 <__aeabi_dsub+0x94>
 8001b60:	4661      	mov	r1, ip
 8001b62:	08db      	lsrs	r3, r3, #3
 8001b64:	0749      	lsls	r1, r1, #29
 8001b66:	430b      	orrs	r3, r1
 8001b68:	4661      	mov	r1, ip
 8001b6a:	08cc      	lsrs	r4, r1, #3
 8001b6c:	e7b8      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001b6e:	4640      	mov	r0, r8
 8001b70:	4cd3      	ldr	r4, [pc, #844]	; (8001ec0 <__aeabi_dsub+0x6d0>)
 8001b72:	3001      	adds	r0, #1
 8001b74:	4220      	tst	r0, r4
 8001b76:	d000      	beq.n	8001b7a <__aeabi_dsub+0x38a>
 8001b78:	e0a2      	b.n	8001cc0 <__aeabi_dsub+0x4d0>
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d000      	beq.n	8001b82 <__aeabi_dsub+0x392>
 8001b80:	e101      	b.n	8001d86 <__aeabi_dsub+0x596>
 8001b82:	4660      	mov	r0, ip
 8001b84:	4318      	orrs	r0, r3
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x39a>
 8001b88:	e15e      	b.n	8001e48 <__aeabi_dsub+0x658>
 8001b8a:	0008      	movs	r0, r1
 8001b8c:	4338      	orrs	r0, r7
 8001b8e:	d000      	beq.n	8001b92 <__aeabi_dsub+0x3a2>
 8001b90:	e15f      	b.n	8001e52 <__aeabi_dsub+0x662>
 8001b92:	4661      	mov	r1, ip
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	0749      	lsls	r1, r1, #29
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	4661      	mov	r1, ip
 8001b9c:	08cc      	lsrs	r4, r1, #3
 8001b9e:	e7a2      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001ba0:	4dc8      	ldr	r5, [pc, #800]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001ba2:	42a8      	cmp	r0, r5
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x3b8>
 8001ba6:	e0cf      	b.n	8001d48 <__aeabi_dsub+0x558>
 8001ba8:	2580      	movs	r5, #128	; 0x80
 8001baa:	4664      	mov	r4, ip
 8001bac:	042d      	lsls	r5, r5, #16
 8001bae:	432c      	orrs	r4, r5
 8001bb0:	46a4      	mov	ip, r4
 8001bb2:	2a38      	cmp	r2, #56	; 0x38
 8001bb4:	dc56      	bgt.n	8001c64 <__aeabi_dsub+0x474>
 8001bb6:	2a1f      	cmp	r2, #31
 8001bb8:	dd00      	ble.n	8001bbc <__aeabi_dsub+0x3cc>
 8001bba:	e0d1      	b.n	8001d60 <__aeabi_dsub+0x570>
 8001bbc:	2520      	movs	r5, #32
 8001bbe:	001e      	movs	r6, r3
 8001bc0:	1aad      	subs	r5, r5, r2
 8001bc2:	4664      	mov	r4, ip
 8001bc4:	40ab      	lsls	r3, r5
 8001bc6:	40ac      	lsls	r4, r5
 8001bc8:	40d6      	lsrs	r6, r2
 8001bca:	1e5d      	subs	r5, r3, #1
 8001bcc:	41ab      	sbcs	r3, r5
 8001bce:	4334      	orrs	r4, r6
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	4664      	mov	r4, ip
 8001bd4:	40d4      	lsrs	r4, r2
 8001bd6:	1b09      	subs	r1, r1, r4
 8001bd8:	e049      	b.n	8001c6e <__aeabi_dsub+0x47e>
 8001bda:	4660      	mov	r0, ip
 8001bdc:	1bdc      	subs	r4, r3, r7
 8001bde:	1a46      	subs	r6, r0, r1
 8001be0:	42a3      	cmp	r3, r4
 8001be2:	4180      	sbcs	r0, r0
 8001be4:	4240      	negs	r0, r0
 8001be6:	4681      	mov	r9, r0
 8001be8:	0030      	movs	r0, r6
 8001bea:	464e      	mov	r6, r9
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	4681      	mov	r9, r0
 8001bf0:	0200      	lsls	r0, r0, #8
 8001bf2:	d476      	bmi.n	8001ce2 <__aeabi_dsub+0x4f2>
 8001bf4:	464b      	mov	r3, r9
 8001bf6:	4323      	orrs	r3, r4
 8001bf8:	d000      	beq.n	8001bfc <__aeabi_dsub+0x40c>
 8001bfa:	e652      	b.n	80018a2 <__aeabi_dsub+0xb2>
 8001bfc:	2400      	movs	r4, #0
 8001bfe:	2500      	movs	r5, #0
 8001c00:	e771      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001c02:	4339      	orrs	r1, r7
 8001c04:	000c      	movs	r4, r1
 8001c06:	1e62      	subs	r2, r4, #1
 8001c08:	4194      	sbcs	r4, r2
 8001c0a:	18e4      	adds	r4, r4, r3
 8001c0c:	429c      	cmp	r4, r3
 8001c0e:	419b      	sbcs	r3, r3
 8001c10:	425b      	negs	r3, r3
 8001c12:	4463      	add	r3, ip
 8001c14:	4699      	mov	r9, r3
 8001c16:	464b      	mov	r3, r9
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	d400      	bmi.n	8001c1e <__aeabi_dsub+0x42e>
 8001c1c:	e756      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	469c      	mov	ip, r3
 8001c22:	4ba8      	ldr	r3, [pc, #672]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001c24:	44e0      	add	r8, ip
 8001c26:	4598      	cmp	r8, r3
 8001c28:	d038      	beq.n	8001c9c <__aeabi_dsub+0x4ac>
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	48a6      	ldr	r0, [pc, #664]	; (8001ec8 <__aeabi_dsub+0x6d8>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4003      	ands	r3, r0
 8001c32:	0018      	movs	r0, r3
 8001c34:	0863      	lsrs	r3, r4, #1
 8001c36:	4014      	ands	r4, r2
 8001c38:	431c      	orrs	r4, r3
 8001c3a:	07c3      	lsls	r3, r0, #31
 8001c3c:	431c      	orrs	r4, r3
 8001c3e:	0843      	lsrs	r3, r0, #1
 8001c40:	4699      	mov	r9, r3
 8001c42:	e657      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001c44:	0010      	movs	r0, r2
 8001c46:	000e      	movs	r6, r1
 8001c48:	3820      	subs	r0, #32
 8001c4a:	40c6      	lsrs	r6, r0
 8001c4c:	2a20      	cmp	r2, #32
 8001c4e:	d004      	beq.n	8001c5a <__aeabi_dsub+0x46a>
 8001c50:	2040      	movs	r0, #64	; 0x40
 8001c52:	1a82      	subs	r2, r0, r2
 8001c54:	4091      	lsls	r1, r2
 8001c56:	430f      	orrs	r7, r1
 8001c58:	46b9      	mov	r9, r7
 8001c5a:	464f      	mov	r7, r9
 8001c5c:	1e7a      	subs	r2, r7, #1
 8001c5e:	4197      	sbcs	r7, r2
 8001c60:	4337      	orrs	r7, r6
 8001c62:	e60f      	b.n	8001884 <__aeabi_dsub+0x94>
 8001c64:	4662      	mov	r2, ip
 8001c66:	431a      	orrs	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	1e5a      	subs	r2, r3, #1
 8001c6c:	4193      	sbcs	r3, r2
 8001c6e:	1afc      	subs	r4, r7, r3
 8001c70:	42a7      	cmp	r7, r4
 8001c72:	41bf      	sbcs	r7, r7
 8001c74:	427f      	negs	r7, r7
 8001c76:	1bcb      	subs	r3, r1, r7
 8001c78:	4699      	mov	r9, r3
 8001c7a:	465d      	mov	r5, fp
 8001c7c:	4680      	mov	r8, r0
 8001c7e:	e608      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001c80:	4666      	mov	r6, ip
 8001c82:	431e      	orrs	r6, r3
 8001c84:	d100      	bne.n	8001c88 <__aeabi_dsub+0x498>
 8001c86:	e0be      	b.n	8001e06 <__aeabi_dsub+0x616>
 8001c88:	1e56      	subs	r6, r2, #1
 8001c8a:	2a01      	cmp	r2, #1
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x4a0>
 8001c8e:	e109      	b.n	8001ea4 <__aeabi_dsub+0x6b4>
 8001c90:	4c8c      	ldr	r4, [pc, #560]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001c92:	42a2      	cmp	r2, r4
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x4a8>
 8001c96:	e119      	b.n	8001ecc <__aeabi_dsub+0x6dc>
 8001c98:	0032      	movs	r2, r6
 8001c9a:	e6c1      	b.n	8001a20 <__aeabi_dsub+0x230>
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e648      	b.n	8001936 <__aeabi_dsub+0x146>
 8001ca4:	2020      	movs	r0, #32
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	1a80      	subs	r0, r0, r2
 8001caa:	003e      	movs	r6, r7
 8001cac:	4087      	lsls	r7, r0
 8001cae:	4084      	lsls	r4, r0
 8001cb0:	40d6      	lsrs	r6, r2
 8001cb2:	1e78      	subs	r0, r7, #1
 8001cb4:	4187      	sbcs	r7, r0
 8001cb6:	40d1      	lsrs	r1, r2
 8001cb8:	4334      	orrs	r4, r6
 8001cba:	433c      	orrs	r4, r7
 8001cbc:	448c      	add	ip, r1
 8001cbe:	e7a4      	b.n	8001c0a <__aeabi_dsub+0x41a>
 8001cc0:	4a80      	ldr	r2, [pc, #512]	; (8001ec4 <__aeabi_dsub+0x6d4>)
 8001cc2:	4290      	cmp	r0, r2
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x4d8>
 8001cc6:	e0e9      	b.n	8001e9c <__aeabi_dsub+0x6ac>
 8001cc8:	19df      	adds	r7, r3, r7
 8001cca:	429f      	cmp	r7, r3
 8001ccc:	419b      	sbcs	r3, r3
 8001cce:	4461      	add	r1, ip
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	18c9      	adds	r1, r1, r3
 8001cd4:	07cc      	lsls	r4, r1, #31
 8001cd6:	087f      	lsrs	r7, r7, #1
 8001cd8:	084b      	lsrs	r3, r1, #1
 8001cda:	4699      	mov	r9, r3
 8001cdc:	4680      	mov	r8, r0
 8001cde:	433c      	orrs	r4, r7
 8001ce0:	e6f4      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001ce2:	1afc      	subs	r4, r7, r3
 8001ce4:	42a7      	cmp	r7, r4
 8001ce6:	41bf      	sbcs	r7, r7
 8001ce8:	4663      	mov	r3, ip
 8001cea:	427f      	negs	r7, r7
 8001cec:	1ac9      	subs	r1, r1, r3
 8001cee:	1bcb      	subs	r3, r1, r7
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	465d      	mov	r5, fp
 8001cf4:	e5d5      	b.n	80018a2 <__aeabi_dsub+0xb2>
 8001cf6:	08ff      	lsrs	r7, r7, #3
 8001cf8:	074b      	lsls	r3, r1, #29
 8001cfa:	465d      	mov	r5, fp
 8001cfc:	433b      	orrs	r3, r7
 8001cfe:	08cc      	lsrs	r4, r1, #3
 8001d00:	e6ee      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001d02:	4662      	mov	r2, ip
 8001d04:	431a      	orrs	r2, r3
 8001d06:	d000      	beq.n	8001d0a <__aeabi_dsub+0x51a>
 8001d08:	e082      	b.n	8001e10 <__aeabi_dsub+0x620>
 8001d0a:	000b      	movs	r3, r1
 8001d0c:	433b      	orrs	r3, r7
 8001d0e:	d11b      	bne.n	8001d48 <__aeabi_dsub+0x558>
 8001d10:	2480      	movs	r4, #128	; 0x80
 8001d12:	2500      	movs	r5, #0
 8001d14:	0324      	lsls	r4, r4, #12
 8001d16:	e6f9      	b.n	8001b0c <__aeabi_dsub+0x31c>
 8001d18:	19dc      	adds	r4, r3, r7
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	419b      	sbcs	r3, r3
 8001d1e:	4461      	add	r1, ip
 8001d20:	4689      	mov	r9, r1
 8001d22:	425b      	negs	r3, r3
 8001d24:	4499      	add	r9, r3
 8001d26:	464b      	mov	r3, r9
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	d444      	bmi.n	8001db6 <__aeabi_dsub+0x5c6>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	4698      	mov	r8, r3
 8001d30:	e6cc      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001d32:	1bdc      	subs	r4, r3, r7
 8001d34:	4662      	mov	r2, ip
 8001d36:	42a3      	cmp	r3, r4
 8001d38:	419b      	sbcs	r3, r3
 8001d3a:	1a51      	subs	r1, r2, r1
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	1acb      	subs	r3, r1, r3
 8001d40:	4699      	mov	r9, r3
 8001d42:	2301      	movs	r3, #1
 8001d44:	4698      	mov	r8, r3
 8001d46:	e5a4      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001d48:	08ff      	lsrs	r7, r7, #3
 8001d4a:	074b      	lsls	r3, r1, #29
 8001d4c:	465d      	mov	r5, fp
 8001d4e:	433b      	orrs	r3, r7
 8001d50:	08cc      	lsrs	r4, r1, #3
 8001d52:	e6d7      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001d54:	4662      	mov	r2, ip
 8001d56:	431a      	orrs	r2, r3
 8001d58:	0014      	movs	r4, r2
 8001d5a:	1e63      	subs	r3, r4, #1
 8001d5c:	419c      	sbcs	r4, r3
 8001d5e:	e679      	b.n	8001a54 <__aeabi_dsub+0x264>
 8001d60:	0015      	movs	r5, r2
 8001d62:	4664      	mov	r4, ip
 8001d64:	3d20      	subs	r5, #32
 8001d66:	40ec      	lsrs	r4, r5
 8001d68:	46a0      	mov	r8, r4
 8001d6a:	2a20      	cmp	r2, #32
 8001d6c:	d005      	beq.n	8001d7a <__aeabi_dsub+0x58a>
 8001d6e:	2540      	movs	r5, #64	; 0x40
 8001d70:	4664      	mov	r4, ip
 8001d72:	1aaa      	subs	r2, r5, r2
 8001d74:	4094      	lsls	r4, r2
 8001d76:	4323      	orrs	r3, r4
 8001d78:	469a      	mov	sl, r3
 8001d7a:	4654      	mov	r4, sl
 8001d7c:	1e63      	subs	r3, r4, #1
 8001d7e:	419c      	sbcs	r4, r3
 8001d80:	4643      	mov	r3, r8
 8001d82:	4323      	orrs	r3, r4
 8001d84:	e773      	b.n	8001c6e <__aeabi_dsub+0x47e>
 8001d86:	4662      	mov	r2, ip
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	d023      	beq.n	8001dd4 <__aeabi_dsub+0x5e4>
 8001d8c:	000a      	movs	r2, r1
 8001d8e:	433a      	orrs	r2, r7
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dsub+0x5a4>
 8001d92:	e0a0      	b.n	8001ed6 <__aeabi_dsub+0x6e6>
 8001d94:	4662      	mov	r2, ip
 8001d96:	08db      	lsrs	r3, r3, #3
 8001d98:	0752      	lsls	r2, r2, #29
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4662      	mov	r2, ip
 8001d9e:	08d4      	lsrs	r4, r2, #3
 8001da0:	e6b0      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001da2:	000b      	movs	r3, r1
 8001da4:	433b      	orrs	r3, r7
 8001da6:	d100      	bne.n	8001daa <__aeabi_dsub+0x5ba>
 8001da8:	e728      	b.n	8001bfc <__aeabi_dsub+0x40c>
 8001daa:	08ff      	lsrs	r7, r7, #3
 8001dac:	074b      	lsls	r3, r1, #29
 8001dae:	465d      	mov	r5, fp
 8001db0:	433b      	orrs	r3, r7
 8001db2:	08cc      	lsrs	r4, r1, #3
 8001db4:	e697      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001db6:	2302      	movs	r3, #2
 8001db8:	4698      	mov	r8, r3
 8001dba:	e736      	b.n	8001c2a <__aeabi_dsub+0x43a>
 8001dbc:	1afc      	subs	r4, r7, r3
 8001dbe:	42a7      	cmp	r7, r4
 8001dc0:	41bf      	sbcs	r7, r7
 8001dc2:	4663      	mov	r3, ip
 8001dc4:	427f      	negs	r7, r7
 8001dc6:	1ac9      	subs	r1, r1, r3
 8001dc8:	1bcb      	subs	r3, r1, r7
 8001dca:	4699      	mov	r9, r3
 8001dcc:	2301      	movs	r3, #1
 8001dce:	465d      	mov	r5, fp
 8001dd0:	4698      	mov	r8, r3
 8001dd2:	e55e      	b.n	8001892 <__aeabi_dsub+0xa2>
 8001dd4:	074b      	lsls	r3, r1, #29
 8001dd6:	08ff      	lsrs	r7, r7, #3
 8001dd8:	433b      	orrs	r3, r7
 8001dda:	08cc      	lsrs	r4, r1, #3
 8001ddc:	e692      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001dde:	1bdc      	subs	r4, r3, r7
 8001de0:	4660      	mov	r0, ip
 8001de2:	42a3      	cmp	r3, r4
 8001de4:	41b6      	sbcs	r6, r6
 8001de6:	1a40      	subs	r0, r0, r1
 8001de8:	4276      	negs	r6, r6
 8001dea:	1b80      	subs	r0, r0, r6
 8001dec:	4681      	mov	r9, r0
 8001dee:	0200      	lsls	r0, r0, #8
 8001df0:	d560      	bpl.n	8001eb4 <__aeabi_dsub+0x6c4>
 8001df2:	1afc      	subs	r4, r7, r3
 8001df4:	42a7      	cmp	r7, r4
 8001df6:	41bf      	sbcs	r7, r7
 8001df8:	4663      	mov	r3, ip
 8001dfa:	427f      	negs	r7, r7
 8001dfc:	1ac9      	subs	r1, r1, r3
 8001dfe:	1bcb      	subs	r3, r1, r7
 8001e00:	4699      	mov	r9, r3
 8001e02:	465d      	mov	r5, fp
 8001e04:	e576      	b.n	80018f4 <__aeabi_dsub+0x104>
 8001e06:	08ff      	lsrs	r7, r7, #3
 8001e08:	074b      	lsls	r3, r1, #29
 8001e0a:	433b      	orrs	r3, r7
 8001e0c:	08cc      	lsrs	r4, r1, #3
 8001e0e:	e667      	b.n	8001ae0 <__aeabi_dsub+0x2f0>
 8001e10:	000a      	movs	r2, r1
 8001e12:	08db      	lsrs	r3, r3, #3
 8001e14:	433a      	orrs	r2, r7
 8001e16:	d100      	bne.n	8001e1a <__aeabi_dsub+0x62a>
 8001e18:	e66f      	b.n	8001afa <__aeabi_dsub+0x30a>
 8001e1a:	4662      	mov	r2, ip
 8001e1c:	0752      	lsls	r2, r2, #29
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	4662      	mov	r2, ip
 8001e22:	08d4      	lsrs	r4, r2, #3
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	0312      	lsls	r2, r2, #12
 8001e28:	4214      	tst	r4, r2
 8001e2a:	d007      	beq.n	8001e3c <__aeabi_dsub+0x64c>
 8001e2c:	08c8      	lsrs	r0, r1, #3
 8001e2e:	4210      	tst	r0, r2
 8001e30:	d104      	bne.n	8001e3c <__aeabi_dsub+0x64c>
 8001e32:	465d      	mov	r5, fp
 8001e34:	0004      	movs	r4, r0
 8001e36:	08fb      	lsrs	r3, r7, #3
 8001e38:	0749      	lsls	r1, r1, #29
 8001e3a:	430b      	orrs	r3, r1
 8001e3c:	0f5a      	lsrs	r2, r3, #29
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	0752      	lsls	r2, r2, #29
 8001e44:	4313      	orrs	r3, r2
 8001e46:	e65d      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001e48:	074b      	lsls	r3, r1, #29
 8001e4a:	08ff      	lsrs	r7, r7, #3
 8001e4c:	433b      	orrs	r3, r7
 8001e4e:	08cc      	lsrs	r4, r1, #3
 8001e50:	e649      	b.n	8001ae6 <__aeabi_dsub+0x2f6>
 8001e52:	19dc      	adds	r4, r3, r7
 8001e54:	429c      	cmp	r4, r3
 8001e56:	419b      	sbcs	r3, r3
 8001e58:	4461      	add	r1, ip
 8001e5a:	4689      	mov	r9, r1
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	4499      	add	r9, r3
 8001e60:	464b      	mov	r3, r9
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	d400      	bmi.n	8001e68 <__aeabi_dsub+0x678>
 8001e66:	e631      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001e68:	464a      	mov	r2, r9
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <__aeabi_dsub+0x6d8>)
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	2301      	movs	r3, #1
 8001e70:	4691      	mov	r9, r2
 8001e72:	4698      	mov	r8, r3
 8001e74:	e62a      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001e76:	0016      	movs	r6, r2
 8001e78:	4664      	mov	r4, ip
 8001e7a:	3e20      	subs	r6, #32
 8001e7c:	40f4      	lsrs	r4, r6
 8001e7e:	46a0      	mov	r8, r4
 8001e80:	2a20      	cmp	r2, #32
 8001e82:	d005      	beq.n	8001e90 <__aeabi_dsub+0x6a0>
 8001e84:	2640      	movs	r6, #64	; 0x40
 8001e86:	4664      	mov	r4, ip
 8001e88:	1ab2      	subs	r2, r6, r2
 8001e8a:	4094      	lsls	r4, r2
 8001e8c:	4323      	orrs	r3, r4
 8001e8e:	469a      	mov	sl, r3
 8001e90:	4654      	mov	r4, sl
 8001e92:	1e63      	subs	r3, r4, #1
 8001e94:	419c      	sbcs	r4, r3
 8001e96:	4643      	mov	r3, r8
 8001e98:	431c      	orrs	r4, r3
 8001e9a:	e5db      	b.n	8001a54 <__aeabi_dsub+0x264>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	2400      	movs	r4, #0
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e548      	b.n	8001936 <__aeabi_dsub+0x146>
 8001ea4:	19dc      	adds	r4, r3, r7
 8001ea6:	42bc      	cmp	r4, r7
 8001ea8:	41bf      	sbcs	r7, r7
 8001eaa:	4461      	add	r1, ip
 8001eac:	4689      	mov	r9, r1
 8001eae:	427f      	negs	r7, r7
 8001eb0:	44b9      	add	r9, r7
 8001eb2:	e738      	b.n	8001d26 <__aeabi_dsub+0x536>
 8001eb4:	464b      	mov	r3, r9
 8001eb6:	4323      	orrs	r3, r4
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x6cc>
 8001eba:	e69f      	b.n	8001bfc <__aeabi_dsub+0x40c>
 8001ebc:	e606      	b.n	8001acc <__aeabi_dsub+0x2dc>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	000007fe 	.word	0x000007fe
 8001ec4:	000007ff 	.word	0x000007ff
 8001ec8:	ff7fffff 	.word	0xff7fffff
 8001ecc:	08ff      	lsrs	r7, r7, #3
 8001ece:	074b      	lsls	r3, r1, #29
 8001ed0:	433b      	orrs	r3, r7
 8001ed2:	08cc      	lsrs	r4, r1, #3
 8001ed4:	e616      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001ed6:	4662      	mov	r2, ip
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	0752      	lsls	r2, r2, #29
 8001edc:	4313      	orrs	r3, r2
 8001ede:	4662      	mov	r2, ip
 8001ee0:	08d4      	lsrs	r4, r2, #3
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	0312      	lsls	r2, r2, #12
 8001ee6:	4214      	tst	r4, r2
 8001ee8:	d007      	beq.n	8001efa <__aeabi_dsub+0x70a>
 8001eea:	08c8      	lsrs	r0, r1, #3
 8001eec:	4210      	tst	r0, r2
 8001eee:	d104      	bne.n	8001efa <__aeabi_dsub+0x70a>
 8001ef0:	465d      	mov	r5, fp
 8001ef2:	0004      	movs	r4, r0
 8001ef4:	08fb      	lsrs	r3, r7, #3
 8001ef6:	0749      	lsls	r1, r1, #29
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	0f5a      	lsrs	r2, r3, #29
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	0752      	lsls	r2, r2, #29
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	e5fe      	b.n	8001b04 <__aeabi_dsub+0x314>
 8001f06:	2300      	movs	r3, #0
 8001f08:	4a01      	ldr	r2, [pc, #4]	; (8001f10 <__aeabi_dsub+0x720>)
 8001f0a:	001c      	movs	r4, r3
 8001f0c:	e513      	b.n	8001936 <__aeabi_dsub+0x146>
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__aeabi_dcmpun>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	0005      	movs	r5, r0
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <__aeabi_dcmpun+0x38>)
 8001f1a:	031c      	lsls	r4, r3, #12
 8001f1c:	0016      	movs	r6, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	030a      	lsls	r2, r1, #12
 8001f22:	0049      	lsls	r1, r1, #1
 8001f24:	0b12      	lsrs	r2, r2, #12
 8001f26:	0d49      	lsrs	r1, r1, #21
 8001f28:	0b24      	lsrs	r4, r4, #12
 8001f2a:	0d5b      	lsrs	r3, r3, #21
 8001f2c:	4281      	cmp	r1, r0
 8001f2e:	d008      	beq.n	8001f42 <__aeabi_dcmpun+0x2e>
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <__aeabi_dcmpun+0x38>)
 8001f32:	2000      	movs	r0, #0
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d103      	bne.n	8001f40 <__aeabi_dcmpun+0x2c>
 8001f38:	0020      	movs	r0, r4
 8001f3a:	4330      	orrs	r0, r6
 8001f3c:	1e43      	subs	r3, r0, #1
 8001f3e:	4198      	sbcs	r0, r3
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	2001      	movs	r0, #1
 8001f44:	432a      	orrs	r2, r5
 8001f46:	d1fb      	bne.n	8001f40 <__aeabi_dcmpun+0x2c>
 8001f48:	e7f2      	b.n	8001f30 <__aeabi_dcmpun+0x1c>
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	000007ff 	.word	0x000007ff

08001f50 <__aeabi_d2iz>:
 8001f50:	000a      	movs	r2, r1
 8001f52:	b530      	push	{r4, r5, lr}
 8001f54:	4c13      	ldr	r4, [pc, #76]	; (8001fa4 <__aeabi_d2iz+0x54>)
 8001f56:	0053      	lsls	r3, r2, #1
 8001f58:	0309      	lsls	r1, r1, #12
 8001f5a:	0005      	movs	r5, r0
 8001f5c:	0b09      	lsrs	r1, r1, #12
 8001f5e:	2000      	movs	r0, #0
 8001f60:	0d5b      	lsrs	r3, r3, #21
 8001f62:	0fd2      	lsrs	r2, r2, #31
 8001f64:	42a3      	cmp	r3, r4
 8001f66:	dd04      	ble.n	8001f72 <__aeabi_d2iz+0x22>
 8001f68:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <__aeabi_d2iz+0x58>)
 8001f6a:	4283      	cmp	r3, r0
 8001f6c:	dd02      	ble.n	8001f74 <__aeabi_d2iz+0x24>
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <__aeabi_d2iz+0x5c>)
 8001f70:	18d0      	adds	r0, r2, r3
 8001f72:	bd30      	pop	{r4, r5, pc}
 8001f74:	2080      	movs	r0, #128	; 0x80
 8001f76:	0340      	lsls	r0, r0, #13
 8001f78:	4301      	orrs	r1, r0
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <__aeabi_d2iz+0x60>)
 8001f7c:	1ac0      	subs	r0, r0, r3
 8001f7e:	281f      	cmp	r0, #31
 8001f80:	dd08      	ble.n	8001f94 <__aeabi_d2iz+0x44>
 8001f82:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <__aeabi_d2iz+0x64>)
 8001f84:	1ac3      	subs	r3, r0, r3
 8001f86:	40d9      	lsrs	r1, r3
 8001f88:	000b      	movs	r3, r1
 8001f8a:	4258      	negs	r0, r3
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	d1f0      	bne.n	8001f72 <__aeabi_d2iz+0x22>
 8001f90:	0018      	movs	r0, r3
 8001f92:	e7ee      	b.n	8001f72 <__aeabi_d2iz+0x22>
 8001f94:	4c08      	ldr	r4, [pc, #32]	; (8001fb8 <__aeabi_d2iz+0x68>)
 8001f96:	40c5      	lsrs	r5, r0
 8001f98:	46a4      	mov	ip, r4
 8001f9a:	4463      	add	r3, ip
 8001f9c:	4099      	lsls	r1, r3
 8001f9e:	000b      	movs	r3, r1
 8001fa0:	432b      	orrs	r3, r5
 8001fa2:	e7f2      	b.n	8001f8a <__aeabi_d2iz+0x3a>
 8001fa4:	000003fe 	.word	0x000003fe
 8001fa8:	0000041d 	.word	0x0000041d
 8001fac:	7fffffff 	.word	0x7fffffff
 8001fb0:	00000433 	.word	0x00000433
 8001fb4:	00000413 	.word	0x00000413
 8001fb8:	fffffbed 	.word	0xfffffbed

08001fbc <__aeabi_i2d>:
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d016      	beq.n	8001ff0 <__aeabi_i2d+0x34>
 8001fc2:	17c3      	asrs	r3, r0, #31
 8001fc4:	18c5      	adds	r5, r0, r3
 8001fc6:	405d      	eors	r5, r3
 8001fc8:	0fc4      	lsrs	r4, r0, #31
 8001fca:	0028      	movs	r0, r5
 8001fcc:	f000 f84c 	bl	8002068 <__clzsi2>
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <__aeabi_i2d+0x5c>)
 8001fd2:	1a12      	subs	r2, r2, r0
 8001fd4:	280a      	cmp	r0, #10
 8001fd6:	dc16      	bgt.n	8002006 <__aeabi_i2d+0x4a>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	002e      	movs	r6, r5
 8001fdc:	3315      	adds	r3, #21
 8001fde:	409e      	lsls	r6, r3
 8001fe0:	230b      	movs	r3, #11
 8001fe2:	1a18      	subs	r0, r3, r0
 8001fe4:	40c5      	lsrs	r5, r0
 8001fe6:	0552      	lsls	r2, r2, #21
 8001fe8:	032d      	lsls	r5, r5, #12
 8001fea:	0b2d      	lsrs	r5, r5, #12
 8001fec:	0d53      	lsrs	r3, r2, #21
 8001fee:	e003      	b.n	8001ff8 <__aeabi_i2d+0x3c>
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2500      	movs	r5, #0
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	051b      	lsls	r3, r3, #20
 8001ffa:	432b      	orrs	r3, r5
 8001ffc:	07e4      	lsls	r4, r4, #31
 8001ffe:	4323      	orrs	r3, r4
 8002000:	0030      	movs	r0, r6
 8002002:	0019      	movs	r1, r3
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	380b      	subs	r0, #11
 8002008:	4085      	lsls	r5, r0
 800200a:	0552      	lsls	r2, r2, #21
 800200c:	032d      	lsls	r5, r5, #12
 800200e:	2600      	movs	r6, #0
 8002010:	0b2d      	lsrs	r5, r5, #12
 8002012:	0d53      	lsrs	r3, r2, #21
 8002014:	e7f0      	b.n	8001ff8 <__aeabi_i2d+0x3c>
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	0000041e 	.word	0x0000041e

0800201c <__aeabi_ui2d>:
 800201c:	b510      	push	{r4, lr}
 800201e:	1e04      	subs	r4, r0, #0
 8002020:	d010      	beq.n	8002044 <__aeabi_ui2d+0x28>
 8002022:	f000 f821 	bl	8002068 <__clzsi2>
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <__aeabi_ui2d+0x48>)
 8002028:	1a1b      	subs	r3, r3, r0
 800202a:	280a      	cmp	r0, #10
 800202c:	dc11      	bgt.n	8002052 <__aeabi_ui2d+0x36>
 800202e:	220b      	movs	r2, #11
 8002030:	0021      	movs	r1, r4
 8002032:	1a12      	subs	r2, r2, r0
 8002034:	40d1      	lsrs	r1, r2
 8002036:	3015      	adds	r0, #21
 8002038:	030a      	lsls	r2, r1, #12
 800203a:	055b      	lsls	r3, r3, #21
 800203c:	4084      	lsls	r4, r0
 800203e:	0b12      	lsrs	r2, r2, #12
 8002040:	0d5b      	lsrs	r3, r3, #21
 8002042:	e001      	b.n	8002048 <__aeabi_ui2d+0x2c>
 8002044:	2300      	movs	r3, #0
 8002046:	2200      	movs	r2, #0
 8002048:	051b      	lsls	r3, r3, #20
 800204a:	4313      	orrs	r3, r2
 800204c:	0020      	movs	r0, r4
 800204e:	0019      	movs	r1, r3
 8002050:	bd10      	pop	{r4, pc}
 8002052:	0022      	movs	r2, r4
 8002054:	380b      	subs	r0, #11
 8002056:	4082      	lsls	r2, r0
 8002058:	055b      	lsls	r3, r3, #21
 800205a:	0312      	lsls	r2, r2, #12
 800205c:	2400      	movs	r4, #0
 800205e:	0b12      	lsrs	r2, r2, #12
 8002060:	0d5b      	lsrs	r3, r3, #21
 8002062:	e7f1      	b.n	8002048 <__aeabi_ui2d+0x2c>
 8002064:	0000041e 	.word	0x0000041e

08002068 <__clzsi2>:
 8002068:	211c      	movs	r1, #28
 800206a:	2301      	movs	r3, #1
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	4298      	cmp	r0, r3
 8002070:	d301      	bcc.n	8002076 <__clzsi2+0xe>
 8002072:	0c00      	lsrs	r0, r0, #16
 8002074:	3910      	subs	r1, #16
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	4298      	cmp	r0, r3
 800207a:	d301      	bcc.n	8002080 <__clzsi2+0x18>
 800207c:	0a00      	lsrs	r0, r0, #8
 800207e:	3908      	subs	r1, #8
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	4298      	cmp	r0, r3
 8002084:	d301      	bcc.n	800208a <__clzsi2+0x22>
 8002086:	0900      	lsrs	r0, r0, #4
 8002088:	3904      	subs	r1, #4
 800208a:	a202      	add	r2, pc, #8	; (adr r2, 8002094 <__clzsi2+0x2c>)
 800208c:	5c10      	ldrb	r0, [r2, r0]
 800208e:	1840      	adds	r0, r0, r1
 8002090:	4770      	bx	lr
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	02020304 	.word	0x02020304
 8002098:	01010101 	.word	0x01010101
	...

080020a4 <ADC_Channel_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ADC_Channel_Config()
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
	sConfig.Channel = ADC_CHANNEL_3;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <ADC_Channel_Config+0x34>)
 80020ac:	601a      	str	r2, [r3, #0]
	sConfig.Rank = 1;
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]

	if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ba:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <ADC_Channel_Config+0x30>)
 80020bc:	4b07      	ldr	r3, [pc, #28]	; (80020dc <ADC_Channel_Config+0x38>)
 80020be:	0011      	movs	r1, r2
 80020c0:	0018      	movs	r0, r3
 80020c2:	f001 f86f 	bl	80031a4 <HAL_ADC_ConfigChannel>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d001      	beq.n	80020ce <ADC_Channel_Config+0x2a>
	{
		Error_Handler();
 80020ca:	f000 fa1b 	bl	8002504 <Error_Handler>
	}
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200002dc 	.word	0x200002dc
 80020d8:	0c000008 	.word	0x0c000008
 80020dc:	20000220 	.word	0x20000220

080020e0 <Read_Sensors>:

void Read_Sensors()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_SENSORS; ++i)
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	e02f      	b.n	800214c <Read_Sensors+0x6c>
	{
		sConfig.Channel = channels[i];
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <Read_Sensors+0x7c>)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	58d2      	ldr	r2, [r2, r3]
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <Read_Sensors+0x80>)
 80020f6:	601a      	str	r2, [r3, #0]
		sConfig.Rank = ranks[i];
 80020f8:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <Read_Sensors+0x84>)
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	58d2      	ldr	r2, [r2, r3]
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <Read_Sensors+0x80>)
 8002102:	605a      	str	r2, [r3, #4]
		if(HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <Read_Sensors+0x80>)
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <Read_Sensors+0x88>)
 8002108:	0011      	movs	r1, r2
 800210a:	0018      	movs	r0, r3
 800210c:	f001 f84a 	bl	80031a4 <HAL_ADC_ConfigChannel>
 8002110:	1e03      	subs	r3, r0, #0
 8002112:	d001      	beq.n	8002118 <Read_Sensors+0x38>
		{
			Error_Handler();
 8002114:	f000 f9f6 	bl	8002504 <Error_Handler>
		}

		HAL_ADC_Start(&hadc1);
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <Read_Sensors+0x88>)
 800211a:	0018      	movs	r0, r3
 800211c:	f000 ff54 	bl	8002fc8 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8002120:	2301      	movs	r3, #1
 8002122:	425a      	negs	r2, r3
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <Read_Sensors+0x88>)
 8002126:	0011      	movs	r1, r2
 8002128:	0018      	movs	r0, r3
 800212a:	f000 ff9b 	bl	8003064 <HAL_ADC_PollForConversion>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d109      	bne.n	8002146 <Read_Sensors+0x66>
		{
			values[i] = HAL_ADC_GetValue(&hadc1);
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <Read_Sensors+0x88>)
 8002134:	0018      	movs	r0, r3
 8002136:	f001 f829 	bl	800318c <HAL_ADC_GetValue>
 800213a:	0003      	movs	r3, r0
 800213c:	b299      	uxth	r1, r3
 800213e:	4b0b      	ldr	r3, [pc, #44]	; (800216c <Read_Sensors+0x8c>)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	0052      	lsls	r2, r2, #1
 8002144:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < NUM_SENSORS; ++i)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3301      	adds	r3, #1
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b04      	cmp	r3, #4
 8002150:	ddcc      	ble.n	80020ec <Read_Sensors+0xc>
	*(values + channel) = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	HAL_Delay(100);
}
	 */
}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	b002      	add	sp, #8
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000000 	.word	0x20000000
 8002160:	200002dc 	.word	0x200002dc
 8002164:	20000014 	.word	0x20000014
 8002168:	20000220 	.word	0x20000220
 800216c:	200002d0 	.word	0x200002d0

08002170 <Determine_Turns>:

uint8_t Determine_Turns()
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
	Read_Sensors();
 8002176:	f7ff ffb3 	bl	80020e0 <Read_Sensors>

	uint8_t turn = 10;
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	220a      	movs	r2, #10
 800217e:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < NUM_SENSORS; ++i)
 8002180:	2300      	movs	r3, #0
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	e00f      	b.n	80021a6 <Determine_Turns+0x36>
	{
		// going through each sensor.
		// turn = 0 is bottom is all is covered
		// values go lower if they are blocked.
		// Assume that all are blocked.
		if(values[i] > THRESHOLD && turn > 5)
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <Determine_Turns+0x48>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	0052      	lsls	r2, r2, #1
 800218c:	5ad3      	ldrh	r3, [r2, r3]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	d906      	bls.n	80021a0 <Determine_Turns+0x30>
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d902      	bls.n	80021a0 <Determine_Turns+0x30>
		{
			turn = i;
 800219a:	1dfb      	adds	r3, r7, #7
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NUM_SENSORS; ++i)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	ddec      	ble.n	8002186 <Determine_Turns+0x16>
		}
	}

	return turn;
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	781b      	ldrb	r3, [r3, #0]
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200002d0 	.word	0x200002d0

080021bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021c0:	f000 fb80 	bl	80028c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c4:	f000 f81a 	bl	80021fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c8:	f000 f956 	bl	8002478 <MX_GPIO_Init>
  MX_ADC1_Init();
 80021cc:	f000 f85e 	bl	800228c <MX_ADC1_Init>
  MX_I2C2_Init();
 80021d0:	f000 f912 	bl	80023f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Channel_Config();
 80021d4:	f7ff ff66 	bl	80020a4 <ADC_Channel_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  turn_count = Determine_Turns();
 80021d8:	f7ff ffca 	bl	8002170 <Determine_Turns>
 80021dc:	0003      	movs	r3, r0
 80021de:	001a      	movs	r2, r3
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <main+0x38>)
 80021e2:	701a      	strb	r2, [r3, #0]

	  HAL_I2C_Slave_Transmit(&hi2c2, &turn_count, 1, 100);
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <main+0x38>)
 80021e6:	4804      	ldr	r0, [pc, #16]	; (80021f8 <main+0x3c>)
 80021e8:	2364      	movs	r3, #100	; 0x64
 80021ea:	2201      	movs	r2, #1
 80021ec:	f001 fda4 	bl	8003d38 <HAL_I2C_Slave_Transmit>
	  turn_count = Determine_Turns();
 80021f0:	e7f2      	b.n	80021d8 <main+0x1c>
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	200002da 	.word	0x200002da
 80021f8:	20000284 	.word	0x20000284

080021fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b093      	sub	sp, #76	; 0x4c
 8002200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002202:	2414      	movs	r4, #20
 8002204:	193b      	adds	r3, r7, r4
 8002206:	0018      	movs	r0, r3
 8002208:	2334      	movs	r3, #52	; 0x34
 800220a:	001a      	movs	r2, r3
 800220c:	2100      	movs	r1, #0
 800220e:	f003 fb7f 	bl	8005910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	0018      	movs	r0, r3
 8002216:	2310      	movs	r3, #16
 8002218:	001a      	movs	r2, r3
 800221a:	2100      	movs	r1, #0
 800221c:	f003 fb78 	bl	8005910 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	0018      	movs	r0, r3
 8002226:	f002 fe69 	bl	8004efc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800222a:	193b      	adds	r3, r7, r4
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002230:	193b      	adds	r3, r7, r4
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	0052      	lsls	r2, r2, #1
 8002236:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002238:	193b      	adds	r3, r7, r4
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800223e:	193b      	adds	r3, r7, r4
 8002240:	2240      	movs	r2, #64	; 0x40
 8002242:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002244:	193b      	adds	r3, r7, r4
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224a:	193b      	adds	r3, r7, r4
 800224c:	0018      	movs	r0, r3
 800224e:	f002 fe95 	bl	8004f7c <HAL_RCC_OscConfig>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002256:	f000 f955 	bl	8002504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	2200      	movs	r2, #0
 8002264:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800226c:	1d3b      	adds	r3, r7, #4
 800226e:	2200      	movs	r2, #0
 8002270:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2100      	movs	r1, #0
 8002276:	0018      	movs	r0, r3
 8002278:	f003 f996 	bl	80055a8 <HAL_RCC_ClockConfig>
 800227c:	1e03      	subs	r3, r0, #0
 800227e:	d001      	beq.n	8002284 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002280:	f000 f940 	bl	8002504 <Error_Handler>
  }
}
 8002284:	46c0      	nop			; (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	b013      	add	sp, #76	; 0x4c
 800228a:	bd90      	pop	{r4, r7, pc}

0800228c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	0018      	movs	r0, r3
 8002296:	230c      	movs	r3, #12
 8002298:	001a      	movs	r2, r3
 800229a:	2100      	movs	r1, #0
 800229c:	f003 fb38 	bl	8005910 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022a0:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <MX_ADC1_Init+0x150>)
 80022a2:	4a4f      	ldr	r2, [pc, #316]	; (80023e0 <MX_ADC1_Init+0x154>)
 80022a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022a6:	4b4d      	ldr	r3, [pc, #308]	; (80023dc <MX_ADC1_Init+0x150>)
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	05d2      	lsls	r2, r2, #23
 80022ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 80022ae:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <MX_ADC1_Init+0x150>)
 80022b0:	2218      	movs	r2, #24
 80022b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022b4:	4b49      	ldr	r3, [pc, #292]	; (80023dc <MX_ADC1_Init+0x150>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80022ba:	4b48      	ldr	r3, [pc, #288]	; (80023dc <MX_ADC1_Init+0x150>)
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	0392      	lsls	r2, r2, #14
 80022c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022c2:	4b46      	ldr	r3, [pc, #280]	; (80023dc <MX_ADC1_Init+0x150>)
 80022c4:	2204      	movs	r2, #4
 80022c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80022c8:	4b44      	ldr	r3, [pc, #272]	; (80023dc <MX_ADC1_Init+0x150>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80022ce:	4b43      	ldr	r3, [pc, #268]	; (80023dc <MX_ADC1_Init+0x150>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022d4:	4b41      	ldr	r3, [pc, #260]	; (80023dc <MX_ADC1_Init+0x150>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 80022da:	4b40      	ldr	r3, [pc, #256]	; (80023dc <MX_ADC1_Init+0x150>)
 80022dc:	2205      	movs	r2, #5
 80022de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80022e0:	4b3e      	ldr	r3, [pc, #248]	; (80023dc <MX_ADC1_Init+0x150>)
 80022e2:	2220      	movs	r2, #32
 80022e4:	2101      	movs	r1, #1
 80022e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022e8:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <MX_ADC1_Init+0x150>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ee:	4b3b      	ldr	r3, [pc, #236]	; (80023dc <MX_ADC1_Init+0x150>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <MX_ADC1_Init+0x150>)
 80022f6:	222c      	movs	r2, #44	; 0x2c
 80022f8:	2100      	movs	r1, #0
 80022fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80022fc:	4b37      	ldr	r3, [pc, #220]	; (80023dc <MX_ADC1_Init+0x150>)
 80022fe:	2200      	movs	r2, #0
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <MX_ADC1_Init+0x150>)
 8002304:	2200      	movs	r2, #0
 8002306:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8002308:	4b34      	ldr	r3, [pc, #208]	; (80023dc <MX_ADC1_Init+0x150>)
 800230a:	2200      	movs	r2, #0
 800230c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800230e:	4b33      	ldr	r3, [pc, #204]	; (80023dc <MX_ADC1_Init+0x150>)
 8002310:	223c      	movs	r2, #60	; 0x3c
 8002312:	2100      	movs	r1, #0
 8002314:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <MX_ADC1_Init+0x150>)
 8002318:	2200      	movs	r2, #0
 800231a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800231c:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <MX_ADC1_Init+0x150>)
 800231e:	0018      	movs	r0, r3
 8002320:	f000 fc74 	bl	8002c0c <HAL_ADC_Init>
 8002324:	1e03      	subs	r3, r0, #0
 8002326:	d001      	beq.n	800232c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002328:	f000 f8ec 	bl	8002504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4a2d      	ldr	r2, [pc, #180]	; (80023e4 <MX_ADC1_Init+0x158>)
 8002330:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800233e:	1d3a      	adds	r2, r7, #4
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <MX_ADC1_Init+0x150>)
 8002342:	0011      	movs	r1, r2
 8002344:	0018      	movs	r0, r3
 8002346:	f000 ff2d 	bl	80031a4 <HAL_ADC_ConfigChannel>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d001      	beq.n	8002352 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800234e:	f000 f8d9 	bl	8002504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <MX_ADC1_Init+0x15c>)
 8002356:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2204      	movs	r2, #4
 800235c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800235e:	1d3a      	adds	r2, r7, #4
 8002360:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <MX_ADC1_Init+0x150>)
 8002362:	0011      	movs	r1, r2
 8002364:	0018      	movs	r0, r3
 8002366:	f000 ff1d 	bl	80031a4 <HAL_ADC_ConfigChannel>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d001      	beq.n	8002372 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800236e:	f000 f8c9 	bl	8002504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <MX_ADC1_Init+0x160>)
 8002376:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2208      	movs	r2, #8
 800237c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800237e:	1d3a      	adds	r2, r7, #4
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <MX_ADC1_Init+0x150>)
 8002382:	0011      	movs	r1, r2
 8002384:	0018      	movs	r0, r3
 8002386:	f000 ff0d 	bl	80031a4 <HAL_ADC_ConfigChannel>
 800238a:	1e03      	subs	r3, r0, #0
 800238c:	d001      	beq.n	8002392 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800238e:	f000 f8b9 	bl	8002504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002392:	1d3b      	adds	r3, r7, #4
 8002394:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <MX_ADC1_Init+0x164>)
 8002396:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	220c      	movs	r2, #12
 800239c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800239e:	1d3a      	adds	r2, r7, #4
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_ADC1_Init+0x150>)
 80023a2:	0011      	movs	r1, r2
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fefd 	bl	80031a4 <HAL_ADC_ConfigChannel>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80023ae:	f000 f8a9 	bl	8002504 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <MX_ADC1_Init+0x168>)
 80023b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	2210      	movs	r2, #16
 80023bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023be:	1d3a      	adds	r2, r7, #4
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_ADC1_Init+0x150>)
 80023c2:	0011      	movs	r1, r2
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 feed 	bl	80031a4 <HAL_ADC_ConfigChannel>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d001      	beq.n	80023d2 <MX_ADC1_Init+0x146>
  {
    Error_Handler();
 80023ce:	f000 f899 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	20000220 	.word	0x20000220
 80023e0:	40012400 	.word	0x40012400
 80023e4:	0c000008 	.word	0x0c000008
 80023e8:	10000010 	.word	0x10000010
 80023ec:	14000020 	.word	0x14000020
 80023f0:	18000040 	.word	0x18000040
 80023f4:	1c000080 	.word	0x1c000080

080023f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <MX_I2C2_Init+0x74>)
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <MX_I2C2_Init+0x78>)
 8002400:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <MX_I2C2_Init+0x74>)
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <MX_I2C2_Init+0x7c>)
 8002406:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 128;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <MX_I2C2_Init+0x74>)
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <MX_I2C2_Init+0x74>)
 8002410:	2201      	movs	r2, #1
 8002412:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b15      	ldr	r3, [pc, #84]	; (800246c <MX_I2C2_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <MX_I2C2_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <MX_I2C2_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_I2C2_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <MX_I2C2_Init+0x74>)
 800242e:	2200      	movs	r2, #0
 8002430:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_I2C2_Init+0x74>)
 8002434:	0018      	movs	r0, r3
 8002436:	f001 fbe9 	bl	8003c0c <HAL_I2C_Init>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d001      	beq.n	8002442 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800243e:	f000 f861 	bl	8002504 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <MX_I2C2_Init+0x74>)
 8002444:	2100      	movs	r1, #0
 8002446:	0018      	movs	r0, r3
 8002448:	f002 fcc0 	bl	8004dcc <HAL_I2CEx_ConfigAnalogFilter>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d001      	beq.n	8002454 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002450:	f000 f858 	bl	8002504 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <MX_I2C2_Init+0x74>)
 8002456:	2100      	movs	r1, #0
 8002458:	0018      	movs	r0, r3
 800245a:	f002 fd03 	bl	8004e64 <HAL_I2CEx_ConfigDigitalFilter>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002462:	f000 f84f 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000284 	.word	0x20000284
 8002470:	40005800 	.word	0x40005800
 8002474:	00303d5b 	.word	0x00303d5b

08002478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247e:	240c      	movs	r4, #12
 8002480:	193b      	adds	r3, r7, r4
 8002482:	0018      	movs	r0, r3
 8002484:	2314      	movs	r3, #20
 8002486:	001a      	movs	r2, r3
 8002488:	2100      	movs	r1, #0
 800248a:	f003 fa41 	bl	8005910 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <MX_GPIO_Init+0x88>)
 8002490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <MX_GPIO_Init+0x88>)
 8002494:	2101      	movs	r1, #1
 8002496:	430a      	orrs	r2, r1
 8002498:	635a      	str	r2, [r3, #52]	; 0x34
 800249a:	4b19      	ldr	r3, [pc, #100]	; (8002500 <MX_GPIO_Init+0x88>)
 800249c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800249e:	2201      	movs	r2, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_GPIO_Init+0x88>)
 80024a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <MX_GPIO_Init+0x88>)
 80024ac:	2102      	movs	r1, #2
 80024ae:	430a      	orrs	r2, r1
 80024b0:	635a      	str	r2, [r3, #52]	; 0x34
 80024b2:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_GPIO_Init+0x88>)
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	0219      	lsls	r1, r3, #8
 80024c2:	23a0      	movs	r3, #160	; 0xa0
 80024c4:	05db      	lsls	r3, r3, #23
 80024c6:	2200      	movs	r2, #0
 80024c8:	0018      	movs	r0, r3
 80024ca:	f001 fb81 	bl	8003bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	0212      	lsls	r2, r2, #8
 80024d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d6:	193b      	adds	r3, r7, r4
 80024d8:	2201      	movs	r2, #1
 80024da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	193b      	adds	r3, r7, r4
 80024de:	2200      	movs	r2, #0
 80024e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	193b      	adds	r3, r7, r4
 80024e4:	2200      	movs	r2, #0
 80024e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	193a      	adds	r2, r7, r4
 80024ea:	23a0      	movs	r3, #160	; 0xa0
 80024ec:	05db      	lsls	r3, r3, #23
 80024ee:	0011      	movs	r1, r2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f001 fa09 	bl	8003908 <HAL_GPIO_Init>

}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b009      	add	sp, #36	; 0x24
 80024fc:	bd90      	pop	{r4, r7, pc}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	40021000 	.word	0x40021000

08002504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
}
 800250a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800250c:	e7fe      	b.n	800250c <Error_Handler+0x8>
	...

08002510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_MspInit+0x44>)
 8002518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_MspInit+0x44>)
 800251c:	2101      	movs	r1, #1
 800251e:	430a      	orrs	r2, r1
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_MspInit+0x44>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2201      	movs	r2, #1
 8002528:	4013      	ands	r3, r2
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_MspInit+0x44>)
 8002530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_MspInit+0x44>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0549      	lsls	r1, r1, #21
 8002538:	430a      	orrs	r2, r1
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_MspInit+0x44>)
 800253e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4013      	ands	r3, r2
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40021000 	.word	0x40021000

08002558 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b08b      	sub	sp, #44	; 0x2c
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	2414      	movs	r4, #20
 8002562:	193b      	adds	r3, r7, r4
 8002564:	0018      	movs	r0, r3
 8002566:	2314      	movs	r3, #20
 8002568:	001a      	movs	r2, r3
 800256a:	2100      	movs	r1, #0
 800256c:	f003 f9d0 	bl	8005910 <memset>
  if(hadc->Instance==ADC1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_ADC_MspInit+0x80>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d129      	bne.n	80025ce <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800257a:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_ADC_MspInit+0x84>)
 800257c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800257e:	4b17      	ldr	r3, [pc, #92]	; (80025dc <HAL_ADC_MspInit+0x84>)
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	0349      	lsls	r1, r1, #13
 8002584:	430a      	orrs	r2, r1
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_ADC_MspInit+0x84>)
 800258a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	035b      	lsls	r3, r3, #13
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_ADC_MspInit+0x84>)
 8002598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_ADC_MspInit+0x84>)
 800259c:	2101      	movs	r1, #1
 800259e:	430a      	orrs	r2, r1
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_ADC_MspInit+0x84>)
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	2201      	movs	r2, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80025ae:	193b      	adds	r3, r7, r4
 80025b0:	22f9      	movs	r2, #249	; 0xf9
 80025b2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025b4:	193b      	adds	r3, r7, r4
 80025b6:	2203      	movs	r2, #3
 80025b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	193b      	adds	r3, r7, r4
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c0:	193a      	adds	r2, r7, r4
 80025c2:	23a0      	movs	r3, #160	; 0xa0
 80025c4:	05db      	lsls	r3, r3, #23
 80025c6:	0011      	movs	r1, r2
 80025c8:	0018      	movs	r0, r3
 80025ca:	f001 f99d 	bl	8003908 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b00b      	add	sp, #44	; 0x2c
 80025d4:	bd90      	pop	{r4, r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	40012400 	.word	0x40012400
 80025dc:	40021000 	.word	0x40021000

080025e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b08b      	sub	sp, #44	; 0x2c
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	2414      	movs	r4, #20
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	0018      	movs	r0, r3
 80025ee:	2314      	movs	r3, #20
 80025f0:	001a      	movs	r2, r3
 80025f2:	2100      	movs	r1, #0
 80025f4:	f003 f98c 	bl	8005910 <memset>
  if(hi2c->Instance==I2C2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1f      	ldr	r2, [pc, #124]	; (800267c <HAL_I2C_MspInit+0x9c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d138      	bne.n	8002674 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002602:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_I2C_MspInit+0xa0>)
 8002604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <HAL_I2C_MspInit+0xa0>)
 8002608:	2102      	movs	r1, #2
 800260a:	430a      	orrs	r2, r1
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_I2C_MspInit+0xa0>)
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002612:	2202      	movs	r2, #2
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800261a:	193b      	adds	r3, r7, r4
 800261c:	22c0      	movs	r2, #192	; 0xc0
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002622:	0021      	movs	r1, r4
 8002624:	187b      	adds	r3, r7, r1
 8002626:	2212      	movs	r2, #18
 8002628:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	187b      	adds	r3, r7, r1
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2206      	movs	r2, #6
 800263a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	187b      	adds	r3, r7, r1
 800263e:	4a11      	ldr	r2, [pc, #68]	; (8002684 <HAL_I2C_MspInit+0xa4>)
 8002640:	0019      	movs	r1, r3
 8002642:	0010      	movs	r0, r2
 8002644:	f001 f960 	bl	8003908 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_I2C_MspInit+0xa0>)
 800264a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800264c:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_I2C_MspInit+0xa0>)
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	03c9      	lsls	r1, r1, #15
 8002652:	430a      	orrs	r2, r1
 8002654:	63da      	str	r2, [r3, #60]	; 0x3c
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_I2C_MspInit+0xa0>)
 8002658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	03db      	lsls	r3, r3, #15
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2100      	movs	r1, #0
 8002668:	2018      	movs	r0, #24
 800266a:	f001 f8a5 	bl	80037b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800266e:	2018      	movs	r0, #24
 8002670:	f001 f8b7 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b00b      	add	sp, #44	; 0x2c
 800267a:	bd90      	pop	{r4, r7, pc}
 800267c:	40005800 	.word	0x40005800
 8002680:	40021000 	.word	0x40021000
 8002684:	50000400 	.word	0x50000400

08002688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800268c:	e7fe      	b.n	800268c <NMI_Handler+0x4>

0800268e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002692:	e7fe      	b.n	8002692 <HardFault_Handler+0x4>

08002694 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ac:	f000 f974 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b0:	46c0      	nop			; (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 Interrupt.
  */
void I2C2_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <I2C2_IRQHandler+0x2c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	23e0      	movs	r3, #224	; 0xe0
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4013      	ands	r3, r2
 80026c8:	d004      	beq.n	80026d4 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <I2C2_IRQHandler+0x2c>)
 80026cc:	0018      	movs	r0, r3
 80026ce:	f001 fc63 	bl	8003f98 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80026d2:	e003      	b.n	80026dc <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <I2C2_IRQHandler+0x2c>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f001 fc44 	bl	8003f64 <HAL_I2C_EV_IRQHandler>
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	20000284 	.word	0x20000284

080026e8 <_getpid>:
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	2301      	movs	r3, #1
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <_kill>:
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
 80026fe:	f003 f8dd 	bl	80058bc <__errno>
 8002702:	0003      	movs	r3, r0
 8002704:	2216      	movs	r2, #22
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	2301      	movs	r3, #1
 800270a:	425b      	negs	r3, r3
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}

08002714 <_exit>:
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	2301      	movs	r3, #1
 800271e:	425a      	negs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0011      	movs	r1, r2
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff ffe5 	bl	80026f4 <_kill>
 800272a:	e7fe      	b.n	800272a <_exit+0x16>

0800272c <_read>:
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	e00a      	b.n	8002754 <_read+0x28>
 800273e:	e000      	b.n	8002742 <_read+0x16>
 8002740:	bf00      	nop
 8002742:	0001      	movs	r1, r0
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	60ba      	str	r2, [r7, #8]
 800274a:	b2ca      	uxtb	r2, r1
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3301      	adds	r3, #1
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	dbf0      	blt.n	800273e <_read+0x12>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b006      	add	sp, #24
 8002764:	bd80      	pop	{r7, pc}

08002766 <_write>:
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e009      	b.n	800278c <_write+0x26>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	60ba      	str	r2, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	e000      	b.n	8002786 <_write+0x20>
 8002784:	bf00      	nop
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	dbf1      	blt.n	8002778 <_write+0x12>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b006      	add	sp, #24
 800279c:	bd80      	pop	{r7, pc}

0800279e <_close>:
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	2301      	movs	r3, #1
 80027a8:	425b      	negs	r3, r3
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b002      	add	sp, #8
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <_fstat>:
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
 80027ba:	6039      	str	r1, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2280      	movs	r2, #128	; 0x80
 80027c0:	0192      	lsls	r2, r2, #6
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	2300      	movs	r3, #0
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b002      	add	sp, #8
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_isatty>:
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	2301      	movs	r3, #1
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}

080027e0 <_lseek>:
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	2300      	movs	r3, #0
 80027ee:	0018      	movs	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b004      	add	sp, #16
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <_sbrk>:
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <_sbrk+0x5c>)
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <_sbrk+0x60>)
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	4b13      	ldr	r3, [pc, #76]	; (800285c <_sbrk+0x64>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d102      	bne.n	800281a <_sbrk+0x22>
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <_sbrk+0x64>)
 8002816:	4a12      	ldr	r2, [pc, #72]	; (8002860 <_sbrk+0x68>)
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	18d3      	adds	r3, r2, r3
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d207      	bcs.n	8002838 <_sbrk+0x40>
 8002828:	f003 f848 	bl	80058bc <__errno>
 800282c:	0003      	movs	r3, r0
 800282e:	220c      	movs	r2, #12
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	2301      	movs	r3, #1
 8002834:	425b      	negs	r3, r3
 8002836:	e009      	b.n	800284c <_sbrk+0x54>
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <_sbrk+0x64>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	18d2      	adds	r2, r2, r3
 8002846:	4b05      	ldr	r3, [pc, #20]	; (800285c <_sbrk+0x64>)
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b006      	add	sp, #24
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20004800 	.word	0x20004800
 8002858:	00000400 	.word	0x00000400
 800285c:	200002e8 	.word	0x200002e8
 8002860:	20000300 	.word	0x20000300

08002864 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <Reset_Handler>:
 8002870:	480d      	ldr	r0, [pc, #52]	; (80028a8 <LoopForever+0x2>)
 8002872:	4685      	mov	sp, r0
 8002874:	f7ff fff6 	bl	8002864 <SystemInit>
 8002878:	480c      	ldr	r0, [pc, #48]	; (80028ac <LoopForever+0x6>)
 800287a:	490d      	ldr	r1, [pc, #52]	; (80028b0 <LoopForever+0xa>)
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <LoopForever+0xe>)
 800287e:	2300      	movs	r3, #0
 8002880:	e002      	b.n	8002888 <LoopCopyDataInit>

08002882 <CopyDataInit>:
 8002882:	58d4      	ldr	r4, [r2, r3]
 8002884:	50c4      	str	r4, [r0, r3]
 8002886:	3304      	adds	r3, #4

08002888 <LoopCopyDataInit>:
 8002888:	18c4      	adds	r4, r0, r3
 800288a:	428c      	cmp	r4, r1
 800288c:	d3f9      	bcc.n	8002882 <CopyDataInit>
 800288e:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <LoopForever+0x12>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <LoopForever+0x16>)
 8002892:	2300      	movs	r3, #0
 8002894:	e001      	b.n	800289a <LoopFillZerobss>

08002896 <FillZerobss>:
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	3204      	adds	r2, #4

0800289a <LoopFillZerobss>:
 800289a:	42a2      	cmp	r2, r4
 800289c:	d3fb      	bcc.n	8002896 <FillZerobss>
 800289e:	f003 f813 	bl	80058c8 <__libc_init_array>
 80028a2:	f7ff fc8b 	bl	80021bc <main>

080028a6 <LoopForever>:
 80028a6:	e7fe      	b.n	80028a6 <LoopForever>
 80028a8:	20004800 	.word	0x20004800
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000204 	.word	0x20000204
 80028b4:	0800897c 	.word	0x0800897c
 80028b8:	20000204 	.word	0x20000204
 80028bc:	20000300 	.word	0x20000300

080028c0 <ADC1_IRQHandler>:
 80028c0:	e7fe      	b.n	80028c0 <ADC1_IRQHandler>
	...

080028c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_Init+0x3c>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_Init+0x3c>)
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	0049      	lsls	r1, r1, #1
 80028da:	430a      	orrs	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028de:	2000      	movs	r0, #0
 80028e0:	f000 f810 	bl	8002904 <HAL_InitTick>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80028e8:	1dfb      	adds	r3, r7, #7
 80028ea:	2201      	movs	r2, #1
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e001      	b.n	80028f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80028f0:	f7ff fe0e 	bl	8002510 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	781b      	ldrb	r3, [r3, #0]
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40022000 	.word	0x40022000

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800290c:	230f      	movs	r3, #15
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_InitTick+0x88>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02b      	beq.n	8002974 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800291c:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <HAL_InitTick+0x8c>)
 800291e:	681c      	ldr	r4, [r3, #0]
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_InitTick+0x88>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	0019      	movs	r1, r3
 8002926:	23fa      	movs	r3, #250	; 0xfa
 8002928:	0098      	lsls	r0, r3, #2
 800292a:	f7fd fc03 	bl	8000134 <__udivsi3>
 800292e:	0003      	movs	r3, r0
 8002930:	0019      	movs	r1, r3
 8002932:	0020      	movs	r0, r4
 8002934:	f7fd fbfe 	bl	8000134 <__udivsi3>
 8002938:	0003      	movs	r3, r0
 800293a:	0018      	movs	r0, r3
 800293c:	f000 ff61 	bl	8003802 <HAL_SYSTICK_Config>
 8002940:	1e03      	subs	r3, r0, #0
 8002942:	d112      	bne.n	800296a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d80a      	bhi.n	8002960 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	2301      	movs	r3, #1
 800294e:	425b      	negs	r3, r3
 8002950:	2200      	movs	r2, #0
 8002952:	0018      	movs	r0, r3
 8002954:	f000 ff30 	bl	80037b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_InitTick+0x90>)
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e00d      	b.n	800297c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002960:	230f      	movs	r3, #15
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e008      	b.n	800297c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800296a:	230f      	movs	r3, #15
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	2201      	movs	r2, #1
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e003      	b.n	800297c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002974:	230f      	movs	r3, #15
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2201      	movs	r2, #1
 800297a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800297c:	230f      	movs	r3, #15
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	781b      	ldrb	r3, [r3, #0]
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b005      	add	sp, #20
 8002988:	bd90      	pop	{r4, r7, pc}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	20000030 	.word	0x20000030
 8002990:	20000028 	.word	0x20000028
 8002994:	2000002c 	.word	0x2000002c

08002998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_IncTick+0x1c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	001a      	movs	r2, r3
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_IncTick+0x20>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	18d2      	adds	r2, r2, r3
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_IncTick+0x20>)
 80029aa:	601a      	str	r2, [r3, #0]
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	20000030 	.word	0x20000030
 80029b8:	200002ec 	.word	0x200002ec

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <HAL_GetTick+0x10>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	200002ec 	.word	0x200002ec

080029d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80029e0:	401a      	ands	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	601a      	str	r2, [r3, #0]
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	fe3fffff 	.word	0xfe3fffff

080029f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	23e0      	movs	r3, #224	; 0xe0
 8002a06:	045b      	lsls	r3, r3, #17
 8002a08:	4013      	ands	r3, r2
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	2104      	movs	r1, #4
 8002a26:	400a      	ands	r2, r1
 8002a28:	2107      	movs	r1, #7
 8002a2a:	4091      	lsls	r1, r2
 8002a2c:	000a      	movs	r2, r1
 8002a2e:	43d2      	mvns	r2, r2
 8002a30:	401a      	ands	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2104      	movs	r1, #4
 8002a36:	400b      	ands	r3, r1
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4099      	lsls	r1, r3
 8002a3c:	000b      	movs	r3, r1
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b004      	add	sp, #16
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68da      	ldr	r2, [r3, #12]
 8002a58:	23c0      	movs	r3, #192	; 0xc0
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d101      	bne.n	8002a64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a60:	2301      	movs	r3, #1
 8002a62:	e000      	b.n	8002a66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b002      	add	sp, #8
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b084      	sub	sp, #16
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	60f8      	str	r0, [r7, #12]
 8002a76:	60b9      	str	r1, [r7, #8]
 8002a78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	211f      	movs	r1, #31
 8002a82:	400a      	ands	r2, r1
 8002a84:	210f      	movs	r1, #15
 8002a86:	4091      	lsls	r1, r2
 8002a88:	000a      	movs	r2, r1
 8002a8a:	43d2      	mvns	r2, r2
 8002a8c:	401a      	ands	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0e9b      	lsrs	r3, r3, #26
 8002a92:	210f      	movs	r1, #15
 8002a94:	4019      	ands	r1, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	201f      	movs	r0, #31
 8002a9a:	4003      	ands	r3, r0
 8002a9c:	4099      	lsls	r1, r3
 8002a9e:	000b      	movs	r3, r1
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}

08002aae <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	035b      	lsls	r3, r3, #13
 8002ac0:	0b5b      	lsrs	r3, r3, #13
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	0352      	lsls	r2, r2, #13
 8002ae2:	0b52      	lsrs	r2, r2, #13
 8002ae4:	43d2      	mvns	r2, r2
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	0212      	lsls	r2, r2, #8
 8002b08:	43d2      	mvns	r2, r2
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	400b      	ands	r3, r1
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002b16:	400b      	ands	r3, r1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	07ffff00 	.word	0x07ffff00

08002b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	0552      	lsls	r2, r2, #21
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b002      	add	sp, #8
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	6fffffe8 	.word	0x6fffffe8

08002b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	055b      	lsls	r3, r3, #21
 8002b64:	401a      	ands	r2, r3
 8002b66:	2380      	movs	r3, #128	; 0x80
 8002b68:	055b      	lsls	r3, r3, #21
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d101      	bne.n	8002b72 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <LL_ADC_Enable+0x20>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b002      	add	sp, #8
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	7fffffe8 	.word	0x7fffffe8

08002ba0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2201      	movs	r2, #1
 8002bae:	4013      	ands	r3, r2
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <LL_ADC_IsEnabled+0x18>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e000      	b.n	8002bba <LL_ADC_IsEnabled+0x1a>
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b002      	add	sp, #8
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a04      	ldr	r2, [pc, #16]	; (8002be4 <LL_ADC_REG_StartConversion+0x20>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	7fffffe8 	.word	0x7fffffe8

08002be8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d101      	bne.n	8002c00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b002      	add	sp, #8
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c14:	231f      	movs	r3, #31
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e1b1      	b.n	8002f96 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7ff fc8b 	bl	8002558 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2254      	movs	r2, #84	; 0x54
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7ff ff7d 	bl	8002b54 <LL_ADC_IsInternalRegulatorEnabled>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d115      	bne.n	8002c8a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7ff ff62 	bl	8002b2c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c68:	4bcd      	ldr	r3, [pc, #820]	; (8002fa0 <HAL_ADC_Init+0x394>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	49cd      	ldr	r1, [pc, #820]	; (8002fa4 <HAL_ADC_Init+0x398>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7fd fa60 	bl	8000134 <__udivsi3>
 8002c74:	0003      	movs	r3, r0
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c7c:	e002      	b.n	8002c84 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f9      	bne.n	8002c7e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f7ff ff60 	bl	8002b54 <LL_ADC_IsInternalRegulatorEnabled>
 8002c94:	1e03      	subs	r3, r0, #0
 8002c96:	d10f      	bne.n	8002cb8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cb0:	231f      	movs	r3, #31
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff ff93 	bl	8002be8 <LL_ADC_REG_IsConversionOngoing>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	2210      	movs	r2, #16
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d000      	beq.n	8002cd2 <HAL_ADC_Init+0xc6>
 8002cd0:	e154      	b.n	8002f7c <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d000      	beq.n	8002cda <HAL_ADC_Init+0xce>
 8002cd8:	e150      	b.n	8002f7c <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cde:	4ab2      	ldr	r2, [pc, #712]	; (8002fa8 <HAL_ADC_Init+0x39c>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7ff ff56 	bl	8002ba0 <LL_ADC_IsEnabled>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d156      	bne.n	8002da6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2218      	movs	r2, #24
 8002d00:	4393      	bics	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0f9b      	lsrs	r3, r3, #30
 8002d16:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	223c      	movs	r2, #60	; 0x3c
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d111      	bne.n	8002d52 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	0f9b      	lsrs	r3, r3, #30
 8002d34:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d3a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002d40:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002d46:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	4a94      	ldr	r2, [pc, #592]	; (8002fac <HAL_ADC_Init+0x3a0>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	23c0      	movs	r3, #192	; 0xc0
 8002d6e:	061b      	lsls	r3, r3, #24
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d018      	beq.n	8002da6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	05db      	lsls	r3, r3, #23
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d012      	beq.n	8002da6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	061b      	lsls	r3, r3, #24
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d00c      	beq.n	8002da6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002d8c:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_ADC_Init+0x3a4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a88      	ldr	r2, [pc, #544]	; (8002fb4 <HAL_ADC_Init+0x3a8>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	23f0      	movs	r3, #240	; 0xf0
 8002d9c:	039b      	lsls	r3, r3, #14
 8002d9e:	401a      	ands	r2, r3
 8002da0:	4b83      	ldr	r3, [pc, #524]	; (8002fb0 <HAL_ADC_Init+0x3a4>)
 8002da2:	430a      	orrs	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7e1b      	ldrb	r3, [r3, #24]
 8002daa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7e5b      	ldrb	r3, [r3, #25]
 8002db0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002db2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	7e9b      	ldrb	r3, [r3, #26]
 8002db8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002dba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_ADC_Init+0x1be>
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	015b      	lsls	r3, r3, #5
 8002dc8:	e000      	b.n	8002dcc <HAL_ADC_Init+0x1c0>
 8002dca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002dcc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002dd2:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da04      	bge.n	8002de6 <HAL_ADC_Init+0x1da>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	085b      	lsrs	r3, r3, #1
 8002de4:	e001      	b.n	8002dea <HAL_ADC_Init+0x1de>
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002dea:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	212c      	movs	r1, #44	; 0x2c
 8002df0:	5c5b      	ldrb	r3, [r3, r1]
 8002df2:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002df4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	5c9b      	ldrb	r3, [r3, r2]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d115      	bne.n	8002e32 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7e9b      	ldrb	r3, [r3, #26]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	0252      	lsls	r2, r2, #9
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e00b      	b.n	8002e32 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	2220      	movs	r2, #32
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3e:	23e0      	movs	r3, #224	; 0xe0
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <HAL_ADC_Init+0x3ac>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	0019      	movs	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	4a53      	ldr	r2, [pc, #332]	; (8002fbc <HAL_ADC_Init+0x3b0>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e84:	001a      	movs	r2, r3
 8002e86:	2100      	movs	r1, #0
 8002e88:	f7ff fdc3 	bl	8002a12 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	494a      	ldr	r1, [pc, #296]	; (8002fc0 <HAL_ADC_Init+0x3b4>)
 8002e96:	001a      	movs	r2, r3
 8002e98:	f7ff fdbb 	bl	8002a12 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d109      	bne.n	8002eb8 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2110      	movs	r1, #16
 8002eb0:	4249      	negs	r1, r1
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb6:	e03a      	b.n	8002f2e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	039b      	lsls	r3, r3, #14
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d134      	bne.n	8002f2e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	e00c      	b.n	8002ee4 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	40da      	lsrs	r2, r3
 8002ed4:	0013      	movs	r3, r2
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	d006      	beq.n	8002eec <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	d9ef      	bls.n	8002eca <HAL_ADC_Init+0x2be>
 8002eea:	e000      	b.n	8002eee <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002eec:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d109      	bne.n	8002f08 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2110      	movs	r1, #16
 8002f00:	4249      	negs	r1, r1
 8002f02:	430a      	orrs	r2, r1
 8002f04:	629a      	str	r2, [r3, #40]	; 0x28
 8002f06:	e012      	b.n	8002f2e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	221c      	movs	r2, #28
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	4252      	negs	r2, r2
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	0011      	movs	r1, r2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <HAL_ADC_Init+0x3b8>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d10b      	bne.n	8002f56 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	2203      	movs	r2, #3
 8002f4a:	4393      	bics	r3, r2
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002f54:	e01c      	b.n	8002f90 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	2212      	movs	r2, #18
 8002f5c:	4393      	bics	r3, r2
 8002f5e:	2210      	movs	r2, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002f72:	231f      	movs	r3, #31
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002f7a:	e009      	b.n	8002f90 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f80:	2210      	movs	r2, #16
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f88:	231f      	movs	r3, #31
 8002f8a:	18fb      	adds	r3, r7, r3
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002f90:	231f      	movs	r3, #31
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	781b      	ldrb	r3, [r3, #0]
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b008      	add	sp, #32
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	20000028 	.word	0x20000028
 8002fa4:	00030d40 	.word	0x00030d40
 8002fa8:	fffffefd 	.word	0xfffffefd
 8002fac:	1ffffc02 	.word	0x1ffffc02
 8002fb0:	40012708 	.word	0x40012708
 8002fb4:	ffc3ffff 	.word	0xffc3ffff
 8002fb8:	fffe0219 	.word	0xfffe0219
 8002fbc:	dffffc02 	.word	0xdffffc02
 8002fc0:	07ffff04 	.word	0x07ffff04
 8002fc4:	833fffe7 	.word	0x833fffe7

08002fc8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b5b0      	push	{r4, r5, r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fe07 	bl	8002be8 <LL_ADC_REG_IsConversionOngoing>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d135      	bne.n	800304a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2254      	movs	r2, #84	; 0x54
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_Start+0x24>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e035      	b.n	8003058 <HAL_ADC_Start+0x90>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2254      	movs	r2, #84	; 0x54
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ff4:	250f      	movs	r5, #15
 8002ff6:	197c      	adds	r4, r7, r5
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 faaa 	bl	8003554 <ADC_Enable>
 8003000:	0003      	movs	r3, r0
 8003002:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003004:	197b      	adds	r3, r7, r5
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d119      	bne.n	8003040 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <HAL_ADC_Start+0x98>)
 8003012:	4013      	ands	r3, r2
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	0052      	lsls	r2, r2, #1
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	221c      	movs	r2, #28
 800302a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2254      	movs	r2, #84	; 0x54
 8003030:	2100      	movs	r1, #0
 8003032:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff fdc3 	bl	8002bc4 <LL_ADC_REG_StartConversion>
 800303e:	e008      	b.n	8003052 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2254      	movs	r2, #84	; 0x54
 8003044:	2100      	movs	r1, #0
 8003046:	5499      	strb	r1, [r3, r2]
 8003048:	e003      	b.n	8003052 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800304a:	230f      	movs	r3, #15
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	2202      	movs	r2, #2
 8003050:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003052:	230f      	movs	r3, #15
 8003054:	18fb      	adds	r3, r7, r3
 8003056:	781b      	ldrb	r3, [r3, #0]
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	b004      	add	sp, #16
 800305e:	bdb0      	pop	{r4, r5, r7, pc}
 8003060:	fffff0fe 	.word	0xfffff0fe

08003064 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	2b08      	cmp	r3, #8
 8003074:	d102      	bne.n	800307c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003076:	2308      	movs	r3, #8
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e00f      	b.n	800309c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	4013      	ands	r3, r2
 8003086:	d007      	beq.n	8003098 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	2220      	movs	r2, #32
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e072      	b.n	800317e <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003098:	2304      	movs	r3, #4
 800309a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800309c:	f7ff fc8e 	bl	80029bc <HAL_GetTick>
 80030a0:	0003      	movs	r3, r0
 80030a2:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80030a4:	e01f      	b.n	80030e6 <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	d01c      	beq.n	80030e6 <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80030ac:	f7ff fc86 	bl	80029bc <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d302      	bcc.n	80030c2 <HAL_ADC_PollForConversion+0x5e>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d111      	bne.n	80030e6 <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	d10b      	bne.n	80030e6 <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	2204      	movs	r2, #4
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2254      	movs	r2, #84	; 0x54
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e04b      	b.n	800317e <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4013      	ands	r3, r2
 80030f0:	d0d9      	beq.n	80030a6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	2280      	movs	r2, #128	; 0x80
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff fca1 	bl	8002a4c <LL_ADC_REG_IsTriggerSourceSWStart>
 800310a:	1e03      	subs	r3, r0, #0
 800310c:	d02e      	beq.n	800316c <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7e9b      	ldrb	r3, [r3, #26]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d12a      	bne.n	800316c <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2208      	movs	r2, #8
 800311e:	4013      	ands	r3, r2
 8003120:	2b08      	cmp	r3, #8
 8003122:	d123      	bne.n	800316c <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff fd5d 	bl	8002be8 <LL_ADC_REG_IsConversionOngoing>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d110      	bne.n	8003154 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	210c      	movs	r1, #12
 800313e:	438a      	bics	r2, r1
 8003140:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	4a10      	ldr	r2, [pc, #64]	; (8003188 <HAL_ADC_PollForConversion+0x124>)
 8003148:	4013      	ands	r3, r2
 800314a:	2201      	movs	r2, #1
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	659a      	str	r2, [r3, #88]	; 0x58
 8003152:	e00b      	b.n	800316c <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	2220      	movs	r2, #32
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003164:	2201      	movs	r2, #1
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7e1b      	ldrb	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	220c      	movs	r2, #12
 800317a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b004      	add	sp, #16
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	fffffefe 	.word	0xfffffefe

0800318c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b002      	add	sp, #8
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ae:	2317      	movs	r3, #23
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2254      	movs	r2, #84	; 0x54
 80031be:	5c9b      	ldrb	r3, [r3, r2]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x24>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e1c0      	b.n	800354a <HAL_ADC_ConfigChannel+0x3a6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2254      	movs	r2, #84	; 0x54
 80031cc:	2101      	movs	r1, #1
 80031ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7ff fd07 	bl	8002be8 <LL_ADC_REG_IsConversionOngoing>
 80031da:	1e03      	subs	r3, r0, #0
 80031dc:	d000      	beq.n	80031e0 <HAL_ADC_ConfigChannel+0x3c>
 80031de:	e1a3      	b.n	8003528 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d100      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x46>
 80031e8:	e143      	b.n	8003472 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	061b      	lsls	r3, r3, #24
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d004      	beq.n	8003200 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031fa:	4ac1      	ldr	r2, [pc, #772]	; (8003500 <HAL_ADC_ConfigChannel+0x35c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d108      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0019      	movs	r1, r3
 800320a:	0010      	movs	r0, r2
 800320c:	f7ff fc4f 	bl	8002aae <LL_ADC_REG_SetSequencerChAdd>
 8003210:	e0c9      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	211f      	movs	r1, #31
 800321c:	400b      	ands	r3, r1
 800321e:	210f      	movs	r1, #15
 8003220:	4099      	lsls	r1, r3
 8003222:	000b      	movs	r3, r1
 8003224:	43db      	mvns	r3, r3
 8003226:	4013      	ands	r3, r2
 8003228:	0019      	movs	r1, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	035b      	lsls	r3, r3, #13
 8003230:	0b5b      	lsrs	r3, r3, #13
 8003232:	d105      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x9c>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	221f      	movs	r2, #31
 800323c:	4013      	ands	r3, r2
 800323e:	e098      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2201      	movs	r2, #1
 8003246:	4013      	ands	r3, r2
 8003248:	d000      	beq.n	800324c <HAL_ADC_ConfigChannel+0xa8>
 800324a:	e091      	b.n	8003370 <HAL_ADC_ConfigChannel+0x1cc>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2202      	movs	r2, #2
 8003252:	4013      	ands	r3, r2
 8003254:	d000      	beq.n	8003258 <HAL_ADC_ConfigChannel+0xb4>
 8003256:	e089      	b.n	800336c <HAL_ADC_ConfigChannel+0x1c8>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2204      	movs	r2, #4
 800325e:	4013      	ands	r3, r2
 8003260:	d000      	beq.n	8003264 <HAL_ADC_ConfigChannel+0xc0>
 8003262:	e081      	b.n	8003368 <HAL_ADC_ConfigChannel+0x1c4>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2208      	movs	r2, #8
 800326a:	4013      	ands	r3, r2
 800326c:	d000      	beq.n	8003270 <HAL_ADC_ConfigChannel+0xcc>
 800326e:	e079      	b.n	8003364 <HAL_ADC_ConfigChannel+0x1c0>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2210      	movs	r2, #16
 8003276:	4013      	ands	r3, r2
 8003278:	d000      	beq.n	800327c <HAL_ADC_ConfigChannel+0xd8>
 800327a:	e071      	b.n	8003360 <HAL_ADC_ConfigChannel+0x1bc>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2220      	movs	r2, #32
 8003282:	4013      	ands	r3, r2
 8003284:	d000      	beq.n	8003288 <HAL_ADC_ConfigChannel+0xe4>
 8003286:	e069      	b.n	800335c <HAL_ADC_ConfigChannel+0x1b8>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2240      	movs	r2, #64	; 0x40
 800328e:	4013      	ands	r3, r2
 8003290:	d000      	beq.n	8003294 <HAL_ADC_ConfigChannel+0xf0>
 8003292:	e061      	b.n	8003358 <HAL_ADC_ConfigChannel+0x1b4>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2280      	movs	r2, #128	; 0x80
 800329a:	4013      	ands	r3, r2
 800329c:	d000      	beq.n	80032a0 <HAL_ADC_ConfigChannel+0xfc>
 800329e:	e059      	b.n	8003354 <HAL_ADC_ConfigChannel+0x1b0>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	4013      	ands	r3, r2
 80032aa:	d151      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x1ac>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	2380      	movs	r3, #128	; 0x80
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4013      	ands	r3, r2
 80032b6:	d149      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1a8>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4013      	ands	r3, r2
 80032c2:	d141      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x1a4>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	4013      	ands	r3, r2
 80032ce:	d139      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x1a0>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	015b      	lsls	r3, r3, #5
 80032d8:	4013      	ands	r3, r2
 80032da:	d131      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x19c>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	019b      	lsls	r3, r3, #6
 80032e4:	4013      	ands	r3, r2
 80032e6:	d129      	bne.n	800333c <HAL_ADC_ConfigChannel+0x198>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	01db      	lsls	r3, r3, #7
 80032f0:	4013      	ands	r3, r2
 80032f2:	d121      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x194>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	4013      	ands	r3, r2
 80032fe:	d119      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x190>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	025b      	lsls	r3, r3, #9
 8003308:	4013      	ands	r3, r2
 800330a:	d111      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x18c>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	2380      	movs	r3, #128	; 0x80
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	4013      	ands	r3, r2
 8003316:	d109      	bne.n	800332c <HAL_ADC_ConfigChannel+0x188>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	02db      	lsls	r3, r3, #11
 8003320:	4013      	ands	r3, r2
 8003322:	d001      	beq.n	8003328 <HAL_ADC_ConfigChannel+0x184>
 8003324:	2312      	movs	r3, #18
 8003326:	e024      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003328:	2300      	movs	r3, #0
 800332a:	e022      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 800332c:	2311      	movs	r3, #17
 800332e:	e020      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003330:	2310      	movs	r3, #16
 8003332:	e01e      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003334:	230f      	movs	r3, #15
 8003336:	e01c      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003338:	230e      	movs	r3, #14
 800333a:	e01a      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 800333c:	230d      	movs	r3, #13
 800333e:	e018      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003340:	230c      	movs	r3, #12
 8003342:	e016      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003344:	230b      	movs	r3, #11
 8003346:	e014      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003348:	230a      	movs	r3, #10
 800334a:	e012      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 800334c:	2309      	movs	r3, #9
 800334e:	e010      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003350:	2308      	movs	r3, #8
 8003352:	e00e      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003354:	2307      	movs	r3, #7
 8003356:	e00c      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003358:	2306      	movs	r3, #6
 800335a:	e00a      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 800335c:	2305      	movs	r3, #5
 800335e:	e008      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003360:	2304      	movs	r3, #4
 8003362:	e006      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003364:	2303      	movs	r3, #3
 8003366:	e004      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003368:	2302      	movs	r3, #2
 800336a:	e002      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 800336c:	2301      	movs	r3, #1
 800336e:	e000      	b.n	8003372 <HAL_ADC_ConfigChannel+0x1ce>
 8003370:	2300      	movs	r3, #0
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	6852      	ldr	r2, [r2, #4]
 8003376:	201f      	movs	r0, #31
 8003378:	4002      	ands	r2, r0
 800337a:	4093      	lsls	r3, r2
 800337c:	000a      	movs	r2, r1
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	d808      	bhi.n	80033a6 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	001a      	movs	r2, r3
 80033a2:	f7ff fb64 	bl	8002a6e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	001a      	movs	r2, r3
 80033b4:	f7ff fb9e 	bl	8002af4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db00      	blt.n	80033c2 <HAL_ADC_ConfigChannel+0x21e>
 80033c0:	e0bc      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033c2:	4b50      	ldr	r3, [pc, #320]	; (8003504 <HAL_ADC_ConfigChannel+0x360>)
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7ff fb17 	bl	80029f8 <LL_ADC_GetCommonPathInternalCh>
 80033ca:	0003      	movs	r3, r0
 80033cc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4d      	ldr	r2, [pc, #308]	; (8003508 <HAL_ADC_ConfigChannel+0x364>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d122      	bne.n	800341e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	2380      	movs	r3, #128	; 0x80
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80033e0:	d11d      	bne.n	800341e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	0412      	lsls	r2, r2, #16
 80033e8:	4313      	orrs	r3, r2
 80033ea:	4a46      	ldr	r2, [pc, #280]	; (8003504 <HAL_ADC_ConfigChannel+0x360>)
 80033ec:	0019      	movs	r1, r3
 80033ee:	0010      	movs	r0, r2
 80033f0:	f7ff faee 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033f4:	4b45      	ldr	r3, [pc, #276]	; (800350c <HAL_ADC_ConfigChannel+0x368>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4945      	ldr	r1, [pc, #276]	; (8003510 <HAL_ADC_ConfigChannel+0x36c>)
 80033fa:	0018      	movs	r0, r3
 80033fc:	f7fc fe9a 	bl	8000134 <__udivsi3>
 8003400:	0003      	movs	r3, r0
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	0013      	movs	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	189b      	adds	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800340e:	e002      	b.n	8003416 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3b01      	subs	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1f9      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800341c:	e08e      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <HAL_ADC_ConfigChannel+0x370>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d10e      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x2a2>
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	045b      	lsls	r3, r3, #17
 800342e:	4013      	ands	r3, r2
 8003430:	d109      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	0452      	lsls	r2, r2, #17
 8003438:	4313      	orrs	r3, r2
 800343a:	4a32      	ldr	r2, [pc, #200]	; (8003504 <HAL_ADC_ConfigChannel+0x360>)
 800343c:	0019      	movs	r1, r3
 800343e:	0010      	movs	r0, r2
 8003440:	f7ff fac6 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 8003444:	e07a      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a33      	ldr	r2, [pc, #204]	; (8003518 <HAL_ADC_ConfigChannel+0x374>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d000      	beq.n	8003452 <HAL_ADC_ConfigChannel+0x2ae>
 8003450:	e074      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	03db      	lsls	r3, r3, #15
 8003458:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800345a:	d000      	beq.n	800345e <HAL_ADC_ConfigChannel+0x2ba>
 800345c:	e06e      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	2280      	movs	r2, #128	; 0x80
 8003462:	03d2      	lsls	r2, r2, #15
 8003464:	4313      	orrs	r3, r2
 8003466:	4a27      	ldr	r2, [pc, #156]	; (8003504 <HAL_ADC_ConfigChannel+0x360>)
 8003468:	0019      	movs	r1, r3
 800346a:	0010      	movs	r0, r2
 800346c:	f7ff fab0 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 8003470:	e064      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	429a      	cmp	r2, r3
 800347c:	d004      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003482:	4a1f      	ldr	r2, [pc, #124]	; (8003500 <HAL_ADC_ConfigChannel+0x35c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d107      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0019      	movs	r1, r3
 8003492:	0010      	movs	r0, r2
 8003494:	f7ff fb1c 	bl	8002ad0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	da4d      	bge.n	800353c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034a0:	4b18      	ldr	r3, [pc, #96]	; (8003504 <HAL_ADC_ConfigChannel+0x360>)
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7ff faa8 	bl	80029f8 <LL_ADC_GetCommonPathInternalCh>
 80034a8:	0003      	movs	r3, r0
 80034aa:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_ADC_ConfigChannel+0x364>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d108      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_ADC_ConfigChannel+0x378>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <HAL_ADC_ConfigChannel+0x360>)
 80034be:	0019      	movs	r1, r3
 80034c0:	0010      	movs	r0, r2
 80034c2:	f7ff fa85 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 80034c6:	e039      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a11      	ldr	r2, [pc, #68]	; (8003514 <HAL_ADC_ConfigChannel+0x370>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d108      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_ADC_ConfigChannel+0x37c>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <HAL_ADC_ConfigChannel+0x360>)
 80034da:	0019      	movs	r1, r3
 80034dc:	0010      	movs	r0, r2
 80034de:	f7ff fa77 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 80034e2:	e02b      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a0b      	ldr	r2, [pc, #44]	; (8003518 <HAL_ADC_ConfigChannel+0x374>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d126      	bne.n	800353c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <HAL_ADC_ConfigChannel+0x380>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	4a03      	ldr	r2, [pc, #12]	; (8003504 <HAL_ADC_ConfigChannel+0x360>)
 80034f6:	0019      	movs	r1, r3
 80034f8:	0010      	movs	r0, r2
 80034fa:	f7ff fa69 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 80034fe:	e01d      	b.n	800353c <HAL_ADC_ConfigChannel+0x398>
 8003500:	80000004 	.word	0x80000004
 8003504:	40012708 	.word	0x40012708
 8003508:	b0001000 	.word	0xb0001000
 800350c:	20000028 	.word	0x20000028
 8003510:	00030d40 	.word	0x00030d40
 8003514:	b8004000 	.word	0xb8004000
 8003518:	b4002000 	.word	0xb4002000
 800351c:	ff7fffff 	.word	0xff7fffff
 8003520:	feffffff 	.word	0xfeffffff
 8003524:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352c:	2220      	movs	r2, #32
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003534:	2317      	movs	r3, #23
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	2201      	movs	r2, #1
 800353a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2254      	movs	r2, #84	; 0x54
 8003540:	2100      	movs	r1, #0
 8003542:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003544:	2317      	movs	r3, #23
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	781b      	ldrb	r3, [r3, #0]
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b006      	add	sp, #24
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)

08003554 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800355c:	2300      	movs	r3, #0
 800355e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0018      	movs	r0, r3
 8003566:	f7ff fb1b 	bl	8002ba0 <LL_ADC_IsEnabled>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d000      	beq.n	8003570 <ADC_Enable+0x1c>
 800356e:	e069      	b.n	8003644 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4a36      	ldr	r2, [pc, #216]	; (8003650 <ADC_Enable+0xfc>)
 8003578:	4013      	ands	r3, r2
 800357a:	d00d      	beq.n	8003598 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	2210      	movs	r2, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2201      	movs	r2, #1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e056      	b.n	8003646 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff faed 	bl	8002b7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035a2:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <ADC_Enable+0x100>)
 80035a4:	0018      	movs	r0, r3
 80035a6:	f7ff fa27 	bl	80029f8 <LL_ADC_GetCommonPathInternalCh>
 80035aa:	0002      	movs	r2, r0
 80035ac:	2380      	movs	r3, #128	; 0x80
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	4013      	ands	r3, r2
 80035b2:	d00f      	beq.n	80035d4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035b4:	4b28      	ldr	r3, [pc, #160]	; (8003658 <ADC_Enable+0x104>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4928      	ldr	r1, [pc, #160]	; (800365c <ADC_Enable+0x108>)
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fc fdba 	bl	8000134 <__udivsi3>
 80035c0:	0003      	movs	r3, r0
 80035c2:	3301      	adds	r3, #1
 80035c4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035c6:	e002      	b.n	80035ce <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f9      	bne.n	80035c8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7e5b      	ldrb	r3, [r3, #25]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d033      	beq.n	8003644 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80035dc:	f7ff f9ee 	bl	80029bc <HAL_GetTick>
 80035e0:	0003      	movs	r3, r0
 80035e2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e4:	e027      	b.n	8003636 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff fad8 	bl	8002ba0 <LL_ADC_IsEnabled>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d104      	bne.n	80035fe <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7ff fabf 	bl	8002b7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035fe:	f7ff f9dd 	bl	80029bc <HAL_GetTick>
 8003602:	0002      	movs	r2, r0
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d914      	bls.n	8003636 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	4013      	ands	r3, r2
 8003616:	2b01      	cmp	r3, #1
 8003618:	d00d      	beq.n	8003636 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361e:	2210      	movs	r2, #16
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	2201      	movs	r2, #1
 800362c:	431a      	orrs	r2, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e007      	b.n	8003646 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	4013      	ands	r3, r2
 8003640:	2b01      	cmp	r3, #1
 8003642:	d1d0      	bne.n	80035e6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	80000017 	.word	0x80000017
 8003654:	40012708 	.word	0x40012708
 8003658:	20000028 	.word	0x20000028
 800365c:	00030d40 	.word	0x00030d40

08003660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	0002      	movs	r2, r0
 8003668:	1dfb      	adds	r3, r7, #7
 800366a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b7f      	cmp	r3, #127	; 0x7f
 8003672:	d809      	bhi.n	8003688 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003674:	1dfb      	adds	r3, r7, #7
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	001a      	movs	r2, r3
 800367a:	231f      	movs	r3, #31
 800367c:	401a      	ands	r2, r3
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__NVIC_EnableIRQ+0x30>)
 8003680:	2101      	movs	r1, #1
 8003682:	4091      	lsls	r1, r2
 8003684:	000a      	movs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}
 8003690:	e000e100 	.word	0xe000e100

08003694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003694:	b590      	push	{r4, r7, lr}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	0002      	movs	r2, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	1dfb      	adds	r3, r7, #7
 80036a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036a2:	1dfb      	adds	r3, r7, #7
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b7f      	cmp	r3, #127	; 0x7f
 80036a8:	d828      	bhi.n	80036fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036aa:	4a2f      	ldr	r2, [pc, #188]	; (8003768 <__NVIC_SetPriority+0xd4>)
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	33c0      	adds	r3, #192	; 0xc0
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	589b      	ldr	r3, [r3, r2]
 80036ba:	1dfa      	adds	r2, r7, #7
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	0011      	movs	r1, r2
 80036c0:	2203      	movs	r2, #3
 80036c2:	400a      	ands	r2, r1
 80036c4:	00d2      	lsls	r2, r2, #3
 80036c6:	21ff      	movs	r1, #255	; 0xff
 80036c8:	4091      	lsls	r1, r2
 80036ca:	000a      	movs	r2, r1
 80036cc:	43d2      	mvns	r2, r2
 80036ce:	401a      	ands	r2, r3
 80036d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	019b      	lsls	r3, r3, #6
 80036d6:	22ff      	movs	r2, #255	; 0xff
 80036d8:	401a      	ands	r2, r3
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	0018      	movs	r0, r3
 80036e0:	2303      	movs	r3, #3
 80036e2:	4003      	ands	r3, r0
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036e8:	481f      	ldr	r0, [pc, #124]	; (8003768 <__NVIC_SetPriority+0xd4>)
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b25b      	sxtb	r3, r3
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	430a      	orrs	r2, r1
 80036f4:	33c0      	adds	r3, #192	; 0xc0
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80036fa:	e031      	b.n	8003760 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <__NVIC_SetPriority+0xd8>)
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	0019      	movs	r1, r3
 8003704:	230f      	movs	r3, #15
 8003706:	400b      	ands	r3, r1
 8003708:	3b08      	subs	r3, #8
 800370a:	089b      	lsrs	r3, r3, #2
 800370c:	3306      	adds	r3, #6
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	3304      	adds	r3, #4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	1dfa      	adds	r2, r7, #7
 8003718:	7812      	ldrb	r2, [r2, #0]
 800371a:	0011      	movs	r1, r2
 800371c:	2203      	movs	r2, #3
 800371e:	400a      	ands	r2, r1
 8003720:	00d2      	lsls	r2, r2, #3
 8003722:	21ff      	movs	r1, #255	; 0xff
 8003724:	4091      	lsls	r1, r2
 8003726:	000a      	movs	r2, r1
 8003728:	43d2      	mvns	r2, r2
 800372a:	401a      	ands	r2, r3
 800372c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	22ff      	movs	r2, #255	; 0xff
 8003734:	401a      	ands	r2, r3
 8003736:	1dfb      	adds	r3, r7, #7
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	0018      	movs	r0, r3
 800373c:	2303      	movs	r3, #3
 800373e:	4003      	ands	r3, r0
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003744:	4809      	ldr	r0, [pc, #36]	; (800376c <__NVIC_SetPriority+0xd8>)
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	001c      	movs	r4, r3
 800374c:	230f      	movs	r3, #15
 800374e:	4023      	ands	r3, r4
 8003750:	3b08      	subs	r3, #8
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	430a      	orrs	r2, r1
 8003756:	3306      	adds	r3, #6
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	18c3      	adds	r3, r0, r3
 800375c:	3304      	adds	r3, #4
 800375e:	601a      	str	r2, [r3, #0]
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b003      	add	sp, #12
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	e000e100 	.word	0xe000e100
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1e5a      	subs	r2, r3, #1
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	045b      	lsls	r3, r3, #17
 8003780:	429a      	cmp	r2, r3
 8003782:	d301      	bcc.n	8003788 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003784:	2301      	movs	r3, #1
 8003786:	e010      	b.n	80037aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <SysTick_Config+0x44>)
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	3a01      	subs	r2, #1
 800378e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003790:	2301      	movs	r3, #1
 8003792:	425b      	negs	r3, r3
 8003794:	2103      	movs	r1, #3
 8003796:	0018      	movs	r0, r3
 8003798:	f7ff ff7c 	bl	8003694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <SysTick_Config+0x44>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <SysTick_Config+0x44>)
 80037a4:	2207      	movs	r2, #7
 80037a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b002      	add	sp, #8
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	e000e010 	.word	0xe000e010

080037b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
 80037c2:	210f      	movs	r1, #15
 80037c4:	187b      	adds	r3, r7, r1
 80037c6:	1c02      	adds	r2, r0, #0
 80037c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	187b      	adds	r3, r7, r1
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b25b      	sxtb	r3, r3
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff ff5d 	bl	8003694 <__NVIC_SetPriority>
}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	0002      	movs	r2, r0
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	b25b      	sxtb	r3, r3
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7ff ff33 	bl	8003660 <__NVIC_EnableIRQ>
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f7ff ffaf 	bl	8003770 <SysTick_Config>
 8003812:	0003      	movs	r3, r0
}
 8003814:	0018      	movs	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	b002      	add	sp, #8
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003824:	210f      	movs	r1, #15
 8003826:	187b      	adds	r3, r7, r1
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2225      	movs	r2, #37	; 0x25
 8003830:	5c9b      	ldrb	r3, [r3, r2]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d006      	beq.n	8003846 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2204      	movs	r2, #4
 800383c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800383e:	187b      	adds	r3, r7, r1
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
 8003844:	e049      	b.n	80038da <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	210e      	movs	r1, #14
 8003852:	438a      	bics	r2, r1
 8003854:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2101      	movs	r1, #1
 8003862:	438a      	bics	r2, r1
 8003864:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	491d      	ldr	r1, [pc, #116]	; (80038e8 <HAL_DMA_Abort_IT+0xcc>)
 8003872:	400a      	ands	r2, r1
 8003874:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003876:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_DMA_Abort_IT+0xd0>)
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	221c      	movs	r2, #28
 8003880:	4013      	ands	r3, r2
 8003882:	2201      	movs	r2, #1
 8003884:	409a      	lsls	r2, r3
 8003886:	4b19      	ldr	r3, [pc, #100]	; (80038ec <HAL_DMA_Abort_IT+0xd0>)
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003894:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00c      	beq.n	80038b8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a8:	490f      	ldr	r1, [pc, #60]	; (80038e8 <HAL_DMA_Abort_IT+0xcc>)
 80038aa:	400a      	ands	r2, r1
 80038ac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80038b6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2225      	movs	r2, #37	; 0x25
 80038bc:	2101      	movs	r1, #1
 80038be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2224      	movs	r2, #36	; 0x24
 80038c4:	2100      	movs	r1, #0
 80038c6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	0010      	movs	r0, r2
 80038d8:	4798      	blx	r3
    }
  }
  return status;
 80038da:	230f      	movs	r3, #15
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	781b      	ldrb	r3, [r3, #0]
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	fffffeff 	.word	0xfffffeff
 80038ec:	40020000 	.word	0x40020000

080038f0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2225      	movs	r2, #37	; 0x25
 80038fc:	5c9b      	ldrb	r3, [r3, r2]
 80038fe:	b2db      	uxtb	r3, r3
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	b002      	add	sp, #8
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003916:	e147      	b.n	8003ba8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2101      	movs	r1, #1
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4091      	lsls	r1, r2
 8003922:	000a      	movs	r2, r1
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d100      	bne.n	8003930 <HAL_GPIO_Init+0x28>
 800392e:	e138      	b.n	8003ba2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2203      	movs	r2, #3
 8003936:	4013      	ands	r3, r2
 8003938:	2b01      	cmp	r3, #1
 800393a:	d005      	beq.n	8003948 <HAL_GPIO_Init+0x40>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2203      	movs	r2, #3
 8003942:	4013      	ands	r3, r2
 8003944:	2b02      	cmp	r3, #2
 8003946:	d130      	bne.n	80039aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	2203      	movs	r2, #3
 8003954:	409a      	lsls	r2, r3
 8003956:	0013      	movs	r3, r2
 8003958:	43da      	mvns	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	0013      	movs	r3, r2
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800397e:	2201      	movs	r2, #1
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	409a      	lsls	r2, r3
 8003984:	0013      	movs	r3, r2
 8003986:	43da      	mvns	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	2201      	movs	r2, #1
 8003996:	401a      	ands	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d017      	beq.n	80039e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2203      	movs	r2, #3
 80039c2:	409a      	lsls	r2, r3
 80039c4:	0013      	movs	r3, r2
 80039c6:	43da      	mvns	r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	409a      	lsls	r2, r3
 80039d8:	0013      	movs	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2203      	movs	r2, #3
 80039ec:	4013      	ands	r3, r2
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d123      	bne.n	8003a3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	08da      	lsrs	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3208      	adds	r2, #8
 80039fa:	0092      	lsls	r2, r2, #2
 80039fc:	58d3      	ldr	r3, [r2, r3]
 80039fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2207      	movs	r2, #7
 8003a04:	4013      	ands	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	220f      	movs	r2, #15
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2107      	movs	r1, #7
 8003a1e:	400b      	ands	r3, r1
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	08da      	lsrs	r2, r3, #3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3208      	adds	r2, #8
 8003a34:	0092      	lsls	r2, r2, #2
 8003a36:	6939      	ldr	r1, [r7, #16]
 8003a38:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	2203      	movs	r2, #3
 8003a46:	409a      	lsls	r2, r3
 8003a48:	0013      	movs	r3, r2
 8003a4a:	43da      	mvns	r2, r3
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2203      	movs	r2, #3
 8003a58:	401a      	ands	r2, r3
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	0013      	movs	r3, r2
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	23c0      	movs	r3, #192	; 0xc0
 8003a74:	029b      	lsls	r3, r3, #10
 8003a76:	4013      	ands	r3, r2
 8003a78:	d100      	bne.n	8003a7c <HAL_GPIO_Init+0x174>
 8003a7a:	e092      	b.n	8003ba2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a7c:	4a50      	ldr	r2, [pc, #320]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	089b      	lsrs	r3, r3, #2
 8003a82:	3318      	adds	r3, #24
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	589b      	ldr	r3, [r3, r2]
 8003a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2203      	movs	r2, #3
 8003a8e:	4013      	ands	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	220f      	movs	r2, #15
 8003a94:	409a      	lsls	r2, r3
 8003a96:	0013      	movs	r3, r2
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	23a0      	movs	r3, #160	; 0xa0
 8003aa4:	05db      	lsls	r3, r3, #23
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d013      	beq.n	8003ad2 <HAL_GPIO_Init+0x1ca>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a45      	ldr	r2, [pc, #276]	; (8003bc4 <HAL_GPIO_Init+0x2bc>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00d      	beq.n	8003ace <HAL_GPIO_Init+0x1c6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a44      	ldr	r2, [pc, #272]	; (8003bc8 <HAL_GPIO_Init+0x2c0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <HAL_GPIO_Init+0x1c2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a43      	ldr	r2, [pc, #268]	; (8003bcc <HAL_GPIO_Init+0x2c4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_GPIO_Init+0x1be>
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e006      	b.n	8003ad4 <HAL_GPIO_Init+0x1cc>
 8003ac6:	2305      	movs	r3, #5
 8003ac8:	e004      	b.n	8003ad4 <HAL_GPIO_Init+0x1cc>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e002      	b.n	8003ad4 <HAL_GPIO_Init+0x1cc>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_GPIO_Init+0x1cc>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	2103      	movs	r1, #3
 8003ad8:	400a      	ands	r2, r1
 8003ada:	00d2      	lsls	r2, r2, #3
 8003adc:	4093      	lsls	r3, r2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ae4:	4936      	ldr	r1, [pc, #216]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	089b      	lsrs	r3, r3, #2
 8003aea:	3318      	adds	r3, #24
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003af2:	4a33      	ldr	r2, [pc, #204]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	58d3      	ldr	r3, [r2, r3]
 8003af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	43da      	mvns	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	025b      	lsls	r3, r3, #9
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b18:	4929      	ldr	r1, [pc, #164]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003b20:	4a27      	ldr	r2, [pc, #156]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003b22:	2384      	movs	r3, #132	; 0x84
 8003b24:	58d3      	ldr	r3, [r2, r3]
 8003b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	029b      	lsls	r3, r3, #10
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b46:	491e      	ldr	r1, [pc, #120]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003b48:	2284      	movs	r2, #132	; 0x84
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43da      	mvns	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	035b      	lsls	r3, r3, #13
 8003b66:	4013      	ands	r3, r2
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b72:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43da      	mvns	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	2380      	movs	r3, #128	; 0x80
 8003b8e:	039b      	lsls	r3, r3, #14
 8003b90:	4013      	ands	r3, r2
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <HAL_GPIO_Init+0x2b8>)
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	40da      	lsrs	r2, r3
 8003bb0:	1e13      	subs	r3, r2, #0
 8003bb2:	d000      	beq.n	8003bb6 <HAL_GPIO_Init+0x2ae>
 8003bb4:	e6b0      	b.n	8003918 <HAL_GPIO_Init+0x10>
  }
}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b006      	add	sp, #24
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021800 	.word	0x40021800
 8003bc4:	50000400 	.word	0x50000400
 8003bc8:	50000800 	.word	0x50000800
 8003bcc:	50000c00 	.word	0x50000c00

08003bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	0008      	movs	r0, r1
 8003bda:	0011      	movs	r1, r2
 8003bdc:	1cbb      	adds	r3, r7, #2
 8003bde:	1c02      	adds	r2, r0, #0
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	1c7b      	adds	r3, r7, #1
 8003be4:	1c0a      	adds	r2, r1, #0
 8003be6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003be8:	1c7b      	adds	r3, r7, #1
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d004      	beq.n	8003bfa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bf0:	1cbb      	adds	r3, r7, #2
 8003bf2:	881a      	ldrh	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bf8:	e003      	b.n	8003c02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bfa:	1cbb      	adds	r3, r7, #2
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e082      	b.n	8003d24 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2241      	movs	r2, #65	; 0x41
 8003c22:	5c9b      	ldrb	r3, [r3, r2]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2240      	movs	r2, #64	; 0x40
 8003c2e:	2100      	movs	r1, #0
 8003c30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7fe fcd3 	bl	80025e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2241      	movs	r2, #65	; 0x41
 8003c3e:	2124      	movs	r1, #36	; 0x24
 8003c40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	438a      	bics	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4934      	ldr	r1, [pc, #208]	; (8003d2c <HAL_I2C_Init+0x120>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4931      	ldr	r1, [pc, #196]	; (8003d30 <HAL_I2C_Init+0x124>)
 8003c6c:	400a      	ands	r2, r1
 8003c6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d108      	bne.n	8003c8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	0209      	lsls	r1, r1, #8
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
 8003c88:	e007      	b.n	8003c9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2184      	movs	r1, #132	; 0x84
 8003c94:	0209      	lsls	r1, r1, #8
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d104      	bne.n	8003cac <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	0112      	lsls	r2, r2, #4
 8003caa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	491f      	ldr	r1, [pc, #124]	; (8003d34 <HAL_I2C_Init+0x128>)
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	491a      	ldr	r1, [pc, #104]	; (8003d30 <HAL_I2C_Init+0x124>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69d9      	ldr	r1, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2101      	movs	r1, #1
 8003d02:	430a      	orrs	r2, r1
 8003d04:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2241      	movs	r2, #65	; 0x41
 8003d10:	2120      	movs	r1, #32
 8003d12:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2242      	movs	r2, #66	; 0x42
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b002      	add	sp, #8
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	f0ffffff 	.word	0xf0ffffff
 8003d30:	ffff7fff 	.word	0xffff7fff
 8003d34:	02008000 	.word	0x02008000

08003d38 <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                            uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	603b      	str	r3, [r7, #0]
 8003d44:	1dbb      	adds	r3, r7, #6
 8003d46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2241      	movs	r2, #65	; 0x41
 8003d4c:	5c9b      	ldrb	r3, [r3, r2]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d000      	beq.n	8003d56 <HAL_I2C_Slave_Transmit+0x1e>
 8003d54:	e0fe      	b.n	8003f54 <HAL_I2C_Slave_Transmit+0x21c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_I2C_Slave_Transmit+0x2c>
 8003d5c:	1dbb      	adds	r3, r7, #6
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d105      	bne.n	8003d70 <HAL_I2C_Slave_Transmit+0x38>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2280      	movs	r2, #128	; 0x80
 8003d68:	0092      	lsls	r2, r2, #2
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e0f2      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	5c9b      	ldrb	r3, [r3, r2]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Slave_Transmit+0x46>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0eb      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2240      	movs	r2, #64	; 0x40
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d86:	f7fe fe19 	bl	80029bc <HAL_GetTick>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	617b      	str	r3, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2241      	movs	r2, #65	; 0x41
 8003d92:	2121      	movs	r1, #33	; 0x21
 8003d94:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2242      	movs	r2, #66	; 0x42
 8003d9a:	2120      	movs	r1, #32
 8003d9c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1dba      	adds	r2, r7, #6
 8003dae:	8812      	ldrh	r2, [r2, #0]
 8003db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4967      	ldr	r1, [pc, #412]	; (8003f60 <HAL_I2C_Slave_Transmit+0x228>)
 8003dc4:	400a      	ands	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2108      	movs	r1, #8
 8003dd6:	f000 fe61 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 8003dda:	1e03      	subs	r3, r0, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_I2C_Slave_Transmit+0xbc>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2180      	movs	r1, #128	; 0x80
 8003dea:	0209      	lsls	r1, r1, #8
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b0      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d119      	bne.n	8003e38 <HAL_I2C_Slave_Transmit+0x100>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	0013      	movs	r3, r2
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2108      	movs	r1, #8
 8003e12:	f000 fe43 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 8003e16:	1e03      	subs	r3, r0, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_I2C_Slave_Transmit+0xf8>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2180      	movs	r1, #128	; 0x80
 8003e26:	0209      	lsls	r1, r1, #8
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e092      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2208      	movs	r2, #8
 8003e36:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	0259      	lsls	r1, r3, #9
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	0013      	movs	r3, r2
 8003e46:	2200      	movs	r2, #0
 8003e48:	f000 fe28 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d02f      	beq.n	8003eb0 <HAL_I2C_Slave_Transmit+0x178>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2180      	movs	r1, #128	; 0x80
 8003e5c:	0209      	lsls	r1, r1, #8
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e077      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	6839      	ldr	r1, [r7, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 fe54 	bl	8004b1a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_I2C_Slave_Transmit+0x154>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2180      	movs	r1, #128	; 0x80
 8003e82:	0209      	lsls	r1, r1, #8
 8003e84:	430a      	orrs	r2, r1
 8003e86:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e064      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1d5      	bne.n	8003e66 <HAL_I2C_Slave_Transmit+0x12e>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f000 fe69 	bl	8004b98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ec6:	1e03      	subs	r3, r0, #0
 8003ec8:	d012      	beq.n	8003ef0 <HAL_I2C_Slave_Transmit+0x1b8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	0209      	lsls	r1, r1, #8
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]

      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d103      	bne.n	8003eec <HAL_I2C_Slave_Transmit+0x1b4>
      {
        /* Normal use case for Transmitter mode */
        /* A NACK is generated to confirm the end of transfer */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
 8003eea:	e001      	b.n	8003ef0 <HAL_I2C_Slave_Transmit+0x1b8>
      }
      else
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e032      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
      }
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	0219      	lsls	r1, r3, #8
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	0013      	movs	r3, r2
 8003f06:	2201      	movs	r2, #1
 8003f08:	f000 fdc8 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_I2C_Slave_Transmit+0x1ee>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2180      	movs	r1, #128	; 0x80
 8003f1c:	0209      	lsls	r1, r1, #8
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e017      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	0209      	lsls	r1, r1, #8
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2241      	movs	r2, #65	; 0x41
 8003f3c:	2120      	movs	r1, #32
 8003f3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2242      	movs	r2, #66	; 0x42
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2240      	movs	r2, #64	; 0x40
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e000      	b.n	8003f56 <HAL_I2C_Slave_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003f54:	2302      	movs	r3, #2
  }
}
 8003f56:	0018      	movs	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b006      	add	sp, #24
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	ffff7fff 	.word	0xffff7fff

08003f64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
  }
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b004      	add	sp, #16
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	001a      	movs	r2, r3
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d010      	beq.n	8003fde <HAL_I2C_ER_IRQHandler+0x46>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	09db      	lsrs	r3, r3, #7
 8003fc0:	001a      	movs	r2, r3
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003fc6:	d00a      	beq.n	8003fde <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fcc:	2201      	movs	r2, #1
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	0052      	lsls	r2, r2, #1
 8003fdc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	0a9b      	lsrs	r3, r3, #10
 8003fe2:	001a      	movs	r2, r3
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d010      	beq.n	800400c <HAL_I2C_ER_IRQHandler+0x74>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	09db      	lsrs	r3, r3, #7
 8003fee:	001a      	movs	r2, r3
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003ff4:	d00a      	beq.n	800400c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2280      	movs	r2, #128	; 0x80
 8004008:	00d2      	lsls	r2, r2, #3
 800400a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	0a5b      	lsrs	r3, r3, #9
 8004010:	001a      	movs	r2, r3
 8004012:	2301      	movs	r3, #1
 8004014:	4013      	ands	r3, r2
 8004016:	d010      	beq.n	800403a <HAL_I2C_ER_IRQHandler+0xa2>
    (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	09db      	lsrs	r3, r3, #7
 800401c:	001a      	movs	r2, r3
 800401e:	2301      	movs	r3, #1
 8004020:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004022:	d00a      	beq.n	800403a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	2202      	movs	r2, #2
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	0092      	lsls	r2, r2, #2
 8004038:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	220b      	movs	r2, #11
 8004044:	4013      	ands	r3, r2
 8004046:	d005      	beq.n	8004054 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f000 fbd8 	bl	8004804 <I2C_ITError>
  }
}
 8004054:	46c0      	nop			; (mov r8, r8)
 8004056:	46bd      	mov	sp, r7
 8004058:	b006      	add	sp, #24
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	0008      	movs	r0, r1
 8004086:	0011      	movs	r1, r2
 8004088:	1cfb      	adds	r3, r7, #3
 800408a:	1c02      	adds	r2, r0, #0
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	003b      	movs	r3, r7
 8004090:	1c0a      	adds	r2, r1, #0
 8004092:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004094:	46c0      	nop			; (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b002      	add	sp, #8
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040b4:	46c0      	nop			; (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                             uint32_t ITSources)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2240      	movs	r2, #64	; 0x40
 80040e6:	5c9b      	ldrb	r3, [r3, r2]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <I2C_Slave_ISR_IT+0x24>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e0fa      	b.n	80042e6 <I2C_Slave_ISR_IT+0x21a>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2240      	movs	r2, #64	; 0x40
 80040f4:	2101      	movs	r1, #1
 80040f6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	001a      	movs	r2, r3
 80040fe:	2301      	movs	r3, #1
 8004100:	4013      	ands	r3, r2
 8004102:	d00b      	beq.n	800411c <I2C_Slave_ISR_IT+0x50>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	001a      	movs	r2, r3
 800410a:	2301      	movs	r3, #1
 800410c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800410e:	d005      	beq.n	800411c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	0011      	movs	r1, r2
 8004116:	0018      	movs	r0, r3
 8004118:	f000 f9f6 	bl	8004508 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	001a      	movs	r2, r3
 8004122:	2301      	movs	r3, #1
 8004124:	4013      	ands	r3, r2
 8004126:	d054      	beq.n	80041d2 <I2C_Slave_ISR_IT+0x106>
    (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	091b      	lsrs	r3, r3, #4
 800412c:	001a      	movs	r2, r3
 800412e:	2301      	movs	r3, #1
 8004130:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004132:	d04e      	beq.n	80041d2 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d12d      	bne.n	800419a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2241      	movs	r2, #65	; 0x41
 8004142:	5c9b      	ldrb	r3, [r3, r2]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b28      	cmp	r3, #40	; 0x28
 8004148:	d10b      	bne.n	8004162 <I2C_Slave_ISR_IT+0x96>
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	049b      	lsls	r3, r3, #18
 8004150:	429a      	cmp	r2, r3
 8004152:	d106      	bne.n	8004162 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	0011      	movs	r1, r2
 800415a:	0018      	movs	r0, r3
 800415c:	f000 faf8 	bl	8004750 <I2C_ITListenCplt>
 8004160:	e036      	b.n	80041d0 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2241      	movs	r2, #65	; 0x41
 8004166:	5c9b      	ldrb	r3, [r3, r2]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b29      	cmp	r3, #41	; 0x29
 800416c:	d110      	bne.n	8004190 <I2C_Slave_ISR_IT+0xc4>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4a5f      	ldr	r2, [pc, #380]	; (80042f0 <I2C_Slave_ISR_IT+0x224>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00c      	beq.n	8004190 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	0018      	movs	r0, r3
 8004182:	f000 fc4a 	bl	8004a1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 f957 	bl	800443c <I2C_ITSlaveSeqCplt>
 800418e:	e01f      	b.n	80041d0 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2210      	movs	r2, #16
 8004196:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004198:	e09d      	b.n	80042d6 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2210      	movs	r2, #16
 80041a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	2204      	movs	r2, #4
 80041a8:	431a      	orrs	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <I2C_Slave_ISR_IT+0xf4>
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	2380      	movs	r3, #128	; 0x80
 80041b8:	045b      	lsls	r3, r3, #17
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d000      	beq.n	80041c0 <I2C_Slave_ISR_IT+0xf4>
 80041be:	e08a      	b.n	80042d6 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	0011      	movs	r1, r2
 80041c8:	0018      	movs	r0, r3
 80041ca:	f000 fb1b 	bl	8004804 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80041ce:	e082      	b.n	80042d6 <I2C_Slave_ISR_IT+0x20a>
 80041d0:	e081      	b.n	80042d6 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	001a      	movs	r2, r3
 80041d8:	2301      	movs	r3, #1
 80041da:	4013      	ands	r3, r2
 80041dc:	d031      	beq.n	8004242 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	001a      	movs	r2, r3
 80041e4:	2301      	movs	r3, #1
 80041e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041e8:	d02b      	beq.n	8004242 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d018      	beq.n	8004226 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d154      	bne.n	80042da <I2C_Slave_ISR_IT+0x20e>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <I2C_Slave_ISR_IT+0x224>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d050      	beq.n	80042da <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	0018      	movs	r0, r3
 800423c:	f000 f8fe 	bl	800443c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004240:	e04b      	b.n	80042da <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	08db      	lsrs	r3, r3, #3
 8004246:	001a      	movs	r2, r3
 8004248:	2301      	movs	r3, #1
 800424a:	4013      	ands	r3, r2
 800424c:	d00c      	beq.n	8004268 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	08db      	lsrs	r3, r3, #3
 8004252:	001a      	movs	r2, r3
 8004254:	2301      	movs	r3, #1
 8004256:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004258:	d006      	beq.n	8004268 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	0011      	movs	r1, r2
 8004260:	0018      	movs	r0, r3
 8004262:	f000 f847 	bl	80042f4 <I2C_ITAddrCplt>
 8004266:	e039      	b.n	80042dc <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	001a      	movs	r2, r3
 800426e:	2301      	movs	r3, #1
 8004270:	4013      	ands	r3, r2
 8004272:	d033      	beq.n	80042dc <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	001a      	movs	r2, r3
 800427a:	2301      	movs	r3, #1
 800427c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800427e:	d02d      	beq.n	80042dc <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d018      	beq.n	80042bc <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
 80042ba:	e00f      	b.n	80042dc <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	045b      	lsls	r3, r3, #17
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d002      	beq.n	80042cc <I2C_Slave_ISR_IT+0x200>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d107      	bne.n	80042dc <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f8b4 	bl	800443c <I2C_ITSlaveSeqCplt>
 80042d4:	e002      	b.n	80042dc <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	e000      	b.n	80042dc <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80042da:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2240      	movs	r2, #64	; 0x40
 80042e0:	2100      	movs	r1, #0
 80042e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b006      	add	sp, #24
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	ffff0000 	.word	0xffff0000

080042f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042f4:	b5b0      	push	{r4, r5, r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2241      	movs	r2, #65	; 0x41
 8004302:	5c9b      	ldrb	r3, [r3, r2]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	001a      	movs	r2, r3
 8004308:	2328      	movs	r3, #40	; 0x28
 800430a:	4013      	ands	r3, r2
 800430c:	2b28      	cmp	r3, #40	; 0x28
 800430e:	d000      	beq.n	8004312 <I2C_ITAddrCplt+0x1e>
 8004310:	e088      	b.n	8004424 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	b2da      	uxtb	r2, r3
 800431c:	250f      	movs	r5, #15
 800431e:	197b      	adds	r3, r7, r5
 8004320:	2101      	movs	r1, #1
 8004322:	400a      	ands	r2, r1
 8004324:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	b29a      	uxth	r2, r3
 8004330:	200c      	movs	r0, #12
 8004332:	183b      	adds	r3, r7, r0
 8004334:	21fe      	movs	r1, #254	; 0xfe
 8004336:	400a      	ands	r2, r1
 8004338:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	b29a      	uxth	r2, r3
 8004342:	240a      	movs	r4, #10
 8004344:	193b      	adds	r3, r7, r4
 8004346:	0592      	lsls	r2, r2, #22
 8004348:	0d92      	lsrs	r2, r2, #22
 800434a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	b29a      	uxth	r2, r3
 8004354:	2308      	movs	r3, #8
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	21fe      	movs	r1, #254	; 0xfe
 800435a:	400a      	ands	r2, r1
 800435c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d148      	bne.n	80043f8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004366:	0021      	movs	r1, r4
 8004368:	187b      	adds	r3, r7, r1
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	09db      	lsrs	r3, r3, #7
 800436e:	b29a      	uxth	r2, r3
 8004370:	183b      	adds	r3, r7, r0
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	4053      	eors	r3, r2
 8004376:	b29b      	uxth	r3, r3
 8004378:	001a      	movs	r2, r3
 800437a:	2306      	movs	r3, #6
 800437c:	4013      	ands	r3, r2
 800437e:	d120      	bne.n	80043c2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004380:	183b      	adds	r3, r7, r0
 8004382:	187a      	adds	r2, r7, r1
 8004384:	8812      	ldrh	r2, [r2, #0]
 8004386:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004396:	2b02      	cmp	r3, #2
 8004398:	d14c      	bne.n	8004434 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2208      	movs	r2, #8
 80043a6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2240      	movs	r2, #64	; 0x40
 80043ac:	2100      	movs	r1, #0
 80043ae:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043b0:	183b      	adds	r3, r7, r0
 80043b2:	881a      	ldrh	r2, [r3, #0]
 80043b4:	197b      	adds	r3, r7, r5
 80043b6:	7819      	ldrb	r1, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7ff fe5e 	bl	800407c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043c0:	e038      	b.n	8004434 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80043c2:	240c      	movs	r4, #12
 80043c4:	193b      	adds	r3, r7, r4
 80043c6:	2208      	movs	r2, #8
 80043c8:	18ba      	adds	r2, r7, r2
 80043ca:	8812      	ldrh	r2, [r2, #0]
 80043cc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	021a      	lsls	r2, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0011      	movs	r1, r2
 80043d6:	0018      	movs	r0, r3
 80043d8:	f000 fc94 	bl	8004d04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2240      	movs	r2, #64	; 0x40
 80043e0:	2100      	movs	r1, #0
 80043e2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043e4:	193b      	adds	r3, r7, r4
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	230f      	movs	r3, #15
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	7819      	ldrb	r1, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff fe43 	bl	800407c <HAL_I2C_AddrCallback>
}
 80043f6:	e01d      	b.n	8004434 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0011      	movs	r1, r2
 8004400:	0018      	movs	r0, r3
 8004402:	f000 fc7f 	bl	8004d04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2240      	movs	r2, #64	; 0x40
 800440a:	2100      	movs	r1, #0
 800440c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800440e:	230c      	movs	r3, #12
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	230f      	movs	r3, #15
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	7819      	ldrb	r1, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0018      	movs	r0, r3
 800441e:	f7ff fe2d 	bl	800407c <HAL_I2C_AddrCallback>
}
 8004422:	e007      	b.n	8004434 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2208      	movs	r2, #8
 800442a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2240      	movs	r2, #64	; 0x40
 8004430:	2100      	movs	r1, #0
 8004432:	5499      	strb	r1, [r3, r2]
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	46bd      	mov	sp, r7
 8004438:	b004      	add	sp, #16
 800443a:	bdb0      	pop	{r4, r5, r7, pc}

0800443c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2242      	movs	r2, #66	; 0x42
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	0b9b      	lsrs	r3, r3, #14
 8004458:	001a      	movs	r2, r3
 800445a:	2301      	movs	r3, #1
 800445c:	4013      	ands	r3, r2
 800445e:	d008      	beq.n	8004472 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4925      	ldr	r1, [pc, #148]	; (8004500 <I2C_ITSlaveSeqCplt+0xc4>)
 800446c:	400a      	ands	r2, r1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e00d      	b.n	800448e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	0bdb      	lsrs	r3, r3, #15
 8004476:	001a      	movs	r2, r3
 8004478:	2301      	movs	r3, #1
 800447a:	4013      	ands	r3, r2
 800447c:	d007      	beq.n	800448e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	491e      	ldr	r1, [pc, #120]	; (8004504 <I2C_ITSlaveSeqCplt+0xc8>)
 800448a:	400a      	ands	r2, r1
 800448c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2241      	movs	r2, #65	; 0x41
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b29      	cmp	r3, #41	; 0x29
 8004498:	d114      	bne.n	80044c4 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2241      	movs	r2, #65	; 0x41
 800449e:	2128      	movs	r1, #40	; 0x28
 80044a0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2221      	movs	r2, #33	; 0x21
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2101      	movs	r1, #1
 80044ac:	0018      	movs	r0, r3
 80044ae:	f000 fc29 	bl	8004d04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2240      	movs	r2, #64	; 0x40
 80044b6:	2100      	movs	r1, #0
 80044b8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	0018      	movs	r0, r3
 80044be:	f7ff fdcd 	bl	800405c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044c2:	e019      	b.n	80044f8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2241      	movs	r2, #65	; 0x41
 80044c8:	5c9b      	ldrb	r3, [r3, r2]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b2a      	cmp	r3, #42	; 0x2a
 80044ce:	d113      	bne.n	80044f8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2241      	movs	r2, #65	; 0x41
 80044d4:	2128      	movs	r1, #40	; 0x28
 80044d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2222      	movs	r2, #34	; 0x22
 80044dc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2102      	movs	r1, #2
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 fc0e 	bl	8004d04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2240      	movs	r2, #64	; 0x40
 80044ec:	2100      	movs	r1, #0
 80044ee:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f7ff fdba 	bl	800406c <HAL_I2C_SlaveRxCpltCallback>
}
 80044f8:	46c0      	nop			; (mov r8, r8)
 80044fa:	46bd      	mov	sp, r7
 80044fc:	b004      	add	sp, #16
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	ffffbfff 	.word	0xffffbfff
 8004504:	ffff7fff 	.word	0xffff7fff

08004508 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800451e:	200f      	movs	r0, #15
 8004520:	183b      	adds	r3, r7, r0
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	2141      	movs	r1, #65	; 0x41
 8004526:	5c52      	ldrb	r2, [r2, r1]
 8004528:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2220      	movs	r2, #32
 8004530:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004532:	183b      	adds	r3, r7, r0
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b21      	cmp	r3, #33	; 0x21
 8004538:	d003      	beq.n	8004542 <I2C_ITSlaveCplt+0x3a>
 800453a:	183b      	adds	r3, r7, r0
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b29      	cmp	r3, #41	; 0x29
 8004540:	d109      	bne.n	8004556 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004542:	4a7d      	ldr	r2, [pc, #500]	; (8004738 <I2C_ITSlaveCplt+0x230>)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	0011      	movs	r1, r2
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fbdb 	bl	8004d04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2221      	movs	r2, #33	; 0x21
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
 8004554:	e011      	b.n	800457a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004556:	220f      	movs	r2, #15
 8004558:	18bb      	adds	r3, r7, r2
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b22      	cmp	r3, #34	; 0x22
 800455e:	d003      	beq.n	8004568 <I2C_ITSlaveCplt+0x60>
 8004560:	18bb      	adds	r3, r7, r2
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b2a      	cmp	r3, #42	; 0x2a
 8004566:	d108      	bne.n	800457a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004568:	4a74      	ldr	r2, [pc, #464]	; (800473c <I2C_ITSlaveCplt+0x234>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0011      	movs	r1, r2
 800456e:	0018      	movs	r0, r3
 8004570:	f000 fbc8 	bl	8004d04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2222      	movs	r2, #34	; 0x22
 8004578:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0209      	lsls	r1, r1, #8
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	496a      	ldr	r1, [pc, #424]	; (8004740 <I2C_ITSlaveCplt+0x238>)
 8004598:	400a      	ands	r2, r1
 800459a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 fa3b 	bl	8004a1a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	0b9b      	lsrs	r3, r3, #14
 80045a8:	001a      	movs	r2, r3
 80045aa:	2301      	movs	r3, #1
 80045ac:	4013      	ands	r3, r2
 80045ae:	d013      	beq.n	80045d8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4962      	ldr	r1, [pc, #392]	; (8004744 <I2C_ITSlaveCplt+0x23c>)
 80045bc:	400a      	ands	r2, r1
 80045be:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d020      	beq.n	800460a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045d6:	e018      	b.n	800460a <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	0bdb      	lsrs	r3, r3, #15
 80045dc:	001a      	movs	r2, r3
 80045de:	2301      	movs	r3, #1
 80045e0:	4013      	ands	r3, r2
 80045e2:	d012      	beq.n	800460a <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4956      	ldr	r1, [pc, #344]	; (8004748 <I2C_ITSlaveCplt+0x240>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d006      	beq.n	800460a <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	001a      	movs	r2, r3
 8004610:	2301      	movs	r3, #1
 8004612:	4013      	ands	r3, r2
 8004614:	d020      	beq.n	8004658 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2204      	movs	r2, #4
 800461a:	4393      	bics	r3, r2
 800461c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00c      	beq.n	8004658 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	2204      	movs	r2, #4
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2242      	movs	r2, #66	; 0x42
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	0011      	movs	r1, r2
 800468c:	0018      	movs	r0, r3
 800468e:	f000 f8b9 	bl	8004804 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2241      	movs	r2, #65	; 0x41
 8004696:	5c9b      	ldrb	r3, [r3, r2]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b28      	cmp	r3, #40	; 0x28
 800469c:	d147      	bne.n	800472e <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	0011      	movs	r1, r2
 80046a4:	0018      	movs	r0, r3
 80046a6:	f000 f853 	bl	8004750 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046aa:	e040      	b.n	800472e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	4a26      	ldr	r2, [pc, #152]	; (800474c <I2C_ITSlaveCplt+0x244>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d016      	beq.n	80046e4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f7ff febf 	bl	800443c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a22      	ldr	r2, [pc, #136]	; (800474c <I2C_ITSlaveCplt+0x244>)
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2241      	movs	r2, #65	; 0x41
 80046c8:	2120      	movs	r1, #32
 80046ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2240      	movs	r2, #64	; 0x40
 80046d6:	2100      	movs	r1, #0
 80046d8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7ff fcdd 	bl	800409c <HAL_I2C_ListenCpltCallback>
}
 80046e2:	e024      	b.n	800472e <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2241      	movs	r2, #65	; 0x41
 80046e8:	5c9b      	ldrb	r3, [r3, r2]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b22      	cmp	r3, #34	; 0x22
 80046ee:	d10f      	bne.n	8004710 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2241      	movs	r2, #65	; 0x41
 80046f4:	2120      	movs	r1, #32
 80046f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2240      	movs	r2, #64	; 0x40
 8004702:	2100      	movs	r1, #0
 8004704:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	0018      	movs	r0, r3
 800470a:	f7ff fcaf 	bl	800406c <HAL_I2C_SlaveRxCpltCallback>
}
 800470e:	e00e      	b.n	800472e <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2241      	movs	r2, #65	; 0x41
 8004714:	2120      	movs	r1, #32
 8004716:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2240      	movs	r2, #64	; 0x40
 8004722:	2100      	movs	r1, #0
 8004724:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0018      	movs	r0, r3
 800472a:	f7ff fc97 	bl	800405c <HAL_I2C_SlaveTxCpltCallback>
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b006      	add	sp, #24
 8004734:	bd80      	pop	{r7, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	00008001 	.word	0x00008001
 800473c:	00008002 	.word	0x00008002
 8004740:	fe00e800 	.word	0xfe00e800
 8004744:	ffffbfff 	.word	0xffffbfff
 8004748:	ffff7fff 	.word	0xffff7fff
 800474c:	ffff0000 	.word	0xffff0000

08004750 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a27      	ldr	r2, [pc, #156]	; (80047fc <I2C_ITListenCplt+0xac>)
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2241      	movs	r2, #65	; 0x41
 800476a:	2120      	movs	r1, #32
 800476c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2242      	movs	r2, #66	; 0x42
 8004772:	2100      	movs	r1, #0
 8004774:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	001a      	movs	r2, r3
 8004782:	2301      	movs	r3, #1
 8004784:	4013      	ands	r3, r2
 8004786:	d022      	beq.n	80047ce <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	1c5a      	adds	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d012      	beq.n	80047ce <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c6:	2204      	movs	r2, #4
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047ce:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <I2C_ITListenCplt+0xb0>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0011      	movs	r1, r2
 80047d4:	0018      	movs	r0, r3
 80047d6:	f000 fa95 	bl	8004d04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2210      	movs	r2, #16
 80047e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2240      	movs	r2, #64	; 0x40
 80047e6:	2100      	movs	r1, #0
 80047e8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7ff fc55 	bl	800409c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b002      	add	sp, #8
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	ffff0000 	.word	0xffff0000
 8004800:	00008003 	.word	0x00008003

08004804 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800480e:	200f      	movs	r0, #15
 8004810:	183b      	adds	r3, r7, r0
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	2141      	movs	r1, #65	; 0x41
 8004816:	5c52      	ldrb	r2, [r2, r1]
 8004818:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2242      	movs	r2, #66	; 0x42
 800481e:	2100      	movs	r1, #0
 8004820:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a62      	ldr	r2, [pc, #392]	; (80049b0 <I2C_ITError+0x1ac>)
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	431a      	orrs	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800483a:	183b      	adds	r3, r7, r0
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b28      	cmp	r3, #40	; 0x28
 8004840:	d007      	beq.n	8004852 <I2C_ITError+0x4e>
 8004842:	183b      	adds	r3, r7, r0
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b29      	cmp	r3, #41	; 0x29
 8004848:	d003      	beq.n	8004852 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800484a:	183b      	adds	r3, r7, r0
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b2a      	cmp	r3, #42	; 0x2a
 8004850:	d10c      	bne.n	800486c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2103      	movs	r1, #3
 8004856:	0018      	movs	r0, r3
 8004858:	f000 fa54 	bl	8004d04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2241      	movs	r2, #65	; 0x41
 8004860:	2128      	movs	r1, #40	; 0x28
 8004862:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a53      	ldr	r2, [pc, #332]	; (80049b4 <I2C_ITError+0x1b0>)
 8004868:	635a      	str	r2, [r3, #52]	; 0x34
 800486a:	e012      	b.n	8004892 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800486c:	4a52      	ldr	r2, [pc, #328]	; (80049b8 <I2C_ITError+0x1b4>)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0011      	movs	r1, r2
 8004872:	0018      	movs	r0, r3
 8004874:	f000 fa46 	bl	8004d04 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2241      	movs	r2, #65	; 0x41
 800487c:	5c9b      	ldrb	r3, [r3, r2]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b60      	cmp	r3, #96	; 0x60
 8004882:	d003      	beq.n	800488c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2241      	movs	r2, #65	; 0x41
 8004888:	2120      	movs	r1, #32
 800488a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	2b00      	cmp	r3, #0
 800489e:	d03b      	beq.n	8004918 <I2C_ITError+0x114>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b11      	cmp	r3, #17
 80048a4:	d002      	beq.n	80048ac <I2C_ITError+0xa8>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b21      	cmp	r3, #33	; 0x21
 80048aa:	d135      	bne.n	8004918 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	01db      	lsls	r3, r3, #7
 80048b6:	401a      	ands	r2, r3
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	01db      	lsls	r3, r3, #7
 80048bc:	429a      	cmp	r2, r3
 80048be:	d107      	bne.n	80048d0 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	493c      	ldr	r1, [pc, #240]	; (80049bc <I2C_ITError+0x1b8>)
 80048cc:	400a      	ands	r2, r1
 80048ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7ff f80b 	bl	80038f0 <HAL_DMA_GetState>
 80048da:	0003      	movs	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d016      	beq.n	800490e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	4a36      	ldr	r2, [pc, #216]	; (80049c0 <I2C_ITError+0x1bc>)
 80048e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2240      	movs	r2, #64	; 0x40
 80048ec:	2100      	movs	r1, #0
 80048ee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	0018      	movs	r0, r3
 80048f6:	f7fe ff91 	bl	800381c <HAL_DMA_Abort_IT>
 80048fa:	1e03      	subs	r3, r0, #0
 80048fc:	d051      	beq.n	80049a2 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	0018      	movs	r0, r3
 800490a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800490c:	e049      	b.n	80049a2 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0018      	movs	r0, r3
 8004912:	f000 f859 	bl	80049c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004916:	e044      	b.n	80049a2 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d03b      	beq.n	8004998 <I2C_ITError+0x194>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b12      	cmp	r3, #18
 8004924:	d002      	beq.n	800492c <I2C_ITError+0x128>
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b22      	cmp	r3, #34	; 0x22
 800492a:	d135      	bne.n	8004998 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	401a      	ands	r2, r3
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	429a      	cmp	r2, r3
 800493e:	d107      	bne.n	8004950 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	491e      	ldr	r1, [pc, #120]	; (80049c4 <I2C_ITError+0x1c0>)
 800494c:	400a      	ands	r2, r1
 800494e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	0018      	movs	r0, r3
 8004956:	f7fe ffcb 	bl	80038f0 <HAL_DMA_GetState>
 800495a:	0003      	movs	r3, r0
 800495c:	2b01      	cmp	r3, #1
 800495e:	d016      	beq.n	800498e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004964:	4a16      	ldr	r2, [pc, #88]	; (80049c0 <I2C_ITError+0x1bc>)
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2240      	movs	r2, #64	; 0x40
 800496c:	2100      	movs	r1, #0
 800496e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004974:	0018      	movs	r0, r3
 8004976:	f7fe ff51 	bl	800381c <HAL_DMA_Abort_IT>
 800497a:	1e03      	subs	r3, r0, #0
 800497c:	d013      	beq.n	80049a6 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	0018      	movs	r0, r3
 800498a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800498c:	e00b      	b.n	80049a6 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f819 	bl	80049c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004996:	e006      	b.n	80049a6 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	0018      	movs	r0, r3
 800499c:	f000 f814 	bl	80049c8 <I2C_TreatErrorCallback>
  }
}
 80049a0:	e002      	b.n	80049a8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049a2:	46c0      	nop			; (mov r8, r8)
 80049a4:	e000      	b.n	80049a8 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049a6:	46c0      	nop			; (mov r8, r8)
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b004      	add	sp, #16
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	ffff0000 	.word	0xffff0000
 80049b4:	080040cd 	.word	0x080040cd
 80049b8:	00008003 	.word	0x00008003
 80049bc:	ffffbfff 	.word	0xffffbfff
 80049c0:	08004a5f 	.word	0x08004a5f
 80049c4:	ffff7fff 	.word	0xffff7fff

080049c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2241      	movs	r2, #65	; 0x41
 80049d4:	5c9b      	ldrb	r3, [r3, r2]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b60      	cmp	r3, #96	; 0x60
 80049da:	d10f      	bne.n	80049fc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2241      	movs	r2, #65	; 0x41
 80049e0:	2120      	movs	r1, #32
 80049e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2240      	movs	r2, #64	; 0x40
 80049ee:	2100      	movs	r1, #0
 80049f0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7ff fb61 	bl	80040bc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049fa:	e00a      	b.n	8004a12 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2240      	movs	r2, #64	; 0x40
 8004a06:	2100      	movs	r1, #0
 8004a08:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f7ff fb4d 	bl	80040ac <HAL_I2C_ErrorCallback>
}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b002      	add	sp, #8
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d103      	bne.n	8004a38 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2200      	movs	r2, #0
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d007      	beq.n	8004a56 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2101      	movs	r1, #1
 8004a52:	430a      	orrs	r2, r1
 8004a54:	619a      	str	r2, [r3, #24]
  }
}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	2200      	movs	r2, #0
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a88:	2200      	movs	r2, #0
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f7ff ff9a 	bl	80049c8 <I2C_TreatErrorCallback>
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	1dfb      	adds	r3, r7, #7
 8004aaa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aac:	e021      	b.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	d01e      	beq.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab4:	f7fd ff82 	bl	80029bc <HAL_GetTick>
 8004ab8:	0002      	movs	r2, r0
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d302      	bcc.n	8004aca <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d113      	bne.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	2220      	movs	r2, #32
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2241      	movs	r2, #65	; 0x41
 8004ada:	2120      	movs	r1, #32
 8004adc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2242      	movs	r2, #66	; 0x42
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2240      	movs	r2, #64	; 0x40
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00f      	b.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	425a      	negs	r2, r3
 8004b02:	4153      	adcs	r3, r2
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	001a      	movs	r2, r3
 8004b08:	1dfb      	adds	r3, r7, #7
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d0ce      	beq.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	0018      	movs	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	b004      	add	sp, #16
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b26:	e02b      	b.n	8004b80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 f86e 	bl	8004c10 <I2C_IsAcknowledgeFailed>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d001      	beq.n	8004b3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e029      	b.n	8004b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	d01e      	beq.n	8004b80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b42:	f7fd ff3b 	bl	80029bc <HAL_GetTick>
 8004b46:	0002      	movs	r2, r0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d113      	bne.n	8004b80 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2241      	movs	r2, #65	; 0x41
 8004b68:	2120      	movs	r1, #32
 8004b6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2242      	movs	r2, #66	; 0x42
 8004b70:	2100      	movs	r1, #0
 8004b72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2240      	movs	r2, #64	; 0x40
 8004b78:	2100      	movs	r1, #0
 8004b7a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e007      	b.n	8004b90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2202      	movs	r2, #2
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d1cc      	bne.n	8004b28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	0018      	movs	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b004      	add	sp, #16
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ba4:	e028      	b.n	8004bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f82f 	bl	8004c10 <I2C_IsAcknowledgeFailed>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d001      	beq.n	8004bba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e026      	b.n	8004c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bba:	f7fd feff 	bl	80029bc <HAL_GetTick>
 8004bbe:	0002      	movs	r2, r0
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2241      	movs	r2, #65	; 0x41
 8004be0:	2120      	movs	r1, #32
 8004be2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2242      	movs	r2, #66	; 0x42
 8004be8:	2100      	movs	r1, #0
 8004bea:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2240      	movs	r2, #64	; 0x40
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e007      	b.n	8004c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d1cf      	bne.n	8004ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	0018      	movs	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b004      	add	sp, #16
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2210      	movs	r2, #16
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d164      	bne.n	8004cf4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	049b      	lsls	r3, r3, #18
 8004c34:	401a      	ands	r2, r3
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	049b      	lsls	r3, r3, #18
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d02b      	beq.n	8004c96 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2180      	movs	r1, #128	; 0x80
 8004c4a:	01c9      	lsls	r1, r1, #7
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c50:	e021      	b.n	8004c96 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	3301      	adds	r3, #1
 8004c56:	d01e      	beq.n	8004c96 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c58:	f7fd feb0 	bl	80029bc <HAL_GetTick>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <I2C_IsAcknowledgeFailed+0x5e>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d113      	bne.n	8004c96 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	2220      	movs	r2, #32
 8004c74:	431a      	orrs	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2241      	movs	r2, #65	; 0x41
 8004c7e:	2120      	movs	r1, #32
 8004c80:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2242      	movs	r2, #66	; 0x42
 8004c86:	2100      	movs	r1, #0
 8004c88:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2240      	movs	r2, #64	; 0x40
 8004c8e:	2100      	movs	r1, #0
 8004c90:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e02f      	b.n	8004cf6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	d1d6      	bne.n	8004c52 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2210      	movs	r2, #16
 8004caa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	f7ff feaf 	bl	8004a1a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	490e      	ldr	r1, [pc, #56]	; (8004d00 <I2C_IsAcknowledgeFailed+0xf0>)
 8004cc8:	400a      	ands	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2241      	movs	r2, #65	; 0x41
 8004cdc:	2120      	movs	r1, #32
 8004cde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2242      	movs	r2, #66	; 0x42
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	2100      	movs	r1, #0
 8004cee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	b004      	add	sp, #16
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	fe00e800 	.word	0xfe00e800

08004d04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	000a      	movs	r2, r1
 8004d0e:	1cbb      	adds	r3, r7, #2
 8004d10:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004d16:	1cbb      	adds	r3, r7, #2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d010      	beq.n	8004d42 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2242      	movs	r2, #66	; 0x42
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2241      	movs	r2, #65	; 0x41
 8004d2c:	5c9b      	ldrb	r3, [r3, r2]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	001a      	movs	r2, r3
 8004d32:	2328      	movs	r3, #40	; 0x28
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b28      	cmp	r3, #40	; 0x28
 8004d38:	d003      	beq.n	8004d42 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	22b0      	movs	r2, #176	; 0xb0
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004d42:	1cbb      	adds	r3, r7, #2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	2202      	movs	r2, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d010      	beq.n	8004d6e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2244      	movs	r2, #68	; 0x44
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2241      	movs	r2, #65	; 0x41
 8004d58:	5c9b      	ldrb	r3, [r3, r2]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	2328      	movs	r3, #40	; 0x28
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b28      	cmp	r3, #40	; 0x28
 8004d64:	d003      	beq.n	8004d6e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	22b0      	movs	r2, #176	; 0xb0
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004d6e:	1cbb      	adds	r3, r7, #2
 8004d70:	2200      	movs	r2, #0
 8004d72:	5e9b      	ldrsh	r3, [r3, r2]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	da03      	bge.n	8004d80 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	22b8      	movs	r2, #184	; 0xb8
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004d80:	1cbb      	adds	r3, r7, #2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d103      	bne.n	8004d90 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2290      	movs	r2, #144	; 0x90
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004d90:	1cbb      	adds	r3, r7, #2
 8004d92:	881b      	ldrh	r3, [r3, #0]
 8004d94:	2b20      	cmp	r3, #32
 8004d96:	d103      	bne.n	8004da0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004da0:	1cbb      	adds	r3, r7, #2
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d103      	bne.n	8004db0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2240      	movs	r2, #64	; 0x40
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	43d9      	mvns	r1, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	400a      	ands	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b004      	add	sp, #16
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2241      	movs	r2, #65	; 0x41
 8004dda:	5c9b      	ldrb	r3, [r3, r2]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d138      	bne.n	8004e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2240      	movs	r2, #64	; 0x40
 8004de6:	5c9b      	ldrb	r3, [r3, r2]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e032      	b.n	8004e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2240      	movs	r2, #64	; 0x40
 8004df4:	2101      	movs	r1, #1
 8004df6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2241      	movs	r2, #65	; 0x41
 8004dfc:	2124      	movs	r1, #36	; 0x24
 8004dfe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2101      	movs	r1, #1
 8004e0c:	438a      	bics	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4911      	ldr	r1, [pc, #68]	; (8004e60 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6819      	ldr	r1, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2241      	movs	r2, #65	; 0x41
 8004e44:	2120      	movs	r1, #32
 8004e46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2240      	movs	r2, #64	; 0x40
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	e000      	b.n	8004e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e54:	2302      	movs	r3, #2
  }
}
 8004e56:	0018      	movs	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b002      	add	sp, #8
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	ffffefff 	.word	0xffffefff

08004e64 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2241      	movs	r2, #65	; 0x41
 8004e72:	5c9b      	ldrb	r3, [r3, r2]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d139      	bne.n	8004eee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2240      	movs	r2, #64	; 0x40
 8004e7e:	5c9b      	ldrb	r3, [r3, r2]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e033      	b.n	8004ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2240      	movs	r2, #64	; 0x40
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2241      	movs	r2, #65	; 0x41
 8004e94:	2124      	movs	r1, #36	; 0x24
 8004e96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	438a      	bics	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2241      	movs	r2, #65	; 0x41
 8004ede:	2120      	movs	r1, #32
 8004ee0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2240      	movs	r2, #64	; 0x40
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e000      	b.n	8004ef0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004eee:	2302      	movs	r3, #2
  }
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b004      	add	sp, #16
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	fffff0ff 	.word	0xfffff0ff

08004efc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a19      	ldr	r2, [pc, #100]	; (8004f70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	0019      	movs	r1, r3
 8004f0e:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d11f      	bne.n	8004f60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004f20:	4b14      	ldr	r3, [pc, #80]	; (8004f74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	0013      	movs	r3, r2
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	189b      	adds	r3, r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4912      	ldr	r1, [pc, #72]	; (8004f78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7fb f900 	bl	8000134 <__udivsi3>
 8004f34:	0003      	movs	r3, r0
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f3a:	e008      	b.n	8004f4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e001      	b.n	8004f4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e009      	b.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	401a      	ands	r2, r3
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d0ed      	beq.n	8004f3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b004      	add	sp, #16
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	fffff9ff 	.word	0xfffff9ff
 8004f74:	20000028 	.word	0x20000028
 8004f78:	000f4240 	.word	0x000f4240

08004f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e2f9      	b.n	8005582 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2201      	movs	r2, #1
 8004f94:	4013      	ands	r3, r2
 8004f96:	d100      	bne.n	8004f9a <HAL_RCC_OscConfig+0x1e>
 8004f98:	e07c      	b.n	8005094 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f9a:	4bc3      	ldr	r3, [pc, #780]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2238      	movs	r2, #56	; 0x38
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fa4:	4bc0      	ldr	r3, [pc, #768]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	4013      	ands	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d102      	bne.n	8004fba <HAL_RCC_OscConfig+0x3e>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d002      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc0:	4bb9      	ldr	r3, [pc, #740]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	2380      	movs	r3, #128	; 0x80
 8004fc6:	029b      	lsls	r3, r3, #10
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d062      	beq.n	8005092 <HAL_RCC_OscConfig+0x116>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d15e      	bne.n	8005092 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e2d4      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	025b      	lsls	r3, r3, #9
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d107      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x78>
 8004fe4:	4bb0      	ldr	r3, [pc, #704]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	4baf      	ldr	r3, [pc, #700]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8004fea:	2180      	movs	r1, #128	; 0x80
 8004fec:	0249      	lsls	r1, r1, #9
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	e020      	b.n	8005036 <HAL_RCC_OscConfig+0xba>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	23a0      	movs	r3, #160	; 0xa0
 8004ffa:	02db      	lsls	r3, r3, #11
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d10e      	bne.n	800501e <HAL_RCC_OscConfig+0xa2>
 8005000:	4ba9      	ldr	r3, [pc, #676]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4ba8      	ldr	r3, [pc, #672]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	02c9      	lsls	r1, r1, #11
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	4ba6      	ldr	r3, [pc, #664]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4ba5      	ldr	r3, [pc, #660]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	0249      	lsls	r1, r1, #9
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e00b      	b.n	8005036 <HAL_RCC_OscConfig+0xba>
 800501e:	4ba2      	ldr	r3, [pc, #648]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4ba1      	ldr	r3, [pc, #644]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005024:	49a1      	ldr	r1, [pc, #644]	; (80052ac <HAL_RCC_OscConfig+0x330>)
 8005026:	400a      	ands	r2, r1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	4b9f      	ldr	r3, [pc, #636]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b9e      	ldr	r3, [pc, #632]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005030:	499f      	ldr	r1, [pc, #636]	; (80052b0 <HAL_RCC_OscConfig+0x334>)
 8005032:	400a      	ands	r2, r1
 8005034:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d014      	beq.n	8005068 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7fd fcbd 	bl	80029bc <HAL_GetTick>
 8005042:	0003      	movs	r3, r0
 8005044:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005048:	f7fd fcb8 	bl	80029bc <HAL_GetTick>
 800504c:	0002      	movs	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b64      	cmp	r3, #100	; 0x64
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e293      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800505a:	4b93      	ldr	r3, [pc, #588]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	029b      	lsls	r3, r3, #10
 8005062:	4013      	ands	r3, r2
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0xcc>
 8005066:	e015      	b.n	8005094 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005068:	f7fd fca8 	bl	80029bc <HAL_GetTick>
 800506c:	0003      	movs	r3, r0
 800506e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005072:	f7fd fca3 	bl	80029bc <HAL_GetTick>
 8005076:	0002      	movs	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b64      	cmp	r3, #100	; 0x64
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e27e      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005084:	4b88      	ldr	r3, [pc, #544]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	029b      	lsls	r3, r3, #10
 800508c:	4013      	ands	r3, r2
 800508e:	d1f0      	bne.n	8005072 <HAL_RCC_OscConfig+0xf6>
 8005090:	e000      	b.n	8005094 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005092:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2202      	movs	r2, #2
 800509a:	4013      	ands	r3, r2
 800509c:	d100      	bne.n	80050a0 <HAL_RCC_OscConfig+0x124>
 800509e:	e099      	b.n	80051d4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050a0:	4b81      	ldr	r3, [pc, #516]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2238      	movs	r2, #56	; 0x38
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050aa:	4b7f      	ldr	r3, [pc, #508]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	2203      	movs	r2, #3
 80050b0:	4013      	ands	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d102      	bne.n	80050c0 <HAL_RCC_OscConfig+0x144>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d002      	beq.n	80050c6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d135      	bne.n	8005132 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050c6:	4b78      	ldr	r3, [pc, #480]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	2380      	movs	r3, #128	; 0x80
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	4013      	ands	r3, r2
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x162>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e251      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b72      	ldr	r3, [pc, #456]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4a74      	ldr	r2, [pc, #464]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	021a      	lsls	r2, r3, #8
 80050ee:	4b6e      	ldr	r3, [pc, #440]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80050f0:	430a      	orrs	r2, r1
 80050f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d112      	bne.n	8005120 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80050fa:	4b6b      	ldr	r3, [pc, #428]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a6e      	ldr	r2, [pc, #440]	; (80052b8 <HAL_RCC_OscConfig+0x33c>)
 8005100:	4013      	ands	r3, r2
 8005102:	0019      	movs	r1, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	4b67      	ldr	r3, [pc, #412]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800510a:	430a      	orrs	r2, r1
 800510c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800510e:	4b66      	ldr	r3, [pc, #408]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	0adb      	lsrs	r3, r3, #11
 8005114:	2207      	movs	r2, #7
 8005116:	4013      	ands	r3, r2
 8005118:	4a68      	ldr	r2, [pc, #416]	; (80052bc <HAL_RCC_OscConfig+0x340>)
 800511a:	40da      	lsrs	r2, r3
 800511c:	4b68      	ldr	r3, [pc, #416]	; (80052c0 <HAL_RCC_OscConfig+0x344>)
 800511e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005120:	4b68      	ldr	r3, [pc, #416]	; (80052c4 <HAL_RCC_OscConfig+0x348>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	0018      	movs	r0, r3
 8005126:	f7fd fbed 	bl	8002904 <HAL_InitTick>
 800512a:	1e03      	subs	r3, r0, #0
 800512c:	d051      	beq.n	80051d2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e227      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d030      	beq.n	800519c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800513a:	4b5b      	ldr	r3, [pc, #364]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a5e      	ldr	r2, [pc, #376]	; (80052b8 <HAL_RCC_OscConfig+0x33c>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	4b57      	ldr	r3, [pc, #348]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800514e:	4b56      	ldr	r3, [pc, #344]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b55      	ldr	r3, [pc, #340]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005154:	2180      	movs	r1, #128	; 0x80
 8005156:	0049      	lsls	r1, r1, #1
 8005158:	430a      	orrs	r2, r1
 800515a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fd fc2e 	bl	80029bc <HAL_GetTick>
 8005160:	0003      	movs	r3, r0
 8005162:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005164:	e008      	b.n	8005178 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005166:	f7fd fc29 	bl	80029bc <HAL_GetTick>
 800516a:	0002      	movs	r2, r0
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e204      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005178:	4b4b      	ldr	r3, [pc, #300]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4013      	ands	r3, r2
 8005182:	d0f0      	beq.n	8005166 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005184:	4b48      	ldr	r3, [pc, #288]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	4a4a      	ldr	r2, [pc, #296]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800518a:	4013      	ands	r3, r2
 800518c:	0019      	movs	r1, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	021a      	lsls	r2, r3, #8
 8005194:	4b44      	ldr	r3, [pc, #272]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005196:	430a      	orrs	r2, r1
 8005198:	605a      	str	r2, [r3, #4]
 800519a:	e01b      	b.n	80051d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800519c:	4b42      	ldr	r3, [pc, #264]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80051a2:	4949      	ldr	r1, [pc, #292]	; (80052c8 <HAL_RCC_OscConfig+0x34c>)
 80051a4:	400a      	ands	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd fc08 	bl	80029bc <HAL_GetTick>
 80051ac:	0003      	movs	r3, r0
 80051ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b2:	f7fd fc03 	bl	80029bc <HAL_GetTick>
 80051b6:	0002      	movs	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e1de      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051c4:	4b38      	ldr	r3, [pc, #224]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4013      	ands	r3, r2
 80051ce:	d1f0      	bne.n	80051b2 <HAL_RCC_OscConfig+0x236>
 80051d0:	e000      	b.n	80051d4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2208      	movs	r2, #8
 80051da:	4013      	ands	r3, r2
 80051dc:	d047      	beq.n	800526e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051de:	4b32      	ldr	r3, [pc, #200]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2238      	movs	r2, #56	; 0x38
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b18      	cmp	r3, #24
 80051e8:	d10a      	bne.n	8005200 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 80051ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	d03c      	beq.n	800526e <HAL_RCC_OscConfig+0x2f2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d138      	bne.n	800526e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e1c0      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d019      	beq.n	800523c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005208:	4b27      	ldr	r3, [pc, #156]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800520a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800520c:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800520e:	2101      	movs	r1, #1
 8005210:	430a      	orrs	r2, r1
 8005212:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005214:	f7fd fbd2 	bl	80029bc <HAL_GetTick>
 8005218:	0003      	movs	r3, r0
 800521a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521e:	f7fd fbcd 	bl	80029bc <HAL_GetTick>
 8005222:	0002      	movs	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e1a8      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005230:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	2202      	movs	r2, #2
 8005236:	4013      	ands	r3, r2
 8005238:	d0f1      	beq.n	800521e <HAL_RCC_OscConfig+0x2a2>
 800523a:	e018      	b.n	800526e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800523c:	4b1a      	ldr	r3, [pc, #104]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 800523e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005240:	4b19      	ldr	r3, [pc, #100]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005242:	2101      	movs	r1, #1
 8005244:	438a      	bics	r2, r1
 8005246:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd fbb8 	bl	80029bc <HAL_GetTick>
 800524c:	0003      	movs	r3, r0
 800524e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005252:	f7fd fbb3 	bl	80029bc <HAL_GetTick>
 8005256:	0002      	movs	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e18e      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005264:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005268:	2202      	movs	r2, #2
 800526a:	4013      	ands	r3, r2
 800526c:	d1f1      	bne.n	8005252 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2204      	movs	r2, #4
 8005274:	4013      	ands	r3, r2
 8005276:	d100      	bne.n	800527a <HAL_RCC_OscConfig+0x2fe>
 8005278:	e0c6      	b.n	8005408 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800527a:	231f      	movs	r3, #31
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2238      	movs	r2, #56	; 0x38
 8005288:	4013      	ands	r3, r2
 800528a:	2b20      	cmp	r3, #32
 800528c:	d11e      	bne.n	80052cc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_RCC_OscConfig+0x32c>)
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	2202      	movs	r2, #2
 8005294:	4013      	ands	r3, r2
 8005296:	d100      	bne.n	800529a <HAL_RCC_OscConfig+0x31e>
 8005298:	e0b6      	b.n	8005408 <HAL_RCC_OscConfig+0x48c>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d000      	beq.n	80052a4 <HAL_RCC_OscConfig+0x328>
 80052a2:	e0b1      	b.n	8005408 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e16c      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
 80052a8:	40021000 	.word	0x40021000
 80052ac:	fffeffff 	.word	0xfffeffff
 80052b0:	fffbffff 	.word	0xfffbffff
 80052b4:	ffff80ff 	.word	0xffff80ff
 80052b8:	ffffc7ff 	.word	0xffffc7ff
 80052bc:	00f42400 	.word	0x00f42400
 80052c0:	20000028 	.word	0x20000028
 80052c4:	2000002c 	.word	0x2000002c
 80052c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052cc:	4baf      	ldr	r3, [pc, #700]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80052ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	055b      	lsls	r3, r3, #21
 80052d4:	4013      	ands	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_OscConfig+0x360>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x362>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d011      	beq.n	8005306 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80052e2:	4baa      	ldr	r3, [pc, #680]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80052e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052e6:	4ba9      	ldr	r3, [pc, #676]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80052e8:	2180      	movs	r1, #128	; 0x80
 80052ea:	0549      	lsls	r1, r1, #21
 80052ec:	430a      	orrs	r2, r1
 80052ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80052f0:	4ba6      	ldr	r3, [pc, #664]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80052f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	055b      	lsls	r3, r3, #21
 80052f8:	4013      	ands	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80052fe:	231f      	movs	r3, #31
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005306:	4ba2      	ldr	r3, [pc, #648]	; (8005590 <HAL_RCC_OscConfig+0x614>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	4013      	ands	r3, r2
 8005310:	d11a      	bne.n	8005348 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005312:	4b9f      	ldr	r3, [pc, #636]	; (8005590 <HAL_RCC_OscConfig+0x614>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b9e      	ldr	r3, [pc, #632]	; (8005590 <HAL_RCC_OscConfig+0x614>)
 8005318:	2180      	movs	r1, #128	; 0x80
 800531a:	0049      	lsls	r1, r1, #1
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005320:	f7fd fb4c 	bl	80029bc <HAL_GetTick>
 8005324:	0003      	movs	r3, r0
 8005326:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532a:	f7fd fb47 	bl	80029bc <HAL_GetTick>
 800532e:	0002      	movs	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e122      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800533c:	4b94      	ldr	r3, [pc, #592]	; (8005590 <HAL_RCC_OscConfig+0x614>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	4013      	ands	r3, r2
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d106      	bne.n	800535e <HAL_RCC_OscConfig+0x3e2>
 8005350:	4b8e      	ldr	r3, [pc, #568]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005352:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005354:	4b8d      	ldr	r3, [pc, #564]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005356:	2101      	movs	r1, #1
 8005358:	430a      	orrs	r2, r1
 800535a:	65da      	str	r2, [r3, #92]	; 0x5c
 800535c:	e01c      	b.n	8005398 <HAL_RCC_OscConfig+0x41c>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b05      	cmp	r3, #5
 8005364:	d10c      	bne.n	8005380 <HAL_RCC_OscConfig+0x404>
 8005366:	4b89      	ldr	r3, [pc, #548]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005368:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800536a:	4b88      	ldr	r3, [pc, #544]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800536c:	2104      	movs	r1, #4
 800536e:	430a      	orrs	r2, r1
 8005370:	65da      	str	r2, [r3, #92]	; 0x5c
 8005372:	4b86      	ldr	r3, [pc, #536]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005374:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005376:	4b85      	ldr	r3, [pc, #532]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005378:	2101      	movs	r1, #1
 800537a:	430a      	orrs	r2, r1
 800537c:	65da      	str	r2, [r3, #92]	; 0x5c
 800537e:	e00b      	b.n	8005398 <HAL_RCC_OscConfig+0x41c>
 8005380:	4b82      	ldr	r3, [pc, #520]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005382:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005384:	4b81      	ldr	r3, [pc, #516]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005386:	2101      	movs	r1, #1
 8005388:	438a      	bics	r2, r1
 800538a:	65da      	str	r2, [r3, #92]	; 0x5c
 800538c:	4b7f      	ldr	r3, [pc, #508]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800538e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005390:	4b7e      	ldr	r3, [pc, #504]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005392:	2104      	movs	r1, #4
 8005394:	438a      	bics	r2, r1
 8005396:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d014      	beq.n	80053ca <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fd fb0c 	bl	80029bc <HAL_GetTick>
 80053a4:	0003      	movs	r3, r0
 80053a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a8:	e009      	b.n	80053be <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fd fb07 	bl	80029bc <HAL_GetTick>
 80053ae:	0002      	movs	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	4a77      	ldr	r2, [pc, #476]	; (8005594 <HAL_RCC_OscConfig+0x618>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0e1      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053be:	4b73      	ldr	r3, [pc, #460]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80053c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c2:	2202      	movs	r2, #2
 80053c4:	4013      	ands	r3, r2
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x42e>
 80053c8:	e013      	b.n	80053f2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fd faf7 	bl	80029bc <HAL_GetTick>
 80053ce:	0003      	movs	r3, r0
 80053d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053d2:	e009      	b.n	80053e8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d4:	f7fd faf2 	bl	80029bc <HAL_GetTick>
 80053d8:	0002      	movs	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	4a6d      	ldr	r2, [pc, #436]	; (8005594 <HAL_RCC_OscConfig+0x618>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e0cc      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053e8:	4b68      	ldr	r3, [pc, #416]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	2202      	movs	r2, #2
 80053ee:	4013      	ands	r3, r2
 80053f0:	d1f0      	bne.n	80053d4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80053f2:	231f      	movs	r3, #31
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d105      	bne.n	8005408 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80053fc:	4b63      	ldr	r3, [pc, #396]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80053fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005400:	4b62      	ldr	r3, [pc, #392]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005402:	4965      	ldr	r1, [pc, #404]	; (8005598 <HAL_RCC_OscConfig+0x61c>)
 8005404:	400a      	ands	r2, r1
 8005406:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d100      	bne.n	8005412 <HAL_RCC_OscConfig+0x496>
 8005410:	e0b6      	b.n	8005580 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005412:	4b5e      	ldr	r3, [pc, #376]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2238      	movs	r2, #56	; 0x38
 8005418:	4013      	ands	r3, r2
 800541a:	2b10      	cmp	r3, #16
 800541c:	d100      	bne.n	8005420 <HAL_RCC_OscConfig+0x4a4>
 800541e:	e07e      	b.n	800551e <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d153      	bne.n	80054d0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005428:	4b58      	ldr	r3, [pc, #352]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b57      	ldr	r3, [pc, #348]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800542e:	495b      	ldr	r1, [pc, #364]	; (800559c <HAL_RCC_OscConfig+0x620>)
 8005430:	400a      	ands	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005434:	f7fd fac2 	bl	80029bc <HAL_GetTick>
 8005438:	0003      	movs	r3, r0
 800543a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543e:	f7fd fabd 	bl	80029bc <HAL_GetTick>
 8005442:	0002      	movs	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e098      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005450:	4b4e      	ldr	r3, [pc, #312]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	049b      	lsls	r3, r3, #18
 8005458:	4013      	ands	r3, r2
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800545c:	4b4b      	ldr	r3, [pc, #300]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a4f      	ldr	r2, [pc, #316]	; (80055a0 <HAL_RCC_OscConfig+0x624>)
 8005462:	4013      	ands	r3, r2
 8005464:	0019      	movs	r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	431a      	orrs	r2, r3
 8005484:	4b41      	ldr	r3, [pc, #260]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005486:	430a      	orrs	r2, r1
 8005488:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548a:	4b40      	ldr	r3, [pc, #256]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b3f      	ldr	r3, [pc, #252]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	0449      	lsls	r1, r1, #17
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005498:	4b3c      	ldr	r3, [pc, #240]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	4b3b      	ldr	r3, [pc, #236]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800549e:	2180      	movs	r1, #128	; 0x80
 80054a0:	0549      	lsls	r1, r1, #21
 80054a2:	430a      	orrs	r2, r1
 80054a4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a6:	f7fd fa89 	bl	80029bc <HAL_GetTick>
 80054aa:	0003      	movs	r3, r0
 80054ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fd fa84 	bl	80029bc <HAL_GetTick>
 80054b4:	0002      	movs	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e05f      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c2:	4b32      	ldr	r3, [pc, #200]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	2380      	movs	r3, #128	; 0x80
 80054c8:	049b      	lsls	r3, r3, #18
 80054ca:	4013      	ands	r3, r2
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x534>
 80054ce:	e057      	b.n	8005580 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d0:	4b2e      	ldr	r3, [pc, #184]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b2d      	ldr	r3, [pc, #180]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80054d6:	4931      	ldr	r1, [pc, #196]	; (800559c <HAL_RCC_OscConfig+0x620>)
 80054d8:	400a      	ands	r2, r1
 80054da:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80054dc:	4b2b      	ldr	r3, [pc, #172]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	4b2a      	ldr	r3, [pc, #168]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80054e2:	2103      	movs	r1, #3
 80054e4:	438a      	bics	r2, r1
 80054e6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80054e8:	4b28      	ldr	r3, [pc, #160]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	4b27      	ldr	r3, [pc, #156]	; (800558c <HAL_RCC_OscConfig+0x610>)
 80054ee:	492d      	ldr	r1, [pc, #180]	; (80055a4 <HAL_RCC_OscConfig+0x628>)
 80054f0:	400a      	ands	r2, r1
 80054f2:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f4:	f7fd fa62 	bl	80029bc <HAL_GetTick>
 80054f8:	0003      	movs	r3, r0
 80054fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054fe:	f7fd fa5d 	bl	80029bc <HAL_GetTick>
 8005502:	0002      	movs	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e038      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005510:	4b1e      	ldr	r3, [pc, #120]	; (800558c <HAL_RCC_OscConfig+0x610>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	049b      	lsls	r3, r3, #18
 8005518:	4013      	ands	r3, r2
 800551a:	d1f0      	bne.n	80054fe <HAL_RCC_OscConfig+0x582>
 800551c:	e030      	b.n	8005580 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e02b      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800552a:	4b18      	ldr	r3, [pc, #96]	; (800558c <HAL_RCC_OscConfig+0x610>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2203      	movs	r2, #3
 8005534:	401a      	ands	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	429a      	cmp	r2, r3
 800553c:	d11e      	bne.n	800557c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2270      	movs	r2, #112	; 0x70
 8005542:	401a      	ands	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005548:	429a      	cmp	r2, r3
 800554a:	d117      	bne.n	800557c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	23fe      	movs	r3, #254	; 0xfe
 8005550:	01db      	lsls	r3, r3, #7
 8005552:	401a      	ands	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800555a:	429a      	cmp	r2, r3
 800555c:	d10e      	bne.n	800557c <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	23f8      	movs	r3, #248	; 0xf8
 8005562:	039b      	lsls	r3, r3, #14
 8005564:	401a      	ands	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800556a:	429a      	cmp	r2, r3
 800556c:	d106      	bne.n	800557c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	0f5b      	lsrs	r3, r3, #29
 8005572:	075a      	lsls	r2, r3, #29
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	0018      	movs	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	b008      	add	sp, #32
 8005588:	bd80      	pop	{r7, pc}
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	40021000 	.word	0x40021000
 8005590:	40007000 	.word	0x40007000
 8005594:	00001388 	.word	0x00001388
 8005598:	efffffff 	.word	0xefffffff
 800559c:	feffffff 	.word	0xfeffffff
 80055a0:	1fc1808c 	.word	0x1fc1808c
 80055a4:	effeffff 	.word	0xeffeffff

080055a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0e9      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055bc:	4b76      	ldr	r3, [pc, #472]	; (8005798 <HAL_RCC_ClockConfig+0x1f0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2207      	movs	r2, #7
 80055c2:	4013      	ands	r3, r2
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d91e      	bls.n	8005608 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b73      	ldr	r3, [pc, #460]	; (8005798 <HAL_RCC_ClockConfig+0x1f0>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2207      	movs	r2, #7
 80055d0:	4393      	bics	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	4b70      	ldr	r3, [pc, #448]	; (8005798 <HAL_RCC_ClockConfig+0x1f0>)
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055dc:	f7fd f9ee 	bl	80029bc <HAL_GetTick>
 80055e0:	0003      	movs	r3, r0
 80055e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055e4:	e009      	b.n	80055fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e6:	f7fd f9e9 	bl	80029bc <HAL_GetTick>
 80055ea:	0002      	movs	r2, r0
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	4a6a      	ldr	r2, [pc, #424]	; (800579c <HAL_RCC_ClockConfig+0x1f4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e0ca      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055fa:	4b67      	ldr	r3, [pc, #412]	; (8005798 <HAL_RCC_ClockConfig+0x1f0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2207      	movs	r2, #7
 8005600:	4013      	ands	r3, r2
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d1ee      	bne.n	80055e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2202      	movs	r2, #2
 800560e:	4013      	ands	r3, r2
 8005610:	d015      	beq.n	800563e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2204      	movs	r2, #4
 8005618:	4013      	ands	r3, r2
 800561a:	d006      	beq.n	800562a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800561c:	4b60      	ldr	r3, [pc, #384]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	4b5f      	ldr	r3, [pc, #380]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 8005622:	21e0      	movs	r1, #224	; 0xe0
 8005624:	01c9      	lsls	r1, r1, #7
 8005626:	430a      	orrs	r2, r1
 8005628:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800562a:	4b5d      	ldr	r3, [pc, #372]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	4a5d      	ldr	r2, [pc, #372]	; (80057a4 <HAL_RCC_ClockConfig+0x1fc>)
 8005630:	4013      	ands	r3, r2
 8005632:	0019      	movs	r1, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	4b59      	ldr	r3, [pc, #356]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 800563a:	430a      	orrs	r2, r1
 800563c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2201      	movs	r2, #1
 8005644:	4013      	ands	r3, r2
 8005646:	d057      	beq.n	80056f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d107      	bne.n	8005660 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005650:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	2380      	movs	r3, #128	; 0x80
 8005656:	029b      	lsls	r3, r3, #10
 8005658:	4013      	ands	r3, r2
 800565a:	d12b      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e097      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d107      	bne.n	8005678 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005668:	4b4d      	ldr	r3, [pc, #308]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	2380      	movs	r3, #128	; 0x80
 800566e:	049b      	lsls	r3, r3, #18
 8005670:	4013      	ands	r3, r2
 8005672:	d11f      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e08b      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d107      	bne.n	8005690 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005680:	4b47      	ldr	r3, [pc, #284]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	2380      	movs	r3, #128	; 0x80
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	4013      	ands	r3, r2
 800568a:	d113      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e07f      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d106      	bne.n	80056a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005698:	4b41      	ldr	r3, [pc, #260]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	2202      	movs	r2, #2
 800569e:	4013      	ands	r3, r2
 80056a0:	d108      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e074      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a6:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 80056a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056aa:	2202      	movs	r2, #2
 80056ac:	4013      	ands	r3, r2
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e06d      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056b4:	4b3a      	ldr	r3, [pc, #232]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	2207      	movs	r2, #7
 80056ba:	4393      	bics	r3, r2
 80056bc:	0019      	movs	r1, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 80056c4:	430a      	orrs	r2, r1
 80056c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c8:	f7fd f978 	bl	80029bc <HAL_GetTick>
 80056cc:	0003      	movs	r3, r0
 80056ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056d0:	e009      	b.n	80056e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d2:	f7fd f973 	bl	80029bc <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	4a2f      	ldr	r2, [pc, #188]	; (800579c <HAL_RCC_ClockConfig+0x1f4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e054      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056e6:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2238      	movs	r2, #56	; 0x38
 80056ec:	401a      	ands	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d1ec      	bne.n	80056d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_RCC_ClockConfig+0x1f0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2207      	movs	r2, #7
 80056fe:	4013      	ands	r3, r2
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d21e      	bcs.n	8005744 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005706:	4b24      	ldr	r3, [pc, #144]	; (8005798 <HAL_RCC_ClockConfig+0x1f0>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2207      	movs	r2, #7
 800570c:	4393      	bics	r3, r2
 800570e:	0019      	movs	r1, r3
 8005710:	4b21      	ldr	r3, [pc, #132]	; (8005798 <HAL_RCC_ClockConfig+0x1f0>)
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005718:	f7fd f950 	bl	80029bc <HAL_GetTick>
 800571c:	0003      	movs	r3, r0
 800571e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005720:	e009      	b.n	8005736 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005722:	f7fd f94b 	bl	80029bc <HAL_GetTick>
 8005726:	0002      	movs	r2, r0
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_RCC_ClockConfig+0x1f4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e02c      	b.n	8005790 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_RCC_ClockConfig+0x1f0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2207      	movs	r2, #7
 800573c:	4013      	ands	r3, r2
 800573e:	683a      	ldr	r2, [r7, #0]
 8005740:	429a      	cmp	r2, r3
 8005742:	d1ee      	bne.n	8005722 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2204      	movs	r2, #4
 800574a:	4013      	ands	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800574e:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <HAL_RCC_ClockConfig+0x200>)
 8005754:	4013      	ands	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 800575e:	430a      	orrs	r2, r1
 8005760:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005762:	f000 f829 	bl	80057b8 <HAL_RCC_GetSysClockFreq>
 8005766:	0001      	movs	r1, r0
 8005768:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <HAL_RCC_ClockConfig+0x1f8>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	0a1b      	lsrs	r3, r3, #8
 800576e:	220f      	movs	r2, #15
 8005770:	401a      	ands	r2, r3
 8005772:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <HAL_RCC_ClockConfig+0x204>)
 8005774:	0092      	lsls	r2, r2, #2
 8005776:	58d3      	ldr	r3, [r2, r3]
 8005778:	221f      	movs	r2, #31
 800577a:	4013      	ands	r3, r2
 800577c:	000a      	movs	r2, r1
 800577e:	40da      	lsrs	r2, r3
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_ClockConfig+0x208>)
 8005782:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005784:	4b0b      	ldr	r3, [pc, #44]	; (80057b4 <HAL_RCC_ClockConfig+0x20c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	0018      	movs	r0, r3
 800578a:	f7fd f8bb 	bl	8002904 <HAL_InitTick>
 800578e:	0003      	movs	r3, r0
}
 8005790:	0018      	movs	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	b004      	add	sp, #16
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40022000 	.word	0x40022000
 800579c:	00001388 	.word	0x00001388
 80057a0:	40021000 	.word	0x40021000
 80057a4:	fffff0ff 	.word	0xfffff0ff
 80057a8:	ffff8fff 	.word	0xffff8fff
 80057ac:	08008558 	.word	0x08008558
 80057b0:	20000028 	.word	0x20000028
 80057b4:	2000002c 	.word	0x2000002c

080057b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057be:	4b3c      	ldr	r3, [pc, #240]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2238      	movs	r2, #56	; 0x38
 80057c4:	4013      	ands	r3, r2
 80057c6:	d10f      	bne.n	80057e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80057c8:	4b39      	ldr	r3, [pc, #228]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	0adb      	lsrs	r3, r3, #11
 80057ce:	2207      	movs	r2, #7
 80057d0:	4013      	ands	r3, r2
 80057d2:	2201      	movs	r2, #1
 80057d4:	409a      	lsls	r2, r3
 80057d6:	0013      	movs	r3, r2
 80057d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80057da:	6839      	ldr	r1, [r7, #0]
 80057dc:	4835      	ldr	r0, [pc, #212]	; (80058b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80057de:	f7fa fca9 	bl	8000134 <__udivsi3>
 80057e2:	0003      	movs	r3, r0
 80057e4:	613b      	str	r3, [r7, #16]
 80057e6:	e05d      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057e8:	4b31      	ldr	r3, [pc, #196]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2238      	movs	r2, #56	; 0x38
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d102      	bne.n	80057fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057f4:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80057f6:	613b      	str	r3, [r7, #16]
 80057f8:	e054      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057fa:	4b2d      	ldr	r3, [pc, #180]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	2238      	movs	r2, #56	; 0x38
 8005800:	4013      	ands	r3, r2
 8005802:	2b10      	cmp	r3, #16
 8005804:	d138      	bne.n	8005878 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005806:	4b2a      	ldr	r3, [pc, #168]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2203      	movs	r2, #3
 800580c:	4013      	ands	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005810:	4b27      	ldr	r3, [pc, #156]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	2207      	movs	r2, #7
 8005818:	4013      	ands	r3, r2
 800581a:	3301      	adds	r3, #1
 800581c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d10d      	bne.n	8005840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	4824      	ldr	r0, [pc, #144]	; (80058b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005828:	f7fa fc84 	bl	8000134 <__udivsi3>
 800582c:	0003      	movs	r3, r0
 800582e:	0019      	movs	r1, r3
 8005830:	4b1f      	ldr	r3, [pc, #124]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	227f      	movs	r2, #127	; 0x7f
 8005838:	4013      	ands	r3, r2
 800583a:	434b      	muls	r3, r1
 800583c:	617b      	str	r3, [r7, #20]
        break;
 800583e:	e00d      	b.n	800585c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	481c      	ldr	r0, [pc, #112]	; (80058b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005844:	f7fa fc76 	bl	8000134 <__udivsi3>
 8005848:	0003      	movs	r3, r0
 800584a:	0019      	movs	r1, r3
 800584c:	4b18      	ldr	r3, [pc, #96]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	227f      	movs	r2, #127	; 0x7f
 8005854:	4013      	ands	r3, r2
 8005856:	434b      	muls	r3, r1
 8005858:	617b      	str	r3, [r7, #20]
        break;
 800585a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800585c:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	0f5b      	lsrs	r3, r3, #29
 8005862:	2207      	movs	r2, #7
 8005864:	4013      	ands	r3, r2
 8005866:	3301      	adds	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	6978      	ldr	r0, [r7, #20]
 800586e:	f7fa fc61 	bl	8000134 <__udivsi3>
 8005872:	0003      	movs	r3, r0
 8005874:	613b      	str	r3, [r7, #16]
 8005876:	e015      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005878:	4b0d      	ldr	r3, [pc, #52]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	2238      	movs	r2, #56	; 0x38
 800587e:	4013      	ands	r3, r2
 8005880:	2b20      	cmp	r3, #32
 8005882:	d103      	bne.n	800588c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005884:	2380      	movs	r3, #128	; 0x80
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	e00b      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800588c:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2238      	movs	r2, #56	; 0x38
 8005892:	4013      	ands	r3, r2
 8005894:	2b18      	cmp	r3, #24
 8005896:	d103      	bne.n	80058a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005898:	23fa      	movs	r3, #250	; 0xfa
 800589a:	01db      	lsls	r3, r3, #7
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	e001      	b.n	80058a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80058a4:	693b      	ldr	r3, [r7, #16]
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b006      	add	sp, #24
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	40021000 	.word	0x40021000
 80058b4:	00f42400 	.word	0x00f42400
 80058b8:	007a1200 	.word	0x007a1200

080058bc <__errno>:
 80058bc:	4b01      	ldr	r3, [pc, #4]	; (80058c4 <__errno+0x8>)
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	4770      	bx	lr
 80058c2:	46c0      	nop			; (mov r8, r8)
 80058c4:	20000034 	.word	0x20000034

080058c8 <__libc_init_array>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	2600      	movs	r6, #0
 80058cc:	4d0c      	ldr	r5, [pc, #48]	; (8005900 <__libc_init_array+0x38>)
 80058ce:	4c0d      	ldr	r4, [pc, #52]	; (8005904 <__libc_init_array+0x3c>)
 80058d0:	1b64      	subs	r4, r4, r5
 80058d2:	10a4      	asrs	r4, r4, #2
 80058d4:	42a6      	cmp	r6, r4
 80058d6:	d109      	bne.n	80058ec <__libc_init_array+0x24>
 80058d8:	2600      	movs	r6, #0
 80058da:	f002 fdef 	bl	80084bc <_init>
 80058de:	4d0a      	ldr	r5, [pc, #40]	; (8005908 <__libc_init_array+0x40>)
 80058e0:	4c0a      	ldr	r4, [pc, #40]	; (800590c <__libc_init_array+0x44>)
 80058e2:	1b64      	subs	r4, r4, r5
 80058e4:	10a4      	asrs	r4, r4, #2
 80058e6:	42a6      	cmp	r6, r4
 80058e8:	d105      	bne.n	80058f6 <__libc_init_array+0x2e>
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	00b3      	lsls	r3, r6, #2
 80058ee:	58eb      	ldr	r3, [r5, r3]
 80058f0:	4798      	blx	r3
 80058f2:	3601      	adds	r6, #1
 80058f4:	e7ee      	b.n	80058d4 <__libc_init_array+0xc>
 80058f6:	00b3      	lsls	r3, r6, #2
 80058f8:	58eb      	ldr	r3, [r5, r3]
 80058fa:	4798      	blx	r3
 80058fc:	3601      	adds	r6, #1
 80058fe:	e7f2      	b.n	80058e6 <__libc_init_array+0x1e>
 8005900:	08008974 	.word	0x08008974
 8005904:	08008974 	.word	0x08008974
 8005908:	08008974 	.word	0x08008974
 800590c:	08008978 	.word	0x08008978

08005910 <memset>:
 8005910:	0003      	movs	r3, r0
 8005912:	1882      	adds	r2, r0, r2
 8005914:	4293      	cmp	r3, r2
 8005916:	d100      	bne.n	800591a <memset+0xa>
 8005918:	4770      	bx	lr
 800591a:	7019      	strb	r1, [r3, #0]
 800591c:	3301      	adds	r3, #1
 800591e:	e7f9      	b.n	8005914 <memset+0x4>

08005920 <__cvt>:
 8005920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005922:	001e      	movs	r6, r3
 8005924:	2300      	movs	r3, #0
 8005926:	0014      	movs	r4, r2
 8005928:	b08b      	sub	sp, #44	; 0x2c
 800592a:	429e      	cmp	r6, r3
 800592c:	da04      	bge.n	8005938 <__cvt+0x18>
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	0609      	lsls	r1, r1, #24
 8005932:	1873      	adds	r3, r6, r1
 8005934:	001e      	movs	r6, r3
 8005936:	232d      	movs	r3, #45	; 0x2d
 8005938:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800593a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800593c:	7013      	strb	r3, [r2, #0]
 800593e:	2320      	movs	r3, #32
 8005940:	2203      	movs	r2, #3
 8005942:	439f      	bics	r7, r3
 8005944:	2f46      	cmp	r7, #70	; 0x46
 8005946:	d007      	beq.n	8005958 <__cvt+0x38>
 8005948:	003b      	movs	r3, r7
 800594a:	3b45      	subs	r3, #69	; 0x45
 800594c:	4259      	negs	r1, r3
 800594e:	414b      	adcs	r3, r1
 8005950:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005952:	3a01      	subs	r2, #1
 8005954:	18cb      	adds	r3, r1, r3
 8005956:	9310      	str	r3, [sp, #64]	; 0x40
 8005958:	ab09      	add	r3, sp, #36	; 0x24
 800595a:	9304      	str	r3, [sp, #16]
 800595c:	ab08      	add	r3, sp, #32
 800595e:	9303      	str	r3, [sp, #12]
 8005960:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005962:	9200      	str	r2, [sp, #0]
 8005964:	9302      	str	r3, [sp, #8]
 8005966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005968:	0022      	movs	r2, r4
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	0033      	movs	r3, r6
 800596e:	f000 fcd1 	bl	8006314 <_dtoa_r>
 8005972:	0005      	movs	r5, r0
 8005974:	2f47      	cmp	r7, #71	; 0x47
 8005976:	d102      	bne.n	800597e <__cvt+0x5e>
 8005978:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800597a:	07db      	lsls	r3, r3, #31
 800597c:	d528      	bpl.n	80059d0 <__cvt+0xb0>
 800597e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005980:	18eb      	adds	r3, r5, r3
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	2f46      	cmp	r7, #70	; 0x46
 8005986:	d114      	bne.n	80059b2 <__cvt+0x92>
 8005988:	782b      	ldrb	r3, [r5, #0]
 800598a:	2b30      	cmp	r3, #48	; 0x30
 800598c:	d10c      	bne.n	80059a8 <__cvt+0x88>
 800598e:	2200      	movs	r2, #0
 8005990:	2300      	movs	r3, #0
 8005992:	0020      	movs	r0, r4
 8005994:	0031      	movs	r1, r6
 8005996:	f7fa fd53 	bl	8000440 <__aeabi_dcmpeq>
 800599a:	2800      	cmp	r0, #0
 800599c:	d104      	bne.n	80059a8 <__cvt+0x88>
 800599e:	2301      	movs	r3, #1
 80059a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059a2:	1a9b      	subs	r3, r3, r2
 80059a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059aa:	9a07      	ldr	r2, [sp, #28]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	18d3      	adds	r3, r2, r3
 80059b0:	9307      	str	r3, [sp, #28]
 80059b2:	2200      	movs	r2, #0
 80059b4:	2300      	movs	r3, #0
 80059b6:	0020      	movs	r0, r4
 80059b8:	0031      	movs	r1, r6
 80059ba:	f7fa fd41 	bl	8000440 <__aeabi_dcmpeq>
 80059be:	2800      	cmp	r0, #0
 80059c0:	d001      	beq.n	80059c6 <__cvt+0xa6>
 80059c2:	9b07      	ldr	r3, [sp, #28]
 80059c4:	9309      	str	r3, [sp, #36]	; 0x24
 80059c6:	2230      	movs	r2, #48	; 0x30
 80059c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ca:	9907      	ldr	r1, [sp, #28]
 80059cc:	428b      	cmp	r3, r1
 80059ce:	d306      	bcc.n	80059de <__cvt+0xbe>
 80059d0:	0028      	movs	r0, r5
 80059d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059d6:	1b5b      	subs	r3, r3, r5
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	b00b      	add	sp, #44	; 0x2c
 80059dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059de:	1c59      	adds	r1, r3, #1
 80059e0:	9109      	str	r1, [sp, #36]	; 0x24
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e7f0      	b.n	80059c8 <__cvt+0xa8>

080059e6 <__exponent>:
 80059e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e8:	1c83      	adds	r3, r0, #2
 80059ea:	b087      	sub	sp, #28
 80059ec:	9303      	str	r3, [sp, #12]
 80059ee:	0005      	movs	r5, r0
 80059f0:	000c      	movs	r4, r1
 80059f2:	232b      	movs	r3, #43	; 0x2b
 80059f4:	7002      	strb	r2, [r0, #0]
 80059f6:	2900      	cmp	r1, #0
 80059f8:	da01      	bge.n	80059fe <__exponent+0x18>
 80059fa:	424c      	negs	r4, r1
 80059fc:	3302      	adds	r3, #2
 80059fe:	706b      	strb	r3, [r5, #1]
 8005a00:	2c09      	cmp	r4, #9
 8005a02:	dd31      	ble.n	8005a68 <__exponent+0x82>
 8005a04:	270a      	movs	r7, #10
 8005a06:	ab04      	add	r3, sp, #16
 8005a08:	1dde      	adds	r6, r3, #7
 8005a0a:	0020      	movs	r0, r4
 8005a0c:	0039      	movs	r1, r7
 8005a0e:	9601      	str	r6, [sp, #4]
 8005a10:	f7fa fd00 	bl	8000414 <__aeabi_idivmod>
 8005a14:	3e01      	subs	r6, #1
 8005a16:	3130      	adds	r1, #48	; 0x30
 8005a18:	0020      	movs	r0, r4
 8005a1a:	7031      	strb	r1, [r6, #0]
 8005a1c:	0039      	movs	r1, r7
 8005a1e:	9402      	str	r4, [sp, #8]
 8005a20:	f7fa fc12 	bl	8000248 <__divsi3>
 8005a24:	9b02      	ldr	r3, [sp, #8]
 8005a26:	0004      	movs	r4, r0
 8005a28:	2b63      	cmp	r3, #99	; 0x63
 8005a2a:	dcee      	bgt.n	8005a0a <__exponent+0x24>
 8005a2c:	9b01      	ldr	r3, [sp, #4]
 8005a2e:	3430      	adds	r4, #48	; 0x30
 8005a30:	1e9a      	subs	r2, r3, #2
 8005a32:	0013      	movs	r3, r2
 8005a34:	9903      	ldr	r1, [sp, #12]
 8005a36:	7014      	strb	r4, [r2, #0]
 8005a38:	a804      	add	r0, sp, #16
 8005a3a:	3007      	adds	r0, #7
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	d80e      	bhi.n	8005a5e <__exponent+0x78>
 8005a40:	ab04      	add	r3, sp, #16
 8005a42:	3307      	adds	r3, #7
 8005a44:	2000      	movs	r0, #0
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d804      	bhi.n	8005a54 <__exponent+0x6e>
 8005a4a:	ab04      	add	r3, sp, #16
 8005a4c:	3009      	adds	r0, #9
 8005a4e:	18c0      	adds	r0, r0, r3
 8005a50:	9b01      	ldr	r3, [sp, #4]
 8005a52:	1ac0      	subs	r0, r0, r3
 8005a54:	9b03      	ldr	r3, [sp, #12]
 8005a56:	1818      	adds	r0, r3, r0
 8005a58:	1b40      	subs	r0, r0, r5
 8005a5a:	b007      	add	sp, #28
 8005a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a5e:	7818      	ldrb	r0, [r3, #0]
 8005a60:	3301      	adds	r3, #1
 8005a62:	7008      	strb	r0, [r1, #0]
 8005a64:	3101      	adds	r1, #1
 8005a66:	e7e7      	b.n	8005a38 <__exponent+0x52>
 8005a68:	2330      	movs	r3, #48	; 0x30
 8005a6a:	18e4      	adds	r4, r4, r3
 8005a6c:	70ab      	strb	r3, [r5, #2]
 8005a6e:	1d28      	adds	r0, r5, #4
 8005a70:	70ec      	strb	r4, [r5, #3]
 8005a72:	e7f1      	b.n	8005a58 <__exponent+0x72>

08005a74 <_printf_float>:
 8005a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a76:	b095      	sub	sp, #84	; 0x54
 8005a78:	000c      	movs	r4, r1
 8005a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a7c:	001e      	movs	r6, r3
 8005a7e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005a80:	0007      	movs	r7, r0
 8005a82:	f001 fa61 	bl	8006f48 <_localeconv_r>
 8005a86:	6803      	ldr	r3, [r0, #0]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	930c      	str	r3, [sp, #48]	; 0x30
 8005a8c:	f7fa fb36 	bl	80000fc <strlen>
 8005a90:	2300      	movs	r3, #0
 8005a92:	9312      	str	r3, [sp, #72]	; 0x48
 8005a94:	7e23      	ldrb	r3, [r4, #24]
 8005a96:	2207      	movs	r2, #7
 8005a98:	930a      	str	r3, [sp, #40]	; 0x28
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	900e      	str	r0, [sp, #56]	; 0x38
 8005a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8005aa0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	05c9      	lsls	r1, r1, #23
 8005aa6:	d547      	bpl.n	8005b38 <_printf_float+0xc4>
 8005aa8:	189b      	adds	r3, r3, r2
 8005aaa:	4393      	bics	r3, r2
 8005aac:	001a      	movs	r2, r3
 8005aae:	3208      	adds	r2, #8
 8005ab0:	602a      	str	r2, [r5, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	64a2      	str	r2, [r4, #72]	; 0x48
 8005ab8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005aba:	2201      	movs	r2, #1
 8005abc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005abe:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005ac0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ac2:	006b      	lsls	r3, r5, #1
 8005ac4:	085b      	lsrs	r3, r3, #1
 8005ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ac8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005aca:	4ba7      	ldr	r3, [pc, #668]	; (8005d68 <_printf_float+0x2f4>)
 8005acc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ace:	4252      	negs	r2, r2
 8005ad0:	f7fc fa20 	bl	8001f14 <__aeabi_dcmpun>
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d131      	bne.n	8005b3c <_printf_float+0xc8>
 8005ad8:	2201      	movs	r2, #1
 8005ada:	4ba3      	ldr	r3, [pc, #652]	; (8005d68 <_printf_float+0x2f4>)
 8005adc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005ade:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ae0:	4252      	negs	r2, r2
 8005ae2:	f7fa fcbd 	bl	8000460 <__aeabi_dcmple>
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	d128      	bne.n	8005b3c <_printf_float+0xc8>
 8005aea:	2200      	movs	r2, #0
 8005aec:	2300      	movs	r3, #0
 8005aee:	0029      	movs	r1, r5
 8005af0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005af2:	f7fa fcab 	bl	800044c <__aeabi_dcmplt>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	d003      	beq.n	8005b02 <_printf_float+0x8e>
 8005afa:	0023      	movs	r3, r4
 8005afc:	222d      	movs	r2, #45	; 0x2d
 8005afe:	3343      	adds	r3, #67	; 0x43
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b04:	4d99      	ldr	r5, [pc, #612]	; (8005d6c <_printf_float+0x2f8>)
 8005b06:	2b47      	cmp	r3, #71	; 0x47
 8005b08:	d900      	bls.n	8005b0c <_printf_float+0x98>
 8005b0a:	4d99      	ldr	r5, [pc, #612]	; (8005d70 <_printf_float+0x2fc>)
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	3301      	adds	r3, #1
 8005b14:	439a      	bics	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6022      	str	r2, [r4, #0]
 8005b1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b1e:	0021      	movs	r1, r4
 8005b20:	0038      	movs	r0, r7
 8005b22:	9600      	str	r6, [sp, #0]
 8005b24:	aa13      	add	r2, sp, #76	; 0x4c
 8005b26:	f000 f9e7 	bl	8005ef8 <_printf_common>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	d000      	beq.n	8005b30 <_printf_float+0xbc>
 8005b2e:	e0a2      	b.n	8005c76 <_printf_float+0x202>
 8005b30:	2001      	movs	r0, #1
 8005b32:	4240      	negs	r0, r0
 8005b34:	b015      	add	sp, #84	; 0x54
 8005b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b38:	3307      	adds	r3, #7
 8005b3a:	e7b6      	b.n	8005aaa <_printf_float+0x36>
 8005b3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b3e:	002b      	movs	r3, r5
 8005b40:	0010      	movs	r0, r2
 8005b42:	0029      	movs	r1, r5
 8005b44:	f7fc f9e6 	bl	8001f14 <__aeabi_dcmpun>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d00b      	beq.n	8005b64 <_printf_float+0xf0>
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	da03      	bge.n	8005b58 <_printf_float+0xe4>
 8005b50:	0023      	movs	r3, r4
 8005b52:	222d      	movs	r2, #45	; 0x2d
 8005b54:	3343      	adds	r3, #67	; 0x43
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b5a:	4d86      	ldr	r5, [pc, #536]	; (8005d74 <_printf_float+0x300>)
 8005b5c:	2b47      	cmp	r3, #71	; 0x47
 8005b5e:	d9d5      	bls.n	8005b0c <_printf_float+0x98>
 8005b60:	4d85      	ldr	r5, [pc, #532]	; (8005d78 <_printf_float+0x304>)
 8005b62:	e7d3      	b.n	8005b0c <_printf_float+0x98>
 8005b64:	2220      	movs	r2, #32
 8005b66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b68:	6863      	ldr	r3, [r4, #4]
 8005b6a:	4391      	bics	r1, r2
 8005b6c:	910f      	str	r1, [sp, #60]	; 0x3c
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	d149      	bne.n	8005c06 <_printf_float+0x192>
 8005b72:	3307      	adds	r3, #7
 8005b74:	6063      	str	r3, [r4, #4]
 8005b76:	2380      	movs	r3, #128	; 0x80
 8005b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	2200      	movs	r2, #0
 8005b80:	9206      	str	r2, [sp, #24]
 8005b82:	aa12      	add	r2, sp, #72	; 0x48
 8005b84:	9205      	str	r2, [sp, #20]
 8005b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b88:	a908      	add	r1, sp, #32
 8005b8a:	9204      	str	r2, [sp, #16]
 8005b8c:	aa11      	add	r2, sp, #68	; 0x44
 8005b8e:	9203      	str	r2, [sp, #12]
 8005b90:	2223      	movs	r2, #35	; 0x23
 8005b92:	6023      	str	r3, [r4, #0]
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	6863      	ldr	r3, [r4, #4]
 8005b98:	1852      	adds	r2, r2, r1
 8005b9a:	9202      	str	r2, [sp, #8]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	0038      	movs	r0, r7
 8005ba0:	002b      	movs	r3, r5
 8005ba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ba4:	f7ff febc 	bl	8005920 <__cvt>
 8005ba8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005baa:	0005      	movs	r5, r0
 8005bac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005bae:	2b47      	cmp	r3, #71	; 0x47
 8005bb0:	d108      	bne.n	8005bc4 <_printf_float+0x150>
 8005bb2:	1ccb      	adds	r3, r1, #3
 8005bb4:	db02      	blt.n	8005bbc <_printf_float+0x148>
 8005bb6:	6863      	ldr	r3, [r4, #4]
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	dd48      	ble.n	8005c4e <_printf_float+0x1da>
 8005bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bbe:	3b02      	subs	r3, #2
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	930a      	str	r3, [sp, #40]	; 0x28
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	2b65      	cmp	r3, #101	; 0x65
 8005bc8:	d824      	bhi.n	8005c14 <_printf_float+0x1a0>
 8005bca:	0020      	movs	r0, r4
 8005bcc:	001a      	movs	r2, r3
 8005bce:	3901      	subs	r1, #1
 8005bd0:	3050      	adds	r0, #80	; 0x50
 8005bd2:	9111      	str	r1, [sp, #68]	; 0x44
 8005bd4:	f7ff ff07 	bl	80059e6 <__exponent>
 8005bd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005bda:	900b      	str	r0, [sp, #44]	; 0x2c
 8005bdc:	1813      	adds	r3, r2, r0
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	2a01      	cmp	r2, #1
 8005be2:	dc02      	bgt.n	8005bea <_printf_float+0x176>
 8005be4:	6822      	ldr	r2, [r4, #0]
 8005be6:	07d2      	lsls	r2, r2, #31
 8005be8:	d501      	bpl.n	8005bee <_printf_float+0x17a>
 8005bea:	3301      	adds	r3, #1
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	2323      	movs	r3, #35	; 0x23
 8005bf0:	aa08      	add	r2, sp, #32
 8005bf2:	189b      	adds	r3, r3, r2
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d100      	bne.n	8005bfc <_printf_float+0x188>
 8005bfa:	e78f      	b.n	8005b1c <_printf_float+0xa8>
 8005bfc:	0023      	movs	r3, r4
 8005bfe:	222d      	movs	r2, #45	; 0x2d
 8005c00:	3343      	adds	r3, #67	; 0x43
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e78a      	b.n	8005b1c <_printf_float+0xa8>
 8005c06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c08:	2a47      	cmp	r2, #71	; 0x47
 8005c0a:	d1b4      	bne.n	8005b76 <_printf_float+0x102>
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1b2      	bne.n	8005b76 <_printf_float+0x102>
 8005c10:	3301      	adds	r3, #1
 8005c12:	e7af      	b.n	8005b74 <_printf_float+0x100>
 8005c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c16:	2b66      	cmp	r3, #102	; 0x66
 8005c18:	d11b      	bne.n	8005c52 <_printf_float+0x1de>
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	dd0d      	ble.n	8005c3c <_printf_float+0x1c8>
 8005c20:	6121      	str	r1, [r4, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d102      	bne.n	8005c2c <_printf_float+0x1b8>
 8005c26:	6822      	ldr	r2, [r4, #0]
 8005c28:	07d2      	lsls	r2, r2, #31
 8005c2a:	d502      	bpl.n	8005c32 <_printf_float+0x1be>
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	1859      	adds	r1, r3, r1
 8005c30:	6121      	str	r1, [r4, #16]
 8005c32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c34:	65a3      	str	r3, [r4, #88]	; 0x58
 8005c36:	2300      	movs	r3, #0
 8005c38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3a:	e7d8      	b.n	8005bee <_printf_float+0x17a>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d103      	bne.n	8005c48 <_printf_float+0x1d4>
 8005c40:	2201      	movs	r2, #1
 8005c42:	6821      	ldr	r1, [r4, #0]
 8005c44:	4211      	tst	r1, r2
 8005c46:	d000      	beq.n	8005c4a <_printf_float+0x1d6>
 8005c48:	1c9a      	adds	r2, r3, #2
 8005c4a:	6122      	str	r2, [r4, #16]
 8005c4c:	e7f1      	b.n	8005c32 <_printf_float+0x1be>
 8005c4e:	2367      	movs	r3, #103	; 0x67
 8005c50:	930a      	str	r3, [sp, #40]	; 0x28
 8005c52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c56:	4293      	cmp	r3, r2
 8005c58:	db06      	blt.n	8005c68 <_printf_float+0x1f4>
 8005c5a:	6822      	ldr	r2, [r4, #0]
 8005c5c:	6123      	str	r3, [r4, #16]
 8005c5e:	07d2      	lsls	r2, r2, #31
 8005c60:	d5e7      	bpl.n	8005c32 <_printf_float+0x1be>
 8005c62:	3301      	adds	r3, #1
 8005c64:	6123      	str	r3, [r4, #16]
 8005c66:	e7e4      	b.n	8005c32 <_printf_float+0x1be>
 8005c68:	2101      	movs	r1, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dc01      	bgt.n	8005c72 <_printf_float+0x1fe>
 8005c6e:	1849      	adds	r1, r1, r1
 8005c70:	1ac9      	subs	r1, r1, r3
 8005c72:	1852      	adds	r2, r2, r1
 8005c74:	e7e9      	b.n	8005c4a <_printf_float+0x1d6>
 8005c76:	6822      	ldr	r2, [r4, #0]
 8005c78:	0553      	lsls	r3, r2, #21
 8005c7a:	d407      	bmi.n	8005c8c <_printf_float+0x218>
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	002a      	movs	r2, r5
 8005c80:	0038      	movs	r0, r7
 8005c82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c84:	47b0      	blx	r6
 8005c86:	1c43      	adds	r3, r0, #1
 8005c88:	d128      	bne.n	8005cdc <_printf_float+0x268>
 8005c8a:	e751      	b.n	8005b30 <_printf_float+0xbc>
 8005c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8e:	2b65      	cmp	r3, #101	; 0x65
 8005c90:	d800      	bhi.n	8005c94 <_printf_float+0x220>
 8005c92:	e0e1      	b.n	8005e58 <_printf_float+0x3e4>
 8005c94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005c96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	f7fa fbd0 	bl	8000440 <__aeabi_dcmpeq>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d031      	beq.n	8005d08 <_printf_float+0x294>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	0038      	movs	r0, r7
 8005ca8:	4a34      	ldr	r2, [pc, #208]	; (8005d7c <_printf_float+0x308>)
 8005caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cac:	47b0      	blx	r6
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d100      	bne.n	8005cb4 <_printf_float+0x240>
 8005cb2:	e73d      	b.n	8005b30 <_printf_float+0xbc>
 8005cb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	db02      	blt.n	8005cc2 <_printf_float+0x24e>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	07db      	lsls	r3, r3, #31
 8005cc0:	d50c      	bpl.n	8005cdc <_printf_float+0x268>
 8005cc2:	0038      	movs	r0, r7
 8005cc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cca:	47b0      	blx	r6
 8005ccc:	2500      	movs	r5, #0
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	d100      	bne.n	8005cd4 <_printf_float+0x260>
 8005cd2:	e72d      	b.n	8005b30 <_printf_float+0xbc>
 8005cd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	42ab      	cmp	r3, r5
 8005cda:	dc0a      	bgt.n	8005cf2 <_printf_float+0x27e>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	079b      	lsls	r3, r3, #30
 8005ce0:	d500      	bpl.n	8005ce4 <_printf_float+0x270>
 8005ce2:	e106      	b.n	8005ef2 <_printf_float+0x47e>
 8005ce4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ce6:	68e0      	ldr	r0, [r4, #12]
 8005ce8:	4298      	cmp	r0, r3
 8005cea:	db00      	blt.n	8005cee <_printf_float+0x27a>
 8005cec:	e722      	b.n	8005b34 <_printf_float+0xc0>
 8005cee:	0018      	movs	r0, r3
 8005cf0:	e720      	b.n	8005b34 <_printf_float+0xc0>
 8005cf2:	0022      	movs	r2, r4
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	0038      	movs	r0, r7
 8005cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cfa:	321a      	adds	r2, #26
 8005cfc:	47b0      	blx	r6
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d100      	bne.n	8005d04 <_printf_float+0x290>
 8005d02:	e715      	b.n	8005b30 <_printf_float+0xbc>
 8005d04:	3501      	adds	r5, #1
 8005d06:	e7e5      	b.n	8005cd4 <_printf_float+0x260>
 8005d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dc38      	bgt.n	8005d80 <_printf_float+0x30c>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	0038      	movs	r0, r7
 8005d12:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <_printf_float+0x308>)
 8005d14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d16:	47b0      	blx	r6
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d100      	bne.n	8005d1e <_printf_float+0x2aa>
 8005d1c:	e708      	b.n	8005b30 <_printf_float+0xbc>
 8005d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d102      	bne.n	8005d2c <_printf_float+0x2b8>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	07db      	lsls	r3, r3, #31
 8005d2a:	d5d7      	bpl.n	8005cdc <_printf_float+0x268>
 8005d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d2e:	0038      	movs	r0, r7
 8005d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d34:	47b0      	blx	r6
 8005d36:	1c43      	adds	r3, r0, #1
 8005d38:	d100      	bne.n	8005d3c <_printf_float+0x2c8>
 8005d3a:	e6f9      	b.n	8005b30 <_printf_float+0xbc>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d44:	425b      	negs	r3, r3
 8005d46:	4293      	cmp	r3, r2
 8005d48:	dc01      	bgt.n	8005d4e <_printf_float+0x2da>
 8005d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d4c:	e797      	b.n	8005c7e <_printf_float+0x20a>
 8005d4e:	0022      	movs	r2, r4
 8005d50:	2301      	movs	r3, #1
 8005d52:	0038      	movs	r0, r7
 8005d54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d56:	321a      	adds	r2, #26
 8005d58:	47b0      	blx	r6
 8005d5a:	1c43      	adds	r3, r0, #1
 8005d5c:	d100      	bne.n	8005d60 <_printf_float+0x2ec>
 8005d5e:	e6e7      	b.n	8005b30 <_printf_float+0xbc>
 8005d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d62:	3301      	adds	r3, #1
 8005d64:	e7eb      	b.n	8005d3e <_printf_float+0x2ca>
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	7fefffff 	.word	0x7fefffff
 8005d6c:	0800859c 	.word	0x0800859c
 8005d70:	080085a0 	.word	0x080085a0
 8005d74:	080085a4 	.word	0x080085a4
 8005d78:	080085a8 	.word	0x080085a8
 8005d7c:	080085ac 	.word	0x080085ac
 8005d80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d84:	920a      	str	r2, [sp, #40]	; 0x28
 8005d86:	429a      	cmp	r2, r3
 8005d88:	dd00      	ble.n	8005d8c <_printf_float+0x318>
 8005d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	dc3c      	bgt.n	8005e0c <_printf_float+0x398>
 8005d92:	2300      	movs	r3, #0
 8005d94:	930d      	str	r3, [sp, #52]	; 0x34
 8005d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	17db      	asrs	r3, r3, #31
 8005d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005da2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da6:	4013      	ands	r3, r2
 8005da8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005dae:	4293      	cmp	r3, r2
 8005db0:	dc34      	bgt.n	8005e1c <_printf_float+0x3a8>
 8005db2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005db4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005db6:	4293      	cmp	r3, r2
 8005db8:	db3d      	blt.n	8005e36 <_printf_float+0x3c2>
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	07db      	lsls	r3, r3, #31
 8005dbe:	d43a      	bmi.n	8005e36 <_printf_float+0x3c2>
 8005dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dc4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	1a52      	subs	r2, r2, r1
 8005dca:	920a      	str	r2, [sp, #40]	; 0x28
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	dd00      	ble.n	8005dd2 <_printf_float+0x35e>
 8005dd0:	930a      	str	r3, [sp, #40]	; 0x28
 8005dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	dc36      	bgt.n	8005e46 <_printf_float+0x3d2>
 8005dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dda:	2500      	movs	r5, #0
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	17db      	asrs	r3, r3, #31
 8005de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005de2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005de4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005de6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dec:	400a      	ands	r2, r1
 8005dee:	1a9b      	subs	r3, r3, r2
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	dc00      	bgt.n	8005df6 <_printf_float+0x382>
 8005df4:	e772      	b.n	8005cdc <_printf_float+0x268>
 8005df6:	0022      	movs	r2, r4
 8005df8:	2301      	movs	r3, #1
 8005dfa:	0038      	movs	r0, r7
 8005dfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dfe:	321a      	adds	r2, #26
 8005e00:	47b0      	blx	r6
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	d100      	bne.n	8005e08 <_printf_float+0x394>
 8005e06:	e693      	b.n	8005b30 <_printf_float+0xbc>
 8005e08:	3501      	adds	r5, #1
 8005e0a:	e7ea      	b.n	8005de2 <_printf_float+0x36e>
 8005e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e0e:	002a      	movs	r2, r5
 8005e10:	0038      	movs	r0, r7
 8005e12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e14:	47b0      	blx	r6
 8005e16:	1c43      	adds	r3, r0, #1
 8005e18:	d1bb      	bne.n	8005d92 <_printf_float+0x31e>
 8005e1a:	e689      	b.n	8005b30 <_printf_float+0xbc>
 8005e1c:	0022      	movs	r2, r4
 8005e1e:	2301      	movs	r3, #1
 8005e20:	0038      	movs	r0, r7
 8005e22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e24:	321a      	adds	r2, #26
 8005e26:	47b0      	blx	r6
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d100      	bne.n	8005e2e <_printf_float+0x3ba>
 8005e2c:	e680      	b.n	8005b30 <_printf_float+0xbc>
 8005e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e30:	3301      	adds	r3, #1
 8005e32:	930d      	str	r3, [sp, #52]	; 0x34
 8005e34:	e7b3      	b.n	8005d9e <_printf_float+0x32a>
 8005e36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e38:	0038      	movs	r0, r7
 8005e3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e3e:	47b0      	blx	r6
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d1bd      	bne.n	8005dc0 <_printf_float+0x34c>
 8005e44:	e674      	b.n	8005b30 <_printf_float+0xbc>
 8005e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e48:	0038      	movs	r0, r7
 8005e4a:	18ea      	adds	r2, r5, r3
 8005e4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e50:	47b0      	blx	r6
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	d1c0      	bne.n	8005dd8 <_printf_float+0x364>
 8005e56:	e66b      	b.n	8005b30 <_printf_float+0xbc>
 8005e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	dc02      	bgt.n	8005e64 <_printf_float+0x3f0>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	421a      	tst	r2, r3
 8005e62:	d034      	beq.n	8005ece <_printf_float+0x45a>
 8005e64:	2301      	movs	r3, #1
 8005e66:	002a      	movs	r2, r5
 8005e68:	0038      	movs	r0, r7
 8005e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e6c:	47b0      	blx	r6
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	d100      	bne.n	8005e74 <_printf_float+0x400>
 8005e72:	e65d      	b.n	8005b30 <_printf_float+0xbc>
 8005e74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e76:	0038      	movs	r0, r7
 8005e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e7c:	47b0      	blx	r6
 8005e7e:	1c43      	adds	r3, r0, #1
 8005e80:	d100      	bne.n	8005e84 <_printf_float+0x410>
 8005e82:	e655      	b.n	8005b30 <_printf_float+0xbc>
 8005e84:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005e86:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f7fa fad8 	bl	8000440 <__aeabi_dcmpeq>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d11a      	bne.n	8005eca <_printf_float+0x456>
 8005e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e96:	1c6a      	adds	r2, r5, #1
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	0038      	movs	r0, r7
 8005e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e9e:	47b0      	blx	r6
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d10e      	bne.n	8005ec2 <_printf_float+0x44e>
 8005ea4:	e644      	b.n	8005b30 <_printf_float+0xbc>
 8005ea6:	0022      	movs	r2, r4
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	0038      	movs	r0, r7
 8005eac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eae:	321a      	adds	r2, #26
 8005eb0:	47b0      	blx	r6
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	d100      	bne.n	8005eb8 <_printf_float+0x444>
 8005eb6:	e63b      	b.n	8005b30 <_printf_float+0xbc>
 8005eb8:	3501      	adds	r5, #1
 8005eba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	dcf1      	bgt.n	8005ea6 <_printf_float+0x432>
 8005ec2:	0022      	movs	r2, r4
 8005ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec6:	3250      	adds	r2, #80	; 0x50
 8005ec8:	e6da      	b.n	8005c80 <_printf_float+0x20c>
 8005eca:	2500      	movs	r5, #0
 8005ecc:	e7f5      	b.n	8005eba <_printf_float+0x446>
 8005ece:	002a      	movs	r2, r5
 8005ed0:	e7e3      	b.n	8005e9a <_printf_float+0x426>
 8005ed2:	0022      	movs	r2, r4
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	0038      	movs	r0, r7
 8005ed8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005eda:	3219      	adds	r2, #25
 8005edc:	47b0      	blx	r6
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d100      	bne.n	8005ee4 <_printf_float+0x470>
 8005ee2:	e625      	b.n	8005b30 <_printf_float+0xbc>
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dcf0      	bgt.n	8005ed2 <_printf_float+0x45e>
 8005ef0:	e6f8      	b.n	8005ce4 <_printf_float+0x270>
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	e7f7      	b.n	8005ee6 <_printf_float+0x472>
 8005ef6:	46c0      	nop			; (mov r8, r8)

08005ef8 <_printf_common>:
 8005ef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005efa:	0015      	movs	r5, r2
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	688a      	ldr	r2, [r1, #8]
 8005f00:	690b      	ldr	r3, [r1, #16]
 8005f02:	000c      	movs	r4, r1
 8005f04:	9000      	str	r0, [sp, #0]
 8005f06:	4293      	cmp	r3, r2
 8005f08:	da00      	bge.n	8005f0c <_printf_common+0x14>
 8005f0a:	0013      	movs	r3, r2
 8005f0c:	0022      	movs	r2, r4
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	3243      	adds	r2, #67	; 0x43
 8005f12:	7812      	ldrb	r2, [r2, #0]
 8005f14:	2a00      	cmp	r2, #0
 8005f16:	d001      	beq.n	8005f1c <_printf_common+0x24>
 8005f18:	3301      	adds	r3, #1
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	069b      	lsls	r3, r3, #26
 8005f20:	d502      	bpl.n	8005f28 <_printf_common+0x30>
 8005f22:	682b      	ldr	r3, [r5, #0]
 8005f24:	3302      	adds	r3, #2
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	6822      	ldr	r2, [r4, #0]
 8005f2a:	2306      	movs	r3, #6
 8005f2c:	0017      	movs	r7, r2
 8005f2e:	401f      	ands	r7, r3
 8005f30:	421a      	tst	r2, r3
 8005f32:	d027      	beq.n	8005f84 <_printf_common+0x8c>
 8005f34:	0023      	movs	r3, r4
 8005f36:	3343      	adds	r3, #67	; 0x43
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	1e5a      	subs	r2, r3, #1
 8005f3c:	4193      	sbcs	r3, r2
 8005f3e:	6822      	ldr	r2, [r4, #0]
 8005f40:	0692      	lsls	r2, r2, #26
 8005f42:	d430      	bmi.n	8005fa6 <_printf_common+0xae>
 8005f44:	0022      	movs	r2, r4
 8005f46:	9901      	ldr	r1, [sp, #4]
 8005f48:	9800      	ldr	r0, [sp, #0]
 8005f4a:	9e08      	ldr	r6, [sp, #32]
 8005f4c:	3243      	adds	r2, #67	; 0x43
 8005f4e:	47b0      	blx	r6
 8005f50:	1c43      	adds	r3, r0, #1
 8005f52:	d025      	beq.n	8005fa0 <_printf_common+0xa8>
 8005f54:	2306      	movs	r3, #6
 8005f56:	6820      	ldr	r0, [r4, #0]
 8005f58:	682a      	ldr	r2, [r5, #0]
 8005f5a:	68e1      	ldr	r1, [r4, #12]
 8005f5c:	2500      	movs	r5, #0
 8005f5e:	4003      	ands	r3, r0
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d103      	bne.n	8005f6c <_printf_common+0x74>
 8005f64:	1a8d      	subs	r5, r1, r2
 8005f66:	43eb      	mvns	r3, r5
 8005f68:	17db      	asrs	r3, r3, #31
 8005f6a:	401d      	ands	r5, r3
 8005f6c:	68a3      	ldr	r3, [r4, #8]
 8005f6e:	6922      	ldr	r2, [r4, #16]
 8005f70:	4293      	cmp	r3, r2
 8005f72:	dd01      	ble.n	8005f78 <_printf_common+0x80>
 8005f74:	1a9b      	subs	r3, r3, r2
 8005f76:	18ed      	adds	r5, r5, r3
 8005f78:	2700      	movs	r7, #0
 8005f7a:	42bd      	cmp	r5, r7
 8005f7c:	d120      	bne.n	8005fc0 <_printf_common+0xc8>
 8005f7e:	2000      	movs	r0, #0
 8005f80:	e010      	b.n	8005fa4 <_printf_common+0xac>
 8005f82:	3701      	adds	r7, #1
 8005f84:	68e3      	ldr	r3, [r4, #12]
 8005f86:	682a      	ldr	r2, [r5, #0]
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	42bb      	cmp	r3, r7
 8005f8c:	ddd2      	ble.n	8005f34 <_printf_common+0x3c>
 8005f8e:	0022      	movs	r2, r4
 8005f90:	2301      	movs	r3, #1
 8005f92:	9901      	ldr	r1, [sp, #4]
 8005f94:	9800      	ldr	r0, [sp, #0]
 8005f96:	9e08      	ldr	r6, [sp, #32]
 8005f98:	3219      	adds	r2, #25
 8005f9a:	47b0      	blx	r6
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d1f0      	bne.n	8005f82 <_printf_common+0x8a>
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	4240      	negs	r0, r0
 8005fa4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005fa6:	2030      	movs	r0, #48	; 0x30
 8005fa8:	18e1      	adds	r1, r4, r3
 8005faa:	3143      	adds	r1, #67	; 0x43
 8005fac:	7008      	strb	r0, [r1, #0]
 8005fae:	0021      	movs	r1, r4
 8005fb0:	1c5a      	adds	r2, r3, #1
 8005fb2:	3145      	adds	r1, #69	; 0x45
 8005fb4:	7809      	ldrb	r1, [r1, #0]
 8005fb6:	18a2      	adds	r2, r4, r2
 8005fb8:	3243      	adds	r2, #67	; 0x43
 8005fba:	3302      	adds	r3, #2
 8005fbc:	7011      	strb	r1, [r2, #0]
 8005fbe:	e7c1      	b.n	8005f44 <_printf_common+0x4c>
 8005fc0:	0022      	movs	r2, r4
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	9901      	ldr	r1, [sp, #4]
 8005fc6:	9800      	ldr	r0, [sp, #0]
 8005fc8:	9e08      	ldr	r6, [sp, #32]
 8005fca:	321a      	adds	r2, #26
 8005fcc:	47b0      	blx	r6
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	d0e6      	beq.n	8005fa0 <_printf_common+0xa8>
 8005fd2:	3701      	adds	r7, #1
 8005fd4:	e7d1      	b.n	8005f7a <_printf_common+0x82>
	...

08005fd8 <_printf_i>:
 8005fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fda:	b08b      	sub	sp, #44	; 0x2c
 8005fdc:	9206      	str	r2, [sp, #24]
 8005fde:	000a      	movs	r2, r1
 8005fe0:	3243      	adds	r2, #67	; 0x43
 8005fe2:	9307      	str	r3, [sp, #28]
 8005fe4:	9005      	str	r0, [sp, #20]
 8005fe6:	9204      	str	r2, [sp, #16]
 8005fe8:	7e0a      	ldrb	r2, [r1, #24]
 8005fea:	000c      	movs	r4, r1
 8005fec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fee:	2a78      	cmp	r2, #120	; 0x78
 8005ff0:	d807      	bhi.n	8006002 <_printf_i+0x2a>
 8005ff2:	2a62      	cmp	r2, #98	; 0x62
 8005ff4:	d809      	bhi.n	800600a <_printf_i+0x32>
 8005ff6:	2a00      	cmp	r2, #0
 8005ff8:	d100      	bne.n	8005ffc <_printf_i+0x24>
 8005ffa:	e0c1      	b.n	8006180 <_printf_i+0x1a8>
 8005ffc:	2a58      	cmp	r2, #88	; 0x58
 8005ffe:	d100      	bne.n	8006002 <_printf_i+0x2a>
 8006000:	e08c      	b.n	800611c <_printf_i+0x144>
 8006002:	0026      	movs	r6, r4
 8006004:	3642      	adds	r6, #66	; 0x42
 8006006:	7032      	strb	r2, [r6, #0]
 8006008:	e022      	b.n	8006050 <_printf_i+0x78>
 800600a:	0010      	movs	r0, r2
 800600c:	3863      	subs	r0, #99	; 0x63
 800600e:	2815      	cmp	r0, #21
 8006010:	d8f7      	bhi.n	8006002 <_printf_i+0x2a>
 8006012:	f7fa f885 	bl	8000120 <__gnu_thumb1_case_shi>
 8006016:	0016      	.short	0x0016
 8006018:	fff6001f 	.word	0xfff6001f
 800601c:	fff6fff6 	.word	0xfff6fff6
 8006020:	001ffff6 	.word	0x001ffff6
 8006024:	fff6fff6 	.word	0xfff6fff6
 8006028:	fff6fff6 	.word	0xfff6fff6
 800602c:	003600a8 	.word	0x003600a8
 8006030:	fff6009a 	.word	0xfff6009a
 8006034:	00b9fff6 	.word	0x00b9fff6
 8006038:	0036fff6 	.word	0x0036fff6
 800603c:	fff6fff6 	.word	0xfff6fff6
 8006040:	009e      	.short	0x009e
 8006042:	0026      	movs	r6, r4
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	3642      	adds	r6, #66	; 0x42
 8006048:	1d11      	adds	r1, r2, #4
 800604a:	6019      	str	r1, [r3, #0]
 800604c:	6813      	ldr	r3, [r2, #0]
 800604e:	7033      	strb	r3, [r6, #0]
 8006050:	2301      	movs	r3, #1
 8006052:	e0a7      	b.n	80061a4 <_printf_i+0x1cc>
 8006054:	6808      	ldr	r0, [r1, #0]
 8006056:	6819      	ldr	r1, [r3, #0]
 8006058:	1d0a      	adds	r2, r1, #4
 800605a:	0605      	lsls	r5, r0, #24
 800605c:	d50b      	bpl.n	8006076 <_printf_i+0x9e>
 800605e:	680d      	ldr	r5, [r1, #0]
 8006060:	601a      	str	r2, [r3, #0]
 8006062:	2d00      	cmp	r5, #0
 8006064:	da03      	bge.n	800606e <_printf_i+0x96>
 8006066:	232d      	movs	r3, #45	; 0x2d
 8006068:	9a04      	ldr	r2, [sp, #16]
 800606a:	426d      	negs	r5, r5
 800606c:	7013      	strb	r3, [r2, #0]
 800606e:	4b61      	ldr	r3, [pc, #388]	; (80061f4 <_printf_i+0x21c>)
 8006070:	270a      	movs	r7, #10
 8006072:	9303      	str	r3, [sp, #12]
 8006074:	e01b      	b.n	80060ae <_printf_i+0xd6>
 8006076:	680d      	ldr	r5, [r1, #0]
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	0641      	lsls	r1, r0, #25
 800607c:	d5f1      	bpl.n	8006062 <_printf_i+0x8a>
 800607e:	b22d      	sxth	r5, r5
 8006080:	e7ef      	b.n	8006062 <_printf_i+0x8a>
 8006082:	680d      	ldr	r5, [r1, #0]
 8006084:	6819      	ldr	r1, [r3, #0]
 8006086:	1d08      	adds	r0, r1, #4
 8006088:	6018      	str	r0, [r3, #0]
 800608a:	062e      	lsls	r6, r5, #24
 800608c:	d501      	bpl.n	8006092 <_printf_i+0xba>
 800608e:	680d      	ldr	r5, [r1, #0]
 8006090:	e003      	b.n	800609a <_printf_i+0xc2>
 8006092:	066d      	lsls	r5, r5, #25
 8006094:	d5fb      	bpl.n	800608e <_printf_i+0xb6>
 8006096:	680d      	ldr	r5, [r1, #0]
 8006098:	b2ad      	uxth	r5, r5
 800609a:	4b56      	ldr	r3, [pc, #344]	; (80061f4 <_printf_i+0x21c>)
 800609c:	2708      	movs	r7, #8
 800609e:	9303      	str	r3, [sp, #12]
 80060a0:	2a6f      	cmp	r2, #111	; 0x6f
 80060a2:	d000      	beq.n	80060a6 <_printf_i+0xce>
 80060a4:	3702      	adds	r7, #2
 80060a6:	0023      	movs	r3, r4
 80060a8:	2200      	movs	r2, #0
 80060aa:	3343      	adds	r3, #67	; 0x43
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	60a3      	str	r3, [r4, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	db03      	blt.n	80060be <_printf_i+0xe6>
 80060b6:	2204      	movs	r2, #4
 80060b8:	6821      	ldr	r1, [r4, #0]
 80060ba:	4391      	bics	r1, r2
 80060bc:	6021      	str	r1, [r4, #0]
 80060be:	2d00      	cmp	r5, #0
 80060c0:	d102      	bne.n	80060c8 <_printf_i+0xf0>
 80060c2:	9e04      	ldr	r6, [sp, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00c      	beq.n	80060e2 <_printf_i+0x10a>
 80060c8:	9e04      	ldr	r6, [sp, #16]
 80060ca:	0028      	movs	r0, r5
 80060cc:	0039      	movs	r1, r7
 80060ce:	f7fa f8b7 	bl	8000240 <__aeabi_uidivmod>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	3e01      	subs	r6, #1
 80060d6:	5c5b      	ldrb	r3, [r3, r1]
 80060d8:	7033      	strb	r3, [r6, #0]
 80060da:	002b      	movs	r3, r5
 80060dc:	0005      	movs	r5, r0
 80060de:	429f      	cmp	r7, r3
 80060e0:	d9f3      	bls.n	80060ca <_printf_i+0xf2>
 80060e2:	2f08      	cmp	r7, #8
 80060e4:	d109      	bne.n	80060fa <_printf_i+0x122>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	07db      	lsls	r3, r3, #31
 80060ea:	d506      	bpl.n	80060fa <_printf_i+0x122>
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	6922      	ldr	r2, [r4, #16]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	dc02      	bgt.n	80060fa <_printf_i+0x122>
 80060f4:	2330      	movs	r3, #48	; 0x30
 80060f6:	3e01      	subs	r6, #1
 80060f8:	7033      	strb	r3, [r6, #0]
 80060fa:	9b04      	ldr	r3, [sp, #16]
 80060fc:	1b9b      	subs	r3, r3, r6
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	9b07      	ldr	r3, [sp, #28]
 8006102:	0021      	movs	r1, r4
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	9805      	ldr	r0, [sp, #20]
 8006108:	9b06      	ldr	r3, [sp, #24]
 800610a:	aa09      	add	r2, sp, #36	; 0x24
 800610c:	f7ff fef4 	bl	8005ef8 <_printf_common>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d14c      	bne.n	80061ae <_printf_i+0x1d6>
 8006114:	2001      	movs	r0, #1
 8006116:	4240      	negs	r0, r0
 8006118:	b00b      	add	sp, #44	; 0x2c
 800611a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611c:	3145      	adds	r1, #69	; 0x45
 800611e:	700a      	strb	r2, [r1, #0]
 8006120:	4a34      	ldr	r2, [pc, #208]	; (80061f4 <_printf_i+0x21c>)
 8006122:	9203      	str	r2, [sp, #12]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	6821      	ldr	r1, [r4, #0]
 8006128:	ca20      	ldmia	r2!, {r5}
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	0608      	lsls	r0, r1, #24
 800612e:	d516      	bpl.n	800615e <_printf_i+0x186>
 8006130:	07cb      	lsls	r3, r1, #31
 8006132:	d502      	bpl.n	800613a <_printf_i+0x162>
 8006134:	2320      	movs	r3, #32
 8006136:	4319      	orrs	r1, r3
 8006138:	6021      	str	r1, [r4, #0]
 800613a:	2710      	movs	r7, #16
 800613c:	2d00      	cmp	r5, #0
 800613e:	d1b2      	bne.n	80060a6 <_printf_i+0xce>
 8006140:	2320      	movs	r3, #32
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	439a      	bics	r2, r3
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	e7ad      	b.n	80060a6 <_printf_i+0xce>
 800614a:	2220      	movs	r2, #32
 800614c:	6809      	ldr	r1, [r1, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	6022      	str	r2, [r4, #0]
 8006152:	0022      	movs	r2, r4
 8006154:	2178      	movs	r1, #120	; 0x78
 8006156:	3245      	adds	r2, #69	; 0x45
 8006158:	7011      	strb	r1, [r2, #0]
 800615a:	4a27      	ldr	r2, [pc, #156]	; (80061f8 <_printf_i+0x220>)
 800615c:	e7e1      	b.n	8006122 <_printf_i+0x14a>
 800615e:	0648      	lsls	r0, r1, #25
 8006160:	d5e6      	bpl.n	8006130 <_printf_i+0x158>
 8006162:	b2ad      	uxth	r5, r5
 8006164:	e7e4      	b.n	8006130 <_printf_i+0x158>
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	680d      	ldr	r5, [r1, #0]
 800616a:	1d10      	adds	r0, r2, #4
 800616c:	6949      	ldr	r1, [r1, #20]
 800616e:	6018      	str	r0, [r3, #0]
 8006170:	6813      	ldr	r3, [r2, #0]
 8006172:	062e      	lsls	r6, r5, #24
 8006174:	d501      	bpl.n	800617a <_printf_i+0x1a2>
 8006176:	6019      	str	r1, [r3, #0]
 8006178:	e002      	b.n	8006180 <_printf_i+0x1a8>
 800617a:	066d      	lsls	r5, r5, #25
 800617c:	d5fb      	bpl.n	8006176 <_printf_i+0x19e>
 800617e:	8019      	strh	r1, [r3, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	9e04      	ldr	r6, [sp, #16]
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	e7bb      	b.n	8006100 <_printf_i+0x128>
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	1d11      	adds	r1, r2, #4
 800618c:	6019      	str	r1, [r3, #0]
 800618e:	6816      	ldr	r6, [r2, #0]
 8006190:	2100      	movs	r1, #0
 8006192:	0030      	movs	r0, r6
 8006194:	6862      	ldr	r2, [r4, #4]
 8006196:	f000 fee5 	bl	8006f64 <memchr>
 800619a:	2800      	cmp	r0, #0
 800619c:	d001      	beq.n	80061a2 <_printf_i+0x1ca>
 800619e:	1b80      	subs	r0, r0, r6
 80061a0:	6060      	str	r0, [r4, #4]
 80061a2:	6863      	ldr	r3, [r4, #4]
 80061a4:	6123      	str	r3, [r4, #16]
 80061a6:	2300      	movs	r3, #0
 80061a8:	9a04      	ldr	r2, [sp, #16]
 80061aa:	7013      	strb	r3, [r2, #0]
 80061ac:	e7a8      	b.n	8006100 <_printf_i+0x128>
 80061ae:	6923      	ldr	r3, [r4, #16]
 80061b0:	0032      	movs	r2, r6
 80061b2:	9906      	ldr	r1, [sp, #24]
 80061b4:	9805      	ldr	r0, [sp, #20]
 80061b6:	9d07      	ldr	r5, [sp, #28]
 80061b8:	47a8      	blx	r5
 80061ba:	1c43      	adds	r3, r0, #1
 80061bc:	d0aa      	beq.n	8006114 <_printf_i+0x13c>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	079b      	lsls	r3, r3, #30
 80061c2:	d415      	bmi.n	80061f0 <_printf_i+0x218>
 80061c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c6:	68e0      	ldr	r0, [r4, #12]
 80061c8:	4298      	cmp	r0, r3
 80061ca:	daa5      	bge.n	8006118 <_printf_i+0x140>
 80061cc:	0018      	movs	r0, r3
 80061ce:	e7a3      	b.n	8006118 <_printf_i+0x140>
 80061d0:	0022      	movs	r2, r4
 80061d2:	2301      	movs	r3, #1
 80061d4:	9906      	ldr	r1, [sp, #24]
 80061d6:	9805      	ldr	r0, [sp, #20]
 80061d8:	9e07      	ldr	r6, [sp, #28]
 80061da:	3219      	adds	r2, #25
 80061dc:	47b0      	blx	r6
 80061de:	1c43      	adds	r3, r0, #1
 80061e0:	d098      	beq.n	8006114 <_printf_i+0x13c>
 80061e2:	3501      	adds	r5, #1
 80061e4:	68e3      	ldr	r3, [r4, #12]
 80061e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061e8:	1a9b      	subs	r3, r3, r2
 80061ea:	42ab      	cmp	r3, r5
 80061ec:	dcf0      	bgt.n	80061d0 <_printf_i+0x1f8>
 80061ee:	e7e9      	b.n	80061c4 <_printf_i+0x1ec>
 80061f0:	2500      	movs	r5, #0
 80061f2:	e7f7      	b.n	80061e4 <_printf_i+0x20c>
 80061f4:	080085ae 	.word	0x080085ae
 80061f8:	080085bf 	.word	0x080085bf

080061fc <quorem>:
 80061fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061fe:	0006      	movs	r6, r0
 8006200:	690b      	ldr	r3, [r1, #16]
 8006202:	6932      	ldr	r2, [r6, #16]
 8006204:	b087      	sub	sp, #28
 8006206:	2000      	movs	r0, #0
 8006208:	9103      	str	r1, [sp, #12]
 800620a:	429a      	cmp	r2, r3
 800620c:	db65      	blt.n	80062da <quorem+0xde>
 800620e:	3b01      	subs	r3, #1
 8006210:	009c      	lsls	r4, r3, #2
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	000b      	movs	r3, r1
 8006216:	3314      	adds	r3, #20
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	191b      	adds	r3, r3, r4
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	0033      	movs	r3, r6
 8006220:	3314      	adds	r3, #20
 8006222:	9302      	str	r3, [sp, #8]
 8006224:	191c      	adds	r4, r3, r4
 8006226:	9b04      	ldr	r3, [sp, #16]
 8006228:	6827      	ldr	r7, [r4, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	0038      	movs	r0, r7
 800622e:	1c5d      	adds	r5, r3, #1
 8006230:	0029      	movs	r1, r5
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	f7f9 ff7e 	bl	8000134 <__udivsi3>
 8006238:	9001      	str	r0, [sp, #4]
 800623a:	42af      	cmp	r7, r5
 800623c:	d324      	bcc.n	8006288 <quorem+0x8c>
 800623e:	2500      	movs	r5, #0
 8006240:	46ac      	mov	ip, r5
 8006242:	9802      	ldr	r0, [sp, #8]
 8006244:	9f05      	ldr	r7, [sp, #20]
 8006246:	cf08      	ldmia	r7!, {r3}
 8006248:	9a01      	ldr	r2, [sp, #4]
 800624a:	b299      	uxth	r1, r3
 800624c:	4351      	muls	r1, r2
 800624e:	0c1b      	lsrs	r3, r3, #16
 8006250:	4353      	muls	r3, r2
 8006252:	1949      	adds	r1, r1, r5
 8006254:	0c0a      	lsrs	r2, r1, #16
 8006256:	189b      	adds	r3, r3, r2
 8006258:	6802      	ldr	r2, [r0, #0]
 800625a:	b289      	uxth	r1, r1
 800625c:	b292      	uxth	r2, r2
 800625e:	4462      	add	r2, ip
 8006260:	1a52      	subs	r2, r2, r1
 8006262:	6801      	ldr	r1, [r0, #0]
 8006264:	0c1d      	lsrs	r5, r3, #16
 8006266:	0c09      	lsrs	r1, r1, #16
 8006268:	b29b      	uxth	r3, r3
 800626a:	1acb      	subs	r3, r1, r3
 800626c:	1411      	asrs	r1, r2, #16
 800626e:	185b      	adds	r3, r3, r1
 8006270:	1419      	asrs	r1, r3, #16
 8006272:	b292      	uxth	r2, r2
 8006274:	041b      	lsls	r3, r3, #16
 8006276:	431a      	orrs	r2, r3
 8006278:	9b04      	ldr	r3, [sp, #16]
 800627a:	468c      	mov	ip, r1
 800627c:	c004      	stmia	r0!, {r2}
 800627e:	42bb      	cmp	r3, r7
 8006280:	d2e1      	bcs.n	8006246 <quorem+0x4a>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d030      	beq.n	80062ea <quorem+0xee>
 8006288:	0030      	movs	r0, r6
 800628a:	9903      	ldr	r1, [sp, #12]
 800628c:	f001 f902 	bl	8007494 <__mcmp>
 8006290:	2800      	cmp	r0, #0
 8006292:	db21      	blt.n	80062d8 <quorem+0xdc>
 8006294:	0030      	movs	r0, r6
 8006296:	2400      	movs	r4, #0
 8006298:	9b01      	ldr	r3, [sp, #4]
 800629a:	9903      	ldr	r1, [sp, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	3014      	adds	r0, #20
 80062a2:	3114      	adds	r1, #20
 80062a4:	6803      	ldr	r3, [r0, #0]
 80062a6:	c920      	ldmia	r1!, {r5}
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	1914      	adds	r4, r2, r4
 80062ac:	b2aa      	uxth	r2, r5
 80062ae:	1aa2      	subs	r2, r4, r2
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	0c2d      	lsrs	r5, r5, #16
 80062b4:	1414      	asrs	r4, r2, #16
 80062b6:	1b5b      	subs	r3, r3, r5
 80062b8:	191b      	adds	r3, r3, r4
 80062ba:	141c      	asrs	r4, r3, #16
 80062bc:	b292      	uxth	r2, r2
 80062be:	041b      	lsls	r3, r3, #16
 80062c0:	4313      	orrs	r3, r2
 80062c2:	c008      	stmia	r0!, {r3}
 80062c4:	9b04      	ldr	r3, [sp, #16]
 80062c6:	428b      	cmp	r3, r1
 80062c8:	d2ec      	bcs.n	80062a4 <quorem+0xa8>
 80062ca:	9b00      	ldr	r3, [sp, #0]
 80062cc:	9a02      	ldr	r2, [sp, #8]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	18d3      	adds	r3, r2, r3
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	2a00      	cmp	r2, #0
 80062d6:	d015      	beq.n	8006304 <quorem+0x108>
 80062d8:	9801      	ldr	r0, [sp, #4]
 80062da:	b007      	add	sp, #28
 80062dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d106      	bne.n	80062f2 <quorem+0xf6>
 80062e4:	9b00      	ldr	r3, [sp, #0]
 80062e6:	3b01      	subs	r3, #1
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	9b02      	ldr	r3, [sp, #8]
 80062ec:	3c04      	subs	r4, #4
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	d3f5      	bcc.n	80062de <quorem+0xe2>
 80062f2:	9b00      	ldr	r3, [sp, #0]
 80062f4:	6133      	str	r3, [r6, #16]
 80062f6:	e7c7      	b.n	8006288 <quorem+0x8c>
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	d106      	bne.n	800630c <quorem+0x110>
 80062fe:	9a00      	ldr	r2, [sp, #0]
 8006300:	3a01      	subs	r2, #1
 8006302:	9200      	str	r2, [sp, #0]
 8006304:	9a02      	ldr	r2, [sp, #8]
 8006306:	3b04      	subs	r3, #4
 8006308:	429a      	cmp	r2, r3
 800630a:	d3f5      	bcc.n	80062f8 <quorem+0xfc>
 800630c:	9b00      	ldr	r3, [sp, #0]
 800630e:	6133      	str	r3, [r6, #16]
 8006310:	e7e2      	b.n	80062d8 <quorem+0xdc>
	...

08006314 <_dtoa_r>:
 8006314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006316:	b09d      	sub	sp, #116	; 0x74
 8006318:	9202      	str	r2, [sp, #8]
 800631a:	9303      	str	r3, [sp, #12]
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	9c03      	ldr	r4, [sp, #12]
 8006320:	9308      	str	r3, [sp, #32]
 8006322:	9409      	str	r4, [sp, #36]	; 0x24
 8006324:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006326:	0007      	movs	r7, r0
 8006328:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800632a:	2c00      	cmp	r4, #0
 800632c:	d10e      	bne.n	800634c <_dtoa_r+0x38>
 800632e:	2010      	movs	r0, #16
 8006330:	f000 fe0e 	bl	8006f50 <malloc>
 8006334:	1e02      	subs	r2, r0, #0
 8006336:	6278      	str	r0, [r7, #36]	; 0x24
 8006338:	d104      	bne.n	8006344 <_dtoa_r+0x30>
 800633a:	21ea      	movs	r1, #234	; 0xea
 800633c:	4bc7      	ldr	r3, [pc, #796]	; (800665c <_dtoa_r+0x348>)
 800633e:	48c8      	ldr	r0, [pc, #800]	; (8006660 <_dtoa_r+0x34c>)
 8006340:	f001 fae0 	bl	8007904 <__assert_func>
 8006344:	6044      	str	r4, [r0, #4]
 8006346:	6084      	str	r4, [r0, #8]
 8006348:	6004      	str	r4, [r0, #0]
 800634a:	60c4      	str	r4, [r0, #12]
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	2900      	cmp	r1, #0
 8006352:	d00a      	beq.n	800636a <_dtoa_r+0x56>
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	2301      	movs	r3, #1
 8006358:	4093      	lsls	r3, r2
 800635a:	604a      	str	r2, [r1, #4]
 800635c:	608b      	str	r3, [r1, #8]
 800635e:	0038      	movs	r0, r7
 8006360:	f000 fe58 	bl	8007014 <_Bfree>
 8006364:	2200      	movs	r2, #0
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	da20      	bge.n	80063b2 <_dtoa_r+0x9e>
 8006370:	2301      	movs	r3, #1
 8006372:	602b      	str	r3, [r5, #0]
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	085b      	lsrs	r3, r3, #1
 800637a:	9309      	str	r3, [sp, #36]	; 0x24
 800637c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800637e:	4bb9      	ldr	r3, [pc, #740]	; (8006664 <_dtoa_r+0x350>)
 8006380:	4ab8      	ldr	r2, [pc, #736]	; (8006664 <_dtoa_r+0x350>)
 8006382:	402b      	ands	r3, r5
 8006384:	4293      	cmp	r3, r2
 8006386:	d117      	bne.n	80063b8 <_dtoa_r+0xa4>
 8006388:	4bb7      	ldr	r3, [pc, #732]	; (8006668 <_dtoa_r+0x354>)
 800638a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800638c:	0328      	lsls	r0, r5, #12
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	0b00      	lsrs	r0, r0, #12
 8006394:	4318      	orrs	r0, r3
 8006396:	d101      	bne.n	800639c <_dtoa_r+0x88>
 8006398:	f000 fdbf 	bl	8006f1a <_dtoa_r+0xc06>
 800639c:	48b3      	ldr	r0, [pc, #716]	; (800666c <_dtoa_r+0x358>)
 800639e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063a0:	9006      	str	r0, [sp, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <_dtoa_r+0x98>
 80063a6:	4bb2      	ldr	r3, [pc, #712]	; (8006670 <_dtoa_r+0x35c>)
 80063a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	9806      	ldr	r0, [sp, #24]
 80063ae:	b01d      	add	sp, #116	; 0x74
 80063b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b2:	2300      	movs	r3, #0
 80063b4:	602b      	str	r3, [r5, #0]
 80063b6:	e7e1      	b.n	800637c <_dtoa_r+0x68>
 80063b8:	9b08      	ldr	r3, [sp, #32]
 80063ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80063bc:	9312      	str	r3, [sp, #72]	; 0x48
 80063be:	9413      	str	r4, [sp, #76]	; 0x4c
 80063c0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80063c2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80063c4:	2200      	movs	r2, #0
 80063c6:	2300      	movs	r3, #0
 80063c8:	f7fa f83a 	bl	8000440 <__aeabi_dcmpeq>
 80063cc:	1e04      	subs	r4, r0, #0
 80063ce:	d009      	beq.n	80063e4 <_dtoa_r+0xd0>
 80063d0:	2301      	movs	r3, #1
 80063d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	4ba7      	ldr	r3, [pc, #668]	; (8006674 <_dtoa_r+0x360>)
 80063d8:	9306      	str	r3, [sp, #24]
 80063da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0e5      	beq.n	80063ac <_dtoa_r+0x98>
 80063e0:	4ba5      	ldr	r3, [pc, #660]	; (8006678 <_dtoa_r+0x364>)
 80063e2:	e7e1      	b.n	80063a8 <_dtoa_r+0x94>
 80063e4:	ab1a      	add	r3, sp, #104	; 0x68
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	ab1b      	add	r3, sp, #108	; 0x6c
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	0038      	movs	r0, r7
 80063ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80063f2:	f001 f903 	bl	80075fc <__d2b>
 80063f6:	006e      	lsls	r6, r5, #1
 80063f8:	9005      	str	r0, [sp, #20]
 80063fa:	0d76      	lsrs	r6, r6, #21
 80063fc:	d100      	bne.n	8006400 <_dtoa_r+0xec>
 80063fe:	e07c      	b.n	80064fa <_dtoa_r+0x1e6>
 8006400:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006402:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006406:	4a9d      	ldr	r2, [pc, #628]	; (800667c <_dtoa_r+0x368>)
 8006408:	031b      	lsls	r3, r3, #12
 800640a:	0b1b      	lsrs	r3, r3, #12
 800640c:	431a      	orrs	r2, r3
 800640e:	0011      	movs	r1, r2
 8006410:	4b9b      	ldr	r3, [pc, #620]	; (8006680 <_dtoa_r+0x36c>)
 8006412:	9418      	str	r4, [sp, #96]	; 0x60
 8006414:	18f6      	adds	r6, r6, r3
 8006416:	2200      	movs	r2, #0
 8006418:	4b9a      	ldr	r3, [pc, #616]	; (8006684 <_dtoa_r+0x370>)
 800641a:	f7fb f9e9 	bl	80017f0 <__aeabi_dsub>
 800641e:	4a9a      	ldr	r2, [pc, #616]	; (8006688 <_dtoa_r+0x374>)
 8006420:	4b9a      	ldr	r3, [pc, #616]	; (800668c <_dtoa_r+0x378>)
 8006422:	f7fa ff79 	bl	8001318 <__aeabi_dmul>
 8006426:	4a9a      	ldr	r2, [pc, #616]	; (8006690 <_dtoa_r+0x37c>)
 8006428:	4b9a      	ldr	r3, [pc, #616]	; (8006694 <_dtoa_r+0x380>)
 800642a:	f7fa f837 	bl	800049c <__aeabi_dadd>
 800642e:	0004      	movs	r4, r0
 8006430:	0030      	movs	r0, r6
 8006432:	000d      	movs	r5, r1
 8006434:	f7fb fdc2 	bl	8001fbc <__aeabi_i2d>
 8006438:	4a97      	ldr	r2, [pc, #604]	; (8006698 <_dtoa_r+0x384>)
 800643a:	4b98      	ldr	r3, [pc, #608]	; (800669c <_dtoa_r+0x388>)
 800643c:	f7fa ff6c 	bl	8001318 <__aeabi_dmul>
 8006440:	0002      	movs	r2, r0
 8006442:	000b      	movs	r3, r1
 8006444:	0020      	movs	r0, r4
 8006446:	0029      	movs	r1, r5
 8006448:	f7fa f828 	bl	800049c <__aeabi_dadd>
 800644c:	0004      	movs	r4, r0
 800644e:	000d      	movs	r5, r1
 8006450:	f7fb fd7e 	bl	8001f50 <__aeabi_d2iz>
 8006454:	2200      	movs	r2, #0
 8006456:	9002      	str	r0, [sp, #8]
 8006458:	2300      	movs	r3, #0
 800645a:	0020      	movs	r0, r4
 800645c:	0029      	movs	r1, r5
 800645e:	f7f9 fff5 	bl	800044c <__aeabi_dcmplt>
 8006462:	2800      	cmp	r0, #0
 8006464:	d00b      	beq.n	800647e <_dtoa_r+0x16a>
 8006466:	9802      	ldr	r0, [sp, #8]
 8006468:	f7fb fda8 	bl	8001fbc <__aeabi_i2d>
 800646c:	002b      	movs	r3, r5
 800646e:	0022      	movs	r2, r4
 8006470:	f7f9 ffe6 	bl	8000440 <__aeabi_dcmpeq>
 8006474:	4243      	negs	r3, r0
 8006476:	4158      	adcs	r0, r3
 8006478:	9b02      	ldr	r3, [sp, #8]
 800647a:	1a1b      	subs	r3, r3, r0
 800647c:	9302      	str	r3, [sp, #8]
 800647e:	2301      	movs	r3, #1
 8006480:	9316      	str	r3, [sp, #88]	; 0x58
 8006482:	9b02      	ldr	r3, [sp, #8]
 8006484:	2b16      	cmp	r3, #22
 8006486:	d80f      	bhi.n	80064a8 <_dtoa_r+0x194>
 8006488:	9812      	ldr	r0, [sp, #72]	; 0x48
 800648a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800648c:	00da      	lsls	r2, r3, #3
 800648e:	4b84      	ldr	r3, [pc, #528]	; (80066a0 <_dtoa_r+0x38c>)
 8006490:	189b      	adds	r3, r3, r2
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f7f9 ffd9 	bl	800044c <__aeabi_dcmplt>
 800649a:	2800      	cmp	r0, #0
 800649c:	d049      	beq.n	8006532 <_dtoa_r+0x21e>
 800649e:	9b02      	ldr	r3, [sp, #8]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	9302      	str	r3, [sp, #8]
 80064a4:	2300      	movs	r3, #0
 80064a6:	9316      	str	r3, [sp, #88]	; 0x58
 80064a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80064aa:	1b9e      	subs	r6, r3, r6
 80064ac:	2300      	movs	r3, #0
 80064ae:	930a      	str	r3, [sp, #40]	; 0x28
 80064b0:	0033      	movs	r3, r6
 80064b2:	3b01      	subs	r3, #1
 80064b4:	930d      	str	r3, [sp, #52]	; 0x34
 80064b6:	d504      	bpl.n	80064c2 <_dtoa_r+0x1ae>
 80064b8:	2301      	movs	r3, #1
 80064ba:	1b9b      	subs	r3, r3, r6
 80064bc:	930a      	str	r3, [sp, #40]	; 0x28
 80064be:	2300      	movs	r3, #0
 80064c0:	930d      	str	r3, [sp, #52]	; 0x34
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	db36      	blt.n	8006536 <_dtoa_r+0x222>
 80064c8:	9a02      	ldr	r2, [sp, #8]
 80064ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064cc:	4694      	mov	ip, r2
 80064ce:	4463      	add	r3, ip
 80064d0:	930d      	str	r3, [sp, #52]	; 0x34
 80064d2:	2300      	movs	r3, #0
 80064d4:	9215      	str	r2, [sp, #84]	; 0x54
 80064d6:	930e      	str	r3, [sp, #56]	; 0x38
 80064d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064da:	2401      	movs	r4, #1
 80064dc:	2b09      	cmp	r3, #9
 80064de:	d864      	bhi.n	80065aa <_dtoa_r+0x296>
 80064e0:	2b05      	cmp	r3, #5
 80064e2:	dd02      	ble.n	80064ea <_dtoa_r+0x1d6>
 80064e4:	2400      	movs	r4, #0
 80064e6:	3b04      	subs	r3, #4
 80064e8:	9322      	str	r3, [sp, #136]	; 0x88
 80064ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ec:	1e98      	subs	r0, r3, #2
 80064ee:	2803      	cmp	r0, #3
 80064f0:	d864      	bhi.n	80065bc <_dtoa_r+0x2a8>
 80064f2:	f7f9 fe0b 	bl	800010c <__gnu_thumb1_case_uqi>
 80064f6:	3829      	.short	0x3829
 80064f8:	5836      	.short	0x5836
 80064fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80064fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80064fe:	189e      	adds	r6, r3, r2
 8006500:	4b68      	ldr	r3, [pc, #416]	; (80066a4 <_dtoa_r+0x390>)
 8006502:	18f2      	adds	r2, r6, r3
 8006504:	2a20      	cmp	r2, #32
 8006506:	dd0f      	ble.n	8006528 <_dtoa_r+0x214>
 8006508:	2340      	movs	r3, #64	; 0x40
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	409d      	lsls	r5, r3
 800650e:	4b66      	ldr	r3, [pc, #408]	; (80066a8 <_dtoa_r+0x394>)
 8006510:	9802      	ldr	r0, [sp, #8]
 8006512:	18f3      	adds	r3, r6, r3
 8006514:	40d8      	lsrs	r0, r3
 8006516:	4328      	orrs	r0, r5
 8006518:	f7fb fd80 	bl	800201c <__aeabi_ui2d>
 800651c:	2301      	movs	r3, #1
 800651e:	4c63      	ldr	r4, [pc, #396]	; (80066ac <_dtoa_r+0x398>)
 8006520:	3e01      	subs	r6, #1
 8006522:	1909      	adds	r1, r1, r4
 8006524:	9318      	str	r3, [sp, #96]	; 0x60
 8006526:	e776      	b.n	8006416 <_dtoa_r+0x102>
 8006528:	2320      	movs	r3, #32
 800652a:	9802      	ldr	r0, [sp, #8]
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	4098      	lsls	r0, r3
 8006530:	e7f2      	b.n	8006518 <_dtoa_r+0x204>
 8006532:	9016      	str	r0, [sp, #88]	; 0x58
 8006534:	e7b8      	b.n	80064a8 <_dtoa_r+0x194>
 8006536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006538:	9a02      	ldr	r2, [sp, #8]
 800653a:	1a9b      	subs	r3, r3, r2
 800653c:	930a      	str	r3, [sp, #40]	; 0x28
 800653e:	4253      	negs	r3, r2
 8006540:	930e      	str	r3, [sp, #56]	; 0x38
 8006542:	2300      	movs	r3, #0
 8006544:	9315      	str	r3, [sp, #84]	; 0x54
 8006546:	e7c7      	b.n	80064d8 <_dtoa_r+0x1c4>
 8006548:	2300      	movs	r3, #0
 800654a:	930f      	str	r3, [sp, #60]	; 0x3c
 800654c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800654e:	930c      	str	r3, [sp, #48]	; 0x30
 8006550:	9307      	str	r3, [sp, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	dc13      	bgt.n	800657e <_dtoa_r+0x26a>
 8006556:	2301      	movs	r3, #1
 8006558:	001a      	movs	r2, r3
 800655a:	930c      	str	r3, [sp, #48]	; 0x30
 800655c:	9307      	str	r3, [sp, #28]
 800655e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006560:	e00d      	b.n	800657e <_dtoa_r+0x26a>
 8006562:	2301      	movs	r3, #1
 8006564:	e7f1      	b.n	800654a <_dtoa_r+0x236>
 8006566:	2300      	movs	r3, #0
 8006568:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800656a:	930f      	str	r3, [sp, #60]	; 0x3c
 800656c:	4694      	mov	ip, r2
 800656e:	9b02      	ldr	r3, [sp, #8]
 8006570:	4463      	add	r3, ip
 8006572:	930c      	str	r3, [sp, #48]	; 0x30
 8006574:	3301      	adds	r3, #1
 8006576:	9307      	str	r3, [sp, #28]
 8006578:	2b00      	cmp	r3, #0
 800657a:	dc00      	bgt.n	800657e <_dtoa_r+0x26a>
 800657c:	2301      	movs	r3, #1
 800657e:	2200      	movs	r2, #0
 8006580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006582:	6042      	str	r2, [r0, #4]
 8006584:	3204      	adds	r2, #4
 8006586:	0015      	movs	r5, r2
 8006588:	3514      	adds	r5, #20
 800658a:	6841      	ldr	r1, [r0, #4]
 800658c:	429d      	cmp	r5, r3
 800658e:	d919      	bls.n	80065c4 <_dtoa_r+0x2b0>
 8006590:	0038      	movs	r0, r7
 8006592:	f000 fcfb 	bl	8006f8c <_Balloc>
 8006596:	9006      	str	r0, [sp, #24]
 8006598:	2800      	cmp	r0, #0
 800659a:	d117      	bne.n	80065cc <_dtoa_r+0x2b8>
 800659c:	21d5      	movs	r1, #213	; 0xd5
 800659e:	0002      	movs	r2, r0
 80065a0:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <_dtoa_r+0x39c>)
 80065a2:	0049      	lsls	r1, r1, #1
 80065a4:	e6cb      	b.n	800633e <_dtoa_r+0x2a>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e7de      	b.n	8006568 <_dtoa_r+0x254>
 80065aa:	2300      	movs	r3, #0
 80065ac:	940f      	str	r4, [sp, #60]	; 0x3c
 80065ae:	9322      	str	r3, [sp, #136]	; 0x88
 80065b0:	3b01      	subs	r3, #1
 80065b2:	930c      	str	r3, [sp, #48]	; 0x30
 80065b4:	9307      	str	r3, [sp, #28]
 80065b6:	2200      	movs	r2, #0
 80065b8:	3313      	adds	r3, #19
 80065ba:	e7d0      	b.n	800655e <_dtoa_r+0x24a>
 80065bc:	2301      	movs	r3, #1
 80065be:	930f      	str	r3, [sp, #60]	; 0x3c
 80065c0:	3b02      	subs	r3, #2
 80065c2:	e7f6      	b.n	80065b2 <_dtoa_r+0x29e>
 80065c4:	3101      	adds	r1, #1
 80065c6:	6041      	str	r1, [r0, #4]
 80065c8:	0052      	lsls	r2, r2, #1
 80065ca:	e7dc      	b.n	8006586 <_dtoa_r+0x272>
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	9a06      	ldr	r2, [sp, #24]
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	9b07      	ldr	r3, [sp, #28]
 80065d4:	2b0e      	cmp	r3, #14
 80065d6:	d900      	bls.n	80065da <_dtoa_r+0x2c6>
 80065d8:	e0eb      	b.n	80067b2 <_dtoa_r+0x49e>
 80065da:	2c00      	cmp	r4, #0
 80065dc:	d100      	bne.n	80065e0 <_dtoa_r+0x2cc>
 80065de:	e0e8      	b.n	80067b2 <_dtoa_r+0x49e>
 80065e0:	9b02      	ldr	r3, [sp, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd68      	ble.n	80066b8 <_dtoa_r+0x3a4>
 80065e6:	001a      	movs	r2, r3
 80065e8:	210f      	movs	r1, #15
 80065ea:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <_dtoa_r+0x38c>)
 80065ec:	400a      	ands	r2, r1
 80065ee:	00d2      	lsls	r2, r2, #3
 80065f0:	189b      	adds	r3, r3, r2
 80065f2:	681d      	ldr	r5, [r3, #0]
 80065f4:	685e      	ldr	r6, [r3, #4]
 80065f6:	9b02      	ldr	r3, [sp, #8]
 80065f8:	111c      	asrs	r4, r3, #4
 80065fa:	2302      	movs	r3, #2
 80065fc:	9310      	str	r3, [sp, #64]	; 0x40
 80065fe:	9b02      	ldr	r3, [sp, #8]
 8006600:	05db      	lsls	r3, r3, #23
 8006602:	d50b      	bpl.n	800661c <_dtoa_r+0x308>
 8006604:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <_dtoa_r+0x3a0>)
 8006606:	400c      	ands	r4, r1
 8006608:	6a1a      	ldr	r2, [r3, #32]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800660e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006610:	f7fa fa80 	bl	8000b14 <__aeabi_ddiv>
 8006614:	2303      	movs	r3, #3
 8006616:	9008      	str	r0, [sp, #32]
 8006618:	9109      	str	r1, [sp, #36]	; 0x24
 800661a:	9310      	str	r3, [sp, #64]	; 0x40
 800661c:	4b25      	ldr	r3, [pc, #148]	; (80066b4 <_dtoa_r+0x3a0>)
 800661e:	9314      	str	r3, [sp, #80]	; 0x50
 8006620:	2c00      	cmp	r4, #0
 8006622:	d108      	bne.n	8006636 <_dtoa_r+0x322>
 8006624:	9808      	ldr	r0, [sp, #32]
 8006626:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006628:	002a      	movs	r2, r5
 800662a:	0033      	movs	r3, r6
 800662c:	f7fa fa72 	bl	8000b14 <__aeabi_ddiv>
 8006630:	9008      	str	r0, [sp, #32]
 8006632:	9109      	str	r1, [sp, #36]	; 0x24
 8006634:	e05c      	b.n	80066f0 <_dtoa_r+0x3dc>
 8006636:	2301      	movs	r3, #1
 8006638:	421c      	tst	r4, r3
 800663a:	d00b      	beq.n	8006654 <_dtoa_r+0x340>
 800663c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800663e:	0028      	movs	r0, r5
 8006640:	3301      	adds	r3, #1
 8006642:	9310      	str	r3, [sp, #64]	; 0x40
 8006644:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006646:	0031      	movs	r1, r6
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f7fa fe64 	bl	8001318 <__aeabi_dmul>
 8006650:	0005      	movs	r5, r0
 8006652:	000e      	movs	r6, r1
 8006654:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006656:	1064      	asrs	r4, r4, #1
 8006658:	3308      	adds	r3, #8
 800665a:	e7e0      	b.n	800661e <_dtoa_r+0x30a>
 800665c:	080085dd 	.word	0x080085dd
 8006660:	080085f4 	.word	0x080085f4
 8006664:	7ff00000 	.word	0x7ff00000
 8006668:	0000270f 	.word	0x0000270f
 800666c:	080085d9 	.word	0x080085d9
 8006670:	080085dc 	.word	0x080085dc
 8006674:	080085ac 	.word	0x080085ac
 8006678:	080085ad 	.word	0x080085ad
 800667c:	3ff00000 	.word	0x3ff00000
 8006680:	fffffc01 	.word	0xfffffc01
 8006684:	3ff80000 	.word	0x3ff80000
 8006688:	636f4361 	.word	0x636f4361
 800668c:	3fd287a7 	.word	0x3fd287a7
 8006690:	8b60c8b3 	.word	0x8b60c8b3
 8006694:	3fc68a28 	.word	0x3fc68a28
 8006698:	509f79fb 	.word	0x509f79fb
 800669c:	3fd34413 	.word	0x3fd34413
 80066a0:	080086e8 	.word	0x080086e8
 80066a4:	00000432 	.word	0x00000432
 80066a8:	00000412 	.word	0x00000412
 80066ac:	fe100000 	.word	0xfe100000
 80066b0:	0800864f 	.word	0x0800864f
 80066b4:	080086c0 	.word	0x080086c0
 80066b8:	2302      	movs	r3, #2
 80066ba:	9310      	str	r3, [sp, #64]	; 0x40
 80066bc:	9b02      	ldr	r3, [sp, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d016      	beq.n	80066f0 <_dtoa_r+0x3dc>
 80066c2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80066c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80066c6:	425c      	negs	r4, r3
 80066c8:	230f      	movs	r3, #15
 80066ca:	4ab6      	ldr	r2, [pc, #728]	; (80069a4 <_dtoa_r+0x690>)
 80066cc:	4023      	ands	r3, r4
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	18d3      	adds	r3, r2, r3
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f7fa fe1f 	bl	8001318 <__aeabi_dmul>
 80066da:	2601      	movs	r6, #1
 80066dc:	2300      	movs	r3, #0
 80066de:	9008      	str	r0, [sp, #32]
 80066e0:	9109      	str	r1, [sp, #36]	; 0x24
 80066e2:	4db1      	ldr	r5, [pc, #708]	; (80069a8 <_dtoa_r+0x694>)
 80066e4:	1124      	asrs	r4, r4, #4
 80066e6:	2c00      	cmp	r4, #0
 80066e8:	d000      	beq.n	80066ec <_dtoa_r+0x3d8>
 80066ea:	e094      	b.n	8006816 <_dtoa_r+0x502>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d19f      	bne.n	8006630 <_dtoa_r+0x31c>
 80066f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d100      	bne.n	80066f8 <_dtoa_r+0x3e4>
 80066f6:	e09b      	b.n	8006830 <_dtoa_r+0x51c>
 80066f8:	9c08      	ldr	r4, [sp, #32]
 80066fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066fc:	2200      	movs	r2, #0
 80066fe:	0020      	movs	r0, r4
 8006700:	0029      	movs	r1, r5
 8006702:	4baa      	ldr	r3, [pc, #680]	; (80069ac <_dtoa_r+0x698>)
 8006704:	f7f9 fea2 	bl	800044c <__aeabi_dcmplt>
 8006708:	2800      	cmp	r0, #0
 800670a:	d100      	bne.n	800670e <_dtoa_r+0x3fa>
 800670c:	e090      	b.n	8006830 <_dtoa_r+0x51c>
 800670e:	9b07      	ldr	r3, [sp, #28]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d100      	bne.n	8006716 <_dtoa_r+0x402>
 8006714:	e08c      	b.n	8006830 <_dtoa_r+0x51c>
 8006716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006718:	2b00      	cmp	r3, #0
 800671a:	dd46      	ble.n	80067aa <_dtoa_r+0x496>
 800671c:	9b02      	ldr	r3, [sp, #8]
 800671e:	2200      	movs	r2, #0
 8006720:	0020      	movs	r0, r4
 8006722:	0029      	movs	r1, r5
 8006724:	1e5e      	subs	r6, r3, #1
 8006726:	4ba2      	ldr	r3, [pc, #648]	; (80069b0 <_dtoa_r+0x69c>)
 8006728:	f7fa fdf6 	bl	8001318 <__aeabi_dmul>
 800672c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800672e:	9008      	str	r0, [sp, #32]
 8006730:	9109      	str	r1, [sp, #36]	; 0x24
 8006732:	3301      	adds	r3, #1
 8006734:	9310      	str	r3, [sp, #64]	; 0x40
 8006736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006738:	9810      	ldr	r0, [sp, #64]	; 0x40
 800673a:	9c08      	ldr	r4, [sp, #32]
 800673c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800673e:	9314      	str	r3, [sp, #80]	; 0x50
 8006740:	f7fb fc3c 	bl	8001fbc <__aeabi_i2d>
 8006744:	0022      	movs	r2, r4
 8006746:	002b      	movs	r3, r5
 8006748:	f7fa fde6 	bl	8001318 <__aeabi_dmul>
 800674c:	2200      	movs	r2, #0
 800674e:	4b99      	ldr	r3, [pc, #612]	; (80069b4 <_dtoa_r+0x6a0>)
 8006750:	f7f9 fea4 	bl	800049c <__aeabi_dadd>
 8006754:	9010      	str	r0, [sp, #64]	; 0x40
 8006756:	9111      	str	r1, [sp, #68]	; 0x44
 8006758:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800675a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800675c:	9208      	str	r2, [sp, #32]
 800675e:	9309      	str	r3, [sp, #36]	; 0x24
 8006760:	4a95      	ldr	r2, [pc, #596]	; (80069b8 <_dtoa_r+0x6a4>)
 8006762:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006764:	4694      	mov	ip, r2
 8006766:	4463      	add	r3, ip
 8006768:	9317      	str	r3, [sp, #92]	; 0x5c
 800676a:	9309      	str	r3, [sp, #36]	; 0x24
 800676c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800676e:	2b00      	cmp	r3, #0
 8006770:	d161      	bne.n	8006836 <_dtoa_r+0x522>
 8006772:	2200      	movs	r2, #0
 8006774:	0020      	movs	r0, r4
 8006776:	0029      	movs	r1, r5
 8006778:	4b90      	ldr	r3, [pc, #576]	; (80069bc <_dtoa_r+0x6a8>)
 800677a:	f7fb f839 	bl	80017f0 <__aeabi_dsub>
 800677e:	9a08      	ldr	r2, [sp, #32]
 8006780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006782:	0004      	movs	r4, r0
 8006784:	000d      	movs	r5, r1
 8006786:	f7f9 fe75 	bl	8000474 <__aeabi_dcmpgt>
 800678a:	2800      	cmp	r0, #0
 800678c:	d000      	beq.n	8006790 <_dtoa_r+0x47c>
 800678e:	e2af      	b.n	8006cf0 <_dtoa_r+0x9dc>
 8006790:	488b      	ldr	r0, [pc, #556]	; (80069c0 <_dtoa_r+0x6ac>)
 8006792:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006794:	4684      	mov	ip, r0
 8006796:	4461      	add	r1, ip
 8006798:	000b      	movs	r3, r1
 800679a:	0020      	movs	r0, r4
 800679c:	0029      	movs	r1, r5
 800679e:	9a08      	ldr	r2, [sp, #32]
 80067a0:	f7f9 fe54 	bl	800044c <__aeabi_dcmplt>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d000      	beq.n	80067aa <_dtoa_r+0x496>
 80067a8:	e29f      	b.n	8006cea <_dtoa_r+0x9d6>
 80067aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067ac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80067ae:	9308      	str	r3, [sp, #32]
 80067b0:	9409      	str	r4, [sp, #36]	; 0x24
 80067b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	da00      	bge.n	80067ba <_dtoa_r+0x4a6>
 80067b8:	e172      	b.n	8006aa0 <_dtoa_r+0x78c>
 80067ba:	9a02      	ldr	r2, [sp, #8]
 80067bc:	2a0e      	cmp	r2, #14
 80067be:	dd00      	ble.n	80067c2 <_dtoa_r+0x4ae>
 80067c0:	e16e      	b.n	8006aa0 <_dtoa_r+0x78c>
 80067c2:	4b78      	ldr	r3, [pc, #480]	; (80069a4 <_dtoa_r+0x690>)
 80067c4:	00d2      	lsls	r2, r2, #3
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	685c      	ldr	r4, [r3, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	930a      	str	r3, [sp, #40]	; 0x28
 80067ce:	940b      	str	r4, [sp, #44]	; 0x2c
 80067d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	db00      	blt.n	80067d8 <_dtoa_r+0x4c4>
 80067d6:	e0f7      	b.n	80069c8 <_dtoa_r+0x6b4>
 80067d8:	9b07      	ldr	r3, [sp, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dd00      	ble.n	80067e0 <_dtoa_r+0x4cc>
 80067de:	e0f3      	b.n	80069c8 <_dtoa_r+0x6b4>
 80067e0:	d000      	beq.n	80067e4 <_dtoa_r+0x4d0>
 80067e2:	e282      	b.n	8006cea <_dtoa_r+0x9d6>
 80067e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80067e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067e8:	2200      	movs	r2, #0
 80067ea:	4b74      	ldr	r3, [pc, #464]	; (80069bc <_dtoa_r+0x6a8>)
 80067ec:	f7fa fd94 	bl	8001318 <__aeabi_dmul>
 80067f0:	9a08      	ldr	r2, [sp, #32]
 80067f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f4:	f7f9 fe48 	bl	8000488 <__aeabi_dcmpge>
 80067f8:	9e07      	ldr	r6, [sp, #28]
 80067fa:	0035      	movs	r5, r6
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d000      	beq.n	8006802 <_dtoa_r+0x4ee>
 8006800:	e259      	b.n	8006cb6 <_dtoa_r+0x9a2>
 8006802:	9b06      	ldr	r3, [sp, #24]
 8006804:	9a06      	ldr	r2, [sp, #24]
 8006806:	3301      	adds	r3, #1
 8006808:	9308      	str	r3, [sp, #32]
 800680a:	2331      	movs	r3, #49	; 0x31
 800680c:	7013      	strb	r3, [r2, #0]
 800680e:	9b02      	ldr	r3, [sp, #8]
 8006810:	3301      	adds	r3, #1
 8006812:	9302      	str	r3, [sp, #8]
 8006814:	e254      	b.n	8006cc0 <_dtoa_r+0x9ac>
 8006816:	4234      	tst	r4, r6
 8006818:	d007      	beq.n	800682a <_dtoa_r+0x516>
 800681a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800681c:	3301      	adds	r3, #1
 800681e:	9310      	str	r3, [sp, #64]	; 0x40
 8006820:	682a      	ldr	r2, [r5, #0]
 8006822:	686b      	ldr	r3, [r5, #4]
 8006824:	f7fa fd78 	bl	8001318 <__aeabi_dmul>
 8006828:	0033      	movs	r3, r6
 800682a:	1064      	asrs	r4, r4, #1
 800682c:	3508      	adds	r5, #8
 800682e:	e75a      	b.n	80066e6 <_dtoa_r+0x3d2>
 8006830:	9e02      	ldr	r6, [sp, #8]
 8006832:	9b07      	ldr	r3, [sp, #28]
 8006834:	e780      	b.n	8006738 <_dtoa_r+0x424>
 8006836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006838:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800683a:	1e5a      	subs	r2, r3, #1
 800683c:	4b59      	ldr	r3, [pc, #356]	; (80069a4 <_dtoa_r+0x690>)
 800683e:	00d2      	lsls	r2, r2, #3
 8006840:	189b      	adds	r3, r3, r2
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	2900      	cmp	r1, #0
 8006848:	d051      	beq.n	80068ee <_dtoa_r+0x5da>
 800684a:	2000      	movs	r0, #0
 800684c:	495d      	ldr	r1, [pc, #372]	; (80069c4 <_dtoa_r+0x6b0>)
 800684e:	f7fa f961 	bl	8000b14 <__aeabi_ddiv>
 8006852:	9a08      	ldr	r2, [sp, #32]
 8006854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006856:	f7fa ffcb 	bl	80017f0 <__aeabi_dsub>
 800685a:	9a06      	ldr	r2, [sp, #24]
 800685c:	9b06      	ldr	r3, [sp, #24]
 800685e:	4694      	mov	ip, r2
 8006860:	9317      	str	r3, [sp, #92]	; 0x5c
 8006862:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006864:	9010      	str	r0, [sp, #64]	; 0x40
 8006866:	9111      	str	r1, [sp, #68]	; 0x44
 8006868:	4463      	add	r3, ip
 800686a:	9319      	str	r3, [sp, #100]	; 0x64
 800686c:	0029      	movs	r1, r5
 800686e:	0020      	movs	r0, r4
 8006870:	f7fb fb6e 	bl	8001f50 <__aeabi_d2iz>
 8006874:	9014      	str	r0, [sp, #80]	; 0x50
 8006876:	f7fb fba1 	bl	8001fbc <__aeabi_i2d>
 800687a:	0002      	movs	r2, r0
 800687c:	000b      	movs	r3, r1
 800687e:	0020      	movs	r0, r4
 8006880:	0029      	movs	r1, r5
 8006882:	f7fa ffb5 	bl	80017f0 <__aeabi_dsub>
 8006886:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006888:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800688a:	3301      	adds	r3, #1
 800688c:	9308      	str	r3, [sp, #32]
 800688e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006890:	0004      	movs	r4, r0
 8006892:	3330      	adds	r3, #48	; 0x30
 8006894:	7013      	strb	r3, [r2, #0]
 8006896:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800689a:	000d      	movs	r5, r1
 800689c:	f7f9 fdd6 	bl	800044c <__aeabi_dcmplt>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d175      	bne.n	8006990 <_dtoa_r+0x67c>
 80068a4:	0022      	movs	r2, r4
 80068a6:	002b      	movs	r3, r5
 80068a8:	2000      	movs	r0, #0
 80068aa:	4940      	ldr	r1, [pc, #256]	; (80069ac <_dtoa_r+0x698>)
 80068ac:	f7fa ffa0 	bl	80017f0 <__aeabi_dsub>
 80068b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068b4:	f7f9 fdca 	bl	800044c <__aeabi_dcmplt>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d000      	beq.n	80068be <_dtoa_r+0x5aa>
 80068bc:	e0d2      	b.n	8006a64 <_dtoa_r+0x750>
 80068be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068c0:	9a08      	ldr	r2, [sp, #32]
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d100      	bne.n	80068c8 <_dtoa_r+0x5b4>
 80068c6:	e770      	b.n	80067aa <_dtoa_r+0x496>
 80068c8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80068ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80068cc:	2200      	movs	r2, #0
 80068ce:	4b38      	ldr	r3, [pc, #224]	; (80069b0 <_dtoa_r+0x69c>)
 80068d0:	f7fa fd22 	bl	8001318 <__aeabi_dmul>
 80068d4:	4b36      	ldr	r3, [pc, #216]	; (80069b0 <_dtoa_r+0x69c>)
 80068d6:	9010      	str	r0, [sp, #64]	; 0x40
 80068d8:	9111      	str	r1, [sp, #68]	; 0x44
 80068da:	2200      	movs	r2, #0
 80068dc:	0020      	movs	r0, r4
 80068de:	0029      	movs	r1, r5
 80068e0:	f7fa fd1a 	bl	8001318 <__aeabi_dmul>
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	0004      	movs	r4, r0
 80068e8:	000d      	movs	r5, r1
 80068ea:	9317      	str	r3, [sp, #92]	; 0x5c
 80068ec:	e7be      	b.n	800686c <_dtoa_r+0x558>
 80068ee:	9808      	ldr	r0, [sp, #32]
 80068f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f2:	f7fa fd11 	bl	8001318 <__aeabi_dmul>
 80068f6:	9a06      	ldr	r2, [sp, #24]
 80068f8:	9b06      	ldr	r3, [sp, #24]
 80068fa:	4694      	mov	ip, r2
 80068fc:	9308      	str	r3, [sp, #32]
 80068fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006900:	9010      	str	r0, [sp, #64]	; 0x40
 8006902:	9111      	str	r1, [sp, #68]	; 0x44
 8006904:	4463      	add	r3, ip
 8006906:	9319      	str	r3, [sp, #100]	; 0x64
 8006908:	0029      	movs	r1, r5
 800690a:	0020      	movs	r0, r4
 800690c:	f7fb fb20 	bl	8001f50 <__aeabi_d2iz>
 8006910:	9017      	str	r0, [sp, #92]	; 0x5c
 8006912:	f7fb fb53 	bl	8001fbc <__aeabi_i2d>
 8006916:	0002      	movs	r2, r0
 8006918:	000b      	movs	r3, r1
 800691a:	0020      	movs	r0, r4
 800691c:	0029      	movs	r1, r5
 800691e:	f7fa ff67 	bl	80017f0 <__aeabi_dsub>
 8006922:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006924:	9a08      	ldr	r2, [sp, #32]
 8006926:	3330      	adds	r3, #48	; 0x30
 8006928:	7013      	strb	r3, [r2, #0]
 800692a:	0013      	movs	r3, r2
 800692c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800692e:	3301      	adds	r3, #1
 8006930:	0004      	movs	r4, r0
 8006932:	000d      	movs	r5, r1
 8006934:	9308      	str	r3, [sp, #32]
 8006936:	4293      	cmp	r3, r2
 8006938:	d12c      	bne.n	8006994 <_dtoa_r+0x680>
 800693a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800693c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800693e:	9a06      	ldr	r2, [sp, #24]
 8006940:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006942:	4694      	mov	ip, r2
 8006944:	4463      	add	r3, ip
 8006946:	2200      	movs	r2, #0
 8006948:	9308      	str	r3, [sp, #32]
 800694a:	4b1e      	ldr	r3, [pc, #120]	; (80069c4 <_dtoa_r+0x6b0>)
 800694c:	f7f9 fda6 	bl	800049c <__aeabi_dadd>
 8006950:	0002      	movs	r2, r0
 8006952:	000b      	movs	r3, r1
 8006954:	0020      	movs	r0, r4
 8006956:	0029      	movs	r1, r5
 8006958:	f7f9 fd8c 	bl	8000474 <__aeabi_dcmpgt>
 800695c:	2800      	cmp	r0, #0
 800695e:	d000      	beq.n	8006962 <_dtoa_r+0x64e>
 8006960:	e080      	b.n	8006a64 <_dtoa_r+0x750>
 8006962:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006964:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006966:	2000      	movs	r0, #0
 8006968:	4916      	ldr	r1, [pc, #88]	; (80069c4 <_dtoa_r+0x6b0>)
 800696a:	f7fa ff41 	bl	80017f0 <__aeabi_dsub>
 800696e:	0002      	movs	r2, r0
 8006970:	000b      	movs	r3, r1
 8006972:	0020      	movs	r0, r4
 8006974:	0029      	movs	r1, r5
 8006976:	f7f9 fd69 	bl	800044c <__aeabi_dcmplt>
 800697a:	2800      	cmp	r0, #0
 800697c:	d100      	bne.n	8006980 <_dtoa_r+0x66c>
 800697e:	e714      	b.n	80067aa <_dtoa_r+0x496>
 8006980:	9b08      	ldr	r3, [sp, #32]
 8006982:	001a      	movs	r2, r3
 8006984:	3a01      	subs	r2, #1
 8006986:	9208      	str	r2, [sp, #32]
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	2a30      	cmp	r2, #48	; 0x30
 800698c:	d0f8      	beq.n	8006980 <_dtoa_r+0x66c>
 800698e:	9308      	str	r3, [sp, #32]
 8006990:	9602      	str	r6, [sp, #8]
 8006992:	e055      	b.n	8006a40 <_dtoa_r+0x72c>
 8006994:	2200      	movs	r2, #0
 8006996:	4b06      	ldr	r3, [pc, #24]	; (80069b0 <_dtoa_r+0x69c>)
 8006998:	f7fa fcbe 	bl	8001318 <__aeabi_dmul>
 800699c:	0004      	movs	r4, r0
 800699e:	000d      	movs	r5, r1
 80069a0:	e7b2      	b.n	8006908 <_dtoa_r+0x5f4>
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	080086e8 	.word	0x080086e8
 80069a8:	080086c0 	.word	0x080086c0
 80069ac:	3ff00000 	.word	0x3ff00000
 80069b0:	40240000 	.word	0x40240000
 80069b4:	401c0000 	.word	0x401c0000
 80069b8:	fcc00000 	.word	0xfcc00000
 80069bc:	40140000 	.word	0x40140000
 80069c0:	7cc00000 	.word	0x7cc00000
 80069c4:	3fe00000 	.word	0x3fe00000
 80069c8:	9b07      	ldr	r3, [sp, #28]
 80069ca:	9e06      	ldr	r6, [sp, #24]
 80069cc:	3b01      	subs	r3, #1
 80069ce:	199b      	adds	r3, r3, r6
 80069d0:	930c      	str	r3, [sp, #48]	; 0x30
 80069d2:	9c08      	ldr	r4, [sp, #32]
 80069d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80069d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069da:	0020      	movs	r0, r4
 80069dc:	0029      	movs	r1, r5
 80069de:	f7fa f899 	bl	8000b14 <__aeabi_ddiv>
 80069e2:	f7fb fab5 	bl	8001f50 <__aeabi_d2iz>
 80069e6:	9007      	str	r0, [sp, #28]
 80069e8:	f7fb fae8 	bl	8001fbc <__aeabi_i2d>
 80069ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069f0:	f7fa fc92 	bl	8001318 <__aeabi_dmul>
 80069f4:	0002      	movs	r2, r0
 80069f6:	000b      	movs	r3, r1
 80069f8:	0020      	movs	r0, r4
 80069fa:	0029      	movs	r1, r5
 80069fc:	f7fa fef8 	bl	80017f0 <__aeabi_dsub>
 8006a00:	0033      	movs	r3, r6
 8006a02:	9a07      	ldr	r2, [sp, #28]
 8006a04:	3601      	adds	r6, #1
 8006a06:	3230      	adds	r2, #48	; 0x30
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a0c:	9608      	str	r6, [sp, #32]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d139      	bne.n	8006a86 <_dtoa_r+0x772>
 8006a12:	0002      	movs	r2, r0
 8006a14:	000b      	movs	r3, r1
 8006a16:	f7f9 fd41 	bl	800049c <__aeabi_dadd>
 8006a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a1e:	0004      	movs	r4, r0
 8006a20:	000d      	movs	r5, r1
 8006a22:	f7f9 fd27 	bl	8000474 <__aeabi_dcmpgt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d11b      	bne.n	8006a62 <_dtoa_r+0x74e>
 8006a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a2e:	0020      	movs	r0, r4
 8006a30:	0029      	movs	r1, r5
 8006a32:	f7f9 fd05 	bl	8000440 <__aeabi_dcmpeq>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d002      	beq.n	8006a40 <_dtoa_r+0x72c>
 8006a3a:	9b07      	ldr	r3, [sp, #28]
 8006a3c:	07db      	lsls	r3, r3, #31
 8006a3e:	d410      	bmi.n	8006a62 <_dtoa_r+0x74e>
 8006a40:	0038      	movs	r0, r7
 8006a42:	9905      	ldr	r1, [sp, #20]
 8006a44:	f000 fae6 	bl	8007014 <_Bfree>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9a08      	ldr	r2, [sp, #32]
 8006a4c:	9802      	ldr	r0, [sp, #8]
 8006a4e:	7013      	strb	r3, [r2, #0]
 8006a50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a52:	3001      	adds	r0, #1
 8006a54:	6018      	str	r0, [r3, #0]
 8006a56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d100      	bne.n	8006a5e <_dtoa_r+0x74a>
 8006a5c:	e4a6      	b.n	80063ac <_dtoa_r+0x98>
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e4a4      	b.n	80063ac <_dtoa_r+0x98>
 8006a62:	9e02      	ldr	r6, [sp, #8]
 8006a64:	9b08      	ldr	r3, [sp, #32]
 8006a66:	9308      	str	r3, [sp, #32]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	781a      	ldrb	r2, [r3, #0]
 8006a6c:	2a39      	cmp	r2, #57	; 0x39
 8006a6e:	d106      	bne.n	8006a7e <_dtoa_r+0x76a>
 8006a70:	9a06      	ldr	r2, [sp, #24]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d1f7      	bne.n	8006a66 <_dtoa_r+0x752>
 8006a76:	2230      	movs	r2, #48	; 0x30
 8006a78:	9906      	ldr	r1, [sp, #24]
 8006a7a:	3601      	adds	r6, #1
 8006a7c:	700a      	strb	r2, [r1, #0]
 8006a7e:	781a      	ldrb	r2, [r3, #0]
 8006a80:	3201      	adds	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	e784      	b.n	8006990 <_dtoa_r+0x67c>
 8006a86:	2200      	movs	r2, #0
 8006a88:	4baa      	ldr	r3, [pc, #680]	; (8006d34 <_dtoa_r+0xa20>)
 8006a8a:	f7fa fc45 	bl	8001318 <__aeabi_dmul>
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2300      	movs	r3, #0
 8006a92:	0004      	movs	r4, r0
 8006a94:	000d      	movs	r5, r1
 8006a96:	f7f9 fcd3 	bl	8000440 <__aeabi_dcmpeq>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d09b      	beq.n	80069d6 <_dtoa_r+0x6c2>
 8006a9e:	e7cf      	b.n	8006a40 <_dtoa_r+0x72c>
 8006aa0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006aa2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006aa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006aa6:	2d00      	cmp	r5, #0
 8006aa8:	d012      	beq.n	8006ad0 <_dtoa_r+0x7bc>
 8006aaa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006aac:	2a01      	cmp	r2, #1
 8006aae:	dc66      	bgt.n	8006b7e <_dtoa_r+0x86a>
 8006ab0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	d05d      	beq.n	8006b72 <_dtoa_r+0x85e>
 8006ab6:	4aa0      	ldr	r2, [pc, #640]	; (8006d38 <_dtoa_r+0xa24>)
 8006ab8:	189b      	adds	r3, r3, r2
 8006aba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006abc:	2101      	movs	r1, #1
 8006abe:	18d2      	adds	r2, r2, r3
 8006ac0:	920a      	str	r2, [sp, #40]	; 0x28
 8006ac2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ac4:	0038      	movs	r0, r7
 8006ac6:	18d3      	adds	r3, r2, r3
 8006ac8:	930d      	str	r3, [sp, #52]	; 0x34
 8006aca:	f000 fb53 	bl	8007174 <__i2b>
 8006ace:	0005      	movs	r5, r0
 8006ad0:	2c00      	cmp	r4, #0
 8006ad2:	dd0e      	ble.n	8006af2 <_dtoa_r+0x7de>
 8006ad4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dd0b      	ble.n	8006af2 <_dtoa_r+0x7de>
 8006ada:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006adc:	0023      	movs	r3, r4
 8006ade:	4294      	cmp	r4, r2
 8006ae0:	dd00      	ble.n	8006ae4 <_dtoa_r+0x7d0>
 8006ae2:	0013      	movs	r3, r2
 8006ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae6:	1ae4      	subs	r4, r4, r3
 8006ae8:	1ad2      	subs	r2, r2, r3
 8006aea:	920a      	str	r2, [sp, #40]	; 0x28
 8006aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	930d      	str	r3, [sp, #52]	; 0x34
 8006af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01f      	beq.n	8006b38 <_dtoa_r+0x824>
 8006af8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d054      	beq.n	8006ba8 <_dtoa_r+0x894>
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	dd11      	ble.n	8006b26 <_dtoa_r+0x812>
 8006b02:	0029      	movs	r1, r5
 8006b04:	0032      	movs	r2, r6
 8006b06:	0038      	movs	r0, r7
 8006b08:	f000 fbfa 	bl	8007300 <__pow5mult>
 8006b0c:	9a05      	ldr	r2, [sp, #20]
 8006b0e:	0001      	movs	r1, r0
 8006b10:	0005      	movs	r5, r0
 8006b12:	0038      	movs	r0, r7
 8006b14:	f000 fb44 	bl	80071a0 <__multiply>
 8006b18:	9905      	ldr	r1, [sp, #20]
 8006b1a:	9014      	str	r0, [sp, #80]	; 0x50
 8006b1c:	0038      	movs	r0, r7
 8006b1e:	f000 fa79 	bl	8007014 <_Bfree>
 8006b22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b24:	9305      	str	r3, [sp, #20]
 8006b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b28:	1b9a      	subs	r2, r3, r6
 8006b2a:	42b3      	cmp	r3, r6
 8006b2c:	d004      	beq.n	8006b38 <_dtoa_r+0x824>
 8006b2e:	0038      	movs	r0, r7
 8006b30:	9905      	ldr	r1, [sp, #20]
 8006b32:	f000 fbe5 	bl	8007300 <__pow5mult>
 8006b36:	9005      	str	r0, [sp, #20]
 8006b38:	2101      	movs	r1, #1
 8006b3a:	0038      	movs	r0, r7
 8006b3c:	f000 fb1a 	bl	8007174 <__i2b>
 8006b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b42:	0006      	movs	r6, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	dd31      	ble.n	8006bac <_dtoa_r+0x898>
 8006b48:	001a      	movs	r2, r3
 8006b4a:	0001      	movs	r1, r0
 8006b4c:	0038      	movs	r0, r7
 8006b4e:	f000 fbd7 	bl	8007300 <__pow5mult>
 8006b52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b54:	0006      	movs	r6, r0
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	dd2d      	ble.n	8006bb6 <_dtoa_r+0x8a2>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8006b5e:	6933      	ldr	r3, [r6, #16]
 8006b60:	3303      	adds	r3, #3
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	18f3      	adds	r3, r6, r3
 8006b66:	6858      	ldr	r0, [r3, #4]
 8006b68:	f000 fabc 	bl	80070e4 <__hi0bits>
 8006b6c:	2320      	movs	r3, #32
 8006b6e:	1a18      	subs	r0, r3, r0
 8006b70:	e039      	b.n	8006be6 <_dtoa_r+0x8d2>
 8006b72:	2336      	movs	r3, #54	; 0x36
 8006b74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b76:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006b78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	e79d      	b.n	8006aba <_dtoa_r+0x7a6>
 8006b7e:	9b07      	ldr	r3, [sp, #28]
 8006b80:	1e5e      	subs	r6, r3, #1
 8006b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b84:	42b3      	cmp	r3, r6
 8006b86:	db07      	blt.n	8006b98 <_dtoa_r+0x884>
 8006b88:	1b9e      	subs	r6, r3, r6
 8006b8a:	9b07      	ldr	r3, [sp, #28]
 8006b8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	da93      	bge.n	8006aba <_dtoa_r+0x7a6>
 8006b92:	1ae4      	subs	r4, r4, r3
 8006b94:	2300      	movs	r3, #0
 8006b96:	e790      	b.n	8006aba <_dtoa_r+0x7a6>
 8006b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b9c:	1af3      	subs	r3, r6, r3
 8006b9e:	18d3      	adds	r3, r2, r3
 8006ba0:	960e      	str	r6, [sp, #56]	; 0x38
 8006ba2:	9315      	str	r3, [sp, #84]	; 0x54
 8006ba4:	2600      	movs	r6, #0
 8006ba6:	e7f0      	b.n	8006b8a <_dtoa_r+0x876>
 8006ba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006baa:	e7c0      	b.n	8006b2e <_dtoa_r+0x81a>
 8006bac:	2300      	movs	r3, #0
 8006bae:	930e      	str	r3, [sp, #56]	; 0x38
 8006bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	dc13      	bgt.n	8006bde <_dtoa_r+0x8ca>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	930e      	str	r3, [sp, #56]	; 0x38
 8006bba:	9b08      	ldr	r3, [sp, #32]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10e      	bne.n	8006bde <_dtoa_r+0x8ca>
 8006bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bc2:	031b      	lsls	r3, r3, #12
 8006bc4:	d10b      	bne.n	8006bde <_dtoa_r+0x8ca>
 8006bc6:	4b5d      	ldr	r3, [pc, #372]	; (8006d3c <_dtoa_r+0xa28>)
 8006bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bca:	4213      	tst	r3, r2
 8006bcc:	d007      	beq.n	8006bde <_dtoa_r+0x8ca>
 8006bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	930d      	str	r3, [sp, #52]	; 0x34
 8006bda:	2301      	movs	r3, #1
 8006bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8006bde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006be0:	2001      	movs	r0, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1bb      	bne.n	8006b5e <_dtoa_r+0x84a>
 8006be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be8:	221f      	movs	r2, #31
 8006bea:	1818      	adds	r0, r3, r0
 8006bec:	0003      	movs	r3, r0
 8006bee:	4013      	ands	r3, r2
 8006bf0:	4210      	tst	r0, r2
 8006bf2:	d046      	beq.n	8006c82 <_dtoa_r+0x96e>
 8006bf4:	3201      	adds	r2, #1
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	2a04      	cmp	r2, #4
 8006bfa:	dd3f      	ble.n	8006c7c <_dtoa_r+0x968>
 8006bfc:	221c      	movs	r2, #28
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c02:	18e4      	adds	r4, r4, r3
 8006c04:	18d2      	adds	r2, r2, r3
 8006c06:	920a      	str	r2, [sp, #40]	; 0x28
 8006c08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006c0a:	18d3      	adds	r3, r2, r3
 8006c0c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	dd05      	ble.n	8006c20 <_dtoa_r+0x90c>
 8006c14:	001a      	movs	r2, r3
 8006c16:	0038      	movs	r0, r7
 8006c18:	9905      	ldr	r1, [sp, #20]
 8006c1a:	f000 fbcd 	bl	80073b8 <__lshift>
 8006c1e:	9005      	str	r0, [sp, #20]
 8006c20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dd05      	ble.n	8006c32 <_dtoa_r+0x91e>
 8006c26:	0031      	movs	r1, r6
 8006c28:	001a      	movs	r2, r3
 8006c2a:	0038      	movs	r0, r7
 8006c2c:	f000 fbc4 	bl	80073b8 <__lshift>
 8006c30:	0006      	movs	r6, r0
 8006c32:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d026      	beq.n	8006c86 <_dtoa_r+0x972>
 8006c38:	0031      	movs	r1, r6
 8006c3a:	9805      	ldr	r0, [sp, #20]
 8006c3c:	f000 fc2a 	bl	8007494 <__mcmp>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	da20      	bge.n	8006c86 <_dtoa_r+0x972>
 8006c44:	9b02      	ldr	r3, [sp, #8]
 8006c46:	220a      	movs	r2, #10
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	9302      	str	r3, [sp, #8]
 8006c4c:	0038      	movs	r0, r7
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9905      	ldr	r1, [sp, #20]
 8006c52:	f000 fa03 	bl	800705c <__multadd>
 8006c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c58:	9005      	str	r0, [sp, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d100      	bne.n	8006c60 <_dtoa_r+0x94c>
 8006c5e:	e166      	b.n	8006f2e <_dtoa_r+0xc1a>
 8006c60:	2300      	movs	r3, #0
 8006c62:	0029      	movs	r1, r5
 8006c64:	220a      	movs	r2, #10
 8006c66:	0038      	movs	r0, r7
 8006c68:	f000 f9f8 	bl	800705c <__multadd>
 8006c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6e:	0005      	movs	r5, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	dc47      	bgt.n	8006d04 <_dtoa_r+0x9f0>
 8006c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	dc0d      	bgt.n	8006c96 <_dtoa_r+0x982>
 8006c7a:	e043      	b.n	8006d04 <_dtoa_r+0x9f0>
 8006c7c:	2a04      	cmp	r2, #4
 8006c7e:	d0c6      	beq.n	8006c0e <_dtoa_r+0x8fa>
 8006c80:	0013      	movs	r3, r2
 8006c82:	331c      	adds	r3, #28
 8006c84:	e7bc      	b.n	8006c00 <_dtoa_r+0x8ec>
 8006c86:	9b07      	ldr	r3, [sp, #28]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	dc35      	bgt.n	8006cf8 <_dtoa_r+0x9e4>
 8006c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	dd32      	ble.n	8006cf8 <_dtoa_r+0x9e4>
 8006c92:	9b07      	ldr	r3, [sp, #28]
 8006c94:	930c      	str	r3, [sp, #48]	; 0x30
 8006c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10c      	bne.n	8006cb6 <_dtoa_r+0x9a2>
 8006c9c:	0031      	movs	r1, r6
 8006c9e:	2205      	movs	r2, #5
 8006ca0:	0038      	movs	r0, r7
 8006ca2:	f000 f9db 	bl	800705c <__multadd>
 8006ca6:	0006      	movs	r6, r0
 8006ca8:	0001      	movs	r1, r0
 8006caa:	9805      	ldr	r0, [sp, #20]
 8006cac:	f000 fbf2 	bl	8007494 <__mcmp>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	dd00      	ble.n	8006cb6 <_dtoa_r+0x9a2>
 8006cb4:	e5a5      	b.n	8006802 <_dtoa_r+0x4ee>
 8006cb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	9302      	str	r3, [sp, #8]
 8006cbc:	9b06      	ldr	r3, [sp, #24]
 8006cbe:	9308      	str	r3, [sp, #32]
 8006cc0:	2400      	movs	r4, #0
 8006cc2:	0031      	movs	r1, r6
 8006cc4:	0038      	movs	r0, r7
 8006cc6:	f000 f9a5 	bl	8007014 <_Bfree>
 8006cca:	2d00      	cmp	r5, #0
 8006ccc:	d100      	bne.n	8006cd0 <_dtoa_r+0x9bc>
 8006cce:	e6b7      	b.n	8006a40 <_dtoa_r+0x72c>
 8006cd0:	2c00      	cmp	r4, #0
 8006cd2:	d005      	beq.n	8006ce0 <_dtoa_r+0x9cc>
 8006cd4:	42ac      	cmp	r4, r5
 8006cd6:	d003      	beq.n	8006ce0 <_dtoa_r+0x9cc>
 8006cd8:	0021      	movs	r1, r4
 8006cda:	0038      	movs	r0, r7
 8006cdc:	f000 f99a 	bl	8007014 <_Bfree>
 8006ce0:	0029      	movs	r1, r5
 8006ce2:	0038      	movs	r0, r7
 8006ce4:	f000 f996 	bl	8007014 <_Bfree>
 8006ce8:	e6aa      	b.n	8006a40 <_dtoa_r+0x72c>
 8006cea:	2600      	movs	r6, #0
 8006cec:	0035      	movs	r5, r6
 8006cee:	e7e2      	b.n	8006cb6 <_dtoa_r+0x9a2>
 8006cf0:	9602      	str	r6, [sp, #8]
 8006cf2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006cf4:	0035      	movs	r5, r6
 8006cf6:	e584      	b.n	8006802 <_dtoa_r+0x4ee>
 8006cf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d100      	bne.n	8006d00 <_dtoa_r+0x9ec>
 8006cfe:	e0ce      	b.n	8006e9e <_dtoa_r+0xb8a>
 8006d00:	9b07      	ldr	r3, [sp, #28]
 8006d02:	930c      	str	r3, [sp, #48]	; 0x30
 8006d04:	2c00      	cmp	r4, #0
 8006d06:	dd05      	ble.n	8006d14 <_dtoa_r+0xa00>
 8006d08:	0029      	movs	r1, r5
 8006d0a:	0022      	movs	r2, r4
 8006d0c:	0038      	movs	r0, r7
 8006d0e:	f000 fb53 	bl	80073b8 <__lshift>
 8006d12:	0005      	movs	r5, r0
 8006d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d16:	0028      	movs	r0, r5
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d022      	beq.n	8006d62 <_dtoa_r+0xa4e>
 8006d1c:	0038      	movs	r0, r7
 8006d1e:	6869      	ldr	r1, [r5, #4]
 8006d20:	f000 f934 	bl	8006f8c <_Balloc>
 8006d24:	1e04      	subs	r4, r0, #0
 8006d26:	d10f      	bne.n	8006d48 <_dtoa_r+0xa34>
 8006d28:	0002      	movs	r2, r0
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <_dtoa_r+0xa2c>)
 8006d2c:	4905      	ldr	r1, [pc, #20]	; (8006d44 <_dtoa_r+0xa30>)
 8006d2e:	f7ff fb06 	bl	800633e <_dtoa_r+0x2a>
 8006d32:	46c0      	nop			; (mov r8, r8)
 8006d34:	40240000 	.word	0x40240000
 8006d38:	00000433 	.word	0x00000433
 8006d3c:	7ff00000 	.word	0x7ff00000
 8006d40:	0800864f 	.word	0x0800864f
 8006d44:	000002ea 	.word	0x000002ea
 8006d48:	0029      	movs	r1, r5
 8006d4a:	692b      	ldr	r3, [r5, #16]
 8006d4c:	310c      	adds	r1, #12
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	0092      	lsls	r2, r2, #2
 8006d52:	300c      	adds	r0, #12
 8006d54:	f000 f911 	bl	8006f7a <memcpy>
 8006d58:	2201      	movs	r2, #1
 8006d5a:	0021      	movs	r1, r4
 8006d5c:	0038      	movs	r0, r7
 8006d5e:	f000 fb2b 	bl	80073b8 <__lshift>
 8006d62:	9b06      	ldr	r3, [sp, #24]
 8006d64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d66:	930a      	str	r3, [sp, #40]	; 0x28
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	002c      	movs	r4, r5
 8006d70:	0005      	movs	r5, r0
 8006d72:	9314      	str	r3, [sp, #80]	; 0x50
 8006d74:	9b08      	ldr	r3, [sp, #32]
 8006d76:	4013      	ands	r3, r2
 8006d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d7a:	0031      	movs	r1, r6
 8006d7c:	9805      	ldr	r0, [sp, #20]
 8006d7e:	f7ff fa3d 	bl	80061fc <quorem>
 8006d82:	0003      	movs	r3, r0
 8006d84:	0021      	movs	r1, r4
 8006d86:	3330      	adds	r3, #48	; 0x30
 8006d88:	900d      	str	r0, [sp, #52]	; 0x34
 8006d8a:	9805      	ldr	r0, [sp, #20]
 8006d8c:	9307      	str	r3, [sp, #28]
 8006d8e:	f000 fb81 	bl	8007494 <__mcmp>
 8006d92:	002a      	movs	r2, r5
 8006d94:	900e      	str	r0, [sp, #56]	; 0x38
 8006d96:	0031      	movs	r1, r6
 8006d98:	0038      	movs	r0, r7
 8006d9a:	f000 fb97 	bl	80074cc <__mdiff>
 8006d9e:	68c3      	ldr	r3, [r0, #12]
 8006da0:	9008      	str	r0, [sp, #32]
 8006da2:	9310      	str	r3, [sp, #64]	; 0x40
 8006da4:	2301      	movs	r3, #1
 8006da6:	930c      	str	r3, [sp, #48]	; 0x30
 8006da8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d104      	bne.n	8006db8 <_dtoa_r+0xaa4>
 8006dae:	0001      	movs	r1, r0
 8006db0:	9805      	ldr	r0, [sp, #20]
 8006db2:	f000 fb6f 	bl	8007494 <__mcmp>
 8006db6:	900c      	str	r0, [sp, #48]	; 0x30
 8006db8:	0038      	movs	r0, r7
 8006dba:	9908      	ldr	r1, [sp, #32]
 8006dbc:	f000 f92a 	bl	8007014 <_Bfree>
 8006dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	9308      	str	r3, [sp, #32]
 8006dc8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	d10c      	bne.n	8006dec <_dtoa_r+0xad8>
 8006dd2:	9b07      	ldr	r3, [sp, #28]
 8006dd4:	2b39      	cmp	r3, #57	; 0x39
 8006dd6:	d026      	beq.n	8006e26 <_dtoa_r+0xb12>
 8006dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dd02      	ble.n	8006de4 <_dtoa_r+0xad0>
 8006dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006de0:	3331      	adds	r3, #49	; 0x31
 8006de2:	9307      	str	r3, [sp, #28]
 8006de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de6:	9a07      	ldr	r2, [sp, #28]
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e76a      	b.n	8006cc2 <_dtoa_r+0x9ae>
 8006dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	db04      	blt.n	8006dfc <_dtoa_r+0xae8>
 8006df2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006df4:	4313      	orrs	r3, r2
 8006df6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	d11f      	bne.n	8006e3c <_dtoa_r+0xb28>
 8006dfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	ddf0      	ble.n	8006de4 <_dtoa_r+0xad0>
 8006e02:	9905      	ldr	r1, [sp, #20]
 8006e04:	2201      	movs	r2, #1
 8006e06:	0038      	movs	r0, r7
 8006e08:	f000 fad6 	bl	80073b8 <__lshift>
 8006e0c:	0031      	movs	r1, r6
 8006e0e:	9005      	str	r0, [sp, #20]
 8006e10:	f000 fb40 	bl	8007494 <__mcmp>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	dc03      	bgt.n	8006e20 <_dtoa_r+0xb0c>
 8006e18:	d1e4      	bne.n	8006de4 <_dtoa_r+0xad0>
 8006e1a:	9b07      	ldr	r3, [sp, #28]
 8006e1c:	07db      	lsls	r3, r3, #31
 8006e1e:	d5e1      	bpl.n	8006de4 <_dtoa_r+0xad0>
 8006e20:	9b07      	ldr	r3, [sp, #28]
 8006e22:	2b39      	cmp	r3, #57	; 0x39
 8006e24:	d1db      	bne.n	8006dde <_dtoa_r+0xaca>
 8006e26:	2339      	movs	r3, #57	; 0x39
 8006e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e2a:	7013      	strb	r3, [r2, #0]
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	9308      	str	r3, [sp, #32]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	2a39      	cmp	r2, #57	; 0x39
 8006e36:	d068      	beq.n	8006f0a <_dtoa_r+0xbf6>
 8006e38:	3201      	adds	r2, #1
 8006e3a:	e7d5      	b.n	8006de8 <_dtoa_r+0xad4>
 8006e3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dd07      	ble.n	8006e52 <_dtoa_r+0xb3e>
 8006e42:	9b07      	ldr	r3, [sp, #28]
 8006e44:	2b39      	cmp	r3, #57	; 0x39
 8006e46:	d0ee      	beq.n	8006e26 <_dtoa_r+0xb12>
 8006e48:	9b07      	ldr	r3, [sp, #28]
 8006e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	7013      	strb	r3, [r2, #0]
 8006e50:	e737      	b.n	8006cc2 <_dtoa_r+0x9ae>
 8006e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e54:	9a07      	ldr	r2, [sp, #28]
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d03e      	beq.n	8006ede <_dtoa_r+0xbca>
 8006e60:	2300      	movs	r3, #0
 8006e62:	220a      	movs	r2, #10
 8006e64:	9905      	ldr	r1, [sp, #20]
 8006e66:	0038      	movs	r0, r7
 8006e68:	f000 f8f8 	bl	800705c <__multadd>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9005      	str	r0, [sp, #20]
 8006e70:	220a      	movs	r2, #10
 8006e72:	0021      	movs	r1, r4
 8006e74:	0038      	movs	r0, r7
 8006e76:	42ac      	cmp	r4, r5
 8006e78:	d106      	bne.n	8006e88 <_dtoa_r+0xb74>
 8006e7a:	f000 f8ef 	bl	800705c <__multadd>
 8006e7e:	0004      	movs	r4, r0
 8006e80:	0005      	movs	r5, r0
 8006e82:	9b08      	ldr	r3, [sp, #32]
 8006e84:	930a      	str	r3, [sp, #40]	; 0x28
 8006e86:	e778      	b.n	8006d7a <_dtoa_r+0xa66>
 8006e88:	f000 f8e8 	bl	800705c <__multadd>
 8006e8c:	0029      	movs	r1, r5
 8006e8e:	0004      	movs	r4, r0
 8006e90:	2300      	movs	r3, #0
 8006e92:	220a      	movs	r2, #10
 8006e94:	0038      	movs	r0, r7
 8006e96:	f000 f8e1 	bl	800705c <__multadd>
 8006e9a:	0005      	movs	r5, r0
 8006e9c:	e7f1      	b.n	8006e82 <_dtoa_r+0xb6e>
 8006e9e:	9b07      	ldr	r3, [sp, #28]
 8006ea0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ea2:	2400      	movs	r4, #0
 8006ea4:	0031      	movs	r1, r6
 8006ea6:	9805      	ldr	r0, [sp, #20]
 8006ea8:	f7ff f9a8 	bl	80061fc <quorem>
 8006eac:	9b06      	ldr	r3, [sp, #24]
 8006eae:	3030      	adds	r0, #48	; 0x30
 8006eb0:	5518      	strb	r0, [r3, r4]
 8006eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eb4:	3401      	adds	r4, #1
 8006eb6:	9007      	str	r0, [sp, #28]
 8006eb8:	42a3      	cmp	r3, r4
 8006eba:	dd07      	ble.n	8006ecc <_dtoa_r+0xbb8>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	220a      	movs	r2, #10
 8006ec0:	0038      	movs	r0, r7
 8006ec2:	9905      	ldr	r1, [sp, #20]
 8006ec4:	f000 f8ca 	bl	800705c <__multadd>
 8006ec8:	9005      	str	r0, [sp, #20]
 8006eca:	e7eb      	b.n	8006ea4 <_dtoa_r+0xb90>
 8006ecc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ece:	2001      	movs	r0, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	dd00      	ble.n	8006ed6 <_dtoa_r+0xbc2>
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	2400      	movs	r4, #0
 8006ed8:	9b06      	ldr	r3, [sp, #24]
 8006eda:	181b      	adds	r3, r3, r0
 8006edc:	9308      	str	r3, [sp, #32]
 8006ede:	9905      	ldr	r1, [sp, #20]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	0038      	movs	r0, r7
 8006ee4:	f000 fa68 	bl	80073b8 <__lshift>
 8006ee8:	0031      	movs	r1, r6
 8006eea:	9005      	str	r0, [sp, #20]
 8006eec:	f000 fad2 	bl	8007494 <__mcmp>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	dc9b      	bgt.n	8006e2c <_dtoa_r+0xb18>
 8006ef4:	d102      	bne.n	8006efc <_dtoa_r+0xbe8>
 8006ef6:	9b07      	ldr	r3, [sp, #28]
 8006ef8:	07db      	lsls	r3, r3, #31
 8006efa:	d497      	bmi.n	8006e2c <_dtoa_r+0xb18>
 8006efc:	9b08      	ldr	r3, [sp, #32]
 8006efe:	9308      	str	r3, [sp, #32]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	2a30      	cmp	r2, #48	; 0x30
 8006f06:	d0fa      	beq.n	8006efe <_dtoa_r+0xbea>
 8006f08:	e6db      	b.n	8006cc2 <_dtoa_r+0x9ae>
 8006f0a:	9a06      	ldr	r2, [sp, #24]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d18e      	bne.n	8006e2e <_dtoa_r+0xb1a>
 8006f10:	9b02      	ldr	r3, [sp, #8]
 8006f12:	3301      	adds	r3, #1
 8006f14:	9302      	str	r3, [sp, #8]
 8006f16:	2331      	movs	r3, #49	; 0x31
 8006f18:	e799      	b.n	8006e4e <_dtoa_r+0xb3a>
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <_dtoa_r+0xc2c>)
 8006f1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f1e:	9306      	str	r3, [sp, #24]
 8006f20:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <_dtoa_r+0xc30>)
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	d001      	beq.n	8006f2a <_dtoa_r+0xc16>
 8006f26:	f7ff fa3f 	bl	80063a8 <_dtoa_r+0x94>
 8006f2a:	f7ff fa3f 	bl	80063ac <_dtoa_r+0x98>
 8006f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dcb6      	bgt.n	8006ea2 <_dtoa_r+0xb8e>
 8006f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	dd00      	ble.n	8006f3c <_dtoa_r+0xc28>
 8006f3a:	e6ac      	b.n	8006c96 <_dtoa_r+0x982>
 8006f3c:	e7b1      	b.n	8006ea2 <_dtoa_r+0xb8e>
 8006f3e:	46c0      	nop			; (mov r8, r8)
 8006f40:	080085d0 	.word	0x080085d0
 8006f44:	080085d8 	.word	0x080085d8

08006f48 <_localeconv_r>:
 8006f48:	4800      	ldr	r0, [pc, #0]	; (8006f4c <_localeconv_r+0x4>)
 8006f4a:	4770      	bx	lr
 8006f4c:	20000188 	.word	0x20000188

08006f50 <malloc>:
 8006f50:	b510      	push	{r4, lr}
 8006f52:	4b03      	ldr	r3, [pc, #12]	; (8006f60 <malloc+0x10>)
 8006f54:	0001      	movs	r1, r0
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	f000 fc4c 	bl	80077f4 <_malloc_r>
 8006f5c:	bd10      	pop	{r4, pc}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	20000034 	.word	0x20000034

08006f64 <memchr>:
 8006f64:	b2c9      	uxtb	r1, r1
 8006f66:	1882      	adds	r2, r0, r2
 8006f68:	4290      	cmp	r0, r2
 8006f6a:	d101      	bne.n	8006f70 <memchr+0xc>
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	4770      	bx	lr
 8006f70:	7803      	ldrb	r3, [r0, #0]
 8006f72:	428b      	cmp	r3, r1
 8006f74:	d0fb      	beq.n	8006f6e <memchr+0xa>
 8006f76:	3001      	adds	r0, #1
 8006f78:	e7f6      	b.n	8006f68 <memchr+0x4>

08006f7a <memcpy>:
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d100      	bne.n	8006f84 <memcpy+0xa>
 8006f82:	bd10      	pop	{r4, pc}
 8006f84:	5ccc      	ldrb	r4, [r1, r3]
 8006f86:	54c4      	strb	r4, [r0, r3]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	e7f8      	b.n	8006f7e <memcpy+0x4>

08006f8c <_Balloc>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f90:	0006      	movs	r6, r0
 8006f92:	000c      	movs	r4, r1
 8006f94:	2d00      	cmp	r5, #0
 8006f96:	d10e      	bne.n	8006fb6 <_Balloc+0x2a>
 8006f98:	2010      	movs	r0, #16
 8006f9a:	f7ff ffd9 	bl	8006f50 <malloc>
 8006f9e:	1e02      	subs	r2, r0, #0
 8006fa0:	6270      	str	r0, [r6, #36]	; 0x24
 8006fa2:	d104      	bne.n	8006fae <_Balloc+0x22>
 8006fa4:	2166      	movs	r1, #102	; 0x66
 8006fa6:	4b19      	ldr	r3, [pc, #100]	; (800700c <_Balloc+0x80>)
 8006fa8:	4819      	ldr	r0, [pc, #100]	; (8007010 <_Balloc+0x84>)
 8006faa:	f000 fcab 	bl	8007904 <__assert_func>
 8006fae:	6045      	str	r5, [r0, #4]
 8006fb0:	6085      	str	r5, [r0, #8]
 8006fb2:	6005      	str	r5, [r0, #0]
 8006fb4:	60c5      	str	r5, [r0, #12]
 8006fb6:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006fb8:	68eb      	ldr	r3, [r5, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d013      	beq.n	8006fe6 <_Balloc+0x5a>
 8006fbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006fc0:	00a2      	lsls	r2, r4, #2
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	189b      	adds	r3, r3, r2
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d118      	bne.n	8006ffe <_Balloc+0x72>
 8006fcc:	2101      	movs	r1, #1
 8006fce:	000d      	movs	r5, r1
 8006fd0:	40a5      	lsls	r5, r4
 8006fd2:	1d6a      	adds	r2, r5, #5
 8006fd4:	0030      	movs	r0, r6
 8006fd6:	0092      	lsls	r2, r2, #2
 8006fd8:	f000 fb74 	bl	80076c4 <_calloc_r>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d00c      	beq.n	8006ffa <_Balloc+0x6e>
 8006fe0:	6044      	str	r4, [r0, #4]
 8006fe2:	6085      	str	r5, [r0, #8]
 8006fe4:	e00d      	b.n	8007002 <_Balloc+0x76>
 8006fe6:	2221      	movs	r2, #33	; 0x21
 8006fe8:	2104      	movs	r1, #4
 8006fea:	0030      	movs	r0, r6
 8006fec:	f000 fb6a 	bl	80076c4 <_calloc_r>
 8006ff0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006ff2:	60e8      	str	r0, [r5, #12]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1e1      	bne.n	8006fbe <_Balloc+0x32>
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	6802      	ldr	r2, [r0, #0]
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	6103      	str	r3, [r0, #16]
 8007006:	60c3      	str	r3, [r0, #12]
 8007008:	e7f8      	b.n	8006ffc <_Balloc+0x70>
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	080085dd 	.word	0x080085dd
 8007010:	08008660 	.word	0x08008660

08007014 <_Bfree>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007018:	0005      	movs	r5, r0
 800701a:	000c      	movs	r4, r1
 800701c:	2e00      	cmp	r6, #0
 800701e:	d10e      	bne.n	800703e <_Bfree+0x2a>
 8007020:	2010      	movs	r0, #16
 8007022:	f7ff ff95 	bl	8006f50 <malloc>
 8007026:	1e02      	subs	r2, r0, #0
 8007028:	6268      	str	r0, [r5, #36]	; 0x24
 800702a:	d104      	bne.n	8007036 <_Bfree+0x22>
 800702c:	218a      	movs	r1, #138	; 0x8a
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <_Bfree+0x40>)
 8007030:	4809      	ldr	r0, [pc, #36]	; (8007058 <_Bfree+0x44>)
 8007032:	f000 fc67 	bl	8007904 <__assert_func>
 8007036:	6046      	str	r6, [r0, #4]
 8007038:	6086      	str	r6, [r0, #8]
 800703a:	6006      	str	r6, [r0, #0]
 800703c:	60c6      	str	r6, [r0, #12]
 800703e:	2c00      	cmp	r4, #0
 8007040:	d007      	beq.n	8007052 <_Bfree+0x3e>
 8007042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007044:	6862      	ldr	r2, [r4, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	0092      	lsls	r2, r2, #2
 800704a:	189b      	adds	r3, r3, r2
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	6022      	str	r2, [r4, #0]
 8007050:	601c      	str	r4, [r3, #0]
 8007052:	bd70      	pop	{r4, r5, r6, pc}
 8007054:	080085dd 	.word	0x080085dd
 8007058:	08008660 	.word	0x08008660

0800705c <__multadd>:
 800705c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705e:	000e      	movs	r6, r1
 8007060:	9001      	str	r0, [sp, #4]
 8007062:	000c      	movs	r4, r1
 8007064:	001d      	movs	r5, r3
 8007066:	2000      	movs	r0, #0
 8007068:	690f      	ldr	r7, [r1, #16]
 800706a:	3614      	adds	r6, #20
 800706c:	6833      	ldr	r3, [r6, #0]
 800706e:	3001      	adds	r0, #1
 8007070:	b299      	uxth	r1, r3
 8007072:	4351      	muls	r1, r2
 8007074:	0c1b      	lsrs	r3, r3, #16
 8007076:	4353      	muls	r3, r2
 8007078:	1949      	adds	r1, r1, r5
 800707a:	0c0d      	lsrs	r5, r1, #16
 800707c:	195b      	adds	r3, r3, r5
 800707e:	0c1d      	lsrs	r5, r3, #16
 8007080:	b289      	uxth	r1, r1
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	185b      	adds	r3, r3, r1
 8007086:	c608      	stmia	r6!, {r3}
 8007088:	4287      	cmp	r7, r0
 800708a:	dcef      	bgt.n	800706c <__multadd+0x10>
 800708c:	2d00      	cmp	r5, #0
 800708e:	d022      	beq.n	80070d6 <__multadd+0x7a>
 8007090:	68a3      	ldr	r3, [r4, #8]
 8007092:	42bb      	cmp	r3, r7
 8007094:	dc19      	bgt.n	80070ca <__multadd+0x6e>
 8007096:	6863      	ldr	r3, [r4, #4]
 8007098:	9801      	ldr	r0, [sp, #4]
 800709a:	1c59      	adds	r1, r3, #1
 800709c:	f7ff ff76 	bl	8006f8c <_Balloc>
 80070a0:	1e06      	subs	r6, r0, #0
 80070a2:	d105      	bne.n	80070b0 <__multadd+0x54>
 80070a4:	0002      	movs	r2, r0
 80070a6:	21b5      	movs	r1, #181	; 0xb5
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <__multadd+0x80>)
 80070aa:	480d      	ldr	r0, [pc, #52]	; (80070e0 <__multadd+0x84>)
 80070ac:	f000 fc2a 	bl	8007904 <__assert_func>
 80070b0:	0021      	movs	r1, r4
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	310c      	adds	r1, #12
 80070b6:	1c9a      	adds	r2, r3, #2
 80070b8:	0092      	lsls	r2, r2, #2
 80070ba:	300c      	adds	r0, #12
 80070bc:	f7ff ff5d 	bl	8006f7a <memcpy>
 80070c0:	0021      	movs	r1, r4
 80070c2:	9801      	ldr	r0, [sp, #4]
 80070c4:	f7ff ffa6 	bl	8007014 <_Bfree>
 80070c8:	0034      	movs	r4, r6
 80070ca:	1d3b      	adds	r3, r7, #4
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	18e3      	adds	r3, r4, r3
 80070d0:	605d      	str	r5, [r3, #4]
 80070d2:	1c7b      	adds	r3, r7, #1
 80070d4:	6123      	str	r3, [r4, #16]
 80070d6:	0020      	movs	r0, r4
 80070d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	0800864f 	.word	0x0800864f
 80070e0:	08008660 	.word	0x08008660

080070e4 <__hi0bits>:
 80070e4:	0003      	movs	r3, r0
 80070e6:	0c02      	lsrs	r2, r0, #16
 80070e8:	2000      	movs	r0, #0
 80070ea:	4282      	cmp	r2, r0
 80070ec:	d101      	bne.n	80070f2 <__hi0bits+0xe>
 80070ee:	041b      	lsls	r3, r3, #16
 80070f0:	3010      	adds	r0, #16
 80070f2:	0e1a      	lsrs	r2, r3, #24
 80070f4:	d101      	bne.n	80070fa <__hi0bits+0x16>
 80070f6:	3008      	adds	r0, #8
 80070f8:	021b      	lsls	r3, r3, #8
 80070fa:	0f1a      	lsrs	r2, r3, #28
 80070fc:	d101      	bne.n	8007102 <__hi0bits+0x1e>
 80070fe:	3004      	adds	r0, #4
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	0f9a      	lsrs	r2, r3, #30
 8007104:	d101      	bne.n	800710a <__hi0bits+0x26>
 8007106:	3002      	adds	r0, #2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	db03      	blt.n	8007116 <__hi0bits+0x32>
 800710e:	3001      	adds	r0, #1
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	d400      	bmi.n	8007116 <__hi0bits+0x32>
 8007114:	2020      	movs	r0, #32
 8007116:	4770      	bx	lr

08007118 <__lo0bits>:
 8007118:	6803      	ldr	r3, [r0, #0]
 800711a:	0002      	movs	r2, r0
 800711c:	2107      	movs	r1, #7
 800711e:	0018      	movs	r0, r3
 8007120:	4008      	ands	r0, r1
 8007122:	420b      	tst	r3, r1
 8007124:	d00d      	beq.n	8007142 <__lo0bits+0x2a>
 8007126:	3906      	subs	r1, #6
 8007128:	2000      	movs	r0, #0
 800712a:	420b      	tst	r3, r1
 800712c:	d105      	bne.n	800713a <__lo0bits+0x22>
 800712e:	3002      	adds	r0, #2
 8007130:	4203      	tst	r3, r0
 8007132:	d003      	beq.n	800713c <__lo0bits+0x24>
 8007134:	40cb      	lsrs	r3, r1
 8007136:	0008      	movs	r0, r1
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4770      	bx	lr
 800713c:	089b      	lsrs	r3, r3, #2
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	e7fb      	b.n	800713a <__lo0bits+0x22>
 8007142:	b299      	uxth	r1, r3
 8007144:	2900      	cmp	r1, #0
 8007146:	d101      	bne.n	800714c <__lo0bits+0x34>
 8007148:	2010      	movs	r0, #16
 800714a:	0c1b      	lsrs	r3, r3, #16
 800714c:	b2d9      	uxtb	r1, r3
 800714e:	2900      	cmp	r1, #0
 8007150:	d101      	bne.n	8007156 <__lo0bits+0x3e>
 8007152:	3008      	adds	r0, #8
 8007154:	0a1b      	lsrs	r3, r3, #8
 8007156:	0719      	lsls	r1, r3, #28
 8007158:	d101      	bne.n	800715e <__lo0bits+0x46>
 800715a:	3004      	adds	r0, #4
 800715c:	091b      	lsrs	r3, r3, #4
 800715e:	0799      	lsls	r1, r3, #30
 8007160:	d101      	bne.n	8007166 <__lo0bits+0x4e>
 8007162:	3002      	adds	r0, #2
 8007164:	089b      	lsrs	r3, r3, #2
 8007166:	07d9      	lsls	r1, r3, #31
 8007168:	d4e9      	bmi.n	800713e <__lo0bits+0x26>
 800716a:	3001      	adds	r0, #1
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	d1e6      	bne.n	800713e <__lo0bits+0x26>
 8007170:	2020      	movs	r0, #32
 8007172:	e7e2      	b.n	800713a <__lo0bits+0x22>

08007174 <__i2b>:
 8007174:	b510      	push	{r4, lr}
 8007176:	000c      	movs	r4, r1
 8007178:	2101      	movs	r1, #1
 800717a:	f7ff ff07 	bl	8006f8c <_Balloc>
 800717e:	2800      	cmp	r0, #0
 8007180:	d106      	bne.n	8007190 <__i2b+0x1c>
 8007182:	21a0      	movs	r1, #160	; 0xa0
 8007184:	0002      	movs	r2, r0
 8007186:	4b04      	ldr	r3, [pc, #16]	; (8007198 <__i2b+0x24>)
 8007188:	4804      	ldr	r0, [pc, #16]	; (800719c <__i2b+0x28>)
 800718a:	0049      	lsls	r1, r1, #1
 800718c:	f000 fbba 	bl	8007904 <__assert_func>
 8007190:	2301      	movs	r3, #1
 8007192:	6144      	str	r4, [r0, #20]
 8007194:	6103      	str	r3, [r0, #16]
 8007196:	bd10      	pop	{r4, pc}
 8007198:	0800864f 	.word	0x0800864f
 800719c:	08008660 	.word	0x08008660

080071a0 <__multiply>:
 80071a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a2:	690b      	ldr	r3, [r1, #16]
 80071a4:	0014      	movs	r4, r2
 80071a6:	6912      	ldr	r2, [r2, #16]
 80071a8:	000d      	movs	r5, r1
 80071aa:	b089      	sub	sp, #36	; 0x24
 80071ac:	4293      	cmp	r3, r2
 80071ae:	da01      	bge.n	80071b4 <__multiply+0x14>
 80071b0:	0025      	movs	r5, r4
 80071b2:	000c      	movs	r4, r1
 80071b4:	692f      	ldr	r7, [r5, #16]
 80071b6:	6926      	ldr	r6, [r4, #16]
 80071b8:	6869      	ldr	r1, [r5, #4]
 80071ba:	19bb      	adds	r3, r7, r6
 80071bc:	9302      	str	r3, [sp, #8]
 80071be:	68ab      	ldr	r3, [r5, #8]
 80071c0:	19ba      	adds	r2, r7, r6
 80071c2:	4293      	cmp	r3, r2
 80071c4:	da00      	bge.n	80071c8 <__multiply+0x28>
 80071c6:	3101      	adds	r1, #1
 80071c8:	f7ff fee0 	bl	8006f8c <_Balloc>
 80071cc:	9001      	str	r0, [sp, #4]
 80071ce:	2800      	cmp	r0, #0
 80071d0:	d106      	bne.n	80071e0 <__multiply+0x40>
 80071d2:	215e      	movs	r1, #94	; 0x5e
 80071d4:	0002      	movs	r2, r0
 80071d6:	4b48      	ldr	r3, [pc, #288]	; (80072f8 <__multiply+0x158>)
 80071d8:	4848      	ldr	r0, [pc, #288]	; (80072fc <__multiply+0x15c>)
 80071da:	31ff      	adds	r1, #255	; 0xff
 80071dc:	f000 fb92 	bl	8007904 <__assert_func>
 80071e0:	9b01      	ldr	r3, [sp, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	3314      	adds	r3, #20
 80071e6:	469c      	mov	ip, r3
 80071e8:	19bb      	adds	r3, r7, r6
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4463      	add	r3, ip
 80071ee:	9303      	str	r3, [sp, #12]
 80071f0:	4663      	mov	r3, ip
 80071f2:	9903      	ldr	r1, [sp, #12]
 80071f4:	428b      	cmp	r3, r1
 80071f6:	d32c      	bcc.n	8007252 <__multiply+0xb2>
 80071f8:	002b      	movs	r3, r5
 80071fa:	0022      	movs	r2, r4
 80071fc:	3314      	adds	r3, #20
 80071fe:	00bf      	lsls	r7, r7, #2
 8007200:	3214      	adds	r2, #20
 8007202:	9306      	str	r3, [sp, #24]
 8007204:	00b6      	lsls	r6, r6, #2
 8007206:	19db      	adds	r3, r3, r7
 8007208:	9304      	str	r3, [sp, #16]
 800720a:	1993      	adds	r3, r2, r6
 800720c:	9307      	str	r3, [sp, #28]
 800720e:	2304      	movs	r3, #4
 8007210:	9305      	str	r3, [sp, #20]
 8007212:	002b      	movs	r3, r5
 8007214:	9904      	ldr	r1, [sp, #16]
 8007216:	3315      	adds	r3, #21
 8007218:	9200      	str	r2, [sp, #0]
 800721a:	4299      	cmp	r1, r3
 800721c:	d305      	bcc.n	800722a <__multiply+0x8a>
 800721e:	1b4b      	subs	r3, r1, r5
 8007220:	3b15      	subs	r3, #21
 8007222:	089b      	lsrs	r3, r3, #2
 8007224:	3301      	adds	r3, #1
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	9305      	str	r3, [sp, #20]
 800722a:	9b07      	ldr	r3, [sp, #28]
 800722c:	9a00      	ldr	r2, [sp, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d311      	bcc.n	8007256 <__multiply+0xb6>
 8007232:	9b02      	ldr	r3, [sp, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	dd06      	ble.n	8007246 <__multiply+0xa6>
 8007238:	9b03      	ldr	r3, [sp, #12]
 800723a:	3b04      	subs	r3, #4
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d053      	beq.n	80072ee <__multiply+0x14e>
 8007246:	9b01      	ldr	r3, [sp, #4]
 8007248:	9a02      	ldr	r2, [sp, #8]
 800724a:	0018      	movs	r0, r3
 800724c:	611a      	str	r2, [r3, #16]
 800724e:	b009      	add	sp, #36	; 0x24
 8007250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007252:	c304      	stmia	r3!, {r2}
 8007254:	e7cd      	b.n	80071f2 <__multiply+0x52>
 8007256:	9b00      	ldr	r3, [sp, #0]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	b298      	uxth	r0, r3
 800725c:	2800      	cmp	r0, #0
 800725e:	d01b      	beq.n	8007298 <__multiply+0xf8>
 8007260:	4667      	mov	r7, ip
 8007262:	2400      	movs	r4, #0
 8007264:	9e06      	ldr	r6, [sp, #24]
 8007266:	ce02      	ldmia	r6!, {r1}
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	b28b      	uxth	r3, r1
 800726c:	4343      	muls	r3, r0
 800726e:	b292      	uxth	r2, r2
 8007270:	189b      	adds	r3, r3, r2
 8007272:	191b      	adds	r3, r3, r4
 8007274:	0c0c      	lsrs	r4, r1, #16
 8007276:	4344      	muls	r4, r0
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	0c11      	lsrs	r1, r2, #16
 800727c:	1861      	adds	r1, r4, r1
 800727e:	0c1c      	lsrs	r4, r3, #16
 8007280:	1909      	adds	r1, r1, r4
 8007282:	0c0c      	lsrs	r4, r1, #16
 8007284:	b29b      	uxth	r3, r3
 8007286:	0409      	lsls	r1, r1, #16
 8007288:	430b      	orrs	r3, r1
 800728a:	c708      	stmia	r7!, {r3}
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	42b3      	cmp	r3, r6
 8007290:	d8e9      	bhi.n	8007266 <__multiply+0xc6>
 8007292:	4663      	mov	r3, ip
 8007294:	9a05      	ldr	r2, [sp, #20]
 8007296:	509c      	str	r4, [r3, r2]
 8007298:	9b00      	ldr	r3, [sp, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	0c1e      	lsrs	r6, r3, #16
 800729e:	d020      	beq.n	80072e2 <__multiply+0x142>
 80072a0:	4663      	mov	r3, ip
 80072a2:	002c      	movs	r4, r5
 80072a4:	4660      	mov	r0, ip
 80072a6:	2700      	movs	r7, #0
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3414      	adds	r4, #20
 80072ac:	6822      	ldr	r2, [r4, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	b291      	uxth	r1, r2
 80072b2:	4371      	muls	r1, r6
 80072b4:	6802      	ldr	r2, [r0, #0]
 80072b6:	0c12      	lsrs	r2, r2, #16
 80072b8:	1889      	adds	r1, r1, r2
 80072ba:	19cf      	adds	r7, r1, r7
 80072bc:	0439      	lsls	r1, r7, #16
 80072be:	430b      	orrs	r3, r1
 80072c0:	6003      	str	r3, [r0, #0]
 80072c2:	cc02      	ldmia	r4!, {r1}
 80072c4:	6843      	ldr	r3, [r0, #4]
 80072c6:	0c09      	lsrs	r1, r1, #16
 80072c8:	4371      	muls	r1, r6
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	0c3f      	lsrs	r7, r7, #16
 80072ce:	18cb      	adds	r3, r1, r3
 80072d0:	9a04      	ldr	r2, [sp, #16]
 80072d2:	19db      	adds	r3, r3, r7
 80072d4:	0c1f      	lsrs	r7, r3, #16
 80072d6:	3004      	adds	r0, #4
 80072d8:	42a2      	cmp	r2, r4
 80072da:	d8e7      	bhi.n	80072ac <__multiply+0x10c>
 80072dc:	4662      	mov	r2, ip
 80072de:	9905      	ldr	r1, [sp, #20]
 80072e0:	5053      	str	r3, [r2, r1]
 80072e2:	9b00      	ldr	r3, [sp, #0]
 80072e4:	3304      	adds	r3, #4
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2304      	movs	r3, #4
 80072ea:	449c      	add	ip, r3
 80072ec:	e79d      	b.n	800722a <__multiply+0x8a>
 80072ee:	9b02      	ldr	r3, [sp, #8]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	9302      	str	r3, [sp, #8]
 80072f4:	e79d      	b.n	8007232 <__multiply+0x92>
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	0800864f 	.word	0x0800864f
 80072fc:	08008660 	.word	0x08008660

08007300 <__pow5mult>:
 8007300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007302:	2303      	movs	r3, #3
 8007304:	0015      	movs	r5, r2
 8007306:	0007      	movs	r7, r0
 8007308:	000e      	movs	r6, r1
 800730a:	401a      	ands	r2, r3
 800730c:	421d      	tst	r5, r3
 800730e:	d008      	beq.n	8007322 <__pow5mult+0x22>
 8007310:	4925      	ldr	r1, [pc, #148]	; (80073a8 <__pow5mult+0xa8>)
 8007312:	3a01      	subs	r2, #1
 8007314:	0092      	lsls	r2, r2, #2
 8007316:	5852      	ldr	r2, [r2, r1]
 8007318:	2300      	movs	r3, #0
 800731a:	0031      	movs	r1, r6
 800731c:	f7ff fe9e 	bl	800705c <__multadd>
 8007320:	0006      	movs	r6, r0
 8007322:	10ad      	asrs	r5, r5, #2
 8007324:	d03d      	beq.n	80073a2 <__pow5mult+0xa2>
 8007326:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007328:	2c00      	cmp	r4, #0
 800732a:	d10f      	bne.n	800734c <__pow5mult+0x4c>
 800732c:	2010      	movs	r0, #16
 800732e:	f7ff fe0f 	bl	8006f50 <malloc>
 8007332:	1e02      	subs	r2, r0, #0
 8007334:	6278      	str	r0, [r7, #36]	; 0x24
 8007336:	d105      	bne.n	8007344 <__pow5mult+0x44>
 8007338:	21d7      	movs	r1, #215	; 0xd7
 800733a:	4b1c      	ldr	r3, [pc, #112]	; (80073ac <__pow5mult+0xac>)
 800733c:	481c      	ldr	r0, [pc, #112]	; (80073b0 <__pow5mult+0xb0>)
 800733e:	0049      	lsls	r1, r1, #1
 8007340:	f000 fae0 	bl	8007904 <__assert_func>
 8007344:	6044      	str	r4, [r0, #4]
 8007346:	6084      	str	r4, [r0, #8]
 8007348:	6004      	str	r4, [r0, #0]
 800734a:	60c4      	str	r4, [r0, #12]
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	689c      	ldr	r4, [r3, #8]
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	2c00      	cmp	r4, #0
 8007354:	d108      	bne.n	8007368 <__pow5mult+0x68>
 8007356:	0038      	movs	r0, r7
 8007358:	4916      	ldr	r1, [pc, #88]	; (80073b4 <__pow5mult+0xb4>)
 800735a:	f7ff ff0b 	bl	8007174 <__i2b>
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	0004      	movs	r4, r0
 8007362:	6098      	str	r0, [r3, #8]
 8007364:	2300      	movs	r3, #0
 8007366:	6003      	str	r3, [r0, #0]
 8007368:	2301      	movs	r3, #1
 800736a:	421d      	tst	r5, r3
 800736c:	d00a      	beq.n	8007384 <__pow5mult+0x84>
 800736e:	0031      	movs	r1, r6
 8007370:	0022      	movs	r2, r4
 8007372:	0038      	movs	r0, r7
 8007374:	f7ff ff14 	bl	80071a0 <__multiply>
 8007378:	0031      	movs	r1, r6
 800737a:	9001      	str	r0, [sp, #4]
 800737c:	0038      	movs	r0, r7
 800737e:	f7ff fe49 	bl	8007014 <_Bfree>
 8007382:	9e01      	ldr	r6, [sp, #4]
 8007384:	106d      	asrs	r5, r5, #1
 8007386:	d00c      	beq.n	80073a2 <__pow5mult+0xa2>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	2800      	cmp	r0, #0
 800738c:	d107      	bne.n	800739e <__pow5mult+0x9e>
 800738e:	0022      	movs	r2, r4
 8007390:	0021      	movs	r1, r4
 8007392:	0038      	movs	r0, r7
 8007394:	f7ff ff04 	bl	80071a0 <__multiply>
 8007398:	2300      	movs	r3, #0
 800739a:	6020      	str	r0, [r4, #0]
 800739c:	6003      	str	r3, [r0, #0]
 800739e:	0004      	movs	r4, r0
 80073a0:	e7e2      	b.n	8007368 <__pow5mult+0x68>
 80073a2:	0030      	movs	r0, r6
 80073a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073a6:	46c0      	nop			; (mov r8, r8)
 80073a8:	080087b0 	.word	0x080087b0
 80073ac:	080085dd 	.word	0x080085dd
 80073b0:	08008660 	.word	0x08008660
 80073b4:	00000271 	.word	0x00000271

080073b8 <__lshift>:
 80073b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073ba:	000c      	movs	r4, r1
 80073bc:	0017      	movs	r7, r2
 80073be:	6923      	ldr	r3, [r4, #16]
 80073c0:	1155      	asrs	r5, r2, #5
 80073c2:	b087      	sub	sp, #28
 80073c4:	18eb      	adds	r3, r5, r3
 80073c6:	9302      	str	r3, [sp, #8]
 80073c8:	3301      	adds	r3, #1
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	6849      	ldr	r1, [r1, #4]
 80073ce:	68a3      	ldr	r3, [r4, #8]
 80073d0:	9004      	str	r0, [sp, #16]
 80073d2:	9a01      	ldr	r2, [sp, #4]
 80073d4:	4293      	cmp	r3, r2
 80073d6:	db10      	blt.n	80073fa <__lshift+0x42>
 80073d8:	9804      	ldr	r0, [sp, #16]
 80073da:	f7ff fdd7 	bl	8006f8c <_Balloc>
 80073de:	2300      	movs	r3, #0
 80073e0:	0002      	movs	r2, r0
 80073e2:	0006      	movs	r6, r0
 80073e4:	0019      	movs	r1, r3
 80073e6:	3214      	adds	r2, #20
 80073e8:	4298      	cmp	r0, r3
 80073ea:	d10c      	bne.n	8007406 <__lshift+0x4e>
 80073ec:	21da      	movs	r1, #218	; 0xda
 80073ee:	0002      	movs	r2, r0
 80073f0:	4b26      	ldr	r3, [pc, #152]	; (800748c <__lshift+0xd4>)
 80073f2:	4827      	ldr	r0, [pc, #156]	; (8007490 <__lshift+0xd8>)
 80073f4:	31ff      	adds	r1, #255	; 0xff
 80073f6:	f000 fa85 	bl	8007904 <__assert_func>
 80073fa:	3101      	adds	r1, #1
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	e7e8      	b.n	80073d2 <__lshift+0x1a>
 8007400:	0098      	lsls	r0, r3, #2
 8007402:	5011      	str	r1, [r2, r0]
 8007404:	3301      	adds	r3, #1
 8007406:	42ab      	cmp	r3, r5
 8007408:	dbfa      	blt.n	8007400 <__lshift+0x48>
 800740a:	43eb      	mvns	r3, r5
 800740c:	17db      	asrs	r3, r3, #31
 800740e:	401d      	ands	r5, r3
 8007410:	211f      	movs	r1, #31
 8007412:	0023      	movs	r3, r4
 8007414:	0038      	movs	r0, r7
 8007416:	00ad      	lsls	r5, r5, #2
 8007418:	1955      	adds	r5, r2, r5
 800741a:	6922      	ldr	r2, [r4, #16]
 800741c:	3314      	adds	r3, #20
 800741e:	0092      	lsls	r2, r2, #2
 8007420:	4008      	ands	r0, r1
 8007422:	4684      	mov	ip, r0
 8007424:	189a      	adds	r2, r3, r2
 8007426:	420f      	tst	r7, r1
 8007428:	d02a      	beq.n	8007480 <__lshift+0xc8>
 800742a:	3101      	adds	r1, #1
 800742c:	1a09      	subs	r1, r1, r0
 800742e:	9105      	str	r1, [sp, #20]
 8007430:	2100      	movs	r1, #0
 8007432:	9503      	str	r5, [sp, #12]
 8007434:	4667      	mov	r7, ip
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	40b8      	lsls	r0, r7
 800743a:	4301      	orrs	r1, r0
 800743c:	9803      	ldr	r0, [sp, #12]
 800743e:	c002      	stmia	r0!, {r1}
 8007440:	cb02      	ldmia	r3!, {r1}
 8007442:	9003      	str	r0, [sp, #12]
 8007444:	9805      	ldr	r0, [sp, #20]
 8007446:	40c1      	lsrs	r1, r0
 8007448:	429a      	cmp	r2, r3
 800744a:	d8f3      	bhi.n	8007434 <__lshift+0x7c>
 800744c:	0020      	movs	r0, r4
 800744e:	3015      	adds	r0, #21
 8007450:	2304      	movs	r3, #4
 8007452:	4282      	cmp	r2, r0
 8007454:	d304      	bcc.n	8007460 <__lshift+0xa8>
 8007456:	1b13      	subs	r3, r2, r4
 8007458:	3b15      	subs	r3, #21
 800745a:	089b      	lsrs	r3, r3, #2
 800745c:	3301      	adds	r3, #1
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	50e9      	str	r1, [r5, r3]
 8007462:	2900      	cmp	r1, #0
 8007464:	d002      	beq.n	800746c <__lshift+0xb4>
 8007466:	9b02      	ldr	r3, [sp, #8]
 8007468:	3302      	adds	r3, #2
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	9b01      	ldr	r3, [sp, #4]
 800746e:	9804      	ldr	r0, [sp, #16]
 8007470:	3b01      	subs	r3, #1
 8007472:	0021      	movs	r1, r4
 8007474:	6133      	str	r3, [r6, #16]
 8007476:	f7ff fdcd 	bl	8007014 <_Bfree>
 800747a:	0030      	movs	r0, r6
 800747c:	b007      	add	sp, #28
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007480:	cb02      	ldmia	r3!, {r1}
 8007482:	c502      	stmia	r5!, {r1}
 8007484:	429a      	cmp	r2, r3
 8007486:	d8fb      	bhi.n	8007480 <__lshift+0xc8>
 8007488:	e7f0      	b.n	800746c <__lshift+0xb4>
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	0800864f 	.word	0x0800864f
 8007490:	08008660 	.word	0x08008660

08007494 <__mcmp>:
 8007494:	6902      	ldr	r2, [r0, #16]
 8007496:	690b      	ldr	r3, [r1, #16]
 8007498:	b530      	push	{r4, r5, lr}
 800749a:	0004      	movs	r4, r0
 800749c:	1ad0      	subs	r0, r2, r3
 800749e:	429a      	cmp	r2, r3
 80074a0:	d10d      	bne.n	80074be <__mcmp+0x2a>
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	3414      	adds	r4, #20
 80074a6:	3114      	adds	r1, #20
 80074a8:	18e2      	adds	r2, r4, r3
 80074aa:	18c9      	adds	r1, r1, r3
 80074ac:	3a04      	subs	r2, #4
 80074ae:	3904      	subs	r1, #4
 80074b0:	6815      	ldr	r5, [r2, #0]
 80074b2:	680b      	ldr	r3, [r1, #0]
 80074b4:	429d      	cmp	r5, r3
 80074b6:	d003      	beq.n	80074c0 <__mcmp+0x2c>
 80074b8:	2001      	movs	r0, #1
 80074ba:	429d      	cmp	r5, r3
 80074bc:	d303      	bcc.n	80074c6 <__mcmp+0x32>
 80074be:	bd30      	pop	{r4, r5, pc}
 80074c0:	4294      	cmp	r4, r2
 80074c2:	d3f3      	bcc.n	80074ac <__mcmp+0x18>
 80074c4:	e7fb      	b.n	80074be <__mcmp+0x2a>
 80074c6:	4240      	negs	r0, r0
 80074c8:	e7f9      	b.n	80074be <__mcmp+0x2a>
	...

080074cc <__mdiff>:
 80074cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ce:	000e      	movs	r6, r1
 80074d0:	0007      	movs	r7, r0
 80074d2:	0011      	movs	r1, r2
 80074d4:	0030      	movs	r0, r6
 80074d6:	b087      	sub	sp, #28
 80074d8:	0014      	movs	r4, r2
 80074da:	f7ff ffdb 	bl	8007494 <__mcmp>
 80074de:	1e05      	subs	r5, r0, #0
 80074e0:	d110      	bne.n	8007504 <__mdiff+0x38>
 80074e2:	0001      	movs	r1, r0
 80074e4:	0038      	movs	r0, r7
 80074e6:	f7ff fd51 	bl	8006f8c <_Balloc>
 80074ea:	1e02      	subs	r2, r0, #0
 80074ec:	d104      	bne.n	80074f8 <__mdiff+0x2c>
 80074ee:	4b40      	ldr	r3, [pc, #256]	; (80075f0 <__mdiff+0x124>)
 80074f0:	4940      	ldr	r1, [pc, #256]	; (80075f4 <__mdiff+0x128>)
 80074f2:	4841      	ldr	r0, [pc, #260]	; (80075f8 <__mdiff+0x12c>)
 80074f4:	f000 fa06 	bl	8007904 <__assert_func>
 80074f8:	2301      	movs	r3, #1
 80074fa:	6145      	str	r5, [r0, #20]
 80074fc:	6103      	str	r3, [r0, #16]
 80074fe:	0010      	movs	r0, r2
 8007500:	b007      	add	sp, #28
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007504:	2301      	movs	r3, #1
 8007506:	9301      	str	r3, [sp, #4]
 8007508:	2800      	cmp	r0, #0
 800750a:	db04      	blt.n	8007516 <__mdiff+0x4a>
 800750c:	0023      	movs	r3, r4
 800750e:	0034      	movs	r4, r6
 8007510:	001e      	movs	r6, r3
 8007512:	2300      	movs	r3, #0
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	0038      	movs	r0, r7
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	f7ff fd37 	bl	8006f8c <_Balloc>
 800751e:	1e02      	subs	r2, r0, #0
 8007520:	d103      	bne.n	800752a <__mdiff+0x5e>
 8007522:	2190      	movs	r1, #144	; 0x90
 8007524:	4b32      	ldr	r3, [pc, #200]	; (80075f0 <__mdiff+0x124>)
 8007526:	0089      	lsls	r1, r1, #2
 8007528:	e7e3      	b.n	80074f2 <__mdiff+0x26>
 800752a:	9b01      	ldr	r3, [sp, #4]
 800752c:	2700      	movs	r7, #0
 800752e:	60c3      	str	r3, [r0, #12]
 8007530:	6920      	ldr	r0, [r4, #16]
 8007532:	3414      	adds	r4, #20
 8007534:	9401      	str	r4, [sp, #4]
 8007536:	9b01      	ldr	r3, [sp, #4]
 8007538:	0084      	lsls	r4, r0, #2
 800753a:	191b      	adds	r3, r3, r4
 800753c:	0034      	movs	r4, r6
 800753e:	9302      	str	r3, [sp, #8]
 8007540:	6933      	ldr	r3, [r6, #16]
 8007542:	3414      	adds	r4, #20
 8007544:	0099      	lsls	r1, r3, #2
 8007546:	1863      	adds	r3, r4, r1
 8007548:	9303      	str	r3, [sp, #12]
 800754a:	0013      	movs	r3, r2
 800754c:	3314      	adds	r3, #20
 800754e:	469c      	mov	ip, r3
 8007550:	9305      	str	r3, [sp, #20]
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	9b04      	ldr	r3, [sp, #16]
 8007558:	cc02      	ldmia	r4!, {r1}
 800755a:	cb20      	ldmia	r3!, {r5}
 800755c:	9304      	str	r3, [sp, #16]
 800755e:	b2ab      	uxth	r3, r5
 8007560:	19df      	adds	r7, r3, r7
 8007562:	b28b      	uxth	r3, r1
 8007564:	1afb      	subs	r3, r7, r3
 8007566:	0c09      	lsrs	r1, r1, #16
 8007568:	0c2d      	lsrs	r5, r5, #16
 800756a:	1a6d      	subs	r5, r5, r1
 800756c:	1419      	asrs	r1, r3, #16
 800756e:	186d      	adds	r5, r5, r1
 8007570:	4661      	mov	r1, ip
 8007572:	142f      	asrs	r7, r5, #16
 8007574:	b29b      	uxth	r3, r3
 8007576:	042d      	lsls	r5, r5, #16
 8007578:	432b      	orrs	r3, r5
 800757a:	c108      	stmia	r1!, {r3}
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	468c      	mov	ip, r1
 8007580:	42a3      	cmp	r3, r4
 8007582:	d8e8      	bhi.n	8007556 <__mdiff+0x8a>
 8007584:	0031      	movs	r1, r6
 8007586:	9c03      	ldr	r4, [sp, #12]
 8007588:	3115      	adds	r1, #21
 800758a:	2304      	movs	r3, #4
 800758c:	428c      	cmp	r4, r1
 800758e:	d304      	bcc.n	800759a <__mdiff+0xce>
 8007590:	1ba3      	subs	r3, r4, r6
 8007592:	3b15      	subs	r3, #21
 8007594:	089b      	lsrs	r3, r3, #2
 8007596:	3301      	adds	r3, #1
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	9901      	ldr	r1, [sp, #4]
 800759c:	18cc      	adds	r4, r1, r3
 800759e:	9905      	ldr	r1, [sp, #20]
 80075a0:	0026      	movs	r6, r4
 80075a2:	18cb      	adds	r3, r1, r3
 80075a4:	469c      	mov	ip, r3
 80075a6:	9902      	ldr	r1, [sp, #8]
 80075a8:	428e      	cmp	r6, r1
 80075aa:	d310      	bcc.n	80075ce <__mdiff+0x102>
 80075ac:	9e02      	ldr	r6, [sp, #8]
 80075ae:	1ee1      	subs	r1, r4, #3
 80075b0:	2500      	movs	r5, #0
 80075b2:	428e      	cmp	r6, r1
 80075b4:	d304      	bcc.n	80075c0 <__mdiff+0xf4>
 80075b6:	0031      	movs	r1, r6
 80075b8:	3103      	adds	r1, #3
 80075ba:	1b0c      	subs	r4, r1, r4
 80075bc:	08a4      	lsrs	r4, r4, #2
 80075be:	00a5      	lsls	r5, r4, #2
 80075c0:	195b      	adds	r3, r3, r5
 80075c2:	3b04      	subs	r3, #4
 80075c4:	6819      	ldr	r1, [r3, #0]
 80075c6:	2900      	cmp	r1, #0
 80075c8:	d00f      	beq.n	80075ea <__mdiff+0x11e>
 80075ca:	6110      	str	r0, [r2, #16]
 80075cc:	e797      	b.n	80074fe <__mdiff+0x32>
 80075ce:	ce02      	ldmia	r6!, {r1}
 80075d0:	b28d      	uxth	r5, r1
 80075d2:	19ed      	adds	r5, r5, r7
 80075d4:	0c0f      	lsrs	r7, r1, #16
 80075d6:	1429      	asrs	r1, r5, #16
 80075d8:	1879      	adds	r1, r7, r1
 80075da:	140f      	asrs	r7, r1, #16
 80075dc:	b2ad      	uxth	r5, r5
 80075de:	0409      	lsls	r1, r1, #16
 80075e0:	430d      	orrs	r5, r1
 80075e2:	4661      	mov	r1, ip
 80075e4:	c120      	stmia	r1!, {r5}
 80075e6:	468c      	mov	ip, r1
 80075e8:	e7dd      	b.n	80075a6 <__mdiff+0xda>
 80075ea:	3801      	subs	r0, #1
 80075ec:	e7e9      	b.n	80075c2 <__mdiff+0xf6>
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	0800864f 	.word	0x0800864f
 80075f4:	00000232 	.word	0x00000232
 80075f8:	08008660 	.word	0x08008660

080075fc <__d2b>:
 80075fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075fe:	2101      	movs	r1, #1
 8007600:	0014      	movs	r4, r2
 8007602:	001e      	movs	r6, r3
 8007604:	9f08      	ldr	r7, [sp, #32]
 8007606:	f7ff fcc1 	bl	8006f8c <_Balloc>
 800760a:	1e05      	subs	r5, r0, #0
 800760c:	d105      	bne.n	800761a <__d2b+0x1e>
 800760e:	0002      	movs	r2, r0
 8007610:	4b26      	ldr	r3, [pc, #152]	; (80076ac <__d2b+0xb0>)
 8007612:	4927      	ldr	r1, [pc, #156]	; (80076b0 <__d2b+0xb4>)
 8007614:	4827      	ldr	r0, [pc, #156]	; (80076b4 <__d2b+0xb8>)
 8007616:	f000 f975 	bl	8007904 <__assert_func>
 800761a:	0333      	lsls	r3, r6, #12
 800761c:	0076      	lsls	r6, r6, #1
 800761e:	0b1b      	lsrs	r3, r3, #12
 8007620:	0d76      	lsrs	r6, r6, #21
 8007622:	d124      	bne.n	800766e <__d2b+0x72>
 8007624:	9301      	str	r3, [sp, #4]
 8007626:	2c00      	cmp	r4, #0
 8007628:	d027      	beq.n	800767a <__d2b+0x7e>
 800762a:	4668      	mov	r0, sp
 800762c:	9400      	str	r4, [sp, #0]
 800762e:	f7ff fd73 	bl	8007118 <__lo0bits>
 8007632:	9c00      	ldr	r4, [sp, #0]
 8007634:	2800      	cmp	r0, #0
 8007636:	d01e      	beq.n	8007676 <__d2b+0x7a>
 8007638:	9b01      	ldr	r3, [sp, #4]
 800763a:	2120      	movs	r1, #32
 800763c:	001a      	movs	r2, r3
 800763e:	1a09      	subs	r1, r1, r0
 8007640:	408a      	lsls	r2, r1
 8007642:	40c3      	lsrs	r3, r0
 8007644:	4322      	orrs	r2, r4
 8007646:	616a      	str	r2, [r5, #20]
 8007648:	9301      	str	r3, [sp, #4]
 800764a:	9c01      	ldr	r4, [sp, #4]
 800764c:	61ac      	str	r4, [r5, #24]
 800764e:	1e63      	subs	r3, r4, #1
 8007650:	419c      	sbcs	r4, r3
 8007652:	3401      	adds	r4, #1
 8007654:	612c      	str	r4, [r5, #16]
 8007656:	2e00      	cmp	r6, #0
 8007658:	d018      	beq.n	800768c <__d2b+0x90>
 800765a:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <__d2b+0xbc>)
 800765c:	18f6      	adds	r6, r6, r3
 800765e:	2335      	movs	r3, #53	; 0x35
 8007660:	1836      	adds	r6, r6, r0
 8007662:	1a18      	subs	r0, r3, r0
 8007664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007666:	603e      	str	r6, [r7, #0]
 8007668:	6018      	str	r0, [r3, #0]
 800766a:	0028      	movs	r0, r5
 800766c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800766e:	2280      	movs	r2, #128	; 0x80
 8007670:	0352      	lsls	r2, r2, #13
 8007672:	4313      	orrs	r3, r2
 8007674:	e7d6      	b.n	8007624 <__d2b+0x28>
 8007676:	616c      	str	r4, [r5, #20]
 8007678:	e7e7      	b.n	800764a <__d2b+0x4e>
 800767a:	a801      	add	r0, sp, #4
 800767c:	f7ff fd4c 	bl	8007118 <__lo0bits>
 8007680:	2401      	movs	r4, #1
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	612c      	str	r4, [r5, #16]
 8007686:	616b      	str	r3, [r5, #20]
 8007688:	3020      	adds	r0, #32
 800768a:	e7e4      	b.n	8007656 <__d2b+0x5a>
 800768c:	4b0b      	ldr	r3, [pc, #44]	; (80076bc <__d2b+0xc0>)
 800768e:	18c0      	adds	r0, r0, r3
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <__d2b+0xc4>)
 8007692:	6038      	str	r0, [r7, #0]
 8007694:	18e3      	adds	r3, r4, r3
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	18eb      	adds	r3, r5, r3
 800769a:	6958      	ldr	r0, [r3, #20]
 800769c:	f7ff fd22 	bl	80070e4 <__hi0bits>
 80076a0:	0164      	lsls	r4, r4, #5
 80076a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a4:	1a24      	subs	r4, r4, r0
 80076a6:	601c      	str	r4, [r3, #0]
 80076a8:	e7df      	b.n	800766a <__d2b+0x6e>
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	0800864f 	.word	0x0800864f
 80076b0:	0000030a 	.word	0x0000030a
 80076b4:	08008660 	.word	0x08008660
 80076b8:	fffffbcd 	.word	0xfffffbcd
 80076bc:	fffffbce 	.word	0xfffffbce
 80076c0:	3fffffff 	.word	0x3fffffff

080076c4 <_calloc_r>:
 80076c4:	b570      	push	{r4, r5, r6, lr}
 80076c6:	0c13      	lsrs	r3, r2, #16
 80076c8:	0c0d      	lsrs	r5, r1, #16
 80076ca:	d11e      	bne.n	800770a <_calloc_r+0x46>
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10c      	bne.n	80076ea <_calloc_r+0x26>
 80076d0:	b289      	uxth	r1, r1
 80076d2:	b294      	uxth	r4, r2
 80076d4:	434c      	muls	r4, r1
 80076d6:	0021      	movs	r1, r4
 80076d8:	f000 f88c 	bl	80077f4 <_malloc_r>
 80076dc:	1e05      	subs	r5, r0, #0
 80076de:	d01b      	beq.n	8007718 <_calloc_r+0x54>
 80076e0:	0022      	movs	r2, r4
 80076e2:	2100      	movs	r1, #0
 80076e4:	f7fe f914 	bl	8005910 <memset>
 80076e8:	e016      	b.n	8007718 <_calloc_r+0x54>
 80076ea:	1c1d      	adds	r5, r3, #0
 80076ec:	1c0b      	adds	r3, r1, #0
 80076ee:	b292      	uxth	r2, r2
 80076f0:	b289      	uxth	r1, r1
 80076f2:	b29c      	uxth	r4, r3
 80076f4:	4351      	muls	r1, r2
 80076f6:	b2ab      	uxth	r3, r5
 80076f8:	4363      	muls	r3, r4
 80076fa:	0c0c      	lsrs	r4, r1, #16
 80076fc:	191c      	adds	r4, r3, r4
 80076fe:	0c22      	lsrs	r2, r4, #16
 8007700:	d107      	bne.n	8007712 <_calloc_r+0x4e>
 8007702:	0424      	lsls	r4, r4, #16
 8007704:	b289      	uxth	r1, r1
 8007706:	430c      	orrs	r4, r1
 8007708:	e7e5      	b.n	80076d6 <_calloc_r+0x12>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <_calloc_r+0x4e>
 800770e:	1c13      	adds	r3, r2, #0
 8007710:	e7ed      	b.n	80076ee <_calloc_r+0x2a>
 8007712:	230c      	movs	r3, #12
 8007714:	2500      	movs	r5, #0
 8007716:	6003      	str	r3, [r0, #0]
 8007718:	0028      	movs	r0, r5
 800771a:	bd70      	pop	{r4, r5, r6, pc}

0800771c <_free_r>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	0005      	movs	r5, r0
 8007720:	2900      	cmp	r1, #0
 8007722:	d010      	beq.n	8007746 <_free_r+0x2a>
 8007724:	1f0c      	subs	r4, r1, #4
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	da00      	bge.n	800772e <_free_r+0x12>
 800772c:	18e4      	adds	r4, r4, r3
 800772e:	0028      	movs	r0, r5
 8007730:	f000 f928 	bl	8007984 <__malloc_lock>
 8007734:	4a1d      	ldr	r2, [pc, #116]	; (80077ac <_free_r+0x90>)
 8007736:	6813      	ldr	r3, [r2, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d105      	bne.n	8007748 <_free_r+0x2c>
 800773c:	6063      	str	r3, [r4, #4]
 800773e:	6014      	str	r4, [r2, #0]
 8007740:	0028      	movs	r0, r5
 8007742:	f000 f927 	bl	8007994 <__malloc_unlock>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	42a3      	cmp	r3, r4
 800774a:	d908      	bls.n	800775e <_free_r+0x42>
 800774c:	6821      	ldr	r1, [r4, #0]
 800774e:	1860      	adds	r0, r4, r1
 8007750:	4283      	cmp	r3, r0
 8007752:	d1f3      	bne.n	800773c <_free_r+0x20>
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	1841      	adds	r1, r0, r1
 800775a:	6021      	str	r1, [r4, #0]
 800775c:	e7ee      	b.n	800773c <_free_r+0x20>
 800775e:	001a      	movs	r2, r3
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <_free_r+0x4e>
 8007766:	42a3      	cmp	r3, r4
 8007768:	d9f9      	bls.n	800775e <_free_r+0x42>
 800776a:	6811      	ldr	r1, [r2, #0]
 800776c:	1850      	adds	r0, r2, r1
 800776e:	42a0      	cmp	r0, r4
 8007770:	d10b      	bne.n	800778a <_free_r+0x6e>
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	1809      	adds	r1, r1, r0
 8007776:	1850      	adds	r0, r2, r1
 8007778:	6011      	str	r1, [r2, #0]
 800777a:	4283      	cmp	r3, r0
 800777c:	d1e0      	bne.n	8007740 <_free_r+0x24>
 800777e:	6818      	ldr	r0, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	1841      	adds	r1, r0, r1
 8007784:	6011      	str	r1, [r2, #0]
 8007786:	6053      	str	r3, [r2, #4]
 8007788:	e7da      	b.n	8007740 <_free_r+0x24>
 800778a:	42a0      	cmp	r0, r4
 800778c:	d902      	bls.n	8007794 <_free_r+0x78>
 800778e:	230c      	movs	r3, #12
 8007790:	602b      	str	r3, [r5, #0]
 8007792:	e7d5      	b.n	8007740 <_free_r+0x24>
 8007794:	6821      	ldr	r1, [r4, #0]
 8007796:	1860      	adds	r0, r4, r1
 8007798:	4283      	cmp	r3, r0
 800779a:	d103      	bne.n	80077a4 <_free_r+0x88>
 800779c:	6818      	ldr	r0, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	1841      	adds	r1, r0, r1
 80077a2:	6021      	str	r1, [r4, #0]
 80077a4:	6063      	str	r3, [r4, #4]
 80077a6:	6054      	str	r4, [r2, #4]
 80077a8:	e7ca      	b.n	8007740 <_free_r+0x24>
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	200002f0 	.word	0x200002f0

080077b0 <sbrk_aligned>:
 80077b0:	b570      	push	{r4, r5, r6, lr}
 80077b2:	4e0f      	ldr	r6, [pc, #60]	; (80077f0 <sbrk_aligned+0x40>)
 80077b4:	000d      	movs	r5, r1
 80077b6:	6831      	ldr	r1, [r6, #0]
 80077b8:	0004      	movs	r4, r0
 80077ba:	2900      	cmp	r1, #0
 80077bc:	d102      	bne.n	80077c4 <sbrk_aligned+0x14>
 80077be:	f000 f88f 	bl	80078e0 <_sbrk_r>
 80077c2:	6030      	str	r0, [r6, #0]
 80077c4:	0029      	movs	r1, r5
 80077c6:	0020      	movs	r0, r4
 80077c8:	f000 f88a 	bl	80078e0 <_sbrk_r>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d00a      	beq.n	80077e6 <sbrk_aligned+0x36>
 80077d0:	2303      	movs	r3, #3
 80077d2:	1cc5      	adds	r5, r0, #3
 80077d4:	439d      	bics	r5, r3
 80077d6:	42a8      	cmp	r0, r5
 80077d8:	d007      	beq.n	80077ea <sbrk_aligned+0x3a>
 80077da:	1a29      	subs	r1, r5, r0
 80077dc:	0020      	movs	r0, r4
 80077de:	f000 f87f 	bl	80078e0 <_sbrk_r>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	d101      	bne.n	80077ea <sbrk_aligned+0x3a>
 80077e6:	2501      	movs	r5, #1
 80077e8:	426d      	negs	r5, r5
 80077ea:	0028      	movs	r0, r5
 80077ec:	bd70      	pop	{r4, r5, r6, pc}
 80077ee:	46c0      	nop			; (mov r8, r8)
 80077f0:	200002f4 	.word	0x200002f4

080077f4 <_malloc_r>:
 80077f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077f6:	2203      	movs	r2, #3
 80077f8:	1ccb      	adds	r3, r1, #3
 80077fa:	4393      	bics	r3, r2
 80077fc:	3308      	adds	r3, #8
 80077fe:	0006      	movs	r6, r0
 8007800:	001f      	movs	r7, r3
 8007802:	2b0c      	cmp	r3, #12
 8007804:	d232      	bcs.n	800786c <_malloc_r+0x78>
 8007806:	270c      	movs	r7, #12
 8007808:	42b9      	cmp	r1, r7
 800780a:	d831      	bhi.n	8007870 <_malloc_r+0x7c>
 800780c:	0030      	movs	r0, r6
 800780e:	f000 f8b9 	bl	8007984 <__malloc_lock>
 8007812:	4d32      	ldr	r5, [pc, #200]	; (80078dc <_malloc_r+0xe8>)
 8007814:	682b      	ldr	r3, [r5, #0]
 8007816:	001c      	movs	r4, r3
 8007818:	2c00      	cmp	r4, #0
 800781a:	d12e      	bne.n	800787a <_malloc_r+0x86>
 800781c:	0039      	movs	r1, r7
 800781e:	0030      	movs	r0, r6
 8007820:	f7ff ffc6 	bl	80077b0 <sbrk_aligned>
 8007824:	0004      	movs	r4, r0
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d11e      	bne.n	8007868 <_malloc_r+0x74>
 800782a:	682c      	ldr	r4, [r5, #0]
 800782c:	0025      	movs	r5, r4
 800782e:	2d00      	cmp	r5, #0
 8007830:	d14a      	bne.n	80078c8 <_malloc_r+0xd4>
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	0029      	movs	r1, r5
 8007836:	18e3      	adds	r3, r4, r3
 8007838:	0030      	movs	r0, r6
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	f000 f850 	bl	80078e0 <_sbrk_r>
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	4283      	cmp	r3, r0
 8007844:	d143      	bne.n	80078ce <_malloc_r+0xda>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	3703      	adds	r7, #3
 800784a:	1aff      	subs	r7, r7, r3
 800784c:	2303      	movs	r3, #3
 800784e:	439f      	bics	r7, r3
 8007850:	3708      	adds	r7, #8
 8007852:	2f0c      	cmp	r7, #12
 8007854:	d200      	bcs.n	8007858 <_malloc_r+0x64>
 8007856:	270c      	movs	r7, #12
 8007858:	0039      	movs	r1, r7
 800785a:	0030      	movs	r0, r6
 800785c:	f7ff ffa8 	bl	80077b0 <sbrk_aligned>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d034      	beq.n	80078ce <_malloc_r+0xda>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	19df      	adds	r7, r3, r7
 8007868:	6027      	str	r7, [r4, #0]
 800786a:	e013      	b.n	8007894 <_malloc_r+0xa0>
 800786c:	2b00      	cmp	r3, #0
 800786e:	dacb      	bge.n	8007808 <_malloc_r+0x14>
 8007870:	230c      	movs	r3, #12
 8007872:	2500      	movs	r5, #0
 8007874:	6033      	str	r3, [r6, #0]
 8007876:	0028      	movs	r0, r5
 8007878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800787a:	6822      	ldr	r2, [r4, #0]
 800787c:	1bd1      	subs	r1, r2, r7
 800787e:	d420      	bmi.n	80078c2 <_malloc_r+0xce>
 8007880:	290b      	cmp	r1, #11
 8007882:	d917      	bls.n	80078b4 <_malloc_r+0xc0>
 8007884:	19e2      	adds	r2, r4, r7
 8007886:	6027      	str	r7, [r4, #0]
 8007888:	42a3      	cmp	r3, r4
 800788a:	d111      	bne.n	80078b0 <_malloc_r+0xbc>
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	6863      	ldr	r3, [r4, #4]
 8007890:	6011      	str	r1, [r2, #0]
 8007892:	6053      	str	r3, [r2, #4]
 8007894:	0030      	movs	r0, r6
 8007896:	0025      	movs	r5, r4
 8007898:	f000 f87c 	bl	8007994 <__malloc_unlock>
 800789c:	2207      	movs	r2, #7
 800789e:	350b      	adds	r5, #11
 80078a0:	1d23      	adds	r3, r4, #4
 80078a2:	4395      	bics	r5, r2
 80078a4:	1aea      	subs	r2, r5, r3
 80078a6:	429d      	cmp	r5, r3
 80078a8:	d0e5      	beq.n	8007876 <_malloc_r+0x82>
 80078aa:	1b5b      	subs	r3, r3, r5
 80078ac:	50a3      	str	r3, [r4, r2]
 80078ae:	e7e2      	b.n	8007876 <_malloc_r+0x82>
 80078b0:	605a      	str	r2, [r3, #4]
 80078b2:	e7ec      	b.n	800788e <_malloc_r+0x9a>
 80078b4:	6862      	ldr	r2, [r4, #4]
 80078b6:	42a3      	cmp	r3, r4
 80078b8:	d101      	bne.n	80078be <_malloc_r+0xca>
 80078ba:	602a      	str	r2, [r5, #0]
 80078bc:	e7ea      	b.n	8007894 <_malloc_r+0xa0>
 80078be:	605a      	str	r2, [r3, #4]
 80078c0:	e7e8      	b.n	8007894 <_malloc_r+0xa0>
 80078c2:	0023      	movs	r3, r4
 80078c4:	6864      	ldr	r4, [r4, #4]
 80078c6:	e7a7      	b.n	8007818 <_malloc_r+0x24>
 80078c8:	002c      	movs	r4, r5
 80078ca:	686d      	ldr	r5, [r5, #4]
 80078cc:	e7af      	b.n	800782e <_malloc_r+0x3a>
 80078ce:	230c      	movs	r3, #12
 80078d0:	0030      	movs	r0, r6
 80078d2:	6033      	str	r3, [r6, #0]
 80078d4:	f000 f85e 	bl	8007994 <__malloc_unlock>
 80078d8:	e7cd      	b.n	8007876 <_malloc_r+0x82>
 80078da:	46c0      	nop			; (mov r8, r8)
 80078dc:	200002f0 	.word	0x200002f0

080078e0 <_sbrk_r>:
 80078e0:	2300      	movs	r3, #0
 80078e2:	b570      	push	{r4, r5, r6, lr}
 80078e4:	4d06      	ldr	r5, [pc, #24]	; (8007900 <_sbrk_r+0x20>)
 80078e6:	0004      	movs	r4, r0
 80078e8:	0008      	movs	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa ff84 	bl	80027f8 <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d103      	bne.n	80078fc <_sbrk_r+0x1c>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d000      	beq.n	80078fc <_sbrk_r+0x1c>
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
 80078fe:	46c0      	nop			; (mov r8, r8)
 8007900:	200002f8 	.word	0x200002f8

08007904 <__assert_func>:
 8007904:	b530      	push	{r4, r5, lr}
 8007906:	0014      	movs	r4, r2
 8007908:	001a      	movs	r2, r3
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <__assert_func+0x2c>)
 800790c:	0005      	movs	r5, r0
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	b085      	sub	sp, #20
 8007912:	68d8      	ldr	r0, [r3, #12]
 8007914:	4b07      	ldr	r3, [pc, #28]	; (8007934 <__assert_func+0x30>)
 8007916:	2c00      	cmp	r4, #0
 8007918:	d101      	bne.n	800791e <__assert_func+0x1a>
 800791a:	4b07      	ldr	r3, [pc, #28]	; (8007938 <__assert_func+0x34>)
 800791c:	001c      	movs	r4, r3
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	9100      	str	r1, [sp, #0]
 8007922:	002b      	movs	r3, r5
 8007924:	4905      	ldr	r1, [pc, #20]	; (800793c <__assert_func+0x38>)
 8007926:	9402      	str	r4, [sp, #8]
 8007928:	f000 f80a 	bl	8007940 <fiprintf>
 800792c:	f000 fa78 	bl	8007e20 <abort>
 8007930:	20000034 	.word	0x20000034
 8007934:	080087bc 	.word	0x080087bc
 8007938:	080087f7 	.word	0x080087f7
 800793c:	080087c9 	.word	0x080087c9

08007940 <fiprintf>:
 8007940:	b40e      	push	{r1, r2, r3}
 8007942:	b503      	push	{r0, r1, lr}
 8007944:	0001      	movs	r1, r0
 8007946:	ab03      	add	r3, sp, #12
 8007948:	4804      	ldr	r0, [pc, #16]	; (800795c <fiprintf+0x1c>)
 800794a:	cb04      	ldmia	r3!, {r2}
 800794c:	6800      	ldr	r0, [r0, #0]
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	f000 f850 	bl	80079f4 <_vfiprintf_r>
 8007954:	b002      	add	sp, #8
 8007956:	bc08      	pop	{r3}
 8007958:	b003      	add	sp, #12
 800795a:	4718      	bx	r3
 800795c:	20000034 	.word	0x20000034

08007960 <__ascii_mbtowc>:
 8007960:	b082      	sub	sp, #8
 8007962:	2900      	cmp	r1, #0
 8007964:	d100      	bne.n	8007968 <__ascii_mbtowc+0x8>
 8007966:	a901      	add	r1, sp, #4
 8007968:	1e10      	subs	r0, r2, #0
 800796a:	d006      	beq.n	800797a <__ascii_mbtowc+0x1a>
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <__ascii_mbtowc+0x1e>
 8007970:	7813      	ldrb	r3, [r2, #0]
 8007972:	600b      	str	r3, [r1, #0]
 8007974:	7810      	ldrb	r0, [r2, #0]
 8007976:	1e43      	subs	r3, r0, #1
 8007978:	4198      	sbcs	r0, r3
 800797a:	b002      	add	sp, #8
 800797c:	4770      	bx	lr
 800797e:	2002      	movs	r0, #2
 8007980:	4240      	negs	r0, r0
 8007982:	e7fa      	b.n	800797a <__ascii_mbtowc+0x1a>

08007984 <__malloc_lock>:
 8007984:	b510      	push	{r4, lr}
 8007986:	4802      	ldr	r0, [pc, #8]	; (8007990 <__malloc_lock+0xc>)
 8007988:	f000 fc21 	bl	80081ce <__retarget_lock_acquire_recursive>
 800798c:	bd10      	pop	{r4, pc}
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	200002fc 	.word	0x200002fc

08007994 <__malloc_unlock>:
 8007994:	b510      	push	{r4, lr}
 8007996:	4802      	ldr	r0, [pc, #8]	; (80079a0 <__malloc_unlock+0xc>)
 8007998:	f000 fc1a 	bl	80081d0 <__retarget_lock_release_recursive>
 800799c:	bd10      	pop	{r4, pc}
 800799e:	46c0      	nop			; (mov r8, r8)
 80079a0:	200002fc 	.word	0x200002fc

080079a4 <__sfputc_r>:
 80079a4:	6893      	ldr	r3, [r2, #8]
 80079a6:	b510      	push	{r4, lr}
 80079a8:	3b01      	subs	r3, #1
 80079aa:	6093      	str	r3, [r2, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	da04      	bge.n	80079ba <__sfputc_r+0x16>
 80079b0:	6994      	ldr	r4, [r2, #24]
 80079b2:	42a3      	cmp	r3, r4
 80079b4:	db07      	blt.n	80079c6 <__sfputc_r+0x22>
 80079b6:	290a      	cmp	r1, #10
 80079b8:	d005      	beq.n	80079c6 <__sfputc_r+0x22>
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	1c58      	adds	r0, r3, #1
 80079be:	6010      	str	r0, [r2, #0]
 80079c0:	7019      	strb	r1, [r3, #0]
 80079c2:	0008      	movs	r0, r1
 80079c4:	bd10      	pop	{r4, pc}
 80079c6:	f000 f94f 	bl	8007c68 <__swbuf_r>
 80079ca:	0001      	movs	r1, r0
 80079cc:	e7f9      	b.n	80079c2 <__sfputc_r+0x1e>

080079ce <__sfputs_r>:
 80079ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d0:	0006      	movs	r6, r0
 80079d2:	000f      	movs	r7, r1
 80079d4:	0014      	movs	r4, r2
 80079d6:	18d5      	adds	r5, r2, r3
 80079d8:	42ac      	cmp	r4, r5
 80079da:	d101      	bne.n	80079e0 <__sfputs_r+0x12>
 80079dc:	2000      	movs	r0, #0
 80079de:	e007      	b.n	80079f0 <__sfputs_r+0x22>
 80079e0:	7821      	ldrb	r1, [r4, #0]
 80079e2:	003a      	movs	r2, r7
 80079e4:	0030      	movs	r0, r6
 80079e6:	f7ff ffdd 	bl	80079a4 <__sfputc_r>
 80079ea:	3401      	adds	r4, #1
 80079ec:	1c43      	adds	r3, r0, #1
 80079ee:	d1f3      	bne.n	80079d8 <__sfputs_r+0xa>
 80079f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079f4 <_vfiprintf_r>:
 80079f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079f6:	b0a1      	sub	sp, #132	; 0x84
 80079f8:	0006      	movs	r6, r0
 80079fa:	000c      	movs	r4, r1
 80079fc:	001f      	movs	r7, r3
 80079fe:	9203      	str	r2, [sp, #12]
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d004      	beq.n	8007a0e <_vfiprintf_r+0x1a>
 8007a04:	6983      	ldr	r3, [r0, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <_vfiprintf_r+0x1a>
 8007a0a:	f000 fb3f 	bl	800808c <__sinit>
 8007a0e:	4b8e      	ldr	r3, [pc, #568]	; (8007c48 <_vfiprintf_r+0x254>)
 8007a10:	429c      	cmp	r4, r3
 8007a12:	d11c      	bne.n	8007a4e <_vfiprintf_r+0x5a>
 8007a14:	6874      	ldr	r4, [r6, #4]
 8007a16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a18:	07db      	lsls	r3, r3, #31
 8007a1a:	d405      	bmi.n	8007a28 <_vfiprintf_r+0x34>
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	059b      	lsls	r3, r3, #22
 8007a20:	d402      	bmi.n	8007a28 <_vfiprintf_r+0x34>
 8007a22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a24:	f000 fbd3 	bl	80081ce <__retarget_lock_acquire_recursive>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	071b      	lsls	r3, r3, #28
 8007a2c:	d502      	bpl.n	8007a34 <_vfiprintf_r+0x40>
 8007a2e:	6923      	ldr	r3, [r4, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d11d      	bne.n	8007a70 <_vfiprintf_r+0x7c>
 8007a34:	0021      	movs	r1, r4
 8007a36:	0030      	movs	r0, r6
 8007a38:	f000 f97a 	bl	8007d30 <__swsetup_r>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d017      	beq.n	8007a70 <_vfiprintf_r+0x7c>
 8007a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a42:	07db      	lsls	r3, r3, #31
 8007a44:	d50d      	bpl.n	8007a62 <_vfiprintf_r+0x6e>
 8007a46:	2001      	movs	r0, #1
 8007a48:	4240      	negs	r0, r0
 8007a4a:	b021      	add	sp, #132	; 0x84
 8007a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4e:	4b7f      	ldr	r3, [pc, #508]	; (8007c4c <_vfiprintf_r+0x258>)
 8007a50:	429c      	cmp	r4, r3
 8007a52:	d101      	bne.n	8007a58 <_vfiprintf_r+0x64>
 8007a54:	68b4      	ldr	r4, [r6, #8]
 8007a56:	e7de      	b.n	8007a16 <_vfiprintf_r+0x22>
 8007a58:	4b7d      	ldr	r3, [pc, #500]	; (8007c50 <_vfiprintf_r+0x25c>)
 8007a5a:	429c      	cmp	r4, r3
 8007a5c:	d1db      	bne.n	8007a16 <_vfiprintf_r+0x22>
 8007a5e:	68f4      	ldr	r4, [r6, #12]
 8007a60:	e7d9      	b.n	8007a16 <_vfiprintf_r+0x22>
 8007a62:	89a3      	ldrh	r3, [r4, #12]
 8007a64:	059b      	lsls	r3, r3, #22
 8007a66:	d4ee      	bmi.n	8007a46 <_vfiprintf_r+0x52>
 8007a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a6a:	f000 fbb1 	bl	80081d0 <__retarget_lock_release_recursive>
 8007a6e:	e7ea      	b.n	8007a46 <_vfiprintf_r+0x52>
 8007a70:	2300      	movs	r3, #0
 8007a72:	ad08      	add	r5, sp, #32
 8007a74:	616b      	str	r3, [r5, #20]
 8007a76:	3320      	adds	r3, #32
 8007a78:	766b      	strb	r3, [r5, #25]
 8007a7a:	3310      	adds	r3, #16
 8007a7c:	76ab      	strb	r3, [r5, #26]
 8007a7e:	9707      	str	r7, [sp, #28]
 8007a80:	9f03      	ldr	r7, [sp, #12]
 8007a82:	783b      	ldrb	r3, [r7, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <_vfiprintf_r+0x98>
 8007a88:	2b25      	cmp	r3, #37	; 0x25
 8007a8a:	d14e      	bne.n	8007b2a <_vfiprintf_r+0x136>
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	1afb      	subs	r3, r7, r3
 8007a90:	9305      	str	r3, [sp, #20]
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	429f      	cmp	r7, r3
 8007a96:	d00d      	beq.n	8007ab4 <_vfiprintf_r+0xc0>
 8007a98:	9b05      	ldr	r3, [sp, #20]
 8007a9a:	0021      	movs	r1, r4
 8007a9c:	0030      	movs	r0, r6
 8007a9e:	9a03      	ldr	r2, [sp, #12]
 8007aa0:	f7ff ff95 	bl	80079ce <__sfputs_r>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d100      	bne.n	8007aaa <_vfiprintf_r+0xb6>
 8007aa8:	e0b5      	b.n	8007c16 <_vfiprintf_r+0x222>
 8007aaa:	696a      	ldr	r2, [r5, #20]
 8007aac:	9b05      	ldr	r3, [sp, #20]
 8007aae:	4694      	mov	ip, r2
 8007ab0:	4463      	add	r3, ip
 8007ab2:	616b      	str	r3, [r5, #20]
 8007ab4:	783b      	ldrb	r3, [r7, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d100      	bne.n	8007abc <_vfiprintf_r+0xc8>
 8007aba:	e0ac      	b.n	8007c16 <_vfiprintf_r+0x222>
 8007abc:	2201      	movs	r2, #1
 8007abe:	1c7b      	adds	r3, r7, #1
 8007ac0:	9303      	str	r3, [sp, #12]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	4252      	negs	r2, r2
 8007ac6:	606a      	str	r2, [r5, #4]
 8007ac8:	a904      	add	r1, sp, #16
 8007aca:	3254      	adds	r2, #84	; 0x54
 8007acc:	1852      	adds	r2, r2, r1
 8007ace:	602b      	str	r3, [r5, #0]
 8007ad0:	60eb      	str	r3, [r5, #12]
 8007ad2:	60ab      	str	r3, [r5, #8]
 8007ad4:	7013      	strb	r3, [r2, #0]
 8007ad6:	65ab      	str	r3, [r5, #88]	; 0x58
 8007ad8:	9b03      	ldr	r3, [sp, #12]
 8007ada:	2205      	movs	r2, #5
 8007adc:	7819      	ldrb	r1, [r3, #0]
 8007ade:	485d      	ldr	r0, [pc, #372]	; (8007c54 <_vfiprintf_r+0x260>)
 8007ae0:	f7ff fa40 	bl	8006f64 <memchr>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	1c5f      	adds	r7, r3, #1
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d120      	bne.n	8007b2e <_vfiprintf_r+0x13a>
 8007aec:	682a      	ldr	r2, [r5, #0]
 8007aee:	06d3      	lsls	r3, r2, #27
 8007af0:	d504      	bpl.n	8007afc <_vfiprintf_r+0x108>
 8007af2:	2353      	movs	r3, #83	; 0x53
 8007af4:	a904      	add	r1, sp, #16
 8007af6:	185b      	adds	r3, r3, r1
 8007af8:	2120      	movs	r1, #32
 8007afa:	7019      	strb	r1, [r3, #0]
 8007afc:	0713      	lsls	r3, r2, #28
 8007afe:	d504      	bpl.n	8007b0a <_vfiprintf_r+0x116>
 8007b00:	2353      	movs	r3, #83	; 0x53
 8007b02:	a904      	add	r1, sp, #16
 8007b04:	185b      	adds	r3, r3, r1
 8007b06:	212b      	movs	r1, #43	; 0x2b
 8007b08:	7019      	strb	r1, [r3, #0]
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b10:	d016      	beq.n	8007b40 <_vfiprintf_r+0x14c>
 8007b12:	2100      	movs	r1, #0
 8007b14:	68eb      	ldr	r3, [r5, #12]
 8007b16:	9f03      	ldr	r7, [sp, #12]
 8007b18:	783a      	ldrb	r2, [r7, #0]
 8007b1a:	1c78      	adds	r0, r7, #1
 8007b1c:	3a30      	subs	r2, #48	; 0x30
 8007b1e:	4684      	mov	ip, r0
 8007b20:	2a09      	cmp	r2, #9
 8007b22:	d94f      	bls.n	8007bc4 <_vfiprintf_r+0x1d0>
 8007b24:	2900      	cmp	r1, #0
 8007b26:	d111      	bne.n	8007b4c <_vfiprintf_r+0x158>
 8007b28:	e017      	b.n	8007b5a <_vfiprintf_r+0x166>
 8007b2a:	3701      	adds	r7, #1
 8007b2c:	e7a9      	b.n	8007a82 <_vfiprintf_r+0x8e>
 8007b2e:	4b49      	ldr	r3, [pc, #292]	; (8007c54 <_vfiprintf_r+0x260>)
 8007b30:	682a      	ldr	r2, [r5, #0]
 8007b32:	1ac0      	subs	r0, r0, r3
 8007b34:	2301      	movs	r3, #1
 8007b36:	4083      	lsls	r3, r0
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	9703      	str	r7, [sp, #12]
 8007b3e:	e7cb      	b.n	8007ad8 <_vfiprintf_r+0xe4>
 8007b40:	9b07      	ldr	r3, [sp, #28]
 8007b42:	1d19      	adds	r1, r3, #4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	9107      	str	r1, [sp, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	db01      	blt.n	8007b50 <_vfiprintf_r+0x15c>
 8007b4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b4e:	e004      	b.n	8007b5a <_vfiprintf_r+0x166>
 8007b50:	425b      	negs	r3, r3
 8007b52:	60eb      	str	r3, [r5, #12]
 8007b54:	2302      	movs	r3, #2
 8007b56:	4313      	orrs	r3, r2
 8007b58:	602b      	str	r3, [r5, #0]
 8007b5a:	783b      	ldrb	r3, [r7, #0]
 8007b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b5e:	d10a      	bne.n	8007b76 <_vfiprintf_r+0x182>
 8007b60:	787b      	ldrb	r3, [r7, #1]
 8007b62:	2b2a      	cmp	r3, #42	; 0x2a
 8007b64:	d137      	bne.n	8007bd6 <_vfiprintf_r+0x1e2>
 8007b66:	9b07      	ldr	r3, [sp, #28]
 8007b68:	3702      	adds	r7, #2
 8007b6a:	1d1a      	adds	r2, r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9207      	str	r2, [sp, #28]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	db2d      	blt.n	8007bd0 <_vfiprintf_r+0x1dc>
 8007b74:	9309      	str	r3, [sp, #36]	; 0x24
 8007b76:	2203      	movs	r2, #3
 8007b78:	7839      	ldrb	r1, [r7, #0]
 8007b7a:	4837      	ldr	r0, [pc, #220]	; (8007c58 <_vfiprintf_r+0x264>)
 8007b7c:	f7ff f9f2 	bl	8006f64 <memchr>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d007      	beq.n	8007b94 <_vfiprintf_r+0x1a0>
 8007b84:	4b34      	ldr	r3, [pc, #208]	; (8007c58 <_vfiprintf_r+0x264>)
 8007b86:	682a      	ldr	r2, [r5, #0]
 8007b88:	1ac0      	subs	r0, r0, r3
 8007b8a:	2340      	movs	r3, #64	; 0x40
 8007b8c:	4083      	lsls	r3, r0
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	3701      	adds	r7, #1
 8007b92:	602b      	str	r3, [r5, #0]
 8007b94:	7839      	ldrb	r1, [r7, #0]
 8007b96:	1c7b      	adds	r3, r7, #1
 8007b98:	2206      	movs	r2, #6
 8007b9a:	4830      	ldr	r0, [pc, #192]	; (8007c5c <_vfiprintf_r+0x268>)
 8007b9c:	9303      	str	r3, [sp, #12]
 8007b9e:	7629      	strb	r1, [r5, #24]
 8007ba0:	f7ff f9e0 	bl	8006f64 <memchr>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d045      	beq.n	8007c34 <_vfiprintf_r+0x240>
 8007ba8:	4b2d      	ldr	r3, [pc, #180]	; (8007c60 <_vfiprintf_r+0x26c>)
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d127      	bne.n	8007bfe <_vfiprintf_r+0x20a>
 8007bae:	2207      	movs	r2, #7
 8007bb0:	9b07      	ldr	r3, [sp, #28]
 8007bb2:	3307      	adds	r3, #7
 8007bb4:	4393      	bics	r3, r2
 8007bb6:	3308      	adds	r3, #8
 8007bb8:	9307      	str	r3, [sp, #28]
 8007bba:	696b      	ldr	r3, [r5, #20]
 8007bbc:	9a04      	ldr	r2, [sp, #16]
 8007bbe:	189b      	adds	r3, r3, r2
 8007bc0:	616b      	str	r3, [r5, #20]
 8007bc2:	e75d      	b.n	8007a80 <_vfiprintf_r+0x8c>
 8007bc4:	210a      	movs	r1, #10
 8007bc6:	434b      	muls	r3, r1
 8007bc8:	4667      	mov	r7, ip
 8007bca:	189b      	adds	r3, r3, r2
 8007bcc:	3909      	subs	r1, #9
 8007bce:	e7a3      	b.n	8007b18 <_vfiprintf_r+0x124>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	425b      	negs	r3, r3
 8007bd4:	e7ce      	b.n	8007b74 <_vfiprintf_r+0x180>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	001a      	movs	r2, r3
 8007bda:	3701      	adds	r7, #1
 8007bdc:	606b      	str	r3, [r5, #4]
 8007bde:	7839      	ldrb	r1, [r7, #0]
 8007be0:	1c78      	adds	r0, r7, #1
 8007be2:	3930      	subs	r1, #48	; 0x30
 8007be4:	4684      	mov	ip, r0
 8007be6:	2909      	cmp	r1, #9
 8007be8:	d903      	bls.n	8007bf2 <_vfiprintf_r+0x1fe>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0c3      	beq.n	8007b76 <_vfiprintf_r+0x182>
 8007bee:	9209      	str	r2, [sp, #36]	; 0x24
 8007bf0:	e7c1      	b.n	8007b76 <_vfiprintf_r+0x182>
 8007bf2:	230a      	movs	r3, #10
 8007bf4:	435a      	muls	r2, r3
 8007bf6:	4667      	mov	r7, ip
 8007bf8:	1852      	adds	r2, r2, r1
 8007bfa:	3b09      	subs	r3, #9
 8007bfc:	e7ef      	b.n	8007bde <_vfiprintf_r+0x1ea>
 8007bfe:	ab07      	add	r3, sp, #28
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	0022      	movs	r2, r4
 8007c04:	0029      	movs	r1, r5
 8007c06:	0030      	movs	r0, r6
 8007c08:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <_vfiprintf_r+0x270>)
 8007c0a:	f7fd ff33 	bl	8005a74 <_printf_float>
 8007c0e:	9004      	str	r0, [sp, #16]
 8007c10:	9b04      	ldr	r3, [sp, #16]
 8007c12:	3301      	adds	r3, #1
 8007c14:	d1d1      	bne.n	8007bba <_vfiprintf_r+0x1c6>
 8007c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c18:	07db      	lsls	r3, r3, #31
 8007c1a:	d405      	bmi.n	8007c28 <_vfiprintf_r+0x234>
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	059b      	lsls	r3, r3, #22
 8007c20:	d402      	bmi.n	8007c28 <_vfiprintf_r+0x234>
 8007c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c24:	f000 fad4 	bl	80081d0 <__retarget_lock_release_recursive>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	065b      	lsls	r3, r3, #25
 8007c2c:	d500      	bpl.n	8007c30 <_vfiprintf_r+0x23c>
 8007c2e:	e70a      	b.n	8007a46 <_vfiprintf_r+0x52>
 8007c30:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007c32:	e70a      	b.n	8007a4a <_vfiprintf_r+0x56>
 8007c34:	ab07      	add	r3, sp, #28
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	0022      	movs	r2, r4
 8007c3a:	0029      	movs	r1, r5
 8007c3c:	0030      	movs	r0, r6
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <_vfiprintf_r+0x270>)
 8007c40:	f7fe f9ca 	bl	8005fd8 <_printf_i>
 8007c44:	e7e3      	b.n	8007c0e <_vfiprintf_r+0x21a>
 8007c46:	46c0      	nop			; (mov r8, r8)
 8007c48:	08008934 	.word	0x08008934
 8007c4c:	08008954 	.word	0x08008954
 8007c50:	08008914 	.word	0x08008914
 8007c54:	08008802 	.word	0x08008802
 8007c58:	08008808 	.word	0x08008808
 8007c5c:	0800880c 	.word	0x0800880c
 8007c60:	08005a75 	.word	0x08005a75
 8007c64:	080079cf 	.word	0x080079cf

08007c68 <__swbuf_r>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	0005      	movs	r5, r0
 8007c6c:	000e      	movs	r6, r1
 8007c6e:	0014      	movs	r4, r2
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d004      	beq.n	8007c7e <__swbuf_r+0x16>
 8007c74:	6983      	ldr	r3, [r0, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <__swbuf_r+0x16>
 8007c7a:	f000 fa07 	bl	800808c <__sinit>
 8007c7e:	4b22      	ldr	r3, [pc, #136]	; (8007d08 <__swbuf_r+0xa0>)
 8007c80:	429c      	cmp	r4, r3
 8007c82:	d12e      	bne.n	8007ce2 <__swbuf_r+0x7a>
 8007c84:	686c      	ldr	r4, [r5, #4]
 8007c86:	69a3      	ldr	r3, [r4, #24]
 8007c88:	60a3      	str	r3, [r4, #8]
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	071b      	lsls	r3, r3, #28
 8007c8e:	d532      	bpl.n	8007cf6 <__swbuf_r+0x8e>
 8007c90:	6923      	ldr	r3, [r4, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d02f      	beq.n	8007cf6 <__swbuf_r+0x8e>
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	6922      	ldr	r2, [r4, #16]
 8007c9a:	b2f7      	uxtb	r7, r6
 8007c9c:	1a98      	subs	r0, r3, r2
 8007c9e:	6963      	ldr	r3, [r4, #20]
 8007ca0:	b2f6      	uxtb	r6, r6
 8007ca2:	4283      	cmp	r3, r0
 8007ca4:	dc05      	bgt.n	8007cb2 <__swbuf_r+0x4a>
 8007ca6:	0021      	movs	r1, r4
 8007ca8:	0028      	movs	r0, r5
 8007caa:	f000 f94d 	bl	8007f48 <_fflush_r>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d127      	bne.n	8007d02 <__swbuf_r+0x9a>
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	60a3      	str	r3, [r4, #8]
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	6022      	str	r2, [r4, #0]
 8007cc0:	701f      	strb	r7, [r3, #0]
 8007cc2:	6963      	ldr	r3, [r4, #20]
 8007cc4:	4283      	cmp	r3, r0
 8007cc6:	d004      	beq.n	8007cd2 <__swbuf_r+0x6a>
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	07db      	lsls	r3, r3, #31
 8007ccc:	d507      	bpl.n	8007cde <__swbuf_r+0x76>
 8007cce:	2e0a      	cmp	r6, #10
 8007cd0:	d105      	bne.n	8007cde <__swbuf_r+0x76>
 8007cd2:	0021      	movs	r1, r4
 8007cd4:	0028      	movs	r0, r5
 8007cd6:	f000 f937 	bl	8007f48 <_fflush_r>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d111      	bne.n	8007d02 <__swbuf_r+0x9a>
 8007cde:	0030      	movs	r0, r6
 8007ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce2:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <__swbuf_r+0xa4>)
 8007ce4:	429c      	cmp	r4, r3
 8007ce6:	d101      	bne.n	8007cec <__swbuf_r+0x84>
 8007ce8:	68ac      	ldr	r4, [r5, #8]
 8007cea:	e7cc      	b.n	8007c86 <__swbuf_r+0x1e>
 8007cec:	4b08      	ldr	r3, [pc, #32]	; (8007d10 <__swbuf_r+0xa8>)
 8007cee:	429c      	cmp	r4, r3
 8007cf0:	d1c9      	bne.n	8007c86 <__swbuf_r+0x1e>
 8007cf2:	68ec      	ldr	r4, [r5, #12]
 8007cf4:	e7c7      	b.n	8007c86 <__swbuf_r+0x1e>
 8007cf6:	0021      	movs	r1, r4
 8007cf8:	0028      	movs	r0, r5
 8007cfa:	f000 f819 	bl	8007d30 <__swsetup_r>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d0c9      	beq.n	8007c96 <__swbuf_r+0x2e>
 8007d02:	2601      	movs	r6, #1
 8007d04:	4276      	negs	r6, r6
 8007d06:	e7ea      	b.n	8007cde <__swbuf_r+0x76>
 8007d08:	08008934 	.word	0x08008934
 8007d0c:	08008954 	.word	0x08008954
 8007d10:	08008914 	.word	0x08008914

08007d14 <__ascii_wctomb>:
 8007d14:	0003      	movs	r3, r0
 8007d16:	1e08      	subs	r0, r1, #0
 8007d18:	d005      	beq.n	8007d26 <__ascii_wctomb+0x12>
 8007d1a:	2aff      	cmp	r2, #255	; 0xff
 8007d1c:	d904      	bls.n	8007d28 <__ascii_wctomb+0x14>
 8007d1e:	228a      	movs	r2, #138	; 0x8a
 8007d20:	2001      	movs	r0, #1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	4240      	negs	r0, r0
 8007d26:	4770      	bx	lr
 8007d28:	2001      	movs	r0, #1
 8007d2a:	700a      	strb	r2, [r1, #0]
 8007d2c:	e7fb      	b.n	8007d26 <__ascii_wctomb+0x12>
	...

08007d30 <__swsetup_r>:
 8007d30:	4b37      	ldr	r3, [pc, #220]	; (8007e10 <__swsetup_r+0xe0>)
 8007d32:	b570      	push	{r4, r5, r6, lr}
 8007d34:	681d      	ldr	r5, [r3, #0]
 8007d36:	0006      	movs	r6, r0
 8007d38:	000c      	movs	r4, r1
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	d005      	beq.n	8007d4a <__swsetup_r+0x1a>
 8007d3e:	69ab      	ldr	r3, [r5, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <__swsetup_r+0x1a>
 8007d44:	0028      	movs	r0, r5
 8007d46:	f000 f9a1 	bl	800808c <__sinit>
 8007d4a:	4b32      	ldr	r3, [pc, #200]	; (8007e14 <__swsetup_r+0xe4>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d10f      	bne.n	8007d70 <__swsetup_r+0x40>
 8007d50:	686c      	ldr	r4, [r5, #4]
 8007d52:	230c      	movs	r3, #12
 8007d54:	5ee2      	ldrsh	r2, [r4, r3]
 8007d56:	b293      	uxth	r3, r2
 8007d58:	0711      	lsls	r1, r2, #28
 8007d5a:	d42d      	bmi.n	8007db8 <__swsetup_r+0x88>
 8007d5c:	06d9      	lsls	r1, r3, #27
 8007d5e:	d411      	bmi.n	8007d84 <__swsetup_r+0x54>
 8007d60:	2309      	movs	r3, #9
 8007d62:	2001      	movs	r0, #1
 8007d64:	6033      	str	r3, [r6, #0]
 8007d66:	3337      	adds	r3, #55	; 0x37
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	4240      	negs	r0, r0
 8007d6e:	bd70      	pop	{r4, r5, r6, pc}
 8007d70:	4b29      	ldr	r3, [pc, #164]	; (8007e18 <__swsetup_r+0xe8>)
 8007d72:	429c      	cmp	r4, r3
 8007d74:	d101      	bne.n	8007d7a <__swsetup_r+0x4a>
 8007d76:	68ac      	ldr	r4, [r5, #8]
 8007d78:	e7eb      	b.n	8007d52 <__swsetup_r+0x22>
 8007d7a:	4b28      	ldr	r3, [pc, #160]	; (8007e1c <__swsetup_r+0xec>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	d1e8      	bne.n	8007d52 <__swsetup_r+0x22>
 8007d80:	68ec      	ldr	r4, [r5, #12]
 8007d82:	e7e6      	b.n	8007d52 <__swsetup_r+0x22>
 8007d84:	075b      	lsls	r3, r3, #29
 8007d86:	d513      	bpl.n	8007db0 <__swsetup_r+0x80>
 8007d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d8a:	2900      	cmp	r1, #0
 8007d8c:	d008      	beq.n	8007da0 <__swsetup_r+0x70>
 8007d8e:	0023      	movs	r3, r4
 8007d90:	3344      	adds	r3, #68	; 0x44
 8007d92:	4299      	cmp	r1, r3
 8007d94:	d002      	beq.n	8007d9c <__swsetup_r+0x6c>
 8007d96:	0030      	movs	r0, r6
 8007d98:	f7ff fcc0 	bl	800771c <_free_r>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	6363      	str	r3, [r4, #52]	; 0x34
 8007da0:	2224      	movs	r2, #36	; 0x24
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	4393      	bics	r3, r2
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	2300      	movs	r3, #0
 8007daa:	6063      	str	r3, [r4, #4]
 8007dac:	6923      	ldr	r3, [r4, #16]
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	2308      	movs	r3, #8
 8007db2:	89a2      	ldrh	r2, [r4, #12]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	6923      	ldr	r3, [r4, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10b      	bne.n	8007dd6 <__swsetup_r+0xa6>
 8007dbe:	21a0      	movs	r1, #160	; 0xa0
 8007dc0:	2280      	movs	r2, #128	; 0x80
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	0089      	lsls	r1, r1, #2
 8007dc6:	0092      	lsls	r2, r2, #2
 8007dc8:	400b      	ands	r3, r1
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <__swsetup_r+0xa6>
 8007dce:	0021      	movs	r1, r4
 8007dd0:	0030      	movs	r0, r6
 8007dd2:	f000 fa27 	bl	8008224 <__smakebuf_r>
 8007dd6:	220c      	movs	r2, #12
 8007dd8:	5ea3      	ldrsh	r3, [r4, r2]
 8007dda:	2001      	movs	r0, #1
 8007ddc:	001a      	movs	r2, r3
 8007dde:	b299      	uxth	r1, r3
 8007de0:	4002      	ands	r2, r0
 8007de2:	4203      	tst	r3, r0
 8007de4:	d00f      	beq.n	8007e06 <__swsetup_r+0xd6>
 8007de6:	2200      	movs	r2, #0
 8007de8:	60a2      	str	r2, [r4, #8]
 8007dea:	6962      	ldr	r2, [r4, #20]
 8007dec:	4252      	negs	r2, r2
 8007dee:	61a2      	str	r2, [r4, #24]
 8007df0:	2000      	movs	r0, #0
 8007df2:	6922      	ldr	r2, [r4, #16]
 8007df4:	4282      	cmp	r2, r0
 8007df6:	d1ba      	bne.n	8007d6e <__swsetup_r+0x3e>
 8007df8:	060a      	lsls	r2, r1, #24
 8007dfa:	d5b8      	bpl.n	8007d6e <__swsetup_r+0x3e>
 8007dfc:	2240      	movs	r2, #64	; 0x40
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	3801      	subs	r0, #1
 8007e04:	e7b3      	b.n	8007d6e <__swsetup_r+0x3e>
 8007e06:	0788      	lsls	r0, r1, #30
 8007e08:	d400      	bmi.n	8007e0c <__swsetup_r+0xdc>
 8007e0a:	6962      	ldr	r2, [r4, #20]
 8007e0c:	60a2      	str	r2, [r4, #8]
 8007e0e:	e7ef      	b.n	8007df0 <__swsetup_r+0xc0>
 8007e10:	20000034 	.word	0x20000034
 8007e14:	08008934 	.word	0x08008934
 8007e18:	08008954 	.word	0x08008954
 8007e1c:	08008914 	.word	0x08008914

08007e20 <abort>:
 8007e20:	2006      	movs	r0, #6
 8007e22:	b510      	push	{r4, lr}
 8007e24:	f000 fa6c 	bl	8008300 <raise>
 8007e28:	2001      	movs	r0, #1
 8007e2a:	f7fa fc73 	bl	8002714 <_exit>
	...

08007e30 <__sflush_r>:
 8007e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e32:	898b      	ldrh	r3, [r1, #12]
 8007e34:	0005      	movs	r5, r0
 8007e36:	000c      	movs	r4, r1
 8007e38:	071a      	lsls	r2, r3, #28
 8007e3a:	d45f      	bmi.n	8007efc <__sflush_r+0xcc>
 8007e3c:	684a      	ldr	r2, [r1, #4]
 8007e3e:	2a00      	cmp	r2, #0
 8007e40:	dc04      	bgt.n	8007e4c <__sflush_r+0x1c>
 8007e42:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007e44:	2a00      	cmp	r2, #0
 8007e46:	dc01      	bgt.n	8007e4c <__sflush_r+0x1c>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	d0fa      	beq.n	8007e48 <__sflush_r+0x18>
 8007e52:	2200      	movs	r2, #0
 8007e54:	2180      	movs	r1, #128	; 0x80
 8007e56:	682e      	ldr	r6, [r5, #0]
 8007e58:	602a      	str	r2, [r5, #0]
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	0149      	lsls	r1, r1, #5
 8007e5e:	400a      	ands	r2, r1
 8007e60:	420b      	tst	r3, r1
 8007e62:	d034      	beq.n	8007ece <__sflush_r+0x9e>
 8007e64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	075b      	lsls	r3, r3, #29
 8007e6a:	d506      	bpl.n	8007e7a <__sflush_r+0x4a>
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	1ac0      	subs	r0, r0, r3
 8007e70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <__sflush_r+0x4a>
 8007e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e78:	1ac0      	subs	r0, r0, r3
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	6a21      	ldr	r1, [r4, #32]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	0028      	movs	r0, r5
 8007e82:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007e84:	47b8      	blx	r7
 8007e86:	89a1      	ldrh	r1, [r4, #12]
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d106      	bne.n	8007e9a <__sflush_r+0x6a>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	2b1d      	cmp	r3, #29
 8007e90:	d831      	bhi.n	8007ef6 <__sflush_r+0xc6>
 8007e92:	4a2c      	ldr	r2, [pc, #176]	; (8007f44 <__sflush_r+0x114>)
 8007e94:	40da      	lsrs	r2, r3
 8007e96:	07d3      	lsls	r3, r2, #31
 8007e98:	d52d      	bpl.n	8007ef6 <__sflush_r+0xc6>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	6063      	str	r3, [r4, #4]
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	04cb      	lsls	r3, r1, #19
 8007ea4:	d505      	bpl.n	8007eb2 <__sflush_r+0x82>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	d102      	bne.n	8007eb0 <__sflush_r+0x80>
 8007eaa:	682b      	ldr	r3, [r5, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d100      	bne.n	8007eb2 <__sflush_r+0x82>
 8007eb0:	6560      	str	r0, [r4, #84]	; 0x54
 8007eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eb4:	602e      	str	r6, [r5, #0]
 8007eb6:	2900      	cmp	r1, #0
 8007eb8:	d0c6      	beq.n	8007e48 <__sflush_r+0x18>
 8007eba:	0023      	movs	r3, r4
 8007ebc:	3344      	adds	r3, #68	; 0x44
 8007ebe:	4299      	cmp	r1, r3
 8007ec0:	d002      	beq.n	8007ec8 <__sflush_r+0x98>
 8007ec2:	0028      	movs	r0, r5
 8007ec4:	f7ff fc2a 	bl	800771c <_free_r>
 8007ec8:	2000      	movs	r0, #0
 8007eca:	6360      	str	r0, [r4, #52]	; 0x34
 8007ecc:	e7bd      	b.n	8007e4a <__sflush_r+0x1a>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	0028      	movs	r0, r5
 8007ed2:	6a21      	ldr	r1, [r4, #32]
 8007ed4:	47b8      	blx	r7
 8007ed6:	1c43      	adds	r3, r0, #1
 8007ed8:	d1c5      	bne.n	8007e66 <__sflush_r+0x36>
 8007eda:	682b      	ldr	r3, [r5, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0c2      	beq.n	8007e66 <__sflush_r+0x36>
 8007ee0:	2b1d      	cmp	r3, #29
 8007ee2:	d001      	beq.n	8007ee8 <__sflush_r+0xb8>
 8007ee4:	2b16      	cmp	r3, #22
 8007ee6:	d101      	bne.n	8007eec <__sflush_r+0xbc>
 8007ee8:	602e      	str	r6, [r5, #0]
 8007eea:	e7ad      	b.n	8007e48 <__sflush_r+0x18>
 8007eec:	2340      	movs	r3, #64	; 0x40
 8007eee:	89a2      	ldrh	r2, [r4, #12]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	e7a9      	b.n	8007e4a <__sflush_r+0x1a>
 8007ef6:	2340      	movs	r3, #64	; 0x40
 8007ef8:	430b      	orrs	r3, r1
 8007efa:	e7fa      	b.n	8007ef2 <__sflush_r+0xc2>
 8007efc:	690f      	ldr	r7, [r1, #16]
 8007efe:	2f00      	cmp	r7, #0
 8007f00:	d0a2      	beq.n	8007e48 <__sflush_r+0x18>
 8007f02:	680a      	ldr	r2, [r1, #0]
 8007f04:	600f      	str	r7, [r1, #0]
 8007f06:	1bd2      	subs	r2, r2, r7
 8007f08:	9201      	str	r2, [sp, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	079b      	lsls	r3, r3, #30
 8007f0e:	d100      	bne.n	8007f12 <__sflush_r+0xe2>
 8007f10:	694a      	ldr	r2, [r1, #20]
 8007f12:	60a2      	str	r2, [r4, #8]
 8007f14:	9b01      	ldr	r3, [sp, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	dc00      	bgt.n	8007f1c <__sflush_r+0xec>
 8007f1a:	e795      	b.n	8007e48 <__sflush_r+0x18>
 8007f1c:	003a      	movs	r2, r7
 8007f1e:	0028      	movs	r0, r5
 8007f20:	9b01      	ldr	r3, [sp, #4]
 8007f22:	6a21      	ldr	r1, [r4, #32]
 8007f24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f26:	47b0      	blx	r6
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	dc06      	bgt.n	8007f3a <__sflush_r+0x10a>
 8007f2c:	2340      	movs	r3, #64	; 0x40
 8007f2e:	2001      	movs	r0, #1
 8007f30:	89a2      	ldrh	r2, [r4, #12]
 8007f32:	4240      	negs	r0, r0
 8007f34:	4313      	orrs	r3, r2
 8007f36:	81a3      	strh	r3, [r4, #12]
 8007f38:	e787      	b.n	8007e4a <__sflush_r+0x1a>
 8007f3a:	9b01      	ldr	r3, [sp, #4]
 8007f3c:	183f      	adds	r7, r7, r0
 8007f3e:	1a1b      	subs	r3, r3, r0
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	e7e7      	b.n	8007f14 <__sflush_r+0xe4>
 8007f44:	20400001 	.word	0x20400001

08007f48 <_fflush_r>:
 8007f48:	690b      	ldr	r3, [r1, #16]
 8007f4a:	b570      	push	{r4, r5, r6, lr}
 8007f4c:	0005      	movs	r5, r0
 8007f4e:	000c      	movs	r4, r1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d102      	bne.n	8007f5a <_fflush_r+0x12>
 8007f54:	2500      	movs	r5, #0
 8007f56:	0028      	movs	r0, r5
 8007f58:	bd70      	pop	{r4, r5, r6, pc}
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d004      	beq.n	8007f68 <_fflush_r+0x20>
 8007f5e:	6983      	ldr	r3, [r0, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <_fflush_r+0x20>
 8007f64:	f000 f892 	bl	800808c <__sinit>
 8007f68:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <_fflush_r+0x74>)
 8007f6a:	429c      	cmp	r4, r3
 8007f6c:	d11b      	bne.n	8007fa6 <_fflush_r+0x5e>
 8007f6e:	686c      	ldr	r4, [r5, #4]
 8007f70:	220c      	movs	r2, #12
 8007f72:	5ea3      	ldrsh	r3, [r4, r2]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0ed      	beq.n	8007f54 <_fflush_r+0xc>
 8007f78:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f7a:	07d2      	lsls	r2, r2, #31
 8007f7c:	d404      	bmi.n	8007f88 <_fflush_r+0x40>
 8007f7e:	059b      	lsls	r3, r3, #22
 8007f80:	d402      	bmi.n	8007f88 <_fflush_r+0x40>
 8007f82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f84:	f000 f923 	bl	80081ce <__retarget_lock_acquire_recursive>
 8007f88:	0028      	movs	r0, r5
 8007f8a:	0021      	movs	r1, r4
 8007f8c:	f7ff ff50 	bl	8007e30 <__sflush_r>
 8007f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f92:	0005      	movs	r5, r0
 8007f94:	07db      	lsls	r3, r3, #31
 8007f96:	d4de      	bmi.n	8007f56 <_fflush_r+0xe>
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	059b      	lsls	r3, r3, #22
 8007f9c:	d4db      	bmi.n	8007f56 <_fflush_r+0xe>
 8007f9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fa0:	f000 f916 	bl	80081d0 <__retarget_lock_release_recursive>
 8007fa4:	e7d7      	b.n	8007f56 <_fflush_r+0xe>
 8007fa6:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <_fflush_r+0x78>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	d101      	bne.n	8007fb0 <_fflush_r+0x68>
 8007fac:	68ac      	ldr	r4, [r5, #8]
 8007fae:	e7df      	b.n	8007f70 <_fflush_r+0x28>
 8007fb0:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <_fflush_r+0x7c>)
 8007fb2:	429c      	cmp	r4, r3
 8007fb4:	d1dc      	bne.n	8007f70 <_fflush_r+0x28>
 8007fb6:	68ec      	ldr	r4, [r5, #12]
 8007fb8:	e7da      	b.n	8007f70 <_fflush_r+0x28>
 8007fba:	46c0      	nop			; (mov r8, r8)
 8007fbc:	08008934 	.word	0x08008934
 8007fc0:	08008954 	.word	0x08008954
 8007fc4:	08008914 	.word	0x08008914

08007fc8 <std>:
 8007fc8:	2300      	movs	r3, #0
 8007fca:	b510      	push	{r4, lr}
 8007fcc:	0004      	movs	r4, r0
 8007fce:	6003      	str	r3, [r0, #0]
 8007fd0:	6043      	str	r3, [r0, #4]
 8007fd2:	6083      	str	r3, [r0, #8]
 8007fd4:	8181      	strh	r1, [r0, #12]
 8007fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fd8:	0019      	movs	r1, r3
 8007fda:	81c2      	strh	r2, [r0, #14]
 8007fdc:	6103      	str	r3, [r0, #16]
 8007fde:	6143      	str	r3, [r0, #20]
 8007fe0:	6183      	str	r3, [r0, #24]
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	305c      	adds	r0, #92	; 0x5c
 8007fe6:	f7fd fc93 	bl	8005910 <memset>
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <std+0x38>)
 8007fec:	6224      	str	r4, [r4, #32]
 8007fee:	6263      	str	r3, [r4, #36]	; 0x24
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <std+0x3c>)
 8007ff2:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ff4:	4b04      	ldr	r3, [pc, #16]	; (8008008 <std+0x40>)
 8007ff6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <std+0x44>)
 8007ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	08008341 	.word	0x08008341
 8008004:	08008369 	.word	0x08008369
 8008008:	080083a1 	.word	0x080083a1
 800800c:	080083cd 	.word	0x080083cd

08008010 <_cleanup_r>:
 8008010:	b510      	push	{r4, lr}
 8008012:	4902      	ldr	r1, [pc, #8]	; (800801c <_cleanup_r+0xc>)
 8008014:	f000 f8ba 	bl	800818c <_fwalk_reent>
 8008018:	bd10      	pop	{r4, pc}
 800801a:	46c0      	nop			; (mov r8, r8)
 800801c:	08007f49 	.word	0x08007f49

08008020 <__sfmoreglue>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	2568      	movs	r5, #104	; 0x68
 8008024:	1e4a      	subs	r2, r1, #1
 8008026:	4355      	muls	r5, r2
 8008028:	000e      	movs	r6, r1
 800802a:	0029      	movs	r1, r5
 800802c:	3174      	adds	r1, #116	; 0x74
 800802e:	f7ff fbe1 	bl	80077f4 <_malloc_r>
 8008032:	1e04      	subs	r4, r0, #0
 8008034:	d008      	beq.n	8008048 <__sfmoreglue+0x28>
 8008036:	2100      	movs	r1, #0
 8008038:	002a      	movs	r2, r5
 800803a:	6001      	str	r1, [r0, #0]
 800803c:	6046      	str	r6, [r0, #4]
 800803e:	300c      	adds	r0, #12
 8008040:	60a0      	str	r0, [r4, #8]
 8008042:	3268      	adds	r2, #104	; 0x68
 8008044:	f7fd fc64 	bl	8005910 <memset>
 8008048:	0020      	movs	r0, r4
 800804a:	bd70      	pop	{r4, r5, r6, pc}

0800804c <__sfp_lock_acquire>:
 800804c:	b510      	push	{r4, lr}
 800804e:	4802      	ldr	r0, [pc, #8]	; (8008058 <__sfp_lock_acquire+0xc>)
 8008050:	f000 f8bd 	bl	80081ce <__retarget_lock_acquire_recursive>
 8008054:	bd10      	pop	{r4, pc}
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	200002fd 	.word	0x200002fd

0800805c <__sfp_lock_release>:
 800805c:	b510      	push	{r4, lr}
 800805e:	4802      	ldr	r0, [pc, #8]	; (8008068 <__sfp_lock_release+0xc>)
 8008060:	f000 f8b6 	bl	80081d0 <__retarget_lock_release_recursive>
 8008064:	bd10      	pop	{r4, pc}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	200002fd 	.word	0x200002fd

0800806c <__sinit_lock_acquire>:
 800806c:	b510      	push	{r4, lr}
 800806e:	4802      	ldr	r0, [pc, #8]	; (8008078 <__sinit_lock_acquire+0xc>)
 8008070:	f000 f8ad 	bl	80081ce <__retarget_lock_acquire_recursive>
 8008074:	bd10      	pop	{r4, pc}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	200002fe 	.word	0x200002fe

0800807c <__sinit_lock_release>:
 800807c:	b510      	push	{r4, lr}
 800807e:	4802      	ldr	r0, [pc, #8]	; (8008088 <__sinit_lock_release+0xc>)
 8008080:	f000 f8a6 	bl	80081d0 <__retarget_lock_release_recursive>
 8008084:	bd10      	pop	{r4, pc}
 8008086:	46c0      	nop			; (mov r8, r8)
 8008088:	200002fe 	.word	0x200002fe

0800808c <__sinit>:
 800808c:	b513      	push	{r0, r1, r4, lr}
 800808e:	0004      	movs	r4, r0
 8008090:	f7ff ffec 	bl	800806c <__sinit_lock_acquire>
 8008094:	69a3      	ldr	r3, [r4, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d002      	beq.n	80080a0 <__sinit+0x14>
 800809a:	f7ff ffef 	bl	800807c <__sinit_lock_release>
 800809e:	bd13      	pop	{r0, r1, r4, pc}
 80080a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80080a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80080a4:	6523      	str	r3, [r4, #80]	; 0x50
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <__sinit+0x68>)
 80080a8:	4a13      	ldr	r2, [pc, #76]	; (80080f8 <__sinit+0x6c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	d101      	bne.n	80080b8 <__sinit+0x2c>
 80080b4:	2301      	movs	r3, #1
 80080b6:	61a3      	str	r3, [r4, #24]
 80080b8:	0020      	movs	r0, r4
 80080ba:	f000 f81f 	bl	80080fc <__sfp>
 80080be:	6060      	str	r0, [r4, #4]
 80080c0:	0020      	movs	r0, r4
 80080c2:	f000 f81b 	bl	80080fc <__sfp>
 80080c6:	60a0      	str	r0, [r4, #8]
 80080c8:	0020      	movs	r0, r4
 80080ca:	f000 f817 	bl	80080fc <__sfp>
 80080ce:	2200      	movs	r2, #0
 80080d0:	2104      	movs	r1, #4
 80080d2:	60e0      	str	r0, [r4, #12]
 80080d4:	6860      	ldr	r0, [r4, #4]
 80080d6:	f7ff ff77 	bl	8007fc8 <std>
 80080da:	2201      	movs	r2, #1
 80080dc:	2109      	movs	r1, #9
 80080de:	68a0      	ldr	r0, [r4, #8]
 80080e0:	f7ff ff72 	bl	8007fc8 <std>
 80080e4:	2202      	movs	r2, #2
 80080e6:	2112      	movs	r1, #18
 80080e8:	68e0      	ldr	r0, [r4, #12]
 80080ea:	f7ff ff6d 	bl	8007fc8 <std>
 80080ee:	2301      	movs	r3, #1
 80080f0:	61a3      	str	r3, [r4, #24]
 80080f2:	e7d2      	b.n	800809a <__sinit+0xe>
 80080f4:	08008598 	.word	0x08008598
 80080f8:	08008011 	.word	0x08008011

080080fc <__sfp>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	0007      	movs	r7, r0
 8008100:	f7ff ffa4 	bl	800804c <__sfp_lock_acquire>
 8008104:	4b1f      	ldr	r3, [pc, #124]	; (8008184 <__sfp+0x88>)
 8008106:	681e      	ldr	r6, [r3, #0]
 8008108:	69b3      	ldr	r3, [r6, #24]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <__sfp+0x18>
 800810e:	0030      	movs	r0, r6
 8008110:	f7ff ffbc 	bl	800808c <__sinit>
 8008114:	3648      	adds	r6, #72	; 0x48
 8008116:	68b4      	ldr	r4, [r6, #8]
 8008118:	6873      	ldr	r3, [r6, #4]
 800811a:	3b01      	subs	r3, #1
 800811c:	d504      	bpl.n	8008128 <__sfp+0x2c>
 800811e:	6833      	ldr	r3, [r6, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d022      	beq.n	800816a <__sfp+0x6e>
 8008124:	6836      	ldr	r6, [r6, #0]
 8008126:	e7f6      	b.n	8008116 <__sfp+0x1a>
 8008128:	220c      	movs	r2, #12
 800812a:	5ea5      	ldrsh	r5, [r4, r2]
 800812c:	2d00      	cmp	r5, #0
 800812e:	d11a      	bne.n	8008166 <__sfp+0x6a>
 8008130:	0020      	movs	r0, r4
 8008132:	4b15      	ldr	r3, [pc, #84]	; (8008188 <__sfp+0x8c>)
 8008134:	3058      	adds	r0, #88	; 0x58
 8008136:	60e3      	str	r3, [r4, #12]
 8008138:	6665      	str	r5, [r4, #100]	; 0x64
 800813a:	f000 f847 	bl	80081cc <__retarget_lock_init_recursive>
 800813e:	f7ff ff8d 	bl	800805c <__sfp_lock_release>
 8008142:	0020      	movs	r0, r4
 8008144:	2208      	movs	r2, #8
 8008146:	0029      	movs	r1, r5
 8008148:	6025      	str	r5, [r4, #0]
 800814a:	60a5      	str	r5, [r4, #8]
 800814c:	6065      	str	r5, [r4, #4]
 800814e:	6125      	str	r5, [r4, #16]
 8008150:	6165      	str	r5, [r4, #20]
 8008152:	61a5      	str	r5, [r4, #24]
 8008154:	305c      	adds	r0, #92	; 0x5c
 8008156:	f7fd fbdb 	bl	8005910 <memset>
 800815a:	6365      	str	r5, [r4, #52]	; 0x34
 800815c:	63a5      	str	r5, [r4, #56]	; 0x38
 800815e:	64a5      	str	r5, [r4, #72]	; 0x48
 8008160:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008162:	0020      	movs	r0, r4
 8008164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008166:	3468      	adds	r4, #104	; 0x68
 8008168:	e7d7      	b.n	800811a <__sfp+0x1e>
 800816a:	2104      	movs	r1, #4
 800816c:	0038      	movs	r0, r7
 800816e:	f7ff ff57 	bl	8008020 <__sfmoreglue>
 8008172:	1e04      	subs	r4, r0, #0
 8008174:	6030      	str	r0, [r6, #0]
 8008176:	d1d5      	bne.n	8008124 <__sfp+0x28>
 8008178:	f7ff ff70 	bl	800805c <__sfp_lock_release>
 800817c:	230c      	movs	r3, #12
 800817e:	603b      	str	r3, [r7, #0]
 8008180:	e7ef      	b.n	8008162 <__sfp+0x66>
 8008182:	46c0      	nop			; (mov r8, r8)
 8008184:	08008598 	.word	0x08008598
 8008188:	ffff0001 	.word	0xffff0001

0800818c <_fwalk_reent>:
 800818c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800818e:	0004      	movs	r4, r0
 8008190:	0006      	movs	r6, r0
 8008192:	2700      	movs	r7, #0
 8008194:	9101      	str	r1, [sp, #4]
 8008196:	3448      	adds	r4, #72	; 0x48
 8008198:	6863      	ldr	r3, [r4, #4]
 800819a:	68a5      	ldr	r5, [r4, #8]
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	9b00      	ldr	r3, [sp, #0]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	d504      	bpl.n	80081b0 <_fwalk_reent+0x24>
 80081a6:	6824      	ldr	r4, [r4, #0]
 80081a8:	2c00      	cmp	r4, #0
 80081aa:	d1f5      	bne.n	8008198 <_fwalk_reent+0xc>
 80081ac:	0038      	movs	r0, r7
 80081ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80081b0:	89ab      	ldrh	r3, [r5, #12]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d908      	bls.n	80081c8 <_fwalk_reent+0x3c>
 80081b6:	220e      	movs	r2, #14
 80081b8:	5eab      	ldrsh	r3, [r5, r2]
 80081ba:	3301      	adds	r3, #1
 80081bc:	d004      	beq.n	80081c8 <_fwalk_reent+0x3c>
 80081be:	0029      	movs	r1, r5
 80081c0:	0030      	movs	r0, r6
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	4798      	blx	r3
 80081c6:	4307      	orrs	r7, r0
 80081c8:	3568      	adds	r5, #104	; 0x68
 80081ca:	e7e8      	b.n	800819e <_fwalk_reent+0x12>

080081cc <__retarget_lock_init_recursive>:
 80081cc:	4770      	bx	lr

080081ce <__retarget_lock_acquire_recursive>:
 80081ce:	4770      	bx	lr

080081d0 <__retarget_lock_release_recursive>:
 80081d0:	4770      	bx	lr
	...

080081d4 <__swhatbuf_r>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	000e      	movs	r6, r1
 80081d8:	001d      	movs	r5, r3
 80081da:	230e      	movs	r3, #14
 80081dc:	5ec9      	ldrsh	r1, [r1, r3]
 80081de:	0014      	movs	r4, r2
 80081e0:	b096      	sub	sp, #88	; 0x58
 80081e2:	2900      	cmp	r1, #0
 80081e4:	da08      	bge.n	80081f8 <__swhatbuf_r+0x24>
 80081e6:	220c      	movs	r2, #12
 80081e8:	5eb3      	ldrsh	r3, [r6, r2]
 80081ea:	2200      	movs	r2, #0
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	061b      	lsls	r3, r3, #24
 80081f0:	d411      	bmi.n	8008216 <__swhatbuf_r+0x42>
 80081f2:	2380      	movs	r3, #128	; 0x80
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	e00f      	b.n	8008218 <__swhatbuf_r+0x44>
 80081f8:	466a      	mov	r2, sp
 80081fa:	f000 f913 	bl	8008424 <_fstat_r>
 80081fe:	2800      	cmp	r0, #0
 8008200:	dbf1      	blt.n	80081e6 <__swhatbuf_r+0x12>
 8008202:	23f0      	movs	r3, #240	; 0xf0
 8008204:	9901      	ldr	r1, [sp, #4]
 8008206:	021b      	lsls	r3, r3, #8
 8008208:	4019      	ands	r1, r3
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <__swhatbuf_r+0x4c>)
 800820c:	18c9      	adds	r1, r1, r3
 800820e:	424b      	negs	r3, r1
 8008210:	4159      	adcs	r1, r3
 8008212:	6029      	str	r1, [r5, #0]
 8008214:	e7ed      	b.n	80081f2 <__swhatbuf_r+0x1e>
 8008216:	2340      	movs	r3, #64	; 0x40
 8008218:	2000      	movs	r0, #0
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	b016      	add	sp, #88	; 0x58
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	ffffe000 	.word	0xffffe000

08008224 <__smakebuf_r>:
 8008224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008226:	2602      	movs	r6, #2
 8008228:	898b      	ldrh	r3, [r1, #12]
 800822a:	0005      	movs	r5, r0
 800822c:	000c      	movs	r4, r1
 800822e:	4233      	tst	r3, r6
 8008230:	d006      	beq.n	8008240 <__smakebuf_r+0x1c>
 8008232:	0023      	movs	r3, r4
 8008234:	3347      	adds	r3, #71	; 0x47
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	6123      	str	r3, [r4, #16]
 800823a:	2301      	movs	r3, #1
 800823c:	6163      	str	r3, [r4, #20]
 800823e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8008240:	466a      	mov	r2, sp
 8008242:	ab01      	add	r3, sp, #4
 8008244:	f7ff ffc6 	bl	80081d4 <__swhatbuf_r>
 8008248:	9900      	ldr	r1, [sp, #0]
 800824a:	0007      	movs	r7, r0
 800824c:	0028      	movs	r0, r5
 800824e:	f7ff fad1 	bl	80077f4 <_malloc_r>
 8008252:	2800      	cmp	r0, #0
 8008254:	d108      	bne.n	8008268 <__smakebuf_r+0x44>
 8008256:	220c      	movs	r2, #12
 8008258:	5ea3      	ldrsh	r3, [r4, r2]
 800825a:	059a      	lsls	r2, r3, #22
 800825c:	d4ef      	bmi.n	800823e <__smakebuf_r+0x1a>
 800825e:	2203      	movs	r2, #3
 8008260:	4393      	bics	r3, r2
 8008262:	431e      	orrs	r6, r3
 8008264:	81a6      	strh	r6, [r4, #12]
 8008266:	e7e4      	b.n	8008232 <__smakebuf_r+0xe>
 8008268:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <__smakebuf_r+0x84>)
 800826a:	62ab      	str	r3, [r5, #40]	; 0x28
 800826c:	2380      	movs	r3, #128	; 0x80
 800826e:	89a2      	ldrh	r2, [r4, #12]
 8008270:	6020      	str	r0, [r4, #0]
 8008272:	4313      	orrs	r3, r2
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	6120      	str	r0, [r4, #16]
 800827a:	6163      	str	r3, [r4, #20]
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00d      	beq.n	800829e <__smakebuf_r+0x7a>
 8008282:	0028      	movs	r0, r5
 8008284:	230e      	movs	r3, #14
 8008286:	5ee1      	ldrsh	r1, [r4, r3]
 8008288:	f000 f8de 	bl	8008448 <_isatty_r>
 800828c:	2800      	cmp	r0, #0
 800828e:	d006      	beq.n	800829e <__smakebuf_r+0x7a>
 8008290:	2203      	movs	r2, #3
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	4393      	bics	r3, r2
 8008296:	001a      	movs	r2, r3
 8008298:	2301      	movs	r3, #1
 800829a:	4313      	orrs	r3, r2
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	89a0      	ldrh	r0, [r4, #12]
 80082a0:	4307      	orrs	r7, r0
 80082a2:	81a7      	strh	r7, [r4, #12]
 80082a4:	e7cb      	b.n	800823e <__smakebuf_r+0x1a>
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	08008011 	.word	0x08008011

080082ac <_raise_r>:
 80082ac:	b570      	push	{r4, r5, r6, lr}
 80082ae:	0004      	movs	r4, r0
 80082b0:	000d      	movs	r5, r1
 80082b2:	291f      	cmp	r1, #31
 80082b4:	d904      	bls.n	80082c0 <_raise_r+0x14>
 80082b6:	2316      	movs	r3, #22
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	2001      	movs	r0, #1
 80082bc:	4240      	negs	r0, r0
 80082be:	bd70      	pop	{r4, r5, r6, pc}
 80082c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d004      	beq.n	80082d0 <_raise_r+0x24>
 80082c6:	008a      	lsls	r2, r1, #2
 80082c8:	189b      	adds	r3, r3, r2
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	d108      	bne.n	80082e2 <_raise_r+0x36>
 80082d0:	0020      	movs	r0, r4
 80082d2:	f000 f831 	bl	8008338 <_getpid_r>
 80082d6:	002a      	movs	r2, r5
 80082d8:	0001      	movs	r1, r0
 80082da:	0020      	movs	r0, r4
 80082dc:	f000 f81a 	bl	8008314 <_kill_r>
 80082e0:	e7ed      	b.n	80082be <_raise_r+0x12>
 80082e2:	2000      	movs	r0, #0
 80082e4:	2a01      	cmp	r2, #1
 80082e6:	d0ea      	beq.n	80082be <_raise_r+0x12>
 80082e8:	1c51      	adds	r1, r2, #1
 80082ea:	d103      	bne.n	80082f4 <_raise_r+0x48>
 80082ec:	2316      	movs	r3, #22
 80082ee:	3001      	adds	r0, #1
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	e7e4      	b.n	80082be <_raise_r+0x12>
 80082f4:	2400      	movs	r4, #0
 80082f6:	0028      	movs	r0, r5
 80082f8:	601c      	str	r4, [r3, #0]
 80082fa:	4790      	blx	r2
 80082fc:	0020      	movs	r0, r4
 80082fe:	e7de      	b.n	80082be <_raise_r+0x12>

08008300 <raise>:
 8008300:	b510      	push	{r4, lr}
 8008302:	4b03      	ldr	r3, [pc, #12]	; (8008310 <raise+0x10>)
 8008304:	0001      	movs	r1, r0
 8008306:	6818      	ldr	r0, [r3, #0]
 8008308:	f7ff ffd0 	bl	80082ac <_raise_r>
 800830c:	bd10      	pop	{r4, pc}
 800830e:	46c0      	nop			; (mov r8, r8)
 8008310:	20000034 	.word	0x20000034

08008314 <_kill_r>:
 8008314:	2300      	movs	r3, #0
 8008316:	b570      	push	{r4, r5, r6, lr}
 8008318:	4d06      	ldr	r5, [pc, #24]	; (8008334 <_kill_r+0x20>)
 800831a:	0004      	movs	r4, r0
 800831c:	0008      	movs	r0, r1
 800831e:	0011      	movs	r1, r2
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	f7fa f9e7 	bl	80026f4 <_kill>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	d103      	bne.n	8008332 <_kill_r+0x1e>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d000      	beq.n	8008332 <_kill_r+0x1e>
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	200002f8 	.word	0x200002f8

08008338 <_getpid_r>:
 8008338:	b510      	push	{r4, lr}
 800833a:	f7fa f9d5 	bl	80026e8 <_getpid>
 800833e:	bd10      	pop	{r4, pc}

08008340 <__sread>:
 8008340:	b570      	push	{r4, r5, r6, lr}
 8008342:	000c      	movs	r4, r1
 8008344:	250e      	movs	r5, #14
 8008346:	5f49      	ldrsh	r1, [r1, r5]
 8008348:	f000 f8a4 	bl	8008494 <_read_r>
 800834c:	2800      	cmp	r0, #0
 800834e:	db03      	blt.n	8008358 <__sread+0x18>
 8008350:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008352:	181b      	adds	r3, r3, r0
 8008354:	6563      	str	r3, [r4, #84]	; 0x54
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	4a02      	ldr	r2, [pc, #8]	; (8008364 <__sread+0x24>)
 800835c:	4013      	ands	r3, r2
 800835e:	81a3      	strh	r3, [r4, #12]
 8008360:	e7f9      	b.n	8008356 <__sread+0x16>
 8008362:	46c0      	nop			; (mov r8, r8)
 8008364:	ffffefff 	.word	0xffffefff

08008368 <__swrite>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	001f      	movs	r7, r3
 800836c:	898b      	ldrh	r3, [r1, #12]
 800836e:	0005      	movs	r5, r0
 8008370:	000c      	movs	r4, r1
 8008372:	0016      	movs	r6, r2
 8008374:	05db      	lsls	r3, r3, #23
 8008376:	d505      	bpl.n	8008384 <__swrite+0x1c>
 8008378:	230e      	movs	r3, #14
 800837a:	5ec9      	ldrsh	r1, [r1, r3]
 800837c:	2200      	movs	r2, #0
 800837e:	2302      	movs	r3, #2
 8008380:	f000 f874 	bl	800846c <_lseek_r>
 8008384:	89a3      	ldrh	r3, [r4, #12]
 8008386:	4a05      	ldr	r2, [pc, #20]	; (800839c <__swrite+0x34>)
 8008388:	0028      	movs	r0, r5
 800838a:	4013      	ands	r3, r2
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	0032      	movs	r2, r6
 8008390:	230e      	movs	r3, #14
 8008392:	5ee1      	ldrsh	r1, [r4, r3]
 8008394:	003b      	movs	r3, r7
 8008396:	f000 f81f 	bl	80083d8 <_write_r>
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839c:	ffffefff 	.word	0xffffefff

080083a0 <__sseek>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	000c      	movs	r4, r1
 80083a4:	250e      	movs	r5, #14
 80083a6:	5f49      	ldrsh	r1, [r1, r5]
 80083a8:	f000 f860 	bl	800846c <_lseek_r>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	1c42      	adds	r2, r0, #1
 80083b0:	d103      	bne.n	80083ba <__sseek+0x1a>
 80083b2:	4a05      	ldr	r2, [pc, #20]	; (80083c8 <__sseek+0x28>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	bd70      	pop	{r4, r5, r6, pc}
 80083ba:	2280      	movs	r2, #128	; 0x80
 80083bc:	0152      	lsls	r2, r2, #5
 80083be:	4313      	orrs	r3, r2
 80083c0:	81a3      	strh	r3, [r4, #12]
 80083c2:	6560      	str	r0, [r4, #84]	; 0x54
 80083c4:	e7f8      	b.n	80083b8 <__sseek+0x18>
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	ffffefff 	.word	0xffffefff

080083cc <__sclose>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	230e      	movs	r3, #14
 80083d0:	5ec9      	ldrsh	r1, [r1, r3]
 80083d2:	f000 f815 	bl	8008400 <_close_r>
 80083d6:	bd10      	pop	{r4, pc}

080083d8 <_write_r>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	0004      	movs	r4, r0
 80083dc:	0008      	movs	r0, r1
 80083de:	0011      	movs	r1, r2
 80083e0:	001a      	movs	r2, r3
 80083e2:	2300      	movs	r3, #0
 80083e4:	4d05      	ldr	r5, [pc, #20]	; (80083fc <_write_r+0x24>)
 80083e6:	602b      	str	r3, [r5, #0]
 80083e8:	f7fa f9bd 	bl	8002766 <_write>
 80083ec:	1c43      	adds	r3, r0, #1
 80083ee:	d103      	bne.n	80083f8 <_write_r+0x20>
 80083f0:	682b      	ldr	r3, [r5, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d000      	beq.n	80083f8 <_write_r+0x20>
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	bd70      	pop	{r4, r5, r6, pc}
 80083fa:	46c0      	nop			; (mov r8, r8)
 80083fc:	200002f8 	.word	0x200002f8

08008400 <_close_r>:
 8008400:	2300      	movs	r3, #0
 8008402:	b570      	push	{r4, r5, r6, lr}
 8008404:	4d06      	ldr	r5, [pc, #24]	; (8008420 <_close_r+0x20>)
 8008406:	0004      	movs	r4, r0
 8008408:	0008      	movs	r0, r1
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	f7fa f9c7 	bl	800279e <_close>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d103      	bne.n	800841c <_close_r+0x1c>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d000      	beq.n	800841c <_close_r+0x1c>
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	bd70      	pop	{r4, r5, r6, pc}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	200002f8 	.word	0x200002f8

08008424 <_fstat_r>:
 8008424:	2300      	movs	r3, #0
 8008426:	b570      	push	{r4, r5, r6, lr}
 8008428:	4d06      	ldr	r5, [pc, #24]	; (8008444 <_fstat_r+0x20>)
 800842a:	0004      	movs	r4, r0
 800842c:	0008      	movs	r0, r1
 800842e:	0011      	movs	r1, r2
 8008430:	602b      	str	r3, [r5, #0]
 8008432:	f7fa f9be 	bl	80027b2 <_fstat>
 8008436:	1c43      	adds	r3, r0, #1
 8008438:	d103      	bne.n	8008442 <_fstat_r+0x1e>
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d000      	beq.n	8008442 <_fstat_r+0x1e>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd70      	pop	{r4, r5, r6, pc}
 8008444:	200002f8 	.word	0x200002f8

08008448 <_isatty_r>:
 8008448:	2300      	movs	r3, #0
 800844a:	b570      	push	{r4, r5, r6, lr}
 800844c:	4d06      	ldr	r5, [pc, #24]	; (8008468 <_isatty_r+0x20>)
 800844e:	0004      	movs	r4, r0
 8008450:	0008      	movs	r0, r1
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	f7fa f9bb 	bl	80027ce <_isatty>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d103      	bne.n	8008464 <_isatty_r+0x1c>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d000      	beq.n	8008464 <_isatty_r+0x1c>
 8008462:	6023      	str	r3, [r4, #0]
 8008464:	bd70      	pop	{r4, r5, r6, pc}
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	200002f8 	.word	0x200002f8

0800846c <_lseek_r>:
 800846c:	b570      	push	{r4, r5, r6, lr}
 800846e:	0004      	movs	r4, r0
 8008470:	0008      	movs	r0, r1
 8008472:	0011      	movs	r1, r2
 8008474:	001a      	movs	r2, r3
 8008476:	2300      	movs	r3, #0
 8008478:	4d05      	ldr	r5, [pc, #20]	; (8008490 <_lseek_r+0x24>)
 800847a:	602b      	str	r3, [r5, #0]
 800847c:	f7fa f9b0 	bl	80027e0 <_lseek>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d103      	bne.n	800848c <_lseek_r+0x20>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d000      	beq.n	800848c <_lseek_r+0x20>
 800848a:	6023      	str	r3, [r4, #0]
 800848c:	bd70      	pop	{r4, r5, r6, pc}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	200002f8 	.word	0x200002f8

08008494 <_read_r>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	0004      	movs	r4, r0
 8008498:	0008      	movs	r0, r1
 800849a:	0011      	movs	r1, r2
 800849c:	001a      	movs	r2, r3
 800849e:	2300      	movs	r3, #0
 80084a0:	4d05      	ldr	r5, [pc, #20]	; (80084b8 <_read_r+0x24>)
 80084a2:	602b      	str	r3, [r5, #0]
 80084a4:	f7fa f942 	bl	800272c <_read>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d103      	bne.n	80084b4 <_read_r+0x20>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d000      	beq.n	80084b4 <_read_r+0x20>
 80084b2:	6023      	str	r3, [r4, #0]
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
 80084b6:	46c0      	nop			; (mov r8, r8)
 80084b8:	200002f8 	.word	0x200002f8

080084bc <_init>:
 80084bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c2:	bc08      	pop	{r3}
 80084c4:	469e      	mov	lr, r3
 80084c6:	4770      	bx	lr

080084c8 <_fini>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ce:	bc08      	pop	{r3}
 80084d0:	469e      	mov	lr, r3
 80084d2:	4770      	bx	lr
