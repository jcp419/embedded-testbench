
IR_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  080000b4  080000b4  000100b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002994  08002994  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002994  08002994  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002994  08002994  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800299c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  2000000c  080029a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080029a8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009073  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ba  00000000  00000000  000290a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002a968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014987  00000000  00000000  0002bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad58  00000000  00000000  00040507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084253  00000000  00000000  0004b25f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf4b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000215c  00000000  00000000  000cf504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b4 <__do_global_dtors_aux>:
 80000b4:	b510      	push	{r4, lr}
 80000b6:	4c06      	ldr	r4, [pc, #24]	; (80000d0 <__do_global_dtors_aux+0x1c>)
 80000b8:	7823      	ldrb	r3, [r4, #0]
 80000ba:	2b00      	cmp	r3, #0
 80000bc:	d107      	bne.n	80000ce <__do_global_dtors_aux+0x1a>
 80000be:	4b05      	ldr	r3, [pc, #20]	; (80000d4 <__do_global_dtors_aux+0x20>)
 80000c0:	2b00      	cmp	r3, #0
 80000c2:	d002      	beq.n	80000ca <__do_global_dtors_aux+0x16>
 80000c4:	4804      	ldr	r0, [pc, #16]	; (80000d8 <__do_global_dtors_aux+0x24>)
 80000c6:	e000      	b.n	80000ca <__do_global_dtors_aux+0x16>
 80000c8:	bf00      	nop
 80000ca:	2301      	movs	r3, #1
 80000cc:	7023      	strb	r3, [r4, #0]
 80000ce:	bd10      	pop	{r4, pc}
 80000d0:	2000000c 	.word	0x2000000c
 80000d4:	00000000 	.word	0x00000000
 80000d8:	08002928 	.word	0x08002928

080000dc <frame_dummy>:
 80000dc:	4b04      	ldr	r3, [pc, #16]	; (80000f0 <frame_dummy+0x14>)
 80000de:	b510      	push	{r4, lr}
 80000e0:	2b00      	cmp	r3, #0
 80000e2:	d003      	beq.n	80000ec <frame_dummy+0x10>
 80000e4:	4903      	ldr	r1, [pc, #12]	; (80000f4 <frame_dummy+0x18>)
 80000e6:	4804      	ldr	r0, [pc, #16]	; (80000f8 <frame_dummy+0x1c>)
 80000e8:	e000      	b.n	80000ec <frame_dummy+0x10>
 80000ea:	bf00      	nop
 80000ec:	bd10      	pop	{r4, pc}
 80000ee:	46c0      	nop			; (mov r8, r8)
 80000f0:	00000000 	.word	0x00000000
 80000f4:	20000010 	.word	0x20000010
 80000f8:	08002928 	.word	0x08002928

080000fc <__udivsi3>:
 80000fc:	2200      	movs	r2, #0
 80000fe:	0843      	lsrs	r3, r0, #1
 8000100:	428b      	cmp	r3, r1
 8000102:	d374      	bcc.n	80001ee <__udivsi3+0xf2>
 8000104:	0903      	lsrs	r3, r0, #4
 8000106:	428b      	cmp	r3, r1
 8000108:	d35f      	bcc.n	80001ca <__udivsi3+0xce>
 800010a:	0a03      	lsrs	r3, r0, #8
 800010c:	428b      	cmp	r3, r1
 800010e:	d344      	bcc.n	800019a <__udivsi3+0x9e>
 8000110:	0b03      	lsrs	r3, r0, #12
 8000112:	428b      	cmp	r3, r1
 8000114:	d328      	bcc.n	8000168 <__udivsi3+0x6c>
 8000116:	0c03      	lsrs	r3, r0, #16
 8000118:	428b      	cmp	r3, r1
 800011a:	d30d      	bcc.n	8000138 <__udivsi3+0x3c>
 800011c:	22ff      	movs	r2, #255	; 0xff
 800011e:	0209      	lsls	r1, r1, #8
 8000120:	ba12      	rev	r2, r2
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d302      	bcc.n	800012e <__udivsi3+0x32>
 8000128:	1212      	asrs	r2, r2, #8
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	d065      	beq.n	80001fa <__udivsi3+0xfe>
 800012e:	0b03      	lsrs	r3, r0, #12
 8000130:	428b      	cmp	r3, r1
 8000132:	d319      	bcc.n	8000168 <__udivsi3+0x6c>
 8000134:	e000      	b.n	8000138 <__udivsi3+0x3c>
 8000136:	0a09      	lsrs	r1, r1, #8
 8000138:	0bc3      	lsrs	r3, r0, #15
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x46>
 800013e:	03cb      	lsls	r3, r1, #15
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0b83      	lsrs	r3, r0, #14
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x52>
 800014a:	038b      	lsls	r3, r1, #14
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b43      	lsrs	r3, r0, #13
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x5e>
 8000156:	034b      	lsls	r3, r1, #13
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b03      	lsrs	r3, r0, #12
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x6a>
 8000162:	030b      	lsls	r3, r1, #12
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0ac3      	lsrs	r3, r0, #11
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x76>
 800016e:	02cb      	lsls	r3, r1, #11
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0a83      	lsrs	r3, r0, #10
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x82>
 800017a:	028b      	lsls	r3, r1, #10
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a43      	lsrs	r3, r0, #9
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x8e>
 8000186:	024b      	lsls	r3, r1, #9
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a03      	lsrs	r3, r0, #8
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x9a>
 8000192:	020b      	lsls	r3, r1, #8
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	d2cd      	bcs.n	8000136 <__udivsi3+0x3a>
 800019a:	09c3      	lsrs	r3, r0, #7
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xa8>
 80001a0:	01cb      	lsls	r3, r1, #7
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0983      	lsrs	r3, r0, #6
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xb4>
 80001ac:	018b      	lsls	r3, r1, #6
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0943      	lsrs	r3, r0, #5
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xc0>
 80001b8:	014b      	lsls	r3, r1, #5
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0903      	lsrs	r3, r0, #4
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xcc>
 80001c4:	010b      	lsls	r3, r1, #4
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	08c3      	lsrs	r3, r0, #3
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xd8>
 80001d0:	00cb      	lsls	r3, r1, #3
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0883      	lsrs	r3, r0, #2
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xe4>
 80001dc:	008b      	lsls	r3, r1, #2
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0843      	lsrs	r3, r0, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xf0>
 80001e8:	004b      	lsls	r3, r1, #1
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	1a41      	subs	r1, r0, r1
 80001f0:	d200      	bcs.n	80001f4 <__udivsi3+0xf8>
 80001f2:	4601      	mov	r1, r0
 80001f4:	4152      	adcs	r2, r2
 80001f6:	4610      	mov	r0, r2
 80001f8:	4770      	bx	lr
 80001fa:	e7ff      	b.n	80001fc <__udivsi3+0x100>
 80001fc:	b501      	push	{r0, lr}
 80001fe:	2000      	movs	r0, #0
 8000200:	f000 f806 	bl	8000210 <__aeabi_idiv0>
 8000204:	bd02      	pop	{r1, pc}
 8000206:	46c0      	nop			; (mov r8, r8)

08000208 <__aeabi_uidivmod>:
 8000208:	2900      	cmp	r1, #0
 800020a:	d0f7      	beq.n	80001fc <__udivsi3+0x100>
 800020c:	e776      	b.n	80000fc <__udivsi3>
 800020e:	4770      	bx	lr

08000210 <__aeabi_idiv0>:
 8000210:	4770      	bx	lr
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <ADC_Select_CH>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH(uint32_t sensor)
{
 8000214:	b590      	push	{r4, r7, lr}
 8000216:	b087      	sub	sp, #28
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	uint32_t in_channel;
	switch(sensor)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b04      	cmp	r3, #4
 8000220:	d814      	bhi.n	800024c <ADC_Select_CH+0x38>
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	009a      	lsls	r2, r3, #2
 8000226:	4b19      	ldr	r3, [pc, #100]	; (800028c <ADC_Select_CH+0x78>)
 8000228:	18d3      	adds	r3, r2, r3
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	469f      	mov	pc, r3
	{
	case 0:
		in_channel = ADC_CHANNEL_3;
 800022e:	4b18      	ldr	r3, [pc, #96]	; (8000290 <ADC_Select_CH+0x7c>)
 8000230:	617b      	str	r3, [r7, #20]
		break;
 8000232:	e00b      	b.n	800024c <ADC_Select_CH+0x38>
	case 1:
		in_channel = ADC_CHANNEL_4;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <ADC_Select_CH+0x80>)
 8000236:	617b      	str	r3, [r7, #20]
		break;
 8000238:	e008      	b.n	800024c <ADC_Select_CH+0x38>
	case 2:
		in_channel = ADC_CHANNEL_5;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <ADC_Select_CH+0x84>)
 800023c:	617b      	str	r3, [r7, #20]
		break;
 800023e:	e005      	b.n	800024c <ADC_Select_CH+0x38>
	case 3:
		in_channel = ADC_CHANNEL_6;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <ADC_Select_CH+0x88>)
 8000242:	617b      	str	r3, [r7, #20]
		break;
 8000244:	e002      	b.n	800024c <ADC_Select_CH+0x38>
	case 4:
		in_channel = ADC_CHANNEL_7;
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <ADC_Select_CH+0x8c>)
 8000248:	617b      	str	r3, [r7, #20]
		break;
 800024a:	46c0      	nop			; (mov r8, r8)
	}

	ADC_ChannelConfTypeDef sConfig = {0};
 800024c:	2408      	movs	r4, #8
 800024e:	193b      	adds	r3, r7, r4
 8000250:	0018      	movs	r0, r3
 8000252:	230c      	movs	r3, #12
 8000254:	001a      	movs	r2, r3
 8000256:	2100      	movs	r1, #0
 8000258:	f002 fb5e 	bl	8002918 <memset>
	sConfig.Channel = in_channel;
 800025c:	193b      	adds	r3, r7, r4
 800025e:	697a      	ldr	r2, [r7, #20]
 8000260:	601a      	str	r2, [r3, #0]

	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000268:	193b      	adds	r3, r7, r4
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800026e:	193a      	adds	r2, r7, r4
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <ADC_Select_CH+0x90>)
 8000272:	0011      	movs	r1, r2
 8000274:	0018      	movs	r0, r3
 8000276:	f000 ffe9 	bl	800124c <HAL_ADC_ConfigChannel>
 800027a:	1e03      	subs	r3, r0, #0
 800027c:	d001      	beq.n	8000282 <ADC_Select_CH+0x6e>
	{
	Error_Handler();
 800027e:	f000 f9e1 	bl	8000644 <Error_Handler>
	}
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b007      	add	sp, #28
 8000288:	bd90      	pop	{r4, r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	08002940 	.word	0x08002940
 8000290:	0c000008 	.word	0x0c000008
 8000294:	10000010 	.word	0x10000010
 8000298:	14000020 	.word	0x14000020
 800029c:	18000040 	.word	0x18000040
 80002a0:	1c000080 	.word	0x1c000080
 80002a4:	20000028 	.word	0x20000028

080002a8 <read_values_sensor>:

void read_values_sensor(uint16_t* values, uint8_t channel) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	000a      	movs	r2, r1
 80002b2:	1cfb      	adds	r3, r7, #3
 80002b4:	701a      	strb	r2, [r3, #0]
	ADC_Select_CH(channel + 3);
 80002b6:	1cfb      	adds	r3, r7, #3
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	3303      	adds	r3, #3
 80002bc:	0018      	movs	r0, r3
 80002be:	f7ff ffa9 	bl	8000214 <ADC_Select_CH>
	HAL_ADC_Start(&hadc1);
 80002c2:	4b11      	ldr	r3, [pc, #68]	; (8000308 <read_values_sensor+0x60>)
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fe97 	bl	8000ff8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002ca:	2301      	movs	r3, #1
 80002cc:	425a      	negs	r2, r3
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <read_values_sensor+0x60>)
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 ff1a 	bl	800110c <HAL_ADC_PollForConversion>
	*(values + channel) = HAL_ADC_GetValue(&hadc1);
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <read_values_sensor+0x60>)
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 ffaa 	bl	8001234 <HAL_ADC_GetValue>
 80002e0:	0001      	movs	r1, r0
 80002e2:	1cfb      	adds	r3, r7, #3
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	18d3      	adds	r3, r2, r3
 80002ec:	b28a      	uxth	r2, r1
 80002ee:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <read_values_sensor+0x60>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f000 fece 	bl	8001094 <HAL_ADC_Stop>
	HAL_Delay(100);
 80002f8:	2064      	movs	r0, #100	; 0x64
 80002fa:	f000 fb29 	bl	8000950 <HAL_Delay>
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b002      	add	sp, #8
 8000304:	bd80      	pop	{r7, pc}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	20000028 	.word	0x20000028

0800030c <sensor_blocked>:

uint8_t sensor_blocked(uint16_t* values, uint8_t channel, uint32_t threshold) {
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	607a      	str	r2, [r7, #4]
 8000316:	200b      	movs	r0, #11
 8000318:	183b      	adds	r3, r7, r0
 800031a:	1c0a      	adds	r2, r1, #0
 800031c:	701a      	strb	r2, [r3, #0]
	// if it is blocked, ADC value is very low
	// (if more light is reflected, lower the value)
	return *(values + channel) < threshold;
 800031e:	183b      	adds	r3, r7, r0
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	18d3      	adds	r3, r2, r3
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	001a      	movs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	429a      	cmp	r2, r3
 8000330:	419b      	sbcs	r3, r3
 8000332:	425b      	negs	r3, r3
 8000334:	b2db      	uxtb	r3, r3
}
 8000336:	0018      	movs	r0, r3
 8000338:	46bd      	mov	sp, r7
 800033a:	b004      	add	sp, #16
 800033c:	bd80      	pop	{r7, pc}

0800033e <calculate_turn_count>:

uint8_t calculate_turn_count(uint16_t* values, uint32_t threshold) {
 800033e:	b590      	push	{r4, r7, lr}
 8000340:	b085      	sub	sp, #20
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	6039      	str	r1, [r7, #0]
	// Turn count = 2 means sensors 0-2 are blocked.

	// Can count up to turn count = 4.


	for (int8_t i = 4; i >= 0; --i) {
 8000348:	230f      	movs	r3, #15
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	2204      	movs	r2, #4
 800034e:	701a      	strb	r2, [r3, #0]
 8000350:	e013      	b.n	800037a <calculate_turn_count+0x3c>
		if (sensor_blocked(values, i, threshold)) {
 8000352:	240f      	movs	r4, #15
 8000354:	193b      	adds	r3, r7, r4
 8000356:	7819      	ldrb	r1, [r3, #0]
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	0018      	movs	r0, r3
 800035e:	f7ff ffd5 	bl	800030c <sensor_blocked>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d002      	beq.n	800036c <calculate_turn_count+0x2e>
			return i;
 8000366:	193b      	adds	r3, r7, r4
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	e00c      	b.n	8000386 <calculate_turn_count+0x48>
	for (int8_t i = 4; i >= 0; --i) {
 800036c:	210f      	movs	r1, #15
 800036e:	187b      	adds	r3, r7, r1
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	3b01      	subs	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	187b      	adds	r3, r7, r1
 8000378:	701a      	strb	r2, [r3, #0]
 800037a:	230f      	movs	r3, #15
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b7f      	cmp	r3, #127	; 0x7f
 8000382:	d9e6      	bls.n	8000352 <calculate_turn_count+0x14>
		}
	}
	return 10; // If all sensors are not blocked, then something is seriously wrong.
 8000384:	230a      	movs	r3, #10
}
 8000386:	0018      	movs	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	b005      	add	sp, #20
 800038c:	bd90      	pop	{r4, r7, pc}
	...

08000390 <refresh_turn_count>:

void refresh_turn_count() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 5; ++i)
 8000396:	1dfb      	adds	r3, r7, #7
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
 800039c:	e00b      	b.n	80003b6 <refresh_turn_count+0x26>
	{
	  read_values_sensor(values, i);
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	781a      	ldrb	r2, [r3, #0]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <refresh_turn_count+0x48>)
 80003a4:	0011      	movs	r1, r2
 80003a6:	0018      	movs	r0, r3
 80003a8:	f7ff ff7e 	bl	80002a8 <read_values_sensor>
	for(uint8_t i = 0; i < 5; ++i)
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	1dfa      	adds	r2, r7, #7
 80003b0:	7812      	ldrb	r2, [r2, #0]
 80003b2:	3201      	adds	r2, #1
 80003b4:	701a      	strb	r2, [r3, #0]
 80003b6:	1dfb      	adds	r3, r7, #7
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b04      	cmp	r3, #4
 80003bc:	d9ef      	bls.n	800039e <refresh_turn_count+0xe>
	}
	turn_count = calculate_turn_count(values, THRESHOLD);
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <refresh_turn_count+0x48>)
 80003c0:	2105      	movs	r1, #5
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ffbb 	bl	800033e <calculate_turn_count>
 80003c8:	0003      	movs	r3, r0
 80003ca:	001a      	movs	r2, r3
 80003cc:	4b03      	ldr	r3, [pc, #12]	; (80003dc <refresh_turn_count+0x4c>)
 80003ce:	701a      	strb	r2, [r3, #0]
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b002      	add	sp, #8
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000d8 	.word	0x200000d8
 80003dc:	200000e8 	.word	0x200000e8

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f000 fa2e 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f809 	bl	80003fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ec:	f000 f8e4 	bl	80005b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003f0:	f000 f84e 	bl	8000490 <MX_ADC1_Init>
  MX_I2C2_Init();
 80003f4:	f000 f8a0 	bl	8000538 <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  refresh_turn_count();
 80003f8:	f7ff ffca 	bl	8000390 <refresh_turn_count>
 80003fc:	e7fc      	b.n	80003f8 <main+0x18>

080003fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fe:	b590      	push	{r4, r7, lr}
 8000400:	b093      	sub	sp, #76	; 0x4c
 8000402:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000404:	2414      	movs	r4, #20
 8000406:	193b      	adds	r3, r7, r4
 8000408:	0018      	movs	r0, r3
 800040a:	2334      	movs	r3, #52	; 0x34
 800040c:	001a      	movs	r2, r3
 800040e:	2100      	movs	r1, #0
 8000410:	f002 fa82 	bl	8002918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	0018      	movs	r0, r3
 8000418:	2310      	movs	r3, #16
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f002 fa7b 	bl	8002918 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000422:	2380      	movs	r3, #128	; 0x80
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	0018      	movs	r0, r3
 8000428:	f001 fd72 	bl	8001f10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042c:	193b      	adds	r3, r7, r4
 800042e:	2202      	movs	r2, #2
 8000430:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000432:	193b      	adds	r3, r7, r4
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2240      	movs	r2, #64	; 0x40
 8000444:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2200      	movs	r2, #0
 800044a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	193b      	adds	r3, r7, r4
 800044e:	0018      	movs	r0, r3
 8000450:	f001 fd9e 	bl	8001f90 <HAL_RCC_OscConfig>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000458:	f000 f8f4 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2207      	movs	r2, #7
 8000460:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2100      	movs	r1, #0
 8000478:	0018      	movs	r0, r3
 800047a:	f002 f89f 	bl	80025bc <HAL_RCC_ClockConfig>
 800047e:	1e03      	subs	r3, r0, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000482:	f000 f8df 	bl	8000644 <Error_Handler>
  }
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b013      	add	sp, #76	; 0x4c
 800048c:	bd90      	pop	{r4, r7, pc}
	...

08000490 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b084      	sub	sp, #16
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	0018      	movs	r0, r3
 800049a:	230c      	movs	r3, #12
 800049c:	001a      	movs	r2, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	f002 fa3a 	bl	8002918 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004a4:	4b22      	ldr	r3, [pc, #136]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004a6:	4a23      	ldr	r2, [pc, #140]	; (8000534 <MX_ADC1_Init+0xa4>)
 80004a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004aa:	4b21      	ldr	r3, [pc, #132]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004ac:	2280      	movs	r2, #128	; 0x80
 80004ae:	05d2      	lsls	r2, r2, #23
 80004b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004b2:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004b8:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004be:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004c6:	2204      	movs	r2, #4
 80004c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004ca:	4b19      	ldr	r3, [pc, #100]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004de:	2201      	movs	r2, #1
 80004e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004f0:	222c      	movs	r2, #44	; 0x2c
 80004f2:	2100      	movs	r1, #0
 80004f4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_ADC1_Init+0xa0>)
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_ADC1_Init+0xa0>)
 8000504:	2200      	movs	r2, #0
 8000506:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_ADC1_Init+0xa0>)
 800050a:	223c      	movs	r2, #60	; 0x3c
 800050c:	2100      	movs	r1, #0
 800050e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000510:	4b07      	ldr	r3, [pc, #28]	; (8000530 <MX_ADC1_Init+0xa0>)
 8000512:	2200      	movs	r2, #0
 8000514:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_ADC1_Init+0xa0>)
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fb8f 	bl	8000c3c <HAL_ADC_Init>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d001      	beq.n	8000526 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000522:	f000 f88f 	bl	8000644 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b004      	add	sp, #16
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	20000028 	.word	0x20000028
 8000534:	40012400 	.word	0x40012400

08000538 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800053c:	4b1b      	ldr	r3, [pc, #108]	; (80005ac <MX_I2C2_Init+0x74>)
 800053e:	4a1c      	ldr	r2, [pc, #112]	; (80005b0 <MX_I2C2_Init+0x78>)
 8000540:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000542:	4b1a      	ldr	r3, [pc, #104]	; (80005ac <MX_I2C2_Init+0x74>)
 8000544:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <MX_I2C2_Init+0x7c>)
 8000546:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_I2C2_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_I2C2_Init+0x74>)
 8000550:	2201      	movs	r2, #1
 8000552:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_I2C2_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_I2C2_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_I2C2_Init+0x74>)
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_I2C2_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_I2C2_Init+0x74>)
 800056e:	2200      	movs	r2, #0
 8000570:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <MX_I2C2_Init+0x74>)
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fb9d 	bl	8001cb4 <HAL_I2C_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800057e:	f000 f861 	bl	8000644 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MX_I2C2_Init+0x74>)
 8000584:	2100      	movs	r1, #0
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fc2a 	bl	8001de0 <HAL_I2CEx_ConfigAnalogFilter>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000590:	f000 f858 	bl	8000644 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MX_I2C2_Init+0x74>)
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fc6d 	bl	8001e78 <HAL_I2CEx_ConfigDigitalFilter>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80005a2:	f000 f84f 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000008c 	.word	0x2000008c
 80005b0:	40005800 	.word	0x40005800
 80005b4:	00303d5b 	.word	0x00303d5b

080005b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	; 0x24
 80005bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	240c      	movs	r4, #12
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 f9a5 	bl	8002918 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_GPIO_Init+0x88>)
 80005d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_GPIO_Init+0x88>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
 80005da:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_GPIO_Init+0x88>)
 80005dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_GPIO_Init+0x88>)
 80005e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_GPIO_Init+0x88>)
 80005ec:	2102      	movs	r1, #2
 80005ee:	430a      	orrs	r2, r1
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_GPIO_Init+0x88>)
 80005f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005f6:	2202      	movs	r2, #2
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	0219      	lsls	r1, r3, #8
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fb35 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	0212      	lsls	r2, r2, #8
 8000614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2201      	movs	r2, #1
 800061a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	193a      	adds	r2, r7, r4
 800062a:	23a0      	movs	r3, #160	; 0xa0
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	0011      	movs	r1, r2
 8000630:	0018      	movs	r0, r3
 8000632:	f001 f9bd 	bl	80019b0 <HAL_GPIO_Init>

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	b009      	add	sp, #36	; 0x24
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	40021000 	.word	0x40021000

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	e7fe      	b.n	800064c <Error_Handler+0x8>
	...

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x44>)
 8000658:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_MspInit+0x44>)
 800065c:	2101      	movs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	641a      	str	r2, [r3, #64]	; 0x40
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x44>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	2201      	movs	r2, #1
 8000668:	4013      	ands	r3, r2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x44>)
 8000670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_MspInit+0x44>)
 8000674:	2180      	movs	r1, #128	; 0x80
 8000676:	0549      	lsls	r1, r1, #21
 8000678:	430a      	orrs	r2, r1
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_MspInit+0x44>)
 800067e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	055b      	lsls	r3, r3, #21
 8000684:	4013      	ands	r3, r2
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b002      	add	sp, #8
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	40021000 	.word	0x40021000

08000698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b08b      	sub	sp, #44	; 0x2c
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	2414      	movs	r4, #20
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2314      	movs	r3, #20
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f002 f934 	bl	8002918 <memset>
  if(hadc->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a18      	ldr	r2, [pc, #96]	; (8000718 <HAL_ADC_MspInit+0x80>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d129      	bne.n	800070e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_ADC_MspInit+0x84>)
 80006bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <HAL_ADC_MspInit+0x84>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	0349      	lsls	r1, r1, #13
 80006c4:	430a      	orrs	r2, r1
 80006c6:	641a      	str	r2, [r3, #64]	; 0x40
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <HAL_ADC_MspInit+0x84>)
 80006ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006cc:	2380      	movs	r3, #128	; 0x80
 80006ce:	035b      	lsls	r3, r3, #13
 80006d0:	4013      	ands	r3, r2
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_ADC_MspInit+0x84>)
 80006d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_ADC_MspInit+0x84>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <HAL_ADC_MspInit+0x84>)
 80006e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	22f9      	movs	r2, #249	; 0xf9
 80006f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2203      	movs	r2, #3
 80006f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	193a      	adds	r2, r7, r4
 8000702:	23a0      	movs	r3, #160	; 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 f951 	bl	80019b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b00b      	add	sp, #44	; 0x2c
 8000714:	bd90      	pop	{r4, r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40012400 	.word	0x40012400
 800071c:	40021000 	.word	0x40021000

08000720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b08b      	sub	sp, #44	; 0x2c
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	2414      	movs	r4, #20
 800072a:	193b      	adds	r3, r7, r4
 800072c:	0018      	movs	r0, r3
 800072e:	2314      	movs	r3, #20
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f002 f8f0 	bl	8002918 <memset>
  if(hi2c->Instance==I2C2)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <HAL_I2C_MspInit+0x8c>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d130      	bne.n	80007a4 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_I2C_MspInit+0x90>)
 8000744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <HAL_I2C_MspInit+0x90>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
 800074e:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_I2C_MspInit+0x90>)
 8000750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	22c0      	movs	r2, #192	; 0xc0
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2212      	movs	r2, #18
 8000768:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2206      	movs	r2, #6
 800077a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	187b      	adds	r3, r7, r1
 800077e:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <HAL_I2C_MspInit+0x94>)
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f001 f914 	bl	80019b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_I2C_MspInit+0x90>)
 800078a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <HAL_I2C_MspInit+0x90>)
 800078e:	2180      	movs	r1, #128	; 0x80
 8000790:	03c9      	lsls	r1, r1, #15
 8000792:	430a      	orrs	r2, r1
 8000794:	63da      	str	r2, [r3, #60]	; 0x3c
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_I2C_MspInit+0x90>)
 8000798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	03db      	lsls	r3, r3, #15
 800079e:	4013      	ands	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b00b      	add	sp, #44	; 0x2c
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	40005800 	.word	0x40005800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	50000400 	.word	0x50000400

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 f89c 	bl	8000918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f4:	f7ff fff7 	bl	80007e6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081e:	f002 f857 	bl	80028d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000822:	f7ff fddd 	bl	80003e0 <main>

08000826 <LoopForever>:

LoopForever:
  b LoopForever
 8000826:	e7fe      	b.n	8000826 <LoopForever>
  ldr   r0, =_estack
 8000828:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000834:	0800299c 	.word	0x0800299c
  ldr r2, =_sbss
 8000838:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800083c:	200000f0 	.word	0x200000f0

08000840 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_IRQHandler>
	...

08000844 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_Init+0x3c>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_Init+0x3c>)
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0049      	lsls	r1, r1, #1
 800085a:	430a      	orrs	r2, r1
 800085c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f810 	bl	8000884 <HAL_InitTick>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d003      	beq.n	8000870 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	2201      	movs	r2, #1
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e001      	b.n	8000874 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff feee 	bl	8000650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000874:	1dfb      	adds	r3, r7, #7
 8000876:	781b      	ldrb	r3, [r3, #0]
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800088c:	230f      	movs	r3, #15
 800088e:	18fb      	adds	r3, r7, r3
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <HAL_InitTick+0x88>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d02b      	beq.n	80008f4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_InitTick+0x8c>)
 800089e:	681c      	ldr	r4, [r3, #0]
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <HAL_InitTick+0x88>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	0019      	movs	r1, r3
 80008a6:	23fa      	movs	r3, #250	; 0xfa
 80008a8:	0098      	lsls	r0, r3, #2
 80008aa:	f7ff fc27 	bl	80000fc <__udivsi3>
 80008ae:	0003      	movs	r3, r0
 80008b0:	0019      	movs	r1, r3
 80008b2:	0020      	movs	r0, r4
 80008b4:	f7ff fc22 	bl	80000fc <__udivsi3>
 80008b8:	0003      	movs	r3, r0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 f86b 	bl	8001996 <HAL_SYSTICK_Config>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d112      	bne.n	80008ea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d80a      	bhi.n	80008e0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	2301      	movs	r3, #1
 80008ce:	425b      	negs	r3, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 f84a 	bl	800196c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_InitTick+0x90>)
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	e00d      	b.n	80008fc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	2201      	movs	r2, #1
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e008      	b.n	80008fc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ea:	230f      	movs	r3, #15
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e003      	b.n	80008fc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008f4:	230f      	movs	r3, #15
 80008f6:	18fb      	adds	r3, r7, r3
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008fc:	230f      	movs	r3, #15
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	781b      	ldrb	r3, [r3, #0]
}
 8000902:	0018      	movs	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	b005      	add	sp, #20
 8000908:	bd90      	pop	{r4, r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	20000008 	.word	0x20000008
 8000910:	20000000 	.word	0x20000000
 8000914:	20000004 	.word	0x20000004

08000918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_IncTick+0x1c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	001a      	movs	r2, r3
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <HAL_IncTick+0x20>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	18d2      	adds	r2, r2, r3
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <HAL_IncTick+0x20>)
 800092a:	601a      	str	r2, [r3, #0]
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000008 	.word	0x20000008
 8000938:	200000ec 	.word	0x200000ec

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b02      	ldr	r3, [pc, #8]	; (800094c <HAL_GetTick+0x10>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	0018      	movs	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	200000ec 	.word	0x200000ec

08000950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000958:	f7ff fff0 	bl	800093c <HAL_GetTick>
 800095c:	0003      	movs	r3, r0
 800095e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3301      	adds	r3, #1
 8000968:	d005      	beq.n	8000976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096a:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <HAL_Delay+0x44>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	001a      	movs	r2, r3
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	189b      	adds	r3, r3, r2
 8000974:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	f7ff ffe0 	bl	800093c <HAL_GetTick>
 800097c:	0002      	movs	r2, r0
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	429a      	cmp	r2, r3
 8000986:	d8f7      	bhi.n	8000978 <HAL_Delay+0x28>
  {
  }
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b004      	add	sp, #16
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000008 	.word	0x20000008

08000998 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80009a8:	401a      	ands	r2, r3
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	431a      	orrs	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	fe3fffff 	.word	0xfe3fffff

080009c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	23e0      	movs	r3, #224	; 0xe0
 80009ce:	045b      	lsls	r3, r3, #17
 80009d0:	4013      	ands	r3, r2
}
 80009d2:	0018      	movs	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}

080009da <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b084      	sub	sp, #16
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	2104      	movs	r1, #4
 80009ee:	400a      	ands	r2, r1
 80009f0:	2107      	movs	r1, #7
 80009f2:	4091      	lsls	r1, r2
 80009f4:	000a      	movs	r2, r1
 80009f6:	43d2      	mvns	r2, r2
 80009f8:	401a      	ands	r2, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2104      	movs	r1, #4
 80009fe:	400b      	ands	r3, r1
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	4099      	lsls	r1, r3
 8000a04:	000b      	movs	r3, r1
 8000a06:	431a      	orrs	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b004      	add	sp, #16
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	23c0      	movs	r3, #192	; 0xc0
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	4013      	ands	r3, r2
 8000a26:	d101      	bne.n	8000a2c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	211f      	movs	r1, #31
 8000a4a:	400a      	ands	r2, r1
 8000a4c:	210f      	movs	r1, #15
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	000a      	movs	r2, r1
 8000a52:	43d2      	mvns	r2, r2
 8000a54:	401a      	ands	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	0e9b      	lsrs	r3, r3, #26
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	4019      	ands	r1, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	201f      	movs	r0, #31
 8000a62:	4003      	ands	r3, r0
 8000a64:	4099      	lsls	r1, r3
 8000a66:	000b      	movs	r3, r1
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	035b      	lsls	r3, r3, #13
 8000a88:	0b5b      	lsrs	r3, r3, #13
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	0352      	lsls	r2, r2, #13
 8000aaa:	0b52      	lsrs	r2, r2, #13
 8000aac:	43d2      	mvns	r2, r2
 8000aae:	401a      	ands	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	68ba      	ldr	r2, [r7, #8]
 8000ace:	0212      	lsls	r2, r2, #8
 8000ad0:	43d2      	mvns	r2, r2
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	400b      	ands	r3, r1
 8000adc:	4904      	ldr	r1, [pc, #16]	; (8000af0 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000ade:	400b      	ands	r3, r1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b004      	add	sp, #16
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	07ffff00 	.word	0x07ffff00

08000af4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <LL_ADC_EnableInternalRegulator+0x24>)
 8000b02:	4013      	ands	r3, r2
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	0552      	lsls	r2, r2, #21
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	6fffffe8 	.word	0x6fffffe8

08000b1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	2380      	movs	r3, #128	; 0x80
 8000b2a:	055b      	lsls	r3, r3, #21
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	055b      	lsls	r3, r3, #21
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d101      	bne.n	8000b3a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b002      	add	sp, #8
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <LL_ADC_Enable+0x20>)
 8000b52:	4013      	ands	r3, r2
 8000b54:	2201      	movs	r2, #1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	7fffffe8 	.word	0x7fffffe8

08000b68 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <LL_ADC_Disable+0x20>)
 8000b76:	4013      	ands	r3, r2
 8000b78:	2202      	movs	r2, #2
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	7fffffe8 	.word	0x7fffffe8

08000b8c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d101      	bne.n	8000ba4 <LL_ADC_IsEnabled+0x18>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <LL_ADC_IsEnabled+0x1a>
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b002      	add	sp, #8
 8000bac:	bd80      	pop	{r7, pc}

08000bae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2202      	movs	r2, #2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d101      	bne.n	8000bc6 <LL_ADC_IsDisableOngoing+0x18>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e000      	b.n	8000bc8 <LL_ADC_IsDisableOngoing+0x1a>
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	0018      	movs	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	b002      	add	sp, #8
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <LL_ADC_REG_StartConversion+0x20>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	2204      	movs	r2, #4
 8000be2:	431a      	orrs	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	7fffffe8 	.word	0x7fffffe8

08000bf4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <LL_ADC_REG_StopConversion+0x20>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	2210      	movs	r2, #16
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	7fffffe8 	.word	0x7fffffe8

08000c18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2204      	movs	r2, #4
 8000c26:	4013      	ands	r3, r2
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d101      	bne.n	8000c30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e000      	b.n	8000c32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	0018      	movs	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b002      	add	sp, #8
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c44:	231f      	movs	r3, #31
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e1b1      	b.n	8000fc6 <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d10a      	bne.n	8000c80 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff fd13 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2254      	movs	r2, #84	; 0x54
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff49 	bl	8000b1c <LL_ADC_IsInternalRegulatorEnabled>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d115      	bne.n	8000cba <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff ff2e 	bl	8000af4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000c98:	4bcd      	ldr	r3, [pc, #820]	; (8000fd0 <HAL_ADC_Init+0x394>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	49cd      	ldr	r1, [pc, #820]	; (8000fd4 <HAL_ADC_Init+0x398>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fa2c 	bl	80000fc <__udivsi3>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000cac:	e002      	b.n	8000cb4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f9      	bne.n	8000cae <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff2c 	bl	8000b1c <LL_ADC_IsInternalRegulatorEnabled>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d10f      	bne.n	8000ce8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ccc:	2210      	movs	r2, #16
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cd8:	2201      	movs	r2, #1
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000ce0:	231f      	movs	r3, #31
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff ff93 	bl	8000c18 <LL_ADC_REG_IsConversionOngoing>
 8000cf2:	0003      	movs	r3, r0
 8000cf4:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfa:	2210      	movs	r2, #16
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d000      	beq.n	8000d02 <HAL_ADC_Init+0xc6>
 8000d00:	e154      	b.n	8000fac <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d000      	beq.n	8000d0a <HAL_ADC_Init+0xce>
 8000d08:	e150      	b.n	8000fac <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	4ab2      	ldr	r2, [pc, #712]	; (8000fd8 <HAL_ADC_Init+0x39c>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	2202      	movs	r2, #2
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff ff34 	bl	8000b8c <LL_ADC_IsEnabled>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d156      	bne.n	8000dd6 <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	2218      	movs	r2, #24
 8000d30:	4393      	bics	r3, r2
 8000d32:	0019      	movs	r1, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	0f9b      	lsrs	r3, r3, #30
 8000d46:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	223c      	movs	r2, #60	; 0x3c
 8000d58:	5c9b      	ldrb	r3, [r3, r2]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d111      	bne.n	8000d82 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	0f9b      	lsrs	r3, r3, #30
 8000d64:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000d6a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8000d70:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8000d76:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	4a94      	ldr	r2, [pc, #592]	; (8000fdc <HAL_ADC_Init+0x3a0>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	23c0      	movs	r3, #192	; 0xc0
 8000d9e:	061b      	lsls	r3, r3, #24
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d018      	beq.n	8000dd6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	05db      	lsls	r3, r3, #23
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d012      	beq.n	8000dd6 <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	061b      	lsls	r3, r3, #24
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d00c      	beq.n	8000dd6 <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000dbc:	4b88      	ldr	r3, [pc, #544]	; (8000fe0 <HAL_ADC_Init+0x3a4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a88      	ldr	r2, [pc, #544]	; (8000fe4 <HAL_ADC_Init+0x3a8>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	23f0      	movs	r3, #240	; 0xf0
 8000dcc:	039b      	lsls	r3, r3, #14
 8000dce:	401a      	ands	r2, r3
 8000dd0:	4b83      	ldr	r3, [pc, #524]	; (8000fe0 <HAL_ADC_Init+0x3a4>)
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7e1b      	ldrb	r3, [r3, #24]
 8000dda:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e5b      	ldrb	r3, [r3, #25]
 8000de0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000de2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7e9b      	ldrb	r3, [r3, #26]
 8000de8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000dea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <HAL_ADC_Init+0x1be>
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	015b      	lsls	r3, r3, #5
 8000df8:	e000      	b.n	8000dfc <HAL_ADC_Init+0x1c0>
 8000dfa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000dfc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000e02:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da04      	bge.n	8000e16 <HAL_ADC_Init+0x1da>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	085b      	lsrs	r3, r3, #1
 8000e14:	e001      	b.n	8000e1a <HAL_ADC_Init+0x1de>
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8000e1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	212c      	movs	r1, #44	; 0x2c
 8000e20:	5c5b      	ldrb	r3, [r3, r1]
 8000e22:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000e24:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2220      	movs	r2, #32
 8000e30:	5c9b      	ldrb	r3, [r3, r2]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d115      	bne.n	8000e62 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7e9b      	ldrb	r3, [r3, #26]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d105      	bne.n	8000e4a <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	0252      	lsls	r2, r2, #9
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	e00b      	b.n	8000e62 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	2220      	movs	r2, #32
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00a      	beq.n	8000e80 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e6e:	23e0      	movs	r3, #224	; 0xe0
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <HAL_ADC_Init+0x3ac>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	0019      	movs	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	4a53      	ldr	r2, [pc, #332]	; (8000fec <HAL_ADC_Init+0x3b0>)
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6818      	ldr	r0, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f7ff fd8f 	bl	80009da <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec4:	494a      	ldr	r1, [pc, #296]	; (8000ff0 <HAL_ADC_Init+0x3b4>)
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	f7ff fd87 	bl	80009da <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d109      	bne.n	8000ee8 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2110      	movs	r1, #16
 8000ee0:	4249      	negs	r1, r1
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
 8000ee6:	e03a      	b.n	8000f5e <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	039b      	lsls	r3, r3, #14
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d134      	bne.n	8000f5e <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	e00c      	b.n	8000f14 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	40da      	lsrs	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	220f      	movs	r2, #15
 8000f08:	4013      	ands	r3, r2
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d006      	beq.n	8000f1c <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	3301      	adds	r3, #1
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	2b07      	cmp	r3, #7
 8000f18:	d9ef      	bls.n	8000efa <HAL_ADC_Init+0x2be>
 8000f1a:	e000      	b.n	8000f1e <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8000f1c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d109      	bne.n	8000f38 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2110      	movs	r1, #16
 8000f30:	4249      	negs	r1, r1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
 8000f36:	e012      	b.n	8000f5e <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	221c      	movs	r2, #28
 8000f48:	4013      	ands	r3, r2
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0011      	movs	r1, r2
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <HAL_ADC_Init+0x3b8>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d10b      	bne.n	8000f86 <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	2203      	movs	r2, #3
 8000f7a:	4393      	bics	r3, r2
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000f84:	e01c      	b.n	8000fc0 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8a:	2212      	movs	r2, #18
 8000f8c:	4393      	bics	r3, r2
 8000f8e:	2210      	movs	r2, #16
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000fa2:	231f      	movs	r3, #31
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8000faa:	e009      	b.n	8000fc0 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb0:	2210      	movs	r2, #16
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000fb8:	231f      	movs	r3, #31
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000fc0:	231f      	movs	r3, #31
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	781b      	ldrb	r3, [r3, #0]
}
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b008      	add	sp, #32
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	00030d40 	.word	0x00030d40
 8000fd8:	fffffefd 	.word	0xfffffefd
 8000fdc:	1ffffc02 	.word	0x1ffffc02
 8000fe0:	40012708 	.word	0x40012708
 8000fe4:	ffc3ffff 	.word	0xffc3ffff
 8000fe8:	fffe0219 	.word	0xfffe0219
 8000fec:	dffffc02 	.word	0xdffffc02
 8000ff0:	07ffff04 	.word	0x07ffff04
 8000ff4:	833fffe7 	.word	0x833fffe7

08000ff8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff fe07 	bl	8000c18 <LL_ADC_REG_IsConversionOngoing>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d135      	bne.n	800107a <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2254      	movs	r2, #84	; 0x54
 8001012:	5c9b      	ldrb	r3, [r3, r2]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d101      	bne.n	800101c <HAL_ADC_Start+0x24>
 8001018:	2302      	movs	r3, #2
 800101a:	e035      	b.n	8001088 <HAL_ADC_Start+0x90>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2254      	movs	r2, #84	; 0x54
 8001020:	2101      	movs	r1, #1
 8001022:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001024:	250f      	movs	r5, #15
 8001026:	197c      	adds	r4, r7, r5
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fb28 	bl	8001680 <ADC_Enable>
 8001030:	0003      	movs	r3, r0
 8001032:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001034:	197b      	adds	r3, r7, r5
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d119      	bne.n	8001070 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001040:	4a13      	ldr	r2, [pc, #76]	; (8001090 <HAL_ADC_Start+0x98>)
 8001042:	4013      	ands	r3, r2
 8001044:	2280      	movs	r2, #128	; 0x80
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	221c      	movs	r2, #28
 800105a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2254      	movs	r2, #84	; 0x54
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff fdb1 	bl	8000bd0 <LL_ADC_REG_StartConversion>
 800106e:	e008      	b.n	8001082 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2254      	movs	r2, #84	; 0x54
 8001074:	2100      	movs	r1, #0
 8001076:	5499      	strb	r1, [r3, r2]
 8001078:	e003      	b.n	8001082 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800107a:	230f      	movs	r3, #15
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2202      	movs	r2, #2
 8001080:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001082:	230f      	movs	r3, #15
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	781b      	ldrb	r3, [r3, #0]
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bdb0      	pop	{r4, r5, r7, pc}
 8001090:	fffff0fe 	.word	0xfffff0fe

08001094 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2254      	movs	r2, #84	; 0x54
 80010a0:	5c9b      	ldrb	r3, [r3, r2]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_Stop+0x16>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e029      	b.n	80010fe <HAL_ADC_Stop+0x6a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2254      	movs	r2, #84	; 0x54
 80010ae:	2101      	movs	r1, #1
 80010b0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80010b2:	250f      	movs	r5, #15
 80010b4:	197c      	adds	r4, r7, r5
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	0018      	movs	r0, r3
 80010ba:	f000 fa9f 	bl	80015fc <ADC_ConversionStop>
 80010be:	0003      	movs	r3, r0
 80010c0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80010c2:	197b      	adds	r3, r7, r5
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d112      	bne.n	80010f0 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80010ca:	197c      	adds	r4, r7, r5
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fb5c 	bl	800178c <ADC_Disable>
 80010d4:	0003      	movs	r3, r0
 80010d6:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80010d8:	197b      	adds	r3, r7, r5
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d107      	bne.n	80010f0 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_ADC_Stop+0x74>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	2201      	movs	r2, #1
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2254      	movs	r2, #84	; 0x54
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781b      	ldrb	r3, [r3, #0]
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b004      	add	sp, #16
 8001104:	bdb0      	pop	{r4, r5, r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	fffffefe 	.word	0xfffffefe

0800110c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	2b08      	cmp	r3, #8
 800111c:	d102      	bne.n	8001124 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800111e:	2308      	movs	r3, #8
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e00f      	b.n	8001144 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	2201      	movs	r2, #1
 800112c:	4013      	ands	r3, r2
 800112e:	d007      	beq.n	8001140 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001134:	2220      	movs	r2, #32
 8001136:	431a      	orrs	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e072      	b.n	8001226 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8001140:	2304      	movs	r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001144:	f7ff fbfa 	bl	800093c <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800114c:	e01f      	b.n	800118e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	d01c      	beq.n	800118e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001154:	f7ff fbf2 	bl	800093c <HAL_GetTick>
 8001158:	0002      	movs	r2, r0
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d302      	bcc.n	800116a <HAL_ADC_PollForConversion+0x5e>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d111      	bne.n	800118e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	d10b      	bne.n	800118e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800117a:	2204      	movs	r2, #4
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2254      	movs	r2, #84	; 0x54
 8001186:	2100      	movs	r1, #0
 8001188:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e04b      	b.n	8001226 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	4013      	ands	r3, r2
 8001198:	d0d9      	beq.n	800114e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	0092      	lsls	r2, r2, #2
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff fc31 	bl	8000a14 <LL_ADC_REG_IsTriggerSourceSWStart>
 80011b2:	1e03      	subs	r3, r0, #0
 80011b4:	d02e      	beq.n	8001214 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7e9b      	ldrb	r3, [r3, #26]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d12a      	bne.n	8001214 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2208      	movs	r2, #8
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d123      	bne.n	8001214 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0018      	movs	r0, r3
 80011d2:	f7ff fd21 	bl	8000c18 <LL_ADC_REG_IsConversionOngoing>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d110      	bne.n	80011fc <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	210c      	movs	r1, #12
 80011e6:	438a      	bics	r2, r1
 80011e8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_ADC_PollForConversion+0x124>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	2201      	movs	r2, #1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	659a      	str	r2, [r3, #88]	; 0x58
 80011fa:	e00b      	b.n	8001214 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	2220      	movs	r2, #32
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120c:	2201      	movs	r2, #1
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e1b      	ldrb	r3, [r3, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	220c      	movs	r2, #12
 8001222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	fffffefe 	.word	0xfffffefe

08001234 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001256:	2317      	movs	r3, #23
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2254      	movs	r2, #84	; 0x54
 8001266:	5c9b      	ldrb	r3, [r3, r2]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_ADC_ConfigChannel+0x24>
 800126c:	2302      	movs	r3, #2
 800126e:	e1c0      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x3a6>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2254      	movs	r2, #84	; 0x54
 8001274:	2101      	movs	r1, #1
 8001276:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff fccb 	bl	8000c18 <LL_ADC_REG_IsConversionOngoing>
 8001282:	1e03      	subs	r3, r0, #0
 8001284:	d000      	beq.n	8001288 <HAL_ADC_ConfigChannel+0x3c>
 8001286:	e1a3      	b.n	80015d0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b02      	cmp	r3, #2
 800128e:	d100      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x46>
 8001290:	e143      	b.n	800151a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	061b      	lsls	r3, r3, #24
 800129a:	429a      	cmp	r2, r3
 800129c:	d004      	beq.n	80012a8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80012a2:	4ac1      	ldr	r2, [pc, #772]	; (80015a8 <HAL_ADC_ConfigChannel+0x35c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d108      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0019      	movs	r1, r3
 80012b2:	0010      	movs	r0, r2
 80012b4:	f7ff fbdf 	bl	8000a76 <LL_ADC_REG_SetSequencerChAdd>
 80012b8:	e0c9      	b.n	800144e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	211f      	movs	r1, #31
 80012c4:	400b      	ands	r3, r1
 80012c6:	210f      	movs	r1, #15
 80012c8:	4099      	lsls	r1, r3
 80012ca:	000b      	movs	r3, r1
 80012cc:	43db      	mvns	r3, r3
 80012ce:	4013      	ands	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	035b      	lsls	r3, r3, #13
 80012d8:	0b5b      	lsrs	r3, r3, #13
 80012da:	d105      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x9c>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0e9b      	lsrs	r3, r3, #26
 80012e2:	221f      	movs	r2, #31
 80012e4:	4013      	ands	r3, r2
 80012e6:	e098      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4013      	ands	r3, r2
 80012f0:	d000      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0xa8>
 80012f2:	e091      	b.n	8001418 <HAL_ADC_ConfigChannel+0x1cc>
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2202      	movs	r2, #2
 80012fa:	4013      	ands	r3, r2
 80012fc:	d000      	beq.n	8001300 <HAL_ADC_ConfigChannel+0xb4>
 80012fe:	e089      	b.n	8001414 <HAL_ADC_ConfigChannel+0x1c8>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2204      	movs	r2, #4
 8001306:	4013      	ands	r3, r2
 8001308:	d000      	beq.n	800130c <HAL_ADC_ConfigChannel+0xc0>
 800130a:	e081      	b.n	8001410 <HAL_ADC_ConfigChannel+0x1c4>
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2208      	movs	r2, #8
 8001312:	4013      	ands	r3, r2
 8001314:	d000      	beq.n	8001318 <HAL_ADC_ConfigChannel+0xcc>
 8001316:	e079      	b.n	800140c <HAL_ADC_ConfigChannel+0x1c0>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2210      	movs	r2, #16
 800131e:	4013      	ands	r3, r2
 8001320:	d000      	beq.n	8001324 <HAL_ADC_ConfigChannel+0xd8>
 8001322:	e071      	b.n	8001408 <HAL_ADC_ConfigChannel+0x1bc>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2220      	movs	r2, #32
 800132a:	4013      	ands	r3, r2
 800132c:	d000      	beq.n	8001330 <HAL_ADC_ConfigChannel+0xe4>
 800132e:	e069      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1b8>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	4013      	ands	r3, r2
 8001338:	d000      	beq.n	800133c <HAL_ADC_ConfigChannel+0xf0>
 800133a:	e061      	b.n	8001400 <HAL_ADC_ConfigChannel+0x1b4>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2280      	movs	r2, #128	; 0x80
 8001342:	4013      	ands	r3, r2
 8001344:	d000      	beq.n	8001348 <HAL_ADC_ConfigChannel+0xfc>
 8001346:	e059      	b.n	80013fc <HAL_ADC_ConfigChannel+0x1b0>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4013      	ands	r3, r2
 8001352:	d151      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1ac>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d149      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1a8>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	4013      	ands	r3, r2
 800136a:	d141      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1a4>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4013      	ands	r3, r2
 8001376:	d139      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1a0>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	015b      	lsls	r3, r3, #5
 8001380:	4013      	ands	r3, r2
 8001382:	d131      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x19c>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	019b      	lsls	r3, r3, #6
 800138c:	4013      	ands	r3, r2
 800138e:	d129      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x198>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	01db      	lsls	r3, r3, #7
 8001398:	4013      	ands	r3, r2
 800139a:	d121      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x194>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4013      	ands	r3, r2
 80013a6:	d119      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x190>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	4013      	ands	r3, r2
 80013b2:	d111      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x18c>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	029b      	lsls	r3, r3, #10
 80013bc:	4013      	ands	r3, r2
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x188>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	02db      	lsls	r3, r3, #11
 80013c8:	4013      	ands	r3, r2
 80013ca:	d001      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x184>
 80013cc:	2312      	movs	r3, #18
 80013ce:	e024      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013d0:	2300      	movs	r3, #0
 80013d2:	e022      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013d4:	2311      	movs	r3, #17
 80013d6:	e020      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013d8:	2310      	movs	r3, #16
 80013da:	e01e      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013dc:	230f      	movs	r3, #15
 80013de:	e01c      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013e0:	230e      	movs	r3, #14
 80013e2:	e01a      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013e4:	230d      	movs	r3, #13
 80013e6:	e018      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013e8:	230c      	movs	r3, #12
 80013ea:	e016      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013ec:	230b      	movs	r3, #11
 80013ee:	e014      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013f0:	230a      	movs	r3, #10
 80013f2:	e012      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013f4:	2309      	movs	r3, #9
 80013f6:	e010      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013f8:	2308      	movs	r3, #8
 80013fa:	e00e      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 80013fc:	2307      	movs	r3, #7
 80013fe:	e00c      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 8001400:	2306      	movs	r3, #6
 8001402:	e00a      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 8001404:	2305      	movs	r3, #5
 8001406:	e008      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 8001408:	2304      	movs	r3, #4
 800140a:	e006      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 800140c:	2303      	movs	r3, #3
 800140e:	e004      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 8001410:	2302      	movs	r3, #2
 8001412:	e002      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 8001414:	2301      	movs	r3, #1
 8001416:	e000      	b.n	800141a <HAL_ADC_ConfigChannel+0x1ce>
 8001418:	2300      	movs	r3, #0
 800141a:	683a      	ldr	r2, [r7, #0]
 800141c:	6852      	ldr	r2, [r2, #4]
 800141e:	201f      	movs	r0, #31
 8001420:	4002      	ands	r2, r0
 8001422:	4093      	lsls	r3, r2
 8001424:	000a      	movs	r2, r1
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	089b      	lsrs	r3, r3, #2
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	429a      	cmp	r2, r3
 800143a:	d808      	bhi.n	800144e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	001a      	movs	r2, r3
 800144a:	f7ff faf4 	bl	8000a36 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	6819      	ldr	r1, [r3, #0]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	001a      	movs	r2, r3
 800145c:	f7ff fb2e 	bl	8000abc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db00      	blt.n	800146a <HAL_ADC_ConfigChannel+0x21e>
 8001468:	e0bc      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800146a:	4b50      	ldr	r3, [pc, #320]	; (80015ac <HAL_ADC_ConfigChannel+0x360>)
 800146c:	0018      	movs	r0, r3
 800146e:	f7ff faa7 	bl	80009c0 <LL_ADC_GetCommonPathInternalCh>
 8001472:	0003      	movs	r3, r0
 8001474:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <HAL_ADC_ConfigChannel+0x364>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d122      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	041b      	lsls	r3, r3, #16
 8001486:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001488:	d11d      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	2280      	movs	r2, #128	; 0x80
 800148e:	0412      	lsls	r2, r2, #16
 8001490:	4313      	orrs	r3, r2
 8001492:	4a46      	ldr	r2, [pc, #280]	; (80015ac <HAL_ADC_ConfigChannel+0x360>)
 8001494:	0019      	movs	r1, r3
 8001496:	0010      	movs	r0, r2
 8001498:	f7ff fa7e 	bl	8000998 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800149c:	4b45      	ldr	r3, [pc, #276]	; (80015b4 <HAL_ADC_ConfigChannel+0x368>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4945      	ldr	r1, [pc, #276]	; (80015b8 <HAL_ADC_ConfigChannel+0x36c>)
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7fe fe2a 	bl	80000fc <__udivsi3>
 80014a8:	0003      	movs	r3, r0
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	0013      	movs	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	189b      	adds	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014b6:	e002      	b.n	80014be <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f9      	bne.n	80014b8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014c4:	e08e      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a3c      	ldr	r2, [pc, #240]	; (80015bc <HAL_ADC_ConfigChannel+0x370>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d10e      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x2a2>
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	045b      	lsls	r3, r3, #17
 80014d6:	4013      	ands	r3, r2
 80014d8:	d109      	bne.n	80014ee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	0452      	lsls	r2, r2, #17
 80014e0:	4313      	orrs	r3, r2
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_ADC_ConfigChannel+0x360>)
 80014e4:	0019      	movs	r1, r3
 80014e6:	0010      	movs	r0, r2
 80014e8:	f7ff fa56 	bl	8000998 <LL_ADC_SetCommonPathInternalCh>
 80014ec:	e07a      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a33      	ldr	r2, [pc, #204]	; (80015c0 <HAL_ADC_ConfigChannel+0x374>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d000      	beq.n	80014fa <HAL_ADC_ConfigChannel+0x2ae>
 80014f8:	e074      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	03db      	lsls	r3, r3, #15
 8001500:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001502:	d000      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x2ba>
 8001504:	e06e      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	03d2      	lsls	r2, r2, #15
 800150c:	4313      	orrs	r3, r2
 800150e:	4a27      	ldr	r2, [pc, #156]	; (80015ac <HAL_ADC_ConfigChannel+0x360>)
 8001510:	0019      	movs	r1, r3
 8001512:	0010      	movs	r0, r2
 8001514:	f7ff fa40 	bl	8000998 <LL_ADC_SetCommonPathInternalCh>
 8001518:	e064      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	429a      	cmp	r2, r3
 8001524:	d004      	beq.n	8001530 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800152a:	4a1f      	ldr	r2, [pc, #124]	; (80015a8 <HAL_ADC_ConfigChannel+0x35c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d107      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0019      	movs	r1, r3
 800153a:	0010      	movs	r0, r2
 800153c:	f7ff faac 	bl	8000a98 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	da4d      	bge.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <HAL_ADC_ConfigChannel+0x360>)
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff fa38 	bl	80009c0 <LL_ADC_GetCommonPathInternalCh>
 8001550:	0003      	movs	r3, r0
 8001552:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_ADC_ConfigChannel+0x364>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d108      	bne.n	8001570 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <HAL_ADC_ConfigChannel+0x378>)
 8001562:	4013      	ands	r3, r2
 8001564:	4a11      	ldr	r2, [pc, #68]	; (80015ac <HAL_ADC_ConfigChannel+0x360>)
 8001566:	0019      	movs	r1, r3
 8001568:	0010      	movs	r0, r2
 800156a:	f7ff fa15 	bl	8000998 <LL_ADC_SetCommonPathInternalCh>
 800156e:	e039      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_ADC_ConfigChannel+0x370>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d108      	bne.n	800158c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_ADC_ConfigChannel+0x37c>)
 800157e:	4013      	ands	r3, r2
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_ADC_ConfigChannel+0x360>)
 8001582:	0019      	movs	r1, r3
 8001584:	0010      	movs	r0, r2
 8001586:	f7ff fa07 	bl	8000998 <LL_ADC_SetCommonPathInternalCh>
 800158a:	e02b      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <HAL_ADC_ConfigChannel+0x374>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d126      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <HAL_ADC_ConfigChannel+0x380>)
 800159a:	4013      	ands	r3, r2
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <HAL_ADC_ConfigChannel+0x360>)
 800159e:	0019      	movs	r1, r3
 80015a0:	0010      	movs	r0, r2
 80015a2:	f7ff f9f9 	bl	8000998 <LL_ADC_SetCommonPathInternalCh>
 80015a6:	e01d      	b.n	80015e4 <HAL_ADC_ConfigChannel+0x398>
 80015a8:	80000004 	.word	0x80000004
 80015ac:	40012708 	.word	0x40012708
 80015b0:	b0001000 	.word	0xb0001000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	00030d40 	.word	0x00030d40
 80015bc:	b8004000 	.word	0xb8004000
 80015c0:	b4002000 	.word	0xb4002000
 80015c4:	ff7fffff 	.word	0xff7fffff
 80015c8:	feffffff 	.word	0xfeffffff
 80015cc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	2220      	movs	r2, #32
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015dc:	2317      	movs	r3, #23
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2254      	movs	r2, #84	; 0x54
 80015e8:	2100      	movs	r1, #0
 80015ea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80015ec:	2317      	movs	r3, #23
 80015ee:	18fb      	adds	r3, r7, r3
 80015f0:	781b      	ldrb	r3, [r3, #0]
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b006      	add	sp, #24
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			; (mov r8, r8)

080015fc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fb05 	bl	8000c18 <LL_ADC_REG_IsConversionOngoing>
 800160e:	1e03      	subs	r3, r0, #0
 8001610:	d031      	beq.n	8001676 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff fac9 	bl	8000bae <LL_ADC_IsDisableOngoing>
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	d104      	bne.n	800162a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff fae5 	bl	8000bf4 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800162a:	f7ff f987 	bl	800093c <HAL_GetTick>
 800162e:	0003      	movs	r3, r0
 8001630:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001632:	e01a      	b.n	800166a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001634:	f7ff f982 	bl	800093c <HAL_GetTick>
 8001638:	0002      	movs	r2, r0
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d913      	bls.n	800166a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2204      	movs	r2, #4
 800164a:	4013      	ands	r3, r2
 800164c:	d00d      	beq.n	800166a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	2210      	movs	r2, #16
 8001654:	431a      	orrs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2201      	movs	r2, #1
 8001660:	431a      	orrs	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e006      	b.n	8001678 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2204      	movs	r2, #4
 8001672:	4013      	ands	r3, r2
 8001674:	d1de      	bne.n	8001634 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b004      	add	sp, #16
 800167e:	bd80      	pop	{r7, pc}

08001680 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff fa7b 	bl	8000b8c <LL_ADC_IsEnabled>
 8001696:	1e03      	subs	r3, r0, #0
 8001698:	d000      	beq.n	800169c <ADC_Enable+0x1c>
 800169a:	e069      	b.n	8001770 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4a36      	ldr	r2, [pc, #216]	; (800177c <ADC_Enable+0xfc>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	d00d      	beq.n	80016c4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ac:	2210      	movs	r2, #16
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	2201      	movs	r2, #1
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e056      	b.n	8001772 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fa3b 	bl	8000b44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80016ce:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <ADC_Enable+0x100>)
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff f975 	bl	80009c0 <LL_ADC_GetCommonPathInternalCh>
 80016d6:	0002      	movs	r2, r0
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	041b      	lsls	r3, r3, #16
 80016dc:	4013      	ands	r3, r2
 80016de:	d00f      	beq.n	8001700 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016e0:	4b28      	ldr	r3, [pc, #160]	; (8001784 <ADC_Enable+0x104>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4928      	ldr	r1, [pc, #160]	; (8001788 <ADC_Enable+0x108>)
 80016e6:	0018      	movs	r0, r3
 80016e8:	f7fe fd08 	bl	80000fc <__udivsi3>
 80016ec:	0003      	movs	r3, r0
 80016ee:	3301      	adds	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016f2:	e002      	b.n	80016fa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f9      	bne.n	80016f4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	7e5b      	ldrb	r3, [r3, #25]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d033      	beq.n	8001770 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001708:	f7ff f918 	bl	800093c <HAL_GetTick>
 800170c:	0003      	movs	r3, r0
 800170e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001710:	e027      	b.n	8001762 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	0018      	movs	r0, r3
 8001718:	f7ff fa38 	bl	8000b8c <LL_ADC_IsEnabled>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d104      	bne.n	800172a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff fa0d 	bl	8000b44 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800172a:	f7ff f907 	bl	800093c <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d914      	bls.n	8001762 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	4013      	ands	r3, r2
 8001742:	2b01      	cmp	r3, #1
 8001744:	d00d      	beq.n	8001762 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	2210      	movs	r2, #16
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	2201      	movs	r2, #1
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e007      	b.n	8001772 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2201      	movs	r2, #1
 800176a:	4013      	ands	r3, r2
 800176c:	2b01      	cmp	r3, #1
 800176e:	d1d0      	bne.n	8001712 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b004      	add	sp, #16
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	80000017 	.word	0x80000017
 8001780:	40012708 	.word	0x40012708
 8001784:	20000000 	.word	0x20000000
 8001788:	00030d40 	.word	0x00030d40

0800178c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0018      	movs	r0, r3
 800179a:	f7ff fa08 	bl	8000bae <LL_ADC_IsDisableOngoing>
 800179e:	0003      	movs	r3, r0
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7ff f9f0 	bl	8000b8c <LL_ADC_IsEnabled>
 80017ac:	1e03      	subs	r3, r0, #0
 80017ae:	d046      	beq.n	800183e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d143      	bne.n	800183e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2205      	movs	r2, #5
 80017be:	4013      	ands	r3, r2
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10d      	bne.n	80017e0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff f9cd 	bl	8000b68 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2203      	movs	r2, #3
 80017d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017d6:	f7ff f8b1 	bl	800093c <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80017de:	e028      	b.n	8001832 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	2210      	movs	r2, #16
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f0:	2201      	movs	r2, #1
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e021      	b.n	8001840 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017fc:	f7ff f89e 	bl	800093c <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d913      	bls.n	8001832 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	d00d      	beq.n	8001832 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181a:	2210      	movs	r2, #16
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	2201      	movs	r2, #1
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e006      	b.n	8001840 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	2201      	movs	r2, #1
 800183a:	4013      	ands	r3, r2
 800183c:	d1de      	bne.n	80017fc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b004      	add	sp, #16
 8001846:	bd80      	pop	{r7, pc}

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	0002      	movs	r2, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b7f      	cmp	r3, #127	; 0x7f
 800185c:	d828      	bhi.n	80018b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185e:	4a2f      	ldr	r2, [pc, #188]	; (800191c <__NVIC_SetPriority+0xd4>)
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	33c0      	adds	r3, #192	; 0xc0
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	589b      	ldr	r3, [r3, r2]
 800186e:	1dfa      	adds	r2, r7, #7
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	0011      	movs	r1, r2
 8001874:	2203      	movs	r2, #3
 8001876:	400a      	ands	r2, r1
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	21ff      	movs	r1, #255	; 0xff
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	43d2      	mvns	r2, r2
 8001882:	401a      	ands	r2, r3
 8001884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	401a      	ands	r2, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	2303      	movs	r3, #3
 8001896:	4003      	ands	r3, r0
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	481f      	ldr	r0, [pc, #124]	; (800191c <__NVIC_SetPriority+0xd4>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	430a      	orrs	r2, r1
 80018a8:	33c0      	adds	r3, #192	; 0xc0
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ae:	e031      	b.n	8001914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <__NVIC_SetPriority+0xd8>)
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0019      	movs	r1, r3
 80018b8:	230f      	movs	r3, #15
 80018ba:	400b      	ands	r3, r1
 80018bc:	3b08      	subs	r3, #8
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3306      	adds	r3, #6
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	3304      	adds	r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1dfa      	adds	r2, r7, #7
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	0011      	movs	r1, r2
 80018d0:	2203      	movs	r2, #3
 80018d2:	400a      	ands	r2, r1
 80018d4:	00d2      	lsls	r2, r2, #3
 80018d6:	21ff      	movs	r1, #255	; 0xff
 80018d8:	4091      	lsls	r1, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	43d2      	mvns	r2, r2
 80018de:	401a      	ands	r2, r3
 80018e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	22ff      	movs	r2, #255	; 0xff
 80018e8:	401a      	ands	r2, r3
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	0018      	movs	r0, r3
 80018f0:	2303      	movs	r3, #3
 80018f2:	4003      	ands	r3, r0
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <__NVIC_SetPriority+0xd8>)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001c      	movs	r4, r3
 8001900:	230f      	movs	r3, #15
 8001902:	4023      	ands	r3, r4
 8001904:	3b08      	subs	r3, #8
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	430a      	orrs	r2, r1
 800190a:	3306      	adds	r3, #6
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	18c3      	adds	r3, r0, r3
 8001910:	3304      	adds	r3, #4
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b003      	add	sp, #12
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	045b      	lsls	r3, r3, #17
 8001934:	429a      	cmp	r2, r3
 8001936:	d301      	bcc.n	800193c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001938:	2301      	movs	r3, #1
 800193a:	e010      	b.n	800195e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193c:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <SysTick_Config+0x44>)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	3a01      	subs	r2, #1
 8001942:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001944:	2301      	movs	r3, #1
 8001946:	425b      	negs	r3, r3
 8001948:	2103      	movs	r1, #3
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff ff7c 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <SysTick_Config+0x44>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	; (8001968 <SysTick_Config+0x44>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	210f      	movs	r1, #15
 8001978:	187b      	adds	r3, r7, r1
 800197a:	1c02      	adds	r2, r0, #0
 800197c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	187b      	adds	r3, r7, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b25b      	sxtb	r3, r3
 8001986:	0011      	movs	r1, r2
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0018      	movs	r0, r3
 80019a2:	f7ff ffbf 	bl	8001924 <SysTick_Config>
 80019a6:	0003      	movs	r3, r0
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	e147      	b.n	8001c50 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4091      	lsls	r1, r2
 80019ca:	000a      	movs	r2, r1
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d100      	bne.n	80019d8 <HAL_GPIO_Init+0x28>
 80019d6:	e138      	b.n	8001c4a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2203      	movs	r2, #3
 80019de:	4013      	ands	r3, r2
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d005      	beq.n	80019f0 <HAL_GPIO_Init+0x40>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2203      	movs	r2, #3
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d130      	bne.n	8001a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	409a      	lsls	r2, r3
 80019fe:	0013      	movs	r3, r2
 8001a00:	43da      	mvns	r2, r3
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	409a      	lsls	r2, r3
 8001a12:	0013      	movs	r3, r2
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a26:	2201      	movs	r2, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2203      	movs	r2, #3
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d017      	beq.n	8001a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2203      	movs	r2, #3
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d123      	bne.n	8001ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	08da      	lsrs	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3208      	adds	r2, #8
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	58d3      	ldr	r3, [r2, r3]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2207      	movs	r2, #7
 8001aac:	4013      	ands	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	0013      	movs	r3, r2
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2107      	movs	r1, #7
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	409a      	lsls	r2, r3
 8001acc:	0013      	movs	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	0092      	lsls	r2, r2, #2
 8001ade:	6939      	ldr	r1, [r7, #16]
 8001ae0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	2203      	movs	r2, #3
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2203      	movs	r2, #3
 8001b00:	401a      	ands	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	23c0      	movs	r3, #192	; 0xc0
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d100      	bne.n	8001b24 <HAL_GPIO_Init+0x174>
 8001b22:	e092      	b.n	8001c4a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b24:	4a50      	ldr	r2, [pc, #320]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	089b      	lsrs	r3, r3, #2
 8001b2a:	3318      	adds	r3, #24
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	589b      	ldr	r3, [r3, r2]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2203      	movs	r2, #3
 8001b36:	4013      	ands	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	0013      	movs	r3, r2
 8001b40:	43da      	mvns	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	23a0      	movs	r3, #160	; 0xa0
 8001b4c:	05db      	lsls	r3, r3, #23
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d013      	beq.n	8001b7a <HAL_GPIO_Init+0x1ca>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a45      	ldr	r2, [pc, #276]	; (8001c6c <HAL_GPIO_Init+0x2bc>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d00d      	beq.n	8001b76 <HAL_GPIO_Init+0x1c6>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a44      	ldr	r2, [pc, #272]	; (8001c70 <HAL_GPIO_Init+0x2c0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d007      	beq.n	8001b72 <HAL_GPIO_Init+0x1c2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a43      	ldr	r2, [pc, #268]	; (8001c74 <HAL_GPIO_Init+0x2c4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d101      	bne.n	8001b6e <HAL_GPIO_Init+0x1be>
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e006      	b.n	8001b7c <HAL_GPIO_Init+0x1cc>
 8001b6e:	2305      	movs	r3, #5
 8001b70:	e004      	b.n	8001b7c <HAL_GPIO_Init+0x1cc>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e002      	b.n	8001b7c <HAL_GPIO_Init+0x1cc>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_GPIO_Init+0x1cc>
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	2103      	movs	r1, #3
 8001b80:	400a      	ands	r2, r1
 8001b82:	00d2      	lsls	r2, r2, #3
 8001b84:	4093      	lsls	r3, r2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b8c:	4936      	ldr	r1, [pc, #216]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3318      	adds	r3, #24
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b9a:	4a33      	ldr	r2, [pc, #204]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	58d3      	ldr	r3, [r2, r3]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	025b      	lsls	r3, r3, #9
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc0:	4929      	ldr	r1, [pc, #164]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001bc8:	4a27      	ldr	r2, [pc, #156]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001bca:	2384      	movs	r3, #132	; 0x84
 8001bcc:	58d3      	ldr	r3, [r2, r3]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4013      	ands	r3, r2
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bee:	491e      	ldr	r1, [pc, #120]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001bf0:	2284      	movs	r2, #132	; 0x84
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	035b      	lsls	r3, r3, #13
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c20:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	43da      	mvns	r2, r3
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	039b      	lsls	r3, r3, #14
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_GPIO_Init+0x2b8>)
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	40da      	lsrs	r2, r3
 8001c58:	1e13      	subs	r3, r2, #0
 8001c5a:	d000      	beq.n	8001c5e <HAL_GPIO_Init+0x2ae>
 8001c5c:	e6b0      	b.n	80019c0 <HAL_GPIO_Init+0x10>
  }
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	b006      	add	sp, #24
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021800 	.word	0x40021800
 8001c6c:	50000400 	.word	0x50000400
 8001c70:	50000800 	.word	0x50000800
 8001c74:	50000c00 	.word	0x50000c00

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	0008      	movs	r0, r1
 8001c82:	0011      	movs	r1, r2
 8001c84:	1cbb      	adds	r3, r7, #2
 8001c86:	1c02      	adds	r2, r0, #0
 8001c88:	801a      	strh	r2, [r3, #0]
 8001c8a:	1c7b      	adds	r3, r7, #1
 8001c8c:	1c0a      	adds	r2, r1, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c90:	1c7b      	adds	r3, r7, #1
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d004      	beq.n	8001ca2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c98:	1cbb      	adds	r3, r7, #2
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca0:	e003      	b.n	8001caa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ca2:	1cbb      	adds	r3, r7, #2
 8001ca4:	881a      	ldrh	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b002      	add	sp, #8
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e082      	b.n	8001dcc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2241      	movs	r2, #65	; 0x41
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d107      	bne.n	8001ce2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7fe fd1f 	bl	8000720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2241      	movs	r2, #65	; 0x41
 8001ce6:	2124      	movs	r1, #36	; 0x24
 8001ce8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4934      	ldr	r1, [pc, #208]	; (8001dd4 <HAL_I2C_Init+0x120>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4931      	ldr	r1, [pc, #196]	; (8001dd8 <HAL_I2C_Init+0x124>)
 8001d14:	400a      	ands	r2, r1
 8001d16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d108      	bne.n	8001d32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	0209      	lsls	r1, r1, #8
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e007      	b.n	8001d42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2184      	movs	r1, #132	; 0x84
 8001d3c:	0209      	lsls	r1, r1, #8
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d104      	bne.n	8001d54 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	491f      	ldr	r1, [pc, #124]	; (8001ddc <HAL_I2C_Init+0x128>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	491a      	ldr	r1, [pc, #104]	; (8001dd8 <HAL_I2C_Init+0x124>)
 8001d70:	400a      	ands	r2, r1
 8001d72:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69d9      	ldr	r1, [r3, #28]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a1a      	ldr	r2, [r3, #32]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2241      	movs	r2, #65	; 0x41
 8001db8:	2120      	movs	r1, #32
 8001dba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2242      	movs	r2, #66	; 0x42
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f0ffffff 	.word	0xf0ffffff
 8001dd8:	ffff7fff 	.word	0xffff7fff
 8001ddc:	02008000 	.word	0x02008000

08001de0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2241      	movs	r2, #65	; 0x41
 8001dee:	5c9b      	ldrb	r3, [r3, r2]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d138      	bne.n	8001e68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	5c9b      	ldrb	r3, [r3, r2]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e032      	b.n	8001e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	2101      	movs	r1, #1
 8001e0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2241      	movs	r2, #65	; 0x41
 8001e10:	2124      	movs	r1, #36	; 0x24
 8001e12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	438a      	bics	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4911      	ldr	r1, [pc, #68]	; (8001e74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2241      	movs	r2, #65	; 0x41
 8001e58:	2120      	movs	r1, #32
 8001e5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	ffffefff 	.word	0xffffefff

08001e78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2241      	movs	r2, #65	; 0x41
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d139      	bne.n	8001f02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e033      	b.n	8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2241      	movs	r2, #65	; 0x41
 8001ea8:	2124      	movs	r1, #36	; 0x24
 8001eaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	438a      	bics	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2241      	movs	r2, #65	; 0x41
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2240      	movs	r2, #64	; 0x40
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
  }
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b004      	add	sp, #16
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	fffff0ff 	.word	0xfffff0ff

08001f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a19      	ldr	r2, [pc, #100]	; (8001f84 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d11f      	bne.n	8001f74 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	0013      	movs	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	189b      	adds	r3, r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4912      	ldr	r1, [pc, #72]	; (8001f8c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7fe f8da 	bl	80000fc <__udivsi3>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f4e:	e008      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	e001      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e009      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d0ed      	beq.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b004      	add	sp, #16
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	40007000 	.word	0x40007000
 8001f84:	fffff9ff 	.word	0xfffff9ff
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	000f4240 	.word	0x000f4240

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e2f9      	b.n	8002596 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4013      	ands	r3, r2
 8001faa:	d100      	bne.n	8001fae <HAL_RCC_OscConfig+0x1e>
 8001fac:	e07c      	b.n	80020a8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4bc3      	ldr	r3, [pc, #780]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2238      	movs	r2, #56	; 0x38
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb8:	4bc0      	ldr	r3, [pc, #768]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b10      	cmp	r3, #16
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_OscConfig+0x3e>
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d002      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d10b      	bne.n	8001fec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	4bb9      	ldr	r3, [pc, #740]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d062      	beq.n	80020a6 <HAL_RCC_OscConfig+0x116>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d15e      	bne.n	80020a6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e2d4      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	025b      	lsls	r3, r3, #9
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x78>
 8001ff8:	4bb0      	ldr	r3, [pc, #704]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4baf      	ldr	r3, [pc, #700]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0249      	lsls	r1, r1, #9
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e020      	b.n	800204a <HAL_RCC_OscConfig+0xba>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	23a0      	movs	r3, #160	; 0xa0
 800200e:	02db      	lsls	r3, r3, #11
 8002010:	429a      	cmp	r2, r3
 8002012:	d10e      	bne.n	8002032 <HAL_RCC_OscConfig+0xa2>
 8002014:	4ba9      	ldr	r3, [pc, #676]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4ba8      	ldr	r3, [pc, #672]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800201a:	2180      	movs	r1, #128	; 0x80
 800201c:	02c9      	lsls	r1, r1, #11
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4ba6      	ldr	r3, [pc, #664]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4ba5      	ldr	r3, [pc, #660]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	0249      	lsls	r1, r1, #9
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e00b      	b.n	800204a <HAL_RCC_OscConfig+0xba>
 8002032:	4ba2      	ldr	r3, [pc, #648]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4ba1      	ldr	r3, [pc, #644]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002038:	49a1      	ldr	r1, [pc, #644]	; (80022c0 <HAL_RCC_OscConfig+0x330>)
 800203a:	400a      	ands	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	4b9f      	ldr	r3, [pc, #636]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b9e      	ldr	r3, [pc, #632]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002044:	499f      	ldr	r1, [pc, #636]	; (80022c4 <HAL_RCC_OscConfig+0x334>)
 8002046:	400a      	ands	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d014      	beq.n	800207c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7fe fc73 	bl	800093c <HAL_GetTick>
 8002056:	0003      	movs	r3, r0
 8002058:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7fe fc6e 	bl	800093c <HAL_GetTick>
 8002060:	0002      	movs	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e293      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206e:	4b93      	ldr	r3, [pc, #588]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	029b      	lsls	r3, r3, #10
 8002076:	4013      	ands	r3, r2
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xcc>
 800207a:	e015      	b.n	80020a8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7fe fc5e 	bl	800093c <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002086:	f7fe fc59 	bl	800093c <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b64      	cmp	r3, #100	; 0x64
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e27e      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002098:	4b88      	ldr	r3, [pc, #544]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	4013      	ands	r3, r2
 80020a2:	d1f0      	bne.n	8002086 <HAL_RCC_OscConfig+0xf6>
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2202      	movs	r2, #2
 80020ae:	4013      	ands	r3, r2
 80020b0:	d100      	bne.n	80020b4 <HAL_RCC_OscConfig+0x124>
 80020b2:	e099      	b.n	80021e8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b4:	4b81      	ldr	r3, [pc, #516]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2238      	movs	r2, #56	; 0x38
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020be:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	2203      	movs	r2, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b10      	cmp	r3, #16
 80020cc:	d102      	bne.n	80020d4 <HAL_RCC_OscConfig+0x144>
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d002      	beq.n	80020da <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d135      	bne.n	8002146 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020da:	4b78      	ldr	r3, [pc, #480]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4013      	ands	r3, r2
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x162>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e251      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f2:	4b72      	ldr	r3, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4a74      	ldr	r2, [pc, #464]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	021a      	lsls	r2, r3, #8
 8002102:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002104:	430a      	orrs	r2, r1
 8002106:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d112      	bne.n	8002134 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800210e:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a6e      	ldr	r2, [pc, #440]	; (80022cc <HAL_RCC_OscConfig+0x33c>)
 8002114:	4013      	ands	r3, r2
 8002116:	0019      	movs	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	4b67      	ldr	r3, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800211e:	430a      	orrs	r2, r1
 8002120:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002122:	4b66      	ldr	r3, [pc, #408]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	0adb      	lsrs	r3, r3, #11
 8002128:	2207      	movs	r2, #7
 800212a:	4013      	ands	r3, r2
 800212c:	4a68      	ldr	r2, [pc, #416]	; (80022d0 <HAL_RCC_OscConfig+0x340>)
 800212e:	40da      	lsrs	r2, r3
 8002130:	4b68      	ldr	r3, [pc, #416]	; (80022d4 <HAL_RCC_OscConfig+0x344>)
 8002132:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002134:	4b68      	ldr	r3, [pc, #416]	; (80022d8 <HAL_RCC_OscConfig+0x348>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0018      	movs	r0, r3
 800213a:	f7fe fba3 	bl	8000884 <HAL_InitTick>
 800213e:	1e03      	subs	r3, r0, #0
 8002140:	d051      	beq.n	80021e6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e227      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d030      	beq.n	80021b0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800214e:	4b5b      	ldr	r3, [pc, #364]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x33c>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	4b57      	ldr	r3, [pc, #348]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002162:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b55      	ldr	r3, [pc, #340]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002168:	2180      	movs	r1, #128	; 0x80
 800216a:	0049      	lsls	r1, r1, #1
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fbe4 	bl	800093c <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217a:	f7fe fbdf 	bl	800093c <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e204      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218c:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4013      	ands	r3, r2
 8002196:	d0f0      	beq.n	800217a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002198:	4b48      	ldr	r3, [pc, #288]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	021a      	lsls	r2, r3, #8
 80021a8:	4b44      	ldr	r3, [pc, #272]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	e01b      	b.n	80021e8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80021b0:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b41      	ldr	r3, [pc, #260]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80021b6:	4949      	ldr	r1, [pc, #292]	; (80022dc <HAL_RCC_OscConfig+0x34c>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7fe fbbe 	bl	800093c <HAL_GetTick>
 80021c0:	0003      	movs	r3, r0
 80021c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c6:	f7fe fbb9 	bl	800093c <HAL_GetTick>
 80021ca:	0002      	movs	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1de      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4013      	ands	r3, r2
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x236>
 80021e4:	e000      	b.n	80021e8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2208      	movs	r2, #8
 80021ee:	4013      	ands	r3, r2
 80021f0:	d047      	beq.n	8002282 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2238      	movs	r2, #56	; 0x38
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b18      	cmp	r3, #24
 80021fc:	d10a      	bne.n	8002214 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	2202      	movs	r2, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d03c      	beq.n	8002282 <HAL_RCC_OscConfig+0x2f2>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d138      	bne.n	8002282 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e1c0      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d019      	beq.n	8002250 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800221e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002220:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002222:	2101      	movs	r1, #1
 8002224:	430a      	orrs	r2, r1
 8002226:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fb88 	bl	800093c <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7fe fb83 	bl	800093c <HAL_GetTick>
 8002236:	0002      	movs	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1a8      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	2202      	movs	r2, #2
 800224a:	4013      	ands	r3, r2
 800224c:	d0f1      	beq.n	8002232 <HAL_RCC_OscConfig+0x2a2>
 800224e:	e018      	b.n	8002282 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002256:	2101      	movs	r1, #1
 8002258:	438a      	bics	r2, r1
 800225a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7fe fb6e 	bl	800093c <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002266:	f7fe fb69 	bl	800093c <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e18e      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d1f1      	bne.n	8002266 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2204      	movs	r2, #4
 8002288:	4013      	ands	r3, r2
 800228a:	d100      	bne.n	800228e <HAL_RCC_OscConfig+0x2fe>
 800228c:	e0c6      	b.n	800241c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	231f      	movs	r3, #31
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2238      	movs	r2, #56	; 0x38
 800229c:	4013      	ands	r3, r2
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d11e      	bne.n	80022e0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d100      	bne.n	80022ae <HAL_RCC_OscConfig+0x31e>
 80022ac:	e0b6      	b.n	800241c <HAL_RCC_OscConfig+0x48c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d000      	beq.n	80022b8 <HAL_RCC_OscConfig+0x328>
 80022b6:	e0b1      	b.n	800241c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e16c      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	fffeffff 	.word	0xfffeffff
 80022c4:	fffbffff 	.word	0xfffbffff
 80022c8:	ffff80ff 	.word	0xffff80ff
 80022cc:	ffffc7ff 	.word	0xffffc7ff
 80022d0:	00f42400 	.word	0x00f42400
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004
 80022dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022e0:	4baf      	ldr	r3, [pc, #700]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80022e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	055b      	lsls	r3, r3, #21
 80022e8:	4013      	ands	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_OscConfig+0x360>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x362>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d011      	beq.n	800231a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	4baa      	ldr	r3, [pc, #680]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80022f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022fa:	4ba9      	ldr	r3, [pc, #676]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0549      	lsls	r1, r1, #21
 8002300:	430a      	orrs	r2, r1
 8002302:	63da      	str	r2, [r3, #60]	; 0x3c
 8002304:	4ba6      	ldr	r3, [pc, #664]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002306:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	055b      	lsls	r3, r3, #21
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002312:	231f      	movs	r3, #31
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231a:	4ba2      	ldr	r3, [pc, #648]	; (80025a4 <HAL_RCC_OscConfig+0x614>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4013      	ands	r3, r2
 8002324:	d11a      	bne.n	800235c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002326:	4b9f      	ldr	r3, [pc, #636]	; (80025a4 <HAL_RCC_OscConfig+0x614>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b9e      	ldr	r3, [pc, #632]	; (80025a4 <HAL_RCC_OscConfig+0x614>)
 800232c:	2180      	movs	r1, #128	; 0x80
 800232e:	0049      	lsls	r1, r1, #1
 8002330:	430a      	orrs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002334:	f7fe fb02 	bl	800093c <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7fe fafd 	bl	800093c <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e122      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002350:	4b94      	ldr	r3, [pc, #592]	; (80025a4 <HAL_RCC_OscConfig+0x614>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4013      	ands	r3, r2
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x3e2>
 8002364:	4b8e      	ldr	r3, [pc, #568]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002368:	4b8d      	ldr	r3, [pc, #564]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 800236a:	2101      	movs	r1, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002370:	e01c      	b.n	80023ac <HAL_RCC_OscConfig+0x41c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b05      	cmp	r3, #5
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x404>
 800237a:	4b89      	ldr	r3, [pc, #548]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 800237c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002380:	2104      	movs	r1, #4
 8002382:	430a      	orrs	r2, r1
 8002384:	65da      	str	r2, [r3, #92]	; 0x5c
 8002386:	4b86      	ldr	r3, [pc, #536]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002388:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800238a:	4b85      	ldr	r3, [pc, #532]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 800238c:	2101      	movs	r1, #1
 800238e:	430a      	orrs	r2, r1
 8002390:	65da      	str	r2, [r3, #92]	; 0x5c
 8002392:	e00b      	b.n	80023ac <HAL_RCC_OscConfig+0x41c>
 8002394:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002396:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002398:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 800239a:	2101      	movs	r1, #1
 800239c:	438a      	bics	r2, r1
 800239e:	65da      	str	r2, [r3, #92]	; 0x5c
 80023a0:	4b7f      	ldr	r3, [pc, #508]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80023a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023a4:	4b7e      	ldr	r3, [pc, #504]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80023a6:	2104      	movs	r1, #4
 80023a8:	438a      	bics	r2, r1
 80023aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d014      	beq.n	80023de <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fac2 	bl	800093c <HAL_GetTick>
 80023b8:	0003      	movs	r3, r0
 80023ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023bc:	e009      	b.n	80023d2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fabd 	bl	800093c <HAL_GetTick>
 80023c2:	0002      	movs	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	4a77      	ldr	r2, [pc, #476]	; (80025a8 <HAL_RCC_OscConfig+0x618>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0e1      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x42e>
 80023dc:	e013      	b.n	8002406 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7fe faad 	bl	800093c <HAL_GetTick>
 80023e2:	0003      	movs	r3, r0
 80023e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023e6:	e009      	b.n	80023fc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e8:	f7fe faa8 	bl	800093c <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	4a6d      	ldr	r2, [pc, #436]	; (80025a8 <HAL_RCC_OscConfig+0x618>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0cc      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023fc:	4b68      	ldr	r3, [pc, #416]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	2202      	movs	r2, #2
 8002402:	4013      	ands	r3, r2
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002406:	231f      	movs	r3, #31
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002410:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002412:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002414:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002416:	4965      	ldr	r1, [pc, #404]	; (80025ac <HAL_RCC_OscConfig+0x61c>)
 8002418:	400a      	ands	r2, r1
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d100      	bne.n	8002426 <HAL_RCC_OscConfig+0x496>
 8002424:	e0b6      	b.n	8002594 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002426:	4b5e      	ldr	r3, [pc, #376]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2238      	movs	r2, #56	; 0x38
 800242c:	4013      	ands	r3, r2
 800242e:	2b10      	cmp	r3, #16
 8002430:	d100      	bne.n	8002434 <HAL_RCC_OscConfig+0x4a4>
 8002432:	e07e      	b.n	8002532 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d153      	bne.n	80024e4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	4b58      	ldr	r3, [pc, #352]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b57      	ldr	r3, [pc, #348]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002442:	495b      	ldr	r1, [pc, #364]	; (80025b0 <HAL_RCC_OscConfig+0x620>)
 8002444:	400a      	ands	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fa78 	bl	800093c <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fa73 	bl	800093c <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e098      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	4b4e      	ldr	r3, [pc, #312]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	049b      	lsls	r3, r3, #18
 800246c:	4013      	ands	r3, r2
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002470:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a4f      	ldr	r2, [pc, #316]	; (80025b4 <HAL_RCC_OscConfig+0x624>)
 8002476:	4013      	ands	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1a      	ldr	r2, [r3, #32]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	431a      	orrs	r2, r3
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 800249a:	430a      	orrs	r2, r1
 800249c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	0449      	lsls	r1, r1, #17
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80024ac:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	0549      	lsls	r1, r1, #21
 80024b6:	430a      	orrs	r2, r1
 80024b8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ba:	f7fe fa3f 	bl	800093c <HAL_GetTick>
 80024be:	0003      	movs	r3, r0
 80024c0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fa3a 	bl	800093c <HAL_GetTick>
 80024c8:	0002      	movs	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e05f      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	049b      	lsls	r3, r3, #18
 80024de:	4013      	ands	r3, r2
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x534>
 80024e2:	e057      	b.n	8002594 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024ea:	4931      	ldr	r1, [pc, #196]	; (80025b0 <HAL_RCC_OscConfig+0x620>)
 80024ec:	400a      	ands	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80024f0:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024f6:	2103      	movs	r1, #3
 80024f8:	438a      	bics	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80024fc:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002502:	492d      	ldr	r1, [pc, #180]	; (80025b8 <HAL_RCC_OscConfig+0x628>)
 8002504:	400a      	ands	r2, r1
 8002506:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fa18 	bl	800093c <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7fe fa13 	bl	800093c <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e038      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	049b      	lsls	r3, r3, #18
 800252c:	4013      	ands	r3, r2
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x582>
 8002530:	e030      	b.n	8002594 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e02b      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_RCC_OscConfig+0x610>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2203      	movs	r2, #3
 8002548:	401a      	ands	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	429a      	cmp	r2, r3
 8002550:	d11e      	bne.n	8002590 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2270      	movs	r2, #112	; 0x70
 8002556:	401a      	ands	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255c:	429a      	cmp	r2, r3
 800255e:	d117      	bne.n	8002590 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	23fe      	movs	r3, #254	; 0xfe
 8002564:	01db      	lsls	r3, r3, #7
 8002566:	401a      	ands	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d10e      	bne.n	8002590 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	23f8      	movs	r3, #248	; 0xf8
 8002576:	039b      	lsls	r3, r3, #14
 8002578:	401a      	ands	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	0f5b      	lsrs	r3, r3, #29
 8002586:	075a      	lsls	r2, r3, #29
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e000      	b.n	8002596 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b008      	add	sp, #32
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
 80025a8:	00001388 	.word	0x00001388
 80025ac:	efffffff 	.word	0xefffffff
 80025b0:	feffffff 	.word	0xfeffffff
 80025b4:	1fc1808c 	.word	0x1fc1808c
 80025b8:	effeffff 	.word	0xeffeffff

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0e9      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2207      	movs	r2, #7
 80025d6:	4013      	ands	r3, r2
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d91e      	bls.n	800261c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b73      	ldr	r3, [pc, #460]	; (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2207      	movs	r2, #7
 80025e4:	4393      	bics	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	4b70      	ldr	r3, [pc, #448]	; (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025f0:	f7fe f9a4 	bl	800093c <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f8:	e009      	b.n	800260e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fa:	f7fe f99f 	bl	800093c <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	4a6a      	ldr	r2, [pc, #424]	; (80027b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0ca      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800260e:	4b67      	ldr	r3, [pc, #412]	; (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2207      	movs	r2, #7
 8002614:	4013      	ands	r3, r2
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d1ee      	bne.n	80025fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2202      	movs	r2, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d015      	beq.n	8002652 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2204      	movs	r2, #4
 800262c:	4013      	ands	r3, r2
 800262e:	d006      	beq.n	800263e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002630:	4b60      	ldr	r3, [pc, #384]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	4b5f      	ldr	r3, [pc, #380]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002636:	21e0      	movs	r1, #224	; 0xe0
 8002638:	01c9      	lsls	r1, r1, #7
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	4a5d      	ldr	r2, [pc, #372]	; (80027b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	4b59      	ldr	r3, [pc, #356]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d057      	beq.n	800270c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002664:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	d12b      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e097      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d107      	bne.n	800268c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267c:	4b4d      	ldr	r3, [pc, #308]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	049b      	lsls	r3, r3, #18
 8002684:	4013      	ands	r3, r2
 8002686:	d11f      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e08b      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002694:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4013      	ands	r3, r2
 800269e:	d113      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e07f      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ac:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026b0:	2202      	movs	r2, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	d108      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e074      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ba:	4b3e      	ldr	r3, [pc, #248]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e06d      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c8:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2207      	movs	r2, #7
 80026ce:	4393      	bics	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe f92e 	bl	800093c <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e4:	e009      	b.n	80026fa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e6:	f7fe f929 	bl	800093c <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <HAL_RCC_ClockConfig+0x1f4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e054      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	4b2e      	ldr	r3, [pc, #184]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2238      	movs	r2, #56	; 0x38
 8002700:	401a      	ands	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	429a      	cmp	r2, r3
 800270a:	d1ec      	bne.n	80026e6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2207      	movs	r2, #7
 8002712:	4013      	ands	r3, r2
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d21e      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2207      	movs	r2, #7
 8002720:	4393      	bics	r3, r2
 8002722:	0019      	movs	r1, r3
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800272c:	f7fe f906 	bl	800093c <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002734:	e009      	b.n	800274a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002736:	f7fe f901 	bl	800093c <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e02c      	b.n	80027a4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800274a:	4b18      	ldr	r3, [pc, #96]	; (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2207      	movs	r2, #7
 8002750:	4013      	ands	r3, r2
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2204      	movs	r2, #4
 800275e:	4013      	ands	r3, r2
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002762:	4b14      	ldr	r3, [pc, #80]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_RCC_ClockConfig+0x200>)
 8002768:	4013      	ands	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002776:	f000 f829 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800277a:	0001      	movs	r1, r0
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	220f      	movs	r2, #15
 8002784:	401a      	ands	r2, r3
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x204>)
 8002788:	0092      	lsls	r2, r2, #2
 800278a:	58d3      	ldr	r3, [r2, r3]
 800278c:	221f      	movs	r2, #31
 800278e:	4013      	ands	r3, r2
 8002790:	000a      	movs	r2, r1
 8002792:	40da      	lsrs	r2, r3
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x208>)
 8002796:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_ClockConfig+0x20c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0018      	movs	r0, r3
 800279e:	f7fe f871 	bl	8000884 <HAL_InitTick>
 80027a2:	0003      	movs	r3, r0
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40022000 	.word	0x40022000
 80027b0:	00001388 	.word	0x00001388
 80027b4:	40021000 	.word	0x40021000
 80027b8:	fffff0ff 	.word	0xfffff0ff
 80027bc:	ffff8fff 	.word	0xffff8fff
 80027c0:	08002954 	.word	0x08002954
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027d2:	4b3c      	ldr	r3, [pc, #240]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2238      	movs	r2, #56	; 0x38
 80027d8:	4013      	ands	r3, r2
 80027da:	d10f      	bne.n	80027fc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80027dc:	4b39      	ldr	r3, [pc, #228]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	0adb      	lsrs	r3, r3, #11
 80027e2:	2207      	movs	r2, #7
 80027e4:	4013      	ands	r3, r2
 80027e6:	2201      	movs	r2, #1
 80027e8:	409a      	lsls	r2, r3
 80027ea:	0013      	movs	r3, r2
 80027ec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80027ee:	6839      	ldr	r1, [r7, #0]
 80027f0:	4835      	ldr	r0, [pc, #212]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027f2:	f7fd fc83 	bl	80000fc <__udivsi3>
 80027f6:	0003      	movs	r3, r0
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e05d      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027fc:	4b31      	ldr	r3, [pc, #196]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2238      	movs	r2, #56	; 0x38
 8002802:	4013      	ands	r3, r2
 8002804:	2b08      	cmp	r3, #8
 8002806:	d102      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <HAL_RCC_GetSysClockFreq+0x100>)
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	e054      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2238      	movs	r2, #56	; 0x38
 8002814:	4013      	ands	r3, r2
 8002816:	2b10      	cmp	r3, #16
 8002818:	d138      	bne.n	800288c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800281a:	4b2a      	ldr	r3, [pc, #168]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2203      	movs	r2, #3
 8002820:	4013      	ands	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	2207      	movs	r2, #7
 800282c:	4013      	ands	r3, r2
 800282e:	3301      	adds	r3, #1
 8002830:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d10d      	bne.n	8002854 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	4824      	ldr	r0, [pc, #144]	; (80028cc <HAL_RCC_GetSysClockFreq+0x100>)
 800283c:	f7fd fc5e 	bl	80000fc <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	0019      	movs	r1, r3
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	227f      	movs	r2, #127	; 0x7f
 800284c:	4013      	ands	r3, r2
 800284e:	434b      	muls	r3, r1
 8002850:	617b      	str	r3, [r7, #20]
        break;
 8002852:	e00d      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	481c      	ldr	r0, [pc, #112]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002858:	f7fd fc50 	bl	80000fc <__udivsi3>
 800285c:	0003      	movs	r3, r0
 800285e:	0019      	movs	r1, r3
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	227f      	movs	r2, #127	; 0x7f
 8002868:	4013      	ands	r3, r2
 800286a:	434b      	muls	r3, r1
 800286c:	617b      	str	r3, [r7, #20]
        break;
 800286e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	0f5b      	lsrs	r3, r3, #29
 8002876:	2207      	movs	r2, #7
 8002878:	4013      	ands	r3, r2
 800287a:	3301      	adds	r3, #1
 800287c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	6978      	ldr	r0, [r7, #20]
 8002882:	f7fd fc3b 	bl	80000fc <__udivsi3>
 8002886:	0003      	movs	r3, r0
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	e015      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2238      	movs	r2, #56	; 0x38
 8002892:	4013      	ands	r3, r2
 8002894:	2b20      	cmp	r3, #32
 8002896:	d103      	bne.n	80028a0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2238      	movs	r2, #56	; 0x38
 80028a6:	4013      	ands	r3, r2
 80028a8:	2b18      	cmp	r3, #24
 80028aa:	d103      	bne.n	80028b4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80028ac:	23fa      	movs	r3, #250	; 0xfa
 80028ae:	01db      	lsls	r3, r3, #7
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	e001      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028b8:	693b      	ldr	r3, [r7, #16]
}
 80028ba:	0018      	movs	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	b006      	add	sp, #24
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	40021000 	.word	0x40021000
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	007a1200 	.word	0x007a1200

080028d0 <__libc_init_array>:
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	2600      	movs	r6, #0
 80028d4:	4d0c      	ldr	r5, [pc, #48]	; (8002908 <__libc_init_array+0x38>)
 80028d6:	4c0d      	ldr	r4, [pc, #52]	; (800290c <__libc_init_array+0x3c>)
 80028d8:	1b64      	subs	r4, r4, r5
 80028da:	10a4      	asrs	r4, r4, #2
 80028dc:	42a6      	cmp	r6, r4
 80028de:	d109      	bne.n	80028f4 <__libc_init_array+0x24>
 80028e0:	2600      	movs	r6, #0
 80028e2:	f000 f821 	bl	8002928 <_init>
 80028e6:	4d0a      	ldr	r5, [pc, #40]	; (8002910 <__libc_init_array+0x40>)
 80028e8:	4c0a      	ldr	r4, [pc, #40]	; (8002914 <__libc_init_array+0x44>)
 80028ea:	1b64      	subs	r4, r4, r5
 80028ec:	10a4      	asrs	r4, r4, #2
 80028ee:	42a6      	cmp	r6, r4
 80028f0:	d105      	bne.n	80028fe <__libc_init_array+0x2e>
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
 80028f4:	00b3      	lsls	r3, r6, #2
 80028f6:	58eb      	ldr	r3, [r5, r3]
 80028f8:	4798      	blx	r3
 80028fa:	3601      	adds	r6, #1
 80028fc:	e7ee      	b.n	80028dc <__libc_init_array+0xc>
 80028fe:	00b3      	lsls	r3, r6, #2
 8002900:	58eb      	ldr	r3, [r5, r3]
 8002902:	4798      	blx	r3
 8002904:	3601      	adds	r6, #1
 8002906:	e7f2      	b.n	80028ee <__libc_init_array+0x1e>
 8002908:	08002994 	.word	0x08002994
 800290c:	08002994 	.word	0x08002994
 8002910:	08002994 	.word	0x08002994
 8002914:	08002998 	.word	0x08002998

08002918 <memset>:
 8002918:	0003      	movs	r3, r0
 800291a:	1882      	adds	r2, r0, r2
 800291c:	4293      	cmp	r3, r2
 800291e:	d100      	bne.n	8002922 <memset+0xa>
 8002920:	4770      	bx	lr
 8002922:	7019      	strb	r1, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	e7f9      	b.n	800291c <memset+0x4>

08002928 <_init>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr

08002934 <_fini>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr
