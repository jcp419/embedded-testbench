
motor_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f40  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080090d8  080090d8  000190d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009108  08009108  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009108  08009108  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009108  08009108  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800910c  0800910c  0001910c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08009110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200000d8  080091e8  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080091e8  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001020a  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002407  00000000  00000000  00030312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  00032720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  000335c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021741  00000000  00000000  00034358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cd7  00000000  00000000  00055a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7306  00000000  00000000  00068770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fa76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000410c  00000000  00000000  0012fac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000d8 	.word	0x200000d8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080090c0 	.word	0x080090c0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000dc 	.word	0x200000dc
 80001d4:	080090c0 	.word	0x080090c0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <new_smbus>:
 *      Author: Raymond Liu
 */

#include "abs_enc_reading.h"

SMBus *new_smbus(I2C_HandleTypeDef *hi2c) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
    SMBus *smbus = malloc(sizeof(SMBus));
 8000b2c:	2024      	movs	r0, #36	; 0x24
 8000b2e:	f008 fa05 	bl	8008f3c <malloc>
 8000b32:	4603      	mov	r3, r0
 8000b34:	60fb      	str	r3, [r7, #12]
    smbus->i2c = hi2c;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	601a      	str	r2, [r3, #0]
    smbus->DMA = TRUE;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    memset(smbus->buf, 0, sizeof(smbus->buf));
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3305      	adds	r3, #5
 8000b48:	221e      	movs	r2, #30
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 f9fd 	bl	8008f4c <memset>
    return smbus;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <disable_DMA>:

void disable_DMA(SMBus *smbus) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    smbus->DMA = FALSE;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <read_word_data>:

long read_word_data(SMBus *smbus, uint8_t addr, char cmd) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
 8000b84:	4613      	mov	r3, r2
 8000b86:	70bb      	strb	r3, [r7, #2]
    smbus->buf[0] = cmd;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	78ba      	ldrb	r2, [r7, #2]
 8000b8c:	715a      	strb	r2, [r3, #5]
    if (!smbus->DMA) smbus->ret = HAL_I2C_Master_Transmit(smbus->i2c, addr << 1, smbus->buf, 1, 500);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d112      	bne.n	8000bbe <read_word_data+0x46>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	78fb      	ldrb	r3, [r7, #3]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	b299      	uxth	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	1d5a      	adds	r2, r3, #5
 8000ba8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bac:	9300      	str	r3, [sp, #0]
 8000bae:	2301      	movs	r3, #1
 8000bb0:	f002 fee2 	bl	8003978 <HAL_I2C_Master_Transmit>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	711a      	strb	r2, [r3, #4]
 8000bbc:	e00e      	b.n	8000bdc <read_word_data+0x64>
    else smbus->ret = HAL_I2C_Master_Transmit_DMA(smbus->i2c, addr << 1, smbus->buf, 1);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	b299      	uxth	r1, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	1d5a      	adds	r2, r3, #5
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f003 f8bc 	bl	8003d4c <HAL_I2C_Master_Transmit_DMA>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	711a      	strb	r2, [r3, #4]

    //reads from address sent above
    if (!smbus->DMA) smbus->ret = HAL_I2C_Master_Receive(smbus->i2c, (addr << 1) | 1, smbus->buf, 2, 500);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d115      	bne.n	8000c12 <read_word_data+0x9a>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6818      	ldr	r0, [r3, #0]
 8000bea:	78fb      	ldrb	r3, [r7, #3]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	b299      	uxth	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1d5a      	adds	r2, r3, #5
 8000bfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2302      	movs	r3, #2
 8000c04:	f002 ffac 	bl	8003b60 <HAL_I2C_Master_Receive>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	711a      	strb	r2, [r3, #4]
 8000c10:	e011      	b.n	8000c36 <read_word_data+0xbe>
    else smbus->ret = HAL_I2C_Master_Receive_DMA(smbus->i2c, (addr << 1) | 1, smbus->buf, 2);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	78fb      	ldrb	r3, [r7, #3]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	b21b      	sxth	r3, r3
 8000c22:	b299      	uxth	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1d5a      	adds	r2, r3, #5
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f003 f97f 	bl	8003f2c <HAL_I2C_Master_Receive_DMA>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	711a      	strb	r2, [r3, #4]

    long data = smbus->buf[0] | (smbus->buf[1] << 8);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	795b      	ldrb	r3, [r3, #5]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	799b      	ldrb	r3, [r3, #6]
 8000c40:	021b      	lsls	r3, r3, #8
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
    if (smbus->ret != HAL_OK)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	791b      	ldrb	r3, [r3, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00e      	beq.n	8000c6c <read_word_data+0xf4>
    {
    	HAL_I2C_DeInit(smbus->i2c);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fe61 	bl	800391a <HAL_I2C_DeInit>
    	HAL_Delay(5);
 8000c58:	2005      	movs	r0, #5
 8000c5a:	f002 f8e9 	bl	8002e30 <HAL_Delay>
    	HAL_I2C_Init(smbus->i2c);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 fdca 	bl	80037fc <HAL_I2C_Init>
    	data = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
    }

    return data;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <new_abs_encoder>:
	free(smbus->buf);
	free(smbus);
}

// A1/A2 is 1 if pin connected to power, 0 if pin connected to ground
AbsEncoder* new_abs_encoder(SMBus* i2cBus, uint8_t A1, uint8_t A2){
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b084      	sub	sp, #16
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	70fb      	strb	r3, [r7, #3]
 8000c82:	4613      	mov	r3, r2
 8000c84:	70bb      	strb	r3, [r7, #2]
	AbsEncoder* abs_encoder = (AbsEncoder*) malloc(sizeof(AbsEncoder));
 8000c86:	2008      	movs	r0, #8
 8000c88:	f008 f958 	bl	8008f3c <malloc>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60fb      	str	r3, [r7, #12]
    if (A1 && A2) abs_encoder->address = device_slave_address_both_power;
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d006      	beq.n	8000ca4 <new_abs_encoder+0x2e>
 8000c96:	78bb      	ldrb	r3, [r7, #2]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <new_abs_encoder+0x2e>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	2243      	movs	r2, #67	; 0x43
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e010      	b.n	8000cc6 <new_abs_encoder+0x50>
    else if (A1) abs_encoder->address = device_slave_address_a1_power;
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <new_abs_encoder+0x3c>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	2241      	movs	r2, #65	; 0x41
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e009      	b.n	8000cc6 <new_abs_encoder+0x50>
    else if (A2) abs_encoder->address = device_slave_address_a2_power;
 8000cb2:	78bb      	ldrb	r3, [r7, #2]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <new_abs_encoder+0x4a>
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	2242      	movs	r2, #66	; 0x42
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e002      	b.n	8000cc6 <new_abs_encoder+0x50>
    else abs_encoder->address = device_slave_address_none_power;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	601a      	str	r2, [r3, #0]
    abs_encoder->i2cBus = i2cBus;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	605a      	str	r2, [r3, #4]
    return abs_encoder;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <read_raw_angle>:

int read_raw_angle(AbsEncoder* abs_encoder) {
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b088      	sub	sp, #32
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	int raw_data = read_word_data(abs_encoder->i2cBus, abs_encoder->address, 0xFF);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6858      	ldr	r0, [r3, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	22ff      	movs	r2, #255	; 0xff
 8000cea:	4619      	mov	r1, r3
 8000cec:	f7ff ff44 	bl	8000b78 <read_word_data>
 8000cf0:	61f8      	str	r0, [r7, #28]
	int angle_left = ( raw_data >> 8 ) & 0xFF; // 0xFE
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	121b      	asrs	r3, r3, #8
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	61bb      	str	r3, [r7, #24]
	int angle_right = raw_data & 0xFF; // 0xFF
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	617b      	str	r3, [r7, #20]
	int angle_left_modified = angle_left & 0x3F;
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d06:	613b      	str	r3, [r7, #16]
	int angle_raw = (angle_right << 6) | angle_left_modified;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
    return angle_raw;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <get_angle_radians>:
    }

    return smbus->buf[0];
}

float get_angle_radians(AbsEncoder* encoder) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	int angle_raw = read_raw_angle(encoder);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ffd6 	bl	8000cd6 <read_raw_angle>
 8000d2a:	60f8      	str	r0, [r7, #12]
	float radians = (float)angle_raw / RAW_TO_RADIANS_CONVERSION_FACTOR;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	ee07 3a90 	vmov	s15, r3
 8000d32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d36:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000d54 <get_angle_radians+0x38>
 8000d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d3e:	edc7 7a02 	vstr	s15, [r7, #8]
	return radians;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	ee07 3a90 	vmov	s15, r3
}
 8000d48:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	4522f983 	.word	0x4522f983

08000d58 <abs_encoder_init>:

void del_encoder(AbsEncoder* abs_encoder){
    free(abs_encoder);
}

AbsEncoder* abs_encoder_init(I2C_HandleTypeDef* abs_encoder_handle, uint8_t A1, uint8_t A2){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
 8000d64:	4613      	mov	r3, r2
 8000d66:	70bb      	strb	r3, [r7, #2]
	SMBus* i2cBus = new_smbus(abs_encoder_handle);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff fedb 	bl	8000b24 <new_smbus>
 8000d6e:	60f8      	str	r0, [r7, #12]
	return new_abs_encoder(i2cBus, A1, A2);
 8000d70:	78ba      	ldrb	r2, [r7, #2]
 8000d72:	78fb      	ldrb	r3, [r7, #3]
 8000d74:	4619      	mov	r1, r3
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff ff7d 	bl	8000c76 <new_abs_encoder>
 8000d7c:	4603      	mov	r3, r0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <CH_num_receive>:
I2CBus i2c_bus;

// timeout ~half a second, prime number to avoid hitting unit testing reset bug again
int WATCHDOG_TIMEOUT = 443;

uint8_t CH_num_receive() {
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	switch(i2c_bus.operation) {
 8000d8c:	4b6f      	ldr	r3, [pc, #444]	; (8000f4c <CH_num_receive+0x1c4>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2bff      	cmp	r3, #255	; 0xff
 8000d92:	f000 80d2 	beq.w	8000f3a <CH_num_receive+0x1b2>
 8000d96:	2bff      	cmp	r3, #255	; 0xff
 8000d98:	f300 80d1 	bgt.w	8000f3e <CH_num_receive+0x1b6>
 8000d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d9e:	f000 80ca 	beq.w	8000f36 <CH_num_receive+0x1ae>
 8000da2:	2b7f      	cmp	r3, #127	; 0x7f
 8000da4:	f300 80cb 	bgt.w	8000f3e <CH_num_receive+0x1b6>
 8000da8:	2b6f      	cmp	r3, #111	; 0x6f
 8000daa:	f000 80c2 	beq.w	8000f32 <CH_num_receive+0x1aa>
 8000dae:	2b6f      	cmp	r3, #111	; 0x6f
 8000db0:	f300 80c5 	bgt.w	8000f3e <CH_num_receive+0x1b6>
 8000db4:	2b50      	cmp	r3, #80	; 0x50
 8000db6:	f300 80ab 	bgt.w	8000f10 <CH_num_receive+0x188>
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f2c0 80bf 	blt.w	8000f3e <CH_num_receive+0x1b6>
 8000dc0:	2b50      	cmp	r3, #80	; 0x50
 8000dc2:	f200 80bc 	bhi.w	8000f3e <CH_num_receive+0x1b6>
 8000dc6:	a201      	add	r2, pc, #4	; (adr r2, 8000dcc <CH_num_receive+0x44>)
 8000dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dcc:	08000f17 	.word	0x08000f17
 8000dd0:	08000f3f 	.word	0x08000f3f
 8000dd4:	08000f3f 	.word	0x08000f3f
 8000dd8:	08000f3f 	.word	0x08000f3f
 8000ddc:	08000f3f 	.word	0x08000f3f
 8000de0:	08000f3f 	.word	0x08000f3f
 8000de4:	08000f3f 	.word	0x08000f3f
 8000de8:	08000f3f 	.word	0x08000f3f
 8000dec:	08000f3f 	.word	0x08000f3f
 8000df0:	08000f3f 	.word	0x08000f3f
 8000df4:	08000f3f 	.word	0x08000f3f
 8000df8:	08000f3f 	.word	0x08000f3f
 8000dfc:	08000f3f 	.word	0x08000f3f
 8000e00:	08000f3f 	.word	0x08000f3f
 8000e04:	08000f3f 	.word	0x08000f3f
 8000e08:	08000f17 	.word	0x08000f17
 8000e0c:	08000f1b 	.word	0x08000f1b
 8000e10:	08000f3f 	.word	0x08000f3f
 8000e14:	08000f3f 	.word	0x08000f3f
 8000e18:	08000f3f 	.word	0x08000f3f
 8000e1c:	08000f3f 	.word	0x08000f3f
 8000e20:	08000f3f 	.word	0x08000f3f
 8000e24:	08000f3f 	.word	0x08000f3f
 8000e28:	08000f3f 	.word	0x08000f3f
 8000e2c:	08000f3f 	.word	0x08000f3f
 8000e30:	08000f3f 	.word	0x08000f3f
 8000e34:	08000f3f 	.word	0x08000f3f
 8000e38:	08000f3f 	.word	0x08000f3f
 8000e3c:	08000f3f 	.word	0x08000f3f
 8000e40:	08000f3f 	.word	0x08000f3f
 8000e44:	08000f3f 	.word	0x08000f3f
 8000e48:	08000f1b 	.word	0x08000f1b
 8000e4c:	08000f1f 	.word	0x08000f1f
 8000e50:	08000f3f 	.word	0x08000f3f
 8000e54:	08000f3f 	.word	0x08000f3f
 8000e58:	08000f3f 	.word	0x08000f3f
 8000e5c:	08000f3f 	.word	0x08000f3f
 8000e60:	08000f3f 	.word	0x08000f3f
 8000e64:	08000f3f 	.word	0x08000f3f
 8000e68:	08000f3f 	.word	0x08000f3f
 8000e6c:	08000f3f 	.word	0x08000f3f
 8000e70:	08000f3f 	.word	0x08000f3f
 8000e74:	08000f3f 	.word	0x08000f3f
 8000e78:	08000f3f 	.word	0x08000f3f
 8000e7c:	08000f3f 	.word	0x08000f3f
 8000e80:	08000f3f 	.word	0x08000f3f
 8000e84:	08000f3f 	.word	0x08000f3f
 8000e88:	08000f1f 	.word	0x08000f1f
 8000e8c:	08000f23 	.word	0x08000f23
 8000e90:	08000f3f 	.word	0x08000f3f
 8000e94:	08000f3f 	.word	0x08000f3f
 8000e98:	08000f3f 	.word	0x08000f3f
 8000e9c:	08000f3f 	.word	0x08000f3f
 8000ea0:	08000f3f 	.word	0x08000f3f
 8000ea4:	08000f3f 	.word	0x08000f3f
 8000ea8:	08000f3f 	.word	0x08000f3f
 8000eac:	08000f3f 	.word	0x08000f3f
 8000eb0:	08000f3f 	.word	0x08000f3f
 8000eb4:	08000f3f 	.word	0x08000f3f
 8000eb8:	08000f3f 	.word	0x08000f3f
 8000ebc:	08000f3f 	.word	0x08000f3f
 8000ec0:	08000f3f 	.word	0x08000f3f
 8000ec4:	08000f3f 	.word	0x08000f3f
 8000ec8:	08000f27 	.word	0x08000f27
 8000ecc:	08000f2b 	.word	0x08000f2b
 8000ed0:	08000f3f 	.word	0x08000f3f
 8000ed4:	08000f3f 	.word	0x08000f3f
 8000ed8:	08000f3f 	.word	0x08000f3f
 8000edc:	08000f3f 	.word	0x08000f3f
 8000ee0:	08000f3f 	.word	0x08000f3f
 8000ee4:	08000f3f 	.word	0x08000f3f
 8000ee8:	08000f3f 	.word	0x08000f3f
 8000eec:	08000f3f 	.word	0x08000f3f
 8000ef0:	08000f3f 	.word	0x08000f3f
 8000ef4:	08000f3f 	.word	0x08000f3f
 8000ef8:	08000f3f 	.word	0x08000f3f
 8000efc:	08000f3f 	.word	0x08000f3f
 8000f00:	08000f3f 	.word	0x08000f3f
 8000f04:	08000f3f 	.word	0x08000f3f
 8000f08:	08000f2f 	.word	0x08000f2f
 8000f0c:	08000f33 	.word	0x08000f33
 8000f10:	2b60      	cmp	r3, #96	; 0x60
 8000f12:	d00e      	beq.n	8000f32 <CH_num_receive+0x1aa>
 8000f14:	e013      	b.n	8000f3e <CH_num_receive+0x1b6>
	case OFF:
	case ON: return 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e012      	b.n	8000f40 <CH_num_receive+0x1b8>
	case OPEN:
	case OPEN_PLUS: return 4;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e010      	b.n	8000f40 <CH_num_receive+0x1b8>
	case CLOSED:
	case CLOSED_PLUS: return 8;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	e00e      	b.n	8000f40 <CH_num_receive+0x1b8>
	case CONFIG_PWM: return 2;
 8000f22:	2302      	movs	r3, #2
 8000f24:	e00c      	b.n	8000f40 <CH_num_receive+0x1b8>
	case CONFIG_K: return 12;
 8000f26:	230c      	movs	r3, #12
 8000f28:	e00a      	b.n	8000f40 <CH_num_receive+0x1b8>
	case QUAD_ENC: return 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e008      	b.n	8000f40 <CH_num_receive+0x1b8>
	case ADJUST: return 4;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e006      	b.n	8000f40 <CH_num_receive+0x1b8>
	case ABS_ENC:
	case LIMIT:
	case CALIBRATED: return 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e004      	b.n	8000f40 <CH_num_receive+0x1b8>
	case LIMIT_ON: return 1;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e002      	b.n	8000f40 <CH_num_receive+0x1b8>
	case UNKNOWN: return 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <CH_num_receive+0x1b8>
	}
	return 0;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	20000104 	.word	0x20000104

08000f50 <CH_num_send>:

uint8_t CH_num_send() {
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	switch(i2c_bus.operation) {
 8000f54:	4b6f      	ldr	r3, [pc, #444]	; (8001114 <CH_num_send+0x1c4>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2bff      	cmp	r3, #255	; 0xff
 8000f5a:	f000 80d2 	beq.w	8001102 <CH_num_send+0x1b2>
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	f300 80d1 	bgt.w	8001106 <CH_num_send+0x1b6>
 8000f64:	2b7f      	cmp	r3, #127	; 0x7f
 8000f66:	f000 80cc 	beq.w	8001102 <CH_num_send+0x1b2>
 8000f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f6c:	f300 80cb 	bgt.w	8001106 <CH_num_send+0x1b6>
 8000f70:	2b6f      	cmp	r3, #111	; 0x6f
 8000f72:	f000 80c4 	beq.w	80010fe <CH_num_send+0x1ae>
 8000f76:	2b6f      	cmp	r3, #111	; 0x6f
 8000f78:	f300 80c5 	bgt.w	8001106 <CH_num_send+0x1b6>
 8000f7c:	2b50      	cmp	r3, #80	; 0x50
 8000f7e:	f300 80ab 	bgt.w	80010d8 <CH_num_send+0x188>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f2c0 80bf 	blt.w	8001106 <CH_num_send+0x1b6>
 8000f88:	2b50      	cmp	r3, #80	; 0x50
 8000f8a:	f200 80bc 	bhi.w	8001106 <CH_num_send+0x1b6>
 8000f8e:	a201      	add	r2, pc, #4	; (adr r2, 8000f94 <CH_num_send+0x44>)
 8000f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f94:	080010df 	.word	0x080010df
 8000f98:	08001107 	.word	0x08001107
 8000f9c:	08001107 	.word	0x08001107
 8000fa0:	08001107 	.word	0x08001107
 8000fa4:	08001107 	.word	0x08001107
 8000fa8:	08001107 	.word	0x08001107
 8000fac:	08001107 	.word	0x08001107
 8000fb0:	08001107 	.word	0x08001107
 8000fb4:	08001107 	.word	0x08001107
 8000fb8:	08001107 	.word	0x08001107
 8000fbc:	08001107 	.word	0x08001107
 8000fc0:	08001107 	.word	0x08001107
 8000fc4:	08001107 	.word	0x08001107
 8000fc8:	08001107 	.word	0x08001107
 8000fcc:	08001107 	.word	0x08001107
 8000fd0:	080010df 	.word	0x080010df
 8000fd4:	080010df 	.word	0x080010df
 8000fd8:	08001107 	.word	0x08001107
 8000fdc:	08001107 	.word	0x08001107
 8000fe0:	08001107 	.word	0x08001107
 8000fe4:	08001107 	.word	0x08001107
 8000fe8:	08001107 	.word	0x08001107
 8000fec:	08001107 	.word	0x08001107
 8000ff0:	08001107 	.word	0x08001107
 8000ff4:	08001107 	.word	0x08001107
 8000ff8:	08001107 	.word	0x08001107
 8000ffc:	08001107 	.word	0x08001107
 8001000:	08001107 	.word	0x08001107
 8001004:	08001107 	.word	0x08001107
 8001008:	08001107 	.word	0x08001107
 800100c:	08001107 	.word	0x08001107
 8001010:	080010e3 	.word	0x080010e3
 8001014:	080010e7 	.word	0x080010e7
 8001018:	08001107 	.word	0x08001107
 800101c:	08001107 	.word	0x08001107
 8001020:	08001107 	.word	0x08001107
 8001024:	08001107 	.word	0x08001107
 8001028:	08001107 	.word	0x08001107
 800102c:	08001107 	.word	0x08001107
 8001030:	08001107 	.word	0x08001107
 8001034:	08001107 	.word	0x08001107
 8001038:	08001107 	.word	0x08001107
 800103c:	08001107 	.word	0x08001107
 8001040:	08001107 	.word	0x08001107
 8001044:	08001107 	.word	0x08001107
 8001048:	08001107 	.word	0x08001107
 800104c:	08001107 	.word	0x08001107
 8001050:	080010eb 	.word	0x080010eb
 8001054:	080010ef 	.word	0x080010ef
 8001058:	08001107 	.word	0x08001107
 800105c:	08001107 	.word	0x08001107
 8001060:	08001107 	.word	0x08001107
 8001064:	08001107 	.word	0x08001107
 8001068:	08001107 	.word	0x08001107
 800106c:	08001107 	.word	0x08001107
 8001070:	08001107 	.word	0x08001107
 8001074:	08001107 	.word	0x08001107
 8001078:	08001107 	.word	0x08001107
 800107c:	08001107 	.word	0x08001107
 8001080:	08001107 	.word	0x08001107
 8001084:	08001107 	.word	0x08001107
 8001088:	08001107 	.word	0x08001107
 800108c:	08001107 	.word	0x08001107
 8001090:	080010ef 	.word	0x080010ef
 8001094:	080010f3 	.word	0x080010f3
 8001098:	08001107 	.word	0x08001107
 800109c:	08001107 	.word	0x08001107
 80010a0:	08001107 	.word	0x08001107
 80010a4:	08001107 	.word	0x08001107
 80010a8:	08001107 	.word	0x08001107
 80010ac:	08001107 	.word	0x08001107
 80010b0:	08001107 	.word	0x08001107
 80010b4:	08001107 	.word	0x08001107
 80010b8:	08001107 	.word	0x08001107
 80010bc:	08001107 	.word	0x08001107
 80010c0:	08001107 	.word	0x08001107
 80010c4:	08001107 	.word	0x08001107
 80010c8:	08001107 	.word	0x08001107
 80010cc:	08001107 	.word	0x08001107
 80010d0:	080010f7 	.word	0x080010f7
 80010d4:	080010fb 	.word	0x080010fb
 80010d8:	2b60      	cmp	r3, #96	; 0x60
 80010da:	d010      	beq.n	80010fe <CH_num_send+0x1ae>
 80010dc:	e013      	b.n	8001106 <CH_num_send+0x1b6>
	case OFF:
	case ON:
	case OPEN: return 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	e012      	b.n	8001108 <CH_num_send+0x1b8>
	case OPEN_PLUS: return 4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	e010      	b.n	8001108 <CH_num_send+0x1b8>
	case CLOSED:return 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e00e      	b.n	8001108 <CH_num_send+0x1b8>
	case CLOSED_PLUS: return 4;
 80010ea:	2304      	movs	r3, #4
 80010ec:	e00c      	b.n	8001108 <CH_num_send+0x1b8>
	case CONFIG_PWM:
	case CONFIG_K: return 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e00a      	b.n	8001108 <CH_num_send+0x1b8>
	case QUAD_ENC: return 4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	e008      	b.n	8001108 <CH_num_send+0x1b8>
	case ADJUST: return 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e006      	b.n	8001108 <CH_num_send+0x1b8>
	case ABS_ENC: return 4;
 80010fa:	2304      	movs	r3, #4
 80010fc:	e004      	b.n	8001108 <CH_num_send+0x1b8>
	case LIMIT:
	case CALIBRATED: return 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	e002      	b.n	8001108 <CH_num_send+0x1b8>
	case LIMIT_ON:
	case UNKNOWN: return 0;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <CH_num_send+0x1b8>
	}
	return 0;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000104 	.word	0x20000104

08001118 <CH_process_received>:


void CH_process_received() {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
	if (i2c_bus.channel > 5) {return;}
 800111e:	4b93      	ldr	r3, [pc, #588]	; (800136c <CH_process_received+0x254>)
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	2b05      	cmp	r3, #5
 8001124:	f200 8118 	bhi.w	8001358 <CH_process_received+0x240>
	Channel *channel = channels + i2c_bus.channel;
 8001128:	4b90      	ldr	r3, [pc, #576]	; (800136c <CH_process_received+0x254>)
 800112a:	785b      	ldrb	r3, [r3, #1]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	4a90      	ldr	r2, [pc, #576]	; (8001370 <CH_process_received+0x258>)
 8001130:	4413      	add	r3, r2
 8001132:	607b      	str	r3, [r7, #4]
	switch(i2c_bus.operation) {
 8001134:	4b8d      	ldr	r3, [pc, #564]	; (800136c <CH_process_received+0x254>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	f000 810f 	beq.w	800135c <CH_process_received+0x244>
 800113e:	2bff      	cmp	r3, #255	; 0xff
 8001140:	f300 810f 	bgt.w	8001362 <CH_process_received+0x24a>
 8001144:	2b7f      	cmp	r3, #127	; 0x7f
 8001146:	f000 8101 	beq.w	800134c <CH_process_received+0x234>
 800114a:	2b7f      	cmp	r3, #127	; 0x7f
 800114c:	f300 8109 	bgt.w	8001362 <CH_process_received+0x24a>
 8001150:	2b6f      	cmp	r3, #111	; 0x6f
 8001152:	f000 8105 	beq.w	8001360 <CH_process_received+0x248>
 8001156:	2b6f      	cmp	r3, #111	; 0x6f
 8001158:	f300 8103 	bgt.w	8001362 <CH_process_received+0x24a>
 800115c:	2b50      	cmp	r3, #80	; 0x50
 800115e:	f300 80ab 	bgt.w	80012b8 <CH_process_received+0x1a0>
 8001162:	2b00      	cmp	r3, #0
 8001164:	f2c0 80fd 	blt.w	8001362 <CH_process_received+0x24a>
 8001168:	2b50      	cmp	r3, #80	; 0x50
 800116a:	f200 80fa 	bhi.w	8001362 <CH_process_received+0x24a>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <CH_process_received+0x5c>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	080012bd 	.word	0x080012bd
 8001178:	08001363 	.word	0x08001363
 800117c:	08001363 	.word	0x08001363
 8001180:	08001363 	.word	0x08001363
 8001184:	08001363 	.word	0x08001363
 8001188:	08001363 	.word	0x08001363
 800118c:	08001363 	.word	0x08001363
 8001190:	08001363 	.word	0x08001363
 8001194:	08001363 	.word	0x08001363
 8001198:	08001363 	.word	0x08001363
 800119c:	08001363 	.word	0x08001363
 80011a0:	08001363 	.word	0x08001363
 80011a4:	08001363 	.word	0x08001363
 80011a8:	08001363 	.word	0x08001363
 80011ac:	08001363 	.word	0x08001363
 80011b0:	08001363 	.word	0x08001363
 80011b4:	080012c7 	.word	0x080012c7
 80011b8:	08001363 	.word	0x08001363
 80011bc:	08001363 	.word	0x08001363
 80011c0:	08001363 	.word	0x08001363
 80011c4:	08001363 	.word	0x08001363
 80011c8:	08001363 	.word	0x08001363
 80011cc:	08001363 	.word	0x08001363
 80011d0:	08001363 	.word	0x08001363
 80011d4:	08001363 	.word	0x08001363
 80011d8:	08001363 	.word	0x08001363
 80011dc:	08001363 	.word	0x08001363
 80011e0:	08001363 	.word	0x08001363
 80011e4:	08001363 	.word	0x08001363
 80011e8:	08001363 	.word	0x08001363
 80011ec:	08001363 	.word	0x08001363
 80011f0:	080012c7 	.word	0x080012c7
 80011f4:	080012db 	.word	0x080012db
 80011f8:	08001363 	.word	0x08001363
 80011fc:	08001363 	.word	0x08001363
 8001200:	08001363 	.word	0x08001363
 8001204:	08001363 	.word	0x08001363
 8001208:	08001363 	.word	0x08001363
 800120c:	08001363 	.word	0x08001363
 8001210:	08001363 	.word	0x08001363
 8001214:	08001363 	.word	0x08001363
 8001218:	08001363 	.word	0x08001363
 800121c:	08001363 	.word	0x08001363
 8001220:	08001363 	.word	0x08001363
 8001224:	08001363 	.word	0x08001363
 8001228:	08001363 	.word	0x08001363
 800122c:	08001363 	.word	0x08001363
 8001230:	080012db 	.word	0x080012db
 8001234:	080012f9 	.word	0x080012f9
 8001238:	08001363 	.word	0x08001363
 800123c:	08001363 	.word	0x08001363
 8001240:	08001363 	.word	0x08001363
 8001244:	08001363 	.word	0x08001363
 8001248:	08001363 	.word	0x08001363
 800124c:	08001363 	.word	0x08001363
 8001250:	08001363 	.word	0x08001363
 8001254:	08001363 	.word	0x08001363
 8001258:	08001363 	.word	0x08001363
 800125c:	08001363 	.word	0x08001363
 8001260:	08001363 	.word	0x08001363
 8001264:	08001363 	.word	0x08001363
 8001268:	08001363 	.word	0x08001363
 800126c:	08001363 	.word	0x08001363
 8001270:	0800131d 	.word	0x0800131d
 8001274:	08001363 	.word	0x08001363
 8001278:	08001363 	.word	0x08001363
 800127c:	08001363 	.word	0x08001363
 8001280:	08001363 	.word	0x08001363
 8001284:	08001363 	.word	0x08001363
 8001288:	08001363 	.word	0x08001363
 800128c:	08001363 	.word	0x08001363
 8001290:	08001363 	.word	0x08001363
 8001294:	08001363 	.word	0x08001363
 8001298:	08001363 	.word	0x08001363
 800129c:	08001363 	.word	0x08001363
 80012a0:	08001363 	.word	0x08001363
 80012a4:	08001363 	.word	0x08001363
 80012a8:	08001363 	.word	0x08001363
 80012ac:	08001363 	.word	0x08001363
 80012b0:	0800133f 	.word	0x0800133f
 80012b4:	08001363 	.word	0x08001363
 80012b8:	2b60      	cmp	r3, #96	; 0x60
	case CONFIG_K: memcpy(&(channel->KP),i2c_bus.buffer,4); memcpy(&(channel->KI),i2c_bus.buffer+4,4); memcpy(&(channel->KD),i2c_bus.buffer+8,4); return;
	case QUAD_ENC: return;
	case ADJUST: memcpy(&(channel->quad_enc_value), i2c_bus.buffer, 4); return;
	case ABS_ENC:
	case LIMIT:
	case CALIBRATED: return;
 80012ba:	e051      	b.n	8001360 <CH_process_received+0x248>
	case OFF: channel->speed_max = 0; return;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
 80012c4:	e04d      	b.n	8001362 <CH_process_received+0x24a>
	case OPEN_PLUS: channel->mode = 0x00; memcpy(&(channel->open_setpoint), i2c_bus.buffer, 4); return;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3304      	adds	r3, #4
 80012d0:	4a26      	ldr	r2, [pc, #152]	; (800136c <CH_process_received+0x254>)
 80012d2:	f8d2 2002 	ldr.w	r2, [r2, #2]
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e043      	b.n	8001362 <CH_process_received+0x24a>
	case CLOSED_PLUS: channel->mode = 0xFF; memcpy(&(channel->FF), i2c_bus.buffer, 4); memcpy(&(channel->closed_setpoint),i2c_bus.buffer+4,4); return;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	22ff      	movs	r2, #255	; 0xff
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	330c      	adds	r3, #12
 80012e4:	4a21      	ldr	r2, [pc, #132]	; (800136c <CH_process_received+0x254>)
 80012e6:	f8d2 2002 	ldr.w	r2, [r2, #2]
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3308      	adds	r3, #8
 80012f0:	4a20      	ldr	r2, [pc, #128]	; (8001374 <CH_process_received+0x25c>)
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	e034      	b.n	8001362 <CH_process_received+0x24a>
		int max = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <CH_process_received+0x254>)
 80012fe:	885b      	ldrh	r3, [r3, #2]
		memcpy(&(max),i2c_bus.buffer,2);
 8001300:	803b      	strh	r3, [r7, #0]
		channel->speed_max = (float)(max)/100; return; //UPDATED
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001378 <CH_process_received+0x260>
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 800131a:	e022      	b.n	8001362 <CH_process_received+0x24a>
	case CONFIG_K: memcpy(&(channel->KP),i2c_bus.buffer,4); memcpy(&(channel->KI),i2c_bus.buffer+4,4); memcpy(&(channel->KD),i2c_bus.buffer+8,4); return;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3310      	adds	r3, #16
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <CH_process_received+0x254>)
 8001322:	f8d2 2002 	ldr.w	r2, [r2, #2]
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3314      	adds	r3, #20
 800132c:	4a11      	ldr	r2, [pc, #68]	; (8001374 <CH_process_received+0x25c>)
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3318      	adds	r3, #24
 8001336:	4a11      	ldr	r2, [pc, #68]	; (800137c <CH_process_received+0x264>)
 8001338:	6812      	ldr	r2, [r2, #0]
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e011      	b.n	8001362 <CH_process_received+0x24a>
	case ADJUST: memcpy(&(channel->quad_enc_value), i2c_bus.buffer, 4); return;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3324      	adds	r3, #36	; 0x24
 8001342:	4a0a      	ldr	r2, [pc, #40]	; (800136c <CH_process_received+0x254>)
 8001344:	f8d2 2002 	ldr.w	r2, [r2, #2]
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e00a      	b.n	8001362 <CH_process_received+0x24a>
	case LIMIT_ON: memcpy(&(channel->limit_enabled), i2c_bus.buffer, 1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	333d      	adds	r3, #61	; 0x3d
 8001350:	4a06      	ldr	r2, [pc, #24]	; (800136c <CH_process_received+0x254>)
 8001352:	7892      	ldrb	r2, [r2, #2]
 8001354:	701a      	strb	r2, [r3, #0]
	case UNKNOWN: return;
 8001356:	e001      	b.n	800135c <CH_process_received+0x244>
	if (i2c_bus.channel > 5) {return;}
 8001358:	bf00      	nop
 800135a:	e002      	b.n	8001362 <CH_process_received+0x24a>
	case UNKNOWN: return;
 800135c:	bf00      	nop
 800135e:	e000      	b.n	8001362 <CH_process_received+0x24a>
	case CALIBRATED: return;
 8001360:	bf00      	nop
	}
}
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000104 	.word	0x20000104
 8001370:	20000128 	.word	0x20000128
 8001374:	2000010a 	.word	0x2000010a
 8001378:	42c80000 	.word	0x42c80000
 800137c:	2000010e 	.word	0x2000010e

08001380 <CH_prepare_send>:

void CH_prepare_send() {
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
	if (i2c_bus.channel > 5) {return;}
 8001386:	4b82      	ldr	r3, [pc, #520]	; (8001590 <CH_prepare_send+0x210>)
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	2b05      	cmp	r3, #5
 800138c:	f200 80f7 	bhi.w	800157e <CH_prepare_send+0x1fe>
	Channel *channel = channels + i2c_bus.channel;
 8001390:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <CH_prepare_send+0x210>)
 8001392:	785b      	ldrb	r3, [r3, #1]
 8001394:	019b      	lsls	r3, r3, #6
 8001396:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <CH_prepare_send+0x214>)
 8001398:	4413      	add	r3, r2
 800139a:	607b      	str	r3, [r7, #4]
	switch(i2c_bus.operation) {
 800139c:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <CH_prepare_send+0x210>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2bff      	cmp	r3, #255	; 0xff
 80013a2:	f000 80ee 	beq.w	8001582 <CH_prepare_send+0x202>
 80013a6:	2bff      	cmp	r3, #255	; 0xff
 80013a8:	f300 80ec 	bgt.w	8001584 <CH_prepare_send+0x204>
 80013ac:	2b7f      	cmp	r3, #127	; 0x7f
 80013ae:	f000 80e8 	beq.w	8001582 <CH_prepare_send+0x202>
 80013b2:	2b7f      	cmp	r3, #127	; 0x7f
 80013b4:	f300 80e6 	bgt.w	8001584 <CH_prepare_send+0x204>
 80013b8:	2b6f      	cmp	r3, #111	; 0x6f
 80013ba:	f000 80da 	beq.w	8001572 <CH_prepare_send+0x1f2>
 80013be:	2b6f      	cmp	r3, #111	; 0x6f
 80013c0:	f300 80e0 	bgt.w	8001584 <CH_prepare_send+0x204>
 80013c4:	2b50      	cmp	r3, #80	; 0x50
 80013c6:	f300 80ab 	bgt.w	8001520 <CH_prepare_send+0x1a0>
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f2c0 80da 	blt.w	8001584 <CH_prepare_send+0x204>
 80013d0:	2b50      	cmp	r3, #80	; 0x50
 80013d2:	f200 80d7 	bhi.w	8001584 <CH_prepare_send+0x204>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <CH_prepare_send+0x5c>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001585 	.word	0x08001585
 80013e0:	08001585 	.word	0x08001585
 80013e4:	08001585 	.word	0x08001585
 80013e8:	08001585 	.word	0x08001585
 80013ec:	08001585 	.word	0x08001585
 80013f0:	08001585 	.word	0x08001585
 80013f4:	08001585 	.word	0x08001585
 80013f8:	08001585 	.word	0x08001585
 80013fc:	08001585 	.word	0x08001585
 8001400:	08001585 	.word	0x08001585
 8001404:	08001585 	.word	0x08001585
 8001408:	08001585 	.word	0x08001585
 800140c:	08001585 	.word	0x08001585
 8001410:	08001585 	.word	0x08001585
 8001414:	08001585 	.word	0x08001585
 8001418:	08001585 	.word	0x08001585
 800141c:	08001585 	.word	0x08001585
 8001420:	08001585 	.word	0x08001585
 8001424:	08001585 	.word	0x08001585
 8001428:	08001585 	.word	0x08001585
 800142c:	08001585 	.word	0x08001585
 8001430:	08001585 	.word	0x08001585
 8001434:	08001585 	.word	0x08001585
 8001438:	08001585 	.word	0x08001585
 800143c:	08001585 	.word	0x08001585
 8001440:	08001585 	.word	0x08001585
 8001444:	08001585 	.word	0x08001585
 8001448:	08001585 	.word	0x08001585
 800144c:	08001585 	.word	0x08001585
 8001450:	08001585 	.word	0x08001585
 8001454:	08001585 	.word	0x08001585
 8001458:	08001527 	.word	0x08001527
 800145c:	08001585 	.word	0x08001585
 8001460:	08001585 	.word	0x08001585
 8001464:	08001585 	.word	0x08001585
 8001468:	08001585 	.word	0x08001585
 800146c:	08001585 	.word	0x08001585
 8001470:	08001585 	.word	0x08001585
 8001474:	08001585 	.word	0x08001585
 8001478:	08001585 	.word	0x08001585
 800147c:	08001585 	.word	0x08001585
 8001480:	08001585 	.word	0x08001585
 8001484:	08001585 	.word	0x08001585
 8001488:	08001585 	.word	0x08001585
 800148c:	08001585 	.word	0x08001585
 8001490:	08001585 	.word	0x08001585
 8001494:	08001585 	.word	0x08001585
 8001498:	08001537 	.word	0x08001537
 800149c:	08001585 	.word	0x08001585
 80014a0:	08001585 	.word	0x08001585
 80014a4:	08001585 	.word	0x08001585
 80014a8:	08001585 	.word	0x08001585
 80014ac:	08001585 	.word	0x08001585
 80014b0:	08001585 	.word	0x08001585
 80014b4:	08001585 	.word	0x08001585
 80014b8:	08001585 	.word	0x08001585
 80014bc:	08001585 	.word	0x08001585
 80014c0:	08001585 	.word	0x08001585
 80014c4:	08001585 	.word	0x08001585
 80014c8:	08001585 	.word	0x08001585
 80014cc:	08001585 	.word	0x08001585
 80014d0:	08001585 	.word	0x08001585
 80014d4:	08001585 	.word	0x08001585
 80014d8:	08001585 	.word	0x08001585
 80014dc:	08001547 	.word	0x08001547
 80014e0:	08001585 	.word	0x08001585
 80014e4:	08001585 	.word	0x08001585
 80014e8:	08001585 	.word	0x08001585
 80014ec:	08001585 	.word	0x08001585
 80014f0:	08001585 	.word	0x08001585
 80014f4:	08001585 	.word	0x08001585
 80014f8:	08001585 	.word	0x08001585
 80014fc:	08001585 	.word	0x08001585
 8001500:	08001585 	.word	0x08001585
 8001504:	08001585 	.word	0x08001585
 8001508:	08001585 	.word	0x08001585
 800150c:	08001585 	.word	0x08001585
 8001510:	08001585 	.word	0x08001585
 8001514:	08001585 	.word	0x08001585
 8001518:	08001585 	.word	0x08001585
 800151c:	08001557 	.word	0x08001557
 8001520:	2b60      	cmp	r3, #96	; 0x60
 8001522:	d020      	beq.n	8001566 <CH_prepare_send+0x1e6>
 8001524:	e02e      	b.n	8001584 <CH_prepare_send+0x204>
	case OFF:
	case ON:
	case OPEN: return;
	case OPEN_PLUS: memcpy(i2c_bus.buffer, &(channel->quad_enc_value), 4); return;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3324      	adds	r3, #36	; 0x24
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <CH_prepare_send+0x210>)
 8001530:	f8c3 2002 	str.w	r2, [r3, #2]
 8001534:	e026      	b.n	8001584 <CH_prepare_send+0x204>
	case CLOSED: return;
	case CLOSED_PLUS: memcpy(i2c_bus.buffer, &(channel->quad_enc_value), 4); return;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3324      	adds	r3, #36	; 0x24
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <CH_prepare_send+0x210>)
 8001540:	f8c3 2002 	str.w	r2, [r3, #2]
 8001544:	e01e      	b.n	8001584 <CH_prepare_send+0x204>
	case CONFIG_PWM:
	case CONFIG_K: return;
	case QUAD_ENC: memcpy(i2c_bus.buffer, &(channel->quad_enc_value), 4); return;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3324      	adds	r3, #36	; 0x24
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <CH_prepare_send+0x210>)
 8001550:	f8c3 2002 	str.w	r2, [r3, #2]
 8001554:	e016      	b.n	8001584 <CH_prepare_send+0x204>
	case ADJUST: return;
	case ABS_ENC: memcpy(i2c_bus.buffer, &(channel->abs_enc_value), 4); return;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3320      	adds	r3, #32
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <CH_prepare_send+0x210>)
 8001560:	f8c3 2002 	str.w	r2, [r3, #2]
 8001564:	e00e      	b.n	8001584 <CH_prepare_send+0x204>
	case LIMIT: memcpy(i2c_bus.buffer, &(channel->limit), 1); return;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	331c      	adds	r3, #28
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <CH_prepare_send+0x210>)
 800156e:	709a      	strb	r2, [r3, #2]
 8001570:	e008      	b.n	8001584 <CH_prepare_send+0x204>
	case CALIBRATED: memcpy(i2c_bus.buffer, &(channel->calibrated), 1); return;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	333c      	adds	r3, #60	; 0x3c
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <CH_prepare_send+0x210>)
 800157a:	709a      	strb	r2, [r3, #2]
 800157c:	e002      	b.n	8001584 <CH_prepare_send+0x204>
	if (i2c_bus.channel > 5) {return;}
 800157e:	bf00      	nop
 8001580:	e000      	b.n	8001584 <CH_prepare_send+0x204>
	case LIMIT_ON:
	case UNKNOWN: return;
 8001582:	bf00      	nop
	}
}
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	20000104 	.word	0x20000104
 8001594:	20000128 	.word	0x20000128

08001598 <CH_reset>:

void CH_reset() {
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(i2c_bus_handle);
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <CH_reset+0x60>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 f9b9 	bl	800391a <HAL_I2C_DeInit>
	i2c_bus.operation = UNKNOWN;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <CH_reset+0x64>)
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < CHANNELS; ++i){channels[i].open_setpoint = 0; channels[i].mode = 0x00; }
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	e010      	b.n	80015d6 <CH_reset+0x3e>
 80015b4:	4a12      	ldr	r2, [pc, #72]	; (8001600 <CH_reset+0x68>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	019b      	lsls	r3, r3, #6
 80015ba:	4413      	add	r3, r2
 80015bc:	3304      	adds	r3, #4
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <CH_reset+0x68>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	019b      	lsls	r3, r3, #6
 80015ca:	4413      	add	r3, r2
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3301      	adds	r3, #1
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	ddeb      	ble.n	80015b4 <CH_reset+0x1c>
	HAL_I2C_Init(i2c_bus_handle);
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <CH_reset+0x60>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 f90b 	bl	80037fc <HAL_I2C_Init>
	HAL_I2C_EnableListen_IT(i2c_bus_handle);
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <CH_reset+0x60>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 fed6 	bl	800439c <HAL_I2C_EnableListen_IT>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000f4 	.word	0x200000f4
 80015fc:	20000104 	.word	0x20000104
 8001600:	20000128 	.word	0x20000128

08001604 <CH_tick>:

void CH_tick() {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	i2c_bus.tick += 1;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <CH_tick+0x2c>)
 800160a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800160c:	3301      	adds	r3, #1
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <CH_tick+0x2c>)
 8001612:	845a      	strh	r2, [r3, #34]	; 0x22
	if (i2c_bus.tick >= WATCHDOG_TIMEOUT) {
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <CH_tick+0x2c>)
 8001616:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001618:	461a      	mov	r2, r3
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <CH_tick+0x30>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	db04      	blt.n	800162c <CH_tick+0x28>
		i2c_bus.tick = 0;
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <CH_tick+0x2c>)
 8001624:	2200      	movs	r2, #0
 8001626:	845a      	strh	r2, [r3, #34]	; 0x22
		CH_reset();
 8001628:	f7ff ffb6 	bl	8001598 <CH_reset>
	}
}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000104 	.word	0x20000104
 8001634:	20000024 	.word	0x20000024

08001638 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef * hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode){
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	70fb      	strb	r3, [r7, #3]
 8001644:	4613      	mov	r3, r2
 8001646:	803b      	strh	r3, [r7, #0]
	i2c_bus.channel = (0x000F & (AddrMatchCode >> 1));
 8001648:	883b      	ldrh	r3, [r7, #0]
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	b29b      	uxth	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <HAL_I2C_AddrCallback+0x74>)
 8001658:	705a      	strb	r2, [r3, #1]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT){
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10b      	bne.n	8001678 <HAL_I2C_AddrCallback+0x40>
		HAL_I2C_Slave_Seq_Receive_IT(i2c_bus_handle, i2c_bus.buffer, 1, I2C_LAST_FRAME);
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_I2C_AddrCallback+0x78>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001668:	2201      	movs	r2, #1
 800166a:	4912      	ldr	r1, [pc, #72]	; (80016b4 <HAL_I2C_AddrCallback+0x7c>)
 800166c:	f002 fdf2 	bl	8004254 <HAL_I2C_Slave_Seq_Receive_IT>
		i2c_bus.operation = UNKNOWN;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_I2C_AddrCallback+0x74>)
 8001672:	22ff      	movs	r2, #255	; 0xff
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e012      	b.n	800169e <HAL_I2C_AddrCallback+0x66>
	}
	else {
		CH_prepare_send();
 8001678:	f7ff fe82 	bl	8001380 <CH_prepare_send>
		if (CH_num_send() != 0) {
 800167c:	f7ff fc68 	bl	8000f50 <CH_num_send>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_I2C_AddrCallback+0x66>
			HAL_I2C_Slave_Seq_Transmit_IT(i2c_bus_handle, i2c_bus.buffer, CH_num_send(), I2C_LAST_FRAME);
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_I2C_AddrCallback+0x78>)
 8001688:	681c      	ldr	r4, [r3, #0]
 800168a:	f7ff fc61 	bl	8000f50 <CH_num_send>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001696:	4907      	ldr	r1, [pc, #28]	; (80016b4 <HAL_I2C_AddrCallback+0x7c>)
 8001698:	4620      	mov	r0, r4
 800169a:	f002 fd37 	bl	800410c <HAL_I2C_Slave_Seq_Transmit_IT>
		}
	}
    //HAL_IWDG_Refresh(watch_dog_handle);
	i2c_bus.tick = 0;
 800169e:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_I2C_AddrCallback+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	845a      	strh	r2, [r3, #34]	; 0x22
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd90      	pop	{r4, r7, pc}
 80016ac:	20000104 	.word	0x20000104
 80016b0:	200000f4 	.word	0x200000f4
 80016b4:	20000106 	.word	0x20000106

080016b8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef * hi2c) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if (i2c_bus.operation == UNKNOWN) {
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2bff      	cmp	r3, #255	; 0xff
 80016c6:	d118      	bne.n	80016fa <HAL_I2C_SlaveRxCpltCallback+0x42>
		i2c_bus.operation = i2c_bus.buffer[0];
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80016ca:	789a      	ldrb	r2, [r3, #2]
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80016ce:	701a      	strb	r2, [r3, #0]
		if (CH_num_receive() != 0) {
 80016d0:	f7ff fb5a 	bl	8000d88 <CH_num_receive>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00c      	beq.n	80016f4 <HAL_I2C_SlaveRxCpltCallback+0x3c>
			HAL_I2C_Slave_Seq_Receive_IT(i2c_bus_handle, i2c_bus.buffer, CH_num_receive(), I2C_LAST_FRAME);
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_I2C_SlaveRxCpltCallback+0x54>)
 80016dc:	681c      	ldr	r4, [r3, #0]
 80016de:	f7ff fb53 	bl	8000d88 <CH_num_receive>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ea:	4909      	ldr	r1, [pc, #36]	; (8001710 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 80016ec:	4620      	mov	r0, r4
 80016ee:	f002 fdb1 	bl	8004254 <HAL_I2C_Slave_Seq_Receive_IT>
		}
	}
	else {
		CH_process_received();
	}
}
 80016f2:	e004      	b.n	80016fe <HAL_I2C_SlaveRxCpltCallback+0x46>
			CH_process_received();
 80016f4:	f7ff fd10 	bl	8001118 <CH_process_received>
}
 80016f8:	e001      	b.n	80016fe <HAL_I2C_SlaveRxCpltCallback+0x46>
		CH_process_received();
 80016fa:	f7ff fd0d 	bl	8001118 <CH_process_received>
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bd90      	pop	{r4, r7, pc}
 8001706:	bf00      	nop
 8001708:	20000104 	.word	0x20000104
 800170c:	200000f4 	.word	0x200000f4
 8001710:	20000106 	.word	0x20000106

08001714 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef * hi2c){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	CH_reset();
 800171c:	f7ff ff3c 	bl	8001598 <CH_reset>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_I2C_ListenCpltCallback>:


void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef * hi2c) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(i2c_bus_handle);
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <HAL_I2C_ListenCpltCallback+0x1c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f002 fe31 	bl	800439c <HAL_I2C_EnableListen_IT>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200000f4 	.word	0x200000f4

08001748 <update_quad_enc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void update_quad_enc() {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
	channels[0].quad_enc_raw_now = TIM2->CNT;
 800174e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001754:	b29a      	uxth	r2, r3
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <update_quad_enc+0x6c>)
 8001758:	861a      	strh	r2, [r3, #48]	; 0x30
	channels[1].quad_enc_raw_now = TIM3->CNT;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <update_quad_enc+0x70>)
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	b29a      	uxth	r2, r3
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <update_quad_enc+0x6c>)
 8001762:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	for (int i = 0; i < 3; i++){
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e018      	b.n	800179e <update_quad_enc+0x56>
		Channel *channel = channels + i;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	019b      	lsls	r3, r3, #6
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <update_quad_enc+0x6c>)
 8001772:	4413      	add	r3, r2
 8001774:	603b      	str	r3, [r7, #0]
		channel->quad_enc_value = (int16_t)(channel->quad_enc_raw_now - channel->quad_enc_raw_last) + channel->quad_enc_value;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	b21b      	sxth	r3, r3
 8001784:	461a      	mov	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	441a      	add	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
		channel->quad_enc_raw_last = channel->quad_enc_raw_now;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	865a      	strh	r2, [r3, #50]	; 0x32
	for (int i = 0; i < 3; i++){
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3301      	adds	r3, #1
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	dde3      	ble.n	800176c <update_quad_enc+0x24>

	}
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000128 	.word	0x20000128
 80017b8:	40000400 	.word	0x40000400
 80017bc:	00000000 	.word	0x00000000

080017c0 <abs_enc_filter>:

float abs_enc_filter(int channel, float raw_val)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	ed87 0a00 	vstr	s0, [r7]
	// TODO make filters that can handle wrap around

	// Check for initial 0 value
	if (fabs((channels + channel)->abs_enc_value) < STABILIZER_EPSILON) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	019b      	lsls	r3, r3, #6
 80017d0:	4a27      	ldr	r2, [pc, #156]	; (8001870 <abs_enc_filter+0xb0>)
 80017d2:	4413      	add	r3, r2
 80017d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80017d8:	eeb0 0a67 	vmov.f32	s0, s15
 80017dc:	f000 fa0a 	bl	8001bf4 <fabs>
 80017e0:	ee10 3a10 	vmov	r3, s0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe5b 	bl	80004a0 <__aeabi_f2d>
 80017ea:	a31f      	add	r3, pc, #124	; (adr r3, 8001868 <abs_enc_filter+0xa8>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7ff f920 	bl	8000a34 <__aeabi_dcmplt>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <abs_enc_filter+0x40>
		return raw_val;
 80017fa:	edd7 7a00 	vldr	s15, [r7]
 80017fe:	e02e      	b.n	800185e <abs_enc_filter+0x9e>
	}

	float multiplier = STABILIZER_MULTIPLIER;
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <abs_enc_filter+0xb4>)
 8001802:	60fb      	str	r3, [r7, #12]

	// If value is outside 6.25 rad
	// If value is zero the i2c transaction failed
	if (fabs(raw_val) > 6.25 || raw_val == 0) {
 8001804:	ed97 0a00 	vldr	s0, [r7]
 8001808:	f000 f9f4 	bl	8001bf4 <fabs>
 800180c:	eef0 7a40 	vmov.f32	s15, s0
 8001810:	eeb1 7a09 	vmov.f32	s14, #25	; 0x40c80000  6.250
 8001814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	dc06      	bgt.n	800182c <abs_enc_filter+0x6c>
 800181e:	edd7 7a00 	vldr	s15, [r7]
 8001822:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d102      	bne.n	8001832 <abs_enc_filter+0x72>
		multiplier = 1;
 800182c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001830:	60fb      	str	r3, [r7, #12]
//	else if (fabs(raw_val - (channels + channel)->abs_enc_value) > ENCODER_ERROR_THRESHOLD) {
//		multiplier = STABILIZER_BAD_MULTIPLIER;
//	}

	// Return combination of new and old values
	return multiplier * (channels + channel)->abs_enc_value + (1 - multiplier) * raw_val;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	019b      	lsls	r3, r3, #6
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <abs_enc_filter+0xb0>)
 8001838:	4413      	add	r3, r2
 800183a:	ed93 7a08 	vldr	s14, [r3, #32]
 800183e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800184a:	edd7 7a03 	vldr	s15, [r7, #12]
 800184e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001852:	edd7 7a00 	vldr	s15, [r7]
 8001856:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800185e:	eeb0 0a67 	vmov.f32	s0, s15
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	a0b5ed8d 	.word	0xa0b5ed8d
 800186c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001870:	20000128 	.word	0x20000128
 8001874:	3f4ccccd 	.word	0x3f4ccccd

08001878 <update_abs_enc_0>:

void update_abs_enc_0()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	(channels + 0)->abs_enc_value = abs_enc_filter(0, get_angle_radians(abs_enc_0));
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <update_abs_enc_0+0x2c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa4b 	bl	8000d1c <get_angle_radians>
 8001886:	eef0 7a40 	vmov.f32	s15, s0
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff ff96 	bl	80017c0 <abs_enc_filter>
 8001894:	eef0 7a40 	vmov.f32	s15, s0
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <update_abs_enc_0+0x30>)
 800189a:	edc3 7a08 	vstr	s15, [r3, #32]
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200000fc 	.word	0x200000fc
 80018a8:	20000128 	.word	0x20000128

080018ac <update_abs_enc_1>:

void update_abs_enc_1()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	(channels + 1)->abs_enc_value = abs_enc_filter(1, get_angle_radians(abs_enc_1));
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <update_abs_enc_1+0x2c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fa31 	bl	8000d1c <get_angle_radians>
 80018ba:	eef0 7a40 	vmov.f32	s15, s0
 80018be:	eeb0 0a67 	vmov.f32	s0, s15
 80018c2:	2001      	movs	r0, #1
 80018c4:	f7ff ff7c 	bl	80017c0 <abs_enc_filter>
 80018c8:	eef0 7a40 	vmov.f32	s15, s0
 80018cc:	4b03      	ldr	r3, [pc, #12]	; (80018dc <update_abs_enc_1+0x30>)
 80018ce:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000100 	.word	0x20000100
 80018dc:	20000128 	.word	0x20000128

080018e0 <update_both_abs_enc>:

void update_both_abs_enc() {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	update_abs_enc_0();
 80018e4:	f7ff ffc8 	bl	8001878 <update_abs_enc_0>
	update_abs_enc_1();
 80018e8:	f7ff ffe0 	bl	80018ac <update_abs_enc_1>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <update_limit>:

void update_limit() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	// Nucleo 3 Channel 1 is limit switch bottom/back for scope+triad (LS2)
	// Nucleo 1 Channel 2 is used for joint b calibration

	// Our limit switches are active high, so the channels[x].limit is equal to 0xFF if the switch is active.

	channels[0].limit = (HAL_GPIO_ReadPin(M0_LIMIT_GPIO_Port, M0_LIMIT_Pin) == GPIO_PIN_SET) ? 0xFF : 0x00;
 80018f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018f8:	4834      	ldr	r0, [pc, #208]	; (80019cc <update_limit+0xdc>)
 80018fa:	f001 ff4f 	bl	800379c <HAL_GPIO_ReadPin>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <update_limit+0x18>
 8001904:	22ff      	movs	r2, #255	; 0xff
 8001906:	e000      	b.n	800190a <update_limit+0x1a>
 8001908:	2200      	movs	r2, #0
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <update_limit+0xe0>)
 800190c:	771a      	strb	r2, [r3, #28]
	channels[1].limit = (HAL_GPIO_ReadPin(M1_LIMIT_GPIO_Port, M1_LIMIT_Pin) == GPIO_PIN_SET)
 800190e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001912:	482e      	ldr	r0, [pc, #184]	; (80019cc <update_limit+0xdc>)
 8001914:	f001 ff42 	bl	800379c <HAL_GPIO_ReadPin>
 8001918:	4603      	mov	r3, r0
 800191a:	2b01      	cmp	r3, #1
 800191c:	d106      	bne.n	800192c <update_limit+0x3c>
			&& channels[2].limit_enabled ? 0xFF : 0x00;
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <update_limit+0xe0>)
 8001920:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <update_limit+0x3c>
	channels[1].limit = (HAL_GPIO_ReadPin(M1_LIMIT_GPIO_Port, M1_LIMIT_Pin) == GPIO_PIN_SET)
 8001928:	22ff      	movs	r2, #255	; 0xff
 800192a:	e000      	b.n	800192e <update_limit+0x3e>
 800192c:	2200      	movs	r2, #0
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <update_limit+0xe0>)
 8001930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	channels[2].limit = (HAL_GPIO_ReadPin(M2_LIMIT_GPIO_Port, M2_LIMIT_Pin) == GPIO_PIN_SET)
 8001934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001938:	4824      	ldr	r0, [pc, #144]	; (80019cc <update_limit+0xdc>)
 800193a:	f001 ff2f 	bl	800379c <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	2b01      	cmp	r3, #1
 8001942:	d106      	bne.n	8001952 <update_limit+0x62>
			&& channels[2].limit_enabled ? 0xFF : 0x00;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <update_limit+0xe0>)
 8001946:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <update_limit+0x62>
	channels[2].limit = (HAL_GPIO_ReadPin(M2_LIMIT_GPIO_Port, M2_LIMIT_Pin) == GPIO_PIN_SET)
 800194e:	22ff      	movs	r2, #255	; 0xff
 8001950:	e000      	b.n	8001954 <update_limit+0x64>
 8001952:	2200      	movs	r2, #0
 8001954:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <update_limit+0xe0>)
 8001956:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	channels[3].limit = (HAL_GPIO_ReadPin(M3_LIMIT_GPIO_Port, M3_LIMIT_Pin) == GPIO_PIN_SET) ? 0xFF : 0x00;
 800195a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800195e:	481b      	ldr	r0, [pc, #108]	; (80019cc <update_limit+0xdc>)
 8001960:	f001 ff1c 	bl	800379c <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <update_limit+0x7e>
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	e000      	b.n	8001970 <update_limit+0x80>
 800196e:	2200      	movs	r2, #0
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <update_limit+0xe0>)
 8001972:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	channels[4].limit = (HAL_GPIO_ReadPin(M4_LIMIT_GPIO_Port, M4_LIMIT_Pin) == GPIO_PIN_SET) ? 0xFF : 0x00;
 8001976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800197a:	4814      	ldr	r0, [pc, #80]	; (80019cc <update_limit+0xdc>)
 800197c:	f001 ff0e 	bl	800379c <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <update_limit+0x9a>
 8001986:	22ff      	movs	r2, #255	; 0xff
 8001988:	e000      	b.n	800198c <update_limit+0x9c>
 800198a:	2200      	movs	r2, #0
 800198c:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <update_limit+0xe0>)
 800198e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	channels[5].limit = (HAL_GPIO_ReadPin(M5_LIMIT_GPIO_Port, M5_LIMIT_Pin) == GPIO_PIN_SET) ? 0xFF : 0x00;
 8001992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001996:	480d      	ldr	r0, [pc, #52]	; (80019cc <update_limit+0xdc>)
 8001998:	f001 ff00 	bl	800379c <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <update_limit+0xb6>
 80019a2:	22ff      	movs	r2, #255	; 0xff
 80019a4:	e000      	b.n	80019a8 <update_limit+0xb8>
 80019a6:	2200      	movs	r2, #0
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <update_limit+0xe0>)
 80019aa:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	// If joint b is at the end, calibrate it
	if (MOTOR_1_CALIBRATION_POSITIVE_LIMIT == 0xFF) {
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <update_limit+0xe0>)
 80019b0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80019b4:	2bff      	cmp	r3, #255	; 0xff
 80019b6:	d106      	bne.n	80019c6 <update_limit+0xd6>
		channels[1].quad_enc_value = 0;
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <update_limit+0xe0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	665a      	str	r2, [r3, #100]	; 0x64
		channels[1].calibrated = 0xFF;
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <update_limit+0xe0>)
 80019c0:	22ff      	movs	r2, #255	; 0xff
 80019c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	}
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	48000400 	.word	0x48000400
 80019d0:	20000128 	.word	0x20000128
 80019d4:	00000000 	.word	0x00000000

080019d8 <update_logic>:

void update_logic() {
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 6; i++){
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
 80019e2:	e0ad      	b.n	8001b40 <update_logic+0x168>
		Channel *channel = channels + i;
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	019b      	lsls	r3, r3, #6
 80019e8:	4a5d      	ldr	r2, [pc, #372]	; (8001b60 <update_logic+0x188>)
 80019ea:	4413      	add	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
		float output;

		if (channel->mode == 0xFF){
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2bff      	cmp	r3, #255	; 0xff
 80019f4:	f040 8096 	bne.w	8001b24 <update_logic+0x14c>

			float error = 0;
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]

			error = (float)(channel->closed_setpoint - channel->quad_enc_value);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	edc7 7a03 	vstr	s15, [r7, #12]

			float integratedError = channel->integrated_error + (error * DT);
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd41 	bl	80004a0 <__aeabi_f2d>
 8001a1e:	4604      	mov	r4, r0
 8001a20:	460d      	mov	r5, r1
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7fe fd3c 	bl	80004a0 <__aeabi_f2d>
 8001a28:	a34b      	add	r3, pc, #300	; (adr r3, 8001b58 <update_logic+0x180>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fd8f 	bl	8000550 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fbd3 	bl	80001e4 <__adddf3>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f81d 	bl	8000a84 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	60bb      	str	r3, [r7, #8]
			float derivativeError = (error - channel->last_error) / DT;
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a54:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5c:	ee17 0a90 	vmov	r0, s15
 8001a60:	f7fe fd1e 	bl	80004a0 <__aeabi_f2d>
 8001a64:	a33c      	add	r3, pc, #240	; (adr r3, 8001b58 <update_logic+0x180>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fe9b 	bl	80007a4 <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f805 	bl	8000a84 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	607b      	str	r3, [r7, #4]

			channel->integrated_error = integratedError;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	635a      	str	r2, [r3, #52]	; 0x34
			channel->last_error = error;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38

			output = ((channel->KP * error) + (channel->KI * integratedError) + (channel->KD * derivativeError) + channel->FF);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ab0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	edc7 7a00 	vstr	s15, [r7]
			output = output <  channel->speed_max ? output : channel->speed_max;
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ad0:	ed97 7a00 	vldr	s14, [r7]
 8001ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d501      	bpl.n	8001ae2 <update_logic+0x10a>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	e001      	b.n	8001ae6 <update_logic+0x10e>
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	603b      	str	r3, [r7, #0]
			output = output > -channel->speed_max ? output : -channel->speed_max;
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aee:	eef1 7a67 	vneg.f32	s15, s15
 8001af2:	ed97 7a00 	vldr	s14, [r7]
 8001af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	dd02      	ble.n	8001b06 <update_logic+0x12e>
 8001b00:	edd7 7a00 	vldr	s15, [r7]
 8001b04:	e004      	b.n	8001b10 <update_logic+0x138>
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b0c:	eef1 7a67 	vneg.f32	s15, s15
 8001b10:	edc7 7a00 	vstr	s15, [r7]
			channel->speed = -output;
 8001b14:	edd7 7a00 	vldr	s15, [r7]
 8001b18:	eef1 7a67 	vneg.f32	s15, s15
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
 8001b22:	e00a      	b.n	8001b3a <update_logic+0x162>
		}
		else {
			channel->speed = channel->open_setpoint * channel->speed_max; //scales it
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	for (uint8_t i = 0; i < 6; i++){
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	75fb      	strb	r3, [r7, #23]
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b05      	cmp	r3, #5
 8001b44:	f67f af4e 	bls.w	80019e4 <update_logic+0xc>
		}

	}
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bdb0      	pop	{r4, r5, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	f3af 8000 	nop.w
 8001b58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b5c:	3f50624d 	.word	0x3f50624d
 8001b60:	20000128 	.word	0x20000128

08001b64 <set_dir>:

void set_dir(float speed, GPIO_TypeDef *fwd_port, uint16_t fwd_pin, GPIO_TypeDef *bwd_port,
		uint16_t bwd_pin) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b6e:	60b8      	str	r0, [r7, #8]
 8001b70:	603a      	str	r2, [r7, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	460b      	mov	r3, r1
 8001b76:	80fb      	strh	r3, [r7, #6]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(fwd_port, fwd_pin, (speed > 0) | (speed == 0));
 8001b7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	bfcc      	ite	gt
 8001b8a:	2301      	movgt	r3, #1
 8001b8c:	2300      	movle	r3, #0
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9c:	bf0c      	ite	eq
 8001b9e:	2301      	moveq	r3, #1
 8001ba0:	2300      	movne	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4619      	mov	r1, r3
 8001bae:	68b8      	ldr	r0, [r7, #8]
 8001bb0:	f001 fe0c 	bl	80037cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(bwd_port, bwd_pin, (speed < 0) | (speed == 0));
 8001bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	bf4c      	ite	mi
 8001bc2:	2301      	movmi	r3, #1
 8001bc4:	2300      	movpl	r3, #0
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bcc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd4:	bf0c      	ite	eq
 8001bd6:	2301      	moveq	r3, #1
 8001bd8:	2300      	movne	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	88bb      	ldrh	r3, [r7, #4]
 8001be4:	4619      	mov	r1, r3
 8001be6:	6838      	ldr	r0, [r7, #0]
 8001be8:	f001 fdf0 	bl	80037cc <HAL_GPIO_WritePin>
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <fabs>:

float fabs(float i) {
 8001bf4:	b5b0      	push	{r4, r5, r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	ed87 0a01 	vstr	s0, [r7, #4]
	return i < 0 ? i * -1.0 : i;
 8001bfe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d50d      	bpl.n	8001c28 <fabs+0x34>
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fc47 	bl	80004a0 <__aeabi_f2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4614      	mov	r4, r2
 8001c18:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f7fe ff30 	bl	8000a84 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	e000      	b.n	8001c2a <fabs+0x36>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	ee07 3a90 	vmov	s15, r3
}
 8001c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bdb0      	pop	{r4, r5, r7, pc}

08001c38 <update_PWM>:

void update_PWM() {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0

	float speed_0 = channels[0].speed;
 8001c3e:	4b86      	ldr	r3, [pc, #536]	; (8001e58 <update_PWM+0x220>)
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	603b      	str	r3, [r7, #0]
	float speed_1 = channels[1].speed;
 8001c44:	4b84      	ldr	r3, [pc, #528]	; (8001e58 <update_PWM+0x220>)
 8001c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c48:	607b      	str	r3, [r7, #4]
	float speed_2 = channels[2].speed;
 8001c4a:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <update_PWM+0x220>)
 8001c4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8001c50:	60fb      	str	r3, [r7, #12]
	float speed_3 = channels[3].speed;
 8001c52:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <update_PWM+0x220>)
 8001c54:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001c58:	60bb      	str	r3, [r7, #8]
	float speed_4 = channels[4].speed;
 8001c5a:	4b7f      	ldr	r3, [pc, #508]	; (8001e58 <update_PWM+0x220>)
 8001c5c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001c60:	613b      	str	r3, [r7, #16]
	float speed_5 = channels[5].speed;
 8001c62:	4b7d      	ldr	r3, [pc, #500]	; (8001e58 <update_PWM+0x220>)
 8001c64:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001c68:	617b      	str	r3, [r7, #20]
				MOTOR_1_CALIBRATION_POSITIVE_LIMIT == 0xFF && speed_1 > 0 ? 0 : speed_1;
	}
	else if (I2C_ADDRESS == 0x20)
	{
		// if reached forward limit for channel 2 motor, don't go forwards
		speed_2 = MOTOR_2_BACKWARD_LIMIT == 0xFF && speed_2 > 0 && channels[2].limit_enabled == 0xFF ? 0 : speed_2;
 8001c6a:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <update_PWM+0x220>)
 8001c6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c70:	2bff      	cmp	r3, #255	; 0xff
 8001c72:	d113      	bne.n	8001c9c <update_PWM+0x64>
 8001c74:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	bfcc      	ite	gt
 8001c82:	2301      	movgt	r3, #1
 8001c84:	2300      	movle	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f083 0301 	eor.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d104      	bne.n	8001c9c <update_PWM+0x64>
 8001c92:	4b71      	ldr	r3, [pc, #452]	; (8001e58 <update_PWM+0x220>)
 8001c94:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001c98:	2bff      	cmp	r3, #255	; 0xff
 8001c9a:	d001      	beq.n	8001ca0 <update_PWM+0x68>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	e001      	b.n	8001ca4 <update_PWM+0x6c>
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
		// if reached backward limit for channel 2, don't go backwards
		speed_2 = MOTOR_2_FORWARD_LIMIT == 0xFF && speed_2 < 0 && channels[2].limit_enabled == 0xFF ? 0 : speed_2;
 8001ca6:	4b6c      	ldr	r3, [pc, #432]	; (8001e58 <update_PWM+0x220>)
 8001ca8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8001cac:	2bff      	cmp	r3, #255	; 0xff
 8001cae:	d113      	bne.n	8001cd8 <update_PWM+0xa0>
 8001cb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbc:	bf4c      	ite	mi
 8001cbe:	2301      	movmi	r3, #1
 8001cc0:	2300      	movpl	r3, #0
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d104      	bne.n	8001cd8 <update_PWM+0xa0>
 8001cce:	4b62      	ldr	r3, [pc, #392]	; (8001e58 <update_PWM+0x220>)
 8001cd0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8001cd4:	2bff      	cmp	r3, #255	; 0xff
 8001cd6:	d001      	beq.n	8001cdc <update_PWM+0xa4>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	e001      	b.n	8001ce0 <update_PWM+0xa8>
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
		speed_2 = MOTOR_2_FORWARD_LIMIT == 0xFF && speed_2 > 0 && channels[2].limit_enabled == 0xFF ? 0 : speed_2;
		// if reached backward limit for channel 2, don't go backwards
		speed_2 = MOTOR_2_BACKWARD_LIMIT == 0xFF && speed_2 < 0 && channels[2].limit_enabled == 0xFF ? 0 : speed_2;
	}

	TIM1->CCR1 = (uint32_t)(fabs(speed_0) * TIM1->ARR);
 8001ce2:	ed97 0a00 	vldr	s0, [r7]
 8001ce6:	f7ff ff85 	bl	8001bf4 <fabs>
 8001cea:	eeb0 7a40 	vmov.f32	s14, s0
 8001cee:	4b5b      	ldr	r3, [pc, #364]	; (8001e5c <update_PWM+0x224>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	ee07 3a90 	vmov	s15, r3
 8001cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfe:	4b57      	ldr	r3, [pc, #348]	; (8001e5c <update_PWM+0x224>)
 8001d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d04:	ee17 2a90 	vmov	r2, s15
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t)(fabs(speed_1) * TIM1->ARR);
 8001d0a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d0e:	f7ff ff71 	bl	8001bf4 <fabs>
 8001d12:	eeb0 7a40 	vmov.f32	s14, s0
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <update_PWM+0x224>)
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	ee07 3a90 	vmov	s15, r3
 8001d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d26:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <update_PWM+0x224>)
 8001d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d2c:	ee17 2a90 	vmov	r2, s15
 8001d30:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t)(fabs(speed_2) * TIM1->ARR);
 8001d32:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d36:	f7ff ff5d 	bl	8001bf4 <fabs>
 8001d3a:	eeb0 7a40 	vmov.f32	s14, s0
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <update_PWM+0x224>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	ee07 3a90 	vmov	s15, r3
 8001d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <update_PWM+0x224>)
 8001d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d54:	ee17 2a90 	vmov	r2, s15
 8001d58:	63da      	str	r2, [r3, #60]	; 0x3c

	set_dir(speed_0, M0_DIR_GPIO_Port, M0_DIR_Pin, M0_NDIR_GPIO_Port, M0_NDIR_Pin);
 8001d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d5e:	4a40      	ldr	r2, [pc, #256]	; (8001e60 <update_PWM+0x228>)
 8001d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d68:	ed97 0a00 	vldr	s0, [r7]
 8001d6c:	f7ff fefa 	bl	8001b64 <set_dir>
	set_dir(speed_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_NDIR_GPIO_Port, M1_NDIR_Pin);
 8001d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d74:	4a3a      	ldr	r2, [pc, #232]	; (8001e60 <update_PWM+0x228>)
 8001d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d82:	f7ff feef 	bl	8001b64 <set_dir>
	set_dir(speed_2, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_NDIR_GPIO_Port, M2_NDIR_Pin);
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	4a35      	ldr	r2, [pc, #212]	; (8001e60 <update_PWM+0x228>)
 8001d8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d98:	f7ff fee4 	bl	8001b64 <set_dir>

	TIM8->CCR1 = (uint32_t)(fabs(speed_3) * TIM8->ARR);
 8001d9c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001da0:	f7ff ff28 	bl	8001bf4 <fabs>
 8001da4:	eeb0 7a40 	vmov.f32	s14, s0
 8001da8:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <update_PWM+0x22c>)
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db8:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <update_PWM+0x22c>)
 8001dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dbe:	ee17 2a90 	vmov	r2, s15
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM8->CCR2 = (uint32_t)(fabs(speed_4) * TIM8->ARR);
 8001dc4:	ed97 0a04 	vldr	s0, [r7, #16]
 8001dc8:	f7ff ff14 	bl	8001bf4 <fabs>
 8001dcc:	eeb0 7a40 	vmov.f32	s14, s0
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <update_PWM+0x22c>)
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <update_PWM+0x22c>)
 8001de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001de6:	ee17 2a90 	vmov	r2, s15
 8001dea:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR3 = (uint32_t)(fabs(speed_5) * TIM8->ARR);
 8001dec:	ed97 0a05 	vldr	s0, [r7, #20]
 8001df0:	f7ff ff00 	bl	8001bf4 <fabs>
 8001df4:	eeb0 7a40 	vmov.f32	s14, s0
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <update_PWM+0x22c>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <update_PWM+0x22c>)
 8001e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e0e:	ee17 2a90 	vmov	r2, s15
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c

	set_dir(speed_3, M3_DIR_GPIO_Port, M3_DIR_Pin, M3_NDIR_GPIO_Port, M3_NDIR_Pin);
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	4812      	ldr	r0, [pc, #72]	; (8001e68 <update_PWM+0x230>)
 8001e1e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e22:	f7ff fe9f 	bl	8001b64 <set_dir>
	set_dir(speed_4, M4_DIR_GPIO_Port, M4_DIR_Pin, M4_NDIR_GPIO_Port, M4_NDIR_Pin);
 8001e26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e2a:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <update_PWM+0x228>)
 8001e2c:	2140      	movs	r1, #64	; 0x40
 8001e2e:	480e      	ldr	r0, [pc, #56]	; (8001e68 <update_PWM+0x230>)
 8001e30:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e34:	f7ff fe96 	bl	8001b64 <set_dir>
	set_dir(speed_5, M5_DIR_GPIO_Port, M5_DIR_Pin, M5_NDIR_GPIO_Port, M5_NDIR_Pin);
 8001e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3c:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <update_PWM+0x228>)
 8001e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e46:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e4a:	f7ff fe8b 	bl	8001b64 <set_dir>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000128 	.word	0x20000128
 8001e5c:	40012c00 	.word	0x40012c00
 8001e60:	48000800 	.word	0x48000800
 8001e64:	40013400 	.word	0x40013400
 8001e68:	48000400 	.word	0x48000400

08001e6c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d109      	bne.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0x24>
		update_quad_enc();
 8001e7c:	f7ff fc64 	bl	8001748 <update_quad_enc>
		update_limit();
 8001e80:	f7ff fd36 	bl	80018f0 <update_limit>
		update_logic();
 8001e84:	f7ff fda8 	bl	80019d8 <update_logic>
		update_PWM();
 8001e88:	f7ff fed6 	bl	8001c38 <update_PWM>
		CH_tick();
 8001e8c:	f7ff fbba 	bl	8001604 <CH_tick>
	}
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000424 	.word	0x20000424

08001e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea2:	f000 ff5f 	bl	8002d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ea6:	f000 f8bd 	bl	8002024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eaa:	f000 fc01 	bl	80026b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001eae:	f000 f917 	bl	80020e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001eb2:	f000 f955 	bl	8002160 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001eb6:	f000 f993 	bl	80021e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001eba:	f000 fa55 	bl	8002368 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ebe:	f000 faa7 	bl	8002410 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001ec2:	f000 fb31 	bl	8002528 <MX_TIM8_Init>
  MX_TIM6_Init();
 8001ec6:	f000 faf9 	bl	80024bc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // LED indicator about reset by watchdog
  HAL_Delay (500);
 8001eca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ece:	f000 ffaf 	bl	8002e30 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2120      	movs	r1, #32
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f001 fc77 	bl	80037cc <HAL_GPIO_WritePin>

  for (int i = 0; i < CHANNELS; ++i)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	e013      	b.n	8001f0c <main+0x70>
  {
	  channels[i] = channel_default;
 8001ee4:	4a40      	ldr	r2, [pc, #256]	; (8001fe8 <main+0x14c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	019b      	lsls	r3, r3, #6
 8001eea:	4413      	add	r3, r2
 8001eec:	4a3f      	ldr	r2, [pc, #252]	; (8001fec <main+0x150>)
 8001eee:	461c      	mov	r4, r3
 8001ef0:	4615      	mov	r5, r2
 8001ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  for (int i = 0; i < CHANNELS; ++i)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	dde8      	ble.n	8001ee4 <main+0x48>
//	  channels[i].quad_enc_raw_now = 0;
//	  channels[i].quad_enc_raw_last = 0;
//	  channels[i].abs_enc_value = 0;
  }

  i2c_bus = i2c_bus_default;
 8001f12:	4a37      	ldr	r2, [pc, #220]	; (8001ff0 <main+0x154>)
 8001f14:	4b37      	ldr	r3, [pc, #220]	; (8001ff4 <main+0x158>)
 8001f16:	4610      	mov	r0, r2
 8001f18:	f103 0420 	add.w	r4, r3, #32
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f8d1 c000 	ldr.w	ip, [r1]
 8001f24:	684e      	ldr	r6, [r1, #4]
 8001f26:	688d      	ldr	r5, [r1, #8]
 8001f28:	68c9      	ldr	r1, [r1, #12]
 8001f2a:	f8c2 c000 	str.w	ip, [r2]
 8001f2e:	6056      	str	r6, [r2, #4]
 8001f30:	6095      	str	r5, [r2, #8]
 8001f32:	60d1      	str	r1, [r2, #12]
 8001f34:	3310      	adds	r3, #16
 8001f36:	3010      	adds	r0, #16
 8001f38:	42a3      	cmp	r3, r4
 8001f3a:	d1ef      	bne.n	8001f1c <main+0x80>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6013      	str	r3, [r2, #0]
  i2c_bus_handle = &hi2c1;
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <main+0x15c>)
 8001f44:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <main+0x160>)
 8001f46:	601a      	str	r2, [r3, #0]

  abs_encoder_handle = &hi2c2;
 8001f48:	4b2d      	ldr	r3, [pc, #180]	; (8002000 <main+0x164>)
 8001f4a:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <main+0x168>)
 8001f4c:	601a      	str	r2, [r3, #0]
  abs_enc_0 = abs_encoder_init(abs_encoder_handle, FALSE, FALSE);
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <main+0x164>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fefe 	bl	8000d58 <abs_encoder_init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <main+0x16c>)
 8001f60:	6013      	str	r3, [r2, #0]
  abs_enc_1 = abs_encoder_init(abs_encoder_handle, TRUE, TRUE);
 8001f62:	4b27      	ldr	r3, [pc, #156]	; (8002000 <main+0x164>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2201      	movs	r2, #1
 8001f68:	2101      	movs	r1, #1
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fef4 	bl	8000d58 <abs_encoder_init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4a26      	ldr	r2, [pc, #152]	; (800200c <main+0x170>)
 8001f74:	6013      	str	r3, [r2, #0]
  disable_DMA(abs_enc_0->i2cBus);
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <main+0x16c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fded 	bl	8000b5c <disable_DMA>
  disable_DMA(abs_enc_1->i2cBus);
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <main+0x170>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fde7 	bl	8000b5c <disable_DMA>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	481f      	ldr	r0, [pc, #124]	; (8002010 <main+0x174>)
 8001f92:	f005 fcaf 	bl	80078f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001f96:	2104      	movs	r1, #4
 8001f98:	481d      	ldr	r0, [pc, #116]	; (8002010 <main+0x174>)
 8001f9a:	f005 fcab 	bl	80078f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001f9e:	2108      	movs	r1, #8
 8001fa0:	481b      	ldr	r0, [pc, #108]	; (8002010 <main+0x174>)
 8001fa2:	f005 fca7 	bl	80078f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	481a      	ldr	r0, [pc, #104]	; (8002014 <main+0x178>)
 8001faa:	f005 fca3 	bl	80078f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001fae:	2104      	movs	r1, #4
 8001fb0:	4818      	ldr	r0, [pc, #96]	; (8002014 <main+0x178>)
 8001fb2:	f005 fc9f 	bl	80078f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001fb6:	2108      	movs	r1, #8
 8001fb8:	4816      	ldr	r0, [pc, #88]	; (8002014 <main+0x178>)
 8001fba:	f005 fc9b 	bl	80078f4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001fbe:	213c      	movs	r1, #60	; 0x3c
 8001fc0:	4815      	ldr	r0, [pc, #84]	; (8002018 <main+0x17c>)
 8001fc2:	f005 fe49 	bl	8007c58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001fc6:	213c      	movs	r1, #60	; 0x3c
 8001fc8:	4814      	ldr	r0, [pc, #80]	; (800201c <main+0x180>)
 8001fca:	f005 fe45 	bl	8007c58 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001fce:	4814      	ldr	r0, [pc, #80]	; (8002020 <main+0x184>)
 8001fd0:	f005 fbbe 	bl	8007750 <HAL_TIM_Base_Start_IT>
  HAL_I2C_EnableListen_IT(&hi2c1);
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <main+0x160>)
 8001fd6:	f002 f9e1 	bl	800439c <HAL_I2C_EnableListen_IT>
  }
  else if (I2C_ADDRESS == 0x20)
  {
	  while (1)
	  {
		  update_both_abs_enc();
 8001fda:	f7ff fc81 	bl	80018e0 <update_both_abs_enc>
		  HAL_Delay(90);
 8001fde:	205a      	movs	r0, #90	; 0x5a
 8001fe0:	f000 ff26 	bl	8002e30 <HAL_Delay>
		  update_both_abs_enc();
 8001fe4:	e7f9      	b.n	8001fda <main+0x13e>
 8001fe6:	bf00      	nop
 8001fe8:	20000128 	.word	0x20000128
 8001fec:	20000028 	.word	0x20000028
 8001ff0:	20000104 	.word	0x20000104
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	200000f4 	.word	0x200000f4
 8001ffc:	200002a8 	.word	0x200002a8
 8002000:	200000f8 	.word	0x200000f8
 8002004:	200002f4 	.word	0x200002f4
 8002008:	200000fc 	.word	0x200000fc
 800200c:	20000100 	.word	0x20000100
 8002010:	20000340 	.word	0x20000340
 8002014:	20000470 	.word	0x20000470
 8002018:	2000038c 	.word	0x2000038c
 800201c:	200003d8 	.word	0x200003d8
 8002020:	20000424 	.word	0x20000424

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0a6      	sub	sp, #152	; 0x98
 8002028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800202a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800202e:	2228      	movs	r2, #40	; 0x28
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f006 ff8a 	bl	8008f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002038:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2258      	movs	r2, #88	; 0x58
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f006 ff7c 	bl	8008f4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002054:	2302      	movs	r3, #2
 8002056:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002058:	2301      	movs	r3, #1
 800205a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800205c:	2310      	movs	r3, #16
 800205e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002068:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800206c:	4618      	mov	r0, r3
 800206e:	f003 febf 	bl	8005df0 <HAL_RCC_OscConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002078:	f000 fbac 	bl	80027d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800207c:	230f      	movs	r3, #15
 800207e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002080:	2300      	movs	r3, #0
 8002082:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002084:	2300      	movs	r3, #0
 8002086:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002088:	2300      	movs	r3, #0
 800208a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002090:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002094:	2100      	movs	r1, #0
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fefe 	bl	8006e98 <HAL_RCC_ClockConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80020a2:	f000 fb97 	bl	80027d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <SystemClock_Config+0xb8>)
 80020a8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80020be:	2300      	movs	r3, #0
 80020c0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	4618      	mov	r0, r3
 80020c6:	f005 f8cd 	bl	8007264 <HAL_RCCEx_PeriphCLKConfig>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80020d0:	f000 fb80 	bl	80027d4 <Error_Handler>
  }
}
 80020d4:	bf00      	nop
 80020d6:	3798      	adds	r7, #152	; 0x98
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	00303060 	.word	0x00303060

080020e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <MX_I2C1_Init+0x78>)
 80020e6:	4a1d      	ldr	r2, [pc, #116]	; (800215c <MX_I2C1_Init+0x7c>)
 80020e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <MX_I2C1_Init+0x78>)
 80020ec:	f240 220b 	movw	r2, #523	; 0x20b
 80020f0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 254;
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <MX_I2C1_Init+0x78>)
 80020f4:	22fe      	movs	r2, #254	; 0xfe
 80020f6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020f8:	4b17      	ldr	r3, [pc, #92]	; (8002158 <MX_I2C1_Init+0x78>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <MX_I2C1_Init+0x78>)
 8002100:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002104:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 64;
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <MX_I2C1_Init+0x78>)
 8002108:	2240      	movs	r2, #64	; 0x40
 800210a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_MASK04;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <MX_I2C1_Init+0x78>)
 800210e:	2204      	movs	r2, #4
 8002110:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_I2C1_Init+0x78>)
 8002114:	2200      	movs	r2, #0
 8002116:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_I2C1_Init+0x78>)
 800211a:	2200      	movs	r2, #0
 800211c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800211e:	480e      	ldr	r0, [pc, #56]	; (8002158 <MX_I2C1_Init+0x78>)
 8002120:	f001 fb6c 	bl	80037fc <HAL_I2C_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800212a:	f000 fb53 	bl	80027d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800212e:	2100      	movs	r1, #0
 8002130:	4809      	ldr	r0, [pc, #36]	; (8002158 <MX_I2C1_Init+0x78>)
 8002132:	f003 fdc5 	bl	8005cc0 <HAL_I2CEx_ConfigAnalogFilter>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 800213c:	f000 fb4a 	bl	80027d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002140:	2100      	movs	r1, #0
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_I2C1_Init+0x78>)
 8002144:	f003 fe07 	bl	8005d56 <HAL_I2CEx_ConfigDigitalFilter>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 800214e:	f000 fb41 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200002a8 	.word	0x200002a8
 800215c:	40005400 	.word	0x40005400

08002160 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002166:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <MX_I2C2_Init+0x78>)
 8002168:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 800216a:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <MX_I2C2_Init+0x74>)
 800216c:	4a1b      	ldr	r2, [pc, #108]	; (80021dc <MX_I2C2_Init+0x7c>)
 800216e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002178:	2201      	movs	r2, #1
 800217a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800217c:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <MX_I2C2_Init+0x74>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002182:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <MX_I2C2_Init+0x74>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002190:	2200      	movs	r2, #0
 8002192:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <MX_I2C2_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800219a:	480e      	ldr	r0, [pc, #56]	; (80021d4 <MX_I2C2_Init+0x74>)
 800219c:	f001 fb2e 	bl	80037fc <HAL_I2C_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80021a6:	f000 fb15 	bl	80027d4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021aa:	2100      	movs	r1, #0
 80021ac:	4809      	ldr	r0, [pc, #36]	; (80021d4 <MX_I2C2_Init+0x74>)
 80021ae:	f003 fd87 	bl	8005cc0 <HAL_I2CEx_ConfigAnalogFilter>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80021b8:	f000 fb0c 	bl	80027d4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80021bc:	2100      	movs	r1, #0
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_I2C2_Init+0x74>)
 80021c0:	f003 fdc9 	bl	8005d56 <HAL_I2CEx_ConfigDigitalFilter>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80021ca:	f000 fb03 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200002f4 	.word	0x200002f4
 80021d8:	40005800 	.word	0x40005800
 80021dc:	2000090e 	.word	0x2000090e

080021e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b09a      	sub	sp, #104	; 0x68
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
 8002210:	615a      	str	r2, [r3, #20]
 8002212:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002214:	1d3b      	adds	r3, r7, #4
 8002216:	222c      	movs	r2, #44	; 0x2c
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f006 fe96 	bl	8008f4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002220:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <MX_TIM1_Init+0x180>)
 8002222:	4a50      	ldr	r2, [pc, #320]	; (8002364 <MX_TIM1_Init+0x184>)
 8002224:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3;
 8002226:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <MX_TIM1_Init+0x180>)
 8002228:	2203      	movs	r2, #3
 800222a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b4c      	ldr	r3, [pc, #304]	; (8002360 <MX_TIM1_Init+0x180>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002232:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <MX_TIM1_Init+0x180>)
 8002234:	2264      	movs	r2, #100	; 0x64
 8002236:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002238:	4b49      	ldr	r3, [pc, #292]	; (8002360 <MX_TIM1_Init+0x180>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800223e:	4b48      	ldr	r3, [pc, #288]	; (8002360 <MX_TIM1_Init+0x180>)
 8002240:	2200      	movs	r2, #0
 8002242:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002244:	4b46      	ldr	r3, [pc, #280]	; (8002360 <MX_TIM1_Init+0x180>)
 8002246:	2200      	movs	r2, #0
 8002248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800224a:	4845      	ldr	r0, [pc, #276]	; (8002360 <MX_TIM1_Init+0x180>)
 800224c:	f005 fa28 	bl	80076a0 <HAL_TIM_Base_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002256:	f000 fabd 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800225a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002260:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002264:	4619      	mov	r1, r3
 8002266:	483e      	ldr	r0, [pc, #248]	; (8002360 <MX_TIM1_Init+0x180>)
 8002268:	f005 ffb8 	bl	80081dc <HAL_TIM_ConfigClockSource>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002272:	f000 faaf 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002276:	483a      	ldr	r0, [pc, #232]	; (8002360 <MX_TIM1_Init+0x180>)
 8002278:	f005 fada 	bl	8007830 <HAL_TIM_PWM_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002282:	f000 faa7 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002292:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002296:	4619      	mov	r1, r3
 8002298:	4831      	ldr	r0, [pc, #196]	; (8002360 <MX_TIM1_Init+0x180>)
 800229a:	f006 fcf5 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80022a4:	f000 fa96 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a8:	2360      	movs	r3, #96	; 0x60
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022c0:	2300      	movs	r3, #0
 80022c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	4824      	ldr	r0, [pc, #144]	; (8002360 <MX_TIM1_Init+0x180>)
 80022ce:	f005 fe71 	bl	8007fb4 <HAL_TIM_PWM_ConfigChannel>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80022d8:	f000 fa7c 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022e0:	2204      	movs	r2, #4
 80022e2:	4619      	mov	r1, r3
 80022e4:	481e      	ldr	r0, [pc, #120]	; (8002360 <MX_TIM1_Init+0x180>)
 80022e6:	f005 fe65 	bl	8007fb4 <HAL_TIM_PWM_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80022f0:	f000 fa70 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022f8:	2208      	movs	r2, #8
 80022fa:	4619      	mov	r1, r3
 80022fc:	4818      	ldr	r0, [pc, #96]	; (8002360 <MX_TIM1_Init+0x180>)
 80022fe:	f005 fe59 	bl	8007fb4 <HAL_TIM_PWM_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002308:	f000 fa64 	bl	80027d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002324:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800232e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <MX_TIM1_Init+0x180>)
 8002342:	f006 fd2d 	bl	8008da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 800234c:	f000 fa42 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <MX_TIM1_Init+0x180>)
 8002352:	f000 fbf3 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 8002356:	bf00      	nop
 8002358:	3768      	adds	r7, #104	; 0x68
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000340 	.word	0x20000340
 8002364:	40012c00 	.word	0x40012c00

08002368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f006 fde8 	bl	8008f4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002386:	4b21      	ldr	r3, [pc, #132]	; (800240c <MX_TIM2_Init+0xa4>)
 8002388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800238c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <MX_TIM2_Init+0xa4>)
 8002390:	2200      	movs	r2, #0
 8002392:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_TIM2_Init+0xa4>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <MX_TIM2_Init+0xa4>)
 800239c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_TIM2_Init+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <MX_TIM2_Init+0xa4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023b6:	2301      	movs	r3, #1
 80023b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 80023be:	2308      	movs	r3, #8
 80023c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023c6:	2301      	movs	r3, #1
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023ca:	2300      	movs	r3, #0
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 80023ce:	2308      	movs	r3, #8
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80023d2:	f107 030c 	add.w	r3, r7, #12
 80023d6:	4619      	mov	r1, r3
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <MX_TIM2_Init+0xa4>)
 80023da:	f005 fb97 	bl	8007b0c <HAL_TIM_Encoder_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80023e4:	f000 f9f6 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023f0:	463b      	mov	r3, r7
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_TIM2_Init+0xa4>)
 80023f6:	f006 fc47 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002400:	f000 f9e8 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002404:	bf00      	nop
 8002406:	3730      	adds	r7, #48	; 0x30
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2000038c 	.word	0x2000038c

08002410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f006 fd94 	bl	8008f4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002424:	463b      	mov	r3, r7
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <MX_TIM3_Init+0xa4>)
 8002430:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <MX_TIM3_Init+0xa8>)
 8002432:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <MX_TIM3_Init+0xa4>)
 8002436:	2200      	movs	r2, #0
 8002438:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <MX_TIM3_Init+0xa4>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <MX_TIM3_Init+0xa4>)
 8002442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002446:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_TIM3_Init+0xa4>)
 800244a:	2200      	movs	r2, #0
 800244c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <MX_TIM3_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002454:	2301      	movs	r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002458:	2300      	movs	r3, #0
 800245a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800245c:	2301      	movs	r3, #1
 800245e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 8002464:	2308      	movs	r3, #8
 8002466:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800246c:	2301      	movs	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002470:	2300      	movs	r3, #0
 8002472:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 8002474:	2308      	movs	r3, #8
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	4619      	mov	r1, r3
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <MX_TIM3_Init+0xa4>)
 8002480:	f005 fb44 	bl	8007b0c <HAL_TIM_Encoder_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800248a:	f000 f9a3 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002496:	463b      	mov	r3, r7
 8002498:	4619      	mov	r1, r3
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <MX_TIM3_Init+0xa4>)
 800249c:	f006 fbf4 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80024a6:	f000 f995 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	3730      	adds	r7, #48	; 0x30
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200003d8 	.word	0x200003d8
 80024b8:	40000400 	.word	0x40000400

080024bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c2:	1d3b      	adds	r3, r7, #4
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_TIM6_Init+0x64>)
 80024ce:	4a15      	ldr	r2, [pc, #84]	; (8002524 <MX_TIM6_Init+0x68>)
 80024d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <MX_TIM6_Init+0x64>)
 80024d4:	2207      	movs	r2, #7
 80024d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_TIM6_Init+0x64>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = CONTROL_LOOP_PERIOD;
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <MX_TIM6_Init+0x64>)
 80024e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_TIM6_Init+0x64>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <MX_TIM6_Init+0x64>)
 80024ee:	f005 f8d7 	bl	80076a0 <HAL_TIM_Base_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80024f8:	f000 f96c 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_TIM6_Init+0x64>)
 800250a:	f006 fbbd 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002514:	f000 f95e 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000424 	.word	0x20000424
 8002524:	40001000 	.word	0x40001000

08002528 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b09a      	sub	sp, #104	; 0x68
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002548:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
 8002558:	615a      	str	r2, [r3, #20]
 800255a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	222c      	movs	r2, #44	; 0x2c
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f006 fcf2 	bl	8008f4c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002568:	4b4f      	ldr	r3, [pc, #316]	; (80026a8 <MX_TIM8_Init+0x180>)
 800256a:	4a50      	ldr	r2, [pc, #320]	; (80026ac <MX_TIM8_Init+0x184>)
 800256c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 800256e:	4b4e      	ldr	r3, [pc, #312]	; (80026a8 <MX_TIM8_Init+0x180>)
 8002570:	2207      	movs	r2, #7
 8002572:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <MX_TIM8_Init+0x180>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000;
 800257a:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <MX_TIM8_Init+0x180>)
 800257c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002580:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002582:	4b49      	ldr	r3, [pc, #292]	; (80026a8 <MX_TIM8_Init+0x180>)
 8002584:	2200      	movs	r2, #0
 8002586:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002588:	4b47      	ldr	r3, [pc, #284]	; (80026a8 <MX_TIM8_Init+0x180>)
 800258a:	2200      	movs	r2, #0
 800258c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258e:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <MX_TIM8_Init+0x180>)
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002594:	4844      	ldr	r0, [pc, #272]	; (80026a8 <MX_TIM8_Init+0x180>)
 8002596:	f005 f883 	bl	80076a0 <HAL_TIM_Base_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80025a0:	f000 f918 	bl	80027d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80025aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025ae:	4619      	mov	r1, r3
 80025b0:	483d      	ldr	r0, [pc, #244]	; (80026a8 <MX_TIM8_Init+0x180>)
 80025b2:	f005 fe13 	bl	80081dc <HAL_TIM_ConfigClockSource>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80025bc:	f000 f90a 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80025c0:	4839      	ldr	r0, [pc, #228]	; (80026a8 <MX_TIM8_Init+0x180>)
 80025c2:	f005 f935 	bl	8007830 <HAL_TIM_PWM_Init>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80025cc:	f000 f902 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025d4:	2300      	movs	r3, #0
 80025d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80025dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025e0:	4619      	mov	r1, r3
 80025e2:	4831      	ldr	r0, [pc, #196]	; (80026a8 <MX_TIM8_Init+0x180>)
 80025e4:	f006 fb50 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80025ee:	f000 f8f1 	bl	80027d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f2:	2360      	movs	r3, #96	; 0x60
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025fa:	2300      	movs	r3, #0
 80025fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025fe:	2300      	movs	r3, #0
 8002600:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800260e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002612:	2200      	movs	r2, #0
 8002614:	4619      	mov	r1, r3
 8002616:	4824      	ldr	r0, [pc, #144]	; (80026a8 <MX_TIM8_Init+0x180>)
 8002618:	f005 fccc 	bl	8007fb4 <HAL_TIM_PWM_ConfigChannel>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8002622:	f000 f8d7 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800262a:	2204      	movs	r2, #4
 800262c:	4619      	mov	r1, r3
 800262e:	481e      	ldr	r0, [pc, #120]	; (80026a8 <MX_TIM8_Init+0x180>)
 8002630:	f005 fcc0 	bl	8007fb4 <HAL_TIM_PWM_ConfigChannel>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800263a:	f000 f8cb 	bl	80027d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800263e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002642:	2208      	movs	r2, #8
 8002644:	4619      	mov	r1, r3
 8002646:	4818      	ldr	r0, [pc, #96]	; (80026a8 <MX_TIM8_Init+0x180>)
 8002648:	f005 fcb4 	bl	8007fb4 <HAL_TIM_PWM_ConfigChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8002652:	f000 f8bf 	bl	80027d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800266a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002678:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	4619      	mov	r1, r3
 800268a:	4807      	ldr	r0, [pc, #28]	; (80026a8 <MX_TIM8_Init+0x180>)
 800268c:	f006 fb88 	bl	8008da0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002696:	f000 f89d 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800269a:	4803      	ldr	r0, [pc, #12]	; (80026a8 <MX_TIM8_Init+0x180>)
 800269c:	f000 fa4e 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 80026a0:	bf00      	nop
 80026a2:	3768      	adds	r7, #104	; 0x68
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000470 	.word	0x20000470
 80026ac:	40013400 	.word	0x40013400

080026b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b6:	f107 0314 	add.w	r3, r7, #20
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
 80026c2:	60da      	str	r2, [r3, #12]
 80026c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c6:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <MX_GPIO_Init+0x118>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <MX_GPIO_Init+0x118>)
 80026cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026d0:	6153      	str	r3, [r2, #20]
 80026d2:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <MX_GPIO_Init+0x118>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <MX_GPIO_Init+0x118>)
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <MX_GPIO_Init+0x118>)
 80026e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026e8:	6153      	str	r3, [r2, #20]
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <MX_GPIO_Init+0x118>)
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <MX_GPIO_Init+0x118>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <MX_GPIO_Init+0x118>)
 80026fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002700:	6153      	str	r3, [r2, #20]
 8002702:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <MX_GPIO_Init+0x118>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <MX_GPIO_Init+0x118>)
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <MX_GPIO_Init+0x118>)
 8002714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002718:	6153      	str	r3, [r2, #20]
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <MX_GPIO_Init+0x118>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M4_NDIR_Pin|M5_NDIR_Pin|M0_NDIR_Pin|M1_NDIR_Pin
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 415c 	mov.w	r1, #56320	; 0xdc00
 800272c:	4827      	ldr	r0, [pc, #156]	; (80027cc <MX_GPIO_Init+0x11c>)
 800272e:	f001 f84d 	bl	80037cc <HAL_GPIO_WritePin>
                          |M2_NDIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|M3_NDIR_Pin|M0_DIR_Pin|M1_DIR_Pin
 8002732:	2200      	movs	r2, #0
 8002734:	f649 41a0 	movw	r1, #40096	; 0x9ca0
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f001 f846 	bl	80037cc <HAL_GPIO_WritePin>
                          |M2_DIR_Pin|M5_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M3_DIR_Pin|M4_DIR_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	2144      	movs	r1, #68	; 0x44
 8002744:	4822      	ldr	r0, [pc, #136]	; (80027d0 <MX_GPIO_Init+0x120>)
 8002746:	f001 f841 	bl	80037cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M4_NDIR_Pin M5_NDIR_Pin M0_NDIR_Pin M1_NDIR_Pin
                           M2_NDIR_Pin */
  GPIO_InitStruct.Pin = M4_NDIR_Pin|M5_NDIR_Pin|M0_NDIR_Pin|M1_NDIR_Pin
 800274a:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 800274e:	617b      	str	r3, [r7, #20]
                          |M2_NDIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275c:	f107 0314 	add.w	r3, r7, #20
 8002760:	4619      	mov	r1, r3
 8002762:	481a      	ldr	r0, [pc, #104]	; (80027cc <MX_GPIO_Init+0x11c>)
 8002764:	f000 fda4 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 M3_NDIR_Pin M0_DIR_Pin M1_DIR_Pin
                           M2_DIR_Pin M5_DIR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|M3_NDIR_Pin|M0_DIR_Pin|M1_DIR_Pin
 8002768:	f649 43a0 	movw	r3, #40096	; 0x9ca0
 800276c:	617b      	str	r3, [r7, #20]
                          |M2_DIR_Pin|M5_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276e:	2301      	movs	r3, #1
 8002770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002776:	2300      	movs	r3, #0
 8002778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002784:	f000 fd94 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M3_DIR_Pin M4_DIR_Pin */
  GPIO_InitStruct.Pin = M3_DIR_Pin|M4_DIR_Pin;
 8002788:	2344      	movs	r3, #68	; 0x44
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	4619      	mov	r1, r3
 800279e:	480c      	ldr	r0, [pc, #48]	; (80027d0 <MX_GPIO_Init+0x120>)
 80027a0:	f000 fd86 	bl	80032b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_LIMIT_Pin M1_LIMIT_Pin M2_LIMIT_Pin M3_LIMIT_Pin
                           M4_LIMIT_Pin M5_LIMIT_Pin */
  GPIO_InitStruct.Pin = M0_LIMIT_Pin|M1_LIMIT_Pin|M2_LIMIT_Pin|M3_LIMIT_Pin
 80027a4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80027a8:	617b      	str	r3, [r7, #20]
                          |M4_LIMIT_Pin|M5_LIMIT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027ae:	2302      	movs	r3, #2
 80027b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4805      	ldr	r0, [pc, #20]	; (80027d0 <MX_GPIO_Init+0x120>)
 80027ba:	f000 fd79 	bl	80032b0 <HAL_GPIO_Init>

}
 80027be:	bf00      	nop
 80027c0:	3728      	adds	r7, #40	; 0x28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	48000800 	.word	0x48000800
 80027d0:	48000400 	.word	0x48000400

080027d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_MspInit+0x44>)
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	4a0e      	ldr	r2, [pc, #56]	; (8002828 <HAL_MspInit+0x44>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6193      	str	r3, [r2, #24]
 80027f6:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <HAL_MspInit+0x44>)
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	607b      	str	r3, [r7, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_MspInit+0x44>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <HAL_MspInit+0x44>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280c:	61d3      	str	r3, [r2, #28]
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_MspInit+0x44>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a36      	ldr	r2, [pc, #216]	; (8002924 <HAL_I2C_MspInit+0xf8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d139      	bne.n	80028c2 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	4a35      	ldr	r2, [pc, #212]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002858:	6153      	str	r3, [r2, #20]
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = J_I2C_SCL_Pin|J_I2C_SDA_Pin;
 8002866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286c:	2312      	movs	r3, #18
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002870:	2301      	movs	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002878:	2304      	movs	r3, #4
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4619      	mov	r1, r3
 8002882:	482a      	ldr	r0, [pc, #168]	; (800292c <HAL_I2C_MspInit+0x100>)
 8002884:	f000 fd14 	bl	80032b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	4a26      	ldr	r2, [pc, #152]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 800288e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002892:	61d3      	str	r3, [r2, #28]
 8002894:	4b24      	ldr	r3, [pc, #144]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	201f      	movs	r0, #31
 80028a6:	f000 fbe6 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028aa:	201f      	movs	r0, #31
 80028ac:	f000 fbff 	bl	80030ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2100      	movs	r1, #0
 80028b4:	2020      	movs	r0, #32
 80028b6:	f000 fbde 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80028ba:	2020      	movs	r0, #32
 80028bc:	f000 fbf7 	bl	80030ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028c0:	e02c      	b.n	800291c <HAL_I2C_MspInit+0xf0>
  else if(hi2c->Instance==I2C2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_I2C_MspInit+0x104>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d127      	bne.n	800291c <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 80028d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d6:	6153      	str	r3, [r2, #20]
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 80028da:	695b      	ldr	r3, [r3, #20]
 80028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M_I2C_SDA_Pin|M_I2C_SCL_Pin;
 80028e4:	2303      	movs	r3, #3
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e8:	2312      	movs	r3, #18
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ec:	2301      	movs	r3, #1
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80028f4:	2304      	movs	r3, #4
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	480d      	ldr	r0, [pc, #52]	; (8002934 <HAL_I2C_MspInit+0x108>)
 8002900:	f000 fcd6 	bl	80032b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	4a07      	ldr	r2, [pc, #28]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 800290a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800290e:	61d3      	str	r3, [r2, #28]
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_I2C_MspInit+0xfc>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	bf00      	nop
 800291e:	3730      	adds	r7, #48	; 0x30
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40005400 	.word	0x40005400
 8002928:	40021000 	.word	0x40021000
 800292c:	48000400 	.word	0x48000400
 8002930:	40005800 	.word	0x40005800
 8002934:	48001400 	.word	0x48001400

08002938 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_I2C_MspDeInit+0x70>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d116      	bne.n	8002978 <HAL_I2C_MspDeInit+0x40>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800294a:	4b18      	ldr	r3, [pc, #96]	; (80029ac <HAL_I2C_MspDeInit+0x74>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4a17      	ldr	r2, [pc, #92]	; (80029ac <HAL_I2C_MspDeInit+0x74>)
 8002950:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002954:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(J_I2C_SCL_GPIO_Port, J_I2C_SCL_Pin);
 8002956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800295a:	4815      	ldr	r0, [pc, #84]	; (80029b0 <HAL_I2C_MspDeInit+0x78>)
 800295c:	f000 fe32 	bl	80035c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(J_I2C_SDA_GPIO_Port, J_I2C_SDA_Pin);
 8002960:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002964:	4812      	ldr	r0, [pc, #72]	; (80029b0 <HAL_I2C_MspDeInit+0x78>)
 8002966:	f000 fe2d 	bl	80035c4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800296a:	201f      	movs	r0, #31
 800296c:	f000 fbad 	bl	80030ca <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002970:	2020      	movs	r0, #32
 8002972:	f000 fbaa 	bl	80030ca <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002976:	e012      	b.n	800299e <HAL_I2C_MspDeInit+0x66>
  else if(hi2c->Instance==I2C2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <HAL_I2C_MspDeInit+0x7c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d10d      	bne.n	800299e <HAL_I2C_MspDeInit+0x66>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_I2C_MspDeInit+0x74>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <HAL_I2C_MspDeInit+0x74>)
 8002988:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800298c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(M_I2C_SDA_GPIO_Port, M_I2C_SDA_Pin);
 800298e:	2101      	movs	r1, #1
 8002990:	4809      	ldr	r0, [pc, #36]	; (80029b8 <HAL_I2C_MspDeInit+0x80>)
 8002992:	f000 fe17 	bl	80035c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(M_I2C_SCL_GPIO_Port, M_I2C_SCL_Pin);
 8002996:	2102      	movs	r1, #2
 8002998:	4807      	ldr	r0, [pc, #28]	; (80029b8 <HAL_I2C_MspDeInit+0x80>)
 800299a:	f000 fe13 	bl	80035c4 <HAL_GPIO_DeInit>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40005400 	.word	0x40005400
 80029ac:	40021000 	.word	0x40021000
 80029b0:	48000400 	.word	0x48000400
 80029b4:	40005800 	.word	0x40005800
 80029b8:	48001400 	.word	0x48001400

080029bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_TIM_Base_MspInit+0x8c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10c      	bne.n	80029e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 80029d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029d8:	6193      	str	r3, [r2, #24]
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029e6:	e02a      	b.n	8002a3e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <HAL_TIM_Base_MspInit+0x94>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d114      	bne.n	8002a1c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	61d3      	str	r3, [r2, #28]
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	2036      	movs	r0, #54	; 0x36
 8002a10:	f000 fb31 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a14:	2036      	movs	r0, #54	; 0x36
 8002a16:	f000 fb4a 	bl	80030ae <HAL_NVIC_EnableIRQ>
}
 8002a1a:	e010      	b.n	8002a3e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_TIM_Base_MspInit+0x98>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10b      	bne.n	8002a3e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 8002a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a30:	6193      	str	r3, [r2, #24]
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_TIM_Base_MspInit+0x90>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40001000 	.word	0x40001000
 8002a54:	40013400 	.word	0x40013400

08002a58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	; 0x30
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d129      	bne.n	8002ace <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a2d      	ldr	r2, [pc, #180]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	61d3      	str	r3, [r2, #28]
 8002a86:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	4b28      	ldr	r3, [pc, #160]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	4a27      	ldr	r2, [pc, #156]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	6153      	str	r3, [r2, #20]
 8002a9e:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = M0_QUAD_A_Pin|M0_QUAD_B_Pin;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aba:	2301      	movs	r3, #1
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abe:	f107 031c 	add.w	r3, r7, #28
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac8:	f000 fbf2 	bl	80032b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002acc:	e02d      	b.n	8002b2a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM3)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d128      	bne.n	8002b2a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ad8:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ade:	f043 0302 	orr.w	r3, r3, #2
 8002ae2:	61d3      	str	r3, [r2, #28]
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af0:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002afa:	6153      	str	r3, [r2, #20]
 8002afc:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_QUAD_B_Pin|M1_QUAD_A_Pin;
 8002b08:	2350      	movs	r3, #80	; 0x50
 8002b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b26:	f000 fbc3 	bl	80032b0 <HAL_GPIO_Init>
}
 8002b2a:	bf00      	nop
 8002b2c:	3730      	adds	r7, #48	; 0x30
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40000400 	.word	0x40000400

08002b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <HAL_TIM_MspPostInit+0xa8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d11c      	bne.n	8002b98 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <HAL_TIM_MspPostInit+0xac>)
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <HAL_TIM_MspPostInit+0xac>)
 8002b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b68:	6153      	str	r3, [r2, #20]
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	; (8002be8 <HAL_TIM_MspPostInit+0xac>)
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M0_PWM_Pin|M1_PWM_Pin|M2_PWM_Pin;
 8002b76:	2307      	movs	r3, #7
 8002b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b86:	2302      	movs	r3, #2
 8002b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4816      	ldr	r0, [pc, #88]	; (8002bec <HAL_TIM_MspPostInit+0xb0>)
 8002b92:	f000 fb8d 	bl	80032b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b96:	e021      	b.n	8002bdc <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM8)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_TIM_MspPostInit+0xb4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d11c      	bne.n	8002bdc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_TIM_MspPostInit+0xac>)
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_TIM_MspPostInit+0xac>)
 8002ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bac:	6153      	str	r3, [r2, #20]
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_TIM_MspPostInit+0xac>)
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_PWM_Pin|M4_PWM_Pin|M5_PWM_Pin;
 8002bba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <HAL_TIM_MspPostInit+0xb0>)
 8002bd8:	f000 fb6a 	bl	80032b0 <HAL_GPIO_Init>
}
 8002bdc:	bf00      	nop
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40021000 	.word	0x40021000
 8002bec:	48000800 	.word	0x48000800
 8002bf0:	40013400 	.word	0x40013400

08002bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c06:	e7fe      	b.n	8002c06 <HardFault_Handler+0x4>

08002c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <MemManage_Handler+0x4>

08002c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c12:	e7fe      	b.n	8002c12 <BusFault_Handler+0x4>

08002c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <UsageFault_Handler+0x4>

08002c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c48:	f000 f8d2 	bl	8002df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <I2C1_EV_IRQHandler+0x10>)
 8002c56:	f001 fbc1 	bl	80043dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200002a8 	.word	0x200002a8

08002c64 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <I2C1_ER_IRQHandler+0x10>)
 8002c6a:	f001 fbd1 	bl	8004410 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200002a8 	.word	0x200002a8

08002c78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <TIM6_DAC_IRQHandler+0x10>)
 8002c7e:	f005 f879 	bl	8007d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000424 	.word	0x20000424

08002c8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <_sbrk+0x50>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <_sbrk+0x16>
		heap_end = &end;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <_sbrk+0x50>)
 8002c9e:	4a10      	ldr	r2, [pc, #64]	; (8002ce0 <_sbrk+0x54>)
 8002ca0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <_sbrk+0x50>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <_sbrk+0x50>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4413      	add	r3, r2
 8002cb0:	466a      	mov	r2, sp
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d907      	bls.n	8002cc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002cb6:	f006 f917 	bl	8008ee8 <__errno>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	220c      	movs	r2, #12
 8002cbe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	e006      	b.n	8002cd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <_sbrk+0x50>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	4a03      	ldr	r2, [pc, #12]	; (8002cdc <_sbrk+0x50>)
 8002cd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200004bc 	.word	0x200004bc
 8002ce0:	200004d8 	.word	0x200004d8

08002ce4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ce8:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <SystemInit+0x28>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <SystemInit+0x28>)
 8002cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <SystemInit+0x28>)
 8002cfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cfe:	609a      	str	r2, [r3, #8]
#endif
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d48 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d16:	e003      	b.n	8002d20 <LoopCopyDataInit>

08002d18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d18:	4b0c      	ldr	r3, [pc, #48]	; (8002d4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d1e:	3104      	adds	r1, #4

08002d20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d20:	480b      	ldr	r0, [pc, #44]	; (8002d50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d28:	d3f6      	bcc.n	8002d18 <CopyDataInit>
	ldr	r2, =_sbss
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d2c:	e002      	b.n	8002d34 <LoopFillZerobss>

08002d2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d30:	f842 3b04 	str.w	r3, [r2], #4

08002d34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <LoopForever+0x16>)
	cmp	r2, r3
 8002d36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d38:	d3f9      	bcc.n	8002d2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d3a:	f7ff ffd3 	bl	8002ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3e:	f006 f8d9 	bl	8008ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d42:	f7ff f8ab 	bl	8001e9c <main>

08002d46 <LoopForever>:

LoopForever:
    b LoopForever
 8002d46:	e7fe      	b.n	8002d46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d48:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002d4c:	08009110 	.word	0x08009110
	ldr	r0, =_sdata
 8002d50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d54:	200000d8 	.word	0x200000d8
	ldr	r2, =_sbss
 8002d58:	200000d8 	.word	0x200000d8
	ldr	r3, = _ebss
 8002d5c:	200004d4 	.word	0x200004d4

08002d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d60:	e7fe      	b.n	8002d60 <ADC1_2_IRQHandler>
	...

08002d64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_Init+0x28>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_Init+0x28>)
 8002d6e:	f043 0310 	orr.w	r3, r3, #16
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d74:	2003      	movs	r0, #3
 8002d76:	f000 f973 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f000 f808 	bl	8002d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d80:	f7ff fd30 	bl	80027e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40022000 	.word	0x40022000

08002d90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_InitTick+0x54>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_InitTick+0x58>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4619      	mov	r1, r3
 8002da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f999 	bl	80030e6 <HAL_SYSTICK_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00e      	b.n	8002ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b0f      	cmp	r3, #15
 8002dc2:	d80a      	bhi.n	8002dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	f000 f953 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <HAL_InitTick+0x5c>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e000      	b.n	8002ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000068 	.word	0x20000068
 8002de8:	20000070 	.word	0x20000070
 8002dec:	2000006c 	.word	0x2000006c

08002df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_IncTick+0x20>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_IncTick+0x24>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <HAL_IncTick+0x24>)
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	20000070 	.word	0x20000070
 8002e14:	200004c0 	.word	0x200004c0

08002e18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <HAL_GetTick+0x14>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	200004c0 	.word	0x200004c0

08002e30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7ff ffee 	bl	8002e18 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d005      	beq.n	8002e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <HAL_Delay+0x44>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002e56:	bf00      	nop
 8002e58:	f7ff ffde 	bl	8002e18 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d8f7      	bhi.n	8002e58 <HAL_Delay+0x28>
  {
  }
}
 8002e68:	bf00      	nop
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000070 	.word	0x20000070

08002e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e88:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e94:	4013      	ands	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <__NVIC_SetPriorityGrouping+0x44>)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	60d3      	str	r3, [r2, #12]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	f003 0307 	and.w	r3, r3, #7
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	db0b      	blt.n	8002f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4907      	ldr	r1, [pc, #28]	; (8002f14 <__NVIC_EnableIRQ+0x38>)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	2001      	movs	r0, #1
 8002efe:	fa00 f202 	lsl.w	r2, r0, r2
 8002f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	e000e100 	.word	0xe000e100

08002f18 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db12      	blt.n	8002f50 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	490a      	ldr	r1, [pc, #40]	; (8002f5c <__NVIC_DisableIRQ+0x44>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	3320      	adds	r3, #32
 8002f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002f44:	f3bf 8f4f 	dsb	sy
}
 8002f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f4a:	f3bf 8f6f 	isb	sy
}
 8002f4e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	; (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	; (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	; 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	; (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff05 	bl	8002e78 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff1a 	bl	8002ec0 <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff8e 	bl	8002fb4 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5d 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff0d 	bl	8002edc <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff ff1d 	bl	8002f18 <__NVIC_DisableIRQ>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff94 	bl	800301c <SysTick_Config>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	607a      	str	r2, [r7, #4]
 800310a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_DMA_Start_IT+0x20>
 800311a:	2302      	movs	r3, #2
 800311c:	e04a      	b.n	80031b4 <HAL_DMA_Start_IT+0xb6>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800312c:	2b01      	cmp	r3, #1
 800312e:	d13a      	bne.n	80031a6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f87c 	bl	8003252 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 020e 	orr.w	r2, r2, #14
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e00f      	b.n	8003194 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 020a 	orr.w	r2, r2, #10
 8003182:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0204 	bic.w	r2, r2, #4
 8003192:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	e005      	b.n	80031b2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
} 
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d005      	beq.n	80031de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2204      	movs	r2, #4
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e027      	b.n	800322e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 020e 	bic.w	r2, r2, #14
 80031ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	2101      	movs	r1, #1
 8003208:	fa01 f202 	lsl.w	r2, r1, r2
 800320c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
    } 
  }
  return status;
 800322e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	2101      	movs	r1, #1
 800326a:	fa01 f202 	lsl.w	r2, r1, r2
 800326e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b10      	cmp	r3, #16
 800327e:	d108      	bne.n	8003292 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003290:	e007      	b.n	80032a2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	60da      	str	r2, [r3, #12]
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032be:	e160      	b.n	8003582 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8152 	beq.w	800357c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d005      	beq.n	80032f0 <HAL_GPIO_Init+0x40>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d130      	bne.n	8003352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2203      	movs	r2, #3
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003326:	2201      	movs	r2, #1
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0201 	and.w	r2, r3, #1
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b03      	cmp	r3, #3
 800335c:	d017      	beq.n	800338e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d123      	bne.n	80033e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3208      	adds	r2, #8
 80033a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	6939      	ldr	r1, [r7, #16]
 80033de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0203 	and.w	r2, r3, #3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80ac 	beq.w	800357c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003424:	4b5e      	ldr	r3, [pc, #376]	; (80035a0 <HAL_GPIO_Init+0x2f0>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a5d      	ldr	r2, [pc, #372]	; (80035a0 <HAL_GPIO_Init+0x2f0>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_GPIO_Init+0x2f0>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800343c:	4a59      	ldr	r2, [pc, #356]	; (80035a4 <HAL_GPIO_Init+0x2f4>)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	089b      	lsrs	r3, r3, #2
 8003442:	3302      	adds	r3, #2
 8003444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	220f      	movs	r2, #15
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4013      	ands	r3, r2
 800345e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003466:	d025      	beq.n	80034b4 <HAL_GPIO_Init+0x204>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a4f      	ldr	r2, [pc, #316]	; (80035a8 <HAL_GPIO_Init+0x2f8>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d01f      	beq.n	80034b0 <HAL_GPIO_Init+0x200>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a4e      	ldr	r2, [pc, #312]	; (80035ac <HAL_GPIO_Init+0x2fc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d019      	beq.n	80034ac <HAL_GPIO_Init+0x1fc>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a4d      	ldr	r2, [pc, #308]	; (80035b0 <HAL_GPIO_Init+0x300>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d013      	beq.n	80034a8 <HAL_GPIO_Init+0x1f8>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a4c      	ldr	r2, [pc, #304]	; (80035b4 <HAL_GPIO_Init+0x304>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00d      	beq.n	80034a4 <HAL_GPIO_Init+0x1f4>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <HAL_GPIO_Init+0x308>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d007      	beq.n	80034a0 <HAL_GPIO_Init+0x1f0>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a4a      	ldr	r2, [pc, #296]	; (80035bc <HAL_GPIO_Init+0x30c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_GPIO_Init+0x1ec>
 8003498:	2306      	movs	r3, #6
 800349a:	e00c      	b.n	80034b6 <HAL_GPIO_Init+0x206>
 800349c:	2307      	movs	r3, #7
 800349e:	e00a      	b.n	80034b6 <HAL_GPIO_Init+0x206>
 80034a0:	2305      	movs	r3, #5
 80034a2:	e008      	b.n	80034b6 <HAL_GPIO_Init+0x206>
 80034a4:	2304      	movs	r3, #4
 80034a6:	e006      	b.n	80034b6 <HAL_GPIO_Init+0x206>
 80034a8:	2303      	movs	r3, #3
 80034aa:	e004      	b.n	80034b6 <HAL_GPIO_Init+0x206>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e002      	b.n	80034b6 <HAL_GPIO_Init+0x206>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_GPIO_Init+0x206>
 80034b4:	2300      	movs	r3, #0
 80034b6:	697a      	ldr	r2, [r7, #20]
 80034b8:	f002 0203 	and.w	r2, r2, #3
 80034bc:	0092      	lsls	r2, r2, #2
 80034be:	4093      	lsls	r3, r2
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034c6:	4937      	ldr	r1, [pc, #220]	; (80035a4 <HAL_GPIO_Init+0x2f4>)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d4:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <HAL_GPIO_Init+0x310>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034f8:	4a31      	ldr	r2, [pc, #196]	; (80035c0 <HAL_GPIO_Init+0x310>)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034fe:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <HAL_GPIO_Init+0x310>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003522:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <HAL_GPIO_Init+0x310>)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_GPIO_Init+0x310>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	43db      	mvns	r3, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4013      	ands	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <HAL_GPIO_Init+0x310>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003552:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_GPIO_Init+0x310>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <HAL_GPIO_Init+0x310>)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	3301      	adds	r3, #1
 8003580:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	f47f ae97 	bne.w	80032c0 <HAL_GPIO_Init+0x10>
  }
}
 8003592:	bf00      	nop
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40010000 	.word	0x40010000
 80035a8:	48000400 	.word	0x48000400
 80035ac:	48000800 	.word	0x48000800
 80035b0:	48000c00 	.word	0x48000c00
 80035b4:	48001000 	.word	0x48001000
 80035b8:	48001400 	.word	0x48001400
 80035bc:	48001800 	.word	0x48001800
 80035c0:	40010400 	.word	0x40010400

080035c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80035d2:	e0c4      	b.n	800375e <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80035d4:	2201      	movs	r2, #1
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80b7 	beq.w	8003758 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80035ea:	4a64      	ldr	r2, [pc, #400]	; (800377c <HAL_GPIO_DeInit+0x1b8>)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	089b      	lsrs	r3, r3, #2
 80035f0:	3302      	adds	r3, #2
 80035f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	220f      	movs	r2, #15
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003612:	d025      	beq.n	8003660 <HAL_GPIO_DeInit+0x9c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a5a      	ldr	r2, [pc, #360]	; (8003780 <HAL_GPIO_DeInit+0x1bc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d01f      	beq.n	800365c <HAL_GPIO_DeInit+0x98>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a59      	ldr	r2, [pc, #356]	; (8003784 <HAL_GPIO_DeInit+0x1c0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d019      	beq.n	8003658 <HAL_GPIO_DeInit+0x94>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_GPIO_DeInit+0x1c4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_GPIO_DeInit+0x90>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_GPIO_DeInit+0x1c8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00d      	beq.n	8003650 <HAL_GPIO_DeInit+0x8c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a56      	ldr	r2, [pc, #344]	; (8003790 <HAL_GPIO_DeInit+0x1cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <HAL_GPIO_DeInit+0x88>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a55      	ldr	r2, [pc, #340]	; (8003794 <HAL_GPIO_DeInit+0x1d0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_GPIO_DeInit+0x84>
 8003644:	2306      	movs	r3, #6
 8003646:	e00c      	b.n	8003662 <HAL_GPIO_DeInit+0x9e>
 8003648:	2307      	movs	r3, #7
 800364a:	e00a      	b.n	8003662 <HAL_GPIO_DeInit+0x9e>
 800364c:	2305      	movs	r3, #5
 800364e:	e008      	b.n	8003662 <HAL_GPIO_DeInit+0x9e>
 8003650:	2304      	movs	r3, #4
 8003652:	e006      	b.n	8003662 <HAL_GPIO_DeInit+0x9e>
 8003654:	2303      	movs	r3, #3
 8003656:	e004      	b.n	8003662 <HAL_GPIO_DeInit+0x9e>
 8003658:	2302      	movs	r3, #2
 800365a:	e002      	b.n	8003662 <HAL_GPIO_DeInit+0x9e>
 800365c:	2301      	movs	r3, #1
 800365e:	e000      	b.n	8003662 <HAL_GPIO_DeInit+0x9e>
 8003660:	2300      	movs	r3, #0
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	f002 0203 	and.w	r2, r2, #3
 8003668:	0092      	lsls	r2, r2, #2
 800366a:	4093      	lsls	r3, r2
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	429a      	cmp	r2, r3
 8003670:	d132      	bne.n	80036d8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <HAL_GPIO_DeInit+0x1d4>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	43db      	mvns	r3, r3
 800367a:	4947      	ldr	r1, [pc, #284]	; (8003798 <HAL_GPIO_DeInit+0x1d4>)
 800367c:	4013      	ands	r3, r2
 800367e:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003680:	4b45      	ldr	r3, [pc, #276]	; (8003798 <HAL_GPIO_DeInit+0x1d4>)
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	43db      	mvns	r3, r3
 8003688:	4943      	ldr	r1, [pc, #268]	; (8003798 <HAL_GPIO_DeInit+0x1d4>)
 800368a:	4013      	ands	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800368e:	4b42      	ldr	r3, [pc, #264]	; (8003798 <HAL_GPIO_DeInit+0x1d4>)
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	4940      	ldr	r1, [pc, #256]	; (8003798 <HAL_GPIO_DeInit+0x1d4>)
 8003698:	4013      	ands	r3, r2
 800369a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800369c:	4b3e      	ldr	r3, [pc, #248]	; (8003798 <HAL_GPIO_DeInit+0x1d4>)
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	493c      	ldr	r1, [pc, #240]	; (8003798 <HAL_GPIO_DeInit+0x1d4>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	220f      	movs	r2, #15
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80036ba:	4a30      	ldr	r2, [pc, #192]	; (800377c <HAL_GPIO_DeInit+0x1b8>)
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	43da      	mvns	r2, r3
 80036ca:	482c      	ldr	r0, [pc, #176]	; (800377c <HAL_GPIO_DeInit+0x1b8>)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	400a      	ands	r2, r1
 80036d2:	3302      	adds	r3, #2
 80036d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2103      	movs	r1, #3
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	401a      	ands	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	08da      	lsrs	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	3208      	adds	r2, #8
 80036f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	220f      	movs	r2, #15
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	08d2      	lsrs	r2, r2, #3
 800370e:	4019      	ands	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2103      	movs	r1, #3
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	401a      	ands	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	2101      	movs	r1, #1
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	401a      	ands	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	2103      	movs	r1, #3
 800374c:	fa01 f303 	lsl.w	r3, r1, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	401a      	ands	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
    }

    position++;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	3301      	adds	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	f47f af34 	bne.w	80035d4 <HAL_GPIO_DeInit+0x10>
  }
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	48000400 	.word	0x48000400
 8003784:	48000800 	.word	0x48000800
 8003788:	48000c00 	.word	0x48000c00
 800378c:	48001000 	.word	0x48001000
 8003790:	48001400 	.word	0x48001400
 8003794:	48001800 	.word	0x48001800
 8003798:	40010400 	.word	0x40010400

0800379c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d002      	beq.n	80037ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
 80037b8:	e001      	b.n	80037be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
 80037d8:	4613      	mov	r3, r2
 80037da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037dc:	787b      	ldrb	r3, [r7, #1]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037e8:	e002      	b.n	80037f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037ea:	887a      	ldrh	r2, [r7, #2]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e081      	b.n	8003912 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d106      	bne.n	8003828 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff f802 	bl	800282c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2224      	movs	r2, #36	; 0x24
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800384c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800385c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	e006      	b.n	8003884 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003882:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d104      	bne.n	8003896 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003894:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69d9      	ldr	r1, [r3, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1a      	ldr	r2, [r3, #32]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e021      	b.n	8003970 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fe fff7 	bl	8002938 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	607a      	str	r2, [r7, #4]
 8003982:	461a      	mov	r2, r3
 8003984:	460b      	mov	r3, r1
 8003986:	817b      	strh	r3, [r7, #10]
 8003988:	4613      	mov	r3, r2
 800398a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b20      	cmp	r3, #32
 8003996:	f040 80da 	bne.w	8003b4e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2C_Master_Transmit+0x30>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e0d3      	b.n	8003b50 <HAL_I2C_Master_Transmit+0x1d8>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039b0:	f7ff fa32 	bl	8002e18 <HAL_GetTick>
 80039b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2319      	movs	r3, #25
 80039bc:	2201      	movs	r2, #1
 80039be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f001 feee 	bl	80057a4 <I2C_WaitOnFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0be      	b.n	8003b50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2221      	movs	r2, #33	; 0x21
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2210      	movs	r2, #16
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2bff      	cmp	r3, #255	; 0xff
 8003a02:	d90e      	bls.n	8003a22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	22ff      	movs	r2, #255	; 0xff
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	4b51      	ldr	r3, [pc, #324]	; (8003b58 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f002 f860 	bl	8005ae0 <I2C_TransferConfig>
 8003a20:	e06c      	b.n	8003afc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	8979      	ldrh	r1, [r7, #10]
 8003a34:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <HAL_I2C_Master_Transmit+0x1e0>)
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f002 f84f 	bl	8005ae0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003a42:	e05b      	b.n	8003afc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	6a39      	ldr	r1, [r7, #32]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f001 feeb 	bl	8005824 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e07b      	b.n	8003b50 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d034      	beq.n	8003afc <HAL_I2C_Master_Transmit+0x184>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d130      	bne.n	8003afc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2180      	movs	r1, #128	; 0x80
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f001 fe7d 	bl	80057a4 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e04d      	b.n	8003b50 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2bff      	cmp	r3, #255	; 0xff
 8003abc:	d90e      	bls.n	8003adc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	22ff      	movs	r2, #255	; 0xff
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	8979      	ldrh	r1, [r7, #10]
 8003acc:	2300      	movs	r3, #0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f002 f803 	bl	8005ae0 <I2C_TransferConfig>
 8003ada:	e00f      	b.n	8003afc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	8979      	ldrh	r1, [r7, #10]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f001 fff2 	bl	8005ae0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d19e      	bne.n	8003a44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	6a39      	ldr	r1, [r7, #32]
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f001 feca 	bl	80058a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e01a      	b.n	8003b50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_I2C_Master_Transmit+0x1e4>)
 8003b2e:	400b      	ands	r3, r1
 8003b30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e000      	b.n	8003b50 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
  }
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	80002000 	.word	0x80002000
 8003b5c:	fe00e800 	.word	0xfe00e800

08003b60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	817b      	strh	r3, [r7, #10]
 8003b70:	4613      	mov	r3, r2
 8003b72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	f040 80db 	bne.w	8003d38 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_I2C_Master_Receive+0x30>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0d4      	b.n	8003d3a <HAL_I2C_Master_Receive+0x1da>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b98:	f7ff f93e 	bl	8002e18 <HAL_GetTick>
 8003b9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	2319      	movs	r3, #25
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f001 fdfa 	bl	80057a4 <I2C_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0bf      	b.n	8003d3a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2222      	movs	r2, #34	; 0x22
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2210      	movs	r2, #16
 8003bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	893a      	ldrh	r2, [r7, #8]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2bff      	cmp	r3, #255	; 0xff
 8003bea:	d90e      	bls.n	8003c0a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	22ff      	movs	r2, #255	; 0xff
 8003bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	8979      	ldrh	r1, [r7, #10]
 8003bfa:	4b52      	ldr	r3, [pc, #328]	; (8003d44 <HAL_I2C_Master_Receive+0x1e4>)
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f001 ff6c 	bl	8005ae0 <I2C_TransferConfig>
 8003c08:	e06d      	b.n	8003ce6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <HAL_I2C_Master_Receive+0x1e4>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f001 ff5b 	bl	8005ae0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003c2a:	e05c      	b.n	8003ce6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	6a39      	ldr	r1, [r7, #32]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f001 fe73 	bl	800591c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e07c      	b.n	8003d3a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d034      	beq.n	8003ce6 <HAL_I2C_Master_Receive+0x186>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d130      	bne.n	8003ce6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f001 fd88 	bl	80057a4 <I2C_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e04d      	b.n	8003d3a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2bff      	cmp	r3, #255	; 0xff
 8003ca6:	d90e      	bls.n	8003cc6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	22ff      	movs	r2, #255	; 0xff
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f001 ff0e 	bl	8005ae0 <I2C_TransferConfig>
 8003cc4:	e00f      	b.n	8003ce6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	8979      	ldrh	r1, [r7, #10]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f001 fefd 	bl	8005ae0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d19d      	bne.n	8003c2c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	6a39      	ldr	r1, [r7, #32]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f001 fdd5 	bl	80058a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e01a      	b.n	8003d3a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_I2C_Master_Receive+0x1e8>)
 8003d18:	400b      	ands	r3, r1
 8003d1a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	e000      	b.n	8003d3a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003d38:	2302      	movs	r3, #2
  }
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	80002400 	.word	0x80002400
 8003d48:	fe00e800 	.word	0xfe00e800

08003d4c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	461a      	mov	r2, r3
 8003d58:	460b      	mov	r3, r1
 8003d5a:	817b      	strh	r3, [r7, #10]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	f040 80cd 	bne.w	8003f08 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e0c3      	b.n	8003f0a <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_I2C_Master_Transmit_DMA+0x44>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e0bc      	b.n	8003f0a <HAL_I2C_Master_Transmit_DMA+0x1be>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2221      	movs	r2, #33	; 0x21
 8003d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2210      	movs	r2, #16
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	893a      	ldrh	r2, [r7, #8]
 8003db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4a55      	ldr	r2, [pc, #340]	; (8003f18 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8003dc4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2bff      	cmp	r3, #255	; 0xff
 8003dce:	d906      	bls.n	8003dde <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	22ff      	movs	r2, #255	; 0xff
 8003dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003dd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e007      	b.n	8003dee <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003de8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d070      	beq.n	8003ed8 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d020      	beq.n	8003e40 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	4a46      	ldr	r2, [pc, #280]	; (8003f1c <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	4a45      	ldr	r2, [pc, #276]	; (8003f20 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8003e0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	2200      	movs	r2, #0
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3328      	adds	r3, #40	; 0x28
 8003e2a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003e30:	f7ff f965 	bl	80030fe <HAL_DMA_Start_IT>
 8003e34:	4603      	mov	r3, r0
 8003e36:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d138      	bne.n	8003eb0 <HAL_I2C_Master_Transmit_DMA+0x164>
 8003e3e:	e013      	b.n	8003e68 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e050      	b.n	8003f0a <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	8979      	ldrh	r1, [r7, #10]
 8003e70:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f001 fe32 	bl	8005ae0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003e96:	2110      	movs	r1, #16
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f001 fe4f 	bl	8005b3c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e029      	b.n	8003f04 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	f043 0210 	orr.w	r2, r3, #16
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e018      	b.n	8003f0a <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8003edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	8979      	ldrh	r1, [r7, #10]
 8003ee6:	4b0f      	ldr	r3, [pc, #60]	; (8003f24 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f001 fdf6 	bl	8005ae0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003efc:	2101      	movs	r1, #1
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f001 fe1c 	bl	8005b3c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	ffff0000 	.word	0xffff0000
 8003f18:	080049a1 	.word	0x080049a1
 8003f1c:	0800560f 	.word	0x0800560f
 8003f20:	0800573b 	.word	0x0800573b
 8003f24:	80002000 	.word	0x80002000
 8003f28:	0800454b 	.word	0x0800454b

08003f2c <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	461a      	mov	r2, r3
 8003f38:	460b      	mov	r3, r1
 8003f3a:	817b      	strh	r3, [r7, #10]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	f040 80cd 	bne.w	80040e8 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e0c3      	b.n	80040ea <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_I2C_Master_Receive_DMA+0x44>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e0bc      	b.n	80040ea <HAL_I2C_Master_Receive_DMA+0x1be>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2222      	movs	r2, #34	; 0x22
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2210      	movs	r2, #16
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	893a      	ldrh	r2, [r7, #8]
 8003f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4a55      	ldr	r2, [pc, #340]	; (80040f4 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a55      	ldr	r2, [pc, #340]	; (80040f8 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2bff      	cmp	r3, #255	; 0xff
 8003fae:	d906      	bls.n	8003fbe <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	22ff      	movs	r2, #255	; 0xff
 8003fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003fb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	e007      	b.n	8003fce <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003fc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fcc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d070      	beq.n	80040b8 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d020      	beq.n	8004020 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	4a46      	ldr	r2, [pc, #280]	; (80040fc <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8003fe4:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	4a45      	ldr	r2, [pc, #276]	; (8004100 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	4619      	mov	r1, r3
 800400a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004010:	f7ff f875 	bl	80030fe <HAL_DMA_Start_IT>
 8004014:	4603      	mov	r3, r0
 8004016:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d138      	bne.n	8004090 <HAL_I2C_Master_Receive_DMA+0x164>
 800401e:	e013      	b.n	8004048 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004034:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e050      	b.n	80040ea <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404c:	b2da      	uxtb	r2, r3
 800404e:	8979      	ldrh	r1, [r7, #10]
 8004050:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f001 fd42 	bl	8005ae0 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004076:	2110      	movs	r1, #16
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f001 fd5f 	bl	8005b3c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	e029      	b.n	80040e4 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a4:	f043 0210 	orr.w	r2, r3, #16
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e018      	b.n	80040ea <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	4a13      	ldr	r2, [pc, #76]	; (8004108 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80040bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	8979      	ldrh	r1, [r7, #10]
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f001 fd06 	bl	8005ae0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040dc:	2101      	movs	r1, #1
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f001 fd2c 	bl	8005b3c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	e000      	b.n	80040ea <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
  }
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	ffff0000 	.word	0xffff0000
 80040f8:	080049a1 	.word	0x080049a1
 80040fc:	080056a5 	.word	0x080056a5
 8004100:	0800573b 	.word	0x0800573b
 8004104:	80002400 	.word	0x80002400
 8004108:	0800454b 	.word	0x0800454b

0800410c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004128:	2b28      	cmp	r3, #40	; 0x28
 800412a:	f040 808a 	bne.w	8004242 <HAL_I2C_Slave_Seq_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8004134:	88fb      	ldrh	r3, [r7, #6]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e07e      	b.n	8004244 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004146:	f248 0101 	movw	r1, #32769	; 0x8001
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f001 fd5a 	bl	8005c04 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800415a:	2302      	movs	r3, #2
 800415c:	e072      	b.n	8004244 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b2a      	cmp	r3, #42	; 0x2a
 8004170:	d12a      	bne.n	80041c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004172:	2102      	movs	r1, #2
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f001 fd45 	bl	8005c04 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004188:	d11e      	bne.n	80041c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004198:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d012      	beq.n	80041c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	4a29      	ldr	r2, [pc, #164]	; (800424c <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff f804 	bl	80031bc <HAL_DMA_Abort_IT>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d006      	beq.n	80041c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041c4:	4610      	mov	r0, r2
 80041c6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2229      	movs	r2, #41	; 0x29
 80041cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ec:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	88fa      	ldrh	r2, [r7, #6]
 80041f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	4a10      	ldr	r2, [pc, #64]	; (8004250 <HAL_I2C_Slave_Seq_Transmit_IT+0x144>)
 800420e:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	0c1b      	lsrs	r3, r3, #16
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b01      	cmp	r3, #1
 8004222:	d103      	bne.n	800422c <HAL_I2C_Slave_Seq_Transmit_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2208      	movs	r2, #8
 800422a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8004234:	f248 0101 	movw	r1, #32769	; 0x8001
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f001 fc7f 	bl	8005b3c <I2C_Enable_IRQ>

    return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <HAL_I2C_Slave_Seq_Transmit_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	08005769 	.word	0x08005769
 8004250:	0800479b 	.word	0x0800479b

08004254 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	603b      	str	r3, [r7, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004270:	2b28      	cmp	r3, #40	; 0x28
 8004272:	f040 808a 	bne.w	800438a <HAL_I2C_Slave_Seq_Receive_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d105      	bne.n	800428e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004288:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e07e      	b.n	800438c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800428e:	f248 0102 	movw	r1, #32770	; 0x8002
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f001 fcb6 	bl	8005c04 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e072      	b.n	800438c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b29      	cmp	r3, #41	; 0x29
 80042b8:	d12a      	bne.n	8004310 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042ba:	2101      	movs	r1, #1
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f001 fca1 	bl	8005c04 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d0:	d11e      	bne.n	8004310 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042e0:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d012      	beq.n	8004310 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ee:	4a29      	ldr	r2, [pc, #164]	; (8004394 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe ff60 	bl	80031bc <HAL_DMA_Abort_IT>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800430c:	4610      	mov	r0, r2
 800430e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	222a      	movs	r2, #42	; 0x2a
 8004314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004334:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a10      	ldr	r2, [pc, #64]	; (8004398 <HAL_I2C_Slave_Seq_Receive_IT+0x144>)
 8004356:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	0c1b      	lsrs	r3, r3, #16
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d103      	bne.n	8004374 <HAL_I2C_Slave_Seq_Receive_IT+0x120>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2208      	movs	r2, #8
 8004372:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800437c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f001 fbdb 	bl	8005b3c <I2C_Enable_IRQ>

    return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_I2C_Slave_Seq_Receive_IT+0x138>
  }
  else
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
  }
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	08005769 	.word	0x08005769
 8004398:	0800479b 	.word	0x0800479b

0800439c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d10d      	bne.n	80043cc <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2228      	movs	r2, #40	; 0x28
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a07      	ldr	r2, [pc, #28]	; (80043d8 <HAL_I2C_EnableListen_IT+0x3c>)
 80043bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80043be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f001 fbba 	bl	8005b3c <I2C_Enable_IRQ>

    return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e000      	b.n	80043ce <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80043cc:	2302      	movs	r3, #2
  }
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	0800479b 	.word	0x0800479b

080043dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
  }
}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	09db      	lsrs	r3, r3, #7
 8004438:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004454:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	0a9b      	lsrs	r3, r3, #10
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d010      	beq.n	8004484 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	09db      	lsrs	r3, r3, #7
 8004466:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	f043 0208 	orr.w	r2, r3, #8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004482:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	0a5b      	lsrs	r3, r3, #9
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d010      	beq.n	80044b2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	09db      	lsrs	r3, r3, #7
 8004494:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f043 0202 	orr.w	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 030b 	and.w	r3, r3, #11
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 ff87 	bl	80053d8 <I2C_ITError>
  }
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	b088      	sub	sp, #32
 800454e:	af02      	add	r7, sp, #8
 8004550:	60f8      	str	r0, [r7, #12]
 8004552:	60b9      	str	r1, [r7, #8]
 8004554:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <I2C_Master_ISR_IT+0x1e>
 8004564:	2302      	movs	r3, #2
 8004566:	e114      	b.n	8004792 <I2C_Master_ISR_IT+0x248>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d013      	beq.n	80045a4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2210      	movs	r2, #16
 800458e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0204 	orr.w	r2, r3, #4
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f001 f812 	bl	80055c6 <I2C_Flush_TXDR>
 80045a2:	e0e1      	b.n	8004768 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d023      	beq.n	80045f8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01d      	beq.n	80045f8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0304 	bic.w	r3, r3, #4
 80045c2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f6:	e0b7      	b.n	8004768 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d01e      	beq.n	8004642 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	085b      	lsrs	r3, r3, #1
 8004608:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800460c:	2b00      	cmp	r3, #0
 800460e:	d018      	beq.n	8004642 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004640:	e092      	b.n	8004768 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	09db      	lsrs	r3, r3, #7
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d05d      	beq.n	800470a <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	099b      	lsrs	r3, r3, #6
 8004652:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004656:	2b00      	cmp	r3, #0
 8004658:	d057      	beq.n	800470a <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d040      	beq.n	80046e6 <I2C_Master_ISR_IT+0x19c>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	d13c      	bne.n	80046e6 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	b29b      	uxth	r3, r3
 8004674:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004678:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	2bff      	cmp	r3, #255	; 0xff
 8004682:	d90e      	bls.n	80046a2 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	22ff      	movs	r2, #255	; 0xff
 8004688:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	b2da      	uxtb	r2, r3
 8004690:	8a79      	ldrh	r1, [r7, #18]
 8004692:	2300      	movs	r3, #0
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f001 fa20 	bl	8005ae0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046a0:	e032      	b.n	8004708 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046b4:	d00b      	beq.n	80046ce <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c0:	8a79      	ldrh	r1, [r7, #18]
 80046c2:	2000      	movs	r0, #0
 80046c4:	9000      	str	r0, [sp, #0]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f001 fa0a 	bl	8005ae0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046cc:	e01c      	b.n	8004708 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	8a79      	ldrh	r1, [r7, #18]
 80046d6:	2300      	movs	r3, #0
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f001 f9fe 	bl	8005ae0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e4:	e010      	b.n	8004708 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046f4:	d003      	beq.n	80046fe <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fba9 	bl	8004e4e <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046fc:	e034      	b.n	8004768 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80046fe:	2140      	movs	r1, #64	; 0x40
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fe69 	bl	80053d8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004706:	e02f      	b.n	8004768 <I2C_Master_ISR_IT+0x21e>
 8004708:	e02e      	b.n	8004768 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b00      	cmp	r3, #0
 8004714:	d028      	beq.n	8004768 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	099b      	lsrs	r3, r3, #6
 800471a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800471e:	2b00      	cmp	r3, #0
 8004720:	d022      	beq.n	8004768 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d119      	bne.n	8004760 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800473a:	d015      	beq.n	8004768 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004744:	d108      	bne.n	8004758 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004754:	605a      	str	r2, [r3, #4]
 8004756:	e007      	b.n	8004768 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fb78 	bl	8004e4e <I2C_ITMasterSeqCplt>
 800475e:	e003      	b.n	8004768 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004760:	2140      	movs	r1, #64	; 0x40
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 fe38 	bl	80053d8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004780:	6979      	ldr	r1, [r7, #20]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fbfe 	bl	8004f84 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b086      	sub	sp, #24
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <I2C_Slave_ISR_IT+0x24>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0ec      	b.n	8004998 <I2C_Slave_ISR_IT+0x1fe>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80047de:	6939      	ldr	r1, [r7, #16]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fc99 	bl	8005118 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	091b      	lsrs	r3, r3, #4
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d04d      	beq.n	800488e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d047      	beq.n	800488e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d128      	bne.n	800485a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b28      	cmp	r3, #40	; 0x28
 8004812:	d108      	bne.n	8004826 <I2C_Slave_ISR_IT+0x8c>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800481a:	d104      	bne.n	8004826 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800481c:	6939      	ldr	r1, [r7, #16]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 fd84 	bl	800532c <I2C_ITListenCplt>
 8004824:	e032      	b.n	800488c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b29      	cmp	r3, #41	; 0x29
 8004830:	d10e      	bne.n	8004850 <I2C_Slave_ISR_IT+0xb6>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004838:	d00a      	beq.n	8004850 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2210      	movs	r2, #16
 8004840:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 febf 	bl	80055c6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fb3d 	bl	8004ec8 <I2C_ITSlaveSeqCplt>
 800484e:	e01d      	b.n	800488c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2210      	movs	r2, #16
 8004856:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004858:	e096      	b.n	8004988 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2210      	movs	r2, #16
 8004860:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <I2C_Slave_ISR_IT+0xe4>
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800487a:	f040 8085 	bne.w	8004988 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	4619      	mov	r1, r3
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fda7 	bl	80053d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800488a:	e07d      	b.n	8004988 <I2C_Slave_ISR_IT+0x1ee>
 800488c:	e07c      	b.n	8004988 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	089b      	lsrs	r3, r3, #2
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d030      	beq.n	80048fc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d02a      	beq.n	80048fc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d018      	beq.n	80048e2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d14f      	bne.n	800498c <I2C_Slave_ISR_IT+0x1f2>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048f2:	d04b      	beq.n	800498c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fae7 	bl	8004ec8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80048fa:	e047      	b.n	800498c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	08db      	lsrs	r3, r3, #3
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	08db      	lsrs	r3, r3, #3
 800490c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004914:	6939      	ldr	r1, [r7, #16]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fa15 	bl	8004d46 <I2C_ITAddrCplt>
 800491c:	e037      	b.n	800498e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	085b      	lsrs	r3, r3, #1
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d031      	beq.n	800498e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02b      	beq.n	800498e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d018      	beq.n	8004972 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004970:	e00d      	b.n	800498e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004978:	d002      	beq.n	8004980 <I2C_Slave_ISR_IT+0x1e6>
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 faa1 	bl	8004ec8 <I2C_ITSlaveSeqCplt>
 8004986:	e002      	b.n	800498e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004988:	bf00      	nop
 800498a:	e000      	b.n	800498e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800498c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <I2C_Master_ISR_DMA+0x1a>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0e1      	b.n	8004b7e <I2C_Master_ISR_DMA+0x1de>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d017      	beq.n	80049fe <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	091b      	lsrs	r3, r3, #4
 80049d2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d011      	beq.n	80049fe <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2210      	movs	r2, #16
 80049e0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80049ee:	2120      	movs	r1, #32
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f001 f8a3 	bl	8005b3c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fde5 	bl	80055c6 <I2C_Flush_TXDR>
 80049fc:	e0ba      	b.n	8004b74 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	09db      	lsrs	r3, r3, #7
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d072      	beq.n	8004af0 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	099b      	lsrs	r3, r3, #6
 8004a0e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d06c      	beq.n	8004af0 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a24:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d04e      	beq.n	8004ace <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a3c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2bff      	cmp	r3, #255	; 0xff
 8004a46:	d906      	bls.n	8004a56 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	22ff      	movs	r2, #255	; 0xff
 8004a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004a4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e010      	b.n	8004a78 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a68:	d003      	beq.n	8004a72 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e002      	b.n	8004a78 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a76:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	8a79      	ldrh	r1, [r7, #18]
 8004a80:	2300      	movs	r3, #0
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f001 f82a 	bl	8005ae0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b22      	cmp	r3, #34	; 0x22
 8004aa8:	d108      	bne.n	8004abc <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ab8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004aba:	e05b      	b.n	8004b74 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004acc:	e052      	b.n	8004b74 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004adc:	d003      	beq.n	8004ae6 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f9b5 	bl	8004e4e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004ae4:	e046      	b.n	8004b74 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004ae6:	2140      	movs	r1, #64	; 0x40
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fc75 	bl	80053d8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004aee:	e041      	b.n	8004b74 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	099b      	lsrs	r3, r3, #6
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d029      	beq.n	8004b50 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d023      	beq.n	8004b50 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d119      	bne.n	8004b46 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b20:	d027      	beq.n	8004b72 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b2a:	d108      	bne.n	8004b3e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b3a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004b3c:	e019      	b.n	8004b72 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f985 	bl	8004e4e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004b44:	e015      	b.n	8004b72 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fc45 	bl	80053d8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b4e:	e010      	b.n	8004b72 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00b      	beq.n	8004b74 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d005      	beq.n	8004b74 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fa0a 	bl	8004f84 <I2C_ITMasterCplt>
 8004b70:	e000      	b.n	8004b74 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8004b72:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b088      	sub	sp, #32
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d101      	bne.n	8004baa <I2C_Slave_ISR_DMA+0x24>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e0c9      	b.n	8004d3e <I2C_Slave_ISR_DMA+0x1b8>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d009      	beq.n	8004bd2 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 faa3 	bl	8005118 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 809a 	beq.w	8004d14 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8093 	beq.w	8004d14 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	0b9b      	lsrs	r3, r3, #14
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d105      	bne.n	8004c06 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	0bdb      	lsrs	r3, r3, #15
 8004bfe:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d07f      	beq.n	8004d06 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0bdb      	lsrs	r3, r3, #15
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8004c26:	2301      	movs	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00d      	beq.n	8004c4e <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0b9b      	lsrs	r3, r3, #14
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d128      	bne.n	8004ca6 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b28      	cmp	r3, #40	; 0x28
 8004c5e:	d108      	bne.n	8004c72 <I2C_Slave_ISR_DMA+0xec>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c66:	d104      	bne.n	8004c72 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f000 fb5e 	bl	800532c <I2C_ITListenCplt>
 8004c70:	e048      	b.n	8004d04 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b29      	cmp	r3, #41	; 0x29
 8004c7c:	d10e      	bne.n	8004c9c <I2C_Slave_ISR_DMA+0x116>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c84:	d00a      	beq.n	8004c9c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2210      	movs	r2, #16
 8004c8c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fc99 	bl	80055c6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f917 	bl	8004ec8 <I2C_ITSlaveSeqCplt>
 8004c9a:	e033      	b.n	8004d04 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004ca4:	e034      	b.n	8004d10 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2210      	movs	r2, #16
 8004cac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	f043 0204 	orr.w	r2, r3, #4
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <I2C_Slave_ISR_DMA+0x14a>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cce:	d11f      	bne.n	8004d10 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	2b21      	cmp	r3, #33	; 0x21
 8004cd4:	d002      	beq.n	8004cdc <I2C_Slave_ISR_DMA+0x156>
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
 8004cd8:	2b29      	cmp	r3, #41	; 0x29
 8004cda:	d103      	bne.n	8004ce4 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2221      	movs	r2, #33	; 0x21
 8004ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ce2:	e008      	b.n	8004cf6 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b22      	cmp	r3, #34	; 0x22
 8004ce8:	d002      	beq.n	8004cf0 <I2C_Slave_ISR_DMA+0x16a>
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	2b2a      	cmp	r3, #42	; 0x2a
 8004cee:	d102      	bne.n	8004cf6 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2222      	movs	r2, #34	; 0x22
 8004cf4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fb6b 	bl	80053d8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004d02:	e005      	b.n	8004d10 <I2C_Slave_ISR_DMA+0x18a>
 8004d04:	e004      	b.n	8004d10 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004d0e:	e011      	b.n	8004d34 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004d10:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004d12:	e00f      	b.n	8004d34 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	08db      	lsrs	r3, r3, #3
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f809 	bl	8004d46 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b084      	sub	sp, #16
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d5c:	2b28      	cmp	r3, #40	; 0x28
 8004d5e:	d16a      	bne.n	8004e36 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004d7e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d8c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004d9a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d138      	bne.n	8004e16 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004da4:	897b      	ldrh	r3, [r7, #10]
 8004da6:	09db      	lsrs	r3, r3, #7
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	89bb      	ldrh	r3, [r7, #12]
 8004dac:	4053      	eors	r3, r2
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f003 0306 	and.w	r3, r3, #6
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11c      	bne.n	8004df2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004db8:	897b      	ldrh	r3, [r7, #10]
 8004dba:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d13b      	bne.n	8004e46 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004de4:	89ba      	ldrh	r2, [r7, #12]
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc fc24 	bl	8001638 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004df0:	e029      	b.n	8004e46 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004df2:	893b      	ldrh	r3, [r7, #8]
 8004df4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 ff02 	bl	8005c04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e08:	89ba      	ldrh	r2, [r7, #12]
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fc fc12 	bl	8001638 <HAL_I2C_AddrCallback>
}
 8004e14:	e017      	b.n	8004e46 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fef2 	bl	8005c04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e28:	89ba      	ldrh	r2, [r7, #12]
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fc fc02 	bl	8001638 <HAL_I2C_AddrCallback>
}
 8004e34:	e007      	b.n	8004e46 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b21      	cmp	r3, #33	; 0x21
 8004e68:	d115      	bne.n	8004e96 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2211      	movs	r2, #17
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e7e:	2101      	movs	r1, #1
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 febf 	bl	8005c04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff fb1f 	bl	80044d2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e94:	e014      	b.n	8004ec0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2212      	movs	r2, #18
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004eaa:	2102      	movs	r1, #2
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fea9 	bl	8005c04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7ff fb13 	bl	80044e6 <HAL_I2C_MasterRxCpltCallback>
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	0b9b      	lsrs	r3, r3, #14
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e00d      	b.n	8004f1a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	0bdb      	lsrs	r3, r3, #15
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b29      	cmp	r3, #41	; 0x29
 8004f24:	d112      	bne.n	8004f4c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2228      	movs	r2, #40	; 0x28
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2221      	movs	r2, #33	; 0x21
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f34:	2101      	movs	r1, #1
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fe64 	bl	8005c04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fad8 	bl	80044fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f4a:	e017      	b.n	8004f7c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b2a      	cmp	r3, #42	; 0x2a
 8004f56:	d111      	bne.n	8004f7c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2228      	movs	r2, #40	; 0x28
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2222      	movs	r2, #34	; 0x22
 8004f64:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f66:	2102      	movs	r1, #2
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fe4b 	bl	8005c04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fc fb9e 	bl	80016b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2220      	movs	r2, #32
 8004f98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b21      	cmp	r3, #33	; 0x21
 8004fa4:	d107      	bne.n	8004fb6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fe2b 	bl	8005c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2211      	movs	r2, #17
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb4:	e00c      	b.n	8004fd0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b22      	cmp	r3, #34	; 0x22
 8004fc0:	d106      	bne.n	8004fd0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fe1d 	bl	8005c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2212      	movs	r2, #18
 8004fce:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b4d      	ldr	r3, [pc, #308]	; (8005110 <I2C_ITMasterCplt+0x18c>)
 8004fdc:	400b      	ands	r3, r1
 8004fde:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a4a      	ldr	r2, [pc, #296]	; (8005114 <I2C_ITMasterCplt+0x190>)
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	f043 0204 	orr.w	r2, r3, #4
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d10b      	bne.n	8005030 <I2C_ITMasterCplt+0xac>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	b2db      	uxtb	r3, r3
 800502c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800502e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fac8 	bl	80055c6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b60      	cmp	r3, #96	; 0x60
 8005046:	d002      	beq.n	800504e <I2C_ITMasterCplt+0xca>
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f9bf 	bl	80053d8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800505a:	e054      	b.n	8005106 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b21      	cmp	r3, #33	; 0x21
 8005066:	d124      	bne.n	80050b2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d10b      	bne.n	800509a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7ff fa3b 	bl	800450e <HAL_I2C_MemTxCpltCallback>
}
 8005098:	e035      	b.n	8005106 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff fa11 	bl	80044d2 <HAL_I2C_MasterTxCpltCallback>
}
 80050b0:	e029      	b.n	8005106 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b22      	cmp	r3, #34	; 0x22
 80050bc:	d123      	bne.n	8005106 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d10b      	bne.n	80050f0 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff fa1a 	bl	8004522 <HAL_I2C_MemRxCpltCallback>
}
 80050ee:	e00a      	b.n	8005106 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff f9f0 	bl	80044e6 <HAL_I2C_MasterRxCpltCallback>
}
 8005106:	bf00      	nop
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	fe00e800 	.word	0xfe00e800
 8005114:	ffff0000 	.word	0xffff0000

08005118 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005134:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2220      	movs	r2, #32
 800513c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	2b21      	cmp	r3, #33	; 0x21
 8005142:	d002      	beq.n	800514a <I2C_ITSlaveCplt+0x32>
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b29      	cmp	r3, #41	; 0x29
 8005148:	d108      	bne.n	800515c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800514a:	f248 0101 	movw	r1, #32769	; 0x8001
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fd58 	bl	8005c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2221      	movs	r2, #33	; 0x21
 8005158:	631a      	str	r2, [r3, #48]	; 0x30
 800515a:	e00d      	b.n	8005178 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b22      	cmp	r3, #34	; 0x22
 8005160:	d002      	beq.n	8005168 <I2C_ITSlaveCplt+0x50>
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b2a      	cmp	r3, #42	; 0x2a
 8005166:	d107      	bne.n	8005178 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005168:	f248 0102 	movw	r1, #32770	; 0x8002
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fd49 	bl	8005c04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2222      	movs	r2, #34	; 0x22
 8005176:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005186:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b64      	ldr	r3, [pc, #400]	; (8005324 <I2C_ITSlaveCplt+0x20c>)
 8005194:	400b      	ands	r3, r1
 8005196:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fa14 	bl	80055c6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	0b9b      	lsrs	r3, r3, #14
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d013      	beq.n	80051d2 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051b8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d020      	beq.n	8005204 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051d0:	e018      	b.n	8005204 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	0bdb      	lsrs	r3, r3, #15
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d012      	beq.n	8005204 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	089b      	lsrs	r3, r3, #2
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0304 	bic.w	r3, r3, #4
 8005216:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00c      	beq.n	8005252 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	f043 0204 	orr.w	r2, r3, #4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	2b00      	cmp	r3, #0
 800527c:	d010      	beq.n	80052a0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	4619      	mov	r1, r3
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f8a7 	bl	80053d8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b28      	cmp	r3, #40	; 0x28
 8005294:	d141      	bne.n	800531a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005296:	6979      	ldr	r1, [r7, #20]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f847 	bl	800532c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800529e:	e03c      	b.n	800531a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052a8:	d014      	beq.n	80052d4 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff fe0c 	bl	8004ec8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <I2C_ITSlaveCplt+0x210>)
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7fc fa2b 	bl	8001728 <HAL_I2C_ListenCpltCallback>
}
 80052d2:	e022      	b.n	800531a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b22      	cmp	r3, #34	; 0x22
 80052de:	d10e      	bne.n	80052fe <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fc f9de 	bl	80016b8 <HAL_I2C_SlaveRxCpltCallback>
}
 80052fc:	e00d      	b.n	800531a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff f8f0 	bl	80044fa <HAL_I2C_SlaveTxCpltCallback>
}
 800531a:	bf00      	nop
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	fe00e800 	.word	0xfe00e800
 8005328:	ffff0000 	.word	0xffff0000

0800532c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <I2C_ITListenCplt+0xa8>)
 800533a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	089b      	lsrs	r3, r3, #2
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d022      	beq.n	80053aa <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005380:	2b00      	cmp	r3, #0
 8005382:	d012      	beq.n	80053aa <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a2:	f043 0204 	orr.w	r2, r3, #4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80053aa:	f248 0103 	movw	r1, #32771	; 0x8003
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fc28 	bl	8005c04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2210      	movs	r2, #16
 80053ba:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fc f9af 	bl	8001728 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80053ca:	bf00      	nop
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	ffff0000 	.word	0xffff0000

080053d8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a5d      	ldr	r2, [pc, #372]	; (800556c <I2C_ITError+0x194>)
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b28      	cmp	r3, #40	; 0x28
 800540e:	d005      	beq.n	800541c <I2C_ITError+0x44>
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b29      	cmp	r3, #41	; 0x29
 8005414:	d002      	beq.n	800541c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005416:	7bfb      	ldrb	r3, [r7, #15]
 8005418:	2b2a      	cmp	r3, #42	; 0x2a
 800541a:	d10b      	bne.n	8005434 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800541c:	2103      	movs	r1, #3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fbf0 	bl	8005c04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2228      	movs	r2, #40	; 0x28
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a50      	ldr	r2, [pc, #320]	; (8005570 <I2C_ITError+0x198>)
 8005430:	635a      	str	r2, [r3, #52]	; 0x34
 8005432:	e011      	b.n	8005458 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005434:	f248 0103 	movw	r1, #32771	; 0x8003
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fbe3 	bl	8005c04 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b60      	cmp	r3, #96	; 0x60
 8005448:	d003      	beq.n	8005452 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d039      	beq.n	80054da <I2C_ITError+0x102>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b11      	cmp	r3, #17
 800546a:	d002      	beq.n	8005472 <I2C_ITError+0x9a>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b21      	cmp	r3, #33	; 0x21
 8005470:	d133      	bne.n	80054da <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800547c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005480:	d107      	bne.n	8005492 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005490:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	4618      	mov	r0, r3
 8005498:	f7fd fece 	bl	8003238 <HAL_DMA_GetState>
 800549c:	4603      	mov	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d017      	beq.n	80054d2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	4a33      	ldr	r2, [pc, #204]	; (8005574 <I2C_ITError+0x19c>)
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fd fe80 	bl	80031bc <HAL_DMA_Abort_IT>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04d      	beq.n	800555e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054cc:	4610      	mov	r0, r2
 80054ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054d0:	e045      	b.n	800555e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f850 	bl	8005578 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054d8:	e041      	b.n	800555e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d039      	beq.n	8005556 <I2C_ITError+0x17e>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b12      	cmp	r3, #18
 80054e6:	d002      	beq.n	80054ee <I2C_ITError+0x116>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b22      	cmp	r3, #34	; 0x22
 80054ec:	d133      	bne.n	8005556 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054fc:	d107      	bne.n	800550e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800550c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	4618      	mov	r0, r3
 8005514:	f7fd fe90 	bl	8003238 <HAL_DMA_GetState>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d017      	beq.n	800554e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	4a14      	ldr	r2, [pc, #80]	; (8005574 <I2C_ITError+0x19c>)
 8005524:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005532:	4618      	mov	r0, r3
 8005534:	f7fd fe42 	bl	80031bc <HAL_DMA_Abort_IT>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d011      	beq.n	8005562 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005548:	4610      	mov	r0, r2
 800554a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800554c:	e009      	b.n	8005562 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f812 	bl	8005578 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005554:	e005      	b.n	8005562 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f80e 	bl	8005578 <I2C_TreatErrorCallback>
  }
}
 800555c:	e002      	b.n	8005564 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800555e:	bf00      	nop
 8005560:	e000      	b.n	8005564 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005562:	bf00      	nop
}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	ffff0000 	.word	0xffff0000
 8005570:	0800479b 	.word	0x0800479b
 8005574:	08005769 	.word	0x08005769

08005578 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b60      	cmp	r3, #96	; 0x60
 800558a:	d10e      	bne.n	80055aa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2220      	movs	r2, #32
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fe ffc7 	bl	8004536 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055a8:	e009      	b.n	80055be <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fc f8ab 	bl	8001714 <HAL_I2C_ErrorCallback>
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d103      	bne.n	80055e4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d007      	beq.n	8005602 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	619a      	str	r2, [r3, #24]
  }
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800562a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005636:	2120      	movs	r1, #32
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fa7f 	bl	8005b3c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800563e:	e02d      	b.n	800569c <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005652:	b29b      	uxth	r3, r3
 8005654:	2bff      	cmp	r3, #255	; 0xff
 8005656:	d903      	bls.n	8005660 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	22ff      	movs	r2, #255	; 0xff
 800565c:	851a      	strh	r2, [r3, #40]	; 0x28
 800565e:	e004      	b.n	800566a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	4619      	mov	r1, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3328      	adds	r3, #40	; 0x28
 800567a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005680:	f7fd fd3d 	bl	80030fe <HAL_DMA_Start_IT>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d004      	beq.n	8005694 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800568a:	2110      	movs	r1, #16
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff fea3 	bl	80053d8 <I2C_ITError>
}
 8005692:	e003      	b.n	800569c <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005694:	2140      	movs	r1, #64	; 0x40
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 fa50 	bl	8005b3c <I2C_Enable_IRQ>
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056c0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80056cc:	2120      	movs	r1, #32
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fa34 	bl	8005b3c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80056d4:	e02d      	b.n	8005732 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80056de:	441a      	add	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2bff      	cmp	r3, #255	; 0xff
 80056ec:	d903      	bls.n	80056f6 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
 80056f4:	e004      	b.n	8005700 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3324      	adds	r3, #36	; 0x24
 800570a:	4619      	mov	r1, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005716:	f7fd fcf2 	bl	80030fe <HAL_DMA_Start_IT>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d004      	beq.n	800572a <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005720:	2110      	movs	r1, #16
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fe58 	bl	80053d8 <I2C_ITError>
}
 8005728:	e003      	b.n	8005732 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800572a:	2140      	movs	r1, #64	; 0x40
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fa05 	bl	8005b3c <I2C_Enable_IRQ>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005756:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005758:	2110      	movs	r1, #16
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff fe3c 	bl	80053d8 <I2C_ITError>
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	2200      	movs	r2, #0
 8005784:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005792:	2200      	movs	r2, #0
 8005794:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff feee 	bl	8005578 <I2C_TreatErrorCallback>
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057b4:	e022      	b.n	80057fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d01e      	beq.n	80057fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057be:	f7fd fb2b 	bl	8002e18 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d302      	bcc.n	80057d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d113      	bne.n	80057fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e00f      	b.n	800581c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4013      	ands	r3, r2
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	429a      	cmp	r2, r3
 8005818:	d0cd      	beq.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005830:	e02c      	b.n	800588c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f8dc 	bl	80059f4 <I2C_IsAcknowledgeFailed>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e02a      	b.n	800589c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584c:	d01e      	beq.n	800588c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800584e:	f7fd fae3 	bl	8002e18 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	429a      	cmp	r2, r3
 800585c:	d302      	bcc.n	8005864 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d113      	bne.n	800588c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2220      	movs	r2, #32
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e007      	b.n	800589c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d1cb      	bne.n	8005832 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058b0:	e028      	b.n	8005904 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68b9      	ldr	r1, [r7, #8]
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f89c 	bl	80059f4 <I2C_IsAcknowledgeFailed>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e026      	b.n	8005914 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c6:	f7fd faa7 	bl	8002e18 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d302      	bcc.n	80058dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d113      	bne.n	8005904 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	f043 0220 	orr.w	r2, r3, #32
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e007      	b.n	8005914 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b20      	cmp	r3, #32
 8005910:	d1cf      	bne.n	80058b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005928:	e055      	b.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	68b9      	ldr	r1, [r7, #8]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f860 	bl	80059f4 <I2C_IsAcknowledgeFailed>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e053      	b.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	f003 0320 	and.w	r3, r3, #32
 8005948:	2b20      	cmp	r3, #32
 800594a:	d129      	bne.n	80059a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b04      	cmp	r3, #4
 8005958:	d105      	bne.n	8005966 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	e03f      	b.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2220      	movs	r2, #32
 800596c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6859      	ldr	r1, [r3, #4]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	4b1d      	ldr	r3, [pc, #116]	; (80059f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800597a:	400b      	ands	r3, r1
 800597c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e022      	b.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a0:	f7fd fa3a 	bl	8002e18 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d302      	bcc.n	80059b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ba:	f043 0220 	orr.w	r2, r3, #32
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e007      	b.n	80059e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d1a2      	bne.n	800592a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	fe00e800 	.word	0xfe00e800

080059f4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d161      	bne.n	8005ad2 <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a1c:	d02b      	beq.n	8005a76 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2c:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a2e:	e022      	b.n	8005a76 <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a36:	d01e      	beq.n	8005a76 <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a38:	f7fd f9ee 	bl	8002e18 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d302      	bcc.n	8005a4e <I2C_IsAcknowledgeFailed+0x5a>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d113      	bne.n	8005a76 <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e02e      	b.n	8005ad4 <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	f003 0320 	and.w	r3, r3, #32
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d1d5      	bne.n	8005a30 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2220      	movs	r2, #32
 8005a92:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f7ff fd96 	bl	80055c6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6859      	ldr	r1, [r3, #4]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <I2C_IsAcknowledgeFailed+0xe8>)
 8005aa6:	400b      	ands	r3, r1
 8005aa8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aae:	f043 0204 	orr.w	r2, r3, #4
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2220      	movs	r2, #32
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	fe00e800 	.word	0xfe00e800

08005ae0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	607b      	str	r3, [r7, #4]
 8005aea:	460b      	mov	r3, r1
 8005aec:	817b      	strh	r3, [r7, #10]
 8005aee:	4613      	mov	r3, r2
 8005af0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	0d5b      	lsrs	r3, r3, #21
 8005afc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <I2C_TransferConfig+0x58>)
 8005b02:	430b      	orrs	r3, r1
 8005b04:	43db      	mvns	r3, r3
 8005b06:	ea02 0103 	and.w	r1, r2, r3
 8005b0a:	897b      	ldrh	r3, [r7, #10]
 8005b0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b10:	7a7b      	ldrb	r3, [r7, #9]
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	431a      	orrs	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	03ff63ff 	.word	0x03ff63ff

08005b3c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b50:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <I2C_Enable_IRQ+0xc0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8005b5a:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <I2C_Enable_IRQ+0xc4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d11d      	bne.n	8005b9c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005b60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	da03      	bge.n	8005b70 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005b6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005b70:	887b      	ldrh	r3, [r7, #2]
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d103      	bne.n	8005b7e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005b7c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d103      	bne.n	8005b8c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b8a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b8c:	887b      	ldrh	r3, [r7, #2]
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d125      	bne.n	8005bde <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b98:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b9a:	e020      	b.n	8005bde <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005b9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da03      	bge.n	8005bac <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005baa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005bac:	887b      	ldrh	r3, [r7, #2]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005bbc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005bbe:	887b      	ldrh	r3, [r7, #2]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005bce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005bd0:	887b      	ldrh	r3, [r7, #2]
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d103      	bne.n	8005bde <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f043 0320 	orr.w	r3, r3, #32
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	080049a1 	.word	0x080049a1
 8005c00:	08004b87 	.word	0x08004b87

08005c04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005c14:	887b      	ldrh	r3, [r7, #2]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00f      	beq.n	8005c3e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005c24:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c32:	2b28      	cmp	r3, #40	; 0x28
 8005c34:	d003      	beq.n	8005c3e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005c3c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005c3e:	887b      	ldrh	r3, [r7, #2]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00f      	beq.n	8005c68 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005c4e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c5c:	2b28      	cmp	r3, #40	; 0x28
 8005c5e:	d003      	beq.n	8005c68 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005c66:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005c68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da03      	bge.n	8005c78 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005c76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d103      	bne.n	8005c86 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c86:	887b      	ldrh	r3, [r7, #2]
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d103      	bne.n	8005c94 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f043 0320 	orr.w	r3, r3, #32
 8005c92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005c94:	887b      	ldrh	r3, [r7, #2]
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d103      	bne.n	8005ca2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6819      	ldr	r1, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	43da      	mvns	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	400a      	ands	r2, r1
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d138      	bne.n	8005d48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e032      	b.n	8005d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2224      	movs	r2, #36	; 0x24
 8005cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0201 	bic.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	e000      	b.n	8005d4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
  }
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d139      	bne.n	8005de0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e033      	b.n	8005de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2224      	movs	r2, #36	; 0x24
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005da8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	e000      	b.n	8005de2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
  }
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f001 b83a 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 816f 	beq.w	800610a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005e2c:	4bb5      	ldr	r3, [pc, #724]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f003 030c 	and.w	r3, r3, #12
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d00c      	beq.n	8005e52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e38:	4bb2      	ldr	r3, [pc, #712]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d15c      	bne.n	8005efe <HAL_RCC_OscConfig+0x10e>
 8005e44:	4baf      	ldr	r3, [pc, #700]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e50:	d155      	bne.n	8005efe <HAL_RCC_OscConfig+0x10e>
 8005e52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e56:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005e5e:	fa93 f3a3 	rbit	r3, r3
 8005e62:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005e66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6a:	fab3 f383 	clz	r3, r3
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d102      	bne.n	8005e84 <HAL_RCC_OscConfig+0x94>
 8005e7e:	4ba1      	ldr	r3, [pc, #644]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	e015      	b.n	8005eb0 <HAL_RCC_OscConfig+0xc0>
 8005e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e88:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005e90:	fa93 f3a3 	rbit	r3, r3
 8005e94:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005e98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e9c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005ea0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005ea4:	fa93 f3a3 	rbit	r3, r3
 8005ea8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005eac:	4b95      	ldr	r3, [pc, #596]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005eb4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005eb8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005ebc:	fa92 f2a2 	rbit	r2, r2
 8005ec0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005ec4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005ec8:	fab2 f282 	clz	r2, r2
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	f042 0220 	orr.w	r2, r2, #32
 8005ed2:	b2d2      	uxtb	r2, r2
 8005ed4:	f002 021f 	and.w	r2, r2, #31
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f202 	lsl.w	r2, r1, r2
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8111 	beq.w	8006108 <HAL_RCC_OscConfig+0x318>
 8005ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005eea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f040 8108 	bne.w	8006108 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f000 bfc6 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f02:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f0e:	d106      	bne.n	8005f1e <HAL_RCC_OscConfig+0x12e>
 8005f10:	4b7c      	ldr	r3, [pc, #496]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a7b      	ldr	r2, [pc, #492]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	e036      	b.n	8005f8c <HAL_RCC_OscConfig+0x19c>
 8005f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10c      	bne.n	8005f48 <HAL_RCC_OscConfig+0x158>
 8005f2e:	4b75      	ldr	r3, [pc, #468]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a74      	ldr	r2, [pc, #464]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	4b72      	ldr	r3, [pc, #456]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a71      	ldr	r2, [pc, #452]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	e021      	b.n	8005f8c <HAL_RCC_OscConfig+0x19c>
 8005f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f58:	d10c      	bne.n	8005f74 <HAL_RCC_OscConfig+0x184>
 8005f5a:	4b6a      	ldr	r3, [pc, #424]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a69      	ldr	r2, [pc, #420]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	4b67      	ldr	r3, [pc, #412]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a66      	ldr	r2, [pc, #408]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e00b      	b.n	8005f8c <HAL_RCC_OscConfig+0x19c>
 8005f74:	4b63      	ldr	r3, [pc, #396]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a62      	ldr	r2, [pc, #392]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	4b60      	ldr	r3, [pc, #384]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a5f      	ldr	r2, [pc, #380]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f90:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d059      	beq.n	8006050 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9c:	f7fc ff3c 	bl	8002e18 <HAL_GetTick>
 8005fa0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fa4:	e00a      	b.n	8005fbc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fa6:	f7fc ff37 	bl	8002e18 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b64      	cmp	r3, #100	; 0x64
 8005fb4:	d902      	bls.n	8005fbc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	f000 bf67 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>
 8005fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005fc0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005fc8:	fa93 f3a3 	rbit	r3, r3
 8005fcc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005fd0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd4:	fab3 f383 	clz	r3, r3
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d102      	bne.n	8005fee <HAL_RCC_OscConfig+0x1fe>
 8005fe8:	4b46      	ldr	r3, [pc, #280]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	e015      	b.n	800601a <HAL_RCC_OscConfig+0x22a>
 8005fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ff2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005ffa:	fa93 f3a3 	rbit	r3, r3
 8005ffe:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006002:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006006:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800600a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800600e:	fa93 f3a3 	rbit	r3, r3
 8006012:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8006016:	4b3b      	ldr	r3, [pc, #236]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800601e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8006022:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8006026:	fa92 f2a2 	rbit	r2, r2
 800602a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800602e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006032:	fab2 f282 	clz	r2, r2
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	f042 0220 	orr.w	r2, r2, #32
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	f002 021f 	and.w	r2, r2, #31
 8006042:	2101      	movs	r1, #1
 8006044:	fa01 f202 	lsl.w	r2, r1, r2
 8006048:	4013      	ands	r3, r2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0ab      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x1b6>
 800604e:	e05c      	b.n	800610a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fc fee2 	bl	8002e18 <HAL_GetTick>
 8006054:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800605a:	f7fc fedd 	bl	8002e18 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	; 0x64
 8006068:	d902      	bls.n	8006070 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	f000 bf0d 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>
 8006070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006074:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006078:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800607c:	fa93 f3a3 	rbit	r3, r3
 8006080:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8006084:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006088:	fab3 f383 	clz	r3, r3
 800608c:	b2db      	uxtb	r3, r3
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	d102      	bne.n	80060a2 <HAL_RCC_OscConfig+0x2b2>
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	e015      	b.n	80060ce <HAL_RCC_OscConfig+0x2de>
 80060a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80060ae:	fa93 f3a3 	rbit	r3, r3
 80060b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80060b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80060ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80060be:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80060c2:	fa93 f3a3 	rbit	r3, r3
 80060c6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80060ca:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <HAL_RCC_OscConfig+0x314>)
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80060d2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80060d6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80060da:	fa92 f2a2 	rbit	r2, r2
 80060de:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80060e2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80060e6:	fab2 f282 	clz	r2, r2
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	f042 0220 	orr.w	r2, r2, #32
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	f002 021f 	and.w	r2, r2, #31
 80060f6:	2101      	movs	r1, #1
 80060f8:	fa01 f202 	lsl.w	r2, r1, r2
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1ab      	bne.n	800605a <HAL_RCC_OscConfig+0x26a>
 8006102:	e002      	b.n	800610a <HAL_RCC_OscConfig+0x31a>
 8006104:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800610a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800610e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 817f 	beq.w	800641e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006120:	4ba7      	ldr	r3, [pc, #668]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f003 030c 	and.w	r3, r3, #12
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800612c:	4ba4      	ldr	r3, [pc, #656]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f003 030c 	and.w	r3, r3, #12
 8006134:	2b08      	cmp	r3, #8
 8006136:	d173      	bne.n	8006220 <HAL_RCC_OscConfig+0x430>
 8006138:	4ba1      	ldr	r3, [pc, #644]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006144:	d16c      	bne.n	8006220 <HAL_RCC_OscConfig+0x430>
 8006146:	2302      	movs	r3, #2
 8006148:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8006150:	fa93 f3a3 	rbit	r3, r3
 8006154:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006158:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615c:	fab3 f383 	clz	r3, r3
 8006160:	b2db      	uxtb	r3, r3
 8006162:	095b      	lsrs	r3, r3, #5
 8006164:	b2db      	uxtb	r3, r3
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	d102      	bne.n	8006176 <HAL_RCC_OscConfig+0x386>
 8006170:	4b93      	ldr	r3, [pc, #588]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	e013      	b.n	800619e <HAL_RCC_OscConfig+0x3ae>
 8006176:	2302      	movs	r3, #2
 8006178:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8006180:	fa93 f3a3 	rbit	r3, r3
 8006184:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006188:	2302      	movs	r3, #2
 800618a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800618e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006192:	fa93 f3a3 	rbit	r3, r3
 8006196:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800619a:	4b89      	ldr	r3, [pc, #548]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2202      	movs	r2, #2
 80061a0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80061a4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80061a8:	fa92 f2a2 	rbit	r2, r2
 80061ac:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80061b0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80061b4:	fab2 f282 	clz	r2, r2
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	f042 0220 	orr.w	r2, r2, #32
 80061be:	b2d2      	uxtb	r2, r2
 80061c0:	f002 021f 	and.w	r2, r2, #31
 80061c4:	2101      	movs	r1, #1
 80061c6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <HAL_RCC_OscConfig+0x3f6>
 80061d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d002      	beq.n	80061e6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f000 be52 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e6:	4b76      	ldr	r3, [pc, #472]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	21f8      	movs	r1, #248	; 0xf8
 80061fc:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006200:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006204:	fa91 f1a1 	rbit	r1, r1
 8006208:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800620c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006210:	fab1 f181 	clz	r1, r1
 8006214:	b2c9      	uxtb	r1, r1
 8006216:	408b      	lsls	r3, r1
 8006218:	4969      	ldr	r1, [pc, #420]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800621e:	e0fe      	b.n	800641e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006220:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006224:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8088 	beq.w	8006342 <HAL_RCC_OscConfig+0x552>
 8006232:	2301      	movs	r3, #1
 8006234:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006238:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800623c:	fa93 f3a3 	rbit	r3, r3
 8006240:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006244:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006248:	fab3 f383 	clz	r3, r3
 800624c:	b2db      	uxtb	r3, r3
 800624e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006252:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	461a      	mov	r2, r3
 800625a:	2301      	movs	r3, #1
 800625c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625e:	f7fc fddb 	bl	8002e18 <HAL_GetTick>
 8006262:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006266:	e00a      	b.n	800627e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006268:	f7fc fdd6 	bl	8002e18 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d902      	bls.n	800627e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	f000 be06 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>
 800627e:	2302      	movs	r3, #2
 8006280:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006284:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006288:	fa93 f3a3 	rbit	r3, r3
 800628c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8006290:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006294:	fab3 f383 	clz	r3, r3
 8006298:	b2db      	uxtb	r3, r3
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	b2db      	uxtb	r3, r3
 800629e:	f043 0301 	orr.w	r3, r3, #1
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d102      	bne.n	80062ae <HAL_RCC_OscConfig+0x4be>
 80062a8:	4b45      	ldr	r3, [pc, #276]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	e013      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e6>
 80062ae:	2302      	movs	r3, #2
 80062b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80062b8:	fa93 f3a3 	rbit	r3, r3
 80062bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80062c0:	2302      	movs	r3, #2
 80062c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80062c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80062ca:	fa93 f3a3 	rbit	r3, r3
 80062ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80062d2:	4b3b      	ldr	r3, [pc, #236]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	2202      	movs	r2, #2
 80062d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80062dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80062e0:	fa92 f2a2 	rbit	r2, r2
 80062e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80062e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80062ec:	fab2 f282 	clz	r2, r2
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	f042 0220 	orr.w	r2, r2, #32
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	f002 021f 	and.w	r2, r2, #31
 80062fc:	2101      	movs	r1, #1
 80062fe:	fa01 f202 	lsl.w	r2, r1, r2
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0af      	beq.n	8006268 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006308:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006314:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	21f8      	movs	r1, #248	; 0xf8
 800631e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006322:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006326:	fa91 f1a1 	rbit	r1, r1
 800632a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800632e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006332:	fab1 f181 	clz	r1, r1
 8006336:	b2c9      	uxtb	r1, r1
 8006338:	408b      	lsls	r3, r1
 800633a:	4921      	ldr	r1, [pc, #132]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]
 8006340:	e06d      	b.n	800641e <HAL_RCC_OscConfig+0x62e>
 8006342:	2301      	movs	r3, #1
 8006344:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006348:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800634c:	fa93 f3a3 	rbit	r3, r3
 8006350:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006354:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006358:	fab3 f383 	clz	r3, r3
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006362:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	461a      	mov	r2, r3
 800636a:	2300      	movs	r3, #0
 800636c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636e:	f7fc fd53 	bl	8002e18 <HAL_GetTick>
 8006372:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006376:	e00a      	b.n	800638e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006378:	f7fc fd4e 	bl	8002e18 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d902      	bls.n	800638e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	f000 bd7e 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>
 800638e:	2302      	movs	r3, #2
 8006390:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006394:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006398:	fa93 f3a3 	rbit	r3, r3
 800639c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80063a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a4:	fab3 f383 	clz	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	095b      	lsrs	r3, r3, #5
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d105      	bne.n	80063c4 <HAL_RCC_OscConfig+0x5d4>
 80063b8:	4b01      	ldr	r3, [pc, #4]	; (80063c0 <HAL_RCC_OscConfig+0x5d0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	e016      	b.n	80063ec <HAL_RCC_OscConfig+0x5fc>
 80063be:	bf00      	nop
 80063c0:	40021000 	.word	0x40021000
 80063c4:	2302      	movs	r3, #2
 80063c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ce:	fa93 f3a3 	rbit	r3, r3
 80063d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063d6:	2302      	movs	r3, #2
 80063d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80063e0:	fa93 f3a3 	rbit	r3, r3
 80063e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063e8:	4bbf      	ldr	r3, [pc, #764]	; (80066e8 <HAL_RCC_OscConfig+0x8f8>)
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	2202      	movs	r2, #2
 80063ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80063f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80063f6:	fa92 f2a2 	rbit	r2, r2
 80063fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80063fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006402:	fab2 f282 	clz	r2, r2
 8006406:	b2d2      	uxtb	r2, r2
 8006408:	f042 0220 	orr.w	r2, r2, #32
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	f002 021f 	and.w	r2, r2, #31
 8006412:	2101      	movs	r1, #1
 8006414:	fa01 f202 	lsl.w	r2, r1, r2
 8006418:	4013      	ands	r3, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1ac      	bne.n	8006378 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800641e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006422:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 8113 	beq.w	800665a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006438:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d07c      	beq.n	800653e <HAL_RCC_OscConfig+0x74e>
 8006444:	2301      	movs	r3, #1
 8006446:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644e:	fa93 f3a3 	rbit	r3, r3
 8006452:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006456:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800645a:	fab3 f383 	clz	r3, r3
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	4ba2      	ldr	r3, [pc, #648]	; (80066ec <HAL_RCC_OscConfig+0x8fc>)
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	461a      	mov	r2, r3
 800646a:	2301      	movs	r3, #1
 800646c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800646e:	f7fc fcd3 	bl	8002e18 <HAL_GetTick>
 8006472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006476:	e00a      	b.n	800648e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006478:	f7fc fcce 	bl	8002e18 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d902      	bls.n	800648e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	f000 bcfe 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>
 800648e:	2302      	movs	r3, #2
 8006490:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006494:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006498:	fa93 f2a3 	rbit	r2, r3
 800649c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ae:	2202      	movs	r2, #2
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	fa93 f2a3 	rbit	r2, r3
 80064c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064d2:	2202      	movs	r2, #2
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	fa93 f2a3 	rbit	r2, r3
 80064e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064ec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064ee:	4b7e      	ldr	r3, [pc, #504]	; (80066e8 <HAL_RCC_OscConfig+0x8f8>)
 80064f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80064f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80064fa:	2102      	movs	r1, #2
 80064fc:	6019      	str	r1, [r3, #0]
 80064fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006502:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	fa93 f1a3 	rbit	r1, r3
 800650c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006510:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006514:	6019      	str	r1, [r3, #0]
  return result;
 8006516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800651a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	fab3 f383 	clz	r3, r3
 8006524:	b2db      	uxtb	r3, r3
 8006526:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	2101      	movs	r1, #1
 8006532:	fa01 f303 	lsl.w	r3, r1, r3
 8006536:	4013      	ands	r3, r2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d09d      	beq.n	8006478 <HAL_RCC_OscConfig+0x688>
 800653c:	e08d      	b.n	800665a <HAL_RCC_OscConfig+0x86a>
 800653e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006542:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800654e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	fa93 f2a3 	rbit	r2, r3
 8006558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800655c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006560:	601a      	str	r2, [r3, #0]
  return result;
 8006562:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006566:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800656a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800656c:	fab3 f383 	clz	r3, r3
 8006570:	b2db      	uxtb	r3, r3
 8006572:	461a      	mov	r2, r3
 8006574:	4b5d      	ldr	r3, [pc, #372]	; (80066ec <HAL_RCC_OscConfig+0x8fc>)
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	461a      	mov	r2, r3
 800657c:	2300      	movs	r3, #0
 800657e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006580:	f7fc fc4a 	bl	8002e18 <HAL_GetTick>
 8006584:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006588:	e00a      	b.n	80065a0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800658a:	f7fc fc45 	bl	8002e18 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d902      	bls.n	80065a0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	f000 bc75 	b.w	8006e8a <HAL_RCC_OscConfig+0x109a>
 80065a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065a8:	2202      	movs	r2, #2
 80065aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	fa93 f2a3 	rbit	r2, r3
 80065ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065cc:	2202      	movs	r2, #2
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	fa93 f2a3 	rbit	r2, r3
 80065de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80065f0:	2202      	movs	r2, #2
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	fa93 f2a3 	rbit	r2, r3
 8006602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006606:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800660a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800660c:	4b36      	ldr	r3, [pc, #216]	; (80066e8 <HAL_RCC_OscConfig+0x8f8>)
 800660e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006610:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006614:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006618:	2102      	movs	r1, #2
 800661a:	6019      	str	r1, [r3, #0]
 800661c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006620:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	fa93 f1a3 	rbit	r1, r3
 800662a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800662e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006632:	6019      	str	r1, [r3, #0]
  return result;
 8006634:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006638:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	fab3 f383 	clz	r3, r3
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006648:	b2db      	uxtb	r3, r3
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2101      	movs	r1, #1
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	4013      	ands	r3, r2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d197      	bne.n	800658a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800665a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800665e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 81a5 	beq.w	80069ba <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006670:	2300      	movs	r3, #0
 8006672:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006676:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <HAL_RCC_OscConfig+0x8f8>)
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d116      	bne.n	80066b0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006682:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <HAL_RCC_OscConfig+0x8f8>)
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <HAL_RCC_OscConfig+0x8f8>)
 8006688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800668c:	61d3      	str	r3, [r2, #28]
 800668e:	4b16      	ldr	r3, [pc, #88]	; (80066e8 <HAL_RCC_OscConfig+0x8f8>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006696:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800669a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066a8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066b0:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <HAL_RCC_OscConfig+0x900>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d121      	bne.n	8006700 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066bc:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <HAL_RCC_OscConfig+0x900>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a0b      	ldr	r2, [pc, #44]	; (80066f0 <HAL_RCC_OscConfig+0x900>)
 80066c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c8:	f7fc fba6 	bl	8002e18 <HAL_GetTick>
 80066cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d0:	e010      	b.n	80066f4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066d2:	f7fc fba1 	bl	8002e18 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	; 0x64
 80066e0:	d908      	bls.n	80066f4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e3d1      	b.n	8006e8a <HAL_RCC_OscConfig+0x109a>
 80066e6:	bf00      	nop
 80066e8:	40021000 	.word	0x40021000
 80066ec:	10908120 	.word	0x10908120
 80066f0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f4:	4b8d      	ldr	r3, [pc, #564]	; (800692c <HAL_RCC_OscConfig+0xb3c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0e8      	beq.n	80066d2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006704:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d106      	bne.n	800671e <HAL_RCC_OscConfig+0x92e>
 8006710:	4b87      	ldr	r3, [pc, #540]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	4a86      	ldr	r2, [pc, #536]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006716:	f043 0301 	orr.w	r3, r3, #1
 800671a:	6213      	str	r3, [r2, #32]
 800671c:	e035      	b.n	800678a <HAL_RCC_OscConfig+0x99a>
 800671e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006722:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10c      	bne.n	8006748 <HAL_RCC_OscConfig+0x958>
 800672e:	4b80      	ldr	r3, [pc, #512]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	4a7f      	ldr	r2, [pc, #508]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006734:	f023 0301 	bic.w	r3, r3, #1
 8006738:	6213      	str	r3, [r2, #32]
 800673a:	4b7d      	ldr	r3, [pc, #500]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	4a7c      	ldr	r2, [pc, #496]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006740:	f023 0304 	bic.w	r3, r3, #4
 8006744:	6213      	str	r3, [r2, #32]
 8006746:	e020      	b.n	800678a <HAL_RCC_OscConfig+0x99a>
 8006748:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800674c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2b05      	cmp	r3, #5
 8006756:	d10c      	bne.n	8006772 <HAL_RCC_OscConfig+0x982>
 8006758:	4b75      	ldr	r3, [pc, #468]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	4a74      	ldr	r2, [pc, #464]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 800675e:	f043 0304 	orr.w	r3, r3, #4
 8006762:	6213      	str	r3, [r2, #32]
 8006764:	4b72      	ldr	r3, [pc, #456]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	4a71      	ldr	r2, [pc, #452]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 800676a:	f043 0301 	orr.w	r3, r3, #1
 800676e:	6213      	str	r3, [r2, #32]
 8006770:	e00b      	b.n	800678a <HAL_RCC_OscConfig+0x99a>
 8006772:	4b6f      	ldr	r3, [pc, #444]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	4a6e      	ldr	r2, [pc, #440]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	6213      	str	r3, [r2, #32]
 800677e:	4b6c      	ldr	r3, [pc, #432]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	4a6b      	ldr	r2, [pc, #428]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800678a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800678e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8081 	beq.w	800689e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679c:	f7fc fb3c 	bl	8002e18 <HAL_GetTick>
 80067a0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a4:	e00b      	b.n	80067be <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a6:	f7fc fb37 	bl	8002e18 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e365      	b.n	8006e8a <HAL_RCC_OscConfig+0x109a>
 80067be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067c2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80067c6:	2202      	movs	r2, #2
 80067c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	fa93 f2a3 	rbit	r2, r3
 80067d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80067ea:	2202      	movs	r2, #2
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	fa93 f2a3 	rbit	r2, r3
 80067fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006800:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006804:	601a      	str	r2, [r3, #0]
  return result;
 8006806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800680a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800680e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006810:	fab3 f383 	clz	r3, r3
 8006814:	b2db      	uxtb	r3, r3
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f043 0302 	orr.w	r3, r3, #2
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d102      	bne.n	800682a <HAL_RCC_OscConfig+0xa3a>
 8006824:	4b42      	ldr	r3, [pc, #264]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	e013      	b.n	8006852 <HAL_RCC_OscConfig+0xa62>
 800682a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800682e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006832:	2202      	movs	r2, #2
 8006834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	fa93 f2a3 	rbit	r2, r3
 8006844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006848:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	4b38      	ldr	r3, [pc, #224]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006856:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800685a:	2102      	movs	r1, #2
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006862:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	fa92 f1a2 	rbit	r1, r2
 800686c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006870:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8006874:	6011      	str	r1, [r2, #0]
  return result;
 8006876:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800687a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	fab2 f282 	clz	r2, r2
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	f002 021f 	and.w	r2, r2, #31
 8006890:	2101      	movs	r1, #1
 8006892:	fa01 f202 	lsl.w	r2, r1, r2
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	d084      	beq.n	80067a6 <HAL_RCC_OscConfig+0x9b6>
 800689c:	e083      	b.n	80069a6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800689e:	f7fc fabb 	bl	8002e18 <HAL_GetTick>
 80068a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068a6:	e00b      	b.n	80068c0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a8:	f7fc fab6 	bl	8002e18 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e2e4      	b.n	8006e8a <HAL_RCC_OscConfig+0x109a>
 80068c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068c4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80068c8:	2202      	movs	r2, #2
 80068ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	fa93 f2a3 	rbit	r2, r3
 80068da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068e8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80068ec:	2202      	movs	r2, #2
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	fa93 f2a3 	rbit	r2, r3
 80068fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006902:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006906:	601a      	str	r2, [r3, #0]
  return result;
 8006908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800690c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006910:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006912:	fab3 f383 	clz	r3, r3
 8006916:	b2db      	uxtb	r3, r3
 8006918:	095b      	lsrs	r3, r3, #5
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f043 0302 	orr.w	r3, r3, #2
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d106      	bne.n	8006934 <HAL_RCC_OscConfig+0xb44>
 8006926:	4b02      	ldr	r3, [pc, #8]	; (8006930 <HAL_RCC_OscConfig+0xb40>)
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	e017      	b.n	800695c <HAL_RCC_OscConfig+0xb6c>
 800692c:	40007000 	.word	0x40007000
 8006930:	40021000 	.word	0x40021000
 8006934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006938:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800693c:	2202      	movs	r2, #2
 800693e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006944:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	fa93 f2a3 	rbit	r2, r3
 800694e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006952:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	4bb3      	ldr	r3, [pc, #716]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006960:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006964:	2102      	movs	r1, #2
 8006966:	6011      	str	r1, [r2, #0]
 8006968:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800696c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	fa92 f1a2 	rbit	r1, r2
 8006976:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800697a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800697e:	6011      	str	r1, [r2, #0]
  return result;
 8006980:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006984:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8006988:	6812      	ldr	r2, [r2, #0]
 800698a:	fab2 f282 	clz	r2, r2
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	f002 021f 	and.w	r2, r2, #31
 800699a:	2101      	movs	r1, #1
 800699c:	fa01 f202 	lsl.w	r2, r1, r2
 80069a0:	4013      	ands	r3, r2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d180      	bne.n	80068a8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80069a6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d105      	bne.n	80069ba <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ae:	4b9e      	ldr	r3, [pc, #632]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	4a9d      	ldr	r2, [pc, #628]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 80069b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069b8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 825e 	beq.w	8006e88 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069cc:	4b96      	ldr	r3, [pc, #600]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	f000 821f 	beq.w	8006e18 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	f040 8170 	bne.w	8006ccc <HAL_RCC_OscConfig+0xedc>
 80069ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069f0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80069f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	fa93 f2a3 	rbit	r2, r3
 8006a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a0c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006a10:	601a      	str	r2, [r3, #0]
  return result;
 8006a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a16:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006a1a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1c:	fab3 f383 	clz	r3, r3
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006a26:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	2300      	movs	r3, #0
 8006a30:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a32:	f7fc f9f1 	bl	8002e18 <HAL_GetTick>
 8006a36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a3a:	e009      	b.n	8006a50 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a3c:	f7fc f9ec 	bl	8002e18 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e21c      	b.n	8006e8a <HAL_RCC_OscConfig+0x109a>
 8006a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006a58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a62:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	fa93 f2a3 	rbit	r2, r3
 8006a6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a70:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006a74:	601a      	str	r2, [r3, #0]
  return result;
 8006a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a7a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8006a7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a80:	fab3 f383 	clz	r3, r3
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f043 0301 	orr.w	r3, r3, #1
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d102      	bne.n	8006a9a <HAL_RCC_OscConfig+0xcaa>
 8006a94:	4b64      	ldr	r3, [pc, #400]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	e027      	b.n	8006aea <HAL_RCC_OscConfig+0xcfa>
 8006a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006aac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	fa93 f2a3 	rbit	r2, r3
 8006ab6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006aba:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006abe:	601a      	str	r2, [r3, #0]
 8006ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ac4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ad2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	fa93 f2a3 	rbit	r2, r3
 8006adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ae0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	4b50      	ldr	r3, [pc, #320]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006aee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006af2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006af6:	6011      	str	r1, [r2, #0]
 8006af8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006afc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	fa92 f1a2 	rbit	r1, r2
 8006b06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b0a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006b0e:	6011      	str	r1, [r2, #0]
  return result;
 8006b10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006b14:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006b18:	6812      	ldr	r2, [r2, #0]
 8006b1a:	fab2 f282 	clz	r2, r2
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	f042 0220 	orr.w	r2, r2, #32
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	f002 021f 	and.w	r2, r2, #31
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d182      	bne.n	8006a3c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b36:	4b3c      	ldr	r3, [pc, #240]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	f023 020f 	bic.w	r2, r3, #15
 8006b3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	4937      	ldr	r1, [pc, #220]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006b50:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6a19      	ldr	r1, [r3, #32]
 8006b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	430b      	orrs	r3, r1
 8006b72:	492d      	ldr	r1, [pc, #180]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	604b      	str	r3, [r1, #4]
 8006b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b7c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b8a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	fa93 f2a3 	rbit	r2, r3
 8006b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b98:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006b9c:	601a      	str	r2, [r3, #0]
  return result;
 8006b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ba2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006ba6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ba8:	fab3 f383 	clz	r3, r3
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006bb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	2301      	movs	r3, #1
 8006bbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bbe:	f7fc f92b 	bl	8002e18 <HAL_GetTick>
 8006bc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006bc6:	e009      	b.n	8006bdc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc8:	f7fc f926 	bl	8002e18 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e156      	b.n	8006e8a <HAL_RCC_OscConfig+0x109a>
 8006bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006be0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bee:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	fa93 f2a3 	rbit	r2, r3
 8006bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006bfc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006c00:	601a      	str	r2, [r3, #0]
  return result;
 8006c02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c06:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006c0a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c0c:	fab3 f383 	clz	r3, r3
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	f043 0301 	orr.w	r3, r3, #1
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d105      	bne.n	8006c2c <HAL_RCC_OscConfig+0xe3c>
 8006c20:	4b01      	ldr	r3, [pc, #4]	; (8006c28 <HAL_RCC_OscConfig+0xe38>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	e02a      	b.n	8006c7c <HAL_RCC_OscConfig+0xe8c>
 8006c26:	bf00      	nop
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c30:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c3e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	fa93 f2a3 	rbit	r2, r3
 8006c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c4c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c56:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006c5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c64:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	fa93 f2a3 	rbit	r2, r3
 8006c6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c72:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	4b86      	ldr	r3, [pc, #536]	; (8006e94 <HAL_RCC_OscConfig+0x10a4>)
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006c80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006c84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006c88:	6011      	str	r1, [r2, #0]
 8006c8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006c8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	fa92 f1a2 	rbit	r1, r2
 8006c98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006c9c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006ca0:	6011      	str	r1, [r2, #0]
  return result;
 8006ca2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ca6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	fab2 f282 	clz	r2, r2
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	f042 0220 	orr.w	r2, r2, #32
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	f002 021f 	and.w	r2, r2, #31
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f43f af7f 	beq.w	8006bc8 <HAL_RCC_OscConfig+0xdd8>
 8006cca:	e0dd      	b.n	8006e88 <HAL_RCC_OscConfig+0x1098>
 8006ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cd0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	fa93 f2a3 	rbit	r2, r3
 8006ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cec:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006cf0:	601a      	str	r2, [r3, #0]
  return result;
 8006cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006cf6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006cfa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cfc:	fab3 f383 	clz	r3, r3
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006d06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d12:	f7fc f881 	bl	8002e18 <HAL_GetTick>
 8006d16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d1a:	e009      	b.n	8006d30 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d1c:	f7fc f87c 	bl	8002e18 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e0ac      	b.n	8006e8a <HAL_RCC_OscConfig+0x109a>
 8006d30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d34:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	fa93 f2a3 	rbit	r2, r3
 8006d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006d54:	601a      	str	r2, [r3, #0]
  return result;
 8006d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d5a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006d5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d60:	fab3 f383 	clz	r3, r3
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	095b      	lsrs	r3, r3, #5
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d102      	bne.n	8006d7a <HAL_RCC_OscConfig+0xf8a>
 8006d74:	4b47      	ldr	r3, [pc, #284]	; (8006e94 <HAL_RCC_OscConfig+0x10a4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	e027      	b.n	8006dca <HAL_RCC_OscConfig+0xfda>
 8006d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d7e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d8c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	fa93 f2a3 	rbit	r2, r3
 8006d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006da4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006da8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dac:	601a      	str	r2, [r3, #0]
 8006dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006db2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	fa93 f2a3 	rbit	r2, r3
 8006dbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dc0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	4b33      	ldr	r3, [pc, #204]	; (8006e94 <HAL_RCC_OscConfig+0x10a4>)
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006dce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006dd2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006dd6:	6011      	str	r1, [r2, #0]
 8006dd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006ddc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	fa92 f1a2 	rbit	r1, r2
 8006de6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006dea:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006dee:	6011      	str	r1, [r2, #0]
  return result;
 8006df0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006df4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	fab2 f282 	clz	r2, r2
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	f042 0220 	orr.w	r2, r2, #32
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	f002 021f 	and.w	r2, r2, #31
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d182      	bne.n	8006d1c <HAL_RCC_OscConfig+0xf2c>
 8006e16:	e037      	b.n	8006e88 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d101      	bne.n	8006e2c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e02e      	b.n	8006e8a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e2c:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <HAL_RCC_OscConfig+0x10a4>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006e34:	4b17      	ldr	r3, [pc, #92]	; (8006e94 <HAL_RCC_OscConfig+0x10a4>)
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e40:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d117      	bne.n	8006e84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006e54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006e58:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d10b      	bne.n	8006e84 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d001      	beq.n	8006e88 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e000      	b.n	8006e8a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40021000 	.word	0x40021000

08006e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b09e      	sub	sp, #120	; 0x78
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e162      	b.n	8007176 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006eb0:	4b90      	ldr	r3, [pc, #576]	; (80070f4 <HAL_RCC_ClockConfig+0x25c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d910      	bls.n	8006ee0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ebe:	4b8d      	ldr	r3, [pc, #564]	; (80070f4 <HAL_RCC_ClockConfig+0x25c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f023 0207 	bic.w	r2, r3, #7
 8006ec6:	498b      	ldr	r1, [pc, #556]	; (80070f4 <HAL_RCC_ClockConfig+0x25c>)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ece:	4b89      	ldr	r3, [pc, #548]	; (80070f4 <HAL_RCC_ClockConfig+0x25c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d001      	beq.n	8006ee0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e14a      	b.n	8007176 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006eec:	4b82      	ldr	r3, [pc, #520]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	497f      	ldr	r1, [pc, #508]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 80dc 	beq.w	80070c4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d13c      	bne.n	8006f8e <HAL_RCC_ClockConfig+0xf6>
 8006f14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f18:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f1c:	fa93 f3a3 	rbit	r3, r3
 8006f20:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f24:	fab3 f383 	clz	r3, r3
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d102      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xa6>
 8006f38:	4b6f      	ldr	r3, [pc, #444]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	e00f      	b.n	8006f5e <HAL_RCC_ClockConfig+0xc6>
 8006f3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f46:	fa93 f3a3 	rbit	r3, r3
 8006f4a:	667b      	str	r3, [r7, #100]	; 0x64
 8006f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f50:	663b      	str	r3, [r7, #96]	; 0x60
 8006f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f54:	fa93 f3a3 	rbit	r3, r3
 8006f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f5a:	4b67      	ldr	r3, [pc, #412]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f62:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f66:	fa92 f2a2 	rbit	r2, r2
 8006f6a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f6e:	fab2 f282 	clz	r2, r2
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	f042 0220 	orr.w	r2, r2, #32
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	f002 021f 	and.w	r2, r2, #31
 8006f7e:	2101      	movs	r1, #1
 8006f80:	fa01 f202 	lsl.w	r2, r1, r2
 8006f84:	4013      	ands	r3, r2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d17b      	bne.n	8007082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e0f3      	b.n	8007176 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d13c      	bne.n	8007010 <HAL_RCC_ClockConfig+0x178>
 8006f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f9e:	fa93 f3a3 	rbit	r3, r3
 8006fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa6:	fab3 f383 	clz	r3, r3
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	f043 0301 	orr.w	r3, r3, #1
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d102      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0x128>
 8006fba:	4b4f      	ldr	r3, [pc, #316]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	e00f      	b.n	8006fe0 <HAL_RCC_ClockConfig+0x148>
 8006fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fc8:	fa93 f3a3 	rbit	r3, r3
 8006fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd6:	fa93 f3a3 	rbit	r3, r3
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fdc:	4b46      	ldr	r3, [pc, #280]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fe4:	63ba      	str	r2, [r7, #56]	; 0x38
 8006fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe8:	fa92 f2a2 	rbit	r2, r2
 8006fec:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ff0:	fab2 f282 	clz	r2, r2
 8006ff4:	b2d2      	uxtb	r2, r2
 8006ff6:	f042 0220 	orr.w	r2, r2, #32
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	f002 021f 	and.w	r2, r2, #31
 8007000:	2101      	movs	r1, #1
 8007002:	fa01 f202 	lsl.w	r2, r1, r2
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d13a      	bne.n	8007082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e0b2      	b.n	8007176 <HAL_RCC_ClockConfig+0x2de>
 8007010:	2302      	movs	r3, #2
 8007012:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	fa93 f3a3 	rbit	r3, r3
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800701e:	fab3 f383 	clz	r3, r3
 8007022:	b2db      	uxtb	r3, r3
 8007024:	095b      	lsrs	r3, r3, #5
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f043 0301 	orr.w	r3, r3, #1
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b01      	cmp	r3, #1
 8007030:	d102      	bne.n	8007038 <HAL_RCC_ClockConfig+0x1a0>
 8007032:	4b31      	ldr	r3, [pc, #196]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	e00d      	b.n	8007054 <HAL_RCC_ClockConfig+0x1bc>
 8007038:	2302      	movs	r3, #2
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	fa93 f3a3 	rbit	r3, r3
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
 8007044:	2302      	movs	r3, #2
 8007046:	623b      	str	r3, [r7, #32]
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	fa93 f3a3 	rbit	r3, r3
 800704e:	61fb      	str	r3, [r7, #28]
 8007050:	4b29      	ldr	r3, [pc, #164]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	2202      	movs	r2, #2
 8007056:	61ba      	str	r2, [r7, #24]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	fa92 f2a2 	rbit	r2, r2
 800705e:	617a      	str	r2, [r7, #20]
  return result;
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	fab2 f282 	clz	r2, r2
 8007066:	b2d2      	uxtb	r2, r2
 8007068:	f042 0220 	orr.w	r2, r2, #32
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	f002 021f 	and.w	r2, r2, #31
 8007072:	2101      	movs	r1, #1
 8007074:	fa01 f202 	lsl.w	r2, r1, r2
 8007078:	4013      	ands	r3, r2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e079      	b.n	8007176 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f023 0203 	bic.w	r2, r3, #3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	491a      	ldr	r1, [pc, #104]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 8007090:	4313      	orrs	r3, r2
 8007092:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007094:	f7fb fec0 	bl	8002e18 <HAL_GetTick>
 8007098:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709a:	e00a      	b.n	80070b2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800709c:	f7fb febc 	bl	8002e18 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e061      	b.n	8007176 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b2:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <HAL_RCC_ClockConfig+0x260>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f003 020c 	and.w	r2, r3, #12
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d1eb      	bne.n	800709c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <HAL_RCC_ClockConfig+0x25c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d214      	bcs.n	80070fc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070d2:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <HAL_RCC_ClockConfig+0x25c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f023 0207 	bic.w	r2, r3, #7
 80070da:	4906      	ldr	r1, [pc, #24]	; (80070f4 <HAL_RCC_ClockConfig+0x25c>)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e2:	4b04      	ldr	r3, [pc, #16]	; (80070f4 <HAL_RCC_ClockConfig+0x25c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d005      	beq.n	80070fc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e040      	b.n	8007176 <HAL_RCC_ClockConfig+0x2de>
 80070f4:	40022000 	.word	0x40022000
 80070f8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0304 	and.w	r3, r3, #4
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007108:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <HAL_RCC_ClockConfig+0x2e8>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	491a      	ldr	r1, [pc, #104]	; (8007180 <HAL_RCC_ClockConfig+0x2e8>)
 8007116:	4313      	orrs	r3, r2
 8007118:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007126:	4b16      	ldr	r3, [pc, #88]	; (8007180 <HAL_RCC_ClockConfig+0x2e8>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4912      	ldr	r1, [pc, #72]	; (8007180 <HAL_RCC_ClockConfig+0x2e8>)
 8007136:	4313      	orrs	r3, r2
 8007138:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800713a:	f000 f829 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 800713e:	4601      	mov	r1, r0
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <HAL_RCC_ClockConfig+0x2e8>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007148:	22f0      	movs	r2, #240	; 0xf0
 800714a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	fa92 f2a2 	rbit	r2, r2
 8007152:	60fa      	str	r2, [r7, #12]
  return result;
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	fab2 f282 	clz	r2, r2
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	40d3      	lsrs	r3, r2
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <HAL_RCC_ClockConfig+0x2ec>)
 8007160:	5cd3      	ldrb	r3, [r2, r3]
 8007162:	fa21 f303 	lsr.w	r3, r1, r3
 8007166:	4a08      	ldr	r2, [pc, #32]	; (8007188 <HAL_RCC_ClockConfig+0x2f0>)
 8007168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800716a:	4b08      	ldr	r3, [pc, #32]	; (800718c <HAL_RCC_ClockConfig+0x2f4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f7fb fe0e 	bl	8002d90 <HAL_InitTick>
  
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3778      	adds	r7, #120	; 0x78
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40021000 	.word	0x40021000
 8007184:	080090d8 	.word	0x080090d8
 8007188:	20000068 	.word	0x20000068
 800718c:	2000006c 	.word	0x2000006c

08007190 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007190:	b480      	push	{r7}
 8007192:	b08b      	sub	sp, #44	; 0x2c
 8007194:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	2300      	movs	r3, #0
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	2300      	movs	r3, #0
 80071a0:	627b      	str	r3, [r7, #36]	; 0x24
 80071a2:	2300      	movs	r3, #0
 80071a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80071aa:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <HAL_RCC_GetSysClockFreq+0xc4>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d002      	beq.n	80071c0 <HAL_RCC_GetSysClockFreq+0x30>
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	d003      	beq.n	80071c6 <HAL_RCC_GetSysClockFreq+0x36>
 80071be:	e03f      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80071c0:	4b25      	ldr	r3, [pc, #148]	; (8007258 <HAL_RCC_GetSysClockFreq+0xc8>)
 80071c2:	623b      	str	r3, [r7, #32]
      break;
 80071c4:	e03f      	b.n	8007246 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80071cc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80071d0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	fa92 f2a2 	rbit	r2, r2
 80071d8:	607a      	str	r2, [r7, #4]
  return result;
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	fab2 f282 	clz	r2, r2
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	40d3      	lsrs	r3, r2
 80071e4:	4a1d      	ldr	r2, [pc, #116]	; (800725c <HAL_RCC_GetSysClockFreq+0xcc>)
 80071e6:	5cd3      	ldrb	r3, [r2, r3]
 80071e8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80071ea:	4b1a      	ldr	r3, [pc, #104]	; (8007254 <HAL_RCC_GetSysClockFreq+0xc4>)
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	f003 030f 	and.w	r3, r3, #15
 80071f2:	220f      	movs	r2, #15
 80071f4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	fa92 f2a2 	rbit	r2, r2
 80071fc:	60fa      	str	r2, [r7, #12]
  return result;
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	fab2 f282 	clz	r2, r2
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	40d3      	lsrs	r3, r2
 8007208:	4a15      	ldr	r2, [pc, #84]	; (8007260 <HAL_RCC_GetSysClockFreq+0xd0>)
 800720a:	5cd3      	ldrb	r3, [r2, r3]
 800720c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007218:	4a0f      	ldr	r2, [pc, #60]	; (8007258 <HAL_RCC_GetSysClockFreq+0xc8>)
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	627b      	str	r3, [r7, #36]	; 0x24
 8007228:	e007      	b.n	800723a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800722a:	4a0b      	ldr	r2, [pc, #44]	; (8007258 <HAL_RCC_GetSysClockFreq+0xc8>)
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	fb02 f303 	mul.w	r3, r2, r3
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	623b      	str	r3, [r7, #32]
      break;
 800723e:	e002      	b.n	8007246 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007240:	4b05      	ldr	r3, [pc, #20]	; (8007258 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007242:	623b      	str	r3, [r7, #32]
      break;
 8007244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007246:	6a3b      	ldr	r3, [r7, #32]
}
 8007248:	4618      	mov	r0, r3
 800724a:	372c      	adds	r7, #44	; 0x2c
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	40021000 	.word	0x40021000
 8007258:	007a1200 	.word	0x007a1200
 800725c:	080090e8 	.word	0x080090e8
 8007260:	080090f8 	.word	0x080090f8

08007264 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b092      	sub	sp, #72	; 0x48
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007274:	2300      	movs	r3, #0
 8007276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80d4 	beq.w	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007288:	4b4e      	ldr	r3, [pc, #312]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10e      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007294:	4b4b      	ldr	r3, [pc, #300]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	4a4a      	ldr	r2, [pc, #296]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729e:	61d3      	str	r3, [r2, #28]
 80072a0:	4b48      	ldr	r3, [pc, #288]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072ac:	2301      	movs	r3, #1
 80072ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b2:	4b45      	ldr	r3, [pc, #276]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d118      	bne.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072be:	4b42      	ldr	r3, [pc, #264]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a41      	ldr	r2, [pc, #260]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072ca:	f7fb fda5 	bl	8002e18 <HAL_GetTick>
 80072ce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d0:	e008      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d2:	f7fb fda1 	bl	8002e18 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b64      	cmp	r3, #100	; 0x64
 80072de:	d901      	bls.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e1d6      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072e4:	4b38      	ldr	r3, [pc, #224]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0f0      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072f0:	4b34      	ldr	r3, [pc, #208]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 8084 	beq.w	800740a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800730c:	429a      	cmp	r2, r3
 800730e:	d07c      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007310:	4b2c      	ldr	r3, [pc, #176]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800731a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800731e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	fa93 f3a3 	rbit	r3, r3
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800732a:	fab3 f383 	clz	r3, r3
 800732e:	b2db      	uxtb	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	4b26      	ldr	r3, [pc, #152]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	461a      	mov	r2, r3
 800733a:	2301      	movs	r3, #1
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007342:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007346:	fa93 f3a3 	rbit	r3, r3
 800734a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800734e:	fab3 f383 	clz	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	4b1d      	ldr	r3, [pc, #116]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	461a      	mov	r2, r3
 800735e:	2300      	movs	r3, #0
 8007360:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007362:	4a18      	ldr	r2, [pc, #96]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007366:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d04b      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007372:	f7fb fd51 	bl	8002e18 <HAL_GetTick>
 8007376:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007378:	e00a      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800737a:	f7fb fd4d 	bl	8002e18 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	f241 3288 	movw	r2, #5000	; 0x1388
 8007388:	4293      	cmp	r3, r2
 800738a:	d901      	bls.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e180      	b.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007390:	2302      	movs	r3, #2
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007396:	fa93 f3a3 	rbit	r3, r3
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
 800739c:	2302      	movs	r3, #2
 800739e:	623b      	str	r3, [r7, #32]
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	fa93 f3a3 	rbit	r3, r3
 80073a6:	61fb      	str	r3, [r7, #28]
  return result;
 80073a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073aa:	fab3 f383 	clz	r3, r3
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	095b      	lsrs	r3, r3, #5
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	f043 0302 	orr.w	r3, r3, #2
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d108      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80073be:	4b01      	ldr	r3, [pc, #4]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	e00d      	b.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80073c4:	40021000 	.word	0x40021000
 80073c8:	40007000 	.word	0x40007000
 80073cc:	10908100 	.word	0x10908100
 80073d0:	2302      	movs	r3, #2
 80073d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	fa93 f3a3 	rbit	r3, r3
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	4b9a      	ldr	r3, [pc, #616]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2202      	movs	r2, #2
 80073e2:	613a      	str	r2, [r7, #16]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	fa92 f2a2 	rbit	r2, r2
 80073ea:	60fa      	str	r2, [r7, #12]
  return result;
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	fab2 f282 	clz	r2, r2
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	f002 021f 	and.w	r2, r2, #31
 80073fe:	2101      	movs	r1, #1
 8007400:	fa01 f202 	lsl.w	r2, r1, r2
 8007404:	4013      	ands	r3, r2
 8007406:	2b00      	cmp	r3, #0
 8007408:	d0b7      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800740a:	4b8f      	ldr	r3, [pc, #572]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	498c      	ldr	r1, [pc, #560]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007418:	4313      	orrs	r3, r2
 800741a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800741c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007420:	2b01      	cmp	r3, #1
 8007422:	d105      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007424:	4b88      	ldr	r3, [pc, #544]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	4a87      	ldr	r2, [pc, #540]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800742a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800742e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d008      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800743c:	4b82      	ldr	r3, [pc, #520]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	f023 0203 	bic.w	r2, r3, #3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	497f      	ldr	r1, [pc, #508]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800744a:	4313      	orrs	r3, r2
 800744c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800745a:	4b7b      	ldr	r3, [pc, #492]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	4978      	ldr	r1, [pc, #480]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007468:	4313      	orrs	r3, r2
 800746a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d008      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007478:	4b73      	ldr	r3, [pc, #460]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	4970      	ldr	r1, [pc, #448]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007486:	4313      	orrs	r3, r2
 8007488:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d008      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007496:	4b6c      	ldr	r3, [pc, #432]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	f023 0210 	bic.w	r2, r3, #16
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	4969      	ldr	r1, [pc, #420]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d008      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80074b4:	4b64      	ldr	r3, [pc, #400]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c0:	4961      	ldr	r1, [pc, #388]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d008      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074d2:	4b5d      	ldr	r3, [pc, #372]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d6:	f023 0220 	bic.w	r2, r3, #32
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	495a      	ldr	r1, [pc, #360]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d008      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074f0:	4b55      	ldr	r3, [pc, #340]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fc:	4952      	ldr	r1, [pc, #328]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800750e:	4b4e      	ldr	r3, [pc, #312]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	494b      	ldr	r1, [pc, #300]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800751c:	4313      	orrs	r3, r2
 800751e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b00      	cmp	r3, #0
 800752a:	d008      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800752c:	4b46      	ldr	r3, [pc, #280]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007530:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	4943      	ldr	r1, [pc, #268]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800753a:	4313      	orrs	r3, r2
 800753c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800754a:	4b3f      	ldr	r3, [pc, #252]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	493c      	ldr	r1, [pc, #240]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007558:	4313      	orrs	r3, r2
 800755a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007568:	4b37      	ldr	r3, [pc, #220]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800756a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007574:	4934      	ldr	r1, [pc, #208]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007576:	4313      	orrs	r3, r2
 8007578:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007582:	2b00      	cmp	r3, #0
 8007584:	d008      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007586:	4b30      	ldr	r3, [pc, #192]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	492d      	ldr	r1, [pc, #180]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007594:	4313      	orrs	r3, r2
 8007596:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80075a4:	4b28      	ldr	r3, [pc, #160]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b0:	4925      	ldr	r1, [pc, #148]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80075c2:	4b21      	ldr	r3, [pc, #132]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	491e      	ldr	r1, [pc, #120]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d008      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80075e0:	4b19      	ldr	r3, [pc, #100]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	4916      	ldr	r1, [pc, #88]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	490f      	ldr	r1, [pc, #60]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800760c:	4313      	orrs	r3, r2
 800760e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800761e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007620:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	4907      	ldr	r1, [pc, #28]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800762a:	4313      	orrs	r3, r2
 800762c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00c      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800763a:	4b03      	ldr	r3, [pc, #12]	; (8007648 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	e002      	b.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007646:	bf00      	nop
 8007648:	40021000 	.word	0x40021000
 800764c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764e:	4913      	ldr	r1, [pc, #76]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007650:	4313      	orrs	r3, r2
 8007652:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007660:	4b0e      	ldr	r3, [pc, #56]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766c:	490b      	ldr	r1, [pc, #44]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800766e:	4313      	orrs	r3, r2
 8007670:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800767e:	4b07      	ldr	r3, [pc, #28]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	4904      	ldr	r1, [pc, #16]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800768c:	4313      	orrs	r3, r2
 800768e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3748      	adds	r7, #72	; 0x48
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40021000 	.word	0x40021000

080076a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d101      	bne.n	80076b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e049      	b.n	8007746 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fb f978 	bl	80029bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	3304      	adds	r3, #4
 80076dc:	4619      	mov	r1, r3
 80076de:	4610      	mov	r0, r2
 80076e0:	f000 fe6e 	bl	80083c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d001      	beq.n	8007768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e04f      	b.n	8007808 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0201 	orr.w	r2, r2, #1
 800777e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a23      	ldr	r2, [pc, #140]	; (8007814 <HAL_TIM_Base_Start_IT+0xc4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d01d      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0x76>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007792:	d018      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0x76>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <HAL_TIM_Base_Start_IT+0xc8>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d013      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0x76>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <HAL_TIM_Base_Start_IT+0xcc>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d00e      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0x76>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1c      	ldr	r2, [pc, #112]	; (8007820 <HAL_TIM_Base_Start_IT+0xd0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d009      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0x76>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <HAL_TIM_Base_Start_IT+0xd4>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d004      	beq.n	80077c6 <HAL_TIM_Base_Start_IT+0x76>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a19      	ldr	r2, [pc, #100]	; (8007828 <HAL_TIM_Base_Start_IT+0xd8>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d115      	bne.n	80077f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	4b17      	ldr	r3, [pc, #92]	; (800782c <HAL_TIM_Base_Start_IT+0xdc>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b06      	cmp	r3, #6
 80077d6:	d015      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0xb4>
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077de:	d011      	beq.n	8007804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f0:	e008      	b.n	8007804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0201 	orr.w	r2, r2, #1
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	e000      	b.n	8007806 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007804:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40012c00 	.word	0x40012c00
 8007818:	40000400 	.word	0x40000400
 800781c:	40000800 	.word	0x40000800
 8007820:	40013400 	.word	0x40013400
 8007824:	40014000 	.word	0x40014000
 8007828:	40015000 	.word	0x40015000
 800782c:	00010007 	.word	0x00010007

08007830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e049      	b.n	80078d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 f841 	bl	80078de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f000 fda6 	bl	80083c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078e6:	bf00      	nop
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
	...

080078f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d109      	bne.n	8007918 <HAL_TIM_PWM_Start+0x24>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800790a:	b2db      	uxtb	r3, r3
 800790c:	2b01      	cmp	r3, #1
 800790e:	bf14      	ite	ne
 8007910:	2301      	movne	r3, #1
 8007912:	2300      	moveq	r3, #0
 8007914:	b2db      	uxtb	r3, r3
 8007916:	e03c      	b.n	8007992 <HAL_TIM_PWM_Start+0x9e>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2b04      	cmp	r3, #4
 800791c:	d109      	bne.n	8007932 <HAL_TIM_PWM_Start+0x3e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b01      	cmp	r3, #1
 8007928:	bf14      	ite	ne
 800792a:	2301      	movne	r3, #1
 800792c:	2300      	moveq	r3, #0
 800792e:	b2db      	uxtb	r3, r3
 8007930:	e02f      	b.n	8007992 <HAL_TIM_PWM_Start+0x9e>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b08      	cmp	r3, #8
 8007936:	d109      	bne.n	800794c <HAL_TIM_PWM_Start+0x58>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	bf14      	ite	ne
 8007944:	2301      	movne	r3, #1
 8007946:	2300      	moveq	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	e022      	b.n	8007992 <HAL_TIM_PWM_Start+0x9e>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b0c      	cmp	r3, #12
 8007950:	d109      	bne.n	8007966 <HAL_TIM_PWM_Start+0x72>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	bf14      	ite	ne
 800795e:	2301      	movne	r3, #1
 8007960:	2300      	moveq	r3, #0
 8007962:	b2db      	uxtb	r3, r3
 8007964:	e015      	b.n	8007992 <HAL_TIM_PWM_Start+0x9e>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b10      	cmp	r3, #16
 800796a:	d109      	bne.n	8007980 <HAL_TIM_PWM_Start+0x8c>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	bf14      	ite	ne
 8007978:	2301      	movne	r3, #1
 800797a:	2300      	moveq	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	e008      	b.n	8007992 <HAL_TIM_PWM_Start+0x9e>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	bf14      	ite	ne
 800798c:	2301      	movne	r3, #1
 800798e:	2300      	moveq	r3, #0
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e0a1      	b.n	8007ade <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d104      	bne.n	80079aa <HAL_TIM_PWM_Start+0xb6>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079a8:	e023      	b.n	80079f2 <HAL_TIM_PWM_Start+0xfe>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d104      	bne.n	80079ba <HAL_TIM_PWM_Start+0xc6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b8:	e01b      	b.n	80079f2 <HAL_TIM_PWM_Start+0xfe>
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d104      	bne.n	80079ca <HAL_TIM_PWM_Start+0xd6>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079c8:	e013      	b.n	80079f2 <HAL_TIM_PWM_Start+0xfe>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b0c      	cmp	r3, #12
 80079ce:	d104      	bne.n	80079da <HAL_TIM_PWM_Start+0xe6>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079d8:	e00b      	b.n	80079f2 <HAL_TIM_PWM_Start+0xfe>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d104      	bne.n	80079ea <HAL_TIM_PWM_Start+0xf6>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079e8:	e003      	b.n	80079f2 <HAL_TIM_PWM_Start+0xfe>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2201      	movs	r2, #1
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 f91e 	bl	8008c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a38      	ldr	r2, [pc, #224]	; (8007ae8 <HAL_TIM_PWM_Start+0x1f4>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d018      	beq.n	8007a3c <HAL_TIM_PWM_Start+0x148>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a37      	ldr	r2, [pc, #220]	; (8007aec <HAL_TIM_PWM_Start+0x1f8>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d013      	beq.n	8007a3c <HAL_TIM_PWM_Start+0x148>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a35      	ldr	r2, [pc, #212]	; (8007af0 <HAL_TIM_PWM_Start+0x1fc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00e      	beq.n	8007a3c <HAL_TIM_PWM_Start+0x148>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a34      	ldr	r2, [pc, #208]	; (8007af4 <HAL_TIM_PWM_Start+0x200>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d009      	beq.n	8007a3c <HAL_TIM_PWM_Start+0x148>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a32      	ldr	r2, [pc, #200]	; (8007af8 <HAL_TIM_PWM_Start+0x204>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d004      	beq.n	8007a3c <HAL_TIM_PWM_Start+0x148>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a31      	ldr	r2, [pc, #196]	; (8007afc <HAL_TIM_PWM_Start+0x208>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d101      	bne.n	8007a40 <HAL_TIM_PWM_Start+0x14c>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e000      	b.n	8007a42 <HAL_TIM_PWM_Start+0x14e>
 8007a40:	2300      	movs	r3, #0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a23      	ldr	r2, [pc, #140]	; (8007ae8 <HAL_TIM_PWM_Start+0x1f4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d01d      	beq.n	8007a9c <HAL_TIM_PWM_Start+0x1a8>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a68:	d018      	beq.n	8007a9c <HAL_TIM_PWM_Start+0x1a8>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a24      	ldr	r2, [pc, #144]	; (8007b00 <HAL_TIM_PWM_Start+0x20c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <HAL_TIM_PWM_Start+0x1a8>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a22      	ldr	r2, [pc, #136]	; (8007b04 <HAL_TIM_PWM_Start+0x210>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d00e      	beq.n	8007a9c <HAL_TIM_PWM_Start+0x1a8>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1a      	ldr	r2, [pc, #104]	; (8007aec <HAL_TIM_PWM_Start+0x1f8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d009      	beq.n	8007a9c <HAL_TIM_PWM_Start+0x1a8>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a18      	ldr	r2, [pc, #96]	; (8007af0 <HAL_TIM_PWM_Start+0x1fc>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <HAL_TIM_PWM_Start+0x1a8>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a19      	ldr	r2, [pc, #100]	; (8007afc <HAL_TIM_PWM_Start+0x208>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d115      	bne.n	8007ac8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	4b19      	ldr	r3, [pc, #100]	; (8007b08 <HAL_TIM_PWM_Start+0x214>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b06      	cmp	r3, #6
 8007aac:	d015      	beq.n	8007ada <HAL_TIM_PWM_Start+0x1e6>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab4:	d011      	beq.n	8007ada <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0201 	orr.w	r2, r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac6:	e008      	b.n	8007ada <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e000      	b.n	8007adc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	40013400 	.word	0x40013400
 8007af0:	40014000 	.word	0x40014000
 8007af4:	40014400 	.word	0x40014400
 8007af8:	40014800 	.word	0x40014800
 8007afc:	40015000 	.word	0x40015000
 8007b00:	40000400 	.word	0x40000400
 8007b04:	40000800 	.word	0x40000800
 8007b08:	00010007 	.word	0x00010007

08007b0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e097      	b.n	8007c50 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7fa ff8f 	bl	8002a58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6812      	ldr	r2, [r2, #0]
 8007b4c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007b50:	f023 0307 	bic.w	r3, r3, #7
 8007b54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4619      	mov	r1, r3
 8007b60:	4610      	mov	r0, r2
 8007b62:	f000 fc2d 	bl	80083c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007bac:	f023 030c 	bic.w	r3, r3, #12
 8007bb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	011a      	lsls	r2, r3, #4
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	031b      	lsls	r3, r3, #12
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007bf2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	011b      	lsls	r3, r3, #4
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d110      	bne.n	8007caa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d102      	bne.n	8007c94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c8e:	7b7b      	ldrb	r3, [r7, #13]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d001      	beq.n	8007c98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e069      	b.n	8007d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca8:	e031      	b.n	8007d0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d110      	bne.n	8007cd2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d102      	bne.n	8007cbc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cb6:	7b3b      	ldrb	r3, [r7, #12]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d001      	beq.n	8007cc0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e055      	b.n	8007d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cd0:	e01d      	b.n	8007d0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d108      	bne.n	8007cea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d105      	bne.n	8007cea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cde:	7b7b      	ldrb	r3, [r7, #13]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d102      	bne.n	8007cea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ce4:	7b3b      	ldrb	r3, [r7, #12]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d001      	beq.n	8007cee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e03e      	b.n	8007d6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2202      	movs	r2, #2
 8007cfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2202      	movs	r2, #2
 8007d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_TIM_Encoder_Start+0xc4>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d008      	beq.n	8007d2c <HAL_TIM_Encoder_Start+0xd4>
 8007d1a:	e00f      	b.n	8007d3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2201      	movs	r2, #1
 8007d22:	2100      	movs	r1, #0
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 ff89 	bl	8008c3c <TIM_CCxChannelCmd>
      break;
 8007d2a:	e016      	b.n	8007d5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2201      	movs	r2, #1
 8007d32:	2104      	movs	r1, #4
 8007d34:	4618      	mov	r0, r3
 8007d36:	f000 ff81 	bl	8008c3c <TIM_CCxChannelCmd>
      break;
 8007d3a:	e00e      	b.n	8007d5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2201      	movs	r2, #1
 8007d42:	2100      	movs	r1, #0
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 ff79 	bl	8008c3c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	2104      	movs	r1, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 ff72 	bl	8008c3c <TIM_CCxChannelCmd>
      break;
 8007d58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f042 0201 	orr.w	r2, r2, #1
 8007d68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d122      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d11b      	bne.n	8007dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0202 	mvn.w	r2, #2
 8007da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699b      	ldr	r3, [r3, #24]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fae3 	bl	8008382 <HAL_TIM_IC_CaptureCallback>
 8007dbc:	e005      	b.n	8007dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fad5 	bl	800836e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fae6 	bl	8008396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d122      	bne.n	8007e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d11b      	bne.n	8007e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f06f 0204 	mvn.w	r2, #4
 8007df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2202      	movs	r2, #2
 8007dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fab9 	bl	8008382 <HAL_TIM_IC_CaptureCallback>
 8007e10:	e005      	b.n	8007e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 faab 	bl	800836e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fabc 	bl	8008396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d122      	bne.n	8007e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b08      	cmp	r3, #8
 8007e3e:	d11b      	bne.n	8007e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f06f 0208 	mvn.w	r2, #8
 8007e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	69db      	ldr	r3, [r3, #28]
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fa8f 	bl	8008382 <HAL_TIM_IC_CaptureCallback>
 8007e64:	e005      	b.n	8007e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa81 	bl	800836e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa92 	bl	8008396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0310 	and.w	r3, r3, #16
 8007e82:	2b10      	cmp	r3, #16
 8007e84:	d122      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f003 0310 	and.w	r3, r3, #16
 8007e90:	2b10      	cmp	r3, #16
 8007e92:	d11b      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f06f 0210 	mvn.w	r2, #16
 8007e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa65 	bl	8008382 <HAL_TIM_IC_CaptureCallback>
 8007eb8:	e005      	b.n	8007ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fa57 	bl	800836e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fa68 	bl	8008396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d10e      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d107      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f06f 0201 	mvn.w	r2, #1
 8007ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7f9 ffba 	bl	8001e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d10e      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f10:	2b80      	cmp	r3, #128	; 0x80
 8007f12:	d107      	bne.n	8007f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 ffce 	bl	8008ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f32:	d10e      	bne.n	8007f52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3e:	2b80      	cmp	r3, #128	; 0x80
 8007f40:	d107      	bne.n	8007f52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 ffc1 	bl	8008ed4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d10e      	bne.n	8007f7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6a:	2b40      	cmp	r3, #64	; 0x40
 8007f6c:	d107      	bne.n	8007f7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fa16 	bl	80083aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b20      	cmp	r3, #32
 8007f8a:	d10e      	bne.n	8007faa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f003 0320 	and.w	r3, r3, #32
 8007f96:	2b20      	cmp	r3, #32
 8007f98:	d107      	bne.n	8007faa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f06f 0220 	mvn.w	r2, #32
 8007fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 ff81 	bl	8008eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007faa:	bf00      	nop
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d101      	bne.n	8007fd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e0ff      	b.n	80081d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b14      	cmp	r3, #20
 8007fde:	f200 80f0 	bhi.w	80081c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007fe2:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	080081c3 	.word	0x080081c3
 8007ff0:	080081c3 	.word	0x080081c3
 8007ff4:	080081c3 	.word	0x080081c3
 8007ff8:	0800807d 	.word	0x0800807d
 8007ffc:	080081c3 	.word	0x080081c3
 8008000:	080081c3 	.word	0x080081c3
 8008004:	080081c3 	.word	0x080081c3
 8008008:	080080bf 	.word	0x080080bf
 800800c:	080081c3 	.word	0x080081c3
 8008010:	080081c3 	.word	0x080081c3
 8008014:	080081c3 	.word	0x080081c3
 8008018:	080080ff 	.word	0x080080ff
 800801c:	080081c3 	.word	0x080081c3
 8008020:	080081c3 	.word	0x080081c3
 8008024:	080081c3 	.word	0x080081c3
 8008028:	08008141 	.word	0x08008141
 800802c:	080081c3 	.word	0x080081c3
 8008030:	080081c3 	.word	0x080081c3
 8008034:	080081c3 	.word	0x080081c3
 8008038:	08008181 	.word	0x08008181
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fa5a 	bl	80084fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699a      	ldr	r2, [r3, #24]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0208 	orr.w	r2, r2, #8
 8008056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0204 	bic.w	r2, r2, #4
 8008066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6999      	ldr	r1, [r3, #24]
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	691a      	ldr	r2, [r3, #16]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	430a      	orrs	r2, r1
 8008078:	619a      	str	r2, [r3, #24]
      break;
 800807a:	e0a5      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68b9      	ldr	r1, [r7, #8]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fad4 	bl	8008630 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699a      	ldr	r2, [r3, #24]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6999      	ldr	r1, [r3, #24]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	021a      	lsls	r2, r3, #8
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	619a      	str	r2, [r3, #24]
      break;
 80080bc:	e084      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fb47 	bl	8008758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69da      	ldr	r2, [r3, #28]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f042 0208 	orr.w	r2, r2, #8
 80080d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69da      	ldr	r2, [r3, #28]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0204 	bic.w	r2, r2, #4
 80080e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69d9      	ldr	r1, [r3, #28]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	61da      	str	r2, [r3, #28]
      break;
 80080fc:	e064      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	4618      	mov	r0, r3
 8008106:	f000 fbb9 	bl	800887c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	69da      	ldr	r2, [r3, #28]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69d9      	ldr	r1, [r3, #28]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	021a      	lsls	r2, r3, #8
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	61da      	str	r2, [r3, #28]
      break;
 800813e:	e043      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68b9      	ldr	r1, [r7, #8]
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fc08 	bl	800895c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0208 	orr.w	r2, r2, #8
 800815a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f022 0204 	bic.w	r2, r2, #4
 800816a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800817e:	e023      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fc52 	bl	8008a30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800819a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	021a      	lsls	r2, r3, #8
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80081c0:	e002      	b.n	80081c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	75fb      	strb	r3, [r7, #23]
      break;
 80081c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop

080081dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_TIM_ConfigClockSource+0x1c>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e0b6      	b.n	8008366 <HAL_TIM_ConfigClockSource+0x18a>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800821a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008234:	d03e      	beq.n	80082b4 <HAL_TIM_ConfigClockSource+0xd8>
 8008236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823a:	f200 8087 	bhi.w	800834c <HAL_TIM_ConfigClockSource+0x170>
 800823e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008242:	f000 8086 	beq.w	8008352 <HAL_TIM_ConfigClockSource+0x176>
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	d87f      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x170>
 800824c:	2b70      	cmp	r3, #112	; 0x70
 800824e:	d01a      	beq.n	8008286 <HAL_TIM_ConfigClockSource+0xaa>
 8008250:	2b70      	cmp	r3, #112	; 0x70
 8008252:	d87b      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x170>
 8008254:	2b60      	cmp	r3, #96	; 0x60
 8008256:	d050      	beq.n	80082fa <HAL_TIM_ConfigClockSource+0x11e>
 8008258:	2b60      	cmp	r3, #96	; 0x60
 800825a:	d877      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x170>
 800825c:	2b50      	cmp	r3, #80	; 0x50
 800825e:	d03c      	beq.n	80082da <HAL_TIM_ConfigClockSource+0xfe>
 8008260:	2b50      	cmp	r3, #80	; 0x50
 8008262:	d873      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x170>
 8008264:	2b40      	cmp	r3, #64	; 0x40
 8008266:	d058      	beq.n	800831a <HAL_TIM_ConfigClockSource+0x13e>
 8008268:	2b40      	cmp	r3, #64	; 0x40
 800826a:	d86f      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x170>
 800826c:	2b30      	cmp	r3, #48	; 0x30
 800826e:	d064      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x15e>
 8008270:	2b30      	cmp	r3, #48	; 0x30
 8008272:	d86b      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x170>
 8008274:	2b20      	cmp	r3, #32
 8008276:	d060      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x15e>
 8008278:	2b20      	cmp	r3, #32
 800827a:	d867      	bhi.n	800834c <HAL_TIM_ConfigClockSource+0x170>
 800827c:	2b00      	cmp	r3, #0
 800827e:	d05c      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x15e>
 8008280:	2b10      	cmp	r3, #16
 8008282:	d05a      	beq.n	800833a <HAL_TIM_ConfigClockSource+0x15e>
 8008284:	e062      	b.n	800834c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	6899      	ldr	r1, [r3, #8]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f000 fcb1 	bl	8008bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80082a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	609a      	str	r2, [r3, #8]
      break;
 80082b2:	e04f      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6899      	ldr	r1, [r3, #8]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	f000 fc9a 	bl	8008bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082d6:	609a      	str	r2, [r3, #8]
      break;
 80082d8:	e03c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6818      	ldr	r0, [r3, #0]
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	6859      	ldr	r1, [r3, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f000 fc0e 	bl	8008b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2150      	movs	r1, #80	; 0x50
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fc67 	bl	8008bc6 <TIM_ITRx_SetConfig>
      break;
 80082f8:	e02c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6818      	ldr	r0, [r3, #0]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	6859      	ldr	r1, [r3, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	461a      	mov	r2, r3
 8008308:	f000 fc2d 	bl	8008b66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2160      	movs	r1, #96	; 0x60
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fc57 	bl	8008bc6 <TIM_ITRx_SetConfig>
      break;
 8008318:	e01c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	6859      	ldr	r1, [r3, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	461a      	mov	r2, r3
 8008328:	f000 fbee 	bl	8008b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2140      	movs	r1, #64	; 0x40
 8008332:	4618      	mov	r0, r3
 8008334:	f000 fc47 	bl	8008bc6 <TIM_ITRx_SetConfig>
      break;
 8008338:	e00c      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f000 fc3e 	bl	8008bc6 <TIM_ITRx_SetConfig>
      break;
 800834a:	e003      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]
      break;
 8008350:	e000      	b.n	8008354 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008364:	7bfb      	ldrb	r3, [r7, #15]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008376:	bf00      	nop
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800839e:	bf00      	nop
 80083a0:	370c      	adds	r7, #12
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a42      	ldr	r2, [pc, #264]	; (80084dc <TIM_Base_SetConfig+0x11c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d013      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083de:	d00f      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a3f      	ldr	r2, [pc, #252]	; (80084e0 <TIM_Base_SetConfig+0x120>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d00b      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a3e      	ldr	r2, [pc, #248]	; (80084e4 <TIM_Base_SetConfig+0x124>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d007      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a3d      	ldr	r2, [pc, #244]	; (80084e8 <TIM_Base_SetConfig+0x128>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d003      	beq.n	8008400 <TIM_Base_SetConfig+0x40>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a3c      	ldr	r2, [pc, #240]	; (80084ec <TIM_Base_SetConfig+0x12c>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d108      	bne.n	8008412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a31      	ldr	r2, [pc, #196]	; (80084dc <TIM_Base_SetConfig+0x11c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01f      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008420:	d01b      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a2e      	ldr	r2, [pc, #184]	; (80084e0 <TIM_Base_SetConfig+0x120>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d017      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2d      	ldr	r2, [pc, #180]	; (80084e4 <TIM_Base_SetConfig+0x124>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d013      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a2c      	ldr	r2, [pc, #176]	; (80084e8 <TIM_Base_SetConfig+0x128>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00f      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a2c      	ldr	r2, [pc, #176]	; (80084f0 <TIM_Base_SetConfig+0x130>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d00b      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a2b      	ldr	r2, [pc, #172]	; (80084f4 <TIM_Base_SetConfig+0x134>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d007      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a2a      	ldr	r2, [pc, #168]	; (80084f8 <TIM_Base_SetConfig+0x138>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d003      	beq.n	800845a <TIM_Base_SetConfig+0x9a>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4a25      	ldr	r2, [pc, #148]	; (80084ec <TIM_Base_SetConfig+0x12c>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d108      	bne.n	800846c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	4313      	orrs	r3, r2
 8008478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a12      	ldr	r2, [pc, #72]	; (80084dc <TIM_Base_SetConfig+0x11c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d013      	beq.n	80084c0 <TIM_Base_SetConfig+0x100>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a13      	ldr	r2, [pc, #76]	; (80084e8 <TIM_Base_SetConfig+0x128>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00f      	beq.n	80084c0 <TIM_Base_SetConfig+0x100>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <TIM_Base_SetConfig+0x130>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00b      	beq.n	80084c0 <TIM_Base_SetConfig+0x100>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a12      	ldr	r2, [pc, #72]	; (80084f4 <TIM_Base_SetConfig+0x134>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d007      	beq.n	80084c0 <TIM_Base_SetConfig+0x100>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a11      	ldr	r2, [pc, #68]	; (80084f8 <TIM_Base_SetConfig+0x138>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_Base_SetConfig+0x100>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a0c      	ldr	r2, [pc, #48]	; (80084ec <TIM_Base_SetConfig+0x12c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d103      	bne.n	80084c8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	691a      	ldr	r2, [r3, #16]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	615a      	str	r2, [r3, #20]
}
 80084ce:	bf00      	nop
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40000400 	.word	0x40000400
 80084e4:	40000800 	.word	0x40000800
 80084e8:	40013400 	.word	0x40013400
 80084ec:	40015000 	.word	0x40015000
 80084f0:	40014000 	.word	0x40014000
 80084f4:	40014400 	.word	0x40014400
 80084f8:	40014800 	.word	0x40014800

080084fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b087      	sub	sp, #28
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	f023 0201 	bic.w	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800852a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4313      	orrs	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f023 0302 	bic.w	r3, r3, #2
 8008548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4313      	orrs	r3, r2
 8008552:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a30      	ldr	r2, [pc, #192]	; (8008618 <TIM_OC1_SetConfig+0x11c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d013      	beq.n	8008584 <TIM_OC1_SetConfig+0x88>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a2f      	ldr	r2, [pc, #188]	; (800861c <TIM_OC1_SetConfig+0x120>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d00f      	beq.n	8008584 <TIM_OC1_SetConfig+0x88>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a2e      	ldr	r2, [pc, #184]	; (8008620 <TIM_OC1_SetConfig+0x124>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00b      	beq.n	8008584 <TIM_OC1_SetConfig+0x88>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a2d      	ldr	r2, [pc, #180]	; (8008624 <TIM_OC1_SetConfig+0x128>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d007      	beq.n	8008584 <TIM_OC1_SetConfig+0x88>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a2c      	ldr	r2, [pc, #176]	; (8008628 <TIM_OC1_SetConfig+0x12c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d003      	beq.n	8008584 <TIM_OC1_SetConfig+0x88>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a2b      	ldr	r2, [pc, #172]	; (800862c <TIM_OC1_SetConfig+0x130>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d10c      	bne.n	800859e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f023 0308 	bic.w	r3, r3, #8
 800858a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f023 0304 	bic.w	r3, r3, #4
 800859c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a1d      	ldr	r2, [pc, #116]	; (8008618 <TIM_OC1_SetConfig+0x11c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d013      	beq.n	80085ce <TIM_OC1_SetConfig+0xd2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a1c      	ldr	r2, [pc, #112]	; (800861c <TIM_OC1_SetConfig+0x120>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d00f      	beq.n	80085ce <TIM_OC1_SetConfig+0xd2>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a1b      	ldr	r2, [pc, #108]	; (8008620 <TIM_OC1_SetConfig+0x124>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00b      	beq.n	80085ce <TIM_OC1_SetConfig+0xd2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a1a      	ldr	r2, [pc, #104]	; (8008624 <TIM_OC1_SetConfig+0x128>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d007      	beq.n	80085ce <TIM_OC1_SetConfig+0xd2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a19      	ldr	r2, [pc, #100]	; (8008628 <TIM_OC1_SetConfig+0x12c>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d003      	beq.n	80085ce <TIM_OC1_SetConfig+0xd2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a18      	ldr	r2, [pc, #96]	; (800862c <TIM_OC1_SetConfig+0x130>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d111      	bne.n	80085f2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	621a      	str	r2, [r3, #32]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	40012c00 	.word	0x40012c00
 800861c:	40013400 	.word	0x40013400
 8008620:	40014000 	.word	0x40014000
 8008624:	40014400 	.word	0x40014400
 8008628:	40014800 	.word	0x40014800
 800862c:	40015000 	.word	0x40015000

08008630 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	f023 0210 	bic.w	r2, r3, #16
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800865e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	f023 0320 	bic.w	r3, r3, #32
 800867e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	011b      	lsls	r3, r3, #4
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	4313      	orrs	r3, r2
 800868a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a2c      	ldr	r2, [pc, #176]	; (8008740 <TIM_OC2_SetConfig+0x110>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d007      	beq.n	80086a4 <TIM_OC2_SetConfig+0x74>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a2b      	ldr	r2, [pc, #172]	; (8008744 <TIM_OC2_SetConfig+0x114>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d003      	beq.n	80086a4 <TIM_OC2_SetConfig+0x74>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a2a      	ldr	r2, [pc, #168]	; (8008748 <TIM_OC2_SetConfig+0x118>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d10d      	bne.n	80086c0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	011b      	lsls	r3, r3, #4
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a1f      	ldr	r2, [pc, #124]	; (8008740 <TIM_OC2_SetConfig+0x110>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d013      	beq.n	80086f0 <TIM_OC2_SetConfig+0xc0>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a1e      	ldr	r2, [pc, #120]	; (8008744 <TIM_OC2_SetConfig+0x114>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00f      	beq.n	80086f0 <TIM_OC2_SetConfig+0xc0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a1e      	ldr	r2, [pc, #120]	; (800874c <TIM_OC2_SetConfig+0x11c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00b      	beq.n	80086f0 <TIM_OC2_SetConfig+0xc0>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a1d      	ldr	r2, [pc, #116]	; (8008750 <TIM_OC2_SetConfig+0x120>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d007      	beq.n	80086f0 <TIM_OC2_SetConfig+0xc0>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a1c      	ldr	r2, [pc, #112]	; (8008754 <TIM_OC2_SetConfig+0x124>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d003      	beq.n	80086f0 <TIM_OC2_SetConfig+0xc0>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a17      	ldr	r2, [pc, #92]	; (8008748 <TIM_OC2_SetConfig+0x118>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d113      	bne.n	8008718 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086f6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086fe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	4313      	orrs	r3, r2
 8008716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	697a      	ldr	r2, [r7, #20]
 8008730:	621a      	str	r2, [r3, #32]
}
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40012c00 	.word	0x40012c00
 8008744:	40013400 	.word	0x40013400
 8008748:	40015000 	.word	0x40015000
 800874c:	40014000 	.word	0x40014000
 8008750:	40014400 	.word	0x40014400
 8008754:	40014800 	.word	0x40014800

08008758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800878a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2b      	ldr	r2, [pc, #172]	; (8008864 <TIM_OC3_SetConfig+0x10c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d007      	beq.n	80087ca <TIM_OC3_SetConfig+0x72>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	4a2a      	ldr	r2, [pc, #168]	; (8008868 <TIM_OC3_SetConfig+0x110>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d003      	beq.n	80087ca <TIM_OC3_SetConfig+0x72>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a29      	ldr	r2, [pc, #164]	; (800886c <TIM_OC3_SetConfig+0x114>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d10d      	bne.n	80087e6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087e4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a1e      	ldr	r2, [pc, #120]	; (8008864 <TIM_OC3_SetConfig+0x10c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d013      	beq.n	8008816 <TIM_OC3_SetConfig+0xbe>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a1d      	ldr	r2, [pc, #116]	; (8008868 <TIM_OC3_SetConfig+0x110>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00f      	beq.n	8008816 <TIM_OC3_SetConfig+0xbe>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a1d      	ldr	r2, [pc, #116]	; (8008870 <TIM_OC3_SetConfig+0x118>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d00b      	beq.n	8008816 <TIM_OC3_SetConfig+0xbe>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a1c      	ldr	r2, [pc, #112]	; (8008874 <TIM_OC3_SetConfig+0x11c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d007      	beq.n	8008816 <TIM_OC3_SetConfig+0xbe>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a1b      	ldr	r2, [pc, #108]	; (8008878 <TIM_OC3_SetConfig+0x120>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d003      	beq.n	8008816 <TIM_OC3_SetConfig+0xbe>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a16      	ldr	r2, [pc, #88]	; (800886c <TIM_OC3_SetConfig+0x114>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d113      	bne.n	800883e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800881c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	695b      	ldr	r3, [r3, #20]
 800882a:	011b      	lsls	r3, r3, #4
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	4313      	orrs	r3, r2
 8008830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	011b      	lsls	r3, r3, #4
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	697a      	ldr	r2, [r7, #20]
 8008856:	621a      	str	r2, [r3, #32]
}
 8008858:	bf00      	nop
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	40012c00 	.word	0x40012c00
 8008868:	40013400 	.word	0x40013400
 800886c:	40015000 	.word	0x40015000
 8008870:	40014000 	.word	0x40014000
 8008874:	40014400 	.word	0x40014400
 8008878:	40014800 	.word	0x40014800

0800887c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	69db      	ldr	r3, [r3, #28]
 80088a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	031b      	lsls	r3, r3, #12
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <TIM_OC4_SetConfig+0xc8>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d013      	beq.n	8008908 <TIM_OC4_SetConfig+0x8c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a19      	ldr	r2, [pc, #100]	; (8008948 <TIM_OC4_SetConfig+0xcc>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00f      	beq.n	8008908 <TIM_OC4_SetConfig+0x8c>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a18      	ldr	r2, [pc, #96]	; (800894c <TIM_OC4_SetConfig+0xd0>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00b      	beq.n	8008908 <TIM_OC4_SetConfig+0x8c>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a17      	ldr	r2, [pc, #92]	; (8008950 <TIM_OC4_SetConfig+0xd4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d007      	beq.n	8008908 <TIM_OC4_SetConfig+0x8c>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a16      	ldr	r2, [pc, #88]	; (8008954 <TIM_OC4_SetConfig+0xd8>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_OC4_SetConfig+0x8c>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a15      	ldr	r2, [pc, #84]	; (8008958 <TIM_OC4_SetConfig+0xdc>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d109      	bne.n	800891c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800890e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	019b      	lsls	r3, r3, #6
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	621a      	str	r2, [r3, #32]
}
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40012c00 	.word	0x40012c00
 8008948:	40013400 	.word	0x40013400
 800894c:	40014000 	.word	0x40014000
 8008950:	40014400 	.word	0x40014400
 8008954:	40014800 	.word	0x40014800
 8008958:	40015000 	.word	0x40015000

0800895c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a1b      	ldr	r3, [r3, #32]
 800896a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800898a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80089a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	041b      	lsls	r3, r3, #16
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a19      	ldr	r2, [pc, #100]	; (8008a18 <TIM_OC5_SetConfig+0xbc>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <TIM_OC5_SetConfig+0x82>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a18      	ldr	r2, [pc, #96]	; (8008a1c <TIM_OC5_SetConfig+0xc0>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00f      	beq.n	80089de <TIM_OC5_SetConfig+0x82>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a17      	ldr	r2, [pc, #92]	; (8008a20 <TIM_OC5_SetConfig+0xc4>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00b      	beq.n	80089de <TIM_OC5_SetConfig+0x82>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a16      	ldr	r2, [pc, #88]	; (8008a24 <TIM_OC5_SetConfig+0xc8>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d007      	beq.n	80089de <TIM_OC5_SetConfig+0x82>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <TIM_OC5_SetConfig+0xcc>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_OC5_SetConfig+0x82>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a14      	ldr	r2, [pc, #80]	; (8008a2c <TIM_OC5_SetConfig+0xd0>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d109      	bne.n	80089f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	621a      	str	r2, [r3, #32]
}
 8008a0c:	bf00      	nop
 8008a0e:	371c      	adds	r7, #28
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	40012c00 	.word	0x40012c00
 8008a1c:	40013400 	.word	0x40013400
 8008a20:	40014000 	.word	0x40014000
 8008a24:	40014400 	.word	0x40014400
 8008a28:	40014800 	.word	0x40014800
 8008a2c:	40015000 	.word	0x40015000

08008a30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	021b      	lsls	r3, r3, #8
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	051b      	lsls	r3, r3, #20
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a1a      	ldr	r2, [pc, #104]	; (8008af0 <TIM_OC6_SetConfig+0xc0>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d013      	beq.n	8008ab4 <TIM_OC6_SetConfig+0x84>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a19      	ldr	r2, [pc, #100]	; (8008af4 <TIM_OC6_SetConfig+0xc4>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00f      	beq.n	8008ab4 <TIM_OC6_SetConfig+0x84>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a18      	ldr	r2, [pc, #96]	; (8008af8 <TIM_OC6_SetConfig+0xc8>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00b      	beq.n	8008ab4 <TIM_OC6_SetConfig+0x84>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a17      	ldr	r2, [pc, #92]	; (8008afc <TIM_OC6_SetConfig+0xcc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d007      	beq.n	8008ab4 <TIM_OC6_SetConfig+0x84>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a16      	ldr	r2, [pc, #88]	; (8008b00 <TIM_OC6_SetConfig+0xd0>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d003      	beq.n	8008ab4 <TIM_OC6_SetConfig+0x84>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a15      	ldr	r2, [pc, #84]	; (8008b04 <TIM_OC6_SetConfig+0xd4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d109      	bne.n	8008ac8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008aba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	029b      	lsls	r3, r3, #10
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	621a      	str	r2, [r3, #32]
}
 8008ae2:	bf00      	nop
 8008ae4:	371c      	adds	r7, #28
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	40012c00 	.word	0x40012c00
 8008af4:	40013400 	.word	0x40013400
 8008af8:	40014000 	.word	0x40014000
 8008afc:	40014400 	.word	0x40014400
 8008b00:	40014800 	.word	0x40014800
 8008b04:	40015000 	.word	0x40015000

08008b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b087      	sub	sp, #28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1b      	ldr	r3, [r3, #32]
 8008b1e:	f023 0201 	bic.w	r2, r3, #1
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f023 030a 	bic.w	r3, r3, #10
 8008b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	621a      	str	r2, [r3, #32]
}
 8008b5a:	bf00      	nop
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b087      	sub	sp, #28
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	60b9      	str	r1, [r7, #8]
 8008b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	f023 0210 	bic.w	r2, r3, #16
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	697a      	ldr	r2, [r7, #20]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	011b      	lsls	r3, r3, #4
 8008ba8:	693a      	ldr	r2, [r7, #16]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b085      	sub	sp, #20
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bde:	683a      	ldr	r2, [r7, #0]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f043 0307 	orr.w	r3, r3, #7
 8008be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	609a      	str	r2, [r3, #8]
}
 8008bf0:	bf00      	nop
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	021a      	lsls	r2, r3, #8
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	609a      	str	r2, [r3, #8]
}
 8008c30:	bf00      	nop
 8008c32:	371c      	adds	r7, #28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	2201      	movs	r2, #1
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	401a      	ands	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a1a      	ldr	r2, [r3, #32]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f003 031f 	and.w	r3, r3, #31
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	fa01 f303 	lsl.w	r3, r1, r3
 8008c74:	431a      	orrs	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	621a      	str	r2, [r3, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e06d      	b.n	8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a30      	ldr	r2, [pc, #192]	; (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d009      	beq.n	8008cde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a2f      	ldr	r2, [pc, #188]	; (8008d8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d004      	beq.n	8008cde <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a2d      	ldr	r2, [pc, #180]	; (8008d90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d108      	bne.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ce4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a1e      	ldr	r2, [pc, #120]	; (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d01d      	beq.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d1c:	d018      	beq.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a1c      	ldr	r2, [pc, #112]	; (8008d94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d013      	beq.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1a      	ldr	r2, [pc, #104]	; (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00e      	beq.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a15      	ldr	r2, [pc, #84]	; (8008d8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d009      	beq.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d004      	beq.n	8008d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a11      	ldr	r2, [pc, #68]	; (8008d90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d10c      	bne.n	8008d6a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr
 8008d88:	40012c00 	.word	0x40012c00
 8008d8c:	40013400 	.word	0x40013400
 8008d90:	40015000 	.word	0x40015000
 8008d94:	40000400 	.word	0x40000400
 8008d98:	40000800 	.word	0x40000800
 8008d9c:	40014000 	.word	0x40014000

08008da0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d101      	bne.n	8008dbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008db8:	2302      	movs	r3, #2
 8008dba:	e06a      	b.n	8008e92 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	041b      	lsls	r3, r3, #16
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a19      	ldr	r2, [pc, #100]	; (8008ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d009      	beq.n	8008e54 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a17      	ldr	r2, [pc, #92]	; (8008ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d004      	beq.n	8008e54 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a16      	ldr	r2, [pc, #88]	; (8008ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d115      	bne.n	8008e80 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	051b      	lsls	r3, r3, #20
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	40012c00 	.word	0x40012c00
 8008ea4:	40013400 	.word	0x40013400
 8008ea8:	40015000 	.word	0x40015000

08008eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <__errno>:
 8008ee8:	4b01      	ldr	r3, [pc, #4]	; (8008ef0 <__errno+0x8>)
 8008eea:	6818      	ldr	r0, [r3, #0]
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20000074 	.word	0x20000074

08008ef4 <__libc_init_array>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4d0d      	ldr	r5, [pc, #52]	; (8008f2c <__libc_init_array+0x38>)
 8008ef8:	4c0d      	ldr	r4, [pc, #52]	; (8008f30 <__libc_init_array+0x3c>)
 8008efa:	1b64      	subs	r4, r4, r5
 8008efc:	10a4      	asrs	r4, r4, #2
 8008efe:	2600      	movs	r6, #0
 8008f00:	42a6      	cmp	r6, r4
 8008f02:	d109      	bne.n	8008f18 <__libc_init_array+0x24>
 8008f04:	4d0b      	ldr	r5, [pc, #44]	; (8008f34 <__libc_init_array+0x40>)
 8008f06:	4c0c      	ldr	r4, [pc, #48]	; (8008f38 <__libc_init_array+0x44>)
 8008f08:	f000 f8da 	bl	80090c0 <_init>
 8008f0c:	1b64      	subs	r4, r4, r5
 8008f0e:	10a4      	asrs	r4, r4, #2
 8008f10:	2600      	movs	r6, #0
 8008f12:	42a6      	cmp	r6, r4
 8008f14:	d105      	bne.n	8008f22 <__libc_init_array+0x2e>
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f1c:	4798      	blx	r3
 8008f1e:	3601      	adds	r6, #1
 8008f20:	e7ee      	b.n	8008f00 <__libc_init_array+0xc>
 8008f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f26:	4798      	blx	r3
 8008f28:	3601      	adds	r6, #1
 8008f2a:	e7f2      	b.n	8008f12 <__libc_init_array+0x1e>
 8008f2c:	08009108 	.word	0x08009108
 8008f30:	08009108 	.word	0x08009108
 8008f34:	08009108 	.word	0x08009108
 8008f38:	0800910c 	.word	0x0800910c

08008f3c <malloc>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <malloc+0xc>)
 8008f3e:	4601      	mov	r1, r0
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	f000 b82b 	b.w	8008f9c <_malloc_r>
 8008f46:	bf00      	nop
 8008f48:	20000074 	.word	0x20000074

08008f4c <memset>:
 8008f4c:	4402      	add	r2, r0
 8008f4e:	4603      	mov	r3, r0
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d100      	bne.n	8008f56 <memset+0xa>
 8008f54:	4770      	bx	lr
 8008f56:	f803 1b01 	strb.w	r1, [r3], #1
 8008f5a:	e7f9      	b.n	8008f50 <memset+0x4>

08008f5c <sbrk_aligned>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4e0e      	ldr	r6, [pc, #56]	; (8008f98 <sbrk_aligned+0x3c>)
 8008f60:	460c      	mov	r4, r1
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	4605      	mov	r5, r0
 8008f66:	b911      	cbnz	r1, 8008f6e <sbrk_aligned+0x12>
 8008f68:	f000 f88c 	bl	8009084 <_sbrk_r>
 8008f6c:	6030      	str	r0, [r6, #0]
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f000 f887 	bl	8009084 <_sbrk_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d00a      	beq.n	8008f90 <sbrk_aligned+0x34>
 8008f7a:	1cc4      	adds	r4, r0, #3
 8008f7c:	f024 0403 	bic.w	r4, r4, #3
 8008f80:	42a0      	cmp	r0, r4
 8008f82:	d007      	beq.n	8008f94 <sbrk_aligned+0x38>
 8008f84:	1a21      	subs	r1, r4, r0
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 f87c 	bl	8009084 <_sbrk_r>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d101      	bne.n	8008f94 <sbrk_aligned+0x38>
 8008f90:	f04f 34ff 	mov.w	r4, #4294967295
 8008f94:	4620      	mov	r0, r4
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	200004c8 	.word	0x200004c8

08008f9c <_malloc_r>:
 8008f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa0:	1ccd      	adds	r5, r1, #3
 8008fa2:	f025 0503 	bic.w	r5, r5, #3
 8008fa6:	3508      	adds	r5, #8
 8008fa8:	2d0c      	cmp	r5, #12
 8008faa:	bf38      	it	cc
 8008fac:	250c      	movcc	r5, #12
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	4607      	mov	r7, r0
 8008fb2:	db01      	blt.n	8008fb8 <_malloc_r+0x1c>
 8008fb4:	42a9      	cmp	r1, r5
 8008fb6:	d905      	bls.n	8008fc4 <_malloc_r+0x28>
 8008fb8:	230c      	movs	r3, #12
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	2600      	movs	r6, #0
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fc4:	4e2e      	ldr	r6, [pc, #184]	; (8009080 <_malloc_r+0xe4>)
 8008fc6:	f000 f86d 	bl	80090a4 <__malloc_lock>
 8008fca:	6833      	ldr	r3, [r6, #0]
 8008fcc:	461c      	mov	r4, r3
 8008fce:	bb34      	cbnz	r4, 800901e <_malloc_r+0x82>
 8008fd0:	4629      	mov	r1, r5
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f7ff ffc2 	bl	8008f5c <sbrk_aligned>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	4604      	mov	r4, r0
 8008fdc:	d14d      	bne.n	800907a <_malloc_r+0xde>
 8008fde:	6834      	ldr	r4, [r6, #0]
 8008fe0:	4626      	mov	r6, r4
 8008fe2:	2e00      	cmp	r6, #0
 8008fe4:	d140      	bne.n	8009068 <_malloc_r+0xcc>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4638      	mov	r0, r7
 8008fec:	eb04 0803 	add.w	r8, r4, r3
 8008ff0:	f000 f848 	bl	8009084 <_sbrk_r>
 8008ff4:	4580      	cmp	r8, r0
 8008ff6:	d13a      	bne.n	800906e <_malloc_r+0xd2>
 8008ff8:	6821      	ldr	r1, [r4, #0]
 8008ffa:	3503      	adds	r5, #3
 8008ffc:	1a6d      	subs	r5, r5, r1
 8008ffe:	f025 0503 	bic.w	r5, r5, #3
 8009002:	3508      	adds	r5, #8
 8009004:	2d0c      	cmp	r5, #12
 8009006:	bf38      	it	cc
 8009008:	250c      	movcc	r5, #12
 800900a:	4629      	mov	r1, r5
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff ffa5 	bl	8008f5c <sbrk_aligned>
 8009012:	3001      	adds	r0, #1
 8009014:	d02b      	beq.n	800906e <_malloc_r+0xd2>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	442b      	add	r3, r5
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	e00e      	b.n	800903c <_malloc_r+0xa0>
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	1b52      	subs	r2, r2, r5
 8009022:	d41e      	bmi.n	8009062 <_malloc_r+0xc6>
 8009024:	2a0b      	cmp	r2, #11
 8009026:	d916      	bls.n	8009056 <_malloc_r+0xba>
 8009028:	1961      	adds	r1, r4, r5
 800902a:	42a3      	cmp	r3, r4
 800902c:	6025      	str	r5, [r4, #0]
 800902e:	bf18      	it	ne
 8009030:	6059      	strne	r1, [r3, #4]
 8009032:	6863      	ldr	r3, [r4, #4]
 8009034:	bf08      	it	eq
 8009036:	6031      	streq	r1, [r6, #0]
 8009038:	5162      	str	r2, [r4, r5]
 800903a:	604b      	str	r3, [r1, #4]
 800903c:	4638      	mov	r0, r7
 800903e:	f104 060b 	add.w	r6, r4, #11
 8009042:	f000 f835 	bl	80090b0 <__malloc_unlock>
 8009046:	f026 0607 	bic.w	r6, r6, #7
 800904a:	1d23      	adds	r3, r4, #4
 800904c:	1af2      	subs	r2, r6, r3
 800904e:	d0b6      	beq.n	8008fbe <_malloc_r+0x22>
 8009050:	1b9b      	subs	r3, r3, r6
 8009052:	50a3      	str	r3, [r4, r2]
 8009054:	e7b3      	b.n	8008fbe <_malloc_r+0x22>
 8009056:	6862      	ldr	r2, [r4, #4]
 8009058:	42a3      	cmp	r3, r4
 800905a:	bf0c      	ite	eq
 800905c:	6032      	streq	r2, [r6, #0]
 800905e:	605a      	strne	r2, [r3, #4]
 8009060:	e7ec      	b.n	800903c <_malloc_r+0xa0>
 8009062:	4623      	mov	r3, r4
 8009064:	6864      	ldr	r4, [r4, #4]
 8009066:	e7b2      	b.n	8008fce <_malloc_r+0x32>
 8009068:	4634      	mov	r4, r6
 800906a:	6876      	ldr	r6, [r6, #4]
 800906c:	e7b9      	b.n	8008fe2 <_malloc_r+0x46>
 800906e:	230c      	movs	r3, #12
 8009070:	603b      	str	r3, [r7, #0]
 8009072:	4638      	mov	r0, r7
 8009074:	f000 f81c 	bl	80090b0 <__malloc_unlock>
 8009078:	e7a1      	b.n	8008fbe <_malloc_r+0x22>
 800907a:	6025      	str	r5, [r4, #0]
 800907c:	e7de      	b.n	800903c <_malloc_r+0xa0>
 800907e:	bf00      	nop
 8009080:	200004c4 	.word	0x200004c4

08009084 <_sbrk_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d06      	ldr	r5, [pc, #24]	; (80090a0 <_sbrk_r+0x1c>)
 8009088:	2300      	movs	r3, #0
 800908a:	4604      	mov	r4, r0
 800908c:	4608      	mov	r0, r1
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	f7f9 fdfc 	bl	8002c8c <_sbrk>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_sbrk_r+0x1a>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_sbrk_r+0x1a>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	200004cc 	.word	0x200004cc

080090a4 <__malloc_lock>:
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <__malloc_lock+0x8>)
 80090a6:	f000 b809 	b.w	80090bc <__retarget_lock_acquire_recursive>
 80090aa:	bf00      	nop
 80090ac:	200004d0 	.word	0x200004d0

080090b0 <__malloc_unlock>:
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <__malloc_unlock+0x8>)
 80090b2:	f000 b804 	b.w	80090be <__retarget_lock_release_recursive>
 80090b6:	bf00      	nop
 80090b8:	200004d0 	.word	0x200004d0

080090bc <__retarget_lock_acquire_recursive>:
 80090bc:	4770      	bx	lr

080090be <__retarget_lock_release_recursive>:
 80090be:	4770      	bx	lr

080090c0 <_init>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr

080090cc <_fini>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	bf00      	nop
 80090d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d2:	bc08      	pop	{r3}
 80090d4:	469e      	mov	lr, r3
 80090d6:	4770      	bx	lr
